static	O
avail_elem	struct(int,long)
get_elem	(int,array(struct(int,long)),*(int))->(struct(int,long))
(	O
int	O
,	O
avail_elem	struct(int,long)
[	O
]	O
,	O
int	O
*	O
)	O
;	O
static	O
avail_elem	struct(int,long)
get_block	(int,*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)))->(struct(int,long))
(	O
int	O
,	O
GDBM_FILE	*(struct)
)	O
;	O
static	O
int	O
push_avail_block	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)))->(int)
(	O
GDBM_FILE	*(struct)
)	O
;	O
static	O
int	O
pop_avail_block	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)))->(int)
(	O
GDBM_FILE	*(struct)
)	O
;	O
static	O
int	O
adjust_bucket_avail	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)))->(int)
(	O
GDBM_FILE	*(struct)
)	O
;	O
off_t	long
_gdbm_alloc	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),int)->(long)
(	O
GDBM_FILE	*(struct)
dbf	*(struct)
,	O
int	O
num_bytes	int
)	O
{	O
off_t	long
file_adr	long
;	O
avail_elem	struct(int,long)
av_el	struct(int,long)
;	O
av_el	struct(int,long)
=	O
get_elem	(int,array(struct(int,long)),*(int))->(struct(int,long))
(	O
num_bytes	int
,	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
bucket_avail	array(struct(int,long))
,	O
&	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
av_count	int
)	O
;	O
if	O
(	O
av_el	struct(int,long)
.	O
av_size	int
==	O
0	int
)	O
{	O
if	O
(	O
(	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
count	int
<=	O
(	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
size	int
>>	O
1	int
)	O
)	O
&&	O
(	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
next_block	long
!=	O
0	int
)	O
)	O
if	O
(	O
pop_avail_block	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)))->(int)
(	O
dbf	*(struct)
)	O
)	O
return	O
0	int
;	O
av_el	struct(int,long)
=	O
get_elem	(int,array(struct(int,long)),*(int))->(struct(int,long))
(	O
num_bytes	int
,	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
av_table	array(struct(int,long))
,	O
&	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
count	int
)	O
;	O
if	O
(	O
av_el	struct(int,long)
.	O
av_size	int
==	O
0	int
)	O
av_el	struct(int,long)
=	O
get_block	(int,*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)))->(struct(int,long))
(	O
num_bytes	int
,	O
dbf	*(struct)
)	O
;	O
dbf	*(struct)
->	O
header_changed	int
=	O
TRUE	int
;	O
}	O
file_adr	long
=	O
av_el	struct(int,long)
.	O
av_adr	long
;	O
av_el	struct(int,long)
.	O
av_adr	long
+=	O
num_bytes	int
;	O
av_el	struct(int,long)
.	O
av_size	int
-=	O
num_bytes	int
;	O
if	O
(	O
_gdbm_free	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),long,int)->(int)
(	O
dbf	*(struct)
,	O
av_el	struct(int,long)
.	O
av_adr	long
,	O
av_el	struct(int,long)
.	O
av_size	int
)	O
)	O
return	O
0	int
;	O
return	O
file_adr	long
;	O
}	O
int	O
_gdbm_free	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),long,int)->(int)
(	O
GDBM_FILE	*(struct)
dbf	*(struct)
,	O
off_t	long
file_adr	long
,	O
int	O
num_bytes	int
)	O
{	O
avail_elem	struct(int,long)
temp	struct(int,long)
;	O
if	O
(	O
num_bytes	int
<=	O
IGNORE_SIZE	int
)	O
return	O
0	int
;	O
temp	struct(int,long)
.	O
av_size	int
=	O
num_bytes	int
;	O
temp	struct(int,long)
.	O
av_adr	long
=	O
file_adr	long
;	O
if	O
(	O
(	O
num_bytes	int
>=	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
block_size	int
)	O
||	O
dbf	*(struct)
->	O
central_free	int
)	O
{	O
if	O
(	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
count	int
==	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
size	int
)	O
{	O
if	O
(	O
push_avail_block	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)))->(int)
(	O
dbf	*(struct)
)	O
)	O
return	O
-	O
1	int
;	O
}	O
_gdbm_put_av_elem	(struct(int,long),array(struct(int,long)),*(int),int)->(void)
(	O
temp	struct(int,long)
,	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
av_table	array(struct(int,long))
,	O
&	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
count	int
,	O
dbf	*(struct)
->	O
coalesce_blocks	int
)	O
;	O
dbf	*(struct)
->	O
header_changed	int
=	O
TRUE	int
;	O
}	O
else	O
{	O
if	O
(	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
av_count	int
<	O
BUCKET_AVAIL	int
)	O
_gdbm_put_av_elem	(struct(int,long),array(struct(int,long)),*(int),int)->(void)
(	O
temp	struct(int,long)
,	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
bucket_avail	array(struct(int,long))
,	O
&	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
av_count	int
,	O
dbf	*(struct)
->	O
coalesce_blocks	int
)	O
;	O
else	O
{	O
if	O
(	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
count	int
==	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
size	int
)	O
{	O
if	O
(	O
push_avail_block	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)))->(int)
(	O
dbf	*(struct)
)	O
)	O
return	O
-	O
1	int
;	O
}	O
_gdbm_put_av_elem	(struct(int,long),array(struct(int,long)),*(int),int)->(void)
(	O
temp	struct(int,long)
,	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
av_table	array(struct(int,long))
,	O
&	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
count	int
,	O
dbf	*(struct)
->	O
coalesce_blocks	int
)	O
;	O
dbf	*(struct)
->	O
header_changed	int
=	O
TRUE	int
;	O
}	O
}	O
if	O
(	O
dbf	*(struct)
->	O
header_changed	int
&&	O
adjust_bucket_avail	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)))->(int)
(	O
dbf	*(struct)
)	O
)	O
return	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
pop_avail_block	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)))->(int)
(	O
GDBM_FILE	*(struct)
dbf	*(struct)
)	O
{	O
int	O
rc	int
;	O
off_t	long
file_pos	long
;	O
avail_elem	struct(int,long)
new_el	struct(int,long)
;	O
avail_block	struct(int,int,long,array(struct(int,long)))
*	O
new_blk	*(struct(int,int,long,array(struct(int,long))))
;	O
int	O
index	(*(char),int)->(*(char))
;	O
if	O
(	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
count	int
==	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
size	int
)	O
{	O
if	O
(	O
push_avail_block	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)))->(int)
(	O
dbf	*(struct)
)	O
)	O
return	O
-	O
1	int
;	O
}	O
new_el	struct(int,long)
.	O
av_adr	long
=	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
next_block	long
;	O
new_el	struct(int,long)
.	O
av_size	int
=	O
(	O
(	O
(	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
size	int
*	O
sizeof	O
(	O
avail_elem	struct(int,long)
)	O
)	O
>>	O
1	int
)	O
+	O
sizeof	O
(	O
avail_block	struct(int,int,long,array(struct(int,long)))
)	O
)	O
;	O
new_blk	*(struct(int,int,long,array(struct(int,long))))
=	O
malloc	(long)->(*(void))
(	O
new_el	struct(int,long)
.	O
av_size	int
)	O
;	O
if	O
(	O
new_blk	*(struct(int,int,long,array(struct(int,long))))
==	O
NULL	O
)	O
{	O
GDBM_SET_ERRNO	O
(	O
dbf	*(struct)
,	O
GDBM_MALLOC_ERROR	int
,	O
TRUE	int
)	O
;	O
_gdbm_fatal	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),*(char))->(void)
(	O
dbf	*(struct)
,	O
_	O
(	O
"malloc failed"	*(char)
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
file_pos	long
=	O
gdbm_file_seek	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),long,int)->(long)
(	O
dbf	*(struct)
,	O
new_el	struct(int,long)
.	O
av_adr	long
,	O
SEEK_SET	int
)	O
;	O
if	O
(	O
file_pos	long
!=	O
new_el	struct(int,long)
.	O
av_adr	long
)	O
{	O
GDBM_SET_ERRNO	O
(	O
dbf	*(struct)
,	O
GDBM_FILE_SEEK_ERROR	int
,	O
TRUE	int
)	O
;	O
free	(*(void))->(void)
(	O
new_blk	*(struct(int,int,long,array(struct(int,long))))
)	O
;	O
_gdbm_fatal	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),*(char))->(void)
(	O
dbf	*(struct)
,	O
_	O
(	O
"lseek error"	*(char)
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
rc	int
=	O
_gdbm_full_read	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),*(void),long)->(int)
(	O
dbf	*(struct)
,	O
new_blk	*(struct(int,int,long,array(struct(int,long))))
,	O
new_el	struct(int,long)
.	O
av_size	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	(*(void))->(void)
(	O
new_blk	*(struct(int,int,long,array(struct(int,long))))
)	O
;	O
_gdbm_fatal	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),*(char))->(void)
(	O
dbf	*(struct)
,	O
gdbm_db_strerror	(*(struct))->(*(char))
(	O
dbf	*(struct)
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
gdbm_avail_block_validate	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),*(struct(int,int,long,array(struct(int,long)))))->(int)
(	O
dbf	*(struct)
,	O
new_blk	*(struct(int,int,long,array(struct(int,long))))
)	O
)	O
{	O
free	(*(void))->(void)
(	O
new_blk	*(struct(int,int,long,array(struct(int,long))))
)	O
;	O
_gdbm_fatal	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),*(char))->(void)
(	O
dbf	*(struct)
,	O
gdbm_db_strerror	(*(struct))->(*(char))
(	O
dbf	*(struct)
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
index	(*(char),int)->(*(char))
=	O
0	int
;	O
while	O
(	O
index	(*(char),int)->(*(char))
<	O
new_blk	*(struct(int,int,long,array(struct(int,long))))
->	O
count	int
)	O
{	O
while	O
(	O
index	(*(char),int)->(*(char))
<	O
new_blk	*(struct(int,int,long,array(struct(int,long))))
->	O
count	int
&&	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
count	int
<	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
size	int
)	O
{	O
_gdbm_put_av_elem	(struct(int,long),array(struct(int,long)),*(int),int)->(void)
(	O
new_blk	*(struct(int,int,long,array(struct(int,long))))
->	O
av_table	array(struct(int,long))
[	O
index	(*(char),int)->(*(char))
]	O
,	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
av_table	array(struct(int,long))
,	O
&	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
count	int
,	O
TRUE	int
)	O
;	O
index	(*(char),int)->(*(char))
++	O
;	O
}	O
if	O
(	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
count	int
==	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
size	int
)	O
{	O
if	O
(	O
push_avail_block	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)))->(int)
(	O
dbf	*(struct)
)	O
)	O
{	O
free	(*(void))->(void)
(	O
new_blk	*(struct(int,int,long,array(struct(int,long))))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
}	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
next_block	long
=	O
new_blk	*(struct(int,int,long,array(struct(int,long))))
->	O
next_block	long
;	O
dbf	*(struct)
->	O
header_changed	int
=	O
TRUE	int
;	O
if	O
(	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
count	int
==	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
size	int
)	O
{	O
if	O
(	O
push_avail_block	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)))->(int)
(	O
dbf	*(struct)
)	O
)	O
{	O
free	(*(void))->(void)
(	O
new_blk	*(struct(int,int,long,array(struct(int,long))))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
_gdbm_put_av_elem	(struct(int,long),array(struct(int,long)),*(int),int)->(void)
(	O
new_el	struct(int,long)
,	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
av_table	array(struct(int,long))
,	O
&	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
count	int
,	O
TRUE	int
)	O
;	O
free	(*(void))->(void)
(	O
new_blk	*(struct(int,int,long,array(struct(int,long))))
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
push_avail_block	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)))->(int)
(	O
GDBM_FILE	*(struct)
dbf	*(struct)
)	O
{	O
int	O
av_size	int
;	O
off_t	long
av_adr	long
;	O
int	O
index	(*(char),int)->(*(char))
;	O
off_t	long
file_pos	long
;	O
avail_block	struct(int,int,long,array(struct(int,long)))
*	O
temp	struct(int,long)
;	O
avail_elem	struct(int,long)
new_loc	struct(int,long)
;	O
int	O
rc	int
;	O
av_size	int
=	O
(	O
(	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
size	int
*	O
sizeof	O
(	O
avail_elem	struct(int,long)
)	O
)	O
>>	O
1	int
)	O
+	O
sizeof	O
(	O
avail_block	struct(int,int,long,array(struct(int,long)))
)	O
;	O
new_loc	struct(int,long)
=	O
get_elem	(int,array(struct(int,long)),*(int))->(struct(int,long))
(	O
av_size	int
,	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
av_table	array(struct(int,long))
,	O
&	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
count	int
)	O
;	O
if	O
(	O
new_loc	struct(int,long)
.	O
av_size	int
==	O
0	int
)	O
new_loc	struct(int,long)
=	O
get_block	(int,*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)))->(struct(int,long))
(	O
av_size	int
,	O
dbf	*(struct)
)	O
;	O
av_adr	long
=	O
new_loc	struct(int,long)
.	O
av_adr	long
;	O
temp	struct(int,long)
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
av_size	int
)	O
;	O
if	O
(	O
temp	struct(int,long)
==	O
NULL	O
)	O
{	O
GDBM_SET_ERRNO	O
(	O
dbf	*(struct)
,	O
GDBM_MALLOC_ERROR	int
,	O
TRUE	int
)	O
;	O
_gdbm_fatal	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),*(char))->(void)
(	O
dbf	*(struct)
,	O
_	O
(	O
"malloc error"	*(char)
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
temp	struct(int,long)
->	O
size	int
=	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
size	int
;	O
temp	struct(int,long)
->	O
count	int
=	O
0	int
;	O
temp	struct(int,long)
->	O
next_block	long
=	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
next_block	long
;	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
next_block	long
=	O
av_adr	long
;	O
for	O
(	O
index	(*(char),int)->(*(char))
=	O
1	int
;	O
index	(*(char),int)->(*(char))
<	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
count	int
;	O
index	(*(char),int)->(*(char))
++	O
)	O
if	O
(	O
(	O
index	(*(char),int)->(*(char))
&	O
0x1	int
)	O
==	O
1	int
)	O
temp	struct(int,long)
->	O
av_table	array(struct(int,long))
[	O
temp	struct(int,long)
->	O
count	int
++	O
]	O
=	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
av_table	array(struct(int,long))
[	O
index	(*(char),int)->(*(char))
]	O
;	O
else	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
av_table	array(struct(int,long))
[	O
index	(*(char),int)->(*(char))
>>	O
1	int
]	O
=	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
av_table	array(struct(int,long))
[	O
index	(*(char),int)->(*(char))
]	O
;	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
count	int
>>=	O
1	int
;	O
rc	int
=	O
0	int
;	O
do	O
{	O
new_loc	struct(int,long)
.	O
av_adr	long
+=	O
av_size	int
;	O
new_loc	struct(int,long)
.	O
av_size	int
-=	O
av_size	int
;	O
if	O
(	O
_gdbm_free	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),long,int)->(int)
(	O
dbf	*(struct)
,	O
new_loc	struct(int,long)
.	O
av_adr	long
,	O
new_loc	struct(int,long)
.	O
av_size	int
)	O
)	O
{	O
rc	int
=	O
-	O
1	int
;	O
break	O
;	O
}	O
file_pos	long
=	O
gdbm_file_seek	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),long,int)->(long)
(	O
dbf	*(struct)
,	O
av_adr	long
,	O
SEEK_SET	int
)	O
;	O
if	O
(	O
file_pos	long
!=	O
av_adr	long
)	O
{	O
GDBM_SET_ERRNO	O
(	O
dbf	*(struct)
,	O
GDBM_FILE_SEEK_ERROR	int
,	O
TRUE	int
)	O
;	O
_gdbm_fatal	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),*(char))->(void)
(	O
dbf	*(struct)
,	O
_	O
(	O
"lseek error"	*(char)
)	O
)	O
;	O
rc	int
=	O
-	O
1	int
;	O
break	O
;	O
}	O
rc	int
=	O
_gdbm_full_write	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),*(void),long)->(int)
(	O
dbf	*(struct)
,	O
temp	struct(int,long)
,	O
av_size	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_STORE	O
|	O
GDBM_DEBUG_ERR	O
,	O
"%s: error writing avail data: %s"	*(char)
,	O
dbf	*(struct)
->	O
name	*(char)
,	O
gdbm_db_strerror	(*(struct))->(*(char))
(	O
dbf	*(struct)
)	O
)	O
;	O
_gdbm_fatal	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),*(char))->(void)
(	O
dbf	*(struct)
,	O
gdbm_db_strerror	(*(struct))->(*(char))
(	O
dbf	*(struct)
)	O
)	O
;	O
rc	int
=	O
-	O
1	int
;	O
}	O
}	O
while	O
(	O
0	int
)	O
;	O
free	(*(void))->(void)
(	O
temp	struct(int,long)
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
avail_lookup	(int,*(struct(int,long)),int)->(int)
(	O
int	O
size	int
,	O
avail_elem	struct(int,long)
*	O
av_table	array(struct(int,long))
,	O
int	O
count	int
)	O
{	O
int	O
start	int
=	O
0	int
;	O
while	O
(	O
count	int
>	O
0	int
)	O
{	O
int	O
pivot	int
=	O
start	int
+	O
(	O
count	int
>>	O
1	int
)	O
;	O
if	O
(	O
size	int
==	O
av_table	array(struct(int,long))
[	O
pivot	int
]	O
.	O
av_size	int
)	O
return	O
pivot	int
;	O
if	O
(	O
size	int
>	O
av_table	array(struct(int,long))
[	O
pivot	int
]	O
.	O
av_size	int
)	O
{	O
start	int
=	O
pivot	int
+	O
1	int
;	O
count	int
--	O
;	O
}	O
count	int
>>=	O
1	int
;	O
}	O
return	O
start	int
;	O
}	O
static	O
inline	O
void	O
avail_move	(*(struct(int,long)),*(int),int,int)->(void)
(	O
avail_elem	struct(int,long)
*	O
av_table	array(struct(int,long))
,	O
int	O
*	O
av_count	int
,	O
int	O
src	*(struct)
,	O
int	O
dst	*(struct)
)	O
{	O
memmove	(*(void),*(void),long)->(*(void))
(	O
av_table	array(struct(int,long))
+	O
dst	*(struct)
,	O
av_table	array(struct(int,long))
+	O
src	*(struct)
,	O
(	O
*	O
av_count	int
-	O
src	*(struct)
)	O
*	O
sizeof	O
av_table	array(struct(int,long))
[	O
0	int
]	O
)	O
;	O
*	O
av_count	int
+=	O
dst	*(struct)
-	O
src	*(struct)
;	O
}	O
static	O
avail_elem	struct(int,long)
get_elem	(int,array(struct(int,long)),*(int))->(struct(int,long))
(	O
int	O
size	int
,	O
avail_elem	struct(int,long)
av_table	array(struct(int,long))
[	O
]	O
,	O
int	O
*	O
av_count	int
)	O
{	O
int	O
index	(*(char),int)->(*(char))
;	O
avail_elem	struct(int,long)
val	struct(int,long)
;	O
val	struct(int,long)
.	O
av_adr	long
=	O
0	int
;	O
val	struct(int,long)
.	O
av_size	int
=	O
0	int
;	O
index	(*(char),int)->(*(char))
=	O
avail_lookup	(int,*(struct(int,long)),int)->(int)
(	O
size	int
,	O
av_table	array(struct(int,long))
,	O
*	O
av_count	int
)	O
;	O
if	O
(	O
index	(*(char),int)->(*(char))
>=	O
*	O
av_count	int
)	O
return	O
val	struct(int,long)
;	O
val	struct(int,long)
=	O
av_table	array(struct(int,long))
[	O
index	(*(char),int)->(*(char))
]	O
;	O
avail_move	(*(struct(int,long)),*(int),int,int)->(void)
(	O
av_table	array(struct(int,long))
,	O
av_count	int
,	O
index	(*(char),int)->(*(char))
+	O
1	int
,	O
index	(*(char),int)->(*(char))
)	O
;	O
return	O
val	struct(int,long)
;	O
}	O
void	O
_gdbm_put_av_elem	(struct(int,long),array(struct(int,long)),*(int),int)->(void)
(	O
avail_elem	struct(int,long)
new_el	struct(int,long)
,	O
avail_elem	struct(int,long)
av_table	array(struct(int,long))
[	O
]	O
,	O
int	O
*	O
av_count	int
,	O
int	O
can_merge	int
)	O
{	O
int	O
index	(*(char),int)->(*(char))
;	O
if	O
(	O
new_el	struct(int,long)
.	O
av_size	int
<=	O
IGNORE_SIZE	int
)	O
return	O
;	O
if	O
(	O
can_merge	int
==	O
TRUE	int
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
*	O
av_count	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
(	O
av_table	array(struct(int,long))
[	O
i	int
]	O
.	O
av_adr	long
+	O
av_table	array(struct(int,long))
[	O
i	int
]	O
.	O
av_size	int
)	O
==	O
new_el	struct(int,long)
.	O
av_adr	long
)	O
{	O
new_el	struct(int,long)
.	O
av_size	int
+=	O
av_table	array(struct(int,long))
[	O
i	int
]	O
.	O
av_size	int
;	O
new_el	struct(int,long)
.	O
av_adr	long
=	O
av_table	array(struct(int,long))
[	O
i	int
]	O
.	O
av_adr	long
;	O
avail_move	(*(struct(int,long)),*(int),int,int)->(void)
(	O
av_table	array(struct(int,long))
,	O
av_count	int
,	O
i	int
+	O
1	int
,	O
i	int
)	O
;	O
--	O
i	int
;	O
}	O
if	O
(	O
(	O
new_el	struct(int,long)
.	O
av_adr	long
+	O
new_el	struct(int,long)
.	O
av_size	int
)	O
==	O
av_table	array(struct(int,long))
[	O
i	int
]	O
.	O
av_adr	long
)	O
{	O
new_el	struct(int,long)
.	O
av_size	int
+=	O
av_table	array(struct(int,long))
[	O
i	int
]	O
.	O
av_size	int
;	O
avail_move	(*(struct(int,long)),*(int),int,int)->(void)
(	O
av_table	array(struct(int,long))
,	O
av_count	int
,	O
i	int
+	O
1	int
,	O
i	int
)	O
;	O
--	O
i	int
;	O
}	O
}	O
}	O
index	(*(char),int)->(*(char))
=	O
avail_lookup	(int,*(struct(int,long)),int)->(int)
(	O
new_el	struct(int,long)
.	O
av_size	int
,	O
av_table	array(struct(int,long))
,	O
*	O
av_count	int
)	O
;	O
avail_move	(*(struct(int,long)),*(int),int,int)->(void)
(	O
av_table	array(struct(int,long))
,	O
av_count	int
,	O
index	(*(char),int)->(*(char))
,	O
index	(*(char),int)->(*(char))
+	O
1	int
)	O
;	O
av_table	array(struct(int,long))
[	O
index	(*(char),int)->(*(char))
]	O
=	O
new_el	struct(int,long)
;	O
}	O
static	O
avail_elem	struct(int,long)
get_block	(int,*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)))->(struct(int,long))
(	O
int	O
size	int
,	O
GDBM_FILE	*(struct)
dbf	*(struct)
)	O
{	O
avail_elem	struct(int,long)
val	struct(int,long)
;	O
val	struct(int,long)
.	O
av_adr	long
=	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
next_block	long
;	O
val	struct(int,long)
.	O
av_size	int
=	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
block_size	int
;	O
while	O
(	O
val	struct(int,long)
.	O
av_size	int
<	O
size	int
)	O
val	struct(int,long)
.	O
av_size	int
+=	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
block_size	int
;	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
next_block	long
+=	O
val	struct(int,long)
.	O
av_size	int
;	O
dbf	*(struct)
->	O
header_changed	int
=	O
TRUE	int
;	O
return	O
val	struct(int,long)
;	O
}	O
static	O
int	O
adjust_bucket_avail	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)))->(int)
(	O
GDBM_FILE	*(struct)
dbf	*(struct)
)	O
{	O
int	O
third	int
=	O
BUCKET_AVAIL	int
/	O
3	int
;	O
avail_elem	struct(int,long)
av_el	struct(int,long)
;	O
if	O
(	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
av_count	int
<	O
third	int
)	O
{	O
if	O
(	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
count	int
>	O
0	int
)	O
{	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
count	int
-=	O
1	int
;	O
av_el	struct(int,long)
=	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
av_table	array(struct(int,long))
[	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
count	int
]	O
;	O
_gdbm_put_av_elem	(struct(int,long),array(struct(int,long)),*(int),int)->(void)
(	O
av_el	struct(int,long)
,	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
bucket_avail	array(struct(int,long))
,	O
&	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
av_count	int
,	O
dbf	*(struct)
->	O
coalesce_blocks	int
)	O
;	O
dbf	*(struct)
->	O
bucket_changed	int
=	O
TRUE	int
;	O
}	O
return	O
0	int
;	O
}	O
while	O
(	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
av_count	int
>	O
BUCKET_AVAIL	int
-	O
third	int
&&	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
count	int
<	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
size	int
)	O
{	O
av_el	struct(int,long)
=	O
get_elem	(int,array(struct(int,long)),*(int))->(struct(int,long))
(	O
0	int
,	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
bucket_avail	array(struct(int,long))
,	O
&	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
av_count	int
)	O
;	O
if	O
(	O
av_el	struct(int,long)
.	O
av_size	int
==	O
0	int
)	O
{	O
GDBM_SET_ERRNO	O
(	O
dbf	*(struct)
,	O
GDBM_BAD_AVAIL	int
,	O
TRUE	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
_gdbm_put_av_elem	(struct(int,long),array(struct(int,long)),*(int),int)->(void)
(	O
av_el	struct(int,long)
,	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
av_table	array(struct(int,long))
,	O
&	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
count	int
,	O
dbf	*(struct)
->	O
coalesce_blocks	int
)	O
;	O
dbf	*(struct)
->	O
bucket_changed	int
=	O
TRUE	int
;	O
}	O
return	O
0	int
;	O
}	O
