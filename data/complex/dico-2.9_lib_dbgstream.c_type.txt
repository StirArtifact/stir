struct	O
dbg_stream	struct(*(struct),*(char),int,int)
{	O
dico_stream_t	*(struct)
transport	*(struct)
;	O
const	O
char	O
*	O
file	*(char)
;	O
unsigned	O
line	int
;	O
int	O
ts	int
;	O
}	O
;	O
static	O
char	O
*	O
fmtline	(int,*(char),long)->(*(char))
(	O
unsigned	O
num	int
,	O
char	O
*	O
buf	*(void)
,	O
size_t	long
bufsize	long
)	O
{	O
char	O
*	O
p	*(char)
=	O
buf	*(void)
+	O
bufsize	long
;	O
*	O
--	O
p	*(char)
=	O
0	int
;	O
while	O
(	O
p	*(char)
>	O
buf	*(void)
)	O
{	O
unsigned	O
x	int
=	O
num	int
%	O
10	int
;	O
*	O
--	O
p	*(char)
=	O
x	int
+	O
'0'	O
;	O
num	int
/=	O
10	int
;	O
if	O
(	O
num	int
==	O
0	int
)	O
break	O
;	O
}	O
return	O
p	*(char)
;	O
}	O
static	O
int	O
dbg_write	(*(void),*(char),long,*(long))->(int)
(	O
void	O
*	O
data	*(void)
,	O
const	O
char	O
*	O
buf	*(void)
,	O
size_t	long
size	long
,	O
size_t	long
*	O
pret	*(*(void))
)	O
{	O
struct	O
dbg_stream	struct(*(struct),*(char),int,int)
*	O
p	*(char)
=	O
data	*(void)
;	O
if	O
(	O
p	*(char)
->	O
ts	int
)	O
{	O
char	O
nbuf	array(char)
[	O
128	int
]	O
,	O
*	O
s	*(char)
;	O
struct	O
timeval	struct(long,long)
tv	struct(long,long)
;	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
&	O
tv	struct(long,long)
,	O
NULL	O
)	O
;	O
dico_stream_write	(*(struct),*(void),long)->(int)
(	O
p	*(char)
->	O
transport	*(struct)
,	O
"["	*(char)
,	O
1	int
)	O
;	O
s	*(char)
=	O
fmtline	(int,*(char),long)->(*(char))
(	O
tv	struct(long,long)
.	O
tv_sec	long
,	O
nbuf	array(char)
,	O
sizeof	O
(	O
nbuf	array(char)
)	O
)	O
;	O
dico_stream_write	(*(struct),*(void),long)->(int)
(	O
p	*(char)
->	O
transport	*(struct)
,	O
s	*(char)
,	O
strlen	(*(char))->(long)
(	O
s	*(char)
)	O
)	O
;	O
dico_stream_write	(*(struct),*(void),long)->(int)
(	O
p	*(char)
->	O
transport	*(struct)
,	O
"."	*(char)
,	O
1	int
)	O
;	O
s	*(char)
=	O
fmtline	(int,*(char),long)->(*(char))
(	O
tv	struct(long,long)
.	O
tv_usec	long
,	O
nbuf	array(char)
,	O
sizeof	O
(	O
nbuf	array(char)
)	O
)	O
;	O
dico_stream_write	(*(struct),*(void),long)->(int)
(	O
p	*(char)
->	O
transport	*(struct)
,	O
s	*(char)
,	O
strlen	(*(char))->(long)
(	O
s	*(char)
)	O
)	O
;	O
dico_stream_write	(*(struct),*(void),long)->(int)
(	O
p	*(char)
->	O
transport	*(struct)
,	O
"] "	*(char)
,	O
2	int
)	O
;	O
}	O
if	O
(	O
p	*(char)
->	O
file	*(char)
)	O
{	O
char	O
*	O
s	*(char)
;	O
char	O
nbuf	array(char)
[	O
128	int
]	O
;	O
dico_stream_write	(*(struct),*(void),long)->(int)
(	O
p	*(char)
->	O
transport	*(struct)
,	O
p	*(char)
->	O
file	*(char)
,	O
strlen	(*(char))->(long)
(	O
p	*(char)
->	O
file	*(char)
)	O
)	O
;	O
dico_stream_write	(*(struct),*(void),long)->(int)
(	O
p	*(char)
->	O
transport	*(struct)
,	O
":"	*(char)
,	O
1	int
)	O
;	O
s	*(char)
=	O
fmtline	(int,*(char),long)->(*(char))
(	O
p	*(char)
->	O
line	int
,	O
nbuf	array(char)
,	O
sizeof	O
(	O
nbuf	array(char)
)	O
)	O
;	O
dico_stream_write	(*(struct),*(void),long)->(int)
(	O
p	*(char)
->	O
transport	*(struct)
,	O
s	*(char)
,	O
strlen	(*(char))->(long)
(	O
s	*(char)
)	O
)	O
;	O
dico_stream_write	(*(struct),*(void),long)->(int)
(	O
p	*(char)
->	O
transport	*(struct)
,	O
": "	*(char)
,	O
2	int
)	O
;	O
}	O
dico_stream_write	(*(struct),*(void),long)->(int)
(	O
p	*(char)
->	O
transport	*(struct)
,	O
buf	*(void)
,	O
size	long
)	O
;	O
if	O
(	O
pret	*(*(void))
)	O
*	O
pret	*(*(void))
=	O
size	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
dbg_destroy	(*(void))->(int)
(	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
dbg_stream	struct(*(struct),*(char),int,int)
*	O
p	*(char)
=	O
data	*(void)
;	O
dico_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
p	*(char)
->	O
transport	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
data	*(void)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
dbg_ioctl	(*(void),int,*(void))->(int)
(	O
void	O
*	O
data	*(void)
,	O
int	O
code	int
,	O
void	O
*	O
call_data	*(void)
)	O
{	O
struct	O
dbg_stream	struct(*(struct),*(char),int,int)
*	O
p	*(char)
=	O
data	*(void)
;	O
switch	O
(	O
code	int
)	O
{	O
case	O
DICO_DBG_CTL_SET_FILE	int
:	O
p	*(char)
->	O
file	*(char)
=	O
call_data	*(void)
;	O
break	O
;	O
case	O
DICO_DBG_CTL_SET_LINE	int
:	O
p	*(char)
->	O
line	int
=	O
*	O
(	O
unsigned	O
*	O
)	O
call_data	*(void)
;	O
break	O
;	O
case	O
DICO_DBG_CTL_SET_TS	int
:	O
p	*(char)
->	O
ts	int
=	O
*	O
(	O
int	O
*	O
)	O
call_data	*(void)
;	O
break	O
;	O
default	O
:	O
errno	O
=	O
EINVAL	int
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
dico_stream_t	*(struct)
dico_dbg_stream_create	()->(*(struct))
(	O
void	O
)	O
{	O
struct	O
dbg_stream	struct(*(struct),*(char),int,int)
*	O
p	*(char)
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
p	*(char)
)	O
)	O
;	O
dico_stream_t	*(struct)
stream	*(struct)
;	O
if	O
(	O
!	O
p	*(char)
||	O
dico_stream_create	(*(*(struct)),int,*(void))->(int)
(	O
&	O
stream	*(struct)
,	O
DICO_STREAM_WRITE	int
,	O
p	*(char)
)	O
)	O
return	O
NULL	O
;	O
dico_stream_set_write	(*(struct),*((*(void),*(char),long,*(long))->(int)))->(void)
(	O
stream	*(struct)
,	O
dbg_write	(*(void),*(char),long,*(long))->(int)
)	O
;	O
dico_stream_set_destroy	(*(struct),*((*(void))->(int)))->(void)
(	O
stream	*(struct)
,	O
dbg_destroy	(*(void))->(int)
)	O
;	O
dico_stream_set_ioctl	(*(struct),*((*(void),int,*(void))->(int)))->(void)
(	O
stream	*(struct)
,	O
dbg_ioctl	(*(void),int,*(void))->(int)
)	O
;	O
dico_stream_set_buffer	(*(struct),enum(int,int,int),long)->(int)
(	O
stream	*(struct)
,	O
dico_buffer_line	int
,	O
1024	int
)	O
;	O
p	*(char)
->	O
transport	*(struct)
=	O
dico_log_stream_create	(int)->(*(struct))
(	O
L_DEBUG	int
)	O
;	O
p	*(char)
->	O
file	*(char)
=	O
NULL	O
;	O
p	*(char)
->	O
line	int
=	O
0	int
;	O
return	O
stream	*(struct)
;	O
}	O
