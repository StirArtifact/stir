extern	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
getpwuid	(int)->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
PARAMS	O
(	O
(	O
uid_t	int
)	O
)	O
;	O
extern	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
getpwnam	(*(char))->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
PARAMS	O
(	O
(	O
const	O
char	O
*	O
)	O
)	O
;	O
extern	O
char	O
*	O
sh_get_home_dir	()->(*(char))
PARAMS	O
(	O
(	O
void	O
)	O
)	O
;	O
extern	O
char	O
*	O
sh_get_env_value	(*(char))->(*(char))
PARAMS	O
(	O
(	O
const	O
char	O
*	O
)	O
)	O
;	O
static	O
const	O
char	O
*	O
default_prefixes	array(*(char))
[	O
]	O
=	O
{	O
" ~"	*(char)
,	O
"\t~"	*(char)
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
}	O
;	O
static	O
const	O
char	O
*	O
default_suffixes	array(*(char))
[	O
]	O
=	O
{	O
" "	*(char)
,	O
"\n"	*(char)
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
}	O
;	O
tilde_hook_func_t	(*(char))->(*(char))
*	O
tilde_expansion_preexpansion_hook	*((*(char))->(*(char)))
=	O
(	O
tilde_hook_func_t	(*(char))->(*(char))
*	O
)	O
NULL	O
;	O
tilde_hook_func_t	(*(char))->(*(char))
*	O
tilde_expansion_failure_hook	*((*(char))->(*(char)))
=	O
(	O
tilde_hook_func_t	(*(char))->(*(char))
*	O
)	O
NULL	O
;	O
char	O
*	O
*	O
tilde_additional_prefixes	*(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
default_prefixes	array(*(char))
;	O
char	O
*	O
*	O
tilde_additional_suffixes	*(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
default_suffixes	array(*(char))
;	O
static	O
int	O
tilde_find_prefix	(*(char),*(int))->(int)
PARAMS	O
(	O
(	O
const	O
char	O
*	O
,	O
int	O
*	O
)	O
)	O
;	O
static	O
int	O
tilde_find_suffix	(*(char))->(int)
PARAMS	O
(	O
(	O
const	O
char	O
*	O
)	O
)	O
;	O
static	O
char	O
*	O
isolate_tilde_prefix	(*(char),*(int))->(*(char))
PARAMS	O
(	O
(	O
const	O
char	O
*	O
,	O
int	O
*	O
)	O
)	O
;	O
static	O
char	O
*	O
glue_prefix_and_suffix	(*(char),*(char),int)->(*(char))
PARAMS	O
(	O
(	O
char	O
*	O
,	O
const	O
char	O
*	O
,	O
int	O
)	O
)	O
;	O
static	O
int	O
tilde_find_prefix	(*(char),*(int))->(int)
(	O
string	*(char)
,	O
len	*(int)
)	O
const	O
char	O
*	O
string	*(char)
;	O
int	O
*	O
len	*(int)
;	O
{	O
register	O
int	O
i	int
,	O
j	int
,	O
string_len	int
;	O
register	O
char	O
*	O
*	O
prefixes	*(*(char))
;	O
prefixes	*(*(char))
=	O
tilde_additional_prefixes	*(*(char))
;	O
string_len	int
=	O
strlen	(*(char))->(long)
(	O
string	*(char)
)	O
;	O
*	O
len	*(int)
=	O
0	int
;	O
if	O
(	O
*	O
string	*(char)
==	O
'\0'	O
||	O
*	O
string	*(char)
==	O
'~'	O
)	O
return	O
(	O
0	int
)	O
;	O
if	O
(	O
prefixes	*(*(char))
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
string_len	int
;	O
i	int
++	O
)	O
{	O
for	O
(	O
j	int
=	O
0	int
;	O
prefixes	*(*(char))
[	O
j	int
]	O
;	O
j	int
++	O
)	O
{	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
string	*(char)
+	O
i	int
,	O
prefixes	*(*(char))
[	O
j	int
]	O
,	O
strlen	(*(char))->(long)
(	O
prefixes	*(*(char))
[	O
j	int
]	O
)	O
)	O
==	O
0	int
)	O
{	O
*	O
len	*(int)
=	O
strlen	(*(char))->(long)
(	O
prefixes	*(*(char))
[	O
j	int
]	O
)	O
-	O
1	int
;	O
return	O
(	O
i	int
+	O
*	O
len	*(int)
)	O
;	O
}	O
}	O
}	O
}	O
return	O
(	O
string_len	int
)	O
;	O
}	O
static	O
int	O
tilde_find_suffix	(*(char))->(int)
(	O
string	*(char)
)	O
const	O
char	O
*	O
string	*(char)
;	O
{	O
register	O
int	O
i	int
,	O
j	int
,	O
string_len	int
;	O
register	O
char	O
*	O
*	O
suffixes	*(*(char))
;	O
suffixes	*(*(char))
=	O
tilde_additional_suffixes	*(*(char))
;	O
string_len	int
=	O
strlen	(*(char))->(long)
(	O
string	*(char)
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
string_len	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
string	*(char)
[	O
i	int
]	O
==	O
'/'	O
)	O
break	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
suffixes	*(*(char))
&&	O
suffixes	*(*(char))
[	O
j	int
]	O
;	O
j	int
++	O
)	O
{	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
string	*(char)
+	O
i	int
,	O
suffixes	*(*(char))
[	O
j	int
]	O
,	O
strlen	(*(char))->(long)
(	O
suffixes	*(*(char))
[	O
j	int
]	O
)	O
)	O
==	O
0	int
)	O
return	O
(	O
i	int
)	O
;	O
}	O
}	O
return	O
(	O
i	int
)	O
;	O
}	O
char	O
*	O
tilde_expand	(*(char))->(*(char))
(	O
string	*(char)
)	O
const	O
char	O
*	O
string	*(char)
;	O
{	O
char	O
*	O
result	*(char)
;	O
int	O
result_size	int
,	O
result_index	int
;	O
result_index	int
=	O
result_size	int
=	O
0	int
;	O
if	O
(	O
result	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
string	*(char)
,	O
'~'	O
)	O
)	O
result	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
result_size	int
=	O
(	O
strlen	(*(char))->(long)
(	O
string	*(char)
)	O
+	O
16	int
)	O
)	O
;	O
else	O
result	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
result_size	int
=	O
(	O
strlen	(*(char))->(long)
(	O
string	*(char)
)	O
+	O
1	int
)	O
)	O
;	O
while	O
(	O
1	int
)	O
{	O
register	O
int	O
start	int
,	O
end	int
;	O
char	O
*	O
tilde_word	*(char)
,	O
*	O
expansion	*(char)
;	O
int	O
len	*(int)
;	O
start	int
=	O
tilde_find_prefix	(*(char),*(int))->(int)
(	O
string	*(char)
,	O
&	O
len	*(int)
)	O
;	O
if	O
(	O
(	O
result_index	int
+	O
start	int
+	O
1	int
)	O
>	O
result_size	int
)	O
result	*(char)
=	O
(	O
char	O
*	O
)	O
xrealloc	(*(void),long)->(*(void))
(	O
result	*(char)
,	O
1	int
+	O
(	O
result_size	int
+=	O
(	O
start	int
+	O
20	int
)	O
)	O
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
result	*(char)
+	O
result_index	int
,	O
string	*(char)
,	O
start	int
)	O
;	O
result_index	int
+=	O
start	int
;	O
string	*(char)
+=	O
start	int
;	O
end	int
=	O
tilde_find_suffix	(*(char))->(int)
(	O
string	*(char)
)	O
;	O
if	O
(	O
!	O
start	int
&&	O
!	O
end	int
)	O
break	O
;	O
tilde_word	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
1	int
+	O
end	int
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
tilde_word	*(char)
,	O
string	*(char)
,	O
end	int
)	O
;	O
tilde_word	*(char)
[	O
end	int
]	O
=	O
'\0'	O
;	O
string	*(char)
+=	O
end	int
;	O
expansion	*(char)
=	O
tilde_expand_word	(*(char))->(*(char))
(	O
tilde_word	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
tilde_word	*(char)
)	O
;	O
len	*(int)
=	O
strlen	(*(char))->(long)
(	O
expansion	*(char)
)	O
;	O
{	O
if	O
(	O
(	O
result_index	int
+	O
len	*(int)
+	O
1	int
)	O
>	O
result_size	int
)	O
result	*(char)
=	O
(	O
char	O
*	O
)	O
xrealloc	(*(void),long)->(*(void))
(	O
result	*(char)
,	O
1	int
+	O
(	O
result_size	int
+=	O
(	O
len	*(int)
+	O
20	int
)	O
)	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
result	*(char)
+	O
result_index	int
,	O
expansion	*(char)
)	O
;	O
result_index	int
+=	O
len	*(int)
;	O
}	O
free	(*(void))->(void)
(	O
expansion	*(char)
)	O
;	O
}	O
result	*(char)
[	O
result_index	int
]	O
=	O
'\0'	O
;	O
return	O
(	O
result	*(char)
)	O
;	O
}	O
static	O
char	O
*	O
isolate_tilde_prefix	(*(char),*(int))->(*(char))
(	O
fname	*(char)
,	O
lenp	*(int)
)	O
const	O
char	O
*	O
fname	*(char)
;	O
int	O
*	O
lenp	*(int)
;	O
{	O
char	O
*	O
ret	*(char)
;	O
int	O
i	int
;	O
ret	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
fname	*(char)
)	O
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
fname	*(char)
[	O
i	int
]	O
&&	O
fname	*(char)
[	O
i	int
]	O
!=	O
'/'	O
;	O
i	int
++	O
)	O
ret	*(char)
[	O
i	int
-	O
1	int
]	O
=	O
fname	*(char)
[	O
i	int
]	O
;	O
ret	*(char)
[	O
i	int
-	O
1	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
lenp	*(int)
)	O
*	O
lenp	*(int)
=	O
i	int
;	O
return	O
ret	*(char)
;	O
}	O
static	O
char	O
*	O
glue_prefix_and_suffix	(*(char),*(char),int)->(*(char))
(	O
prefix	*(char)
,	O
suffix	*(char)
,	O
suffind	int
)	O
char	O
*	O
prefix	*(char)
;	O
const	O
char	O
*	O
suffix	*(char)
;	O
int	O
suffind	int
;	O
{	O
char	O
*	O
ret	*(char)
;	O
int	O
plen	int
,	O
slen	int
;	O
plen	int
=	O
(	O
prefix	*(char)
&&	O
*	O
prefix	*(char)
)	O
?	O
strlen	(*(char))->(long)
(	O
prefix	*(char)
)	O
:	O
0	int
;	O
slen	int
=	O
strlen	(*(char))->(long)
(	O
suffix	*(char)
+	O
suffind	int
)	O
;	O
ret	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
plen	int
+	O
slen	int
+	O
1	int
)	O
;	O
if	O
(	O
plen	int
)	O
strcpy	(*(char),*(char))->(*(char))
(	O
ret	*(char)
,	O
prefix	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
ret	*(char)
+	O
plen	int
,	O
suffix	*(char)
+	O
suffind	int
)	O
;	O
return	O
ret	*(char)
;	O
}	O
char	O
*	O
tilde_expand_word	(*(char))->(*(char))
(	O
filename	*(char)
)	O
const	O
char	O
*	O
filename	*(char)
;	O
{	O
char	O
*	O
dirname	*(char)
,	O
*	O
expansion	*(char)
,	O
*	O
username	*(char)
;	O
int	O
user_len	int
;	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
user_entry	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
;	O
if	O
(	O
filename	*(char)
==	O
0	int
)	O
return	O
(	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
*	O
filename	*(char)
!=	O
'~'	O
)	O
return	O
(	O
savestring	O
(	O
filename	*(char)
)	O
)	O
;	O
if	O
(	O
filename	*(char)
[	O
1	int
]	O
==	O
'\0'	O
||	O
filename	*(char)
[	O
1	int
]	O
==	O
'/'	O
)	O
{	O
expansion	*(char)
=	O
sh_get_env_value	(*(char))->(*(char))
(	O
"HOME"	*(char)
)	O
;	O
if	O
(	O
expansion	*(char)
==	O
0	int
)	O
expansion	*(char)
=	O
sh_get_home_dir	()->(*(char))
(	O
)	O
;	O
return	O
(	O
glue_prefix_and_suffix	(*(char),*(char),int)->(*(char))
(	O
expansion	*(char)
,	O
filename	*(char)
,	O
1	int
)	O
)	O
;	O
}	O
username	*(char)
=	O
isolate_tilde_prefix	(*(char),*(int))->(*(char))
(	O
filename	*(char)
,	O
&	O
user_len	int
)	O
;	O
if	O
(	O
tilde_expansion_preexpansion_hook	*((*(char))->(*(char)))
)	O
{	O
expansion	*(char)
=	O
(	O
*	O
tilde_expansion_preexpansion_hook	*((*(char))->(*(char)))
)	O
(	O
username	*(char)
)	O
;	O
if	O
(	O
expansion	*(char)
)	O
{	O
dirname	*(char)
=	O
glue_prefix_and_suffix	(*(char),*(char),int)->(*(char))
(	O
expansion	*(char)
,	O
filename	*(char)
,	O
user_len	int
)	O
;	O
free	(*(void))->(void)
(	O
username	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
expansion	*(char)
)	O
;	O
return	O
(	O
dirname	*(char)
)	O
;	O
}	O
}	O
dirname	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
user_entry	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
getpwnam	(*(char))->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
username	*(char)
)	O
;	O
if	O
(	O
user_entry	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
==	O
0	int
)	O
{	O
if	O
(	O
tilde_expansion_failure_hook	*((*(char))->(*(char)))
)	O
{	O
expansion	*(char)
=	O
(	O
*	O
tilde_expansion_failure_hook	*((*(char))->(*(char)))
)	O
(	O
username	*(char)
)	O
;	O
if	O
(	O
expansion	*(char)
)	O
{	O
dirname	*(char)
=	O
glue_prefix_and_suffix	(*(char),*(char),int)->(*(char))
(	O
expansion	*(char)
,	O
filename	*(char)
,	O
user_len	int
)	O
;	O
free	(*(void))->(void)
(	O
expansion	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
dirname	*(char)
==	O
0	int
)	O
dirname	*(char)
=	O
savestring	O
(	O
filename	*(char)
)	O
;	O
}	O
else	O
dirname	*(char)
=	O
glue_prefix_and_suffix	(*(char),*(char),int)->(*(char))
(	O
user_entry	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_dir	*(char)
,	O
filename	*(char)
,	O
user_len	int
)	O
;	O
free	(*(void))->(void)
(	O
username	*(char)
)	O
;	O
endpwent	()->(void)
(	O
)	O
;	O
return	O
(	O
dirname	*(char)
)	O
;	O
}	O
