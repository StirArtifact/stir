const	O
char	O
*	O
wget_local_charset_encoding	()->(*(char))
(	O
void	O
)	O
{	O
const	O
char	O
*	O
encoding	*(char)
=	O
nl_langinfo	(int)->(*(char))
(	O
CODESET	int
)	O
;	O
if	O
(	O
encoding	*(char)
&&	O
*	O
encoding	*(char)
)	O
return	O
wget_strdup	(*(char))->(*(char))
(	O
encoding	*(char)
)	O
;	O
return	O
wget_strdup	(*(char))->(*(char))
(	O
"ASCII"	*(char)
)	O
;	O
}	O
int	O
wget_memiconv	(*(char),*(void),long,*(char),*(*(char)),*(long))->(int)
(	O
const	O
char	O
*	O
src_encoding	*(char)
,	O
const	O
void	O
*	O
src	*(char)
,	O
size_t	long
srclen	long
,	O
const	O
char	O
*	O
dst_encoding	*(char)
,	O
char	O
*	O
*	O
out	*(*(char))
,	O
size_t	long
*	O
outlen	*(long)
)	O
{	O
if	O
(	O
!	O
src	*(char)
)	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
!	O
src_encoding	*(char)
)	O
src_encoding	*(char)
=	O
"iso-8859-1"	*(char)
;	O
if	O
(	O
!	O
dst_encoding	*(char)
)	O
dst_encoding	*(char)
=	O
"iso-8859-1"	*(char)
;	O
if	O
(	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
src_encoding	*(char)
,	O
dst_encoding	*(char)
)	O
)	O
{	O
int	O
ret	int
=	O
WGET_E_UNKNOWN	int
;	O
iconv_t	*(void)
cd	*(void)
=	O
iconv_open	(*(char),*(char))->(*(void))
(	O
dst_encoding	*(char)
,	O
src_encoding	*(char)
)	O
;	O
if	O
(	O
cd	*(void)
!=	O
(	O
iconv_t	*(void)
)	O
-	O
1	int
)	O
{	O
char	O
*	O
tmp	*(char)
=	O
(	O
char	O
*	O
)	O
src	*(char)
;	O
size_t	long
tmp_len	long
=	O
srclen	long
;	O
size_t	long
dst_len	long
=	O
tmp_len	long
*	O
6	int
,	O
dst_len_tmp	long
=	O
dst_len	long
;	O
char	O
*	O
dst	*(char)
=	O
wget_malloc	(long)->(*(void))
(	O
dst_len	long
+	O
1	int
)	O
,	O
*	O
dst_tmp	*(char)
=	O
dst	*(char)
;	O
if	O
(	O
!	O
dst	*(char)
)	O
{	O
iconv_close	(*(void))->(int)
(	O
cd	*(void)
)	O
;	O
return	O
WGET_E_MEMORY	int
;	O
}	O
errno	O
=	O
0	int
;	O
if	O
(	O
iconv	(*(void),*(*(char)),*(long),*(*(char)),*(long))->(long)
(	O
cd	*(void)
,	O
(	O
ICONV_CONST	O
char	O
*	O
*	O
)	O
&	O
tmp	*(char)
,	O
&	O
tmp_len	long
,	O
&	O
dst_tmp	*(char)
,	O
&	O
dst_len_tmp	long
)	O
==	O
0	int
&&	O
iconv	(*(void),*(*(char)),*(long),*(*(char)),*(long))->(long)
(	O
cd	*(void)
,	O
NULL	O
,	O
NULL	O
,	O
&	O
dst_tmp	*(char)
,	O
&	O
dst_len_tmp	long
)	O
==	O
0	int
)	O
{	O
debug_printf	O
(	O
"transcoded %zu bytes from '%s' to '%s'\n"	*(char)
,	O
srclen	long
,	O
src_encoding	*(char)
,	O
dst_encoding	*(char)
)	O
;	O
if	O
(	O
out	*(*(char))
)	O
{	O
tmp	*(char)
=	O
wget_realloc	(*(void),long)->(*(void))
(	O
dst	*(char)
,	O
dst_len	long
-	O
dst_len_tmp	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
tmp	*(char)
)	O
tmp	*(char)
=	O
dst	*(char)
;	O
tmp	*(char)
[	O
dst_len	long
-	O
dst_len_tmp	long
]	O
=	O
0	int
;	O
*	O
out	*(*(char))
=	O
tmp	*(char)
;	O
}	O
else	O
xfree	O
(	O
dst	*(char)
)	O
;	O
if	O
(	O
outlen	*(long)
)	O
*	O
outlen	*(long)
=	O
dst_len	long
-	O
dst_len_tmp	long
;	O
ret	int
=	O
WGET_E_SUCCESS	int
;	O
}	O
else	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to transcode '%s' string into '%s' (%d)\n"	*(char)
)	O
,	O
src_encoding	*(char)
,	O
dst_encoding	*(char)
,	O
errno	O
)	O
;	O
xfree	O
(	O
dst	*(char)
)	O
;	O
if	O
(	O
out	*(*(char))
)	O
*	O
out	*(*(char))
=	O
NULL	O
;	O
if	O
(	O
outlen	*(long)
)	O
*	O
outlen	*(long)
=	O
0	int
;	O
}	O
iconv_close	(*(void))->(int)
(	O
cd	*(void)
)	O
;	O
}	O
else	O
error_printf	O
(	O
_	O
(	O
"Failed to prepare transcoding '%s' into '%s' (%d)\n"	*(char)
)	O
,	O
src_encoding	*(char)
,	O
dst_encoding	*(char)
,	O
errno	O
)	O
;	O
return	O
ret	int
;	O
}	O
if	O
(	O
out	*(*(char))
)	O
*	O
out	*(*(char))
=	O
wget_strmemdup	(*(void),long)->(*(char))
(	O
src	*(char)
,	O
srclen	long
)	O
;	O
if	O
(	O
outlen	*(long)
)	O
*	O
outlen	*(long)
=	O
srclen	long
;	O
return	O
WGET_E_SUCCESS	int
;	O
}	O
char	O
*	O
wget_striconv	(*(char),*(char),*(char))->(*(char))
(	O
const	O
char	O
*	O
src	*(char)
,	O
const	O
char	O
*	O
src_encoding	*(char)
,	O
const	O
char	O
*	O
dst_encoding	*(char)
)	O
{	O
if	O
(	O
!	O
src	*(char)
)	O
return	O
NULL	O
;	O
char	O
*	O
dst	*(char)
;	O
if	O
(	O
wget_memiconv	(*(char),*(void),long,*(char),*(*(char)),*(long))->(int)
(	O
src_encoding	*(char)
,	O
src	*(char)
,	O
strlen	(*(char))->(long)
(	O
src	*(char)
)	O
,	O
dst_encoding	*(char)
,	O
&	O
dst	*(char)
,	O
NULL	O
)	O
)	O
return	O
NULL	O
;	O
return	O
dst	*(char)
;	O
}	O
int	O
wget_str_needs_encoding	(*(char))->(int)
(	O
const	O
char	O
*	O
s	*(char)
)	O
{	O
if	O
(	O
!	O
s	*(char)
)	O
return	O
0	int
;	O
while	O
(	O
*	O
s	*(char)
&&	O
(	O
*	O
s	*(char)
&	O
~	O
0x7f	int
)	O
==	O
0	int
)	O
s	*(char)
++	O
;	O
return	O
!	O
!	O
*	O
s	*(char)
;	O
}	O
bool	bool
wget_str_is_valid_utf8	(*(char))->(bool)
(	O
const	O
char	O
*	O
utf8	*(char)
)	O
{	O
const	O
unsigned	O
char	O
*	O
s	*(char)
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
utf8	*(char)
;	O
if	O
(	O
!	O
s	*(char)
)	O
return	O
0	int
;	O
while	O
(	O
*	O
s	*(char)
)	O
{	O
if	O
(	O
(	O
*	O
s	*(char)
&	O
0x80	int
)	O
==	O
0	int
)	O
s	*(char)
++	O
;	O
else	O
if	O
(	O
(	O
*	O
s	*(char)
&	O
0xE0	int
)	O
==	O
0xC0	int
)	O
{	O
if	O
(	O
(	O
s	*(char)
[	O
1	int
]	O
&	O
0xC0	int
)	O
!=	O
0x80	int
)	O
return	O
0	int
;	O
s	*(char)
+=	O
2	int
;	O
}	O
else	O
if	O
(	O
(	O
*	O
s	*(char)
&	O
0xF0	int
)	O
==	O
0xE0	int
)	O
{	O
if	O
(	O
(	O
s	*(char)
[	O
1	int
]	O
&	O
0xC0	int
)	O
!=	O
0x80	int
||	O
(	O
s	*(char)
[	O
2	int
]	O
&	O
0xC0	int
)	O
!=	O
0x80	int
)	O
return	O
0	int
;	O
s	*(char)
+=	O
3	int
;	O
}	O
else	O
if	O
(	O
(	O
*	O
s	*(char)
&	O
0xF8	int
)	O
==	O
0xF0	int
)	O
{	O
if	O
(	O
(	O
s	*(char)
[	O
1	int
]	O
&	O
0xC0	int
)	O
!=	O
0x80	int
||	O
(	O
s	*(char)
[	O
2	int
]	O
&	O
0xC0	int
)	O
!=	O
0x80	int
||	O
(	O
s	*(char)
[	O
3	int
]	O
&	O
0xC0	int
)	O
!=	O
0x80	int
)	O
return	O
0	int
;	O
s	*(char)
+=	O
4	int
;	O
}	O
else	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
char	O
*	O
wget_str_to_utf8	(*(char),*(char))->(*(char))
(	O
const	O
char	O
*	O
src	*(char)
,	O
const	O
char	O
*	O
encoding	*(char)
)	O
{	O
return	O
wget_striconv	(*(char),*(char),*(char))->(*(char))
(	O
src	*(char)
,	O
encoding	*(char)
,	O
"utf-8"	*(char)
)	O
;	O
}	O
char	O
*	O
wget_utf8_to_str	(*(char),*(char))->(*(char))
(	O
const	O
char	O
*	O
src	*(char)
,	O
const	O
char	O
*	O
encoding	*(char)
)	O
{	O
return	O
wget_striconv	(*(char),*(char),*(char))->(*(char))
(	O
src	*(char)
,	O
"utf-8"	*(char)
,	O
encoding	*(char)
)	O
;	O
}	O
const	O
char	O
*	O
wget_str_to_ascii	(*(char))->(*(char))
(	O
const	O
char	O
*	O
src	*(char)
)	O
{	O
if	O
(	O
wget_str_needs_encoding	(*(char))->(int)
(	O
src	*(char)
)	O
)	O
{	O
error_printf	O
(	O
_	O
(	O
"toASCII not available: '%s'\n"	*(char)
)	O
,	O
src	*(char)
)	O
;	O
}	O
return	O
src	*(char)
;	O
}	O
