static	O
double	O
by1_data	array(double)
[	O
14	int
]	O
=	O
{	O
0.03208047100611908629	int
,	O
1.262707897433500450	int
,	O
0.00649996189992317500	int
,	O
-	O
0.08936164528860504117	int
,	O
0.01325088122175709545	int
,	O
-	O
0.00089790591196483523	int
,	O
0.00003647361487958306	int
,	O
-	O
0.00000100137438166600	int
,	O
0.00000001994539657390	int
,	O
-	O
0.00000000030230656018	int
,	O
0.00000000000360987815	int
,	O
-	O
0.00000000000003487488	int
,	O
0.00000000000000027838	int
,	O
-	O
0.00000000000000000186	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
by1_cs	struct(*(double),int,double,double,int)
=	O
{	O
by1_data	array(double)
,	O
13	int
,	O
-	O
1	int
,	O
1	int
,	O
10	int
}	O
;	O
int	O
gsl_sf_bessel_Y1_e	(double,*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
const	O
double	O
two_over_pi	double
=	O
2.0	int
/	O
M_PI	int
;	O
const	O
double	O
xmin	double
=	O
1.571	int
*	O
GSL_DBL_MIN	int
;	O
const	O
double	O
x_small	double
=	O
2.0	int
*	O
GSL_SQRT_DBL_EPSILON	int
;	O
const	O
double	O
xmax	double
=	O
1.0	int
/	O
GSL_DBL_EPSILON	int
;	O
if	O
(	O
x	double
<=	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
xmin	double
)	O
{	O
OVERFLOW_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
x_small	double
)	O
{	O
const	O
double	O
lnterm	double
=	O
log	(double)->(double)
(	O
0.5	int
*	O
x	double
)	O
;	O
gsl_sf_result	struct(double,double)
J1	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
c	*(double)
;	O
int	O
status	int
=	O
gsl_sf_bessel_J1_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
J1	struct(double,double)
)	O
;	O
cheb_eval_e	(*(struct(*(double),int,double,double,int)),double,*(struct(double,double)))->(int)
(	O
&	O
by1_cs	struct(*(double),int,double,double,int)
,	O
-	O
1.0	int
,	O
&	O
c	*(double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
two_over_pi	double
*	O
lnterm	double
*	O
J1	struct(double,double)
.	O
val	double
+	O
(	O
0.5	int
+	O
c	*(double)
.	O
val	double
)	O
/	O
x	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
fabs	(double)->(double)
(	O
lnterm	double
)	O
*	O
(	O
fabs	(double)->(double)
(	O
GSL_DBL_EPSILON	int
*	O
J1	struct(double,double)
.	O
val	double
)	O
+	O
J1	struct(double,double)
.	O
err	double
)	O
+	O
c	*(double)
.	O
err	double
/	O
x	double
;	O
return	O
status	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
4.0	int
)	O
{	O
const	O
double	O
lnterm	double
=	O
log	(double)->(double)
(	O
0.5	int
*	O
x	double
)	O
;	O
int	O
status	int
;	O
gsl_sf_result	struct(double,double)
J1	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
c	*(double)
;	O
cheb_eval_e	(*(struct(*(double),int,double,double,int)),double,*(struct(double,double)))->(int)
(	O
&	O
by1_cs	struct(*(double),int,double,double,int)
,	O
0.125	int
*	O
x	double
*	O
x	double
-	O
1.0	int
,	O
&	O
c	*(double)
)	O
;	O
status	int
=	O
gsl_sf_bessel_J1_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
J1	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
two_over_pi	double
*	O
lnterm	double
*	O
J1	struct(double,double)
.	O
val	double
+	O
(	O
0.5	int
+	O
c	*(double)
.	O
val	double
)	O
/	O
x	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
fabs	(double)->(double)
(	O
lnterm	double
)	O
*	O
(	O
fabs	(double)->(double)
(	O
GSL_DBL_EPSILON	int
*	O
J1	struct(double,double)
.	O
val	double
)	O
+	O
J1	struct(double,double)
.	O
err	double
)	O
+	O
c	*(double)
.	O
err	double
/	O
x	double
;	O
return	O
status	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
xmax	double
)	O
{	O
const	O
double	O
z	double
=	O
32.0	int
/	O
(	O
x	double
*	O
x	double
)	O
-	O
1.0	int
;	O
gsl_sf_result	struct(double,double)
ca	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
ct	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
cp	struct(double,double)
;	O
const	O
int	O
stat_ca	int
=	O
cheb_eval_e	(*(struct(*(double),int,double,double,int)),double,*(struct(double,double)))->(int)
(	O
&	O
_gsl_sf_bessel_amp_phase_bm1_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
&	O
ca	struct(double,double)
)	O
;	O
const	O
int	O
stat_ct	int
=	O
cheb_eval_e	(*(struct(*(double),int,double,double,int)),double,*(struct(double,double)))->(int)
(	O
&	O
_gsl_sf_bessel_amp_phase_bth1_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
&	O
ct	struct(double,double)
)	O
;	O
const	O
int	O
stat_cp	int
=	O
gsl_sf_bessel_cos_pi4_e	(double,double,*(struct(double,double)))->(int)
(	O
x	double
,	O
ct	struct(double,double)
.	O
val	double
/	O
x	double
,	O
&	O
cp	struct(double,double)
)	O
;	O
const	O
double	O
sqrtx	double
=	O
sqrt	(double)->(double)
(	O
x	double
)	O
;	O
const	O
double	O
ampl	double
=	O
(	O
0.75	int
+	O
ca	struct(double,double)
.	O
val	double
)	O
/	O
sqrtx	double
;	O
result	*(struct(double,double))
->	O
val	double
=	O
-	O
ampl	double
*	O
cp	struct(double,double)
.	O
val	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
fabs	(double)->(double)
(	O
cp	struct(double,double)
.	O
val	double
)	O
*	O
ca	struct(double,double)
.	O
err	double
/	O
sqrtx	double
+	O
fabs	(double)->(double)
(	O
ampl	double
)	O
*	O
cp	struct(double,double)
.	O
err	double
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_3	O
(	O
stat_ca	int
,	O
stat_ct	int
,	O
stat_cp	int
)	O
;	O
}	O
else	O
{	O
UNDERFLOW_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
}	O
double	O
gsl_sf_bessel_Y1	(double)->(double)
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_bessel_Y1_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
