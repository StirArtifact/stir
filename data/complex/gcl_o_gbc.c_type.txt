static	O
void	O
mark_c_stack	()->(void)
(	O
jmp_buf	O
,	O
int	O
,	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
,	O
int	O
)	O
)	O
;	O
static	O
void	O
mark_contblock	(*(void),int)->(void)
(	O
void	O
*	O
,	O
int	O
)	O
;	O
static	O
void	O
mark_object	()->(void)
(	O
object	O
)	O
;	O
inline	O
struct	O
pageinfo	O
*	O
get_pageinfo	(*(void))->(*(struct))
(	O
void	O
*	O
x	*(void)
)	O
{	O
struct	O
pageinfo	O
*	O
v	*(struct)
=	O
contblock_list_head	O
;	O
void	O
*	O
vv	*(void)
;	O
for	O
(	O
;	O
(	O
vv	*(void)
=	O
v	*(struct)
)	O
&&	O
(	O
vv	*(void)
>=	O
x	*(void)
||	O
vv	*(void)
+	O
v	*(struct)
->	O
in_use	O
*	O
PAGESIZE	O
<=	O
x	*(void)
)	O
;	O
v	*(struct)
=	O
v	*(struct)
->	O
next	O
)	O
;	O
return	O
v	*(struct)
;	O
}	O
inline	O
char	O
get_bit	(*(char),*(struct),*(void))->(char)
(	O
char	O
*	O
v	*(struct)
,	O
struct	O
pageinfo	O
*	O
pi	*(struct)
,	O
void	O
*	O
x	*(void)
)	O
{	O
void	O
*	O
ve	*(void)
=	O
CB_DATA_START	()->(int)
(	O
pi	*(struct)
)	O
;	O
fixnum	O
off	O
=	O
(	O
x	*(void)
-	O
ve	*(void)
)	O
>>	O
LOG_BYTES_CONTBLOCK	O
,	O
i	int
=	O
off	O
>>	O
LOG_BITS_CHAR	int
,	O
s	int
=	O
off	O
&	O
~	O
(	O
~	O
0UL	int
<<	O
LOG_BITS_CHAR	int
)	O
;	O
return	O
(	O
v	*(struct)
[	O
i	int
]	O
>>	O
s	int
)	O
&	O
0x1	int
;	O
}	O
inline	O
void	O
set_bit	(*(char),*(struct),*(void))->(void)
(	O
char	O
*	O
v	*(struct)
,	O
struct	O
pageinfo	O
*	O
pi	*(struct)
,	O
void	O
*	O
x	*(void)
)	O
{	O
void	O
*	O
ve	*(void)
=	O
CB_DATA_START	()->(int)
(	O
pi	*(struct)
)	O
;	O
fixnum	O
off	O
=	O
(	O
x	*(void)
-	O
ve	*(void)
)	O
>>	O
LOG_BYTES_CONTBLOCK	O
,	O
i	int
=	O
off	O
>>	O
LOG_BITS_CHAR	int
,	O
s	int
=	O
off	O
&	O
~	O
(	O
~	O
0UL	int
<<	O
LOG_BITS_CHAR	int
)	O
;	O
v	*(struct)
[	O
i	int
]	O
|=	O
(	O
1UL	int
<<	O
s	int
)	O
;	O
}	O
inline	O
void	O
set_bits	(*(char),*(struct),*(void),*(void))->(void)
(	O
char	O
*	O
v	*(struct)
,	O
struct	O
pageinfo	O
*	O
pi	*(struct)
,	O
void	O
*	O
x1	*(void)
,	O
void	O
*	O
x2	*(void)
)	O
{	O
void	O
*	O
ds	*(void)
=	O
CB_DATA_START	()->(int)
(	O
pi	*(struct)
)	O
;	O
fixnum	O
i1	O
,	O
s1	O
,	O
i2	O
,	O
s2	O
,	O
se	O
;	O
ptr_set	O
(	O
x1	*(void)
,	O
ds	*(void)
,	O
i1	O
,	O
s1	O
)	O
;	O
ptr_set	O
(	O
x2	*(void)
,	O
ds	*(void)
,	O
i2	O
,	O
s2	O
)	O
;	O
if	O
(	O
i1	O
==	O
i2	O
)	O
{	O
se	O
=	O
s2	O
;	O
s2	O
=	O
0	int
;	O
}	O
else	O
se	O
=	O
CHAR_SIZE	O
;	O
for	O
(	O
;	O
s1	O
<	O
se	O
;	O
s1	O
++	O
)	O
bit_set	O
(	O
v	*(struct)
,	O
i1	O
,	O
s1	O
)	O
;	O
if	O
(	O
i2	O
>	O
++	O
i1	O
)	O
memset	(*(void),int,long)->(*(void))
(	O
v	*(struct)
+	O
i1	O
,	O
-	O
1	int
,	O
(	O
i2	O
-	O
i1	O
)	O
)	O
;	O
for	O
(	O
;	O
--	O
s2	O
>=	O
0	int
;	O
)	O
bit_set	O
(	O
v	*(struct)
,	O
i2	O
,	O
s2	O
)	O
;	O
}	O
inline	O
void	O
*	O
get_bits	(*(char),*(struct),*(void))->(*(void))
(	O
char	O
*	O
v	*(struct)
,	O
struct	O
pageinfo	O
*	O
pi	*(struct)
,	O
void	O
*	O
x	*(void)
)	O
{	O
void	O
*	O
ds	*(void)
=	O
CB_DATA_START	()->(int)
(	O
pi	*(struct)
)	O
,	O
*	O
de	*(void)
=	O
CB_DATA_END	()->(int)
(	O
pi	*(struct)
)	O
;	O
fixnum	O
i	int
,	O
s	int
,	O
ie	O
=	O
mbytes	O
(	O
pi	*(struct)
->	O
in_use	O
)	O
;	O
bool	O
z	O
;	O
char	O
cz	char
;	O
ptr_set	O
(	O
x	*(void)
,	O
ds	*(void)
,	O
i	int
,	O
s	int
)	O
;	O
z	O
=	O
bit_get	O
(	O
v	*(struct)
,	O
i	int
,	O
s	int
)	O
;	O
cz	char
=	O
z	O
?	O
-	O
1	int
:	O
0	int
;	O
for	O
(	O
;	O
++	O
s	int
<	O
CHAR_SIZE	O
&&	O
z	O
==	O
bit_get	O
(	O
v	*(struct)
,	O
i	int
,	O
s	int
)	O
;	O
)	O
;	O
if	O
(	O
s	int
==	O
CHAR_SIZE	O
)	O
{	O
for	O
(	O
;	O
++	O
i	int
<	O
ie	O
&&	O
v	*(struct)
[	O
i	int
]	O
==	O
cz	char
;	O
)	O
;	O
if	O
(	O
i	int
<	O
ie	O
)	O
for	O
(	O
s	int
=	O
-	O
1	int
;	O
++	O
s	int
<	O
CHAR_SIZE	O
&&	O
z	O
==	O
bit_get	O
(	O
v	*(struct)
,	O
i	int
,	O
s	int
)	O
;	O
)	O
;	O
else	O
s	int
=	O
CHAR_SIZE	O
-	O
1	int
;	O
}	O
ds	*(void)
=	O
ptr_get	O
(	O
ds	*(void)
,	O
i	int
,	O
s	int
)	O
;	O
return	O
ds	*(void)
<	O
de	*(void)
?	O
ds	*(void)
:	O
de	*(void)
;	O
}	O
inline	O
char	O
get_mark_bit	(*(struct),*(void))->(char)
(	O
struct	O
pageinfo	O
*	O
pi	*(struct)
,	O
void	O
*	O
x	*(void)
)	O
{	O
return	O
get_bit	(*(char),*(struct),*(void))->(char)
(	O
CB_MARK_START	()->(int)
(	O
pi	*(struct)
)	O
,	O
pi	*(struct)
,	O
x	*(void)
)	O
;	O
}	O
inline	O
void	O
set_mark_bit	(*(struct),*(void))->(void)
(	O
struct	O
pageinfo	O
*	O
pi	*(struct)
,	O
void	O
*	O
x	*(void)
)	O
{	O
set_bit	(*(char),*(struct),*(void))->(void)
(	O
CB_MARK_START	()->(int)
(	O
pi	*(struct)
)	O
,	O
pi	*(struct)
,	O
x	*(void)
)	O
;	O
}	O
inline	O
void	O
*	O
get_mark_bits	(*(struct),*(void))->(*(void))
(	O
struct	O
pageinfo	O
*	O
pi	*(struct)
,	O
void	O
*	O
x	*(void)
)	O
{	O
return	O
get_bits	(*(char),*(struct),*(void))->(*(void))
(	O
CB_MARK_START	()->(int)
(	O
pi	*(struct)
)	O
,	O
pi	*(struct)
,	O
x	*(void)
)	O
;	O
}	O
inline	O
void	O
set_mark_bits	(*(struct),*(void),*(void))->(void)
(	O
struct	O
pageinfo	O
*	O
pi	*(struct)
,	O
void	O
*	O
x1	*(void)
,	O
void	O
*	O
x2	*(void)
)	O
{	O
set_bits	(*(char),*(struct),*(void),*(void))->(void)
(	O
CB_MARK_START	()->(int)
(	O
pi	*(struct)
)	O
,	O
pi	*(struct)
,	O
x1	*(void)
,	O
x2	*(void)
)	O
;	O
}	O
inline	O
char	O
get_sgc_bit	(*(struct),*(void))->(char)
(	O
struct	O
pageinfo	O
*	O
pi	*(struct)
,	O
void	O
*	O
x	*(void)
)	O
{	O
return	O
get_bit	(*(char),*(struct),*(void))->(char)
(	O
CB_SGCF_START	()->(int)
(	O
pi	*(struct)
)	O
,	O
pi	*(struct)
,	O
x	*(void)
)	O
;	O
}	O
inline	O
void	O
set_sgc_bit	(*(struct),*(void))->(void)
(	O
struct	O
pageinfo	O
*	O
pi	*(struct)
,	O
void	O
*	O
x	*(void)
)	O
{	O
set_bit	(*(char),*(struct),*(void))->(void)
(	O
CB_SGCF_START	()->(int)
(	O
pi	*(struct)
)	O
,	O
pi	*(struct)
,	O
x	*(void)
)	O
;	O
}	O
inline	O
void	O
*	O
get_sgc_bits	(*(struct),*(void))->(*(void))
(	O
struct	O
pageinfo	O
*	O
pi	*(struct)
,	O
void	O
*	O
x	*(void)
)	O
{	O
return	O
get_bits	(*(char),*(struct),*(void))->(*(void))
(	O
CB_SGCF_START	()->(int)
(	O
pi	*(struct)
)	O
,	O
pi	*(struct)
,	O
x	*(void)
)	O
;	O
}	O
inline	O
void	O
set_sgc_bits	(*(struct),*(void),*(void))->(void)
(	O
struct	O
pageinfo	O
*	O
pi	*(struct)
,	O
void	O
*	O
x1	*(void)
,	O
void	O
*	O
x2	*(void)
)	O
{	O
set_bits	(*(char),*(struct),*(void),*(void))->(void)
(	O
CB_SGCF_START	()->(int)
(	O
pi	*(struct)
)	O
,	O
pi	*(struct)
,	O
x1	*(void)
,	O
x2	*(void)
)	O
;	O
}	O
static	O
int	O
gc_time	int
=	O
-	O
1	int
;	O
static	O
int	O
gc_start	int
=	O
0	int
;	O
static	O
int	O
gc_recursive	int
=	O
0	int
;	O
int	O
runtime	()->(int)
(	O
void	O
)	O
;	O
long	O
first_protectable_page	long
=	O
0	int
;	O
static	O
char	O
*	O
copy_relblock	(*(char),int)->(*(char))
(	O
char	O
*	O
p	*(char)
,	O
int	O
s	int
)	O
;	O
long	O
real_maxpage	long
;	O
long	O
new_holepage	long
;	O
struct	O
apage	struct(char)
{	O
char	O
apage_self	char
[	O
PAGESIZE	O
]	O
;	O
}	O
;	O
object	O
sSAnotify_gbcA	int
;	O
bool	O
debug	int
;	O
object	O
sSAgbc_messageA	int
;	O
object	O
*	O
mark_origin	array(*(int))
[	O
MARK_ORIGIN_MAX	int
]	O
;	O
int	O
mark_origin_max	int
;	O
struct	O
{	O
object	O
*	O
mob_addr	*(int)
;	O
int	O
mob_size	int
;	O
}	O
mark_origin_block	array(struct(*(int),int))
[	O
MARK_ORIGIN_BLOCK_MAX	int
]	O
;	O
int	O
mark_origin_block_max	int
;	O
enum	O
type	O
what_to_collect	enum
;	O
void	O
enter_mark_origin	(*(int))->(void)
(	O
object	O
*	O
p	*(char)
)	O
{	O
if	O
(	O
mark_origin_max	int
>=	O
MARK_ORIGIN_MAX	int
)	O
error	()->(int)
(	O
"too many mark origins"	*(char)
)	O
;	O
mark_origin	array(*(int))
[	O
mark_origin_max	int
++	O
]	O
=	O
p	*(char)
;	O
}	O
inline	O
void	O
mark_cons	(int)->(void)
(	O
object	O
x	*(void)
)	O
{	O
do	O
{	O
object	O
d	O
=	O
x	*(void)
->	O
c	O
.	O
c_cdr	O
;	O
mark	()->(int)
(	O
x	*(void)
)	O
;	O
mark_object	()->(void)
(	O
x	*(void)
->	O
c	O
.	O
c_car	O
)	O
;	O
x	*(void)
=	O
d	O
;	O
if	O
(	O
NULL_OR_ON_C_STACK	()->(int)
(	O
x	*(void)
)	O
||	O
is_marked_or_free	()->(int)
(	O
x	*(void)
)	O
)	O
return	O
;	O
}	O
while	O
(	O
cdr_listp	()->(int)
(	O
x	*(void)
)	O
)	O
;	O
mark_object	()->(void)
(	O
x	*(void)
)	O
;	O
}	O
bool	O
collect_both	int
=	O
0	int
;	O
static	O
void	O
mark_link_array	(*(void),*(void))->(void)
(	O
void	O
*	O
v	*(struct)
,	O
void	O
*	O
ve	*(void)
)	O
{	O
void	O
*	O
*	O
p	*(char)
,	O
*	O
*	O
pe	*(*(void))
;	O
if	O
(	O
NULL_OR_ON_C_STACK	()->(int)
(	O
v	*(struct)
)	O
)	O
return	O
;	O
if	O
(	O
sLAlink_arrayA	O
->	O
s	int
.	O
s_dbind	O
==	O
Cnil	O
)	O
return	O
;	O
p	*(char)
=	O
(	O
void	O
*	O
)	O
sLAlink_arrayA	O
->	O
s	int
.	O
s_dbind	O
->	O
v	*(struct)
.	O
v_self	O
;	O
pe	*(*(void))
=	O
(	O
void	O
*	O
)	O
p	*(char)
+	O
sLAlink_arrayA	O
->	O
s	int
.	O
s_dbind	O
->	O
v	*(struct)
.	O
v_fillp	O
;	O
if	O
(	O
is_marked	()->(int)
(	O
sLAlink_arrayA	O
->	O
s	int
.	O
s_dbind	O
)	O
&&	O
COLLECT_RELBLOCK_P	O
)	O
{	O
fixnum	O
j	*(long)
=	O
rb_pointer1	O
-	O
rb_pointer	O
;	O
p	*(char)
=	O
(	O
void	O
*	O
)	O
p	*(char)
+	O
j	*(long)
;	O
pe	*(*(void))
=	O
(	O
void	O
*	O
)	O
pe	*(*(void))
+	O
j	*(long)
;	O
}	O
for	O
(	O
;	O
p	*(char)
<	O
pe	*(*(void))
;	O
p	*(char)
+=	O
2	int
)	O
if	O
(	O
*	O
p	*(char)
>=	O
v	*(struct)
&&	O
*	O
p	*(char)
<	O
ve	*(void)
)	O
{	O
massert	()->(int)
(	O
!	O
LINK_ARRAY_MARKED	O
(	O
p	*(char)
)	O
)	O
;	O
MARK_LINK_ARRAY	O
(	O
p	*(char)
)	O
;	O
}	O
}	O
static	O
void	O
prune_link_array	()->(void)
(	O
void	O
)	O
{	O
void	O
*	O
*	O
p	*(char)
,	O
*	O
*	O
pe	*(*(void))
,	O
*	O
*	O
n	*(*(void))
,	O
*	O
*	O
ne	*(*(void))
;	O
if	O
(	O
sLAlink_arrayA	O
->	O
s	int
.	O
s_dbind	O
==	O
Cnil	O
)	O
return	O
;	O
ne	*(*(void))
=	O
n	*(*(void))
=	O
p	*(char)
=	O
(	O
void	O
*	O
)	O
sLAlink_arrayA	O
->	O
s	int
.	O
s_dbind	O
->	O
v	*(struct)
.	O
v_self	O
;	O
pe	*(*(void))
=	O
(	O
void	O
*	O
)	O
p	*(char)
+	O
sLAlink_arrayA	O
->	O
s	int
.	O
s_dbind	O
->	O
v	*(struct)
.	O
v_fillp	O
;	O
while	O
(	O
p	*(char)
<	O
pe	*(*(void))
)	O
{	O
if	O
(	O
*	O
p	*(char)
)	O
{	O
*	O
ne	*(*(void))
++	O
=	O
*	O
p	*(char)
++	O
;	O
*	O
ne	*(*(void))
++	O
=	O
*	O
p	*(char)
++	O
;	O
}	O
else	O
p	*(char)
+=	O
2	int
;	O
}	O
sLAlink_arrayA	O
->	O
s	int
.	O
s_dbind	O
->	O
v	*(struct)
.	O
v_fillp	O
=	O
(	O
ne	*(*(void))
-	O
n	*(*(void))
)	O
*	O
sizeof	O
(	O
*	O
n	*(*(void))
)	O
;	O
}	O
static	O
void	O
sweep_link_array	()->(void)
(	O
void	O
)	O
{	O
void	O
*	O
*	O
*	O
p	*(char)
,	O
*	O
*	O
*	O
pe	*(*(void))
;	O
if	O
(	O
sLAlink_arrayA	O
->	O
s	int
.	O
s_dbind	O
==	O
Cnil	O
)	O
return	O
;	O
p	*(char)
=	O
(	O
void	O
*	O
)	O
sLAlink_arrayA	O
->	O
s	int
.	O
s_dbind	O
->	O
v	*(struct)
.	O
v_self	O
;	O
pe	*(*(void))
=	O
(	O
void	O
*	O
)	O
p	*(char)
+	O
sLAlink_arrayA	O
->	O
s	int
.	O
s_dbind	O
->	O
v	*(struct)
.	O
v_fillp	O
;	O
for	O
(	O
;	O
p	*(char)
<	O
pe	*(*(void))
;	O
p	*(char)
+=	O
2	int
)	O
if	O
(	O
*	O
p	*(char)
)	O
{	O
if	O
(	O
LINK_ARRAY_MARKED	O
(	O
p	*(char)
)	O
)	O
CLEAR_LINK_ARRAY	O
(	O
p	*(char)
)	O
;	O
else	O
{	O
*	O
*	O
p	*(char)
=	O
p	*(char)
[	O
1	int
]	O
;	O
*	O
p	*(char)
=	O
0	int
;	O
}	O
}	O
prune_link_array	()->(void)
(	O
)	O
;	O
}	O
static	O
void	O
mark_object	()->(void)
(	O
object	O
x	*(void)
)	O
{	O
fixnum	O
i	int
,	O
j	*(long)
;	O
object	O
*	O
p	*(char)
;	O
char	O
*	O
cp	*(char)
;	O
enum	O
type	O
tp	enum
;	O
BEGIN	O
:	O
if	O
(	O
NULL_OR_ON_C_STACK	()->(int)
(	O
x	*(void)
)	O
||	O
is_marked_or_free	()->(int)
(	O
x	*(void)
)	O
)	O
return	O
;	O
tp	enum
=	O
type_of	()->(int)
(	O
x	*(void)
)	O
;	O
if	O
(	O
tp	enum
==	O
t_cons	O
)	O
{	O
mark_cons	(int)->(void)
(	O
x	*(void)
)	O
;	O
return	O
;	O
}	O
mark	()->(int)
(	O
x	*(void)
)	O
;	O
switch	O
(	O
tp	enum
)	O
{	O
case	O
t_fixnum	O
:	O
break	O
;	O
case	O
t_ratio	O
:	O
mark_object	()->(void)
(	O
x	*(void)
->	O
rat	O
.	O
rat_num	O
)	O
;	O
x	*(void)
=	O
x	*(void)
->	O
rat	O
.	O
rat_den	O
;	O
goto	O
BEGIN	O
;	O
case	O
t_shortfloat	O
:	O
break	O
;	O
case	O
t_longfloat	O
:	O
break	O
;	O
case	O
t_complex	O
:	O
mark_object	()->(void)
(	O
x	*(void)
->	O
cmp	O
.	O
cmp_imag	O
)	O
;	O
x	*(void)
=	O
x	*(void)
->	O
cmp	O
.	O
cmp_real	O
;	O
goto	O
BEGIN	O
;	O
case	O
t_character	O
:	O
break	O
;	O
case	O
t_symbol	O
:	O
mark_object	()->(void)
(	O
x	*(void)
->	O
s	int
.	O
s_plist	O
)	O
;	O
mark_object	()->(void)
(	O
x	*(void)
->	O
s	int
.	O
s_gfdef	O
)	O
;	O
mark_object	()->(void)
(	O
x	*(void)
->	O
s	int
.	O
s_dbind	O
)	O
;	O
if	O
(	O
x	*(void)
->	O
s	int
.	O
s_self	O
==	O
NULL	O
)	O
break	O
;	O
if	O
(	O
inheap	()->(int)
(	O
x	*(void)
->	O
s	int
.	O
s_self	O
)	O
)	O
{	O
if	O
(	O
what_to_collect	enum
==	O
t_contiguous	O
)	O
mark_contblock	(*(void),int)->(void)
(	O
x	*(void)
->	O
s	int
.	O
s_self	O
,	O
x	*(void)
->	O
s	int
.	O
s_fillp	O
)	O
;	O
}	O
else	O
if	O
(	O
COLLECT_RELBLOCK_P	O
)	O
x	*(void)
->	O
s	int
.	O
s_self	O
=	O
copy_relblock	(*(char),int)->(*(char))
(	O
x	*(void)
->	O
s	int
.	O
s_self	O
,	O
x	*(void)
->	O
s	int
.	O
s_fillp	O
)	O
;	O
break	O
;	O
case	O
t_package	O
:	O
mark_object	()->(void)
(	O
x	*(void)
->	O
p	*(char)
.	O
p_name	O
)	O
;	O
mark_object	()->(void)
(	O
x	*(void)
->	O
p	*(char)
.	O
p_nicknames	O
)	O
;	O
mark_object	()->(void)
(	O
x	*(void)
->	O
p	*(char)
.	O
p_shadowings	O
)	O
;	O
mark_object	()->(void)
(	O
x	*(void)
->	O
p	*(char)
.	O
p_uselist	O
)	O
;	O
mark_object	()->(void)
(	O
x	*(void)
->	O
p	*(char)
.	O
p_usedbylist	O
)	O
;	O
if	O
(	O
what_to_collect	enum
!=	O
t_contiguous	O
)	O
break	O
;	O
if	O
(	O
x	*(void)
->	O
p	*(char)
.	O
p_internal	O
!=	O
NULL	O
)	O
mark_contblock	(*(void),int)->(void)
(	O
(	O
char	O
*	O
)	O
(	O
x	*(void)
->	O
p	*(char)
.	O
p_internal	O
)	O
,	O
x	*(void)
->	O
p	*(char)
.	O
p_internal_size	O
*	O
sizeof	O
(	O
object	O
)	O
)	O
;	O
if	O
(	O
x	*(void)
->	O
p	*(char)
.	O
p_external	O
!=	O
NULL	O
)	O
mark_contblock	(*(void),int)->(void)
(	O
(	O
char	O
*	O
)	O
(	O
x	*(void)
->	O
p	*(char)
.	O
p_external	O
)	O
,	O
x	*(void)
->	O
p	*(char)
.	O
p_external_size	O
*	O
sizeof	O
(	O
object	O
)	O
)	O
;	O
break	O
;	O
case	O
t_hashtable	O
:	O
mark_object	()->(void)
(	O
x	*(void)
->	O
ht	O
.	O
ht_rhsize	O
)	O
;	O
mark_object	()->(void)
(	O
x	*(void)
->	O
ht	O
.	O
ht_rhthresh	O
)	O
;	O
if	O
(	O
x	*(void)
->	O
ht	O
.	O
ht_self	O
==	O
NULL	O
)	O
break	O
;	O
for	O
(	O
i	int
=	O
0	int
,	O
j	*(long)
=	O
x	*(void)
->	O
ht	O
.	O
ht_size	O
;	O
i	int
<	O
j	*(long)
;	O
i	int
++	O
)	O
{	O
mark_object	()->(void)
(	O
x	*(void)
->	O
ht	O
.	O
ht_self	O
[	O
i	int
]	O
.	O
hte_key	O
)	O
;	O
mark_object	()->(void)
(	O
x	*(void)
->	O
ht	O
.	O
ht_self	O
[	O
i	int
]	O
.	O
hte_value	O
)	O
;	O
}	O
if	O
(	O
inheap	()->(int)
(	O
x	*(void)
->	O
ht	O
.	O
ht_self	O
)	O
)	O
{	O
if	O
(	O
what_to_collect	enum
==	O
t_contiguous	O
)	O
mark_contblock	(*(void),int)->(void)
(	O
(	O
char	O
*	O
)	O
x	*(void)
->	O
ht	O
.	O
ht_self	O
,	O
j	*(long)
*	O
sizeof	O
(	O
struct	O
htent	O
)	O
)	O
;	O
}	O
else	O
if	O
(	O
COLLECT_RELBLOCK_P	O
)	O
x	*(void)
->	O
ht	O
.	O
ht_self	O
=	O
(	O
void	O
*	O
)	O
copy_relblock	(*(char),int)->(*(char))
(	O
(	O
char	O
*	O
)	O
x	*(void)
->	O
ht	O
.	O
ht_self	O
,	O
j	*(long)
*	O
sizeof	O
(	O
struct	O
htent	O
)	O
)	O
;	O
;	O
break	O
;	O
case	O
t_array	O
:	O
if	O
(	O
(	O
x	*(void)
->	O
a	*(*(void))
.	O
a_displaced	O
)	O
!=	O
Cnil	O
)	O
mark_displaced_field	O
(	O
x	*(void)
)	O
;	O
if	O
(	O
x	*(void)
->	O
a	*(*(void))
.	O
a_dims	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
inheap	()->(int)
(	O
x	*(void)
->	O
a	*(*(void))
.	O
a_dims	O
)	O
)	O
{	O
if	O
(	O
what_to_collect	enum
==	O
t_contiguous	O
)	O
mark_contblock	(*(void),int)->(void)
(	O
(	O
char	O
*	O
)	O
(	O
x	*(void)
->	O
a	*(*(void))
.	O
a_dims	O
)	O
,	O
sizeof	O
(	O
int	O
)	O
*	O
x	*(void)
->	O
a	*(*(void))
.	O
a_rank	O
)	O
;	O
}	O
else	O
if	O
(	O
COLLECT_RELBLOCK_P	O
)	O
x	*(void)
->	O
a	*(*(void))
.	O
a_dims	O
=	O
(	O
int	O
*	O
)	O
copy_relblock	(*(char),int)->(*(char))
(	O
(	O
char	O
*	O
)	O
(	O
x	*(void)
->	O
a	*(*(void))
.	O
a_dims	O
)	O
,	O
sizeof	O
(	O
int	O
)	O
*	O
x	*(void)
->	O
a	*(*(void))
.	O
a_rank	O
)	O
;	O
}	O
if	O
(	O
(	O
enum	O
aelttype	O
)	O
x	*(void)
->	O
a	*(*(void))
.	O
a_elttype	O
==	O
aet_ch	O
)	O
goto	O
CASE_STRING	O
;	O
if	O
(	O
(	O
enum	O
aelttype	O
)	O
x	*(void)
->	O
a	*(*(void))
.	O
a_elttype	O
==	O
aet_bit	O
)	O
goto	O
CASE_BITVECTOR	O
;	O
if	O
(	O
(	O
enum	O
aelttype	O
)	O
x	*(void)
->	O
a	*(*(void))
.	O
a_elttype	O
==	O
aet_object	O
)	O
goto	O
CASE_GENERAL	O
;	O
CASE_SPECIAL	O
:	O
cp	*(char)
=	O
(	O
char	O
*	O
)	O
(	O
x	*(void)
->	O
fixa	O
.	O
fixa_self	O
)	O
;	O
if	O
(	O
cp	*(char)
==	O
NULL	O
)	O
break	O
;	O
switch	O
(	O
(	O
enum	O
aelttype	O
)	O
x	*(void)
->	O
a	*(*(void))
.	O
a_elttype	O
)	O
{	O
case	O
aet_lf	O
:	O
j	*(long)
=	O
sizeof	O
(	O
longfloat	O
)	O
*	O
x	*(void)
->	O
lfa	O
.	O
lfa_dim	O
;	O
if	O
(	O
(	O
COLLECT_RELBLOCK_P	O
)	O
&&	O
!	O
(	O
inheap	()->(int)
(	O
cp	*(char)
)	O
)	O
)	O
ROUND_RB_POINTERS_DOUBLE	O
;	O
break	O
;	O
case	O
aet_char	O
:	O
case	O
aet_uchar	O
:	O
j	*(long)
=	O
sizeof	O
(	O
char	O
)	O
*	O
x	*(void)
->	O
a	*(*(void))
.	O
a_dim	O
;	O
break	O
;	O
case	O
aet_short	O
:	O
case	O
aet_ushort	O
:	O
j	*(long)
=	O
sizeof	O
(	O
short	O
)	O
*	O
x	*(void)
->	O
a	*(*(void))
.	O
a_dim	O
;	O
break	O
;	O
default	O
:	O
j	*(long)
=	O
sizeof	O
(	O
fixnum	O
)	O
*	O
x	*(void)
->	O
fixa	O
.	O
fixa_dim	O
;	O
}	O
goto	O
COPY	O
;	O
CASE_GENERAL	O
:	O
p	*(char)
=	O
x	*(void)
->	O
a	*(*(void))
.	O
a_self	O
;	O
if	O
(	O
p	*(char)
==	O
NULL	O
)	O
break	O
;	O
j	*(long)
=	O
0	int
;	O
if	O
(	O
x	*(void)
->	O
a	*(*(void))
.	O
a_displaced	O
->	O
c	O
.	O
c_car	O
==	O
Cnil	O
)	O
for	O
(	O
i	int
=	O
0	int
,	O
j	*(long)
=	O
x	*(void)
->	O
a	*(*(void))
.	O
a_dim	O
;	O
i	int
<	O
j	*(long)
;	O
i	int
++	O
)	O
mark_object	()->(void)
(	O
p	*(char)
[	O
i	int
]	O
)	O
;	O
cp	*(char)
=	O
(	O
char	O
*	O
)	O
p	*(char)
;	O
j	*(long)
*=	O
sizeof	O
(	O
object	O
)	O
;	O
COPY	O
:	O
if	O
(	O
inheap	()->(int)
(	O
cp	*(char)
)	O
)	O
{	O
if	O
(	O
what_to_collect	enum
==	O
t_contiguous	O
)	O
mark_contblock	(*(void),int)->(void)
(	O
cp	*(char)
,	O
j	*(long)
)	O
;	O
}	O
else	O
if	O
(	O
COLLECT_RELBLOCK_P	O
)	O
{	O
if	O
(	O
x	*(void)
->	O
a	*(*(void))
.	O
a_displaced	O
==	O
Cnil	O
)	O
{	O
x	*(void)
->	O
a	*(*(void))
.	O
a_self	O
=	O
(	O
object	O
*	O
)	O
copy_relblock	(*(char),int)->(*(char))
(	O
cp	*(char)
,	O
j	*(long)
)	O
;	O
}	O
else	O
if	O
(	O
x	*(void)
->	O
a	*(*(void))
.	O
a_displaced	O
->	O
c	O
.	O
c_car	O
==	O
Cnil	O
)	O
{	O
i	int
=	O
(	O
long	O
)	O
(	O
object	O
*	O
)	O
copy_relblock	(*(char),int)->(*(char))
(	O
cp	*(char)
,	O
j	*(long)
)	O
-	O
(	O
long	O
)	O
(	O
x	*(void)
->	O
a	*(*(void))
.	O
a_self	O
)	O
;	O
adjust_displaced	()->(int)
(	O
x	*(void)
,	O
i	int
)	O
;	O
}	O
}	O
break	O
;	O
case	O
t_vector	O
:	O
if	O
(	O
(	O
x	*(void)
->	O
v	*(struct)
.	O
v_displaced	O
)	O
!=	O
Cnil	O
)	O
mark_displaced_field	O
(	O
x	*(void)
)	O
;	O
if	O
(	O
(	O
enum	O
aelttype	O
)	O
x	*(void)
->	O
v	*(struct)
.	O
v_elttype	O
==	O
aet_object	O
)	O
goto	O
CASE_GENERAL	O
;	O
else	O
goto	O
CASE_SPECIAL	O
;	O
case	O
t_bignum	O
:	O
if	O
(	O
(	O
int	O
)	O
what_to_collect	enum
>=	O
(	O
int	O
)	O
t_contiguous	O
)	O
{	O
j	*(long)
=	O
MP_ALLOCATED	()->(int)
(	O
x	*(void)
)	O
;	O
cp	*(char)
=	O
(	O
char	O
*	O
)	O
MP_SELF	()->(int)
(	O
x	*(void)
)	O
;	O
if	O
(	O
cp	*(char)
==	O
0	int
)	O
break	O
;	O
j	*(long)
=	O
j	*(long)
*	O
MP_LIMB_SIZE	O
;	O
if	O
(	O
inheap	()->(int)
(	O
cp	*(char)
)	O
)	O
{	O
if	O
(	O
what_to_collect	enum
==	O
t_contiguous	O
)	O
mark_contblock	(*(void),int)->(void)
(	O
cp	*(char)
,	O
j	*(long)
)	O
;	O
}	O
else	O
if	O
(	O
COLLECT_RELBLOCK_P	O
)	O
{	O
MP_SELF	()->(int)
(	O
x	*(void)
)	O
=	O
(	O
void	O
*	O
)	O
copy_relblock	(*(char),int)->(*(char))
(	O
cp	*(char)
,	O
j	*(long)
)	O
;	O
}	O
}	O
break	O
;	O
CASE_STRING	O
:	O
case	O
t_string	O
:	O
if	O
(	O
(	O
x	*(void)
->	O
st	O
.	O
st_displaced	O
)	O
!=	O
Cnil	O
)	O
mark_displaced_field	O
(	O
x	*(void)
)	O
;	O
j	*(long)
=	O
x	*(void)
->	O
st	O
.	O
st_dim	O
;	O
cp	*(char)
=	O
x	*(void)
->	O
st	O
.	O
st_self	O
;	O
if	O
(	O
cp	*(char)
==	O
NULL	O
)	O
break	O
;	O
COPY_STRING	O
:	O
if	O
(	O
inheap	()->(int)
(	O
cp	*(char)
)	O
)	O
{	O
if	O
(	O
what_to_collect	enum
==	O
t_contiguous	O
)	O
mark_contblock	(*(void),int)->(void)
(	O
cp	*(char)
,	O
j	*(long)
)	O
;	O
}	O
else	O
if	O
(	O
COLLECT_RELBLOCK_P	O
)	O
{	O
if	O
(	O
x	*(void)
->	O
st	O
.	O
st_displaced	O
==	O
Cnil	O
)	O
x	*(void)
->	O
st	O
.	O
st_self	O
=	O
copy_relblock	(*(char),int)->(*(char))
(	O
cp	*(char)
,	O
j	*(long)
)	O
;	O
else	O
if	O
(	O
x	*(void)
->	O
st	O
.	O
st_displaced	O
->	O
c	O
.	O
c_car	O
==	O
Cnil	O
)	O
{	O
i	int
=	O
copy_relblock	(*(char),int)->(*(char))
(	O
cp	*(char)
,	O
j	*(long)
)	O
-	O
cp	*(char)
;	O
adjust_displaced	()->(int)
(	O
x	*(void)
,	O
i	int
)	O
;	O
}	O
}	O
break	O
;	O
CASE_BITVECTOR	O
:	O
case	O
t_bitvector	O
:	O
if	O
(	O
(	O
x	*(void)
->	O
bv	O
.	O
bv_displaced	O
)	O
!=	O
Cnil	O
)	O
mark_displaced_field	O
(	O
x	*(void)
)	O
;	O
j	*(long)
=	O
sizeof	O
(	O
fixnum	O
)	O
*	O
(	O
(	O
BV_OFFSET	()->(int)
(	O
x	*(void)
)	O
+	O
x	*(void)
->	O
bv	O
.	O
bv_dim	O
+	O
W_SIZE	O
-	O
1	int
)	O
/	O
W_SIZE	O
)	O
;	O
cp	*(char)
=	O
x	*(void)
->	O
bv	O
.	O
bv_self	O
;	O
if	O
(	O
cp	*(char)
==	O
NULL	O
)	O
break	O
;	O
goto	O
COPY_STRING	O
;	O
case	O
t_structure	O
:	O
mark_object	()->(void)
(	O
x	*(void)
->	O
str	O
.	O
str_def	O
)	O
;	O
p	*(char)
=	O
x	*(void)
->	O
str	O
.	O
str_self	O
;	O
if	O
(	O
p	*(char)
==	O
NULL	O
)	O
break	O
;	O
{	O
object	O
def	O
=	O
x	*(void)
->	O
str	O
.	O
str_def	O
;	O
unsigned	O
char	O
*	O
s_type	*(char)
=	O
&	O
SLOT_TYPE	()->(int)
(	O
def	O
,	O
0	int
)	O
;	O
unsigned	O
short	O
*	O
s_pos	*(short)
=	O
&	O
SLOT_POS	()->(int)
(	O
def	O
,	O
0	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
,	O
j	*(long)
=	O
S_DATA	()->(int)
(	O
def	O
)	O
->	O
length	O
;	O
i	int
<	O
j	*(long)
;	O
i	int
++	O
)	O
if	O
(	O
s_type	*(char)
[	O
i	int
]	O
==	O
0	int
)	O
mark_object	()->(void)
(	O
STREF	()->(int)
(	O
object	O
,	O
x	*(void)
,	O
s_pos	*(short)
[	O
i	int
]	O
)	O
)	O
;	O
if	O
(	O
inheap	()->(int)
(	O
x	*(void)
->	O
str	O
.	O
str_self	O
)	O
)	O
{	O
if	O
(	O
what_to_collect	enum
==	O
t_contiguous	O
)	O
mark_contblock	(*(void),int)->(void)
(	O
(	O
char	O
*	O
)	O
p	*(char)
,	O
S_DATA	()->(int)
(	O
def	O
)	O
->	O
size	int
)	O
;	O
}	O
else	O
if	O
(	O
COLLECT_RELBLOCK_P	O
)	O
x	*(void)
->	O
str	O
.	O
str_self	O
=	O
(	O
object	O
*	O
)	O
copy_relblock	(*(char),int)->(*(char))
(	O
(	O
char	O
*	O
)	O
p	*(char)
,	O
S_DATA	()->(int)
(	O
def	O
)	O
->	O
size	int
)	O
;	O
}	O
break	O
;	O
case	O
t_stream	O
:	O
switch	O
(	O
x	*(void)
->	O
sm	O
.	O
sm_mode	O
)	O
{	O
case	O
smm_input	O
:	O
case	O
smm_output	O
:	O
case	O
smm_io	O
:	O
case	O
smm_socket	O
:	O
case	O
smm_probe	O
:	O
mark_object	()->(void)
(	O
x	*(void)
->	O
sm	O
.	O
sm_object0	O
)	O
;	O
mark_object	()->(void)
(	O
x	*(void)
->	O
sm	O
.	O
sm_object1	O
)	O
;	O
if	O
(	O
what_to_collect	enum
==	O
t_contiguous	O
&&	O
x	*(void)
->	O
sm	O
.	O
sm_fp	O
&&	O
x	*(void)
->	O
sm	O
.	O
sm_buffer	O
)	O
mark_contblock	(*(void),int)->(void)
(	O
x	*(void)
->	O
sm	O
.	O
sm_buffer	O
,	O
BUFSIZ	O
)	O
;	O
break	O
;	O
case	O
smm_synonym	O
:	O
mark_object	()->(void)
(	O
x	*(void)
->	O
sm	O
.	O
sm_object0	O
)	O
;	O
break	O
;	O
case	O
smm_broadcast	O
:	O
case	O
smm_concatenated	O
:	O
mark_object	()->(void)
(	O
x	*(void)
->	O
sm	O
.	O
sm_object0	O
)	O
;	O
break	O
;	O
case	O
smm_two_way	O
:	O
case	O
smm_echo	O
:	O
mark_object	()->(void)
(	O
x	*(void)
->	O
sm	O
.	O
sm_object0	O
)	O
;	O
mark_object	()->(void)
(	O
x	*(void)
->	O
sm	O
.	O
sm_object1	O
)	O
;	O
break	O
;	O
case	O
smm_string_input	O
:	O
case	O
smm_string_output	O
:	O
mark_object	()->(void)
(	O
x	*(void)
->	O
sm	O
.	O
sm_object0	O
)	O
;	O
break	O
;	O
case	O
smm_user_defined	O
:	O
mark_object	()->(void)
(	O
x	*(void)
->	O
sm	O
.	O
sm_object0	O
)	O
;	O
mark_object	()->(void)
(	O
x	*(void)
->	O
sm	O
.	O
sm_object1	O
)	O
;	O
break	O
;	O
default	O
:	O
error	()->(int)
(	O
"mark stream botch"	*(char)
)	O
;	O
}	O
break	O
;	O
case	O
t_random	O
:	O
if	O
(	O
(	O
int	O
)	O
what_to_collect	enum
>=	O
(	O
int	O
)	O
t_contiguous	O
)	O
{	O
MARK_MP	O
(	O
x	*(void)
->	O
rnd	O
.	O
rnd_state	O
.	O
_mp_seed	O
)	O
;	O
if	O
(	O
x	*(void)
->	O
rnd	O
.	O
rnd_state	O
.	O
_mp_algdata	O
.	O
_mp_lc	O
)	O
{	O
MARK_MP	O
(	O
x	*(void)
->	O
rnd	O
.	O
rnd_state	O
.	O
_mp_algdata	O
.	O
_mp_lc	O
->	O
_mp_a	O
)	O
;	O
if	O
(	O
!	O
x	*(void)
->	O
rnd	O
.	O
rnd_state	O
.	O
_mp_algdata	O
.	O
_mp_lc	O
->	O
_mp_m2exp	O
)	O
MARK_MP	O
(	O
x	*(void)
->	O
rnd	O
.	O
rnd_state	O
.	O
_mp_algdata	O
.	O
_mp_lc	O
->	O
_mp_m	O
)	O
;	O
MARK_CP	O
(	O
x	*(void)
->	O
rnd	O
.	O
rnd_state	O
.	O
_mp_algdata	O
.	O
_mp_lc	O
,	O
sizeof	O
(	O
*	O
x	*(void)
->	O
rnd	O
.	O
rnd_state	O
.	O
_mp_algdata	O
.	O
_mp_lc	O
)	O
)	O
;	O
}	O
}	O
break	O
;	O
case	O
t_readtable	O
:	O
if	O
(	O
x	*(void)
->	O
rt	O
.	O
rt_self	O
==	O
NULL	O
)	O
break	O
;	O
if	O
(	O
what_to_collect	enum
==	O
t_contiguous	O
)	O
mark_contblock	(*(void),int)->(void)
(	O
(	O
char	O
*	O
)	O
(	O
x	*(void)
->	O
rt	O
.	O
rt_self	O
)	O
,	O
RTABSIZE	O
*	O
sizeof	O
(	O
struct	O
rtent	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
RTABSIZE	O
;	O
i	int
++	O
)	O
{	O
mark_object	()->(void)
(	O
x	*(void)
->	O
rt	O
.	O
rt_self	O
[	O
i	int
]	O
.	O
rte_macro	O
)	O
;	O
if	O
(	O
x	*(void)
->	O
rt	O
.	O
rt_self	O
[	O
i	int
]	O
.	O
rte_dtab	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
what_to_collect	enum
==	O
t_contiguous	O
)	O
mark_contblock	(*(void),int)->(void)
(	O
(	O
char	O
*	O
)	O
(	O
x	*(void)
->	O
rt	O
.	O
rt_self	O
[	O
i	int
]	O
.	O
rte_dtab	O
)	O
,	O
RTABSIZE	O
*	O
sizeof	O
(	O
object	O
)	O
)	O
;	O
for	O
(	O
j	*(long)
=	O
0	int
;	O
j	*(long)
<	O
RTABSIZE	O
;	O
j	*(long)
++	O
)	O
mark_object	()->(void)
(	O
x	*(void)
->	O
rt	O
.	O
rt_self	O
[	O
i	int
]	O
.	O
rte_dtab	O
[	O
j	*(long)
]	O
)	O
;	O
}	O
}	O
break	O
;	O
case	O
t_pathname	O
:	O
mark_object	()->(void)
(	O
x	*(void)
->	O
pn	O
.	O
pn_host	O
)	O
;	O
mark_object	()->(void)
(	O
x	*(void)
->	O
pn	O
.	O
pn_device	O
)	O
;	O
mark_object	()->(void)
(	O
x	*(void)
->	O
pn	O
.	O
pn_directory	O
)	O
;	O
mark_object	()->(void)
(	O
x	*(void)
->	O
pn	O
.	O
pn_name	O
)	O
;	O
mark_object	()->(void)
(	O
x	*(void)
->	O
pn	O
.	O
pn_type	O
)	O
;	O
mark_object	()->(void)
(	O
x	*(void)
->	O
pn	O
.	O
pn_version	O
)	O
;	O
break	O
;	O
case	O
t_closure	O
:	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
x	*(void)
->	O
cl	O
.	O
cl_envdim	O
;	O
i	int
++	O
)	O
mark_object	()->(void)
(	O
x	*(void)
->	O
cl	O
.	O
cl_env	O
[	O
i	int
]	O
)	O
;	O
if	O
(	O
COLLECT_RELBLOCK_P	O
)	O
x	*(void)
->	O
cl	O
.	O
cl_env	O
=	O
(	O
void	O
*	O
)	O
copy_relblock	(*(char),int)->(*(char))
(	O
(	O
void	O
*	O
)	O
x	*(void)
->	O
cl	O
.	O
cl_env	O
,	O
x	*(void)
->	O
cl	O
.	O
cl_envdim	O
*	O
sizeof	O
(	O
object	O
)	O
)	O
;	O
}	O
case	O
t_cfun	O
:	O
case	O
t_sfun	O
:	O
case	O
t_vfun	O
:	O
case	O
t_afun	O
:	O
case	O
t_gfun	O
:	O
mark_object	()->(void)
(	O
x	*(void)
->	O
cf	O
.	O
cf_name	O
)	O
;	O
mark_object	()->(void)
(	O
x	*(void)
->	O
cf	O
.	O
cf_data	O
)	O
;	O
break	O
;	O
case	O
t_cfdata	O
:	O
if	O
(	O
x	*(void)
->	O
cfd	O
.	O
cfd_self	O
!=	O
NULL	O
)	O
{	O
int	O
i	int
=	O
x	*(void)
->	O
cfd	O
.	O
cfd_fillp	O
;	O
while	O
(	O
i	int
--	O
>	O
0	int
)	O
mark_object	()->(void)
(	O
x	*(void)
->	O
cfd	O
.	O
cfd_self	O
[	O
i	int
]	O
)	O
;	O
}	O
if	O
(	O
what_to_collect	enum
==	O
t_contiguous	O
)	O
{	O
mark_contblock	(*(void),int)->(void)
(	O
x	*(void)
->	O
cfd	O
.	O
cfd_start	O
,	O
x	*(void)
->	O
cfd	O
.	O
cfd_size	O
)	O
;	O
mark_link_array	(*(void),*(void))->(void)
(	O
x	*(void)
->	O
cfd	O
.	O
cfd_start	O
,	O
x	*(void)
->	O
cfd	O
.	O
cfd_start	O
+	O
x	*(void)
->	O
cfd	O
.	O
cfd_size	O
)	O
;	O
}	O
break	O
;	O
case	O
t_cclosure	O
:	O
mark_object	()->(void)
(	O
x	*(void)
->	O
cc	O
.	O
cc_name	O
)	O
;	O
mark_object	()->(void)
(	O
x	*(void)
->	O
cc	O
.	O
cc_env	O
)	O
;	O
mark_object	()->(void)
(	O
x	*(void)
->	O
cc	O
.	O
cc_data	O
)	O
;	O
if	O
(	O
x	*(void)
->	O
cc	O
.	O
cc_turbo	O
!=	O
NULL	O
)	O
{	O
mark_object	()->(void)
(	O
*	O
(	O
x	*(void)
->	O
cc	O
.	O
cc_turbo	O
-	O
1	int
)	O
)	O
;	O
if	O
(	O
COLLECT_RELBLOCK_P	O
)	O
x	*(void)
->	O
cc	O
.	O
cc_turbo	O
=	O
(	O
void	O
*	O
)	O
copy_relblock	(*(char),int)->(*(char))
(	O
(	O
char	O
*	O
)	O
(	O
x	*(void)
->	O
cc	O
.	O
cc_turbo	O
-	O
1	int
)	O
,	O
(	O
1	int
+	O
fix	()->(int)
(	O
*	O
(	O
x	*(void)
->	O
cc	O
.	O
cc_turbo	O
-	O
1	int
)	O
)	O
)	O
*	O
sizeof	O
(	O
object	O
)	O
)	O
+	O
sizeof	O
(	O
object	O
)	O
;	O
}	O
break	O
;	O
case	O
t_spice	O
:	O
break	O
;	O
default	O
:	O
if	O
(	O
debug	int
)	O
printf	O
(	O
"\ttype = %d\n"	*(char)
,	O
type_of	()->(int)
(	O
x	*(void)
)	O
)	O
;	O
error	()->(int)
(	O
"mark botch"	*(char)
)	O
;	O
}	O
}	O
static	O
long	O
*	O
c_stack_where	*(long)
;	O
void	O
*	O
*	O
contblock_stack_list	*(*(void))
=	O
NULL	O
;	O
static	O
void	O
mark_stack_carefully	(*(void),*(void),int)->(void)
(	O
void	O
*	O
topv	*(void)
,	O
void	O
*	O
bottomv	*(void)
,	O
int	O
offset	int
)	O
{	O
long	O
pageoffset	long
;	O
long	O
p	*(char)
;	O
object	O
x	*(void)
;	O
struct	O
typemanager	O
*	O
tm	*(struct)
;	O
register	O
long	O
*	O
j	*(long)
;	O
long	O
*	O
top	*(long)
=	O
topv	*(void)
,	O
*	O
bottom	*(long)
=	O
bottomv	*(void)
;	O
if	O
(	O
top	*(long)
==	O
0	int
)	O
top	*(long)
=	O
c_stack_where	*(long)
;	O
if	O
(	O
bottom	*(long)
==	O
0	int
)	O
bottom	*(long)
=	O
c_stack_where	*(long)
;	O
if	O
(	O
offset	int
)	O
mark_stack_carefully	(*(void),*(void),int)->(void)
(	O
(	O
(	O
(	O
char	O
*	O
)	O
top	*(long)
)	O
+	O
offset	int
)	O
,	O
bottom	*(long)
,	O
0	int
)	O
;	O
for	O
(	O
j	*(long)
=	O
top	*(long)
;	O
j	*(long)
>=	O
bottom	*(long)
;	O
j	*(long)
--	O
)	O
{	O
void	O
*	O
v	*(struct)
=	O
(	O
void	O
*	O
)	O
(	O
*	O
j	*(long)
)	O
,	O
*	O
*	O
a	*(*(void))
;	O
struct	O
pageinfo	O
*	O
pi	*(struct)
;	O
if	O
(	O
!	O
VALID_DATA_ADDRESS_P	()->(int)
(	O
v	*(struct)
)	O
)	O
continue	O
;	O
if	O
(	O
(	O
p	*(char)
=	O
page	()->(int)
(	O
v	*(struct)
)	O
)	O
<	O
first_data_page	O
)	O
continue	O
;	O
pageoffset	long
=	O
v	*(struct)
-	O
(	O
void	O
*	O
)	O
pagetochar	()->(int)
(	O
p	*(char)
)	O
;	O
pi	*(struct)
=	O
pagetoinfo	()->(int)
(	O
p	*(char)
)	O
;	O
if	O
(	O
!	O
PAGEINFO_P	O
(	O
pi	*(struct)
)	O
)	O
continue	O
;	O
for	O
(	O
a	*(*(void))
=	O
contblock_stack_list	*(*(void))
;	O
a	*(*(void))
&&	O
a	*(*(void))
[	O
0	int
]	O
!=	O
pi	*(struct)
;	O
a	*(*(void))
=	O
a	*(*(void))
[	O
1	int
]	O
)	O
;	O
if	O
(	O
a	*(*(void))
)	O
continue	O
;	O
tm	*(struct)
=	O
tm_of	()->(int)
(	O
pi	*(struct)
->	O
type	O
)	O
;	O
if	O
(	O
tm	*(struct)
->	O
tm_type	O
>=	O
t_end	O
)	O
continue	O
;	O
if	O
(	O
pageoffset	long
<	O
0	int
||	O
pageoffset	long
>=	O
tm	*(struct)
->	O
tm_size	O
*	O
tm	*(struct)
->	O
tm_nppage	O
)	O
continue	O
;	O
x	*(void)
=	O
(	O
object	O
)	O
(	O
v	*(struct)
-	O
pageoffset	long
%	O
tm	*(struct)
->	O
tm_size	O
)	O
;	O
if	O
(	O
is_marked_or_free	()->(int)
(	O
x	*(void)
)	O
)	O
continue	O
;	O
mark_object	()->(void)
(	O
x	*(void)
)	O
;	O
}	O
}	O
static	O
void	O
mark_phase	()->(void)
(	O
void	O
)	O
{	O
STATIC	O
fixnum	O
i	int
,	O
j	*(long)
;	O
STATIC	O
struct	O
package	O
*	O
pp	O
;	O
STATIC	O
bds_ptr	O
bdp	O
;	O
STATIC	O
frame_ptr	O
frp	O
;	O
STATIC	O
ihs_ptr	O
ihsp	O
;	O
mark_object	()->(void)
(	O
Cnil	O
->	O
s	int
.	O
s_plist	O
)	O
;	O
mark_object	()->(void)
(	O
Ct	O
->	O
s	int
.	O
s_plist	O
)	O
;	O
mark_stack_carefully	(*(void),*(void),int)->(void)
(	O
vs_top	O
-	O
1	int
,	O
vs_org	O
,	O
0	int
)	O
;	O
mark_stack_carefully	(*(void),*(void),int)->(void)
(	O
MVloc	O
+	O
(	O
sizeof	O
(	O
MVloc	O
)	O
/	O
sizeof	O
(	O
object	O
)	O
)	O
,	O
MVloc	O
,	O
0	int
)	O
;	O
if	O
(	O
debug	int
)	O
{	O
printf	O
(	O
"value stack marked\n"	*(char)
)	O
;	O
fflush	()->(int)
(	O
stdout	O
)	O
;	O
}	O
for	O
(	O
bdp	O
=	O
bds_org	O
;	O
bdp	O
<=	O
bds_top	O
;	O
bdp	O
++	O
)	O
{	O
mark_object	()->(void)
(	O
bdp	O
->	O
bds_sym	O
)	O
;	O
mark_object	()->(void)
(	O
bdp	O
->	O
bds_val	O
)	O
;	O
}	O
for	O
(	O
frp	O
=	O
frs_org	O
;	O
frp	O
<=	O
frs_top	O
;	O
frp	O
++	O
)	O
mark_object	()->(void)
(	O
frp	O
->	O
frs_val	O
)	O
;	O
for	O
(	O
ihsp	O
=	O
ihs_org	O
;	O
ihsp	O
<=	O
ihs_top	O
;	O
ihsp	O
++	O
)	O
mark_object	()->(void)
(	O
ihsp	O
->	O
ihs_function	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
mark_origin_max	int
;	O
i	int
++	O
)	O
mark_object	()->(void)
(	O
*	O
mark_origin	array(*(int))
[	O
i	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
mark_origin_block_max	int
;	O
i	int
++	O
)	O
for	O
(	O
j	*(long)
=	O
0	int
;	O
j	*(long)
<	O
mark_origin_block	array(struct(*(int),int))
[	O
i	int
]	O
.	O
mob_size	int
;	O
j	*(long)
++	O
)	O
mark_object	()->(void)
(	O
mark_origin_block	array(struct(*(int),int))
[	O
i	int
]	O
.	O
mob_addr	*(int)
[	O
j	*(long)
]	O
)	O
;	O
for	O
(	O
pp	O
=	O
pack_pointer	O
;	O
pp	O
!=	O
NULL	O
;	O
pp	O
=	O
pp	O
->	O
p_link	O
)	O
mark_object	()->(void)
(	O
(	O
object	O
)	O
pp	O
)	O
;	O
if	O
(	O
debug	int
)	O
{	O
printf	O
(	O
"symbol navigation\n"	*(char)
)	O
;	O
fflush	()->(int)
(	O
stdout	O
)	O
;	O
}	O
{	O
int	O
size	int
;	O
for	O
(	O
pp	O
=	O
pack_pointer	O
;	O
pp	O
!=	O
NULL	O
;	O
pp	O
=	O
pp	O
->	O
p_link	O
)	O
{	O
size	int
=	O
pp	O
->	O
p_internal_size	O
;	O
if	O
(	O
pp	O
->	O
p_internal	O
!=	O
NULL	O
)	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
size	int
;	O
i	int
++	O
)	O
mark_object	()->(void)
(	O
pp	O
->	O
p_internal	O
[	O
i	int
]	O
)	O
;	O
size	int
=	O
pp	O
->	O
p_external_size	O
;	O
if	O
(	O
pp	O
->	O
p_external	O
!=	O
NULL	O
)	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
size	int
;	O
i	int
++	O
)	O
mark_object	()->(void)
(	O
pp	O
->	O
p_external	O
[	O
i	int
]	O
)	O
;	O
}	O
}	O
mark_c_stack	()->(void)
(	O
0	int
,	O
N_RECURSION_REQD	int
,	O
mark_stack_carefully	(*(void),*(void),int)->(void)
)	O
;	O
}	O
static	O
void	O
mark_c_stack	()->(void)
(	O
jmp_buf	O
env1	int
,	O
int	O
n	*(*(void))
,	O
void	O
(	O
*	O
fn	*((*(void),*(void),int)->(void))
)	O
(	O
void	O
*	O
,	O
void	O
*	O
,	O
int	O
)	O
)	O
{	O
jmp_buf	O
env	O
;	O
int	O
where	int
;	O
if	O
(	O
n	*(*(void))
==	O
N_RECURSION_REQD	int
)	O
c_stack_where	*(long)
=	O
(	O
long	O
*	O
)	O
(	O
void	O
*	O
)	O
&	O
env	O
;	O
if	O
(	O
n	*(*(void))
>	O
0	int
)	O
{	O
setjmp	()->(int)
(	O
env	O
)	O
;	O
mark_c_stack	()->(void)
(	O
env	O
,	O
n	*(*(void))
-	O
1	int
,	O
fn	*((*(void),*(void),int)->(void))
)	O
;	O
}	O
else	O
{	O
{	O
struct	O
pageinfo	O
*	O
v	*(struct)
,	O
*	O
tv	*(struct)
;	O
void	O
*	O
*	O
a	*(*(void))
;	O
fixnum	O
i	int
;	O
for	O
(	O
v	*(struct)
=	O
contblock_list_head	O
,	O
contblock_stack_list	*(*(void))
=	O
NULL	O
;	O
v	*(struct)
;	O
v	*(struct)
=	O
v	*(struct)
->	O
next	O
)	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
v	*(struct)
->	O
in_use	O
;	O
i	int
++	O
)	O
{	O
tv	*(struct)
=	O
pagetoinfo	()->(int)
(	O
page	()->(int)
(	O
v	*(struct)
)	O
+	O
i	int
)	O
;	O
if	O
(	O
PAGEINFO_P	O
(	O
tv	*(struct)
)	O
)	O
{	O
a	*(*(void))
=	O
contblock_stack_list	*(*(void))
;	O
contblock_stack_list	*(*(void))
=	O
alloca	(long)->(*(void))
(	O
2	int
*	O
sizeof	O
(	O
a	*(*(void))
)	O
)	O
;	O
contblock_stack_list	*(*(void))
[	O
0	int
]	O
=	O
tv	*(struct)
;	O
contblock_stack_list	*(*(void))
[	O
1	int
]	O
=	O
a	*(*(void))
;	O
}	O
}	O
if	O
(	O
&	O
where	int
>	O
cs_org	O
)	O
(	O
*	O
fn	*((*(void),*(void),int)->(void))
)	O
(	O
0	int
,	O
cs_org	O
,	O
C_GC_OFFSET	int
)	O
;	O
else	O
(	O
*	O
fn	*((*(void),*(void),int)->(void))
)	O
(	O
cs_org	O
,	O
0	int
,	O
C_GC_OFFSET	int
)	O
;	O
contblock_stack_list	*(*(void))
=	O
NULL	O
;	O
}	O
}	O
}	O
static	O
void	O
sweep_phase	()->(void)
(	O
void	O
)	O
{	O
STATIC	O
long	O
j	*(long)
,	O
k	O
;	O
STATIC	O
object	O
x	*(void)
;	O
STATIC	O
char	O
*	O
p	*(char)
;	O
STATIC	O
struct	O
typemanager	O
*	O
tm	*(struct)
;	O
STATIC	O
object	O
f	O
;	O
STATIC	O
struct	O
pageinfo	O
*	O
v	*(struct)
;	O
for	O
(	O
v	*(struct)
=	O
cell_list_head	O
;	O
v	*(struct)
;	O
v	*(struct)
=	O
v	*(struct)
->	O
next	O
)	O
{	O
tm	*(struct)
=	O
tm_of	()->(int)
(	O
(	O
enum	O
type	O
)	O
v	*(struct)
->	O
type	O
)	O
;	O
p	*(char)
=	O
pagetochar	()->(int)
(	O
page	()->(int)
(	O
v	*(struct)
)	O
)	O
;	O
f	O
=	O
tm	*(struct)
->	O
tm_free	O
;	O
k	O
=	O
0	int
;	O
for	O
(	O
j	*(long)
=	O
tm	*(struct)
->	O
tm_nppage	O
;	O
j	*(long)
>	O
0	int
;	O
--	O
j	*(long)
,	O
p	*(char)
+=	O
tm	*(struct)
->	O
tm_size	O
)	O
{	O
x	*(void)
=	O
(	O
object	O
)	O
p	*(char)
;	O
if	O
(	O
is_free	()->(int)
(	O
x	*(void)
)	O
)	O
continue	O
;	O
else	O
if	O
(	O
is_marked	()->(int)
(	O
x	*(void)
)	O
)	O
{	O
unmark	()->(int)
(	O
x	*(void)
)	O
;	O
continue	O
;	O
}	O
SET_LINK	()->(int)
(	O
x	*(void)
,	O
f	O
)	O
;	O
make_free	()->(int)
(	O
x	*(void)
)	O
;	O
f	O
=	O
x	*(void)
;	O
k	O
++	O
;	O
}	O
tm	*(struct)
->	O
tm_free	O
=	O
f	O
;	O
tm	*(struct)
->	O
tm_nfree	O
+=	O
k	O
;	O
pagetoinfo	()->(int)
(	O
page	()->(int)
(	O
v	*(struct)
)	O
)	O
->	O
in_use	O
-=	O
k	O
;	O
}	O
}	O
static	O
void	O
contblock_sweep_phase	()->(void)
(	O
void	O
)	O
{	O
STATIC	O
char	O
*	O
s	int
,	O
*	O
e	O
,	O
*	O
p	*(char)
,	O
*	O
q	*(char)
;	O
STATIC	O
struct	O
contblock	O
*	O
cbp	O
;	O
STATIC	O
struct	O
pageinfo	O
*	O
v	*(struct)
;	O
cb_pointer	O
=	O
NULL	O
;	O
ncb	O
=	O
0	int
;	O
for	O
(	O
v	*(struct)
=	O
contblock_list_head	O
;	O
v	*(struct)
;	O
v	*(struct)
=	O
v	*(struct)
->	O
next	O
)	O
{	O
bool	O
z	O
;	O
s	int
=	O
CB_DATA_START	()->(int)
(	O
v	*(struct)
)	O
;	O
e	O
=	O
(	O
void	O
*	O
)	O
v	*(struct)
+	O
v	*(struct)
->	O
in_use	O
*	O
PAGESIZE	O
;	O
z	O
=	O
get_mark_bit	(*(struct),*(void))->(char)
(	O
v	*(struct)
,	O
s	int
)	O
;	O
for	O
(	O
p	*(char)
=	O
s	int
;	O
p	*(char)
<	O
e	O
;	O
)	O
{	O
q	*(char)
=	O
get_bits	(*(char),*(struct),*(void))->(*(void))
(	O
CB_MARK_START	()->(int)
(	O
v	*(struct)
)	O
,	O
v	*(struct)
,	O
p	*(char)
)	O
;	O
if	O
(	O
!	O
z	O
)	O
insert_contblock	()->(int)
(	O
p	*(char)
,	O
q	*(char)
-	O
p	*(char)
)	O
;	O
z	O
=	O
1	int
-	O
z	O
;	O
p	*(char)
=	O
q	*(char)
;	O
}	O
bzero	(*(void),long)->(void)
(	O
CB_MARK_START	()->(int)
(	O
v	*(struct)
)	O
,	O
CB_SGCF_START	()->(int)
(	O
v	*(struct)
)	O
-	O
CB_MARK_START	()->(int)
(	O
v	*(struct)
)	O
)	O
;	O
}	O
if	O
(	O
debug	int
)	O
{	O
for	O
(	O
cbp	O
=	O
cb_pointer	O
;	O
cbp	O
!=	O
NULL	O
;	O
cbp	O
=	O
cbp	O
->	O
cb_link	O
)	O
printf	O
(	O
"%d-byte contblock\n"	*(char)
,	O
cbp	O
->	O
cb_size	O
)	O
;	O
fflush	()->(int)
(	O
stdout	O
)	O
;	O
}	O
sweep_link_array	()->(void)
(	O
)	O
;	O
}	O
int	O
(	O
*	O
GBC_enter_hook	*(()->(int))
)	O
(	O
)	O
=	O
NULL	O
;	O
int	O
(	O
*	O
GBC_exit_hook	*(()->(int))
)	O
(	O
)	O
=	O
NULL	O
;	O
char	O
*	O
old_rb_start	*(char)
;	O
fixnum	O
fault_pages	int
=	O
0	int
;	O
void	O
GBC	(enum)->(void)
(	O
enum	O
type	O
t	enum
)	O
{	O
long	O
i	int
,	O
j	*(long)
;	O
int	O
tm	*(struct)
=	O
0	int
;	O
BEGIN_NO_INTERRUPT	O
;	O
if	O
(	O
t	enum
==	O
t_other	O
)	O
{	O
collect_both	int
=	O
1	int
;	O
t	enum
=	O
t_contiguous	O
;	O
}	O
if	O
(	O
in_signal_handler	O
&&	O
t	enum
==	O
t_relocatable	O
)	O
error	()->(int)
(	O
"cant gc relocatable in signal handler"	*(char)
)	O
;	O
if	O
(	O
GBC_enter_hook	*(()->(int))
!=	O
NULL	O
)	O
(	O
*	O
GBC_enter_hook	*(()->(int))
)	O
(	O
)	O
;	O
if	O
(	O
!	O
GBC_enable	O
)	O
error	()->(int)
(	O
"GBC is not enabled"	*(char)
)	O
;	O
interrupt_enable	O
=	O
FALSE	O
;	O
if	O
(	O
saving_system	O
)	O
{	O
struct	O
pageinfo	O
*	O
v	*(struct)
;	O
void	O
*	O
x	*(void)
;	O
struct	O
typemanager	O
*	O
tm	*(struct)
=	O
tm_of	()->(int)
(	O
t_stream	O
)	O
;	O
unsigned	O
j	*(long)
;	O
for	O
(	O
v	*(struct)
=	O
cell_list_head	O
;	O
v	*(struct)
;	O
v	*(struct)
=	O
v	*(struct)
->	O
next	O
)	O
if	O
(	O
tm	*(struct)
->	O
tm_type	O
==	O
v	*(struct)
->	O
type	O
)	O
for	O
(	O
x	*(void)
=	O
pagetochar	()->(int)
(	O
page	()->(int)
(	O
v	*(struct)
)	O
)	O
,	O
j	*(long)
=	O
tm	*(struct)
->	O
tm_nppage	O
;	O
j	*(long)
--	O
;	O
x	*(void)
+=	O
tm	*(struct)
->	O
tm_size	O
)	O
{	O
object	O
o	O
=	O
x	*(void)
;	O
if	O
(	O
type_of	()->(int)
(	O
o	O
)	O
==	O
t_stream	O
&&	O
!	O
is_free	()->(int)
(	O
o	O
)	O
&&	O
o	O
->	O
sm	O
.	O
sm_fp	O
&&	O
o	O
->	O
sm	O
.	O
sm_fp	O
!=	O
stdin	O
&&	O
o	O
->	O
sm	O
.	O
sm_fp	O
!=	O
stdout	O
)	O
close_stream	()->(int)
(	O
o	O
)	O
;	O
}	O
t	enum
=	O
t_relocatable	O
;	O
gc_time	int
=	O
-	O
1	int
;	O
}	O
debug	int
=	O
symbol_value	()->(int)
(	O
sSAgbc_messageA	int
)	O
!=	O
Cnil	O
;	O
what_to_collect	enum
=	O
t	enum
;	O
tm_table	O
[	O
(	O
int	O
)	O
t	enum
]	O
.	O
tm_gbccount	O
++	O
;	O
tm_table	O
[	O
(	O
int	O
)	O
t	enum
]	O
.	O
tm_adjgbccnt	O
++	O
;	O
if	O
(	O
debug	int
||	O
(	O
sSAnotify_gbcA	int
->	O
s	int
.	O
s_dbind	O
!=	O
Cnil	O
)	O
)	O
{	O
if	O
(	O
gc_time	int
<	O
0	int
)	O
gc_time	int
=	O
0	int
;	O
printf	O
(	O
"[%s for %ld %s pages.."	*(char)
,	O
(	O
"GC"	*(char)
)	O
,	O
(	O
tm_of	()->(int)
(	O
t	enum
)	O
->	O
tm_npage	O
)	O
,	O
(	O
tm_table	O
[	O
(	O
int	O
)	O
t	enum
]	O
.	O
tm_name	O
)	O
+	O
1	int
)	O
;	O
fflush	()->(int)
(	O
stdout	O
)	O
;	O
}	O
if	O
(	O
gc_time	int
>=	O
0	int
&&	O
!	O
gc_recursive	int
++	O
)	O
{	O
gc_start	int
=	O
runtime	()->(int)
(	O
)	O
;	O
}	O
if	O
(	O
COLLECT_RELBLOCK_P	O
)	O
{	O
i	int
=	O
rb_pointer	O
-	O
REAL_RB_START	O
+	O
PAGESIZE	O
;	O
rb_start	O
=	O
heap_end	O
+	O
PAGESIZE	O
*	O
holepage	O
;	O
rb_end	O
=	O
heap_end	O
+	O
(	O
holepage	O
+	O
nrbpage	O
)	O
*	O
PAGESIZE	O
;	O
if	O
(	O
rb_start	O
<	O
rb_pointer	O
)	O
rb_start1	O
=	O
(	O
char	O
*	O
)	O
(	O
(	O
long	O
)	O
(	O
rb_pointer	O
+	O
PAGESIZE	O
-	O
1	int
)	O
&	O
-	O
(	O
unsigned	O
long	O
)	O
PAGESIZE	O
)	O
;	O
else	O
rb_start1	O
=	O
rb_start	O
;	O
rb_pointer	O
=	O
rb_start	O
;	O
rb_pointer1	O
=	O
rb_start1	O
;	O
i	int
=	O
(	O
rb_end	O
<	O
(	O
rb_start1	O
+	O
i	int
)	O
?	O
(	O
rb_start1	O
+	O
i	int
)	O
:	O
rb_end	O
)	O
-	O
heap_end	O
;	O
alloc_page	()->(int)
(	O
-	O
(	O
i	int
+	O
PAGESIZE	O
-	O
1	int
)	O
/	O
PAGESIZE	O
)	O
;	O
}	O
if	O
(	O
debug	int
)	O
{	O
printf	O
(	O
"mark phase\n"	*(char)
)	O
;	O
fflush	()->(int)
(	O
stdout	O
)	O
;	O
tm	*(struct)
=	O
runtime	()->(int)
(	O
)	O
;	O
}	O
mark_phase	()->(void)
(	O
)	O
;	O
if	O
(	O
debug	int
)	O
{	O
printf	O
(	O
"mark ended (%d)\n"	*(char)
,	O
runtime	()->(int)
(	O
)	O
-	O
tm	*(struct)
)	O
;	O
fflush	()->(int)
(	O
stdout	O
)	O
;	O
}	O
if	O
(	O
debug	int
)	O
{	O
printf	O
(	O
"sweep phase\n"	*(char)
)	O
;	O
fflush	()->(int)
(	O
stdout	O
)	O
;	O
tm	*(struct)
=	O
runtime	()->(int)
(	O
)	O
;	O
}	O
sweep_phase	()->(void)
(	O
)	O
;	O
if	O
(	O
debug	int
)	O
{	O
printf	O
(	O
"sweep ended (%d)\n"	*(char)
,	O
runtime	()->(int)
(	O
)	O
-	O
tm	*(struct)
)	O
;	O
fflush	()->(int)
(	O
stdout	O
)	O
;	O
}	O
if	O
(	O
COLLECT_RELBLOCK_P	O
)	O
{	O
if	O
(	O
rb_start	O
<	O
rb_start1	O
)	O
{	O
j	*(long)
=	O
(	O
rb_pointer	O
-	O
rb_start	O
+	O
PAGESIZE	O
-	O
1	int
)	O
/	O
PAGESIZE	O
;	O
memmove	(*(void),*(void),long)->(*(void))
(	O
rb_start	O
,	O
rb_start1	O
,	O
j	*(long)
*	O
PAGESIZE	O
)	O
;	O
}	O
rb_limit	O
=	O
rb_end	O
-	O
2	int
*	O
RB_GETA	O
;	O
}	O
if	O
(	O
t	enum
==	O
t_contiguous	O
)	O
{	O
if	O
(	O
debug	int
)	O
{	O
printf	O
(	O
"contblock sweep phase\n"	*(char)
)	O
;	O
fflush	()->(int)
(	O
stdout	O
)	O
;	O
tm	*(struct)
=	O
runtime	()->(int)
(	O
)	O
;	O
}	O
contblock_sweep_phase	()->(void)
(	O
)	O
;	O
if	O
(	O
debug	int
)	O
printf	O
(	O
"contblock sweep ended (%d)\n"	*(char)
,	O
runtime	()->(int)
(	O
)	O
-	O
tm	*(struct)
)	O
;	O
}	O
if	O
(	O
debug	int
)	O
{	O
for	O
(	O
i	int
=	O
0	int
,	O
j	*(long)
=	O
0	int
;	O
i	int
<	O
(	O
int	O
)	O
t_end	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
tm_table	O
[	O
i	int
]	O
.	O
tm_type	O
==	O
(	O
enum	O
type	O
)	O
i	int
)	O
{	O
printf	O
(	O
"%13s: %8ld used %8ld free %4ld/%ld pages\n"	*(char)
,	O
tm_table	O
[	O
i	int
]	O
.	O
tm_name	O
,	O
TM_NUSED	()->(int)
(	O
tm_table	O
[	O
i	int
]	O
)	O
,	O
tm_table	O
[	O
i	int
]	O
.	O
tm_nfree	O
,	O
tm_table	O
[	O
i	int
]	O
.	O
tm_npage	O
,	O
tm_table	O
[	O
i	int
]	O
.	O
tm_maxpage	O
)	O
;	O
j	*(long)
+=	O
tm_table	O
[	O
i	int
]	O
.	O
tm_npage	O
;	O
}	O
else	O
printf	O
(	O
"%13s: linked to %s\n"	*(char)
,	O
tm_table	O
[	O
i	int
]	O
.	O
tm_name	O
,	O
tm_table	O
[	O
(	O
int	O
)	O
tm_table	O
[	O
i	int
]	O
.	O
tm_type	O
]	O
.	O
tm_name	O
)	O
;	O
}	O
printf	O
(	O
"contblock: %ld blocks %ld pages\n"	*(char)
,	O
ncb	O
,	O
ncbpage	O
)	O
;	O
printf	O
(	O
"hole: %ld pages\n"	*(char)
,	O
holepage	O
)	O
;	O
printf	O
(	O
"relblock: %ld bytes used %ld bytes free %ld pages\n"	*(char)
,	O
(	O
long	O
)	O
(	O
rb_pointer	O
-	O
rb_start	O
)	O
,	O
(	O
long	O
)	O
(	O
rb_end	O
-	O
rb_pointer	O
)	O
,	O
nrbpage	O
)	O
;	O
printf	O
(	O
"GBC ended\n"	*(char)
)	O
;	O
fflush	()->(int)
(	O
stdout	O
)	O
;	O
}	O
interrupt_enable	O
=	O
TRUE	O
;	O
if	O
(	O
GBC_exit_hook	*(()->(int))
!=	O
NULL	O
)	O
(	O
*	O
GBC_exit_hook	*(()->(int))
)	O
(	O
)	O
;	O
if	O
(	O
gc_time	int
>=	O
0	int
&&	O
!	O
--	O
gc_recursive	int
)	O
{	O
gc_time	int
=	O
gc_time	int
+	O
(	O
gc_start	int
=	O
(	O
runtime	()->(int)
(	O
)	O
-	O
gc_start	int
)	O
)	O
;	O
}	O
if	O
(	O
sSAnotify_gbcA	int
->	O
s	int
.	O
s_dbind	O
!=	O
Cnil	O
)	O
{	O
if	O
(	O
gc_recursive	int
)	O
fprintf	()->(int)
(	O
stdout	O
,	O
"(T=...).GC finished]\n"	*(char)
)	O
;	O
else	O
fprintf	()->(int)
(	O
stdout	O
,	O
"(T=%d).GC finished]\n"	*(char)
,	O
gc_start	int
)	O
;	O
fflush	()->(int)
(	O
stdout	O
)	O
;	O
}	O
{	O
extern	O
long	O
opt_maxpage	(*(struct))->(long)
(	O
struct	O
typemanager	O
*	O
)	O
;	O
if	O
(	O
IGNORE_MAX_PAGES	O
&&	O
OPTIMIZE_MAX_PAGES	O
)	O
opt_maxpage	(*(struct))->(long)
(	O
tm_table	O
+	O
t	enum
)	O
;	O
}	O
collect_both	int
=	O
0	int
;	O
END_NO_INTERRUPT	O
;	O
CHECK_INTERRUPT	O
;	O
}	O
static	O
void	O
FFN	(int)->(int)
(	O
siLheap_report	int
)	O
(	O
void	O
)	O
{	O
int	O
i	int
;	O
check_arg	()->(int)
(	O
0	int
)	O
;	O
vs_check_push	()->(int)
(	O
make_fixnum	()->(int)
(	O
sizeof	O
(	O
fixnum	O
)	O
*	O
CHAR_SIZE	O
)	O
)	O
;	O
vs_push	()->(int)
(	O
make_fixnum	()->(int)
(	O
PAGESIZE	O
)	O
)	O
;	O
vs_push	()->(int)
(	O
make_fixnum	()->(int)
(	O
(	O
ufixnum	O
)	O
data_start	O
)	O
)	O
;	O
vs_push	()->(int)
(	O
make_fixnum	()->(int)
(	O
(	O
ufixnum	O
)	O
data_start	O
+	O
(	O
real_maxpage	long
<<	O
PAGEWIDTH	O
)	O
)	O
)	O
;	O
vs_push	()->(int)
(	O
make_fixnum	()->(int)
(	O
0	int
)	O
)	O
;	O
i	int
=	O
sizeof	O
(	O
fixnum	O
)	O
*	O
CHAR_SIZE	O
-	O
2	int
;	O
i	int
=	O
1	int
<<	O
i	int
;	O
vs_push	()->(int)
(	O
make_fixnum	()->(int)
(	O
(	O
(	O
unsigned	O
long	O
)	O
cs_base	O
+	O
i	int
-	O
1	int
)	O
&	O
-	O
i	int
)	O
)	O
;	O
vs_push	()->(int)
(	O
make_fixnum	()->(int)
(	O
abs	(int)->(int)
(	O
cs_base	O
-	O
cs_org	O
)	O
)	O
)	O
;	O
vs_push	()->(int)
(	O
make_fixnum	()->(int)
(	O
(	O
CSTACK_DIRECTION	O
+	O
1	int
)	O
>>	O
1	int
)	O
)	O
;	O
vs_push	()->(int)
(	O
make_fixnum	()->(int)
(	O
CSTACK_ALIGNMENT	O
)	O
)	O
;	O
vs_push	()->(int)
(	O
make_fixnum	()->(int)
(	O
abs	(int)->(int)
(	O
cs_limit	O
-	O
cs_org	O
)	O
)	O
)	O
;	O
vs_push	()->(int)
(	O
make_fixnum	()->(int)
(	O
0	int
)	O
)	O
;	O
vs_push	()->(int)
(	O
make_fixnum	()->(int)
(	O
0	int
)	O
)	O
;	O
vs_push	()->(int)
(	O
make_fixnum	()->(int)
(	O
phys_pages	O
)	O
)	O
;	O
}	O
static	O
void	O
FFN	(int)->(int)
(	O
siLroom_report	int
)	O
(	O
void	O
)	O
{	O
int	O
i	int
;	O
check_arg	()->(int)
(	O
0	int
)	O
;	O
vs_check_push	()->(int)
(	O
make_fixnum	()->(int)
(	O
real_maxpage	long
-	O
first_data_page	O
)	O
)	O
;	O
vs_push	()->(int)
(	O
make_fixnum	()->(int)
(	O
available_pages	O
)	O
)	O
;	O
vs_push	()->(int)
(	O
make_fixnum	()->(int)
(	O
ncbpage	O
)	O
)	O
;	O
vs_push	()->(int)
(	O
make_fixnum	()->(int)
(	O
maxcbpage	O
)	O
)	O
;	O
vs_push	()->(int)
(	O
make_fixnum	()->(int)
(	O
ncb	O
)	O
)	O
;	O
vs_push	()->(int)
(	O
make_fixnum	()->(int)
(	O
cbgbccount	O
)	O
)	O
;	O
vs_push	()->(int)
(	O
make_fixnum	()->(int)
(	O
holepage	O
)	O
)	O
;	O
vs_push	()->(int)
(	O
make_fixnum	()->(int)
(	O
rb_pointer	O
-	O
rb_start	O
)	O
)	O
;	O
vs_push	()->(int)
(	O
make_fixnum	()->(int)
(	O
rb_end	O
-	O
rb_pointer	O
)	O
)	O
;	O
vs_push	()->(int)
(	O
make_fixnum	()->(int)
(	O
nrbpage	O
)	O
)	O
;	O
vs_push	()->(int)
(	O
make_fixnum	()->(int)
(	O
maxrbpage	O
)	O
)	O
;	O
vs_push	()->(int)
(	O
make_fixnum	()->(int)
(	O
rbgbccount	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
(	O
int	O
)	O
t_end	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
tm_table	O
[	O
i	int
]	O
.	O
tm_type	O
==	O
(	O
enum	O
type	O
)	O
i	int
)	O
{	O
vs_check_push	()->(int)
(	O
make_fixnum	()->(int)
(	O
TM_NUSED	()->(int)
(	O
tm_table	O
[	O
i	int
]	O
)	O
)	O
)	O
;	O
vs_push	()->(int)
(	O
make_fixnum	()->(int)
(	O
tm_table	O
[	O
i	int
]	O
.	O
tm_nfree	O
+	O
tm_table	O
[	O
i	int
]	O
.	O
tm_alt_nfree	O
)	O
)	O
;	O
vs_push	()->(int)
(	O
make_fixnum	()->(int)
(	O
tm_table	O
[	O
i	int
]	O
.	O
tm_npage	O
)	O
)	O
;	O
vs_push	()->(int)
(	O
make_fixnum	()->(int)
(	O
tm_table	O
[	O
i	int
]	O
.	O
tm_maxpage	O
)	O
)	O
;	O
vs_push	()->(int)
(	O
make_fixnum	()->(int)
(	O
tm_table	O
[	O
i	int
]	O
.	O
tm_gbccount	O
)	O
)	O
;	O
}	O
else	O
{	O
vs_check_push	()->(int)
(	O
Cnil	O
)	O
;	O
vs_push	()->(int)
(	O
make_fixnum	()->(int)
(	O
tm_table	O
[	O
i	int
]	O
.	O
tm_type	O
)	O
)	O
;	O
vs_push	()->(int)
(	O
Cnil	O
)	O
;	O
vs_push	()->(int)
(	O
Cnil	O
)	O
;	O
vs_push	()->(int)
(	O
Cnil	O
)	O
;	O
}	O
}	O
}	O
static	O
void	O
FFN	(int)->(int)
(	O
siLreset_gbc_count	int
)	O
(	O
void	O
)	O
{	O
int	O
i	int
;	O
check_arg	()->(int)
(	O
0	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
t_other	O
;	O
i	int
++	O
)	O
tm_table	O
[	O
i	int
]	O
.	O
tm_gbccount	O
=	O
tm_table	O
[	O
i	int
]	O
.	O
tm_adjgbccnt	O
=	O
tm_table	O
[	O
i	int
]	O
.	O
tm_opt_maxpage	O
=	O
0	int
;	O
}	O
static	O
char	O
*	O
copy_relblock	(*(char),int)->(*(char))
(	O
char	O
*	O
p	*(char)
,	O
int	O
s	int
)	O
{	O
char	O
*	O
res	*(char)
=	O
rb_pointer	O
;	O
char	O
*	O
q	*(char)
=	O
rb_pointer1	O
;	O
s	int
=	O
ROUND_UP_PTR	()->(int)
(	O
s	int
)	O
;	O
rb_pointer	O
+=	O
s	int
;	O
rb_pointer1	O
+=	O
s	int
;	O
memmove	(*(void),*(void),long)->(*(void))
(	O
q	*(char)
,	O
p	*(char)
,	O
s	int
)	O
;	O
return	O
res	*(char)
;	O
}	O
static	O
void	O
mark_contblock	(*(void),int)->(void)
(	O
void	O
*	O
p	*(char)
,	O
int	O
s	int
)	O
{	O
STATIC	O
char	O
*	O
q	*(char)
;	O
STATIC	O
char	O
*	O
x	*(void)
,	O
*	O
y	O
;	O
struct	O
pageinfo	O
*	O
v	*(struct)
;	O
if	O
(	O
NULL_OR_ON_C_STACK	()->(int)
(	O
p	*(char)
)	O
)	O
return	O
;	O
q	*(char)
=	O
p	*(char)
+	O
s	int
;	O
x	*(void)
=	O
(	O
char	O
*	O
)	O
ROUND_DOWN_PTR_CONT	()->(int)
(	O
p	*(char)
)	O
;	O
y	O
=	O
(	O
char	O
*	O
)	O
ROUND_UP_PTR_CONT	()->(int)
(	O
q	*(char)
)	O
;	O
v	*(struct)
=	O
get_pageinfo	(*(void))->(*(struct))
(	O
x	*(void)
)	O
;	O
set_mark_bits	(*(struct),*(void),*(void))->(void)
(	O
v	*(struct)
,	O
x	*(void)
,	O
y	O
)	O
;	O
}	O
DEFUN_NEW	()->(int)
(	O
"GBC"	*(char)
,	O
object	O
,	O
fLgbc	O
,	O
LISP	O
,	O
1	int
,	O
1	int
,	O
NONE	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
object	O
x0	O
)	O
,	O
""	*(char)
)	O
{	O
if	O
(	O
x0	O
==	O
Ct	O
)	O
GBC	(enum)->(void)
(	O
t_other	O
)	O
;	O
else	O
if	O
(	O
x0	O
==	O
Cnil	O
)	O
GBC	(enum)->(void)
(	O
t_cons	O
)	O
;	O
else	O
if	O
(	O
eql	()->(int)
(	O
small_fixnum	()->(int)
(	O
0	int
)	O
,	O
x0	O
)	O
)	O
GBC	(enum)->(void)
(	O
t_contiguous	O
)	O
;	O
else	O
{	O
x0	O
=	O
small_fixnum	()->(int)
(	O
1	int
)	O
;	O
GBC	(enum)->(void)
(	O
t_relocatable	O
)	O
;	O
}	O
RETURN1	()->(int)
(	O
x0	O
)	O
;	O
}	O
static	O
void	O
FFN	(int)->(int)
(	O
siLgbc_time	int
)	O
(	O
void	O
)	O
{	O
if	O
(	O
vs_top	O
>	O
vs_base	O
)	O
gc_time	int
=	O
fix	()->(int)
(	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
else	O
{	O
vs_base	O
[	O
0	int
]	O
=	O
make_fixnum	()->(int)
(	O
gc_time	int
)	O
;	O
vs_top	O
=	O
vs_base	O
+	O
1	int
;	O
}	O
}	O
DEFVAR	()->(int)
(	O
"*NOTIFY-GBC*"	*(char)
,	O
sSAnotify_gbcA	int
,	O
SI	O
,	O
Cnil	O
,	O
""	*(char)
)	O
;	O
DEFVAR	()->(int)
(	O
"*GBC-MESSAGE*"	*(char)
,	O
sSAgbc_messageA	int
,	O
SI	O
,	O
Cnil	O
,	O
""	*(char)
)	O
;	O
void	O
gcl_init_GBC	()->(void)
(	O
void	O
)	O
{	O
make_si_function	()->(int)
(	O
"HEAP-REPORT"	*(char)
,	O
siLheap_report	int
)	O
;	O
make_si_function	()->(int)
(	O
"ROOM-REPORT"	*(char)
,	O
siLroom_report	int
)	O
;	O
make_si_function	()->(int)
(	O
"RESET-GBC-COUNT"	*(char)
,	O
siLreset_gbc_count	int
)	O
;	O
make_si_function	()->(int)
(	O
"GBC-TIME"	*(char)
,	O
siLgbc_time	int
)	O
;	O
}	O
