void	O
mode_string	(short,*(char))->(void)
(	O
unsigned	O
short	O
mode	short
,	O
char	O
*	O
str	*(char)
)	O
;	O
static	O
char	O
ftypelet	(long)->(char)
(	O
long	O
bits	long
)	O
;	O
static	O
void	O
rwx	(short,*(char))->(void)
(	O
unsigned	O
short	O
bits	long
,	O
char	O
*	O
chars	*(char)
)	O
;	O
static	O
void	O
setst	(short,*(char))->(void)
(	O
unsigned	O
short	O
bits	long
,	O
char	O
*	O
chars	*(char)
)	O
;	O
static	O
mode_t	int
set_perms	(*(char),int,*(int))->(int)
(	O
char	O
*	O
fps	*(char)
,	O
int	O
set	int
,	O
int	O
*	O
p_error	*(int)
)	O
{	O
mode_t	int
ret_mode	int
;	O
char	O
*	O
s	*(char)
;	O
char	O
r_b	char
;	O
char	O
w_b	char
;	O
char	O
x_b	char
;	O
unsigned	O
int	O
m_r	int
;	O
unsigned	O
int	O
m_w	int
;	O
unsigned	O
int	O
m_x	int
;	O
unsigned	O
int	O
m_s	int
;	O
unsigned	O
int	O
m_t	int
;	O
s	*(char)
=	O
fps	*(char)
;	O
if	O
(	O
set	int
==	O
0	int
)	O
{	O
m_r	int
=	O
S_IRUSR	O
;	O
m_w	int
=	O
S_IWUSR	O
;	O
m_x	int
=	O
S_IXUSR	O
;	O
m_s	int
=	O
S_ISUID	O
;	O
m_t	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
set	int
==	O
1	int
)	O
{	O
m_r	int
=	O
S_IRGRP	O
;	O
m_w	int
=	O
S_IWGRP	O
;	O
m_x	int
=	O
S_IXGRP	O
;	O
m_s	int
=	O
S_ISGID	O
;	O
m_t	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
set	int
==	O
2	int
)	O
{	O
m_r	int
=	O
S_IROTH	O
;	O
m_w	int
=	O
S_IWOTH	O
;	O
m_x	int
=	O
S_IXOTH	O
;	O
m_s	int
=	O
0	int
;	O
m_t	int
=	O
S_ISVTX	O
;	O
}	O
else	O
{	O
m_r	int
=	O
0	int
;	O
m_w	int
=	O
0	int
;	O
m_x	int
=	O
0	int
;	O
m_s	int
=	O
0	int
;	O
m_t	int
=	O
0	int
;	O
}	O
*	O
p_error	*(int)
=	O
0	int
;	O
if	O
(	O
*	O
s	*(char)
==	O
'\0'	O
)	O
{	O
*	O
p_error	*(int)
=	O
1	int
;	O
return	O
0	int
;	O
}	O
r_b	char
=	O
*	O
s	*(char)
;	O
s	*(char)
++	O
;	O
if	O
(	O
*	O
s	*(char)
==	O
'\0'	O
)	O
{	O
*	O
p_error	*(int)
=	O
1	int
;	O
return	O
0	int
;	O
}	O
w_b	char
=	O
*	O
s	*(char)
;	O
s	*(char)
++	O
;	O
if	O
(	O
*	O
s	*(char)
==	O
'\0'	O
)	O
{	O
*	O
p_error	*(int)
=	O
1	int
;	O
return	O
0	int
;	O
}	O
x_b	char
=	O
*	O
s	*(char)
;	O
ret_mode	int
=	O
0	int
;	O
if	O
(	O
r_b	char
==	O
'r'	O
)	O
{	O
ret_mode	int
|=	O
m_r	int
;	O
}	O
if	O
(	O
w_b	char
==	O
'w'	O
)	O
{	O
ret_mode	int
|=	O
m_w	int
;	O
}	O
if	O
(	O
x_b	char
==	O
'x'	O
)	O
{	O
ret_mode	int
|=	O
m_x	int
;	O
}	O
if	O
(	O
x_b	char
==	O
's'	O
)	O
{	O
ret_mode	int
|=	O
m_x	int
;	O
ret_mode	int
|=	O
m_s	int
;	O
}	O
if	O
(	O
x_b	char
==	O
't'	O
)	O
{	O
ret_mode	int
|=	O
m_x	int
;	O
ret_mode	int
|=	O
m_t	int
;	O
}	O
return	O
ret_mode	int
;	O
}	O
void	O
swlib_filemodestring	(int,*(char))->(void)
(	O
mode_t	int
mode	short
,	O
char	O
*	O
str	*(char)
)	O
{	O
mode_string	(short,*(char))->(void)
(	O
(	O
unsigned	O
short	O
)	O
mode	short
,	O
str	*(char)
)	O
;	O
}	O
void	O
filemodestring	(*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),*(char))->(void)
(	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
*	O
statp	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
,	O
char	O
*	O
str	*(char)
)	O
{	O
mode_string	(short,*(char))->(void)
(	O
statp	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_mode	int
,	O
str	*(char)
)	O
;	O
}	O
void	O
mode_string	(short,*(char))->(void)
(	O
unsigned	O
short	O
mode	short
,	O
char	O
*	O
str	*(char)
)	O
{	O
str	*(char)
[	O
0	int
]	O
=	O
ftypelet	(long)->(char)
(	O
(	O
long	O
)	O
mode	short
)	O
;	O
rwx	(short,*(char))->(void)
(	O
(	O
mode	short
&	O
0700	int
)	O
<<	O
0	int
,	O
&	O
str	*(char)
[	O
1	int
]	O
)	O
;	O
rwx	(short,*(char))->(void)
(	O
(	O
mode	short
&	O
0070	int
)	O
<<	O
3	int
,	O
&	O
str	*(char)
[	O
4	int
]	O
)	O
;	O
rwx	(short,*(char))->(void)
(	O
(	O
mode	short
&	O
0007	int
)	O
<<	O
6	int
,	O
&	O
str	*(char)
[	O
7	int
]	O
)	O
;	O
setst	(short,*(char))->(void)
(	O
mode	short
,	O
str	*(char)
)	O
;	O
}	O
static	O
char	O
ftypelet	(long)->(char)
(	O
bits	long
)	O
long	O
bits	long
;	O
{	O
if	O
(	O
S_ISBLK	O
(	O
bits	long
)	O
)	O
return	O
'b'	O
;	O
if	O
(	O
S_ISCHR	O
(	O
bits	long
)	O
)	O
return	O
'c'	O
;	O
if	O
(	O
S_ISDIR	O
(	O
bits	long
)	O
)	O
return	O
'd'	O
;	O
if	O
(	O
S_ISREG	O
(	O
bits	long
)	O
)	O
return	O
'-'	O
;	O
if	O
(	O
S_ISFIFO	O
(	O
bits	long
)	O
)	O
return	O
'p'	O
;	O
if	O
(	O
S_ISLNK	O
(	O
bits	long
)	O
)	O
return	O
'l'	O
;	O
if	O
(	O
S_ISSOCK	O
(	O
bits	long
)	O
)	O
return	O
's'	O
;	O
return	O
'?'	O
;	O
}	O
static	O
void	O
rwx	(short,*(char))->(void)
(	O
unsigned	O
short	O
bits	long
,	O
char	O
*	O
chars	*(char)
)	O
{	O
chars	*(char)
[	O
0	int
]	O
=	O
(	O
bits	long
&	O
S_IRUSR	O
)	O
?	O
'r'	O
:	O
'-'	O
;	O
chars	*(char)
[	O
1	int
]	O
=	O
(	O
bits	long
&	O
S_IWUSR	O
)	O
?	O
'w'	O
:	O
'-'	O
;	O
chars	*(char)
[	O
2	int
]	O
=	O
(	O
bits	long
&	O
S_IXUSR	O
)	O
?	O
'x'	O
:	O
'-'	O
;	O
}	O
static	O
void	O
setst	(short,*(char))->(void)
(	O
unsigned	O
short	O
bits	long
,	O
char	O
*	O
chars	*(char)
)	O
{	O
if	O
(	O
bits	long
&	O
S_ISUID	O
)	O
{	O
if	O
(	O
chars	*(char)
[	O
3	int
]	O
!=	O
'x'	O
)	O
chars	*(char)
[	O
3	int
]	O
=	O
'S'	O
;	O
else	O
chars	*(char)
[	O
3	int
]	O
=	O
's'	O
;	O
}	O
if	O
(	O
bits	long
&	O
S_ISGID	O
)	O
{	O
if	O
(	O
chars	*(char)
[	O
6	int
]	O
!=	O
'x'	O
)	O
chars	*(char)
[	O
6	int
]	O
=	O
'S'	O
;	O
else	O
chars	*(char)
[	O
6	int
]	O
=	O
's'	O
;	O
}	O
if	O
(	O
bits	long
&	O
S_ISVTX	O
)	O
{	O
if	O
(	O
chars	*(char)
[	O
9	int
]	O
!=	O
'x'	O
)	O
chars	*(char)
[	O
9	int
]	O
=	O
'T'	O
;	O
else	O
chars	*(char)
[	O
9	int
]	O
=	O
't'	O
;	O
}	O
}	O
mode_t	int
swlib_filestring_to_mode	(*(char),int)->(int)
(	O
char	O
*	O
str	*(char)
,	O
int	O
do_include_type	int
)	O
{	O
mode_t	int
ret	int
;	O
mode_t	int
mode_ret	int
;	O
int	O
error	int
;	O
char	O
*	O
s	*(char)
;	O
int	O
type	int
;	O
mode_ret	int
=	O
(	O
mode_t	int
)	O
0	int
;	O
s	*(char)
=	O
str	*(char)
;	O
mode_ret	int
=	O
(	O
mode_t	int
)	O
0	int
;	O
type	int
=	O
*	O
s	*(char)
;	O
if	O
(	O
type	int
==	O
'd'	O
||	O
type	int
==	O
'-'	O
||	O
type	int
==	O
'l'	O
||	O
type	int
==	O
's'	O
)	O
{	O
if	O
(	O
do_include_type	int
)	O
{	O
}	O
;	O
}	O
else	O
{	O
return	O
0	int
;	O
}	O
s	*(char)
++	O
;	O
if	O
(	O
*	O
s	*(char)
==	O
'\0'	O
)	O
return	O
0	int
;	O
ret	int
=	O
set_perms	(*(char),int,*(int))->(int)
(	O
s	*(char)
,	O
0	int
,	O
&	O
error	int
)	O
;	O
if	O
(	O
error	int
)	O
return	O
0	int
;	O
mode_ret	int
|=	O
ret	int
;	O
s	*(char)
++	O
;	O
if	O
(	O
*	O
s	*(char)
==	O
'\0'	O
)	O
return	O
0	int
;	O
s	*(char)
++	O
;	O
if	O
(	O
*	O
s	*(char)
==	O
'\0'	O
)	O
return	O
0	int
;	O
s	*(char)
++	O
;	O
if	O
(	O
*	O
s	*(char)
==	O
'\0'	O
)	O
return	O
0	int
;	O
ret	int
=	O
set_perms	(*(char),int,*(int))->(int)
(	O
s	*(char)
,	O
1	int
,	O
&	O
error	int
)	O
;	O
if	O
(	O
error	int
)	O
return	O
0	int
;	O
mode_ret	int
|=	O
ret	int
;	O
s	*(char)
++	O
;	O
if	O
(	O
*	O
s	*(char)
==	O
'\0'	O
)	O
return	O
0	int
;	O
s	*(char)
++	O
;	O
if	O
(	O
*	O
s	*(char)
==	O
'\0'	O
)	O
return	O
0	int
;	O
s	*(char)
++	O
;	O
if	O
(	O
*	O
s	*(char)
==	O
'\0'	O
)	O
return	O
0	int
;	O
ret	int
=	O
set_perms	(*(char),int,*(int))->(int)
(	O
s	*(char)
,	O
2	int
,	O
&	O
error	int
)	O
;	O
if	O
(	O
error	int
)	O
return	O
0	int
;	O
mode_ret	int
|=	O
ret	int
;	O
return	O
mode_ret	int
;	O
}	O
