static	O
void	O
Gcompile	(*(char),long)->(void)
(	O
char	O
const	O
*	O
pattern	*(char)
,	O
size_t	long
size	array(long)
)	O
{	O
GEAcompile	(*(char),long,long)->(void)
(	O
pattern	*(char)
,	O
size	array(long)
,	O
RE_SYNTAX_GREP	O
|	O
RE_NO_EMPTY_RANGES	O
)	O
;	O
}	O
static	O
void	O
Ecompile	(*(char),long)->(void)
(	O
char	O
const	O
*	O
pattern	*(char)
,	O
size_t	long
size	array(long)
)	O
{	O
GEAcompile	(*(char),long,long)->(void)
(	O
pattern	*(char)
,	O
size	array(long)
,	O
RE_SYNTAX_POSIX_EGREP	O
|	O
RE_NO_EMPTY_RANGES	O
)	O
;	O
}	O
static	O
void	O
Acompile	(*(char),long)->(void)
(	O
char	O
const	O
*	O
pattern	*(char)
,	O
size_t	long
size	array(long)
)	O
{	O
GEAcompile	(*(char),long,long)->(void)
(	O
pattern	*(char)
,	O
size	array(long)
,	O
RE_SYNTAX_AWK	O
)	O
;	O
}	O
struct	O
matcher	struct(*(char),*((*(char),long)->(void)),*((*(char),long,*(long),*(char))->(long)))
const	O
matchers	array(struct(*(char),*((*(char),long)->(void)),*((*(char),long,*(long),*(char))->(long))))
[	O
]	O
=	O
{	O
{	O
"grep"	*(char)
,	O
Gcompile	(*(char),long)->(void)
,	O
EGexecute	(*(char),long,*(long),*(char))->(long)
}	O
,	O
{	O
"egrep"	*(char)
,	O
Ecompile	(*(char),long)->(void)
,	O
EGexecute	(*(char),long,*(long),*(char))->(long)
}	O
,	O
{	O
"awk"	*(char)
,	O
Acompile	(*(char),long)->(void)
,	O
EGexecute	(*(char),long,*(long),*(char))->(long)
}	O
,	O
{	O
"fgrep"	*(char)
,	O
Fcompile	(*(char),long)->(void)
,	O
Fexecute	(*(char),long,*(long),*(char))->(long)
}	O
,	O
{	O
"perl"	*(char)
,	O
Pcompile	(*(char),long)->(void)
,	O
Pexecute	(*(char),long,*(long),*(char))->(long)
}	O
,	O
{	O
NULL	O
,	O
NULL	O
,	O
NULL	O
}	O
,	O
}	O
;	O
const	O
char	O
before_options	array(char)
[	O
]	O
=	O
N_	O
(	O
"PATTERN is, by default, a basic regular expression (BRE).\n"	*(char)
)	O
;	O
const	O
char	O
after_options	array(char)
[	O
]	O
=	O
N_	O
(	O
"`egrep' means `grep -E'.  `fgrep' means `grep -F'.\nDirect invocation as either `egrep' or `fgrep' is deprecated.\n"	*(char)
)	O
;	O
