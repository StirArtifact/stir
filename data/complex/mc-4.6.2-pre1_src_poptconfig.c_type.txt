static	O
void	O
configLine	(*(struct(array(struct(int,*(*(char)),int,*(char),*(char),*(struct(*(char),char,int,*(*(char)))),int)),*(struct(int,*`,int,*`,*`,*`,int)),*(*(char)),int,int,*(struct(*`,char,int,*`,int,*`,*`)),int,*(char),*(struct(*`,char,int,*`)),int,int,*(struct(*`,char,*`)),int,*(*(char)),int,int,*(struct(*`,char,*`)),*(char),int,*(char))),*(char))->(void)
(	O
poptContext	*(struct)
con	*(struct)
,	O
char	O
*	O
line	*(char)
)	O
{	O
int	O
nameLength	int
=	O
strlen	(*(char))->(long)
(	O
con	*(struct)
->	O
appName	*(char)
)	O
;	O
char	O
*	O
opt	*(struct(*(char),char,int,*(void),int,*(char),*(char)))
;	O
struct	O
poptAlias	struct(*(char),char,int,*(*(char)))
alias	struct(*(char),char,int,*(*(char)))
;	O
char	O
*	O
entryType	*(char)
;	O
char	O
*	O
longName	*(char)
=	O
NULL	O
;	O
char	O
shortName	char
=	O
'\0'	O
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
line	*(char)
,	O
con	*(struct)
->	O
appName	*(char)
,	O
nameLength	int
)	O
)	O
return	O
;	O
line	*(char)
+=	O
nameLength	int
;	O
if	O
(	O
!	O
*	O
line	*(char)
||	O
!	O
isspace	(int)->(int)
(	O
(	O
unsigned	O
char	O
)	O
*	O
line	*(char)
)	O
)	O
return	O
;	O
while	O
(	O
*	O
line	*(char)
&&	O
isspace	(int)->(int)
(	O
(	O
unsigned	O
char	O
)	O
*	O
line	*(char)
)	O
)	O
line	*(char)
++	O
;	O
entryType	*(char)
=	O
line	*(char)
;	O
while	O
(	O
!	O
*	O
line	*(char)
||	O
!	O
isspace	(int)->(int)
(	O
(	O
unsigned	O
char	O
)	O
*	O
line	*(char)
)	O
)	O
line	*(char)
++	O
;	O
*	O
line	*(char)
++	O
=	O
'\0'	O
;	O
while	O
(	O
*	O
line	*(char)
&&	O
isspace	(int)->(int)
(	O
(	O
unsigned	O
char	O
)	O
*	O
line	*(char)
)	O
)	O
line	*(char)
++	O
;	O
if	O
(	O
!	O
*	O
line	*(char)
)	O
return	O
;	O
opt	*(struct(*(char),char,int,*(void),int,*(char),*(char)))
=	O
line	*(char)
;	O
while	O
(	O
!	O
*	O
line	*(char)
||	O
!	O
isspace	(int)->(int)
(	O
(	O
unsigned	O
char	O
)	O
*	O
line	*(char)
)	O
)	O
line	*(char)
++	O
;	O
*	O
line	*(char)
++	O
=	O
'\0'	O
;	O
while	O
(	O
*	O
line	*(char)
&&	O
isspace	(int)->(int)
(	O
(	O
unsigned	O
char	O
)	O
*	O
line	*(char)
)	O
)	O
line	*(char)
++	O
;	O
if	O
(	O
!	O
*	O
line	*(char)
)	O
return	O
;	O
if	O
(	O
opt	*(struct(*(char),char,int,*(void),int,*(char),*(char)))
[	O
0	int
]	O
==	O
'-'	O
&&	O
opt	*(struct(*(char),char,int,*(void),int,*(char),*(char)))
[	O
1	int
]	O
==	O
'-'	O
)	O
longName	*(char)
=	O
opt	*(struct(*(char),char,int,*(void),int,*(char),*(char)))
+	O
2	int
;	O
else	O
if	O
(	O
opt	*(struct(*(char),char,int,*(void),int,*(char),*(char)))
[	O
0	int
]	O
==	O
'-'	O
&&	O
!	O
opt	*(struct(*(char),char,int,*(void),int,*(char),*(char)))
[	O
2	int
]	O
)	O
shortName	char
=	O
opt	*(struct(*(char),char,int,*(void),int,*(char),*(char)))
[	O
1	int
]	O
;	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
entryType	*(char)
,	O
"alias"	*(char)
)	O
)	O
{	O
if	O
(	O
poptParseArgvString	(*(char),*(int),*(*(*(char))))->(int)
(	O
line	*(char)
,	O
&	O
alias	struct(*(char),char,int,*(*(char)))
.	O
argc	int
,	O
&	O
alias	struct(*(char),char,int,*(*(char)))
.	O
argv	*(*(char))
)	O
)	O
return	O
;	O
alias	struct(*(char),char,int,*(*(char)))
.	O
longName	*(char)
=	O
longName	*(char)
,	O
alias	struct(*(char),char,int,*(*(char)))
.	O
shortName	char
=	O
shortName	char
;	O
poptAddAlias	(*(struct),struct(*(char),char,int,*(*(char))),int)->(int)
(	O
con	*(struct)
,	O
alias	struct(*(char),char,int,*(*(char)))
,	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
entryType	*(char)
,	O
"exec"	*(char)
)	O
)	O
{	O
con	*(struct)
->	O
execs	*(struct(*(char),char,*(char)))
=	O
realloc	(*(void),long)->(*(void))
(	O
con	*(struct)
->	O
execs	*(struct(*(char),char,*(char)))
,	O
sizeof	O
(	O
*	O
con	*(struct)
->	O
execs	*(struct(*(char),char,*(char)))
)	O
*	O
(	O
con	*(struct)
->	O
numExecs	int
+	O
1	int
)	O
)	O
;	O
if	O
(	O
longName	*(char)
)	O
con	*(struct)
->	O
execs	*(struct(*(char),char,*(char)))
[	O
con	*(struct)
->	O
numExecs	int
]	O
.	O
longName	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
longName	*(char)
)	O
;	O
else	O
con	*(struct)
->	O
execs	*(struct(*(char),char,*(char)))
[	O
con	*(struct)
->	O
numExecs	int
]	O
.	O
longName	*(char)
=	O
NULL	O
;	O
con	*(struct)
->	O
execs	*(struct(*(char),char,*(char)))
[	O
con	*(struct)
->	O
numExecs	int
]	O
.	O
shortName	char
=	O
shortName	char
;	O
con	*(struct)
->	O
execs	*(struct(*(char),char,*(char)))
[	O
con	*(struct)
->	O
numExecs	int
]	O
.	O
script	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
line	*(char)
)	O
;	O
con	*(struct)
->	O
numExecs	int
++	O
;	O
}	O
}	O
int	O
poptReadConfigFile	(*(struct),*(char))->(int)
(	O
poptContext	*(struct)
con	*(struct)
,	O
const	O
char	O
*	O
fn	*(char)
)	O
{	O
char	O
*	O
file	*(char)
,	O
*	O
chptr	*(char)
,	O
*	O
end	*(char)
;	O
char	O
*	O
buf	*(char)
,	O
*	O
dst	*(char)
;	O
int	O
fd	int
,	O
rc	int
;	O
int	O
fileLength	int
;	O
fd	int
=	O
open	(*(char),int)->(int)
(	O
fn	*(char)
,	O
O_RDONLY	int
)	O
;	O
if	O
(	O
fd	int
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
ENOENT	int
)	O
return	O
0	int
;	O
else	O
return	O
POPT_ERROR_ERRNO	O
;	O
}	O
fileLength	int
=	O
lseek	(int,long,int)->(long)
(	O
fd	int
,	O
0	int
,	O
SEEK_END	int
)	O
;	O
lseek	(int,long,int)->(long)
(	O
fd	int
,	O
0	int
,	O
0	int
)	O
;	O
file	*(char)
=	O
alloca	(long)->(*(void))
(	O
fileLength	int
+	O
1	int
)	O
;	O
if	O
(	O
read	(int,*(void),long)->(long)
(	O
fd	int
,	O
file	*(char)
,	O
fileLength	int
)	O
!=	O
fileLength	int
)	O
{	O
rc	int
=	O
errno	O
;	O
close	(int)->(int)
(	O
fd	int
)	O
;	O
errno	O
=	O
rc	int
;	O
return	O
POPT_ERROR_ERRNO	O
;	O
}	O
close	(int)->(int)
(	O
fd	int
)	O
;	O
dst	*(char)
=	O
buf	*(char)
=	O
alloca	(long)->(*(void))
(	O
fileLength	int
+	O
1	int
)	O
;	O
chptr	*(char)
=	O
file	*(char)
;	O
end	*(char)
=	O
(	O
file	*(char)
+	O
fileLength	int
)	O
;	O
while	O
(	O
chptr	*(char)
<	O
end	*(char)
)	O
{	O
switch	O
(	O
*	O
chptr	*(char)
)	O
{	O
case	O
'\n'	O
:	O
*	O
dst	*(char)
=	O
'\0'	O
;	O
dst	*(char)
=	O
buf	*(char)
;	O
while	O
(	O
*	O
dst	*(char)
&&	O
isspace	(int)->(int)
(	O
(	O
unsigned	O
char	O
)	O
*	O
dst	*(char)
)	O
)	O
dst	*(char)
++	O
;	O
if	O
(	O
*	O
dst	*(char)
&&	O
*	O
dst	*(char)
!=	O
'#'	O
)	O
{	O
configLine	(*(struct(array(struct(int,*(*(char)),int,*(char),*(char),*(struct(*(char),char,int,*(*(char)))),int)),*(struct(int,*`,int,*`,*`,*`,int)),*(*(char)),int,int,*(struct(*`,char,int,*`,int,*`,*`)),int,*(char),*(struct(*`,char,int,*`)),int,int,*(struct(*`,char,*`)),int,*(*(char)),int,int,*(struct(*`,char,*`)),*(char),int,*(char))),*(char))->(void)
(	O
con	*(struct)
,	O
dst	*(char)
)	O
;	O
}	O
chptr	*(char)
++	O
;	O
break	O
;	O
case	O
'\\'	O
:	O
*	O
dst	*(char)
++	O
=	O
*	O
chptr	*(char)
++	O
;	O
if	O
(	O
chptr	*(char)
<	O
end	*(char)
)	O
{	O
if	O
(	O
*	O
chptr	*(char)
==	O
'\n'	O
)	O
dst	*(char)
--	O
,	O
chptr	*(char)
++	O
;	O
else	O
*	O
dst	*(char)
++	O
=	O
*	O
chptr	*(char)
++	O
;	O
}	O
break	O
;	O
default	O
:	O
*	O
dst	*(char)
++	O
=	O
*	O
chptr	*(char)
++	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
poptReadDefaultConfig	(*(struct),int)->(int)
(	O
poptContext	*(struct)
con	*(struct)
,	O
int	O
useEnv	int
)	O
{	O
char	O
*	O
fn	*(char)
;	O
const	O
char	O
*	O
home	*(char)
;	O
int	O
rc	int
;	O
(	O
void	O
)	O
useEnv	int
;	O
if	O
(	O
!	O
con	*(struct)
->	O
appName	*(char)
)	O
return	O
0	int
;	O
rc	int
=	O
poptReadConfigFile	(*(struct),*(char))->(int)
(	O
con	*(struct)
,	O
"/etc/popt"	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
getuid	()->(int)
(	O
)	O
!=	O
geteuid	()->(int)
(	O
)	O
)	O
return	O
0	int
;	O
if	O
(	O
(	O
home	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"HOME"	*(char)
)	O
)	O
)	O
{	O
fn	*(char)
=	O
alloca	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
home	*(char)
)	O
+	O
20	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
fn	*(char)
,	O
home	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
fn	*(char)
,	O
"/.popt"	*(char)
)	O
;	O
rc	int
=	O
poptReadConfigFile	(*(struct),*(char))->(int)
(	O
con	*(struct)
,	O
fn	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
return	O
0	int
;	O
}	O
