void	O
setup_utmp	(*(char))->(void)
(	O
char	O
*	O
line	array(char)
)	O
{	O
char	O
*	O
ut_id	*(char)
=	O
utmp_ptsid	(*(char),*(char))->(*(char))
(	O
line	array(char)
,	O
"tn"	*(char)
)	O
;	O
utmp_init	(*(char),*(char),*(char))->(void)
(	O
line	array(char)
+	O
sizeof	O
(	O
"/dev/"	*(char)
)	O
-	O
1	int
,	O
".telnet"	*(char)
,	O
ut_id	*(char)
)	O
;	O
}	O
int	O
startslave	(*(char),int,*(char))->(int)
(	O
char	O
*	O
host	*(char)
,	O
int	O
autologin	int
,	O
char	O
*	O
autoname	*(char)
)	O
{	O
pid_t	int
pid	int
;	O
int	O
master	int
;	O
pid	int
=	O
forkpty	(*(int),*(char),*(struct(int,int,int,int,char,array(char),int,int)),*(struct(short,short,short,short)))->(int)
(	O
&	O
master	int
,	O
line	array(char)
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
pid	int
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
ENOENT	int
)	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"Out of ptys"	*(char)
)	O
;	O
fatal	(int,*(char))->(void)
(	O
net	int
,	O
"Out of ptys"	*(char)
)	O
;	O
}	O
else	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"forkpty: %m"	*(char)
)	O
;	O
fatal	(int,*(char))->(void)
(	O
net	int
,	O
"Forkpty"	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
pid	int
==	O
0	int
)	O
{	O
if	O
(	O
net	int
>	O
2	int
)	O
close	*((*(void))->(int))
(	O
net	int
)	O
;	O
start_login	(*(char),int,*(char))->(void)
(	O
host	*(char)
,	O
autologin	int
,	O
line	array(char)
)	O
;	O
}	O
return	O
master	int
;	O
}	O
extern	O
char	O
*	O
*	O
environ	*(*(char))
;	O
static	O
void	O
scrub_env	()->(void)
(	O
void	O
)	O
{	O
register	O
char	O
*	O
*	O
cpp	*(*(char))
,	O
*	O
*	O
cpp2	*(*(char))
;	O
for	O
(	O
cpp2	*(*(char))
=	O
cpp	*(*(char))
=	O
environ	*(*(char))
;	O
*	O
cpp	*(*(char))
;	O
cpp	*(*(char))
++	O
)	O
{	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
*	O
cpp	*(*(char))
,	O
"LD_"	*(char)
,	O
3	int
)	O
&&	O
strncmp	(*(char),*(char),long)->(int)
(	O
*	O
cpp	*(*(char))
,	O
"_RLD_"	*(char)
,	O
5	int
)	O
&&	O
strncmp	(*(char),*(char),long)->(int)
(	O
*	O
cpp	*(*(char))
,	O
"LIBPATH="	*(char)
,	O
8	int
)	O
&&	O
strncmp	(*(char),*(char),long)->(int)
(	O
*	O
cpp	*(*(char))
,	O
"IFS="	*(char)
,	O
4	int
)	O
)	O
*	O
cpp2	*(*(char))
++	O
=	O
*	O
cpp	*(*(char))
;	O
}	O
*	O
cpp2	*(*(char))
=	O
0	int
;	O
}	O
void	O
start_login	(*(char),int,*(char))->(void)
(	O
char	O
*	O
host	*(char)
,	O
int	O
autologin	int
,	O
char	O
*	O
name	*(char)
)	O
{	O
char	O
*	O
cmd	*(char)
;	O
int	O
argc	*(int)
;	O
char	O
*	O
*	O
argv	*(*(*(char)))
;	O
scrub_env	()->(void)
(	O
)	O
;	O
if	O
(	O
lmodetype	int
==	O
REAL_LINEMODE	int
)	O
setenv	(*(char),*(char),int)->(int)
(	O
"LINEMODE"	*(char)
,	O
"real"	*(char)
,	O
1	int
)	O
;	O
else	O
if	O
(	O
lmodetype	int
==	O
KLUDGE_LINEMODE	int
||	O
lmodetype	int
==	O
KLUDGE_OK	int
)	O
setenv	(*(char),*(char),int)->(int)
(	O
"LINEMODE"	*(char)
,	O
"kludge"	*(char)
,	O
1	int
)	O
;	O
cmd	*(char)
=	O
expand_line	(*(char))->(*(char))
(	O
login_invocation	*(char)
)	O
;	O
if	O
(	O
!	O
cmd	*(char)
)	O
fatal	(int,*(char))->(void)
(	O
net	int
,	O
"can't expand login command line"	*(char)
)	O
;	O
argcv_get	(*(char),*(char),*(int),*(*(*(char))))->(int)
(	O
cmd	*(char)
,	O
""	*(char)
,	O
&	O
argc	*(int)
,	O
&	O
argv	*(*(*(char)))
)	O
;	O
execv	(*(char),array(*(char)))->(int)
(	O
argv	*(*(*(char)))
[	O
0	int
]	O
,	O
argv	*(*(*(char)))
)	O
;	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"%s: %m\n"	*(char)
,	O
cmd	*(char)
)	O
;	O
fatalperror	(int,*(char))->(void)
(	O
net	int
,	O
cmd	*(char)
)	O
;	O
}	O
void	O
cleanup	*((*(struct(int,int,*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,int)->(void)),*((*`,*`,int)->(void)),*((*`,*`,int)->(int)),*((*`,int,*`,int)->(void)),*((*`)->(void)))))->(void))
(	O
int	O
sig	int
)	O
{	O
char	O
*	O
p	*(void)
;	O
if	O
(	O
sig	int
)	O
{	O
int	O
status	int
;	O
pid_t	int
pid	int
=	O
waitpid	(int,*(int),int)->(int)
(	O
(	O
pid_t	int
)	O
-	O
1	int
,	O
&	O
status	int
,	O
WNOHANG	int
)	O
;	O
syslog	(int,*(char))->(void)
(	O
LOG_INFO	int
,	O
"child process %ld exited: %d"	*(char)
,	O
(	O
long	O
)	O
pid	int
,	O
WEXITSTATUS	O
(	O
status	int
)	O
)	O
;	O
}	O
p	*(void)
=	O
line	array(char)
+	O
sizeof	O
(	O
PATH_DEV	O
)	O
-	O
1	int
;	O
utmp_logout	(*(char))->(void)
(	O
p	*(void)
)	O
;	O
chmod	(*(char),int)->(int)
(	O
line	array(char)
,	O
0644	int
)	O
;	O
chown	(*(char),int,int)->(int)
(	O
line	array(char)
,	O
0	int
,	O
0	int
)	O
;	O
shutdown	(int,int)->(int)
(	O
net	int
,	O
2	int
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
