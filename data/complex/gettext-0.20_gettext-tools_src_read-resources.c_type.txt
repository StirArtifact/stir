struct	O
locals	struct(*(struct(*(*(struct(*`,*`))),long,long,bool,*(char))))
{	O
msgdomain_list_ty	struct
*	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
;	O
}	O
;	O
static	O
bool	bool
execute_and_read_po_output	(*(char),*(char),*(*(char)),*(void))->(bool)
(	O
const	O
char	O
*	O
progname	*(char)
,	O
const	O
char	O
*	O
prog_path	*(char)
,	O
char	O
*	O
*	O
prog_argv	*(*(char))
,	O
void	O
*	O
private_data	*(void)
)	O
{	O
struct	O
locals	struct(*(struct(*(*(struct(*`,*`))),long,long,bool,*(char))))
*	O
l	*(struct(*(struct(*(*`),long,long,bool,*(char)))))
=	O
(	O
struct	O
locals	struct(*(struct(*(*(struct(*`,*`))),long,long,bool,*(char))))
*	O
)	O
private_data	*(void)
;	O
pid_t	int
child	int
;	O
int	O
fd	array(int)
[	O
1	int
]	O
;	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
int	O
exitstatus	int
;	O
child	int
=	O
create_pipe_in	(*(char),*(char),*(*(char)),*(char),bool,bool,bool,array(int))->(int)
(	O
progname	*(char)
,	O
prog_path	*(char)
,	O
prog_argv	*(*(char))
,	O
NULL	O
,	O
false	int
,	O
true	int
,	O
true	int
,	O
fd	array(int)
)	O
;	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fdopen	(int,*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
fd	array(int)
[	O
0	int
]	O
,	O
"r"	*(char)
)	O
;	O
if	O
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
==	O
NULL	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"fdopen() failed"	*(char)
)	O
)	O
;	O
l	*(struct(*(struct(*(*`),long,long,bool,*(char)))))
->	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
=	O
read_catalog_stream	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),*(char),*(struct(*((*`,*`,*`,*`)->(void)),bool)))->(*(struct(*(*(struct`)),long,long,bool,*(char))))
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(pipe)"	*(char)
,	O
"(pipe)"	*(char)
,	O
&	O
input_format_po	struct(*((*(struct(*`)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),*(char))->(void)),bool)
)	O
;	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exitstatus	int
=	O
wait_subprocess	(int,*(char),bool,bool,bool,bool,*(int))->(int)
(	O
child	int
,	O
progname	*(char)
,	O
false	int
,	O
false	int
,	O
true	int
,	O
true	int
,	O
NULL	O
)	O
;	O
if	O
(	O
exitstatus	int
!=	O
0	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"%s subprocess failed with exit code %d"	*(char)
)	O
,	O
progname	*(char)
,	O
exitstatus	int
)	O
;	O
return	O
false	int
;	O
}	O
void	O
read_resources_file	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char))->(void)
(	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
const	O
char	O
*	O
filename	*(char)
)	O
{	O
const	O
char	O
*	O
args	*(*(char))
[	O
2	int
]	O
;	O
const	O
char	O
*	O
gettextexedir	*(char)
;	O
const	O
char	O
*	O
gettextlibdir	*(char)
;	O
char	O
*	O
assembly_path	*(char)
;	O
const	O
char	O
*	O
libdirs	*(*(char))
[	O
1	int
]	O
;	O
struct	O
locals	struct(*(struct(*(*(struct(*`,*`))),long,long,bool,*(char))))
locals	struct(*(struct(*(*(struct(*`,*`))),long,long,bool,*(char))))
;	O
args	*(*(char))
[	O
0	int
]	O
=	O
filename	*(char)
;	O
args	*(*(char))
[	O
1	int
]	O
=	O
NULL	O
;	O
gettextexedir	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"GETTEXTCSHARPEXEDIR"	*(char)
)	O
;	O
if	O
(	O
gettextexedir	*(char)
==	O
NULL	O
||	O
gettextexedir	*(char)
[	O
0	int
]	O
==	O
'\0'	O
)	O
gettextexedir	*(char)
=	O
relocate	O
(	O
LIBDIR	O
"/gettext"	*(char)
)	O
;	O
gettextlibdir	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"GETTEXTCSHARPLIBDIR"	*(char)
)	O
;	O
if	O
(	O
gettextlibdir	*(char)
==	O
NULL	O
||	O
gettextlibdir	*(char)
[	O
0	int
]	O
==	O
'\0'	O
)	O
gettextlibdir	*(char)
=	O
relocate	O
(	O
LIBDIR	O
)	O
;	O
assembly_path	*(char)
=	O
xconcatenated_filename	(*(char),*(char),*(char))->(*(char))
(	O
gettextexedir	*(char)
,	O
"msgunfmt.net"	*(char)
,	O
".exe"	*(char)
)	O
;	O
libdirs	*(*(char))
[	O
0	int
]	O
=	O
gettextlibdir	*(char)
;	O
if	O
(	O
execute_csharp_program	(*(char),*(*(char)),int,*(*(char)),bool,bool,*((*(char),*(char),*(*(char)),*(void))->(bool)),*(void))->(bool)
(	O
assembly_path	*(char)
,	O
libdirs	*(*(char))
,	O
1	int
,	O
args	*(*(char))
,	O
verbose	bool
,	O
false	int
,	O
execute_and_read_po_output	(*(char),*(char),*(*(char)),*(void))->(bool)
,	O
&	O
locals	struct(*(struct(*(*(struct(*`,*`))),long,long,bool,*(char))))
)	O
)	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
{	O
message_list_ty	struct
*	O
read_mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
=	O
locals	struct(*(struct(*(*(struct(*`,*`))),long,long,bool,*(char))))
.	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
->	O
item	*(*(char))
[	O
0	int
]	O
->	O
messages	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
;	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
read_mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
nitems	long
;	O
j	long
++	O
)	O
message_list_append	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))->(void)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
read_mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
[	O
j	long
]	O
)	O
;	O
}	O
free	(*(void))->(void)
(	O
assembly_path	*(char)
)	O
;	O
}	O
