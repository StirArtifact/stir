static	O
int	O
prefix_length	(*(char),*(char))->(int)
(	O
char	O
*	O
s1	*(char)
,	O
char	O
*	O
s2	*(char)
)	O
{	O
register	O
char	O
*	O
start	*(char)
;	O
for	O
(	O
start	*(char)
=	O
s1	*(char)
;	O
*	O
s1	*(char)
==	O
*	O
s2	*(char)
&&	O
*	O
s1	*(char)
!=	O
'\0'	O
;	O
s1	*(char)
++	O
,	O
s2	*(char)
++	O
)	O
;	O
return	O
s1	*(char)
-	O
start	*(char)
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
char	O
*	O
path	*(char)
;	O
char	O
*	O
oldpath	*(char)
;	O
size_t	long
pathsize	long
,	O
oldpathsize	long
;	O
int	O
line_len	int
;	O
if	O
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
set_program_name	(*(char))->(void)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
else	O
set_program_name	(*(char))->(void)
(	O
"bigram"	*(char)
)	O
;	O
setlocale	(int,*(char))->(*(char))
(	O
LC_ALL	O
,	O
""	*(char)
)	O
;	O
bindtextdomain	(*(char),*(char))->(*(char))
(	O
PACKAGE	*(char)
,	O
LOCALEDIR	O
)	O
;	O
textdomain	(*(char))->(*(char))
(	O
PACKAGE	*(char)
)	O
;	O
(	O
void	O
)	O
argc	int
;	O
if	O
(	O
atexit	(*(()->(void)))->(int)
(	O
close_stdout	()->(void)
)	O
)	O
{	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"The atexit library function failed"	*(char)
)	O
)	O
;	O
}	O
pathsize	long
=	O
oldpathsize	long
=	O
1026	int
;	O
path	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
pathsize	long
)	O
;	O
oldpath	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
oldpathsize	long
)	O
;	O
oldpath	*(char)
[	O
0	int
]	O
=	O
'\0'	O
;	O
while	O
(	O
(	O
line_len	int
=	O
getline	(*(*(char)),*(long),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
&	O
path	*(char)
,	O
&	O
pathsize	long
,	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
>	O
0	int
)	O
{	O
register	O
int	O
count	int
;	O
register	O
int	O
j	int
;	O
path	*(char)
[	O
line_len	int
-	O
1	int
]	O
=	O
'\0'	O
;	O
count	int
=	O
prefix_length	(*(char),*(char))->(int)
(	O
oldpath	*(char)
,	O
path	*(char)
)	O
;	O
for	O
(	O
j	int
=	O
count	int
;	O
path	*(char)
[	O
j	int
]	O
!=	O
'\0'	O
&&	O
path	*(char)
[	O
j	int
+	O
1	int
]	O
!=	O
'\0'	O
;	O
j	int
+=	O
2	int
)	O
{	O
putchar	(int)->(int)
(	O
path	*(char)
[	O
j	int
]	O
)	O
;	O
putchar	(int)->(int)
(	O
path	*(char)
[	O
j	int
+	O
1	int
]	O
)	O
;	O
putchar	(int)->(int)
(	O
'\n'	O
)	O
;	O
}	O
{	O
char	O
*	O
tmppath	*(char)
=	O
oldpath	*(char)
;	O
size_t	long
tmppathsize	long
=	O
oldpathsize	long
;	O
oldpath	*(char)
=	O
path	*(char)
;	O
oldpathsize	long
=	O
pathsize	long
;	O
path	*(char)
=	O
tmppath	*(char)
;	O
pathsize	long
=	O
tmppathsize	long
;	O
}	O
}	O
free	(*(void))->(void)
(	O
path	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
oldpath	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
