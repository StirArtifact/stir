static	O
const	O
char	O
*	O
key_emu_str	array(*(char))
[	O
]	O
=	O
{	O
N_	O
(	O
"Intuitive"	*(char)
)	O
,	O
N_	O
(	O
"Emacs"	*(char)
)	O
,	O
N_	O
(	O
"User-defined"	*(char)
)	O
,	O
NULL	O
}	O
;	O
static	O
const	O
char	O
*	O
wrap_str	array(*(char))
[	O
]	O
=	O
{	O
N_	O
(	O
"None"	*(char)
)	O
,	O
N_	O
(	O
"Dynamic paragraphing"	*(char)
)	O
,	O
N_	O
(	O
"Type writer wrap"	*(char)
)	O
,	O
NULL	O
}	O
;	O
static	O
void	O
i18n_translate_array	(array(*(char)))->(void)
(	O
const	O
char	O
*	O
array	*(struct(*(char),int))
[	O
]	O
)	O
{	O
while	O
(	O
*	O
array	*(struct(*(char),int))
!=	O
NULL	O
)	O
{	O
*	O
array	*(struct(*(char),int))
=	O
_	O
(	O
*	O
array	*(struct(*(char),int))
)	O
;	O
array	*(struct(*(char),int))
++	O
;	O
}	O
}	O
void	O
edit_options_dialog	()->(void)
(	O
void	O
)	O
{	O
char	O
wrap_length	array(char)
[	O
32	int
]	O
,	O
tab_spacing	array(char)
[	O
32	int
]	O
,	O
*	O
p	*(void)
,	O
*	O
q	*(char)
;	O
int	O
wrap_mode	int
=	O
0	int
;	O
int	O
old_syntax_hl	int
;	O
int	O
tedit_key_emulation	int
=	O
edit_key_emulation	int
;	O
int	O
toption_fill_tabs_with_spaces	int
=	O
option_fill_tabs_with_spaces	int
;	O
int	O
toption_save_position	int
=	O
option_save_position	int
;	O
int	O
tedit_confirm_save	int
=	O
edit_confirm_save	int
;	O
int	O
tedit_syntax_highlighting	int
=	O
option_syntax_highlighting	int
;	O
int	O
toption_return_does_auto_indent	int
=	O
option_return_does_auto_indent	int
;	O
int	O
toption_backspace_through_tabs	int
=	O
option_backspace_through_tabs	int
;	O
int	O
toption_fake_half_tabs	int
=	O
option_fake_half_tabs	int
;	O
static	O
int	O
i18n_flag	int
=	O
0	int
;	O
QuickWidget	struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
]	O
=	O
{	O
{	O
quick_button	int
,	O
6	int
,	O
10	int
,	O
OPT_DLG_H	int
-	O
3	int
,	O
OPT_DLG_H	int
,	O
N_	O
(	O
"&Cancel"	*(char)
)	O
,	O
0	int
,	O
B_CANCEL	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_button	int
,	O
2	int
,	O
10	int
,	O
OPT_DLG_H	int
-	O
3	int
,	O
OPT_DLG_H	int
,	O
N_	O
(	O
"&OK"	*(char)
)	O
,	O
0	int
,	O
B_ENTER	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_label	int
,	O
OPT_DLG_W	int
/	O
2	int
,	O
OPT_DLG_W	int
,	O
OPT_DLG_H	int
-	O
5	int
,	O
OPT_DLG_H	int
,	O
N_	O
(	O
"Word wrap line length: "	*(char)
)	O
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_input	int
,	O
OPT_DLG_W	int
/	O
2	int
+	O
24	int
,	O
OPT_DLG_W	int
,	O
OPT_DLG_H	int
-	O
5	int
,	O
OPT_DLG_H	int
,	O
""	*(char)
,	O
OPT_DLG_W	int
/	O
2	int
-	O
4	int
-	O
24	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
"edit-word-wrap"	*(char)
}	O
,	O
{	O
quick_label	int
,	O
OPT_DLG_W	int
/	O
2	int
,	O
OPT_DLG_W	int
,	O
OPT_DLG_H	int
-	O
6	int
,	O
OPT_DLG_H	int
,	O
N_	O
(	O
"Tab spacing: "	*(char)
)	O
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_input	int
,	O
OPT_DLG_W	int
/	O
2	int
+	O
24	int
,	O
OPT_DLG_W	int
,	O
OPT_DLG_H	int
-	O
6	int
,	O
OPT_DLG_H	int
,	O
""	*(char)
,	O
OPT_DLG_W	int
/	O
2	int
-	O
4	int
-	O
24	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
"edit-tab-spacing"	*(char)
}	O
,	O
{	O
quick_checkbox	int
,	O
OPT_DLG_W	int
/	O
2	int
+	O
1	int
,	O
OPT_DLG_W	int
,	O
OPT_DLG_H	int
-	O
8	int
,	O
OPT_DLG_H	int
,	O
N_	O
(	O
"Synta&x highlighting"	*(char)
)	O
,	O
8	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_checkbox	int
,	O
OPT_DLG_W	int
/	O
2	int
+	O
1	int
,	O
OPT_DLG_W	int
,	O
OPT_DLG_H	int
-	O
9	int
,	O
OPT_DLG_H	int
,	O
N_	O
(	O
"Save file &position"	*(char)
)	O
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_checkbox	int
,	O
OPT_DLG_W	int
/	O
2	int
+	O
1	int
,	O
OPT_DLG_W	int
,	O
OPT_DLG_H	int
-	O
10	int
,	O
OPT_DLG_H	int
,	O
N_	O
(	O
"Confir&m before saving"	*(char)
)	O
,	O
6	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_checkbox	int
,	O
OPT_DLG_W	int
/	O
2	int
+	O
1	int
,	O
OPT_DLG_W	int
,	O
OPT_DLG_H	int
-	O
11	int
,	O
OPT_DLG_H	int
,	O
N_	O
(	O
"Fill tabs with &spaces"	*(char)
)	O
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_checkbox	int
,	O
OPT_DLG_W	int
/	O
2	int
+	O
1	int
,	O
OPT_DLG_W	int
,	O
OPT_DLG_H	int
-	O
12	int
,	O
OPT_DLG_H	int
,	O
N_	O
(	O
"&Return does autoindent"	*(char)
)	O
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_checkbox	int
,	O
OPT_DLG_W	int
/	O
2	int
+	O
1	int
,	O
OPT_DLG_W	int
,	O
OPT_DLG_H	int
-	O
13	int
,	O
OPT_DLG_H	int
,	O
N_	O
(	O
"&Backspace through tabs"	*(char)
)	O
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_checkbox	int
,	O
OPT_DLG_W	int
/	O
2	int
+	O
1	int
,	O
OPT_DLG_W	int
,	O
OPT_DLG_H	int
-	O
14	int
,	O
OPT_DLG_H	int
,	O
N_	O
(	O
"&Fake half tabs"	*(char)
)	O
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_radio	int
,	O
5	int
,	O
OPT_DLG_W	int
,	O
OPT_DLG_H	int
-	O
7	int
,	O
OPT_DLG_H	int
,	O
""	*(char)
,	O
3	int
,	O
0	int
,	O
0	int
,	O
const_cast	O
(	O
char	O
*	O
*	O
,	O
wrap_str	array(*(char))
)	O
,	O
"wrapm"	*(char)
}	O
,	O
{	O
quick_label	int
,	O
4	int
,	O
OPT_DLG_W	int
,	O
OPT_DLG_H	int
-	O
8	int
,	O
OPT_DLG_H	int
,	O
N_	O
(	O
"Wrap mode"	*(char)
)	O
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_radio	int
,	O
5	int
,	O
OPT_DLG_W	int
,	O
OPT_DLG_H	int
-	O
13	int
,	O
OPT_DLG_H	int
,	O
""	*(char)
,	O
3	int
,	O
0	int
,	O
0	int
,	O
const_cast	O
(	O
char	O
*	O
*	O
,	O
key_emu_str	array(*(char))
)	O
,	O
"keyemu"	*(char)
}	O
,	O
{	O
quick_label	int
,	O
4	int
,	O
OPT_DLG_W	int
,	O
OPT_DLG_H	int
-	O
14	int
,	O
OPT_DLG_H	int
,	O
N_	O
(	O
"Key emulation"	*(char)
)	O
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
NULL_QuickWidget	O
}	O
;	O
QuickDialog	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
Quick_options	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
=	O
{	O
OPT_DLG_W	int
,	O
OPT_DLG_H	int
,	O
-	O
1	int
,	O
0	int
,	O
N_	O
(	O
" Editor options "	*(char)
)	O
,	O
""	*(char)
,	O
0	int
,	O
0	int
}	O
;	O
if	O
(	O
!	O
i18n_flag	int
)	O
{	O
i18n_translate_array	(array(*(char)))->(void)
(	O
key_emu_str	array(*(char))
)	O
;	O
i18n_translate_array	(array(*(char)))->(void)
(	O
wrap_str	array(*(char))
)	O
;	O
i18n_flag	int
=	O
1	int
;	O
}	O
g_snprintf	(*(char),long,*(char))->(int)
(	O
wrap_length	array(char)
,	O
sizeof	O
(	O
wrap_length	array(char)
)	O
,	O
"%d"	*(char)
,	O
option_word_wrap_line_length	int
)	O
;	O
g_snprintf	(*(char),long,*(char))->(int)
(	O
tab_spacing	array(char)
,	O
sizeof	O
(	O
tab_spacing	array(char)
)	O
,	O
"%d"	*(char)
,	O
option_tab_spacing	int
)	O
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
3	int
]	O
.	O
text	*(char)
=	O
wrap_length	array(char)
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
3	int
]	O
.	O
str_result	*(*(char))
=	O
&	O
p	*(void)
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
5	int
]	O
.	O
text	*(char)
=	O
tab_spacing	array(char)
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
5	int
]	O
.	O
str_result	*(*(char))
=	O
&	O
q	*(char)
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
6	int
]	O
.	O
result	long
=	O
&	O
tedit_syntax_highlighting	int
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
7	int
]	O
.	O
result	long
=	O
&	O
toption_save_position	int
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
8	int
]	O
.	O
result	long
=	O
&	O
tedit_confirm_save	int
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
9	int
]	O
.	O
result	long
=	O
&	O
toption_fill_tabs_with_spaces	int
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
10	int
]	O
.	O
result	long
=	O
&	O
toption_return_does_auto_indent	int
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
11	int
]	O
.	O
result	long
=	O
&	O
toption_backspace_through_tabs	int
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
12	int
]	O
.	O
result	long
=	O
&	O
toption_fake_half_tabs	int
;	O
if	O
(	O
option_auto_para_formatting	int
)	O
wrap_mode	int
=	O
1	int
;	O
else	O
if	O
(	O
option_typewriter_wrap	int
)	O
wrap_mode	int
=	O
2	int
;	O
else	O
wrap_mode	int
=	O
0	int
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
13	int
]	O
.	O
result	long
=	O
&	O
wrap_mode	int
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
13	int
]	O
.	O
value	*(void)
=	O
wrap_mode	int
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
15	int
]	O
.	O
result	long
=	O
&	O
tedit_key_emulation	int
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
15	int
]	O
.	O
value	*(void)
=	O
tedit_key_emulation	int
;	O
Quick_options	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
widgets	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
=	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
;	O
if	O
(	O
quick_dialog	(*(struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*`,int,int,*`,*`,*`)),int)))->(int)
(	O
&	O
Quick_options	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
)	O
==	O
B_CANCEL	int
)	O
return	O
;	O
old_syntax_hl	int
=	O
option_syntax_highlighting	int
;	O
if	O
(	O
p	*(void)
)	O
{	O
option_word_wrap_line_length	int
=	O
atoi	(*(char))->(int)
(	O
p	*(void)
)	O
;	O
g_free	(*(void))->(void)
(	O
p	*(void)
)	O
;	O
}	O
if	O
(	O
q	*(char)
)	O
{	O
option_tab_spacing	int
=	O
atoi	(*(char))->(int)
(	O
q	*(char)
)	O
;	O
if	O
(	O
option_tab_spacing	int
<=	O
0	int
)	O
option_tab_spacing	int
=	O
8	int
;	O
g_free	(*(void))->(void)
(	O
q	*(char)
)	O
;	O
}	O
option_syntax_highlighting	int
=	O
tedit_syntax_highlighting	int
;	O
edit_confirm_save	int
=	O
tedit_confirm_save	int
;	O
option_save_position	int
=	O
toption_save_position	int
;	O
option_fill_tabs_with_spaces	int
=	O
toption_fill_tabs_with_spaces	int
;	O
option_return_does_auto_indent	int
=	O
toption_return_does_auto_indent	int
;	O
option_backspace_through_tabs	int
=	O
toption_backspace_through_tabs	int
;	O
option_fake_half_tabs	int
=	O
toption_fake_half_tabs	int
;	O
if	O
(	O
wrap_mode	int
==	O
1	int
)	O
{	O
option_auto_para_formatting	int
=	O
1	int
;	O
option_typewriter_wrap	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
wrap_mode	int
==	O
2	int
)	O
{	O
option_auto_para_formatting	int
=	O
0	int
;	O
option_typewriter_wrap	int
=	O
1	int
;	O
}	O
else	O
{	O
option_auto_para_formatting	int
=	O
0	int
;	O
option_typewriter_wrap	int
=	O
0	int
;	O
}	O
if	O
(	O
edit_key_emulation	int
!=	O
tedit_key_emulation	int
)	O
{	O
edit_key_emulation	int
=	O
tedit_key_emulation	int
;	O
edit_reload_menu	()->(void)
(	O
)	O
;	O
}	O
if	O
(	O
option_syntax_highlighting	int
!=	O
old_syntax_hl	int
)	O
edit_load_syntax	(*(struct),*(*(*(char))),*(char))->(void)
(	O
wedit	*(struct)
,	O
NULL	O
,	O
option_syntax_type	*(char)
)	O
;	O
edit_load_user_map	(*(struct))->(int)
(	O
wedit	*(struct)
)	O
;	O
}	O
