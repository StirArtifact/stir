char	O
*	O
mutool_shell_prompt	*(char)
;	O
static	O
mu_assoc_t	*(struct)
mutool_prompt_assoc	*(struct)
;	O
int	O
mutool_shell_interactive	int
;	O
static	O
int	O
got_signal	int
=	O
0	int
;	O
static	O
void	O
_shell_sig	(int)->(void)
(	O
int	O
sig	int
)	O
{	O
got_signal	int
=	O
sig	int
;	O
}	O
static	O
void	O
report_signals	()->(void)
(	O
)	O
{	O
switch	O
(	O
got_signal	int
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
SIGINT	int
:	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
mu_strerr	*(struct)
,	O
_	O
(	O
"Interrupt\n"	*(char)
)	O
)	O
;	O
mu_stream_flush	(*(struct))->(int)
(	O
mu_strerr	*(struct)
)	O
;	O
default	O
:	O
got_signal	int
=	O
0	int
;	O
}	O
}	O
static	O
int	O
shell_exit	(int,*(*(char)))->(int)
(	O
int	O
,	O
char	O
*	O
*	O
)	O
;	O
static	O
int	O
shell_help	(int,*(*(char)))->(int)
(	O
int	O
,	O
char	O
*	O
*	O
)	O
;	O
static	O
int	O
shell_prompt	(int,*(*(char)))->(int)
(	O
int	O
,	O
char	O
*	O
*	O
)	O
;	O
struct	O
mutool_command	struct(*(char),int,int,int,*((int,*(*(char)))->(int)),*(char),*(char))
default_comtab	array(struct(*(char),int,int,int,*((int,*(*(char)))->(int)),*(char),*(char)))
[	O
]	O
=	O
{	O
{	O
"prompt"	*(char)
,	O
1	int
,	O
2	int
,	O
0	int
,	O
shell_prompt	(int,*(*(char)))->(int)
,	O
N_	O
(	O
"STRING"	*(char)
)	O
,	O
N_	O
(	O
"set command prompt"	*(char)
)	O
}	O
,	O
{	O
"exit"	*(char)
,	O
1	int
,	O
1	int
,	O
0	int
,	O
shell_exit	(int,*(*(char)))->(int)
,	O
NULL	O
,	O
N_	O
(	O
"exit program"	*(char)
)	O
}	O
,	O
{	O
"help"	*(char)
,	O
1	int
,	O
2	int
,	O
0	int
,	O
shell_help	(int,*(*(char)))->(int)
,	O
N_	O
(	O
"[COMMAND]"	*(char)
)	O
,	O
N_	O
(	O
"display this text"	*(char)
)	O
}	O
,	O
{	O
"?"	*(char)
,	O
1	int
,	O
1	int
,	O
0	int
,	O
shell_help	(int,*(*(char)))->(int)
,	O
N_	O
(	O
"[COMMAND]"	*(char)
)	O
,	O
N_	O
(	O
"synonym for `help'"	*(char)
)	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
void	O
print_comtab	(*(struct),*(struct(*(char),int,int,int,*((int,*`)->(int)),*(char),*(char))))->(void)
(	O
mu_stream_t	*(struct)
stream	*(struct)
,	O
struct	O
mutool_command	struct(*(char),int,int,int,*((int,*(*(char)))->(int)),*(char),*(char))
*	O
tab	*(struct(*(char),int,int,int,*((int,*(*`))->(int)),*(char),*(char)))
)	O
{	O
size_t	long
size	long
=	O
0	int
;	O
const	O
char	O
*	O
text	*(char)
;	O
if	O
(	O
tab	*(struct(*(char),int,int,int,*((int,*(*`))->(int)),*(char),*(char)))
->	O
docstring	*(char)
==	O
NULL	O
)	O
return	O
;	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
stream	*(struct)
,	O
"%s "	*(char)
,	O
tab	*(struct(*(char),int,int,int,*((int,*(*`))->(int)),*(char),*(char)))
->	O
name	*(char)
)	O
;	O
size	long
+=	O
strlen	(*(char))->(long)
(	O
tab	*(struct(*(char),int,int,int,*((int,*(*`))->(int)),*(char),*(char)))
->	O
name	*(char)
)	O
+	O
1	int
;	O
if	O
(	O
tab	*(struct(*(char),int,int,int,*((int,*(*`))->(int)),*(char),*(char)))
->	O
argdoc	*(char)
)	O
{	O
text	*(char)
=	O
gettext	(*(char))->(*(char))
(	O
tab	*(struct(*(char),int,int,int,*((int,*(*`))->(int)),*(char),*(char)))
->	O
argdoc	*(char)
)	O
;	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
stream	*(struct)
,	O
"%s"	*(char)
,	O
text	*(char)
)	O
;	O
size	long
+=	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
;	O
}	O
if	O
(	O
size	long
>=	O
DESCRCOL	int
)	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
stream	*(struct)
,	O
"\n%-*s"	*(char)
,	O
DESCRCOL	int
,	O
""	*(char)
)	O
;	O
else	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
stream	*(struct)
,	O
"%-*s"	*(char)
,	O
(	O
int	O
)	O
(	O
DESCRCOL	int
-	O
size	long
)	O
,	O
""	*(char)
)	O
;	O
text	*(char)
=	O
gettext	(*(char))->(*(char))
(	O
tab	*(struct(*(char),int,int,int,*((int,*(*`))->(int)),*(char),*(char)))
->	O
docstring	*(char)
)	O
;	O
size	long
=	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
;	O
while	O
(	O
*	O
text	*(char)
)	O
{	O
size_t	long
len	long
=	O
size	long
;	O
if	O
(	O
len	long
>	O
DESCRWIDTH	O
)	O
{	O
size_t	long
n	*(long)
=	O
0	int
;	O
while	O
(	O
n	*(long)
<	O
len	long
)	O
{	O
size_t	long
delta	long
;	O
char	O
*	O
p	*(char)
;	O
p	*(char)
=	O
mu_str_skip_cset_comp	(*(char),*(char))->(*(char))
(	O
text	*(char)
+	O
n	*(long)
,	O
" \t"	*(char)
)	O
;	O
delta	long
=	O
p	*(char)
-	O
(	O
text	*(char)
+	O
n	*(long)
)	O
;	O
if	O
(	O
n	*(long)
+	O
delta	long
>	O
DESCRWIDTH	O
)	O
break	O
;	O
n	*(long)
+=	O
delta	long
;	O
p	*(char)
=	O
mu_str_skip_cset	(*(char),*(char))->(*(char))
(	O
text	*(char)
+	O
n	*(long)
,	O
" \t"	*(char)
)	O
;	O
delta	long
=	O
p	*(char)
-	O
(	O
text	*(char)
+	O
n	*(long)
)	O
;	O
if	O
(	O
n	*(long)
+	O
delta	long
>	O
DESCRWIDTH	O
)	O
break	O
;	O
n	*(long)
+=	O
delta	long
;	O
}	O
len	long
=	O
n	*(long)
;	O
}	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
stream	*(struct)
,	O
text	*(char)
,	O
len	long
,	O
NULL	O
)	O
;	O
text	*(char)
+=	O
len	long
;	O
size	long
-=	O
len	long
;	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
stream	*(struct)
,	O
"\n"	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
if	O
(	O
size	long
)	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
stream	*(struct)
,	O
"%-*s"	*(char)
,	O
DESCRCOL	int
,	O
""	*(char)
)	O
;	O
}	O
}	O
int	O
print_help	(*(struct),*(struct(*(char),int,int,int,*((int,*`)->(int)),*(char),*(char))),long)->(int)
(	O
mu_stream_t	*(struct)
stream	*(struct)
,	O
struct	O
mutool_command	struct(*(char),int,int,int,*((int,*(*(char)))->(int)),*(char),*(char))
*	O
tab	*(struct(*(char),int,int,int,*((int,*(*`))->(int)),*(char),*(char)))
,	O
size_t	long
n	*(long)
)	O
{	O
if	O
(	O
n	*(long)
)	O
{	O
for	O
(	O
;	O
n	*(long)
>	O
0	int
&&	O
tab	*(struct(*(char),int,int,int,*((int,*(*`))->(int)),*(char),*(char)))
->	O
name	*(char)
;	O
tab	*(struct(*(char),int,int,int,*((int,*(*`))->(int)),*(char),*(char)))
++	O
,	O
n	*(long)
--	O
)	O
print_comtab	(*(struct),*(struct(*(char),int,int,int,*((int,*`)->(int)),*(char),*(char))))->(void)
(	O
stream	*(struct)
,	O
tab	*(struct(*(char),int,int,int,*((int,*(*`))->(int)),*(char),*(char)))
)	O
;	O
}	O
else	O
{	O
for	O
(	O
;	O
tab	*(struct(*(char),int,int,int,*((int,*(*`))->(int)),*(char),*(char)))
->	O
name	*(char)
;	O
tab	*(struct(*(char),int,int,int,*((int,*(*`))->(int)),*(char),*(char)))
++	O
)	O
print_comtab	(*(struct),*(struct(*(char),int,int,int,*((int,*`)->(int)),*(char),*(char))))->(void)
(	O
stream	*(struct)
,	O
tab	*(struct(*(char),int,int,int,*((int,*(*`))->(int)),*(char),*(char)))
)	O
;	O
}	O
return	O
0	int
;	O
}	O
void	O
list_commands	(*(struct(*(char),int,int,int,*((int,*`)->(int)),*(char),*(char))),*(char))->(void)
(	O
struct	O
mutool_command	struct(*(char),int,int,int,*((int,*(*(char)))->(int)),*(char),*(char))
*	O
tab	*(struct(*(char),int,int,int,*((int,*(*`))->(int)),*(char),*(char)))
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
size_t	long
namelen	long
=	O
strlen	(*(char))->(long)
(	O
name	*(char)
)	O
;	O
int	O
printed	int
=	O
0	int
;	O
for	O
(	O
;	O
tab	*(struct(*(char),int,int,int,*((int,*(*`))->(int)),*(char),*(char)))
->	O
name	*(char)
;	O
tab	*(struct(*(char),int,int,int,*((int,*(*`))->(int)),*(char),*(char)))
++	O
)	O
{	O
if	O
(	O
printed	int
==	O
6	int
)	O
{	O
printed	int
=	O
0	int
;	O
mu_printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
}	O
if	O
(	O
mu_c_strncasecmp	(*(char),*(char),long)->(int)
(	O
tab	*(struct(*(char),int,int,int,*((int,*(*`))->(int)),*(char),*(char)))
->	O
name	*(char)
,	O
name	*(char)
,	O
namelen	long
)	O
==	O
0	int
)	O
{	O
mu_printf	(*(char))->(int)
(	O
"%s\t"	*(char)
,	O
tab	*(struct(*(char),int,int,int,*((int,*(*`))->(int)),*(char),*(char)))
->	O
name	*(char)
)	O
;	O
printed	int
++	O
;	O
}	O
}	O
if	O
(	O
printed	int
&&	O
printed	int
<	O
6	int
)	O
mu_printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
}	O
static	O
struct	O
mutool_command	struct(*(char),int,int,int,*((int,*(*(char)))->(int)),*(char),*(char))
*	O
simple_find_command	(*(struct(*(char),int,int,int,*((int,*`)->(int)),*(char),*(char))),*(char))->(*(struct(*(char),int,int,int,*((int,*`)->(int)),*(char),*(char))))
(	O
struct	O
mutool_command	struct(*(char),int,int,int,*((int,*(*(char)))->(int)),*(char),*(char))
*	O
cp	*(struct(int,int,array(char),array(char)))
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
for	O
(	O
;	O
cp	*(struct(int,int,array(char),array(char)))
->	O
name	*(char)
;	O
cp	*(struct(int,int,array(char),array(char)))
++	O
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
cp	*(struct(int,int,array(char),array(char)))
->	O
name	*(char)
,	O
name	*(char)
)	O
==	O
0	int
)	O
return	O
cp	*(struct(int,int,array(char),array(char)))
;	O
return	O
NULL	O
;	O
}	O
static	O
struct	O
mutool_command	struct(*(char),int,int,int,*((int,*(*(char)))->(int)),*(char),*(char))
*	O
shell_comtab	*(struct(*(char),int,int,int,*((int,*(*`))->(int)),*(char),*(char)))
;	O
static	O
size_t	long
user_command_count	long
;	O
static	O
struct	O
mutool_command	struct(*(char),int,int,int,*((int,*(*(char)))->(int)),*(char),*(char))
*	O
find_command	(*(char))->(*(struct(*(char),int,int,int,*((int,*`)->(int)),*(char),*(char))))
(	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
return	O
simple_find_command	(*(struct(*(char),int,int,int,*((int,*`)->(int)),*(char),*(char))),*(char))->(*(struct(*(char),int,int,int,*((int,*`)->(int)),*(char),*(char))))
(	O
shell_comtab	*(struct(*(char),int,int,int,*((int,*(*`))->(int)),*(char),*(char)))
,	O
name	*(char)
)	O
;	O
}	O
int	O
shell_help	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
char	O
*	O
name	*(char)
=	O
argv	*(*(char))
[	O
1	int
]	O
;	O
if	O
(	O
name	*(char)
)	O
{	O
struct	O
mutool_command	struct(*(char),int,int,int,*((int,*(*(char)))->(int)),*(char),*(char))
*	O
com	*(struct(*(char),int,int,int,*((int,*(*`))->(int)),*(char),*(char)))
=	O
find_command	(*(char))->(*(struct(*(char),int,int,int,*((int,*`)->(int)),*(char),*(char))))
(	O
argv	*(*(char))
[	O
1	int
]	O
)	O
;	O
if	O
(	O
com	*(struct(*(char),int,int,int,*((int,*(*`))->(int)),*(char),*(char)))
)	O
print_comtab	(*(struct),*(struct(*(char),int,int,int,*((int,*`)->(int)),*(char),*(char))))->(void)
(	O
mu_strout	*(struct)
,	O
com	*(struct(*(char),int,int,int,*((int,*(*`))->(int)),*(char),*(char)))
)	O
;	O
else	O
{	O
mu_printf	(*(char))->(int)
(	O
"No commands match `%s'.  Possibilities are:\n"	*(char)
,	O
name	*(char)
)	O
;	O
list_commands	(*(struct(*(char),int,int,int,*((int,*`)->(int)),*(char),*(char))),*(char))->(void)
(	O
shell_comtab	*(struct(*(char),int,int,int,*((int,*(*`))->(int)),*(char),*(char)))
,	O
name	*(char)
)	O
;	O
}	O
}	O
else	O
{	O
mu_stream_t	*(struct)
str	*(char)
=	O
mutool_open_pager	()->(*(struct))
(	O
)	O
;	O
print_help	(*(struct),*(struct(*(char),int,int,int,*((int,*`)->(int)),*(char),*(char))),long)->(int)
(	O
str	*(char)
,	O
shell_comtab	*(struct(*(char),int,int,int,*((int,*(*`))->(int)),*(char),*(char)))
,	O
user_command_count	long
)	O
;	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
str	*(char)
,	O
"\n"	*(char)
)	O
;	O
print_help	(*(struct),*(struct(*(char),int,int,int,*((int,*`)->(int)),*(char),*(char))),long)->(int)
(	O
str	*(char)
,	O
shell_comtab	*(struct(*(char),int,int,int,*((int,*(*`))->(int)),*(char),*(char)))
+	O
user_command_count	long
,	O
0	int
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
str	*(char)
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
shell_prompt	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
free	(*(void))->(void)
(	O
mutool_shell_prompt	*(char)
)	O
;	O
mutool_shell_prompt	*(char)
=	O
mu_strdup	(*(char))->(*(char))
(	O
argv	*(*(char))
[	O
1	int
]	O
)	O
;	O
return	O
0	int
;	O
}	O
mu_stream_t	*(struct)
mutool_open_pager	()->(*(struct))
(	O
)	O
{	O
char	O
*	O
pager	*(char)
;	O
if	O
(	O
mutool_shell_interactive	int
&&	O
(	O
pager	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"PAGER"	*(char)
)	O
)	O
!=	O
NULL	O
)	O
{	O
mu_stream_t	*(struct)
stream	*(struct)
;	O
int	O
rc	int
=	O
mu_command_stream_create	(*(*(struct)),*(char),int)->(int)
(	O
&	O
stream	*(struct)
,	O
pager	*(char)
,	O
MU_STREAM_WRITE	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
return	O
stream	*(struct)
;	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"cannot start pager: %s"	*(char)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
}	O
mu_stream_ref	(*(struct))->(void)
(	O
mu_strout	*(struct)
)	O
;	O
return	O
mu_strout	*(struct)
;	O
}	O
char	O
*	O
readline	(*(char))->(*(char))
(	O
char	O
*	O
prompt	*(char)
)	O
{	O
static	O
size_t	long
size	long
=	O
0	int
;	O
static	O
char	O
*	O
buf	*(char)
=	O
NULL	O
;	O
size_t	long
n	*(long)
;	O
if	O
(	O
prompt	*(char)
)	O
{	O
mu_printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
prompt	*(char)
)	O
;	O
mu_stream_flush	(*(struct))->(int)
(	O
mu_strout	*(struct)
)	O
;	O
}	O
if	O
(	O
mu_stream_getline	(*(struct),*(*(char)),*(long),*(long))->(int)
(	O
mu_strin	*(struct)
,	O
&	O
buf	*(char)
,	O
&	O
size	long
,	O
&	O
n	*(long)
)	O
||	O
n	*(long)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
buf	*(char)
)	O
;	O
buf	*(char)
=	O
NULL	O
;	O
size	long
=	O
0	int
;	O
return	O
NULL	O
;	O
}	O
return	O
buf	*(char)
;	O
}	O
void	O
add_history	(*(char))->(void)
(	O
const	O
char	O
*	O
s	*(char)
MU_ARG_UNUSED	O
)	O
{	O
}	O
static	O
int	O
next_arg	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
struct	O
mu_wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
*	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
{	O
int	O
rc	int
=	O
mu_wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
(	O
NULL	O
,	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
MU_WRDSF_INCREMENTAL	O
)	O
;	O
if	O
(	O
rc	int
==	O
MU_WRDSE_NOINPUT	O
)	O
{	O
mu_error	(*(char))->(int)
(	O
"%s: too few arguments"	*(char)
,	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
->	O
ws_wordv	*(*(char))
[	O
0	int
]	O
)	O
;	O
mu_wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
if	O
(	O
rc	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
"cannot parse input line: %s"	*(char)
,	O
mu_wordsplit_strerror	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(*(char))
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
execute_line	(*(char))->(int)
(	O
char	O
*	O
line	*(char)
)	O
{	O
int	O
rc	int
;	O
struct	O
mu_wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
;	O
struct	O
mutool_command	struct(*(char),int,int,int,*((int,*(*(char)))->(int)),*(char),*(char))
*	O
cmd	enum(int,int,int,int,int)
;	O
int	O
status	int
=	O
0	int
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_comment	*(char)
=	O
"#"	*(char)
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_escape	array(*(char))
[	O
0	int
]	O
=	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_escape	array(*(char))
[	O
1	int
]	O
=	O
"\\\\\"\""	*(char)
;	O
rc	int
=	O
mu_wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
(	O
line	*(char)
,	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
MU_WRDSF_DEFFLAGS	O
|	O
MU_WRDSF_COMMENT	O
|	O
MU_WRDSF_ESCAPE	O
|	O
MU_WRDSF_INCREMENTAL	O
|	O
MU_WRDSF_APPEND	O
)	O
;	O
if	O
(	O
rc	int
==	O
MU_WRDSE_NOINPUT	O
)	O
{	O
mu_wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
rc	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
"cannot parse input line: %s"	*(char)
,	O
mu_wordsplit_strerror	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(*(char))
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordc	long
)	O
{	O
int	O
argmin	int
;	O
cmd	enum(int,int,int,int,int)
=	O
find_command	(*(char))->(*(struct(*(char),int,int,int,*((int,*`)->(int)),*(char),*(char))))
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordv	*(*(char))
[	O
0	int
]	O
)	O
;	O
if	O
(	O
!	O
cmd	enum(int,int,int,int,int)
)	O
{	O
mu_error	(*(char))->(int)
(	O
"%s: no such command."	*(char)
,	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordv	*(*(char))
[	O
0	int
]	O
)	O
;	O
mu_wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
return	O
0	int
;	O
}	O
argmin	int
=	O
cmd	enum(int,int,int,int,int)
->	O
argmin	int
;	O
if	O
(	O
cmd	enum(int,int,int,int,int)
->	O
flags	int
&	O
CMD_COALESCE_EXTRA_ARGS	int
)	O
--	O
argmin	int
;	O
while	O
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordc	long
<	O
argmin	int
)	O
{	O
if	O
(	O
next_arg	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
)	O
return	O
0	int
;	O
}	O
if	O
(	O
cmd	enum(int,int,int,int,int)
->	O
flags	int
&	O
CMD_COALESCE_EXTRA_ARGS	int
)	O
{	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_flags	int
|=	O
MU_WRDSF_NOSPLIT	O
;	O
if	O
(	O
next_arg	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(int)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
)	O
return	O
0	int
;	O
}	O
else	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
cmd	enum(int,int,int,int,int)
->	O
argmax	int
>	O
0	int
&&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordc	long
>	O
cmd	enum(int,int,int,int,int)
->	O
argmax	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
"%s: too many arguments"	*(char)
,	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordv	*(*(char))
[	O
0	int
]	O
)	O
;	O
mu_wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
return	O
0	int
;	O
}	O
rc	int
=	O
mu_wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
(	O
NULL	O
,	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
MU_WRDSF_INCREMENTAL	O
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
continue	O
;	O
else	O
if	O
(	O
rc	int
==	O
MU_WRDSE_NOINPUT	O
)	O
break	O
;	O
else	O
{	O
mu_error	(*(char))->(int)
(	O
"cannot parse input line: %s"	*(char)
,	O
mu_wordsplit_strerror	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(*(char))
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
)	O
;	O
return	O
0	int
;	O
}	O
}	O
}	O
status	int
=	O
cmd	enum(int,int,int,int,int)
->	O
func	*(char)
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordc	long
,	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordv	*(*(char))
)	O
;	O
}	O
mu_wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
return	O
status	int
;	O
}	O
static	O
char	O
*	O
input_line_interactive	()->(*(char))
(	O
)	O
{	O
char	O
*	O
line	*(char)
,	O
*	O
prompt	*(char)
;	O
int	O
rc	int
;	O
report_signals	()->(void)
(	O
)	O
;	O
rc	int
=	O
mu_str_expand	(*(*(char)),*(char),*(struct))->(int)
(	O
&	O
prompt	*(char)
,	O
mutool_shell_prompt	*(char)
,	O
mutool_prompt_assoc	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
if	O
(	O
rc	int
==	O
MU_ERR_FAILURE	O
)	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"cannot expand prompt: %s"	*(char)
)	O
,	O
prompt	*(char)
)	O
;	O
else	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"cannot expand prompt: %s"	*(char)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
line	*(char)
=	O
readline	(*(char))->(*(char))
(	O
prompt	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
prompt	*(char)
)	O
;	O
return	O
line	*(char)
;	O
}	O
static	O
char	O
*	O
input_line_script	()->(*(char))
(	O
)	O
{	O
size_t	long
size	long
=	O
0	int
,	O
n	*(long)
;	O
char	O
*	O
buf	*(char)
=	O
NULL	O
;	O
report_signals	()->(void)
(	O
)	O
;	O
if	O
(	O
mu_stream_getline	(*(struct),*(*(char)),*(long),*(long))->(int)
(	O
mu_strin	*(struct)
,	O
&	O
buf	*(char)
,	O
&	O
size	long
,	O
&	O
n	*(long)
)	O
||	O
n	*(long)
==	O
0	int
)	O
return	O
NULL	O
;	O
return	O
buf	*(char)
;	O
}	O
static	O
int	O
done	int
;	O
static	O
int	O
shell_exit	(int,*(*(char)))->(int)
(	O
int	O
argc	long
MU_ARG_UNUSED	O
,	O
char	O
*	O
*	O
argv	*(*(char))
MU_ARG_UNUSED	O
)	O
{	O
done	int
=	O
1	int
;	O
return	O
0	int
;	O
}	O
mu_assoc_t	*(struct)
mutool_shell_prompt_assoc	()->(*(struct))
(	O
void	O
)	O
{	O
if	O
(	O
mutool_prompt_assoc	*(struct)
)	O
mu_assoc_clear	(*(struct))->(void)
(	O
mutool_prompt_assoc	*(struct)
)	O
;	O
else	O
{	O
int	O
rc	int
=	O
mu_assoc_create	(*(*(struct)),int)->(int)
(	O
&	O
mutool_prompt_assoc	*(struct)
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_assoc_create"	*(char)
,	O
NULL	O
,	O
rc	int
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
mu_assoc_install	(*(struct),*(char),*(void))->(int)
(	O
mutool_prompt_assoc	*(struct)
,	O
"program-name"	*(char)
,	O
mu_program_name	*(char)
)	O
;	O
mu_assoc_install	(*(struct),*(char),*(void))->(int)
(	O
mutool_prompt_assoc	*(struct)
,	O
"canonical-program-name"	*(char)
,	O
"mailutils"	*(char)
)	O
;	O
mu_assoc_install	(*(struct),*(char),*(void))->(int)
(	O
mutool_prompt_assoc	*(struct)
,	O
"package"	*(char)
,	O
PACKAGE	*(char)
)	O
;	O
mu_assoc_install	(*(struct),*(char),*(void))->(int)
(	O
mutool_prompt_assoc	*(struct)
,	O
"version"	*(char)
,	O
PACKAGE_VERSION	*(char)
)	O
;	O
return	O
mutool_prompt_assoc	*(struct)
;	O
}	O
int	O
mutool_shell	(*(char),*(struct(*(char),int,int,int,*((int,*`)->(int)),*(char),*(char))))->(int)
(	O
const	O
char	O
*	O
name	*(char)
,	O
struct	O
mutool_command	struct(*(char),int,int,int,*((int,*(*(char)))->(int)),*(char),*(char))
*	O
cmd	enum(int,int,int,int,int)
)	O
{	O
size_t	long
n	*(long)
;	O
char	O
*	O
(	O
*	O
input_line	*(()->(*(char)))
)	O
(	O
)	O
;	O
static	O
int	O
sigv	*(int)
[	O
]	O
=	O
{	O
SIGPIPE	int
,	O
SIGINT	int
}	O
;	O
mutool_shell_interactive	int
=	O
isatty	(int)->(int)
(	O
0	int
)	O
;	O
input_line	*(()->(*(char)))
=	O
mutool_shell_interactive	int
?	O
input_line_interactive	()->(*(char))
:	O
input_line_script	()->(*(char))
;	O
for	O
(	O
n	*(long)
=	O
0	int
;	O
cmd	enum(int,int,int,int,int)
[	O
n	*(long)
]	O
.	O
name	*(char)
;	O
n	*(long)
++	O
)	O
;	O
user_command_count	long
=	O
n	*(long)
;	O
shell_comtab	*(struct(*(char),int,int,int,*((int,*(*`))->(int)),*(char),*(char)))
=	O
mu_calloc	(long,long)->(*(void))
(	O
n	*(long)
+	O
MU_ARRAY_SIZE	O
(	O
default_comtab	array(struct(*(char),int,int,int,*((int,*(*(char)))->(int)),*(char),*(char)))
)	O
,	O
sizeof	O
(	O
shell_comtab	*(struct(*(char),int,int,int,*((int,*(*`))->(int)),*(char),*(char)))
[	O
0	int
]	O
)	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
shell_comtab	*(struct(*(char),int,int,int,*((int,*(*`))->(int)),*(char),*(char)))
,	O
cmd	enum(int,int,int,int,int)
,	O
n	*(long)
*	O
sizeof	O
(	O
shell_comtab	*(struct(*(char),int,int,int,*((int,*(*`))->(int)),*(char),*(char)))
[	O
0	int
]	O
)	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
shell_comtab	*(struct(*(char),int,int,int,*((int,*(*`))->(int)),*(char),*(char)))
+	O
n	*(long)
,	O
default_comtab	array(struct(*(char),int,int,int,*((int,*(*(char)))->(int)),*(char),*(char)))
,	O
sizeof	O
(	O
default_comtab	array(struct(*(char),int,int,int,*((int,*(*(char)))->(int)),*(char),*(char)))
)	O
)	O
;	O
mutool_initialize_readline	O
(	O
name	*(char)
)	O
;	O
mu_set_signals	(*((int)->(void)),*(int),int)->(void)
(	O
_shell_sig	(int)->(void)
,	O
sigv	*(int)
,	O
MU_ARRAY_SIZE	O
(	O
sigv	*(int)
)	O
)	O
;	O
while	O
(	O
!	O
done	int
)	O
{	O
char	O
*	O
s	*(char)
,	O
*	O
line	*(char)
=	O
input_line	*(()->(*(char)))
(	O
)	O
;	O
if	O
(	O
!	O
line	*(char)
)	O
{	O
if	O
(	O
shell_interrupted	O
(	O
)	O
)	O
{	O
report_signals	()->(void)
(	O
)	O
;	O
continue	O
;	O
}	O
else	O
{	O
mu_printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
break	O
;	O
}	O
}	O
s	*(char)
=	O
mu_str_stripws	(*(char))->(*(char))
(	O
line	*(char)
)	O
;	O
if	O
(	O
*	O
s	*(char)
)	O
{	O
int	O
status	int
;	O
status	int
=	O
execute_line	(*(char))->(int)
(	O
s	*(char)
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
mu_error	(*(char))->(int)
(	O
"Error: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
;	O
}	O
free	(*(void))->(void)
(	O
line	*(char)
)	O
;	O
}	O
if	O
(	O
mutool_shell_interactive	int
)	O
finish_readline	O
(	O
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
mu_strin	*(struct)
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
mu_strout	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
