int	O
uncompress_func	(*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),*(char),*(char))))->(int)
(	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
plain_text	*(struct(*(char),*(char),int,int,int,char,int))
,	O
struct	O
shell_lib_function	struct(*(char),*(char),*(char),*(char))
*	O
f	*(struct(*(char),*(char),*(char),*(char)))
)	O
{	O
char	O
*	O
s	*(struct(*(char),*(char),int,int,int,char,int))
;	O
int	O
ret	*(int)
;	O
lzo_uint	int
in_len	int
;	O
lzo_uint	int
out_len	int
;	O
lzo_uint	int
new_out_len	int
;	O
lzo_byte	O
*	O
inbuf	*(char)
;	O
lzo_byte	O
*	O
outbuf	*(char)
;	O
in_len	int
=	O
atoi	(*(char))->(int)
(	O
f	*(struct(*(char),*(char),*(char),*(char)))
->	O
controlM	*(char)
)	O
;	O
s	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strchr	(*(char),int)->(*(char))
(	O
f	*(struct(*(char),*(char),*(char),*(char)))
->	O
controlM	*(char)
,	O
':'	O
)	O
;	O
if	O
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
)	O
{	O
s	*(struct(*(char),*(char),int,int,int,char,int))
++	O
;	O
}	O
else	O
{	O
return	O
-	O
1	int
;	O
}	O
out_len	int
=	O
atoi	(*(char))->(int)
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
strob_set_length	(*(struct(*(char),*(char),int,int,int,char,int)),int)->(void)
(	O
plain_text	*(struct(*(char),*(char),int,int,int,char,int))
,	O
(	O
int	O
)	O
(	O
out_len	int
)	O
+	O
100	int
)	O
;	O
inbuf	*(char)
=	O
(	O
lzo_byte	O
*	O
)	O
(	O
f	*(struct(*(char),*(char),*(char),*(char)))
->	O
textM	*(char)
)	O
;	O
outbuf	*(char)
=	O
(	O
lzo_byte	O
*	O
)	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
plain_text	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
ret	*(int)
=	O
lzo1x_decompress	(*(char),int,*(char),*(int),*(void))->(int)
(	O
inbuf	*(char)
,	O
(	O
lzo_uint	int
)	O
(	O
in_len	int
)	O
,	O
outbuf	*(char)
,	O
&	O
new_out_len	int
,	O
NULL	O
)	O
;	O
if	O
(	O
ret	*(int)
==	O
LZO_E_OK	int
&&	O
new_out_len	int
==	O
out_len	int
)	O
{	O
return	O
0	int
;	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"decompression failed for %s  %d %d\n"	*(char)
,	O
f	*(struct(*(char),*(char),*(char),*(char)))
->	O
nameM	*(char)
,	O
new_out_len	int
,	O
out_len	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
int	O
unescape_text	(*(char),*(struct(*(char),*(char),int,int,int,char,int)),int)->(int)
(	O
char	O
*	O
text	*(char)
,	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
,	O
int	O
len	int
)	O
{	O
char	O
*	O
s	*(struct(*(char),*(char),int,int,int,char,int))
;	O
char	O
*	O
end	*(char)
;	O
int	O
m	int
;	O
s	*(struct(*(char),*(char),int,int,int,char,int))
=	O
text	*(char)
;	O
strob_strcpy	(*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(*(char))
(	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
,	O
""	*(char)
)	O
;	O
while	O
(	O
*	O
s	*(struct(*(char),*(char),int,int,int,char,int))
)	O
{	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
,	O
"\\x"	*(char)
,	O
2	int
)	O
==	O
0	int
)	O
{	O
s	*(struct(*(char),*(char),int,int,int,char,int))
+=	O
2	int
;	O
m	int
=	O
(	O
int	O
)	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
,	O
&	O
end	*(char)
,	O
16	int
)	O
;	O
s	*(struct(*(char),*(char),int,int,int,char,int))
+=	O
2	int
;	O
if	O
(	O
end	*(char)
!=	O
s	*(struct(*(char),*(char),int,int,int,char,int))
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"unescape_text: error, loc=2\n"	*(char)
)	O
;	O
return	O
-	O
2	int
;	O
}	O
strob_chr	(*(struct(*(char),*(char),int,int,int,char,int)),int)->(void)
(	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
,	O
m	int
)	O
;	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"unescape_text: error, loc=1\n"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
decode_text	(*(struct(*(char),*(char),*(char),*(char))),*(struct(*(char),*(char),int,int,int,char,int)))->(int)
(	O
struct	O
shell_lib_function	struct(*(char),*(char),*(char),*(char))
*	O
f	*(struct(*(char),*(char),*(char),*(char)))
,	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
)	O
{	O
int	O
ret	*(int)
;	O
int	O
len	int
;	O
ret	*(int)
=	O
0	int
;	O
if	O
(	O
f	*(struct(*(char),*(char),*(char),*(char)))
->	O
functionM	*(char)
!=	O
NULL	O
)	O
{	O
return	O
0	int
;	O
}	O
if	O
(	O
strstr	(*(char),*(char))->(*(char))
(	O
f	*(struct(*(char),*(char),*(char),*(char)))
->	O
controlM	*(char)
,	O
"COMPRESSION=1"	*(char)
)	O
)	O
{	O
ret	*(int)
=	O
uncompress_func	(*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),*(char),*(char))))->(int)
(	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
,	O
f	*(struct(*(char),*(char),*(char),*(char)))
)	O
;	O
}	O
else	O
if	O
(	O
*	O
(	O
f	*(struct(*(char),*(char),*(char),*(char)))
->	O
textM	*(char)
)	O
==	O
'\\'	O
)	O
{	O
len	int
=	O
atoi	(*(char))->(int)
(	O
f	*(struct(*(char),*(char),*(char),*(char)))
->	O
controlM	*(char)
)	O
;	O
ret	*(int)
=	O
unescape_text	(*(char),*(struct(*(char),*(char),int,int,int,char,int)),int)->(int)
(	O
f	*(struct(*(char),*(char),*(char),*(char)))
->	O
textM	*(char)
,	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
,	O
len	int
)	O
;	O
}	O
else	O
{	O
strob_strcpy	(*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(*(char))
(	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
,	O
f	*(struct(*(char),*(char),*(char),*(char)))
->	O
textM	*(char)
)	O
;	O
}	O
if	O
(	O
f	*(struct(*(char),*(char),*(char),*(char)))
->	O
functionM	*(char)
==	O
NULL	O
)	O
{	O
f	*(struct(*(char),*(char),*(char),*(char)))
->	O
functionM	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
)	O
)	O
;	O
}	O
return	O
ret	*(int)
;	O
}	O
struct	O
shell_lib_function	struct(*(char),*(char),*(char),*(char))
*	O
shlib_get_function_array	()->(*(struct(*(char),*(char),*(char),*(char))))
(	O
void	O
)	O
{	O
return	O
shell_lib_function_pallet	array(struct(*(char),*(char),*(char),*(char)))
;	O
}	O
struct	O
shell_lib_function	struct(*(char),*(char),*(char),*(char))
*	O
shlib_get_function_struct	(*(char))->(*(struct(*(char),*(char),*(char),*(char))))
(	O
char	O
*	O
function_name	*(char)
)	O
{	O
struct	O
shell_lib_function	struct(*(char),*(char),*(char),*(char))
*	O
f	*(struct(*(char),*(char),*(char),*(char)))
;	O
f	*(struct(*(char),*(char),*(char),*(char)))
=	O
shlib_get_function_array	()->(*(struct(*(char),*(char),*(char),*(char))))
(	O
)	O
;	O
while	O
(	O
f	*(struct(*(char),*(char),*(char),*(char)))
->	O
textM	*(char)
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
f	*(struct(*(char),*(char),*(char),*(char)))
->	O
nameM	*(char)
,	O
function_name	*(char)
)	O
==	O
0	int
)	O
{	O
return	O
f	*(struct(*(char),*(char),*(char),*(char)))
;	O
}	O
f	*(struct(*(char),*(char),*(char),*(char)))
++	O
;	O
}	O
return	O
(	O
struct	O
shell_lib_function	struct(*(char),*(char),*(char),*(char))
*	O
)	O
NULL	O
;	O
}	O
char	O
*	O
shlib_get_function_text	(*(struct(*(char),*(char),*(char),*(char))),*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
struct	O
shell_lib_function	struct(*(char),*(char),*(char),*(char))
*	O
f	*(struct(*(char),*(char),*(char),*(char)))
,	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
)	O
{	O
int	O
ret	*(int)
;	O
ret	*(int)
=	O
decode_text	(*(struct(*(char),*(char),*(char),*(char))),*(struct(*(char),*(char),int,int,int,char,int)))->(int)
(	O
f	*(struct(*(char),*(char),*(char),*(char)))
,	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
if	O
(	O
ret	*(int)
)	O
return	O
NULL	O
;	O
return	O
f	*(struct(*(char),*(char),*(char),*(char)))
->	O
functionM	*(char)
;	O
}	O
char	O
*	O
shlib_get_function_text_by_name	(*(char),*(struct(*(char),*(char),int,int,int,char,int)),*(int))->(*(char))
(	O
char	O
*	O
function_name	*(char)
,	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
,	O
int	O
*	O
pret	*(int)
)	O
{	O
int	O
ret	*(int)
;	O
struct	O
shell_lib_function	struct(*(char),*(char),*(char),*(char))
*	O
f	*(struct(*(char),*(char),*(char),*(char)))
;	O
f	*(struct(*(char),*(char),*(char),*(char)))
=	O
shlib_get_function_struct	(*(char))->(*(struct(*(char),*(char),*(char),*(char))))
(	O
function_name	*(char)
)	O
;	O
if	O
(	O
f	*(struct(*(char),*(char),*(char),*(char)))
==	O
NULL	O
)	O
{	O
ret	*(int)
=	O
-	O
1	int
;	O
goto	O
out	O
;	O
}	O
ret	*(int)
=	O
decode_text	(*(struct(*(char),*(char),*(char),*(char))),*(struct(*(char),*(char),int,int,int,char,int)))->(int)
(	O
f	*(struct(*(char),*(char),*(char),*(char)))
,	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
if	O
(	O
ret	*(int)
)	O
{	O
ret	*(int)
=	O
-	O
1	int
;	O
goto	O
err_out	O
;	O
}	O
else	O
{	O
ret	*(int)
=	O
0	int
;	O
goto	O
out	O
;	O
}	O
err_out	O
:	O
strob_strcpy	(*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(*(char))
(	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
,	O
""	*(char)
)	O
;	O
out	O
:	O
if	O
(	O
pret	*(int)
)	O
*	O
pret	*(int)
=	O
ret	*(int)
;	O
if	O
(	O
ret	*(int)
)	O
{	O
return	O
NULL	O
;	O
}	O
else	O
{	O
return	O
f	*(struct(*(char),*(char),*(char),*(char)))
->	O
functionM	*(char)
;	O
}	O
}	O
