OM_uint32	int
gss_create_empty_oid_set	(*(int),*(*(struct(long,*(struct`)))))->(int)
(	O
OM_uint32	int
*	O
minor_status	*(int)
,	O
gss_OID_set	*(struct(long,*(struct(int,*(void)))))
*	O
oid_set	*(*(struct(long,*(struct(int,*`)))))
)	O
{	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
0	int
;	O
*	O
oid_set	*(*(struct(long,*(struct(int,*`)))))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
*	O
oid_set	*(*(struct(long,*(struct(int,*`)))))
)	O
)	O
;	O
if	O
(	O
!	O
*	O
oid_set	*(*(struct(long,*(struct(int,*`)))))
)	O
{	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
ENOMEM	int
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
(	O
*	O
oid_set	*(*(struct(long,*(struct(int,*`)))))
)	O
->	O
count	long
=	O
0	int
;	O
(	O
*	O
oid_set	*(*(struct(long,*(struct(int,*`)))))
)	O
->	O
elements	*(void)
=	O
NULL	O
;	O
return	O
GSS_S_COMPLETE	int
;	O
}	O
static	O
OM_uint32	int
_gss_copy_oid	(*(int),*(struct(int,*(void))),*(struct(int,*(void))))->(int)
(	O
OM_uint32	int
*	O
minor_status	*(int)
,	O
const	O
gss_OID	*(struct(int,*(void)))
src_oid	*(struct(int,*(void)))
,	O
gss_OID	*(struct(int,*(void)))
dest_oid	*(struct(int,*(void)))
)	O
{	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
0	int
;	O
if	O
(	O
!	O
src_oid	*(struct(int,*(void)))
)	O
return	O
GSS_S_FAILURE	O
|	O
GSS_S_CALL_INACCESSIBLE_READ	O
;	O
if	O
(	O
src_oid	*(struct(int,*(void)))
->	O
length	int
==	O
0	int
||	O
src_oid	*(struct(int,*(void)))
->	O
elements	*(void)
==	O
NULL	O
)	O
return	O
GSS_S_FAILURE	O
|	O
GSS_S_CALL_BAD_STRUCTURE	O
;	O
dest_oid	*(struct(int,*(void)))
->	O
length	int
=	O
src_oid	*(struct(int,*(void)))
->	O
length	int
;	O
dest_oid	*(struct(int,*(void)))
->	O
elements	*(void)
=	O
malloc	(long)->(*(void))
(	O
src_oid	*(struct(int,*(void)))
->	O
length	int
)	O
;	O
if	O
(	O
!	O
dest_oid	*(struct(int,*(void)))
->	O
elements	*(void)
)	O
{	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
ENOMEM	int
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
dest_oid	*(struct(int,*(void)))
->	O
elements	*(void)
,	O
src_oid	*(struct(int,*(void)))
->	O
elements	*(void)
,	O
src_oid	*(struct(int,*(void)))
->	O
length	int
)	O
;	O
return	O
GSS_S_COMPLETE	int
;	O
}	O
OM_uint32	int
gss_add_oid_set_member	(*(int),*(struct(int,*(void))),*(*(struct(long,*(struct`)))))->(int)
(	O
OM_uint32	int
*	O
minor_status	*(int)
,	O
const	O
gss_OID	*(struct(int,*(void)))
member_oid	*(struct(int,*(void)))
,	O
gss_OID_set	*(struct(long,*(struct(int,*(void)))))
*	O
oid_set	*(*(struct(long,*(struct(int,*`)))))
)	O
{	O
OM_uint32	int
major_stat	int
;	O
int	O
present	*(int)
;	O
if	O
(	O
!	O
member_oid	*(struct(int,*(void)))
||	O
member_oid	*(struct(int,*(void)))
->	O
length	int
==	O
0	int
||	O
member_oid	*(struct(int,*(void)))
->	O
elements	*(void)
==	O
NULL	O
)	O
{	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
0	int
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
major_stat	int
=	O
gss_test_oid_set_member	(*(int),*(struct(int,*(void))),*(struct(long,*(struct(int,*`)))),*(int))->(int)
(	O
minor_status	*(int)
,	O
member_oid	*(struct(int,*(void)))
,	O
*	O
oid_set	*(*(struct(long,*(struct(int,*`)))))
,	O
&	O
present	*(int)
)	O
;	O
if	O
(	O
GSS_ERROR	O
(	O
major_stat	int
)	O
)	O
return	O
major_stat	int
;	O
if	O
(	O
present	*(int)
)	O
{	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
0	int
;	O
return	O
GSS_S_COMPLETE	int
;	O
}	O
if	O
(	O
(	O
*	O
oid_set	*(*(struct(long,*(struct(int,*`)))))
)	O
->	O
count	long
+	O
1	int
==	O
0	int
)	O
{	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
0	int
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
(	O
*	O
oid_set	*(*(struct(long,*(struct(int,*`)))))
)	O
->	O
count	long
++	O
;	O
{	O
gss_OID	*(struct(int,*(void)))
tmp	*(struct(int,*(void)))
;	O
tmp	*(struct(int,*(void)))
=	O
realloc	(*(void),long)->(*(void))
(	O
(	O
*	O
oid_set	*(*(struct(long,*(struct(int,*`)))))
)	O
->	O
elements	*(void)
,	O
(	O
*	O
oid_set	*(*(struct(long,*(struct(int,*`)))))
)	O
->	O
count	long
*	O
sizeof	O
(	O
*	O
(	O
*	O
oid_set	*(*(struct(long,*(struct(int,*`)))))
)	O
->	O
elements	*(void)
)	O
)	O
;	O
if	O
(	O
!	O
tmp	*(struct(int,*(void)))
)	O
{	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
ENOMEM	int
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
(	O
*	O
oid_set	*(*(struct(long,*(struct(int,*`)))))
)	O
->	O
elements	*(void)
=	O
tmp	*(struct(int,*(void)))
;	O
}	O
major_stat	int
=	O
_gss_copy_oid	(*(int),*(struct(int,*(void))),*(struct(int,*(void))))->(int)
(	O
minor_status	*(int)
,	O
member_oid	*(struct(int,*(void)))
,	O
(	O
*	O
oid_set	*(*(struct(long,*(struct(int,*`)))))
)	O
->	O
elements	*(void)
+	O
(	O
(	O
*	O
oid_set	*(*(struct(long,*(struct(int,*`)))))
)	O
->	O
count	long
-	O
1	int
)	O
)	O
;	O
if	O
(	O
GSS_ERROR	O
(	O
major_stat	int
)	O
)	O
return	O
major_stat	int
;	O
return	O
GSS_S_COMPLETE	int
;	O
}	O
OM_uint32	int
gss_test_oid_set_member	(*(int),*(struct(int,*(void))),*(struct(long,*(struct(int,*`)))),*(int))->(int)
(	O
OM_uint32	int
*	O
minor_status	*(int)
,	O
const	O
gss_OID	*(struct(int,*(void)))
member	*(struct(int,*(void)))
,	O
const	O
gss_OID_set	*(struct(long,*(struct(int,*(void)))))
set	*(*(struct(long,*(struct(int,*`)))))
,	O
int	O
*	O
present	*(int)
)	O
{	O
gss_OID	*(struct(int,*(void)))
cur	*(struct(int,*(void)))
;	O
size_t	long
i	long
;	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
0	int
;	O
*	O
present	*(int)
=	O
0	int
;	O
if	O
(	O
member	*(struct(int,*(void)))
==	O
GSS_C_NO_OID	O
)	O
return	O
GSS_S_COMPLETE	int
;	O
for	O
(	O
i	long
=	O
0	int
,	O
cur	*(struct(int,*(void)))
=	O
set	*(*(struct(long,*(struct(int,*`)))))
->	O
elements	*(void)
;	O
i	long
<	O
set	*(*(struct(long,*(struct(int,*`)))))
->	O
count	long
;	O
i	long
++	O
,	O
cur	*(struct(int,*(void)))
++	O
)	O
{	O
if	O
(	O
cur	*(struct(int,*(void)))
->	O
length	int
==	O
member	*(struct(int,*(void)))
->	O
length	int
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
cur	*(struct(int,*(void)))
->	O
elements	*(void)
,	O
member	*(struct(int,*(void)))
->	O
elements	*(void)
,	O
member	*(struct(int,*(void)))
->	O
length	int
)	O
==	O
0	int
)	O
{	O
*	O
present	*(int)
=	O
1	int
;	O
return	O
GSS_S_COMPLETE	int
;	O
}	O
}	O
return	O
GSS_S_COMPLETE	int
;	O
}	O
OM_uint32	int
gss_release_oid_set	(*(int),*(*(struct(long,*(struct`)))))->(int)
(	O
OM_uint32	int
*	O
minor_status	*(int)
,	O
gss_OID_set	*(struct(long,*(struct(int,*(void)))))
*	O
set	*(*(struct(long,*(struct(int,*`)))))
)	O
{	O
gss_OID	*(struct(int,*(void)))
cur	*(struct(int,*(void)))
;	O
size_t	long
i	long
;	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
0	int
;	O
if	O
(	O
!	O
set	*(*(struct(long,*(struct(int,*`)))))
||	O
*	O
set	*(*(struct(long,*(struct(int,*`)))))
==	O
GSS_C_NO_OID_SET	O
)	O
return	O
GSS_S_COMPLETE	int
;	O
for	O
(	O
i	long
=	O
0	int
,	O
cur	*(struct(int,*(void)))
=	O
(	O
*	O
set	*(*(struct(long,*(struct(int,*`)))))
)	O
->	O
elements	*(void)
;	O
i	long
<	O
(	O
*	O
set	*(*(struct(long,*(struct(int,*`)))))
)	O
->	O
count	long
;	O
i	long
++	O
,	O
cur	*(struct(int,*(void)))
++	O
)	O
free	(*(void))->(void)
(	O
cur	*(struct(int,*(void)))
->	O
elements	*(void)
)	O
;	O
free	(*(void))->(void)
(	O
(	O
*	O
set	*(*(struct(long,*(struct(int,*`)))))
)	O
->	O
elements	*(void)
)	O
;	O
free	(*(void))->(void)
(	O
*	O
set	*(*(struct(long,*(struct(int,*`)))))
)	O
;	O
*	O
set	*(*(struct(long,*(struct(int,*`)))))
=	O
GSS_C_NO_OID_SET	O
;	O
return	O
GSS_S_COMPLETE	int
;	O
}	O
OM_uint32	int
gss_indicate_mechs	(*(int),*(*(struct(long,*(struct`)))))->(int)
(	O
OM_uint32	int
*	O
minor_status	*(int)
,	O
gss_OID_set	*(struct(long,*(struct(int,*(void)))))
*	O
mech_set	*(*(struct(long,*(struct(int,*`)))))
)	O
{	O
OM_uint32	int
maj_stat	int
;	O
maj_stat	int
=	O
gss_create_empty_oid_set	(*(int),*(*(struct(long,*(struct`)))))->(int)
(	O
minor_status	*(int)
,	O
mech_set	*(*(struct(long,*(struct(int,*`)))))
)	O
;	O
if	O
(	O
GSS_ERROR	O
(	O
maj_stat	int
)	O
)	O
return	O
maj_stat	int
;	O
maj_stat	int
=	O
_gss_indicate_mechs1	(*(int),*(*(struct(long,*(struct`)))))->(int)
(	O
minor_status	*(int)
,	O
mech_set	*(*(struct(long,*(struct(int,*`)))))
)	O
;	O
if	O
(	O
GSS_ERROR	O
(	O
maj_stat	int
)	O
)	O
{	O
gss_release_oid_set	(*(int),*(*(struct(long,*(struct`)))))->(int)
(	O
NULL	O
,	O
mech_set	*(*(struct(long,*(struct(int,*`)))))
)	O
;	O
return	O
maj_stat	int
;	O
}	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
0	int
;	O
return	O
GSS_S_COMPLETE	int
;	O
}	O
OM_uint32	int
gss_release_buffer	(*(int),*(struct(long,*(void))))->(int)
(	O
OM_uint32	int
*	O
minor_status	*(int)
,	O
gss_buffer_t	*(struct(long,*(void)))
buffer	*(struct(long,*(void)))
)	O
{	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
0	int
;	O
if	O
(	O
buffer	*(struct(long,*(void)))
!=	O
GSS_C_NO_BUFFER	O
)	O
{	O
free	(*(void))->(void)
(	O
buffer	*(struct(long,*(void)))
->	O
value	*(void)
)	O
;	O
buffer	*(struct(long,*(void)))
->	O
value	*(void)
=	O
NULL	O
;	O
buffer	*(struct(long,*(void)))
->	O
length	int
=	O
0	int
;	O
}	O
return	O
GSS_S_COMPLETE	int
;	O
}	O
