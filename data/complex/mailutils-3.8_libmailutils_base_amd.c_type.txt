static	O
void	O
amd_destroy	O
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
)	O
;	O
static	O
int	O
amd_open	O
(	O
mu_mailbox_t	*(struct)
,	O
int	O
)	O
;	O
static	O
int	O
amd_close	O
(	O
mu_mailbox_t	*(struct)
)	O
;	O
static	O
int	O
amd_get_message	O
(	O
mu_mailbox_t	*(struct)
,	O
size_t	long
,	O
mu_message_t	*(struct)
*	O
)	O
;	O
static	O
int	O
amd_quick_get_message	O
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
mu_message_qid_t	*(char)
qid	*(char)
,	O
mu_message_t	*(struct)
*	O
pmsg	*(*(struct))
)	O
;	O
static	O
int	O
amd_append_message	O
(	O
mu_mailbox_t	*(struct)
,	O
mu_message_t	*(struct)
)	O
;	O
static	O
int	O
amd_messages_count	O
(	O
mu_mailbox_t	*(struct)
,	O
size_t	long
*	O
)	O
;	O
static	O
int	O
amd_messages_recent	O
(	O
mu_mailbox_t	*(struct)
,	O
size_t	long
*	O
)	O
;	O
static	O
int	O
amd_message_unseen	O
(	O
mu_mailbox_t	*(struct)
,	O
size_t	long
*	O
)	O
;	O
static	O
int	O
amd_expunge	O
(	O
mu_mailbox_t	*(struct)
)	O
;	O
static	O
int	O
amd_sync	O
(	O
mu_mailbox_t	*(struct)
)	O
;	O
static	O
int	O
amd_uidnext	O
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
size_t	long
*	O
puidnext	O
)	O
;	O
static	O
int	O
amd_uidvalidity	O
(	O
mu_mailbox_t	*(struct)
,	O
unsigned	O
long	O
*	O
)	O
;	O
static	O
int	O
amd_scan	O
(	O
mu_mailbox_t	*(struct)
,	O
size_t	long
,	O
size_t	long
*	O
)	O
;	O
static	O
int	O
amd_is_updated	O
(	O
mu_mailbox_t	*(struct)
)	O
;	O
static	O
int	O
amd_get_size	O
(	O
mu_mailbox_t	*(struct)
,	O
mu_off_t	long
*	O
)	O
;	O
static	O
int	O
amd_body_size	O
(	O
mu_body_t	*(struct)
body	*(struct)
,	O
size_t	long
*	O
psize	*(long)
)	O
;	O
static	O
int	O
amd_body_lines	O
(	O
mu_body_t	*(struct)
body	*(struct)
,	O
size_t	long
*	O
plines	O
)	O
;	O
static	O
int	O
amd_header_fill	O
(	O
void	O
*	O
data	*(void)
,	O
char	O
*	O
*	O
pbuf	*(*(char))
,	O
size_t	long
*	O
plen	*(long)
)	O
;	O
static	O
int	O
amd_get_attr_flags	O
(	O
mu_attribute_t	*(struct)
attr	*(struct)
,	O
int	O
*	O
pflags	*(int)
)	O
;	O
static	O
int	O
amd_set_attr_flags	O
(	O
mu_attribute_t	*(struct)
attr	*(struct)
,	O
int	O
flags	int
)	O
;	O
static	O
int	O
amd_unset_attr_flags	O
(	O
mu_attribute_t	*(struct)
attr	*(struct)
,	O
int	O
flags	int
)	O
;	O
static	O
int	O
amd_pool_open	O
(	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
mhm	O
)	O
;	O
static	O
int	O
amd_pool_open_count	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
)	O
;	O
static	O
void	O
amd_pool_flush	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
)	O
;	O
static	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
*	O
amd_pool_lookup	O
(	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
mhm	O
)	O
;	O
static	O
int	O
amd_envelope_date	O
(	O
mu_envelope_t	*(struct)
envelope	*(struct)
,	O
char	O
*	O
buf	*(char)
,	O
size_t	long
len	int
,	O
size_t	long
*	O
psize	*(long)
)	O
;	O
static	O
int	O
amd_envelope_sender	O
(	O
mu_envelope_t	*(struct)
envelope	*(struct)
,	O
char	O
*	O
buf	*(char)
,	O
size_t	long
len	int
,	O
size_t	long
*	O
psize	*(long)
)	O
;	O
static	O
int	O
amd_remove_mbox	O
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
)	O
;	O
static	O
int	O
amd_body_stream_read	O
(	O
mu_stream_t	*(struct)
str	*(char)
,	O
char	O
*	O
buffer	*(char)
,	O
size_t	long
buflen	long
,	O
size_t	long
*	O
pnread	O
)	O
;	O
static	O
int	O
amd_body_stream_readdelim	O
(	O
mu_stream_t	*(struct)
is	O
,	O
char	O
*	O
buffer	*(char)
,	O
size_t	long
buflen	long
,	O
int	O
delim	*(char)
,	O
size_t	long
*	O
pnread	O
)	O
;	O
static	O
int	O
amd_body_stream_size	O
(	O
mu_stream_t	*(struct)
str	*(char)
,	O
mu_off_t	long
*	O
psize	*(long)
)	O
;	O
static	O
int	O
amd_body_stream_seek	O
(	O
mu_stream_t	*(struct)
str	*(char)
,	O
mu_off_t	long
off	O
,	O
mu_off_t	long
*	O
presult	O
)	O
;	O
struct	O
_amd_body_stream	O
{	O
struct	O
_mu_stream	struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(char),long,*(long))->(int)),*((*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(char),long,int,*(long))->(int)),*((*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(char),long,*(long))->(int)),*((*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))))->(int)),*((*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))))->(int)),*((*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))))->(int)),*((*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))))->(void)),*((*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))))->(void)),*((*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),long,*(long))->(int)),*((*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(long))->(int)),*((*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),int,int,*(void))->(int)),*((*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(int),*(struct(long,long)))->(int)),*((*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),long)->(int)),*((*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),int)->(int)),*((*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),int,long,*(void))->(void)),int,*(void),*((*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),enum(int,int,int),long)->(int)),*((*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),int)->(*(char))))
stream	*(struct)
;	O
mu_body_t	*(struct)
body	*(struct)
;	O
mu_off_t	long
off	O
;	O
}	O
;	O
int	O
_amd_prop_fetch_off	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
,	O
mu_off_t	long
*	O
pval	*(*(char))
)	O
{	O
const	O
char	O
*	O
p	*(char)
;	O
mu_off_t	long
n	long
=	O
0	int
;	O
if	O
(	O
!	O
amd	*(struct)
->	O
prop	*(struct)
||	O
mu_property_sget_value	(*(struct),*(char),*(*(char)))->(int)
(	O
amd	*(struct)
->	O
prop	*(struct)
,	O
name	*(char)
,	O
&	O
p	*(char)
)	O
)	O
return	O
MU_ERR_NOENT	O
;	O
if	O
(	O
!	O
pval	*(*(char))
)	O
return	O
0	int
;	O
for	O
(	O
;	O
*	O
p	*(char)
;	O
p	*(char)
++	O
)	O
{	O
if	O
(	O
!	O
mu_isdigit	O
(	O
*	O
p	*(char)
)	O
)	O
return	O
EINVAL	O
;	O
n	long
=	O
n	long
*	O
10	int
+	O
*	O
p	*(char)
-	O
'0'	O
;	O
}	O
*	O
pval	*(*(char))
=	O
n	long
;	O
return	O
0	int
;	O
}	O
int	O
_amd_prop_fetch_size	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
,	O
size_t	long
*	O
pval	*(*(char))
)	O
{	O
mu_off_t	long
n	long
;	O
int	O
rc	int
=	O
_amd_prop_fetch_off	O
(	O
amd	*(struct)
,	O
name	*(char)
,	O
&	O
n	long
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
size_t	long
s	*(char)
=	O
n	long
;	O
if	O
(	O
s	*(char)
!=	O
n	long
)	O
return	O
ERANGE	O
;	O
if	O
(	O
pval	*(*(char))
)	O
*	O
pval	*(*(char))
=	O
s	*(char)
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
_amd_prop_fetch_ulong	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
,	O
unsigned	O
long	O
*	O
pval	*(*(char))
)	O
{	O
mu_off_t	long
n	long
;	O
int	O
rc	int
=	O
_amd_prop_fetch_off	O
(	O
amd	*(struct)
,	O
name	*(char)
,	O
&	O
n	long
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
unsigned	O
long	O
s	*(char)
=	O
n	long
;	O
if	O
(	O
s	*(char)
!=	O
n	long
)	O
return	O
ERANGE	O
;	O
if	O
(	O
pval	*(*(char))
)	O
*	O
pval	*(*(char))
=	O
s	*(char)
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
_amd_prop_store_off	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
,	O
mu_off_t	long
val	array(int)
)	O
{	O
char	O
nbuf	O
[	O
128	int
]	O
;	O
char	O
*	O
p	*(char)
;	O
int	O
sign	O
=	O
0	int
;	O
p	*(char)
=	O
nbuf	O
+	O
sizeof	O
nbuf	O
;	O
*	O
--	O
p	*(char)
=	O
0	int
;	O
if	O
(	O
val	array(int)
<	O
0	int
)	O
{	O
sign	O
=	O
1	int
;	O
val	array(int)
=	O
-	O
val	array(int)
;	O
}	O
do	O
{	O
unsigned	O
d	O
=	O
val	array(int)
%	O
10	int
;	O
if	O
(	O
p	*(char)
==	O
nbuf	O
)	O
return	O
ERANGE	O
;	O
*	O
--	O
p	*(char)
=	O
d	O
+	O
'0'	O
;	O
val	array(int)
/=	O
10	int
;	O
}	O
while	O
(	O
val	array(int)
)	O
;	O
if	O
(	O
sign	O
)	O
{	O
if	O
(	O
p	*(char)
==	O
nbuf	O
)	O
return	O
ERANGE	O
;	O
*	O
--	O
p	*(char)
=	O
'-'	O
;	O
}	O
return	O
mu_property_set_value	(*(struct),*(char),*(char),int)->(int)
(	O
amd	*(struct)
->	O
prop	*(struct)
,	O
name	*(char)
,	O
p	*(char)
,	O
1	int
)	O
;	O
}	O
static	O
int	O
_amd_prop_create	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
)	O
{	O
int	O
rc	int
;	O
struct	O
mu_mh_prop	struct(*(char),int)
*	O
mhprop	O
;	O
mhprop	O
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
mhprop	O
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
mhprop	O
)	O
return	O
ENOMEM	O
;	O
mhprop	O
->	O
filename	*(char)
=	O
mu_make_file_name	O
(	O
amd	*(struct)
->	O
name	*(char)
,	O
_MU_AMD_PROP_FILE_NAME	O
)	O
;	O
if	O
(	O
!	O
mhprop	O
->	O
filename	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
mhprop	O
)	O
;	O
return	O
errno	O
;	O
}	O
rc	int
=	O
mu_property_create_init	(*(*(struct)),*((*(struct))->(int)),*(void))->(int)
(	O
&	O
amd	*(struct)
->	O
prop	*(struct)
,	O
mu_mh_property_init	(*(struct))->(int)
,	O
mhprop	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	O
,	O
MU_DEBUG_ERROR	O
,	O
(	O
"mu_property_create_init: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
free	(*(void))->(void)
(	O
mhprop	O
->	O
filename	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
mhprop	O
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
amd_msg_bsearch	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
,	O
mu_off_t	long
first	*((*(void))->(int))
,	O
mu_off_t	long
last	O
,	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
msg	*(struct)
,	O
mu_off_t	long
*	O
pret	*(long)
)	O
{	O
mu_off_t	long
mid	O
;	O
int	O
rc	int
;	O
if	O
(	O
last	O
<	O
first	*((*(void))->(int))
)	O
return	O
1	int
;	O
mid	O
=	O
(	O
first	*((*(void))->(int))
+	O
last	O
)	O
/	O
2	int
;	O
rc	int
=	O
amd	*(struct)
->	O
msg_cmp	O
(	O
amd	*(struct)
->	O
msg_array	O
[	O
mid	O
]	O
,	O
msg	*(struct)
)	O
;	O
if	O
(	O
rc	int
>	O
0	int
)	O
return	O
amd_msg_bsearch	O
(	O
amd	*(struct)
,	O
first	*((*(void))->(int))
,	O
mid	O
-	O
1	int
,	O
msg	*(struct)
,	O
pret	*(long)
)	O
;	O
*	O
pret	*(long)
=	O
mid	O
;	O
if	O
(	O
rc	int
<	O
0	int
)	O
return	O
amd_msg_bsearch	O
(	O
amd	*(struct)
,	O
mid	O
+	O
1	int
,	O
last	O
,	O
msg	*(struct)
,	O
pret	*(long)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
amd_msg_lookup	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
,	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
msg	*(struct)
,	O
size_t	long
*	O
pret	*(long)
)	O
{	O
int	O
rc	int
;	O
mu_off_t	long
i	O
;	O
if	O
(	O
amd	*(struct)
->	O
msg_count	O
==	O
0	int
)	O
{	O
*	O
pret	*(long)
=	O
0	int
;	O
return	O
1	int
;	O
}	O
rc	int
=	O
amd	*(struct)
->	O
msg_cmp	O
(	O
msg	*(struct)
,	O
amd	*(struct)
->	O
msg_array	O
[	O
0	int
]	O
)	O
;	O
if	O
(	O
rc	int
<	O
0	int
)	O
{	O
*	O
pret	*(long)
=	O
0	int
;	O
return	O
1	int
;	O
}	O
else	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
*	O
pret	*(long)
=	O
1	int
;	O
return	O
0	int
;	O
}	O
rc	int
=	O
amd	*(struct)
->	O
msg_cmp	O
(	O
msg	*(struct)
,	O
amd	*(struct)
->	O
msg_array	O
[	O
amd	*(struct)
->	O
msg_count	O
-	O
1	int
]	O
)	O
;	O
if	O
(	O
rc	int
>	O
0	int
)	O
{	O
*	O
pret	*(long)
=	O
amd	*(struct)
->	O
msg_count	O
;	O
return	O
1	int
;	O
}	O
else	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
*	O
pret	*(long)
=	O
amd	*(struct)
->	O
msg_count	O
;	O
return	O
0	int
;	O
}	O
rc	int
=	O
amd_msg_bsearch	O
(	O
amd	*(struct)
,	O
0	int
,	O
amd	*(struct)
->	O
msg_count	O
-	O
1	int
,	O
msg	*(struct)
,	O
&	O
i	O
)	O
;	O
*	O
pret	*(long)
=	O
i	O
+	O
1	int
;	O
return	O
rc	int
;	O
}	O
int	O
amd_array_expand	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
,	O
size_t	long
index	(*(char),int)->(*(char))
)	O
{	O
if	O
(	O
amd	*(struct)
->	O
msg_count	O
==	O
amd	*(struct)
->	O
msg_max	O
)	O
{	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
*	O
p	*(char)
;	O
amd	*(struct)
->	O
msg_max	O
+=	O
AMD_MSG_INC	O
;	O
p	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
amd	*(struct)
->	O
msg_array	O
,	O
amd	*(struct)
->	O
msg_max	O
*	O
sizeof	O
(	O
amd	*(struct)
->	O
msg_array	O
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
{	O
amd	*(struct)
->	O
msg_max	O
-=	O
AMD_MSG_INC	O
;	O
return	O
ENOMEM	O
;	O
}	O
amd	*(struct)
->	O
msg_array	O
=	O
p	*(char)
;	O
}	O
if	O
(	O
amd	*(struct)
->	O
msg_count	O
>	O
index	(*(char),int)->(*(char))
)	O
memmove	(*(void),*(void),long)->(*(void))
(	O
&	O
amd	*(struct)
->	O
msg_array	O
[	O
index	(*(char),int)->(*(char))
+	O
1	int
]	O
,	O
&	O
amd	*(struct)
->	O
msg_array	O
[	O
index	(*(char),int)->(*(char))
]	O
,	O
(	O
amd	*(struct)
->	O
msg_count	O
-	O
index	(*(char),int)->(*(char))
)	O
*	O
sizeof	O
(	O
amd	*(struct)
->	O
msg_array	O
[	O
0	int
]	O
)	O
)	O
;	O
amd	*(struct)
->	O
msg_count	O
++	O
;	O
return	O
0	int
;	O
}	O
int	O
amd_array_shrink	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
,	O
size_t	long
index	(*(char),int)->(*(char))
,	O
size_t	long
count	*(long)
)	O
{	O
if	O
(	O
amd	*(struct)
->	O
msg_count	O
-	O
index	(*(char),int)->(*(char))
-	O
1	int
&&	O
index	(*(char),int)->(*(char))
<	O
amd	*(struct)
->	O
msg_count	O
)	O
memmove	(*(void),*(void),long)->(*(void))
(	O
&	O
amd	*(struct)
->	O
msg_array	O
[	O
index	(*(char),int)->(*(char))
-	O
count	*(long)
+	O
1	int
]	O
,	O
&	O
amd	*(struct)
->	O
msg_array	O
[	O
index	(*(char),int)->(*(char))
+	O
1	int
]	O
,	O
(	O
amd	*(struct)
->	O
msg_count	O
-	O
index	(*(char),int)->(*(char))
-	O
1	int
)	O
*	O
sizeof	O
(	O
amd	*(struct)
->	O
msg_array	O
[	O
0	int
]	O
)	O
)	O
;	O
amd	*(struct)
->	O
msg_count	O
-=	O
count	*(long)
;	O
return	O
0	int
;	O
}	O
int	O
amd_init_mailbox	O
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
size_t	long
amd_size	O
,	O
struct	O
_amd_data	O
*	O
*	O
pamd	O
)	O
{	O
int	O
status	int
;	O
struct	O
_amd_data	O
*	O
amd	*(struct)
;	O
if	O
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
==	O
NULL	O
)	O
return	O
EINVAL	O
;	O
if	O
(	O
amd_size	O
<	O
sizeof	O
(	O
*	O
amd	*(struct)
)	O
)	O
return	O
EINVAL	O
;	O
amd	*(struct)
=	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
data	*(void)
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
amd_size	O
)	O
;	O
if	O
(	O
amd	*(struct)
==	O
NULL	O
)	O
return	O
ENOMEM	O
;	O
amd	*(struct)
->	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
=	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
;	O
status	int
=	O
mu_url_aget_path	(*(struct),*(*(char)))->(int)
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
url	*(struct)
,	O
&	O
amd	*(struct)
->	O
name	*(char)
)	O
;	O
if	O
(	O
status	int
)	O
{	O
free	(*(void))->(void)
(	O
amd	*(struct)
)	O
;	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
data	*(void)
=	O
NULL	O
;	O
return	O
status	int
;	O
}	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
_destroy	*((*(struct))->(int))
=	O
amd_destroy	O
;	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
_open	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),int)->(int))
=	O
amd_open	O
;	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
_close	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int))
=	O
amd_close	O
;	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
_get_message	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long,*(*(struct)))->(int))
=	O
amd_get_message	O
;	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
_quick_get_message	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(char),*(*(struct)))->(int))
=	O
amd_quick_get_message	O
;	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
_append_message	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(struct))->(int))
=	O
amd_append_message	O
;	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
_messages_count	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int))
=	O
amd_messages_count	O
;	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
_messages_recent	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int))
=	O
amd_messages_recent	O
;	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
_message_unseen	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int))
=	O
amd_message_unseen	O
;	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
_expunge	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int))
=	O
amd_expunge	O
;	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
_sync	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int))
=	O
amd_sync	O
;	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
_uidvalidity	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int))
=	O
amd_uidvalidity	O
;	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
_uidnext	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int))
=	O
amd_uidnext	O
;	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
_scan	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long,*(long))->(int))
=	O
amd_scan	O
;	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
_is_updated	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int))
=	O
amd_is_updated	O
;	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
_get_size	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int))
=	O
amd_get_size	O
;	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
_remove	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int))
=	O
amd_remove_mbox	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	O
,	O
MU_DEBUG_TRACE1	O
,	O
(	O
"amd_init(%s)"	*(char)
,	O
amd	*(struct)
->	O
name	*(char)
)	O
)	O
;	O
*	O
pamd	O
=	O
amd	*(struct)
;	O
return	O
0	int
;	O
}	O
static	O
void	O
amd_destroy	O
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
)	O
{	O
struct	O
_amd_data	O
*	O
amd	*(struct)
=	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
data	*(void)
;	O
size_t	long
i	O
;	O
if	O
(	O
!	O
amd	*(struct)
)	O
return	O
;	O
amd_pool_flush	O
(	O
amd	*(struct)
)	O
;	O
mu_monitor_wrlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
amd	*(struct)
->	O
msg_count	O
;	O
i	O
++	O
)	O
{	O
mu_message_destroy	(*(*(struct)),*(void))->(void)
(	O
&	O
amd	*(struct)
->	O
msg_array	O
[	O
i	O
]	O
->	O
message	*(struct)
,	O
amd	*(struct)
->	O
msg_array	O
[	O
i	O
]	O
)	O
;	O
if	O
(	O
amd	*(struct)
->	O
msg_free	O
)	O
amd	*(struct)
->	O
msg_free	O
(	O
amd	*(struct)
->	O
msg_array	O
[	O
i	O
]	O
)	O
;	O
free	(*(void))->(void)
(	O
amd	*(struct)
->	O
msg_array	O
[	O
i	O
]	O
)	O
;	O
}	O
free	(*(void))->(void)
(	O
amd	*(struct)
->	O
msg_array	O
)	O
;	O
mu_property_destroy	(*(*(struct)))->(void)
(	O
&	O
amd	*(struct)
->	O
prop	*(struct)
)	O
;	O
if	O
(	O
amd	*(struct)
->	O
name	*(char)
)	O
free	(*(void))->(void)
(	O
amd	*(struct)
->	O
name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
amd	*(struct)
)	O
;	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
data	*(void)
=	O
NULL	O
;	O
mu_monitor_unlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
}	O
static	O
int	O
amd_open	O
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
int	O
flags	int
)	O
{	O
struct	O
_amd_data	O
*	O
amd	*(struct)
=	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
data	*(void)
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
st	*(struct(long,long,long))
;	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
flags	int
=	O
flags	int
;	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
amd	*(struct)
->	O
name	*(char)
,	O
&	O
st	*(struct(long,long,long))
)	O
<	O
0	int
)	O
{	O
if	O
(	O
(	O
flags	int
&	O
MU_STREAM_CREAT	O
)	O
&&	O
errno	O
==	O
ENOENT	O
)	O
{	O
int	O
rc	int
;	O
int	O
perms	int
=	O
mu_stream_flags_to_mode	(int,int)->(int)
(	O
flags	int
,	O
1	int
)	O
;	O
if	O
(	O
mkdir	(*(char),int)->(int)
(	O
amd	*(struct)
->	O
name	*(char)
,	O
S_IRUSR	O
|	O
S_IWUSR	O
|	O
S_IXUSR	O
|	O
perms	int
)	O
)	O
return	O
errno	O
;	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
amd	*(struct)
->	O
name	*(char)
,	O
&	O
st	*(struct(long,long,long))
)	O
<	O
0	int
)	O
return	O
errno	O
;	O
if	O
(	O
amd	*(struct)
->	O
create	O
&&	O
(	O
rc	int
=	O
amd	*(struct)
->	O
create	O
(	O
amd	*(struct)
,	O
flags	int
)	O
)	O
)	O
return	O
rc	int
;	O
}	O
else	O
return	O
errno	O
;	O
}	O
if	O
(	O
!	O
S_ISDIR	O
(	O
st	*(struct(long,long,long))
.	O
st_mode	int
)	O
)	O
return	O
EINVAL	O
;	O
if	O
(	O
access	(*(char),int)->(int)
(	O
amd	*(struct)
->	O
name	*(char)
,	O
(	O
flags	int
&	O
(	O
MU_STREAM_WRITE	O
|	O
MU_STREAM_APPEND	O
)	O
)	O
?	O
W_OK	O
:	O
R_OK	O
|	O
X_OK	O
)	O
)	O
return	O
errno	O
;	O
_amd_prop_create	O
(	O
amd	*(struct)
)	O
;	O
if	O
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
locker	*(struct)
==	O
NULL	O
)	O
mu_locker_create	(*(*(struct)),*(char),int)->(int)
(	O
&	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
locker	*(struct)
,	O
"/dev/null"	*(char)
,	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
amd_close	O
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
)	O
{	O
struct	O
_amd_data	O
*	O
amd	*(struct)
;	O
int	O
i	O
;	O
if	O
(	O
!	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
)	O
return	O
EINVAL	O
;	O
amd	*(struct)
=	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
data	*(void)
;	O
amd_pool_flush	O
(	O
amd	*(struct)
)	O
;	O
mu_monitor_wrlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
amd	*(struct)
->	O
msg_count	O
;	O
i	O
++	O
)	O
{	O
mu_message_destroy	(*(*(struct)),*(void))->(void)
(	O
&	O
amd	*(struct)
->	O
msg_array	O
[	O
i	O
]	O
->	O
message	*(struct)
,	O
amd	*(struct)
->	O
msg_array	O
[	O
i	O
]	O
)	O
;	O
if	O
(	O
amd	*(struct)
->	O
msg_free	O
)	O
amd	*(struct)
->	O
msg_free	O
(	O
amd	*(struct)
->	O
msg_array	O
[	O
i	O
]	O
)	O
;	O
free	(*(void))->(void)
(	O
amd	*(struct)
->	O
msg_array	O
[	O
i	O
]	O
)	O
;	O
}	O
free	(*(void))->(void)
(	O
amd	*(struct)
->	O
msg_array	O
)	O
;	O
amd	*(struct)
->	O
msg_array	O
=	O
NULL	O
;	O
mu_property_save	(*(struct))->(int)
(	O
amd	*(struct)
->	O
prop	*(struct)
)	O
;	O
amd	*(struct)
->	O
msg_count	O
=	O
0	int
;	O
amd	*(struct)
->	O
msg_max	O
=	O
0	int
;	O
mu_monitor_unlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
amd_message_qid	O
(	O
mu_message_t	*(struct)
msg	*(struct)
,	O
mu_message_qid_t	*(char)
*	O
pqid	O
)	O
{	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
mhm	O
=	O
mu_message_get_owner	(*(struct))->(*(void))
(	O
msg	*(struct)
)	O
;	O
return	O
mhm	O
->	O
amd	*(struct)
->	O
cur_msg_file_name	O
(	O
mhm	O
,	O
pqid	O
)	O
;	O
}	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
_amd_get_message	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
,	O
size_t	long
msgno	long
)	O
{	O
msgno	long
--	O
;	O
if	O
(	O
msgno	long
>=	O
amd	*(struct)
->	O
msg_count	O
)	O
return	O
NULL	O
;	O
return	O
amd	*(struct)
->	O
msg_array	O
[	O
msgno	long
]	O
;	O
}	O
static	O
int	O
_amd_attach_message	O
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
mhm	O
,	O
mu_message_t	*(struct)
*	O
pmsg	*(*(struct))
)	O
{	O
int	O
status	int
;	O
mu_message_t	*(struct)
msg	*(struct)
;	O
if	O
(	O
mhm	O
->	O
message	*(struct)
)	O
{	O
if	O
(	O
pmsg	*(*(struct))
)	O
*	O
pmsg	*(*(struct))
=	O
mhm	O
->	O
message	*(struct)
;	O
return	O
0	int
;	O
}	O
status	int
=	O
mu_message_create	(*(*(struct)),*(void))->(int)
(	O
&	O
msg	*(struct)
,	O
mhm	O
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
{	O
mu_header_t	*(struct)
header	*(struct)
=	O
NULL	O
;	O
status	int
=	O
mu_header_create	(*(*(struct)),*(char),long)->(int)
(	O
&	O
header	*(struct)
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
{	O
mu_message_destroy	(*(*(struct)),*(void))->(void)
(	O
&	O
msg	*(struct)
,	O
mhm	O
)	O
;	O
return	O
status	int
;	O
}	O
mu_header_set_fill	(*(struct),*((*(void),*(*(char)),*(long))->(int)),*(void))->(int)
(	O
header	*(struct)
,	O
amd_header_fill	O
,	O
msg	*(struct)
)	O
;	O
mu_message_set_header	(*(struct),*(struct),*(void))->(int)
(	O
msg	*(struct)
,	O
header	*(struct)
,	O
mhm	O
)	O
;	O
}	O
{	O
mu_attribute_t	*(struct)
attribute	O
;	O
status	int
=	O
mu_attribute_create	(*(*(struct)),*(void))->(int)
(	O
&	O
attribute	O
,	O
msg	*(struct)
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
{	O
mu_message_destroy	(*(*(struct)),*(void))->(void)
(	O
&	O
msg	*(struct)
,	O
mhm	O
)	O
;	O
return	O
status	int
;	O
}	O
mu_attribute_set_get_flags	(*(struct),*((*(struct),*(int))->(int)),*(void))->(int)
(	O
attribute	O
,	O
amd_get_attr_flags	O
,	O
msg	*(struct)
)	O
;	O
mu_attribute_set_set_flags	(*(struct),*((*(struct),int)->(int)),*(void))->(int)
(	O
attribute	O
,	O
amd_set_attr_flags	O
,	O
msg	*(struct)
)	O
;	O
mu_attribute_set_unset_flags	(*(struct),*((*(struct),int)->(int)),*(void))->(int)
(	O
attribute	O
,	O
amd_unset_attr_flags	O
,	O
msg	*(struct)
)	O
;	O
mu_message_set_attribute	(*(struct),*(struct),*(void))->(int)
(	O
msg	*(struct)
,	O
attribute	O
,	O
mhm	O
)	O
;	O
}	O
{	O
mu_body_t	*(struct)
body	*(struct)
=	O
NULL	O
;	O
struct	O
_amd_body_stream	O
*	O
str	*(char)
;	O
if	O
(	O
(	O
status	int
=	O
mu_body_create	(*(*(struct)),*(void))->(int)
(	O
&	O
body	*(struct)
,	O
msg	*(struct)
)	O
)	O
!=	O
0	int
)	O
return	O
status	int
;	O
str	*(char)
=	O
(	O
struct	O
_amd_body_stream	O
*	O
)	O
_mu_stream_create	(long,int)->(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))))
(	O
sizeof	O
(	O
*	O
str	*(char)
)	O
,	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
flags	int
|	O
MU_STREAM_SEEK	O
|	O
_MU_STR_OPEN	O
)	O
;	O
if	O
(	O
!	O
str	*(char)
)	O
{	O
mu_body_destroy	(*(*(struct)),*(void))->(void)
(	O
&	O
body	*(struct)
,	O
msg	*(struct)
)	O
;	O
mu_message_destroy	(*(*(struct)),*(void))->(void)
(	O
&	O
msg	*(struct)
,	O
mhm	O
)	O
;	O
return	O
ENOMEM	O
;	O
}	O
str	*(char)
->	O
stream	*(struct)
.	O
read	*((*(void),*(char),long)->(long))
=	O
amd_body_stream_read	O
;	O
str	*(char)
->	O
stream	*(struct)
.	O
readdelim	*((*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(char),long,int,*(long))->(int))
=	O
amd_body_stream_readdelim	O
;	O
str	*(char)
->	O
stream	*(struct)
.	O
size	long
=	O
amd_body_stream_size	O
;	O
str	*(char)
->	O
stream	*(struct)
.	O
seek	*((*(void),*(long),int)->(int))
=	O
amd_body_stream_seek	O
;	O
mu_body_set_stream	(*(struct),*(struct),*(void))->(int)
(	O
body	*(struct)
,	O
(	O
mu_stream_t	*(struct)
)	O
str	*(char)
,	O
msg	*(struct)
)	O
;	O
mu_body_clear_modified	(*(struct))->(int)
(	O
body	*(struct)
)	O
;	O
mu_body_set_size	(*(struct),*((*(struct),*(long))->(int)),*(void))->(int)
(	O
body	*(struct)
,	O
amd_body_size	O
,	O
msg	*(struct)
)	O
;	O
mu_body_set_lines	(*(struct),*((*(struct),*(long))->(int)),*(void))->(int)
(	O
body	*(struct)
,	O
amd_body_lines	O
,	O
msg	*(struct)
)	O
;	O
mu_message_set_body	(*(struct),*(struct),*(void))->(int)
(	O
msg	*(struct)
,	O
body	*(struct)
,	O
mhm	O
)	O
;	O
str	*(char)
->	O
body	*(struct)
=	O
body	*(struct)
;	O
}	O
{	O
mu_envelope_t	*(struct)
envelope	*(struct)
=	O
NULL	O
;	O
status	int
=	O
mu_envelope_create	(*(*(struct)),*(void))->(int)
(	O
&	O
envelope	*(struct)
,	O
msg	*(struct)
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
{	O
mu_message_destroy	(*(*(struct)),*(void))->(void)
(	O
&	O
msg	*(struct)
,	O
mhm	O
)	O
;	O
return	O
status	int
;	O
}	O
mu_envelope_set_sender	(*(struct),*((*(struct),*(char),long,*(long))->(int)),*(void))->(int)
(	O
envelope	*(struct)
,	O
amd_envelope_sender	O
,	O
msg	*(struct)
)	O
;	O
mu_envelope_set_date	(*(struct),*((*(struct),*(char),long,*(long))->(int)),*(void))->(int)
(	O
envelope	*(struct)
,	O
amd_envelope_date	O
,	O
msg	*(struct)
)	O
;	O
mu_message_set_envelope	(*(struct),*(struct),*(void))->(int)
(	O
msg	*(struct)
,	O
envelope	*(struct)
,	O
mhm	O
)	O
;	O
}	O
if	O
(	O
mhm	O
->	O
amd	*(struct)
->	O
message_uid	O
)	O
mu_message_set_uid	(*(struct),*((*(struct),*(long))->(int)),*(void))->(int)
(	O
msg	*(struct)
,	O
mhm	O
->	O
amd	*(struct)
->	O
message_uid	O
,	O
mhm	O
)	O
;	O
mu_message_set_qid	(*(struct),*((*(struct),*(*(char)))->(int)),*(void))->(int)
(	O
msg	*(struct)
,	O
amd_message_qid	O
,	O
mhm	O
)	O
;	O
mhm	O
->	O
message	*(struct)
=	O
msg	*(struct)
;	O
mu_message_set_mailbox	(*(struct),*(struct),*(void))->(int)
(	O
msg	*(struct)
,	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
mhm	O
)	O
;	O
mu_message_clear_modified	(*(struct))->(int)
(	O
msg	*(struct)
)	O
;	O
if	O
(	O
pmsg	*(*(struct))
)	O
*	O
pmsg	*(*(struct))
=	O
msg	*(struct)
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_amd_scan0	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
,	O
size_t	long
msgno	long
,	O
size_t	long
*	O
pcount	*(long)
,	O
int	O
do_notify	int
)	O
{	O
unsigned	O
long	O
uidval	O
;	O
int	O
status	int
=	O
amd	*(struct)
->	O
scan0	O
(	O
amd	*(struct)
->	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
msgno	long
,	O
pcount	*(long)
,	O
do_notify	int
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
if	O
(	O
amd	*(struct)
->	O
msg_count	O
==	O
0	int
||	O
_amd_prop_fetch_ulong	O
(	O
amd	*(struct)
,	O
_MU_AMD_PROP_UIDVALIDITY	O
,	O
&	O
uidval	O
)	O
||	O
!	O
uidval	O
)	O
{	O
uidval	O
=	O
(	O
unsigned	O
long	O
)	O
amd	*(struct)
->	O
mtime	long
;	O
_amd_prop_store_off	O
(	O
amd	*(struct)
,	O
_MU_AMD_PROP_UIDVALIDITY	O
,	O
uidval	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
amd_get_message	O
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
size_t	long
msgno	long
,	O
mu_message_t	*(struct)
*	O
pmsg	*(*(struct))
)	O
{	O
int	O
status	int
;	O
struct	O
_amd_data	O
*	O
amd	*(struct)
=	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
data	*(void)
;	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
mhm	O
;	O
if	O
(	O
pmsg	*(*(struct))
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
amd	*(struct)
==	O
NULL	O
||	O
msgno	long
<	O
1	int
)	O
return	O
EINVAL	O
;	O
if	O
(	O
amd	*(struct)
->	O
msg_count	O
==	O
0	int
)	O
{	O
status	int
=	O
_amd_scan0	O
(	O
amd	*(struct)
,	O
1	int
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
}	O
if	O
(	O
(	O
mhm	O
=	O
_amd_get_message	O
(	O
amd	*(struct)
,	O
msgno	long
)	O
)	O
==	O
NULL	O
)	O
return	O
MU_ERR_NOENT	O
;	O
return	O
_amd_attach_message	O
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
mhm	O
,	O
pmsg	*(*(struct))
)	O
;	O
}	O
static	O
int	O
amd_quick_get_message	O
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
mu_message_qid_t	*(char)
qid	*(char)
,	O
mu_message_t	*(struct)
*	O
pmsg	*(*(struct))
)	O
{	O
int	O
status	int
;	O
struct	O
_amd_data	O
*	O
amd	*(struct)
=	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
data	*(void)
;	O
if	O
(	O
amd	*(struct)
->	O
msg_count	O
)	O
{	O
mu_message_qid_t	*(char)
vqid	O
;	O
mu_message_t	*(struct)
msg	*(struct)
=	O
amd	*(struct)
->	O
msg_array	O
[	O
0	int
]	O
->	O
message	*(struct)
;	O
status	int
=	O
mu_message_get_qid	(*(struct),*(*(char)))->(int)
(	O
msg	*(struct)
,	O
&	O
vqid	O
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
strcmp	(*(char),*(char))->(int)
(	O
qid	*(char)
,	O
vqid	O
)	O
;	O
free	(*(void))->(void)
(	O
vqid	O
)	O
;	O
if	O
(	O
status	int
)	O
return	O
MU_ERR_EXISTS	O
;	O
*	O
pmsg	*(*(struct))
=	O
msg	*(struct)
;	O
}	O
else	O
if	O
(	O
amd	*(struct)
->	O
qfetch	O
)	O
{	O
status	int
=	O
amd	*(struct)
->	O
qfetch	O
(	O
amd	*(struct)
,	O
qid	*(char)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
_amd_attach_message	O
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
amd	*(struct)
->	O
msg_array	O
[	O
0	int
]	O
,	O
pmsg	*(*(struct))
)	O
;	O
}	O
return	O
ENOSYS	O
;	O
}	O
static	O
int	O
_amd_tempfile	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
,	O
FILE	struct
*	O
*	O
pfile	O
,	O
char	O
*	O
*	O
namep	*(*(char))
)	O
{	O
struct	O
mu_tempfile_hints	struct(*(char),*(char))
hints	*(struct(*(char),*(char)))
;	O
int	O
fd	int
,	O
rc	int
;	O
hints	*(struct(*(char),*(char)))
.	O
tmpdir	*(char)
=	O
amd	*(struct)
->	O
name	*(char)
;	O
rc	int
=	O
mu_tempfile	(*(struct(*(char),*(char))),int,*(int),*(*(char)))->(int)
(	O
&	O
hints	*(struct(*(char),*(char)))
,	O
MU_TEMPFILE_TMPDIR	O
,	O
&	O
fd	int
,	O
namep	*(*(char))
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
if	O
(	O
(	O
*	O
pfile	O
=	O
fdopen	(int,*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
fd	int
,	O
"w"	*(char)
)	O
)	O
==	O
NULL	O
)	O
rc	int
=	O
errno	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_amd_delim	O
(	O
char	O
*	O
str	*(char)
)	O
{	O
if	O
(	O
str	*(char)
[	O
0	int
]	O
==	O
'-'	O
)	O
{	O
for	O
(	O
;	O
*	O
str	*(char)
==	O
'-'	O
;	O
str	*(char)
++	O
)	O
;	O
for	O
(	O
;	O
*	O
str	*(char)
==	O
' '	O
||	O
*	O
str	*(char)
==	O
'\t'	O
;	O
str	*(char)
++	O
)	O
;	O
}	O
return	O
str	*(char)
[	O
0	int
]	O
==	O
'\n'	O
;	O
}	O
static	O
int	O
_amd_message_save	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
,	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
mhm	O
,	O
int	O
expunge	int
)	O
{	O
mu_stream_t	*(struct)
stream	*(struct)
=	O
NULL	O
;	O
char	O
*	O
name	*(char)
=	O
NULL	O
,	O
*	O
buf	*(char)
=	O
NULL	O
,	O
*	O
msg_name	*(void)
,	O
*	O
old_name	O
;	O
size_t	long
n	long
;	O
size_t	long
bsize	O
;	O
size_t	long
nlines	O
,	O
nbytes	O
;	O
size_t	long
new_body_start	O
,	O
new_header_lines	O
;	O
FILE	struct
*	O
fp	O
;	O
mu_message_t	*(struct)
msg	*(struct)
=	O
mhm	O
->	O
message	*(struct)
;	O
mu_header_t	*(struct)
hdr	*(struct)
;	O
int	O
status	int
;	O
mu_attribute_t	*(struct)
attr	*(struct)
;	O
mu_body_t	*(struct)
body	*(struct)
;	O
const	O
char	O
*	O
sbuf	O
;	O
mu_envelope_t	*(struct)
env	*(struct)
=	O
NULL	O
;	O
status	int
=	O
mu_message_size	(*(struct),*(long))->(int)
(	O
msg	*(struct)
,	O
&	O
bsize	O
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
amd	*(struct)
->	O
new_msg_file_name	O
(	O
mhm	O
,	O
mhm	O
->	O
attr_flags	int
,	O
expunge	int
,	O
&	O
msg_name	*(void)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
!	O
msg_name	*(void)
)	O
{	O
char	O
*	O
old_name	O
;	O
status	int
=	O
amd	*(struct)
->	O
cur_msg_file_name	O
(	O
mhm	O
,	O
&	O
old_name	O
)	O
;	O
free	(*(void))->(void)
(	O
msg_name	*(void)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
&&	O
unlink	(*(char))->(int)
(	O
old_name	O
)	O
)	O
status	int
=	O
errno	O
;	O
free	(*(void))->(void)
(	O
old_name	O
)	O
;	O
return	O
status	int
;	O
}	O
status	int
=	O
_amd_tempfile	O
(	O
mhm	O
->	O
amd	*(struct)
,	O
&	O
fp	O
,	O
&	O
name	*(char)
)	O
;	O
if	O
(	O
status	int
)	O
{	O
free	(*(void))->(void)
(	O
msg_name	*(void)
)	O
;	O
return	O
status	int
;	O
}	O
for	O
(	O
;	O
bsize	O
>	O
1	int
;	O
bsize	O
/=	O
2	int
)	O
if	O
(	O
(	O
buf	*(char)
=	O
malloc	(long)->(*(void))
(	O
bsize	O
)	O
)	O
)	O
break	O
;	O
if	O
(	O
!	O
bsize	O
)	O
{	O
unlink	(*(char))->(int)
(	O
name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
msg_name	*(void)
)	O
;	O
return	O
ENOMEM	O
;	O
}	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
hdr	*(struct)
)	O
;	O
mu_header_get_streamref	(*(struct),*(*(struct)))->(int)
(	O
hdr	*(struct)
,	O
&	O
stream	*(struct)
)	O
;	O
status	int
=	O
mu_stream_seek	(*(struct),long,int,*(long))->(int)
(	O
stream	*(struct)
,	O
0	int
,	O
MU_SEEK_SET	O
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
)	O
{	O
unlink	(*(char))->(int)
(	O
name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
msg_name	*(void)
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
stream	*(struct)
)	O
;	O
return	O
status	int
;	O
}	O
nlines	O
=	O
nbytes	O
=	O
0	int
;	O
while	O
(	O
(	O
status	int
=	O
mu_stream_readline	(*(struct),*(char),long,*(long))->(int)
(	O
stream	*(struct)
,	O
buf	*(char)
,	O
bsize	O
,	O
&	O
n	long
)	O
)	O
==	O
0	int
&&	O
n	long
!=	O
0	int
)	O
{	O
if	O
(	O
_amd_delim	O
(	O
buf	*(char)
)	O
)	O
break	O
;	O
if	O
(	O
!	O
(	O
mu_c_strncasecmp	(*(char),*(char),long)->(int)
(	O
buf	*(char)
,	O
"status:"	*(char)
,	O
7	int
)	O
==	O
0	int
||	O
mu_c_strncasecmp	(*(char),*(char),long)->(int)
(	O
buf	*(char)
,	O
"x-imapbase:"	*(char)
,	O
11	int
)	O
==	O
0	int
||	O
mu_c_strncasecmp	(*(char),*(char),long)->(int)
(	O
buf	*(char)
,	O
"x-uid:"	*(char)
,	O
6	int
)	O
==	O
0	int
||	O
mu_c_strncasecmp	(*(char),*(char),long)->(int)
(	O
buf	*(char)
,	O
MU_HEADER_ENV_DATE	O
":"	*(char)
,	O
sizeof	O
(	O
MU_HEADER_ENV_DATE	O
)	O
)	O
==	O
0	int
||	O
mu_c_strncasecmp	(*(char),*(char),long)->(int)
(	O
buf	*(char)
,	O
MU_HEADER_ENV_SENDER	O
":"	*(char)
,	O
sizeof	O
(	O
MU_HEADER_ENV_SENDER	O
)	O
)	O
==	O
0	int
)	O
)	O
{	O
nlines	O
++	O
;	O
nbytes	O
+=	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	O
,	O
"%s"	*(char)
,	O
buf	*(char)
)	O
;	O
}	O
}	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
stream	*(struct)
)	O
;	O
mu_message_get_envelope	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
env	*(struct)
)	O
;	O
if	O
(	O
mu_envelope_sget_date	(*(struct),*(*(char)))->(int)
(	O
env	*(struct)
,	O
&	O
sbuf	O
)	O
==	O
0	int
)	O
{	O
while	O
(	O
*	O
sbuf	O
&&	O
mu_isspace	O
(	O
*	O
sbuf	O
)	O
)	O
sbuf	O
++	O
;	O
nbytes	O
+=	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	O
,	O
"%s: %s"	*(char)
,	O
MU_HEADER_ENV_DATE	O
,	O
sbuf	O
)	O
;	O
if	O
(	O
*	O
sbuf	O
&&	O
sbuf	O
[	O
strlen	(*(char))->(long)
(	O
sbuf	O
)	O
-	O
1	int
]	O
!=	O
'\n'	O
)	O
nbytes	O
+=	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	O
,	O
"\n"	*(char)
)	O
;	O
nlines	O
++	O
;	O
}	O
if	O
(	O
mu_envelope_sget_sender	(*(struct),*(*(char)))->(int)
(	O
env	*(struct)
,	O
&	O
sbuf	O
)	O
==	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	O
,	O
"%s: %s\n"	*(char)
,	O
MU_HEADER_ENV_SENDER	O
,	O
sbuf	O
)	O
;	O
nlines	O
++	O
;	O
}	O
if	O
(	O
!	O
(	O
amd	*(struct)
->	O
capabilities	O
&	O
MU_AMD_STATUS	O
)	O
)	O
{	O
char	O
statbuf	array(long)
[	O
MU_STATUS_BUF_SIZE	O
]	O
;	O
mu_message_get_attribute	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
attr	*(struct)
)	O
;	O
mu_attribute_to_string	(*(struct),*(char),long,*(long))->(int)
(	O
attr	*(struct)
,	O
statbuf	array(long)
,	O
sizeof	O
(	O
statbuf	array(long)
)	O
,	O
&	O
n	long
)	O
;	O
if	O
(	O
n	long
)	O
{	O
nbytes	O
+=	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	O
,	O
"Status: %s\n"	*(char)
,	O
statbuf	array(long)
)	O
;	O
nlines	O
++	O
;	O
}	O
}	O
nbytes	O
+=	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	O
,	O
"\n"	*(char)
)	O
;	O
nlines	O
++	O
;	O
new_header_lines	O
=	O
nlines	O
;	O
new_body_start	O
=	O
nbytes	O
;	O
mu_message_get_body	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
body	*(struct)
)	O
;	O
mu_body_get_streamref	(*(struct),*(*(struct)))->(int)
(	O
body	*(struct)
,	O
&	O
stream	*(struct)
)	O
;	O
status	int
=	O
mu_stream_seek	(*(struct),long,int,*(long))->(int)
(	O
stream	*(struct)
,	O
0	int
,	O
MU_SEEK_SET	O
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
)	O
{	O
unlink	(*(char))->(int)
(	O
name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
msg_name	*(void)
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
stream	*(struct)
)	O
;	O
return	O
status	int
;	O
}	O
nlines	O
=	O
0	int
;	O
while	O
(	O
mu_stream_read	(*(struct),*(void),long,*(long))->(int)
(	O
stream	*(struct)
,	O
buf	*(char)
,	O
bsize	O
,	O
&	O
n	long
)	O
==	O
0	int
&&	O
n	long
!=	O
0	int
)	O
{	O
char	O
*	O
p	*(char)
;	O
for	O
(	O
p	*(char)
=	O
buf	*(char)
;	O
p	*(char)
<	O
buf	*(char)
+	O
n	long
;	O
p	*(char)
++	O
)	O
if	O
(	O
*	O
p	*(char)
==	O
'\n'	O
)	O
nlines	O
++	O
;	O
fwrite	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
buf	*(char)
,	O
1	int
,	O
n	long
,	O
fp	O
)	O
;	O
nbytes	O
+=	O
n	long
;	O
}	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
stream	*(struct)
)	O
;	O
mhm	O
->	O
header_lines	long
=	O
new_header_lines	O
;	O
mhm	O
->	O
body_start	long
=	O
new_body_start	O
;	O
mhm	O
->	O
body_lines	long
=	O
nlines	O
;	O
mhm	O
->	O
body_end	long
=	O
nbytes	O
;	O
free	(*(void))->(void)
(	O
buf	*(char)
)	O
;	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	O
)	O
;	O
status	int
=	O
amd	*(struct)
->	O
cur_msg_file_name	O
(	O
mhm	O
,	O
&	O
old_name	O
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
if	O
(	O
rename	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
msg_name	*(void)
)	O
)	O
{	O
if	O
(	O
errno	O
==	O
ENOENT	O
)	O
mu_observable_notify	(*(struct),int,*(void))->(int)
(	O
amd	*(struct)
->	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
observable	*(struct)
,	O
MU_EVT_MAILBOX_CORRUPT	O
,	O
amd	*(struct)
->	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
)	O
;	O
else	O
{	O
status	int
=	O
errno	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	O
,	O
MU_DEBUG_ERROR	O
,	O
(	O
"renaming %s to %s failed: %s"	*(char)
,	O
name	*(char)
,	O
msg_name	*(void)
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
)	O
;	O
}	O
}	O
else	O
{	O
mode_t	int
perms	int
;	O
perms	int
=	O
mu_stream_flags_to_mode	(int,int)->(int)
(	O
amd	*(struct)
->	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
flags	int
,	O
0	int
)	O
;	O
if	O
(	O
perms	int
!=	O
0	int
)	O
{	O
mode_t	int
mask	O
=	O
umask	(int)->(int)
(	O
0	int
)	O
;	O
chmod	(*(char),int)->(int)
(	O
msg_name	*(void)
,	O
(	O
0600	int
|	O
perms	int
)	O
&	O
~	O
mask	O
)	O
;	O
umask	(int)->(int)
(	O
mask	O
)	O
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
old_name	O
,	O
msg_name	*(void)
)	O
)	O
unlink	(*(char))->(int)
(	O
old_name	O
)	O
;	O
}	O
free	(*(void))->(void)
(	O
old_name	O
)	O
;	O
mhm	O
->	O
orig_flags	int
=	O
mhm	O
->	O
attr_flags	int
;	O
}	O
free	(*(void))->(void)
(	O
msg_name	*(void)
)	O
;	O
free	(*(void))->(void)
(	O
name	*(char)
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
amd_append_message	O
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
mu_message_t	*(struct)
msg	*(struct)
)	O
{	O
int	O
status	int
;	O
struct	O
_amd_data	O
*	O
amd	*(struct)
=	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
data	*(void)
;	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
mhm	O
;	O
if	O
(	O
!	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
||	O
!	O
msg	*(struct)
)	O
return	O
EINVAL	O
;	O
mhm	O
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
amd	*(struct)
->	O
msg_size	O
)	O
;	O
if	O
(	O
!	O
mhm	O
)	O
return	O
ENOMEM	O
;	O
if	O
(	O
amd	*(struct)
->	O
msg_count	O
==	O
0	int
)	O
{	O
status	int
=	O
_amd_scan0	O
(	O
amd	*(struct)
,	O
1	int
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
mhm	O
)	O
;	O
return	O
status	int
;	O
}	O
}	O
amd	*(struct)
->	O
has_new_msg	O
=	O
1	int
;	O
mhm	O
->	O
amd	*(struct)
=	O
amd	*(struct)
;	O
if	O
(	O
amd	*(struct)
->	O
msg_init_delivery	O
)	O
{	O
status	int
=	O
amd	*(struct)
->	O
msg_init_delivery	O
(	O
amd	*(struct)
,	O
mhm	O
)	O
;	O
if	O
(	O
status	int
)	O
{	O
free	(*(void))->(void)
(	O
mhm	O
)	O
;	O
return	O
status	int
;	O
}	O
}	O
mhm	O
->	O
message	*(struct)
=	O
msg	*(struct)
;	O
status	int
=	O
_amd_message_save	O
(	O
amd	*(struct)
,	O
mhm	O
,	O
0	int
)	O
;	O
if	O
(	O
status	int
)	O
{	O
free	(*(void))->(void)
(	O
mhm	O
)	O
;	O
return	O
status	int
;	O
}	O
mhm	O
->	O
message	*(struct)
=	O
NULL	O
;	O
status	int
=	O
_amd_message_insert	O
(	O
amd	*(struct)
,	O
mhm	O
)	O
;	O
if	O
(	O
status	int
)	O
{	O
free	(*(void))->(void)
(	O
mhm	O
)	O
;	O
return	O
status	int
;	O
}	O
if	O
(	O
amd	*(struct)
->	O
msg_finish_delivery	O
)	O
status	int
=	O
amd	*(struct)
->	O
msg_finish_delivery	O
(	O
amd	*(struct)
,	O
mhm	O
,	O
msg	*(struct)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
&&	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
observable	*(struct)
)	O
{	O
char	O
*	O
qid	*(char)
;	O
if	O
(	O
amd	*(struct)
->	O
cur_msg_file_name	O
(	O
mhm	O
,	O
&	O
qid	*(char)
)	O
==	O
0	int
)	O
{	O
mu_observable_notify	(*(struct),int,*(void))->(int)
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
observable	*(struct)
,	O
MU_EVT_MAILBOX_MESSAGE_APPEND	O
,	O
qid	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
qid	*(char)
)	O
;	O
}	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
amd_messages_count	O
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
size_t	long
*	O
pcount	*(long)
)	O
{	O
struct	O
_amd_data	O
*	O
amd	*(struct)
=	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
data	*(void)
;	O
if	O
(	O
amd	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	O
;	O
if	O
(	O
!	O
amd_is_updated	O
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
)	O
)	O
return	O
_amd_scan0	O
(	O
amd	*(struct)
,	O
amd	*(struct)
->	O
msg_count	O
,	O
pcount	*(long)
,	O
0	int
)	O
;	O
if	O
(	O
pcount	*(long)
)	O
*	O
pcount	*(long)
=	O
amd	*(struct)
->	O
msg_count	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
amd_messages_recent	O
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
size_t	long
*	O
pcount	*(long)
)	O
{	O
struct	O
_amd_data	O
*	O
amd	*(struct)
=	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
data	*(void)
;	O
size_t	long
count	*(long)
,	O
i	O
;	O
if	O
(	O
amd	*(struct)
->	O
msg_count	O
==	O
0	int
)	O
{	O
int	O
status	int
=	O
_amd_scan0	O
(	O
amd	*(struct)
,	O
1	int
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
}	O
count	*(long)
=	O
0	int
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
amd	*(struct)
->	O
msg_count	O
;	O
i	O
++	O
)	O
{	O
if	O
(	O
MU_ATTRIBUTE_IS_UNSEEN	O
(	O
amd	*(struct)
->	O
msg_array	O
[	O
i	O
]	O
->	O
attr_flags	int
)	O
)	O
count	*(long)
++	O
;	O
}	O
*	O
pcount	*(long)
=	O
count	*(long)
;	O
return	O
0	int
;	O
}	O
static	O
int	O
amd_message_unseen	O
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
size_t	long
*	O
pmsgno	O
)	O
{	O
struct	O
_amd_data	O
*	O
amd	*(struct)
=	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
data	*(void)
;	O
size_t	long
i	O
;	O
if	O
(	O
amd	*(struct)
->	O
msg_count	O
==	O
0	int
)	O
{	O
int	O
status	int
=	O
_amd_scan0	O
(	O
amd	*(struct)
,	O
1	int
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
}	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
amd	*(struct)
->	O
msg_count	O
;	O
i	O
++	O
)	O
{	O
if	O
(	O
MU_ATTRIBUTE_IS_UNREAD	O
(	O
amd	*(struct)
->	O
msg_array	O
[	O
0	int
]	O
->	O
attr_flags	int
)	O
)	O
{	O
*	O
pmsgno	O
=	O
i	O
+	O
1	int
;	O
break	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
_compute_mailbox_size_recursive	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
,	O
mu_off_t	long
*	O
psize	*(long)
)	O
{	O
DIR	struct
*	O
dir	*(char)
;	O
struct	O
dirent	struct(long,long,short,char,array(char))
*	O
entry	O
;	O
char	O
*	O
buf	*(char)
;	O
size_t	long
bufsize	long
;	O
size_t	long
dirlen	O
;	O
size_t	long
flen	O
;	O
int	O
status	int
=	O
0	int
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
sb	O
;	O
dir	*(char)
=	O
opendir	(*(char))->(*(struct))
(	O
name	*(char)
)	O
;	O
if	O
(	O
!	O
dir	*(char)
)	O
return	O
errno	O
;	O
dirlen	O
=	O
strlen	(*(char))->(long)
(	O
name	*(char)
)	O
;	O
bufsize	long
=	O
dirlen	O
+	O
32	int
;	O
buf	*(char)
=	O
malloc	(long)->(*(void))
(	O
bufsize	long
)	O
;	O
if	O
(	O
!	O
buf	*(char)
)	O
{	O
closedir	(*(struct))->(int)
(	O
dir	*(char)
)	O
;	O
return	O
ENOMEM	O
;	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
buf	*(char)
,	O
name	*(char)
)	O
;	O
if	O
(	O
buf	*(char)
[	O
dirlen	O
-	O
1	int
]	O
!=	O
'/'	O
)	O
buf	*(char)
[	O
++	O
dirlen	O
-	O
1	int
]	O
=	O
'/'	O
;	O
while	O
(	O
(	O
entry	O
=	O
readdir	(*(struct))->(*(struct(long,long,short,char,array(char))))
(	O
dir	*(char)
)	O
)	O
)	O
{	O
switch	O
(	O
entry	O
->	O
d_name	array(char)
[	O
0	int
]	O
)	O
{	O
case	O
'.'	O
:	O
break	O
;	O
default	O
:	O
flen	O
=	O
strlen	(*(char))->(long)
(	O
entry	O
->	O
d_name	array(char)
)	O
;	O
if	O
(	O
dirlen	O
+	O
flen	O
+	O
1	int
>	O
bufsize	long
)	O
{	O
bufsize	long
=	O
dirlen	O
+	O
flen	O
+	O
1	int
;	O
buf	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
buf	*(char)
,	O
bufsize	long
)	O
;	O
if	O
(	O
!	O
buf	*(char)
)	O
{	O
status	int
=	O
ENOMEM	O
;	O
break	O
;	O
}	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
buf	*(char)
+	O
dirlen	O
,	O
entry	O
->	O
d_name	array(char)
)	O
;	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
buf	*(char)
,	O
&	O
sb	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
S_ISREG	O
(	O
sb	O
.	O
st_mode	int
)	O
)	O
*	O
psize	*(long)
+=	O
sb	O
.	O
st_size	long
;	O
else	O
if	O
(	O
S_ISDIR	O
(	O
sb	O
.	O
st_mode	int
)	O
)	O
_compute_mailbox_size_recursive	O
(	O
amd	*(struct)
,	O
buf	*(char)
,	O
psize	*(long)
)	O
;	O
}	O
break	O
;	O
}	O
}	O
free	(*(void))->(void)
(	O
buf	*(char)
)	O
;	O
closedir	(*(struct))->(int)
(	O
dir	*(char)
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
compute_mailbox_size	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
,	O
mu_off_t	long
*	O
psize	*(long)
)	O
{	O
mu_off_t	long
size	long
=	O
0	int
;	O
int	O
rc	int
=	O
_compute_mailbox_size_recursive	O
(	O
amd	*(struct)
,	O
amd	*(struct)
->	O
name	*(char)
,	O
&	O
size	long
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
rc	int
=	O
_amd_prop_store_off	O
(	O
amd	*(struct)
,	O
_MU_AMD_PROP_SIZE	O
,	O
size	long
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
&&	O
psize	*(long)
)	O
*	O
psize	*(long)
=	O
size	long
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
amd_remove_mbox	O
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
)	O
{	O
int	O
rc	int
;	O
struct	O
_amd_data	O
*	O
amd	*(struct)
=	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
data	*(void)
;	O
if	O
(	O
!	O
amd	*(struct)
->	O
remove	(*(char))->(int)
)	O
return	O
ENOSYS	O
;	O
rc	int
=	O
amd	*(struct)
->	O
remove	(*(char))->(int)
(	O
amd	*(struct)
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
char	O
*	O
name	*(char)
;	O
name	*(char)
=	O
mu_make_file_name	O
(	O
amd	*(struct)
->	O
name	*(char)
,	O
_MU_AMD_PROP_FILE_NAME	O
)	O
;	O
if	O
(	O
!	O
name	*(char)
)	O
return	O
ENOMEM	O
;	O
if	O
(	O
unlink	(*(char))->(int)
(	O
name	*(char)
)	O
&&	O
errno	O
!=	O
ENOENT	O
)	O
rc	int
=	O
errno	O
;	O
free	(*(void))->(void)
(	O
name	*(char)
)	O
;	O
}	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
rmdir	(*(char))->(int)
(	O
amd	*(struct)
->	O
name	*(char)
)	O
&&	O
errno	O
!=	O
ENOENT	O
)	O
{	O
rc	int
=	O
errno	O
;	O
if	O
(	O
rc	int
==	O
EEXIST	O
)	O
rc	int
=	O
ENOTEMPTY	O
;	O
}	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
_amd_update_message	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
,	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
mhm	O
,	O
int	O
expunge	int
,	O
int	O
*	O
upd	O
)	O
{	O
int	O
flg	O
,	O
rc	int
;	O
if	O
(	O
mhm	O
->	O
message	*(struct)
)	O
flg	O
=	O
mu_message_is_modified	(*(struct))->(int)
(	O
mhm	O
->	O
message	*(struct)
)	O
;	O
else	O
if	O
(	O
mhm	O
->	O
attr_flags	int
&	O
MU_ATTRIBUTE_MODIFIED	O
)	O
flg	O
=	O
MU_MSG_ATTRIBUTE_MODIFIED	O
;	O
else	O
return	O
0	int
;	O
if	O
(	O
!	O
flg	O
)	O
return	O
0	int
;	O
if	O
(	O
flg	O
==	O
MU_MSG_ATTRIBUTE_MODIFIED	O
&&	O
amd	*(struct)
->	O
chattr_msg	O
)	O
{	O
rc	int
=	O
amd	*(struct)
->	O
chattr_msg	O
(	O
mhm	O
,	O
expunge	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	O
,	O
MU_DEBUG_ERROR	O
,	O
(	O
"_amd_update_message: chattr_msg failed: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
}	O
else	O
{	O
rc	int
=	O
_amd_attach_message	O
(	O
amd	*(struct)
->	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
mhm	O
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	O
,	O
MU_DEBUG_ERROR	O
,	O
(	O
"_amd_update_message: _amd_attach_message failed: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
rc	int
=	O
_amd_message_save	O
(	O
amd	*(struct)
,	O
mhm	O
,	O
expunge	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	O
,	O
MU_DEBUG_ERROR	O
,	O
(	O
"_amd_update_message: _amd_message_save failed: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
}	O
*	O
upd	O
=	O
1	int
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
amd_expunge	O
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
)	O
{	O
struct	O
_amd_data	O
*	O
amd	*(struct)
=	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
data	*(void)
;	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
mhm	O
;	O
size_t	long
i	O
;	O
int	O
updated	O
=	O
amd	*(struct)
->	O
has_new_msg	O
;	O
size_t	long
expcount	O
=	O
0	int
;	O
size_t	long
last_expunged	O
=	O
0	int
;	O
if	O
(	O
amd	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	O
;	O
if	O
(	O
amd	*(struct)
->	O
msg_count	O
==	O
0	int
)	O
return	O
0	int
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
amd	*(struct)
->	O
msg_count	O
;	O
i	O
++	O
)	O
{	O
mhm	O
=	O
amd	*(struct)
->	O
msg_array	O
[	O
i	O
]	O
;	O
if	O
(	O
mhm	O
->	O
attr_flags	int
&	O
MU_ATTRIBUTE_DELETED	O
)	O
{	O
int	O
rc	int
;	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
*	O
pp	O
;	O
if	O
(	O
amd	*(struct)
->	O
delete_msg	O
)	O
{	O
rc	int
=	O
amd	*(struct)
->	O
delete_msg	O
(	O
amd	*(struct)
,	O
mhm	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
else	O
{	O
char	O
*	O
old_name	O
;	O
char	O
*	O
new_name	O
;	O
rc	int
=	O
amd	*(struct)
->	O
cur_msg_file_name	O
(	O
mhm	O
,	O
&	O
old_name	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
amd	*(struct)
->	O
new_msg_file_name	O
(	O
mhm	O
,	O
mhm	O
->	O
attr_flags	int
,	O
1	int
,	O
&	O
new_name	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	(*(void))->(void)
(	O
old_name	O
)	O
;	O
return	O
rc	int
;	O
}	O
if	O
(	O
new_name	O
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
old_name	O
,	O
new_name	O
)	O
&&	O
rename	(*(char),*(char))->(int)
(	O
old_name	O
,	O
new_name	O
)	O
)	O
{	O
if	O
(	O
errno	O
==	O
ENOENT	O
)	O
mu_observable_notify	(*(struct),int,*(void))->(int)
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
observable	*(struct)
,	O
MU_EVT_MAILBOX_CORRUPT	O
,	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
)	O
;	O
else	O
{	O
rc	int
=	O
errno	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	O
,	O
MU_DEBUG_ERROR	O
,	O
(	O
"renaming %s to %s failed: %s"	*(char)
,	O
old_name	O
,	O
new_name	O
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
}	O
}	O
}	O
else	O
unlink	(*(char))->(int)
(	O
old_name	O
)	O
;	O
free	(*(void))->(void)
(	O
old_name	O
)	O
;	O
free	(*(void))->(void)
(	O
new_name	O
)	O
;	O
}	O
pp	O
=	O
amd_pool_lookup	O
(	O
mhm	O
)	O
;	O
if	O
(	O
pp	O
)	O
*	O
pp	O
=	O
NULL	O
;	O
mu_message_destroy	(*(*(struct)),*(void))->(void)
(	O
&	O
mhm	O
->	O
message	*(struct)
,	O
mhm	O
)	O
;	O
if	O
(	O
amd	*(struct)
->	O
msg_free	O
)	O
amd	*(struct)
->	O
msg_free	O
(	O
mhm	O
)	O
;	O
free	(*(void))->(void)
(	O
mhm	O
)	O
;	O
amd	*(struct)
->	O
msg_array	O
[	O
i	O
]	O
=	O
NULL	O
;	O
last_expunged	O
=	O
i	O
;	O
updated	O
=	O
1	int
;	O
{	O
size_t	long
expevt	O
[	O
2	int
]	O
=	O
{	O
i	O
+	O
1	int
,	O
expcount	O
}	O
;	O
mu_observable_notify	(*(struct),int,*(void))->(int)
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
observable	*(struct)
,	O
MU_EVT_MAILBOX_MESSAGE_EXPUNGE	O
,	O
expevt	O
)	O
;	O
++	O
expcount	O
;	O
}	O
}	O
else	O
{	O
_amd_update_message	O
(	O
amd	*(struct)
,	O
mhm	O
,	O
1	int
,	O
&	O
updated	O
)	O
;	O
}	O
}	O
if	O
(	O
expcount	O
)	O
{	O
last_expunged	O
++	O
;	O
do	O
{	O
size_t	long
j	O
;	O
for	O
(	O
j	O
=	O
1	int
;	O
j	O
<	O
last_expunged	O
&&	O
!	O
amd	*(struct)
->	O
msg_array	O
[	O
last_expunged	O
-	O
j	O
-	O
1	int
]	O
;	O
j	O
++	O
)	O
;	O
amd_array_shrink	O
(	O
amd	*(struct)
,	O
last_expunged	O
-	O
1	int
,	O
j	O
)	O
;	O
for	O
(	O
last_expunged	O
-=	O
j	O
;	O
last_expunged	O
>	O
0	int
&&	O
amd	*(struct)
->	O
msg_array	O
[	O
last_expunged	O
-	O
1	int
]	O
;	O
last_expunged	O
--	O
)	O
;	O
}	O
while	O
(	O
last_expunged	O
)	O
;	O
}	O
if	O
(	O
updated	O
&&	O
!	O
amd	*(struct)
->	O
mailbox_size	O
)	O
{	O
compute_mailbox_size	O
(	O
amd	*(struct)
,	O
NULL	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
amd_sync	O
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
)	O
{	O
struct	O
_amd_data	O
*	O
amd	*(struct)
=	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
data	*(void)
;	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
mhm	O
;	O
size_t	long
i	O
;	O
int	O
updated	O
=	O
amd	*(struct)
->	O
has_new_msg	O
;	O
if	O
(	O
amd	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	O
;	O
if	O
(	O
amd	*(struct)
->	O
msg_count	O
==	O
0	int
)	O
return	O
0	int
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
amd	*(struct)
->	O
msg_count	O
;	O
i	O
++	O
)	O
{	O
mhm	O
=	O
amd	*(struct)
->	O
msg_array	O
[	O
i	O
]	O
;	O
if	O
(	O
(	O
mhm	O
->	O
attr_flags	int
&	O
MU_ATTRIBUTE_MODIFIED	O
)	O
||	O
(	O
mhm	O
->	O
message	*(struct)
&&	O
mu_message_is_modified	(*(struct))->(int)
(	O
mhm	O
->	O
message	*(struct)
)	O
)	O
)	O
break	O
;	O
}	O
for	O
(	O
;	O
i	O
<	O
amd	*(struct)
->	O
msg_count	O
;	O
i	O
++	O
)	O
{	O
mhm	O
=	O
amd	*(struct)
->	O
msg_array	O
[	O
i	O
]	O
;	O
_amd_update_message	O
(	O
amd	*(struct)
,	O
mhm	O
,	O
0	int
,	O
&	O
updated	O
)	O
;	O
}	O
if	O
(	O
updated	O
&&	O
!	O
amd	*(struct)
->	O
mailbox_size	O
)	O
{	O
compute_mailbox_size	O
(	O
amd	*(struct)
,	O
NULL	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
amd_uidvalidity	O
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
unsigned	O
long	O
*	O
puidvalidity	O
)	O
{	O
struct	O
_amd_data	O
*	O
amd	*(struct)
=	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
data	*(void)
;	O
int	O
status	int
=	O
amd_messages_count	O
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
if	O
(	O
amd	*(struct)
->	O
msg_count	O
==	O
0	int
)	O
{	O
status	int
=	O
_amd_scan0	O
(	O
amd	*(struct)
,	O
1	int
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
}	O
return	O
_amd_prop_fetch_ulong	O
(	O
amd	*(struct)
,	O
_MU_AMD_PROP_UIDVALIDITY	O
,	O
puidvalidity	O
)	O
;	O
}	O
static	O
int	O
amd_uidnext	O
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
size_t	long
*	O
puidnext	O
)	O
{	O
struct	O
_amd_data	O
*	O
amd	*(struct)
=	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
data	*(void)
;	O
int	O
status	int
;	O
if	O
(	O
!	O
amd	*(struct)
->	O
next_uid	O
)	O
return	O
ENOSYS	O
;	O
status	int
=	O
mu_mailbox_messages_count	(*(struct),*(long))->(int)
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
if	O
(	O
amd	*(struct)
->	O
msg_count	O
==	O
0	int
)	O
{	O
status	int
=	O
_amd_scan0	O
(	O
amd	*(struct)
,	O
1	int
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
}	O
if	O
(	O
puidnext	O
)	O
*	O
puidnext	O
=	O
amd	*(struct)
->	O
next_uid	O
(	O
amd	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
void	O
amd_cleanup	O
(	O
void	O
*	O
arg	*(char)
)	O
{	O
mu_mailbox_t	*(struct)
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
=	O
arg	*(char)
;	O
mu_monitor_unlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
}	O
int	O
_amd_message_lookup_or_insert	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
,	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
key	*(char)
,	O
size_t	long
*	O
pindex	O
)	O
{	O
int	O
result	O
=	O
0	int
;	O
size_t	long
index	(*(char),int)->(*(char))
;	O
if	O
(	O
amd_msg_lookup	O
(	O
amd	*(struct)
,	O
key	*(char)
,	O
&	O
index	(*(char),int)->(*(char))
)	O
)	O
{	O
result	O
=	O
amd_array_expand	O
(	O
amd	*(struct)
,	O
index	(*(char),int)->(*(char))
)	O
;	O
if	O
(	O
result	O
)	O
return	O
result	O
;	O
else	O
result	O
=	O
MU_ERR_NOENT	O
;	O
}	O
else	O
result	O
=	O
0	int
;	O
*	O
pindex	O
=	O
index	(*(char),int)->(*(char))
;	O
return	O
result	O
;	O
}	O
int	O
_amd_message_insert	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
,	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
msg	*(struct)
)	O
{	O
size_t	long
index	(*(char),int)->(*(char))
;	O
int	O
rc	int
=	O
_amd_message_lookup_or_insert	O
(	O
amd	*(struct)
,	O
msg	*(struct)
,	O
&	O
index	(*(char),int)->(*(char))
)	O
;	O
if	O
(	O
rc	int
==	O
MU_ERR_NOENT	O
)	O
{	O
amd	*(struct)
->	O
msg_array	O
[	O
index	(*(char),int)->(*(char))
]	O
=	O
msg	*(struct)
;	O
msg	*(struct)
->	O
amd	*(struct)
=	O
amd	*(struct)
;	O
}	O
else	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
return	O
EEXIST	O
;	O
}	O
else	O
return	O
rc	int
;	O
return	O
0	int
;	O
}	O
int	O
_amd_message_append	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
,	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
msg	*(struct)
)	O
{	O
size_t	long
index	(*(char),int)->(*(char))
=	O
amd	*(struct)
->	O
msg_count	O
;	O
int	O
rc	int
=	O
amd_array_expand	O
(	O
amd	*(struct)
,	O
index	(*(char),int)->(*(char))
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
amd	*(struct)
->	O
msg_array	O
[	O
index	(*(char),int)->(*(char))
]	O
=	O
msg	*(struct)
;	O
msg	*(struct)
->	O
amd	*(struct)
=	O
amd	*(struct)
;	O
return	O
0	int
;	O
}	O
static	O
int	O
msg_array_comp	O
(	O
const	O
void	O
*	O
a	*(char)
,	O
const	O
void	O
*	O
b	*(char)
)	O
{	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
*	O
ma	O
=	O
(	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
*	O
)	O
a	*(char)
;	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
*	O
mb	O
=	O
(	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
*	O
)	O
b	*(char)
;	O
struct	O
_amd_data	O
*	O
amd	*(struct)
=	O
(	O
*	O
ma	O
)	O
->	O
amd	*(struct)
;	O
return	O
amd	*(struct)
->	O
msg_cmp	O
(	O
*	O
ma	O
,	O
*	O
mb	O
)	O
;	O
}	O
void	O
amd_sort	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
)	O
{	O
qsort	(*(void),long,long,*((*(void),*(void))->(int)))->(void)
(	O
amd	*(struct)
->	O
msg_array	O
,	O
amd	*(struct)
->	O
msg_count	O
,	O
sizeof	O
(	O
amd	*(struct)
->	O
msg_array	O
[	O
0	int
]	O
)	O
,	O
msg_array_comp	O
)	O
;	O
}	O
static	O
int	O
amd_scan_message	O
(	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
mhm	O
)	O
{	O
mu_stream_t	*(struct)
stream	*(struct)
=	O
mhm	O
->	O
stream	*(struct)
;	O
char	O
buf	*(char)
[	O
1024	int
]	O
;	O
size_t	long
off	O
;	O
size_t	long
n	long
;	O
int	O
status	int
;	O
int	O
in_header	O
=	O
1	int
;	O
size_t	long
hlines	O
=	O
0	int
;	O
size_t	long
blines	O
=	O
0	int
;	O
size_t	long
body_start	long
=	O
0	int
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
st	*(struct(long,long,long))
;	O
char	O
*	O
msg_name	*(void)
;	O
struct	O
_amd_data	O
*	O
amd	*(struct)
=	O
mhm	O
->	O
amd	*(struct)
;	O
int	O
amd_capa	O
=	O
amd	*(struct)
->	O
capabilities	O
;	O
status	int
=	O
mhm	O
->	O
amd	*(struct)
->	O
cur_msg_file_name	O
(	O
mhm	O
,	O
&	O
msg_name	*(void)
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	O
,	O
MU_DEBUG_ERROR	O
,	O
(	O
"amd_scan_message: cur_msg_file_name=%s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
)	O
;	O
return	O
status	int
;	O
}	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
msg_name	*(void)
,	O
&	O
st	*(struct(long,long,long))
)	O
==	O
0	int
&&	O
st	*(struct(long,long,long))
.	O
st_mtime	O
==	O
mhm	O
->	O
mtime	long
)	O
{	O
free	(*(void))->(void)
(	O
msg_name	*(void)
)	O
;	O
return	O
0	int
;	O
}	O
off	O
=	O
0	int
;	O
status	int
=	O
mu_stream_seek	(*(struct),long,int,*(long))->(int)
(	O
stream	*(struct)
,	O
0	int
,	O
MU_SEEK_SET	O
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
)	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	O
,	O
MU_DEBUG_ERROR	O
,	O
(	O
"amd_scan_message(%s): mu_stream_seek=%s"	*(char)
,	O
msg_name	*(void)
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
)	O
;	O
else	O
{	O
while	O
(	O
(	O
status	int
=	O
mu_stream_readline	(*(struct),*(char),long,*(long))->(int)
(	O
stream	*(struct)
,	O
buf	*(char)
,	O
sizeof	O
(	O
buf	*(char)
)	O
,	O
&	O
n	long
)	O
)	O
==	O
0	int
&&	O
n	long
!=	O
0	int
)	O
{	O
if	O
(	O
in_header	O
)	O
{	O
if	O
(	O
buf	*(char)
[	O
0	int
]	O
==	O
'\n'	O
)	O
{	O
in_header	O
=	O
0	int
;	O
body_start	long
=	O
off	O
+	O
1	int
;	O
}	O
if	O
(	O
buf	*(char)
[	O
n	long
-	O
1	int
]	O
==	O
'\n'	O
)	O
hlines	O
++	O
;	O
if	O
(	O
!	O
(	O
amd_capa	O
&	O
MU_AMD_STATUS	O
)	O
&&	O
mu_c_strncasecmp	(*(char),*(char),long)->(int)
(	O
buf	*(char)
,	O
"status:"	*(char)
,	O
7	int
)	O
==	O
0	int
)	O
{	O
int	O
deleted	O
=	O
mhm	O
->	O
attr_flags	int
&	O
MU_ATTRIBUTE_DELETED	O
;	O
mu_string_to_flags	(*(char),*(int))->(int)
(	O
buf	*(char)
,	O
&	O
mhm	O
->	O
attr_flags	int
)	O
;	O
mhm	O
->	O
attr_flags	int
|=	O
deleted	O
;	O
}	O
else	O
if	O
(	O
!	O
(	O
amd_capa	O
&	O
MU_AMD_IMAPBASE	O
)	O
&&	O
mu_c_strncasecmp	(*(char),*(char),long)->(int)
(	O
buf	*(char)
,	O
"x-imapbase:"	*(char)
,	O
11	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
_amd_prop_fetch_ulong	O
(	O
amd	*(struct)
,	O
_MU_AMD_PROP_UIDVALIDITY	O
,	O
NULL	O
)	O
)	O
{	O
char	O
*	O
p	*(char)
;	O
unsigned	O
long	O
uidval	O
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
buf	*(char)
+	O
11	int
,	O
&	O
p	*(char)
,	O
10	int
)	O
;	O
_amd_prop_store_off	O
(	O
amd	*(struct)
,	O
_MU_AMD_PROP_UIDVALIDITY	O
,	O
uidval	O
)	O
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
buf	*(char)
[	O
n	long
-	O
1	int
]	O
==	O
'\n'	O
)	O
blines	O
++	O
;	O
}	O
off	O
+=	O
n	long
;	O
}	O
if	O
(	O
status	int
)	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	O
,	O
MU_DEBUG_ERROR	O
,	O
(	O
"amd_scan_message(%s): %s"	*(char)
,	O
msg_name	*(void)
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
)	O
;	O
}	O
free	(*(void))->(void)
(	O
msg_name	*(void)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
mhm	O
->	O
mtime	long
=	O
st	*(struct(long,long,long))
.	O
st_mtime	O
;	O
if	O
(	O
!	O
body_start	long
)	O
body_start	long
=	O
off	O
;	O
mhm	O
->	O
header_lines	long
=	O
hlines	O
;	O
mhm	O
->	O
body_lines	long
=	O
blines	O
;	O
mhm	O
->	O
body_start	long
=	O
body_start	long
;	O
mhm	O
->	O
body_end	long
=	O
off	O
;	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
amd_scan	O
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
size_t	long
msgno	long
,	O
size_t	long
*	O
pcount	*(long)
)	O
{	O
struct	O
_amd_data	O
*	O
amd	*(struct)
=	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
data	*(void)
;	O
if	O
(	O
!	O
amd_is_updated	O
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
)	O
)	O
return	O
_amd_scan0	O
(	O
amd	*(struct)
,	O
msgno	long
,	O
pcount	*(long)
,	O
1	int
)	O
;	O
if	O
(	O
pcount	*(long)
)	O
*	O
pcount	*(long)
=	O
amd	*(struct)
->	O
msg_count	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
amd_is_updated	O
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
)	O
{	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
st	*(struct(long,long,long))
;	O
struct	O
_amd_data	O
*	O
amd	*(struct)
=	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
data	*(void)
;	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
amd	*(struct)
->	O
name	*(char)
,	O
&	O
st	*(struct(long,long,long))
)	O
<	O
0	int
)	O
return	O
1	int
;	O
return	O
amd	*(struct)
->	O
mtime	long
==	O
st	*(struct(long,long,long))
.	O
st_mtime	O
;	O
}	O
static	O
int	O
amd_get_size	O
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
mu_off_t	long
*	O
psize	*(long)
)	O
{	O
struct	O
_amd_data	O
*	O
amd	*(struct)
=	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
data	*(void)
;	O
if	O
(	O
amd	*(struct)
->	O
mailbox_size	O
)	O
return	O
amd	*(struct)
->	O
mailbox_size	O
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
psize	*(long)
)	O
;	O
if	O
(	O
_amd_prop_fetch_off	O
(	O
amd	*(struct)
,	O
_MU_AMD_PROP_SIZE	O
,	O
psize	*(long)
)	O
)	O
return	O
compute_mailbox_size	O
(	O
amd	*(struct)
,	O
psize	*(long)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
amd_pool_open_count	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
)	O
{	O
int	O
cnt	*(long)
=	O
amd	*(struct)
->	O
pool_last	O
-	O
amd	*(struct)
->	O
pool_first	O
;	O
if	O
(	O
cnt	*(long)
<	O
0	int
)	O
cnt	*(long)
+=	O
MAX_OPEN_STREAMS	int
;	O
return	O
cnt	*(long)
;	O
}	O
static	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
*	O
amd_pool_lookup	O
(	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
mhm	O
)	O
{	O
struct	O
_amd_data	O
*	O
amd	*(struct)
=	O
mhm	O
->	O
amd	*(struct)
;	O
int	O
i	O
;	O
for	O
(	O
i	O
=	O
amd	*(struct)
->	O
pool_first	O
;	O
i	O
!=	O
amd	*(struct)
->	O
pool_last	O
;	O
)	O
{	O
if	O
(	O
amd	*(struct)
->	O
msg_pool	O
[	O
i	O
]	O
==	O
mhm	O
)	O
return	O
&	O
amd	*(struct)
->	O
msg_pool	O
[	O
i	O
]	O
;	O
if	O
(	O
++	O
i	O
==	O
MAX_OPEN_STREAMS	int
)	O
i	O
=	O
0	int
;	O
}	O
return	O
NULL	O
;	O
}	O
static	O
int	O
amd_pool_open	O
(	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
mhm	O
)	O
{	O
int	O
status	int
;	O
struct	O
_amd_data	O
*	O
amd	*(struct)
=	O
mhm	O
->	O
amd	*(struct)
;	O
if	O
(	O
amd_pool_lookup	O
(	O
mhm	O
)	O
)	O
return	O
0	int
;	O
if	O
(	O
amd_pool_open_count	O
(	O
amd	*(struct)
)	O
==	O
MAX_OPEN_STREAMS	int
-	O
1	int
)	O
{	O
amd_message_stream_close	O
(	O
amd	*(struct)
->	O
msg_pool	O
[	O
amd	*(struct)
->	O
pool_first	O
++	O
]	O
)	O
;	O
amd	*(struct)
->	O
pool_first	O
%=	O
MAX_OPEN_STREAMS	int
;	O
}	O
status	int
=	O
amd_message_stream_open	O
(	O
mhm	O
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	O
,	O
MU_DEBUG_ERROR	O
,	O
(	O
"amd_pool_open: amd_message_stream_open=%s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
)	O
;	O
return	O
status	int
;	O
}	O
amd	*(struct)
->	O
msg_pool	O
[	O
amd	*(struct)
->	O
pool_last	O
++	O
]	O
=	O
mhm	O
;	O
amd	*(struct)
->	O
pool_last	O
%=	O
MAX_OPEN_STREAMS	int
;	O
return	O
0	int
;	O
}	O
static	O
void	O
amd_pool_flush	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
)	O
{	O
int	O
i	O
;	O
for	O
(	O
i	O
=	O
amd	*(struct)
->	O
pool_first	O
;	O
i	O
!=	O
amd	*(struct)
->	O
pool_last	O
;	O
)	O
{	O
if	O
(	O
amd	*(struct)
->	O
msg_pool	O
[	O
i	O
]	O
)	O
amd_message_stream_close	O
(	O
amd	*(struct)
->	O
msg_pool	O
[	O
i	O
]	O
)	O
;	O
if	O
(	O
++	O
i	O
==	O
MAX_OPEN_STREAMS	int
)	O
i	O
=	O
0	int
;	O
}	O
amd	*(struct)
->	O
pool_first	O
=	O
amd	*(struct)
->	O
pool_last	O
=	O
0	int
;	O
}	O
int	O
amd_message_stream_open	O
(	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
mhm	O
)	O
{	O
struct	O
_amd_data	O
*	O
amd	*(struct)
=	O
mhm	O
->	O
amd	*(struct)
;	O
char	O
*	O
filename	*(char)
;	O
int	O
status	int
;	O
int	O
flags	int
=	O
0	int
;	O
status	int
=	O
amd	*(struct)
->	O
cur_msg_file_name	O
(	O
mhm	O
,	O
&	O
filename	*(char)
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	O
,	O
MU_DEBUG_ERROR	O
,	O
(	O
"amd_message_stream_open: cur_msg_file_name=%s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
)	O
;	O
return	O
status	int
;	O
}	O
if	O
(	O
amd	*(struct)
->	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
flags	int
&	O
(	O
MU_STREAM_WRITE	O
|	O
MU_STREAM_APPEND	O
)	O
)	O
flags	int
|=	O
MU_STREAM_RDWR	O
;	O
else	O
flags	int
|=	O
MU_STREAM_READ	O
;	O
status	int
=	O
mu_file_stream_create	(*(*(struct)),*(char),int)->(int)
(	O
&	O
mhm	O
->	O
stream	*(struct)
,	O
filename	*(char)
,	O
flags	int
)	O
;	O
if	O
(	O
status	int
)	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	O
,	O
MU_DEBUG_ERROR	O
,	O
(	O
"amd_message_stream_open: mu_file_stream_create(%s)=%s"	*(char)
,	O
filename	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
)	O
;	O
free	(*(void))->(void)
(	O
filename	*(char)
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
mu_stream_set_buffer	(*(struct),enum(int,int,int),long)->(int)
(	O
mhm	O
->	O
stream	*(struct)
,	O
mu_buffer_full	int
,	O
16384	int
)	O
;	O
status	int
=	O
amd_scan_message	O
(	O
mhm	O
)	O
;	O
if	O
(	O
status	int
)	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	O
,	O
MU_DEBUG_ERROR	O
,	O
(	O
"amd_message_stream_open: amd_scan_message=%s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
)	O
;	O
return	O
status	int
;	O
}	O
void	O
amd_message_stream_close	O
(	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
mhm	O
)	O
{	O
if	O
(	O
mhm	O
)	O
{	O
mu_stream_close	(*(struct))->(int)
(	O
mhm	O
->	O
stream	*(struct)
)	O
;	O
mhm	O
->	O
stream	*(struct)
=	O
NULL	O
;	O
}	O
}	O
int	O
amd_check_message	O
(	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
mhm	O
)	O
{	O
if	O
(	O
mhm	O
->	O
body_end	long
==	O
0	int
)	O
return	O
amd_pool_open	O
(	O
mhm	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
amd_body_stream_read	O
(	O
mu_stream_t	*(struct)
is	O
,	O
char	O
*	O
buffer	*(char)
,	O
size_t	long
buflen	long
,	O
size_t	long
*	O
pnread	O
)	O
{	O
struct	O
_amd_body_stream	O
*	O
amdstr	O
=	O
(	O
struct	O
_amd_body_stream	O
*	O
)	O
is	O
;	O
mu_body_t	*(struct)
body	*(struct)
=	O
amdstr	O
->	O
body	*(struct)
;	O
mu_message_t	*(struct)
msg	*(struct)
=	O
mu_body_get_owner	(*(struct))->(*(void))
(	O
body	*(struct)
)	O
;	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
mhm	O
=	O
mu_message_get_owner	(*(struct))->(*(void))
(	O
msg	*(struct)
)	O
;	O
size_t	long
nread	O
=	O
0	int
;	O
int	O
status	int
=	O
0	int
;	O
mu_off_t	long
ln	O
;	O
status	int
=	O
amd_pool_open	O
(	O
mhm	O
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
buffer	*(char)
==	O
NULL	O
||	O
buflen	long
==	O
0	int
)	O
{	O
*	O
pnread	O
=	O
nread	O
;	O
return	O
0	int
;	O
}	O
mu_monitor_rdlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
mhm	O
->	O
amd	*(struct)
->	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
pthread_cleanup_push	O
(	O
amd_cleanup	O
,	O
(	O
void	O
*	O
)	O
mhm	O
->	O
amd	*(struct)
->	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
)	O
;	O
ln	O
=	O
mhm	O
->	O
body_end	long
-	O
(	O
mhm	O
->	O
body_start	long
+	O
amdstr	O
->	O
off	O
)	O
;	O
if	O
(	O
ln	O
>	O
0	int
)	O
{	O
nread	O
=	O
(	O
(	O
size_t	long
)	O
ln	O
<	O
buflen	long
)	O
?	O
(	O
size_t	long
)	O
ln	O
:	O
buflen	long
;	O
status	int
=	O
mu_stream_seek	(*(struct),long,int,*(long))->(int)
(	O
mhm	O
->	O
stream	*(struct)
,	O
mhm	O
->	O
body_start	long
+	O
amdstr	O
->	O
off	O
,	O
MU_SEEK_SET	O
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
status	int
=	O
mu_stream_read	(*(struct),*(void),long,*(long))->(int)
(	O
mhm	O
->	O
stream	*(struct)
,	O
buffer	*(char)
,	O
nread	O
,	O
&	O
nread	O
)	O
;	O
amdstr	O
->	O
off	O
+=	O
nread	O
;	O
}	O
}	O
*	O
pnread	O
=	O
nread	O
;	O
mu_monitor_unlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
mhm	O
->	O
amd	*(struct)
->	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
pthread_cleanup_pop	O
(	O
0	int
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
amd_body_stream_readdelim	O
(	O
mu_stream_t	*(struct)
is	O
,	O
char	O
*	O
buffer	*(char)
,	O
size_t	long
buflen	long
,	O
int	O
delim	*(char)
,	O
size_t	long
*	O
pnread	O
)	O
{	O
struct	O
_amd_body_stream	O
*	O
amdstr	O
=	O
(	O
struct	O
_amd_body_stream	O
*	O
)	O
is	O
;	O
mu_body_t	*(struct)
body	*(struct)
=	O
amdstr	O
->	O
body	*(struct)
;	O
mu_message_t	*(struct)
msg	*(struct)
=	O
mu_body_get_owner	(*(struct))->(*(void))
(	O
body	*(struct)
)	O
;	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
mhm	O
=	O
mu_message_get_owner	(*(struct))->(*(void))
(	O
msg	*(struct)
)	O
;	O
int	O
status	int
=	O
0	int
;	O
status	int
=	O
amd_pool_open	O
(	O
mhm	O
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
buffer	*(char)
==	O
NULL	O
||	O
buflen	long
==	O
0	int
)	O
{	O
if	O
(	O
pnread	O
)	O
*	O
pnread	O
=	O
0	int
;	O
return	O
0	int
;	O
}	O
mu_monitor_rdlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
mhm	O
->	O
amd	*(struct)
->	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
pthread_cleanup_push	O
(	O
amd_cleanup	O
,	O
(	O
void	O
*	O
)	O
mhm	O
->	O
amd	*(struct)
->	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
)	O
;	O
status	int
=	O
mu_stream_seek	(*(struct),long,int,*(long))->(int)
(	O
mhm	O
->	O
stream	*(struct)
,	O
mhm	O
->	O
body_start	long
+	O
amdstr	O
->	O
off	O
,	O
MU_SEEK_SET	O
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
size_t	long
nread	O
=	O
0	int
;	O
size_t	long
ln	O
;	O
ln	O
=	O
mhm	O
->	O
body_end	long
-	O
(	O
mhm	O
->	O
body_start	long
+	O
amdstr	O
->	O
off	O
)	O
+	O
1	int
;	O
if	O
(	O
ln	O
>	O
0	int
)	O
{	O
size_t	long
rdsize	O
=	O
(	O
(	O
size_t	long
)	O
ln	O
<	O
buflen	long
)	O
?	O
(	O
size_t	long
)	O
ln	O
:	O
buflen	long
;	O
status	int
=	O
mu_stream_readdelim	(*(struct),*(char),long,int,*(long))->(int)
(	O
mhm	O
->	O
stream	*(struct)
,	O
buffer	*(char)
,	O
rdsize	O
,	O
delim	*(char)
,	O
&	O
nread	O
)	O
;	O
amdstr	O
->	O
off	O
+=	O
nread	O
;	O
}	O
if	O
(	O
pnread	O
)	O
*	O
pnread	O
=	O
nread	O
;	O
}	O
mu_monitor_unlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
mhm	O
->	O
amd	*(struct)
->	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
pthread_cleanup_pop	O
(	O
0	int
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
amd_body_stream_seek	O
(	O
mu_stream_t	*(struct)
str	*(char)
,	O
mu_off_t	long
off	O
,	O
mu_off_t	long
*	O
presult	O
)	O
{	O
size_t	long
size	long
;	O
struct	O
_amd_body_stream	O
*	O
amdstr	O
=	O
(	O
struct	O
_amd_body_stream	O
*	O
)	O
str	*(char)
;	O
amd_body_size	O
(	O
amdstr	O
->	O
body	*(struct)
,	O
&	O
size	long
)	O
;	O
if	O
(	O
off	O
<	O
0	int
||	O
off	O
>	O
size	long
)	O
return	O
ESPIPE	O
;	O
amdstr	O
->	O
off	O
=	O
off	O
;	O
if	O
(	O
presult	O
)	O
*	O
presult	O
=	O
off	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
amd_body_stream_size	O
(	O
mu_stream_t	*(struct)
stream	*(struct)
,	O
mu_off_t	long
*	O
psize	*(long)
)	O
{	O
mu_body_t	*(struct)
body	*(struct)
=	O
(	O
(	O
struct	O
_amd_body_stream	O
*	O
)	O
stream	*(struct)
)	O
->	O
body	*(struct)
;	O
size_t	long
size	long
;	O
int	O
rc	int
=	O
amd_body_size	O
(	O
body	*(struct)
,	O
&	O
size	long
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
*	O
psize	*(long)
=	O
size	long
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
amd_body_size	O
(	O
mu_body_t	*(struct)
body	*(struct)
,	O
size_t	long
*	O
psize	*(long)
)	O
{	O
int	O
status	int
;	O
mu_message_t	*(struct)
msg	*(struct)
=	O
mu_body_get_owner	(*(struct))->(*(void))
(	O
body	*(struct)
)	O
;	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
mhm	O
=	O
mu_message_get_owner	(*(struct))->(*(void))
(	O
msg	*(struct)
)	O
;	O
if	O
(	O
mhm	O
==	O
NULL	O
)	O
return	O
EINVAL	O
;	O
status	int
=	O
amd_check_message	O
(	O
mhm	O
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
psize	*(long)
)	O
*	O
psize	*(long)
=	O
mhm	O
->	O
body_end	long
-	O
mhm	O
->	O
body_start	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
amd_body_lines	O
(	O
mu_body_t	*(struct)
body	*(struct)
,	O
size_t	long
*	O
plines	O
)	O
{	O
int	O
status	int
;	O
mu_message_t	*(struct)
msg	*(struct)
=	O
mu_body_get_owner	(*(struct))->(*(void))
(	O
body	*(struct)
)	O
;	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
mhm	O
=	O
mu_message_get_owner	(*(struct))->(*(void))
(	O
msg	*(struct)
)	O
;	O
if	O
(	O
mhm	O
==	O
NULL	O
)	O
return	O
EINVAL	O
;	O
status	int
=	O
amd_check_message	O
(	O
mhm	O
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
plines	O
)	O
*	O
plines	O
=	O
mhm	O
->	O
body_lines	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
amd_header_fill	O
(	O
void	O
*	O
data	*(void)
,	O
char	O
*	O
*	O
pbuf	*(*(char))
,	O
size_t	long
*	O
plen	*(long)
)	O
{	O
char	O
*	O
buffer	*(char)
;	O
size_t	long
len	int
;	O
mu_message_t	*(struct)
msg	*(struct)
=	O
data	*(void)
;	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
mhm	O
=	O
mu_message_get_owner	(*(struct))->(*(void))
(	O
msg	*(struct)
)	O
;	O
int	O
status	int
,	O
rc	int
;	O
mu_off_t	long
pos	long
;	O
status	int
=	O
amd_pool_open	O
(	O
mhm	O
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
len	int
=	O
mhm	O
->	O
body_start	long
;	O
buffer	*(char)
=	O
malloc	(long)->(*(void))
(	O
len	int
)	O
;	O
if	O
(	O
!	O
buffer	*(char)
)	O
return	O
ENOMEM	O
;	O
status	int
=	O
mu_stream_seek	(*(struct),long,int,*(long))->(int)
(	O
mhm	O
->	O
stream	*(struct)
,	O
0	int
,	O
MU_SEEK_CUR	O
,	O
&	O
pos	long
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
mu_stream_seek	(*(struct),long,int,*(long))->(int)
(	O
mhm	O
->	O
stream	*(struct)
,	O
0	int
,	O
MU_SEEK_SET	O
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
mu_stream_read	(*(struct),*(void),long,*(long))->(int)
(	O
mhm	O
->	O
stream	*(struct)
,	O
buffer	*(char)
,	O
len	int
,	O
NULL	O
)	O
;	O
rc	int
=	O
mu_stream_seek	(*(struct),long,int,*(long))->(int)
(	O
mhm	O
->	O
stream	*(struct)
,	O
pos	long
,	O
MU_SEEK_SET	O
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
status	int
)	O
status	int
=	O
rc	int
;	O
if	O
(	O
status	int
)	O
{	O
free	(*(void))->(void)
(	O
buffer	*(char)
)	O
;	O
return	O
status	int
;	O
}	O
*	O
plen	*(long)
=	O
len	int
;	O
*	O
pbuf	*(*(char))
=	O
buffer	*(char)
;	O
return	O
0	int
;	O
}	O
static	O
int	O
amd_get_attr_flags	O
(	O
mu_attribute_t	*(struct)
attr	*(struct)
,	O
int	O
*	O
pflags	*(int)
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
=	O
mu_attribute_get_owner	(*(struct))->(*(void))
(	O
attr	*(struct)
)	O
;	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
mhm	O
=	O
mu_message_get_owner	(*(struct))->(*(void))
(	O
msg	*(struct)
)	O
;	O
if	O
(	O
mhm	O
==	O
NULL	O
)	O
return	O
EINVAL	O
;	O
if	O
(	O
pflags	*(int)
)	O
*	O
pflags	*(int)
=	O
mhm	O
->	O
attr_flags	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
amd_set_attr_flags	O
(	O
mu_attribute_t	*(struct)
attr	*(struct)
,	O
int	O
flags	int
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
=	O
mu_attribute_get_owner	(*(struct))->(*(void))
(	O
attr	*(struct)
)	O
;	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
mhm	O
=	O
mu_message_get_owner	(*(struct))->(*(void))
(	O
msg	*(struct)
)	O
;	O
if	O
(	O
mhm	O
==	O
NULL	O
)	O
return	O
EINVAL	O
;	O
mhm	O
->	O
attr_flags	int
|=	O
flags	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
amd_unset_attr_flags	O
(	O
mu_attribute_t	*(struct)
attr	*(struct)
,	O
int	O
flags	int
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
=	O
mu_attribute_get_owner	(*(struct))->(*(void))
(	O
attr	*(struct)
)	O
;	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
mhm	O
=	O
mu_message_get_owner	(*(struct))->(*(void))
(	O
msg	*(struct)
)	O
;	O
if	O
(	O
mhm	O
==	O
NULL	O
)	O
return	O
EINVAL	O
;	O
mhm	O
->	O
attr_flags	int
&=	O
~	O
flags	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
amd_envelope_date	O
(	O
mu_envelope_t	*(struct)
envelope	*(struct)
,	O
char	O
*	O
buf	*(char)
,	O
size_t	long
len	int
,	O
size_t	long
*	O
psize	*(long)
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
=	O
mu_envelope_get_owner	(*(struct))->(*(void))
(	O
envelope	*(struct)
)	O
;	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
mhm	O
=	O
mu_message_get_owner	(*(struct))->(*(void))
(	O
msg	*(struct)
)	O
;	O
mu_header_t	*(struct)
hdr	*(struct)
=	O
NULL	O
;	O
const	O
char	O
*	O
date	struct(int,int,int,int,int,int,int,int,int,long,*(char))
;	O
char	O
datebuf	O
[	O
25	int
]	O
;	O
int	O
status	int
;	O
if	O
(	O
mhm	O
==	O
NULL	O
)	O
return	O
EINVAL	O
;	O
if	O
(	O
(	O
status	int
=	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
hdr	*(struct)
)	O
)	O
!=	O
0	int
)	O
return	O
status	int
;	O
if	O
(	O
mu_header_sget_value	O
(	O
hdr	*(struct)
,	O
MU_HEADER_ENV_DATE	O
,	O
&	O
date	struct(int,int,int,int,int,int,int,int,int,long,*(char))
)	O
&&	O
mu_header_sget_value	O
(	O
hdr	*(struct)
,	O
MU_HEADER_DELIVERY_DATE	O
,	O
&	O
date	struct(int,int,int,int,int,int,int,int,int,long,*(char))
)	O
)	O
return	O
MU_ERR_NOENT	O
;	O
else	O
{	O
time_t	long
t	long
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_parse_date	(*(char),*(long),*(long))->(int)
(	O
date	struct(int,int,int,int,int,int,int,int,int,long,*(char))
,	O
&	O
t	long
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
MU_ERR_NOENT	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
datebuf	O
,	O
ctime	(*(long))->(*(char))
(	O
&	O
t	long
)	O
,	O
sizeof	O
(	O
datebuf	O
)	O
-	O
1	int
)	O
;	O
datebuf	O
[	O
sizeof	O
(	O
datebuf	O
)	O
-	O
1	int
]	O
=	O
0	int
;	O
date	struct(int,int,int,int,int,int,int,int,int,long,*(char))
=	O
datebuf	O
;	O
}	O
if	O
(	O
buf	*(char)
&&	O
len	int
>	O
0	int
)	O
{	O
len	int
--	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
buf	*(char)
,	O
date	struct(int,int,int,int,int,int,int,int,int,long,*(char))
,	O
len	int
)	O
;	O
if	O
(	O
strlen	(*(char))->(long)
(	O
date	struct(int,int,int,int,int,int,int,int,int,long,*(char))
)	O
<	O
len	int
)	O
{	O
len	int
=	O
strlen	(*(char))->(long)
(	O
buf	*(char)
)	O
;	O
if	O
(	O
buf	*(char)
[	O
len	int
-	O
1	int
]	O
!=	O
'\n'	O
)	O
buf	*(char)
[	O
len	int
++	O
]	O
=	O
'\n'	O
;	O
}	O
buf	*(char)
[	O
len	int
]	O
=	O
'\0'	O
;	O
}	O
else	O
len	int
=	O
strlen	(*(char))->(long)
(	O
date	struct(int,int,int,int,int,int,int,int,int,long,*(char))
)	O
;	O
if	O
(	O
psize	*(long)
)	O
*	O
psize	*(long)
=	O
len	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
amd_envelope_sender	O
(	O
mu_envelope_t	*(struct)
envelope	*(struct)
,	O
char	O
*	O
buf	*(char)
,	O
size_t	long
len	int
,	O
size_t	long
*	O
psize	*(long)
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
=	O
mu_envelope_get_owner	(*(struct))->(*(void))
(	O
envelope	*(struct)
)	O
;	O
struct	O
_amd_message	struct(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char))))),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
mhm	O
=	O
mu_message_get_owner	(*(struct))->(*(void))
(	O
msg	*(struct)
)	O
;	O
mu_header_t	*(struct)
hdr	*(struct)
=	O
NULL	O
;	O
char	O
*	O
from	*(struct)
;	O
int	O
status	int
;	O
if	O
(	O
mhm	O
==	O
NULL	O
)	O
return	O
EINVAL	O
;	O
if	O
(	O
(	O
status	int
=	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
hdr	*(struct)
)	O
)	O
)	O
return	O
status	int
;	O
if	O
(	O
(	O
status	int
=	O
mu_header_aget_value	O
(	O
hdr	*(struct)
,	O
MU_HEADER_ENV_SENDER	O
,	O
&	O
from	*(struct)
)	O
)	O
)	O
return	O
status	int
;	O
if	O
(	O
buf	*(char)
&&	O
len	int
>	O
0	int
)	O
{	O
int	O
slen	O
=	O
strlen	(*(char))->(long)
(	O
from	*(struct)
)	O
;	O
if	O
(	O
len	int
<	O
slen	O
+	O
1	int
)	O
slen	O
=	O
len	int
-	O
1	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
buf	*(char)
,	O
from	*(struct)
,	O
slen	O
)	O
;	O
buf	*(char)
[	O
slen	O
]	O
=	O
0	int
;	O
}	O
else	O
len	int
=	O
strlen	(*(char))->(long)
(	O
from	*(struct)
)	O
;	O
if	O
(	O
psize	*(long)
)	O
*	O
psize	*(long)
=	O
len	int
;	O
free	(*(void))->(void)
(	O
from	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
amd_remove_dir	O
(	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
DIR	struct
*	O
dir	*(char)
;	O
struct	O
dirent	struct(long,long,short,char,array(char))
*	O
ent	O
;	O
char	O
*	O
namebuf	O
;	O
size_t	long
namelen	O
,	O
namesize	O
;	O
int	O
rc	int
=	O
0	int
;	O
int	O
has_subdirs	O
=	O
0	int
;	O
namelen	O
=	O
strlen	(*(char))->(long)
(	O
name	*(char)
)	O
;	O
namesize	O
=	O
namelen	O
+	O
128	int
;	O
namebuf	O
=	O
malloc	(long)->(*(void))
(	O
namesize	O
)	O
;	O
if	O
(	O
!	O
namebuf	O
)	O
return	O
ENOMEM	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
namebuf	O
,	O
name	*(char)
,	O
namelen	O
)	O
;	O
if	O
(	O
namebuf	O
[	O
namelen	O
-	O
1	int
]	O
!=	O
'/'	O
)	O
namebuf	O
[	O
namelen	O
++	O
]	O
=	O
'/'	O
;	O
dir	*(char)
=	O
opendir	(*(char))->(*(struct))
(	O
name	*(char)
)	O
;	O
if	O
(	O
!	O
dir	*(char)
)	O
return	O
errno	O
;	O
while	O
(	O
(	O
ent	O
=	O
readdir	(*(struct))->(*(struct(long,long,short,char,array(char))))
(	O
dir	*(char)
)	O
)	O
)	O
{	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
st	*(struct(long,long,long))
;	O
size_t	long
len	int
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
ent	O
->	O
d_name	array(char)
,	O
"."	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
ent	O
->	O
d_name	array(char)
,	O
".."	*(char)
)	O
==	O
0	int
)	O
continue	O
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
ent	O
->	O
d_name	array(char)
)	O
;	O
if	O
(	O
namelen	O
+	O
len	int
>=	O
namesize	O
)	O
{	O
char	O
*	O
p	*(char)
;	O
namesize	O
+=	O
len	int
+	O
1	int
;	O
p	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
namebuf	O
,	O
namesize	O
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
{	O
rc	int
=	O
ENOMEM	O
;	O
break	O
;	O
}	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
namebuf	O
+	O
namelen	O
,	O
ent	O
->	O
d_name	array(char)
)	O
;	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
namebuf	O
,	O
&	O
st	*(struct(long,long,long))
)	O
==	O
0	int
&&	O
S_ISDIR	O
(	O
st	*(struct(long,long,long))
.	O
st_mode	int
)	O
)	O
{	O
has_subdirs	O
=	O
1	int
;	O
continue	O
;	O
}	O
if	O
(	O
unlink	(*(char))->(int)
(	O
namebuf	O
)	O
)	O
{	O
rc	int
=	O
errno	O
;	O
mu_diag_output	(int,*(char))->(void)
(	O
MU_DIAG_WARNING	O
,	O
"failed to remove %s: %s"	*(char)
,	O
namebuf	O
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
break	O
;	O
}	O
}	O
closedir	(*(struct))->(int)
(	O
dir	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
namebuf	O
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
&&	O
!	O
has_subdirs	O
)	O
{	O
if	O
(	O
rmdir	(*(char))->(int)
(	O
name	*(char)
)	O
)	O
{	O
rc	int
=	O
errno	O
;	O
if	O
(	O
rc	int
==	O
EEXIST	O
)	O
rc	int
=	O
ENOTEMPTY	O
;	O
}	O
}	O
return	O
rc	int
;	O
}	O
