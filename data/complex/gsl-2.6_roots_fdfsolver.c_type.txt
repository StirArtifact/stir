gsl_root_fdfsolver	struct(*(struct(*(char),long,*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*((double,*`)->(double)),*((double,*`,*`,*`)->(void)),*(void))),double,*(void))
*	O
gsl_root_fdfsolver_alloc	(*(struct(*(char),long,*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)))))->(*(struct(*(struct(*`,long,*`,*`)),*(struct(*`,*`,*`,*`)),double,*(void))))
(	O
const	O
gsl_root_fdfsolver_type	struct(*(char),long,*((*(void),*(struct(*`,*`,*`,*`)),*(double))->(int)),*((*(void),*(struct(*`,*`,*`,*`)),*(double))->(int)))
*	O
T	*(struct(*(char),long,*((*(void),*(struct`),*(double),double,double)->(int)),*((*(void),*(struct`),*(double),*(double),*(double))->(int))))
)	O
{	O
gsl_root_fdfsolver	struct(*(struct(*(char),long,*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*((double,*`)->(double)),*((double,*`,*`,*`)->(void)),*(void))),double,*(void))
*	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
=	O
(	O
gsl_root_fdfsolver	struct(*(struct(*(char),long,*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*((double,*`)->(double)),*((double,*`,*`,*`)->(void)),*(void))),double,*(void))
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
gsl_root_fdfsolver	struct(*(struct(*(char),long,*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*((double,*`)->(double)),*((double,*`,*`,*`)->(void)),*(void))),double,*(void))
)	O
)	O
;	O
if	O
(	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
==	O
0	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for root solver struct"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
;	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
state	*(int)
=	O
malloc	(long)->(*(void))
(	O
T	*(struct(*(char),long,*((*(void),*(struct`),*(double),double,double)->(int)),*((*(void),*(struct`),*(double),*(double),*(double))->(int))))
->	O
size	long
)	O
;	O
if	O
(	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
state	*(int)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for root solver state"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
;	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
type	*(struct(*(char),long,*((*(void),*(struct`),*(double),double,double)->(int)),*((*(void),*(struct`),*(double),*(double),*(double))->(int))))
=	O
T	*(struct(*(char),long,*((*(void),*(struct`),*(double),double,double)->(int)),*((*(void),*(struct`),*(double),*(double),*(double))->(int))))
;	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
fdf	*((double,*(void),*(double),*(double))->(void))
=	O
NULL	O
;	O
return	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
;	O
}	O
int	O
gsl_root_fdfsolver_set	(*(struct(*(struct(*`,long,*`,*`)),*(struct(*`,*`,*`,*`)),double,*(void))),*(struct(*((double,*`)->(double)),*((double,*`)->(double)),*((double,*`,*`,*`)->(void)),*(void))),double)->(int)
(	O
gsl_root_fdfsolver	struct(*(struct(*(char),long,*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*((double,*`)->(double)),*((double,*`,*`,*`)->(void)),*(void))),double,*(void))
*	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
,	O
gsl_function_fdf	struct(*((double,*(void))->(double)),*((double,*(void))->(double)),*((double,*(void),*(double),*(double))->(void)),*(void))
*	O
f	*(double)
,	O
double	O
root	*(double)
)	O
{	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
fdf	*((double,*(void),*(double),*(double))->(void))
=	O
f	*(double)
;	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
root	*(double)
=	O
root	*(double)
;	O
return	O
(	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
type	*(struct(*(char),long,*((*(void),*(struct`),*(double),double,double)->(int)),*((*(void),*(struct`),*(double),*(double),*(double))->(int))))
->	O
set	*((*(void),*(struct(*((double,*`)->(double)),*(void))),*(double),double,double)->(int))
)	O
(	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
state	*(int)
,	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
&	O
(	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
root	*(double)
)	O
)	O
;	O
}	O
int	O
gsl_root_fdfsolver_iterate	(*(struct(*(struct(*`,long,*`,*`)),*(struct(*`,*`,*`,*`)),double,*(void))))->(int)
(	O
gsl_root_fdfsolver	struct(*(struct(*(char),long,*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*((double,*`)->(double)),*((double,*`,*`,*`)->(void)),*(void))),double,*(void))
*	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
)	O
{	O
return	O
(	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
type	*(struct(*(char),long,*((*(void),*(struct`),*(double),double,double)->(int)),*((*(void),*(struct`),*(double),*(double),*(double))->(int))))
->	O
iterate	*((*(void),*(struct(*((double,*`)->(double)),*(void))),*(double),*(double),*(double))->(int))
)	O
(	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
state	*(int)
,	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
&	O
(	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
root	*(double)
)	O
)	O
;	O
}	O
void	O
gsl_root_fdfsolver_free	(*(struct(*(struct(*`,long,*`,*`)),*(struct(*`,*`,*`,*`)),double,*(void))))->(void)
(	O
gsl_root_fdfsolver	struct(*(struct(*(char),long,*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*((double,*`)->(double)),*((double,*`,*`,*`)->(void)),*(void))),double,*(void))
*	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
)	O
{	O
RETURN_IF_NULL	O
(	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
)	O
;	O
free	(*(void))->(void)
(	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
state	*(int)
)	O
;	O
free	(*(void))->(void)
(	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
)	O
;	O
}	O
const	O
char	O
*	O
gsl_root_fdfsolver_name	(*(struct(*(struct(*`,long,*`,*`)),*(struct(*`,*`,*`,*`)),double,*(void))))->(*(char))
(	O
const	O
gsl_root_fdfsolver	struct(*(struct(*(char),long,*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*((double,*`)->(double)),*((double,*`,*`,*`)->(void)),*(void))),double,*(void))
*	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
)	O
{	O
return	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
type	*(struct(*(char),long,*((*(void),*(struct`),*(double),double,double)->(int)),*((*(void),*(struct`),*(double),*(double),*(double))->(int))))
->	O
name	*(char)
;	O
}	O
double	O
gsl_root_fdfsolver_root	(*(struct(*(struct(*`,long,*`,*`)),*(struct(*`,*`,*`,*`)),double,*(void))))->(double)
(	O
const	O
gsl_root_fdfsolver	struct(*(struct(*(char),long,*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*((double,*`)->(double)),*((double,*`,*`,*`)->(void)),*(void))),double,*(void))
*	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
)	O
{	O
return	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
root	*(double)
;	O
}	O
