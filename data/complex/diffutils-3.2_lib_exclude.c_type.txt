verify	O
(	O
(	O
(	O
EXCLUDE_ANCHORED	O
|	O
EXCLUDE_INCLUDE	O
|	O
EXCLUDE_WILDCARDS	O
)	O
&	O
(	O
FNM_PATHNAME	O
|	O
FNM_NOESCAPE	O
|	O
FNM_PERIOD	O
|	O
FNM_LEADING_DIR	O
|	O
FNM_CASEFOLD	O
|	O
FNM_EXTMATCH	O
)	O
)	O
==	O
0	int
)	O
;	O
struct	O
patopts	struct(*(char),int)
{	O
char	O
const	O
*	O
pattern	*(char)
;	O
int	O
options	int
;	O
}	O
;	O
struct	O
exclude_pattern	struct(*(struct(*(char),int)),long,long)
{	O
struct	O
patopts	struct(*(char),int)
*	O
exclude	*(struct(*(char),int))
;	O
size_t	long
exclude_alloc	long
;	O
size_t	long
exclude_count	long
;	O
}	O
;	O
enum	O
exclude_type	enum(int,int)
{	O
exclude_hash	int
,	O
exclude_pattern	struct(*(struct(*(char),int)),long,long)
}	O
;	O
struct	O
exclude_segment	struct(*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long)))),enum(int,int),int,union(*(struct),struct(*(struct(*(char),int)),long,long)))
{	O
struct	O
exclude_segment	struct(*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long)))),enum(int,int),int,union(*(struct),struct(*(struct(*(char),int)),long,long)))
*	O
next	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
;	O
enum	O
exclude_type	enum(int,int)
type	enum(int,int)
;	O
int	O
options	int
;	O
union	O
{	O
Hash_table	struct
*	O
table	*(struct)
;	O
struct	O
exclude_pattern	struct(*(struct(*(char),int)),long,long)
pat	struct(*(struct(*(char),int)),long,long)
;	O
}	O
v	union(*(struct),struct(*(struct(*(char),int)),long,long))
;	O
}	O
;	O
struct	O
exclude	*(struct(*(char),int))
{	O
struct	O
exclude_segment	struct(*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long)))),enum(int,int),int,union(*(struct),struct(*(struct(*(char),int)),long,long)))
*	O
head	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
,	O
*	O
tail	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
;	O
}	O
;	O
bool	bool
fnmatch_pattern_has_wildcards	(*(char),int)->(bool)
(	O
const	O
char	O
*	O
str	*(char)
,	O
int	O
options	int
)	O
{	O
const	O
char	O
*	O
cset	*(char)
=	O
"\\?*[]"	*(char)
;	O
if	O
(	O
options	int
&	O
FNM_NOESCAPE	O
)	O
cset	*(char)
++	O
;	O
while	O
(	O
*	O
str	*(char)
)	O
{	O
size_t	long
n	long
=	O
strcspn	(*(char),*(char))->(long)
(	O
str	*(char)
,	O
cset	*(char)
)	O
;	O
if	O
(	O
str	*(char)
[	O
n	long
]	O
==	O
0	int
)	O
break	O
;	O
else	O
if	O
(	O
str	*(char)
[	O
n	long
]	O
==	O
'\\'	O
)	O
{	O
str	*(char)
+=	O
n	long
+	O
1	int
;	O
if	O
(	O
*	O
str	*(char)
)	O
str	*(char)
++	O
;	O
}	O
else	O
return	O
true	int
;	O
}	O
return	O
false	int
;	O
}	O
static	O
void	O
unescape_pattern	(*(char))->(void)
(	O
char	O
*	O
str	*(char)
)	O
{	O
int	O
inset	int
=	O
0	int
;	O
char	O
*	O
q	*(char)
=	O
str	*(char)
;	O
do	O
{	O
if	O
(	O
inset	int
)	O
{	O
if	O
(	O
*	O
q	*(char)
==	O
']'	O
)	O
inset	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
*	O
q	*(char)
==	O
'['	O
)	O
inset	int
=	O
1	int
;	O
else	O
if	O
(	O
*	O
q	*(char)
==	O
'\\'	O
)	O
q	*(char)
++	O
;	O
}	O
while	O
(	O
(	O
*	O
str	*(char)
++	O
=	O
*	O
q	*(char)
++	O
)	O
)	O
;	O
}	O
struct	O
exclude	*(struct(*(char),int))
*	O
new_exclude	()->(*(struct))
(	O
void	O
)	O
{	O
return	O
xzalloc	(long)->(*(void))
(	O
sizeof	O
*	O
new_exclude	()->(*(struct))
(	O
)	O
)	O
;	O
}	O
static	O
size_t	long
string_hasher	(*(void),long)->(long)
(	O
void	O
const	O
*	O
data	*(void)
,	O
size_t	long
n_buckets	long
)	O
{	O
char	O
const	O
*	O
p	*(void)
=	O
data	*(void)
;	O
return	O
hash_string	(*(char),long)->(long)
(	O
p	*(void)
,	O
n_buckets	long
)	O
;	O
}	O
static	O
size_t	long
string_hasher_ci	(*(void),long)->(long)
(	O
void	O
const	O
*	O
data	*(void)
,	O
size_t	long
n_buckets	long
)	O
{	O
char	O
const	O
*	O
p	*(void)
=	O
data	*(void)
;	O
mbui_iterator_t	struct(bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
iter	*(struct(bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
;	O
size_t	long
value	long
=	O
0	int
;	O
for	O
(	O
mbui_init	O
(	O
iter	*(struct(bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
,	O
p	*(void)
)	O
;	O
mbui_avail	O
(	O
iter	*(struct(bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
)	O
;	O
mbui_advance	O
(	O
iter	*(struct(bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
)	O
)	O
{	O
mbchar_t	struct(*(char),long,bool,int,array(char))
m	struct(*(char),long,bool,int,array(char))
=	O
mbui_cur	O
(	O
iter	*(struct(bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
)	O
;	O
wchar_t	int
wc	int
;	O
if	O
(	O
m	struct(*(char),long,bool,int,array(char))
.	O
wc_valid	bool
)	O
wc	int
=	O
towlower	(int)->(int)
(	O
m	struct(*(char),long,bool,int,array(char))
.	O
wc	int
)	O
;	O
else	O
wc	int
=	O
*	O
m	struct(*(char),long,bool,int,array(char))
.	O
ptr	*(char)
;	O
value	long
=	O
(	O
value	long
*	O
31	int
+	O
wc	int
)	O
%	O
n_buckets	long
;	O
}	O
return	O
value	long
;	O
}	O
static	O
bool	bool
string_compare	(*(void),*(void))->(bool)
(	O
void	O
const	O
*	O
data1	*(void)
,	O
void	O
const	O
*	O
data2	*(void)
)	O
{	O
char	O
const	O
*	O
p1	*(char)
=	O
data1	*(void)
;	O
char	O
const	O
*	O
p2	*(char)
=	O
data2	*(void)
;	O
return	O
strcmp	(*(char),*(char))->(int)
(	O
p1	*(char)
,	O
p2	*(char)
)	O
==	O
0	int
;	O
}	O
static	O
bool	bool
string_compare_ci	(*(void),*(void))->(bool)
(	O
void	O
const	O
*	O
data1	*(void)
,	O
void	O
const	O
*	O
data2	*(void)
)	O
{	O
char	O
const	O
*	O
p1	*(char)
=	O
data1	*(void)
;	O
char	O
const	O
*	O
p2	*(char)
=	O
data2	*(void)
;	O
return	O
mbscasecmp	(*(char),*(char))->(int)
(	O
p1	*(char)
,	O
p2	*(char)
)	O
==	O
0	int
;	O
}	O
static	O
void	O
string_free	(*(void))->(void)
(	O
void	O
*	O
data	*(void)
)	O
{	O
free	(*(void))->(void)
(	O
data	*(void)
)	O
;	O
}	O
static	O
struct	O
exclude_segment	struct(*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long)))),enum(int,int),int,union(*(struct),struct(*(struct(*(char),int)),long,long)))
*	O
new_exclude_segment	(*(struct(*(struct(*`,enum(int,int),int,union`)),*(struct(*`,enum(int,int),int,union`)))),enum(int,int),int)->(*(struct(*(struct(*`,enum(int,int),int,union`)),enum(int,int),int,union(*(struct`),struct(*`,long,long)))))
(	O
struct	O
exclude	*(struct(*(char),int))
*	O
ex	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),*(struct(*(struct`),enum(int,int),int,union(*`,struct`)))))
,	O
enum	O
exclude_type	enum(int,int)
type	enum(int,int)
,	O
int	O
options	int
)	O
{	O
struct	O
exclude_segment	struct(*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long)))),enum(int,int),int,union(*(struct),struct(*(struct(*(char),int)),long,long)))
*	O
sp	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
=	O
xzalloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
exclude_segment	struct(*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long)))),enum(int,int),int,union(*(struct),struct(*(struct(*(char),int)),long,long)))
)	O
)	O
;	O
sp	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
->	O
type	enum(int,int)
=	O
type	enum(int,int)
;	O
sp	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
->	O
options	int
=	O
options	int
;	O
switch	O
(	O
type	enum(int,int)
)	O
{	O
case	O
exclude_pattern	struct(*(struct(*(char),int)),long,long)
:	O
break	O
;	O
case	O
exclude_hash	int
:	O
sp	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
->	O
v	union(*(struct),struct(*(struct(*(char),int)),long,long))
.	O
table	*(struct)
=	O
hash_initialize	(long,*(struct(float,float,float,float,bool)),*((*(void),long)->(long)),*((*(void),*(void))->(bool)),*((*(void))->(void)))->(*(struct))
(	O
0	int
,	O
NULL	O
,	O
(	O
options	int
&	O
FNM_CASEFOLD	O
)	O
?	O
string_hasher_ci	(*(void),long)->(long)
:	O
string_hasher	(*(void),long)->(long)
,	O
(	O
options	int
&	O
FNM_CASEFOLD	O
)	O
?	O
string_compare_ci	(*(void),*(void))->(bool)
:	O
string_compare	(*(void),*(void))->(bool)
,	O
string_free	(*(void))->(void)
)	O
;	O
break	O
;	O
}	O
if	O
(	O
ex	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),*(struct(*(struct`),enum(int,int),int,union(*`,struct`)))))
->	O
tail	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
)	O
ex	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),*(struct(*(struct`),enum(int,int),int,union(*`,struct`)))))
->	O
tail	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
->	O
next	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
=	O
sp	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
;	O
else	O
ex	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),*(struct(*(struct`),enum(int,int),int,union(*`,struct`)))))
->	O
head	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
=	O
sp	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
;	O
ex	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),*(struct(*(struct`),enum(int,int),int,union(*`,struct`)))))
->	O
tail	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
=	O
sp	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
;	O
return	O
sp	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
;	O
}	O
static	O
void	O
free_exclude_segment	(*(struct(*(struct(*`,enum(int,int),int,union`)),enum(int,int),int,union(*(struct`),struct(*`,long,long)))))->(void)
(	O
struct	O
exclude_segment	struct(*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long)))),enum(int,int),int,union(*(struct),struct(*(struct(*(char),int)),long,long)))
*	O
seg	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
)	O
{	O
switch	O
(	O
seg	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
->	O
type	enum(int,int)
)	O
{	O
case	O
exclude_pattern	struct(*(struct(*(char),int)),long,long)
:	O
free	(*(void))->(void)
(	O
seg	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
->	O
v	union(*(struct),struct(*(struct(*(char),int)),long,long))
.	O
pat	struct(*(struct(*(char),int)),long,long)
.	O
exclude	*(struct(*(char),int))
)	O
;	O
break	O
;	O
case	O
exclude_hash	int
:	O
hash_free	(*(struct))->(void)
(	O
seg	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
->	O
v	union(*(struct),struct(*(struct(*(char),int)),long,long))
.	O
table	*(struct)
)	O
;	O
break	O
;	O
}	O
free	(*(void))->(void)
(	O
seg	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
)	O
;	O
}	O
void	O
free_exclude	(*(struct))->(void)
(	O
struct	O
exclude	*(struct(*(char),int))
*	O
ex	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),*(struct(*(struct`),enum(int,int),int,union(*`,struct`)))))
)	O
{	O
struct	O
exclude_segment	struct(*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long)))),enum(int,int),int,union(*(struct),struct(*(struct(*(char),int)),long,long)))
*	O
seg	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
;	O
for	O
(	O
seg	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
=	O
ex	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),*(struct(*(struct`),enum(int,int),int,union(*`,struct`)))))
->	O
head	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
;	O
seg	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
;	O
)	O
{	O
struct	O
exclude_segment	struct(*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long)))),enum(int,int),int,union(*(struct),struct(*(struct(*(char),int)),long,long)))
*	O
next	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
=	O
seg	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
->	O
next	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
;	O
free_exclude_segment	(*(struct(*(struct(*`,enum(int,int),int,union`)),enum(int,int),int,union(*(struct`),struct(*`,long,long)))))->(void)
(	O
seg	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
)	O
;	O
seg	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
=	O
next	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
;	O
}	O
free	(*(void))->(void)
(	O
ex	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),*(struct(*(struct`),enum(int,int),int,union(*`,struct`)))))
)	O
;	O
}	O
static	O
int	O
fnmatch_no_wildcards	(*(char),*(char),int)->(int)
(	O
char	O
const	O
*	O
pattern	*(char)
,	O
char	O
const	O
*	O
f	*(char)
,	O
int	O
options	int
)	O
{	O
if	O
(	O
!	O
(	O
options	int
&	O
FNM_LEADING_DIR	O
)	O
)	O
return	O
(	O
(	O
options	int
&	O
FNM_CASEFOLD	O
)	O
?	O
mbscasecmp	(*(char),*(char))->(int)
(	O
pattern	*(char)
,	O
f	*(char)
)	O
:	O
strcmp	(*(char),*(char))->(int)
(	O
pattern	*(char)
,	O
f	*(char)
)	O
)	O
;	O
else	O
if	O
(	O
!	O
(	O
options	int
&	O
FNM_CASEFOLD	O
)	O
)	O
{	O
size_t	long
patlen	long
=	O
strlen	(*(char))->(long)
(	O
pattern	*(char)
)	O
;	O
int	O
r	int
=	O
strncmp	(*(char),*(char),long)->(int)
(	O
pattern	*(char)
,	O
f	*(char)
,	O
patlen	long
)	O
;	O
if	O
(	O
!	O
r	int
)	O
{	O
r	int
=	O
f	*(char)
[	O
patlen	long
]	O
;	O
if	O
(	O
r	int
==	O
'/'	O
)	O
r	int
=	O
0	int
;	O
}	O
return	O
r	int
;	O
}	O
else	O
{	O
char	O
*	O
fcopy	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
f	*(char)
)	O
;	O
char	O
*	O
p	*(void)
;	O
int	O
r	int
;	O
for	O
(	O
p	*(void)
=	O
fcopy	*(char)
;	O
;	O
*	O
p	*(void)
++	O
=	O
'/'	O
)	O
{	O
p	*(void)
=	O
strchr	(*(char),int)->(*(char))
(	O
p	*(void)
,	O
'/'	O
)	O
;	O
if	O
(	O
p	*(void)
)	O
*	O
p	*(void)
=	O
'\0'	O
;	O
r	int
=	O
mbscasecmp	(*(char),*(char))->(int)
(	O
pattern	*(char)
,	O
fcopy	*(char)
)	O
;	O
if	O
(	O
!	O
p	*(void)
||	O
r	int
<=	O
0	int
)	O
break	O
;	O
}	O
free	(*(void))->(void)
(	O
fcopy	*(char)
)	O
;	O
return	O
r	int
;	O
}	O
}	O
bool	bool
exclude_fnmatch	(*(char),*(char),int)->(bool)
(	O
char	O
const	O
*	O
pattern	*(char)
,	O
char	O
const	O
*	O
f	*(char)
,	O
int	O
options	int
)	O
{	O
int	O
(	O
*	O
matcher	*((*(char),*(char),int)->(int))
)	O
(	O
char	O
const	O
*	O
,	O
char	O
const	O
*	O
,	O
int	O
)	O
=	O
(	O
options	int
&	O
EXCLUDE_WILDCARDS	O
?	O
fnmatch	(*(char),*(char),int)->(int)
:	O
fnmatch_no_wildcards	(*(char),*(char),int)->(int)
)	O
;	O
bool	bool
matched	bool
=	O
(	O
(	O
*	O
matcher	*((*(char),*(char),int)->(int))
)	O
(	O
pattern	*(char)
,	O
f	*(char)
,	O
options	int
)	O
==	O
0	int
)	O
;	O
char	O
const	O
*	O
p	*(void)
;	O
if	O
(	O
!	O
(	O
options	int
&	O
EXCLUDE_ANCHORED	O
)	O
)	O
for	O
(	O
p	*(void)
=	O
f	*(char)
;	O
*	O
p	*(void)
&&	O
!	O
matched	bool
;	O
p	*(void)
++	O
)	O
if	O
(	O
*	O
p	*(void)
==	O
'/'	O
&&	O
p	*(void)
[	O
1	int
]	O
!=	O
'/'	O
)	O
matched	bool
=	O
(	O
(	O
*	O
matcher	*((*(char),*(char),int)->(int))
)	O
(	O
pattern	*(char)
,	O
p	*(void)
+	O
1	int
,	O
options	int
)	O
==	O
0	int
)	O
;	O
return	O
matched	bool
;	O
}	O
static	O
bool	bool
excluded_file_pattern_p	(*(struct(*(struct(*`,enum(int,int),int,union`)),enum(int,int),int,union(*(struct`),struct(*`,long,long)))),*(char))->(bool)
(	O
struct	O
exclude_segment	struct(*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long)))),enum(int,int),int,union(*(struct),struct(*(struct(*(char),int)),long,long)))
const	O
*	O
seg	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
,	O
char	O
const	O
*	O
f	*(char)
)	O
{	O
size_t	long
exclude_count	long
=	O
seg	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
->	O
v	union(*(struct),struct(*(struct(*(char),int)),long,long))
.	O
pat	struct(*(struct(*(char),int)),long,long)
.	O
exclude_count	long
;	O
struct	O
patopts	struct(*(char),int)
const	O
*	O
exclude	*(struct(*(char),int))
=	O
seg	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
->	O
v	union(*(struct),struct(*(struct(*(char),int)),long,long))
.	O
pat	struct(*(struct(*(char),int)),long,long)
.	O
exclude	*(struct(*(char),int))
;	O
size_t	long
i	long
;	O
bool	bool
excluded	bool
=	O
!	O
!	O
(	O
exclude	*(struct(*(char),int))
[	O
0	int
]	O
.	O
options	int
&	O
EXCLUDE_INCLUDE	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
exclude_count	long
;	O
i	long
++	O
)	O
{	O
char	O
const	O
*	O
pattern	*(char)
=	O
exclude	*(struct(*(char),int))
[	O
i	long
]	O
.	O
pattern	*(char)
;	O
int	O
options	int
=	O
exclude	*(struct(*(char),int))
[	O
i	long
]	O
.	O
options	int
;	O
if	O
(	O
exclude_fnmatch	(*(char),*(char),int)->(bool)
(	O
pattern	*(char)
,	O
f	*(char)
,	O
options	int
)	O
)	O
return	O
!	O
excluded	bool
;	O
}	O
return	O
excluded	bool
;	O
}	O
static	O
bool	bool
excluded_file_name_p	(*(struct(*(struct(*`,enum(int,int),int,union`)),enum(int,int),int,union(*(struct`),struct(*`,long,long)))),*(char),*(char))->(bool)
(	O
struct	O
exclude_segment	struct(*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long)))),enum(int,int),int,union(*(struct),struct(*(struct(*(char),int)),long,long)))
const	O
*	O
seg	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
,	O
char	O
const	O
*	O
f	*(char)
,	O
char	O
*	O
buffer	*(char)
)	O
{	O
int	O
options	int
=	O
seg	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
->	O
options	int
;	O
bool	bool
excluded	bool
=	O
!	O
!	O
(	O
options	int
&	O
EXCLUDE_INCLUDE	O
)	O
;	O
Hash_table	struct
*	O
table	*(struct)
=	O
seg	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
->	O
v	union(*(struct),struct(*(struct(*(char),int)),long,long))
.	O
table	*(struct)
;	O
do	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
buffer	*(char)
,	O
f	*(char)
)	O
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
hash_lookup	(*(struct),*(void))->(*(void))
(	O
table	*(struct)
,	O
buffer	*(char)
)	O
)	O
return	O
!	O
excluded	bool
;	O
if	O
(	O
options	int
&	O
FNM_LEADING_DIR	O
)	O
{	O
char	O
*	O
p	*(void)
=	O
strrchr	(*(char),int)->(*(char))
(	O
buffer	*(char)
,	O
'/'	O
)	O
;	O
if	O
(	O
p	*(void)
)	O
{	O
*	O
p	*(void)
=	O
0	int
;	O
continue	O
;	O
}	O
}	O
break	O
;	O
}	O
if	O
(	O
!	O
(	O
options	int
&	O
EXCLUDE_ANCHORED	O
)	O
)	O
{	O
f	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
f	*(char)
,	O
'/'	O
)	O
;	O
if	O
(	O
f	*(char)
)	O
f	*(char)
++	O
;	O
}	O
else	O
break	O
;	O
}	O
while	O
(	O
f	*(char)
)	O
;	O
return	O
excluded	bool
;	O
}	O
bool	bool
excluded_file_name	(*(struct),*(char))->(bool)
(	O
struct	O
exclude	*(struct(*(char),int))
const	O
*	O
ex	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),*(struct(*(struct`),enum(int,int),int,union(*`,struct`)))))
,	O
char	O
const	O
*	O
f	*(char)
)	O
{	O
struct	O
exclude_segment	struct(*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long)))),enum(int,int),int,union(*(struct),struct(*(struct(*(char),int)),long,long)))
*	O
seg	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
;	O
bool	bool
excluded	bool
;	O
char	O
*	O
filename	*(char)
=	O
NULL	O
;	O
if	O
(	O
!	O
ex	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),*(struct(*(struct`),enum(int,int),int,union(*`,struct`)))))
->	O
head	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
)	O
return	O
false	int
;	O
excluded	bool
=	O
!	O
!	O
(	O
ex	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),*(struct(*(struct`),enum(int,int),int,union(*`,struct`)))))
->	O
head	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
->	O
options	int
&	O
EXCLUDE_INCLUDE	O
)	O
;	O
for	O
(	O
seg	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
=	O
ex	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),*(struct(*(struct`),enum(int,int),int,union(*`,struct`)))))
->	O
head	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
;	O
seg	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
;	O
seg	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
=	O
seg	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
->	O
next	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
)	O
{	O
bool	bool
rc	bool
;	O
switch	O
(	O
seg	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
->	O
type	enum(int,int)
)	O
{	O
case	O
exclude_pattern	struct(*(struct(*(char),int)),long,long)
:	O
rc	bool
=	O
excluded_file_pattern_p	(*(struct(*(struct(*`,enum(int,int),int,union`)),enum(int,int),int,union(*(struct`),struct(*`,long,long)))),*(char))->(bool)
(	O
seg	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
,	O
f	*(char)
)	O
;	O
break	O
;	O
case	O
exclude_hash	int
:	O
if	O
(	O
!	O
filename	*(char)
)	O
filename	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
f	*(char)
)	O
+	O
1	int
)	O
;	O
rc	bool
=	O
excluded_file_name_p	(*(struct(*(struct(*`,enum(int,int),int,union`)),enum(int,int),int,union(*(struct`),struct(*`,long,long)))),*(char),*(char))->(bool)
(	O
seg	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
,	O
f	*(char)
,	O
filename	*(char)
)	O
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
if	O
(	O
rc	bool
!=	O
excluded	bool
)	O
{	O
excluded	bool
=	O
rc	bool
;	O
break	O
;	O
}	O
}	O
free	(*(void))->(void)
(	O
filename	*(char)
)	O
;	O
return	O
excluded	bool
;	O
}	O
void	O
add_exclude	(*(struct),*(char),int)->(void)
(	O
struct	O
exclude	*(struct(*(char),int))
*	O
ex	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),*(struct(*(struct`),enum(int,int),int,union(*`,struct`)))))
,	O
char	O
const	O
*	O
pattern	*(char)
,	O
int	O
options	int
)	O
{	O
struct	O
exclude_segment	struct(*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long)))),enum(int,int),int,union(*(struct),struct(*(struct(*(char),int)),long,long)))
*	O
seg	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
;	O
if	O
(	O
(	O
options	int
&	O
EXCLUDE_WILDCARDS	O
)	O
&&	O
fnmatch_pattern_has_wildcards	(*(char),int)->(bool)
(	O
pattern	*(char)
,	O
options	int
)	O
)	O
{	O
struct	O
exclude_pattern	struct(*(struct(*(char),int)),long,long)
*	O
pat	struct(*(struct(*(char),int)),long,long)
;	O
struct	O
patopts	struct(*(char),int)
*	O
patopts	struct(*(char),int)
;	O
if	O
(	O
ex	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),*(struct(*(struct`),enum(int,int),int,union(*`,struct`)))))
->	O
tail	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
&&	O
ex	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),*(struct(*(struct`),enum(int,int),int,union(*`,struct`)))))
->	O
tail	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
->	O
type	enum(int,int)
==	O
exclude_pattern	struct(*(struct(*(char),int)),long,long)
&&	O
(	O
(	O
ex	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),*(struct(*(struct`),enum(int,int),int,union(*`,struct`)))))
->	O
tail	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
->	O
options	int
&	O
EXCLUDE_INCLUDE	O
)	O
==	O
(	O
options	int
&	O
EXCLUDE_INCLUDE	O
)	O
)	O
)	O
seg	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
=	O
ex	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),*(struct(*(struct`),enum(int,int),int,union(*`,struct`)))))
->	O
tail	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
;	O
else	O
seg	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
=	O
new_exclude_segment	(*(struct(*(struct(*`,enum(int,int),int,union`)),*(struct(*`,enum(int,int),int,union`)))),enum(int,int),int)->(*(struct(*(struct(*`,enum(int,int),int,union`)),enum(int,int),int,union(*(struct`),struct(*`,long,long)))))
(	O
ex	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),*(struct(*(struct`),enum(int,int),int,union(*`,struct`)))))
,	O
exclude_pattern	struct(*(struct(*(char),int)),long,long)
,	O
options	int
)	O
;	O
pat	struct(*(struct(*(char),int)),long,long)
=	O
&	O
seg	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
->	O
v	union(*(struct),struct(*(struct(*(char),int)),long,long))
.	O
pat	struct(*(struct(*(char),int)),long,long)
;	O
if	O
(	O
pat	struct(*(struct(*(char),int)),long,long)
->	O
exclude_count	long
==	O
pat	struct(*(struct(*(char),int)),long,long)
->	O
exclude_alloc	long
)	O
pat	struct(*(struct(*(char),int)),long,long)
->	O
exclude	*(struct(*(char),int))
=	O
x2nrealloc	(*(void),*(long),long)->(*(void))
(	O
pat	struct(*(struct(*(char),int)),long,long)
->	O
exclude	*(struct(*(char),int))
,	O
&	O
pat	struct(*(struct(*(char),int)),long,long)
->	O
exclude_alloc	long
,	O
sizeof	O
*	O
pat	struct(*(struct(*(char),int)),long,long)
->	O
exclude	*(struct(*(char),int))
)	O
;	O
patopts	struct(*(char),int)
=	O
&	O
pat	struct(*(struct(*(char),int)),long,long)
->	O
exclude	*(struct(*(char),int))
[	O
pat	struct(*(struct(*(char),int)),long,long)
->	O
exclude_count	long
++	O
]	O
;	O
patopts	struct(*(char),int)
->	O
pattern	*(char)
=	O
pattern	*(char)
;	O
patopts	struct(*(char),int)
->	O
options	int
=	O
options	int
;	O
}	O
else	O
{	O
char	O
*	O
str	*(char)
,	O
*	O
p	*(void)
;	O
if	O
(	O
ex	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),*(struct(*(struct`),enum(int,int),int,union(*`,struct`)))))
->	O
tail	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
&&	O
ex	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),*(struct(*(struct`),enum(int,int),int,union(*`,struct`)))))
->	O
tail	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
->	O
type	enum(int,int)
==	O
exclude_hash	int
&&	O
(	O
(	O
ex	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),*(struct(*(struct`),enum(int,int),int,union(*`,struct`)))))
->	O
tail	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
->	O
options	int
&	O
EXCLUDE_HASH_FLAGS	O
)	O
==	O
(	O
options	int
&	O
EXCLUDE_HASH_FLAGS	O
)	O
)	O
)	O
seg	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
=	O
ex	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),*(struct(*(struct`),enum(int,int),int,union(*`,struct`)))))
->	O
tail	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
;	O
else	O
seg	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
=	O
new_exclude_segment	(*(struct(*(struct(*`,enum(int,int),int,union`)),*(struct(*`,enum(int,int),int,union`)))),enum(int,int),int)->(*(struct(*(struct(*`,enum(int,int),int,union`)),enum(int,int),int,union(*(struct`),struct(*`,long,long)))))
(	O
ex	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),*(struct(*(struct`),enum(int,int),int,union(*`,struct`)))))
,	O
exclude_hash	int
,	O
options	int
)	O
;	O
str	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
pattern	*(char)
)	O
;	O
if	O
(	O
options	int
&	O
EXCLUDE_WILDCARDS	O
)	O
unescape_pattern	(*(char))->(void)
(	O
str	*(char)
)	O
;	O
p	*(void)
=	O
hash_insert	(*(struct),*(void))->(*(void))
(	O
seg	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),enum(int,int),int,union(*(struct),struct(*(struct`),long,long))))
->	O
v	union(*(struct),struct(*(struct(*(char),int)),long,long))
.	O
table	*(struct)
,	O
str	*(char)
)	O
;	O
if	O
(	O
p	*(void)
!=	O
str	*(char)
)	O
free	(*(void))->(void)
(	O
str	*(char)
)	O
;	O
}	O
}	O
int	O
add_exclude_file	(*((*(struct),*(char),int)->(void)),*(struct),*(char),int,char)->(int)
(	O
void	O
(	O
*	O
add_func	*((*(struct(*(struct`),*(struct`))),*(char),int)->(void))
)	O
(	O
struct	O
exclude	*(struct(*(char),int))
*	O
,	O
char	O
const	O
*	O
,	O
int	O
)	O
,	O
struct	O
exclude	*(struct(*(char),int))
*	O
ex	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),*(struct(*(struct`),enum(int,int),int,union(*`,struct`)))))
,	O
char	O
const	O
*	O
file_name	*(char)
,	O
int	O
options	int
,	O
char	O
line_end	char
)	O
{	O
bool	bool
use_stdin	bool
=	O
file_name	*(char)
[	O
0	int
]	O
==	O
'-'	O
&&	O
!	O
file_name	*(char)
[	O
1	int
]	O
;	O
FILE	struct
*	O
in	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
char	O
*	O
buf	array(char)
=	O
NULL	O
;	O
char	O
*	O
p	*(void)
;	O
char	O
const	O
*	O
pattern	*(char)
;	O
char	O
const	O
*	O
lim	*(char)
;	O
size_t	long
buf_alloc	long
=	O
0	int
;	O
size_t	long
buf_count	long
=	O
0	int
;	O
int	O
c	char
;	O
int	O
e	int
=	O
0	int
;	O
if	O
(	O
use_stdin	bool
)	O
in	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
else	O
if	O
(	O
!	O
(	O
in	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
file_name	*(char)
,	O
"r"	*(char)
)	O
)	O
)	O
return	O
-	O
1	int
;	O
while	O
(	O
(	O
c	char
=	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
in	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
!=	O
EOF	O
)	O
{	O
if	O
(	O
buf_count	long
==	O
buf_alloc	long
)	O
buf	array(char)
=	O
x2realloc	(*(void),*(long))->(*(void))
(	O
buf	array(char)
,	O
&	O
buf_alloc	long
)	O
;	O
buf	array(char)
[	O
buf_count	long
++	O
]	O
=	O
c	char
;	O
}	O
if	O
(	O
ferror	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
in	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
e	int
=	O
errno	O
;	O
if	O
(	O
!	O
use_stdin	bool
&&	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
in	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
!=	O
0	int
)	O
e	int
=	O
errno	O
;	O
buf	array(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buf	array(char)
,	O
buf_count	long
+	O
1	int
)	O
;	O
buf	array(char)
[	O
buf_count	long
]	O
=	O
line_end	char
;	O
lim	*(char)
=	O
buf	array(char)
+	O
buf_count	long
+	O
!	O
(	O
buf_count	long
==	O
0	int
||	O
buf	array(char)
[	O
buf_count	long
-	O
1	int
]	O
==	O
line_end	char
)	O
;	O
pattern	*(char)
=	O
buf	array(char)
;	O
for	O
(	O
p	*(void)
=	O
buf	array(char)
;	O
p	*(void)
<	O
lim	*(char)
;	O
p	*(void)
++	O
)	O
if	O
(	O
*	O
p	*(void)
==	O
line_end	char
)	O
{	O
char	O
*	O
pattern_end	*(char)
=	O
p	*(void)
;	O
if	O
(	O
isspace	(int)->(int)
(	O
(	O
unsigned	O
char	O
)	O
line_end	char
)	O
)	O
{	O
for	O
(	O
;	O
;	O
pattern_end	*(char)
--	O
)	O
if	O
(	O
pattern_end	*(char)
==	O
pattern	*(char)
)	O
goto	O
next_pattern	O
;	O
else	O
if	O
(	O
!	O
isspace	(int)->(int)
(	O
(	O
unsigned	O
char	O
)	O
pattern_end	*(char)
[	O
-	O
1	int
]	O
)	O
)	O
break	O
;	O
}	O
*	O
pattern_end	*(char)
=	O
'\0'	O
;	O
(	O
*	O
add_func	*((*(struct(*(struct`),*(struct`))),*(char),int)->(void))
)	O
(	O
ex	*(struct(*(struct(*(struct`),enum(int,int),int,union(*`,struct`))),*(struct(*(struct`),enum(int,int),int,union(*`,struct`)))))
,	O
pattern	*(char)
,	O
options	int
)	O
;	O
next_pattern	O
:	O
pattern	*(char)
=	O
p	*(void)
+	O
1	int
;	O
}	O
errno	O
=	O
e	int
;	O
return	O
e	int
?	O
-	O
1	int
:	O
0	int
;	O
}	O
