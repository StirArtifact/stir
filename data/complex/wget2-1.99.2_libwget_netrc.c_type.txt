struct	O
wget_netrc_db_st	struct(*(struct))
{	O
wget_hashmap	struct
*	O
machines	*(struct)
;	O
}	O
;	O
__attribute__	O
(	O
(	O
no_sanitize	O
(	O
"integer"	*(char)
)	O
)	O
)	O
WGET_GCC_PURE	O
static	O
unsigned	O
int	O
hash_netrc	(*(struct(*(char),*(char),*(char),short,bool)))->(int)
(	O
const	O
wget_netrc	struct(*(char),*(char),*(char),short,bool)
*	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
)	O
{	O
unsigned	O
int	O
hash	*((*(void))->(int))
=	O
0	int
;	O
const	O
unsigned	O
char	O
*	O
p	*(char)
;	O
for	O
(	O
p	*(char)
=	O
(	O
unsigned	O
char	O
*	O
)	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
->	O
host	*(char)
;	O
*	O
p	*(char)
;	O
p	*(char)
++	O
)	O
hash	*((*(void))->(int))
=	O
hash	*((*(void))->(int))
*	O
101	int
+	O
*	O
p	*(char)
;	O
return	O
hash	*((*(void))->(int))
;	O
}	O
WGET_GCC_NONNULL_ALL	O
WGET_GCC_PURE	O
static	O
int	O
compare_netrc	(*(struct(*(char),*(char),*(char),short,bool)),*(struct(*(char),*(char),*(char),short,bool)))->(int)
(	O
const	O
wget_netrc	struct(*(char),*(char),*(char),short,bool)
*	O
h1	*(struct(*(char),*(char),*(char),short,bool))
,	O
const	O
wget_netrc	struct(*(char),*(char),*(char),short,bool)
*	O
h2	*(struct(*(char),*(char),*(char),short,bool))
)	O
{	O
return	O
wget_strcmp	(*(char),*(char))->(int)
(	O
h1	*(struct(*(char),*(char),*(char),short,bool))
->	O
host	*(char)
,	O
h2	*(struct(*(char),*(char),*(char),short,bool))
->	O
host	*(char)
)	O
;	O
}	O
wget_netrc	struct(*(char),*(char),*(char),short,bool)
*	O
wget_netrc_init	(*(struct(*(char),*(char),*(char),short,bool)))->(*(struct(*(char),*(char),*(char),short,bool)))
(	O
wget_netrc	struct(*(char),*(char),*(char),short,bool)
*	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
)	O
{	O
if	O
(	O
!	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
)	O
{	O
if	O
(	O
!	O
(	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
=	O
wget_calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
wget_netrc	struct(*(char),*(char),*(char),short,bool)
)	O
)	O
)	O
)	O
return	O
NULL	O
;	O
}	O
else	O
memset	(*(void),int,long)->(*(void))
(	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
,	O
0	int
,	O
sizeof	O
(	O
*	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
)	O
)	O
;	O
return	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
;	O
}	O
void	O
wget_netrc_deinit	(*(struct(*(char),*(char),*(char),short,bool)))->(void)
(	O
wget_netrc	struct(*(char),*(char),*(char),short,bool)
*	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
)	O
{	O
if	O
(	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
)	O
{	O
xfree	O
(	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
->	O
host	*(char)
)	O
;	O
xfree	O
(	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
->	O
login	*(char)
)	O
;	O
xfree	O
(	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
->	O
password	*(char)
)	O
;	O
}	O
}	O
void	O
wget_netrc_free	(*(struct(*(char),*(char),*(char),short,bool)))->(void)
(	O
wget_netrc	struct(*(char),*(char),*(char),short,bool)
*	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
)	O
{	O
if	O
(	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
)	O
{	O
wget_netrc_deinit	(*(struct(*(char),*(char),*(char),short,bool)))->(void)
(	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
)	O
;	O
xfree	O
(	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
)	O
;	O
}	O
}	O
wget_netrc	struct(*(char),*(char),*(char),short,bool)
*	O
wget_netrc_new	(*(char),*(char),*(char))->(*(struct(*(char),*(char),*(char),short,bool)))
(	O
const	O
char	O
*	O
machine	*(char)
,	O
const	O
char	O
*	O
login	*(char)
,	O
const	O
char	O
*	O
password	*(char)
)	O
{	O
wget_netrc	struct(*(char),*(char),*(char),short,bool)
*	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
=	O
wget_netrc_init	(*(struct(*(char),*(char),*(char),short,bool)))->(*(struct(*(char),*(char),*(char),short,bool)))
(	O
NULL	O
)	O
;	O
if	O
(	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
)	O
{	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
->	O
host	*(char)
=	O
wget_strdup	(*(char))->(*(char))
(	O
machine	*(char)
)	O
;	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
->	O
login	*(char)
=	O
wget_strdup	(*(char))->(*(char))
(	O
login	*(char)
)	O
;	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
->	O
password	*(char)
=	O
wget_strdup	(*(char))->(*(char))
(	O
password	*(char)
)	O
;	O
}	O
return	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
;	O
}	O
wget_netrc	struct(*(char),*(char),*(char),short,bool)
*	O
wget_netrc_get	(*(struct),*(char))->(*(struct(*(char),*(char),*(char),short,bool)))
(	O
const	O
wget_netrc_db	struct
*	O
netrc_db	*(struct)
,	O
const	O
char	O
*	O
host	*(char)
)	O
{	O
if	O
(	O
netrc_db	*(struct)
)	O
{	O
wget_netrc	struct(*(char),*(char),*(char),short,bool)
netrc	*(struct(*(char),*(char),*(char),short,bool))
,	O
*	O
netrcp	*(struct(*(char),*(char),*(char),short,bool))
;	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
.	O
host	*(char)
=	O
host	*(char)
;	O
if	O
(	O
wget_hashmap_get	(*(struct),*(void),*(*(void)))->(int)
(	O
netrc_db	*(struct)
->	O
machines	*(struct)
,	O
&	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
,	O
&	O
netrcp	*(struct(*(char),*(char),*(char),short,bool))
)	O
)	O
return	O
netrcp	*(struct(*(char),*(char),*(char),short,bool))
;	O
}	O
return	O
NULL	O
;	O
}	O
wget_netrc_db	struct
*	O
wget_netrc_db_init	(*(struct))->(*(struct))
(	O
wget_netrc_db	struct
*	O
netrc_db	*(struct)
)	O
{	O
wget_hashmap	struct
*	O
machines	*(struct)
=	O
wget_hashmap_create	(int,*((*(void))->(int)),*((*(void),*(void))->(int)))->(*(struct))
(	O
16	int
,	O
(	O
wget_hashmap_hash_fn	(*(void))->(int)
*	O
)	O
hash_netrc	(*(struct(*(char),*(char),*(char),short,bool)))->(int)
,	O
(	O
wget_hashmap_compare_fn	(*(void),*(void))->(int)
*	O
)	O
compare_netrc	(*(struct(*(char),*(char),*(char),short,bool)),*(struct(*(char),*(char),*(char),short,bool)))->(int)
)	O
;	O
if	O
(	O
!	O
machines	*(struct)
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
netrc_db	*(struct)
)	O
{	O
if	O
(	O
!	O
(	O
netrc_db	*(struct)
=	O
wget_calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
wget_netrc_db	struct
)	O
)	O
)	O
)	O
{	O
wget_hashmap_free	(*(*(struct)))->(void)
(	O
&	O
machines	*(struct)
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
else	O
memset	(*(void),int,long)->(*(void))
(	O
netrc_db	*(struct)
,	O
0	int
,	O
sizeof	O
(	O
*	O
netrc_db	*(struct)
)	O
)	O
;	O
wget_hashmap_set_key_destructor	(*(struct),*((*(void))->(void)))->(void)
(	O
machines	*(struct)
,	O
(	O
wget_hashmap_key_destructor	(*(void))->(void)
*	O
)	O
wget_netrc_free	(*(struct(*(char),*(char),*(char),short,bool)))->(void)
)	O
;	O
wget_hashmap_set_value_destructor	(*(struct),*((*(void))->(void)))->(void)
(	O
machines	*(struct)
,	O
(	O
wget_hashmap_value_destructor	(*(void))->(void)
*	O
)	O
wget_netrc_free	(*(struct(*(char),*(char),*(char),short,bool)))->(void)
)	O
;	O
netrc_db	*(struct)
->	O
machines	*(struct)
=	O
machines	*(struct)
;	O
return	O
netrc_db	*(struct)
;	O
}	O
void	O
wget_netrc_db_deinit	(*(struct))->(void)
(	O
wget_netrc_db	struct
*	O
netrc_db	*(struct)
)	O
{	O
if	O
(	O
netrc_db	*(struct)
)	O
{	O
wget_hashmap_free	(*(*(struct)))->(void)
(	O
&	O
netrc_db	*(struct)
->	O
machines	*(struct)
)	O
;	O
}	O
}	O
void	O
wget_netrc_db_free	(*(*(struct)))->(void)
(	O
wget_netrc_db	struct
*	O
*	O
netrc_db	*(struct)
)	O
{	O
if	O
(	O
netrc_db	*(struct)
)	O
{	O
wget_netrc_db_deinit	(*(struct))->(void)
(	O
*	O
netrc_db	*(struct)
)	O
;	O
xfree	O
(	O
*	O
netrc_db	*(struct)
)	O
;	O
}	O
}	O
void	O
wget_netrc_db_add	(*(struct),*(struct(*(char),*(char),*(char),short,bool)))->(void)
(	O
wget_netrc_db	struct
*	O
netrc_db	*(struct)
,	O
wget_netrc	struct(*(char),*(char),*(char),short,bool)
*	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
)	O
{	O
if	O
(	O
!	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
)	O
return	O
;	O
if	O
(	O
!	O
netrc_db	*(struct)
)	O
{	O
wget_netrc_free	(*(struct(*(char),*(char),*(char),short,bool)))->(void)
(	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
)	O
;	O
return	O
;	O
}	O
debug_printf	O
(	O
"add .netrc %s (login=%s, password=*)\n"	*(char)
,	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
->	O
host	*(char)
,	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
->	O
login	*(char)
)	O
;	O
wget_hashmap_put	(*(struct),*(void),*(void))->(int)
(	O
netrc_db	*(struct)
->	O
machines	*(struct)
,	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
,	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
)	O
;	O
}	O
int	O
wget_netrc_db_load	(*(struct),*(char))->(int)
(	O
wget_netrc_db	struct
*	O
netrc_db	*(struct)
,	O
const	O
char	O
*	O
fname	*(char)
)	O
{	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
if	O
(	O
!	O
netrc_db	*(struct)
||	O
!	O
fname	*(char)
||	O
!	O
*	O
fname	*(char)
)	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
!	O
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
fname	*(char)
,	O
"r"	*(char)
)	O
)	O
)	O
return	O
WGET_E_OPEN	int
;	O
wget_netrc	struct(*(char),*(char),*(char),short,bool)
netrc	*(struct(*(char),*(char),*(char),short,bool))
;	O
char	O
*	O
buf	*(char)
=	O
NULL	O
,	O
*	O
linep	*(char)
,	O
*	O
p	*(char)
,	O
*	O
key	int
=	O
NULL	O
;	O
size_t	long
bufsize	long
=	O
0	int
;	O
ssize_t	long
buflen	long
;	O
int	O
in_macdef	int
=	O
0	int
,	O
in_machine	int
=	O
0	int
,	O
nentries	int
=	O
0	int
;	O
while	O
(	O
(	O
buflen	long
=	O
wget_getline	(*(*(char)),*(long),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
&	O
buf	*(char)
,	O
&	O
bufsize	long
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
>=	O
0	int
)	O
{	O
linep	*(char)
=	O
buf	*(char)
;	O
while	O
(	O
isspace	(int)->(int)
(	O
*	O
linep	*(char)
)	O
)	O
linep	*(char)
++	O
;	O
if	O
(	O
*	O
linep	*(char)
==	O
'#'	O
)	O
continue	O
;	O
while	O
(	O
buflen	long
>	O
0	int
&&	O
(	O
buf	*(char)
[	O
buflen	long
]	O
==	O
'\n'	O
||	O
buf	*(char)
[	O
buflen	long
]	O
==	O
'\r'	O
)	O
)	O
buf	*(char)
[	O
--	O
buflen	long
]	O
=	O
0	int
;	O
if	O
(	O
!	O
*	O
linep	*(char)
)	O
{	O
in_macdef	int
=	O
0	int
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
in_macdef	int
)	O
continue	O
;	O
do	O
{	O
xfree	O
(	O
key	int
)	O
;	O
while	O
(	O
isspace	(int)->(int)
(	O
*	O
linep	*(char)
)	O
)	O
linep	*(char)
++	O
;	O
for	O
(	O
p	*(char)
=	O
linep	*(char)
;	O
*	O
linep	*(char)
&&	O
!	O
isspace	(int)->(int)
(	O
*	O
linep	*(char)
)	O
;	O
)	O
linep	*(char)
++	O
;	O
if	O
(	O
!	O
(	O
key	int
=	O
wget_strmemdup	(*(void),long)->(*(char))
(	O
p	*(char)
,	O
linep	*(char)
-	O
p	*(char)
)	O
)	O
)	O
{	O
xfree	O
(	O
buf	*(char)
)	O
;	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
return	O
WGET_E_MEMORY	int
;	O
}	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
key	int
,	O
"machine"	*(char)
)	O
||	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
key	int
,	O
"default"	*(char)
)	O
)	O
{	O
if	O
(	O
in_machine	int
)	O
wget_netrc_db_add	(*(struct),*(struct(*(char),*(char),*(char),short,bool)))->(void)
(	O
netrc_db	*(struct)
,	O
wget_memdup	(*(void),long)->(*(void))
(	O
&	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
,	O
sizeof	O
(	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
)	O
)	O
)	O
;	O
wget_netrc_init	(*(struct(*(char),*(char),*(char),short,bool)))->(*(struct(*(char),*(char),*(char),short,bool)))
(	O
&	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
)	O
;	O
in_machine	int
=	O
1	int
;	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
key	int
,	O
"default"	*(char)
)	O
)	O
{	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
.	O
host	*(char)
=	O
wget_strdup	(*(char))->(*(char))
(	O
"default"	*(char)
)	O
;	O
continue	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
in_machine	int
)	O
continue	O
;	O
while	O
(	O
isspace	(int)->(int)
(	O
*	O
linep	*(char)
)	O
)	O
linep	*(char)
++	O
;	O
for	O
(	O
p	*(char)
=	O
linep	*(char)
;	O
*	O
linep	*(char)
&&	O
!	O
isspace	(int)->(int)
(	O
*	O
linep	*(char)
)	O
;	O
)	O
linep	*(char)
++	O
;	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
key	int
,	O
"machine"	*(char)
)	O
)	O
{	O
if	O
(	O
!	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
.	O
host	*(char)
)	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
.	O
host	*(char)
=	O
wget_strmemdup	(*(void),long)->(*(char))
(	O
p	*(char)
,	O
linep	*(char)
-	O
p	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
key	int
,	O
"login"	*(char)
)	O
)	O
{	O
if	O
(	O
!	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
.	O
login	*(char)
)	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
.	O
login	*(char)
=	O
wget_strmemdup	(*(void),long)->(*(char))
(	O
p	*(char)
,	O
linep	*(char)
-	O
p	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
key	int
,	O
"password"	*(char)
)	O
)	O
{	O
if	O
(	O
!	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
.	O
password	*(char)
)	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
.	O
password	*(char)
=	O
wget_strmemdup	(*(void),long)->(*(char))
(	O
p	*(char)
,	O
linep	*(char)
-	O
p	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
key	int
,	O
"port"	*(char)
)	O
)	O
{	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
.	O
port	short
=	O
(	O
uint16_t	short
)	O
atoi	(*(char))->(int)
(	O
p	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
key	int
,	O
"force"	*(char)
)	O
)	O
{	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
.	O
force	bool
=	O
!	O
wget_strncasecmp_ascii	(*(char),*(char),long)->(int)
(	O
"yes"	*(char)
,	O
p	*(char)
,	O
3	int
)	O
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
key	int
,	O
"macdef"	*(char)
)	O
)	O
{	O
in_macdef	int
=	O
1	int
;	O
}	O
}	O
while	O
(	O
*	O
linep	*(char)
)	O
;	O
xfree	O
(	O
key	int
)	O
;	O
}	O
if	O
(	O
in_machine	int
)	O
wget_netrc_db_add	(*(struct),*(struct(*(char),*(char),*(char),short,bool)))->(void)
(	O
netrc_db	*(struct)
,	O
wget_memdup	(*(void),long)->(*(void))
(	O
&	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
,	O
sizeof	O
(	O
netrc	*(struct(*(char),*(char),*(char),short,bool))
)	O
)	O
)	O
;	O
xfree	O
(	O
buf	*(char)
)	O
;	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
nentries	int
=	O
wget_hashmap_size	(*(struct))->(int)
(	O
netrc_db	*(struct)
->	O
machines	*(struct)
)	O
;	O
debug_printf	O
(	O
"loaded %d .netrc %s\n"	*(char)
,	O
nentries	int
,	O
nentries	int
!=	O
1	int
?	O
"entries"	*(char)
:	O
"entry"	*(char)
)	O
;	O
return	O
nentries	int
;	O
}	O
