int	O
gdbm_store	(*(struct),struct(*(char),int),struct(*(char),int),int)->(int)
(	O
GDBM_FILE	*(struct)
dbf	*(struct)
,	O
datum	struct(*(char),int)
key	struct(*(char),int)
,	O
datum	struct(*(char),int)
content	struct(*(char),int)
,	O
int	O
flags	int
)	O
{	O
int	O
new_hash_val	int
;	O
int	O
elem_loc	int
;	O
off_t	long
file_adr	long
;	O
off_t	long
file_pos	long
;	O
off_t	long
free_adr	long
;	O
int	O
free_size	int
;	O
int	O
new_size	int
;	O
int	O
rc	int
;	O
GDBM_DEBUG_DATUM	O
(	O
GDBM_DEBUG_STORE	O
,	O
key	struct(*(char),int)
,	O
"%s: storing key:"	*(char)
,	O
dbf	*(struct)
->	O
name	*(char)
)	O
;	O
GDBM_ASSERT_CONSISTENCY	O
(	O
dbf	*(struct)
,	O
-	O
1	int
)	O
;	O
if	O
(	O
dbf	*(struct)
->	O
read_write	int
==	O
GDBM_READER	int
)	O
{	O
GDBM_SET_ERRNO2	O
(	O
dbf	*(struct)
,	O
GDBM_READER_CANT_STORE	int
,	O
FALSE	int
,	O
GDBM_DEBUG_STORE	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
(	O
key	struct(*(char),int)
.	O
dptr	*(char)
==	O
NULL	O
)	O
||	O
(	O
content	struct(*(char),int)
.	O
dptr	*(char)
==	O
NULL	O
)	O
)	O
{	O
GDBM_SET_ERRNO2	O
(	O
dbf	*(struct)
,	O
GDBM_ILLEGAL_DATA	int
,	O
FALSE	int
,	O
GDBM_DEBUG_STORE	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
gdbm_set_errno	(*(struct),int,int)->(void)
(	O
dbf	*(struct)
,	O
GDBM_NO_ERROR	int
,	O
FALSE	int
)	O
;	O
elem_loc	int
=	O
_gdbm_findkey	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),struct(*(char),int),*(*(char)),*(int))->(int)
(	O
dbf	*(struct)
,	O
key	struct(*(char),int)
,	O
NULL	O
,	O
&	O
new_hash_val	int
)	O
;	O
file_adr	long
=	O
0	int
;	O
new_size	int
=	O
key	struct(*(char),int)
.	O
dsize	int
+	O
content	struct(*(char),int)
.	O
dsize	int
;	O
if	O
(	O
elem_loc	int
!=	O
-	O
1	int
)	O
{	O
if	O
(	O
flags	int
==	O
GDBM_REPLACE	int
)	O
{	O
free_adr	long
=	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
h_table	array(struct(int,array(char),long,int,int))
[	O
elem_loc	int
]	O
.	O
data_pointer	long
;	O
free_size	int
=	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
h_table	array(struct(int,array(char),long,int,int))
[	O
elem_loc	int
]	O
.	O
key_size	int
+	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
h_table	array(struct(int,array(char),long,int,int))
[	O
elem_loc	int
]	O
.	O
data_size	int
;	O
if	O
(	O
free_size	int
!=	O
new_size	int
)	O
{	O
if	O
(	O
_gdbm_free	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),long,int)->(int)
(	O
dbf	*(struct)
,	O
free_adr	long
,	O
free_size	int
)	O
)	O
return	O
-	O
1	int
;	O
}	O
else	O
{	O
file_adr	long
=	O
free_adr	long
;	O
}	O
}	O
else	O
{	O
GDBM_SET_ERRNO2	O
(	O
dbf	*(struct)
,	O
GDBM_CANNOT_REPLACE	int
,	O
FALSE	int
,	O
GDBM_DEBUG_STORE	O
)	O
;	O
return	O
1	int
;	O
}	O
}	O
else	O
if	O
(	O
gdbm_errno	O
==	O
GDBM_ITEM_NOT_FOUND	int
)	O
gdbm_set_errno	(*(struct),int,int)->(void)
(	O
dbf	*(struct)
,	O
GDBM_NO_ERROR	int
,	O
FALSE	int
)	O
;	O
else	O
return	O
-	O
1	int
;	O
if	O
(	O
file_adr	long
==	O
0	int
)	O
{	O
file_adr	long
=	O
_gdbm_alloc	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),int)->(long)
(	O
dbf	*(struct)
,	O
new_size	int
)	O
;	O
if	O
(	O
file_adr	long
==	O
0	int
)	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
elem_loc	int
==	O
-	O
1	int
)	O
{	O
int	O
start_loc	int
;	O
if	O
(	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
count	int
==	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
bucket_elems	int
)	O
{	O
if	O
(	O
_gdbm_split_bucket	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),int)->(int)
(	O
dbf	*(struct)
,	O
new_hash_val	int
)	O
)	O
return	O
-	O
1	int
;	O
}	O
elem_loc	int
=	O
start_loc	int
=	O
new_hash_val	int
%	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
bucket_elems	int
;	O
while	O
(	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
h_table	array(struct(int,array(char),long,int,int))
[	O
elem_loc	int
]	O
.	O
hash_value	int
!=	O
-	O
1	int
)	O
{	O
elem_loc	int
=	O
(	O
elem_loc	int
+	O
1	int
)	O
%	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
bucket_elems	int
;	O
if	O
(	O
elem_loc	int
==	O
start_loc	int
)	O
{	O
GDBM_SET_ERRNO	O
(	O
dbf	*(struct)
,	O
GDBM_BAD_HASH_TABLE	int
,	O
TRUE	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
count	int
++	O
;	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
h_table	array(struct(int,array(char),long,int,int))
[	O
elem_loc	int
]	O
.	O
hash_value	int
=	O
new_hash_val	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
h_table	array(struct(int,array(char),long,int,int))
[	O
elem_loc	int
]	O
.	O
key_start	array(char)
,	O
key	struct(*(char),int)
.	O
dptr	*(char)
,	O
(	O
SMALL	int
<	O
key	struct(*(char),int)
.	O
dsize	int
?	O
SMALL	int
:	O
key	struct(*(char),int)
.	O
dsize	int
)	O
)	O
;	O
}	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
h_table	array(struct(int,array(char),long,int,int))
[	O
elem_loc	int
]	O
.	O
data_pointer	long
=	O
file_adr	long
;	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
h_table	array(struct(int,array(char),long,int,int))
[	O
elem_loc	int
]	O
.	O
key_size	int
=	O
key	struct(*(char),int)
.	O
dsize	int
;	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
h_table	array(struct(int,array(char),long,int,int))
[	O
elem_loc	int
]	O
.	O
data_size	int
=	O
content	struct(*(char),int)
.	O
dsize	int
;	O
file_pos	long
=	O
gdbm_file_seek	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),long,int)->(long)
(	O
dbf	*(struct)
,	O
file_adr	long
,	O
SEEK_SET	int
)	O
;	O
if	O
(	O
file_pos	long
!=	O
file_adr	long
)	O
{	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_STORE	O
|	O
GDBM_DEBUG_ERR	O
,	O
"%s: lseek: %s"	*(char)
,	O
dbf	*(struct)
->	O
name	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
GDBM_SET_ERRNO2	O
(	O
dbf	*(struct)
,	O
GDBM_FILE_SEEK_ERROR	int
,	O
TRUE	int
,	O
GDBM_DEBUG_STORE	O
)	O
;	O
_gdbm_fatal	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),*(char))->(void)
(	O
dbf	*(struct)
,	O
_	O
(	O
"lseek error"	*(char)
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
rc	int
=	O
_gdbm_full_write	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),*(void),long)->(int)
(	O
dbf	*(struct)
,	O
key	struct(*(char),int)
.	O
dptr	*(char)
,	O
key	struct(*(char),int)
.	O
dsize	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_STORE	O
|	O
GDBM_DEBUG_ERR	O
,	O
"%s: error writing key: %s"	*(char)
,	O
dbf	*(struct)
->	O
name	*(char)
,	O
gdbm_db_strerror	(*(struct))->(*(char))
(	O
dbf	*(struct)
)	O
)	O
;	O
_gdbm_fatal	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),*(char))->(void)
(	O
dbf	*(struct)
,	O
gdbm_db_strerror	(*(struct))->(*(char))
(	O
dbf	*(struct)
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
rc	int
=	O
_gdbm_full_write	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),*(void),long)->(int)
(	O
dbf	*(struct)
,	O
content	struct(*(char),int)
.	O
dptr	*(char)
,	O
content	struct(*(char),int)
.	O
dsize	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_STORE	O
|	O
GDBM_DEBUG_ERR	O
,	O
"%s: error writing content: %s"	*(char)
,	O
dbf	*(struct)
->	O
name	*(char)
,	O
gdbm_db_strerror	(*(struct))->(*(char))
(	O
dbf	*(struct)
)	O
)	O
;	O
_gdbm_fatal	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),*(char))->(void)
(	O
dbf	*(struct)
,	O
gdbm_db_strerror	(*(struct))->(*(char))
(	O
dbf	*(struct)
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
dbf	*(struct)
->	O
cache_entry	*(struct(*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),long,char,struct(int,int,int,*(char),long,int)))
->	O
ca_changed	char
=	O
TRUE	int
;	O
dbf	*(struct)
->	O
bucket_changed	int
=	O
TRUE	int
;	O
return	O
_gdbm_end_update	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)))->(int)
(	O
dbf	*(struct)
)	O
;	O
}	O
