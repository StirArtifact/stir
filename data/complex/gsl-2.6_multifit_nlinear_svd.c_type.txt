typedef	O
struct	O
{	O
size_t	long
n	int
;	O
size_t	long
p	int
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
U	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
V	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
S	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
double	O
mu	double
;	O
}	O
svd_state_t	struct(long,long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)
;	O
static	O
int	O
svd_init	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
vtrust_state	*(void)
,	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
int	O
svd_presolve	(double,*(void),*(void))->(int)
(	O
const	O
double	O
mu	double
,	O
const	O
void	O
*	O
vtrust_state	*(void)
,	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
int	O
svd_solve	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void),*(void))->(int)
(	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f	*(double)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
const	O
void	O
*	O
vtrust_state	*(void)
,	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
int	O
svd_rcond	(*(double),*(void))->(int)
(	O
double	O
*	O
rcond	*(double)
,	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
void	O
*	O
svd_alloc	(long,long)->(*(void))
(	O
const	O
size_t	long
n	int
,	O
const	O
size_t	long
p	int
)	O
{	O
svd_state_t	struct(long,long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)
*	O
state	*(int)
;	O
(	O
void	O
)	O
n	int
;	O
state	*(int)
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
svd_state_t	struct(long,long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)
)	O
)	O
;	O
if	O
(	O
state	*(int)
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate svd state"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
U	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_alloc	(long,long)->(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
,	O
p	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
U	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for U"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
V	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_alloc	(long,long)->(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
,	O
p	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
V	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for V"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
S	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
S	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for S"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for workp"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
mu	double
=	O
0.0	int
;	O
state	*(int)
->	O
n	int
=	O
n	int
;	O
state	*(int)
->	O
p	int
=	O
p	int
;	O
return	O
state	*(int)
;	O
}	O
static	O
void	O
svd_free	(*(void))->(void)
(	O
void	O
*	O
vstate	*(void)
)	O
{	O
svd_state_t	struct(long,long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)
*	O
state	*(int)
=	O
(	O
svd_state_t	struct(long,long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)
*	O
)	O
vstate	*(void)
;	O
if	O
(	O
state	*(int)
->	O
U	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
U	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
V	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
V	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
S	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
S	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
}	O
static	O
int	O
svd_init	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
vtrust_state	*(void)
,	O
void	O
*	O
vstate	*(void)
)	O
{	O
int	O
status	int
;	O
const	O
gsl_multifit_nlinear_trust_state	struct(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`)),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double))
*	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
=	O
(	O
const	O
gsl_multifit_nlinear_trust_state	struct(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`)),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double))
*	O
)	O
vtrust_state	*(void)
;	O
svd_state_t	struct(long,long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)
*	O
state	*(int)
=	O
(	O
svd_state_t	struct(long,long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)
*	O
)	O
vstate	*(void)
;	O
size_t	long
i	long
;	O
gsl_matrix_set_zero	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
U	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
state	*(int)
->	O
p	int
;	O
++	O
i	long
)	O
{	O
gsl_vector_const_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
Ji	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_column	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
ui	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_column	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
state	*(int)
->	O
U	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
double	O
di	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
gsl_blas_daxpy	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
1.0	int
/	O
di	double
,	O
&	O
Ji	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
ui	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
status	int
=	O
gsl_linalg_SV_decomp	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
->	O
U	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
V	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
S	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
svd_presolve	(double,*(void),*(void))->(int)
(	O
const	O
double	O
mu	double
,	O
const	O
void	O
*	O
vtrust_state	*(void)
,	O
void	O
*	O
vstate	*(void)
)	O
{	O
svd_state_t	struct(long,long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)
*	O
state	*(int)
=	O
(	O
svd_state_t	struct(long,long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)
*	O
)	O
vstate	*(void)
;	O
state	*(int)
->	O
mu	double
=	O
mu	double
;	O
(	O
void	O
)	O
vtrust_state	*(void)
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
svd_solve	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void),*(void))->(int)
(	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f	*(double)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
const	O
void	O
*	O
vtrust_state	*(void)
,	O
void	O
*	O
vstate	*(void)
)	O
{	O
int	O
status	int
=	O
GSL_SUCCESS	int
;	O
const	O
gsl_multifit_nlinear_trust_state	struct(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`)),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double))
*	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
=	O
(	O
const	O
gsl_multifit_nlinear_trust_state	struct(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`)),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double))
*	O
)	O
vtrust_state	*(void)
;	O
svd_state_t	struct(long,long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)
*	O
state	*(int)
=	O
(	O
svd_state_t	struct(long,long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)
*	O
)	O
vstate	*(void)
;	O
const	O
size_t	long
p	int
=	O
state	*(int)
->	O
p	int
;	O
const	O
double	O
tol	double
=	O
GSL_DBL_EPSILON	int
;	O
const	O
double	O
s0	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
state	*(int)
->	O
S	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
)	O
;	O
size_t	long
j	long
;	O
gsl_blas_dgemv	(enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasTrans	int
,	O
-	O
1.0	int
,	O
state	*(int)
->	O
U	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
f	*(double)
,	O
0.0	int
,	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
mu	double
==	O
0.0	int
)	O
{	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
p	int
;	O
++	O
j	long
)	O
{	O
double	O
sj	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
state	*(int)
->	O
S	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
j	long
)	O
;	O
double	O
*	O
ptr	*(double)
=	O
gsl_vector_ptr	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(*(double))
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
j	long
)	O
;	O
double	O
alpha	long double
;	O
if	O
(	O
sj	double
<=	O
tol	double
*	O
s0	double
)	O
alpha	long double
=	O
0.0	int
;	O
else	O
alpha	long double
=	O
1.0	int
/	O
sj	double
;	O
*	O
ptr	*(double)
*=	O
alpha	long double
;	O
}	O
}	O
else	O
{	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
p	int
;	O
++	O
j	long
)	O
{	O
double	O
sj	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
state	*(int)
->	O
S	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
j	long
)	O
;	O
double	O
*	O
ptr	*(double)
=	O
gsl_vector_ptr	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(*(double))
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
j	long
)	O
;	O
*	O
ptr	*(double)
*=	O
sj	double
/	O
(	O
sj	double
*	O
sj	double
+	O
state	*(int)
->	O
mu	double
)	O
;	O
}	O
}	O
gsl_blas_dgemv	(enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasNoTrans	int
,	O
1.0	int
,	O
state	*(int)
->	O
V	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0.0	int
,	O
x	double
)	O
;	O
gsl_vector_div	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
x	double
,	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
svd_rcond	(*(double),*(void))->(int)
(	O
double	O
*	O
rcond	*(double)
,	O
void	O
*	O
vstate	*(void)
)	O
{	O
int	O
status	int
=	O
GSL_SUCCESS	int
;	O
svd_state_t	struct(long,long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)
*	O
state	*(int)
=	O
(	O
svd_state_t	struct(long,long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)
*	O
)	O
vstate	*(void)
;	O
double	O
smax	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
state	*(int)
->	O
S	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
)	O
;	O
double	O
smin	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
state	*(int)
->	O
S	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
p	int
-	O
1	int
)	O
;	O
*	O
rcond	*(double)
=	O
smin	double
/	O
smax	double
;	O
return	O
status	int
;	O
}	O
static	O
const	O
gsl_multifit_nlinear_solver	struct(*(char),*((long,long)->(*(void))),*((*(void),*(void))->(int)),*((double,*(void),*(void))->(int)),*((*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(void),*(void))->(int)),*((*(double),*(void))->(int)),*((*(void))->(void)))
svd_type	struct(*(char),*((long,long)->(*(void))),*((*(void),*(void))->(int)),*((double,*(void),*(void))->(int)),*((*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(void),*(void))->(int)),*((*(double),*(void))->(int)),*((*(void))->(void)))
=	O
{	O
"svd"	*(char)
,	O
svd_alloc	(long,long)->(*(void))
,	O
svd_init	(*(void),*(void))->(int)
,	O
svd_presolve	(double,*(void),*(void))->(int)
,	O
svd_solve	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void),*(void))->(int)
,	O
svd_rcond	(*(double),*(void))->(int)
,	O
svd_free	(*(void))->(void)
}	O
;	O
const	O
gsl_multifit_nlinear_solver	struct(*(char),*((long,long)->(*(void))),*((*(void),*(void))->(int)),*((double,*(void),*(void))->(int)),*((*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(void),*(void))->(int)),*((*(double),*(void))->(int)),*((*(void))->(void)))
*	O
gsl_multifit_nlinear_solver_svd	*(struct(*(char),*((long,long)->(*(void))),*((*(void),*(void))->(int)),*((double,*(void),*(void))->(int)),*((*(struct`),*(struct`),*(void),*(void))->(int)),*((*(double),*(void))->(int)),*((*(void))->(void))))
=	O
&	O
svd_type	struct(*(char),*((long,long)->(*(void))),*((*(void),*(void))->(int)),*((double,*(void),*(void))->(int)),*((*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(void),*(void))->(int)),*((*(double),*(void))->(int)),*((*(void))->(void)))
;	O
