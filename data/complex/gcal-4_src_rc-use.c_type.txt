__BEGIN_DECLARATIONS	O
static	O
void	O
try_to_include_file	(int,int)->(void)
__P_	O
(	O
(	O
int	O
ed	int
,	O
int	O
wd	int
)	O
)	O
;	O
static	O
void	O
display_table	(int,int,int,int,int,int)->(void)
__P_	O
(	O
(	O
const	O
int	O
tmp_ad	int
,	O
const	O
int	O
tmp_am	int
,	O
const	O
int	O
tmp_ay	int
,	O
int	O
day	int
,	O
int	O
ed	int
,	O
int	O
wd	int
)	O
)	O
;	O
static	O
int	O
fn_asc_sort	(*(*(char)),*(*(char)))->(int)
__P_	O
(	O
(	O
const	O
char	O
*	O
*	O
a	*(*(char))
,	O
const	O
char	O
*	O
*	O
b	*(*(char))
)	O
)	O
;	O
static	O
int	O
fn_des_sort	(*(*(char)),*(*(char)))->(int)
__P_	O
(	O
(	O
const	O
char	O
*	O
*	O
a	*(*(char))
,	O
const	O
char	O
*	O
*	O
b	*(*(char))
)	O
)	O
;	O
__END_DECLARATIONS	O
Dvar_struct	struct(struct(char,char),struct(char,char))
rc_dvar	array(struct(struct(char,char),struct(char,char)))
[	O
RC_DVAR_MAX	int
]	O
;	O
Tvar_struct	struct(struct(*(char)),struct(*(char)))
rc_tvar	array(struct(struct(*(char)),struct(*(char))))
[	O
RC_TVAR_MAX	O
]	O
;	O
Coor_struct	struct(int,int,int,int,int,int,int,int,int)
lcoor1	struct(int,int,int,int,int,int,int,int,int)
;	O
Coor_struct	struct(int,int,int,int,int,int,int,int,int)
*	O
coor1	*(struct(int,int,int,int,int,int,int,int,int))
=	O
&	O
lcoor1	struct(int,int,int,int,int,int,int,int,int)
;	O
Coor_struct	struct(int,int,int,int,int,int,int,int,int)
lcoor2	struct(int,int,int,int,int,int,int,int,int)
;	O
Coor_struct	struct(int,int,int,int,int,int,int,int,int)
*	O
coor2	*(struct(int,int,int,int,int,int,int,int,int))
=	O
&	O
lcoor2	struct(int,int,int,int,int,int,int,int,int)
;	O
Line_struct	struct(int,int,*(char),*(char),*(char),*(char))
*	O
lineptrs	*(struct(int,int,*(char),*(char),*(char),*(char)))
=	O
(	O
Line_struct	struct(int,int,*(char),*(char),*(char),*(char))
*	O
)	O
NULL	O
;	O
Line_struct	struct(int,int,*(char),*(char),*(char),*(char))
*	O
lptrs	*(struct(int,int,*(char),*(char),*(char),*(char)))
=	O
(	O
Line_struct	struct(int,int,*(char),*(char),*(char),*(char))
*	O
)	O
NULL	O
;	O
Line_struct	struct(int,int,*(char),*(char),*(char),*(char))
*	O
lptrs2	*(struct(int,int,*(char),*(char),*(char),*(char)))
=	O
(	O
Line_struct	struct(int,int,*(char),*(char),*(char),*(char))
*	O
)	O
NULL	O
;	O
Line_struct	struct(int,int,*(char),*(char),*(char),*(char))
*	O
lptrs3	*(struct(int,int,*(char),*(char),*(char),*(char)))
=	O
(	O
Line_struct	struct(int,int,*(char),*(char),*(char),*(char))
*	O
)	O
NULL	O
;	O
FILE	struct
*	O
rc_tvar_tfp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
(	O
FILE	struct
*	O
)	O
NULL	O
;	O
FILE	struct
*	O
rc_here_fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
(	O
FILE	struct
*	O
)	O
NULL	O
;	O
double	O
time_offset	double
=	O
0.0	int
;	O
double	O
atm_pressure	double
=	O
DEFAULT_PRESSURE	int
;	O
double	O
atm_temperature	double
=	O
DEFAULT_TEMPERATURE	int
;	O
double	O
adjust_value	double
=	O
DEGS_PER_24_HOURS	int
;	O
Uint	int
rc_elems_max	int
=	O
RC_ELEMS_MAX	int
;	O
int	O
rc_period	int
=	O
0	int
;	O
int	O
rc_elems	int
=	O
0	int
;	O
int	O
rc_zero_pos	int
=	O
0	int
;	O
int	O
rc_have_today_in_list	int
=	O
0	int
;	O
int	O
rc_bio_axis_len	int
=	O
BIO_AXIS_DEF	int
;	O
int	O
rc_moonimage_lines	int
=	O
MOONIMAGE_DEF	int
;	O
int	O
len_fil_wt	int
=	O
0	int
;	O
int	O
len_the_text	int
=	O
0	int
;	O
int	O
loop_end	int
=	O
SPECIAL_VALUE	O
;	O
int	O
loop_step	int
=	O
DEFAULT_CYCLE_STEP	int
;	O
int	O
gmt_min	int
=	O
0	int
;	O
int	O
gmt_hour	int
=	O
0	int
;	O
int	O
buf_gd	int
=	O
0	int
;	O
int	O
buf_gm	int
=	O
0	int
;	O
int	O
buf_gy	int
=	O
0	int
;	O
int	O
gmt_loc_diff	int
=	O
0	int
;	O
int	O
incr_year	int
=	O
0	int
;	O
int	O
decr_year	int
=	O
0	int
;	O
int	O
d	int
=	O
0	int
;	O
int	O
m	int
=	O
0	int
;	O
int	O
y	int
=	O
0	int
;	O
int	O
d_buf	int
=	O
0	int
;	O
int	O
m_buf	int
=	O
0	int
;	O
int	O
hn	int
=	O
0	int
;	O
int	O
hwd	int
=	O
0	int
;	O
char	O
*	O
rc_tvar_tfn	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
char	O
*	O
rc_here_fn	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
char	O
*	O
the_text	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
char	O
*	O
s5	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
char	O
*	O
s6	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
char	O
*	O
s7	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
char	O
*	O
line_buffer	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
char	O
*	O
*	O
rc_elems_table	*(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
NULL	O
;	O
char	O
*	O
rc_adate	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
char	O
*	O
rc_filename	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
char	O
*	O
rc_filter_day	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
char	O
*	O
rc_filter_period	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
char	O
*	O
rc_filter_text	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
char	O
*	O
rc_grp_sep	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
char	O
*	O
rc_heading_text	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
char	O
*	O
rc_bio_emo_lit	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
char	O
*	O
rc_bio_int_lit	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
char	O
*	O
rc_bio_phy_lit	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
char	O
hc	char
=	O
'\0'	O
;	O
Bool	int
rc_special_flag	int
=	O
FALSE	O
;	O
Bool	int
rc_both_dates_flag	int
=	O
FALSE	O
;	O
Bool	int
rc_use_flag	int
=	O
FALSE	O
;	O
Bool	int
rc_all_dates_flag	int
=	O
FALSE	O
;	O
Bool	int
rc_sort_des_flag	int
=	O
FALSE	O
;	O
Bool	int
rc_enable_fn_flag	int
=	O
FALSE	O
;	O
Bool	int
rc_alternative_format_flag	int
=	O
FALSE	O
;	O
Bool	int
rc_execute_command	int
=	O
FALSE	O
;	O
Bool	int
rc_enable_hda_flag	int
=	O
FALSE	O
;	O
Bool	int
rc_enable_hdl_flag	int
=	O
FALSE	O
;	O
Bool	int
rc_week_number_flag	int
=	O
FALSE	O
;	O
Bool	int
rc_period_list	int
=	O
FALSE	O
;	O
Bool	int
rc_omit_date_flag	int
=	O
FALSE	O
;	O
Bool	int
rc_suppr_date_part_flag	int
=	O
FALSE	O
;	O
Bool	int
rc_suppr_list_sep_flag	int
=	O
FALSE	O
;	O
Bool	int
rc_suppr_text_part_flag	int
=	O
FALSE	O
;	O
Bool	int
rc_title_flag	int
=	O
TRUE	O
;	O
Bool	int
rc_count_flag	int
=	O
FALSE	O
;	O
Bool	int
rc_zero_dates_flag	int
=	O
FALSE	O
;	O
Bool	int
rc_period_flag	int
=	O
FALSE	O
;	O
Bool	int
rc_tomorrow_flag	int
=	O
FALSE	O
;	O
Bool	int
rc_week_flag	int
=	O
FALSE	O
;	O
Bool	int
rc_month_flag	int
=	O
FALSE	O
;	O
Bool	int
rc_year_flag	int
=	O
FALSE	O
;	O
Bool	int
rc_week_year_flag	int
=	O
FALSE	O
;	O
Bool	int
rc_forwards_flag	int
=	O
FALSE	O
;	O
Bool	int
rc_fwdf_buffer	int
=	O
FALSE	O
;	O
Bool	int
rc_backwards_flag	int
=	O
FALSE	O
;	O
Bool	int
rc_bwdf_buffer	int
=	O
FALSE	O
;	O
Bool	int
rc_feb_29_to_feb_28	int
=	O
FALSE	O
;	O
Bool	int
rc_feb_29_to_mar_01	int
=	O
FALSE	O
;	O
Bool	int
rc_precise	int
=	O
FALSE	O
;	O
Bool	int
rc_export_ldvar_flag	int
=	O
FALSE	O
;	O
Bool	int
rc_export_ltvar_flag	int
=	O
FALSE	O
;	O
Bool	int
rc_ignore_case_flag	int
=	O
FALSE	O
;	O
Bool	int
rc_limit	int
=	O
FALSE	O
;	O
Bool	int
rc_revert_match_flag	int
=	O
FALSE	O
;	O
Bool	int
is_date_given	int
=	O
FALSE	O
;	O
Bool	int
date_enables_year	int
=	O
FALSE	O
;	O
Bool	int
shell_escape_done	int
=	O
FALSE	O
;	O
Bool	int
is_1month_mode	int
=	O
FALSE	O
;	O
Bool	int
is_2month_mode	int
=	O
FALSE	O
;	O
Bool	int
is_2dvar	int
=	O
FALSE	O
;	O
Bool	int
is_2easter	int
=	O
FALSE	O
;	O
Bool	int
adate_set	int
=	O
FALSE	O
;	O
Bool	int
remove_hls_in_regex	int
=	O
FALSE	O
;	O
static	O
File_struct	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))
*	O
*	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
=	O
(	O
File_struct	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))
*	O
*	O
)	O
NULL	O
;	O
static	O
Uint	int
rc_files_max	int
=	O
RC_FILES_MAX	int
;	O
static	O
int	O
rc_files	int
=	O
0	int
;	O
static	O
int	O
line_length	*(int)
=	O
0	int
;	O
static	O
Bool	int
is_include	*(int)
=	O
FALSE	O
;	O
static	O
Bool	int
is_dvar	*(int)
=	O
FALSE	O
;	O
static	O
Bool	int
is_tvar	*(int)
=	O
FALSE	O
;	O
static	O
Bool	int
bad_sys_include	*(int)
=	O
FALSE	O
;	O
void	O
rc_use	()->(void)
(	O
)	O
{	O
register	O
int	O
wd	int
=	O
weekday_of_date	(int,int,int)->(int)
(	O
act_day	int
,	O
act_month	int
,	O
act_year	int
)	O
;	O
register	O
int	O
ed	int
;	O
register	O
int	O
i	int
;	O
register	O
int	O
j	int
;	O
register	O
int	O
tmp_month	int
=	O
month	int
;	O
register	O
int	O
tmp_fiscal_month	int
=	O
fiscal_month	int
;	O
register	O
int	O
tmp_start_day	int
=	O
start_day	int
;	O
register	O
int	O
tmp_ad	int
=	O
act_day	int
;	O
register	O
int	O
tmp_am	int
=	O
act_month	int
;	O
register	O
int	O
tmp_ay	int
=	O
act_year	int
;	O
register	O
int	O
tindex	int
=	O
0	int
;	O
auto	O
char	O
*	O
ptr_char	*(char)
;	O
static	O
Bool	int
is_table_range_checked	int
=	O
FALSE	O
;	O
static	O
Bool	int
tables_initialized	int
=	O
FALSE	O
;	O
len_fil_wt	int
=	O
rc_elems	int
=	O
rc_files	int
=	O
0	int
;	O
len_the_text	int
=	O
(	O
int	O
)	O
maxlen_max	int
;	O
if	O
(	O
!	O
is_table_range_checked	int
)	O
{	O
assert	O
(	O
rc_elems_max	int
>	O
0	int
)	O
;	O
assert	O
(	O
rc_elems_max	int
<=	O
testval	int
)	O
;	O
assert	O
(	O
rc_files_max	int
>	O
0	int
)	O
;	O
assert	O
(	O
rc_files_max	int
<=	O
testval	int
)	O
;	O
assert	O
(	O
len_the_text	int
>	O
0	int
)	O
;	O
assert	O
(	O
len_the_text	int
<=	O
testval	int
)	O
;	O
is_table_range_checked	int
=	O
TRUE	O
;	O
}	O
if	O
(	O
!	O
tables_initialized	int
)	O
{	O
rc_bio_emo_lit	*(char)
=	O
_	O
(	O
"Emo"	*(char)
)	O
;	O
rc_bio_int_lit	*(char)
=	O
_	O
(	O
"Int"	*(char)
)	O
;	O
rc_bio_phy_lit	*(char)
=	O
_	O
(	O
"Phy"	*(char)
)	O
;	O
lptrs	*(struct(int,int,*(char),*(char),*(char),*(char)))
=	O
(	O
Line_struct	struct(int,int,*(char),*(char),*(char),*(char))
*	O
)	O
my_malloc	(int,int,*(char),long,*(char),int)->(*(void))
(	O
sizeof	O
(	O
Line_struct	struct(int,int,*(char),*(char),*(char),*(char))
)	O
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"lptrs"	*(char)
,	O
0	int
)	O
;	O
lptrs2	*(struct(int,int,*(char),*(char),*(char),*(char)))
=	O
(	O
Line_struct	struct(int,int,*(char),*(char),*(char),*(char))
*	O
)	O
my_malloc	(int,int,*(char),long,*(char),int)->(*(void))
(	O
sizeof	O
(	O
Line_struct	struct(int,int,*(char),*(char),*(char),*(char))
)	O
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"lptrs2"	*(char)
,	O
0	int
)	O
;	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
=	O
(	O
File_struct	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))
*	O
*	O
)	O
my_malloc	(int,int,*(char),long,*(char),int)->(*(void))
(	O
RC_FILES_MAX	int
*	O
sizeof	O
(	O
File_struct	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))
*	O
)	O
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"rc_files_table[RC_FILES_MAX]"	*(char)
,	O
RC_FILES_MAX	int
)	O
;	O
rc_elems_table	*(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
my_malloc	(int,int,*(char),long,*(char),int)->(*(void))
(	O
RC_ELEMS_MAX	int
*	O
sizeof	O
(	O
char	O
*	O
)	O
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"rc_elems_table[RC_ELEMS_MAX]"	*(char)
,	O
RC_ELEMS_MAX	int
)	O
;	O
the_text	*(char)
=	O
(	O
char	O
*	O
)	O
my_malloc	(int,int,*(char),long,*(char),int)->(*(void))
(	O
len_the_text	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
1L	int
,	O
"the_text"	*(char)
,	O
0	int
)	O
;	O
if	O
(	O
rc_filter_text	*(char)
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
if	O
(	O
rc_ignore_case_flag	int
)	O
{	O
ptr_char	*(char)
=	O
rc_filter_text	*(char)
;	O
for	O
(	O
;	O
*	O
ptr_char	*(char)
;	O
ptr_char	*(char)
++	O
)	O
*	O
ptr_char	*(char)
=	O
(	O
char	O
)	O
tolower	(int)->(int)
(	O
*	O
ptr_char	*(char)
)	O
;	O
}	O
remove_hls_in_regex	int
=	O
highlight_flag	int
;	O
}	O
tables_initialized	int
=	O
TRUE	O
;	O
}	O
ed	int
=	O
day	int
=	O
day_of_year	(int,int,int)->(int)
(	O
act_day	int
,	O
act_month	int
,	O
act_year	int
)	O
;	O
if	O
(	O
is_date_given	int
)	O
{	O
ed	int
=	O
DAY_LAST	int
+	O
is_leap_year	int
+	O
1	int
;	O
if	O
(	O
!	O
month	int
)	O
day	int
=	O
DAY_MIN	int
;	O
else	O
{	O
day	int
=	O
day_of_year	(int,int,int)->(int)
(	O
DAY_MIN	int
,	O
month	int
,	O
year	int
)	O
;	O
if	O
(	O
month	int
<	O
MONTH_MAX	int
)	O
ed	int
=	O
day_of_year	(int,int,int)->(int)
(	O
DAY_MIN	int
,	O
month	int
+	O
1	int
,	O
year	int
)	O
;	O
}	O
rc_clean_flags	()->(void)
(	O
)	O
;	O
if	O
(	O
date_enables_year	int
)	O
rc_year_flag	int
=	O
TRUE	O
;	O
}	O
else	O
{	O
auto	O
int	O
dd	int
;	O
auto	O
int	O
mm	int
;	O
auto	O
int	O
yy	int
=	O
act_year	int
;	O
auto	O
int	O
greg_missing_days	int
=	O
(	O
greg	*(struct(int,int,int,int))
->	O
last_day	int
-	O
greg	*(struct(int,int,int,int))
->	O
first_day	int
+	O
1	int
)	O
;	O
auto	O
Bool	int
greg_correction	int
=	O
FALSE	O
;	O
auto	O
Bool	int
swap_flag	int
=	O
FALSE	O
;	O
if	O
(	O
rc_tomorrow_flag	int
)	O
{	O
rc_period_list	int
=	O
FALSE	O
;	O
ed	int
+=	O
2	int
;	O
if	O
(	O
(	O
act_year	int
==	O
greg	*(struct(int,int,int,int))
->	O
year	int
)	O
&&	O
(	O
act_month	int
==	O
greg	*(struct(int,int,int,int))
->	O
month	int
)	O
&&	O
(	O
act_day	int
==	O
greg	*(struct(int,int,int,int))
->	O
first_day	int
-	O
1	int
)	O
)	O
ed	int
+=	O
greg_missing_days	int
;	O
}	O
else	O
if	O
(	O
rc_week_flag	int
)	O
{	O
rc_period_list	int
=	O
FALSE	O
;	O
if	O
(	O
!	O
rc_forwards_flag	int
&&	O
!	O
rc_backwards_flag	int
)	O
day	int
+=	O
(	O
-	O
DAY_MAX	int
+	O
SDAY	O
(	O
DAY_MAX	int
-	O
wd	int
+	O
1	int
,	O
start_day	int
)	O
)	O
;	O
else	O
if	O
(	O
rc_forwards_flag	int
)	O
day	int
+=	O
!	O
rc_have_today_in_list	int
;	O
else	O
day	int
+=	O
rc_have_today_in_list	int
;	O
if	O
(	O
rc_backwards_flag	int
||	O
(	O
!	O
rc_forwards_flag	int
&&	O
!	O
rc_backwards_flag	int
&&	O
(	O
start_day	int
>	O
wd	int
)	O
)	O
)	O
{	O
swap_flag	int
=	O
TRUE	O
;	O
ed	int
-=	O
DAY_MAX	int
;	O
}	O
ed	int
+=	O
SDAY	O
(	O
DAY_MAX	int
-	O
wd	int
+	O
1	int
,	O
start_day	int
)	O
;	O
if	O
(	O
act_year	int
==	O
greg	*(struct(int,int,int,int))
->	O
year	int
)	O
greg_correction	int
=	O
TRUE	O
;	O
}	O
else	O
if	O
(	O
rc_month_flag	int
)	O
{	O
rc_period_list	int
=	O
FALSE	O
;	O
if	O
(	O
!	O
rc_forwards_flag	int
&&	O
!	O
rc_backwards_flag	int
)	O
day	int
=	O
day_of_year	(int,int,int)->(int)
(	O
DAY_MIN	int
,	O
act_month	int
,	O
act_year	int
)	O
;	O
else	O
if	O
(	O
rc_forwards_flag	int
)	O
day	int
+=	O
!	O
rc_have_today_in_list	int
;	O
else	O
day	int
+=	O
rc_have_today_in_list	int
;	O
if	O
(	O
rc_backwards_flag	int
)	O
ed	int
=	O
day_of_year	(int,int,int)->(int)
(	O
DAY_MIN	int
,	O
act_month	int
,	O
act_year	int
)	O
;	O
else	O
{	O
if	O
(	O
act_month	int
<	O
MONTH_MAX	int
)	O
ed	int
=	O
day_of_year	(int,int,int)->(int)
(	O
DAY_MIN	int
,	O
act_month	int
+	O
1	int
,	O
act_year	int
)	O
;	O
else	O
ed	int
=	O
DAY_LAST	int
+	O
is_leap_year	int
+	O
1	int
;	O
}	O
}	O
else	O
if	O
(	O
rc_year_flag	int
)	O
{	O
rc_period_list	int
=	O
FALSE	O
;	O
if	O
(	O
!	O
rc_forwards_flag	int
&&	O
!	O
rc_backwards_flag	int
)	O
day	int
=	O
DAY_MIN	int
;	O
else	O
if	O
(	O
rc_forwards_flag	int
)	O
day	int
+=	O
!	O
rc_have_today_in_list	int
;	O
else	O
day	int
+=	O
rc_have_today_in_list	int
;	O
if	O
(	O
rc_backwards_flag	int
)	O
ed	int
=	O
DAY_MIN	int
;	O
else	O
ed	int
=	O
DAY_LAST	int
+	O
is_leap_year	int
+	O
1	int
;	O
}	O
else	O
if	O
(	O
rc_period_flag	int
)	O
{	O
if	O
(	O
rc_week_year_flag	int
)	O
{	O
if	O
(	O
iso_week_number	int
)	O
wd	int
=	O
start_day	int
=	O
DAY_MIN	int
;	O
j	int
=	O
day	int
=	O
weekno2doy	(int,int,int,int)->(int)
(	O
rc_period	int
,	O
act_year	int
,	O
iso_week_number	int
,	O
start_day	int
)	O
;	O
if	O
(	O
day	int
!=	O
-	O
WEEK_MAX	int
)	O
{	O
if	O
(	O
rc_period_list	int
)	O
{	O
if	O
(	O
day	int
>	O
ed	int
)	O
{	O
if	O
(	O
day	int
<=	O
DAY_LAST	int
+	O
is_leap_year	int
)	O
{	O
rc_forwards_flag	int
=	O
TRUE	O
;	O
day	int
=	O
ed	int
+	O
1	int
-	O
rc_have_today_in_list	int
;	O
ed	int
=	O
j	int
+	O
DAY_MAX	int
;	O
if	O
(	O
act_year	int
==	O
greg	*(struct(int,int,int,int))
->	O
year	int
)	O
{	O
(	O
void	O
)	O
doy2date	(int,int,*(int),*(int))->(int)
(	O
j	int
,	O
is_leap_year	int
,	O
&	O
dd	int
,	O
&	O
mm	int
)	O
;	O
for	O
(	O
i	int
=	O
j	int
;	O
i	int
<	O
ed	int
;	O
i	int
++	O
)	O
if	O
(	O
!	O
next_date	(*(int),*(int),*(int))->(int)
(	O
&	O
dd	int
,	O
&	O
mm	int
,	O
&	O
yy	int
)	O
)	O
{	O
ed	int
+=	O
greg_missing_days	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
ed	int
>	O
DAY_LAST	int
+	O
is_leap_year	int
+	O
1	int
)	O
ed	int
=	O
DAY_LAST	int
+	O
is_leap_year	int
+	O
1	int
;	O
}	O
else	O
day	int
=	O
ed	int
;	O
}	O
else	O
{	O
if	O
(	O
ed	int
>	O
DAY_MIN	int
)	O
{	O
rc_backwards_flag	int
=	O
TRUE	O
;	O
day	int
=	O
ed	int
+	O
rc_have_today_in_list	int
;	O
ed	int
=	O
j	int
;	O
if	O
(	O
ed	int
<	O
DAY_MIN	int
)	O
ed	int
=	O
DAY_MIN	int
;	O
}	O
else	O
day	int
=	O
ed	int
;	O
}	O
}	O
else	O
{	O
rc_week_flag	int
=	O
TRUE	O
;	O
ed	int
=	O
day	int
+	O
DAY_MAX	int
;	O
if	O
(	O
act_year	int
==	O
greg	*(struct(int,int,int,int))
->	O
year	int
)	O
{	O
(	O
void	O
)	O
doy2date	(int,int,*(int),*(int))->(int)
(	O
day	int
,	O
is_leap_year	int
,	O
&	O
dd	int
,	O
&	O
mm	int
)	O
;	O
for	O
(	O
i	int
=	O
day	int
;	O
i	int
<	O
ed	int
;	O
i	int
++	O
)	O
if	O
(	O
!	O
next_date	(*(int),*(int),*(int))->(int)
(	O
&	O
dd	int
,	O
&	O
mm	int
,	O
&	O
yy	int
)	O
)	O
{	O
ed	int
+=	O
greg_missing_days	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
day	int
<	O
DAY_MIN	int
)	O
{	O
act_year	int
--	O
;	O
j	int
+=	O
(	O
DAY_LAST	int
+	O
(	O
days_of_february	(int)->(int)
(	O
act_year	int
)	O
==	O
29	int
)	O
)	O
;	O
}	O
else	O
j	int
=	O
day	int
;	O
(	O
void	O
)	O
doy2date	(int,int,*(int),*(int))->(int)
(	O
j	int
,	O
is_leap_year	int
,	O
&	O
act_day	int
,	O
&	O
act_month	int
)	O
;	O
month	int
=	O
act_month	int
;	O
fiscal_month	int
=	O
MONTH_MIN	int
;	O
adate_set	int
=	O
TRUE	O
;	O
}	O
}	O
else	O
day	int
=	O
ed	int
;	O
}	O
else	O
if	O
(	O
rc_forwards_flag	int
&&	O
(	O
day	int
<	O
DAY_LAST	int
+	O
is_leap_year	int
)	O
)	O
{	O
if	O
(	O
rc_period_list	int
)	O
{	O
day	int
+=	O
!	O
rc_have_today_in_list	int
;	O
if	O
(	O
rc_fwdf_buffer	int
&&	O
(	O
act_year	int
==	O
greg	*(struct(int,int,int,int))
->	O
year	int
)	O
&&	O
(	O
ed	int
<	O
day_of_year	(int,int,int)->(int)
(	O
greg	*(struct(int,int,int,int))
->	O
first_day	int
,	O
greg	*(struct(int,int,int,int))
->	O
month	int
,	O
greg	*(struct(int,int,int,int))
->	O
year	int
)	O
)	O
&&	O
(	O
ed	int
+	O
rc_period	int
>=	O
day_of_year	(int,int,int)->(int)
(	O
greg	*(struct(int,int,int,int))
->	O
first_day	int
,	O
greg	*(struct(int,int,int,int))
->	O
month	int
,	O
greg	*(struct(int,int,int,int))
->	O
year	int
)	O
)	O
)	O
ed	int
+=	O
greg_missing_days	int
;	O
ed	int
+=	O
(	O
rc_period	int
+	O
1	int
)	O
;	O
if	O
(	O
ed	int
>	O
DAY_LAST	int
+	O
is_leap_year	int
+	O
1	int
)	O
ed	int
=	O
DAY_LAST	int
+	O
is_leap_year	int
+	O
1	int
;	O
}	O
else	O
{	O
rc_forwards_flag	int
=	O
FALSE	O
;	O
if	O
(	O
rc_fwdf_buffer	int
&&	O
(	O
act_year	int
==	O
greg	*(struct(int,int,int,int))
->	O
year	int
)	O
&&	O
(	O
day	int
<	O
day_of_year	(int,int,int)->(int)
(	O
greg	*(struct(int,int,int,int))
->	O
first_day	int
,	O
greg	*(struct(int,int,int,int))
->	O
month	int
,	O
greg	*(struct(int,int,int,int))
->	O
year	int
)	O
)	O
&&	O
(	O
day	int
+	O
rc_period	int
>=	O
day_of_year	(int,int,int)->(int)
(	O
greg	*(struct(int,int,int,int))
->	O
first_day	int
,	O
greg	*(struct(int,int,int,int))
->	O
month	int
,	O
greg	*(struct(int,int,int,int))
->	O
year	int
)	O
)	O
)	O
day	int
+=	O
greg_missing_days	int
;	O
day	int
+=	O
rc_period	int
;	O
ed	int
=	O
day	int
;	O
if	O
(	O
day	int
<	O
DAY_LAST	int
+	O
is_leap_year	int
+	O
1	int
)	O
{	O
rc_period_flag	int
=	O
FALSE	O
;	O
(	O
void	O
)	O
doy2date	(int,int,*(int),*(int))->(int)
(	O
day	int
,	O
is_leap_year	int
,	O
&	O
act_day	int
,	O
&	O
act_month	int
)	O
;	O
month	int
=	O
act_month	int
;	O
ed	int
++	O
;	O
}	O
}	O
}	O
else	O
if	O
(	O
rc_backwards_flag	int
&&	O
(	O
day	int
>	O
DAY_MIN	int
)	O
)	O
{	O
if	O
(	O
rc_period_list	int
)	O
{	O
day	int
+=	O
rc_have_today_in_list	int
;	O
if	O
(	O
rc_bwdf_buffer	int
&&	O
(	O
act_year	int
==	O
greg	*(struct(int,int,int,int))
->	O
year	int
)	O
&&	O
(	O
ed	int
>	O
day_of_year	(int,int,int)->(int)
(	O
greg	*(struct(int,int,int,int))
->	O
last_day	int
,	O
greg	*(struct(int,int,int,int))
->	O
month	int
,	O
greg	*(struct(int,int,int,int))
->	O
year	int
)	O
)	O
&&	O
(	O
ed	int
-	O
rc_period	int
<=	O
day_of_year	(int,int,int)->(int)
(	O
greg	*(struct(int,int,int,int))
->	O
last_day	int
,	O
greg	*(struct(int,int,int,int))
->	O
month	int
,	O
greg	*(struct(int,int,int,int))
->	O
year	int
)	O
)	O
)	O
ed	int
-=	O
greg_missing_days	int
;	O
ed	int
-=	O
rc_period	int
;	O
if	O
(	O
ed	int
<	O
DAY_MIN	int
)	O
ed	int
=	O
DAY_MIN	int
;	O
}	O
else	O
{	O
rc_backwards_flag	int
=	O
FALSE	O
;	O
if	O
(	O
rc_bwdf_buffer	int
&&	O
(	O
act_year	int
==	O
greg	*(struct(int,int,int,int))
->	O
year	int
)	O
&&	O
(	O
day	int
>	O
day_of_year	(int,int,int)->(int)
(	O
greg	*(struct(int,int,int,int))
->	O
last_day	int
,	O
greg	*(struct(int,int,int,int))
->	O
month	int
,	O
greg	*(struct(int,int,int,int))
->	O
year	int
)	O
)	O
&&	O
(	O
day	int
-	O
rc_period	int
<=	O
day_of_year	(int,int,int)->(int)
(	O
greg	*(struct(int,int,int,int))
->	O
last_day	int
,	O
greg	*(struct(int,int,int,int))
->	O
month	int
,	O
greg	*(struct(int,int,int,int))
->	O
year	int
)	O
)	O
)	O
day	int
-=	O
greg_missing_days	int
;	O
day	int
-=	O
rc_period	int
;	O
ed	int
=	O
day	int
;	O
if	O
(	O
day	int
>	O
0	int
)	O
{	O
rc_period_flag	int
=	O
FALSE	O
;	O
(	O
void	O
)	O
doy2date	(int,int,*(int),*(int))->(int)
(	O
day	int
,	O
is_leap_year	int
,	O
&	O
act_day	int
,	O
&	O
act_month	int
)	O
;	O
month	int
=	O
act_month	int
;	O
ed	int
++	O
;	O
}	O
}	O
}	O
}	O
else	O
{	O
rc_period_list	int
=	O
FALSE	O
;	O
ed	int
++	O
;	O
}	O
if	O
(	O
swap_flag	int
||	O
rc_backwards_flag	int
)	O
{	O
int	O
tmp	int
=	O
ed	int
;	O
ed	int
=	O
day	int
;	O
day	int
=	O
tmp	int
;	O
}	O
if	O
(	O
greg_correction	int
)	O
{	O
(	O
void	O
)	O
doy2date	(int,int,*(int),*(int))->(int)
(	O
day	int
,	O
is_leap_year	int
,	O
&	O
dd	int
,	O
&	O
mm	int
)	O
;	O
if	O
(	O
!	O
prev_date	(*(int),*(int),*(int))->(int)
(	O
&	O
dd	int
,	O
&	O
mm	int
,	O
&	O
yy	int
)	O
)	O
day	int
-=	O
greg_missing_days	int
;	O
else	O
{	O
if	O
(	O
!	O
rc_forwards_flag	int
&&	O
!	O
rc_backwards_flag	int
)	O
{	O
(	O
void	O
)	O
doy2date	(int,int,*(int),*(int))->(int)
(	O
day	int
,	O
is_leap_year	int
,	O
&	O
dd	int
,	O
&	O
mm	int
)	O
;	O
if	O
(	O
weekday_of_date	(int,int,int)->(int)
(	O
dd	int
,	O
mm	int
,	O
yy	int
)	O
!=	O
start_day	int
)	O
day	int
-=	O
greg_missing_days	int
;	O
else	O
for	O
(	O
i	int
=	O
day	int
;	O
i	int
<	O
ed	int
;	O
i	int
++	O
)	O
if	O
(	O
!	O
next_date	(*(int),*(int),*(int))->(int)
(	O
&	O
dd	int
,	O
&	O
mm	int
,	O
&	O
yy	int
)	O
)	O
{	O
ed	int
+=	O
greg_missing_days	int
;	O
break	O
;	O
}	O
}	O
else	O
{	O
auto	O
Bool	int
ed_set	int
=	O
FALSE	O
;	O
for	O
(	O
i	int
=	O
day	int
;	O
i	int
<	O
ed	int
;	O
i	int
++	O
)	O
if	O
(	O
!	O
next_date	(*(int),*(int),*(int))->(int)
(	O
&	O
dd	int
,	O
&	O
mm	int
,	O
&	O
yy	int
)	O
)	O
{	O
ed	int
+=	O
greg_missing_days	int
;	O
ed_set	int
=	O
TRUE	O
;	O
break	O
;	O
}	O
if	O
(	O
rc_backwards_flag	int
&&	O
ed_set	int
)	O
{	O
(	O
void	O
)	O
doy2date	(int,int,*(int),*(int))->(int)
(	O
day	int
,	O
is_leap_year	int
,	O
&	O
dd	int
,	O
&	O
mm	int
)	O
;	O
if	O
(	O
weekday_of_date	(int,int,int)->(int)
(	O
dd	int
,	O
mm	int
,	O
yy	int
)	O
!=	O
start_day	int
)	O
{	O
day	int
-=	O
greg_missing_days	int
;	O
ed	int
-=	O
greg_missing_days	int
;	O
}	O
}	O
}	O
}	O
}	O
}	O
if	O
(	O
day	int
!=	O
ed	int
)	O
{	O
auto	O
double	O
save_time_offset	double
=	O
time_offset	double
;	O
register	O
int	O
save_hour_offset	int
=	O
time_hour_offset	int
;	O
register	O
int	O
save_min_offset	int
=	O
time_min_offset	int
;	O
register	O
int	O
save_loop_end	int
=	O
loop_end	int
;	O
auto	O
char	O
*	O
tmp_rc_here_fn	*(char)
;	O
auto	O
Bool	int
cycle_increment	int
=	O
TRUE	O
;	O
auto	O
Bool	int
is_here_file	int
;	O
auto	O
Bool	int
ok	int
;	O
if	O
(	O
rc_enable_hda_flag	int
||	O
rc_enable_hdl_flag	int
)	O
{	O
while	O
(	O
(	O
hd_table	array(*(char))
[	O
tindex	int
]	O
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
&&	O
(	O
tindex	int
<	O
HD_ELEMS_MAX	int
)	O
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
line_buffer	*(char)
,	O
hd_table	array(*(char))
[	O
tindex	int
]	O
)	O
;	O
i	int
=	O
LEN_HD_NAME	int
+	O
len_year_max	int
+	O
4	int
+	O
2	int
;	O
if	O
(	O
rc_enable_hda_flag	int
||	O
(	O
rc_enable_hdl_flag	int
&&	O
(	O
line_buffer	*(char)
[	O
i	int
]	O
!=	O
*	O
DIS_HLS_PREF	*(char)
)	O
&&	O
(	O
line_buffer	*(char)
[	O
i	int
]	O
!=	O
*	O
DIS_HLS_PREF2	*(char)
)	O
)	O
)	O
{	O
i	int
-=	O
2	int
;	O
while	O
(	O
i	int
&&	O
isspace	(int)->(int)
(	O
line_buffer	*(char)
[	O
i	int
]	O
)	O
)	O
line_buffer	*(char)
[	O
i	int
--	O
]	O
=	O
'\0'	O
;	O
if	O
(	O
i	int
>	O
len_year_max	int
+	O
4	int
)	O
rc_check	(*(char),*(char),long,int,*(int),int,int,int)->(void)
(	O
line_buffer	*(char)
,	O
_	O
(	O
"`Eternal holiday list'"	*(char)
)	O
,	O
(	O
long	O
)	O
tindex	int
,	O
i	int
,	O
&	O
rc_elems	int
,	O
day	int
,	O
ed	int
,	O
wd	int
)	O
;	O
}	O
if	O
(	O
!	O
holiday_flag	int
)	O
{	O
free	(*(void))->(void)
(	O
hd_table	array(*(char))
[	O
tindex	int
]	O
)	O
;	O
hd_table	array(*(char))
[	O
tindex	int
]	O
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
}	O
tindex	int
++	O
;	O
}	O
if	O
(	O
(	O
rc_tomorrow_flag	int
||	O
rc_week_flag	int
)	O
&&	O
!	O
is_date_given	int
&&	O
!	O
is_1month_mode	int
&&	O
!	O
is_2month_mode	int
&&	O
(	O
(	O
!	O
rc_forwards_flag	int
&&	O
!	O
rc_backwards_flag	int
&&	O
(	O
(	O
(	O
year	int
+	O
1	int
<=	O
YEAR_MAX	int
)	O
&&	O
(	O
ed	int
>	O
DAY_LAST	int
+	O
is_leap_year	int
+	O
1	int
)	O
)	O
||	O
(	O
(	O
year	int
-	O
1	int
>=	O
YEAR_MIN	int
)	O
&&	O
(	O
day	int
<	O
DAY_MIN	int
)	O
)	O
)	O
)	O
||	O
(	O
rc_forwards_flag	int
&&	O
(	O
(	O
year	int
+	O
1	int
<=	O
YEAR_MAX	int
)	O
&&	O
(	O
ed	int
>	O
DAY_LAST	int
+	O
is_leap_year	int
+	O
1	int
)	O
)	O
)	O
||	O
(	O
rc_backwards_flag	int
&&	O
(	O
(	O
year	int
-	O
1	int
>=	O
YEAR_MIN	int
)	O
&&	O
(	O
day	int
<	O
DAY_MIN	int
)	O
)	O
)	O
)	O
)	O
{	O
register	O
int	O
jtmp_ad	int
=	O
act_day	int
;	O
register	O
int	O
tay	int
=	O
act_year	int
;	O
register	O
int	O
tam	int
=	O
act_month	int
;	O
register	O
int	O
tad	int
=	O
act_day	int
;	O
if	O
(	O
holiday_flag	int
)	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
tindex	int
;	O
i	int
++	O
)	O
{	O
free	(*(void))->(void)
(	O
hd_table	array(*(char))
[	O
i	int
]	O
)	O
;	O
hd_table	array(*(char))
[	O
i	int
]	O
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
}	O
tindex	int
=	O
0	int
;	O
if	O
(	O
day	int
<	O
DAY_MIN	int
)	O
{	O
year	int
--	O
;	O
month	int
=	O
MONTH_MAX	int
;	O
}	O
else	O
{	O
year	int
++	O
;	O
month	int
=	O
MONTH_MIN	int
;	O
}	O
is_leap_year	int
=	O
(	O
days_of_february	(int)->(int)
(	O
year	int
)	O
==	O
29	int
)	O
;	O
if	O
(	O
cal_special_flag	int
)	O
act_day	int
=	O
day_of_year	(int,int,int)->(int)
(	O
jtmp_ad	int
,	O
act_month	int
,	O
act_year	int
)	O
;	O
if	O
(	O
adate_set	int
)	O
fiscal_month	int
=	O
tmp_fiscal_month	int
;	O
if	O
(	O
(	O
(	O
year	int
==	O
EASTER_MIN	int
-	O
1	int
)	O
&&	O
(	O
fiscal_month	int
>	O
MONTH_MIN	int
)	O
)	O
||	O
(	O
(	O
year	int
>=	O
EASTER_MIN	int
)	O
&&	O
(	O
year	int
<=	O
EASTER_MAX	O
)	O
)	O
)	O
print_all_holidays	(int,int)->(void)
(	O
TRUE	O
,	O
TRUE	O
)	O
;	O
if	O
(	O
adate_set	int
)	O
fiscal_month	int
=	O
MONTH_MIN	int
;	O
if	O
(	O
day	int
<	O
DAY_MIN	int
)	O
{	O
year	int
++	O
;	O
month	int
=	O
MONTH_MIN	int
;	O
}	O
else	O
{	O
year	int
--	O
;	O
month	int
=	O
MONTH_MAX	int
;	O
}	O
while	O
(	O
(	O
hd_table	array(*(char))
[	O
tindex	int
]	O
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
&&	O
(	O
tindex	int
<	O
HD_ELEMS_MAX	int
)	O
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
line_buffer	*(char)
,	O
hd_table	array(*(char))
[	O
tindex	int
]	O
)	O
;	O
i	int
=	O
LEN_HD_NAME	int
+	O
len_year_max	int
+	O
4	int
+	O
2	int
;	O
if	O
(	O
rc_enable_hda_flag	int
||	O
(	O
rc_enable_hdl_flag	int
&&	O
(	O
line_buffer	*(char)
[	O
i	int
]	O
==	O
*	O
DIS_HLS_PREF	*(char)
)	O
&&	O
(	O
line_buffer	*(char)
[	O
i	int
]	O
==	O
*	O
DIS_HLS_PREF2	*(char)
)	O
)	O
)	O
{	O
i	int
-=	O
2	int
;	O
while	O
(	O
i	int
&&	O
isspace	(int)->(int)
(	O
line_buffer	*(char)
[	O
i	int
]	O
)	O
)	O
line_buffer	*(char)
[	O
i	int
--	O
]	O
=	O
'\0'	O
;	O
if	O
(	O
i	int
>	O
len_year_max	int
+	O
4	int
)	O
rc_check	(*(char),*(char),long,int,*(int),int,int,int)->(void)
(	O
line_buffer	*(char)
,	O
_	O
(	O
"`Eternal holiday list'"	*(char)
)	O
,	O
(	O
long	O
)	O
tindex	int
,	O
i	int
,	O
&	O
rc_elems	int
,	O
day	int
,	O
ed	int
,	O
wd	int
)	O
;	O
}	O
free	(*(void))->(void)
(	O
hd_table	array(*(char))
[	O
tindex	int
]	O
)	O
;	O
hd_table	array(*(char))
[	O
tindex	int
]	O
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
tindex	int
++	O
;	O
}	O
is_leap_year	int
=	O
(	O
days_of_february	(int)->(int)
(	O
year	int
)	O
==	O
29	int
)	O
;	O
if	O
(	O
adate_set	int
)	O
{	O
fiscal_month	int
=	O
tmp_fiscal_month	int
;	O
act_year	int
=	O
tmp_ay	int
;	O
act_month	int
=	O
tmp_am	int
;	O
jtmp_ad	int
=	O
act_day	int
=	O
tmp_ad	int
;	O
}	O
if	O
(	O
cal_special_flag	int
)	O
act_day	int
=	O
day_of_year	(int,int,int)->(int)
(	O
jtmp_ad	int
,	O
act_month	int
,	O
act_year	int
)	O
;	O
if	O
(	O
holiday_flag	int
&&	O
(	O
(	O
(	O
year	int
==	O
EASTER_MIN	int
-	O
1	int
)	O
&&	O
(	O
fiscal_month	int
>	O
MONTH_MIN	int
)	O
)	O
||	O
(	O
(	O
year	int
>=	O
EASTER_MIN	int
)	O
&&	O
(	O
year	int
<=	O
EASTER_MAX	O
)	O
)	O
)	O
)	O
print_all_holidays	(int,int)->(void)
(	O
TRUE	O
,	O
TRUE	O
)	O
;	O
if	O
(	O
cal_special_flag	int
)	O
act_day	int
=	O
jtmp_ad	int
;	O
if	O
(	O
adate_set	int
)	O
{	O
fiscal_month	int
=	O
MONTH_MIN	int
;	O
act_year	int
=	O
tay	int
;	O
month	int
=	O
act_month	int
=	O
tam	int
;	O
act_day	int
=	O
tad	int
;	O
}	O
else	O
month	int
=	O
tmp_month	int
;	O
}	O
}	O
if	O
(	O
rc_filename	*(char)
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
i	int
=	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
PACKAGE_NAME	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
RC_SUFFIX	*(char)
)	O
;	O
i	int
++	O
;	O
if	O
(	O
(	O
Uint	int
)	O
i	int
>=	O
maxlen_max	int
)	O
resize_all_strings	(int,int,*(char),long)->(void)
(	O
i	int
+	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
s3	*(char)
,	O
"."	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
s3	*(char)
,	O
PACKAGE_NAME	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
s3	*(char)
,	O
RC_SUFFIX	*(char)
)	O
;	O
}	O
else	O
{	O
i	int
=	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
rc_filename	*(char)
)	O
;	O
if	O
(	O
(	O
Uint	int
)	O
i	int
>=	O
maxlen_max	int
)	O
resize_all_strings	(int,int,*(char),long)->(void)
(	O
i	int
+	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
s3	*(char)
,	O
rc_filename	*(char)
)	O
;	O
}	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
=	O
(	O
File_struct	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))
*	O
)	O
my_malloc	(int,int,*(char),long,*(char),int)->(*(void))
(	O
sizeof	O
(	O
File_struct	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))
)	O
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"rc_files_table[rc_files]"	*(char)
,	O
rc_files	int
)	O
;	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
(	O
FILE	struct
*	O
)	O
NULL	O
;	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
pool	*(char)
=	O
(	O
char	O
*	O
)	O
my_malloc	(int,int,*(char),long,*(char),int)->(*(void))
(	O
BUF_LEN	int
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"rc_files_table[rc_files]->pool"	*(char)
,	O
rc_files	int
)	O
;	O
if	O
(	O
loop_end	int
!=	O
SPECIAL_VALUE	O
)	O
{	O
tindex	int
=	O
HHMM2MM	O
(	O
time_hour_offset	int
,	O
time_min_offset	int
)	O
;	O
if	O
(	O
tindex	int
<	O
0	int
)	O
tindex	int
=	O
0	int
;	O
else	O
if	O
(	O
tindex	int
>=	O
MINS_PER_DAY	int
)	O
tindex	int
=	O
MINS_PER_DAY	int
-	O
1	int
;	O
if	O
(	O
tindex	int
>	O
loop_end	int
)	O
cycle_increment	int
=	O
FALSE	O
;	O
time_hour_offset	int
=	O
MM2HH	O
(	O
tindex	int
)	O
;	O
time_min_offset	int
=	O
tindex	int
%	O
MINS_PER_HOUR	int
;	O
time_offset	double
=	O
MM2DAY	O
(	O
tindex	int
)	O
;	O
}	O
else	O
tindex	int
=	O
0	int
;	O
do	O
{	O
tmp_rc_here_fn	*(char)
=	O
rc_here_fn	*(char)
;	O
ok	int
=	O
is_here_file	int
=	O
FALSE	O
;	O
while	O
(	O
!	O
ok	int
)	O
{	O
while	O
(	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
==	O
(	O
FILE	struct
*	O
)	O
NULL	O
)	O
{	O
i	int
=	O
0	int
;	O
ptr_char	*(char)
=	O
s3	*(char)
;	O
LOOP	O
{	O
if	O
(	O
*	O
ptr_char	*(char)
==	O
QUOTE_CHAR	char
)	O
{	O
if	O
(	O
*	O
(	O
ptr_char	*(char)
+	O
1	int
)	O
==	O
*	O
CONNECT_SEP	*(char)
||	O
*	O
(	O
ptr_char	*(char)
+	O
1	int
)	O
==	O
QUOTE_CHAR	char
)	O
ptr_char	*(char)
++	O
;	O
s7	*(char)
[	O
i	int
++	O
]	O
=	O
*	O
ptr_char	*(char)
++	O
;	O
}	O
else	O
if	O
(	O
*	O
ptr_char	*(char)
!=	O
*	O
CONNECT_SEP	*(char)
)	O
s7	*(char)
[	O
i	int
++	O
]	O
=	O
*	O
ptr_char	*(char)
++	O
;	O
if	O
(	O
!	O
*	O
ptr_char	*(char)
||	O
*	O
ptr_char	*(char)
==	O
*	O
CONNECT_SEP	*(char)
)	O
break	O
;	O
}	O
s7	*(char)
[	O
i	int
]	O
=	O
'\0'	O
;	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
filename	*(char)
=	O
(	O
char	O
*	O
)	O
my_malloc	(int,int,*(char),long,*(char),int)->(*(void))
(	O
i	int
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
1L	int
,	O
"rc_files_table[rc_files]->filename"	*(char)
,	O
rc_files	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
filename	*(char)
,	O
s7	*(char)
)	O
;	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
file_open	(*(*(char)),int,enum(int,int,int,int,int,int,int),*(int))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
&	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
filename	*(char)
,	O
rc_files	int
,	O
(	O
is_here_file	int
)	O
?	O
HEre	int
:	O
REsource	int
,	O
&	O
bad_sys_include	*(int)
)	O
;	O
if	O
(	O
!	O
*	O
ptr_char	*(char)
)	O
{	O
if	O
(	O
tmp_rc_here_fn	*(char)
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
i	int
=	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
tmp_rc_here_fn	*(char)
)	O
;	O
if	O
(	O
(	O
Uint	int
)	O
i	int
>=	O
maxlen_max	int
)	O
resize_all_strings	(int,int,*(char),long)->(void)
(	O
i	int
+	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
s3	*(char)
,	O
tmp_rc_here_fn	*(char)
)	O
;	O
tmp_rc_here_fn	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
is_here_file	int
=	O
!	O
ok	int
;	O
}	O
else	O
ok	int
=	O
TRUE	O
;	O
break	O
;	O
}	O
else	O
{	O
ptr_char	*(char)
++	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
s7	*(char)
,	O
ptr_char	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
s3	*(char)
,	O
s7	*(char)
)	O
;	O
if	O
(	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
==	O
(	O
FILE	struct
*	O
)	O
NULL	O
)	O
free	(*(void))->(void)
(	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
filename	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
!=	O
(	O
FILE	struct
*	O
)	O
NULL	O
)	O
{	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
in_pool	int
=	O
0	int
;	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
line_number	long
=	O
0L	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
RC_DVAR_MAX	int
;	O
i	int
++	O
)	O
if	O
(	O
rc_dvar	array(struct(struct(char,char),struct(char,char)))
[	O
i	int
]	O
.	O
dvar_global	struct(char,char)
.	O
dvar_month	char
&&	O
!	O
rc_dvar	array(struct(struct(char,char),struct(char,char)))
[	O
i	int
]	O
.	O
dvar_local	struct(char,char)
.	O
dvar_month	char
)	O
{	O
rc_dvar	array(struct(struct(char,char),struct(char,char)))
[	O
i	int
]	O
.	O
dvar_local	struct(char,char)
.	O
dvar_month	char
=	O
rc_dvar	array(struct(struct(char,char),struct(char,char)))
[	O
i	int
]	O
.	O
dvar_global	struct(char,char)
.	O
dvar_month	char
;	O
rc_dvar	array(struct(struct(char,char),struct(char,char)))
[	O
i	int
]	O
.	O
dvar_local	struct(char,char)
.	O
dvar_day	char
=	O
rc_dvar	array(struct(struct(char,char),struct(char,char)))
[	O
i	int
]	O
.	O
dvar_global	struct(char,char)
.	O
dvar_day	char
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
RC_TVAR_MAX	O
;	O
i	int
++	O
)	O
if	O
(	O
(	O
rc_tvar	array(struct(struct(*(char)),struct(*(char))))
[	O
i	int
]	O
.	O
tvar_global	struct(*(char))
.	O
tvar_text	*(char)
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
&&	O
(	O
rc_tvar	array(struct(struct(*(char)),struct(*(char))))
[	O
i	int
]	O
.	O
tvar_local	struct(*(char))
.	O
tvar_text	*(char)
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
)	O
{	O
rc_tvar	array(struct(struct(*(char)),struct(*(char))))
[	O
i	int
]	O
.	O
tvar_local	struct(*(char))
.	O
tvar_text	*(char)
=	O
(	O
char	O
*	O
)	O
my_malloc	(int,int,*(char),long,*(char),int)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
rc_tvar	array(struct(struct(*(char)),struct(*(char))))
[	O
i	int
]	O
.	O
tvar_global	struct(*(char))
.	O
tvar_text	*(char)
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"rc_tvar[i].tvar_local.tvar_text"	*(char)
,	O
i	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
rc_tvar	array(struct(struct(*(char)),struct(*(char))))
[	O
i	int
]	O
.	O
tvar_local	struct(*(char))
.	O
tvar_text	*(char)
,	O
rc_tvar	array(struct(struct(*(char)),struct(*(char))))
[	O
i	int
]	O
.	O
tvar_global	struct(*(char))
.	O
tvar_text	*(char)
)	O
;	O
}	O
while	O
(	O
(	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
ptr_pool	*(char)
=	O
file_read_line	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(*(char)),*(int),*(char),*(char),*(char),*(long),*(int),enum(int,int,int,int,int,int,int),*(int),*(int),*(int))->(*(char))
(	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
&	O
line_buffer	*(char)
,	O
&	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
in_pool	int
,	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
pool	*(char)
,	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
ptr_pool	*(char)
,	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
filename	*(char)
,	O
&	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
line_number	long
,	O
&	O
line_length	*(int)
,	O
REsource	int
,	O
&	O
is_include	*(int)
,	O
&	O
is_dvar	*(int)
,	O
&	O
is_tvar	*(int)
)	O
)	O
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
if	O
(	O
is_include	*(int)
)	O
try_to_include_file	(int,int)->(void)
(	O
ed	int
,	O
wd	int
)	O
;	O
else	O
if	O
(	O
*	O
line_buffer	*(char)
&&	O
!	O
is_dvar	*(int)
&&	O
!	O
is_tvar	*(int)
)	O
rc_check	(*(char),*(char),long,int,*(int),int,int,int)->(void)
(	O
line_buffer	*(char)
,	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
filename	*(char)
,	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
line_number	long
,	O
line_length	*(int)
,	O
&	O
rc_elems	int
,	O
day	int
,	O
ed	int
,	O
wd	int
)	O
;	O
}	O
if	O
(	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
!=	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
(	O
void	O
)	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
(	O
FILE	struct
*	O
)	O
NULL	O
;	O
free	(*(void))->(void)
(	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
filename	*(char)
)	O
;	O
if	O
(	O
!	O
rc_export_ldvar_flag	int
)	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
RC_DVAR_MAX	int
;	O
i	int
++	O
)	O
rc_dvar	array(struct(struct(char,char),struct(char,char)))
[	O
i	int
]	O
.	O
dvar_local	struct(char,char)
.	O
dvar_month	char
=	O
(	O
char	O
)	O
0	int
;	O
if	O
(	O
!	O
rc_export_ltvar_flag	int
)	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
RC_TVAR_MAX	O
;	O
i	int
++	O
)	O
if	O
(	O
rc_tvar	array(struct(struct(*(char)),struct(*(char))))
[	O
i	int
]	O
.	O
tvar_local	struct(*(char))
.	O
tvar_text	*(char)
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
free	(*(void))->(void)
(	O
rc_tvar	array(struct(struct(*(char)),struct(*(char))))
[	O
i	int
]	O
.	O
tvar_local	struct(*(char))
.	O
tvar_text	*(char)
)	O
;	O
rc_tvar	array(struct(struct(*(char)),struct(*(char))))
[	O
i	int
]	O
.	O
tvar_local	struct(*(char))
.	O
tvar_text	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
}	O
}	O
else	O
free	(*(void))->(void)
(	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
filename	*(char)
)	O
;	O
}	O
if	O
(	O
loop_end	int
!=	O
SPECIAL_VALUE	O
)	O
{	O
if	O
(	O
cycle_increment	int
)	O
tindex	int
+=	O
loop_step	int
;	O
else	O
tindex	int
-=	O
loop_step	int
;	O
time_hour_offset	int
=	O
MM2HH	O
(	O
tindex	int
)	O
;	O
time_min_offset	int
=	O
tindex	int
%	O
MINS_PER_HOUR	int
;	O
time_offset	double
=	O
MM2DAY	O
(	O
tindex	int
)	O
;	O
}	O
}	O
while	O
(	O
(	O
cycle_increment	int
&&	O
(	O
tindex	int
<=	O
loop_end	int
)	O
)	O
||	O
(	O
!	O
cycle_increment	int
&&	O
(	O
tindex	int
>=	O
loop_end	int
)	O
)	O
)	O
;	O
time_hour_offset	int
=	O
save_hour_offset	int
;	O
time_min_offset	int
=	O
save_min_offset	int
;	O
time_offset	double
=	O
save_time_offset	double
;	O
loop_end	int
=	O
save_loop_end	int
;	O
free	(*(void))->(void)
(	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
pool	*(char)
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
RC_TVAR_MAX	O
;	O
i	int
++	O
)	O
if	O
(	O
rc_tvar	array(struct(struct(*(char)),struct(*(char))))
[	O
i	int
]	O
.	O
tvar_local	struct(*(char))
.	O
tvar_text	*(char)
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
free	(*(void))->(void)
(	O
rc_tvar	array(struct(struct(*(char)),struct(*(char))))
[	O
i	int
]	O
.	O
tvar_local	struct(*(char))
.	O
tvar_text	*(char)
)	O
;	O
rc_tvar	array(struct(struct(*(char)),struct(*(char))))
[	O
i	int
]	O
.	O
tvar_local	struct(*(char))
.	O
tvar_text	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
}	O
free	(*(void))->(void)
(	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
)	O
;	O
fiscal_month	int
=	O
tmp_fiscal_month	int
;	O
if	O
(	O
rc_elems	int
||	O
rc_all_dates_flag	int
||	O
rc_zero_dates_flag	int
)	O
display_table	(int,int,int,int,int,int)->(void)
(	O
tmp_ad	int
,	O
tmp_am	int
,	O
tmp_ay	int
,	O
day	int
,	O
ed	int
,	O
wd	int
)	O
;	O
}	O
start_day	int
=	O
tmp_start_day	int
;	O
month	int
=	O
tmp_month	int
;	O
act_day	int
=	O
tmp_ad	int
;	O
act_month	int
=	O
tmp_am	int
;	O
act_year	int
=	O
tmp_ay	int
;	O
}	O
static	O
void	O
try_to_include_file	(int,int)->(void)
(	O
ed	int
,	O
wd	int
)	O
int	O
ed	int
;	O
int	O
wd	int
;	O
{	O
register	O
int	O
i	int
;	O
register	O
int	O
j	int
;	O
auto	O
Bool	int
is_usr_file	int
=	O
FALSE	O
;	O
auto	O
Bool	int
is_sys_file	int
=	O
FALSE	O
;	O
i	int
=	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
line_buffer	*(char)
)	O
;	O
if	O
(	O
(	O
Uint	int
)	O
i	int
>=	O
maxlen_max	int
)	O
resize_all_strings	(int,int,*(char),long)->(void)
(	O
i	int
+	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
s7	*(char)
,	O
line_buffer	*(char)
)	O
;	O
i	int
=	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
RC_INCL_STMENT	*(char)
)	O
;	O
if	O
(	O
strncasecmp	(*(char),*(char),long)->(int)
(	O
s7	*(char)
,	O
RC_INCL_STMENT	*(char)
,	O
i	int
)	O
)	O
my_error	(int,*(char),long,*(char),int)->(void)
(	O
ERR_MALFORMED_INCLUDE	int
,	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
filename	*(char)
,	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
line_number	long
,	O
line_buffer	*(char)
,	O
0	int
)	O
;	O
while	O
(	O
isspace	(int)->(int)
(	O
s7	*(char)
[	O
i	int
]	O
)	O
)	O
i	int
++	O
;	O
if	O
(	O
!	O
s7	*(char)
[	O
i	int
]	O
||	O
s7	*(char)
[	O
i	int
]	O
==	O
'\n'	O
)	O
my_error	(int,*(char),long,*(char),int)->(void)
(	O
ERR_MALFORMED_INCLUDE	int
,	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
filename	*(char)
,	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
line_number	long
,	O
line_buffer	*(char)
,	O
0	int
)	O
;	O
if	O
(	O
s7	*(char)
[	O
i	int
]	O
==	O
*	O
RC_INCL_USR_ID	*(char)
)	O
is_usr_file	int
=	O
TRUE	O
;	O
else	O
if	O
(	O
s7	*(char)
[	O
i	int
]	O
==	O
*	O
RC_INCL_SYS_ID	*(char)
)	O
is_sys_file	int
=	O
TRUE	O
;	O
else	O
my_error	(int,*(char),long,*(char),int)->(void)
(	O
ERR_MALFORMED_INCLUDE	int
,	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
filename	*(char)
,	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
line_number	long
,	O
line_buffer	*(char)
,	O
0	int
)	O
;	O
i	int
++	O
;	O
j	int
=	O
0	int
;	O
while	O
(	O
s7	*(char)
[	O
i	int
]	O
&&	O
(	O
s7	*(char)
[	O
i	int
]	O
!=	O
*	O
RC_INCL_USR_OD	O
)	O
&&	O
(	O
s7	*(char)
[	O
i	int
]	O
!=	O
*	O
RC_INCL_SYS_OD	*(char)
)	O
)	O
s7	*(char)
[	O
j	int
++	O
]	O
=	O
s7	*(char)
[	O
i	int
++	O
]	O
;	O
if	O
(	O
(	O
is_usr_file	int
&&	O
(	O
s7	*(char)
[	O
i	int
]	O
!=	O
*	O
RC_INCL_USR_OD	O
)	O
)	O
||	O
(	O
is_sys_file	int
&&	O
(	O
s7	*(char)
[	O
i	int
]	O
!=	O
*	O
RC_INCL_SYS_OD	*(char)
)	O
)	O
)	O
my_error	(int,*(char),long,*(char),int)->(void)
(	O
ERR_MALFORMED_INCLUDE	int
,	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
filename	*(char)
,	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
line_number	long
,	O
line_buffer	*(char)
,	O
0	int
)	O
;	O
if	O
(	O
!	O
j	int
)	O
my_error	(int,*(char),long,*(char),int)->(void)
(	O
ERR_MALFORMED_INCLUDE	int
,	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
filename	*(char)
,	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
line_number	long
,	O
line_buffer	*(char)
,	O
0	int
)	O
;	O
s7	*(char)
[	O
j	int
]	O
=	O
'\0'	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
rc_files	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
*	O
s7	*(char)
==	O
*	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
i	int
]	O
->	O
filename	*(char)
)	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
s7	*(char)
+	O
1	int
,	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
i	int
]	O
->	O
filename	*(char)
+	O
1	int
)	O
)	O
my_error	(int,*(char),long,*(char),int)->(void)
(	O
ERR_CYCLIC_INCLUDE	int
,	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
filename	*(char)
,	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
line_number	long
,	O
line_buffer	*(char)
,	O
0	int
)	O
;	O
}	O
rc_files	int
++	O
;	O
if	O
(	O
(	O
Uint	int
)	O
rc_files	int
>=	O
rc_files_max	int
)	O
{	O
rc_files_max	int
<<=	O
1	int
;	O
if	O
(	O
rc_elems_max	int
*	O
sizeof	O
(	O
File_struct	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))
*	O
)	O
>	O
testval	int
)	O
rc_files_max	int
--	O
;	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
=	O
(	O
File_struct	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))
*	O
*	O
)	O
my_realloc	(*(void),int,int,*(char),long,*(char),int)->(*(void))
(	O
(	O
VOID_PTR	O
)	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
,	O
rc_files_max	int
*	O
sizeof	O
(	O
File_struct	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))
*	O
)	O
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
3L	int
,	O
"rc_files_table[rc_files_max]"	*(char)
,	O
rc_files_max	int
)	O
;	O
}	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
=	O
(	O
File_struct	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))
*	O
)	O
my_malloc	(int,int,*(char),long,*(char),int)->(*(void))
(	O
sizeof	O
(	O
File_struct	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))
)	O
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"rc_files_table[rc_files]"	*(char)
,	O
rc_files	int
)	O
;	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
filename	*(char)
=	O
(	O
char	O
*	O
)	O
my_malloc	(int,int,*(char),long,*(char),int)->(*(void))
(	O
j	int
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"rc_files_table[rc_files]->filename"	*(char)
,	O
rc_files	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
filename	*(char)
,	O
s7	*(char)
)	O
;	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
file_open	(*(*(char)),int,enum(int,int,int,int,int,int,int),*(int))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
&	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
filename	*(char)
,	O
rc_files	int
,	O
(	O
is_usr_file	int
)	O
?	O
USr_include	int
:	O
SYs_include	int
,	O
&	O
bad_sys_include	*(int)
)	O
;	O
if	O
(	O
bad_sys_include	*(int)
)	O
my_error	(int,*(char),long,*(char),int)->(void)
(	O
ERR_MALFORMED_INCLUDE	int
,	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
-	O
1	int
]	O
->	O
filename	*(char)
,	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
-	O
1	int
]	O
->	O
line_number	long
,	O
line_buffer	*(char)
,	O
0	int
)	O
;	O
if	O
(	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
!=	O
(	O
FILE	struct
*	O
)	O
NULL	O
)	O
{	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
in_pool	int
=	O
0	int
;	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
line_number	long
=	O
0L	int
;	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
pool	*(char)
=	O
(	O
char	O
*	O
)	O
my_malloc	(int,int,*(char),long,*(char),int)->(*(void))
(	O
BUF_LEN	int
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"rc_files_table[rc_files]->pool"	*(char)
,	O
rc_files	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
RC_DVAR_MAX	int
;	O
i	int
++	O
)	O
{	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
local_dvars	array(struct(char,char))
[	O
i	int
]	O
.	O
dvar_month	char
=	O
rc_dvar	array(struct(struct(char,char),struct(char,char)))
[	O
i	int
]	O
.	O
dvar_local	struct(char,char)
.	O
dvar_month	char
;	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
local_dvars	array(struct(char,char))
[	O
i	int
]	O
.	O
dvar_day	char
=	O
rc_dvar	array(struct(struct(char,char),struct(char,char)))
[	O
i	int
]	O
.	O
dvar_local	struct(char,char)
.	O
dvar_day	char
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
RC_TVAR_MAX	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
rc_tvar	array(struct(struct(*(char)),struct(*(char))))
[	O
i	int
]	O
.	O
tvar_local	struct(*(char))
.	O
tvar_text	*(char)
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
local_tvars	array(struct(*(char)))
[	O
i	int
]	O
.	O
tvar_text	*(char)
=	O
(	O
char	O
*	O
)	O
my_malloc	(int,int,*(char),long,*(char),int)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
rc_tvar	array(struct(struct(*(char)),struct(*(char))))
[	O
i	int
]	O
.	O
tvar_local	struct(*(char))
.	O
tvar_text	*(char)
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"rc_tvar[i].tvar_local.tvar_text"	*(char)
,	O
i	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
local_tvars	array(struct(*(char)))
[	O
i	int
]	O
.	O
tvar_text	*(char)
,	O
rc_tvar	array(struct(struct(*(char)),struct(*(char))))
[	O
i	int
]	O
.	O
tvar_local	struct(*(char))
.	O
tvar_text	*(char)
)	O
;	O
}	O
else	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
local_tvars	array(struct(*(char)))
[	O
i	int
]	O
.	O
tvar_text	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
}	O
while	O
(	O
(	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
ptr_pool	*(char)
=	O
file_read_line	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(*(char)),*(int),*(char),*(char),*(char),*(long),*(int),enum(int,int,int,int,int,int,int),*(int),*(int),*(int))->(*(char))
(	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
&	O
line_buffer	*(char)
,	O
&	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
in_pool	int
,	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
pool	*(char)
,	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
ptr_pool	*(char)
,	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
filename	*(char)
,	O
&	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
line_number	long
,	O
&	O
line_length	*(int)
,	O
REsource	int
,	O
&	O
is_include	*(int)
,	O
&	O
is_dvar	*(int)
,	O
&	O
is_tvar	*(int)
)	O
)	O
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
if	O
(	O
is_include	*(int)
)	O
try_to_include_file	(int,int)->(void)
(	O
ed	int
,	O
wd	int
)	O
;	O
else	O
if	O
(	O
*	O
line_buffer	*(char)
&&	O
!	O
is_dvar	*(int)
&&	O
!	O
is_tvar	*(int)
)	O
rc_check	(*(char),*(char),long,int,*(int),int,int,int)->(void)
(	O
line_buffer	*(char)
,	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
filename	*(char)
,	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
line_number	long
,	O
line_length	*(int)
,	O
&	O
rc_elems	int
,	O
day	int
,	O
ed	int
,	O
wd	int
)	O
;	O
(	O
void	O
)	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
free	(*(void))->(void)
(	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
pool	*(char)
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
RC_DVAR_MAX	int
;	O
i	int
++	O
)	O
{	O
rc_dvar	array(struct(struct(char,char),struct(char,char)))
[	O
i	int
]	O
.	O
dvar_local	struct(char,char)
.	O
dvar_month	char
=	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
local_dvars	array(struct(char,char))
[	O
i	int
]	O
.	O
dvar_month	char
;	O
rc_dvar	array(struct(struct(char,char),struct(char,char)))
[	O
i	int
]	O
.	O
dvar_local	struct(char,char)
.	O
dvar_day	char
=	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
local_dvars	array(struct(char,char))
[	O
i	int
]	O
.	O
dvar_day	char
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
RC_TVAR_MAX	O
;	O
i	int
++	O
)	O
if	O
(	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
local_tvars	array(struct(*(char)))
[	O
i	int
]	O
.	O
tvar_text	*(char)
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
if	O
(	O
rc_tvar	array(struct(struct(*(char)),struct(*(char))))
[	O
i	int
]	O
.	O
tvar_local	struct(*(char))
.	O
tvar_text	*(char)
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
rc_tvar	array(struct(struct(*(char)),struct(*(char))))
[	O
i	int
]	O
.	O
tvar_local	struct(*(char))
.	O
tvar_text	*(char)
=	O
(	O
char	O
*	O
)	O
my_malloc	(int,int,*(char),long,*(char),int)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
local_tvars	array(struct(*(char)))
[	O
i	int
]	O
.	O
tvar_text	*(char)
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"rc_tvar[i].tvar_local.tvar_text"	*(char)
,	O
i	int
)	O
;	O
else	O
rc_tvar	array(struct(struct(*(char)),struct(*(char))))
[	O
i	int
]	O
.	O
tvar_local	struct(*(char))
.	O
tvar_text	*(char)
=	O
(	O
char	O
*	O
)	O
my_realloc	(*(void),int,int,*(char),long,*(char),int)->(*(void))
(	O
(	O
VOID_PTR	O
)	O
(	O
rc_tvar	array(struct(struct(*(char)),struct(*(char))))
[	O
i	int
]	O
.	O
tvar_local	struct(*(char))
.	O
tvar_text	*(char)
)	O
,	O
strlen	(*(char))->(long)
(	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
local_tvars	array(struct(*(char)))
[	O
i	int
]	O
.	O
tvar_text	*(char)
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
3L	int
,	O
"rc_tvar[i].tvar_local.tvar_text"	*(char)
,	O
i	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
rc_tvar	array(struct(struct(*(char)),struct(*(char))))
[	O
i	int
]	O
.	O
tvar_local	struct(*(char))
.	O
tvar_text	*(char)
,	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
local_tvars	array(struct(*(char)))
[	O
i	int
]	O
.	O
tvar_text	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
local_tvars	array(struct(*(char)))
[	O
i	int
]	O
.	O
tvar_text	*(char)
)	O
;	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
local_tvars	array(struct(*(char)))
[	O
i	int
]	O
.	O
tvar_text	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
}	O
}	O
free	(*(void))->(void)
(	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
->	O
filename	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
rc_files_table	*(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,int,*(char),*(char),array(struct(char,char)),array(struct(*(char))))))
[	O
rc_files	int
]	O
)	O
;	O
rc_files	int
--	O
;	O
}	O
static	O
void	O
display_table	(int,int,int,int,int,int)->(void)
(	O
tmp_ad	int
,	O
tmp_am	int
,	O
tmp_ay	int
,	O
day	int
,	O
ed	int
,	O
wd	int
)	O
const	O
int	O
tmp_ad	int
;	O
const	O
int	O
tmp_am	int
;	O
const	O
int	O
tmp_ay	int
;	O
int	O
day	int
;	O
int	O
ed	int
;	O
int	O
wd	int
;	O
{	O
register	O
int	O
n	long
;	O
register	O
int	O
i	int
;	O
register	O
int	O
j	int
=	O
0	int
;	O
register	O
int	O
tindex	int
=	O
0	int
;	O
auto	O
int	O
ld	int
=	O
0	int
;	O
auto	O
int	O
lm	int
=	O
0	int
;	O
auto	O
int	O
ly	int
=	O
0	int
;	O
auto	O
int	O
dd	int
=	O
0	int
;	O
auto	O
int	O
mm	int
=	O
0	int
;	O
auto	O
int	O
yy	int
=	O
0	int
;	O
auto	O
int	O
i_dummy	int
;	O
auto	O
char	O
c_dummy	char
;	O
auto	O
Bool	int
b_dummy	int
;	O
auto	O
Bool	int
ok	int
;	O
rc_zero_pos	int
=	O
rc_elems	int
;	O
if	O
(	O
rc_all_dates_flag	int
||	O
rc_zero_dates_flag	int
)	O
{	O
register	O
int	O
rc_e	int
=	O
rc_zero_pos	int
;	O
if	O
(	O
(	O
rc_elems	int
>	O
1	int
)	O
&&	O
!	O
is_presorted	(*(*(char)),int)->(int)
(	O
rc_elems_table	*(*(char))
,	O
rc_elems	int
)	O
)	O
qsort	(*(void),long,long,*((*(void),*(void))->(int)))->(void)
(	O
(	O
VOID_PTR	O
)	O
rc_elems_table	*(*(char))
,	O
rc_elems	int
,	O
sizeof	O
*	O
rc_elems_table	*(*(char))
,	O
(	O
Cmp_func	*((*(void),*(void))->(int))
)	O
asc_sort	(*(*(char)),*(*(char)))->(int)
)	O
;	O
if	O
(	O
rc_elems	int
)	O
(	O
void	O
)	O
rc_get_date	(*(char),*(struct(int,int,*(char),*(char),*(char),*(char))),int,*(int),*(int),*(int),*(int),*(int),*(int),*(char),*(int),*(int),*(char),long,*(char),int)->(*(struct(int,int,*(char),*(char),*(char),*(char))))
(	O
rc_elems_table	*(*(char))
[	O
j	int
]	O
,	O
lineptrs	*(struct(int,int,*(char),*(char),*(char),*(char)))
,	O
FALSE	O
,	O
&	O
b_dummy	int
,	O
&	O
ld	int
,	O
&	O
lm	int
,	O
&	O
ly	int
,	O
&	O
i_dummy	int
,	O
&	O
i_dummy	int
,	O
&	O
c_dummy	char
,	O
&	O
i_dummy	int
,	O
&	O
i_dummy	int
,	O
_	O
(	O
"Internal"	*(char)
)	O
,	O
(	O
long	O
)	O
j	int
,	O
rc_elems_table	*(*(char))
[	O
j	int
]	O
,	O
TRUE	O
)	O
;	O
if	O
(	O
(	O
fiscal_month	int
>	O
MONTH_MIN	int
)	O
&&	O
!	O
adate_set	int
)	O
{	O
day	int
=	O
mvec	array(int)
[	O
fiscal_month	int
-	O
1	int
]	O
+	O
1	int
;	O
if	O
(	O
fiscal_month	int
>	O
2	int
)	O
day	int
+=	O
is_leap_year	int
;	O
}	O
for	O
(	O
i	int
=	O
day	int
;	O
i	int
<	O
ed	int
;	O
i	int
++	O
)	O
{	O
yy	int
=	O
year	int
;	O
ok	int
=	O
doy2date	(int,int,*(int),*(int))->(int)
(	O
i	int
,	O
is_leap_year	int
,	O
&	O
dd	int
,	O
&	O
mm	int
)	O
;	O
if	O
(	O
!	O
ok	int
)	O
{	O
if	O
(	O
rc_tomorrow_flag	int
||	O
rc_week_flag	int
)	O
{	O
if	O
(	O
i	int
<	O
DAY_MIN	int
)	O
{	O
yy	int
=	O
year	int
-	O
1	int
;	O
if	O
(	O
yy	int
<	O
YEAR_MIN	int
)	O
break	O
;	O
n	long
=	O
(	O
days_of_february	(int)->(int)
(	O
yy	int
)	O
==	O
29	int
)	O
;	O
(	O
void	O
)	O
doy2date	(int,int,*(int),*(int))->(int)
(	O
DAY_LAST	int
+	O
n	long
+	O
i	int
,	O
n	long
,	O
&	O
dd	int
,	O
&	O
mm	int
)	O
;	O
}	O
else	O
if	O
(	O
i	int
>	O
DAY_LAST	int
+	O
is_leap_year	int
)	O
{	O
yy	int
=	O
year	int
+	O
1	int
;	O
if	O
(	O
yy	int
>	O
YEAR_MAX	int
)	O
break	O
;	O
n	long
=	O
(	O
days_of_february	(int)->(int)
(	O
yy	int
)	O
==	O
29	int
)	O
;	O
(	O
void	O
)	O
doy2date	(int,int,*(int),*(int))->(int)
(	O
i	int
-	O
(	O
DAY_LAST	int
+	O
is_leap_year	int
)	O
,	O
n	long
,	O
&	O
dd	int
,	O
&	O
mm	int
)	O
;	O
}	O
}	O
else	O
break	O
;	O
}	O
if	O
(	O
j	int
==	O
rc_e	int
||	O
mm	int
<	O
lm	int
||	O
yy	int
<	O
ly	int
||	O
(	O
(	O
dd	int
<	O
ld	int
)	O
&&	O
(	O
mm	int
<=	O
lm	int
)	O
&&	O
(	O
yy	int
<=	O
ly	int
)	O
)	O
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
line_buffer	*(char)
,	O
"%0*d%02d%02d "	*(char)
,	O
len_year_max	int
,	O
yy	int
,	O
mm	int
,	O
dd	int
)	O
;	O
rc_check	(*(char),*(char),long,int,*(int),int,int,int)->(void)
(	O
line_buffer	*(char)
,	O
_	O
(	O
"`Internal'"	*(char)
)	O
,	O
(	O
long	O
)	O
tindex	int
,	O
strlen	(*(char))->(long)
(	O
line_buffer	*(char)
)	O
,	O
&	O
rc_elems	int
,	O
day	int
,	O
ed	int
,	O
wd	int
)	O
;	O
}	O
else	O
while	O
(	O
(	O
dd	int
==	O
ld	int
)	O
&&	O
(	O
mm	int
==	O
lm	int
)	O
&&	O
(	O
yy	int
==	O
ly	int
)	O
)	O
if	O
(	O
j	int
+	O
1	int
<	O
rc_e	int
)	O
{	O
j	int
++	O
;	O
(	O
void	O
)	O
rc_get_date	(*(char),*(struct(int,int,*(char),*(char),*(char),*(char))),int,*(int),*(int),*(int),*(int),*(int),*(int),*(char),*(int),*(int),*(char),long,*(char),int)->(*(struct(int,int,*(char),*(char),*(char),*(char))))
(	O
rc_elems_table	*(*(char))
[	O
j	int
]	O
,	O
lineptrs	*(struct(int,int,*(char),*(char),*(char),*(char)))
,	O
FALSE	O
,	O
&	O
b_dummy	int
,	O
&	O
ld	int
,	O
&	O
lm	int
,	O
&	O
ly	int
,	O
&	O
i_dummy	int
,	O
&	O
i_dummy	int
,	O
&	O
c_dummy	char
,	O
&	O
i_dummy	int
,	O
&	O
i_dummy	int
,	O
_	O
(	O
"Internal"	*(char)
)	O
,	O
(	O
long	O
)	O
j	int
,	O
rc_elems_table	*(*(char))
[	O
j	int
]	O
,	O
TRUE	O
)	O
;	O
}	O
else	O
{	O
j	int
++	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
(	O
fiscal_month	int
>	O
MONTH_MIN	int
)	O
&&	O
(	O
year	int
<	O
YEAR_MAX	int
)	O
&&	O
!	O
adate_set	int
)	O
{	O
day	int
=	O
DAY_MIN	int
;	O
yy	int
=	O
year	int
+	O
1	int
;	O
is_leap_year	int
=	O
(	O
days_of_february	(int)->(int)
(	O
yy	int
)	O
==	O
29	int
)	O
;	O
if	O
(	O
fiscal_month	int
<	O
MONTH_MAX	int
)	O
ed	int
=	O
day_of_year	(int,int,int)->(int)
(	O
DAY_MIN	int
,	O
fiscal_month	int
+	O
1	int
,	O
yy	int
)	O
+	O
1	int
;	O
else	O
ed	int
=	O
DAY_LAST	int
+	O
is_leap_year	int
+	O
1	int
;	O
for	O
(	O
i	int
=	O
day	int
;	O
i	int
<	O
ed	int
;	O
i	int
++	O
)	O
{	O
ok	int
=	O
doy2date	(int,int,*(int),*(int))->(int)
(	O
i	int
,	O
is_leap_year	int
,	O
&	O
dd	int
,	O
&	O
mm	int
)	O
;	O
if	O
(	O
!	O
ok	int
)	O
break	O
;	O
if	O
(	O
j	int
==	O
rc_e	int
||	O
mm	int
<	O
lm	int
||	O
yy	int
<	O
ly	int
||	O
(	O
(	O
dd	int
<	O
ld	int
)	O
&&	O
(	O
mm	int
<=	O
lm	int
)	O
&&	O
(	O
yy	int
<=	O
ly	int
)	O
)	O
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
line_buffer	*(char)
,	O
"%0*d%02d%02d "	*(char)
,	O
len_year_max	int
,	O
yy	int
,	O
mm	int
,	O
dd	int
)	O
;	O
rc_check	(*(char),*(char),long,int,*(int),int,int,int)->(void)
(	O
line_buffer	*(char)
,	O
_	O
(	O
"`Internal'"	*(char)
)	O
,	O
(	O
long	O
)	O
tindex	int
,	O
strlen	(*(char))->(long)
(	O
line_buffer	*(char)
)	O
,	O
&	O
rc_elems	int
,	O
day	int
,	O
ed	int
,	O
wd	int
)	O
;	O
}	O
else	O
while	O
(	O
(	O
dd	int
==	O
ld	int
)	O
&&	O
(	O
mm	int
==	O
lm	int
)	O
&&	O
(	O
yy	int
==	O
ly	int
)	O
)	O
if	O
(	O
j	int
+	O
1	int
<	O
rc_e	int
)	O
{	O
j	int
++	O
;	O
(	O
void	O
)	O
rc_get_date	(*(char),*(struct(int,int,*(char),*(char),*(char),*(char))),int,*(int),*(int),*(int),*(int),*(int),*(int),*(char),*(int),*(int),*(char),long,*(char),int)->(*(struct(int,int,*(char),*(char),*(char),*(char))))
(	O
rc_elems_table	*(*(char))
[	O
j	int
]	O
,	O
lineptrs	*(struct(int,int,*(char),*(char),*(char),*(char)))
,	O
FALSE	O
,	O
&	O
b_dummy	int
,	O
&	O
ld	int
,	O
&	O
lm	int
,	O
&	O
ly	int
,	O
&	O
i_dummy	int
,	O
&	O
i_dummy	int
,	O
&	O
c_dummy	char
,	O
&	O
i_dummy	int
,	O
&	O
i_dummy	int
,	O
_	O
(	O
"Internal"	*(char)
)	O
,	O
(	O
long	O
)	O
j	int
,	O
rc_elems_table	*(*(char))
[	O
j	int
]	O
,	O
TRUE	O
)	O
;	O
}	O
else	O
{	O
j	int
++	O
;	O
break	O
;	O
}	O
}	O
}	O
is_leap_year	int
=	O
(	O
days_of_february	(int)->(int)
(	O
year	int
)	O
==	O
29	int
)	O
;	O
}	O
if	O
(	O
(	O
rc_zero_dates_flag	int
&&	O
(	O
rc_elems	int
-	O
rc_zero_pos	int
)	O
)	O
||	O
(	O
!	O
rc_zero_dates_flag	int
&&	O
rc_elems	int
)	O
)	O
{	O
register	O
int	O
tstart	int
;	O
register	O
int	O
tend	int
;	O
register	O
int	O
skipped	int
;	O
register	O
int	O
len_rce	int
=	O
0	int
;	O
register	O
int	O
len_line	int
;	O
register	O
int	O
len_fn_part	int
;	O
register	O
int	O
len_text_part	int
;	O
register	O
int	O
hls_len	int
=	O
0	int
;	O
auto	O
char	O
*	O
ptr_char	*(char)
;	O
auto	O
Bool	int
same_date	int
=	O
FALSE	O
;	O
auto	O
Bool	int
ok2	int
;	O
if	O
(	O
!	O
rc_zero_dates_flag	int
&&	O
(	O
rc_elems	int
>	O
1	int
)	O
)	O
{	O
if	O
(	O
rc_enable_fn_flag	int
)	O
{	O
if	O
(	O
rc_sort_des_flag	int
)	O
qsort	(*(void),long,long,*((*(void),*(void))->(int)))->(void)
(	O
(	O
VOID_PTR	O
)	O
rc_elems_table	*(*(char))
,	O
rc_elems	int
,	O
sizeof	O
*	O
rc_elems_table	*(*(char))
,	O
(	O
Cmp_func	*((*(void),*(void))->(int))
)	O
fn_des_sort	(*(*(char)),*(*(char)))->(int)
)	O
;	O
else	O
qsort	(*(void),long,long,*((*(void),*(void))->(int)))->(void)
(	O
(	O
VOID_PTR	O
)	O
rc_elems_table	*(*(char))
,	O
rc_elems	int
,	O
sizeof	O
*	O
rc_elems_table	*(*(char))
,	O
(	O
Cmp_func	*((*(void),*(void))->(int))
)	O
fn_asc_sort	(*(*(char)),*(*(char)))->(int)
)	O
;	O
}	O
else	O
if	O
(	O
!	O
is_presorted	(*(*(char)),int)->(int)
(	O
rc_elems_table	*(*(char))
,	O
rc_elems	int
)	O
)	O
{	O
if	O
(	O
rc_sort_des_flag	int
)	O
qsort	(*(void),long,long,*((*(void),*(void))->(int)))->(void)
(	O
(	O
VOID_PTR	O
)	O
rc_elems_table	*(*(char))
,	O
rc_elems	int
,	O
sizeof	O
*	O
rc_elems_table	*(*(char))
,	O
(	O
Cmp_func	*((*(void),*(void))->(int))
)	O
des_sort	(*(*(char)),*(*(char)))->(int)
)	O
;	O
else	O
qsort	(*(void),long,long,*((*(void),*(void))->(int)))->(void)
(	O
(	O
VOID_PTR	O
)	O
rc_elems_table	*(*(char))
,	O
rc_elems	int
,	O
sizeof	O
*	O
rc_elems_table	*(*(char))
,	O
(	O
Cmp_func	*((*(void),*(void))->(int))
)	O
asc_sort	(*(*(char)),*(*(char)))->(int)
)	O
;	O
}	O
else	O
if	O
(	O
rc_sort_des_flag	int
)	O
reverse_order	(*(*(char)),int)->(void)
(	O
rc_elems_table	*(*(char))
,	O
rc_elems	int
)	O
;	O
}	O
d	int
=	O
tmp_ad	int
;	O
m	int
=	O
tmp_am	int
;	O
if	O
(	O
rc_grp_sep	*(char)
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
register	O
int	O
x1	int
=	O
year	int
;	O
register	O
int	O
x2	int
=	O
incr_year	int
;	O
register	O
int	O
x3	int
=	O
decr_year	int
;	O
year	int
=	O
act_year	int
;	O
incr_year	int
=	O
decr_year	int
=	O
0	int
;	O
insert_line_into_table	(*(char),*(char),long,*(int),int,int)->(void)
(	O
rc_grp_sep	*(char)
,	O
_	O
(	O
"`Internal'"	*(char)
)	O
,	O
(	O
long	O
)	O
SPECIAL_VALUE	O
,	O
&	O
rc_elems	int
,	O
1	int
,	O
1	int
)	O
;	O
decr_year	int
=	O
x3	int
;	O
incr_year	int
=	O
x2	int
;	O
year	int
=	O
x1	int
;	O
i	int
=	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
rc_elems_table	*(*(char))
[	O
--	O
rc_elems	int
]	O
)	O
;	O
if	O
(	O
(	O
Uint	int
)	O
i	int
>=	O
maxlen_max	int
)	O
resize_all_strings	(int,int,*(char),long)->(void)
(	O
i	int
+	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
s3	*(char)
,	O
rc_elems_table	*(*(char))
[	O
rc_elems	int
]	O
+	O
len_year_max	int
+	O
5	int
)	O
;	O
free	(*(void))->(void)
(	O
rc_elems_table	*(*(char))
[	O
rc_elems	int
]	O
)	O
;	O
ptr_char	*(char)
=	O
s3	*(char)
;	O
if	O
(	O
*	O
ptr_char	*(char)
)	O
{	O
i	int
=	O
0	int
;	O
while	O
(	O
*	O
ptr_char	*(char)
)	O
{	O
switch	O
(	O
*	O
ptr_char	*(char)
)	O
{	O
case	O
RC_NL_CHAR	char
:	O
case	O
RC_NL2_CHAR	char
:	O
if	O
(	O
i	int
)	O
{	O
if	O
(	O
s3	*(char)
[	O
i	int
-	O
1	int
]	O
==	O
QUOTE_CHAR	char
)	O
s3	*(char)
[	O
i	int
-	O
1	int
]	O
=	O
*	O
ptr_char	*(char)
;	O
else	O
s3	*(char)
[	O
i	int
++	O
]	O
=	O
'\n'	O
;	O
}	O
else	O
s3	*(char)
[	O
i	int
++	O
]	O
=	O
'\n'	O
;	O
break	O
;	O
case	O
QUOTE_CHAR	char
:	O
ptr_char	*(char)
++	O
;	O
if	O
(	O
*	O
ptr_char	*(char)
)	O
{	O
if	O
(	O
*	O
ptr_char	*(char)
==	O
RC_NL_CHAR	char
||	O
*	O
ptr_char	*(char)
==	O
RC_NL2_CHAR	char
)	O
s3	*(char)
[	O
i	int
++	O
]	O
=	O
*	O
ptr_char	*(char)
;	O
else	O
{	O
s3	*(char)
[	O
i	int
++	O
]	O
=	O
QUOTE_CHAR	char
;	O
s3	*(char)
[	O
i	int
++	O
]	O
=	O
*	O
ptr_char	*(char)
;	O
}	O
}	O
else	O
s3	*(char)
[	O
i	int
++	O
]	O
=	O
QUOTE_CHAR	char
;	O
break	O
;	O
default	O
:	O
s3	*(char)
[	O
i	int
++	O
]	O
=	O
*	O
ptr_char	*(char)
;	O
}	O
ptr_char	*(char)
++	O
;	O
}	O
s3	*(char)
[	O
i	int
]	O
=	O
'\0'	O
;	O
}	O
}	O
(	O
*	O
s1	*(char)
)	O
=	O
(	O
*	O
s6	*(char)
)	O
=	O
'\0'	O
;	O
if	O
(	O
!	O
rc_suppr_list_sep_flag	int
)	O
print_text	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(void)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
s1	*(char)
)	O
;	O
if	O
(	O
rc_title_flag	int
)	O
{	O
register	O
int	O
x1	int
=	O
year	int
;	O
register	O
int	O
x2	int
=	O
incr_year	int
;	O
register	O
int	O
x3	int
=	O
decr_year	int
;	O
year	int
=	O
act_year	int
;	O
incr_year	int
=	O
decr_year	int
=	O
0	int
;	O
insert_line_into_table	(*(char),*(char),long,*(int),int,int)->(void)
(	O
rc_heading_text	*(char)
,	O
_	O
(	O
"`Internal'"	*(char)
)	O
,	O
(	O
long	O
)	O
SPECIAL_VALUE	O
,	O
&	O
rc_elems	int
,	O
1	int
,	O
1	int
)	O
;	O
decr_year	int
=	O
x3	int
;	O
incr_year	int
=	O
x2	int
;	O
year	int
=	O
x1	int
;	O
i	int
=	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
rc_elems_table	*(*(char))
[	O
--	O
rc_elems	int
]	O
)	O
;	O
if	O
(	O
(	O
Uint	int
)	O
i	int
>=	O
maxlen_max	int
)	O
resize_all_strings	(int,int,*(char),long)->(void)
(	O
i	int
+	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
s1	*(char)
,	O
rc_elems_table	*(*(char))
[	O
rc_elems	int
]	O
+	O
len_year_max	int
+	O
5	int
)	O
;	O
free	(*(void))->(void)
(	O
rc_elems_table	*(*(char))
[	O
rc_elems	int
]	O
)	O
;	O
ptr_char	*(char)
=	O
s1	*(char)
;	O
i	int
=	O
0	int
;	O
while	O
(	O
*	O
ptr_char	*(char)
)	O
{	O
switch	O
(	O
*	O
ptr_char	*(char)
)	O
{	O
case	O
RC_NL_CHAR	char
:	O
case	O
RC_NL2_CHAR	char
:	O
if	O
(	O
i	int
)	O
{	O
if	O
(	O
s1	*(char)
[	O
i	int
-	O
1	int
]	O
==	O
QUOTE_CHAR	char
)	O
s1	*(char)
[	O
i	int
-	O
1	int
]	O
=	O
*	O
ptr_char	*(char)
;	O
else	O
s1	*(char)
[	O
i	int
++	O
]	O
=	O
'\n'	O
;	O
}	O
else	O
s1	*(char)
[	O
i	int
++	O
]	O
=	O
'\n'	O
;	O
break	O
;	O
case	O
QUOTE_CHAR	char
:	O
ptr_char	*(char)
++	O
;	O
if	O
(	O
*	O
ptr_char	*(char)
)	O
{	O
if	O
(	O
*	O
ptr_char	*(char)
==	O
RC_NL_CHAR	char
||	O
*	O
ptr_char	*(char)
==	O
RC_NL2_CHAR	char
)	O
s1	*(char)
[	O
i	int
++	O
]	O
=	O
*	O
ptr_char	*(char)
;	O
else	O
{	O
s1	*(char)
[	O
i	int
++	O
]	O
=	O
QUOTE_CHAR	char
;	O
s1	*(char)
[	O
i	int
++	O
]	O
=	O
*	O
ptr_char	*(char)
;	O
}	O
}	O
else	O
s1	*(char)
[	O
i	int
++	O
]	O
=	O
QUOTE_CHAR	char
;	O
break	O
;	O
default	O
:	O
s1	*(char)
[	O
i	int
++	O
]	O
=	O
*	O
ptr_char	*(char)
;	O
}	O
ptr_char	*(char)
++	O
;	O
}	O
s1	*(char)
[	O
i	int
]	O
=	O
'\0'	O
;	O
print_text	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(void)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
s1	*(char)
)	O
;	O
print_text	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(void)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
s1	*(char)
)	O
;	O
}	O
sprintf	(*(char),*(char))->(int)
(	O
s2	*(char)
,	O
"%d"	*(char)
,	O
(	O
rc_zero_dates_flag	int
)	O
?	O
rc_elems	int
-	O
rc_zero_pos	int
:	O
rc_elems	int
)	O
;	O
len_rce	int
=	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
s2	*(char)
)	O
;	O
skipped	int
=	O
tstart	int
=	O
0	int
;	O
tend	int
=	O
rc_elems	int
-	O
1	int
;	O
if	O
(	O
rc_zero_dates_flag	int
)	O
{	O
if	O
(	O
rc_sort_des_flag	int
)	O
{	O
tstart	int
=	O
rc_elems	int
-	O
1	int
;	O
tend	int
=	O
rc_zero_pos	int
;	O
skipped	int
=	O
rc_elems	int
+	O
1	int
;	O
}	O
else	O
skipped	int
=	O
tstart	int
=	O
rc_zero_pos	int
;	O
}	O
tindex	int
=	O
tstart	int
;	O
LOOP	O
{	O
lineptrs	*(struct(int,int,*(char),*(char),*(char),*(char)))
=	O
rc_get_date	(*(char),*(struct(int,int,*(char),*(char),*(char),*(char))),int,*(int),*(int),*(int),*(int),*(int),*(int),*(char),*(int),*(int),*(char),long,*(char),int)->(*(struct(int,int,*(char),*(char),*(char),*(char))))
(	O
rc_elems_table	*(*(char))
[	O
tindex	int
]	O
,	O
lineptrs	*(struct(int,int,*(char),*(char),*(char),*(char)))
,	O
FALSE	O
,	O
&	O
b_dummy	int
,	O
&	O
day	int
,	O
&	O
lm	int
,	O
&	O
ly	int
,	O
&	O
i_dummy	int
,	O
&	O
i_dummy	int
,	O
&	O
c_dummy	char
,	O
&	O
i_dummy	int
,	O
&	O
i_dummy	int
,	O
_	O
(	O
"Internal"	*(char)
)	O
,	O
(	O
long	O
)	O
tindex	int
,	O
rc_elems_table	*(*(char))
[	O
tindex	int
]	O
,	O
TRUE	O
)	O
;	O
if	O
(	O
(	O
tindex	int
==	O
tstart	int
)	O
&&	O
(	O
rc_omit_date_flag	int
||	O
rc_alternative_format_flag	int
||	O
rc_grp_sep	*(char)
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
)	O
{	O
dd	int
=	O
day	int
;	O
mm	int
=	O
lm	int
;	O
yy	int
=	O
ly	int
;	O
}	O
if	O
(	O
tindex	int
==	O
tstart	int
||	O
(	O
(	O
tindex	int
!=	O
tstart	int
)	O
&&	O
strcmp	(*(char),*(char))->(int)
(	O
s6	*(char)
,	O
rc_elems_table	*(*(char))
[	O
tindex	int
]	O
)	O
)	O
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
s6	*(char)
,	O
rc_elems_table	*(*(char))
[	O
tindex	int
]	O
)	O
;	O
if	O
(	O
rc_omit_date_flag	int
||	O
rc_alternative_format_flag	int
||	O
rc_grp_sep	*(char)
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
if	O
(	O
(	O
day	int
==	O
dd	int
)	O
&&	O
(	O
lm	int
==	O
mm	int
)	O
&&	O
(	O
ly	int
==	O
yy	int
)	O
)	O
{	O
if	O
(	O
tindex	int
!=	O
tstart	int
)	O
same_date	int
=	O
TRUE	O
;	O
}	O
else	O
{	O
same_date	int
=	O
FALSE	O
;	O
dd	int
=	O
day	int
;	O
mm	int
=	O
lm	int
;	O
yy	int
=	O
ly	int
;	O
if	O
(	O
rc_grp_sep	*(char)
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
s2	*(char)
,	O
s3	*(char)
)	O
;	O
print_text	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(void)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
s2	*(char)
)	O
;	O
}	O
}	O
}	O
if	O
(	O
rc_week_number_flag	int
)	O
{	O
j	int
=	O
week_number	(int,int,int,int,int)->(int)
(	O
day	int
,	O
lm	int
,	O
ly	int
,	O
iso_week_number	int
,	O
start_day	int
)	O
;	O
if	O
(	O
j	int
<	O
0	int
)	O
sprintf	(*(char),*(char))->(int)
(	O
s7	*(char)
,	O
"|%02d/0|"	*(char)
,	O
-	O
j	int
)	O
;	O
else	O
if	O
(	O
!	O
j	int
)	O
sprintf	(*(char),*(char))->(int)
(	O
s7	*(char)
,	O
"|%s|"	*(char)
,	O
"53/1"	*(char)
)	O
;	O
else	O
sprintf	(*(char),*(char))->(int)
(	O
s7	*(char)
,	O
"|%02d|"	*(char)
,	O
j	int
)	O
;	O
if	O
(	O
!	O
rc_alternative_format_flag	int
)	O
{	O
if	O
(	O
strlen	(*(char))->(long)
(	O
s7	*(char)
)	O
>	O
4	int
)	O
{	O
if	O
(	O
rc_count_flag	int
)	O
sprintf	(*(char),*(char))->(int)
(	O
s1	*(char)
,	O
"%0*d)  %s "	*(char)
,	O
len_rce	int
,	O
abs	(int)->(int)
(	O
(	O
tindex	int
-	O
skipped	int
)	O
+	O
1	int
)	O
,	O
s7	*(char)
)	O
;	O
else	O
sprintf	(*(char),*(char))->(int)
(	O
s1	*(char)
,	O
"%s "	*(char)
,	O
s7	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
rc_count_flag	int
)	O
sprintf	(*(char),*(char))->(int)
(	O
s1	*(char)
,	O
"%0*d)  %s%*s "	*(char)
,	O
len_rce	int
,	O
abs	(int)->(int)
(	O
(	O
tindex	int
-	O
skipped	int
)	O
+	O
1	int
)	O
,	O
s7	*(char)
,	O
len_fil_wt	int
,	O
""	*(char)
)	O
;	O
else	O
sprintf	(*(char),*(char))->(int)
(	O
s1	*(char)
,	O
"%s%*s "	*(char)
,	O
s7	*(char)
,	O
len_fil_wt	int
,	O
""	*(char)
)	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
rc_alternative_format_flag	int
&&	O
rc_count_flag	int
)	O
sprintf	(*(char),*(char))->(int)
(	O
s1	*(char)
,	O
"%0*d)  "	*(char)
,	O
len_rce	int
,	O
abs	(int)->(int)
(	O
(	O
tindex	int
-	O
skipped	int
)	O
+	O
1	int
)	O
)	O
;	O
wd	int
=	O
day	int
;	O
ld	int
=	O
day_of_year	(int,int,int)->(int)
(	O
day	int
,	O
lm	int
,	O
ly	int
)	O
;	O
if	O
(	O
!	O
rc_both_dates_flag	int
)	O
{	O
if	O
(	O
!	O
rc_special_flag	int
)	O
ld	int
=	O
0	int
;	O
else	O
day	int
=	O
0	int
;	O
}	O
if	O
(	O
!	O
rc_suppr_date_part_flag	int
)	O
{	O
if	O
(	O
(	O
ly	int
==	O
tmp_ay	int
)	O
&&	O
(	O
lm	int
==	O
tmp_am	int
)	O
&&	O
(	O
wd	int
==	O
tmp_ad	int
)	O
)	O
hls_len	int
=	O
decode_date_format	(*(char),*(*(char)),int,int,int,int,int,int,int)->(int)
(	O
date_format	*(struct(*(char),*(char),*(char)))
->	O
df_format	*(char)
,	O
&	O
s1	*(char)
,	O
day	int
,	O
lm	int
,	O
ly	int
,	O
ld	int
,	O
TRUE	O
,	O
FALSE	O
,	O
!	O
rc_alternative_format_flag	int
)	O
;	O
else	O
{	O
if	O
(	O
hd_ldays	array(char)
[	O
(	O
(	O
lm	int
-	O
1	int
)	O
*	O
MONTH_LAST	int
)	O
+	O
(	O
wd	int
-	O
1	int
)	O
]	O
)	O
hls_len	int
=	O
decode_date_format	(*(char),*(*(char)),int,int,int,int,int,int,int)->(int)
(	O
date_format	*(struct(*(char),*(char),*(char)))
->	O
df_format	*(char)
,	O
&	O
s1	*(char)
,	O
day	int
,	O
lm	int
,	O
ly	int
,	O
ld	int
,	O
FALSE	O
,	O
TRUE	O
,	O
!	O
rc_alternative_format_flag	int
)	O
;	O
else	O
hls_len	int
=	O
decode_date_format	(*(char),*(*(char)),int,int,int,int,int,int,int)->(int)
(	O
date_format	*(struct(*(char),*(char),*(char)))
->	O
df_format	*(char)
,	O
&	O
s1	*(char)
,	O
day	int
,	O
lm	int
,	O
ly	int
,	O
ld	int
,	O
FALSE	O
,	O
FALSE	O
,	O
!	O
rc_alternative_format_flag	int
)	O
;	O
}	O
if	O
(	O
rc_alternative_format_flag	int
&&	O
rc_week_number_flag	int
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
s2	*(char)
,	O
_	O
(	O
" ; Week %s"	*(char)
)	O
,	O
s7	*(char)
)	O
;	O
}	O
else	O
*	O
s2	*(char)
=	O
'\0'	O
;	O
}	O
else	O
{	O
if	O
(	O
rc_alternative_format_flag	int
&&	O
rc_week_number_flag	int
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
s2	*(char)
,	O
_	O
(	O
"Week %s"	*(char)
)	O
,	O
s7	*(char)
)	O
;	O
}	O
else	O
*	O
s2	*(char)
=	O
'\0'	O
;	O
}	O
if	O
(	O
*	O
s2	*(char)
||	O
!	O
rc_suppr_date_part_flag	int
)	O
{	O
strcat	(*(char),*(char))->(*(char))
(	O
s2	*(char)
,	O
":"	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
s1	*(char)
,	O
s2	*(char)
)	O
;	O
}	O
j	int
=	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
s1	*(char)
)	O
-	O
hls_len	int
;	O
if	O
(	O
*	O
lineptrs	*(struct(int,int,*(char),*(char),*(char),*(char)))
->	O
text_part	*(char)
==	O
' '	O
)	O
lineptrs	*(struct(int,int,*(char),*(char),*(char),*(char)))
->	O
text_part	*(char)
++	O
;	O
len_text_part	int
=	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
lineptrs	*(struct(int,int,*(char),*(char),*(char),*(char)))
->	O
text_part	*(char)
)	O
;	O
if	O
(	O
rc_alternative_format_flag	int
)	O
{	O
if	O
(	O
!	O
same_date	int
&&	O
*	O
s1	*(char)
)	O
print_text	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(void)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
s1	*(char)
)	O
;	O
if	O
(	O
rc_count_flag	int
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
s1	*(char)
,	O
"%0*d)"	*(char)
,	O
len_rce	int
,	O
abs	(int)->(int)
(	O
(	O
tindex	int
-	O
skipped	int
)	O
+	O
1	int
)	O
)	O
;	O
if	O
(	O
len_text_part	int
)	O
strcat	(*(char),*(char))->(*(char))
(	O
s1	*(char)
,	O
"  "	*(char)
)	O
;	O
}	O
else	O
*	O
s1	*(char)
=	O
'\0'	O
;	O
j	int
=	O
len_line	int
=	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
s1	*(char)
)	O
;	O
}	O
else	O
len_line	int
=	O
j	int
+	O
hls_len	int
+	O
(	O
int	O
)	O
!	O
rc_suppr_date_part_flag	int
;	O
ok	int
=	O
FALSE	O
;	O
len_fn_part	int
=	O
0	int
;	O
if	O
(	O
len_text_part	int
)	O
{	O
if	O
(	O
!	O
rc_alternative_format_flag	int
&&	O
!	O
rc_suppr_date_part_flag	int
)	O
strcat	(*(char),*(char))->(*(char))
(	O
s1	*(char)
,	O
" "	*(char)
)	O
;	O
if	O
(	O
rc_enable_fn_flag	int
)	O
{	O
auto	O
Bool	int
pseudo_quote_found	int
=	O
FALSE	O
;	O
ptr_char	*(char)
=	O
lineptrs	*(struct(int,int,*(char),*(char),*(char),*(char)))
->	O
text_part	*(char)
;	O
while	O
(	O
*	O
ptr_char	*(char)
)	O
{	O
len_fn_part	int
++	O
;	O
if	O
(	O
*	O
ptr_char	*(char)
==	O
PSEUDO_QUOTE	char
)	O
{	O
if	O
(	O
!	O
pseudo_quote_found	int
)	O
pseudo_quote_found	int
=	O
TRUE	O
;	O
else	O
break	O
;	O
}	O
ptr_char	*(char)
++	O
;	O
}	O
if	O
(	O
!	O
*	O
ptr_char	*(char)
)	O
my_error	(int,*(char),long,*(char),int)->(void)
(	O
ERR_MAINTAINER_FAILURE	int
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
,	O
""	*(char)
,	O
0	int
)	O
;	O
c_dummy	char
=	O
*	O
++	O
ptr_char	*(char)
;	O
if	O
(	O
*	O
ptr_char	*(char)
)	O
{	O
len_line	int
++	O
;	O
ptr_char	*(char)
++	O
;	O
c_dummy	char
=	O
*	O
ptr_char	*(char)
;	O
*	O
ptr_char	*(char)
=	O
'\0'	O
;	O
}	O
strcat	(*(char),*(char))->(*(char))
(	O
s1	*(char)
,	O
lineptrs	*(struct(int,int,*(char),*(char),*(char),*(char)))
->	O
text_part	*(char)
)	O
;	O
i	int
=	O
len_fn_part	int
;	O
len_line	int
+=	O
i	int
;	O
if	O
(	O
c_dummy	char
)	O
{	O
*	O
ptr_char	*(char)
=	O
c_dummy	char
;	O
i	int
++	O
;	O
j	int
+=	O
(	O
int	O
)	O
!	O
rc_alternative_format_flag	int
;	O
}	O
len_text_part	int
-=	O
i	int
;	O
lineptrs	*(struct(int,int,*(char),*(char),*(char),*(char)))
->	O
text_part	*(char)
+=	O
i	int
;	O
ptr_char	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
s1	*(char)
,	O
PSEUDO_QUOTE	char
)	O
;	O
if	O
(	O
ptr_char	*(char)
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
my_error	(int,*(char),long,*(char),int)->(void)
(	O
ERR_MAINTAINER_FAILURE	int
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
,	O
""	*(char)
,	O
0	int
)	O
;	O
*	O
ptr_char	*(char)
=	O
'('	O
;	O
ptr_char	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
s1	*(char)
,	O
PSEUDO_QUOTE	char
)	O
;	O
if	O
(	O
ptr_char	*(char)
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
my_error	(int,*(char),long,*(char),int)->(void)
(	O
ERR_MAINTAINER_FAILURE	int
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
,	O
""	*(char)
,	O
0	int
)	O
;	O
*	O
ptr_char	*(char)
=	O
')'	O
;	O
if	O
(	O
*	O
lineptrs	*(struct(int,int,*(char),*(char),*(char),*(char)))
->	O
text_part	*(char)
)	O
if	O
(	O
(	O
*	O
lineptrs	*(struct(int,int,*(char),*(char),*(char),*(char)))
->	O
text_part	*(char)
==	O
PSEUDO_QUOTE	char
)	O
&&	O
isspace	(int)->(int)
(	O
lineptrs	*(struct(int,int,*(char),*(char),*(char),*(char)))
->	O
text_part	*(char)
[	O
1	int
]	O
)	O
)	O
{	O
lineptrs	*(struct(int,int,*(char),*(char),*(char),*(char)))
->	O
text_part	*(char)
++	O
;	O
len_text_part	int
--	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
(	O
*	O
lineptrs	*(struct(int,int,*(char),*(char),*(char),*(char)))
->	O
text_part	*(char)
==	O
PSEUDO_QUOTE	char
)	O
&&	O
isspace	(int)->(int)
(	O
lineptrs	*(struct(int,int,*(char),*(char),*(char),*(char)))
->	O
text_part	*(char)
[	O
1	int
]	O
)	O
)	O
{	O
lineptrs	*(struct(int,int,*(char),*(char),*(char),*(char)))
->	O
text_part	*(char)
++	O
;	O
len_text_part	int
--	O
;	O
}	O
}	O
ok	int
=	O
(	O
Bool	int
)	O
(	O
strchr	(*(char),int)->(*(char))
(	O
lineptrs	*(struct(int,int,*(char),*(char),*(char),*(char)))
->	O
text_part	*(char)
,	O
RC_NL_CHAR	char
)	O
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
ok2	int
=	O
(	O
Bool	int
)	O
(	O
strchr	(*(char),int)->(*(char))
(	O
lineptrs	*(struct(int,int,*(char),*(char),*(char),*(char)))
->	O
text_part	*(char)
,	O
RC_NL2_CHAR	char
)	O
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
ok	int
&&	O
ok2	int
)	O
{	O
if	O
(	O
*	O
lineptrs	*(struct(int,int,*(char),*(char),*(char),*(char)))
->	O
text_part	*(char)
)	O
{	O
if	O
(	O
(	O
Uint	int
)	O
len_line	int
+	O
len_text_part	int
>=	O
maxlen_max	int
)	O
resize_all_strings	(int,int,*(char),long)->(void)
(	O
len_line	int
+	O
len_text_part	int
+	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
s1	*(char)
,	O
lineptrs	*(struct(int,int,*(char),*(char),*(char),*(char)))
->	O
text_part	*(char)
)	O
;	O
}	O
}	O
else	O
{	O
while	O
(	O
*	O
lineptrs	*(struct(int,int,*(char),*(char),*(char),*(char)))
->	O
text_part	*(char)
)	O
{	O
if	O
(	O
(	O
Uint	int
)	O
len_line	int
>=	O
maxlen_max	int
)	O
resize_all_strings	(int,int,*(char),long)->(void)
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
if	O
(	O
*	O
lineptrs	*(struct(int,int,*(char),*(char),*(char),*(char)))
->	O
text_part	*(char)
==	O
RC_NL_CHAR	char
)	O
{	O
if	O
(	O
s1	*(char)
[	O
len_line	int
-	O
1	int
]	O
==	O
QUOTE_CHAR	char
)	O
s1	*(char)
[	O
len_line	int
-	O
1	int
]	O
=	O
*	O
lineptrs	*(struct(int,int,*(char),*(char),*(char),*(char)))
->	O
text_part	*(char)
;	O
else	O
{	O
s1	*(char)
[	O
len_line	int
++	O
]	O
=	O
'\n'	O
;	O
if	O
(	O
rc_alternative_format_flag	int
&&	O
!	O
rc_enable_fn_flag	int
)	O
n	long
=	O
j	int
;	O
else	O
{	O
n	long
=	O
j	int
+	O
len_fn_part	int
+	O
1	int
;	O
if	O
(	O
!	O
rc_alternative_format_flag	int
)	O
n	long
-=	O
(	O
int	O
)	O
rc_suppr_date_part_flag	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	long
;	O
i	int
++	O
)	O
{	O
if	O
(	O
(	O
Uint	int
)	O
len_line	int
>=	O
maxlen_max	int
)	O
resize_all_strings	(int,int,*(char),long)->(void)
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
s1	*(char)
[	O
len_line	int
++	O
]	O
=	O
' '	O
;	O
}	O
}	O
}	O
else	O
if	O
(	O
*	O
lineptrs	*(struct(int,int,*(char),*(char),*(char),*(char)))
->	O
text_part	*(char)
==	O
RC_NL2_CHAR	char
)	O
{	O
if	O
(	O
s1	*(char)
[	O
len_line	int
-	O
1	int
]	O
==	O
QUOTE_CHAR	char
)	O
s1	*(char)
[	O
len_line	int
-	O
1	int
]	O
=	O
*	O
lineptrs	*(struct(int,int,*(char),*(char),*(char),*(char)))
->	O
text_part	*(char)
;	O
else	O
s1	*(char)
[	O
len_line	int
++	O
]	O
=	O
'\n'	O
;	O
}	O
else	O
s1	*(char)
[	O
len_line	int
++	O
]	O
=	O
*	O
lineptrs	*(struct(int,int,*(char),*(char),*(char),*(char)))
->	O
text_part	*(char)
;	O
lineptrs	*(struct(int,int,*(char),*(char),*(char),*(char)))
->	O
text_part	*(char)
++	O
;	O
}	O
s1	*(char)
[	O
len_line	int
]	O
=	O
'\0'	O
;	O
}	O
}	O
if	O
(	O
rc_omit_date_flag	int
&&	O
!	O
rc_alternative_format_flag	int
&&	O
same_date	int
)	O
{	O
if	O
(	O
rc_count_flag	int
)	O
i	int
=	O
len_rce	int
+	O
3	int
;	O
else	O
i	int
=	O
0	int
;	O
n	long
=	O
j	int
-	O
(	O
int	O
)	O
rc_suppr_date_part_flag	int
;	O
for	O
(	O
;	O
i	int
<	O
n	long
;	O
i	int
++	O
)	O
s1	*(char)
[	O
i	int
]	O
=	O
' '	O
;	O
ptr_char	*(char)
=	O
s1	*(char)
+	O
j	int
+	O
hls_len	int
;	O
for	O
(	O
i	int
=	O
j	int
;	O
*	O
ptr_char	*(char)
;	O
i	int
++	O
)	O
s1	*(char)
[	O
i	int
]	O
=	O
*	O
ptr_char	*(char)
++	O
;	O
s1	*(char)
[	O
i	int
]	O
=	O
'\0'	O
;	O
}	O
if	O
(	O
!	O
rc_alternative_format_flag	int
||	O
len_text_part	int
||	O
len_line	int
)	O
print_text	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(void)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
s1	*(char)
)	O
;	O
}	O
else	O
skipped	int
++	O
;	O
free	(*(void))->(void)
(	O
rc_elems_table	*(*(char))
[	O
tindex	int
]	O
)	O
;	O
if	O
(	O
tindex	int
==	O
tend	int
)	O
break	O
;	O
if	O
(	O
rc_zero_dates_flag	int
&&	O
rc_sort_des_flag	int
)	O
tindex	int
--	O
;	O
else	O
tindex	int
++	O
;	O
}	O
}	O
if	O
(	O
rc_zero_dates_flag	int
&&	O
(	O
rc_elems	int
-	O
rc_zero_pos	int
)	O
)	O
for	O
(	O
tindex	int
=	O
0	int
;	O
tindex	int
<	O
rc_zero_pos	int
;	O
tindex	int
++	O
)	O
free	(*(void))->(void)
(	O
rc_elems_table	*(*(char))
[	O
tindex	int
]	O
)	O
;	O
}	O
static	O
int	O
fn_asc_sort	(*(*(char)),*(*(char)))->(int)
(	O
a	*(*(char))
,	O
b	*(*(char))
)	O
const	O
char	O
*	O
*	O
a	*(*(char))
;	O
const	O
char	O
*	O
*	O
b	*(*(char))
;	O
{	O
static	O
Uint	int
previous_len	int
;	O
static	O
int	O
i	int
;	O
static	O
char	O
*	O
a_text	*(char)
;	O
static	O
char	O
*	O
b_text	*(char)
;	O
static	O
char	O
*	O
ptr_char	*(char)
;	O
static	O
Bool	int
is_initialized	int
=	O
FALSE	O
;	O
if	O
(	O
!	O
is_initialized	int
)	O
{	O
a_text	*(char)
=	O
(	O
char	O
*	O
)	O
my_malloc	(int,int,*(char),long,*(char),int)->(*(void))
(	O
maxlen_max	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
1L	int
,	O
"a_text"	*(char)
,	O
0	int
)	O
;	O
b_text	*(char)
=	O
(	O
char	O
*	O
)	O
my_malloc	(int,int,*(char),long,*(char),int)->(*(void))
(	O
maxlen_max	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
1L	int
,	O
"b_text"	*(char)
,	O
0	int
)	O
;	O
previous_len	int
=	O
maxlen_max	int
;	O
is_initialized	int
=	O
TRUE	O
;	O
}	O
else	O
if	O
(	O
previous_len	int
<	O
maxlen_max	int
)	O
{	O
a_text	*(char)
=	O
(	O
char	O
*	O
)	O
my_realloc	(*(void),int,int,*(char),long,*(char),int)->(*(void))
(	O
(	O
VOID_PTR	O
)	O
a_text	*(char)
,	O
maxlen_max	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"a_text"	*(char)
,	O
maxlen_max	int
)	O
;	O
b_text	*(char)
=	O
(	O
char	O
*	O
)	O
my_realloc	(*(void),int,int,*(char),long,*(char),int)->(*(void))
(	O
(	O
VOID_PTR	O
)	O
b_text	*(char)
,	O
maxlen_max	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"b_text"	*(char)
,	O
maxlen_max	int
)	O
;	O
previous_len	int
=	O
maxlen_max	int
;	O
}	O
i	int
=	O
len_year_max	int
+	O
4	int
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
a_text	*(char)
,	O
*	O
a	*(*(char))
,	O
i	int
)	O
;	O
a_text	*(char)
[	O
i	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
*	O
(	O
*	O
a	*(*(char))
+	O
i	int
+	O
1	int
)	O
!=	O
PSEUDO_QUOTE	char
)	O
my_error	(int,*(char),long,*(char),int)->(void)
(	O
ERR_MAINTAINER_FAILURE	int
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
,	O
""	*(char)
,	O
0	int
)	O
;	O
ptr_char	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
*	O
a	*(*(char))
+	O
i	int
+	O
2	int
,	O
PSEUDO_QUOTE	char
)	O
;	O
if	O
(	O
ptr_char	*(char)
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
my_error	(int,*(char),long,*(char),int)->(void)
(	O
ERR_MAINTAINER_FAILURE	int
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
,	O
""	*(char)
,	O
0	int
)	O
;	O
ptr_char	*(char)
++	O
;	O
if	O
(	O
*	O
ptr_char	*(char)
)	O
strcat	(*(char),*(char))->(*(char))
(	O
a_text	*(char)
,	O
ptr_char	*(char)
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
b_text	*(char)
,	O
*	O
b	*(*(char))
,	O
i	int
)	O
;	O
b_text	*(char)
[	O
i	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
*	O
(	O
*	O
b	*(*(char))
+	O
i	int
+	O
1	int
)	O
!=	O
PSEUDO_QUOTE	char
)	O
my_error	(int,*(char),long,*(char),int)->(void)
(	O
ERR_MAINTAINER_FAILURE	int
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
,	O
""	*(char)
,	O
0	int
)	O
;	O
ptr_char	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
*	O
b	*(*(char))
+	O
i	int
+	O
2	int
,	O
PSEUDO_QUOTE	char
)	O
;	O
if	O
(	O
ptr_char	*(char)
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
my_error	(int,*(char),long,*(char),int)->(void)
(	O
ERR_MAINTAINER_FAILURE	int
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
,	O
""	*(char)
,	O
0	int
)	O
;	O
ptr_char	*(char)
++	O
;	O
if	O
(	O
*	O
ptr_char	*(char)
)	O
strcat	(*(char),*(char))->(*(char))
(	O
b_text	*(char)
,	O
ptr_char	*(char)
)	O
;	O
return	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
a_text	*(char)
,	O
b_text	*(char)
)	O
)	O
;	O
}	O
static	O
int	O
fn_des_sort	(*(*(char)),*(*(char)))->(int)
(	O
a	*(*(char))
,	O
b	*(*(char))
)	O
const	O
char	O
*	O
*	O
a	*(*(char))
;	O
const	O
char	O
*	O
*	O
b	*(*(char))
;	O
{	O
static	O
Uint	int
previous_len	int
;	O
static	O
int	O
i	int
;	O
static	O
char	O
*	O
a_text	*(char)
;	O
static	O
char	O
*	O
b_text	*(char)
;	O
static	O
char	O
*	O
ptr_char	*(char)
;	O
static	O
Bool	int
is_initialized	int
=	O
FALSE	O
;	O
if	O
(	O
!	O
is_initialized	int
)	O
{	O
a_text	*(char)
=	O
(	O
char	O
*	O
)	O
my_malloc	(int,int,*(char),long,*(char),int)->(*(void))
(	O
maxlen_max	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
1L	int
,	O
"a_text"	*(char)
,	O
0	int
)	O
;	O
b_text	*(char)
=	O
(	O
char	O
*	O
)	O
my_malloc	(int,int,*(char),long,*(char),int)->(*(void))
(	O
maxlen_max	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
1L	int
,	O
"b_text"	*(char)
,	O
0	int
)	O
;	O
previous_len	int
=	O
maxlen_max	int
;	O
is_initialized	int
=	O
TRUE	O
;	O
}	O
else	O
if	O
(	O
previous_len	int
<	O
maxlen_max	int
)	O
{	O
a_text	*(char)
=	O
(	O
char	O
*	O
)	O
my_realloc	(*(void),int,int,*(char),long,*(char),int)->(*(void))
(	O
(	O
VOID_PTR	O
)	O
a_text	*(char)
,	O
maxlen_max	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"a_text"	*(char)
,	O
maxlen_max	int
)	O
;	O
b_text	*(char)
=	O
(	O
char	O
*	O
)	O
my_realloc	(*(void),int,int,*(char),long,*(char),int)->(*(void))
(	O
(	O
VOID_PTR	O
)	O
b_text	*(char)
,	O
maxlen_max	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"b_text"	*(char)
,	O
maxlen_max	int
)	O
;	O
previous_len	int
=	O
maxlen_max	int
;	O
}	O
i	int
=	O
len_year_max	int
+	O
4	int
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
a_text	*(char)
,	O
*	O
a	*(*(char))
,	O
i	int
)	O
;	O
a_text	*(char)
[	O
i	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
*	O
(	O
*	O
a	*(*(char))
+	O
i	int
+	O
1	int
)	O
!=	O
PSEUDO_QUOTE	char
)	O
my_error	(int,*(char),long,*(char),int)->(void)
(	O
ERR_MAINTAINER_FAILURE	int
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
,	O
""	*(char)
,	O
0	int
)	O
;	O
ptr_char	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
*	O
a	*(*(char))
+	O
i	int
+	O
2	int
,	O
PSEUDO_QUOTE	char
)	O
;	O
if	O
(	O
ptr_char	*(char)
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
my_error	(int,*(char),long,*(char),int)->(void)
(	O
ERR_MAINTAINER_FAILURE	int
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
,	O
""	*(char)
,	O
0	int
)	O
;	O
ptr_char	*(char)
++	O
;	O
if	O
(	O
*	O
ptr_char	*(char)
)	O
strcat	(*(char),*(char))->(*(char))
(	O
a_text	*(char)
,	O
ptr_char	*(char)
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
b_text	*(char)
,	O
*	O
b	*(*(char))
,	O
i	int
)	O
;	O
b_text	*(char)
[	O
i	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
*	O
(	O
*	O
b	*(*(char))
+	O
i	int
+	O
1	int
)	O
!=	O
PSEUDO_QUOTE	char
)	O
my_error	(int,*(char),long,*(char),int)->(void)
(	O
ERR_MAINTAINER_FAILURE	int
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
,	O
""	*(char)
,	O
0	int
)	O
;	O
ptr_char	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
*	O
b	*(*(char))
+	O
i	int
+	O
2	int
,	O
PSEUDO_QUOTE	char
)	O
;	O
if	O
(	O
ptr_char	*(char)
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
my_error	(int,*(char),long,*(char),int)->(void)
(	O
ERR_MAINTAINER_FAILURE	int
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
,	O
""	*(char)
,	O
0	int
)	O
;	O
ptr_char	*(char)
++	O
;	O
if	O
(	O
*	O
ptr_char	*(char)
)	O
strcat	(*(char),*(char))->(*(char))
(	O
b_text	*(char)
,	O
ptr_char	*(char)
)	O
;	O
return	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
b_text	*(char)
,	O
a_text	*(char)
)	O
)	O
;	O
}	O
