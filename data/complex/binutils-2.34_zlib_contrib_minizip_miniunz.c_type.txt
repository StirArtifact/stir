void	O
change_file_date	(*(char),long,struct(int,int,int,int,int,int))->(void)
(	O
filename	*(char)
,	O
dosdate	long
,	O
tmu_date	struct(int,int,int,int,int,int)
)	O
const	O
char	O
*	O
filename	*(char)
;	O
uLong	long
dosdate	long
;	O
tm_unz	struct(int,int,int,int,int,int)
tmu_date	struct(int,int,int,int,int,int)
;	O
{	O
struct	O
utimbuf	struct(long,long)
ut	struct(long,long)
;	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
newdate	struct(int,int,int,int,int,int,int,int,int,long,*(char))
;	O
newdate	struct(int,int,int,int,int,int,int,int,int,long,*(char))
.	O
tm_sec	int
=	O
tmu_date	struct(int,int,int,int,int,int)
.	O
tm_sec	int
;	O
newdate	struct(int,int,int,int,int,int,int,int,int,long,*(char))
.	O
tm_min	int
=	O
tmu_date	struct(int,int,int,int,int,int)
.	O
tm_min	int
;	O
newdate	struct(int,int,int,int,int,int,int,int,int,long,*(char))
.	O
tm_hour	int
=	O
tmu_date	struct(int,int,int,int,int,int)
.	O
tm_hour	int
;	O
newdate	struct(int,int,int,int,int,int,int,int,int,long,*(char))
.	O
tm_mday	int
=	O
tmu_date	struct(int,int,int,int,int,int)
.	O
tm_mday	int
;	O
newdate	struct(int,int,int,int,int,int,int,int,int,long,*(char))
.	O
tm_mon	int
=	O
tmu_date	struct(int,int,int,int,int,int)
.	O
tm_mon	int
;	O
if	O
(	O
tmu_date	struct(int,int,int,int,int,int)
.	O
tm_year	int
>	O
1900	int
)	O
newdate	struct(int,int,int,int,int,int,int,int,int,long,*(char))
.	O
tm_year	int
=	O
tmu_date	struct(int,int,int,int,int,int)
.	O
tm_year	int
-	O
1900	int
;	O
else	O
newdate	struct(int,int,int,int,int,int,int,int,int,long,*(char))
.	O
tm_year	int
=	O
tmu_date	struct(int,int,int,int,int,int)
.	O
tm_year	int
;	O
newdate	struct(int,int,int,int,int,int,int,int,int,long,*(char))
.	O
tm_isdst	int
=	O
-	O
1	int
;	O
ut	struct(long,long)
.	O
actime	long
=	O
ut	struct(long,long)
.	O
modtime	long
=	O
mktime	(*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(long)
(	O
&	O
newdate	struct(int,int,int,int,int,int,int,int,int,long,*(char))
)	O
;	O
utime	(*(char),*(struct(long,long)))->(int)
(	O
filename	*(char)
,	O
&	O
ut	struct(long,long)
)	O
;	O
}	O
int	O
mymkdir	(*(char))->(int)
(	O
dirname	*(char)
)	O
const	O
char	O
*	O
dirname	*(char)
;	O
{	O
int	O
ret	int
=	O
0	int
;	O
ret	int
=	O
mkdir	()->(int)
(	O
dirname	*(char)
,	O
0775	int
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
makedir	(*(char))->(int)
(	O
newdir	*(char)
)	O
char	O
*	O
newdir	*(char)
;	O
{	O
char	O
*	O
buffer	*(char)
;	O
char	O
*	O
p	*(char)
;	O
int	O
len	int
=	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
newdir	*(char)
)	O
;	O
if	O
(	O
len	int
<=	O
0	int
)	O
return	O
0	int
;	O
buffer	*(char)
=	O
(	O
char	O
*	O
)	O
malloc	(long)->(*(void))
(	O
len	int
+	O
1	int
)	O
;	O
if	O
(	O
buffer	*(char)
==	O
NULL	O
)	O
{	O
printf	(*(char))->(int)
(	O
"Error allocating memory\n"	*(char)
)	O
;	O
return	O
UNZ_INTERNALERROR	O
;	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
buffer	*(char)
,	O
newdir	*(char)
)	O
;	O
if	O
(	O
buffer	*(char)
[	O
len	int
-	O
1	int
]	O
==	O
'/'	O
)	O
{	O
buffer	*(char)
[	O
len	int
-	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
if	O
(	O
mymkdir	(*(char))->(int)
(	O
buffer	*(char)
)	O
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
buffer	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
p	*(char)
=	O
buffer	*(char)
+	O
1	int
;	O
while	O
(	O
1	int
)	O
{	O
char	O
hold	char
;	O
while	O
(	O
*	O
p	*(char)
&&	O
*	O
p	*(char)
!=	O
'\\'	O
&&	O
*	O
p	*(char)
!=	O
'/'	O
)	O
p	*(char)
++	O
;	O
hold	char
=	O
*	O
p	*(char)
;	O
*	O
p	*(char)
=	O
0	int
;	O
if	O
(	O
(	O
mymkdir	(*(char))->(int)
(	O
buffer	*(char)
)	O
==	O
-	O
1	int
)	O
&&	O
(	O
errno	O
==	O
ENOENT	int
)	O
)	O
{	O
printf	(*(char))->(int)
(	O
"couldn't create directory %s\n"	*(char)
,	O
buffer	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
buffer	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
hold	char
==	O
0	int
)	O
break	O
;	O
*	O
p	*(char)
++	O
=	O
hold	char
;	O
}	O
free	(*(void))->(void)
(	O
buffer	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
void	O
do_banner	()->(void)
(	O
)	O
{	O
printf	(*(char))->(int)
(	O
"MiniUnz 1.01b, demo of zLib + Unz package written by Gilles Vollant\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"more info at http://www.winimage.com/zLibDll/unzip.html\n\n"	*(char)
)	O
;	O
}	O
void	O
do_help	()->(void)
(	O
)	O
{	O
printf	(*(char))->(int)
(	O
"Usage : miniunz [-e] [-x] [-v] [-l] [-o] [-p password] file.zip [file_to_extr.] [-d extractdir]\n\n"	*(char)
"  -e  Extract without pathname (junk paths)\n"	*(char)
"  -x  Extract with pathname\n"	*(char)
"  -v  list files\n"	*(char)
"  -l  list files\n"	*(char)
"  -d  directory to extract into\n"	*(char)
"  -o  overwrite files without prompting\n"	*(char)
"  -p  extract crypted file using password\n\n"	*(char)
)	O
;	O
}	O
void	O
Display64BitsSize	(long long,int)->(void)
(	O
ZPOS64_T	long long
n	long long
,	O
int	O
size_char	int
)	O
{	O
char	O
number	array(char)
[	O
21	int
]	O
;	O
int	O
offset	long
=	O
19	int
;	O
int	O
pos_string	int
=	O
19	int
;	O
number	array(char)
[	O
20	int
]	O
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
number	array(char)
[	O
offset	long
]	O
=	O
(	O
char	O
)	O
(	O
(	O
n	long long
%	O
10	int
)	O
+	O
'0'	O
)	O
;	O
if	O
(	O
number	array(char)
[	O
offset	long
]	O
!=	O
'0'	O
)	O
pos_string	int
=	O
offset	long
;	O
n	long long
/=	O
10	int
;	O
if	O
(	O
offset	long
==	O
0	int
)	O
break	O
;	O
offset	long
--	O
;	O
}	O
{	O
int	O
size_display_string	int
=	O
19	int
-	O
pos_string	int
;	O
while	O
(	O
size_char	int
>	O
size_display_string	int
)	O
{	O
size_char	int
--	O
;	O
printf	(*(char))->(int)
(	O
" "	*(char)
)	O
;	O
}	O
}	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
&	O
number	array(char)
[	O
pos_string	int
]	O
)	O
;	O
}	O
int	O
do_list	(*(void))->(int)
(	O
uf	*(void)
)	O
unzFile	*(void)
uf	*(void)
;	O
{	O
uLong	long
i	long
;	O
unz_global_info64	struct(long long,long)
gi	struct(long long,long)
;	O
int	O
err	int
;	O
err	int
=	O
unzGetGlobalInfo64	(*(void),*(struct(long long,long)))->(int)
(	O
uf	*(void)
,	O
&	O
gi	struct(long long,long)
)	O
;	O
if	O
(	O
err	int
!=	O
UNZ_OK	O
)	O
printf	(*(char))->(int)
(	O
"error %d with zipfile in unzGetGlobalInfo \n"	*(char)
,	O
err	int
)	O
;	O
printf	(*(char))->(int)
(	O
"  Length  Method     Size Ratio   Date    Time   CRC-32     Name\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"  ------  ------     ---- -----   ----    ----   ------     ----\n"	*(char)
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
gi	struct(long long,long)
.	O
number_entry	long long
;	O
i	long
++	O
)	O
{	O
char	O
filename_inzip	array(char)
[	O
256	int
]	O
;	O
unz_file_info64	struct(long,long,long,long,long,long,long long,long long,long,long,long,long,long,long,struct(int,int,int,int,int,int))
file_info	struct(long,long,long,long,long,long,long long,long long,long,long,long,long,long,long,struct(int,int,int,int,int,int))
;	O
uLong	long
ratio	long
=	O
0	int
;	O
const	O
char	O
*	O
string_method	*(char)
;	O
char	O
charCrypt	char
=	O
' '	O
;	O
err	int
=	O
unzGetCurrentFileInfo64	(*(void),*(struct(long,long,long,long,long,long,long long,long long,long,long,long,long,long,long,struct(int,int,int,int,int,int))),*(char),long,*(void),long,*(char),long)->(int)
(	O
uf	*(void)
,	O
&	O
file_info	struct(long,long,long,long,long,long,long long,long long,long,long,long,long,long,long,struct(int,int,int,int,int,int))
,	O
filename_inzip	array(char)
,	O
sizeof	O
(	O
filename_inzip	array(char)
)	O
,	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
err	int
!=	O
UNZ_OK	O
)	O
{	O
printf	(*(char))->(int)
(	O
"error %d with zipfile in unzGetCurrentFileInfo\n"	*(char)
,	O
err	int
)	O
;	O
break	O
;	O
}	O
if	O
(	O
file_info	struct(long,long,long,long,long,long,long long,long long,long,long,long,long,long,long,struct(int,int,int,int,int,int))
.	O
uncompressed_size	long long
>	O
0	int
)	O
ratio	long
=	O
(	O
uLong	long
)	O
(	O
(	O
file_info	struct(long,long,long,long,long,long,long long,long long,long,long,long,long,long,long,struct(int,int,int,int,int,int))
.	O
compressed_size	long long
*	O
100	int
)	O
/	O
file_info	struct(long,long,long,long,long,long,long long,long long,long,long,long,long,long,long,struct(int,int,int,int,int,int))
.	O
uncompressed_size	long long
)	O
;	O
if	O
(	O
(	O
file_info	struct(long,long,long,long,long,long,long long,long long,long,long,long,long,long,long,struct(int,int,int,int,int,int))
.	O
flag	long
&	O
1	int
)	O
!=	O
0	int
)	O
charCrypt	char
=	O
'*'	O
;	O
if	O
(	O
file_info	struct(long,long,long,long,long,long,long long,long long,long,long,long,long,long,long,struct(int,int,int,int,int,int))
.	O
compression_method	long
==	O
0	int
)	O
string_method	*(char)
=	O
"Stored"	*(char)
;	O
else	O
if	O
(	O
file_info	struct(long,long,long,long,long,long,long long,long long,long,long,long,long,long,long,struct(int,int,int,int,int,int))
.	O
compression_method	long
==	O
Z_DEFLATED	int
)	O
{	O
uInt	int
iLevel	int
=	O
(	O
uInt	int
)	O
(	O
(	O
file_info	struct(long,long,long,long,long,long,long long,long long,long,long,long,long,long,long,struct(int,int,int,int,int,int))
.	O
flag	long
&	O
0x6	int
)	O
/	O
2	int
)	O
;	O
if	O
(	O
iLevel	int
==	O
0	int
)	O
string_method	*(char)
=	O
"Defl:N"	*(char)
;	O
else	O
if	O
(	O
iLevel	int
==	O
1	int
)	O
string_method	*(char)
=	O
"Defl:X"	*(char)
;	O
else	O
if	O
(	O
(	O
iLevel	int
==	O
2	int
)	O
||	O
(	O
iLevel	int
==	O
3	int
)	O
)	O
string_method	*(char)
=	O
"Defl:F"	*(char)
;	O
}	O
else	O
if	O
(	O
file_info	struct(long,long,long,long,long,long,long long,long long,long,long,long,long,long,long,struct(int,int,int,int,int,int))
.	O
compression_method	long
==	O
Z_BZIP2ED	int
)	O
{	O
string_method	*(char)
=	O
"BZip2 "	*(char)
;	O
}	O
else	O
string_method	*(char)
=	O
"Unkn. "	*(char)
;	O
Display64BitsSize	(long long,int)->(void)
(	O
file_info	struct(long,long,long,long,long,long,long long,long long,long,long,long,long,long,long,struct(int,int,int,int,int,int))
.	O
uncompressed_size	long long
,	O
7	int
)	O
;	O
printf	(*(char))->(int)
(	O
"  %6s%c"	*(char)
,	O
string_method	*(char)
,	O
charCrypt	char
)	O
;	O
Display64BitsSize	(long long,int)->(void)
(	O
file_info	struct(long,long,long,long,long,long,long long,long long,long,long,long,long,long,long,struct(int,int,int,int,int,int))
.	O
compressed_size	long long
,	O
7	int
)	O
;	O
printf	(*(char))->(int)
(	O
" %3lu%%  %2.2lu-%2.2lu-%2.2lu  %2.2lu:%2.2lu  %8.8lx   %s\n"	*(char)
,	O
ratio	long
,	O
(	O
uLong	long
)	O
file_info	struct(long,long,long,long,long,long,long long,long long,long,long,long,long,long,long,struct(int,int,int,int,int,int))
.	O
tmu_date	struct(int,int,int,int,int,int)
.	O
tm_mon	int
+	O
1	int
,	O
(	O
uLong	long
)	O
file_info	struct(long,long,long,long,long,long,long long,long long,long,long,long,long,long,long,struct(int,int,int,int,int,int))
.	O
tmu_date	struct(int,int,int,int,int,int)
.	O
tm_mday	int
,	O
(	O
uLong	long
)	O
file_info	struct(long,long,long,long,long,long,long long,long long,long,long,long,long,long,long,struct(int,int,int,int,int,int))
.	O
tmu_date	struct(int,int,int,int,int,int)
.	O
tm_year	int
%	O
100	int
,	O
(	O
uLong	long
)	O
file_info	struct(long,long,long,long,long,long,long long,long long,long,long,long,long,long,long,struct(int,int,int,int,int,int))
.	O
tmu_date	struct(int,int,int,int,int,int)
.	O
tm_hour	int
,	O
(	O
uLong	long
)	O
file_info	struct(long,long,long,long,long,long,long long,long long,long,long,long,long,long,long,struct(int,int,int,int,int,int))
.	O
tmu_date	struct(int,int,int,int,int,int)
.	O
tm_min	int
,	O
(	O
uLong	long
)	O
file_info	struct(long,long,long,long,long,long,long long,long long,long,long,long,long,long,long,struct(int,int,int,int,int,int))
.	O
crc	long
,	O
filename_inzip	array(char)
)	O
;	O
if	O
(	O
(	O
i	long
+	O
1	int
)	O
<	O
gi	struct(long long,long)
.	O
number_entry	long long
)	O
{	O
err	int
=	O
unzGoToNextFile	(*(void))->(int)
(	O
uf	*(void)
)	O
;	O
if	O
(	O
err	int
!=	O
UNZ_OK	O
)	O
{	O
printf	(*(char))->(int)
(	O
"error %d with zipfile in unzGoToNextFile\n"	*(char)
,	O
err	int
)	O
;	O
break	O
;	O
}	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
do_extract_currentfile	(*(void),*(int),*(int),*(char))->(int)
(	O
uf	*(void)
,	O
popt_extract_without_path	*(int)
,	O
popt_overwrite	*(int)
,	O
password	*(char)
)	O
unzFile	*(void)
uf	*(void)
;	O
const	O
int	O
*	O
popt_extract_without_path	*(int)
;	O
int	O
*	O
popt_overwrite	*(int)
;	O
const	O
char	O
*	O
password	*(char)
;	O
{	O
char	O
filename_inzip	array(char)
[	O
256	int
]	O
;	O
char	O
*	O
filename_withoutpath	*(char)
;	O
char	O
*	O
p	*(char)
;	O
int	O
err	int
=	O
UNZ_OK	O
;	O
FILE	struct
*	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
NULL	O
;	O
void	O
*	O
buf	*(void)
;	O
uInt	int
size_buf	int
;	O
unz_file_info64	struct(long,long,long,long,long,long,long long,long long,long,long,long,long,long,long,struct(int,int,int,int,int,int))
file_info	struct(long,long,long,long,long,long,long long,long long,long,long,long,long,long,long,struct(int,int,int,int,int,int))
;	O
uLong	long
ratio	long
=	O
0	int
;	O
err	int
=	O
unzGetCurrentFileInfo64	(*(void),*(struct(long,long,long,long,long,long,long long,long long,long,long,long,long,long,long,struct(int,int,int,int,int,int))),*(char),long,*(void),long,*(char),long)->(int)
(	O
uf	*(void)
,	O
&	O
file_info	struct(long,long,long,long,long,long,long long,long long,long,long,long,long,long,long,struct(int,int,int,int,int,int))
,	O
filename_inzip	array(char)
,	O
sizeof	O
(	O
filename_inzip	array(char)
)	O
,	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
err	int
!=	O
UNZ_OK	O
)	O
{	O
printf	(*(char))->(int)
(	O
"error %d with zipfile in unzGetCurrentFileInfo\n"	*(char)
,	O
err	int
)	O
;	O
return	O
err	int
;	O
}	O
size_buf	int
=	O
WRITEBUFFERSIZE	O
;	O
buf	*(void)
=	O
(	O
void	O
*	O
)	O
malloc	(long)->(*(void))
(	O
size_buf	int
)	O
;	O
if	O
(	O
buf	*(void)
==	O
NULL	O
)	O
{	O
printf	(*(char))->(int)
(	O
"Error allocating memory\n"	*(char)
)	O
;	O
return	O
UNZ_INTERNALERROR	O
;	O
}	O
p	*(char)
=	O
filename_withoutpath	*(char)
=	O
filename_inzip	array(char)
;	O
while	O
(	O
(	O
*	O
p	*(char)
)	O
!=	O
'\0'	O
)	O
{	O
if	O
(	O
(	O
(	O
*	O
p	*(char)
)	O
==	O
'/'	O
)	O
||	O
(	O
(	O
*	O
p	*(char)
)	O
==	O
'\\'	O
)	O
)	O
filename_withoutpath	*(char)
=	O
p	*(char)
+	O
1	int
;	O
p	*(char)
++	O
;	O
}	O
if	O
(	O
(	O
*	O
filename_withoutpath	*(char)
)	O
==	O
'\0'	O
)	O
{	O
if	O
(	O
(	O
*	O
popt_extract_without_path	*(int)
)	O
==	O
0	int
)	O
{	O
printf	(*(char))->(int)
(	O
"creating directory: %s\n"	*(char)
,	O
filename_inzip	array(char)
)	O
;	O
mymkdir	(*(char))->(int)
(	O
filename_inzip	array(char)
)	O
;	O
}	O
}	O
else	O
{	O
const	O
char	O
*	O
write_filename	*(char)
;	O
int	O
skip	int
=	O
0	int
;	O
if	O
(	O
(	O
*	O
popt_extract_without_path	*(int)
)	O
==	O
0	int
)	O
write_filename	*(char)
=	O
filename_inzip	array(char)
;	O
else	O
write_filename	*(char)
=	O
filename_withoutpath	*(char)
;	O
err	int
=	O
unzOpenCurrentFilePassword	(*(void),*(char))->(int)
(	O
uf	*(void)
,	O
password	*(char)
)	O
;	O
if	O
(	O
err	int
!=	O
UNZ_OK	O
)	O
{	O
printf	(*(char))->(int)
(	O
"error %d with zipfile in unzOpenCurrentFilePassword\n"	*(char)
,	O
err	int
)	O
;	O
}	O
if	O
(	O
(	O
(	O
*	O
popt_overwrite	*(int)
)	O
==	O
0	int
)	O
&&	O
(	O
err	int
==	O
UNZ_OK	O
)	O
)	O
{	O
char	O
rep	char
=	O
0	int
;	O
FILE	struct
*	O
ftestexist	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
ftestexist	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
FOPEN_FUNC	O
(	O
write_filename	*(char)
,	O
"rb"	*(char)
)	O
;	O
if	O
(	O
ftestexist	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
!=	O
NULL	O
)	O
{	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
ftestexist	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
do	O
{	O
char	O
answer	array(char)
[	O
128	int
]	O
;	O
int	O
ret	int
;	O
printf	(*(char))->(int)
(	O
"The file %s exists. Overwrite ? [y]es, [n]o, [A]ll: "	*(char)
,	O
write_filename	*(char)
)	O
;	O
ret	int
=	O
scanf	(*(char))->(int)
(	O
"%1s"	*(char)
,	O
answer	array(char)
)	O
;	O
if	O
(	O
ret	int
!=	O
1	int
)	O
{	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
rep	char
=	O
answer	array(char)
[	O
0	int
]	O
;	O
if	O
(	O
(	O
rep	char
>=	O
'a'	O
)	O
&&	O
(	O
rep	char
<=	O
'z'	O
)	O
)	O
rep	char
-=	O
0x20	int
;	O
}	O
while	O
(	O
(	O
rep	char
!=	O
'Y'	O
)	O
&&	O
(	O
rep	char
!=	O
'N'	O
)	O
&&	O
(	O
rep	char
!=	O
'A'	O
)	O
)	O
;	O
}	O
if	O
(	O
rep	char
==	O
'N'	O
)	O
skip	int
=	O
1	int
;	O
if	O
(	O
rep	char
==	O
'A'	O
)	O
*	O
popt_overwrite	*(int)
=	O
1	int
;	O
}	O
if	O
(	O
(	O
skip	int
==	O
0	int
)	O
&&	O
(	O
err	int
==	O
UNZ_OK	O
)	O
)	O
{	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
FOPEN_FUNC	O
(	O
write_filename	*(char)
,	O
"wb"	*(char)
)	O
;	O
if	O
(	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
==	O
NULL	O
)	O
&&	O
(	O
(	O
*	O
popt_extract_without_path	*(int)
)	O
==	O
0	int
)	O
&&	O
(	O
filename_withoutpath	*(char)
!=	O
(	O
char	O
*	O
)	O
filename_inzip	array(char)
)	O
)	O
{	O
char	O
c	int
=	O
*	O
(	O
filename_withoutpath	*(char)
-	O
1	int
)	O
;	O
*	O
(	O
filename_withoutpath	*(char)
-	O
1	int
)	O
=	O
'\0'	O
;	O
makedir	(*(char))->(int)
(	O
write_filename	*(char)
)	O
;	O
*	O
(	O
filename_withoutpath	*(char)
-	O
1	int
)	O
=	O
c	int
;	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
FOPEN_FUNC	O
(	O
write_filename	*(char)
,	O
"wb"	*(char)
)	O
;	O
}	O
if	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
==	O
NULL	O
)	O
{	O
printf	(*(char))->(int)
(	O
"error opening %s\n"	*(char)
,	O
write_filename	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
!=	O
NULL	O
)	O
{	O
printf	(*(char))->(int)
(	O
" extracting: %s\n"	*(char)
,	O
write_filename	*(char)
)	O
;	O
do	O
{	O
err	int
=	O
unzReadCurrentFile	(*(void),*(void),int)->(int)
(	O
uf	*(void)
,	O
buf	*(void)
,	O
size_buf	int
)	O
;	O
if	O
(	O
err	int
<	O
0	int
)	O
{	O
printf	(*(char))->(int)
(	O
"error %d with zipfile in unzReadCurrentFile\n"	*(char)
,	O
err	int
)	O
;	O
break	O
;	O
}	O
if	O
(	O
err	int
>	O
0	int
)	O
if	O
(	O
fwrite	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
buf	*(void)
,	O
err	int
,	O
1	int
,	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
!=	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"error in writing extracted file\n"	*(char)
)	O
;	O
err	int
=	O
UNZ_ERRNO	O
;	O
break	O
;	O
}	O
}	O
while	O
(	O
err	int
>	O
0	int
)	O
;	O
if	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
err	int
==	O
0	int
)	O
change_file_date	(*(char),long,struct(int,int,int,int,int,int))->(void)
(	O
write_filename	*(char)
,	O
file_info	struct(long,long,long,long,long,long,long long,long long,long,long,long,long,long,long,struct(int,int,int,int,int,int))
.	O
dosDate	long
,	O
file_info	struct(long,long,long,long,long,long,long long,long long,long,long,long,long,long,long,struct(int,int,int,int,int,int))
.	O
tmu_date	struct(int,int,int,int,int,int)
)	O
;	O
}	O
if	O
(	O
err	int
==	O
UNZ_OK	O
)	O
{	O
err	int
=	O
unzCloseCurrentFile	(*(void))->(int)
(	O
uf	*(void)
)	O
;	O
if	O
(	O
err	int
!=	O
UNZ_OK	O
)	O
{	O
printf	(*(char))->(int)
(	O
"error %d with zipfile in unzCloseCurrentFile\n"	*(char)
,	O
err	int
)	O
;	O
}	O
}	O
else	O
unzCloseCurrentFile	(*(void))->(int)
(	O
uf	*(void)
)	O
;	O
}	O
free	(*(void))->(void)
(	O
buf	*(void)
)	O
;	O
return	O
err	int
;	O
}	O
int	O
do_extract	(*(void),int,int,*(char))->(int)
(	O
uf	*(void)
,	O
opt_extract_without_path	int
,	O
opt_overwrite	int
,	O
password	*(char)
)	O
unzFile	*(void)
uf	*(void)
;	O
int	O
opt_extract_without_path	int
;	O
int	O
opt_overwrite	int
;	O
const	O
char	O
*	O
password	*(char)
;	O
{	O
uLong	long
i	long
;	O
unz_global_info64	struct(long long,long)
gi	struct(long long,long)
;	O
int	O
err	int
;	O
FILE	struct
*	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
NULL	O
;	O
err	int
=	O
unzGetGlobalInfo64	(*(void),*(struct(long long,long)))->(int)
(	O
uf	*(void)
,	O
&	O
gi	struct(long long,long)
)	O
;	O
if	O
(	O
err	int
!=	O
UNZ_OK	O
)	O
printf	(*(char))->(int)
(	O
"error %d with zipfile in unzGetGlobalInfo \n"	*(char)
,	O
err	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
gi	struct(long long,long)
.	O
number_entry	long long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
do_extract_currentfile	(*(void),*(int),*(int),*(char))->(int)
(	O
uf	*(void)
,	O
&	O
opt_extract_without_path	int
,	O
&	O
opt_overwrite	int
,	O
password	*(char)
)	O
!=	O
UNZ_OK	O
)	O
break	O
;	O
if	O
(	O
(	O
i	long
+	O
1	int
)	O
<	O
gi	struct(long long,long)
.	O
number_entry	long long
)	O
{	O
err	int
=	O
unzGoToNextFile	(*(void))->(int)
(	O
uf	*(void)
)	O
;	O
if	O
(	O
err	int
!=	O
UNZ_OK	O
)	O
{	O
printf	(*(char))->(int)
(	O
"error %d with zipfile in unzGoToNextFile\n"	*(char)
,	O
err	int
)	O
;	O
break	O
;	O
}	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
do_extract_onefile	(*(void),*(char),int,int,*(char))->(int)
(	O
uf	*(void)
,	O
filename	*(char)
,	O
opt_extract_without_path	int
,	O
opt_overwrite	int
,	O
password	*(char)
)	O
unzFile	*(void)
uf	*(void)
;	O
const	O
char	O
*	O
filename	*(char)
;	O
int	O
opt_extract_without_path	int
;	O
int	O
opt_overwrite	int
;	O
const	O
char	O
*	O
password	*(char)
;	O
{	O
int	O
err	int
=	O
UNZ_OK	O
;	O
if	O
(	O
unzLocateFile	(*(void),*(char),int)->(int)
(	O
uf	*(void)
,	O
filename	*(char)
,	O
CASESENSITIVITY	O
)	O
!=	O
UNZ_OK	O
)	O
{	O
printf	(*(char))->(int)
(	O
"file %s not found in the zipfile\n"	*(char)
,	O
filename	*(char)
)	O
;	O
return	O
2	int
;	O
}	O
if	O
(	O
do_extract_currentfile	(*(void),*(int),*(int),*(char))->(int)
(	O
uf	*(void)
,	O
&	O
opt_extract_without_path	int
,	O
&	O
opt_overwrite	int
,	O
password	*(char)
)	O
==	O
UNZ_OK	O
)	O
return	O
0	int
;	O
else	O
return	O
1	int
;	O
}	O
int	O
main	(int,array(*(char)))->(int)
(	O
argc	int
,	O
argv	array(*(char))
)	O
int	O
argc	int
;	O
char	O
*	O
argv	array(*(char))
[	O
]	O
;	O
{	O
const	O
char	O
*	O
zipfilename	*(char)
=	O
NULL	O
;	O
const	O
char	O
*	O
filename_to_extract	*(char)
=	O
NULL	O
;	O
const	O
char	O
*	O
password	*(char)
=	O
NULL	O
;	O
char	O
filename_try	array(char)
[	O
MAXFILENAME	O
+	O
16	int
]	O
=	O
""	*(char)
;	O
int	O
i	long
;	O
int	O
ret_value	int
=	O
0	int
;	O
int	O
opt_do_list	int
=	O
0	int
;	O
int	O
opt_do_extract	int
=	O
1	int
;	O
int	O
opt_do_extract_withoutpath	int
=	O
0	int
;	O
int	O
opt_overwrite	int
=	O
0	int
;	O
int	O
opt_extractdir	int
=	O
0	int
;	O
const	O
char	O
*	O
dirname	*(char)
=	O
NULL	O
;	O
unzFile	*(void)
uf	*(void)
=	O
NULL	O
;	O
do_banner	()->(void)
(	O
)	O
;	O
if	O
(	O
argc	int
==	O
1	int
)	O
{	O
do_help	()->(void)
(	O
)	O
;	O
return	O
0	int
;	O
}	O
else	O
{	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
argc	int
;	O
i	long
++	O
)	O
{	O
if	O
(	O
(	O
*	O
argv	array(*(char))
[	O
i	long
]	O
)	O
==	O
'-'	O
)	O
{	O
const	O
char	O
*	O
p	*(char)
=	O
argv	array(*(char))
[	O
i	long
]	O
+	O
1	int
;	O
while	O
(	O
(	O
*	O
p	*(char)
)	O
!=	O
'\0'	O
)	O
{	O
char	O
c	int
=	O
*	O
(	O
p	*(char)
++	O
)	O
;	O
;	O
if	O
(	O
(	O
c	int
==	O
'l'	O
)	O
||	O
(	O
c	int
==	O
'L'	O
)	O
)	O
opt_do_list	int
=	O
1	int
;	O
if	O
(	O
(	O
c	int
==	O
'v'	O
)	O
||	O
(	O
c	int
==	O
'V'	O
)	O
)	O
opt_do_list	int
=	O
1	int
;	O
if	O
(	O
(	O
c	int
==	O
'x'	O
)	O
||	O
(	O
c	int
==	O
'X'	O
)	O
)	O
opt_do_extract	int
=	O
1	int
;	O
if	O
(	O
(	O
c	int
==	O
'e'	O
)	O
||	O
(	O
c	int
==	O
'E'	O
)	O
)	O
opt_do_extract	int
=	O
opt_do_extract_withoutpath	int
=	O
1	int
;	O
if	O
(	O
(	O
c	int
==	O
'o'	O
)	O
||	O
(	O
c	int
==	O
'O'	O
)	O
)	O
opt_overwrite	int
=	O
1	int
;	O
if	O
(	O
(	O
c	int
==	O
'd'	O
)	O
||	O
(	O
c	int
==	O
'D'	O
)	O
)	O
{	O
opt_extractdir	int
=	O
1	int
;	O
dirname	*(char)
=	O
argv	array(*(char))
[	O
i	long
+	O
1	int
]	O
;	O
}	O
if	O
(	O
(	O
(	O
c	int
==	O
'p'	O
)	O
||	O
(	O
c	int
==	O
'P'	O
)	O
)	O
&&	O
(	O
i	long
+	O
1	int
<	O
argc	int
)	O
)	O
{	O
password	*(char)
=	O
argv	array(*(char))
[	O
i	long
+	O
1	int
]	O
;	O
i	long
++	O
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
zipfilename	*(char)
==	O
NULL	O
)	O
zipfilename	*(char)
=	O
argv	array(*(char))
[	O
i	long
]	O
;	O
else	O
if	O
(	O
(	O
filename_to_extract	*(char)
==	O
NULL	O
)	O
&&	O
(	O
!	O
opt_extractdir	int
)	O
)	O
filename_to_extract	*(char)
=	O
argv	array(*(char))
[	O
i	long
]	O
;	O
}	O
}	O
}	O
if	O
(	O
zipfilename	*(char)
!=	O
NULL	O
)	O
{	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
filename_try	array(char)
,	O
zipfilename	*(char)
,	O
MAXFILENAME	O
-	O
1	int
)	O
;	O
filename_try	array(char)
[	O
MAXFILENAME	O
]	O
=	O
'\0'	O
;	O
uf	*(void)
=	O
unzOpen64	(*(void))->(*(void))
(	O
zipfilename	*(char)
)	O
;	O
if	O
(	O
uf	*(void)
==	O
NULL	O
)	O
{	O
strcat	(*(char),*(char))->(*(char))
(	O
filename_try	array(char)
,	O
".zip"	*(char)
)	O
;	O
uf	*(void)
=	O
unzOpen64	(*(void))->(*(void))
(	O
filename_try	array(char)
)	O
;	O
}	O
}	O
if	O
(	O
uf	*(void)
==	O
NULL	O
)	O
{	O
printf	(*(char))->(int)
(	O
"Cannot open %s or %s.zip\n"	*(char)
,	O
zipfilename	*(char)
,	O
zipfilename	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
printf	(*(char))->(int)
(	O
"%s opened\n"	*(char)
,	O
filename_try	array(char)
)	O
;	O
if	O
(	O
opt_do_list	int
==	O
1	int
)	O
ret_value	int
=	O
do_list	(*(void))->(int)
(	O
uf	*(void)
)	O
;	O
else	O
if	O
(	O
opt_do_extract	int
==	O
1	int
)	O
{	O
if	O
(	O
opt_extractdir	int
&&	O
chdir	(*(char))->(int)
(	O
dirname	*(char)
)	O
)	O
{	O
printf	(*(char))->(int)
(	O
"Error changing into %s, aborting\n"	*(char)
,	O
dirname	*(char)
)	O
;	O
exit	(int)->(void)
(	O
-	O
1	int
)	O
;	O
}	O
if	O
(	O
filename_to_extract	*(char)
==	O
NULL	O
)	O
ret_value	int
=	O
do_extract	(*(void),int,int,*(char))->(int)
(	O
uf	*(void)
,	O
opt_do_extract_withoutpath	int
,	O
opt_overwrite	int
,	O
password	*(char)
)	O
;	O
else	O
ret_value	int
=	O
do_extract_onefile	(*(void),*(char),int,int,*(char))->(int)
(	O
uf	*(void)
,	O
filename_to_extract	*(char)
,	O
opt_do_extract_withoutpath	int
,	O
opt_overwrite	int
,	O
password	*(char)
)	O
;	O
}	O
unzClose	(*(void))->(int)
(	O
uf	*(void)
)	O
;	O
return	O
ret_value	int
;	O
}	O
