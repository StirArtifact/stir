struct	O
top	struct(*(struct(*(char),*(char),*(char),*(()->(void)))),struct(*(char),bool,bool,bool,bool,bool,bool,bool,int,bool,int,int,bool,bool,bool,int,*(char),struct(bool,long),*(char),long,bool,bool,*(char),long,*(struct(*(char),enum(int,int,int))),*(struct),*(struct),*(struct)),struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),struct(bool,*(char),*(char),*(char),*(char),*(char))),struct(*(char),int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct))),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),struct(*(char),long)),struct(*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),bool))
*	O
top	struct(*(struct(*(char),*(char),*(char),*(()->(void)))),struct(*(char),bool,bool,bool,bool,bool,bool,bool,int,bool,int,int,bool,bool,bool,int,*(char),struct(bool,long),*(char),long,bool,bool,*(char),long,*(struct(*(char),enum(int,int,int))),*(struct),*(struct),*(struct)),struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),struct(bool,*(char),*(char),*(char),*(char),*(char))),struct(*(char),int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct))),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),struct(*(char),long)),struct(*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),bool))
;	O
static	O
exiting	O
void	O
exiterr	*(()->(void))
(	O
void	O
)	O
{	O
tempunlink	()->(void)
(	O
)	O
;	O
exit_diff_trouble	()->(void)
(	O
)	O
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
register	O
char	O
const	O
*	O
a	*(char)
;	O
struct	O
symdef	struct(*(char),*(char))
three_manifestations	array(struct(*(char),*(char)))
[	O
3	int
]	O
;	O
char	O
const	O
*	O
edarg	*(char)
=	O
NULL	O
;	O
int	O
labels	int
,	O
exitstatus	int
;	O
bool	bool
tostdout	bool
=	O
false	int
;	O
const	O
struct	O
program	struct(*(char),*(char),*(char),*(()->(void)))
program	struct(*(char),*(char),*(char),*(()->(void)))
=	O
{	O
.	O
invoke	*(char)
=	O
argv	*(*(char))
[	O
0	int
]	O
,	O
.	O
name	*(char)
=	O
"merge"	*(char)
,	O
.	O
help	*(char)
=	O
help	*(char)
,	O
.	O
exiterr	*(()->(void))
=	O
exiterr	*(()->(void))
}	O
;	O
CHECK_HV	O
(	O
)	O
;	O
gnurcs_init	(*(struct(*(char),*(char),*(char),*(()->(void)))))->(void)
(	O
&	O
program	struct(*(char),*(char),*(char),*(()->(void)))
)	O
;	O
labels	int
=	O
0	int
;	O
for	O
(	O
;	O
(	O
a	*(char)
=	O
*	O
++	O
argv	*(*(char))
)	O
&&	O
*	O
a	*(char)
++	O
==	O
'-'	O
;	O
--	O
argc	int
)	O
{	O
switch	O
(	O
*	O
a	*(char)
++	O
)	O
{	O
case	O
'A'	O
:	O
case	O
'E'	O
:	O
case	O
'e'	O
:	O
if	O
(	O
edarg	*(char)
&&	O
edarg	*(char)
[	O
1	int
]	O
!=	O
(	O
*	O
argv	*(*(char))
)	O
[	O
1	int
]	O
)	O
PERR	O
(	O
"%s and %s are incompatible"	*(char)
,	O
edarg	*(char)
,	O
*	O
argv	*(*(char))
)	O
;	O
edarg	*(char)
=	O
*	O
argv	*(*(char))
;	O
break	O
;	O
case	O
'p'	O
:	O
tostdout	bool
=	O
true	int
;	O
break	O
;	O
case	O
'q'	O
:	O
BE	O
(	O
quiet	bool
)	O
=	O
true	int
;	O
break	O
;	O
case	O
'L'	O
:	O
if	O
(	O
3	int
<=	O
labels	int
)	O
PFATAL	O
(	O
"too many -L options"	*(char)
)	O
;	O
if	O
(	O
!	O
(	O
LABEL	O
(	O
labels	int
++	O
)	O
=	O
*	O
++	O
argv	*(*(char))
)	O
)	O
PFATAL	O
(	O
"-L needs following argument"	*(char)
)	O
;	O
--	O
argc	int
;	O
break	O
;	O
case	O
'V'	O
:	O
display_version	(*(struct(*(char),*(char),*(char),*(()->(void)))))->(void)
(	O
&	O
program	struct(*(char),*(char),*(char),*(()->(void)))
)	O
;	O
gnurcs_goodbye	()->(void)
(	O
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
default	O
:	O
bad_option	(*(char))->(void)
(	O
a	*(char)
-	O
2	int
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
*	O
a	*(char)
)	O
bad_option	(*(char))->(void)
(	O
a	*(char)
-	O
2	int
)	O
;	O
}	O
if	O
(	O
argc	int
!=	O
4	int
)	O
PFATAL	O
(	O
"%s arguments"	*(char)
,	O
argc	int
<	O
4	int
?	O
"not enough"	*(char)
:	O
"too many"	*(char)
)	O
;	O
for	O
(	O
int	O
i	int
=	O
0	int
;	O
i	int
<	O
3	int
;	O
i	int
++	O
)	O
{	O
FNAME	O
(	O
i	int
)	O
=	O
argv	*(*(char))
[	O
i	int
]	O
;	O
if	O
(	O
labels	int
<=	O
i	int
)	O
LABEL	O
(	O
i	int
)	O
=	O
FNAME	O
(	O
i	int
)	O
;	O
}	O
if	O
(	O
FLOW	O
(	O
erroneousp	bool
)	O
)	O
exiterr	*(()->(void))
(	O
)	O
;	O
exitstatus	int
=	O
merge	(bool,*(char),array(struct(*(char),*(char))))->(int)
(	O
tostdout	bool
,	O
edarg	*(char)
,	O
three_manifestations	array(struct(*(char),*(char)))
)	O
;	O
gnurcs_goodbye	()->(void)
(	O
)	O
;	O
return	O
exitstatus	int
;	O
}	O
