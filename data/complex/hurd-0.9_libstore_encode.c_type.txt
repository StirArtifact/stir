error_t	(*(int))->(int)
store_std_leaf_allocate_encoding	(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct(enum,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(struct`)),long,*(void))),*(struct(*(int),*(int),*(long),*(char),int,int,int,int,long,long,long,long,*(int),*(int),*(long),*(char))))->(int)
(	O
const	O
struct	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
*	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
,	O
struct	O
store_enc	struct(*(int),*(int),*(long),*(char),int,int,int,int,long,long,long,long,*(int),*(int),*(long),*(char))
*	O
enc	*(struct)
)	O
{	O
enc	*(struct)
->	O
num_ports	int
++	O
;	O
enc	*(struct)
->	O
num_ints	int
+=	O
6	int
;	O
enc	*(struct)
->	O
num_offsets	int
+=	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
num_runs	long
*	O
2	int
;	O
if	O
(	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
name	*(char)
)	O
enc	*(struct)
->	O
data_len	int
+=	O
strlen	(*(char))->(long)
(	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
name	*(char)
)	O
+	O
1	int
;	O
enc	*(struct)
->	O
data_len	int
+=	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
misc_len	long
;	O
return	O
0	int
;	O
}	O
static	O
inline	O
int	O
too_big	(long)->(int)
(	O
store_offset_t	long
ofs	long
)	O
{	O
off_t	long
o	long
=	O
(	O
off_t	long
)	O
ofs	long
;	O
return	O
o	long
<	O
0	int
||	O
(	O
(	O
store_offset_t	long
)	O
o	long
!=	O
ofs	long
)	O
;	O
}	O
error_t	(*(int))->(int)
store_std_leaf_encode	(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct(enum,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(struct`)),long,*(void))),*(struct(*(int),*(int),*(long),*(char),int,int,int,int,long,long,long,long,*(int),*(int),*(long),*(char))))->(int)
(	O
const	O
struct	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
*	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
,	O
struct	O
store_enc	struct(*(int),*(int),*(long),*(char),int,int,int,int,long,long,long,long,*(int),*(int),*(long),*(char))
*	O
enc	*(struct)
)	O
{	O
int	O
i	int
;	O
size_t	long
name_len	long
=	O
(	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
name	*(char)
?	O
strlen	(*(char))->(long)
(	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
name	*(char)
)	O
+	O
1	int
:	O
0	int
)	O
;	O
enc	*(struct)
->	O
ports	*(int)
[	O
enc	*(struct)
->	O
cur_port	long
++	O
]	O
=	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
port	int
;	O
enc	*(struct)
->	O
ints	*(int)
[	O
enc	*(struct)
->	O
cur_int	long
++	O
]	O
=	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
class	*(struct)
->	O
id	enum
;	O
enc	*(struct)
->	O
ints	*(int)
[	O
enc	*(struct)
->	O
cur_int	long
++	O
]	O
=	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
flags	int
;	O
enc	*(struct)
->	O
ints	*(int)
[	O
enc	*(struct)
->	O
cur_int	long
++	O
]	O
=	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
block_size	long
;	O
enc	*(struct)
->	O
ints	*(int)
[	O
enc	*(struct)
->	O
cur_int	long
++	O
]	O
=	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
num_runs	long
;	O
enc	*(struct)
->	O
ints	*(int)
[	O
enc	*(struct)
->	O
cur_int	long
++	O
]	O
=	O
name_len	long
;	O
enc	*(struct)
->	O
ints	*(int)
[	O
enc	*(struct)
->	O
cur_int	long
++	O
]	O
=	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
misc_len	long
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
num_runs	long
;	O
i	int
++	O
)	O
{	O
if	O
(	O
sizeof	O
(	O
*	O
enc	*(struct)
->	O
offsets	*(long)
)	O
!=	O
sizeof	O
(	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
runs	*(struct(long,long))
[	O
i	int
]	O
.	O
start	long
)	O
&&	O
(	O
too_big	(long)->(int)
(	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
runs	*(struct(long,long))
[	O
i	int
]	O
.	O
start	long
)	O
||	O
too_big	(long)->(int)
(	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
runs	*(struct(long,long))
[	O
i	int
]	O
.	O
start	long
+	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
runs	*(struct(long,long))
[	O
i	int
]	O
.	O
length	long
)	O
)	O
)	O
return	O
EOVERFLOW	O
;	O
enc	*(struct)
->	O
offsets	*(long)
[	O
enc	*(struct)
->	O
cur_offset	long
++	O
]	O
=	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
runs	*(struct(long,long))
[	O
i	int
]	O
.	O
start	long
;	O
enc	*(struct)
->	O
offsets	*(long)
[	O
enc	*(struct)
->	O
cur_offset	long
++	O
]	O
=	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
runs	*(struct(long,long))
[	O
i	int
]	O
.	O
length	long
;	O
}	O
if	O
(	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
name	*(char)
)	O
{	O
bcopy	(*(void),*(void),long)->(void)
(	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
name	*(char)
,	O
enc	*(struct)
->	O
data	*(char)
+	O
enc	*(struct)
->	O
cur_data	long
,	O
name_len	long
)	O
;	O
enc	*(struct)
->	O
cur_data	long
+=	O
name_len	long
;	O
}	O
if	O
(	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
misc_len	long
)	O
{	O
bcopy	(*(void),*(void),long)->(void)
(	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
misc	*(void)
,	O
enc	*(struct)
->	O
data	*(char)
+	O
enc	*(struct)
->	O
cur_data	long
,	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
misc_len	long
)	O
;	O
enc	*(struct)
->	O
cur_data	long
+=	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
misc_len	long
;	O
}	O
return	O
0	int
;	O
}	O
error_t	(*(int))->(int)
store_encode	(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct(enum,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(struct`)),long,*(void))),*(struct(*(int),*(int),*(long),*(char),int,int,int,int,long,long,long,long,*(int),*(int),*(long),*(char))))->(int)
(	O
const	O
struct	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
*	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
,	O
struct	O
store_enc	struct(*(int),*(int),*(long),*(char),int,int,int,int,long,long,long,long,*(int),*(int),*(long),*(char))
*	O
enc	*(struct)
)	O
{	O
void	O
*	O
buf	*(void)
;	O
error_t	(*(int))->(int)
err	(*(int))->(int)
;	O
const	O
struct	O
store_class	struct(enum,*(char),*((*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))),long,long,int,*(*(void)),*(int))->(int)),int,*((*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))),long)->(int)),*((*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))),*(struct))->(int)),*((*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))),*(struct))->(int)),*((*(struct),*(*(struct(enum,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`))),*(*(struct(int,*`,long,long,long,long,*`,int,long,long,long,int,int,int,*`,long,*`,*`,long,*`))))->(int)),*((*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))),int)->(int)),*((*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))),int)->(int)),*((*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))))->(void)),*((*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))),*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))))->(int)),*((*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))),*(struct(long,long)),long,*(*(struct(int,*`,long,long,long,long,*`,int,long,long,long,int,int,int,*`,long,*`,*`,long,*`))))->(int)),*((*(char),int,*(*(struct(enum,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`))),*(*(struct(int,*`,long,long,long,long,*`,int,long,long,long,int,int,int,*`,long,*`,*`,long,*`))))->(int)),*((*(char),*(*(struct(enum,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`))))->(int)),*((*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))),int,*(int))->(int)))
*	O
class	*(struct)
=	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
class	*(struct)
;	O
mach_msg_type_number_t	O
init_num_ports	O
=	O
enc	*(struct)
->	O
num_ports	int
;	O
mach_msg_type_number_t	O
init_num_ints	O
=	O
enc	*(struct)
->	O
num_ints	int
;	O
mach_msg_type_number_t	O
init_num_offsets	O
=	O
enc	*(struct)
->	O
num_offsets	int
;	O
mach_msg_type_number_t	O
init_data_len	O
=	O
enc	*(struct)
->	O
data_len	int
;	O
if	O
(	O
!	O
class	*(struct)
->	O
allocate_encoding	*((*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))),*(struct))->(int))
||	O
!	O
class	*(struct)
->	O
encode	*((*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))),*(struct))->(int))
)	O
return	O
EOPNOTSUPP	O
;	O
enc	*(struct)
->	O
num_ports	int
=	O
0	int
;	O
enc	*(struct)
->	O
num_ints	int
=	O
0	int
;	O
enc	*(struct)
->	O
num_offsets	int
=	O
0	int
;	O
enc	*(struct)
->	O
data_len	int
=	O
0	int
;	O
err	(*(int))->(int)
=	O
(	O
*	O
class	*(struct)
->	O
allocate_encoding	*((*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))),*(struct))->(int))
)	O
(	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
,	O
enc	*(struct)
)	O
;	O
if	O
(	O
err	(*(int))->(int)
)	O
return	O
err	(*(int))->(int)
;	O
errno	O
=	O
0	int
;	O
if	O
(	O
enc	*(struct)
->	O
num_ports	int
>	O
init_num_ports	O
)	O
{	O
buf	*(void)
=	O
mmap	(*(void),long,int,int,int,long)->(*(void))
(	O
0	int
,	O
enc	*(struct)
->	O
num_ports	int
*	O
sizeof	O
*	O
enc	*(struct)
->	O
ports	*(int)
,	O
PROT_READ	int
|	O
PROT_WRITE	int
,	O
MAP_ANON	O
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
buf	*(void)
!=	O
(	O
void	O
*	O
)	O
-	O
1	int
)	O
enc	*(struct)
->	O
ports	*(int)
=	O
buf	*(void)
;	O
}	O
if	O
(	O
!	O
errno	O
&&	O
enc	*(struct)
->	O
num_ints	int
>	O
init_num_ints	O
)	O
{	O
buf	*(void)
=	O
mmap	(*(void),long,int,int,int,long)->(*(void))
(	O
0	int
,	O
enc	*(struct)
->	O
num_ints	int
*	O
sizeof	O
*	O
enc	*(struct)
->	O
ints	*(int)
,	O
PROT_READ	int
|	O
PROT_WRITE	int
,	O
MAP_ANON	O
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
buf	*(void)
!=	O
(	O
void	O
*	O
)	O
-	O
1	int
)	O
enc	*(struct)
->	O
ints	*(int)
=	O
buf	*(void)
;	O
}	O
if	O
(	O
!	O
errno	O
&&	O
enc	*(struct)
->	O
num_offsets	int
>	O
init_num_offsets	O
)	O
{	O
buf	*(void)
=	O
mmap	(*(void),long,int,int,int,long)->(*(void))
(	O
0	int
,	O
enc	*(struct)
->	O
num_offsets	int
*	O
sizeof	O
*	O
enc	*(struct)
->	O
offsets	*(long)
,	O
PROT_READ	int
|	O
PROT_WRITE	int
,	O
MAP_ANON	O
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
buf	*(void)
!=	O
(	O
void	O
*	O
)	O
-	O
1	int
)	O
enc	*(struct)
->	O
offsets	*(long)
=	O
buf	*(void)
;	O
}	O
if	O
(	O
!	O
errno	O
&&	O
enc	*(struct)
->	O
data_len	int
>	O
init_data_len	O
)	O
{	O
buf	*(void)
=	O
mmap	(*(void),long,int,int,int,long)->(*(void))
(	O
0	int
,	O
enc	*(struct)
->	O
data_len	int
,	O
PROT_READ	int
|	O
PROT_WRITE	int
,	O
MAP_ANON	O
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
buf	*(void)
!=	O
(	O
void	O
*	O
)	O
-	O
1	int
)	O
enc	*(struct)
->	O
data	*(char)
=	O
buf	*(void)
;	O
}	O
err	(*(int))->(int)
=	O
errno	O
;	O
if	O
(	O
!	O
err	(*(int))->(int)
)	O
err	(*(int))->(int)
=	O
(	O
*	O
class	*(struct)
->	O
encode	*((*(struct(int,*(struct`),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct`),*(*`),long,*(void))),*(struct))->(int))
)	O
(	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
,	O
enc	*(struct)
)	O
;	O
enc	*(struct)
->	O
cur_port	long
=	O
enc	*(struct)
->	O
cur_int	long
=	O
enc	*(struct)
->	O
cur_offset	long
=	O
enc	*(struct)
->	O
cur_data	long
=	O
0	int
;	O
if	O
(	O
err	(*(int))->(int)
)	O
store_enc_dealloc	(*(struct(*(int),*(int),*(long),*(char),int,int,int,int,long,long,long,long,*(int),*(int),*(long),*(char))))->(void)
(	O
enc	*(struct)
)	O
;	O
return	O
err	(*(int))->(int)
;	O
}	O
error_t	(*(int))->(int)
store_return	(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct(enum,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(struct`)),long,*(void))),*(*(int)),*(int),*(*(int)),*(int),*(*(long)),*(int),*(*(char)),*(int))->(int)
(	O
const	O
struct	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
*	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
,	O
mach_port_t	O
*	O
*	O
ports	*(int)
,	O
mach_msg_type_number_t	O
*	O
num_ports	int
,	O
int	O
*	O
*	O
ints	*(int)
,	O
mach_msg_type_number_t	O
*	O
num_ints	int
,	O
off_t	long
*	O
*	O
offsets	*(long)
,	O
mach_msg_type_number_t	O
*	O
num_offsets	int
,	O
char	O
*	O
*	O
data	*(char)
,	O
mach_msg_type_number_t	O
*	O
data_len	int
)	O
{	O
error_t	(*(int))->(int)
err	(*(int))->(int)
;	O
struct	O
store_enc	struct(*(int),*(int),*(long),*(char),int,int,int,int,long,long,long,long,*(int),*(int),*(long),*(char))
enc	*(struct)
;	O
store_enc_init	(*(struct(*(int),*(int),*(long),*(char),int,int,int,int,long,long,long,long,*(int),*(int),*(long),*(char))),*(int),int,*(int),int,*(long),int,*(char),int)->(void)
(	O
&	O
enc	*(struct)
,	O
*	O
ports	*(int)
,	O
*	O
num_ports	int
,	O
*	O
ints	*(int)
,	O
*	O
num_ints	int
,	O
*	O
offsets	*(long)
,	O
*	O
num_offsets	int
,	O
*	O
data	*(char)
,	O
*	O
data_len	int
)	O
;	O
err	(*(int))->(int)
=	O
store_encode	(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct(enum,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(struct`)),long,*(void))),*(struct(*(int),*(int),*(long),*(char),int,int,int,int,long,long,long,long,*(int),*(int),*(long),*(char))))->(int)
(	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
,	O
&	O
enc	*(struct)
)	O
;	O
if	O
(	O
err	(*(int))->(int)
)	O
store_enc_dealloc	(*(struct(*(int),*(int),*(long),*(char),int,int,int,int,long,long,long,long,*(int),*(int),*(long),*(char))))->(void)
(	O
&	O
enc	*(struct)
)	O
;	O
else	O
store_enc_return	(*(struct(*(int),*(int),*(long),*(char),int,int,int,int,long,long,long,long,*(int),*(int),*(long),*(char))),*(*(int)),*(int),*(*(int)),*(int),*(*(long)),*(int),*(*(char)),*(int))->(void)
(	O
&	O
enc	*(struct)
,	O
ports	*(int)
,	O
num_ports	int
,	O
ints	*(int)
,	O
num_ints	int
,	O
offsets	*(long)
,	O
num_offsets	int
,	O
data	*(char)
,	O
data_len	int
)	O
;	O
return	O
err	(*(int))->(int)
;	O
}	O
