unsigned	O
int	O
mtools_lock_timeout	int
=	O
30	int
;	O
void	O
serve_client	(int,*(*(char)),int,int)->(void)
(	O
int	O
sock	int
,	O
char	O
*	O
*	O
device_name	*(*(char))
,	O
unsigned	O
int	O
n_dev	int
,	O
int	O
close_stderr	int
)	O
;	O
typedef	O
struct	O
io_buffer	struct(array(char),array(char),long,long,long,int)
{	O
Byte	char
out_buffer	array(char)
[	O
BUFFERED_IO_SIZE	int
]	O
;	O
Byte	char
in_buffer	array(char)
[	O
BUFFERED_IO_SIZE	int
]	O
;	O
size_t	long
in_valid	long
;	O
size_t	long
in_start	long
;	O
size_t	long
out_valid	long
;	O
int	O
handle	int
;	O
}	O
*	O
io_buffer	struct(array(char),array(char),long,long,long,int)
;	O
static	O
io_buffer	struct(array(char),array(char),long,long,long,int)
new_io_buffer	(int)->(*(struct(array(char),array(char),long,long,long,int)))
(	O
int	O
_handle	int
)	O
{	O
io_buffer	struct(array(char),array(char),long,long,long,int)
buffer	*(struct(array(char),array(char),long,long,long,int))
;	O
buffer	*(struct(array(char),array(char),long,long,long,int))
=	O
New	O
(	O
struct	O
io_buffer	struct(array(char),array(char),long,long,long,int)
)	O
;	O
buffer	*(struct(array(char),array(char),long,long,long,int))
->	O
handle	int
=	O
_handle	int
;	O
buffer	*(struct(array(char),array(char),long,long,long,int))
->	O
in_valid	long
=	O
buffer	*(struct(array(char),array(char),long,long,long,int))
->	O
in_start	long
=	O
0	int
;	O
buffer	*(struct(array(char),array(char),long,long,long,int))
->	O
out_valid	long
=	O
0	int
;	O
return	O
buffer	*(struct(array(char),array(char),long,long,long,int))
;	O
}	O
static	O
void	O
flush	*((*(struct(*(struct`),int,*(struct`),*(struct`))))->(int))
(	O
io_buffer	struct(array(char),array(char),long,long,long,int)
buffer	*(struct(array(char),array(char),long,long,long,int))
)	O
{	O
if	O
(	O
buffer	*(struct(array(char),array(char),long,long,long,int))
->	O
out_valid	long
)	O
{	O
if	O
(	O
write	*((*(void),*(char),long)->(long))
(	O
buffer	*(struct(array(char),array(char),long,long,long,int))
->	O
handle	int
,	O
buffer	*(struct(array(char),array(char),long,long,long,int))
->	O
out_buffer	array(char)
,	O
buffer	*(struct(array(char),array(char),long,long,long,int))
->	O
out_valid	long
)	O
<	O
0	int
)	O
{	O
perror	(*(char))->(void)
(	O
"floppyd flush"	*(char)
)	O
;	O
}	O
buffer	*(struct(array(char),array(char),long,long,long,int))
->	O
out_valid	long
=	O
0	int
;	O
}	O
}	O
static	O
void	O
free_io_buffer	(*(struct(array(char),array(char),long,long,long,int)))->(void)
(	O
io_buffer	struct(array(char),array(char),long,long,long,int)
buffer	*(struct(array(char),array(char),long,long,long,int))
)	O
{	O
flush	*((*(struct(*(struct`),int,*(struct`),*(struct`))))->(int))
(	O
buffer	*(struct(array(char),array(char),long,long,long,int))
)	O
;	O
free	(*(void))->(void)
(	O
buffer	*(struct(array(char),array(char),long,long,long,int))
)	O
;	O
}	O
static	O
size_t	long
buf_read	(*(struct(array(char),array(char),long,long,long,int)),*(char),long)->(long)
(	O
io_buffer	struct(array(char),array(char),long,long,long,int)
buf	*(char)
,	O
Byte	char
*	O
buffer	*(struct(array(char),array(char),long,long,long,int))
,	O
size_t	long
nbytes	long
)	O
{	O
size_t	long
ret	long
;	O
if	O
(	O
nbytes	long
<=	O
buf	*(char)
->	O
in_valid	long
)	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
buffer	*(struct(array(char),array(char),long,long,long,int))
,	O
buf	*(char)
->	O
in_buffer	array(char)
+	O
buf	*(char)
->	O
in_start	long
,	O
nbytes	long
)	O
;	O
buf	*(char)
->	O
in_valid	long
-=	O
nbytes	long
;	O
buf	*(char)
->	O
in_start	long
+=	O
nbytes	long
;	O
ret	long
=	O
nbytes	long
;	O
}	O
else	O
{	O
if	O
(	O
buf	*(char)
->	O
in_valid	long
)	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
buffer	*(struct(array(char),array(char),long,long,long,int))
,	O
buf	*(char)
->	O
in_buffer	array(char)
+	O
buf	*(char)
->	O
in_start	long
,	O
buf	*(char)
->	O
in_valid	long
)	O
;	O
nbytes	long
-=	O
buf	*(char)
->	O
in_valid	long
;	O
buffer	*(struct(array(char),array(char),long,long,long,int))
+=	O
buf	*(char)
->	O
in_valid	long
;	O
if	O
(	O
nbytes	long
>	O
BUFFERED_IO_SIZE	int
)	O
{	O
ssize_t	long
rval	long
=	O
read	*((*(void),*(char),long)->(long))
(	O
buf	*(char)
->	O
handle	int
,	O
buffer	*(struct(array(char),array(char),long,long,long,int))
,	O
nbytes	long
)	O
;	O
if	O
(	O
rval	long
>=	O
0	int
)	O
{	O
ret	long
=	O
(	O
size_t	long
)	O
rval	long
+	O
buf	*(char)
->	O
in_valid	long
;	O
}	O
else	O
{	O
perror	(*(char))->(void)
(	O
"read error"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
buf	*(char)
->	O
in_valid	long
=	O
buf	*(char)
->	O
in_start	long
=	O
0	int
;	O
}	O
else	O
{	O
ssize_t	long
rval	long
=	O
read	*((*(void),*(char),long)->(long))
(	O
buf	*(char)
->	O
handle	int
,	O
buf	*(char)
->	O
in_buffer	array(char)
,	O
BUFFERED_IO_SIZE	int
)	O
;	O
if	O
(	O
rval	long
>=	O
0	int
)	O
{	O
if	O
(	O
rval	long
<	O
(	O
ssize_t	long
)	O
nbytes	long
)	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
buffer	*(struct(array(char),array(char),long,long,long,int))
,	O
buf	*(char)
->	O
in_buffer	array(char)
,	O
(	O
size_t	long
)	O
rval	long
)	O
;	O
ret	long
=	O
(	O
size_t	long
)	O
rval	long
+	O
buf	*(char)
->	O
in_valid	long
;	O
buf	*(char)
->	O
in_valid	long
=	O
buf	*(char)
->	O
in_start	long
=	O
0	int
;	O
}	O
else	O
{	O
size_t	long
a	long
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
buffer	*(struct(array(char),array(char),long,long,long,int))
,	O
buf	*(char)
->	O
in_buffer	array(char)
,	O
nbytes	long
)	O
;	O
buf	*(char)
->	O
in_start	long
=	O
nbytes	long
;	O
a	long
=	O
buf	*(char)
->	O
in_valid	long
;	O
buf	*(char)
->	O
in_valid	long
=	O
(	O
size_t	long
)	O
rval	long
-	O
nbytes	long
;	O
ret	long
=	O
a	long
+	O
nbytes	long
;	O
}	O
}	O
else	O
{	O
perror	(*(char))->(void)
(	O
"read error"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
}	O
return	O
ret	long
;	O
}	O
static	O
ssize_t	long
buf_write	(*(struct(array(char),array(char),long,long,long,int)),*(void),long)->(long)
(	O
io_buffer	struct(array(char),array(char),long,long,long,int)
buf	*(char)
,	O
void	O
*	O
buffer	*(struct(array(char),array(char),long,long,long,int))
,	O
size_t	long
nbytes	long
)	O
{	O
if	O
(	O
buf	*(char)
->	O
out_valid	long
+	O
nbytes	long
>	O
BUFFERED_IO_SIZE	int
)	O
{	O
flush	*((*(struct(*(struct`),int,*(struct`),*(struct`))))->(int))
(	O
buf	*(char)
)	O
;	O
return	O
write	*((*(void),*(char),long)->(long))
(	O
buf	*(char)
->	O
handle	int
,	O
buffer	*(struct(array(char),array(char),long,long,long,int))
,	O
nbytes	long
)	O
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
buf	*(char)
->	O
out_buffer	array(char)
+	O
buf	*(char)
->	O
out_valid	long
,	O
buffer	*(struct(array(char),array(char),long,long,long,int))
,	O
nbytes	long
)	O
;	O
buf	*(char)
->	O
out_valid	long
+=	O
nbytes	long
;	O
return	O
(	O
ssize_t	long
)	O
nbytes	long
;	O
}	O
typedef	O
struct	O
Packet	struct(*(char),int,int)
{	O
Byte	char
*	O
data	*(char)
;	O
Dword	int
len	int
;	O
Dword	int
alloc_size	int
;	O
}	O
*	O
Packet	struct(*(char),int,int)
;	O
static	O
Dword	int
read_dword	(*(struct(array(char),array(char),long,long,long,int)))->(int)
(	O
io_buffer	struct(array(char),array(char),long,long,long,int)
fp	*(struct(array(char),array(char),long,long,long,int))
)	O
{	O
Byte	char
val	int
[	O
4	int
]	O
;	O
if	O
(	O
buf_read	(*(struct(array(char),array(char),long,long,long,int)),*(char),long)->(long)
(	O
fp	*(struct(array(char),array(char),long,long,long,int))
,	O
val	int
,	O
4	int
)	O
<	O
4	int
)	O
{	O
return	O
0xffffffff	int
;	O
}	O
return	O
byte2dword	(*(char))->(int)
(	O
val	int
)	O
;	O
}	O
static	O
void	O
write_dword	(*(struct(array(char),array(char),long,long,long,int)),int)->(void)
(	O
io_buffer	struct(array(char),array(char),long,long,long,int)
fp	*(struct(array(char),array(char),long,long,long,int))
,	O
Dword	int
parm	int
)	O
{	O
Byte	char
val	int
[	O
4	int
]	O
;	O
dword2byte	(int,*(char))->(void)
(	O
parm	int
,	O
val	int
)	O
;	O
buf_write	(*(struct(array(char),array(char),long,long,long,int)),*(void),long)->(long)
(	O
fp	*(struct(array(char),array(char),long,long,long,int))
,	O
val	int
,	O
4	int
)	O
;	O
}	O
static	O
Packet	struct(*(char),int,int)
newPacket	()->(*(struct(*(char),int,int)))
(	O
void	O
)	O
{	O
Packet	struct(*(char),int,int)
packet	*(struct(*(char),int,int))
;	O
packet	*(struct(*(char),int,int))
=	O
New	O
(	O
struct	O
Packet	struct(*(char),int,int)
)	O
;	O
packet	*(struct(*(char),int,int))
->	O
data	*(char)
=	O
NULL	O
;	O
packet	*(struct(*(char),int,int))
->	O
len	int
=	O
packet	*(struct(*(char),int,int))
->	O
alloc_size	int
=	O
0	int
;	O
return	O
packet	*(struct(*(char),int,int))
;	O
}	O
static	O
void	O
destroyPacket	(*(struct(*(char),int,int)))->(void)
(	O
Packet	struct(*(char),int,int)
packet	*(struct(*(char),int,int))
)	O
{	O
if	O
(	O
packet	*(struct(*(char),int,int))
->	O
data	*(char)
)	O
free	(*(void))->(void)
(	O
packet	*(struct(*(char),int,int))
->	O
data	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
packet	*(struct(*(char),int,int))
)	O
;	O
}	O
static	O
void	O
kill_packet	(*(struct(*(char),int,int)))->(void)
(	O
Packet	struct(*(char),int,int)
packet	*(struct(*(char),int,int))
)	O
{	O
if	O
(	O
packet	*(struct(*(char),int,int))
->	O
data	*(char)
)	O
free	(*(void))->(void)
(	O
packet	*(struct(*(char),int,int))
->	O
data	*(char)
)	O
;	O
packet	*(struct(*(char),int,int))
->	O
data	*(char)
=	O
NULL	O
;	O
packet	*(struct(*(char),int,int))
->	O
len	int
=	O
0	int
;	O
packet	*(struct(*(char),int,int))
->	O
alloc_size	int
=	O
0	int
;	O
}	O
static	O
void	O
make_new	(*(struct(*(char),int,int)),int)->(void)
(	O
Packet	struct(*(char),int,int)
packet	*(struct(*(char),int,int))
,	O
Dword	int
l	array(long)
)	O
{	O
if	O
(	O
l	array(long)
<	O
packet	*(struct(*(char),int,int))
->	O
alloc_size	int
)	O
{	O
packet	*(struct(*(char),int,int))
->	O
len	int
=	O
l	array(long)
;	O
return	O
;	O
}	O
kill_packet	(*(struct(*(char),int,int)))->(void)
(	O
packet	*(struct(*(char),int,int))
)	O
;	O
packet	*(struct(*(char),int,int))
->	O
len	int
=	O
packet	*(struct(*(char),int,int))
->	O
alloc_size	int
=	O
l	array(long)
;	O
packet	*(struct(*(char),int,int))
->	O
data	*(char)
=	O
malloc	(long)->(*(void))
(	O
l	array(long)
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
packet	*(struct(*(char),int,int))
->	O
data	*(char)
,	O
0	int
,	O
l	array(long)
)	O
;	O
}	O
static	O
char	O
send_packet	(*(struct(*(char),int,int)),*(struct(array(char),array(char),long,long,long,int)))->(char)
(	O
Packet	struct(*(char),int,int)
packet	*(struct(*(char),int,int))
,	O
io_buffer	struct(array(char),array(char),long,long,long,int)
fp	*(struct(array(char),array(char),long,long,long,int))
)	O
{	O
if	O
(	O
packet	*(struct(*(char),int,int))
->	O
data	*(char)
)	O
{	O
write_dword	(*(struct(array(char),array(char),long,long,long,int)),int)->(void)
(	O
fp	*(struct(array(char),array(char),long,long,long,int))
,	O
packet	*(struct(*(char),int,int))
->	O
len	int
)	O
;	O
buf_write	(*(struct(array(char),array(char),long,long,long,int)),*(void),long)->(long)
(	O
fp	*(struct(array(char),array(char),long,long,long,int))
,	O
packet	*(struct(*(char),int,int))
->	O
data	*(char)
,	O
packet	*(struct(*(char),int,int))
->	O
len	int
)	O
;	O
flush	*((*(struct(*(struct`),int,*(struct`),*(struct`))))->(int))
(	O
fp	*(struct(array(char),array(char),long,long,long,int))
)	O
;	O
}	O
return	O
(	O
packet	*(struct(*(char),int,int))
->	O
data	*(char)
!=	O
NULL	O
)	O
;	O
}	O
static	O
char	O
recv_packet	(*(struct(*(char),int,int)),*(struct(array(char),array(char),long,long,long,int)),int)->(char)
(	O
Packet	struct(*(char),int,int)
packet	*(struct(*(char),int,int))
,	O
io_buffer	struct(array(char),array(char),long,long,long,int)
fp	*(struct(array(char),array(char),long,long,long,int))
,	O
Dword	int
maxlength	int
)	O
{	O
Dword	int
start	array(char)
;	O
size_t	long
l	array(long)
;	O
Dword	int
length	int
=	O
read_dword	(*(struct(array(char),array(char),long,long,long,int)))->(int)
(	O
fp	*(struct(array(char),array(char),long,long,long,int))
)	O
;	O
if	O
(	O
length	int
>	O
maxlength	int
||	O
length	int
==	O
0xffffffff	int
)	O
{	O
return	O
0	int
;	O
}	O
make_new	(*(struct(*(char),int,int)),int)->(void)
(	O
packet	*(struct(*(char),int,int))
,	O
length	int
)	O
;	O
l	array(long)
=	O
0	int
;	O
for	O
(	O
start	array(char)
=	O
0	int
;	O
start	array(char)
<	O
length	int
;	O
start	array(char)
+=	O
l	array(long)
)	O
{	O
l	array(long)
=	O
buf_read	(*(struct(array(char),array(char),long,long,long,int)),*(char),long)->(long)
(	O
fp	*(struct(array(char),array(char),long,long,long,int))
,	O
packet	*(struct(*(char),int,int))
->	O
data	*(char)
+	O
start	array(char)
,	O
length	int
-	O
start	array(char)
)	O
;	O
if	O
(	O
l	array(long)
==	O
0	int
)	O
{	O
return	O
0	int
;	O
}	O
}	O
if	O
(	O
packet	*(struct(*(char),int,int))
->	O
len	int
==	O
0	int
)	O
{	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
static	O
ssize_t	long
read_packet	(*(struct(*(char),int,int)),int,int)->(long)
(	O
Packet	struct(*(char),int,int)
packet	*(struct(*(char),int,int))
,	O
int	O
fd	int
,	O
Dword	int
length	int
)	O
{	O
make_new	(*(struct(*(char),int,int)),int)->(void)
(	O
packet	*(struct(*(char),int,int))
,	O
length	int
)	O
;	O
ssize_t	long
ret	long
=	O
read	*((*(void),*(char),long)->(long))
(	O
fd	int
,	O
packet	*(struct(*(char),int,int))
->	O
data	*(char)
,	O
packet	*(struct(*(char),int,int))
->	O
len	int
)	O
;	O
if	O
(	O
ret	long
<	O
0	int
)	O
return	O
ret	long
;	O
packet	*(struct(*(char),int,int))
->	O
len	int
=	O
(	O
Dword	int
)	O
ret	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
write_packet	(*(struct(*(char),int,int)),int)->(int)
(	O
Packet	struct(*(char),int,int)
packet	*(struct(*(char),int,int))
,	O
int	O
fd	int
)	O
{	O
return	O
(	O
int	O
)	O
write	*((*(void),*(char),long)->(long))
(	O
fd	int
,	O
packet	*(struct(*(char),int,int))
->	O
data	*(char)
,	O
packet	*(struct(*(char),int,int))
->	O
len	int
)	O
;	O
}	O
static	O
void	O
put_dword	(*(struct(*(char),int,int)),int,int)->(void)
(	O
Packet	struct(*(char),int,int)
packet	*(struct(*(char),int,int))
,	O
int	O
my_index	int
,	O
Dword	int
val	int
)	O
{	O
dword2byte	(int,*(char))->(void)
(	O
val	int
,	O
packet	*(struct(*(char),int,int))
->	O
data	*(char)
+	O
my_index	int
)	O
;	O
}	O
static	O
void	O
put_qword	(*(struct(*(char),int,int)),int,long)->(void)
(	O
Packet	struct(*(char),int,int)
packet	*(struct(*(char),int,int))
,	O
int	O
my_index	int
,	O
Qword	long
val	int
)	O
{	O
qword2byte	(long,*(char))->(void)
(	O
val	int
,	O
packet	*(struct(*(char),int,int))
->	O
data	*(char)
+	O
my_index	int
)	O
;	O
}	O
static	O
Dword	int
get_dword	(*(struct(*(char),int,int)),int)->(int)
(	O
Packet	struct(*(char),int,int)
packet	*(struct(*(char),int,int))
,	O
int	O
my_index	int
)	O
{	O
return	O
byte2dword	(*(char))->(int)
(	O
packet	*(struct(*(char),int,int))
->	O
data	*(char)
+	O
my_index	int
)	O
;	O
}	O
static	O
Qword	long
get_qword	(*(struct(*(char),int,int)),int)->(long)
(	O
Packet	struct(*(char),int,int)
packet	*(struct(*(char),int,int))
,	O
int	O
my_index	int
)	O
{	O
return	O
byte2qword	(*(char))->(long)
(	O
packet	*(struct(*(char),int,int))
->	O
data	*(char)
+	O
my_index	int
)	O
;	O
}	O
static	O
Dword	int
get_length	(*(struct(*(char),int,int)))->(int)
(	O
Packet	struct(*(char),int,int)
packet	*(struct(*(char),int,int))
)	O
{	O
return	O
packet	*(struct(*(char),int,int))
->	O
len	int
;	O
}	O
static	O
int	O
eat	(*(*(char)),*(long),char)->(int)
(	O
unsigned	O
char	O
*	O
*	O
ptr	*(*(char))
,	O
size_t	long
*	O
len	int
,	O
unsigned	O
char	O
c	char
)	O
{	O
if	O
(	O
*	O
len	int
<	O
c	char
+	O
3	int
)	O
return	O
-	O
1	int
;	O
(	O
*	O
ptr	*(*(char))
)	O
+=	O
c	char
+	O
2	int
;	O
(	O
*	O
len	int
)	O
-=	O
c	char
+	O
2	int
;	O
return	O
0	int
;	O
}	O
static	O
const	O
char	O
*	O
dispName	*(char)
;	O
static	O
char	O
XAUTHORITY	array(char)
[	O
]	O
=	O
"XAUTHORITY"	*(char)
;	O
static	O
char	O
do_auth	(*(struct(array(char),array(char),long,long,long,int)),*(int))->(char)
(	O
io_buffer	struct(array(char),array(char),long,long,long,int)
sock	int
,	O
unsigned	O
int	O
*	O
version	*(int)
)	O
{	O
int	O
fd	int
;	O
Display	struct
*	O
displ	*(struct)
;	O
Packet	struct(*(char),int,int)
proto_version	*(struct(*(char),int,int))
=	O
newPacket	()->(*(struct(*(char),int,int)))
(	O
)	O
;	O
Packet	struct(*(char),int,int)
mit_cookie	*(struct(*(char),int,int))
;	O
unsigned	O
char	O
*	O
ptr	*(*(char))
;	O
size_t	long
len	int
;	O
char	O
authFile	array(char)
[	O
41	int
]	O
=	O
"/tmp/floppyd.XXXXXX"	*(char)
;	O
unsigned	O
char	O
template	array(char)
[	O
4096	int
]	O
;	O
Packet	struct(*(char),int,int)
reply	*(struct(*(char),int,int))
=	O
newPacket	()->(*(struct(*(char),int,int)))
(	O
)	O
;	O
make_new	(*(struct(*(char),int,int)),int)->(void)
(	O
reply	*(struct(*(char),int,int))
,	O
4	int
)	O
;	O
if	O
(	O
!	O
recv_packet	(*(struct(*(char),int,int)),*(struct(array(char),array(char),long,long,long,int)),int)->(char)
(	O
proto_version	*(struct(*(char),int,int))
,	O
sock	int
,	O
4	int
)	O
)	O
{	O
put_dword	(*(struct(*(char),int,int)),int,int)->(void)
(	O
reply	*(struct(*(char),int,int))
,	O
0	int
,	O
AUTH_PACKETOVERSIZE	int
)	O
;	O
send_packet	(*(struct(*(char),int,int)),*(struct(array(char),array(char),long,long,long,int)))->(char)
(	O
reply	*(struct(*(char),int,int))
,	O
sock	int
)	O
;	O
destroyPacket	(*(struct(*(char),int,int)))->(void)
(	O
reply	*(struct(*(char),int,int))
)	O
;	O
destroyPacket	(*(struct(*(char),int,int)))->(void)
(	O
proto_version	*(struct(*(char),int,int))
)	O
;	O
return	O
0	int
;	O
}	O
*	O
version	*(int)
=	O
get_dword	(*(struct(*(char),int,int)),int)->(int)
(	O
proto_version	*(struct(*(char),int,int))
,	O
0	int
)	O
;	O
if	O
(	O
*	O
version	*(int)
>	O
FLOPPYD_PROTOCOL_VERSION	int
||	O
*	O
version	*(int)
<	O
FLOPPYD_PROTOCOL_VERSION_OLD	int
)	O
{	O
put_dword	(*(struct(*(char),int,int)),int,int)->(void)
(	O
reply	*(struct(*(char),int,int))
,	O
0	int
,	O
AUTH_WRONGVERSION	int
)	O
;	O
send_packet	(*(struct(*(char),int,int)),*(struct(array(char),array(char),long,long,long,int)))->(char)
(	O
reply	*(struct(*(char),int,int))
,	O
sock	int
)	O
;	O
destroyPacket	(*(struct(*(char),int,int)))->(void)
(	O
reply	*(struct(*(char),int,int))
)	O
;	O
destroyPacket	(*(struct(*(char),int,int)))->(void)
(	O
proto_version	*(struct(*(char),int,int))
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
*	O
version	*(int)
==	O
FLOPPYD_PROTOCOL_VERSION_OLD	int
)	O
{	O
put_dword	(*(struct(*(char),int,int)),int,int)->(void)
(	O
reply	*(struct(*(char),int,int))
,	O
0	int
,	O
AUTH_SUCCESS	int
)	O
;	O
}	O
else	O
{	O
Dword	int
cap	int
=	O
FLOPPYD_CAP_EXPLICIT_OPEN	int
;	O
if	O
(	O
sizeof	O
(	O
mt_off_t	long
)	O
>=	O
8	int
)	O
{	O
cap	int
|=	O
FLOPPYD_CAP_LARGE_SEEK	int
;	O
}	O
make_new	(*(struct(*(char),int,int)),int)->(void)
(	O
reply	*(struct(*(char),int,int))
,	O
12	int
)	O
;	O
put_dword	(*(struct(*(char),int,int)),int,int)->(void)
(	O
reply	*(struct(*(char),int,int))
,	O
0	int
,	O
AUTH_SUCCESS	int
)	O
;	O
put_dword	(*(struct(*(char),int,int)),int,int)->(void)
(	O
reply	*(struct(*(char),int,int))
,	O
4	int
,	O
FLOPPYD_PROTOCOL_VERSION	int
)	O
;	O
put_dword	(*(struct(*(char),int,int)),int,int)->(void)
(	O
reply	*(struct(*(char),int,int))
,	O
8	int
,	O
cap	int
)	O
;	O
}	O
send_packet	(*(struct(*(char),int,int)),*(struct(array(char),array(char),long,long,long,int)))->(char)
(	O
reply	*(struct(*(char),int,int))
,	O
sock	int
)	O
;	O
destroyPacket	(*(struct(*(char),int,int)))->(void)
(	O
proto_version	*(struct(*(char),int,int))
)	O
;	O
make_new	(*(struct(*(char),int,int)),int)->(void)
(	O
reply	*(struct(*(char),int,int))
,	O
4	int
)	O
;	O
mit_cookie	*(struct(*(char),int,int))
=	O
newPacket	()->(*(struct(*(char),int,int)))
(	O
)	O
;	O
if	O
(	O
!	O
recv_packet	(*(struct(*(char),int,int)),*(struct(array(char),array(char),long,long,long,int)),int)->(char)
(	O
mit_cookie	*(struct(*(char),int,int))
,	O
sock	int
,	O
MAX_XAUTHORITY_LENGTH	int
)	O
)	O
{	O
put_dword	(*(struct(*(char),int,int)),int,int)->(void)
(	O
reply	*(struct(*(char),int,int))
,	O
0	int
,	O
AUTH_PACKETOVERSIZE	int
)	O
;	O
send_packet	(*(struct(*(char),int,int)),*(struct(array(char),array(char),long,long,long,int)))->(char)
(	O
reply	*(struct(*(char),int,int))
,	O
sock	int
)	O
;	O
destroyPacket	(*(struct(*(char),int,int)))->(void)
(	O
reply	*(struct(*(char),int,int))
)	O
;	O
destroyPacket	(*(struct(*(char),int,int)))->(void)
(	O
mit_cookie	*(struct(*(char),int,int))
)	O
;	O
return	O
0	int
;	O
}	O
umask	(int)->(int)
(	O
077	int
)	O
;	O
fd	int
=	O
mkstemp	(*(char))->(int)
(	O
authFile	array(char)
)	O
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
{	O
put_dword	(*(struct(*(char),int,int)),int,int)->(void)
(	O
reply	*(struct(*(char),int,int))
,	O
0	int
,	O
AUTH_DEVLOCKED	int
)	O
;	O
send_packet	(*(struct(*(char),int,int)),*(struct(array(char),array(char),long,long,long,int)))->(char)
(	O
reply	*(struct(*(char),int,int))
,	O
sock	int
)	O
;	O
close	*((*(void))->(int))
(	O
fd	int
)	O
;	O
destroyPacket	(*(struct(*(char),int,int)))->(void)
(	O
reply	*(struct(*(char),int,int))
)	O
;	O
destroyPacket	(*(struct(*(char),int,int)))->(void)
(	O
mit_cookie	*(struct(*(char),int,int))
)	O
;	O
return	O
0	int
;	O
}	O
setenv	(*(char),*(char),int)->(int)
(	O
XAUTHORITY	array(char)
,	O
authFile	array(char)
,	O
1	int
)	O
;	O
ptr	*(*(char))
=	O
template	array(char)
;	O
ptr	*(*(char))
[	O
4095	int
]	O
=	O
0	int
;	O
*	O
ptr	*(*(char))
++	O
=	O
1	int
;	O
*	O
ptr	*(*(char))
++	O
=	O
0	int
;	O
*	O
ptr	*(*(char))
++	O
=	O
0	int
;	O
gethostname	(*(char),long)->(int)
(	O
(	O
char	O
*	O
)	O
ptr	*(*(char))
+	O
1	int
,	O
4088	int
)	O
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
(	O
char	O
*	O
)	O
ptr	*(*(char))
+	O
1	int
)	O
;	O
*	O
ptr	*(*(char))
++	O
=	O
(	O
unsigned	O
char	O
)	O
len	int
;	O
ptr	*(*(char))
+=	O
len	int
;	O
*	O
ptr	*(*(char))
++	O
=	O
0	int
;	O
*	O
ptr	*(*(char))
++	O
=	O
1	int
;	O
*	O
ptr	*(*(char))
++	O
=	O
'0'	O
;	O
*	O
ptr	*(*(char))
++	O
=	O
'\0'	O
;	O
if	O
(	O
write	*((*(void),*(char),long)->(long))
(	O
fd	int
,	O
template	array(char)
,	O
len	int
+	O
8	int
)	O
<	O
(	O
ssize_t	long
)	O
(	O
len	int
+	O
8	int
)	O
)	O
{	O
close	*((*(void))->(int))
(	O
fd	int
)	O
;	O
return	O
0	int
;	O
}	O
ptr	*(*(char))
=	O
mit_cookie	*(struct(*(char),int,int))
->	O
data	*(char)
;	O
len	int
=	O
mit_cookie	*(struct(*(char),int,int))
->	O
len	int
;	O
if	O
(	O
eat	(*(*(char)),*(long),char)->(int)
(	O
&	O
ptr	*(*(char))
,	O
&	O
len	int
,	O
1	int
)	O
||	O
eat	(*(*(char)),*(long),char)->(int)
(	O
&	O
ptr	*(*(char))
,	O
&	O
len	int
,	O
*	O
ptr	*(*(char))
)	O
||	O
eat	(*(*(char)),*(long),char)->(int)
(	O
&	O
ptr	*(*(char))
,	O
&	O
len	int
,	O
*	O
ptr	*(*(char))
)	O
)	O
{	O
destroyPacket	(*(struct(*(char),int,int)))->(void)
(	O
mit_cookie	*(struct(*(char),int,int))
)	O
;	O
unlink	(*(char))->(int)
(	O
XauFileName	()->(*(char))
(	O
)	O
)	O
;	O
put_dword	(*(struct(*(char),int,int)),int,int)->(void)
(	O
reply	*(struct(*(char),int,int))
,	O
0	int
,	O
AUTH_BADPACKET	int
)	O
;	O
send_packet	(*(struct(*(char),int,int)),*(struct(array(char),array(char),long,long,long,int)))->(char)
(	O
reply	*(struct(*(char),int,int))
,	O
sock	int
)	O
;	O
destroyPacket	(*(struct(*(char),int,int)))->(void)
(	O
reply	*(struct(*(char),int,int))
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
write	*((*(void),*(char),long)->(long))
(	O
fd	int
,	O
ptr	*(*(char))
,	O
len	int
)	O
<	O
(	O
ssize_t	long
)	O
len	int
)	O
{	O
close	*((*(void))->(int))
(	O
fd	int
)	O
;	O
return	O
0	int
;	O
}	O
close	*((*(void))->(int))
(	O
fd	int
)	O
;	O
destroyPacket	(*(struct(*(char),int,int)))->(void)
(	O
mit_cookie	*(struct(*(char),int,int))
)	O
;	O
displ	*(struct)
=	O
XOpenDisplay	(*(char))->(*(struct))
(	O
dispName	*(char)
)	O
;	O
if	O
(	O
!	O
displ	*(struct)
)	O
{	O
unlink	(*(char))->(int)
(	O
XauFileName	()->(*(char))
(	O
)	O
)	O
;	O
put_dword	(*(struct(*(char),int,int)),int,int)->(void)
(	O
reply	*(struct(*(char),int,int))
,	O
0	int
,	O
AUTH_AUTHFAILED	int
)	O
;	O
send_packet	(*(struct(*(char),int,int)),*(struct(array(char),array(char),long,long,long,int)))->(char)
(	O
reply	*(struct(*(char),int,int))
,	O
sock	int
)	O
;	O
destroyPacket	(*(struct(*(char),int,int)))->(void)
(	O
reply	*(struct(*(char),int,int))
)	O
;	O
return	O
0	int
;	O
}	O
XCloseDisplay	(*(struct))->(int)
(	O
displ	*(struct)
)	O
;	O
put_dword	(*(struct(*(char),int,int)),int,int)->(void)
(	O
reply	*(struct(*(char),int,int))
,	O
0	int
,	O
AUTH_SUCCESS	int
)	O
;	O
send_packet	(*(struct(*(char),int,int)),*(struct(array(char),array(char),long,long,long,int)))->(char)
(	O
reply	*(struct(*(char),int,int))
,	O
sock	int
)	O
;	O
destroyPacket	(*(struct(*(char),int,int)))->(void)
(	O
reply	*(struct(*(char),int,int))
)	O
;	O
unlink	(*(char))->(int)
(	O
XauFileName	()->(*(char))
(	O
)	O
)	O
;	O
return	O
1	int
;	O
}	O
static	O
uint16_t	short
getportnum	(*(char))->(short)
(	O
char	O
*	O
portnum	*(char)
)	O
{	O
char	O
*	O
digits	*(char)
=	O
portnum	*(char)
;	O
struct	O
servent	struct(*(char),*(*(char)),int,*(char))
*	O
serv	*(struct(*(char),*(*(char)),int,*(char)))
;	O
uint16_t	short
port	short
;	O
for	O
(	O
port	short
=	O
0	int
;	O
isdigit	(int)->(int)
(	O
*	O
digits	*(char)
)	O
;	O
++	O
digits	*(char)
)	O
{	O
port	short
=	O
(	O
port	short
*	O
10	int
)	O
+	O
(	O
*	O
digits	*(char)
-	O
'0'	O
)	O
;	O
}	O
if	O
(	O
(	O
*	O
digits	*(char)
!=	O
'\0'	O
)	O
||	O
(	O
port	short
<=	O
0	int
)	O
)	O
{	O
if	O
(	O
(	O
serv	*(struct(*(char),*(*(char)),int,*(char)))
=	O
getservbyname	(*(char),*(char))->(*(struct(*(char),*(*(char)),int,*(char))))
(	O
portnum	*(char)
,	O
"tcp"	*(char)
)	O
)	O
!=	O
NULL	O
)	O
{	O
port	short
=	O
ntohs	(short)->(short)
(	O
serv	*(struct(*(char),*(*(char)),int,*(char)))
->	O
s_port	int
)	O
;	O
}	O
else	O
{	O
port	short
=	O
0	int
;	O
}	O
endservent	()->(void)
(	O
)	O
;	O
}	O
return	O
(	O
port	short
)	O
;	O
}	O
static	O
in_addr_t	int
getipaddress	(*(char))->(int)
(	O
char	O
*	O
ipaddr	*(char)
)	O
{	O
struct	O
hostent	struct(*(char),*(*(char)),int,int,*(*(char)))
*	O
host	*(struct(*(char),*(*(char)),int,int,*(*(char))))
;	O
in_addr_t	int
ip	int
;	O
if	O
(	O
(	O
(	O
ip	int
=	O
inet_addr	(*(char))->(int)
(	O
ipaddr	*(char)
)	O
)	O
==	O
INADDR_NONE	O
)	O
&&	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
ipaddr	*(char)
,	O
"255.255.255.255"	*(char)
)	O
!=	O
0	int
)	O
)	O
{	O
if	O
(	O
(	O
host	*(struct(*(char),*(*(char)),int,int,*(*(char))))
=	O
gethostbyname	(*(char))->(*(struct(*(char),*(*(char)),int,int,*(*(char)))))
(	O
ipaddr	*(char)
)	O
)	O
!=	O
NULL	O
)	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
&	O
ip	int
,	O
host	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_addr	O
,	O
sizeof	O
(	O
ip	int
)	O
)	O
;	O
}	O
endhostent	()->(void)
(	O
)	O
;	O
}	O
return	O
(	O
ip	int
)	O
;	O
}	O
static	O
uid_t	int
getuserid	(*(char))->(int)
(	O
char	O
*	O
user	*(char)
)	O
{	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
;	O
uid_t	int
uid	int
;	O
if	O
(	O
(	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
getpwnam	(*(char))->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
user	*(char)
)	O
)	O
!=	O
NULL	O
)	O
{	O
uid	int
=	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_uid	int
;	O
}	O
else	O
if	O
(	O
*	O
user	*(char)
==	O
'#'	O
)	O
{	O
uid	int
=	O
(	O
uid_t	int
)	O
atoi	(*(char))->(int)
(	O
&	O
user	*(char)
[	O
1	int
]	O
)	O
;	O
}	O
else	O
{	O
uid	int
=	O
65535	int
;	O
}	O
endpwent	()->(void)
(	O
)	O
;	O
return	O
(	O
uid	int
)	O
;	O
}	O
static	O
uid_t	int
getgroupid	(int)->(int)
(	O
uid_t	int
uid	int
)	O
{	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
;	O
gid_t	int
gid	int
;	O
if	O
(	O
(	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
getpwuid	(int)->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
uid	int
)	O
)	O
!=	O
NULL	O
)	O
{	O
gid	int
=	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_gid	int
;	O
}	O
else	O
{	O
gid	int
=	O
65535	int
;	O
}	O
endpwent	()->(void)
(	O
)	O
;	O
return	O
(	O
gid	int
)	O
;	O
}	O
static	O
int	O
bind_to_port	(int,short)->(int)
(	O
in_addr_t	int
bind_ip	int
,	O
uint16_t	short
bind_port	short
)	O
{	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
addr	struct(short,short,struct(int),array(char))
;	O
int	O
sock	int
;	O
if	O
(	O
(	O
sock	int
=	O
socket	(int,int,int)->(int)
(	O
AF_INET	O
,	O
SOCK_STREAM	int
,	O
0	int
)	O
)	O
<	O
0	int
)	O
{	O
perror	(*(char))->(void)
(	O
"socket()"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
{	O
int	O
on	int
=	O
1	int
;	O
if	O
(	O
setsockopt	(int,int,int,*(void),int)->(int)
(	O
sock	int
,	O
SOL_SOCKET	int
,	O
SO_REUSEADDR	int
,	O
(	O
char	O
*	O
)	O
&	O
on	int
,	O
sizeof	O
(	O
on	int
)	O
)	O
<	O
0	int
)	O
{	O
perror	(*(char))->(void)
(	O
"setsockopt"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
addr	struct(short,short,struct(int),array(char))
.	O
sin_family	short
=	O
AF_INET	O
;	O
addr	struct(short,short,struct(int),array(char))
.	O
sin_port	short
=	O
htons	(short)->(short)
(	O
bind_port	short
)	O
;	O
addr	struct(short,short,struct(int),array(char))
.	O
sin_addr	struct(int)
.	O
s_addr	int
=	O
bind_ip	int
;	O
if	O
(	O
bind	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(int)
(	O
sock	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
addr	struct(short,short,struct(int),array(char))
,	O
sizeof	O
(	O
addr	struct(short,short,struct(int),array(char))
)	O
)	O
<	O
0	int
)	O
{	O
perror	(*(char))->(void)
(	O
"bind()"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
listen	(int,int)->(int)
(	O
sock	int
,	O
SOMAXCONN	int
)	O
<	O
0	int
)	O
{	O
perror	(*(char))->(void)
(	O
"listen()"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
return	O
(	O
sock	int
)	O
;	O
}	O
static	O
int	O
sockethandle_now	int
=	O
-	O
1	int
;	O
static	O
void	O
alarm_signal	(int)->(void)
(	O
int	O
a	long
UNUSEDP	O
)	O
NORETURN	O
;	O
static	O
void	O
alarm_signal	(int)->(void)
(	O
int	O
a	long
UNUSEDP	O
)	O
{	O
if	O
(	O
sockethandle_now	int
!=	O
-	O
1	int
)	O
{	O
close	*((*(void))->(int))
(	O
sockethandle_now	int
)	O
;	O
sockethandle_now	int
=	O
-	O
1	int
;	O
unlink	(*(char))->(int)
(	O
XauFileName	()->(*(char))
(	O
)	O
)	O
;	O
}	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
static	O
void	O
server_main_loop	(int,*(*(char)),int)->(void)
(	O
int	O
sock	int
,	O
char	O
*	O
*	O
device_name	*(*(char))
,	O
unsigned	O
int	O
n_dev	int
)	O
NORETURN	O
;	O
static	O
void	O
server_main_loop	(int,*(*(char)),int)->(void)
(	O
int	O
sock	int
,	O
char	O
*	O
*	O
device_name	*(*(char))
,	O
unsigned	O
int	O
n_dev	int
)	O
{	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
addr	struct(short,short,struct(int),array(char))
;	O
unsigned	O
int	O
len	int
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGCLD	O
,	O
SIG_IGN	O
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
int	O
new_sock	int
;	O
len	int
=	O
sizeof	O
(	O
addr	struct(short,short,struct(int),array(char))
)	O
;	O
while	O
(	O
(	O
new_sock	int
=	O
accept	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),*(int))->(int)
(	O
sock	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
addr	struct(short,short,struct(int),array(char))
,	O
&	O
len	int
)	O
)	O
<	O
0	int
)	O
{	O
}	O
switch	O
(	O
fork	()->(int)
(	O
)	O
)	O
{	O
case	O
-	O
1	int
:	O
break	O
;	O
case	O
0	int
:	O
serve_client	(int,*(*(char)),int,int)->(void)
(	O
new_sock	int
,	O
device_name	*(*(char))
,	O
n_dev	int
,	O
0	int
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
close	*((*(void))->(int))
(	O
new_sock	int
)	O
;	O
new_sock	int
=	O
-	O
1	int
;	O
}	O
}	O
static	O
void	O
usage	(*(char),*(char),int)->(void)
(	O
char	O
*	O
prog	*(char)
,	O
const	O
char	O
*	O
opt	*(char)
,	O
int	O
ret	long
)	O
NORETURN	O
;	O
static	O
void	O
usage	(*(char),*(char),int)->(void)
(	O
char	O
*	O
prog	*(char)
,	O
const	O
char	O
*	O
opt	*(char)
,	O
int	O
ret	long
)	O
{	O
if	O
(	O
opt	*(char)
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: %s\n"	*(char)
,	O
prog	*(char)
,	O
opt	*(char)
)	O
;	O
}	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"usage: %s [-s port [-r user] [-b ipaddr]] devicename [Names of local host]\n"	*(char)
,	O
prog	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"    -d          Run as a server (default port 5703 + DISPLAY)\n"	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"    -s port     Run as a server bound to the specified port.\n"	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"    -r user     Run as the specified user in server mode.\n"	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"    -b ipaddr   Bind to the specified ipaddr in server mode.\n"	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"    -l          Do not attempt to connect to localhost:0 to validate connection\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
ret	long
)	O
;	O
}	O
static	O
char	O
*	O
makeDisplayName	(int)->(*(char))
(	O
int	O
dispNr	int
)	O
{	O
char	O
result	array(char)
[	O
80	int
]	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
result	array(char)
,	O
":%d.0"	*(char)
,	O
dispNr	int
)	O
;	O
return	O
strdup	(*(char))->(*(char))
(	O
result	array(char)
)	O
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
sockfd	int
=	O
0	int
;	O
int	O
arg	int
;	O
int	O
run_as_server	int
=	O
0	int
;	O
in_addr_t	int
bind_ip	int
=	O
INADDR_ANY	O
;	O
uint16_t	short
bind_port	short
=	O
0	int
;	O
uid_t	int
run_uid	int
=	O
65535	int
;	O
gid_t	int
run_gid	int
=	O
65535	int
;	O
char	O
*	O
username	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
"nobody"	*(char)
)	O
;	O
int	O
sock	int
;	O
char	O
*	O
*	O
device_name	*(*(char))
=	O
NULL	O
;	O
const	O
char	O
*	O
floppy0	*(char)
=	O
"/dev/fd0"	*(char)
;	O
unsigned	O
int	O
n_dev	int
;	O
if	O
(	O
argc	int
>	O
1	int
&&	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
0	int
]	O
,	O
"--help"	*(char)
)	O
)	O
usage	(*(char),*(char),int)->(void)
(	O
argv	*(*(char))
[	O
0	int
]	O
,	O
NULL	O
,	O
0	int
)	O
;	O
while	O
(	O
(	O
arg	int
=	O
getopt	(int,*(*(char)),*(char))->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
"ds:r:b:x:h"	*(char)
)	O
)	O
!=	O
EOF	O
)	O
{	O
switch	O
(	O
arg	int
)	O
{	O
case	O
'd'	O
:	O
run_as_server	int
=	O
1	int
;	O
break	O
;	O
case	O
's'	O
:	O
run_as_server	int
=	O
1	int
;	O
bind_port	short
=	O
getportnum	(*(char))->(short)
(	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
'r'	O
:	O
free	(*(void))->(void)
(	O
username	*(char)
)	O
;	O
username	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
optarg	*(char)
)	O
;	O
run_uid	int
=	O
getuserid	(*(char))->(int)
(	O
optarg	*(char)
)	O
;	O
run_gid	int
=	O
getgroupid	(int)->(int)
(	O
run_uid	int
)	O
;	O
break	O
;	O
case	O
'b'	O
:	O
run_as_server	int
=	O
1	int
;	O
bind_ip	int
=	O
getipaddress	(*(char))->(int)
(	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
'x'	O
:	O
dispName	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
'h'	O
:	O
usage	(*(char),*(char),int)->(void)
(	O
argv	*(*(char))
[	O
0	int
]	O
,	O
NULL	O
,	O
0	int
)	O
;	O
case	O
'?'	O
:	O
usage	(*(char),*(char),int)->(void)
(	O
argv	*(*(char))
[	O
0	int
]	O
,	O
NULL	O
,	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
optind	int
<	O
argc	int
)	O
{	O
device_name	*(*(char))
=	O
argv	*(*(char))
+	O
optind	int
;	O
n_dev	int
=	O
argc	int
-	O
optind	int
;	O
}	O
else	O
{	O
device_name	*(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
&	O
floppy0	*(char)
;	O
n_dev	int
=	O
1	int
;	O
}	O
if	O
(	O
dispName	*(char)
==	O
NULL	O
)	O
dispName	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"DISPLAY"	*(char)
)	O
;	O
if	O
(	O
dispName	*(char)
==	O
NULL	O
&&	O
bind_port	short
!=	O
0	int
)	O
dispName	*(char)
=	O
makeDisplayName	(int)->(*(char))
(	O
(	O
unsigned	O
short	O
)	O
(	O
bind_port	short
-	O
5703	int
)	O
)	O
;	O
if	O
(	O
dispName	*(char)
==	O
NULL	O
)	O
dispName	*(char)
=	O
":0"	*(char)
;	O
if	O
(	O
bind_port	short
==	O
0	int
)	O
{	O
char	O
*	O
p	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
dispName	*(char)
,	O
':'	O
)	O
;	O
bind_port	short
=	O
FLOPPYD_DEFAULT_PORT	int
;	O
if	O
(	O
p	*(char)
!=	O
NULL	O
)	O
bind_port	short
+=	O
atoi	(*(char))->(int)
(	O
p	*(char)
+	O
1	int
)	O
;	O
}	O
if	O
(	O
!	O
run_as_server	int
)	O
{	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
addr	struct(short,short,struct(int),array(char))
;	O
unsigned	O
int	O
len	int
=	O
sizeof	O
(	O
addr	struct(short,short,struct(int),array(char))
)	O
;	O
if	O
(	O
getsockname	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),*(int))->(int)
(	O
0	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
addr	struct(short,short,struct(int),array(char))
,	O
&	O
len	int
)	O
>=	O
0	int
&&	O
len	int
==	O
sizeof	O
(	O
addr	struct(short,short,struct(int),array(char))
)	O
)	O
{	O
bind_port	short
=	O
ntohs	(short)->(short)
(	O
addr	struct(short,short,struct(int),array(char))
.	O
sin_port	short
)	O
;	O
}	O
}	O
umask	(int)->(int)
(	O
0077	int
)	O
;	O
if	O
(	O
run_as_server	int
&&	O
(	O
bind_ip	int
==	O
INADDR_NONE	O
)	O
)	O
{	O
usage	(*(char),*(char),int)->(void)
(	O
argv	*(*(char))
[	O
0	int
]	O
,	O
"The server ipaddr is invalid."	*(char)
,	O
1	int
)	O
;	O
}	O
if	O
(	O
run_as_server	int
&&	O
(	O
bind_port	short
==	O
0	int
)	O
)	O
{	O
usage	(*(char),*(char),int)->(void)
(	O
argv	*(*(char))
[	O
0	int
]	O
,	O
"No server port was specified (or it was invalid)."	*(char)
,	O
1	int
)	O
;	O
}	O
if	O
(	O
run_as_server	int
)	O
{	O
sock	int
=	O
bind_to_port	(int,short)->(int)
(	O
bind_ip	int
,	O
bind_port	short
)	O
;	O
switch	O
(	O
fork	()->(int)
(	O
)	O
)	O
{	O
case	O
-	O
1	int
:	O
perror	(*(char))->(void)
(	O
"fork()"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
case	O
0	int
:	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGHUP	int
,	O
SIG_IGN	O
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGQUIT	int
,	O
SIG_IGN	O
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGTSTP	int
,	O
SIG_IGN	O
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGCONT	int
,	O
SIG_IGN	O
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGPIPE	int
,	O
alarm_signal	(int)->(void)
)	O
;	O
setgid	(int)->(int)
(	O
run_gid	int
)	O
;	O
initgroups	(*(char),int)->(int)
(	O
username	*(char)
,	O
run_gid	int
)	O
;	O
setuid	(int)->(int)
(	O
run_uid	int
)	O
;	O
setsid	()->(int)
(	O
)	O
;	O
setpgrp	()->(int)
(	O
)	O
;	O
server_main_loop	(int,*(*(char)),int)->(void)
(	O
sock	int
,	O
device_name	*(*(char))
,	O
n_dev	int
)	O
;	O
}	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGHUP	int
,	O
alarm_signal	(int)->(void)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGINT	int
,	O
alarm_signal	(int)->(void)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGQUIT	int
,	O
alarm_signal	(int)->(void)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGTERM	int
,	O
alarm_signal	(int)->(void)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGTSTP	int
,	O
SIG_IGN	O
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGCONT	int
,	O
SIG_IGN	O
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGPIPE	int
,	O
alarm_signal	(int)->(void)
)	O
;	O
serve_client	(int,*(*(char)),int,int)->(void)
(	O
sockfd	int
,	O
device_name	*(*(char))
,	O
n_dev	int
,	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
send_reply	(int,*(struct(array(char),array(char),long,long,long,int)),int)->(void)
(	O
int	O
rval	long
,	O
io_buffer	struct(array(char),array(char),long,long,long,int)
sock	int
,	O
Dword	int
len	int
)	O
{	O
Packet	struct(*(char),int,int)
reply	*(struct(*(char),int,int))
=	O
newPacket	()->(*(struct(*(char),int,int)))
(	O
)	O
;	O
make_new	(*(struct(*(char),int,int)),int)->(void)
(	O
reply	*(struct(*(char),int,int))
,	O
8	int
)	O
;	O
put_dword	(*(struct(*(char),int,int)),int,int)->(void)
(	O
reply	*(struct(*(char),int,int))
,	O
0	int
,	O
len	int
)	O
;	O
if	O
(	O
rval	long
==	O
-	O
1	int
)	O
{	O
put_dword	(*(struct(*(char),int,int)),int,int)->(void)
(	O
reply	*(struct(*(char),int,int))
,	O
4	int
,	O
0	int
)	O
;	O
}	O
else	O
{	O
put_dword	(*(struct(*(char),int,int)),int,int)->(void)
(	O
reply	*(struct(*(char),int,int))
,	O
4	int
,	O
(	O
Dword	int
)	O
errno	O
)	O
;	O
}	O
send_packet	(*(struct(*(char),int,int)),*(struct(array(char),array(char),long,long,long,int)))->(char)
(	O
reply	*(struct(*(char),int,int))
,	O
sock	int
)	O
;	O
destroyPacket	(*(struct(*(char),int,int)))->(void)
(	O
reply	*(struct(*(char),int,int))
)	O
;	O
}	O
static	O
void	O
send_reply64	(int,*(struct(array(char),array(char),long,long,long,int)),long)->(void)
(	O
int	O
rval	long
,	O
io_buffer	struct(array(char),array(char),long,long,long,int)
sock	int
,	O
mt_off_t	long
len	int
)	O
{	O
Packet	struct(*(char),int,int)
reply	*(struct(*(char),int,int))
=	O
newPacket	()->(*(struct(*(char),int,int)))
(	O
)	O
;	O
make_new	(*(struct(*(char),int,int)),int)->(void)
(	O
reply	*(struct(*(char),int,int))
,	O
12	int
)	O
;	O
put_qword	(*(struct(*(char),int,int)),int,long)->(void)
(	O
reply	*(struct(*(char),int,int))
,	O
0	int
,	O
len	int
)	O
;	O
if	O
(	O
rval	long
==	O
-	O
1	int
)	O
{	O
put_dword	(*(struct(*(char),int,int)),int,int)->(void)
(	O
reply	*(struct(*(char),int,int))
,	O
8	int
,	O
0	int
)	O
;	O
}	O
else	O
{	O
put_dword	(*(struct(*(char),int,int)),int,int)->(void)
(	O
reply	*(struct(*(char),int,int))
,	O
8	int
,	O
(	O
Dword	int
)	O
errno	O
)	O
;	O
}	O
send_packet	(*(struct(*(char),int,int)),*(struct(array(char),array(char),long,long,long,int)))->(char)
(	O
reply	*(struct(*(char),int,int))
,	O
sock	int
)	O
;	O
destroyPacket	(*(struct(*(char),int,int)))->(void)
(	O
reply	*(struct(*(char),int,int))
)	O
;	O
}	O
static	O
void	O
cleanup	(int)->(void)
(	O
int	O
x	int
UNUSEDP	O
)	O
NORETURN	O
;	O
static	O
void	O
cleanup	(int)->(void)
(	O
int	O
x	int
UNUSEDP	O
)	O
{	O
unlink	(*(char))->(int)
(	O
XauFileName	()->(*(char))
(	O
)	O
)	O
;	O
exit	(int)->(void)
(	O
-	O
1	int
)	O
;	O
}	O
void	O
serve_client	(int,*(*(char)),int,int)->(void)
(	O
int	O
sockhandle	int
,	O
char	O
*	O
*	O
device_name	*(*(char))
,	O
unsigned	O
int	O
n_dev	int
,	O
int	O
close_stderr	int
)	O
{	O
Packet	struct(*(char),int,int)
opcode	*(struct(*(char),int,int))
;	O
Packet	struct(*(char),int,int)
parm	int
;	O
int	O
readOnly	int
;	O
int	O
devFd	int
;	O
io_buffer	struct(array(char),array(char),long,long,long,int)
sock	int
;	O
int	O
stopLoop	int
;	O
unsigned	O
int	O
version	*(int)
;	O
int	O
needSendReply	int
=	O
0	int
;	O
int	O
rval	long
=	O
0	int
;	O
{	O
int	O
on	int
=	O
1	int
;	O
if	O
(	O
setsockopt	(int,int,int,*(void),int)->(int)
(	O
sockhandle	int
,	O
SOL_SOCKET	int
,	O
SO_KEEPALIVE	int
,	O
(	O
char	O
*	O
)	O
&	O
on	int
,	O
sizeof	O
(	O
on	int
)	O
)	O
<	O
0	int
)	O
{	O
perror	(*(char))->(void)
(	O
"setsockopt"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
close_stderr	int
)	O
{	O
close	*((*(void))->(int))
(	O
2	int
)	O
;	O
open	(*(char),int)->(int)
(	O
"/dev/null"	*(char)
,	O
O_WRONLY	int
)	O
;	O
}	O
sock	int
=	O
new_io_buffer	(int)->(*(struct(array(char),array(char),long,long,long,int)))
(	O
sockhandle	int
)	O
;	O
alarm	(int)->(int)
(	O
60	int
)	O
;	O
version	*(int)
=	O
0	int
;	O
if	O
(	O
!	O
do_auth	(*(struct(array(char),array(char),long,long,long,int)),*(int))->(char)
(	O
sock	int
,	O
&	O
version	*(int)
)	O
)	O
{	O
free_io_buffer	(*(struct(array(char),array(char),long,long,long,int)))->(void)
(	O
sock	int
)	O
;	O
return	O
;	O
}	O
alarm	(int)->(int)
(	O
0	int
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGTERM	int
,	O
cleanup	(int)->(void)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGALRM	int
,	O
cleanup	(int)->(void)
)	O
;	O
sockethandle_now	int
=	O
sockhandle	int
;	O
opcode	*(struct(*(char),int,int))
=	O
newPacket	()->(*(struct(*(char),int,int)))
(	O
)	O
;	O
parm	int
=	O
newPacket	()->(*(struct(*(char),int,int)))
(	O
)	O
;	O
devFd	int
=	O
-	O
1	int
;	O
readOnly	int
=	O
1	int
;	O
stopLoop	int
=	O
0	int
;	O
if	O
(	O
version	*(int)
==	O
FLOPPYD_PROTOCOL_VERSION_OLD	int
)	O
{	O
readOnly	int
=	O
0	int
;	O
devFd	int
=	O
open	(*(char),int)->(int)
(	O
device_name	*(*(char))
[	O
0	int
]	O
,	O
O_RDWR	int
|	O
O_LARGEFILE	O
)	O
;	O
if	O
(	O
devFd	int
<	O
0	int
)	O
{	O
readOnly	int
=	O
1	int
;	O
devFd	int
=	O
open	(*(char),int)->(int)
(	O
device_name	*(*(char))
[	O
0	int
]	O
,	O
O_RDONLY	int
|	O
O_LARGEFILE	O
)	O
;	O
}	O
if	O
(	O
devFd	int
<	O
0	int
)	O
{	O
send_reply	(int,*(struct(array(char),array(char),long,long,long,int)),int)->(void)
(	O
0	int
,	O
sock	int
,	O
devFd	int
>=	O
0	int
?	O
0	int
:	O
DWORD_ERR	O
)	O
;	O
stopLoop	int
=	O
1	int
;	O
}	O
lock_dev	(int,int,*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char))))->(int)
(	O
devFd	int
,	O
!	O
readOnly	int
,	O
NULL	O
)	O
;	O
}	O
while	O
(	O
!	O
stopLoop	int
)	O
{	O
uint32_t	int
dev_nr	int
=	O
0	int
;	O
if	O
(	O
!	O
recv_packet	(*(struct(*(char),int,int)),*(struct(array(char),array(char),long,long,long,int)),int)->(char)
(	O
opcode	*(struct(*(char),int,int))
,	O
sock	int
,	O
1	int
)	O
)	O
{	O
break	O
;	O
}	O
recv_packet	(*(struct(*(char),int,int)),*(struct(array(char),array(char),long,long,long,int)),int)->(char)
(	O
parm	int
,	O
sock	int
,	O
MAX_DATA_REQUEST	int
)	O
;	O
cork	(int,int)->(void)
(	O
sock	int
->	O
handle	int
,	O
1	int
)	O
;	O
switch	O
(	O
opcode	*(struct(*(char),int,int))
->	O
data	*(char)
[	O
0	int
]	O
)	O
{	O
case	O
OP_OPRO	int
:	O
if	O
(	O
get_length	(*(struct(*(char),int,int)))->(int)
(	O
parm	int
)	O
>=	O
4	int
)	O
dev_nr	int
=	O
get_dword	(*(struct(*(char),int,int)),int)->(int)
(	O
parm	int
,	O
0	int
)	O
;	O
else	O
dev_nr	int
=	O
0	int
;	O
if	O
(	O
dev_nr	int
>=	O
n_dev	int
)	O
{	O
send_reply	(int,*(struct(array(char),array(char),long,long,long,int)),int)->(void)
(	O
0	int
,	O
sock	int
,	O
DWORD_ERR	O
)	O
;	O
break	O
;	O
}	O
devFd	int
=	O
open	(*(char),int)->(int)
(	O
device_name	*(*(char))
[	O
dev_nr	int
]	O
,	O
O_RDONLY	int
|	O
O_LARGEFILE	O
)	O
;	O
if	O
(	O
devFd	int
>=	O
0	int
&&	O
lock_dev	(int,int,*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char))))->(int)
(	O
devFd	int
,	O
0	int
,	O
NULL	O
)	O
)	O
{	O
send_reply	(int,*(struct(array(char),array(char),long,long,long,int)),int)->(void)
(	O
0	int
,	O
sock	int
,	O
DWORD_ERR	O
)	O
;	O
break	O
;	O
}	O
send_reply	(int,*(struct(array(char),array(char),long,long,long,int)),int)->(void)
(	O
0	int
,	O
sock	int
,	O
devFd	int
>=	O
0	int
?	O
0	int
:	O
DWORD_ERR	O
)	O
;	O
readOnly	int
=	O
1	int
;	O
break	O
;	O
case	O
OP_OPRW	int
:	O
if	O
(	O
get_length	(*(struct(*(char),int,int)))->(int)
(	O
parm	int
)	O
>=	O
4	int
)	O
dev_nr	int
=	O
get_dword	(*(struct(*(char),int,int)),int)->(int)
(	O
parm	int
,	O
0	int
)	O
;	O
else	O
dev_nr	int
=	O
0	int
;	O
if	O
(	O
dev_nr	int
>=	O
n_dev	int
)	O
{	O
send_reply	(int,*(struct(array(char),array(char),long,long,long,int)),int)->(void)
(	O
0	int
,	O
sock	int
,	O
DWORD_ERR	O
)	O
;	O
break	O
;	O
}	O
devFd	int
=	O
open	(*(char),int)->(int)
(	O
device_name	*(*(char))
[	O
dev_nr	int
]	O
,	O
O_RDWR	int
)	O
;	O
if	O
(	O
devFd	int
>=	O
0	int
&&	O
lock_dev	(int,int,*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char))))->(int)
(	O
devFd	int
,	O
1	int
,	O
NULL	O
)	O
)	O
{	O
send_reply	(int,*(struct(array(char),array(char),long,long,long,int)),int)->(void)
(	O
0	int
,	O
sock	int
,	O
DWORD_ERR	O
)	O
;	O
break	O
;	O
}	O
send_reply	(int,*(struct(array(char),array(char),long,long,long,int)),int)->(void)
(	O
0	int
,	O
sock	int
,	O
devFd	int
>=	O
0	int
?	O
0	int
:	O
DWORD_ERR	O
)	O
;	O
readOnly	int
=	O
0	int
;	O
break	O
;	O
case	O
OP_READ	int
:	O
if	O
(	O
read_packet	(*(struct(*(char),int,int)),int,int)->(long)
(	O
parm	int
,	O
devFd	int
,	O
get_dword	(*(struct(*(char),int,int)),int)->(int)
(	O
parm	int
,	O
0	int
)	O
)	O
<	O
0	int
)	O
send_reply	(int,*(struct(array(char),array(char),long,long,long,int)),int)->(void)
(	O
devFd	int
,	O
sock	int
,	O
DWORD_ERR	O
)	O
;	O
else	O
{	O
send_reply	(int,*(struct(array(char),array(char),long,long,long,int)),int)->(void)
(	O
devFd	int
,	O
sock	int
,	O
get_length	(*(struct(*(char),int,int)))->(int)
(	O
parm	int
)	O
)	O
;	O
send_packet	(*(struct(*(char),int,int)),*(struct(array(char),array(char),long,long,long,int)))->(char)
(	O
parm	int
,	O
sock	int
)	O
;	O
}	O
break	O
;	O
case	O
OP_WRITE	int
:	O
if	O
(	O
readOnly	int
)	O
{	O
errno	O
=	O
-	O
EROFS	int
;	O
rval	long
=	O
-	O
1	int
;	O
}	O
else	O
{	O
rval	long
=	O
write_packet	(*(struct(*(char),int,int)),int)->(int)
(	O
parm	int
,	O
devFd	int
)	O
;	O
}	O
send_reply	(int,*(struct(array(char),array(char),long,long,long,int)),int)->(void)
(	O
devFd	int
,	O
sock	int
,	O
rval	long
)	O
;	O
break	O
;	O
case	O
OP_SEEK	int
:	O
lseek	(int,long,int)->(long)
(	O
devFd	int
,	O
get_dword	(*(struct(*(char),int,int)),int)->(int)
(	O
parm	int
,	O
0	int
)	O
,	O
get_dword	(*(struct(*(char),int,int)),int)->(int)
(	O
parm	int
,	O
4	int
)	O
)	O
;	O
send_reply	(int,*(struct(array(char),array(char),long,long,long,int)),int)->(void)
(	O
devFd	int
,	O
sock	int
,	O
(	O
Dword	int
)	O
lseek	(int,long,int)->(long)
(	O
devFd	int
,	O
0	int
,	O
SEEK_CUR	int
)	O
)	O
;	O
break	O
;	O
case	O
OP_SEEK64	int
:	O
if	O
(	O
sizeof	O
(	O
mt_off_t	long
)	O
<	O
8	int
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
send_reply	(int,*(struct(array(char),array(char),long,long,long,int)),int)->(void)
(	O
devFd	int
,	O
sock	int
,	O
DWORD_ERR	O
)	O
;	O
break	O
;	O
}	O
mt_lseek	(int,long,int)->(int)
(	O
devFd	int
,	O
get_qword	(*(struct(*(char),int,int)),int)->(long)
(	O
parm	int
,	O
0	int
)	O
,	O
get_dword	(*(struct(*(char),int,int)),int)->(int)
(	O
parm	int
,	O
8	int
)	O
)	O
;	O
send_reply64	(int,*(struct(array(char),array(char),long,long,long,int)),long)->(void)
(	O
devFd	int
,	O
sock	int
,	O
mt_lseek	(int,long,int)->(int)
(	O
devFd	int
,	O
0	int
,	O
SEEK_CUR	int
)	O
)	O
;	O
break	O
;	O
case	O
OP_FLUSH	int
:	O
fsync	(int)->(int)
(	O
devFd	int
)	O
;	O
send_reply	(int,*(struct(array(char),array(char),long,long,long,int)),int)->(void)
(	O
devFd	int
,	O
sock	int
,	O
0	int
)	O
;	O
break	O
;	O
case	O
OP_CLOSE	int
:	O
close	*((*(void))->(int))
(	O
devFd	int
)	O
;	O
needSendReply	int
=	O
1	int
;	O
rval	long
=	O
devFd	int
;	O
devFd	int
=	O
-	O
1	int
;	O
stopLoop	int
=	O
1	int
;	O
break	O
;	O
case	O
OP_IOCTL	int
:	O
break	O
;	O
default	O
:	O
errno	O
=	O
EINVAL	int
;	O
send_reply	(int,*(struct(array(char),array(char),long,long,long,int)),int)->(void)
(	O
devFd	int
,	O
sock	int
,	O
DWORD_ERR	O
)	O
;	O
break	O
;	O
}	O
cork	(int,int)->(void)
(	O
sock	int
->	O
handle	int
,	O
0	int
)	O
;	O
kill_packet	(*(struct(*(char),int,int)))->(void)
(	O
parm	int
)	O
;	O
alarm	(int)->(int)
(	O
0	int
)	O
;	O
}	O
if	O
(	O
devFd	int
>=	O
0	int
)	O
{	O
close	*((*(void))->(int))
(	O
devFd	int
)	O
;	O
devFd	int
=	O
-	O
1	int
;	O
}	O
free_io_buffer	(*(struct(array(char),array(char),long,long,long,int)))->(void)
(	O
sock	int
)	O
;	O
unlink	(*(char))->(int)
(	O
XauFileName	()->(*(char))
(	O
)	O
)	O
;	O
if	O
(	O
needSendReply	int
)	O
send_reply	(int,*(struct(array(char),array(char),long,long,long,int)),int)->(void)
(	O
rval	long
,	O
sock	int
,	O
0	int
)	O
;	O
destroyPacket	(*(struct(*(char),int,int)))->(void)
(	O
opcode	*(struct(*(char),int,int))
)	O
;	O
destroyPacket	(*(struct(*(char),int,int)))->(void)
(	O
parm	int
)	O
;	O
}	O
