enum	O
format_arg_type	O
{	O
FAT_NONE	O
=	O
0	int
,	O
FAT_VOID	O
=	O
1	int
,	O
FAT_INTEGER	O
=	O
2	int
,	O
FAT_CHAR	O
=	O
3	int
,	O
FAT_STRING	O
=	O
4	int
,	O
FAT_LOCUS	O
=	O
5	int
,	O
FAT_UNSIGNED	O
=	O
1	int
<<	O
3	int
,	O
FAT_SIZE_LONG	O
=	O
1	int
<<	O
4	int
,	O
FAT_SIZE_MASK	O
=	O
FAT_SIZE_LONG	O
}	O
;	O
typedef	O
enum	O
format_arg_type	O
format_arg_type_t	O
;	O
struct	O
numbered_arg	O
{	O
unsigned	O
int	O
number	O
;	O
format_arg_type_t	O
type	O
;	O
}	O
;	O
struct	O
unnumbered_arg	O
{	O
format_arg_type_t	O
type	O
;	O
}	O
;	O
struct	O
spec	O
{	O
unsigned	O
int	O
directives	O
;	O
unsigned	O
int	O
unnumbered_arg_count	O
;	O
struct	O
unnumbered_arg	O
*	O
unnumbered	O
;	O
bool	bool
uses_currentloc	O
;	O
}	O
;	O
static	O
int	O
numbered_arg_compare	O
(	O
const	O
void	O
*	O
p1	O
,	O
const	O
void	O
*	O
p2	O
)	O
{	O
unsigned	O
int	O
n1	O
=	O
(	O
(	O
const	O
struct	O
numbered_arg	O
*	O
)	O
p1	O
)	O
->	O
number	O
;	O
unsigned	O
int	O
n2	O
=	O
(	O
(	O
const	O
struct	O
numbered_arg	O
*	O
)	O
p2	O
)	O
->	O
number	O
;	O
return	O
(	O
n1	O
>	O
n2	O
?	O
1	int
:	O
n1	O
<	O
n2	O
?	O
-	O
1	int
:	O
0	int
)	O
;	O
}	O
static	O
void	O
*	O
format_parse	O
(	O
const	O
char	O
*	O
format	O
,	O
bool	bool
translated	O
,	O
char	O
*	O
fdi	O
,	O
char	O
*	O
*	O
invalid_reason	O
)	O
{	O
const	O
char	O
*	O
const	O
format_start	O
=	O
format	O
;	O
struct	O
spec	O
spec	O
;	O
unsigned	O
int	O
numbered_arg_count	O
;	O
unsigned	O
int	O
allocated	O
;	O
struct	O
numbered_arg	O
*	O
numbered	O
;	O
struct	O
spec	O
*	O
result	*(*(void))
;	O
unsigned	O
int	O
number	O
;	O
spec	O
.	O
directives	O
=	O
0	int
;	O
numbered_arg_count	O
=	O
0	int
;	O
allocated	O
=	O
0	int
;	O
numbered	O
=	O
NULL	O
;	O
spec	O
.	O
uses_currentloc	O
=	O
false	O
;	O
number	O
=	O
1	int
;	O
for	O
(	O
;	O
*	O
format	O
!=	O
'\0'	O
;	O
)	O
if	O
(	O
*	O
format	O
++	O
==	O
'%'	O
)	O
{	O
FDI_SET	O
(	O
format	O
-	O
1	int
,	O
FMTDIR_START	O
)	O
;	O
spec	O
.	O
directives	O
++	O
;	O
if	O
(	O
*	O
format	O
!=	O
'%'	O
)	O
{	O
format_arg_type_t	O
type	O
;	O
if	O
(	O
isdigit	O
(	O
*	O
format	O
)	O
)	O
{	O
const	O
char	O
*	O
f	O
=	O
format	O
;	O
unsigned	O
int	O
m	O
=	O
0	int
;	O
do	O
{	O
m	O
=	O
10	int
*	O
m	O
+	O
(	O
*	O
f	O
-	O
'0'	O
)	O
;	O
f	O
++	O
;	O
}	O
while	O
(	O
isdigit	O
(	O
*	O
f	O
)	O
)	O
;	O
if	O
(	O
*	O
f	O
==	O
'$'	O
)	O
{	O
if	O
(	O
m	O
==	O
0	int
)	O
{	O
*	O
invalid_reason	O
=	O
INVALID_ARGNO_0	O
(	O
spec	O
.	O
directives	O
)	O
;	O
FDI_SET	O
(	O
f	O
,	O
FMTDIR_ERROR	O
)	O
;	O
goto	O
bad_format	O
;	O
}	O
number	O
=	O
m	O
;	O
format	O
=	O
++	O
f	O
;	O
}	O
}	O
if	O
(	O
*	O
format	O
==	O
'C'	O
)	O
{	O
type	O
=	O
FAT_VOID	O
;	O
spec	O
.	O
uses_currentloc	O
=	O
true	O
;	O
}	O
else	O
if	O
(	O
*	O
format	O
==	O
'L'	O
)	O
type	O
=	O
FAT_LOCUS	O
;	O
else	O
if	O
(	O
*	O
format	O
==	O
'c'	O
)	O
type	O
=	O
FAT_CHAR	O
;	O
else	O
if	O
(	O
*	O
format	O
==	O
's'	O
)	O
type	O
=	O
FAT_STRING	O
;	O
else	O
{	O
format_arg_type_t	O
size	long
=	O
0	int
;	O
if	O
(	O
*	O
format	O
==	O
'l'	O
)	O
{	O
++	O
format	O
;	O
size	long
=	O
FAT_SIZE_LONG	O
;	O
}	O
if	O
(	O
*	O
format	O
==	O
'i'	O
||	O
*	O
format	O
==	O
'd'	O
)	O
type	O
=	O
FAT_INTEGER	O
|	O
size	long
;	O
else	O
if	O
(	O
*	O
format	O
==	O
'u'	O
)	O
type	O
=	O
FAT_INTEGER	O
|	O
FAT_UNSIGNED	O
|	O
size	long
;	O
else	O
{	O
if	O
(	O
*	O
format	O
==	O
'\0'	O
)	O
{	O
*	O
invalid_reason	O
=	O
INVALID_UNTERMINATED_DIRECTIVE	O
(	O
)	O
;	O
FDI_SET	O
(	O
format	O
-	O
1	int
,	O
FMTDIR_ERROR	O
)	O
;	O
}	O
else	O
{	O
*	O
invalid_reason	O
=	O
INVALID_CONVERSION_SPECIFIER	O
(	O
spec	O
.	O
directives	O
,	O
*	O
format	O
)	O
;	O
FDI_SET	O
(	O
format	O
,	O
FMTDIR_ERROR	O
)	O
;	O
}	O
goto	O
bad_format	O
;	O
}	O
}	O
if	O
(	O
allocated	O
==	O
numbered_arg_count	O
)	O
{	O
allocated	O
=	O
2	int
*	O
allocated	O
+	O
1	int
;	O
numbered	O
=	O
(	O
struct	O
numbered_arg	O
*	O
)	O
xrealloc	O
(	O
numbered	O
,	O
allocated	O
*	O
sizeof	O
(	O
struct	O
numbered_arg	O
)	O
)	O
;	O
}	O
numbered	O
[	O
numbered_arg_count	O
]	O
.	O
number	O
=	O
number	O
;	O
numbered	O
[	O
numbered_arg_count	O
]	O
.	O
type	O
=	O
type	O
;	O
numbered_arg_count	O
++	O
;	O
number	O
++	O
;	O
}	O
FDI_SET	O
(	O
format	O
,	O
FMTDIR_END	O
)	O
;	O
format	O
++	O
;	O
}	O
if	O
(	O
numbered_arg_count	O
>	O
1	int
)	O
{	O
unsigned	O
int	O
i	long
,	O
j	O
;	O
bool	bool
err	O
;	O
qsort	(*(void),long,long,*((*(void),*(void))->(int)))->(void)
(	O
numbered	O
,	O
numbered_arg_count	O
,	O
sizeof	O
(	O
struct	O
numbered_arg	O
)	O
,	O
numbered_arg_compare	O
)	O
;	O
err	O
=	O
false	O
;	O
for	O
(	O
i	long
=	O
j	O
=	O
0	int
;	O
i	long
<	O
numbered_arg_count	O
;	O
i	long
++	O
)	O
if	O
(	O
j	O
>	O
0	int
&&	O
numbered	O
[	O
i	long
]	O
.	O
number	O
==	O
numbered	O
[	O
j	O
-	O
1	int
]	O
.	O
number	O
)	O
{	O
format_arg_type_t	O
type1	O
=	O
numbered	O
[	O
i	long
]	O
.	O
type	O
;	O
format_arg_type_t	O
type2	O
=	O
numbered	O
[	O
j	O
-	O
1	int
]	O
.	O
type	O
;	O
format_arg_type_t	O
type_both	O
;	O
if	O
(	O
type1	O
==	O
type2	O
)	O
type_both	O
=	O
type1	O
;	O
else	O
{	O
type_both	O
=	O
FAT_NONE	O
;	O
if	O
(	O
!	O
err	O
)	O
*	O
invalid_reason	O
=	O
INVALID_INCOMPATIBLE_ARG_TYPES	O
(	O
numbered	O
[	O
i	long
]	O
.	O
number	O
)	O
;	O
err	O
=	O
true	O
;	O
}	O
numbered	O
[	O
j	O
-	O
1	int
]	O
.	O
type	O
=	O
type_both	O
;	O
}	O
else	O
{	O
if	O
(	O
j	O
<	O
i	long
)	O
{	O
numbered	O
[	O
j	O
]	O
.	O
number	O
=	O
numbered	O
[	O
i	long
]	O
.	O
number	O
;	O
numbered	O
[	O
j	O
]	O
.	O
type	O
=	O
numbered	O
[	O
i	long
]	O
.	O
type	O
;	O
}	O
j	O
++	O
;	O
}	O
numbered_arg_count	O
=	O
j	O
;	O
if	O
(	O
err	O
)	O
goto	O
bad_format	O
;	O
}	O
{	O
unsigned	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
numbered_arg_count	O
;	O
i	long
++	O
)	O
if	O
(	O
numbered	O
[	O
i	long
]	O
.	O
number	O
!=	O
i	long
+	O
1	int
)	O
{	O
*	O
invalid_reason	O
=	O
xasprintf	O
(	O
_	O
(	O
"The string refers to argument number %u but ignores argument number %u."	*(char)
)	O
,	O
numbered	O
[	O
i	long
]	O
.	O
number	O
,	O
i	long
+	O
1	int
)	O
;	O
goto	O
bad_format	O
;	O
}	O
}	O
{	O
unsigned	O
int	O
i	long
;	O
spec	O
.	O
unnumbered_arg_count	O
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
numbered_arg_count	O
;	O
i	long
++	O
)	O
if	O
(	O
numbered	O
[	O
i	long
]	O
.	O
type	O
!=	O
FAT_VOID	O
)	O
spec	O
.	O
unnumbered_arg_count	O
++	O
;	O
if	O
(	O
spec	O
.	O
unnumbered_arg_count	O
>	O
0	int
)	O
{	O
unsigned	O
int	O
j	O
;	O
spec	O
.	O
unnumbered	O
=	O
XNMALLOC	O
(	O
spec	O
.	O
unnumbered_arg_count	O
,	O
struct	O
unnumbered_arg	O
)	O
;	O
j	O
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
numbered_arg_count	O
;	O
i	long
++	O
)	O
if	O
(	O
numbered	O
[	O
i	long
]	O
.	O
type	O
!=	O
FAT_VOID	O
)	O
spec	O
.	O
unnumbered	O
[	O
j	O
++	O
]	O
.	O
type	O
=	O
numbered	O
[	O
i	long
]	O
.	O
type	O
;	O
}	O
else	O
spec	O
.	O
unnumbered	O
=	O
NULL	O
;	O
}	O
free	(*(void))->(void)
(	O
numbered	O
)	O
;	O
result	*(*(void))
=	O
XMALLOC	O
(	O
struct	O
spec	O
)	O
;	O
*	O
result	*(*(void))
=	O
spec	O
;	O
return	O
result	*(*(void))
;	O
bad_format	O
:	O
if	O
(	O
numbered	O
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
numbered	O
)	O
;	O
return	O
NULL	O
;	O
}	O
static	O
void	O
format_free	O
(	O
void	O
*	O
descr	O
)	O
{	O
struct	O
spec	O
*	O
spec	O
=	O
(	O
struct	O
spec	O
*	O
)	O
descr	O
;	O
if	O
(	O
spec	O
->	O
unnumbered	O
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
spec	O
->	O
unnumbered	O
)	O
;	O
free	(*(void))->(void)
(	O
spec	O
)	O
;	O
}	O
static	O
int	O
format_get_number_of_directives	O
(	O
void	O
*	O
descr	O
)	O
{	O
struct	O
spec	O
*	O
spec	O
=	O
(	O
struct	O
spec	O
*	O
)	O
descr	O
;	O
return	O
spec	O
->	O
directives	O
;	O
}	O
static	O
bool	bool
format_check	O
(	O
void	O
*	O
msgid_descr	O
,	O
void	O
*	O
msgstr_descr	O
,	O
bool	bool
equality	O
,	O
formatstring_error_logger_t	O
error_logger	O
,	O
const	O
char	O
*	O
pretty_msgid	O
,	O
const	O
char	O
*	O
pretty_msgstr	O
)	O
{	O
struct	O
spec	O
*	O
spec1	O
=	O
(	O
struct	O
spec	O
*	O
)	O
msgid_descr	O
;	O
struct	O
spec	O
*	O
spec2	O
=	O
(	O
struct	O
spec	O
*	O
)	O
msgstr_descr	O
;	O
bool	bool
err	O
=	O
false	O
;	O
unsigned	O
int	O
i	long
;	O
if	O
(	O
equality	O
?	O
spec1	O
->	O
unnumbered_arg_count	O
!=	O
spec2	O
->	O
unnumbered_arg_count	O
:	O
spec1	O
->	O
unnumbered_arg_count	O
<	O
spec2	O
->	O
unnumbered_arg_count	O
)	O
{	O
if	O
(	O
error_logger	O
)	O
error_logger	O
(	O
_	O
(	O
"number of format specifications in '%s' and '%s' does not match"	*(char)
)	O
,	O
pretty_msgid	O
,	O
pretty_msgstr	O
)	O
;	O
err	O
=	O
true	O
;	O
}	O
else	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
spec2	O
->	O
unnumbered_arg_count	O
;	O
i	long
++	O
)	O
if	O
(	O
spec1	O
->	O
unnumbered	O
[	O
i	long
]	O
.	O
type	O
!=	O
spec2	O
->	O
unnumbered	O
[	O
i	long
]	O
.	O
type	O
)	O
{	O
if	O
(	O
error_logger	O
)	O
error_logger	O
(	O
_	O
(	O
"format specifications in '%s' and '%s' for argument %u are not the same"	*(char)
)	O
,	O
pretty_msgid	O
,	O
pretty_msgstr	O
,	O
i	long
+	O
1	int
)	O
;	O
err	O
=	O
true	O
;	O
}	O
if	O
(	O
spec1	O
->	O
uses_currentloc	O
!=	O
spec2	O
->	O
uses_currentloc	O
)	O
{	O
if	O
(	O
error_logger	O
)	O
{	O
if	O
(	O
spec1	O
->	O
uses_currentloc	O
)	O
error_logger	O
(	O
_	O
(	O
"'%s' uses %%C but '%s' doesn't"	*(char)
)	O
,	O
pretty_msgid	O
,	O
pretty_msgstr	O
)	O
;	O
else	O
error_logger	O
(	O
_	O
(	O
"'%s' does not use %%C but '%s' uses %%C"	*(char)
)	O
,	O
pretty_msgid	O
,	O
pretty_msgstr	O
)	O
;	O
}	O
err	O
=	O
true	O
;	O
}	O
return	O
err	O
;	O
}	O
struct	O
formatstring_parser	O
formatstring_gfc_internal	O
=	O
{	O
format_parse	O
,	O
format_free	O
,	O
format_get_number_of_directives	O
,	O
NULL	O
,	O
format_check	O
}	O
;	O
