static	O
int	O
rl_max_kills	int
=	O
DEFAULT_MAX_KILLS	int
;	O
static	O
char	O
*	O
*	O
rl_kill_ring	*(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
NULL	O
;	O
static	O
int	O
rl_kill_index	int
;	O
static	O
int	O
rl_kill_ring_length	int
;	O
static	O
int	O
_rl_copy_to_kill_ring	(*(char),int)->(int)
PARAMS	O
(	O
(	O
char	O
*	O
,	O
int	O
)	O
)	O
;	O
static	O
int	O
region_kill_internal	(int)->(int)
PARAMS	O
(	O
(	O
int	O
)	O
)	O
;	O
static	O
int	O
_rl_copy_word_as_kill	(int,int)->(int)
PARAMS	O
(	O
(	O
int	O
,	O
int	O
)	O
)	O
;	O
static	O
int	O
rl_yank_nth_arg_internal	(int,int,int)->(int)
PARAMS	O
(	O
(	O
int	O
,	O
int	O
,	O
int	O
)	O
)	O
;	O
int	O
rl_set_retained_kills	(int)->(int)
(	O
num	int
)	O
int	O
num	int
;	O
{	O
return	O
0	int
;	O
}	O
static	O
int	O
_rl_copy_to_kill_ring	(*(char),int)->(int)
(	O
text	*(char)
,	O
append	int
)	O
char	O
*	O
text	*(char)
;	O
int	O
append	int
;	O
{	O
char	O
*	O
old	*(char)
,	O
*	O
new	*(char)
;	O
int	O
slot	int
;	O
if	O
(	O
_rl_last_command_was_kill	int
==	O
0	int
||	O
rl_kill_ring	*(*(char))
==	O
0	int
)	O
{	O
if	O
(	O
rl_kill_ring	*(*(char))
==	O
0	int
)	O
{	O
rl_kill_ring	*(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
(	O
(	O
rl_kill_ring_length	int
=	O
1	int
)	O
+	O
1	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
rl_kill_ring	*(*(char))
[	O
slot	int
=	O
0	int
]	O
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
}	O
else	O
{	O
slot	int
=	O
rl_kill_ring_length	int
;	O
if	O
(	O
slot	int
==	O
rl_max_kills	int
)	O
{	O
register	O
int	O
i	int
;	O
xfree	(*(void))->(void)
(	O
rl_kill_ring	*(*(char))
[	O
0	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
slot	int
;	O
i	int
++	O
)	O
rl_kill_ring	*(*(char))
[	O
i	int
]	O
=	O
rl_kill_ring	*(*(char))
[	O
i	int
+	O
1	int
]	O
;	O
}	O
else	O
{	O
slot	int
=	O
rl_kill_ring_length	int
+=	O
1	int
;	O
rl_kill_ring	*(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
xrealloc	(*(void),long)->(*(void))
(	O
rl_kill_ring	*(*(char))
,	O
slot	int
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
}	O
rl_kill_ring	*(*(char))
[	O
--	O
slot	int
]	O
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
}	O
}	O
else	O
slot	int
=	O
rl_kill_ring_length	int
-	O
1	int
;	O
if	O
(	O
_rl_last_command_was_kill	int
&&	O
rl_editing_mode	int
!=	O
vi_mode	int
)	O
{	O
old	*(char)
=	O
rl_kill_ring	*(*(char))
[	O
slot	int
]	O
;	O
new	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
1	int
+	O
strlen	(*(char))->(long)
(	O
old	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
)	O
;	O
if	O
(	O
append	int
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
new	*(char)
,	O
old	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
new	*(char)
,	O
text	*(char)
)	O
;	O
}	O
else	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
new	*(char)
,	O
text	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
new	*(char)
,	O
old	*(char)
)	O
;	O
}	O
xfree	(*(void))->(void)
(	O
old	*(char)
)	O
;	O
xfree	(*(void))->(void)
(	O
text	*(char)
)	O
;	O
rl_kill_ring	*(*(char))
[	O
slot	int
]	O
=	O
new	*(char)
;	O
}	O
else	O
rl_kill_ring	*(*(char))
[	O
slot	int
]	O
=	O
text	*(char)
;	O
rl_kill_index	int
=	O
slot	int
;	O
return	O
0	int
;	O
}	O
int	O
rl_kill_text	(int,int)->(int)
(	O
from	int
,	O
to	int
)	O
int	O
from	int
,	O
to	int
;	O
{	O
char	O
*	O
text	*(char)
;	O
if	O
(	O
from	int
==	O
to	int
)	O
{	O
_rl_last_command_was_kill	int
++	O
;	O
return	O
0	int
;	O
}	O
text	*(char)
=	O
rl_copy_text	(int,int)->(*(char))
(	O
from	int
,	O
to	int
)	O
;	O
rl_delete_text	(int,int)->(int)
(	O
from	int
,	O
to	int
)	O
;	O
_rl_copy_to_kill_ring	(*(char),int)->(int)
(	O
text	*(char)
,	O
from	int
<	O
to	int
)	O
;	O
_rl_last_command_was_kill	int
++	O
;	O
return	O
0	int
;	O
}	O
int	O
rl_kill_word	(int,int)->(int)
(	O
count	int
,	O
key	int
)	O
int	O
count	int
,	O
key	int
;	O
{	O
int	O
orig_point	int
;	O
if	O
(	O
count	int
<	O
0	int
)	O
return	O
(	O
rl_backward_kill_word	(int,int)->(int)
(	O
-	O
count	int
,	O
key	int
)	O
)	O
;	O
else	O
{	O
orig_point	int
=	O
rl_point	int
;	O
rl_forward_word	(int,int)->(int)
(	O
count	int
,	O
key	int
)	O
;	O
if	O
(	O
rl_point	int
!=	O
orig_point	int
)	O
rl_kill_text	(int,int)->(int)
(	O
orig_point	int
,	O
rl_point	int
)	O
;	O
rl_point	int
=	O
orig_point	int
;	O
if	O
(	O
rl_editing_mode	int
==	O
emacs_mode	int
)	O
rl_mark	int
=	O
rl_point	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
rl_backward_kill_word	(int,int)->(int)
(	O
count	int
,	O
ignore	int
)	O
int	O
count	int
,	O
ignore	int
;	O
{	O
int	O
orig_point	int
;	O
if	O
(	O
count	int
<	O
0	int
)	O
return	O
(	O
rl_kill_word	(int,int)->(int)
(	O
-	O
count	int
,	O
ignore	int
)	O
)	O
;	O
else	O
{	O
orig_point	int
=	O
rl_point	int
;	O
rl_backward_word	(int,int)->(int)
(	O
count	int
,	O
ignore	int
)	O
;	O
if	O
(	O
rl_point	int
!=	O
orig_point	int
)	O
rl_kill_text	(int,int)->(int)
(	O
orig_point	int
,	O
rl_point	int
)	O
;	O
if	O
(	O
rl_editing_mode	int
==	O
emacs_mode	int
)	O
rl_mark	int
=	O
rl_point	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
rl_kill_line	(int,int)->(int)
(	O
direction	int
,	O
ignore	int
)	O
int	O
direction	int
,	O
ignore	int
;	O
{	O
int	O
orig_point	int
;	O
if	O
(	O
direction	int
<	O
0	int
)	O
return	O
(	O
rl_backward_kill_line	(int,int)->(int)
(	O
1	int
,	O
ignore	int
)	O
)	O
;	O
else	O
{	O
orig_point	int
=	O
rl_point	int
;	O
rl_end_of_line	(int,int)->(int)
(	O
1	int
,	O
ignore	int
)	O
;	O
if	O
(	O
orig_point	int
!=	O
rl_point	int
)	O
rl_kill_text	(int,int)->(int)
(	O
orig_point	int
,	O
rl_point	int
)	O
;	O
rl_point	int
=	O
orig_point	int
;	O
if	O
(	O
rl_editing_mode	int
==	O
emacs_mode	int
)	O
rl_mark	int
=	O
rl_point	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
rl_backward_kill_line	(int,int)->(int)
(	O
direction	int
,	O
ignore	int
)	O
int	O
direction	int
,	O
ignore	int
;	O
{	O
int	O
orig_point	int
;	O
if	O
(	O
direction	int
<	O
0	int
)	O
return	O
(	O
rl_kill_line	(int,int)->(int)
(	O
1	int
,	O
ignore	int
)	O
)	O
;	O
else	O
{	O
if	O
(	O
rl_point	int
==	O
0	int
)	O
rl_ding	()->(int)
(	O
)	O
;	O
else	O
{	O
orig_point	int
=	O
rl_point	int
;	O
rl_beg_of_line	(int,int)->(int)
(	O
1	int
,	O
ignore	int
)	O
;	O
if	O
(	O
rl_point	int
!=	O
orig_point	int
)	O
rl_kill_text	(int,int)->(int)
(	O
orig_point	int
,	O
rl_point	int
)	O
;	O
if	O
(	O
rl_editing_mode	int
==	O
emacs_mode	int
)	O
rl_mark	int
=	O
rl_point	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
rl_kill_full_line	(int,int)->(int)
(	O
count	int
,	O
ignore	int
)	O
int	O
count	int
,	O
ignore	int
;	O
{	O
rl_begin_undo_group	()->(int)
(	O
)	O
;	O
rl_point	int
=	O
0	int
;	O
rl_kill_text	(int,int)->(int)
(	O
rl_point	int
,	O
rl_end	int
)	O
;	O
rl_mark	int
=	O
0	int
;	O
rl_end_undo_group	()->(int)
(	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
rl_unix_word_rubout	(int,int)->(int)
(	O
count	int
,	O
key	int
)	O
int	O
count	int
,	O
key	int
;	O
{	O
int	O
orig_point	int
;	O
if	O
(	O
rl_point	int
==	O
0	int
)	O
rl_ding	()->(int)
(	O
)	O
;	O
else	O
{	O
orig_point	int
=	O
rl_point	int
;	O
if	O
(	O
count	int
<=	O
0	int
)	O
count	int
=	O
1	int
;	O
while	O
(	O
count	int
--	O
)	O
{	O
while	O
(	O
rl_point	int
&&	O
whitespace	O
(	O
rl_line_buffer	*(char)
[	O
rl_point	int
-	O
1	int
]	O
)	O
)	O
rl_point	int
--	O
;	O
while	O
(	O
rl_point	int
&&	O
(	O
whitespace	O
(	O
rl_line_buffer	*(char)
[	O
rl_point	int
-	O
1	int
]	O
)	O
==	O
0	int
)	O
)	O
rl_point	int
--	O
;	O
}	O
rl_kill_text	(int,int)->(int)
(	O
orig_point	int
,	O
rl_point	int
)	O
;	O
if	O
(	O
rl_editing_mode	int
==	O
emacs_mode	int
)	O
rl_mark	int
=	O
rl_point	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
rl_unix_filename_rubout	(int,int)->(int)
(	O
count	int
,	O
key	int
)	O
int	O
count	int
,	O
key	int
;	O
{	O
int	O
orig_point	int
,	O
c	int
;	O
if	O
(	O
rl_point	int
==	O
0	int
)	O
rl_ding	()->(int)
(	O
)	O
;	O
else	O
{	O
orig_point	int
=	O
rl_point	int
;	O
if	O
(	O
count	int
<=	O
0	int
)	O
count	int
=	O
1	int
;	O
while	O
(	O
count	int
--	O
)	O
{	O
c	int
=	O
rl_line_buffer	*(char)
[	O
rl_point	int
-	O
1	int
]	O
;	O
while	O
(	O
rl_point	int
&&	O
(	O
whitespace	O
(	O
c	int
)	O
||	O
c	int
==	O
'/'	O
)	O
)	O
{	O
rl_point	int
--	O
;	O
c	int
=	O
rl_line_buffer	*(char)
[	O
rl_point	int
-	O
1	int
]	O
;	O
}	O
while	O
(	O
rl_point	int
&&	O
(	O
whitespace	O
(	O
c	int
)	O
==	O
0	int
)	O
&&	O
c	int
!=	O
'/'	O
)	O
{	O
rl_point	int
--	O
;	O
c	int
=	O
rl_line_buffer	*(char)
[	O
rl_point	int
-	O
1	int
]	O
;	O
}	O
}	O
rl_kill_text	(int,int)->(int)
(	O
orig_point	int
,	O
rl_point	int
)	O
;	O
if	O
(	O
rl_editing_mode	int
==	O
emacs_mode	int
)	O
rl_mark	int
=	O
rl_point	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
rl_unix_line_discard	(int,int)->(int)
(	O
count	int
,	O
key	int
)	O
int	O
count	int
,	O
key	int
;	O
{	O
if	O
(	O
rl_point	int
==	O
0	int
)	O
rl_ding	()->(int)
(	O
)	O
;	O
else	O
{	O
rl_kill_text	(int,int)->(int)
(	O
rl_point	int
,	O
0	int
)	O
;	O
rl_point	int
=	O
0	int
;	O
if	O
(	O
rl_editing_mode	int
==	O
emacs_mode	int
)	O
rl_mark	int
=	O
rl_point	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
region_kill_internal	(int)->(int)
(	O
delete	int
)	O
int	O
delete	int
;	O
{	O
char	O
*	O
text	*(char)
;	O
if	O
(	O
rl_mark	int
!=	O
rl_point	int
)	O
{	O
text	*(char)
=	O
rl_copy_text	(int,int)->(*(char))
(	O
rl_point	int
,	O
rl_mark	int
)	O
;	O
if	O
(	O
delete	int
)	O
rl_delete_text	(int,int)->(int)
(	O
rl_point	int
,	O
rl_mark	int
)	O
;	O
_rl_copy_to_kill_ring	(*(char),int)->(int)
(	O
text	*(char)
,	O
rl_point	int
<	O
rl_mark	int
)	O
;	O
}	O
_rl_last_command_was_kill	int
++	O
;	O
return	O
0	int
;	O
}	O
int	O
rl_copy_region_to_kill	(int,int)->(int)
(	O
count	int
,	O
ignore	int
)	O
int	O
count	int
,	O
ignore	int
;	O
{	O
return	O
(	O
region_kill_internal	(int)->(int)
(	O
0	int
)	O
)	O
;	O
}	O
int	O
rl_kill_region	(int,int)->(int)
(	O
count	int
,	O
ignore	int
)	O
int	O
count	int
,	O
ignore	int
;	O
{	O
int	O
r	int
,	O
npoint	int
;	O
npoint	int
=	O
(	O
rl_point	int
<	O
rl_mark	int
)	O
?	O
rl_point	int
:	O
rl_mark	int
;	O
r	int
=	O
region_kill_internal	(int)->(int)
(	O
1	int
)	O
;	O
_rl_fix_point	(int)->(void)
(	O
1	int
)	O
;	O
rl_point	int
=	O
npoint	int
;	O
return	O
r	int
;	O
}	O
static	O
int	O
_rl_copy_word_as_kill	(int,int)->(int)
(	O
count	int
,	O
dir	int
)	O
int	O
count	int
,	O
dir	int
;	O
{	O
int	O
om	int
,	O
op	int
,	O
r	int
;	O
om	int
=	O
rl_mark	int
;	O
op	int
=	O
rl_point	int
;	O
if	O
(	O
dir	int
>	O
0	int
)	O
rl_forward_word	(int,int)->(int)
(	O
count	int
,	O
0	int
)	O
;	O
else	O
rl_backward_word	(int,int)->(int)
(	O
count	int
,	O
0	int
)	O
;	O
rl_mark	int
=	O
rl_point	int
;	O
if	O
(	O
dir	int
>	O
0	int
)	O
rl_backward_word	(int,int)->(int)
(	O
count	int
,	O
0	int
)	O
;	O
else	O
rl_forward_word	(int,int)->(int)
(	O
count	int
,	O
0	int
)	O
;	O
r	int
=	O
region_kill_internal	(int)->(int)
(	O
0	int
)	O
;	O
rl_mark	int
=	O
om	int
;	O
rl_point	int
=	O
op	int
;	O
return	O
r	int
;	O
}	O
int	O
rl_copy_forward_word	(int,int)->(int)
(	O
count	int
,	O
key	int
)	O
int	O
count	int
,	O
key	int
;	O
{	O
if	O
(	O
count	int
<	O
0	int
)	O
return	O
(	O
rl_copy_backward_word	(int,int)->(int)
(	O
-	O
count	int
,	O
key	int
)	O
)	O
;	O
return	O
(	O
_rl_copy_word_as_kill	(int,int)->(int)
(	O
count	int
,	O
1	int
)	O
)	O
;	O
}	O
int	O
rl_copy_backward_word	(int,int)->(int)
(	O
count	int
,	O
key	int
)	O
int	O
count	int
,	O
key	int
;	O
{	O
if	O
(	O
count	int
<	O
0	int
)	O
return	O
(	O
rl_copy_forward_word	(int,int)->(int)
(	O
-	O
count	int
,	O
key	int
)	O
)	O
;	O
return	O
(	O
_rl_copy_word_as_kill	(int,int)->(int)
(	O
count	int
,	O
-	O
1	int
)	O
)	O
;	O
}	O
int	O
rl_yank	(int,int)->(int)
(	O
count	int
,	O
ignore	int
)	O
int	O
count	int
,	O
ignore	int
;	O
{	O
if	O
(	O
rl_kill_ring	*(*(char))
==	O
0	int
)	O
{	O
_rl_abort_internal	()->(int)
(	O
)	O
;	O
return	O
1	int
;	O
}	O
_rl_set_mark_at_pos	(int)->(int)
(	O
rl_point	int
)	O
;	O
rl_insert_text	(*(char))->(int)
(	O
rl_kill_ring	*(*(char))
[	O
rl_kill_index	int
]	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
rl_yank_pop	(int,int)->(int)
(	O
count	int
,	O
key	int
)	O
int	O
count	int
,	O
key	int
;	O
{	O
int	O
l	int
,	O
n	int
;	O
if	O
(	O
(	O
(	O
rl_last_func	*((int,int)->(int))
!=	O
rl_yank_pop	(int,int)->(int)
)	O
&&	O
(	O
rl_last_func	*((int,int)->(int))
!=	O
rl_yank	(int,int)->(int)
)	O
)	O
||	O
!	O
rl_kill_ring	*(*(char))
)	O
{	O
_rl_abort_internal	()->(int)
(	O
)	O
;	O
return	O
1	int
;	O
}	O
l	int
=	O
strlen	(*(char))->(long)
(	O
rl_kill_ring	*(*(char))
[	O
rl_kill_index	int
]	O
)	O
;	O
n	int
=	O
rl_point	int
-	O
l	int
;	O
if	O
(	O
n	int
>=	O
0	int
&&	O
STREQN	O
(	O
rl_line_buffer	*(char)
+	O
n	int
,	O
rl_kill_ring	*(*(char))
[	O
rl_kill_index	int
]	O
,	O
l	int
)	O
)	O
{	O
rl_delete_text	(int,int)->(int)
(	O
n	int
,	O
rl_point	int
)	O
;	O
rl_point	int
=	O
n	int
;	O
rl_kill_index	int
--	O
;	O
if	O
(	O
rl_kill_index	int
<	O
0	int
)	O
rl_kill_index	int
=	O
rl_kill_ring_length	int
-	O
1	int
;	O
rl_yank	(int,int)->(int)
(	O
1	int
,	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O
else	O
{	O
_rl_abort_internal	()->(int)
(	O
)	O
;	O
return	O
1	int
;	O
}	O
}	O
int	O
rl_vi_yank_pop	(int,int)->(int)
(	O
count	int
,	O
key	int
)	O
int	O
count	int
,	O
key	int
;	O
{	O
int	O
l	int
,	O
n	int
;	O
if	O
(	O
(	O
(	O
rl_last_func	*((int,int)->(int))
!=	O
rl_vi_yank_pop	(int,int)->(int)
)	O
&&	O
(	O
rl_last_func	*((int,int)->(int))
!=	O
rl_vi_put	(int,int)->(int)
)	O
)	O
||	O
!	O
rl_kill_ring	*(*(char))
)	O
{	O
_rl_abort_internal	()->(int)
(	O
)	O
;	O
return	O
1	int
;	O
}	O
l	int
=	O
strlen	(*(char))->(long)
(	O
rl_kill_ring	*(*(char))
[	O
rl_kill_index	int
]	O
)	O
;	O
n	int
=	O
rl_point	int
-	O
l	int
;	O
if	O
(	O
n	int
>=	O
0	int
&&	O
STREQN	O
(	O
rl_line_buffer	*(char)
+	O
n	int
,	O
rl_kill_ring	*(*(char))
[	O
rl_kill_index	int
]	O
,	O
l	int
)	O
)	O
{	O
rl_delete_text	(int,int)->(int)
(	O
n	int
,	O
rl_point	int
)	O
;	O
rl_point	int
=	O
n	int
;	O
rl_kill_index	int
--	O
;	O
if	O
(	O
rl_kill_index	int
<	O
0	int
)	O
rl_kill_index	int
=	O
rl_kill_ring_length	int
-	O
1	int
;	O
rl_vi_put	(int,int)->(int)
(	O
1	int
,	O
'p'	O
)	O
;	O
return	O
0	int
;	O
}	O
else	O
{	O
_rl_abort_internal	()->(int)
(	O
)	O
;	O
return	O
1	int
;	O
}	O
}	O
static	O
int	O
rl_yank_nth_arg_internal	(int,int,int)->(int)
(	O
count	int
,	O
ignore	int
,	O
history_skip	int
)	O
int	O
count	int
,	O
ignore	int
,	O
history_skip	int
;	O
{	O
register	O
HIST_ENTRY	struct(*(char),*(char),*(void))
*	O
entry	*(struct(*(char),*(char),*(void)))
;	O
char	O
*	O
arg	*(char)
;	O
int	O
i	int
,	O
pos	int
;	O
pos	int
=	O
where_history	()->(int)
(	O
)	O
;	O
if	O
(	O
history_skip	int
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
history_skip	int
;	O
i	int
++	O
)	O
entry	*(struct(*(char),*(char),*(void)))
=	O
previous_history	()->(*(struct(*(char),*(char),*(void))))
(	O
)	O
;	O
}	O
entry	*(struct(*(char),*(char),*(void)))
=	O
previous_history	()->(*(struct(*(char),*(char),*(void))))
(	O
)	O
;	O
history_set_pos	(int)->(int)
(	O
pos	int
)	O
;	O
if	O
(	O
entry	*(struct(*(char),*(char),*(void)))
==	O
0	int
)	O
{	O
rl_ding	()->(int)
(	O
)	O
;	O
return	O
1	int
;	O
}	O
arg	*(char)
=	O
history_arg_extract	(int,int,*(char))->(*(char))
(	O
count	int
,	O
count	int
,	O
entry	*(struct(*(char),*(char),*(void)))
->	O
line	*(char)
)	O
;	O
if	O
(	O
!	O
arg	*(char)
||	O
!	O
*	O
arg	*(char)
)	O
{	O
rl_ding	()->(int)
(	O
)	O
;	O
FREE	O
(	O
arg	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
rl_begin_undo_group	()->(int)
(	O
)	O
;	O
_rl_set_mark_at_pos	(int)->(int)
(	O
rl_point	int
)	O
;	O
if	O
(	O
rl_editing_mode	int
==	O
vi_mode	int
)	O
{	O
rl_vi_append_mode	(int,int)->(int)
(	O
1	int
,	O
ignore	int
)	O
;	O
rl_insert_text	(*(char))->(int)
(	O
" "	*(char)
)	O
;	O
}	O
rl_insert_text	(*(char))->(int)
(	O
arg	*(char)
)	O
;	O
xfree	(*(void))->(void)
(	O
arg	*(char)
)	O
;	O
rl_end_undo_group	()->(int)
(	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
rl_yank_nth_arg	(int,int)->(int)
(	O
count	int
,	O
ignore	int
)	O
int	O
count	int
,	O
ignore	int
;	O
{	O
return	O
(	O
rl_yank_nth_arg_internal	(int,int,int)->(int)
(	O
count	int
,	O
ignore	int
,	O
0	int
)	O
)	O
;	O
}	O
int	O
rl_yank_last_arg	(int,int)->(int)
(	O
count	int
,	O
key	int
)	O
int	O
count	int
,	O
key	int
;	O
{	O
static	O
int	O
history_skip	int
=	O
0	int
;	O
static	O
int	O
explicit_arg_p	int
=	O
0	int
;	O
static	O
int	O
count_passed	int
=	O
1	int
;	O
static	O
int	O
direction	int
=	O
1	int
;	O
static	O
int	O
undo_needed	int
=	O
0	int
;	O
int	O
retval	int
;	O
if	O
(	O
rl_last_func	*((int,int)->(int))
!=	O
rl_yank_last_arg	(int,int)->(int)
)	O
{	O
history_skip	int
=	O
0	int
;	O
explicit_arg_p	int
=	O
rl_explicit_arg	int
;	O
count_passed	int
=	O
count	int
;	O
direction	int
=	O
1	int
;	O
}	O
else	O
{	O
if	O
(	O
undo_needed	int
)	O
rl_do_undo	()->(int)
(	O
)	O
;	O
if	O
(	O
count	int
<	O
0	int
)	O
direction	int
=	O
-	O
direction	int
;	O
history_skip	int
+=	O
direction	int
;	O
if	O
(	O
history_skip	int
<	O
0	int
)	O
history_skip	int
=	O
0	int
;	O
}	O
if	O
(	O
explicit_arg_p	int
)	O
retval	int
=	O
rl_yank_nth_arg_internal	(int,int,int)->(int)
(	O
count_passed	int
,	O
key	int
,	O
history_skip	int
)	O
;	O
else	O
retval	int
=	O
rl_yank_nth_arg_internal	(int,int,int)->(int)
(	O
'$'	O
,	O
key	int
,	O
history_skip	int
)	O
;	O
undo_needed	int
=	O
retval	int
==	O
0	int
;	O
return	O
retval	int
;	O
}	O
int	O
rl_bracketed_paste_begin	(int,int)->(int)
(	O
count	int
,	O
key	int
)	O
int	O
count	int
,	O
key	int
;	O
{	O
int	O
retval	int
,	O
c	int
;	O
size_t	long
len	long
,	O
cap	long
;	O
char	O
*	O
buf	*(char)
;	O
retval	int
=	O
1	int
;	O
len	long
=	O
0	int
;	O
buf	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
cap	long
=	O
64	int
)	O
;	O
RL_SETSTATE	O
(	O
RL_STATE_MOREINPUT	int
)	O
;	O
while	O
(	O
(	O
c	int
=	O
rl_read_key	()->(int)
(	O
)	O
)	O
>=	O
0	int
)	O
{	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_MACRODEF	int
)	O
)	O
_rl_add_macro_char	(int)->(void)
(	O
c	int
)	O
;	O
if	O
(	O
c	int
==	O
'\r'	O
)	O
c	int
=	O
'\n'	O
;	O
if	O
(	O
len	long
==	O
cap	long
)	O
buf	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buf	*(char)
,	O
cap	long
*=	O
2	int
)	O
;	O
buf	*(char)
[	O
len	long
++	O
]	O
=	O
c	int
;	O
if	O
(	O
len	long
>=	O
BRACK_PASTE_SLEN	int
&&	O
c	int
==	O
BRACK_PASTE_LAST	char
&&	O
STREQN	O
(	O
buf	*(char)
+	O
len	long
-	O
BRACK_PASTE_SLEN	int
,	O
BRACK_PASTE_SUFF	*(char)
,	O
BRACK_PASTE_SLEN	int
)	O
)	O
{	O
len	long
-=	O
BRACK_PASTE_SLEN	int
;	O
break	O
;	O
}	O
}	O
RL_UNSETSTATE	O
(	O
RL_STATE_MOREINPUT	int
)	O
;	O
if	O
(	O
c	int
>=	O
0	int
)	O
{	O
if	O
(	O
len	long
==	O
cap	long
)	O
buf	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buf	*(char)
,	O
cap	long
+	O
1	int
)	O
;	O
buf	*(char)
[	O
len	long
]	O
=	O
'\0'	O
;	O
retval	int
=	O
rl_insert_text	(*(char))->(int)
(	O
buf	*(char)
)	O
;	O
}	O
xfree	(*(void))->(void)
(	O
buf	*(char)
)	O
;	O
return	O
(	O
retval	int
)	O
;	O
}	O
