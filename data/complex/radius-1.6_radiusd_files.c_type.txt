typedef	O
struct	O
locus_name	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
{	O
struct	O
locus_name	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
*	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
char	O
*	O
filename	*(char)
;	O
size_t	long
refcnt	long
;	O
}	O
Locus_symbol	struct(*(struct(*(struct(*`,*`,long)),*(char),long)),*(char),long)
;	O
static	O
grad_symtab_t	struct(int,int,int,*(*(struct(*(struct`),*(char)))),*(()->(int)))
*	O
locus_tab	*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int))))
;	O
void	O
locus_dup	(*(struct(*(char),long)),*(struct(*(char),long)))->(void)
(	O
grad_locus_t	struct(*(char),long)
*	O
dst	*(char)
,	O
grad_locus_t	struct(*(char),long)
*	O
src	*(struct(*(char),int,array(int),*(char),long))
)	O
{	O
Locus_symbol	struct(*(struct(*(struct(*`,*`,long)),*(char),long)),*(char),long)
*	O
sp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
;	O
if	O
(	O
!	O
locus_tab	*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int))))
)	O
locus_tab	*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int))))
=	O
grad_symtab_create	(int,*(()->(int)))->(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
(	O
sizeof	O
(	O
Locus_symbol	struct(*(struct(*(struct(*`,*`,long)),*(char),long)),*(char),long)
)	O
,	O
NULL	O
)	O
;	O
sp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
=	O
(	O
Locus_symbol	struct(*(struct(*(struct(*`,*`,long)),*(char),long)),*(char),long)
*	O
)	O
grad_sym_lookup_or_install	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))),*(char),int)->(*(void))
(	O
locus_tab	*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int))))
,	O
src	*(struct(*(char),int,array(int),*(char),long))
->	O
file	*(char)
,	O
1	int
)	O
;	O
sp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
->	O
refcnt	long
++	O
;	O
dst	*(char)
->	O
file	*(char)
=	O
sp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
->	O
filename	*(char)
;	O
dst	*(char)
->	O
line	long
=	O
src	*(struct(*(char),int,array(int),*(char),long))
->	O
line	long
;	O
}	O
void	O
locus_free	(*(struct(*(char),long)))->(void)
(	O
grad_locus_t	struct(*(char),long)
*	O
loc	struct(*(char),long)
)	O
{	O
Locus_symbol	struct(*(struct(*(struct(*`,*`,long)),*(char),long)),*(char),long)
*	O
sp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
=	O
(	O
Locus_symbol	struct(*(struct(*(struct(*`,*`,long)),*(char),long)),*(char),long)
*	O
)	O
grad_sym_lookup	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))),*(char))->(*(void))
(	O
locus_tab	*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int))))
,	O
loc	struct(*(char),long)
->	O
file	*(char)
)	O
;	O
if	O
(	O
--	O
sp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
->	O
refcnt	long
==	O
0	int
)	O
grad_symtab_delete	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))),*(struct(*(struct(*`,*`)),*(char))))->(int)
(	O
locus_tab	*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int))))
,	O
(	O
grad_symbol_t	struct
*	O
)	O
sp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
)	O
;	O
}	O
grad_symtab_t	struct(int,int,int,*(*(struct(*(struct`),*(char)))),*(()->(int)))
*	O
user_tab	*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int))))
;	O
grad_symtab_t	struct(int,int,int,*(*(struct(*(struct`),*(char)))),*(()->(int)))
*	O
deny_tab	*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int))))
;	O
static	O
grad_list_t	struct
*	O
huntgroups	*(struct)
;	O
static	O
grad_list_t	struct
*	O
hints	*(struct)
;	O
static	O
grad_list_t	struct
*	O
clients	*(struct)
;	O
static	O
grad_list_t	struct
*	O
radck_type	struct(*(char),int,*(struct))
;	O
static	O
grad_keyword_t	struct
op_tab	array(struct(*(char),int))
[	O
]	O
=	O
{	O
{	O
"="	*(char)
,	O
grad_operator_equal	int
}	O
,	O
{	O
"!="	*(char)
,	O
grad_operator_not_equal	int
}	O
,	O
{	O
">"	*(char)
,	O
grad_operator_greater_than	int
}	O
,	O
{	O
"<"	*(char)
,	O
grad_operator_less_than	int
}	O
,	O
{	O
">="	*(char)
,	O
grad_operator_greater_equal	int
}	O
,	O
{	O
"<="	*(char)
,	O
grad_operator_less_equal	int
}	O
,	O
{	O
0	int
}	O
}	O
;	O
int	O
paircmp	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char))->(int)
(	O
radiusd_request_t	struct(*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),*(struct),*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))),int,int,int,int,*(char),array(char),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
check	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
char	O
*	O
pusername	*(char)
)	O
;	O
int	O
fallthrough	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(int)
(	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
vp	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
static	O
int	O
portcmp	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(int)
(	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
check	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
;	O
static	O
int	O
groupcmp	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(char),*(char))->(int)
(	O
radiusd_request_t	struct(*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),*(struct),*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))),int,int,int,int,*(char),array(char),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
char	O
*	O
groupname	*(char)
,	O
char	O
*	O
username	*(char)
)	O
;	O
static	O
int	O
uidcmp	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char))->(int)
(	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
check	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
char	O
*	O
username	*(char)
)	O
;	O
static	O
void	O
matchrule_free	(*(*(struct(*(char),*(struct`),*(struct`),struct(*`,long)))))->(void)
(	O
grad_matching_rule_t	struct
*	O
*	O
pl	*(*(struct(*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long))))
)	O
;	O
static	O
int	O
matches	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(char),*(struct(*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long))),*(char))->(int)
(	O
radiusd_request_t	struct(*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),*(struct),*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))),int,int,int,int,*(char),array(char),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
char	O
*	O
name	*(char)
,	O
grad_matching_rule_t	struct
*	O
pl	*(*(struct(*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long))))
,	O
char	O
*	O
matchpart	*(char)
)	O
;	O
static	O
int	O
huntgroup_match	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(char))->(int)
(	O
radiusd_request_t	struct(*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),*(struct),*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))),int,int,int,int,*(char),array(char),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
char	O
*	O
huntgroup	*(char)
)	O
;	O
static	O
int	O
user_find_sym	(*(char),*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))->(int)
(	O
char	O
*	O
name	*(char)
,	O
radiusd_request_t	struct(*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),*(struct),*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))),int,int,int,int,*(char),array(char),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
*	O
check_pairs	*(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
*	O
reply_pairs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
static	O
grad_list_t	struct
*	O
file_read	(int,*(char))->(*(struct))
(	O
int	O
cf_file	int
,	O
char	O
*	O
name	*(char)
)	O
;	O
int	O
comp_op	(enum(int,int,int,int,int,int,int),int)->(int)
(	O
enum	O
grad_operator	enum(int,int,int,int,int,int,int)
op	enum(int,int,int,int,int,int,int)
,	O
int	O
result	*(struct(*(char),*(*(char)),int,int,*(*(char))))
)	O
{	O
switch	O
(	O
op	enum(int,int,int,int,int,int,int)
)	O
{	O
default	O
:	O
case	O
grad_operator_equal	int
:	O
if	O
(	O
result	*(struct(*(char),*(*(char)),int,int,*(*(char))))
!=	O
0	int
)	O
return	O
-	O
1	int
;	O
break	O
;	O
case	O
grad_operator_not_equal	int
:	O
if	O
(	O
result	*(struct(*(char),*(*(char)),int,int,*(*(char))))
==	O
0	int
)	O
return	O
-	O
1	int
;	O
break	O
;	O
case	O
grad_operator_less_than	int
:	O
if	O
(	O
result	*(struct(*(char),*(*(char)),int,int,*(*(char))))
>=	O
0	int
)	O
return	O
-	O
1	int
;	O
break	O
;	O
case	O
grad_operator_greater_than	int
:	O
if	O
(	O
result	*(struct(*(char),*(*(char)),int,int,*(*(char))))
<=	O
0	int
)	O
return	O
-	O
1	int
;	O
break	O
;	O
case	O
grad_operator_less_equal	int
:	O
if	O
(	O
result	*(struct(*(char),*(*(char)),int,int,*(*(char))))
>	O
0	int
)	O
return	O
-	O
1	int
;	O
break	O
;	O
case	O
grad_operator_greater_equal	int
:	O
if	O
(	O
result	*(struct(*(char),*(*(char)),int,int,*(*(char))))
<	O
0	int
)	O
return	O
-	O
1	int
;	O
break	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
add_user_entry	(*(void),*(struct(*(char),long)),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(int)
(	O
void	O
*	O
closure	*(void)
,	O
grad_locus_t	struct(*(char),long)
*	O
loc	struct(*(char),long)
,	O
char	O
*	O
name	*(char)
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
check	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
reply	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
{	O
grad_symtab_t	struct(int,int,int,*(*(struct(*(struct`),*(char)))),*(()->(int)))
*	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
=	O
closure	*(void)
;	O
User_symbol	struct(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),struct(*(char),long),int)
*	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
name	*(char)
,	O
"DEFAULT"	*(char)
,	O
7	int
)	O
==	O
0	int
)	O
name	*(char)
=	O
"DEFAULT"	*(char)
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
name	*(char)
,	O
"BEGIN"	*(char)
,	O
5	int
)	O
==	O
0	int
)	O
name	*(char)
=	O
"BEGIN"	*(char)
;	O
if	O
(	O
(	O
check	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
==	O
NULL	O
&&	O
reply	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
==	O
NULL	O
)	O
||	O
fix_check_pairs	(int,*(struct(*(char),long)),*(char),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))->(int)
(	O
GRAD_CF_USERS	int
,	O
loc	struct(*(char),long)
,	O
name	*(char)
,	O
&	O
check	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
||	O
fix_reply_pairs	(int,*(struct(*(char),long)),*(char),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))->(int)
(	O
GRAD_CF_USERS	int
,	O
loc	struct(*(char),long)
,	O
name	*(char)
,	O
&	O
reply	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
)	O
{	O
grad_log_loc	(int,*(struct(*(char),long)),*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
loc	struct(*(char),long)
,	O
_	O
(	O
"discarding user `%s'"	*(char)
)	O
,	O
name	*(char)
)	O
;	O
grad_avl_free	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(void)
(	O
check	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
grad_avl_free	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(void)
(	O
reply	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
return	O
0	int
;	O
}	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
=	O
grad_sym_install	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))),*(char))->(*(void))
(	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
,	O
name	*(char)
)	O
;	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
check	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
check	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
reply	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
reply	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
locus_dup	(*(struct(*(char),long)),*(struct(*(char),long)))->(void)
(	O
&	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
loc	struct(*(char),long)
,	O
loc	struct(*(char),long)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
free_user_entry	(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)))->(int)
(	O
User_symbol	struct(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),struct(*(char),long),int)
*	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
)	O
{	O
locus_free	(*(struct(*(char),long)))->(void)
(	O
&	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
loc	struct(*(char),long)
)	O
;	O
grad_avl_free	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(void)
(	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
check	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
grad_avl_free	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(void)
(	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
reply	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
return	O
0	int
;	O
}	O
struct	O
temp_data	struct(int,*(struct))
{	O
int	O
cf_file	int
;	O
grad_list_t	struct
*	O
list	*(*(struct))
;	O
}	O
;	O
int	O
add_pairlist	(*(void),*(struct(*(char),long)),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(int)
(	O
void	O
*	O
closure	*(void)
,	O
grad_locus_t	struct(*(char),long)
*	O
loc	struct(*(char),long)
,	O
char	O
*	O
name	*(char)
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
lhs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
rhs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
{	O
struct	O
temp_data	struct(int,*(struct))
*	O
data	*(void)
=	O
closure	*(void)
;	O
grad_matching_rule_t	struct
*	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
;	O
if	O
(	O
(	O
lhs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
==	O
NULL	O
&&	O
rhs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
==	O
NULL	O
)	O
||	O
fix_check_pairs	(int,*(struct(*(char),long)),*(char),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))->(int)
(	O
data	*(void)
->	O
cf_file	int
,	O
loc	struct(*(char),long)
,	O
name	*(char)
,	O
&	O
lhs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
||	O
fix_reply_pairs	(int,*(struct(*(char),long)),*(char),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))->(int)
(	O
data	*(void)
->	O
cf_file	int
,	O
loc	struct(*(char),long)
,	O
name	*(char)
,	O
&	O
rhs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
)	O
{	O
grad_log_loc	(int,*(struct(*(char),long)),*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
loc	struct(*(char),long)
,	O
_	O
(	O
"discarding entry `%s'"	*(char)
)	O
,	O
name	*(char)
)	O
;	O
grad_avl_free	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(void)
(	O
lhs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
grad_avl_free	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(void)
(	O
rhs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
return	O
0	int
;	O
}	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
=	O
grad_emalloc	(long)->(*(void))
(	O
sizeof	O
(	O
grad_matching_rule_t	struct
)	O
)	O
;	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
->	O
name	*(char)
=	O
grad_estrdup	(*(char))->(*(char))
(	O
name	*(char)
)	O
;	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
->	O
lhs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
lhs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
->	O
rhs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
rhs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
locus_dup	(*(struct(*(char),long)),*(struct(*(char),long)))->(void)
(	O
&	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
->	O
loc	struct(*(char),long)
,	O
loc	struct(*(char),long)
)	O
;	O
grad_list_append	(*(struct),*(void))->(void)
(	O
data	*(void)
->	O
list	*(*(struct))
,	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
)	O
;	O
return	O
0	int
;	O
}	O
int	O
read_users	(*(char))->(int)
(	O
char	O
*	O
name	*(char)
)	O
{	O
if	O
(	O
!	O
user_tab	*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int))))
)	O
user_tab	*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int))))
=	O
grad_symtab_create	(int,*(()->(int)))->(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
(	O
sizeof	O
(	O
User_symbol	struct(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),struct(*(char),long),int)
)	O
,	O
free_user_entry	(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)))->(int)
)	O
;	O
return	O
grad_parse_rule_file	(*(char),*(void),*((*(void),*(struct(*`,long)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))->(int)))->(int)
(	O
name	*(char)
,	O
user_tab	*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int))))
,	O
add_user_entry	(*(void),*(struct(*(char),long)),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(int)
)	O
;	O
}	O
static	O
grad_list_t	struct
*	O
file_read	(int,*(char))->(*(struct))
(	O
int	O
cf_file	int
,	O
char	O
*	O
name	*(char)
)	O
{	O
struct	O
temp_data	struct(int,*(struct))
tmp	struct(int,*(struct))
;	O
tmp	struct(int,*(struct))
.	O
cf_file	int
=	O
cf_file	int
;	O
tmp	struct(int,*(struct))
.	O
list	*(*(struct))
=	O
grad_list_create	()->(*(struct))
(	O
)	O
;	O
grad_parse_rule_file	(*(char),*(void),*((*(void),*(struct(*`,long)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))->(int)))->(int)
(	O
name	*(char)
,	O
&	O
tmp	struct(int,*(struct))
,	O
add_pairlist	(*(void),*(struct(*(char),long)),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(int)
)	O
;	O
return	O
tmp	struct(int,*(struct))
.	O
list	*(*(struct))
;	O
}	O
enum	O
lookup_state	enum(int,int,int)
{	O
LU_begin	int
,	O
LU_match	int
,	O
LU_default	int
}	O
;	O
typedef	O
struct	O
{	O
char	O
*	O
name	*(char)
;	O
enum	O
lookup_state	enum(int,int,int)
state	*(int)
;	O
User_symbol	struct(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),struct(*(char),long),int)
*	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
;	O
}	O
USER_LOOKUP	struct(*(char),enum(int,int,int),*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)))
;	O
static	O
User_symbol	struct(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),struct(*(char),long),int)
*	O
user_lookup	(*(char),*(struct(*(char),enum(int,int,int),*(struct(*`,*`,*`,*`,struct`,int)))))->(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)))
(	O
char	O
*	O
name	*(char)
,	O
USER_LOOKUP	struct(*(char),enum(int,int,int),*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)))
*	O
lptr	*(struct(*(char),enum(int,int,int),*(struct(*(struct`),*(char),*(struct`),*(struct`),struct(*`,long),int))))
)	O
;	O
static	O
User_symbol	struct(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),struct(*(char),long),int)
*	O
user_next	(*(struct(*(char),enum(int,int,int),*(struct(*`,*`,*`,*`,struct`,int)))))->(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)))
(	O
USER_LOOKUP	struct(*(char),enum(int,int,int),*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)))
*	O
lptr	*(struct(*(char),enum(int,int,int),*(struct(*(struct`),*(char),*(struct`),*(struct`),struct(*`,long),int))))
)	O
;	O
User_symbol	struct(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),struct(*(char),long),int)
*	O
user_lookup	(*(char),*(struct(*(char),enum(int,int,int),*(struct(*`,*`,*`,*`,struct`,int)))))->(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)))
(	O
char	O
*	O
name	*(char)
,	O
USER_LOOKUP	struct(*(char),enum(int,int,int),*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)))
*	O
lptr	*(struct(*(char),enum(int,int,int),*(struct(*(struct`),*(char),*(struct`),*(struct`),struct(*`,long),int))))
)	O
{	O
lptr	*(struct(*(char),enum(int,int,int),*(struct(*(struct`),*(char),*(struct`),*(struct`),struct(*`,long),int))))
->	O
name	*(char)
=	O
name	*(char)
;	O
lptr	*(struct(*(char),enum(int,int,int),*(struct(*(struct`),*(char),*(struct`),*(struct`),struct(*`,long),int))))
->	O
state	*(int)
=	O
LU_begin	int
;	O
lptr	*(struct(*(char),enum(int,int,int),*(struct(*(struct`),*(char),*(struct`),*(struct`),struct(*`,long),int))))
->	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
=	O
grad_sym_lookup	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))),*(char))->(*(void))
(	O
user_tab	*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int))))
,	O
"BEGIN"	*(char)
)	O
;	O
return	O
lptr	*(struct(*(char),enum(int,int,int),*(struct(*(struct`),*(char),*(struct`),*(struct`),struct(*`,long),int))))
->	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
?	O
lptr	*(struct(*(char),enum(int,int,int),*(struct(*(struct`),*(char),*(struct`),*(struct`),struct(*`,long),int))))
->	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
:	O
user_next	(*(struct(*(char),enum(int,int,int),*(struct(*`,*`,*`,*`,struct`,int)))))->(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)))
(	O
lptr	*(struct(*(char),enum(int,int,int),*(struct(*(struct`),*(char),*(struct`),*(struct`),struct(*`,long),int))))
)	O
;	O
}	O
User_symbol	struct(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),struct(*(char),long),int)
*	O
user_next	(*(struct(*(char),enum(int,int,int),*(struct(*`,*`,*`,*`,struct`,int)))))->(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)))
(	O
USER_LOOKUP	struct(*(char),enum(int,int,int),*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)))
*	O
lptr	*(struct(*(char),enum(int,int,int),*(struct(*(struct`),*(char),*(struct`),*(struct`),struct(*`,long),int))))
)	O
{	O
if	O
(	O
lptr	*(struct(*(char),enum(int,int,int),*(struct(*(struct`),*(char),*(struct`),*(struct`),struct(*`,long),int))))
->	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
&&	O
(	O
lptr	*(struct(*(char),enum(int,int,int),*(struct(*(struct`),*(char),*(struct`),*(struct`),struct(*`,long),int))))
->	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
=	O
grad_sym_next	(*(struct(*(struct(*`,*`)),*(char))))->(*(void))
(	O
(	O
grad_symbol_t	struct
*	O
)	O
lptr	*(struct(*(char),enum(int,int,int),*(struct(*(struct`),*(char),*(struct`),*(struct`),struct(*`,long),int))))
->	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
)	O
)	O
)	O
return	O
lptr	*(struct(*(char),enum(int,int,int),*(struct(*(struct`),*(char),*(struct`),*(struct`),struct(*`,long),int))))
->	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
;	O
switch	O
(	O
lptr	*(struct(*(char),enum(int,int,int),*(struct(*(struct`),*(char),*(struct`),*(struct`),struct(*`,long),int))))
->	O
state	*(int)
)	O
{	O
case	O
LU_begin	int
:	O
lptr	*(struct(*(char),enum(int,int,int),*(struct(*(struct`),*(char),*(struct`),*(struct`),struct(*`,long),int))))
->	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
=	O
grad_sym_lookup	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))),*(char))->(*(void))
(	O
user_tab	*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int))))
,	O
lptr	*(struct(*(char),enum(int,int,int),*(struct(*(struct`),*(char),*(struct`),*(struct`),struct(*`,long),int))))
->	O
name	*(char)
)	O
;	O
if	O
(	O
lptr	*(struct(*(char),enum(int,int,int),*(struct(*(struct`),*(char),*(struct`),*(struct`),struct(*`,long),int))))
->	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
)	O
{	O
lptr	*(struct(*(char),enum(int,int,int),*(struct(*(struct`),*(char),*(struct`),*(struct`),struct(*`,long),int))))
->	O
state	*(int)
=	O
LU_match	int
;	O
break	O
;	O
}	O
case	O
LU_match	int
:	O
lptr	*(struct(*(char),enum(int,int,int),*(struct(*(struct`),*(char),*(struct`),*(struct`),struct(*`,long),int))))
->	O
state	*(int)
=	O
LU_default	int
;	O
lptr	*(struct(*(char),enum(int,int,int),*(struct(*(struct`),*(char),*(struct`),*(struct`),struct(*`,long),int))))
->	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
=	O
grad_sym_lookup	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))),*(char))->(*(void))
(	O
user_tab	*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int))))
,	O
"DEFAULT"	*(char)
)	O
;	O
break	O
;	O
case	O
LU_default	int
:	O
break	O
;	O
}	O
return	O
lptr	*(struct(*(char),enum(int,int,int),*(struct(*(struct`),*(char),*(struct`),*(struct`),struct(*`,long),int))))
->	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
;	O
}	O
static	O
int	O
match_user	(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))->(int)
(	O
User_symbol	struct(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),struct(*(char),long),int)
*	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
,	O
radiusd_request_t	struct(*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),*(struct),*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))),int,int,int,int,*(char),array(char),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
*	O
check_pairs	*(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
*	O
reply_pairs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
int	O
user_find_sym	(*(char),*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))->(int)
(	O
char	O
*	O
name	*(char)
,	O
radiusd_request_t	struct(*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),*(struct),*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))),int,int,int,int,*(char),array(char),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
*	O
check_pairs	*(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
*	O
reply_pairs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
{	O
int	O
found	int
=	O
0	int
;	O
User_symbol	struct(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),struct(*(char),long),int)
*	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
;	O
USER_LOOKUP	struct(*(char),enum(int,int,int),*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)))
lu	struct(*(char),enum(int,int,int),*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)))
;	O
GRAD_DEBUG1	O
(	O
1	int
,	O
"looking for %s"	*(char)
,	O
name	*(char)
)	O
;	O
for	O
(	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
=	O
user_lookup	(*(char),*(struct(*(char),enum(int,int,int),*(struct(*`,*`,*`,*`,struct`,int)))))->(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)))
(	O
name	*(char)
,	O
&	O
lu	struct(*(char),enum(int,int,int),*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)))
)	O
;	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
;	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
=	O
user_next	(*(struct(*(char),enum(int,int,int),*(struct(*`,*`,*`,*`,struct`,int)))))->(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)))
(	O
&	O
lu	struct(*(char),enum(int,int,int),*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)))
)	O
)	O
{	O
if	O
(	O
match_user	(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))->(int)
(	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
check_pairs	*(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
,	O
reply_pairs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
)	O
{	O
if	O
(	O
lu	struct(*(char),enum(int,int,int),*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)))
.	O
state	*(int)
!=	O
LU_begin	int
)	O
found	int
=	O
1	int
;	O
if	O
(	O
!	O
fallthrough	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(int)
(	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
reply	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
)	O
break	O
;	O
GRAD_DEBUG	O
(	O
1	int
,	O
"fall through"	*(char)
)	O
;	O
lu	struct(*(char),enum(int,int,int),*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)))
.	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
=	O
NULL	O
;	O
}	O
}	O
if	O
(	O
found	int
)	O
radiusd_sql_reply_attr_query	O
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
reply_pairs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
GRAD_DEBUG1	O
(	O
1	int
,	O
"returning %d"	*(char)
,	O
found	int
)	O
;	O
return	O
found	int
;	O
}	O
int	O
match_user	(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))->(int)
(	O
User_symbol	struct(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),struct(*(char),long),int)
*	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
,	O
radiusd_request_t	struct(*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),*(struct),*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))),int,int,int,int,*(char),array(char),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
*	O
check_pairs	*(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
*	O
reply_pairs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
{	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
p	*(struct)
;	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
check_tmp	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
reply_tmp	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
int	O
found	int
;	O
if	O
(	O
!	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
)	O
return	O
0	int
;	O
found	int
=	O
0	int
;	O
do	O
{	O
check_tmp	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
grad_avl_dup	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
check	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
radiusd_sql_check_attr_query	int
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
&	O
check_tmp	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
if	O
(	O
paircmp	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char))->(int)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
check_tmp	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
NULL	O
)	O
)	O
{	O
grad_avl_free	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(void)
(	O
check_tmp	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
continue	O
;	O
}	O
radius_req_register_locus	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(char),long)))->(void)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
&	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
loc	struct(*(char),long)
)	O
;	O
found	int
=	O
1	int
;	O
for	O
(	O
p	*(struct)
=	O
grad_avl_find	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int)->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
check	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
DA_MATCH_PROFILE	int
)	O
;	O
p	*(struct)
;	O
p	*(struct)
=	O
grad_avl_find	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int)->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
p	*(struct)
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
DA_MATCH_PROFILE	int
)	O
)	O
{	O
GRAD_DEBUG1	O
(	O
1	int
,	O
"submatch: %s"	*(char)
,	O
p	*(struct)
->	O
avp_strvalue	O
)	O
;	O
found	int
=	O
match_user	(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))->(int)
(	O
grad_sym_lookup	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))),*(char))->(*(void))
(	O
user_tab	*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int))))
,	O
p	*(struct)
->	O
avp_strvalue	O
)	O
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
check_pairs	*(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
,	O
reply_pairs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
}	O
if	O
(	O
!	O
found	int
)	O
{	O
grad_avl_free	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(void)
(	O
check_tmp	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
continue	O
;	O
}	O
reply_tmp	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
grad_avl_dup	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
reply	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
grad_avl_merge	(*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))->(void)
(	O
reply_pairs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
&	O
reply_tmp	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
grad_avl_merge	(*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))->(void)
(	O
check_pairs	*(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
,	O
&	O
check_tmp	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
grad_avl_free	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(void)
(	O
reply_tmp	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
grad_avl_free	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(void)
(	O
check_tmp	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
for	O
(	O
p	*(struct)
=	O
grad_avl_find	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int)->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
reply	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
DA_MATCH_PROFILE	int
)	O
;	O
p	*(struct)
;	O
p	*(struct)
=	O
grad_avl_find	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int)->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
p	*(struct)
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
DA_MATCH_PROFILE	int
)	O
)	O
{	O
GRAD_DEBUG1	O
(	O
1	int
,	O
"next: %s"	*(char)
,	O
p	*(struct)
->	O
avp_strvalue	O
)	O
;	O
match_user	(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))->(int)
(	O
grad_sym_lookup	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))),*(char))->(*(void))
(	O
user_tab	*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int))))
,	O
p	*(struct)
->	O
avp_strvalue	O
)	O
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
check_pairs	*(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
,	O
reply_pairs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
}	O
if	O
(	O
!	O
fallthrough	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(int)
(	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
reply	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
)	O
break	O
;	O
GRAD_DEBUG2	O
(	O
1	int
,	O
"fall through near %s:%lu"	*(char)
,	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
loc	struct(*(char),long)
.	O
file	*(char)
,	O
(	O
unsigned	O
long	O
)	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
loc	struct(*(char),long)
.	O
line	long
)	O
;	O
}	O
while	O
(	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
=	O
grad_sym_next	(*(struct(*(struct(*`,*`)),*(char))))->(*(void))
(	O
(	O
grad_symbol_t	struct
*	O
)	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
)	O
)	O
;	O
return	O
found	int
;	O
}	O
int	O
user_find	(*(char),*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))->(int)
(	O
char	O
*	O
name	*(char)
,	O
radiusd_request_t	struct(*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),*(struct),*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))),int,int,int,int,*(char),array(char),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
*	O
check_pairs	*(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
*	O
reply_pairs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
{	O
int	O
found	int
=	O
0	int
;	O
if	O
(	O
name	*(char)
[	O
0	int
]	O
==	O
0	int
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"zero length username not permitted"	*(char)
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
found	int
=	O
user_find_sym	(*(char),*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))->(int)
(	O
name	*(char)
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
check_pairs	*(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
,	O
reply_pairs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
if	O
(	O
!	O
found	int
)	O
return	O
-	O
1	int
;	O
grad_avl_delete	(*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),int)->(void)
(	O
reply_pairs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
DA_FALL_THROUGH	int
)	O
;	O
grad_avl_delete	(*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),int)->(void)
(	O
reply_pairs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
DA_MATCH_PROFILE	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
nextkn	(*(*(char)),*(char),int)->(int)
(	O
char	O
*	O
*	O
sptr	*(*(char))
,	O
char	O
*	O
token	*(char)
,	O
int	O
toksize	int
)	O
{	O
char	O
*	O
start	*(struct(long,long))
;	O
while	O
(	O
*	O
*	O
sptr	*(*(char))
&&	O
isws	O
(	O
*	O
*	O
sptr	*(*(char))
)	O
)	O
++	O
(	O
*	O
sptr	*(*(char))
)	O
;	O
if	O
(	O
!	O
*	O
*	O
sptr	*(*(char))
)	O
return	O
-	O
1	int
;	O
start	*(struct(long,long))
=	O
token	*(char)
;	O
if	O
(	O
*	O
*	O
sptr	*(*(char))
==	O
'"'	O
)	O
{	O
(	O
*	O
sptr	*(*(char))
)	O
++	O
;	O
while	O
(	O
toksize	int
&&	O
*	O
*	O
sptr	*(*(char))
)	O
{	O
if	O
(	O
*	O
*	O
sptr	*(*(char))
==	O
'\\'	O
&&	O
(	O
*	O
sptr	*(*(char))
)	O
[	O
1	int
]	O
)	O
{	O
switch	O
(	O
*	O
++	O
*	O
sptr	*(*(char))
)	O
{	O
default	O
:	O
*	O
token	*(char)
++	O
=	O
*	O
*	O
sptr	*(*(char))
;	O
break	O
;	O
case	O
'a'	O
:	O
*	O
token	*(char)
++	O
=	O
'\a'	O
;	O
break	O
;	O
case	O
'b'	O
:	O
*	O
token	*(char)
++	O
=	O
'\b'	O
;	O
break	O
;	O
case	O
'f'	O
:	O
*	O
token	*(char)
++	O
=	O
'\f'	O
;	O
break	O
;	O
case	O
'n'	O
:	O
*	O
token	*(char)
++	O
=	O
'\n'	O
;	O
break	O
;	O
case	O
'r'	O
:	O
*	O
token	*(char)
++	O
=	O
'\r'	O
;	O
break	O
;	O
case	O
't'	O
:	O
*	O
token	*(char)
++	O
=	O
'\t'	O
;	O
break	O
;	O
case	O
'v'	O
:	O
*	O
token	*(char)
++	O
=	O
'\v'	O
;	O
}	O
++	O
*	O
sptr	*(*(char))
;	O
toksize	int
--	O
;	O
}	O
else	O
if	O
(	O
*	O
*	O
sptr	*(*(char))
==	O
'"'	O
)	O
{	O
++	O
*	O
sptr	*(*(char))
;	O
break	O
;	O
}	O
else	O
*	O
token	*(char)
++	O
=	O
*	O
(	O
*	O
sptr	*(*(char))
)	O
++	O
;	O
}	O
}	O
else	O
if	O
(	O
*	O
*	O
sptr	*(*(char))
==	O
','	O
||	O
*	O
*	O
sptr	*(*(char))
==	O
'='	O
||	O
*	O
*	O
sptr	*(*(char))
==	O
'\n'	O
)	O
{	O
*	O
token	*(char)
++	O
=	O
*	O
(	O
*	O
sptr	*(*(char))
)	O
++	O
;	O
}	O
else	O
{	O
while	O
(	O
toksize	int
&&	O
*	O
*	O
sptr	*(*(char))
&&	O
!	O
isdelim	O
(	O
*	O
*	O
sptr	*(*(char))
)	O
)	O
{	O
*	O
token	*(char)
++	O
=	O
*	O
(	O
*	O
sptr	*(*(char))
)	O
++	O
;	O
toksize	int
--	O
;	O
}	O
}	O
*	O
token	*(char)
=	O
0	int
;	O
return	O
start	*(struct(long,long))
[	O
0	int
]	O
;	O
}	O
int	O
userparse	(*(char),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(*(char)))->(int)
(	O
char	O
*	O
buffer	*(char)
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
*	O
first_pair	*(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
,	O
char	O
*	O
*	O
errmsg	*(*(char))
)	O
{	O
int	O
state	*(int)
;	O
grad_dict_attr_t	struct
*	O
attr	*(struct(*(char),int,int,int,int,*((*(struct`),*(*`))->(int))))
=	O
NULL	O
;	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
int	O
op	enum(int,int,int,int,int,int,int)
;	O
static	O
char	O
errbuf	array(char)
[	O
512	int
]	O
;	O
char	O
token	*(char)
[	O
256	int
]	O
;	O
grad_locus_t	struct(*(char),long)
loc	struct(*(char),long)
;	O
loc	struct(*(char),long)
.	O
file	*(char)
=	O
"<stdin>"	*(char)
;	O
loc	struct(*(char),long)
.	O
line	long
=	O
0	int
;	O
state	*(int)
=	O
PS_LHS	int
;	O
while	O
(	O
nextkn	(*(*(char)),*(char),int)->(int)
(	O
&	O
buffer	*(char)
,	O
token	*(char)
,	O
sizeof	O
(	O
token	*(char)
)	O
)	O
>=	O
0	int
)	O
{	O
switch	O
(	O
state	*(int)
)	O
{	O
case	O
PS_LHS	int
:	O
if	O
(	O
token	*(char)
[	O
0	int
]	O
==	O
'\n'	O
||	O
token	*(char)
[	O
0	int
]	O
==	O
'#'	O
)	O
continue	O
;	O
if	O
(	O
!	O
(	O
attr	*(struct(*(char),int,int,int,int,*((*(struct`),*(*`))->(int))))
=	O
grad_attr_name_to_dict	(*(char))->(*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))
(	O
token	*(char)
)	O
)	O
)	O
{	O
snprintf	(*(char),long,*(char))->(int)
(	O
errbuf	array(char)
,	O
sizeof	O
(	O
errbuf	array(char)
)	O
,	O
_	O
(	O
"unknown attribute `%s/%s'"	*(char)
)	O
,	O
token	*(char)
,	O
buffer	*(char)
)	O
;	O
*	O
errmsg	*(*(char))
=	O
errbuf	array(char)
;	O
return	O
-	O
1	int
;	O
}	O
state	*(int)
=	O
PS_OPS	int
;	O
break	O
;	O
case	O
PS_OPS	int
:	O
op	enum(int,int,int,int,int,int,int)
=	O
grad_xlat_keyword	(*(struct(*(char),int)),*(char),int)->(int)
(	O
op_tab	array(struct(*(char),int))
,	O
token	*(char)
,	O
-	O
1	int
)	O
;	O
if	O
(	O
op	enum(int,int,int,int,int,int,int)
==	O
-	O
1	int
)	O
{	O
snprintf	(*(char),long,*(char))->(int)
(	O
errbuf	array(char)
,	O
sizeof	O
(	O
errbuf	array(char)
)	O
,	O
_	O
(	O
"expected %s, but found %s"	*(char)
)	O
,	O
_	O
(	O
"opcode"	*(char)
)	O
,	O
token	*(char)
)	O
;	O
*	O
errmsg	*(*(char))
=	O
errbuf	array(char)
;	O
return	O
-	O
1	int
;	O
}	O
state	*(int)
=	O
PS_RHS	int
;	O
break	O
;	O
case	O
PS_RHS	int
:	O
pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
grad_create_pair	(*(struct(*(char),long)),*(char),enum(int,int,int,int,int,int,int),*(char))->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
&	O
loc	struct(*(char),long)
,	O
attr	*(struct(*(char),int,int,int,int,*((*(struct`),*(*`))->(int))))
->	O
name	*(char)
,	O
op	enum(int,int,int,int,int,int,int)
,	O
token	*(char)
)	O
;	O
if	O
(	O
!	O
pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
{	O
snprintf	(*(char),long,*(char))->(int)
(	O
errbuf	array(char)
,	O
sizeof	O
(	O
errbuf	array(char)
)	O
,	O
_	O
(	O
"grad_create_pair failed on %s"	*(char)
)	O
,	O
attr	*(struct(*(char),int,int,int,int,*((*(struct`),*(*`))->(int))))
->	O
name	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
grad_avl_merge	(*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))->(void)
(	O
first_pair	*(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
,	O
&	O
pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
state	*(int)
=	O
PS_END	int
;	O
break	O
;	O
case	O
PS_END	int
:	O
if	O
(	O
token	*(char)
[	O
0	int
]	O
!=	O
','	O
&&	O
token	*(char)
[	O
0	int
]	O
!=	O
'\n'	O
)	O
{	O
snprintf	(*(char),long,*(char))->(int)
(	O
errbuf	array(char)
,	O
sizeof	O
(	O
errbuf	array(char)
)	O
,	O
_	O
(	O
"expected %s, but found %s"	*(char)
)	O
,	O
"','"	*(char)
,	O
token	*(char)
)	O
;	O
*	O
errmsg	*(*(char))
=	O
errbuf	array(char)
;	O
return	O
-	O
1	int
;	O
}	O
state	*(int)
=	O
PS_LHS	int
;	O
break	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
avl_eval_rewrite	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(void)
(	O
radiusd_request_t	struct(*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),*(struct),*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))),int,int,int,int,*(char),array(char),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
grad_matching_rule_t	struct
*	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
p	*(struct)
)	O
{	O
for	O
(	O
;	O
p	*(struct)
;	O
p	*(struct)
=	O
p	*(struct)
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
{	O
if	O
(	O
p	*(struct)
->	O
attribute	int
==	O
DA_REWRITE_FUNCTION	int
&&	O
rewrite_eval	(*(char),*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(enum(int,int,int),union(int,struct(long,*`)))))->(int)
(	O
p	*(struct)
->	O
avp_strvalue	O
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
NULL	O
)	O
)	O
{	O
grad_log_loc	(int,*(struct(*(char),long)),*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
&	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
->	O
loc	struct(*(char),long)
,	O
"%s(): %s"	*(char)
,	O
p	*(struct)
->	O
avp_strvalue	O
,	O
_	O
(	O
"not defined"	*(char)
)	O
)	O
;	O
}	O
}	O
}	O
void	O
rule_eval_rewrite	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long))))->(void)
(	O
radiusd_request_t	struct(*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),*(struct),*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))),int,int,int,int,*(char),array(char),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
grad_matching_rule_t	struct
*	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
)	O
{	O
avl_eval_rewrite	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(void)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
,	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
->	O
rhs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
avl_eval_rewrite	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(void)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
,	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
->	O
lhs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
}	O
int	O
exec_program_wait	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))->(int)
(	O
radiusd_request_t	struct(*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),*(struct),*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))),int,int,int,int,*(char),array(char),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
rhs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
*	O
reply	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
*	O
pfailed	*(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
p	*(struct)
;	O
for	O
(	O
p	*(struct)
=	O
rhs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
p	*(struct)
;	O
p	*(struct)
=	O
p	*(struct)
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
{	O
if	O
(	O
p	*(struct)
->	O
attribute	int
==	O
DA_EXEC_PROGRAM_WAIT	int
)	O
{	O
radius_eval_avp	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int)->(int)
(	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
p	*(struct)
,	O
reply	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
?	O
*	O
reply	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
:	O
NULL	O
,	O
1	int
)	O
;	O
switch	O
(	O
p	*(struct)
->	O
avp_strvalue	O
[	O
0	int
]	O
)	O
{	O
case	O
'/'	O
:	O
rc	int
=	O
radius_exec_program	(*(char),*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),int)->(int)
(	O
p	*(struct)
->	O
avp_strvalue	O
,	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
reply	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
1	int
)	O
;	O
break	O
;	O
case	O
'|'	O
:	O
rc	int
=	O
filter_auth	(*(char),*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))->(int)
(	O
p	*(struct)
->	O
avp_strvalue	O
+	O
1	int
,	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
reply	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
break	O
;	O
default	O
:	O
grad_log_req	(int,*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
_	O
(	O
"cannot execute `%s'"	*(char)
)	O
,	O
p	*(struct)
->	O
avp_strvalue	O
)	O
;	O
rc	int
=	O
1	int
;	O
}	O
if	O
(	O
rc	int
)	O
{	O
if	O
(	O
pfailed	*(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
)	O
*	O
pfailed	*(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
=	O
p	*(struct)
;	O
break	O
;	O
}	O
}	O
}	O
return	O
rc	int
;	O
}	O
static	O
void	O
hints_eval_compat	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long))))->(void)
(	O
radiusd_request_t	struct(*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),*(struct),*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))),int,int,int,int,*(char),array(char),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
name_pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
grad_matching_rule_t	struct
*	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
)	O
{	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
tmp	struct(int,*(struct))
;	O
if	O
(	O
(	O
tmp	struct(int,*(struct))
=	O
grad_avl_find	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int)->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
->	O
rhs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
DA_REPLACE_USER_NAME	int
)	O
)	O
||	O
(	O
tmp	struct(int,*(struct))
=	O
grad_avl_find	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int)->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
->	O
lhs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
DA_REPLACE_USER_NAME	int
)	O
)	O
)	O
{	O
char	O
*	O
ptr	*(*(void))
;	O
struct	O
obstack	struct(long,*(struct(*(char),*(struct(*(char),*(struct`),array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct(*(char),*(struct`),array(char))))),*((*(void),*(struct(*(char),*(struct`),array(char))))->(void)),*(void),int,int,int)
hints_stk	struct(long,*(struct(*(char),*(struct(*`,*`,array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct(*`,*`,array(char))))),*((*(void),*(struct(*`,*`,array(char))))->(void)),*(void),int,int,int)
;	O
obstack_init	O
(	O
&	O
hints_stk	struct(long,*(struct(*(char),*(struct(*`,*`,array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct(*`,*`,array(char))))),*((*(void),*(struct(*`,*`,array(char))))->(void)),*(void),int,int,int)
)	O
;	O
ptr	*(*(void))
=	O
radius_xlate	(*(struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(char),*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(*(char))
(	O
&	O
hints_stk	struct(long,*(struct(*(char),*(struct(*`,*`,array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct(*`,*`,array(char))))),*((*(void),*(struct(*`,*`,array(char))))->(void)),*(void),int,int,int)
,	O
tmp	struct(int,*(struct))
->	O
avp_strvalue	O
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
NULL	O
)	O
;	O
if	O
(	O
ptr	*(*(void))
)	O
grad_string_replace	(*(*(char)),*(char))->(*(char))
(	O
&	O
name_pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_strvalue	O
,	O
ptr	*(*(void))
)	O
;	O
obstack_free	(*(struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(void))->(void)
(	O
&	O
hints_stk	struct(long,*(struct(*(char),*(struct(*`,*`,array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct(*`,*`,array(char))))),*((*(void),*(struct(*`,*`,array(char))))->(void)),*(void),int,int,int)
,	O
NULL	O
)	O
;	O
}	O
rule_eval_rewrite	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long))))->(void)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
)	O
;	O
}	O
int	O
hints_setup	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))))->(int)
(	O
radiusd_request_t	struct(*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),*(struct),*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))),int,int,int,int,*(char),array(char),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
{	O
char	O
newname	array(char)
[	O
GRAD_STRING_LENGTH	int
]	O
;	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
name_pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
orig_name_pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
tmp_name_pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
tmp	struct(int,*(struct))
;	O
grad_matching_rule_t	struct
*	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
;	O
int	O
matched	int
=	O
0	int
;	O
grad_iterator_t	struct
*	O
itr	*((*(void),*(void))->(int))
;	O
switch	O
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
code	char
)	O
{	O
case	O
RT_ACCESS_ACCEPT	int
:	O
case	O
RT_ACCESS_REJECT	int
:	O
case	O
RT_ACCOUNTING_RESPONSE	int
:	O
case	O
RT_ACCESS_CHALLENGE	int
:	O
tmp	struct(int,*(struct))
=	O
grad_avp_create_integer	(int,int)->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
DA_PROXY_REPLIED	int
,	O
1	int
)	O
;	O
grad_avl_merge	(*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))->(void)
(	O
&	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
avlist	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
&	O
tmp	struct(int,*(struct))
)	O
;	O
grad_avp_free	()->(void)
(	O
tmp	struct(int,*(struct))
)	O
;	O
break	O
;	O
case	O
RT_STATUS_SERVER	int
:	O
return	O
0	int
;	O
}	O
if	O
(	O
hints	*(struct)
==	O
NULL	O
)	O
return	O
0	int
;	O
if	O
(	O
(	O
name_pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
grad_avl_find	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int)->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
avlist	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
DA_USER_NAME	int
)	O
)	O
==	O
NULL	O
)	O
{	O
tmp_name_pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
grad_avp_create_string	(int,*(char))->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
DA_USER_NAME	int
,	O
""	*(char)
)	O
;	O
name_pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
tmp_name_pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
orig_name_pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
NULL	O
;	O
}	O
else	O
{	O
orig_name_pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
grad_avp_create_string	(int,*(char))->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
DA_ORIG_USER_NAME	int
,	O
name_pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_strvalue	O
)	O
;	O
}	O
GRAD_DEBUG1	O
(	O
1	int
,	O
"called for `%s'"	*(char)
,	O
name_pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_strvalue	O
)	O
;	O
if	O
(	O
grad_avl_find	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int)->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
avlist	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
DA_FRAMED_PROTOCOL	int
)	O
!=	O
NULL	O
&&	O
grad_avl_find	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int)->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
avlist	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
DA_SERVICE_TYPE	int
)	O
==	O
NULL	O
)	O
{	O
tmp	struct(int,*(struct))
=	O
grad_avp_create_integer	(int,int)->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
DA_SERVICE_TYPE	int
,	O
DV_SERVICE_TYPE_FRAMED_USER	int
)	O
;	O
if	O
(	O
tmp	struct(int,*(struct))
)	O
grad_avl_merge	(*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))->(void)
(	O
&	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
avlist	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
&	O
tmp	struct(int,*(struct))
)	O
;	O
}	O
itr	*((*(void),*(void))->(int))
=	O
grad_iterator_create	(*(struct))->(*(struct))
(	O
hints	*(struct)
)	O
;	O
for	O
(	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
=	O
grad_iterator_first	(*(struct))->(*(void))
(	O
itr	*((*(void),*(void))->(int))
)	O
;	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
;	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
=	O
grad_iterator_next	(*(struct))->(*(void))
(	O
itr	*((*(void),*(void))->(int))
)	O
)	O
{	O
int	O
do_strip	int
;	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
add	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
if	O
(	O
matches	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(char),*(struct(*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long))),*(char))->(int)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
name_pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_strvalue	O
,	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
,	O
newname	array(char)
)	O
)	O
continue	O
;	O
matched	int
++	O
;	O
radius_req_register_locus	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(char),long)))->(void)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
&	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
->	O
loc	struct(*(char),long)
)	O
;	O
GRAD_DEBUG3	O
(	O
1	int
,	O
"matched %s at %s:%lu"	*(char)
,	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
->	O
name	*(char)
,	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
->	O
loc	struct(*(char),long)
.	O
file	*(char)
,	O
(	O
unsigned	O
long	O
)	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
->	O
loc	struct(*(char),long)
.	O
line	long
)	O
;	O
add	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
grad_avl_dup	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
->	O
rhs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
do_strip	int
=	O
1	int
;	O
if	O
(	O
(	O
tmp	struct(int,*(struct))
=	O
grad_avl_find	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int)->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
->	O
rhs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
DA_STRIP_USER_NAME	int
)	O
)	O
!=	O
NULL	O
||	O
(	O
tmp	struct(int,*(struct))
=	O
grad_avl_find	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int)->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
->	O
lhs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
DA_STRIP_USER_NAME	int
)	O
)	O
!=	O
NULL	O
)	O
do_strip	int
=	O
tmp	struct(int,*(struct))
->	O
avp_lvalue	O
;	O
if	O
(	O
do_strip	int
)	O
grad_string_replace	(*(*(char)),*(char))->(*(char))
(	O
&	O
name_pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_strvalue	O
,	O
newname	array(char)
)	O
;	O
hints_eval_compat	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long))))->(void)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
name_pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
)	O
;	O
exec_program_wait	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))->(int)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
->	O
rhs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
&	O
add	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
NULL	O
)	O
;	O
radius_eval_avl	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(int)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
add	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
grad_avl_delete	(*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),int)->(void)
(	O
&	O
add	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
DA_STRIP_USER_NAME	int
)	O
;	O
grad_avl_delete	(*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),int)->(void)
(	O
&	O
add	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
DA_REPLACE_USER_NAME	int
)	O
;	O
grad_avl_delete	(*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),int)->(void)
(	O
&	O
add	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
DA_REWRITE_FUNCTION	int
)	O
;	O
grad_avl_merge	(*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))->(void)
(	O
&	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
avlist	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
&	O
add	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
grad_avl_free	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(void)
(	O
add	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
tmp	struct(int,*(struct))
=	O
grad_avl_find	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int)->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
avlist	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
DA_USER_NAME	int
)	O
;	O
if	O
(	O
tmp	struct(int,*(struct))
)	O
name_pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
tmp	struct(int,*(struct))
;	O
GRAD_DEBUG1	O
(	O
1	int
,	O
"new name is `%s'"	*(char)
,	O
name_pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_strvalue	O
)	O
;	O
name_pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_strlength	O
=	O
strlen	(*(char))->(long)
(	O
name_pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_strvalue	O
)	O
;	O
if	O
(	O
(	O
(	O
tmp	struct(int,*(struct))
=	O
grad_avl_find	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int)->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
->	O
rhs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
DA_FALL_THROUGH	int
)	O
)	O
!=	O
NULL	O
||	O
(	O
tmp	struct(int,*(struct))
=	O
grad_avl_find	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int)->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
->	O
lhs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
DA_FALL_THROUGH	int
)	O
)	O
!=	O
NULL	O
)	O
&&	O
tmp	struct(int,*(struct))
->	O
avp_lvalue	O
)	O
continue	O
;	O
break	O
;	O
}	O
grad_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
itr	*((*(void),*(void))->(int))
)	O
;	O
if	O
(	O
matched	int
)	O
{	O
if	O
(	O
orig_name_pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
grad_avl_add_pair	(*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(void)
(	O
&	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
avlist	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
orig_name_pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
else	O
if	O
(	O
!	O
grad_avl_find	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int)->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
avlist	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
DA_USER_NAME	int
)	O
)	O
grad_avl_add_pair	(*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(void)
(	O
&	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
avlist	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
tmp_name_pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
else	O
grad_avp_free	()->(void)
(	O
tmp_name_pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
}	O
else	O
{	O
if	O
(	O
orig_name_pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
grad_avp_free	()->(void)
(	O
orig_name_pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
else	O
grad_avp_free	()->(void)
(	O
tmp_name_pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
huntgroup_match	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(char))->(int)
(	O
radiusd_request_t	struct(*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),*(struct),*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))),int,int,int,int,*(char),array(char),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
char	O
*	O
huntgroup	*(char)
)	O
{	O
grad_matching_rule_t	struct
*	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
;	O
grad_iterator_t	struct
*	O
itr	*((*(void),*(void))->(int))
;	O
if	O
(	O
!	O
huntgroups	*(struct)
)	O
return	O
0	int
;	O
itr	*((*(void),*(void))->(int))
=	O
grad_iterator_create	(*(struct))->(*(struct))
(	O
huntgroups	*(struct)
)	O
;	O
for	O
(	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
=	O
grad_iterator_first	(*(struct))->(*(void))
(	O
itr	*((*(void),*(void))->(int))
)	O
;	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
;	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
=	O
grad_iterator_next	(*(struct))->(*(void))
(	O
itr	*((*(void),*(void))->(int))
)	O
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
->	O
name	*(char)
,	O
huntgroup	*(char)
)	O
!=	O
0	int
)	O
continue	O
;	O
if	O
(	O
paircmp	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char))->(int)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
->	O
lhs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
NULL	O
)	O
==	O
0	int
)	O
{	O
GRAD_DEBUG3	O
(	O
1	int
,	O
"matched %s at %s:%lu"	*(char)
,	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
->	O
name	*(char)
,	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
->	O
loc	struct(*(char),long)
.	O
file	*(char)
,	O
(	O
unsigned	O
long	O
)	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
->	O
loc	struct(*(char),long)
.	O
line	long
)	O
;	O
break	O
;	O
}	O
}	O
grad_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
itr	*((*(void),*(void))->(int))
)	O
;	O
return	O
(	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
!=	O
NULL	O
)	O
;	O
}	O
int	O
huntgroup_access	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(char),long)))->(int)
(	O
radiusd_request_t	struct(*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),*(struct),*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))),int,int,int,int,*(char),array(char),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
radreq	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
grad_locus_t	struct(*(char),long)
*	O
loc	struct(*(char),long)
)	O
{	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
grad_matching_rule_t	struct
*	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
;	O
grad_iterator_t	struct
*	O
itr	*((*(void),*(void))->(int))
;	O
int	O
r	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
=	O
1	int
;	O
if	O
(	O
huntgroups	*(struct)
==	O
NULL	O
)	O
return	O
1	int
;	O
itr	*((*(void),*(void))->(int))
=	O
grad_iterator_create	(*(struct))->(*(struct))
(	O
huntgroups	*(struct)
)	O
;	O
for	O
(	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
=	O
grad_iterator_first	(*(struct))->(*(void))
(	O
itr	*((*(void),*(void))->(int))
)	O
;	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
;	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
=	O
grad_iterator_next	(*(struct))->(*(void))
(	O
itr	*((*(void),*(void))->(int))
)	O
)	O
{	O
if	O
(	O
paircmp	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char))->(int)
(	O
radreq	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
->	O
lhs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
NULL	O
)	O
!=	O
0	int
)	O
continue	O
;	O
GRAD_DEBUG2	O
(	O
1	int
,	O
"matched huntgroup at %s:%lu"	*(char)
,	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
->	O
loc	struct(*(char),long)
.	O
file	*(char)
,	O
(	O
unsigned	O
long	O
)	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
->	O
loc	struct(*(char),long)
.	O
line	long
)	O
;	O
r	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
=	O
paircmp	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char))->(int)
(	O
radreq	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
->	O
rhs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
NULL	O
)	O
==	O
0	int
;	O
break	O
;	O
}	O
grad_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
itr	*((*(void),*(void))->(int))
)	O
;	O
if	O
(	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
)	O
{	O
if	O
(	O
loc	struct(*(char),long)
)	O
*	O
loc	struct(*(char),long)
=	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
->	O
loc	struct(*(char),long)
;	O
radius_req_register_locus	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(char),long)))->(void)
(	O
radreq	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
&	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
->	O
loc	struct(*(char),long)
)	O
;	O
rule_eval_rewrite	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long))))->(void)
(	O
radreq	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
)	O
;	O
}	O
GRAD_DEBUG1	O
(	O
1	int
,	O
"returning %d"	*(char)
,	O
r	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
)	O
;	O
return	O
r	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
;	O
}	O
int	O
read_naslist_file	(*(char))->(int)
(	O
char	O
*	O
file	*(char)
)	O
{	O
return	O
grad_nas_read_file	(*(char))->(int)
(	O
file	*(char)
)	O
;	O
}	O
int	O
read_clients_entry	(*(void),int,*(*(char)),*(struct(*(char),long)))->(int)
(	O
void	O
*	O
u	*(void)
ARG_UNUSED	O
,	O
int	O
fc	int
,	O
char	O
*	O
*	O
fv	*(*(char))
,	O
grad_locus_t	struct(*(char),long)
*	O
loc	struct(*(char),long)
)	O
{	O
CLIENT	struct(struct(int,int),array(char),*(char),array(char))
*	O
cp	*(struct(struct(int,int),array(char),*(char),array(char)))
;	O
if	O
(	O
fc	int
!=	O
2	int
)	O
{	O
grad_log_loc	(int,*(struct(*(char),long)),*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
loc	struct(*(char),long)
,	O
"%s"	*(char)
,	O
_	O
(	O
"wrong number of fields"	*(char)
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
cp	*(struct(struct(int,int),array(char),*(char),array(char)))
=	O
grad_emalloc	(long)->(*(void))
(	O
sizeof	O
(	O
CLIENT	struct(struct(int,int),array(char),*(char),array(char))
)	O
)	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
fv	*(*(char))
[	O
0	int
]	O
,	O
"DEFAULT"	*(char)
)	O
==	O
0	int
)	O
cp	*(struct(struct(int,int),array(char),*(char),array(char)))
->	O
netdef	struct(int,int)
.	O
ipaddr	int
=	O
cp	*(struct(struct(int,int),array(char),*(char),array(char)))
->	O
netdef	struct(int,int)
.	O
netmask	int
=	O
0	int
;	O
else	O
grad_ip_getnetaddr	(*(char),*(struct(int,int)))->(int)
(	O
fv	*(*(char))
[	O
0	int
]	O
,	O
&	O
cp	*(struct(struct(int,int),array(char),*(char),array(char)))
->	O
netdef	struct(int,int)
)	O
;	O
cp	*(struct(struct(int,int),array(char),*(char),array(char)))
->	O
secret	*(char)
=	O
grad_estrdup	(*(char))->(*(char))
(	O
fv	*(*(char))
[	O
1	int
]	O
)	O
;	O
if	O
(	O
fc	int
==	O
3	int
)	O
GRAD_STRING_COPY	O
(	O
cp	*(struct(struct(int,int),array(char),*(char),array(char)))
->	O
shortname	array(char)
,	O
fv	*(*(char))
[	O
2	int
]	O
)	O
;	O
grad_ip_gethostname	(int,*(char),long)->(*(char))
(	O
cp	*(struct(struct(int,int),array(char),*(char),array(char)))
->	O
netdef	struct(int,int)
.	O
ipaddr	int
,	O
cp	*(struct(struct(int,int),array(char),*(char),array(char)))
->	O
longname	array(char)
,	O
sizeof	O
(	O
cp	*(struct(struct(int,int),array(char),*(char),array(char)))
->	O
longname	array(char)
)	O
)	O
;	O
grad_list_append	(*(struct),*(void))->(void)
(	O
clients	*(struct)
,	O
cp	*(struct(struct(int,int),array(char),*(char),array(char)))
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
client_free	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
ARG_UNUSED	O
)	O
{	O
CLIENT	struct(struct(int,int),array(char),*(char),array(char))
*	O
cl	*(struct(struct(int,int),array(char),*(char),array(char)))
=	O
item	*(void)
;	O
grad_free	(*(void))->(void)
(	O
cl	*(struct(struct(int,int),array(char),*(char),array(char)))
->	O
secret	*(char)
)	O
;	O
grad_free	(*(void))->(void)
(	O
cl	*(struct(struct(int,int),array(char),*(char),array(char)))
)	O
;	O
return	O
0	int
;	O
}	O
int	O
read_clients_file	(*(char))->(int)
(	O
char	O
*	O
file	*(char)
)	O
{	O
grad_list_destroy	(*(*(struct)),*((*(void),*(void))->(int)),*(void))->(void)
(	O
&	O
clients	*(struct)
,	O
client_free	(*(void),*(void))->(int)
,	O
NULL	O
)	O
;	O
clients	*(struct)
=	O
grad_list_create	()->(*(struct))
(	O
)	O
;	O
return	O
grad_read_raddb_file	(*(char),int,*(char),*((*(void),int,*(*(char)),*(struct(*`,long)))->(int)),*(void))->(int)
(	O
file	*(char)
,	O
1	int
,	O
NULL	O
,	O
read_clients_entry	(*(void),int,*(*(char)),*(struct(*(char),long)))->(int)
,	O
NULL	O
)	O
;	O
}	O
CLIENT	struct(struct(int,int),array(char),*(char),array(char))
*	O
client_lookup_ip	(int)->(*(struct(struct(int,int),array(char),*(char),array(char))))
(	O
grad_uint32_t	int
ipaddr	int
)	O
{	O
CLIENT	struct(struct(int,int),array(char),*(char),array(char))
*	O
cl	*(struct(struct(int,int),array(char),*(char),array(char)))
;	O
grad_iterator_t	struct
*	O
itr	*((*(void),*(void))->(int))
=	O
grad_iterator_create	(*(struct))->(*(struct))
(	O
clients	*(struct)
)	O
;	O
if	O
(	O
!	O
itr	*((*(void),*(void))->(int))
)	O
return	O
NULL	O
;	O
for	O
(	O
cl	*(struct(struct(int,int),array(char),*(char),array(char)))
=	O
grad_iterator_first	(*(struct))->(*(void))
(	O
itr	*((*(void),*(void))->(int))
)	O
;	O
cl	*(struct(struct(int,int),array(char),*(char),array(char)))
;	O
cl	*(struct(struct(int,int),array(char),*(char),array(char)))
=	O
grad_iterator_next	(*(struct))->(*(void))
(	O
itr	*((*(void),*(void))->(int))
)	O
)	O
if	O
(	O
grad_ip_in_net_p	(*(struct(int,int)),int)->(int)
(	O
&	O
cl	*(struct(struct(int,int),array(char),*(char),array(char)))
->	O
netdef	struct(int,int)
,	O
ipaddr	int
)	O
)	O
{	O
char	O
ipbuf	array(char)
[	O
GRAD_IPV4_STRING_LENGTH	int
]	O
;	O
char	O
maskbuf	array(char)
[	O
GRAD_IPV4_STRING_LENGTH	int
]	O
;	O
GRAD_DEBUG4	O
(	O
10	int
,	O
"Found secret for %s/%s (%s): %s"	*(char)
,	O
grad_ip_iptostr	(int,*(char))->(*(char))
(	O
cl	*(struct(struct(int,int),array(char),*(char),array(char)))
->	O
netdef	struct(int,int)
.	O
ipaddr	int
,	O
ipbuf	array(char)
)	O
,	O
grad_ip_iptostr	(int,*(char))->(*(char))
(	O
cl	*(struct(struct(int,int),array(char),*(char),array(char)))
->	O
netdef	struct(int,int)
.	O
netmask	int
,	O
maskbuf	array(char)
)	O
,	O
cl	*(struct(struct(int,int),array(char),*(char),array(char)))
->	O
longname	array(char)
,	O
cl	*(struct(struct(int,int),array(char),*(char),array(char)))
->	O
secret	*(char)
)	O
;	O
break	O
;	O
}	O
grad_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
itr	*((*(void),*(void))->(int))
)	O
;	O
return	O
cl	*(struct(struct(int,int),array(char),*(char),array(char)))
;	O
}	O
char	O
*	O
client_lookup_name	(int,*(char),long)->(*(char))
(	O
grad_uint32_t	int
ipaddr	int
,	O
char	O
*	O
buf	*(char)
,	O
size_t	long
bufsize	long
)	O
{	O
CLIENT	struct(struct(int,int),array(char),*(char),array(char))
*	O
cl	*(struct(struct(int,int),array(char),*(char),array(char)))
;	O
if	O
(	O
(	O
cl	*(struct(struct(int,int),array(char),*(char),array(char)))
=	O
client_lookup_ip	(int)->(*(struct(struct(int,int),array(char),*(char),array(char))))
(	O
ipaddr	int
)	O
)	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
cl	*(struct(struct(int,int),array(char),*(char),array(char)))
->	O
shortname	array(char)
[	O
0	int
]	O
)	O
return	O
cl	*(struct(struct(int,int),array(char),*(char),array(char)))
->	O
shortname	array(char)
;	O
else	O
return	O
cl	*(struct(struct(int,int),array(char),*(char),array(char)))
->	O
longname	array(char)
;	O
}	O
return	O
grad_ip_gethostname	(int,*(char),long)->(*(char))
(	O
ipaddr	int
,	O
buf	*(char)
,	O
bufsize	long
)	O
;	O
}	O
int	O
read_nastypes_entry	(*(void),int,*(*(char)),*(struct(*(char),long)))->(int)
(	O
void	O
*	O
u	*(void)
ARG_UNUSED	O
,	O
int	O
fc	int
,	O
char	O
*	O
*	O
fv	*(*(char))
,	O
grad_locus_t	struct(*(char),long)
*	O
loc	struct(*(char),long)
)	O
{	O
RADCK_TYPE	struct
*	O
mp	*(struct(*(char),int,*(struct)))
;	O
int	O
method	int
;	O
int	O
i	int
;	O
if	O
(	O
fc	int
<	O
2	int
)	O
{	O
grad_log_loc	(int,*(struct(*(char),long)),*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
loc	struct(*(char),long)
,	O
"%s"	*(char)
,	O
_	O
(	O
"too few fields"	*(char)
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
fv	*(*(char))
[	O
1	int
]	O
,	O
"finger"	*(char)
)	O
==	O
0	int
)	O
method	int
=	O
METHOD_FINGER	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
fv	*(*(char))
[	O
1	int
]	O
,	O
"snmp"	*(char)
)	O
==	O
0	int
)	O
method	int
=	O
METHOD_SNMP	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
fv	*(*(char))
[	O
1	int
]	O
,	O
"ext"	*(char)
)	O
==	O
0	int
)	O
method	int
=	O
METHOD_EXT	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
fv	*(*(char))
[	O
1	int
]	O
,	O
"guile"	*(char)
)	O
==	O
0	int
)	O
method	int
=	O
METHOD_GUILE	int
;	O
else	O
{	O
grad_log_loc	(int,*(struct(*(char),long)),*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
loc	struct(*(char),long)
,	O
"%s"	*(char)
,	O
_	O
(	O
"unknown method"	*(char)
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
mp	*(struct(*(char),int,*(struct)))
=	O
grad_emalloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
mp	*(struct(*(char),int,*(struct)))
)	O
)	O
;	O
mp	*(struct(*(char),int,*(struct)))
->	O
type	enum(int,int,int,int)
=	O
grad_estrdup	(*(char))->(*(char))
(	O
fv	*(*(char))
[	O
0	int
]	O
)	O
;	O
mp	*(struct(*(char),int,*(struct)))
->	O
method	int
=	O
method	int
;	O
mp	*(struct(*(char),int,*(struct)))
->	O
args	*(struct)
=	O
NULL	O
;	O
for	O
(	O
i	int
=	O
2	int
;	O
i	int
<	O
fc	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
fv	*(*(char))
[	O
i	int
]	O
[	O
0	int
]	O
==	O
','	O
)	O
continue	O
;	O
if	O
(	O
fc	int
-	O
i	int
>	O
2	int
&&	O
fv	*(*(char))
[	O
i	int
+	O
1	int
]	O
[	O
0	int
]	O
==	O
'='	O
)	O
{	O
grad_envar_assign	()->(int)
(	O
fv	*(*(char))
[	O
i	int
]	O
,	O
fv	*(*(char))
[	O
i	int
+	O
2	int
]	O
,	O
&	O
mp	*(struct(*(char),int,*(struct)))
->	O
args	*(struct)
)	O
;	O
i	int
+=	O
2	int
;	O
}	O
else	O
{	O
grad_envar_assign	()->(int)
(	O
fv	*(*(char))
[	O
i	int
]	O
,	O
NULL	O
,	O
&	O
mp	*(struct(*(char),int,*(struct)))
->	O
args	*(struct)
)	O
;	O
}	O
}	O
grad_list_append	(*(struct),*(void))->(void)
(	O
radck_type	struct(*(char),int,*(struct))
,	O
mp	*(struct(*(char),int,*(struct)))
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
free_radck_type	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
ARG_UNUSED	O
)	O
{	O
RADCK_TYPE	struct
*	O
rp	*(struct(*(char),int,*(struct)))
=	O
item	*(void)
;	O
grad_free	(*(void))->(void)
(	O
rp	*(struct(*(char),int,*(struct)))
->	O
type	enum(int,int,int,int)
)	O
;	O
grad_envar_free_list	(*(*(struct)))->(void)
(	O
&	O
rp	*(struct(*(char),int,*(struct)))
->	O
args	*(struct)
)	O
;	O
grad_free	(*(void))->(void)
(	O
rp	*(struct(*(char),int,*(struct)))
)	O
;	O
return	O
0	int
;	O
}	O
int	O
read_nastypes_file	(*(char))->(int)
(	O
char	O
*	O
file	*(char)
)	O
{	O
grad_list_destroy	(*(*(struct)),*((*(void),*(void))->(int)),*(void))->(void)
(	O
&	O
radck_type	struct(*(char),int,*(struct))
,	O
free_radck_type	(*(void),*(void))->(int)
,	O
NULL	O
)	O
;	O
radck_type	struct(*(char),int,*(struct))
=	O
grad_list_create	()->(*(struct))
(	O
)	O
;	O
return	O
grad_read_raddb_file	(*(char),int,*(char),*((*(void),int,*(*(char)),*(struct(*`,long)))->(int)),*(void))->(int)
(	O
file	*(char)
,	O
0	int
,	O
",="	*(char)
,	O
read_nastypes_entry	(*(void),int,*(*(char)),*(struct(*(char),long)))->(int)
,	O
NULL	O
)	O
;	O
}	O
RADCK_TYPE	struct
*	O
find_radck_type	(*(char))->(*(struct(*(char),int,*(struct))))
(	O
char	O
*	O
name	*(char)
)	O
{	O
RADCK_TYPE	struct
*	O
tp	*(struct(*(char),int,*(struct)))
;	O
grad_iterator_t	struct
*	O
itr	*((*(void),*(void))->(int))
=	O
grad_iterator_create	(*(struct))->(*(struct))
(	O
radck_type	struct(*(char),int,*(struct))
)	O
;	O
if	O
(	O
!	O
itr	*((*(void),*(void))->(int))
)	O
return	O
NULL	O
;	O
for	O
(	O
tp	*(struct(*(char),int,*(struct)))
=	O
grad_iterator_first	(*(struct))->(*(void))
(	O
itr	*((*(void),*(void))->(int))
)	O
;	O
tp	*(struct(*(char),int,*(struct)))
&&	O
strcmp	(*(char),*(char))->(int)
(	O
tp	*(struct(*(char),int,*(struct)))
->	O
type	enum(int,int,int,int)
,	O
name	*(char)
)	O
;	O
tp	*(struct(*(char),int,*(struct)))
=	O
grad_iterator_next	(*(struct))->(*(void))
(	O
itr	*((*(void),*(void))->(int))
)	O
)	O
;	O
grad_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
itr	*((*(void),*(void))->(int))
)	O
;	O
return	O
tp	*(struct(*(char),int,*(struct)))
;	O
}	O
void	O
add_deny	(*(char))->(void)
(	O
char	O
*	O
user	*(char)
)	O
{	O
grad_sym_install	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))),*(char))->(*(void))
(	O
deny_tab	*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int))))
,	O
user	*(char)
)	O
;	O
}	O
int	O
read_denylist_entry	(*(void),int,*(*(char)),*(struct(*(char),long)))->(int)
(	O
void	O
*	O
closure	*(void)
,	O
int	O
fc	int
,	O
char	O
*	O
*	O
fv	*(*(char))
,	O
grad_locus_t	struct(*(char),long)
*	O
loc	struct(*(char),long)
)	O
{	O
int	O
*	O
denycnt	*(int)
=	O
closure	*(void)
;	O
if	O
(	O
fc	int
!=	O
1	int
)	O
{	O
grad_log_loc	(int,*(struct(*(char),long)),*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
loc	struct(*(char),long)
,	O
"%s"	*(char)
,	O
_	O
(	O
"wrong number of fields"	*(char)
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
get_deny	(*(char))->(int)
(	O
fv	*(*(char))
[	O
0	int
]	O
)	O
)	O
grad_log_loc	(int,*(struct(*(char),long)),*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
loc	struct(*(char),long)
,	O
_	O
(	O
"user `%s' already found in %s"	*(char)
)	O
,	O
fv	*(*(char))
[	O
0	int
]	O
,	O
RADIUS_DENY	*(char)
)	O
;	O
else	O
{	O
add_deny	(*(char))->(void)
(	O
fv	*(*(char))
[	O
0	int
]	O
)	O
;	O
(	O
*	O
denycnt	*(int)
)	O
++	O
;	O
}	O
return	O
0	int
;	O
}	O
void	O
read_deny_file	()->(void)
(	O
)	O
{	O
int	O
denycnt	*(int)
;	O
char	O
*	O
name	*(char)
;	O
name	*(char)
=	O
grad_mkfilename	(*(char),*(char))->(*(char))
(	O
grad_config_dir	*(char)
,	O
RADIUS_DENY	*(char)
)	O
;	O
if	O
(	O
deny_tab	*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int))))
)	O
grad_symtab_clear	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))->(void)
(	O
deny_tab	*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int))))
)	O
;	O
else	O
deny_tab	*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int))))
=	O
grad_symtab_create	(int,*(()->(int)))->(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
(	O
sizeof	O
(	O
grad_symbol_t	struct
)	O
,	O
NULL	O
)	O
;	O
denycnt	*(int)
=	O
0	int
;	O
grad_read_raddb_file	(*(char),int,*(char),*((*(void),int,*(*(char)),*(struct(*`,long)))->(int)),*(void))->(int)
(	O
name	*(char)
,	O
0	int
,	O
NULL	O
,	O
read_denylist_entry	(*(void),int,*(*(char)),*(struct(*(char),long)))->(int)
,	O
&	O
denycnt	*(int)
)	O
;	O
grad_free	(*(void))->(void)
(	O
name	*(char)
)	O
;	O
if	O
(	O
denycnt	*(int)
)	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_INFO	int
,	O
ngettext	(*(char),*(char),long)->(*(char))
(	O
"%d user disabled"	*(char)
,	O
"%d users disabled"	*(char)
,	O
denycnt	*(int)
)	O
,	O
denycnt	*(int)
)	O
;	O
}	O
int	O
get_deny	(*(char))->(int)
(	O
char	O
*	O
user	*(char)
)	O
{	O
return	O
grad_sym_lookup	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))),*(char))->(*(void))
(	O
deny_tab	*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int))))
,	O
user	*(char)
)	O
!=	O
NULL	O
;	O
}	O
int	O
fallthrough	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(int)
(	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
vp	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
{	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
tmp	struct(int,*(struct))
;	O
return	O
(	O
tmp	struct(int,*(struct))
=	O
grad_avl_find	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int)->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
vp	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
DA_FALL_THROUGH	int
)	O
)	O
?	O
tmp	struct(int,*(struct))
->	O
avp_lvalue	O
:	O
0	int
;	O
}	O
int	O
portcmp	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(int)
(	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
check	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
{	O
char	O
buf	*(char)
[	O
GRAD_STRING_LENGTH	int
]	O
;	O
char	O
*	O
s	*(*(char))
,	O
*	O
p	*(struct)
,	O
*	O
save	*(*(char))
;	O
int	O
lo	int
,	O
hi	int
;	O
int	O
port	array(int)
=	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
avp_lvalue	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
buf	*(char)
,	O
check	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_strvalue	O
)	O
;	O
s	*(*(char))
=	O
strtok_r	(*(char),*(char),*(*(char)))->(*(char))
(	O
buf	*(char)
,	O
","	*(char)
,	O
&	O
save	*(*(char))
)	O
;	O
while	O
(	O
s	*(*(char))
)	O
{	O
if	O
(	O
(	O
p	*(struct)
=	O
strchr	(*(char),int)->(*(char))
(	O
s	*(*(char))
,	O
'-'	O
)	O
)	O
!=	O
NULL	O
)	O
p	*(struct)
++	O
;	O
else	O
p	*(struct)
=	O
s	*(*(char))
;	O
lo	int
=	O
atoi	(*(char))->(int)
(	O
s	*(*(char))
)	O
;	O
hi	int
=	O
atoi	(*(char))->(int)
(	O
p	*(struct)
)	O
;	O
if	O
(	O
lo	int
<=	O
port	array(int)
&&	O
port	array(int)
<=	O
hi	int
)	O
{	O
return	O
0	int
;	O
}	O
s	*(*(char))
=	O
strtok_r	(*(char),*(char),*(*(char)))->(*(char))
(	O
NULL	O
,	O
","	*(char)
,	O
&	O
save	*(*(char))
)	O
;	O
}	O
return	O
-	O
1	int
;	O
}	O
int	O
uidcmp	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char))->(int)
(	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
check	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
char	O
*	O
username	*(char)
)	O
{	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
pw	*(char)
,	O
*	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
;	O
char	O
buffer	*(char)
[	O
512	int
]	O
;	O
if	O
(	O
!	O
(	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
grad_getpwnam_r	(*(char),*(struct(*(char),*(char),int,int,*(char),*(char),*(char))),*(char),int)->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
username	*(char)
,	O
&	O
pw	*(char)
,	O
buffer	*(char)
,	O
sizeof	O
buffer	*(char)
)	O
)	O
)	O
return	O
-	O
1	int
;	O
return	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_uid	int
-	O
check	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_lvalue	O
;	O
}	O
static	O
int	O
system_groupcmp	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(char),*(char))->(int)
(	O
radiusd_request_t	struct(*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),*(struct),*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))),int,int,int,int,*(char),array(char),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
char	O
*	O
groupname	*(char)
,	O
char	O
*	O
username	*(char)
)	O
{	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
pw	*(char)
,	O
*	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
;	O
struct	O
group	struct(*(char),*(char),int,*(*(char)))
*	O
grp	*(struct(*(char),*(char),int,*(*(char))))
;	O
char	O
*	O
*	O
member	*(*(char))
;	O
char	O
pwbuf	*(char)
[	O
512	int
]	O
;	O
int	O
retval	int
;	O
if	O
(	O
!	O
(	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
grad_getpwnam_r	(*(char),*(struct(*(char),*(char),int,int,*(char),*(char),*(char))),*(char),int)->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
username	*(char)
,	O
&	O
pw	*(char)
,	O
pwbuf	*(char)
,	O
sizeof	O
pwbuf	*(char)
)	O
)	O
)	O
return	O
1	int
;	O
if	O
(	O
!	O
(	O
grp	*(struct(*(char),*(char),int,*(*(char))))
=	O
grad_getgrnam	(*(char))->(*(struct(*(char),*(char),int,*(*(char)))))
(	O
groupname	*(char)
)	O
)	O
)	O
return	O
1	int
;	O
retval	int
=	O
!	O
(	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_gid	int
==	O
grp	*(struct(*(char),*(char),int,*(*(char))))
->	O
gr_gid	int
)	O
;	O
for	O
(	O
member	*(*(char))
=	O
grp	*(struct(*(char),*(char),int,*(*(char))))
->	O
gr_mem	*(*(char))
;	O
*	O
member	*(*(char))
&&	O
retval	int
;	O
member	*(*(char))
++	O
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
*	O
member	*(*(char))
,	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
)	O
==	O
0	int
)	O
retval	int
=	O
0	int
;	O
}	O
grad_free	(*(void))->(void)
(	O
grp	*(struct(*(char),*(char),int,*(*(char))))
)	O
;	O
return	O
retval	int
;	O
}	O
int	O
groupcmp	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(char),*(char))->(int)
(	O
radiusd_request_t	struct(*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),*(struct),*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))),int,int,int,int,*(char),array(char),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
char	O
*	O
groupname	*(char)
,	O
char	O
*	O
username	*(char)
)	O
{	O
int	O
retval	int
;	O
return	O
system_groupcmp	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(char),*(char))->(int)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
groupname	*(char)
,	O
username	*(char)
)	O
&&	O
radiusd_sql_checkgroup	int
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
groupname	*(char)
)	O
;	O
}	O
int	O
presufcmp	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),*(char))->(int)
(	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
check	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
char	O
*	O
name	*(char)
,	O
char	O
*	O
rest	*(char)
)	O
{	O
int	O
len	int
,	O
namelen	int
;	O
int	O
ret	int
=	O
-	O
1	int
;	O
GRAD_DEBUG3	O
(	O
1	int
,	O
"comparing %s and %s, check->attr is %d"	*(char)
,	O
name	*(char)
,	O
check	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_strvalue	O
,	O
check	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
attribute	int
)	O
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
check	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_strvalue	O
)	O
;	O
switch	O
(	O
check	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
attribute	int
)	O
{	O
case	O
DA_PREFIX	int
:	O
ret	int
=	O
strncmp	(*(char),*(char),long)->(int)
(	O
name	*(char)
,	O
check	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_strvalue	O
,	O
len	int
)	O
;	O
if	O
(	O
ret	int
==	O
0	int
&&	O
rest	*(char)
)	O
strcpy	(*(char),*(char))->(*(char))
(	O
rest	*(char)
,	O
name	*(char)
+	O
len	int
)	O
;	O
break	O
;	O
case	O
DA_SUFFIX	int
:	O
namelen	int
=	O
strlen	(*(char))->(long)
(	O
name	*(char)
)	O
;	O
if	O
(	O
namelen	int
<	O
len	int
)	O
break	O
;	O
ret	int
=	O
strcmp	(*(char),*(char))->(int)
(	O
name	*(char)
+	O
namelen	int
-	O
len	int
,	O
check	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_strvalue	O
)	O
;	O
if	O
(	O
ret	int
==	O
0	int
&&	O
rest	*(char)
)	O
{	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
rest	*(char)
,	O
name	*(char)
,	O
namelen	int
-	O
len	int
)	O
;	O
rest	*(char)
[	O
namelen	int
-	O
len	int
]	O
=	O
0	int
;	O
}	O
break	O
;	O
}	O
GRAD_DEBUG1	O
(	O
1	int
,	O
"returning %d"	*(char)
,	O
ret	int
)	O
;	O
return	O
ret	int
;	O
}	O
static	O
int	O
server_check_items	array(int)
[	O
]	O
=	O
{	O
DA_EXPIRATION	int
,	O
DA_LOGIN_TIME	int
,	O
DA_USER_PASSWORD	int
,	O
DA_CRYPT_PASSWORD	int
,	O
DA_PASSWORD_LOCATION	int
,	O
DA_AUTH_TYPE	int
,	O
DA_PAM_AUTH	int
,	O
DA_SIMULTANEOUS_USE	int
,	O
DA_STRIP_USER_NAME	int
,	O
DA_REPLACE_USER_NAME	int
,	O
DA_REWRITE_FUNCTION	int
,	O
DA_ACCT_TYPE	int
,	O
DA_LOG_MODE_MASK	int
,	O
DA_MENU	int
,	O
DA_TERMINATION_MENU	int
,	O
DA_GROUP_NAME	int
,	O
DA_MATCH_PROFILE	int
,	O
DA_AUTH_DATA	int
}	O
;	O
int	O
server_attr	(int)->(int)
(	O
int	O
attr	*(struct(*(char),int,int,int,int,*((*(struct`),*(*`))->(int))))
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
GRAD_NITEMS	O
(	O
server_check_items	array(int)
)	O
;	O
i	int
++	O
)	O
if	O
(	O
server_check_items	array(int)
[	O
i	int
]	O
==	O
attr	*(struct(*(char),int,int,int,int,*((*(struct`),*(*`))->(int))))
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
paircmp	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char))->(int)
(	O
radiusd_request_t	struct(*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),*(struct),*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))),int,int,int,int,*(char),array(char),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
check	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
char	O
*	O
pusername	*(char)
)	O
{	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
check_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
check	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
auth_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
char	O
username	*(char)
[	O
GRAD_STRING_LENGTH	int
]	O
;	O
int	O
result	*(struct(*(char),*(*(char)),int,int,*(*(char))))
=	O
0	int
;	O
int	O
compare	int
;	O
char	O
*	O
save	*(*(char))
;	O
if	O
(	O
!	O
pusername	*(char)
)	O
pusername	*(char)
=	O
username	*(char)
;	O
while	O
(	O
result	*(struct(*(char),*(*(char)),int,int,*(*(char))))
==	O
0	int
&&	O
check_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
!=	O
NULL	O
)	O
{	O
if	O
(	O
server_attr	(int)->(int)
(	O
check_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
attribute	int
)	O
)	O
{	O
check_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
check_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
continue	O
;	O
}	O
if	O
(	O
GRAD_DEBUG_LEVEL	O
(	O
20	int
)	O
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_DEBUG	int
,	O
"check_item: %s"	*(char)
,	O
grad_format_pair	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int,*(*(char)))->(*(char))
(	O
check_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
1	int
,	O
&	O
save	*(*(char))
)	O
)	O
;	O
free	(*(void))->(void)
(	O
save	*(*(char))
)	O
;	O
}	O
for	O
(	O
auth_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
avlist	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
auth_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
auth_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
auth_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
{	O
GRAD_DEBUG1	O
(	O
30	int
,	O
"trying %d"	*(char)
,	O
auth_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
attribute	int
)	O
;	O
switch	O
(	O
check_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
attribute	int
)	O
{	O
case	O
DA_PREFIX	int
:	O
case	O
DA_SUFFIX	int
:	O
case	O
DA_GROUP_NAME	int
:	O
case	O
DA_GROUP	int
:	O
if	O
(	O
auth_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
attribute	int
!=	O
DA_USER_NAME	int
)	O
continue	O
;	O
case	O
DA_HUNTGROUP_NAME	int
:	O
case	O
DA_USER_UID	int
:	O
break	O
;	O
case	O
DA_HINT	int
:	O
if	O
(	O
auth_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
attribute	int
!=	O
check_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
attribute	int
)	O
continue	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
check_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_strvalue	O
,	O
auth_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_strvalue	O
)	O
!=	O
0	int
)	O
continue	O
;	O
break	O
;	O
default	O
:	O
if	O
(	O
auth_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
attribute	int
!=	O
check_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
attribute	int
)	O
continue	O
;	O
}	O
break	O
;	O
}	O
if	O
(	O
auth_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
==	O
NULL	O
)	O
{	O
result	*(struct(*(char),*(*(char)),int,int,*(*(char))))
=	O
-	O
1	int
;	O
continue	O
;	O
}	O
if	O
(	O
GRAD_DEBUG_LEVEL	O
(	O
20	int
)	O
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_DEBUG	int
,	O
"auth_item: %s"	*(char)
,	O
grad_format_pair	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int,*(*(char)))->(*(char))
(	O
auth_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
1	int
,	O
&	O
save	*(*(char))
)	O
)	O
;	O
free	(*(void))->(void)
(	O
save	*(*(char))
)	O
;	O
}	O
compare	int
=	O
0	int
;	O
switch	O
(	O
check_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
type	enum(int,int,int,int)
)	O
{	O
case	O
GRAD_TYPE_STRING	int
:	O
switch	O
(	O
check_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
attribute	int
)	O
{	O
case	O
DA_PREFIX	int
:	O
case	O
DA_SUFFIX	int
:	O
strcpy	(*(char),*(char))->(*(char))
(	O
pusername	*(char)
,	O
auth_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_strvalue	O
)	O
;	O
compare	int
=	O
presufcmp	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),*(char))->(int)
(	O
check_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
auth_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_strvalue	O
,	O
pusername	*(char)
)	O
;	O
break	O
;	O
case	O
DA_NAS_PORT_ID	int
:	O
compare	int
=	O
portcmp	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(int)
(	O
check_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
auth_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
break	O
;	O
case	O
DA_GROUP_NAME	int
:	O
case	O
DA_GROUP	int
:	O
strcpy	(*(char),*(char))->(*(char))
(	O
username	*(char)
,	O
auth_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_strvalue	O
)	O
;	O
compare	int
=	O
groupcmp	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(char),*(char))->(int)
(	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
check_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_strvalue	O
,	O
username	*(char)
)	O
;	O
break	O
;	O
case	O
DA_HUNTGROUP_NAME	int
:	O
compare	int
=	O
!	O
huntgroup_match	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(char))->(int)
(	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
check_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_strvalue	O
)	O
;	O
break	O
;	O
default	O
:	O
compare	int
=	O
strcmp	(*(char),*(char))->(int)
(	O
auth_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_strvalue	O
,	O
check_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_strvalue	O
)	O
;	O
}	O
break	O
;	O
case	O
GRAD_TYPE_INTEGER	int
:	O
switch	O
(	O
check_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
attribute	int
)	O
{	O
case	O
DA_USER_UID	int
:	O
compare	int
=	O
uidcmp	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char))->(int)
(	O
check_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
username	*(char)
)	O
;	O
break	O
;	O
}	O
case	O
GRAD_TYPE_IPADDR	int
:	O
compare	int
=	O
auth_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_lvalue	O
-	O
check_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_lvalue	O
;	O
break	O
;	O
default	O
:	O
return	O
-	O
1	int
;	O
break	O
;	O
}	O
GRAD_DEBUG1	O
(	O
20	int
,	O
"compare: %d"	*(char)
,	O
compare	int
)	O
;	O
result	*(struct(*(char),*(*(char)),int,int,*(*(char))))
=	O
comp_op	(enum(int,int,int,int,int,int,int),int)->(int)
(	O
check_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
operator	enum(int,int,int,int,int,int,int)
,	O
compare	int
)	O
;	O
if	O
(	O
result	*(struct(*(char),*(*(char)),int,int,*(*(char))))
==	O
0	int
)	O
check_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
check_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
}	O
GRAD_DEBUG1	O
(	O
20	int
,	O
"returning %d"	*(char)
,	O
result	*(struct(*(char),*(*(char)),int,int,*(*(char))))
)	O
;	O
return	O
result	*(struct(*(char),*(*(char)),int,int,*(*(char))))
;	O
}	O
static	O
int	O
matching_rule_free	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
ARG_UNUSED	O
)	O
{	O
grad_matching_rule_t	struct
*	O
p	*(struct)
=	O
item	*(void)
;	O
if	O
(	O
p	*(struct)
->	O
name	*(char)
)	O
grad_free	(*(void))->(void)
(	O
p	*(struct)
->	O
name	*(char)
)	O
;	O
if	O
(	O
p	*(struct)
->	O
lhs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
grad_avl_free	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(void)
(	O
p	*(struct)
->	O
lhs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
if	O
(	O
p	*(struct)
->	O
rhs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
grad_avl_free	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(void)
(	O
p	*(struct)
->	O
rhs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
grad_free	(*(void))->(void)
(	O
p	*(struct)
)	O
;	O
}	O
struct	O
wild_match_range	struct(*(char),*(char))
{	O
char	O
*	O
start	*(struct(long,long))
;	O
char	O
*	O
end	*(long)
;	O
}	O
;	O
int	O
match_char_class	(*(*(char)),char)->(int)
(	O
char	O
*	O
*	O
pexpr	*(*(char))
,	O
char	O
c	*(void)
)	O
{	O
int	O
res	int
;	O
int	O
rc	int
;	O
char	O
*	O
expr	*(char)
=	O
*	O
pexpr	*(*(char))
;	O
expr	*(char)
++	O
;	O
if	O
(	O
*	O
expr	*(char)
==	O
'^'	O
)	O
{	O
res	int
=	O
0	int
;	O
expr	*(char)
++	O
;	O
}	O
else	O
res	int
=	O
1	int
;	O
if	O
(	O
*	O
expr	*(char)
==	O
'-'	O
||	O
*	O
expr	*(char)
==	O
']'	O
)	O
rc	int
=	O
c	*(void)
==	O
*	O
expr	*(char)
++	O
;	O
else	O
rc	int
=	O
!	O
res	int
;	O
for	O
(	O
;	O
*	O
expr	*(char)
&&	O
*	O
expr	*(char)
!=	O
']'	O
;	O
expr	*(char)
++	O
)	O
{	O
if	O
(	O
rc	int
==	O
res	int
)	O
{	O
if	O
(	O
*	O
expr	*(char)
==	O
'\\'	O
&&	O
expr	*(char)
[	O
1	int
]	O
==	O
']'	O
)	O
expr	*(char)
++	O
;	O
}	O
else	O
if	O
(	O
expr	*(char)
[	O
1	int
]	O
==	O
'-'	O
)	O
{	O
if	O
(	O
*	O
expr	*(char)
==	O
'\\'	O
)	O
rc	int
=	O
*	O
++	O
expr	*(char)
==	O
c	*(void)
;	O
else	O
{	O
rc	int
=	O
*	O
expr	*(char)
<=	O
c	*(void)
&&	O
c	*(void)
<=	O
expr	*(char)
[	O
2	int
]	O
;	O
expr	*(char)
+=	O
2	int
;	O
}	O
}	O
else	O
if	O
(	O
*	O
expr	*(char)
==	O
'\\'	O
&&	O
expr	*(char)
[	O
1	int
]	O
==	O
']'	O
)	O
rc	int
==	O
*	O
++	O
expr	*(char)
==	O
c	*(void)
;	O
else	O
rc	int
=	O
*	O
expr	*(char)
==	O
c	*(void)
;	O
}	O
*	O
pexpr	*(*(char))
=	O
*	O
expr	*(char)
?	O
expr	*(char)
+	O
1	int
:	O
expr	*(char)
;	O
return	O
rc	int
==	O
res	int
;	O
}	O
int	O
_wild_match	(*(char),*(char),*(struct(*(char),*(char))))->(int)
(	O
char	O
*	O
expr	*(char)
,	O
char	O
*	O
name	*(char)
,	O
struct	O
wild_match_range	struct(*(char),*(char))
*	O
r	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
)	O
{	O
int	O
c	*(void)
;	O
while	O
(	O
expr	*(char)
&&	O
*	O
expr	*(char)
)	O
{	O
if	O
(	O
*	O
name	*(char)
==	O
0	int
&&	O
*	O
expr	*(char)
!=	O
'*'	O
)	O
return	O
WILD_ABORT	int
;	O
switch	O
(	O
*	O
expr	*(char)
)	O
{	O
case	O
'*'	O
:	O
while	O
(	O
*	O
++	O
expr	*(char)
==	O
'*'	O
)	O
;	O
if	O
(	O
*	O
expr	*(char)
==	O
0	int
)	O
return	O
WILD_TRUE	int
;	O
while	O
(	O
*	O
name	*(char)
)	O
{	O
int	O
res	int
=	O
_wild_match	(*(char),*(char),*(struct(*(char),*(char))))->(int)
(	O
expr	*(char)
,	O
name	*(char)
++	O
,	O
r	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
)	O
;	O
if	O
(	O
res	int
!=	O
WILD_FALSE	int
)	O
return	O
res	int
;	O
}	O
return	O
WILD_ABORT	int
;	O
case	O
'?'	O
:	O
expr	*(char)
++	O
;	O
if	O
(	O
*	O
name	*(char)
==	O
0	int
)	O
return	O
WILD_FALSE	int
;	O
name	*(char)
++	O
;	O
break	O
;	O
case	O
'\\'	O
:	O
if	O
(	O
expr	*(char)
[	O
1	int
]	O
==	O
0	int
)	O
goto	O
def	int
;	O
c	*(void)
=	O
*	O
++	O
expr	*(char)
;	O
expr	*(char)
++	O
;	O
if	O
(	O
c	*(void)
==	O
'('	O
)	O
{	O
if	O
(	O
r	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
)	O
r	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
->	O
start	*(struct(long,long))
=	O
name	*(char)
;	O
}	O
else	O
if	O
(	O
c	*(void)
==	O
')'	O
)	O
{	O
if	O
(	O
r	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
)	O
r	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
->	O
end	*(long)
=	O
name	*(char)
;	O
}	O
else	O
{	O
if	O
(	O
*	O
name	*(char)
!=	O
c	*(void)
)	O
return	O
WILD_FALSE	int
;	O
name	*(char)
++	O
;	O
}	O
break	O
;	O
case	O
'['	O
:	O
if	O
(	O
!	O
match_char_class	(*(*(char)),char)->(int)
(	O
&	O
expr	*(char)
,	O
*	O
name	*(char)
)	O
)	O
return	O
WILD_FALSE	int
;	O
name	*(char)
++	O
;	O
break	O
;	O
default	O
:	O
def	int
:	O
if	O
(	O
*	O
expr	*(char)
!=	O
*	O
name	*(char)
)	O
return	O
WILD_FALSE	int
;	O
expr	*(char)
++	O
;	O
name	*(char)
++	O
;	O
}	O
}	O
return	O
*	O
name	*(char)
==	O
0	int
;	O
}	O
int	O
wild_match	(*(char),*(char),*(char))->(int)
(	O
char	O
*	O
expr	*(char)
,	O
char	O
*	O
name	*(char)
,	O
char	O
*	O
return_name	*(char)
)	O
{	O
int	O
rc	int
;	O
struct	O
wild_match_range	struct(*(char),*(char))
range	struct(*(char),*(char))
;	O
range	struct(*(char),*(char))
.	O
start	*(struct(long,long))
=	O
range	struct(*(char),*(char))
.	O
end	*(long)
=	O
NULL	O
;	O
rc	int
=	O
_wild_match	(*(char),*(char),*(struct(*(char),*(char))))->(int)
(	O
expr	*(char)
,	O
name	*(char)
,	O
&	O
range	struct(*(char),*(char))
)	O
==	O
WILD_TRUE	int
;	O
if	O
(	O
rc	int
)	O
{	O
if	O
(	O
range	struct(*(char),*(char))
.	O
start	*(struct(long,long))
&&	O
range	struct(*(char),*(char))
.	O
end	*(long)
)	O
{	O
int	O
len	int
=	O
range	struct(*(char),*(char))
.	O
end	*(long)
-	O
range	struct(*(char),*(char))
.	O
start	*(struct(long,long))
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
return_name	*(char)
,	O
range	struct(*(char),*(char))
.	O
start	*(struct(long,long))
,	O
len	int
)	O
;	O
}	O
else	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
return_name	*(char)
,	O
name	*(char)
,	O
GRAD_STRING_LENGTH	int
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
matches	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(char),*(struct(*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long))),*(char))->(int)
(	O
radiusd_request_t	struct(*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),*(struct),*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))),int,int,int,int,*(char),array(char),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
char	O
*	O
name	*(char)
,	O
grad_matching_rule_t	struct
*	O
pl	*(*(struct(*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long))))
,	O
char	O
*	O
matchpart	*(char)
)	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
matchpart	*(char)
,	O
name	*(char)
,	O
GRAD_STRING_LENGTH	int
)	O
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
pl	*(*(struct(*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long))))
->	O
name	*(char)
,	O
"DEFAULT"	*(char)
,	O
7	int
)	O
==	O
0	int
||	O
wild_match	(*(char),*(char),*(char))->(int)
(	O
pl	*(*(struct(*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long))))
->	O
name	*(char)
,	O
name	*(char)
,	O
matchpart	*(char)
)	O
)	O
return	O
paircmp	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char))->(int)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
pl	*(*(struct(*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long))))
->	O
lhs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
matchpart	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
static	O
int	O
reload_data	(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(int))->(int)
(	O
enum	O
reload_what	enum(int,int,int,int,int,int,int,int,int,int,int,int)
what	enum(int,int,int,int,int,int,int,int,int,int,int,int)
,	O
int	O
*	O
do_radck	*(int)
)	O
;	O
static	O
int	O
realm_set_secret	(*(struct(*(char),int,array(int),*(char),long)))->(int)
(	O
grad_server_t	struct
*	O
srv	*(struct(*(char),int,array(int),*(char),long))
)	O
{	O
CLIENT	struct(struct(int,int),array(char),*(char),array(char))
*	O
client	struct(struct(int,int),array(char),*(char),array(char))
;	O
if	O
(	O
(	O
client	struct(struct(int,int),array(char),*(char),array(char))
=	O
client_lookup_ip	(int)->(*(struct(struct(int,int),array(char),*(char),array(char))))
(	O
srv	*(struct(*(char),int,array(int),*(char),long))
->	O
addr	int
)	O
)	O
==	O
NULL	O
)	O
return	O
1	int
;	O
srv	*(struct(*(char),int,array(int),*(char),long))
->	O
secret	*(char)
=	O
client	struct(struct(int,int),array(char),*(char),array(char))
->	O
secret	*(char)
;	O
return	O
0	int
;	O
}	O
int	O
reload_data	(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(int))->(int)
(	O
enum	O
reload_what	enum(int,int,int,int,int,int,int,int,int,int,int,int)
what	enum(int,int,int,int,int,int,int,int,int,int,int,int)
,	O
int	O
*	O
do_radck	*(int)
)	O
{	O
char	O
*	O
path	*(char)
;	O
int	O
rc	int
=	O
0	int
;	O
switch	O
(	O
what	enum(int,int,int,int,int,int,int,int,int,int,int,int)
)	O
{	O
case	O
reload_all	int
:	O
rc	int
+=	O
reload_data	(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(int))->(int)
(	O
reload_sql	int
,	O
do_radck	*(int)
)	O
;	O
rc	int
+=	O
reload_data	(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(int))->(int)
(	O
reload_clients	int
,	O
do_radck	*(int)
)	O
;	O
rc	int
+=	O
reload_data	(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(int))->(int)
(	O
reload_naslist	int
,	O
do_radck	*(int)
)	O
;	O
rc	int
+=	O
reload_data	(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(int))->(int)
(	O
reload_realms	int
,	O
do_radck	*(int)
)	O
;	O
rc	int
+=	O
reload_data	(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(int))->(int)
(	O
reload_deny	int
,	O
do_radck	*(int)
)	O
;	O
break	O
;	O
case	O
reload_users	int
:	O
grad_symtab_clear	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))->(void)
(	O
user_tab	*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int))))
)	O
;	O
path	*(char)
=	O
grad_mkfilename	(*(char),*(char))->(*(char))
(	O
grad_config_dir	*(char)
,	O
RADIUS_USERS	*(char)
)	O
;	O
if	O
(	O
read_users	(*(char))->(int)
(	O
path	*(char)
)	O
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_CRIT	int
,	O
_	O
(	O
"can't load %s: exited"	*(char)
)	O
,	O
path	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
else	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_INFO	int
,	O
_	O
(	O
"%s reloaded."	*(char)
)	O
,	O
path	*(char)
)	O
;	O
*	O
do_radck	*(int)
=	O
1	int
;	O
grad_free	(*(void))->(void)
(	O
path	*(char)
)	O
;	O
break	O
;	O
case	O
reload_dict	int
:	O
if	O
(	O
grad_dict_init	()->(int)
(	O
)	O
)	O
rc	int
=	O
1	int
;	O
rc	int
+=	O
reload_data	(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(int))->(int)
(	O
reload_rewrite	int
,	O
do_radck	*(int)
)	O
;	O
break	O
;	O
case	O
reload_huntgroups	int
:	O
grad_list_destroy	(*(*(struct)),*((*(void),*(void))->(int)),*(void))->(void)
(	O
&	O
huntgroups	*(struct)
,	O
matching_rule_free	(*(void),*(void))->(int)
,	O
NULL	O
)	O
;	O
path	*(char)
=	O
grad_mkfilename	(*(char),*(char))->(*(char))
(	O
grad_config_dir	*(char)
,	O
RADIUS_HUNTGROUPS	*(char)
)	O
;	O
huntgroups	*(struct)
=	O
file_read	(int,*(char))->(*(struct))
(	O
GRAD_CF_HUNTGROUPS	int
,	O
path	*(char)
)	O
;	O
grad_free	(*(void))->(void)
(	O
path	*(char)
)	O
;	O
break	O
;	O
case	O
reload_hints	int
:	O
grad_list_destroy	(*(*(struct)),*((*(void),*(void))->(int)),*(void))->(void)
(	O
&	O
hints	*(struct)
,	O
matching_rule_free	(*(void),*(void))->(int)
,	O
NULL	O
)	O
;	O
path	*(char)
=	O
grad_mkfilename	(*(char),*(char))->(*(char))
(	O
grad_config_dir	*(char)
,	O
RADIUS_HINTS	*(char)
)	O
;	O
hints	*(struct)
=	O
file_read	(int,*(char))->(*(struct))
(	O
GRAD_CF_HINTS	int
,	O
path	*(char)
)	O
;	O
grad_free	(*(void))->(void)
(	O
path	*(char)
)	O
;	O
if	O
(	O
!	O
use_dbm	int
)	O
*	O
do_radck	*(int)
=	O
1	int
;	O
break	O
;	O
case	O
reload_clients	int
:	O
path	*(char)
=	O
grad_mkfilename	(*(char),*(char))->(*(char))
(	O
grad_config_dir	*(char)
,	O
RADIUS_CLIENTS	*(char)
)	O
;	O
if	O
(	O
read_clients_file	(*(char))->(int)
(	O
path	*(char)
)	O
<	O
0	int
)	O
rc	int
=	O
1	int
;	O
grad_free	(*(void))->(void)
(	O
path	*(char)
)	O
;	O
break	O
;	O
case	O
reload_naslist	int
:	O
path	*(char)
=	O
grad_mkfilename	(*(char),*(char))->(*(char))
(	O
grad_config_dir	*(char)
,	O
RADIUS_NASTYPES	*(char)
)	O
;	O
read_nastypes_file	(*(char))->(int)
(	O
path	*(char)
)	O
;	O
grad_free	(*(void))->(void)
(	O
path	*(char)
)	O
;	O
path	*(char)
=	O
grad_mkfilename	(*(char),*(char))->(*(char))
(	O
grad_config_dir	*(char)
,	O
RADIUS_NASLIST	*(char)
)	O
;	O
if	O
(	O
read_naslist_file	(*(char))->(int)
(	O
path	*(char)
)	O
<	O
0	int
)	O
rc	int
=	O
1	int
;	O
grad_free	(*(void))->(void)
(	O
path	*(char)
)	O
;	O
break	O
;	O
case	O
reload_realms	int
:	O
path	*(char)
=	O
grad_mkfilename	(*(char),*(char))->(*(char))
(	O
grad_config_dir	*(char)
,	O
RADIUS_REALMS	*(char)
)	O
;	O
if	O
(	O
grad_read_realms	(*(char),int,int,*(()->(int)))->(int)
(	O
path	*(char)
,	O
auth_port	int
,	O
acct_port	int
,	O
realm_set_secret	(*(struct(*(char),int,array(int),*(char),long)))->(int)
)	O
<	O
0	int
)	O
rc	int
=	O
1	int
;	O
grad_free	(*(void))->(void)
(	O
path	*(char)
)	O
;	O
break	O
;	O
case	O
reload_deny	int
:	O
read_deny_file	()->(void)
(	O
)	O
;	O
break	O
;	O
case	O
reload_sql	int
:	O
if	O
(	O
radiusd_sql_config	int
(	O
)	O
!=	O
0	int
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_CRIT	int
,	O
_	O
(	O
"SQL Error: SQL client could not be initialized"	*(char)
)	O
)	O
;	O
rc	int
=	O
1	int
;	O
}	O
rc	int
+=	O
reload_data	(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(int))->(int)
(	O
reload_dict	int
,	O
do_radck	*(int)
)	O
;	O
break	O
;	O
case	O
reload_rewrite	int
:	O
rewrite_load_all	()->(int)
(	O
)	O
;	O
rc	int
+=	O
reload_data	(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(int))->(int)
(	O
reload_users	int
,	O
do_radck	*(int)
)	O
;	O
rc	int
+=	O
reload_data	(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(int))->(int)
(	O
reload_huntgroups	int
,	O
do_radck	*(int)
)	O
;	O
rc	int
+=	O
reload_data	(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(int))->(int)
(	O
reload_hints	int
,	O
do_radck	*(int)
)	O
;	O
break	O
;	O
default	O
:	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_CRIT	int
,	O
_	O
(	O
"INTERNAL ERROR: unknown reload code: %d"	*(char)
)	O
,	O
what	enum(int,int,int,int,int,int,int,int,int,int,int,int)
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
reload_config_file	(enum(int,int,int,int,int,int,int,int,int,int,int,int))->(int)
(	O
enum	O
reload_what	enum(int,int,int,int,int,int,int,int,int,int,int,int)
what	enum(int,int,int,int,int,int,int,int,int,int,int,int)
)	O
{	O
int	O
do_radck	*(int)
;	O
int	O
rc	int
;	O
rc	int
=	O
reload_data	(enum(int,int,int,int,int,int,int,int,int,int,int,int),*(int))->(int)
(	O
what	enum(int,int,int,int,int,int,int,int,int,int,int,int)
,	O
&	O
do_radck	*(int)
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
&&	O
do_radck	*(int)
)	O
radck	()->(void)
(	O
)	O
;	O
return	O
rc	int
;	O
}	O
void	O
dump_matching_rules	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),*(struct))->(void)
(	O
FILE	struct
*	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
,	O
char	O
*	O
header	*(char)
,	O
grad_list_t	struct
*	O
list	*(*(struct))
)	O
{	O
grad_matching_rule_t	struct
*	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
;	O
grad_iterator_t	struct
*	O
itr	*((*(void),*(void))->(int))
=	O
grad_iterator_create	(*(struct))->(*(struct))
(	O
list	*(*(struct))
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
,	O
"%s {\n"	*(char)
,	O
header	*(char)
)	O
;	O
for	O
(	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
=	O
grad_iterator_first	(*(struct))->(*(void))
(	O
itr	*((*(void),*(void))->(int))
)	O
;	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
;	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
=	O
grad_iterator_next	(*(struct))->(*(void))
(	O
itr	*((*(void),*(void))->(int))
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
,	O
"\t%s:\n"	*(char)
,	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
->	O
name	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
,	O
"\tlhs {\n"	*(char)
)	O
;	O
grad_avl_fprint	()->(int)
(	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
,	O
"\t\t"	*(char)
,	O
1	int
,	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
->	O
lhs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
,	O
"\t}\n"	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
,	O
"\trhs {\n"	*(char)
)	O
;	O
grad_avl_fprint	()->(int)
(	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
,	O
"\t\t"	*(char)
,	O
1	int
,	O
rule	*(struct(*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long)))
->	O
rhs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
,	O
"\t}\n"	*(char)
)	O
;	O
}	O
grad_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
itr	*((*(void),*(void))->(int))
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
,	O
"}\n"	*(char)
)	O
;	O
}	O
int	O
dump_user	(*(void),*(struct(*(struct(*`,*`)),*(char))))->(int)
(	O
void	O
*	O
data	*(void)
,	O
grad_symbol_t	struct
*	O
symbol	struct(*(struct(*(struct(*(struct`),*(char))),*(char))),*(char))
)	O
{	O
FILE	struct
*	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
=	O
data	*(void)
;	O
User_symbol	struct(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),struct(*(char),long),int)
*	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
=	O
(	O
User_symbol	struct(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),struct(*(char),long),int)
*	O
)	O
symbol	struct(*(struct(*(struct(*(struct`),*(char))),*(char))),*(char))
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
,	O
"\t%s:\n"	*(char)
,	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
name	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
,	O
"\tlhs {\n"	*(char)
)	O
;	O
grad_avl_fprint	()->(int)
(	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
,	O
"\t\t"	*(char)
,	O
1	int
,	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
check	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
,	O
"\t}\n"	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
,	O
"\trhs {\n"	*(char)
)	O
;	O
grad_avl_fprint	()->(int)
(	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
,	O
"\t\t"	*(char)
,	O
1	int
,	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
reply	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
,	O
"\t}\n"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
void	O
dump_users_db	()->(void)
(	O
)	O
{	O
FILE	struct
*	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
;	O
char	O
*	O
name	*(char)
=	O
grad_mkfilename	(*(char),*(char))->(*(char))
(	O
grad_log_dir	*(char)
,	O
RADIUS_DUMPDB_NAME	*(char)
)	O
;	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
name	*(char)
,	O
"w"	*(char)
)	O
;	O
if	O
(	O
!	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
_	O
(	O
"can't create parser output file `%s'"	*(char)
)	O
,	O
RADIUS_DUMPDB_NAME	*(char)
)	O
;	O
grad_free	(*(void))->(void)
(	O
name	*(char)
)	O
;	O
return	O
;	O
}	O
fchmod	(int,int)->(int)
(	O
fileno	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
)	O
,	O
S_IRUSR	O
|	O
S_IWUSR	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
,	O
"%s {\n"	*(char)
,	O
"users"	*(char)
)	O
;	O
grad_symtab_iterate	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))),*((*(void),*(struct(*`,*`)))->(int)),*(void))->(void)
(	O
user_tab	*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int))))
,	O
dump_user	(*(void),*(struct(*(struct(*`,*`)),*(char))))->(int)
,	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
,	O
"}\n"	*(char)
)	O
;	O
dump_matching_rules	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),*(struct))->(void)
(	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
,	O
"huntgroups"	*(char)
,	O
huntgroups	*(struct)
)	O
;	O
dump_matching_rules	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),*(struct))->(void)
(	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
,	O
"hints"	*(char)
,	O
hints	*(struct)
)	O
;	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_INFO	int
,	O
_	O
(	O
"dumped users database to %s"	*(char)
)	O
,	O
RADIUS_DUMPDB_NAME	*(char)
)	O
;	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
)	O
;	O
grad_free	(*(void))->(void)
(	O
name	*(char)
)	O
;	O
}	O
void	O
strip_username	(int,*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char))->(void)
(	O
int	O
do_strip	int
,	O
char	O
*	O
name	*(char)
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
check_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
char	O
*	O
stripped_name	*(char)
)	O
{	O
char	O
tmpname	array(char)
[	O
GRAD_STRING_LENGTH	int
]	O
;	O
char	O
*	O
source_ptr	*(char)
=	O
name	*(char)
;	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
presuf_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
*	O
tmp	struct(int,*(struct))
;	O
if	O
(	O
(	O
presuf_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
grad_avl_find	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int)->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
check_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
DA_PREFIX	int
)	O
)	O
==	O
NULL	O
)	O
presuf_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
grad_avl_find	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int)->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
check_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
DA_SUFFIX	int
)	O
;	O
if	O
(	O
presuf_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
{	O
if	O
(	O
tmp	struct(int,*(struct))
=	O
grad_avl_find	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int)->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
check_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
DA_STRIP_USER_NAME	int
)	O
)	O
do_strip	int
=	O
tmp	struct(int,*(struct))
->	O
avp_lvalue	O
;	O
if	O
(	O
do_strip	int
)	O
{	O
if	O
(	O
presufcmp	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),*(char))->(int)
(	O
presuf_item	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
name	*(char)
,	O
tmpname	array(char)
)	O
==	O
0	int
)	O
source_ptr	*(char)
=	O
tmpname	array(char)
;	O
}	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
stripped_name	*(char)
,	O
source_ptr	*(char)
)	O
;	O
}	O
