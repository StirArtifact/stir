static	O
double	O
by0_data	array(double)
[	O
13	int
]	O
=	O
{	O
-	O
0.011277839392865573	int
,	O
-	O
0.128345237560420350	int
,	O
-	O
0.104378847997942490	int
,	O
0.023662749183969695	int
,	O
-	O
0.002090391647700486	int
,	O
0.000103975453939057	int
,	O
-	O
0.000003369747162423	int
,	O
0.000000077293842676	int
,	O
-	O
0.000000001324976772	int
,	O
0.000000000017648232	int
,	O
-	O
0.000000000000188105	int
,	O
0.000000000000001641	int
,	O
-	O
0.000000000000000011	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
by0_cs	struct(*(double),int,double,double,int)
=	O
{	O
by0_data	array(double)
,	O
12	int
,	O
-	O
1	int
,	O
1	int
,	O
8	int
}	O
;	O
int	O
gsl_sf_bessel_Y0_e	(double,*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
const	O
double	O
two_over_pi	double
=	O
2.0	int
/	O
M_PI	int
;	O
const	O
double	O
xmax	double
=	O
1.0	int
/	O
GSL_DBL_EPSILON	int
;	O
if	O
(	O
x	double
<=	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
4.0	int
)	O
{	O
gsl_sf_result	struct(double,double)
J0	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
c	*(double)
;	O
int	O
stat_J0	int
=	O
gsl_sf_bessel_J0_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
J0	struct(double,double)
)	O
;	O
cheb_eval_e	(*(struct(*(double),int,double,double,int)),double,*(struct(double,double)))->(int)
(	O
&	O
by0_cs	struct(*(double),int,double,double,int)
,	O
0.125	int
*	O
x	double
*	O
x	double
-	O
1.0	int
,	O
&	O
c	*(double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
two_over_pi	double
*	O
(	O
-	O
M_LN2	int
+	O
log	(double)->(double)
(	O
x	double
)	O
)	O
*	O
J0	struct(double,double)
.	O
val	double
+	O
0.375	int
+	O
c	*(double)
.	O
val	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
+	O
c	*(double)
.	O
err	double
;	O
return	O
stat_J0	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
xmax	double
)	O
{	O
const	O
double	O
z	double
=	O
32.0	int
/	O
(	O
x	double
*	O
x	double
)	O
-	O
1.0	int
;	O
gsl_sf_result	struct(double,double)
c1	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
c2	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
sp	struct(double,double)
;	O
const	O
int	O
stat_c1	int
=	O
cheb_eval_e	(*(struct(*(double),int,double,double,int)),double,*(struct(double,double)))->(int)
(	O
&	O
_gsl_sf_bessel_amp_phase_bm0_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
&	O
c1	struct(double,double)
)	O
;	O
const	O
int	O
stat_c2	int
=	O
cheb_eval_e	(*(struct(*(double),int,double,double,int)),double,*(struct(double,double)))->(int)
(	O
&	O
_gsl_sf_bessel_amp_phase_bth0_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
&	O
c2	struct(double,double)
)	O
;	O
const	O
int	O
stat_sp	int
=	O
gsl_sf_bessel_sin_pi4_e	(double,double,*(struct(double,double)))->(int)
(	O
x	double
,	O
c2	struct(double,double)
.	O
val	double
/	O
x	double
,	O
&	O
sp	struct(double,double)
)	O
;	O
const	O
double	O
sqrtx	double
=	O
sqrt	(double)->(double)
(	O
x	double
)	O
;	O
const	O
double	O
ampl	double
=	O
(	O
0.75	int
+	O
c1	struct(double,double)
.	O
val	double
)	O
/	O
sqrtx	double
;	O
result	*(struct(double,double))
->	O
val	double
=	O
ampl	double
*	O
sp	struct(double,double)
.	O
val	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
fabs	(double)->(double)
(	O
sp	struct(double,double)
.	O
val	double
)	O
*	O
c1	struct(double,double)
.	O
err	double
/	O
sqrtx	double
+	O
fabs	(double)->(double)
(	O
ampl	double
)	O
*	O
sp	struct(double,double)
.	O
err	double
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_3	O
(	O
stat_sp	int
,	O
stat_c1	int
,	O
stat_c2	int
)	O
;	O
}	O
else	O
{	O
UNDERFLOW_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
}	O
double	O
gsl_sf_bessel_Y0	(double)->(double)
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_bessel_Y0_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
