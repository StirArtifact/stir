void	O
mu_message_ref	(*(struct))->(void)
(	O
mu_message_t	*(struct)
msg	*(struct)
)	O
{	O
if	O
(	O
msg	*(struct)
)	O
{	O
mu_monitor_wrlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
msg	*(struct)
->	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
msg	*(struct)
->	O
ref_count	int
++	O
;	O
mu_monitor_unlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
msg	*(struct)
->	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
}	O
}	O
static	O
void	O
_mu_message_free	(*(struct(int,*(void),*(struct),*(struct),*(struct),int,*(struct),*(struct),*(struct),*(struct(*`,*`,int,int)),*(struct),*(struct),*(struct),long,*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)))))->(void)
(	O
mu_message_t	*(struct)
msg	*(struct)
)	O
{	O
if	O
(	O
msg	*(struct)
->	O
observable	*(struct)
)	O
{	O
mu_observable_notify	(*(struct),int,*(void))->(int)
(	O
msg	*(struct)
->	O
observable	*(struct)
,	O
MU_EVT_MESSAGE_DESTROY	int
,	O
msg	*(struct)
)	O
;	O
mu_observable_destroy	(*(*(struct)),*(void))->(void)
(	O
&	O
msg	*(struct)
->	O
observable	*(struct)
,	O
msg	*(struct)
)	O
;	O
}	O
mu_envelope_destroy	(*(*(struct)),*(void))->(void)
(	O
&	O
msg	*(struct)
->	O
envelope	*(struct)
,	O
msg	*(struct)
)	O
;	O
mu_header_destroy	(*(*(struct)))->(void)
(	O
&	O
msg	*(struct)
->	O
header	*(struct)
)	O
;	O
mu_body_destroy	(*(*(struct)),*(void))->(void)
(	O
&	O
msg	*(struct)
->	O
body	*(struct)
,	O
msg	*(struct)
)	O
;	O
mu_attribute_destroy	(*(*(struct)),*(void))->(void)
(	O
&	O
msg	*(struct)
->	O
attribute	*(struct)
,	O
msg	*(struct)
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
msg	*(struct)
->	O
rawstream	*(struct)
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
msg	*(struct)
->	O
outstream	*(struct)
)	O
;	O
mu_mime_destroy	(*(*(struct)))->(void)
(	O
&	O
msg	*(struct)
->	O
mime	*(struct)
)	O
;	O
msg	*(struct)
->	O
owner	*(void)
=	O
NULL	O
;	O
free	(*(void))->(void)
(	O
msg	*(struct)
)	O
;	O
}	O
void	O
mu_message_unref	(*(struct))->(void)
(	O
mu_message_t	*(struct)
msg	*(struct)
)	O
{	O
if	O
(	O
msg	*(struct)
)	O
{	O
mu_monitor_t	*(struct(*(void),*(void),int,int))
monitor	*(struct(*(void),*(void),int,int))
=	O
msg	*(struct)
->	O
monitor	*(struct(*(void),*(void),int,int))
;	O
mu_monitor_wrlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
if	O
(	O
msg	*(struct)
->	O
ref_count	int
>	O
0	int
)	O
msg	*(struct)
->	O
ref_count	int
--	O
;	O
if	O
(	O
msg	*(struct)
->	O
ref_count	int
==	O
0	int
)	O
{	O
_mu_message_free	(*(struct(int,*(void),*(struct),*(struct),*(struct),int,*(struct),*(struct),*(struct),*(struct(*`,*`,int,int)),*(struct),*(struct),*(struct),long,*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)))))->(void)
(	O
msg	*(struct)
)	O
;	O
mu_monitor_unlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
mu_monitor_destroy	(*(*(struct(*(void),*(void),int,int))),*(void))->(void)
(	O
&	O
monitor	*(struct(*(void),*(void),int,int))
,	O
msg	*(struct)
)	O
;	O
}	O
else	O
mu_monitor_unlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
}	O
}	O
void	O
mu_message_destroy	(*(*(struct)),*(void))->(void)
(	O
mu_message_t	*(struct)
*	O
pmsg	*(*(struct))
,	O
void	O
*	O
owner	*(void)
)	O
{	O
if	O
(	O
pmsg	*(*(struct))
&&	O
*	O
pmsg	*(*(struct))
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
=	O
*	O
pmsg	*(*(struct))
;	O
mu_monitor_t	*(struct(*(void),*(void),int,int))
monitor	*(struct(*(void),*(void),int,int))
=	O
msg	*(struct)
->	O
monitor	*(struct(*(void),*(void),int,int))
;	O
mu_monitor_wrlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
if	O
(	O
msg	*(struct)
->	O
owner	*(void)
&&	O
msg	*(struct)
->	O
owner	*(void)
==	O
owner	*(void)
)	O
{	O
_mu_message_free	(*(struct(int,*(void),*(struct),*(struct),*(struct),int,*(struct),*(struct),*(struct),*(struct(*`,*`,int,int)),*(struct),*(struct),*(struct),long,*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)))))->(void)
(	O
msg	*(struct)
)	O
;	O
mu_monitor_unlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
mu_monitor_destroy	(*(*(struct(*(void),*(void),int,int))),*(void))->(void)
(	O
&	O
monitor	*(struct(*(void),*(void),int,int))
,	O
msg	*(struct)
)	O
;	O
*	O
pmsg	*(*(struct))
=	O
NULL	O
;	O
return	O
;	O
}	O
mu_monitor_unlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
}	O
}	O
