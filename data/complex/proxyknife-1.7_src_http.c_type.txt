int	O
CONVIAHTTP	(int,*(struct(long,long)),*(struct(long,long)),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(int)
(	O
int	O
sockfd	int
,	O
struct	O
timeval	struct(long,long)
*	O
start	*(struct(long,long))
,	O
struct	O
timeval	struct(long,long)
*	O
end	*(struct(long,long))
,	O
struct	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
*	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
;	O
int	O
GET	(int,*(struct(long,long)),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(int)
(	O
int	O
sockfd	int
,	O
struct	O
timeval	struct(long,long)
*	O
req	*(char)
,	O
struct	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
*	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
;	O
int	O
PGET	(int,*(struct(long,long)),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(int)
(	O
int	O
sockfd	int
,	O
struct	O
timeval	struct(long,long)
*	O
send	(int,*(void),long,int)->(long)
,	O
struct	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
*	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
;	O
int	O
PCONGET	(int,*(struct(long,long)),*(struct(long,long)),*(struct(long,long)),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(int)
(	O
int	O
sockfd	int
,	O
struct	O
timeval	struct(long,long)
*	O
start	*(struct(long,long))
,	O
struct	O
timeval	struct(long,long)
*	O
end	*(struct(long,long))
,	O
struct	O
timeval	struct(long,long)
*	O
req	*(char)
,	O
struct	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
*	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
;	O
void	O
http_build_auth	()->(void)
(	O
void	O
)	O
;	O
void	O
http_build_auth	()->(void)
(	O
)	O
{	O
int	O
blen	int
,	O
dlen	int
,	O
slen	int
,	O
elen	int
;	O
blen	int
=	O
strlen	(*(char))->(long)
(	O
BASIC	*(char)
)	O
;	O
slen	int
=	O
strlen	(*(char))->(long)
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
myuser	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
mypass	*(char)
)	O
+	O
1	int
;	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
myuserpass	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
slen	int
+	O
1	int
)	O
;	O
snprintf	(*(char),long,*(char))->(int)
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
myuserpass	*(char)
,	O
slen	int
+	O
1	int
,	O
"%s:%s"	*(char)
,	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
myuser	*(char)
,	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
mypass	*(char)
)	O
;	O
elen	int
=	O
slen	int
/	O
3	int
*	O
4	int
+	O
(	O
(	O
slen	int
%	O
3	int
)	O
?	O
4	int
:	O
0	int
)	O
;	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
header_auth	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
blen	int
+	O
elen	int
+	O
1	int
)	O
;	O
memmove	(*(void),*(void),long)->(*(void))
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
header_auth	*(char)
,	O
BASIC	*(char)
,	O
blen	int
)	O
;	O
dlen	int
=	O
base64en	(*(char),int,*(char),int)->(int)
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
header_auth	*(char)
+	O
blen	int
,	O
elen	int
,	O
(	O
unsigned	O
char	O
*	O
)	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
myuserpass	*(char)
,	O
slen	int
)	O
;	O
xfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
)	O
&	O
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
myuserpass	*(char)
)	O
)	O
;	O
xfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
)	O
&	O
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
myuser	*(char)
)	O
)	O
;	O
xfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
)	O
&	O
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
mypass	*(char)
)	O
)	O
;	O
if	O
(	O
dlen	int
==	O
-	O
1	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: http_build_auth:Error in base64encode\n"	*(char)
,	O
progname	*(char)
)	O
;	O
xexit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
dlen	int
!=	O
elen	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: http_build_auth:base64en:This error is impossible,good news!\n"	*(char)
,	O
progname	*(char)
)	O
;	O
abort	()->(void)
(	O
)	O
;	O
}	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
header_auth	*(char)
[	O
blen	int
+	O
dlen	int
]	O
=	O
'\0'	O
;	O
}	O
int	O
CONVIAHTTP_MAIN	(int,*(char),*(char))->(int)
(	O
int	O
sockfd	int
,	O
char	O
*	O
host	*(char)
,	O
char	O
*	O
port	*(char)
)	O
{	O
int	O
ret	int
,	O
len	int
,	O
offset	long
;	O
char	O
*	O
p	*(*(void))
;	O
ret	int
=	O
connect	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(int)
(	O
sockfd	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
myaddr	struct(short,short,struct(int),array(char))
)	O
,	O
sizeof	O
(	O
struct	O
sockaddr	struct(short,array(char))
)	O
)	O
;	O
if	O
(	O
ret	int
==	O
-	O
1	int
)	O
{	O
perror	(*(char))->(void)
(	O
"CONVIAHTTP:connect:Connect to myaddr"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
mytype	int
==	O
HTTP_CONNECT_AUTH	int
)	O
{	O
len	int
=	O
strlen	(*(char))->(long)
(	O
"CONNECT  HTTP/1.0"	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
host	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
":"	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
port	*(char)
)	O
+	O
2	int
+	O
strlen	(*(char))->(long)
(	O
user_agent	*(char)
)	O
+	O
2	int
+	O
strlen	(*(char))->(long)
(	O
NOCACHE	*(char)
)	O
+	O
2	int
+	O
strlen	(*(char))->(long)
(	O
(	O
const	O
char	O
*	O
)	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
header_auth	*(char)
)	O
+	O
2	int
+	O
2	int
;	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
buffer	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
len	int
+	O
1	int
)	O
;	O
if	O
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
buffer	*(char)
==	O
NULL	O
)	O
{	O
xexit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
snprintf	(*(char),long,*(char))->(int)
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
buffer	*(char)
,	O
len	int
+	O
1	int
,	O
"CONNECT %s:%s HTTP/1.0\r\n"	*(char)
"%s\r\n"	*(char)
"%s\r\n"	*(char)
"%s\r\n"	*(char)
"\r\n"	*(char)
,	O
host	*(char)
,	O
port	*(char)
,	O
user_agent	*(char)
,	O
NOCACHE	*(char)
,	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
header_auth	*(char)
)	O
;	O
}	O
else	O
{	O
len	int
=	O
strlen	(*(char))->(long)
(	O
"CONNECT  HTTP/1.0"	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
host	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
":"	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
port	*(char)
)	O
+	O
2	int
+	O
strlen	(*(char))->(long)
(	O
user_agent	*(char)
)	O
+	O
2	int
+	O
strlen	(*(char))->(long)
(	O
NOCACHE	*(char)
)	O
+	O
2	int
+	O
2	int
;	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
buffer	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
len	int
+	O
1	int
)	O
;	O
if	O
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
buffer	*(char)
==	O
NULL	O
)	O
{	O
xexit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
snprintf	(*(char),long,*(char))->(int)
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
buffer	*(char)
,	O
len	int
+	O
1	int
,	O
"CONNECT %s:%s HTTP/1.0\r\n"	*(char)
"%s\r\n"	*(char)
"%s\r\n"	*(char)
"\r\n"	*(char)
,	O
host	*(char)
,	O
port	*(char)
,	O
user_agent	*(char)
,	O
NOCACHE	*(char)
)	O
;	O
}	O
*	O
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
buffer	*(char)
+	O
len	int
)	O
=	O
'\0'	O
;	O
ret	int
=	O
write	*((*(void),*(char),long)->(long))
(	O
sockfd	int
,	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
buffer	*(char)
,	O
strlen	(*(char))->(long)
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
buffer	*(char)
)	O
)	O
;	O
if	O
(	O
ret	int
!=	O
strlen	(*(char))->(long)
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
buffer	*(char)
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: CONVIAHTTP:Fail to write completely\n"	*(char)
,	O
progname	*(char)
)	O
;	O
if	O
(	O
ret	int
==	O
-	O
1	int
)	O
perror	(*(char))->(void)
(	O
"CONVIAHTTP:write:Write to myaddr"	*(char)
)	O
;	O
xfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
*	O
)	O
&	O
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
buffer	*(char)
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
xfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
*	O
)	O
&	O
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
buffer	*(char)
)	O
)	O
;	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
buffer	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
myconreplysize	int
)	O
;	O
if	O
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
buffer	*(char)
==	O
NULL	O
)	O
{	O
xexit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
memset	(*(void),int,long)->(*(void))
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
buffer	*(char)
,	O
0	int
,	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
myconreplysize	int
)	O
;	O
p	*(*(void))
=	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
buffer	*(char)
;	O
offset	long
=	O
0	int
;	O
while	O
(	O
1	int
)	O
{	O
ret	int
=	O
read	*((*(void),*(char),long)->(long))
(	O
sockfd	int
,	O
p	*(*(void))
,	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
myconreplysize	int
-	O
offset	long
-	O
1	int
)	O
;	O
if	O
(	O
ret	int
<=	O
0	int
)	O
{	O
break	O
;	O
}	O
if	O
(	O
(	O
strstr	(*(char),*(char))->(*(char))
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
buffer	*(char)
,	O
CONNECT_SUCCESS0	*(char)
)	O
!=	O
NULL	O
)	O
||	O
(	O
strstr	(*(char),*(char))->(*(char))
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
buffer	*(char)
,	O
CONNECT_SUCCESS1	*(char)
)	O
!=	O
NULL	O
)	O
)	O
{	O
pxfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
*	O
)	O
&	O
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
buffer	*(char)
)	O
)	O
;	O
return	O
0	int
;	O
}	O
p	*(*(void))
+=	O
ret	int
;	O
offset	long
=	O
p	*(*(void))
-	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
buffer	*(char)
;	O
if	O
(	O
(	O
offset	long
)	O
>=	O
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
myconreplysize	int
-	O
1	int
)	O
)	O
;	O
break	O
;	O
}	O
if	O
(	O
debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: CONVIAHTTP:Reply to CONVIAHTTP is wrong:%s\n"	*(char)
,	O
progname	*(char)
,	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
buffer	*(char)
)	O
;	O
pxfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
*	O
)	O
&	O
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
buffer	*(char)
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
void	O
build_req_get_via_http_proxy	()->(void)
(	O
)	O
{	O
int	O
len	int
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
"GET  HTTP/1.0"	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
)	O
+	O
2	int
+	O
strlen	(*(char))->(long)
(	O
"Host: "	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
targethost	*(char)
)	O
+	O
2	int
+	O
strlen	(*(char))->(long)
(	O
user_agent	*(char)
)	O
+	O
2	int
+	O
strlen	(*(char))->(long)
(	O
NOCACHE	*(char)
)	O
+	O
2	int
+	O
2	int
;	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
req_get_via_http_proxy	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
len	int
+	O
1	int
)	O
;	O
snprintf	(*(char),long,*(char))->(int)
(	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
req_get_via_http_proxy	*(char)
,	O
len	int
+	O
1	int
,	O
"GET %s HTTP/1.0\r\n"	*(char)
"Host: %s\r\n"	*(char)
"%s\r\n%s\r\n"	*(char)
"\r\n"	*(char)
,	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
,	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
targethost	*(char)
,	O
user_agent	*(char)
,	O
NOCACHE	*(char)
)	O
;	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
req_get_via_http_proxy	*(char)
[	O
len	int
]	O
=	O
'\0'	O
;	O
}	O
void	O
build_con_via_http_proxy	()->(void)
(	O
)	O
{	O
int	O
len	int
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
"CONNECT : HTTP/1.0"	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
targethost	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
targetport	*(char)
)	O
+	O
2	int
+	O
strlen	(*(char))->(long)
(	O
"Host: "	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
targethost	*(char)
)	O
+	O
2	int
+	O
strlen	(*(char))->(long)
(	O
user_agent	*(char)
)	O
+	O
2	int
+	O
strlen	(*(char))->(long)
(	O
NOCACHE	*(char)
)	O
+	O
2	int
+	O
2	int
;	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
con_via_http_proxy	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
len	int
+	O
1	int
)	O
;	O
snprintf	(*(char),long,*(char))->(int)
(	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
con_via_http_proxy	*(char)
,	O
len	int
+	O
1	int
,	O
"CONNECT %s:%s HTTP/1.0\r\n"	*(char)
"Host: %s\r\n"	*(char)
"%s\r\n%s\r\n"	*(char)
"\r\n"	*(char)
,	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
targethost	*(char)
,	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
targetport	*(char)
,	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
targethost	*(char)
,	O
user_agent	*(char)
,	O
NOCACHE	*(char)
)	O
;	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
con_via_http_proxy	*(char)
[	O
len	int
]	O
=	O
'\0'	O
;	O
}	O
void	O
http_build_get	()->(void)
(	O
)	O
{	O
int	O
len	int
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
"GET  HTTP/1.0"	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
targetpath	*(char)
)	O
+	O
2	int
+	O
strlen	(*(char))->(long)
(	O
"Host: "	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
targethost	*(char)
)	O
+	O
2	int
+	O
strlen	(*(char))->(long)
(	O
user_agent	*(char)
)	O
+	O
2	int
+	O
strlen	(*(char))->(long)
(	O
NOCACHE	*(char)
)	O
+	O
2	int
+	O
2	int
;	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
req	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
len	int
+	O
1	int
)	O
;	O
snprintf	(*(char),long,*(char))->(int)
(	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
req	*(char)
,	O
len	int
+	O
1	int
,	O
"GET %s HTTP/1.0\r\n"	*(char)
"Host: %s\r\n"	*(char)
"%s\r\n%s\r\n"	*(char)
"\r\n"	*(char)
,	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
targetpath	*(char)
,	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
targethost	*(char)
,	O
user_agent	*(char)
,	O
NOCACHE	*(char)
)	O
;	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
req	*(char)
[	O
len	int
]	O
=	O
'\0'	O
;	O
}	O
int	O
CONVIAHTTP	(int,*(struct(long,long)),*(struct(long,long)),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(int)
(	O
int	O
sockfd	int
,	O
struct	O
timeval	struct(long,long)
*	O
start	*(struct(long,long))
,	O
struct	O
timeval	struct(long,long)
*	O
end	*(struct(long,long))
,	O
struct	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
*	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
{	O
int	O
ret	int
,	O
len	int
,	O
offset	long
;	O
char	O
*	O
p	*(*(void))
;	O
ret	int
=	O
connect	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(int)
(	O
sockfd	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
myaddr	struct(short,short,struct(int),array(char))
)	O
,	O
sizeof	O
(	O
struct	O
sockaddr	struct(short,array(char))
)	O
)	O
;	O
if	O
(	O
ret	int
==	O
-	O
1	int
)	O
{	O
perror	(*(char))->(void)
(	O
"CONVIAHTTP:connect:Connect to myaddr"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
mytype	int
==	O
HTTP_CONNECT_AUTH	int
)	O
{	O
len	int
=	O
strlen	(*(char))->(long)
(	O
"CONNECT  HTTP/1.0"	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
queue	struct(*(char),struct(short,short,struct(int),array(char)),*(char),int)
.	O
testproxy	*(char)
)	O
+	O
2	int
+	O
strlen	(*(char))->(long)
(	O
user_agent	*(char)
)	O
+	O
2	int
+	O
strlen	(*(char))->(long)
(	O
NOCACHE	*(char)
)	O
+	O
2	int
+	O
strlen	(*(char))->(long)
(	O
(	O
const	O
char	O
*	O
)	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
header_auth	*(char)
)	O
+	O
2	int
+	O
2	int
;	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
request	*(char)
=	O
pmalloc	(long,*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(*(void))
(	O
(	O
len	int
+	O
1	int
)	O
,	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
;	O
if	O
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
request	*(char)
==	O
NULL	O
)	O
{	O
ret	int
=	O
EXIT_FAILURE	int
;	O
x_pthread_exit	(*(void),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(void)
(	O
(	O
void	O
*	O
)	O
&	O
ret	int
,	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
;	O
}	O
snprintf	(*(char),long,*(char))->(int)
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
request	*(char)
,	O
len	int
+	O
1	int
,	O
"CONNECT %s HTTP/1.0\r\n"	*(char)
"%s\r\n"	*(char)
"%s\r\n"	*(char)
"%s\r\n"	*(char)
"\r\n"	*(char)
,	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
queue	struct(*(char),struct(short,short,struct(int),array(char)),*(char),int)
.	O
testproxy	*(char)
,	O
user_agent	*(char)
,	O
NOCACHE	*(char)
,	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
header_auth	*(char)
)	O
;	O
}	O
else	O
{	O
len	int
=	O
strlen	(*(char))->(long)
(	O
"CONNECT  HTTP/1.0"	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
queue	struct(*(char),struct(short,short,struct(int),array(char)),*(char),int)
.	O
testproxy	*(char)
)	O
+	O
2	int
+	O
strlen	(*(char))->(long)
(	O
user_agent	*(char)
)	O
+	O
2	int
+	O
strlen	(*(char))->(long)
(	O
NOCACHE	*(char)
)	O
+	O
2	int
+	O
2	int
;	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
request	*(char)
=	O
pmalloc	(long,*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(*(void))
(	O
(	O
len	int
+	O
1	int
)	O
,	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
;	O
if	O
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
request	*(char)
==	O
NULL	O
)	O
{	O
ret	int
=	O
EXIT_FAILURE	int
;	O
x_pthread_exit	(*(void),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(void)
(	O
(	O
void	O
*	O
)	O
&	O
ret	int
,	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
;	O
}	O
snprintf	(*(char),long,*(char))->(int)
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
request	*(char)
,	O
len	int
+	O
1	int
,	O
"CONNECT %s HTTP/1.0\r\n"	*(char)
"%s\r\n"	*(char)
"%s\r\n"	*(char)
"\r\n"	*(char)
,	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
queue	struct(*(char),struct(short,short,struct(int),array(char)),*(char),int)
.	O
testproxy	*(char)
,	O
user_agent	*(char)
,	O
NOCACHE	*(char)
)	O
;	O
}	O
*	O
(	O
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
request	*(char)
)	O
+	O
len	int
)	O
=	O
'\0'	O
;	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
start	*(struct(long,long))
,	O
NULL	O
)	O
;	O
ret	int
=	O
write	*((*(void),*(char),long)->(long))
(	O
sockfd	int
,	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
request	*(char)
,	O
strlen	(*(char))->(long)
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
request	*(char)
)	O
)	O
;	O
if	O
(	O
ret	int
!=	O
strlen	(*(char))->(long)
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
request	*(char)
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: CONVIAHTTP:Fail to write completely\n"	*(char)
,	O
progname	*(char)
)	O
;	O
if	O
(	O
ret	int
==	O
-	O
1	int
)	O
perror	(*(char))->(void)
(	O
"CONVIAHTTP:write:Write to myaddr"	*(char)
)	O
;	O
pxfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
*	O
)	O
&	O
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
request	*(char)
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
pxfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
*	O
)	O
&	O
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
request	*(char)
)	O
)	O
;	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
=	O
pmalloc	(long,*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(*(void))
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
myconreplysize	int
,	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
;	O
if	O
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
==	O
NULL	O
)	O
{	O
ret	int
=	O
EXIT_FAILURE	int
;	O
x_pthread_exit	(*(void),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(void)
(	O
(	O
void	O
*	O
)	O
&	O
ret	int
,	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
;	O
}	O
memset	(*(void),int,long)->(*(void))
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
,	O
0	int
,	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
myconreplysize	int
)	O
;	O
p	*(*(void))
=	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
;	O
while	O
(	O
1	int
)	O
{	O
offset	long
=	O
p	*(*(void))
-	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
;	O
ret	int
=	O
read	*((*(void),*(char),long)->(long))
(	O
sockfd	int
,	O
p	*(*(void))
,	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
myconreplysize	int
-	O
offset	long
-	O
1	int
)	O
;	O
if	O
(	O
ret	int
<=	O
0	int
)	O
{	O
break	O
;	O
}	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
end	*(struct(long,long))
,	O
NULL	O
)	O
;	O
if	O
(	O
(	O
strstr	(*(char),*(char))->(*(char))
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
,	O
CONNECT_SUCCESS0	*(char)
)	O
!=	O
NULL	O
)	O
||	O
(	O
strstr	(*(char),*(char))->(*(char))
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
,	O
CONNECT_SUCCESS1	*(char)
)	O
!=	O
NULL	O
)	O
)	O
{	O
pxfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
*	O
)	O
&	O
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
)	O
)	O
;	O
return	O
0	int
;	O
}	O
p	*(*(void))
+=	O
ret	int
;	O
if	O
(	O
(	O
p	*(*(void))
-	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
)	O
>=	O
(	O
my	struct(int,*(char),int,int,*(char),*(char),struct(int),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char))
.	O
myconreplysize	int
-	O
1	int
)	O
)	O
break	O
;	O
}	O
if	O
(	O
debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: CONVIAHTTP:Reply to CONVIAHTTP is wrong:%s\n"	*(char)
,	O
progname	*(char)
,	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
)	O
;	O
pxfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
*	O
)	O
&	O
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
int	O
PGET	(int,*(struct(long,long)),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(int)
(	O
int	O
sockfd	int
,	O
struct	O
timeval	struct(long,long)
*	O
send	(int,*(void),long,int)->(long)
,	O
struct	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
*	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
{	O
int	O
numbytes	int
,	O
len	int
;	O
int	O
ret	int
;	O
ret	int
=	O
EXIT_FAILURE	int
;	O
if	O
(	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
checkreqin	*(char)
!=	O
NULL	O
)	O
{	O
len	int
=	O
strlen	(*(char))->(long)
(	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
req	*(char)
)	O
;	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
send	(int,*(void),long,int)->(long)
,	O
NULL	O
)	O
;	O
numbytes	int
=	O
write	*((*(void),*(char),long)->(long))
(	O
sockfd	int
,	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
req	*(char)
,	O
len	int
)	O
;	O
}	O
else	O
{	O
len	int
=	O
strlen	(*(char))->(long)
(	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
req_get_via_http_proxy	*(char)
)	O
;	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
send	(int,*(void),long,int)->(long)
,	O
NULL	O
)	O
;	O
numbytes	int
=	O
write	*((*(void),*(char),long)->(long))
(	O
sockfd	int
,	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
req_get_via_http_proxy	*(char)
,	O
len	int
)	O
;	O
}	O
if	O
(	O
numbytes	int
!=	O
len	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s %s: PGET: Fail to write completely:\n"	*(char)
,	O
progname	*(char)
,	O
__FILE__	O
)	O
;	O
if	O
(	O
numbytes	int
<	O
0	int
)	O
perror	(*(char))->(void)
(	O
"PGET:write:Write to myaddr"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
numbytes	int
;	O
}	O
int	O
GET	(int,*(struct(long,long)),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(int)
(	O
int	O
sockfd	int
,	O
struct	O
timeval	struct(long,long)
*	O
req	*(char)
,	O
struct	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
*	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
{	O
int	O
len	int
,	O
numbytes	int
;	O
int	O
ret	int
;	O
ret	int
=	O
EXIT_FAILURE	int
;	O
if	O
(	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
req	*(char)
!=	O
NULL	O
)	O
{	O
len	int
=	O
strlen	(*(char))->(long)
(	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
req	*(char)
)	O
;	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
req	*(char)
,	O
NULL	O
)	O
;	O
numbytes	int
=	O
write	*((*(void),*(char),long)->(long))
(	O
sockfd	int
,	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
req	*(char)
,	O
len	int
)	O
;	O
}	O
else	O
{	O
len	int
=	O
strlen	(*(char))->(long)
(	O
"GET  HTTP/1.0"	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
targetpath	*(char)
)	O
+	O
2	int
+	O
strlen	(*(char))->(long)
(	O
"Host: "	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
targethost	*(char)
)	O
+	O
2	int
+	O
strlen	(*(char))->(long)
(	O
user_agent	*(char)
)	O
+	O
2	int
+	O
strlen	(*(char))->(long)
(	O
NOCACHE	*(char)
)	O
+	O
2	int
+	O
2	int
;	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
request	*(char)
=	O
pmalloc	(long,*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(*(void))
(	O
len	int
+	O
1	int
,	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
;	O
if	O
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
request	*(char)
==	O
NULL	O
)	O
x_pthread_exit	(*(void),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(void)
(	O
(	O
void	O
*	O
)	O
&	O
ret	int
,	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
;	O
snprintf	(*(char),long,*(char))->(int)
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
request	*(char)
,	O
len	int
+	O
1	int
,	O
"GET %s HTTP/1.0\r\n"	*(char)
"Host: %s\r\n"	*(char)
"%s\r\n%s\r\n"	*(char)
"\r\n"	*(char)
,	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
targetpath	*(char)
,	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
targethost	*(char)
,	O
user_agent	*(char)
,	O
NOCACHE	*(char)
)	O
;	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
req	*(char)
,	O
NULL	O
)	O
;	O
numbytes	int
=	O
write	*((*(void),*(char),long)->(long))
(	O
sockfd	int
,	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
request	*(char)
,	O
len	int
)	O
;	O
pxfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
*	O
)	O
&	O
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
request	*(char)
)	O
)	O
;	O
}	O
if	O
(	O
numbytes	int
!=	O
len	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: GET:Fail to write %d completely!Only %d!\n"	*(char)
,	O
progname	*(char)
,	O
len	int
,	O
numbytes	int
)	O
;	O
if	O
(	O
numbytes	int
<	O
0	int
)	O
perror	(*(char))->(void)
(	O
"GET:write:Write to myaddr"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
numbytes	int
;	O
}	O
int	O
PCONGET	(int,*(struct(long,long)),*(struct(long,long)),*(struct(long,long)),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(int)
(	O
int	O
sockfd	int
,	O
struct	O
timeval	struct(long,long)
*	O
start	*(struct(long,long))
,	O
struct	O
timeval	struct(long,long)
*	O
end	*(struct(long,long))
,	O
struct	O
timeval	struct(long,long)
*	O
req	*(char)
,	O
struct	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
*	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
{	O
int	O
numbytes	int
,	O
len	int
;	O
char	O
*	O
p	*(*(void))
;	O
int	O
ret	int
;	O
ret	int
=	O
EXIT_FAILURE	int
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
"CONNECT : HTTP/1.0"	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
targethost	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
targetport	*(char)
)	O
+	O
2	int
+	O
strlen	(*(char))->(long)
(	O
"Host: "	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
targethost	*(char)
)	O
+	O
2	int
+	O
strlen	(*(char))->(long)
(	O
user_agent	*(char)
)	O
+	O
2	int
+	O
strlen	(*(char))->(long)
(	O
NOCACHE	*(char)
)	O
+	O
2	int
+	O
2	int
;	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
request	*(char)
=	O
pmalloc	(long,*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(*(void))
(	O
len	int
+	O
1	int
,	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
;	O
if	O
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
==	O
NULL	O
)	O
x_pthread_exit	(*(void),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(void)
(	O
(	O
void	O
*	O
)	O
&	O
ret	int
,	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
;	O
snprintf	(*(char),long,*(char))->(int)
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
request	*(char)
,	O
len	int
+	O
1	int
,	O
"CONNECT %s:%s HTTP/1.0\r\n"	*(char)
"Host: %s\r\n"	*(char)
"%s\r\n%s\r\n"	*(char)
"\r\n"	*(char)
,	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
targethost	*(char)
,	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
targetport	*(char)
,	O
target	struct(*(char),*(char),*(char),*(char),*(char),struct(short,short,struct(int),array(char)),*(char),*(char),*(char),*(char),*(char))
.	O
targethost	*(char)
,	O
user_agent	*(char)
,	O
NOCACHE	*(char)
)	O
;	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
request	*(char)
[	O
len	int
]	O
=	O
'\0'	O
;	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
start	*(struct(long,long))
,	O
NULL	O
)	O
;	O
numbytes	int
=	O
write	*((*(void),*(char),long)->(long))
(	O
sockfd	int
,	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
request	*(char)
,	O
strlen	(*(char))->(long)
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
request	*(char)
)	O
)	O
;	O
pxfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
*	O
)	O
&	O
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
request	*(char)
)	O
)	O
;	O
if	O
(	O
numbytes	int
!=	O
len	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: PCONGET:write:Fail to write completely!\n"	*(char)
,	O
progname	*(char)
)	O
;	O
if	O
(	O
numbytes	int
<	O
0	int
)	O
perror	(*(char))->(void)
(	O
"PCONGET:write:Write to myaddr"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
=	O
pmalloc	(long,*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(*(void))
(	O
test	struct(int,int,int,int,int)
.	O
testconreplysize	int
,	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
;	O
if	O
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
==	O
NULL	O
)	O
x_pthread_exit	(*(void),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(void)
(	O
(	O
void	O
*	O
)	O
&	O
ret	int
,	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
,	O
0	int
,	O
test	struct(int,int,int,int,int)
.	O
testconreplysize	int
)	O
;	O
p	*(*(void))
=	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
;	O
while	O
(	O
1	int
)	O
{	O
numbytes	int
=	O
read	*((*(void),*(char),long)->(long))
(	O
sockfd	int
,	O
p	*(*(void))
,	O
test	struct(int,int,int,int,int)
.	O
testconreplysize	int
-	O
(	O
p	*(*(void))
-	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
)	O
-	O
1	int
)	O
;	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
end	*(struct(long,long))
,	O
NULL	O
)	O
;	O
if	O
(	O
numbytes	int
<=	O
0	int
)	O
{	O
if	O
(	O
debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: PCONGET:Reply to concon is wrong:%s\n"	*(char)
,	O
progname	*(char)
,	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
)	O
;	O
pxfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
*	O
)	O
&	O
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
(	O
strstr	(*(char),*(char))->(*(char))
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
,	O
CONNECT_SUCCESS0	*(char)
)	O
!=	O
NULL	O
)	O
||	O
(	O
strstr	(*(char),*(char))->(*(char))
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
,	O
CONNECT_SUCCESS1	*(char)
)	O
!=	O
NULL	O
)	O
)	O
break	O
;	O
p	*(*(void))
+=	O
numbytes	int
;	O
if	O
(	O
(	O
p	*(*(void))
-	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
)	O
==	O
test	struct(int,int,int,int,int)
.	O
testconreplysize	int
-	O
1	int
)	O
{	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
[	O
test	struct(int,int,int,int,int)
.	O
testconreplysize	int
-	O
1	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s %s: PCONGET:Reply to concon is wrong:%s\n"	*(char)
,	O
progname	*(char)
,	O
__FILE__	O
,	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
)	O
;	O
pxfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
*	O
)	O
&	O
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
pxfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
*	O
)	O
&	O
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
reply	*(char)
)	O
)	O
;	O
return	O
GET	(int,*(struct(long,long)),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(int)
(	O
sockfd	int
,	O
req	*(char)
,	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
;	O
}	O
