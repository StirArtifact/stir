void	O
usage	()->(void)
(	O
void	O
)	O
;	O
const	O
char	O
*	O
program_authors	array(*(char))
[	O
]	O
=	O
{	O
"Kipp Hickman"	*(char)
,	O
"Clem Cole"	*(char)
,	O
"Peter Moore"	*(char)
,	O
NULL	O
}	O
;	O
const	O
char	O
doc	*(char)
[	O
]	O
=	O
"talk to another user"	*(char)
;	O
const	O
char	O
args_doc	*(char)
[	O
]	O
=	O
"person [ttyname]"	*(char)
;	O
static	O
struct	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
=	O
{	O
NULL	O
,	O
NULL	O
,	O
args_doc	*(char)
,	O
doc	*(char)
}	O
;	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array(*(char))
[	O
]	O
)	O
{	O
int	O
index	int
;	O
set_program_name	(*(char))->(void)
(	O
argv	array(*(char))
[	O
0	int
]	O
)	O
;	O
iu_argp_init	O
(	O
"talk"	*(char)
,	O
program_authors	array(*(char))
)	O
;	O
argp_parse	(*(struct(*(struct(*`,int,*`,int,*`,int)),*((int,*`,*`)->(int)),*(char),*(char),*(struct(*`,int,*`,int)),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,*(int),*(void))->(int)
(	O
&	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
,	O
argc	int
,	O
argv	array(*(char))
,	O
0	int
,	O
&	O
index	int
,	O
NULL	O
)	O
;	O
argc	int
-=	O
index	int
;	O
argv	array(*(char))
+=	O
index	int
;	O
if	O
(	O
argc	int
==	O
0	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Usage: talk user [ttyname]\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
-	O
1	int
)	O
;	O
}	O
if	O
(	O
!	O
isatty	(int)->(int)
(	O
0	int
)	O
)	O
{	O
printf	(*(char))->(int)
(	O
"Standard input must be a tty, not a pipe or a file\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
-	O
1	int
)	O
;	O
}	O
get_names	(int,array(*(char)))->(int)
(	O
argc	int
,	O
argv	array(*(char))
)	O
;	O
init_display	()->(int)
(	O
)	O
;	O
open_ctl	()->(int)
(	O
)	O
;	O
open_sockt	()->(int)
(	O
)	O
;	O
start_msgs	()->(int)
(	O
)	O
;	O
if	O
(	O
!	O
check_local	()->(int)
(	O
)	O
)	O
invite_remote	()->(int)
(	O
)	O
;	O
end_msgs	()->(int)
(	O
)	O
;	O
set_edit_chars	()->(int)
(	O
)	O
;	O
talk	()->(int)
(	O
)	O
;	O
}	O
static	O
const	O
char	O
usage_str	array(char)
[	O
]	O
=	O
"Usage: talk [OPTIONS...] USER\n"	*(char)
"\n"	*(char)
"Options are:\n"	*(char)
"       --help              Display usage instructions\n"	*(char)
"       --version           Display program version\n"	*(char)
;	O
void	O
usage	()->(void)
(	O
void	O
)	O
{	O
printf	(*(char))->(int)
(	O
"%s\n"	*(char)
"Send bug reports to <%s>\n"	*(char)
,	O
usage_str	array(char)
,	O
PACKAGE_BUGREPORT	*(char)
)	O
;	O
}	O
