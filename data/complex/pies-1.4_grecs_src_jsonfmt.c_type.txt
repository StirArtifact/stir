static	O
void	O
json_writez	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),*(char))->(void)
(	O
struct	O
json_format	struct(long,int,*((*(void),*(char),long)->(void)),*(void))
*	O
fmt	*(char)
,	O
char	O
const	O
*	O
str	*(char)
)	O
{	O
size_t	long
len	long
=	O
strlen	(*(char))->(long)
(	O
str	*(char)
)	O
;	O
fmt	*(char)
->	O
write	*((*(void),*(char),long)->(long))
(	O
fmt	*(char)
->	O
data	*(void)
,	O
str	*(char)
,	O
len	long
)	O
;	O
}	O
static	O
void	O
json_writec	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),char)->(void)
(	O
struct	O
json_format	struct(long,int,*((*(void),*(char),long)->(void)),*(void))
*	O
fmt	*(char)
,	O
char	O
c	long
)	O
{	O
fmt	*(char)
->	O
write	*((*(void),*(char),long)->(long))
(	O
fmt	*(char)
->	O
data	*(void)
,	O
&	O
c	long
,	O
1	int
)	O
;	O
}	O
static	O
void	O
json_indent	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),long)->(void)
(	O
struct	O
json_format	struct(long,int,*((*(void),*(char),long)->(void)),*(void))
*	O
fmt	*(char)
,	O
size_t	long
level	int
)	O
{	O
level	int
*=	O
fmt	*(char)
->	O
indent	long
;	O
while	O
(	O
level	int
--	O
)	O
json_writec	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),char)->(void)
(	O
fmt	*(char)
,	O
' '	O
)	O
;	O
}	O
static	O
void	O
json_format_delim	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),long)->(void)
(	O
struct	O
json_format	struct(long,int,*((*(void),*(char),long)->(void)),*(void))
*	O
fmt	*(char)
,	O
size_t	long
level	int
)	O
{	O
json_writec	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),char)->(void)
(	O
fmt	*(char)
,	O
','	O
)	O
;	O
if	O
(	O
fmt	*(char)
->	O
indent	long
)	O
{	O
json_writec	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),char)->(void)
(	O
fmt	*(char)
,	O
'\n'	O
)	O
;	O
json_indent	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),long)->(void)
(	O
fmt	*(char)
,	O
level	int
)	O
;	O
}	O
else	O
json_writec	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),char)->(void)
(	O
fmt	*(char)
,	O
' '	O
)	O
;	O
}	O
static	O
int	O
escape	(char,*(char))->(int)
(	O
char	O
c	long
,	O
char	O
*	O
o	*(struct)
)	O
{	O
static	O
char	O
transtab	array(char)
[	O
]	O
=	O
"\\\\\"\"b\bf\fn\nr\rt\t"	*(char)
;	O
char	O
*	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
;	O
for	O
(	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
=	O
transtab	array(char)
;	O
*	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
;	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
+=	O
2	int
)	O
{	O
if	O
(	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
[	O
1	int
]	O
==	O
c	long
)	O
{	O
*	O
o	*(struct)
=	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
[	O
0	int
]	O
;	O
return	O
0	int
;	O
}	O
}	O
return	O
-	O
1	int
;	O
}	O
static	O
void	O
json_format_string	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),*(char))->(void)
(	O
struct	O
json_format	struct(long,int,*((*(void),*(char),long)->(void)),*(void))
*	O
fmt	*(char)
,	O
const	O
char	O
*	O
s	*(char)
)	O
{	O
json_writec	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),char)->(void)
(	O
fmt	*(char)
,	O
'"'	O
)	O
;	O
for	O
(	O
;	O
*	O
s	*(char)
;	O
s	*(char)
++	O
)	O
{	O
char	O
c	long
;	O
if	O
(	O
!	O
escape	(char,*(char))->(int)
(	O
*	O
s	*(char)
,	O
&	O
c	long
)	O
)	O
{	O
json_writec	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),char)->(void)
(	O
fmt	*(char)
,	O
'\\'	O
)	O
;	O
json_writec	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),char)->(void)
(	O
fmt	*(char)
,	O
c	long
)	O
;	O
}	O
else	O
json_writec	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),char)->(void)
(	O
fmt	*(char)
,	O
*	O
s	*(char)
)	O
;	O
}	O
json_writec	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),char)->(void)
(	O
fmt	*(char)
,	O
'"'	O
)	O
;	O
}	O
static	O
void	O
json_format_number	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),double)->(void)
(	O
struct	O
json_format	struct(long,int,*((*(void),*(char),long)->(void)),*(void))
*	O
fmt	*(char)
,	O
double	O
n	long
)	O
{	O
char	O
*	O
buffer	*(char)
=	O
NULL	O
;	O
size_t	long
size	*(long)
=	O
0	int
;	O
if	O
(	O
fmt	*(char)
->	O
precision	int
==	O
-	O
1	int
)	O
grecs_asprintf	(*(*(char)),*(long),*(char))->(int)
(	O
&	O
buffer	*(char)
,	O
&	O
size	*(long)
,	O
"%e"	*(char)
,	O
n	long
)	O
;	O
else	O
grecs_asprintf	(*(*(char)),*(long),*(char))->(int)
(	O
&	O
buffer	*(char)
,	O
&	O
size	*(long)
,	O
"%.*f"	*(char)
,	O
fmt	*(char)
->	O
precision	int
,	O
n	long
)	O
;	O
json_writez	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),*(char))->(void)
(	O
fmt	*(char)
,	O
buffer	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
buffer	*(char)
)	O
;	O
}	O
static	O
int	O
collect_keypairs	(*(void),*(void))->(int)
(	O
void	O
*	O
sym	*(void)
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
json_pair	struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct)))))
*	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
=	O
sym	*(void)
;	O
struct	O
json_pair	struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct)))))
*	O
*	O
*	O
kp	*(*(*(struct(*(char),*(struct`)))))
=	O
data	*(void)
;	O
*	O
*	O
kp	*(*(*(struct(*(char),*(struct`)))))
=	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
;	O
++	O
*	O
kp	*(*(*(struct(*(char),*(struct`)))))
;	O
return	O
0	int
;	O
}	O
static	O
void	O
json_formatter	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),long)->(void)
(	O
struct	O
json_format	struct(long,int,*((*(void),*(char),long)->(void)),*(void))
*	O
fmt	*(char)
,	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
obj	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
,	O
size_t	long
level	int
)	O
;	O
static	O
int	O
keypair_cmp_name	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
,	O
const	O
void	O
*	O
b	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
)	O
{	O
struct	O
json_pair	struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct)))))
const	O
*	O
const	O
*	O
kpa	*(*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
=	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
;	O
struct	O
json_pair	struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct)))))
const	O
*	O
const	O
*	O
kpb	*(*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
=	O
b	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
;	O
return	O
strcmp	(*(char),*(char))->(int)
(	O
(	O
*	O
kpa	*(*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
)	O
->	O
k	*(char)
,	O
(	O
*	O
kpb	*(*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
)	O
->	O
k	*(char)
)	O
;	O
}	O
static	O
void	O
json_format_obj	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),long)->(void)
(	O
struct	O
json_format	struct(long,int,*((*(void),*(char),long)->(void)),*(void))
*	O
fmt	*(char)
,	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
obj	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
,	O
size_t	long
level	int
)	O
{	O
size_t	long
count	long
,	O
i	long
;	O
struct	O
json_pair	struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct)))))
*	O
*	O
keypairs	*(*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
,	O
*	O
*	O
kp	*(*(*(struct(*(char),*(struct`)))))
;	O
count	long
=	O
grecs_symtab_count	(*(struct))->(long)
(	O
obj	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
o	*(struct)
)	O
;	O
keypairs	*(*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
=	O
grecs_calloc	(long,long)->(*(void))
(	O
count	long
,	O
sizeof	O
(	O
*	O
keypairs	*(*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
)	O
)	O
;	O
kp	*(*(*(struct(*(char),*(struct`)))))
=	O
keypairs	*(*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
;	O
grecs_symtab_foreach	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
obj	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
o	*(struct)
,	O
collect_keypairs	(*(void),*(void))->(int)
,	O
&	O
kp	*(*(*(struct(*(char),*(struct`)))))
)	O
;	O
qsort	(*(void),long,long,*((*(void),*(void))->(int)))->(void)
(	O
keypairs	*(*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
,	O
count	long
,	O
sizeof	O
(	O
*	O
keypairs	*(*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
)	O
,	O
keypair_cmp_name	(*(void),*(void))->(int)
)	O
;	O
json_writec	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),char)->(void)
(	O
fmt	*(char)
,	O
'{'	O
)	O
;	O
if	O
(	O
count	long
)	O
{	O
if	O
(	O
fmt	*(char)
->	O
indent	long
)	O
json_writec	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),char)->(void)
(	O
fmt	*(char)
,	O
'\n'	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
count	long
;	O
i	long
++	O
)	O
{	O
(	O
i	long
?	O
json_format_delim	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),long)->(void)
:	O
json_indent	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),long)->(void)
)	O
(	O
fmt	*(char)
,	O
level	int
)	O
;	O
json_format_string	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),*(char))->(void)
(	O
fmt	*(char)
,	O
keypairs	*(*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
[	O
i	long
]	O
->	O
k	*(char)
)	O
;	O
json_writec	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),char)->(void)
(	O
fmt	*(char)
,	O
':'	O
)	O
;	O
if	O
(	O
fmt	*(char)
->	O
indent	long
)	O
json_writec	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),char)->(void)
(	O
fmt	*(char)
,	O
' '	O
)	O
;	O
json_formatter	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),long)->(void)
(	O
fmt	*(char)
,	O
keypairs	*(*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
[	O
i	long
]	O
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
,	O
level	int
)	O
;	O
}	O
if	O
(	O
fmt	*(char)
->	O
indent	long
)	O
{	O
json_writec	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),char)->(void)
(	O
fmt	*(char)
,	O
'\n'	O
)	O
;	O
json_indent	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),long)->(void)
(	O
fmt	*(char)
,	O
level	int
-	O
1	int
)	O
;	O
}	O
}	O
json_writec	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),char)->(void)
(	O
fmt	*(char)
,	O
'}'	O
)	O
;	O
grecs_free	(*(void))->(void)
(	O
keypairs	*(*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
)	O
;	O
}	O
static	O
void	O
json_format_array	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),long)->(void)
(	O
struct	O
json_format	struct(long,int,*((*(void),*(char),long)->(void)),*(void))
*	O
fmt	*(char)
,	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
obj	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
,	O
size_t	long
level	int
)	O
{	O
size_t	long
i	long
;	O
json_array_flatten	(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))->(void)
(	O
obj	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
)	O
;	O
json_writec	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),char)->(void)
(	O
fmt	*(char)
,	O
'['	O
)	O
;	O
if	O
(	O
obj	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
oc	long
)	O
{	O
if	O
(	O
fmt	*(char)
->	O
indent	long
)	O
json_writec	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),char)->(void)
(	O
fmt	*(char)
,	O
'\n'	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
obj	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
oc	long
;	O
i	long
++	O
)	O
{	O
(	O
i	long
?	O
json_format_delim	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),long)->(void)
:	O
json_indent	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),long)->(void)
)	O
(	O
fmt	*(char)
,	O
level	int
)	O
;	O
json_formatter	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),long)->(void)
(	O
fmt	*(char)
,	O
obj	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
ov	*(*(struct))
[	O
i	long
]	O
,	O
level	int
)	O
;	O
}	O
if	O
(	O
fmt	*(char)
->	O
indent	long
)	O
{	O
json_writec	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),char)->(void)
(	O
fmt	*(char)
,	O
'\n'	O
)	O
;	O
json_indent	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),long)->(void)
(	O
fmt	*(char)
,	O
level	int
-	O
1	int
)	O
;	O
}	O
}	O
json_writec	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),char)->(void)
(	O
fmt	*(char)
,	O
']'	O
)	O
;	O
}	O
static	O
void	O
json_formatter	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),long)->(void)
(	O
struct	O
json_format	struct(long,int,*((*(void),*(char),long)->(void)),*(void))
*	O
fmt	*(char)
,	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
obj	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
,	O
size_t	long
level	int
)	O
{	O
if	O
(	O
!	O
obj	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
)	O
{	O
json_writez	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),*(char))->(void)
(	O
fmt	*(char)
,	O
"null"	*(char)
)	O
;	O
return	O
;	O
}	O
++	O
level	int
;	O
switch	O
(	O
obj	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
type	int
)	O
{	O
case	O
json_null	int
:	O
json_writez	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),*(char))->(void)
(	O
fmt	*(char)
,	O
"null"	*(char)
)	O
;	O
break	O
;	O
case	O
json_bool	int
:	O
json_writez	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),*(char))->(void)
(	O
fmt	*(char)
,	O
obj	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
b	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
?	O
"true"	*(char)
:	O
"false"	*(char)
)	O
;	O
break	O
;	O
case	O
json_number	int
:	O
json_format_number	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),double)->(void)
(	O
fmt	*(char)
,	O
obj	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
n	long
)	O
;	O
break	O
;	O
case	O
json_string	int
:	O
json_format_string	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),*(char))->(void)
(	O
fmt	*(char)
,	O
obj	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
s	*(char)
)	O
;	O
break	O
;	O
case	O
json_arr	int
:	O
json_format_array	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),long)->(void)
(	O
fmt	*(char)
,	O
obj	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
,	O
level	int
)	O
;	O
break	O
;	O
case	O
json_object	int
:	O
json_format_obj	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),long)->(void)
(	O
fmt	*(char)
,	O
obj	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
,	O
level	int
)	O
;	O
break	O
;	O
}	O
}	O
void	O
json_format_value	(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(struct(long,int,*((*`,*`,long)->(void)),*(void))))->(void)
(	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
obj	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
,	O
struct	O
json_format	struct(long,int,*((*(void),*(char),long)->(void)),*(void))
*	O
fmt	*(char)
)	O
{	O
json_formatter	(*(struct(long,int,*((*`,*`,long)->(void)),*(void))),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),long)->(void)
(	O
fmt	*(char)
,	O
obj	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
,	O
0	int
)	O
;	O
}	O
