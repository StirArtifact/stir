int	O
mu_folder_glob_match	(*(char),*(void),int)->(int)
(	O
const	O
char	O
*	O
name	*(char)
,	O
void	O
*	O
pattern	*(char)
,	O
int	O
flags	int
)	O
{	O
return	O
fnmatch	(*(char),*(char),int)->(int)
(	O
pattern	*(char)
,	O
name	*(char)
[	O
0	int
]	O
==	O
'/'	O
?	O
name	*(char)
+	O
1	int
:	O
name	*(char)
,	O
0	int
)	O
;	O
}	O
int	O
mu_folder_imap_match	(*(char),*(void),int)->(int)
(	O
const	O
char	O
*	O
name	*(char)
,	O
void	O
*	O
pattern	*(char)
,	O
int	O
flags	int
)	O
{	O
return	O
mu_imap_wildmatch	(*(char),*(char),int)->(int)
(	O
pattern	*(char)
,	O
name	*(char)
,	O
'/'	O
)	O
;	O
}	O
int	O
mu_folder_create_from_record	(*(*(struct)),*(struct),*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))))->(int)
(	O
mu_folder_t	*(struct)
*	O
pfolder	*(*(struct(*(struct),*(struct),*(struct),*(struct(*`,*`,int,int)),*(struct),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))))
,	O
mu_url_t	*(struct)
url	*(struct)
,	O
mu_record_t	*(struct)
record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
)	O
{	O
if	O
(	O
!	O
pfolder	*(*(struct(*(struct),*(struct),*(struct),*(struct(*`,*`,int,int)),*(struct),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))))
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
||	O
mu_registrar_lookup_url	(*(struct),int,*(*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int))))),*(int))->(int)
(	O
url	*(struct)
,	O
MU_FOLDER_ATTRIBUTE_DIRECTORY	int
,	O
&	O
record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
,	O
NULL	O
)	O
==	O
0	int
)	O
{	O
int	O
(	O
*	O
f_init	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))))->(int))
)	O
(	O
mu_folder_t	*(struct)
)	O
=	O
NULL	O
;	O
mu_record_get_folder	(*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(*((*(struct`))->(int))))->(int)
(	O
record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
,	O
&	O
f_init	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))))->(int))
)	O
;	O
if	O
(	O
f_init	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))))->(int))
)	O
{	O
int	O
status	int
,	O
mask	int
;	O
mu_folder_t	*(struct)
folder	*(struct)
;	O
int	O
(	O
*	O
u_init	*((*(struct))->(int))
)	O
(	O
mu_url_t	*(struct)
)	O
=	O
NULL	O
;	O
status	int
=	O
mu_record_check_url	(*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(struct),*(int))->(int)
(	O
record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
,	O
url	*(struct)
,	O
&	O
mask	int
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
mu_record_get_url	(*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(*((*(struct`))->(int))))->(int)
(	O
record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
,	O
&	O
u_init	*((*(struct))->(int))
)	O
;	O
if	O
(	O
u_init	*((*(struct))->(int))
)	O
{	O
status	int
=	O
u_init	*((*(struct))->(int))
(	O
url	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
}	O
folder	*(struct)
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
folder	*(struct)
)	O
)	O
;	O
if	O
(	O
folder	*(struct)
!=	O
NULL	O
)	O
{	O
folder	*(struct)
->	O
url	*(struct)
=	O
url	*(struct)
;	O
folder	*(struct)
->	O
is_local	int
=	O
record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
->	O
flags	int
&	O
MU_RECORD_LOCAL	int
;	O
status	int
=	O
mu_monitor_create	(*(*(struct(*(void),*(void),int,int))),int,*(void))->(int)
(	O
&	O
folder	*(struct)
->	O
monitor	*(struct(*(void),*(void),int,int))
,	O
0	int
,	O
folder	*(struct)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
status	int
=	O
f_init	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))))->(int))
(	O
folder	*(struct)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
if	O
(	O
!	O
folder	*(struct)
->	O
_match	*((*(char),*(void),int)->(int))
)	O
folder	*(struct)
->	O
_match	*((*(char),*(void),int)->(int))
=	O
mu_folder_imap_match	(*(char),*(void),int)->(int)
;	O
*	O
pfolder	*(*(struct(*(struct),*(struct),*(struct),*(struct(*`,*`,int,int)),*(struct),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))))
=	O
folder	*(struct)
;	O
folder	*(struct)
->	O
ref	*(char)
++	O
;	O
}	O
}	O
if	O
(	O
status	int
)	O
{	O
if	O
(	O
folder	*(struct)
->	O
monitor	*(struct(*(void),*(void),int,int))
)	O
mu_monitor_destroy	(*(*(struct(*(void),*(void),int,int))),*(void))->(void)
(	O
&	O
folder	*(struct)
->	O
monitor	*(struct(*(void),*(void),int,int))
,	O
folder	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
folder	*(struct)
)	O
;	O
}	O
}	O
return	O
status	int
;	O
}	O
}	O
return	O
MU_ERR_NOENT	O
;	O
}	O
int	O
mu_folder_create	(*(*(struct)),*(char))->(int)
(	O
mu_folder_t	*(struct)
*	O
pfolder	*(*(struct(*(struct),*(struct),*(struct),*(struct(*`,*`,int,int)),*(struct),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))))
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
int	O
rc	int
;	O
mu_url_t	*(struct)
url	*(struct)
;	O
rc	int
=	O
mu_url_create	(*(*(struct)),*(char))->(int)
(	O
&	O
url	*(struct)
,	O
name	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_folder_create_from_record	(*(*(struct)),*(struct),*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))))->(int)
(	O
pfolder	*(*(struct(*(struct),*(struct),*(struct),*(struct(*`,*`,int,int)),*(struct),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))))
,	O
url	*(struct)
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
mu_url_destroy	(*(*(struct)))->(void)
(	O
&	O
url	*(struct)
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_folder_attach_ticket	(*(struct))->(int)
(	O
mu_folder_t	*(struct)
folder	*(struct)
)	O
{	O
mu_authority_t	*(struct)
auth	*(char)
=	O
NULL	O
;	O
int	O
rc	int
=	O
MU_ERR_NOENT	O
;	O
if	O
(	O
mu_folder_get_authority	(*(struct),*(*(struct)))->(int)
(	O
folder	*(struct)
,	O
&	O
auth	*(char)
)	O
==	O
0	int
&&	O
auth	*(char)
)	O
{	O
char	O
*	O
filename	*(char)
=	O
mu_tilde_expansion	(*(char),int,*(char))->(*(char))
(	O
mu_ticket_file	*(char)
,	O
MU_HIERARCHY_DELIMITER	char
,	O
NULL	O
)	O
;	O
mu_wicket_t	*(struct)
wicket	*(struct)
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE1	int
,	O
(	O
"Reading user ticket file %s"	*(char)
,	O
filename	*(char)
)	O
)	O
;	O
if	O
(	O
(	O
rc	int
=	O
mu_file_wicket_create	(*(*(struct)),*(char))->(int)
(	O
&	O
wicket	*(struct)
,	O
filename	*(char)
)	O
)	O
==	O
0	int
)	O
{	O
mu_ticket_t	*(struct)
ticket	*(struct)
;	O
if	O
(	O
(	O
rc	int
=	O
mu_wicket_get_ticket	(*(struct),*(char),*(*(struct)))->(int)
(	O
wicket	*(struct)
,	O
NULL	O
,	O
&	O
ticket	*(struct)
)	O
)	O
==	O
0	int
)	O
{	O
rc	int
=	O
mu_authority_set_ticket	(*(struct),*(struct))->(int)
(	O
auth	*(char)
,	O
ticket	*(struct)
)	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE1	int
,	O
(	O
"Retrieved and set ticket: %d"	*(char)
,	O
rc	int
)	O
)	O
;	O
}	O
else	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"Error retrieving ticket: %s\n"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
mu_wicket_destroy	(*(*(struct)))->(void)
(	O
&	O
wicket	*(struct)
)	O
;	O
}	O
else	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"Error creating wicket: %s\n"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
free	(*(void))->(void)
(	O
filename	*(char)
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_folder_is_local	(*(struct))->(int)
(	O
mu_folder_t	*(struct)
folder	*(struct)
)	O
{	O
if	O
(	O
!	O
folder	*(struct)
)	O
return	O
-	O
1	int
;	O
return	O
folder	*(struct)
->	O
is_local	int
;	O
}	O
void	O
mu_folder_destroy	(*(*(struct)))->(void)
(	O
mu_folder_t	*(struct)
*	O
pfolder	*(*(struct(*(struct),*(struct),*(struct),*(struct(*`,*`,int,int)),*(struct),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))))
)	O
{	O
if	O
(	O
pfolder	*(*(struct(*(struct),*(struct),*(struct),*(struct(*`,*`,int,int)),*(struct),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))))
&&	O
*	O
pfolder	*(*(struct(*(struct),*(struct),*(struct),*(struct(*`,*`,int,int)),*(struct),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))))
)	O
{	O
mu_folder_t	*(struct)
folder	*(struct)
=	O
*	O
pfolder	*(*(struct(*(struct),*(struct),*(struct),*(struct(*`,*`,int,int)),*(struct),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))))
;	O
int	O
destroy_lock	int
=	O
0	int
;	O
mu_monitor_t	*(struct(*(void),*(void),int,int))
monitor	*(struct(*(void),*(void),int,int))
=	O
folder	*(struct)
->	O
monitor	*(struct(*(void),*(void),int,int))
;	O
mu_monitor_wrlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
folder	*(struct)
->	O
ref	*(char)
--	O
;	O
if	O
(	O
folder	*(struct)
->	O
ref	*(char)
<=	O
0	int
)	O
{	O
mu_monitor_unlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
destroy_lock	int
=	O
1	int
;	O
if	O
(	O
folder	*(struct)
->	O
observable	*(struct)
)	O
{	O
mu_observable_notify	(*(struct),int,*(void))->(int)
(	O
folder	*(struct)
->	O
observable	*(struct)
,	O
MU_EVT_FOLDER_DESTROY	int
,	O
folder	*(struct)
)	O
;	O
mu_observable_destroy	(*(*(struct)),*(void))->(void)
(	O
&	O
folder	*(struct)
->	O
observable	*(struct)
,	O
folder	*(struct)
)	O
;	O
}	O
if	O
(	O
folder	*(struct)
->	O
_destroy	*((*(struct))->(void))
)	O
folder	*(struct)
->	O
_destroy	*((*(struct))->(void))
(	O
folder	*(struct)
)	O
;	O
mu_monitor_wrlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
if	O
(	O
folder	*(struct)
->	O
authority	*(struct)
)	O
mu_authority_destroy	(*(*(struct)),*(void))->(void)
(	O
&	O
folder	*(struct)
->	O
authority	*(struct)
,	O
folder	*(struct)
)	O
;	O
if	O
(	O
folder	*(struct)
->	O
url	*(struct)
)	O
mu_url_destroy	(*(*(struct)))->(void)
(	O
&	O
folder	*(struct)
->	O
url	*(struct)
)	O
;	O
if	O
(	O
folder	*(struct)
->	O
property	*(struct)
)	O
mu_property_destroy	(*(*(struct)))->(void)
(	O
&	O
folder	*(struct)
->	O
property	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
folder	*(struct)
)	O
;	O
}	O
mu_monitor_unlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
if	O
(	O
destroy_lock	int
)	O
mu_monitor_destroy	(*(*(struct(*(void),*(void),int,int))),*(void))->(void)
(	O
&	O
monitor	*(struct(*(void),*(void),int,int))
,	O
folder	*(struct)
)	O
;	O
*	O
pfolder	*(*(struct(*(struct),*(struct),*(struct),*(struct(*`,*`,int,int)),*(struct),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))))
=	O
NULL	O
;	O
}	O
}	O
int	O
mu_folder_get_property	(*(struct),*(*(struct)))->(int)
(	O
mu_folder_t	*(struct)
folder	*(struct)
,	O
mu_property_t	*(struct)
*	O
prop	*(struct)
)	O
{	O
if	O
(	O
folder	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
prop	*(struct)
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
folder	*(struct)
->	O
property	*(struct)
==	O
NULL	O
)	O
{	O
int	O
status	int
;	O
if	O
(	O
folder	*(struct)
->	O
_get_property	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(*(struct)))->(int))
)	O
status	int
=	O
folder	*(struct)
->	O
_get_property	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(*(struct)))->(int))
(	O
folder	*(struct)
,	O
&	O
folder	*(struct)
->	O
property	*(struct)
)	O
;	O
else	O
status	int
=	O
mu_property_create_init	(*(*(struct)),*((*(struct))->(int)),*(void))->(int)
(	O
&	O
folder	*(struct)
->	O
property	*(struct)
,	O
mu_assoc_property_init	(*(struct))->(int)
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
}	O
*	O
prop	*(struct)
=	O
folder	*(struct)
->	O
property	*(struct)
;	O
return	O
0	int
;	O
}	O
int	O
mu_folder_open	(*(struct),int)->(int)
(	O
mu_folder_t	*(struct)
folder	*(struct)
,	O
int	O
flags	int
)	O
{	O
if	O
(	O
folder	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
folder	*(struct)
->	O
_open	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))),int)->(int))
==	O
NULL	O
)	O
return	O
ENOSYS	int
;	O
return	O
folder	*(struct)
->	O
_open	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))),int)->(int))
(	O
folder	*(struct)
,	O
flags	int
)	O
;	O
}	O
int	O
mu_folder_close	(*(struct))->(int)
(	O
mu_folder_t	*(struct)
folder	*(struct)
)	O
{	O
if	O
(	O
folder	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
folder	*(struct)
->	O
_close	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))))->(int))
==	O
NULL	O
)	O
return	O
ENOSYS	int
;	O
return	O
folder	*(struct)
->	O
_close	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))))->(int))
(	O
folder	*(struct)
)	O
;	O
}	O
int	O
mu_folder_set_authority	(*(struct),*(struct))->(int)
(	O
mu_folder_t	*(struct)
folder	*(struct)
,	O
mu_authority_t	*(struct)
authority	*(struct)
)	O
{	O
if	O
(	O
folder	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
folder	*(struct)
->	O
authority	*(struct)
)	O
mu_authority_destroy	(*(*(struct)),*(void))->(void)
(	O
&	O
folder	*(struct)
->	O
authority	*(struct)
,	O
folder	*(struct)
)	O
;	O
folder	*(struct)
->	O
authority	*(struct)
=	O
authority	*(struct)
;	O
return	O
0	int
;	O
}	O
int	O
mu_folder_get_authority	(*(struct),*(*(struct)))->(int)
(	O
mu_folder_t	*(struct)
folder	*(struct)
,	O
mu_authority_t	*(struct)
*	O
pauthority	*(*(struct))
)	O
{	O
if	O
(	O
folder	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
pauthority	*(*(struct))
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
*	O
pauthority	*(*(struct))
=	O
folder	*(struct)
->	O
authority	*(struct)
;	O
return	O
0	int
;	O
}	O
int	O
mu_folder_get_observable	(*(struct),*(*(struct)))->(int)
(	O
mu_folder_t	*(struct)
folder	*(struct)
,	O
mu_observable_t	*(struct)
*	O
pobservable	*(*(struct))
)	O
{	O
if	O
(	O
folder	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
pobservable	*(*(struct))
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
folder	*(struct)
->	O
observable	*(struct)
==	O
NULL	O
)	O
{	O
int	O
status	int
=	O
mu_observable_create	(*(*(struct)),*(void))->(int)
(	O
&	O
folder	*(struct)
->	O
observable	*(struct)
,	O
folder	*(struct)
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
}	O
*	O
pobservable	*(*(struct))
=	O
folder	*(struct)
->	O
observable	*(struct)
;	O
return	O
0	int
;	O
}	O
int	O
mu_folder_set_match	(*(struct),*((*(char),*(void),int)->(int)))->(int)
(	O
mu_folder_t	*(struct)
folder	*(struct)
,	O
mu_folder_match_fp	*((*(char),*(void),int)->(int))
pmatch	*((*(char),*(void),int)->(int))
)	O
{	O
if	O
(	O
folder	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
folder	*(struct)
->	O
_match	*((*(char),*(void),int)->(int))
=	O
pmatch	*((*(char),*(void),int)->(int))
;	O
return	O
0	int
;	O
}	O
int	O
mu_folder_get_match	(*(struct),*(*((*(char),*(void),int)->(int))))->(int)
(	O
mu_folder_t	*(struct)
folder	*(struct)
,	O
mu_folder_match_fp	*((*(char),*(void),int)->(int))
*	O
pmatch	*((*(char),*(void),int)->(int))
)	O
{	O
if	O
(	O
folder	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
pmatch	*((*(char),*(void),int)->(int))
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
*	O
pmatch	*((*(char),*(void),int)->(int))
=	O
folder	*(struct)
->	O
_match	*((*(char),*(void),int)->(int))
;	O
return	O
0	int
;	O
}	O
void	O
mu_list_response_free	(*(void))->(void)
(	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
mu_list_response	struct(int,int,int,*(char),*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int)))))
*	O
f	*(struct(int,int,int,*(char),*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int))))))
=	O
data	*(void)
;	O
free	(*(void))->(void)
(	O
f	*(struct(int,int,int,*(char),*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int))))))
->	O
name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
f	*(struct(int,int,int,*(char),*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int))))))
)	O
;	O
}	O
int	O
mu_folder_scan	(*(struct),*(struct(*(char),*(void),int,long,*((*`,*`,*`)->(int)),*(void),*(struct),*(struct))))->(int)
(	O
mu_folder_t	*(struct)
folder	*(struct)
,	O
struct	O
mu_folder_scanner	struct(*(char),*(void),int,long,*((*(struct),*(struct(int,int,int,*(char),*(struct`))),*(void))->(int)),*(void),*(struct),*(struct))
*	O
scn	*(struct(*(char),*(void),int,long,*((*(struct`),*(struct`),*(void))->(int)),*(void),*(struct),*(struct)))
)	O
{	O
if	O
(	O
!	O
folder	*(struct)
||	O
!	O
scn	*(struct(*(char),*(void),int,long,*((*(struct`),*(struct`),*(void))->(int)),*(void),*(struct),*(struct)))
)	O
return	O
EINVAL	int
;	O
if	O
(	O
folder	*(struct)
->	O
_list	*(struct)
==	O
NULL	O
)	O
return	O
ENOSYS	int
;	O
if	O
(	O
scn	*(struct(*(char),*(void),int,long,*((*(struct`),*(struct`),*(void))->(int)),*(void),*(struct),*(struct)))
->	O
result	*(struct)
)	O
mu_list_set_destroy_item	(*(struct),*((*(void))->(void)))->(*((*(void))->(void)))
(	O
scn	*(struct(*(char),*(void),int,long,*((*(struct`),*(struct`),*(void))->(int)),*(void),*(struct),*(struct)))
->	O
result	*(struct)
,	O
mu_list_response_free	(*(void))->(void)
)	O
;	O
return	O
folder	*(struct)
->	O
_list	*(struct)
(	O
folder	*(struct)
,	O
scn	*(struct(*(char),*(void),int,long,*((*(struct`),*(struct`),*(void))->(int)),*(void),*(struct),*(struct)))
)	O
;	O
}	O
int	O
mu_folder_list	(*(struct),*(char),*(void),long,*(*(struct)))->(int)
(	O
mu_folder_t	*(struct)
folder	*(struct)
,	O
const	O
char	O
*	O
dirname	*(char)
,	O
void	O
*	O
pattern	*(char)
,	O
size_t	long
max_depth	long
,	O
mu_list_t	*(struct)
*	O
pflist	*(*(struct))
)	O
{	O
return	O
mu_folder_enumerate	(*(struct),*(char),*(void),int,long,*(*(struct)),*((*(struct),*(struct(int,int,int,*`,*`)),*(void))->(int)),*(void))->(int)
(	O
folder	*(struct)
,	O
dirname	*(char)
,	O
pattern	*(char)
,	O
MU_FOLDER_ATTRIBUTE_ALL	O
,	O
max_depth	long
,	O
pflist	*(*(struct))
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
int	O
mu_folder_enumerate	(*(struct),*(char),*(void),int,long,*(*(struct)),*((*(struct),*(struct(int,int,int,*`,*`)),*(void))->(int)),*(void))->(int)
(	O
mu_folder_t	*(struct)
folder	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
,	O
void	O
*	O
pattern	*(char)
,	O
int	O
flags	int
,	O
size_t	long
max_depth	long
,	O
mu_list_t	*(struct)
*	O
pflist	*(*(struct))
,	O
mu_folder_enumerate_fp	*((*(struct),*(struct(int,int,int,*(char),*(struct`))),*(void))->(int))
enumfun	*((*(struct),*(struct(int,int,int,*(char),*(struct`))),*(void))->(int))
,	O
void	O
*	O
enumdata	*(void)
)	O
{	O
int	O
status	int
;	O
if	O
(	O
folder	*(struct)
==	O
NULL	O
||	O
(	O
!	O
pflist	*(*(struct))
&&	O
!	O
enumfun	*((*(struct),*(struct(int,int,int,*(char),*(struct`))),*(void))->(int))
)	O
)	O
return	O
EINVAL	int
;	O
else	O
if	O
(	O
folder	*(struct)
->	O
_list	*(struct)
==	O
NULL	O
)	O
return	O
ENOSYS	int
;	O
else	O
{	O
struct	O
mu_folder_scanner	struct(*(char),*(void),int,long,*((*(struct),*(struct(int,int,int,*(char),*(struct`))),*(void))->(int)),*(void),*(struct),*(struct))
scn	*(struct(*(char),*(void),int,long,*((*(struct`),*(struct`),*(void))->(int)),*(void),*(struct),*(struct)))
;	O
scn	*(struct(*(char),*(void),int,long,*((*(struct`),*(struct`),*(void))->(int)),*(void),*(struct),*(struct)))
.	O
refname	*(*(char))
=	O
name	*(char)
;	O
scn	*(struct(*(char),*(void),int,long,*((*(struct`),*(struct`),*(void))->(int)),*(void),*(struct),*(struct)))
.	O
pattern	*(char)
=	O
pattern	*(char)
;	O
scn	*(struct(*(char),*(void),int,long,*((*(struct`),*(struct`),*(void))->(int)),*(void),*(struct),*(struct)))
.	O
match_flags	int
=	O
flags	int
;	O
scn	*(struct(*(char),*(void),int,long,*((*(struct`),*(struct`),*(void))->(int)),*(void),*(struct),*(struct)))
.	O
max_depth	long
=	O
max_depth	long
;	O
scn	*(struct(*(char),*(void),int,long,*((*(struct`),*(struct`),*(void))->(int)),*(void),*(struct),*(struct)))
.	O
enumfun	*((*(struct),*(struct(int,int,int,*(char),*(struct`))),*(void))->(int))
=	O
enumfun	*((*(struct),*(struct(int,int,int,*(char),*(struct`))),*(void))->(int))
;	O
scn	*(struct(*(char),*(void),int,long,*((*(struct`),*(struct`),*(void))->(int)),*(void),*(struct),*(struct)))
.	O
enumdata	*(void)
=	O
enumdata	*(void)
;	O
scn	*(struct(*(char),*(void),int,long,*((*(struct`),*(struct`),*(void))->(int)),*(void),*(struct),*(struct)))
.	O
records	*(struct)
=	O
NULL	O
;	O
if	O
(	O
pflist	*(*(struct))
)	O
{	O
status	int
=	O
mu_list_create	(*(*(struct)))->(int)
(	O
&	O
scn	*(struct(*(char),*(void),int,long,*((*(struct`),*(struct`),*(void))->(int)),*(void),*(struct),*(struct)))
.	O
result	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
}	O
status	int
=	O
mu_folder_scan	(*(struct),*(struct(*(char),*(void),int,long,*((*`,*`,*`)->(int)),*(void),*(struct),*(struct))))->(int)
(	O
folder	*(struct)
,	O
&	O
scn	*(struct(*(char),*(void),int,long,*((*(struct`),*(struct`),*(void))->(int)),*(void),*(struct),*(struct)))
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
if	O
(	O
pflist	*(*(struct))
)	O
*	O
pflist	*(*(struct))
=	O
scn	*(struct(*(char),*(void),int,long,*((*(struct`),*(struct`),*(void))->(int)),*(void),*(struct),*(struct)))
.	O
result	*(struct)
;	O
}	O
else	O
mu_list_destroy	(*(*(struct)))->(void)
(	O
&	O
scn	*(struct(*(char),*(void),int,long,*((*(struct`),*(struct`),*(void))->(int)),*(void),*(struct),*(struct)))
.	O
result	*(struct)
)	O
;	O
}	O
return	O
status	int
;	O
}	O
int	O
mu_folder_lsub	(*(struct),*(char),*(char),*(*(struct)))->(int)
(	O
mu_folder_t	*(struct)
folder	*(struct)
,	O
const	O
char	O
*	O
dirname	*(char)
,	O
const	O
char	O
*	O
basename	(*(char))->(*(char))
,	O
mu_list_t	*(struct)
*	O
pflist	*(*(struct))
)	O
{	O
int	O
status	int
;	O
if	O
(	O
folder	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
else	O
if	O
(	O
folder	*(struct)
->	O
_lsub	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(char),*(char),*(struct))->(int))
==	O
NULL	O
)	O
return	O
ENOSYS	int
;	O
else	O
{	O
status	int
=	O
mu_list_create	(*(*(struct)))->(int)
(	O
pflist	*(*(struct))
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
mu_list_set_destroy_item	(*(struct),*((*(void))->(void)))->(*((*(void))->(void)))
(	O
*	O
pflist	*(*(struct))
,	O
mu_list_response_free	(*(void))->(void)
)	O
;	O
status	int
=	O
folder	*(struct)
->	O
_lsub	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(char),*(char),*(struct))->(int))
(	O
folder	*(struct)
,	O
dirname	*(char)
,	O
basename	(*(char))->(*(char))
,	O
*	O
pflist	*(*(struct))
)	O
;	O
}	O
return	O
status	int
;	O
}	O
int	O
mu_folder_subscribe	(*(struct),*(char))->(int)
(	O
mu_folder_t	*(struct)
folder	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
if	O
(	O
folder	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
folder	*(struct)
->	O
_subscribe	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(char))->(int))
==	O
NULL	O
)	O
return	O
ENOSYS	int
;	O
return	O
folder	*(struct)
->	O
_subscribe	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(char))->(int))
(	O
folder	*(struct)
,	O
name	*(char)
)	O
;	O
}	O
int	O
mu_folder_unsubscribe	(*(struct),*(char))->(int)
(	O
mu_folder_t	*(struct)
folder	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
if	O
(	O
folder	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
folder	*(struct)
->	O
_unsubscribe	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(char))->(int))
==	O
NULL	O
)	O
return	O
ENOSYS	int
;	O
return	O
folder	*(struct)
->	O
_unsubscribe	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(char))->(int))
(	O
folder	*(struct)
,	O
name	*(char)
)	O
;	O
}	O
int	O
mu_folder_delete	(*(struct),*(char))->(int)
(	O
mu_folder_t	*(struct)
folder	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
folder	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
folder	*(struct)
->	O
_delete	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(char))->(int))
)	O
rc	int
=	O
folder	*(struct)
->	O
_delete	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(char))->(int))
(	O
folder	*(struct)
,	O
name	*(char)
)	O
;	O
else	O
{	O
mu_mailbox_t	*(struct)
mbox	*(struct)
;	O
rc	int
=	O
mu_mailbox_create_at	(*(*(struct)),*(struct),*(char))->(int)
(	O
&	O
mbox	*(struct)
,	O
folder	*(struct)
,	O
name	*(char)
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
rc	int
=	O
mu_mailbox_remove	(*(struct))->(int)
(	O
mbox	*(struct)
)	O
;	O
mu_mailbox_destroy	(*(*(struct)))->(void)
(	O
&	O
mbox	*(struct)
)	O
;	O
}	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_folder_rename	(*(struct),*(char),*(char))->(int)
(	O
mu_folder_t	*(struct)
folder	*(struct)
,	O
const	O
char	O
*	O
oldname	*(char)
,	O
const	O
char	O
*	O
newname	*(char)
)	O
{	O
if	O
(	O
folder	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
folder	*(struct)
->	O
_rename	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(char),*(char))->(int))
==	O
NULL	O
)	O
return	O
ENOSYS	int
;	O
return	O
folder	*(struct)
->	O
_rename	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(char),*(char))->(int))
(	O
folder	*(struct)
,	O
oldname	*(char)
,	O
newname	*(char)
)	O
;	O
}	O
int	O
mu_folder_get_url	(*(struct),*(*(struct)))->(int)
(	O
mu_folder_t	*(struct)
folder	*(struct)
,	O
mu_url_t	*(struct)
*	O
purl	*(*(struct))
)	O
{	O
if	O
(	O
folder	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
purl	*(*(struct))
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
*	O
purl	*(*(struct))
=	O
folder	*(struct)
->	O
url	*(struct)
;	O
return	O
0	int
;	O
}	O
