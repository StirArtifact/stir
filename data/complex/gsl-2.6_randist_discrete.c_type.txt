typedef	O
struct	O
{	O
size_t	long
N	int
;	O
size_t	long
*	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
size_t	long
i	long
;	O
}	O
gsl_stack_t	struct(long,*(long),long)
;	O
static	O
gsl_stack_t	struct(long,*(long),long)
*	O
new_stack	(long)->(*(struct(long,*(long),long)))
(	O
size_t	long
N	int
)	O
{	O
gsl_stack_t	struct(long,*(long),long)
*	O
s	*(float)
;	O
s	*(float)
=	O
(	O
gsl_stack_t	struct(long,*(long),long)
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
gsl_stack_t	struct(long,*(long),long)
)	O
)	O
;	O
s	*(float)
->	O
N	int
=	O
N	int
;	O
s	*(float)
->	O
i	long
=	O
0	int
;	O
s	*(float)
->	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
(	O
size_t	long
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
size_t	long
)	O
*	O
N	int
)	O
;	O
return	O
s	*(float)
;	O
}	O
static	O
int	O
push_stack	(*(struct(long,*(long),long)),long)->(int)
(	O
gsl_stack_t	struct(long,*(long),long)
*	O
s	*(float)
,	O
size_t	long
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
if	O
(	O
(	O
s	*(float)
->	O
i	long
)	O
>=	O
(	O
s	*(float)
->	O
N	int
)	O
)	O
{	O
return	O
-	O
1	int
;	O
}	O
(	O
s	*(float)
->	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
[	O
s	*(float)
->	O
i	long
]	O
=	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
s	*(float)
->	O
i	long
+=	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
size_t	long
pop_stack	(*(struct(long,*(long),long)))->(long)
(	O
gsl_stack_t	struct(long,*(long),long)
*	O
s	*(float)
)	O
{	O
if	O
(	O
(	O
s	*(float)
->	O
i	long
)	O
==	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"internal error - stack exhausted"	*(char)
,	O
GSL_ESANITY	int
)	O
;	O
}	O
s	*(float)
->	O
i	long
-=	O
1	int
;	O
return	O
(	O
(	O
s	*(float)
->	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
[	O
s	*(float)
->	O
i	long
]	O
)	O
;	O
}	O
static	O
inline	O
size_t	long
size_stack	(*(struct(long,*(long),long)))->(long)
(	O
const	O
gsl_stack_t	struct(long,*(long),long)
*	O
s	*(float)
)	O
{	O
return	O
s	*(float)
->	O
i	long
;	O
}	O
static	O
void	O
free_stack	(*(struct(long,*(long),long)))->(void)
(	O
gsl_stack_t	struct(long,*(long),long)
*	O
s	*(float)
)	O
{	O
free	(*(void))->(void)
(	O
(	O
char	O
*	O
)	O
(	O
s	*(float)
->	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
)	O
;	O
free	(*(void))->(void)
(	O
(	O
char	O
*	O
)	O
s	*(float)
)	O
;	O
}	O
gsl_ran_discrete_t	struct(long,*(long),*(double))
*	O
gsl_ran_discrete_preproc	(long,*(double))->(*(struct(long,*(long),*(double))))
(	O
size_t	long
Kevents	long
,	O
const	O
double	O
*	O
ProbArray	*(double)
)	O
{	O
size_t	long
k	long
,	O
b	*(struct(long,*(long double)))
,	O
s	*(float)
;	O
gsl_ran_discrete_t	struct(long,*(long),*(double))
*	O
g	*(struct(long,*(long),*(double)))
;	O
size_t	long
nBigs	long
,	O
nSmalls	long
;	O
gsl_stack_t	struct(long,*(long),long)
*	O
Bigs	*(struct(long,*(long),long))
;	O
gsl_stack_t	struct(long,*(long),long)
*	O
Smalls	*(struct(long,*(long),long))
;	O
double	O
*	O
E	*(double)
;	O
double	O
pTotal	double
=	O
0.0	int
,	O
mean	double
,	O
d	double
;	O
if	O
(	O
Kevents	long
<	O
1	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"number of events must be a positive integer"	*(char)
,	O
GSL_EINVAL	int
,	O
0	int
)	O
;	O
}	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
Kevents	long
;	O
++	O
k	long
)	O
{	O
if	O
(	O
ProbArray	*(double)
[	O
k	long
]	O
<	O
0	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"probabilities must be non-negative"	*(char)
,	O
GSL_EINVAL	int
,	O
0	int
)	O
;	O
}	O
pTotal	double
+=	O
ProbArray	*(double)
[	O
k	long
]	O
;	O
}	O
g	*(struct(long,*(long),*(double)))
=	O
(	O
gsl_ran_discrete_t	struct(long,*(long),*(double))
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
gsl_ran_discrete_t	struct(long,*(long),*(double))
)	O
)	O
;	O
g	*(struct(long,*(long),*(double)))
->	O
K	int
=	O
Kevents	long
;	O
g	*(struct(long,*(long),*(double)))
->	O
F	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
double	O
)	O
*	O
Kevents	long
)	O
;	O
g	*(struct(long,*(long),*(double)))
->	O
A	*(float)
=	O
(	O
size_t	long
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
size_t	long
)	O
*	O
Kevents	long
)	O
;	O
E	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
double	O
)	O
*	O
Kevents	long
)	O
;	O
if	O
(	O
E	*(double)
==	O
NULL	O
)	O
{	O
GSL_ERROR_VAL	O
(	O
"Cannot allocate memory for randevent"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
Kevents	long
;	O
++	O
k	long
)	O
{	O
E	*(double)
[	O
k	long
]	O
=	O
ProbArray	*(double)
[	O
k	long
]	O
/	O
pTotal	double
;	O
}	O
mean	double
=	O
1.0	int
/	O
Kevents	long
;	O
nSmalls	long
=	O
nBigs	long
=	O
0	int
;	O
{	O
size_t	long
*	O
const	O
which	*(long)
=	O
g	*(struct(long,*(long),*(double)))
->	O
A	*(float)
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
Kevents	long
;	O
++	O
k	long
)	O
{	O
if	O
(	O
E	*(double)
[	O
k	long
]	O
<	O
mean	double
)	O
{	O
++	O
nSmalls	long
;	O
which	*(long)
[	O
k	long
]	O
=	O
0	int
;	O
}	O
else	O
{	O
++	O
nBigs	long
;	O
which	*(long)
[	O
k	long
]	O
=	O
1	int
;	O
}	O
}	O
Bigs	*(struct(long,*(long),long))
=	O
new_stack	(long)->(*(struct(long,*(long),long)))
(	O
nBigs	long
)	O
;	O
Smalls	*(struct(long,*(long),long))
=	O
new_stack	(long)->(*(struct(long,*(long),long)))
(	O
nSmalls	long
)	O
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
Kevents	long
;	O
++	O
k	long
)	O
{	O
gsl_stack_t	struct(long,*(long),long)
*	O
Dest	*(struct(long,*(long),long))
=	O
which	*(long)
[	O
k	long
]	O
?	O
Bigs	*(struct(long,*(long),long))
:	O
Smalls	*(struct(long,*(long),long))
;	O
int	O
status	int
=	O
push_stack	(*(struct(long,*(long),long)),long)->(int)
(	O
Dest	*(struct(long,*(long),long))
,	O
k	long
)	O
;	O
if	O
(	O
status	int
)	O
GSL_ERROR_VAL	O
(	O
"failed to build stacks"	*(char)
,	O
GSL_EFAILED	int
,	O
0	int
)	O
;	O
}	O
}	O
while	O
(	O
size_stack	(*(struct(long,*(long),long)))->(long)
(	O
Smalls	*(struct(long,*(long),long))
)	O
>	O
0	int
)	O
{	O
s	*(float)
=	O
pop_stack	(*(struct(long,*(long),long)))->(long)
(	O
Smalls	*(struct(long,*(long),long))
)	O
;	O
if	O
(	O
size_stack	(*(struct(long,*(long),long)))->(long)
(	O
Bigs	*(struct(long,*(long),long))
)	O
==	O
0	int
)	O
{	O
(	O
g	*(struct(long,*(long),*(double)))
->	O
A	*(float)
)	O
[	O
s	*(float)
]	O
=	O
s	*(float)
;	O
(	O
g	*(struct(long,*(long),*(double)))
->	O
F	*(double)
)	O
[	O
s	*(float)
]	O
=	O
1.0	int
;	O
continue	O
;	O
}	O
b	*(struct(long,*(long double)))
=	O
pop_stack	(*(struct(long,*(long),long)))->(long)
(	O
Bigs	*(struct(long,*(long),long))
)	O
;	O
(	O
g	*(struct(long,*(long),*(double)))
->	O
A	*(float)
)	O
[	O
s	*(float)
]	O
=	O
b	*(struct(long,*(long double)))
;	O
(	O
g	*(struct(long,*(long),*(double)))
->	O
F	*(double)
)	O
[	O
s	*(float)
]	O
=	O
Kevents	long
*	O
E	*(double)
[	O
s	*(float)
]	O
;	O
d	double
=	O
mean	double
-	O
E	*(double)
[	O
s	*(float)
]	O
;	O
E	*(double)
[	O
s	*(float)
]	O
+=	O
d	double
;	O
E	*(double)
[	O
b	*(struct(long,*(long double)))
]	O
-=	O
d	double
;	O
if	O
(	O
E	*(double)
[	O
b	*(struct(long,*(long double)))
]	O
<	O
mean	double
)	O
{	O
push_stack	(*(struct(long,*(long),long)),long)->(int)
(	O
Smalls	*(struct(long,*(long),long))
,	O
b	*(struct(long,*(long double)))
)	O
;	O
}	O
else	O
if	O
(	O
E	*(double)
[	O
b	*(struct(long,*(long double)))
]	O
>	O
mean	double
)	O
{	O
push_stack	(*(struct(long,*(long),long)),long)->(int)
(	O
Bigs	*(struct(long,*(long),long))
,	O
b	*(struct(long,*(long double)))
)	O
;	O
}	O
else	O
{	O
(	O
g	*(struct(long,*(long),*(double)))
->	O
A	*(float)
)	O
[	O
b	*(struct(long,*(long double)))
]	O
=	O
b	*(struct(long,*(long double)))
;	O
(	O
g	*(struct(long,*(long),*(double)))
->	O
F	*(double)
)	O
[	O
b	*(struct(long,*(long double)))
]	O
=	O
1.0	int
;	O
}	O
}	O
while	O
(	O
size_stack	(*(struct(long,*(long),long)))->(long)
(	O
Bigs	*(struct(long,*(long),long))
)	O
>	O
0	int
)	O
{	O
b	*(struct(long,*(long double)))
=	O
pop_stack	(*(struct(long,*(long),long)))->(long)
(	O
Bigs	*(struct(long,*(long),long))
)	O
;	O
(	O
g	*(struct(long,*(long),*(double)))
->	O
A	*(float)
)	O
[	O
b	*(struct(long,*(long double)))
]	O
=	O
b	*(struct(long,*(long double)))
;	O
(	O
g	*(struct(long,*(long),*(double)))
->	O
F	*(double)
)	O
[	O
b	*(struct(long,*(long double)))
]	O
=	O
1.0	int
;	O
}	O
if	O
(	O
size_stack	(*(struct(long,*(long),long)))->(long)
(	O
Smalls	*(struct(long,*(long),long))
)	O
!=	O
0	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"Smalls stack has not been emptied"	*(char)
,	O
GSL_ESANITY	int
,	O
0	int
)	O
;	O
}	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
Kevents	long
;	O
++	O
k	long
)	O
{	O
(	O
g	*(struct(long,*(long),*(double)))
->	O
F	*(double)
)	O
[	O
k	long
]	O
+=	O
k	long
;	O
(	O
g	*(struct(long,*(long),*(double)))
->	O
F	*(double)
)	O
[	O
k	long
]	O
/=	O
Kevents	long
;	O
}	O
free_stack	(*(struct(long,*(long),long)))->(void)
(	O
Bigs	*(struct(long,*(long),long))
)	O
;	O
free_stack	(*(struct(long,*(long),long)))->(void)
(	O
Smalls	*(struct(long,*(long),long))
)	O
;	O
free	(*(void))->(void)
(	O
(	O
char	O
*	O
)	O
E	*(double)
)	O
;	O
return	O
g	*(struct(long,*(long),*(double)))
;	O
}	O
size_t	long
gsl_ran_discrete	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),*(struct(long,*(long),*(double))))->(long)
(	O
const	O
gsl_rng	struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void))
*	O
r	*(struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void)))
,	O
const	O
gsl_ran_discrete_t	struct(long,*(long),*(double))
*	O
g	*(struct(long,*(long),*(double)))
)	O
{	O
size_t	long
c	*(float)
=	O
0	int
;	O
double	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
f	double
;	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_rng_uniform	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))))->(double)
(	O
r	*(struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void)))
)	O
;	O
c	*(float)
=	O
(	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
*	O
(	O
g	*(struct(long,*(long),*(double)))
->	O
K	int
)	O
)	O
;	O
f	double
=	O
(	O
g	*(struct(long,*(long),*(double)))
->	O
F	*(double)
)	O
[	O
c	*(float)
]	O
;	O
if	O
(	O
f	double
==	O
1.0	int
)	O
return	O
c	*(float)
;	O
if	O
(	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
<	O
f	double
)	O
{	O
return	O
c	*(float)
;	O
}	O
else	O
{	O
return	O
(	O
g	*(struct(long,*(long),*(double)))
->	O
A	*(float)
)	O
[	O
c	*(float)
]	O
;	O
}	O
}	O
void	O
gsl_ran_discrete_free	(*(struct(long,*(long),*(double))))->(void)
(	O
gsl_ran_discrete_t	struct(long,*(long),*(double))
*	O
g	*(struct(long,*(long),*(double)))
)	O
{	O
RETURN_IF_NULL	O
(	O
g	*(struct(long,*(long),*(double)))
)	O
;	O
free	(*(void))->(void)
(	O
(	O
char	O
*	O
)	O
(	O
g	*(struct(long,*(long),*(double)))
->	O
A	*(float)
)	O
)	O
;	O
free	(*(void))->(void)
(	O
(	O
char	O
*	O
)	O
(	O
g	*(struct(long,*(long),*(double)))
->	O
F	*(double)
)	O
)	O
;	O
free	(*(void))->(void)
(	O
(	O
char	O
*	O
)	O
g	*(struct(long,*(long),*(double)))
)	O
;	O
}	O
double	O
gsl_ran_discrete_pdf	(long,*(struct(long,*(long),*(double))))->(double)
(	O
size_t	long
k	long
,	O
const	O
gsl_ran_discrete_t	struct(long,*(long),*(double))
*	O
g	*(struct(long,*(long),*(double)))
)	O
{	O
size_t	long
i	long
,	O
K	int
;	O
double	O
f	double
,	O
p	int
=	O
0	int
;	O
K	int
=	O
g	*(struct(long,*(long),*(double)))
->	O
K	int
;	O
if	O
(	O
k	long
>	O
K	int
)	O
return	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
K	int
;	O
++	O
i	long
)	O
{	O
f	double
=	O
(	O
g	*(struct(long,*(long),*(double)))
->	O
F	*(double)
)	O
[	O
i	long
]	O
;	O
f	double
=	O
K	int
*	O
f	double
-	O
i	long
;	O
if	O
(	O
i	long
==	O
k	long
)	O
{	O
p	int
+=	O
f	double
;	O
}	O
else	O
if	O
(	O
k	long
==	O
(	O
g	*(struct(long,*(long),*(double)))
->	O
A	*(float)
)	O
[	O
i	long
]	O
)	O
{	O
p	int
+=	O
1.0	int
-	O
f	double
;	O
}	O
}	O
return	O
p	int
/	O
K	int
;	O
}	O
