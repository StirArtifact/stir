enum	O
mo_endianness	O
{	O
MO_LITTLE_ENDIAN	O
,	O
MO_BIG_ENDIAN	O
}	O
;	O
struct	O
binary_mo_file	O
{	O
const	O
char	O
*	O
filename	*(char)
;	O
char	O
*	O
data	*(void)
;	O
size_t	long
size	long
;	O
enum	O
mo_endianness	O
endian	O
;	O
}	O
;	O
static	O
void	O
read_binary_mo_file	O
(	O
struct	O
binary_mo_file	O
*	O
bfp	O
,	O
FILE	struct
*	O
fp	O
,	O
const	O
char	O
*	O
filename	*(char)
)	O
{	O
char	O
*	O
buf	O
=	O
NULL	O
;	O
size_t	long
alloc	O
=	O
0	int
;	O
size_t	long
size	long
=	O
0	int
;	O
size_t	long
count	O
;	O
while	O
(	O
!	O
feof	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	O
)	O
)	O
{	O
const	O
size_t	long
increment	O
=	O
4096	int
;	O
if	O
(	O
size	long
+	O
increment	O
>	O
alloc	O
)	O
{	O
alloc	O
=	O
alloc	O
+	O
alloc	O
/	O
2	int
;	O
if	O
(	O
alloc	O
<	O
size	long
+	O
increment	O
)	O
alloc	O
=	O
size	long
+	O
increment	O
;	O
buf	O
=	O
(	O
char	O
*	O
)	O
xrealloc	(*(void),long)->(*(void))
(	O
buf	O
,	O
alloc	O
)	O
;	O
}	O
count	O
=	O
fread	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
buf	O
+	O
size	long
,	O
1	int
,	O
increment	O
,	O
fp	O
)	O
;	O
if	O
(	O
count	O
==	O
0	int
)	O
{	O
if	O
(	O
ferror	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	O
)	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"error while reading \"%s\""	*(char)
)	O
,	O
filename	*(char)
)	O
;	O
}	O
else	O
size	long
+=	O
count	O
;	O
}	O
buf	O
=	O
(	O
char	O
*	O
)	O
xrealloc	(*(void),long)->(*(void))
(	O
buf	O
,	O
size	long
)	O
;	O
bfp	O
->	O
filename	*(char)
=	O
filename	*(char)
;	O
bfp	O
->	O
data	*(void)
=	O
buf	O
;	O
bfp	O
->	O
size	long
=	O
size	long
;	O
}	O
static	O
nls_uint32	int
get_uint32	O
(	O
const	O
struct	O
binary_mo_file	O
*	O
bfp	O
,	O
size_t	long
offset	int
)	O
{	O
nls_uint32	int
b0	O
,	O
b1	O
,	O
b2	O
,	O
b3	O
;	O
size_t	long
end	O
=	O
xsum	O
(	O
offset	int
,	O
4	int
)	O
;	O
if	O
(	O
size_overflow_p	O
(	O
end	O
)	O
||	O
end	O
>	O
bfp	O
->	O
size	long
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"file \"%s\" is truncated"	*(char)
)	O
,	O
bfp	O
->	O
filename	*(char)
)	O
;	O
b0	O
=	O
*	O
(	O
unsigned	O
char	O
*	O
)	O
(	O
bfp	O
->	O
data	*(void)
+	O
offset	int
+	O
0	int
)	O
;	O
b1	O
=	O
*	O
(	O
unsigned	O
char	O
*	O
)	O
(	O
bfp	O
->	O
data	*(void)
+	O
offset	int
+	O
1	int
)	O
;	O
b2	O
=	O
*	O
(	O
unsigned	O
char	O
*	O
)	O
(	O
bfp	O
->	O
data	*(void)
+	O
offset	int
+	O
2	int
)	O
;	O
b3	O
=	O
*	O
(	O
unsigned	O
char	O
*	O
)	O
(	O
bfp	O
->	O
data	*(void)
+	O
offset	int
+	O
3	int
)	O
;	O
if	O
(	O
bfp	O
->	O
endian	O
==	O
MO_LITTLE_ENDIAN	O
)	O
return	O
b0	O
|	O
(	O
b1	O
<<	O
8	int
)	O
|	O
(	O
b2	O
<<	O
16	int
)	O
|	O
(	O
b3	O
<<	O
24	int
)	O
;	O
else	O
return	O
(	O
b0	O
<<	O
24	int
)	O
|	O
(	O
b1	O
<<	O
16	int
)	O
|	O
(	O
b2	O
<<	O
8	int
)	O
|	O
b3	O
;	O
}	O
static	O
char	O
*	O
get_string	O
(	O
const	O
struct	O
binary_mo_file	O
*	O
bfp	O
,	O
size_t	long
offset	int
,	O
size_t	long
*	O
lengthp	O
)	O
{	O
nls_uint32	int
s_length	O
=	O
get_uint32	O
(	O
bfp	O
,	O
offset	int
)	O
;	O
nls_uint32	int
s_offset	O
=	O
get_uint32	O
(	O
bfp	O
,	O
offset	int
+	O
4	int
)	O
;	O
size_t	long
s_end	O
=	O
xsum3	O
(	O
s_offset	O
,	O
s_length	O
,	O
1	int
)	O
;	O
if	O
(	O
size_overflow_p	O
(	O
s_end	O
)	O
||	O
s_end	O
>	O
bfp	O
->	O
size	long
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"file \"%s\" is truncated"	*(char)
)	O
,	O
bfp	O
->	O
filename	*(char)
)	O
;	O
if	O
(	O
bfp	O
->	O
data	*(void)
[	O
s_offset	O
+	O
s_length	O
]	O
!=	O
'\0'	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"file \"%s\" contains a not NUL terminated string"	*(char)
)	O
,	O
bfp	O
->	O
filename	*(char)
)	O
;	O
*	O
lengthp	O
=	O
s_length	O
+	O
1	int
;	O
return	O
bfp	O
->	O
data	*(void)
+	O
s_offset	O
;	O
}	O
static	O
char	O
*	O
get_sysdep_string	O
(	O
const	O
struct	O
binary_mo_file	O
*	O
bfp	O
,	O
size_t	long
offset	int
,	O
const	O
struct	O
mo_file_header	struct(int,int,int,int,int,int,int,int,int,int,int,int)
*	O
header	O
,	O
size_t	long
*	O
lengthp	O
)	O
{	O
size_t	long
length	int
;	O
char	O
*	O
string	*(char)
;	O
size_t	long
i	long
;	O
char	O
*	O
p	*(void)
;	O
nls_uint32	int
s_offset	O
;	O
s_offset	O
=	O
get_uint32	O
(	O
bfp	O
,	O
offset	int
)	O
;	O
length	int
=	O
0	int
;	O
for	O
(	O
i	long
=	O
4	int
;	O
;	O
i	long
+=	O
8	int
)	O
{	O
nls_uint32	int
segsize	int
=	O
get_uint32	O
(	O
bfp	O
,	O
offset	int
+	O
i	long
)	O
;	O
nls_uint32	int
sysdepref	int
=	O
get_uint32	O
(	O
bfp	O
,	O
offset	int
+	O
i	long
+	O
4	int
)	O
;	O
nls_uint32	int
sysdep_segment_offset	O
;	O
nls_uint32	int
ss_length	O
;	O
nls_uint32	int
ss_offset	O
;	O
size_t	long
ss_end	O
;	O
size_t	long
s_end	O
;	O
size_t	long
n	long
;	O
s_end	O
=	O
xsum	O
(	O
s_offset	O
,	O
segsize	int
)	O
;	O
if	O
(	O
size_overflow_p	O
(	O
s_end	O
)	O
||	O
s_end	O
>	O
bfp	O
->	O
size	long
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"file \"%s\" is truncated"	*(char)
)	O
,	O
bfp	O
->	O
filename	*(char)
)	O
;	O
length	int
+=	O
segsize	int
;	O
s_offset	O
+=	O
segsize	int
;	O
if	O
(	O
sysdepref	int
==	O
SEGMENTS_END	O
)	O
{	O
if	O
(	O
!	O
(	O
segsize	int
>	O
0	int
&&	O
bfp	O
->	O
data	*(void)
[	O
s_offset	O
-	O
1	int
]	O
==	O
'\0'	O
)	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"file \"%s\" contains a not NUL terminated system dependent string"	*(char)
)	O
,	O
bfp	O
->	O
filename	*(char)
)	O
;	O
break	O
;	O
}	O
if	O
(	O
sysdepref	int
>=	O
header	O
->	O
n_sysdep_segments	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"file \"%s\" is not in GNU .mo format"	*(char)
)	O
,	O
bfp	O
->	O
filename	*(char)
)	O
;	O
sysdep_segment_offset	O
=	O
header	O
->	O
sysdep_segments_offset	int
+	O
sysdepref	int
*	O
8	int
;	O
ss_length	O
=	O
get_uint32	O
(	O
bfp	O
,	O
sysdep_segment_offset	O
)	O
;	O
ss_offset	O
=	O
get_uint32	O
(	O
bfp	O
,	O
sysdep_segment_offset	O
+	O
4	int
)	O
;	O
ss_end	O
=	O
xsum	O
(	O
ss_offset	O
,	O
ss_length	O
)	O
;	O
if	O
(	O
size_overflow_p	O
(	O
ss_end	O
)	O
||	O
ss_end	O
>	O
bfp	O
->	O
size	long
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"file \"%s\" is truncated"	*(char)
)	O
,	O
bfp	O
->	O
filename	*(char)
)	O
;	O
if	O
(	O
!	O
(	O
ss_length	O
>	O
0	int
&&	O
bfp	O
->	O
data	*(void)
[	O
ss_end	O
-	O
1	int
]	O
==	O
'\0'	O
)	O
)	O
{	O
char	O
location	O
[	O
30	int
]	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
location	O
,	O
"sysdep_segment[%u]"	*(char)
,	O
(	O
unsigned	O
int	O
)	O
sysdepref	int
)	O
;	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"file \"%s\" contains a not NUL terminated string, at %s"	*(char)
)	O
,	O
bfp	O
->	O
filename	*(char)
,	O
location	O
)	O
;	O
}	O
n	long
=	O
strlen	(*(char))->(long)
(	O
bfp	O
->	O
data	*(void)
+	O
ss_offset	O
)	O
;	O
length	int
+=	O
(	O
n	long
>	O
1	int
?	O
1	int
+	O
n	long
+	O
1	int
:	O
n	long
)	O
;	O
}	O
string	*(char)
=	O
XNMALLOC	O
(	O
length	int
,	O
char	O
)	O
;	O
p	*(void)
=	O
string	*(char)
;	O
s_offset	O
=	O
get_uint32	O
(	O
bfp	O
,	O
offset	int
)	O
;	O
for	O
(	O
i	long
=	O
4	int
;	O
;	O
i	long
+=	O
8	int
)	O
{	O
nls_uint32	int
segsize	int
=	O
get_uint32	O
(	O
bfp	O
,	O
offset	int
+	O
i	long
)	O
;	O
nls_uint32	int
sysdepref	int
=	O
get_uint32	O
(	O
bfp	O
,	O
offset	int
+	O
i	long
+	O
4	int
)	O
;	O
nls_uint32	int
sysdep_segment_offset	O
;	O
nls_uint32	int
ss_length	O
;	O
nls_uint32	int
ss_offset	O
;	O
size_t	long
n	long
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
p	*(void)
,	O
bfp	O
->	O
data	*(void)
+	O
s_offset	O
,	O
segsize	int
)	O
;	O
p	*(void)
+=	O
segsize	int
;	O
s_offset	O
+=	O
segsize	int
;	O
if	O
(	O
sysdepref	int
==	O
SEGMENTS_END	O
)	O
break	O
;	O
if	O
(	O
sysdepref	int
>=	O
header	O
->	O
n_sysdep_segments	int
)	O
abort	()->(void)
(	O
)	O
;	O
sysdep_segment_offset	O
=	O
header	O
->	O
sysdep_segments_offset	int
+	O
sysdepref	int
*	O
8	int
;	O
ss_length	O
=	O
get_uint32	O
(	O
bfp	O
,	O
sysdep_segment_offset	O
)	O
;	O
ss_offset	O
=	O
get_uint32	O
(	O
bfp	O
,	O
sysdep_segment_offset	O
+	O
4	int
)	O
;	O
if	O
(	O
ss_offset	O
+	O
ss_length	O
>	O
bfp	O
->	O
size	long
)	O
abort	()->(void)
(	O
)	O
;	O
if	O
(	O
!	O
(	O
ss_length	O
>	O
0	int
&&	O
bfp	O
->	O
data	*(void)
[	O
ss_offset	O
+	O
ss_length	O
-	O
1	int
]	O
==	O
'\0'	O
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
n	long
=	O
strlen	(*(char))->(long)
(	O
bfp	O
->	O
data	*(void)
+	O
ss_offset	O
)	O
;	O
if	O
(	O
n	long
>	O
1	int
)	O
*	O
p	*(void)
++	O
=	O
'<'	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
p	*(void)
,	O
bfp	O
->	O
data	*(void)
+	O
ss_offset	O
,	O
n	long
)	O
;	O
p	*(void)
+=	O
n	long
;	O
if	O
(	O
n	long
>	O
1	int
)	O
*	O
p	*(void)
++	O
=	O
'>'	O
;	O
}	O
if	O
(	O
p	*(void)
!=	O
string	*(char)
+	O
length	int
)	O
abort	()->(void)
(	O
)	O
;	O
*	O
lengthp	O
=	O
length	int
;	O
return	O
string	*(char)
;	O
}	O
void	O
read_mo_file	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char))->(void)
(	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
const	O
char	O
*	O
filename	*(char)
)	O
{	O
FILE	struct
*	O
fp	O
;	O
struct	O
binary_mo_file	O
bf	O
;	O
struct	O
mo_file_header	struct(int,int,int,int,int,int,int,int,int,int,int,int)
header	O
;	O
unsigned	O
int	O
i	long
;	O
static	O
lex_pos_ty	struct
pos	struct(*(char),long)
=	O
{	O
__FILE__	O
,	O
__LINE__	O
}	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
filename	*(char)
,	O
"-"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
filename	*(char)
,	O
"/dev/stdin"	*(char)
)	O
==	O
0	int
)	O
{	O
fp	O
=	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
SET_BINARY	O
(	O
fileno	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	O
)	O
)	O
;	O
}	O
else	O
{	O
fp	O
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
filename	*(char)
,	O
"rb"	*(char)
)	O
;	O
if	O
(	O
fp	O
==	O
NULL	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"error while opening \"%s\" for reading"	*(char)
)	O
,	O
filename	*(char)
)	O
;	O
}	O
read_binary_mo_file	O
(	O
&	O
bf	O
,	O
fp	O
,	O
filename	*(char)
)	O
;	O
bf	O
.	O
endian	O
=	O
MO_BIG_ENDIAN	O
;	O
header	O
.	O
magic	int
=	O
GET_HEADER_FIELD	O
(	O
magic	int
)	O
;	O
if	O
(	O
header	O
.	O
magic	int
!=	O
_MAGIC	O
)	O
{	O
bf	O
.	O
endian	O
=	O
MO_LITTLE_ENDIAN	O
;	O
header	O
.	O
magic	int
=	O
GET_HEADER_FIELD	O
(	O
magic	int
)	O
;	O
if	O
(	O
header	O
.	O
magic	int
!=	O
_MAGIC	O
)	O
{	O
unrecognised	O
:	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"file \"%s\" is not in GNU .mo format"	*(char)
)	O
,	O
filename	*(char)
)	O
;	O
}	O
}	O
header	O
.	O
revision	int
=	O
GET_HEADER_FIELD	O
(	O
revision	int
)	O
;	O
switch	O
(	O
header	O
.	O
revision	int
>>	O
16	int
)	O
{	O
case	O
0	int
:	O
case	O
1	int
:	O
header	O
.	O
nstrings	int
=	O
GET_HEADER_FIELD	O
(	O
nstrings	int
)	O
;	O
header	O
.	O
orig_tab_offset	int
=	O
GET_HEADER_FIELD	O
(	O
orig_tab_offset	int
)	O
;	O
header	O
.	O
trans_tab_offset	int
=	O
GET_HEADER_FIELD	O
(	O
trans_tab_offset	int
)	O
;	O
header	O
.	O
hash_tab_size	int
=	O
GET_HEADER_FIELD	O
(	O
hash_tab_size	int
)	O
;	O
header	O
.	O
hash_tab_offset	int
=	O
GET_HEADER_FIELD	O
(	O
hash_tab_offset	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
header	O
.	O
nstrings	int
;	O
i	long
++	O
)	O
{	O
message_ty	struct
*	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
;	O
char	O
*	O
msgctxt	*(char)
;	O
char	O
*	O
msgid	*(char)
;	O
size_t	long
msgid_len	O
;	O
char	O
*	O
separator	*(char)
;	O
char	O
*	O
msgstr	*(char)
;	O
size_t	long
msgstr_len	long
;	O
msgid	*(char)
=	O
get_string	O
(	O
&	O
bf	O
,	O
header	O
.	O
orig_tab_offset	int
+	O
i	long
*	O
8	int
,	O
&	O
msgid_len	O
)	O
;	O
separator	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
msgid	*(char)
,	O
MSGCTXT_SEPARATOR	O
)	O
;	O
if	O
(	O
separator	*(char)
!=	O
NULL	O
)	O
{	O
*	O
separator	*(char)
=	O
'\0'	O
;	O
msgctxt	*(char)
=	O
msgid	*(char)
;	O
msgid	*(char)
=	O
separator	*(char)
+	O
1	int
;	O
msgid_len	O
-=	O
msgid	*(char)
-	O
msgctxt	*(char)
;	O
}	O
else	O
msgctxt	*(char)
=	O
NULL	O
;	O
msgstr	*(char)
=	O
get_string	O
(	O
&	O
bf	O
,	O
header	O
.	O
trans_tab_offset	int
+	O
i	long
*	O
8	int
,	O
&	O
msgstr_len	long
)	O
;	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
=	O
message_alloc	(*(char),*(char),*(char),*(char),long,*(struct(*(char),long)))->(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))
(	O
msgctxt	*(char)
,	O
msgid	*(char)
,	O
(	O
strlen	(*(char))->(long)
(	O
msgid	*(char)
)	O
+	O
1	int
<	O
msgid_len	O
?	O
msgid	*(char)
+	O
strlen	(*(char))->(long)
(	O
msgid	*(char)
)	O
+	O
1	int
:	O
NULL	O
)	O
,	O
msgstr	*(char)
,	O
msgstr_len	long
,	O
&	O
pos	struct(*(char),long)
)	O
;	O
message_list_append	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))->(void)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
)	O
;	O
}	O
switch	O
(	O
header	O
.	O
revision	int
&	O
0xffff	int
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
1	int
:	O
default	O
:	O
header	O
.	O
n_sysdep_segments	int
=	O
GET_HEADER_FIELD	O
(	O
n_sysdep_segments	int
)	O
;	O
header	O
.	O
sysdep_segments_offset	int
=	O
GET_HEADER_FIELD	O
(	O
sysdep_segments_offset	int
)	O
;	O
header	O
.	O
n_sysdep_strings	int
=	O
GET_HEADER_FIELD	O
(	O
n_sysdep_strings	int
)	O
;	O
header	O
.	O
orig_sysdep_tab_offset	int
=	O
GET_HEADER_FIELD	O
(	O
orig_sysdep_tab_offset	int
)	O
;	O
header	O
.	O
trans_sysdep_tab_offset	int
=	O
GET_HEADER_FIELD	O
(	O
trans_sysdep_tab_offset	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
header	O
.	O
n_sysdep_strings	int
;	O
i	long
++	O
)	O
{	O
message_ty	struct
*	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
;	O
char	O
*	O
msgctxt	*(char)
;	O
char	O
*	O
msgid	*(char)
;	O
size_t	long
msgid_len	O
;	O
char	O
*	O
separator	*(char)
;	O
char	O
*	O
msgstr	*(char)
;	O
size_t	long
msgstr_len	long
;	O
nls_uint32	int
offset	int
;	O
size_t	long
f	O
;	O
offset	int
=	O
get_uint32	O
(	O
&	O
bf	O
,	O
header	O
.	O
orig_sysdep_tab_offset	int
+	O
i	long
*	O
4	int
)	O
;	O
msgid	*(char)
=	O
get_sysdep_string	O
(	O
&	O
bf	O
,	O
offset	int
,	O
&	O
header	O
,	O
&	O
msgid_len	O
)	O
;	O
separator	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
msgid	*(char)
,	O
MSGCTXT_SEPARATOR	O
)	O
;	O
if	O
(	O
separator	*(char)
!=	O
NULL	O
)	O
{	O
*	O
separator	*(char)
=	O
'\0'	O
;	O
msgctxt	*(char)
=	O
msgid	*(char)
;	O
msgid	*(char)
=	O
separator	*(char)
+	O
1	int
;	O
msgid_len	O
-=	O
msgid	*(char)
-	O
msgctxt	*(char)
;	O
}	O
else	O
msgctxt	*(char)
=	O
NULL	O
;	O
offset	int
=	O
get_uint32	O
(	O
&	O
bf	O
,	O
header	O
.	O
trans_sysdep_tab_offset	int
+	O
i	long
*	O
4	int
)	O
;	O
msgstr	*(char)
=	O
get_sysdep_string	O
(	O
&	O
bf	O
,	O
offset	int
,	O
&	O
header	O
,	O
&	O
msgstr_len	long
)	O
;	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
=	O
message_alloc	(*(char),*(char),*(char),*(char),long,*(struct(*(char),long)))->(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))
(	O
msgctxt	*(char)
,	O
msgid	*(char)
,	O
(	O
strlen	(*(char))->(long)
(	O
msgid	*(char)
)	O
+	O
1	int
<	O
msgid_len	O
?	O
msgid	*(char)
+	O
strlen	(*(char))->(long)
(	O
msgid	*(char)
)	O
+	O
1	int
:	O
NULL	O
)	O
,	O
msgstr	*(char)
,	O
msgstr_len	long
,	O
&	O
pos	struct(*(char),long)
)	O
;	O
for	O
(	O
f	O
=	O
format_c	int
;	O
;	O
f	O
=	O
format_objc	int
)	O
{	O
bool	bool
valid	O
=	O
true	O
;	O
struct	O
formatstring_parser	O
*	O
parser	O
=	O
formatstring_parsers	O
[	O
f	O
]	O
;	O
const	O
char	O
*	O
str_end	O
;	O
const	O
char	O
*	O
str	O
;	O
str_end	O
=	O
msgid	*(char)
+	O
msgid_len	O
;	O
for	O
(	O
str	O
=	O
msgid	*(char)
;	O
str	O
<	O
str_end	O
;	O
str	O
+=	O
strlen	(*(char))->(long)
(	O
str	O
)	O
+	O
1	int
)	O
{	O
char	O
*	O
invalid_reason	O
=	O
NULL	O
;	O
void	O
*	O
descr	O
=	O
parser	O
->	O
parse	O
(	O
str	O
,	O
false	O
,	O
NULL	O
,	O
&	O
invalid_reason	O
)	O
;	O
if	O
(	O
descr	O
!=	O
NULL	O
)	O
parser	O
->	O
free	(*(void))->(void)
(	O
descr	O
)	O
;	O
else	O
{	O
free	(*(void))->(void)
(	O
invalid_reason	O
)	O
;	O
valid	O
=	O
false	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
valid	O
)	O
{	O
str_end	O
=	O
msgstr	*(char)
+	O
msgstr_len	long
;	O
for	O
(	O
str	O
=	O
msgstr	*(char)
;	O
str	O
<	O
str_end	O
;	O
str	O
+=	O
strlen	(*(char))->(long)
(	O
str	O
)	O
+	O
1	int
)	O
{	O
char	O
*	O
invalid_reason	O
=	O
NULL	O
;	O
void	O
*	O
descr	O
=	O
parser	O
->	O
parse	O
(	O
str	O
,	O
true	O
,	O
NULL	O
,	O
&	O
invalid_reason	O
)	O
;	O
if	O
(	O
descr	O
!=	O
NULL	O
)	O
parser	O
->	O
free	(*(void))->(void)
(	O
descr	O
)	O
;	O
else	O
{	O
free	(*(void))->(void)
(	O
invalid_reason	O
)	O
;	O
valid	O
=	O
false	O
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
valid	O
)	O
{	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_format	enum(int,int,int,int,int,int)
[	O
f	O
]	O
=	O
yes	int
;	O
break	O
;	O
}	O
if	O
(	O
f	O
==	O
format_objc	int
)	O
break	O
;	O
}	O
message_list_append	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))->(void)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
)	O
;	O
}	O
break	O
;	O
}	O
break	O
;	O
default	O
:	O
goto	O
unrecognised	O
;	O
}	O
if	O
(	O
fp	O
!=	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	O
)	O
;	O
}	O
