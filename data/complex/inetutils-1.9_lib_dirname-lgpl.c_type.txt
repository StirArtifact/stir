size_t	long
dir_len	(*(char))->(long)
(	O
char	O
const	O
*	O
file	*(char)
)	O
{	O
size_t	long
prefix_length	long
=	O
FILE_SYSTEM_PREFIX_LEN	int
(	O
file	*(char)
)	O
;	O
size_t	long
length	long
;	O
prefix_length	long
+=	O
(	O
prefix_length	long
!=	O
0	int
?	O
(	O
FILE_SYSTEM_DRIVE_PREFIX_CAN_BE_RELATIVE	int
&&	O
ISSLASH	O
(	O
file	*(char)
[	O
prefix_length	long
]	O
)	O
)	O
:	O
(	O
ISSLASH	O
(	O
file	*(char)
[	O
0	int
]	O
)	O
?	O
(	O
(	O
DOUBLE_SLASH_IS_DISTINCT_ROOT	int
&&	O
ISSLASH	O
(	O
file	*(char)
[	O
1	int
]	O
)	O
&&	O
!	O
ISSLASH	O
(	O
file	*(char)
[	O
2	int
]	O
)	O
?	O
2	int
:	O
1	int
)	O
)	O
:	O
0	int
)	O
)	O
;	O
for	O
(	O
length	long
=	O
last_component	(*(char))->(*(char))
(	O
file	*(char)
)	O
-	O
file	*(char)
;	O
prefix_length	long
<	O
length	long
;	O
length	long
--	O
)	O
if	O
(	O
!	O
ISSLASH	O
(	O
file	*(char)
[	O
length	long
-	O
1	int
]	O
)	O
)	O
break	O
;	O
return	O
length	long
;	O
}	O
char	O
*	O
mdir_name	(*(char))->(*(char))
(	O
char	O
const	O
*	O
file	*(char)
)	O
{	O
size_t	long
length	long
=	O
dir_len	(*(char))->(long)
(	O
file	*(char)
)	O
;	O
bool	bool
append_dot	bool
=	O
(	O
length	long
==	O
0	int
||	O
(	O
FILE_SYSTEM_DRIVE_PREFIX_CAN_BE_RELATIVE	int
&&	O
length	long
==	O
FILE_SYSTEM_PREFIX_LEN	int
(	O
file	*(char)
)	O
&&	O
file	*(char)
[	O
2	int
]	O
!=	O
'\0'	O
&&	O
!	O
ISSLASH	O
(	O
file	*(char)
[	O
2	int
]	O
)	O
)	O
)	O
;	O
char	O
*	O
dir	*(char)
=	O
malloc	(long)->(*(void))
(	O
length	long
+	O
append_dot	bool
+	O
1	int
)	O
;	O
if	O
(	O
!	O
dir	*(char)
)	O
return	O
NULL	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
dir	*(char)
,	O
file	*(char)
,	O
length	long
)	O
;	O
if	O
(	O
append_dot	bool
)	O
dir	*(char)
[	O
length	long
++	O
]	O
=	O
'.'	O
;	O
dir	*(char)
[	O
length	long
]	O
=	O
'\0'	O
;	O
return	O
dir	*(char)
;	O
}	O
