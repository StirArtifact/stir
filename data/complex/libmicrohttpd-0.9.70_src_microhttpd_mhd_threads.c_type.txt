static	O
int	O
MHD_set_thread_name_	(long,*(char))->(int)
(	O
const	O
MHD_thread_ID_	long
thread_id	long
,	O
const	O
char	O
*	O
thread_name	*(char)
)	O
{	O
if	O
(	O
NULL	O
==	O
thread_name	*(char)
)	O
return	O
0	int
;	O
return	O
!	O
pthread_setname_np	(long,*(char))->(int)
(	O
thread_id	long
,	O
thread_name	*(char)
)	O
;	O
}	O
int	O
MHD_create_thread_	(*(struct(long,long)),long,*((*(void))->(*(void))),*(void))->(int)
(	O
MHD_thread_handle_ID_	struct(long,long)
*	O
thread	*(struct(long,long))
,	O
size_t	long
stack_size	long
,	O
MHD_THREAD_START_ROUTINE_	*((*(void))->(*(void)))
start_routine	*((*(void))->(*(void)))
,	O
void	O
*	O
arg	*(void)
)	O
{	O
int	O
res	int
;	O
if	O
(	O
0	int
!=	O
stack_size	long
)	O
{	O
pthread_attr_t	union(array(char),long)
attr	union(array(char),long)
;	O
res	int
=	O
pthread_attr_init	(*(union(array(char),long)))->(int)
(	O
&	O
attr	union(array(char),long)
)	O
;	O
if	O
(	O
0	int
==	O
res	int
)	O
{	O
res	int
=	O
pthread_attr_setstacksize	(*(union(array(char),long)),long)->(int)
(	O
&	O
attr	union(array(char),long)
,	O
stack_size	long
)	O
;	O
if	O
(	O
0	int
==	O
res	int
)	O
res	int
=	O
pthread_create	(*(long),*(union(array(char),long)),*((*(void))->(*(void))),*(void))->(int)
(	O
&	O
(	O
thread	*(struct(long,long))
->	O
handle	long
)	O
,	O
&	O
attr	union(array(char),long)
,	O
start_routine	*((*(void))->(*(void)))
,	O
arg	*(void)
)	O
;	O
pthread_attr_destroy	(*(union(array(char),long)))->(int)
(	O
&	O
attr	union(array(char),long)
)	O
;	O
}	O
}	O
else	O
res	int
=	O
pthread_create	(*(long),*(union(array(char),long)),*((*(void))->(*(void))),*(void))->(int)
(	O
&	O
(	O
thread	*(struct(long,long))
->	O
handle	long
)	O
,	O
NULL	O
,	O
start_routine	*((*(void))->(*(void)))
,	O
arg	*(void)
)	O
;	O
if	O
(	O
0	int
!=	O
res	int
)	O
errno	O
=	O
res	int
;	O
return	O
!	O
res	int
;	O
}	O
struct	O
MHD_named_helper_param_	struct(*((*(void))->(*(void))),*(void),*(char))
{	O
MHD_THREAD_START_ROUTINE_	*((*(void))->(*(void)))
start_routine	*((*(void))->(*(void)))
;	O
void	O
*	O
arg	*(void)
;	O
const	O
char	O
*	O
name	*(char)
;	O
}	O
;	O
static	O
MHD_THRD_RTRN_TYPE_	O
MHD_THRD_CALL_SPEC_	O
named_thread_starter	(*(void))->(*(void))
(	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
MHD_named_helper_param_	struct(*((*(void))->(*(void))),*(void),*(char))
*	O
const	O
param	*(struct(*((*(void))->(*(void))),*(void),*(char)))
=	O
(	O
struct	O
MHD_named_helper_param_	struct(*((*(void))->(*(void))),*(void),*(char))
*	O
)	O
data	*(void)
;	O
void	O
*	O
arg	*(void)
;	O
MHD_THREAD_START_ROUTINE_	*((*(void))->(*(void)))
thr_func	*((*(void))->(*(void)))
;	O
if	O
(	O
NULL	O
==	O
data	*(void)
)	O
return	O
(	O
MHD_THRD_RTRN_TYPE_	O
)	O
0	int
;	O
MHD_set_cur_thread_name_	O
(	O
param	*(struct(*((*(void))->(*(void))),*(void),*(char)))
->	O
name	*(char)
)	O
;	O
arg	*(void)
=	O
param	*(struct(*((*(void))->(*(void))),*(void),*(char)))
->	O
arg	*(void)
;	O
thr_func	*((*(void))->(*(void)))
=	O
param	*(struct(*((*(void))->(*(void))),*(void),*(char)))
->	O
start_routine	*((*(void))->(*(void)))
;	O
free	(*(void))->(void)
(	O
data	*(void)
)	O
;	O
return	O
thr_func	*((*(void))->(*(void)))
(	O
arg	*(void)
)	O
;	O
}	O
int	O
MHD_create_named_thread_	(*(struct(long,long)),*(char),long,*((*(void))->(*(void))),*(void))->(int)
(	O
MHD_thread_handle_ID_	struct(long,long)
*	O
thread	*(struct(long,long))
,	O
const	O
char	O
*	O
thread_name	*(char)
,	O
size_t	long
stack_size	long
,	O
MHD_THREAD_START_ROUTINE_	*((*(void))->(*(void)))
start_routine	*((*(void))->(*(void)))
,	O
void	O
*	O
arg	*(void)
)	O
{	O
struct	O
MHD_named_helper_param_	struct(*((*(void))->(*(void))),*(void),*(char))
*	O
param	*(struct(*((*(void))->(*(void))),*(void),*(char)))
;	O
if	O
(	O
NULL	O
==	O
thread_name	*(char)
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
0	int
;	O
}	O
param	*(struct(*((*(void))->(*(void))),*(void),*(char)))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
MHD_named_helper_param_	struct(*((*(void))->(*(void))),*(void),*(char))
)	O
)	O
;	O
if	O
(	O
NULL	O
==	O
param	*(struct(*((*(void))->(*(void))),*(void),*(char)))
)	O
return	O
0	int
;	O
param	*(struct(*((*(void))->(*(void))),*(void),*(char)))
->	O
start_routine	*((*(void))->(*(void)))
=	O
start_routine	*((*(void))->(*(void)))
;	O
param	*(struct(*((*(void))->(*(void))),*(void),*(char)))
->	O
arg	*(void)
=	O
arg	*(void)
;	O
param	*(struct(*((*(void))->(*(void))),*(void),*(char)))
->	O
name	*(char)
=	O
thread_name	*(char)
;	O
if	O
(	O
!	O
MHD_create_thread_	(*(struct(long,long)),long,*((*(void))->(*(void))),*(void))->(int)
(	O
thread	*(struct(long,long))
,	O
stack_size	long
,	O
&	O
named_thread_starter	(*(void))->(*(void))
,	O
(	O
void	O
*	O
)	O
param	*(struct(*((*(void))->(*(void))),*(void),*(char)))
)	O
)	O
{	O
free	(*(void))->(void)
(	O
param	*(struct(*((*(void))->(*(void))),*(void),*(char)))
)	O
;	O
return	O
0	int
;	O
}	O
return	O
!	O
0	int
;	O
}	O
