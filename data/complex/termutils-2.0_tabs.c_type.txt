char	O
*	O
fgetline	()->(*(char))
(	O
)	O
;	O
void	O
error	()->(void)
(	O
)	O
;	O
extern	O
char	O
*	O
version_string	*(char)
;	O
char	O
*	O
program_name	*(char)
;	O
static	O
int	O
term_width	int
;	O
static	O
int	O
a_to_i	(*(char),*(*(char)),int)->(int)
(	O
spec	*(char)
,	O
next	*(*(char))
,	O
stop	int
)	O
const	O
char	O
*	O
spec	*(char)
;	O
const	O
char	O
*	O
*	O
next	*(*(char))
;	O
int	O
stop	int
;	O
{	O
int	O
acc	int
;	O
acc	int
=	O
0	int
;	O
while	O
(	O
*	O
spec	*(char)
&&	O
*	O
spec	*(char)
!=	O
stop	int
)	O
{	O
if	O
(	O
*	O
spec	*(char)
>=	O
'0'	O
&&	O
*	O
spec	*(char)
<=	O
'9'	O
)	O
acc	int
=	O
acc	int
*	O
10	int
+	O
*	O
spec	*(char)
++	O
-	O
'0'	O
;	O
else	O
{	O
if	O
(	O
next	*(*(char))
)	O
*	O
next	*(*(char))
=	O
spec	*(char)
;	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
next	*(*(char))
)	O
if	O
(	O
*	O
spec	*(char)
)	O
*	O
next	*(*(char))
=	O
spec	*(char)
+	O
1	int
;	O
else	O
*	O
next	*(*(char))
=	O
spec	*(char)
;	O
return	O
acc	int
;	O
}	O
static	O
char	O
*	O
parse_fspec_line	(*(char),int,*(*(char)))->(*(char))
(	O
line	*(char)
,	O
first	int
,	O
next	*(*(char))
)	O
char	O
*	O
line	*(char)
;	O
int	O
first	int
;	O
char	O
*	O
*	O
next	*(*(char))
;	O
{	O
char	O
*	O
cp	*(char)
;	O
int	O
terminated	int
;	O
if	O
(	O
first	int
)	O
{	O
while	O
(	O
*	O
line	*(char)
)	O
if	O
(	O
line	*(char)
[	O
0	int
]	O
==	O
'<'	O
&&	O
line	*(char)
[	O
1	int
]	O
==	O
':'	O
)	O
break	O
;	O
else	O
line	*(char)
++	O
;	O
if	O
(	O
*	O
line	*(char)
==	O
0	int
)	O
return	O
0	int
;	O
line	*(char)
+=	O
2	int
;	O
}	O
do	O
{	O
while	O
(	O
*	O
line	*(char)
&&	O
(	O
*	O
line	*(char)
==	O
' '	O
||	O
*	O
line	*(char)
==	O
'\t'	O
)	O
)	O
line	*(char)
++	O
;	O
if	O
(	O
*	O
line	*(char)
==	O
0	int
||	O
(	O
*	O
line	*(char)
==	O
':'	O
&&	O
(	O
line	*(char)
[	O
1	int
]	O
==	O
'>'	O
||	O
line	*(char)
[	O
1	int
]	O
==	O
0	int
)	O
)	O
)	O
return	O
0	int
;	O
switch	O
(	O
*	O
line	*(char)
)	O
{	O
case	O
'e'	O
:	O
case	O
'd'	O
:	O
case	O
'm'	O
:	O
case	O
's'	O
:	O
case	O
't'	O
:	O
terminated	int
=	O
0	int
;	O
for	O
(	O
cp	*(char)
=	O
line	*(char)
;	O
*	O
cp	*(char)
;	O
cp	*(char)
++	O
)	O
if	O
(	O
*	O
cp	*(char)
==	O
':'	O
&&	O
cp	*(char)
[	O
1	int
]	O
==	O
'>'	O
)	O
{	O
if	O
(	O
!	O
terminated	int
)	O
{	O
*	O
cp	*(char)
=	O
0	int
;	O
*	O
next	*(*(char))
=	O
0	int
;	O
}	O
return	O
line	*(char)
;	O
}	O
else	O
if	O
(	O
!	O
terminated	int
&&	O
(	O
*	O
cp	*(char)
==	O
' '	O
||	O
*	O
cp	*(char)
==	O
'\t'	O
)	O
)	O
{	O
*	O
cp	*(char)
=	O
0	int
;	O
*	O
next	*(*(char))
=	O
cp	*(char)
+	O
1	int
;	O
terminated	int
=	O
1	int
;	O
}	O
break	O
;	O
default	O
:	O
while	O
(	O
*	O
line	*(char)
&&	O
*	O
line	*(char)
!=	O
' '	O
&&	O
*	O
line	*(char)
!=	O
'\t'	O
&&	O
!	O
(	O
*	O
line	*(char)
==	O
':'	O
&&	O
line	*(char)
[	O
1	int
]	O
==	O
'>'	O
)	O
)	O
line	*(char)
++	O
;	O
if	O
(	O
*	O
line	*(char)
!=	O
' '	O
&&	O
*	O
line	*(char)
!=	O
'\t'	O
)	O
return	O
0	int
;	O
}	O
}	O
while	O
(	O
1	int
)	O
;	O
}	O
static	O
void	O
usage	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)->(void)
(	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
status	int
)	O
FILE	struct
*	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
int	O
status	int
;	O
{	O
static	O
char	O
*	O
specs	array(*(char))
[	O
]	O
=	O
{	O
"n1,n2,...   : Set TAB stops at positions n1,n2,..."	*(char)
,	O
"-number     : Set TAB stops every number columns"	*(char)
,	O
"-C code     : Set TAB stops using canned settings"	*(char)
,	O
"-code       : Set TAB stops using canned settings"	*(char)
,	O
"-F filename : Set TAB stops according to the first line of the file"	*(char)
,	O
"--filename  : Set TAB stops according to the first line of the file"	*(char)
,	O
0	int
,	O
}	O
;	O
char	O
*	O
*	O
p	*(*(char))
;	O
struct	O
fspec_table	struct(*(char),*(int),*(char))
*	O
fstp	*(struct(*(char),*(int),*(char)))
;	O
int	O
ix	int
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Usage: %s [-T termtype] [--terminal=termtype] tabspec\n"	*(char)
,	O
program_name	*(char)
)	O
;	O
for	O
(	O
p	*(*(char))
=	O
specs	array(*(char))
;	O
*	O
p	*(*(char))
;	O
p	*(*(char))
++	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"  %s\n"	*(char)
,	O
*	O
p	*(*(char))
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Canned settings are:\n"	*(char)
)	O
;	O
for	O
(	O
fstp	*(struct(*(char),*(int),*(char)))
=	O
fspec_table	struct(*(char),*(int),*(char))
;	O
fstp	*(struct(*(char),*(int),*(char)))
->	O
code	*(char)
;	O
fstp	*(struct(*(char),*(int),*(char)))
++	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"-%s\t"	*(char)
,	O
fstp	*(struct(*(char),*(int),*(char)))
->	O
code	*(char)
)	O
;	O
for	O
(	O
ix	int
=	O
0	int
;	O
fstp	*(struct(*(char),*(int),*(char)))
->	O
tabs	*(int)
[	O
ix	int
]	O
!=	O
0	int
;	O
ix	int
++	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%d "	*(char)
,	O
fstp	*(struct(*(char),*(int),*(char)))
->	O
tabs	*(int)
[	O
ix	int
]	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(%s)\n"	*(char)
,	O
fstp	*(struct(*(char),*(int),*(char)))
->	O
description	*(char)
)	O
;	O
}	O
exit	(int)->(void)
(	O
status	int
)	O
;	O
}	O
static	O
int	O
parse_tabspec	(*(char),*(int),int)->(int)
(	O
spec	*(char)
,	O
tabs	*(int)
,	O
tabs_length	int
)	O
const	O
char	O
*	O
spec	*(char)
;	O
int	O
*	O
tabs	*(int)
;	O
int	O
tabs_length	int
;	O
{	O
const	O
char	O
*	O
ispec	*(char)
;	O
int	O
tab	int
,	O
ix	int
,	O
width	int
;	O
ispec	*(char)
=	O
spec	*(char)
;	O
if	O
(	O
spec	*(char)
[	O
0	int
]	O
!=	O
'-'	O
)	O
{	O
for	O
(	O
ix	int
=	O
0	int
;	O
ix	int
<	O
tabs_length	int
&&	O
spec	*(char)
[	O
0	int
]	O
!=	O
0	int
;	O
ix	int
++	O
)	O
{	O
if	O
(	O
spec	*(char)
[	O
0	int
]	O
==	O
'+'	O
)	O
{	O
if	O
(	O
ix	int
==	O
0	int
)	O
goto	O
bogus	O
;	O
tab	int
=	O
a_to_i	(*(char),*(*(char)),int)->(int)
(	O
spec	*(char)
+	O
1	int
,	O
&	O
spec	*(char)
,	O
','	O
)	O
;	O
if	O
(	O
tab	int
<=	O
0	int
)	O
goto	O
bogus	O
;	O
tab	int
=	O
tabs	*(int)
[	O
ix	int
-	O
1	int
]	O
+	O
tab	int
;	O
}	O
else	O
tab	int
=	O
a_to_i	(*(char),*(*(char)),int)->(int)
(	O
spec	*(char)
,	O
&	O
spec	*(char)
,	O
','	O
)	O
;	O
if	O
(	O
tab	int
<=	O
0	int
||	O
(	O
ix	int
>	O
0	int
&&	O
tab	int
<	O
tabs	*(int)
[	O
ix	int
-	O
1	int
]	O
)	O
)	O
goto	O
bogus	O
;	O
tabs	*(int)
[	O
ix	int
]	O
=	O
tab	int
;	O
}	O
return	O
ix	int
;	O
}	O
else	O
{	O
if	O
(	O
spec	*(char)
[	O
1	int
]	O
>=	O
'0'	O
&&	O
spec	*(char)
[	O
1	int
]	O
<=	O
'9'	O
)	O
{	O
width	int
=	O
a_to_i	(*(char),*(*(char)),int)->(int)
(	O
&	O
spec	*(char)
[	O
1	int
]	O
,	O
spec	*(char)
,	O
0	int
)	O
;	O
if	O
(	O
width	int
<	O
0	int
)	O
goto	O
bogus	O
;	O
else	O
if	O
(	O
width	int
==	O
0	int
)	O
return	O
0	int
;	O
else	O
{	O
for	O
(	O
tab	int
=	O
1	int
,	O
ix	int
=	O
0	int
;	O
ix	int
<	O
tabs_length	int
&&	O
tab	int
<=	O
term_width	int
;	O
tab	int
+=	O
width	int
,	O
ix	int
++	O
)	O
tabs	*(int)
[	O
ix	int
]	O
=	O
tab	int
;	O
return	O
ix	int
;	O
}	O
}	O
else	O
{	O
for	O
(	O
tab	int
=	O
0	int
;	O
fspec_table	struct(*(char),*(int),*(char))
[	O
tab	int
]	O
.	O
code	*(char)
!=	O
0	int
;	O
tab	int
++	O
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
fspec_table	struct(*(char),*(int),*(char))
[	O
tab	int
]	O
.	O
code	*(char)
,	O
&	O
spec	*(char)
[	O
1	int
]	O
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
fspec_table	struct(*(char),*(int),*(char))
[	O
tab	int
]	O
.	O
code	*(char)
!=	O
0	int
)	O
{	O
for	O
(	O
ix	int
=	O
0	int
;	O
ix	int
<	O
tabs_length	int
;	O
ix	int
++	O
)	O
{	O
tabs	*(int)
[	O
ix	int
]	O
=	O
fspec_table	struct(*(char),*(int),*(char))
[	O
tab	int
]	O
.	O
tabs	*(int)
[	O
ix	int
]	O
;	O
if	O
(	O
tabs	*(int)
[	O
ix	int
]	O
<=	O
0	int
)	O
break	O
;	O
}	O
return	O
ix	int
;	O
}	O
else	O
goto	O
bogus	O
;	O
}	O
}	O
bogus	O
:	O
error	()->(void)
(	O
0	int
,	O
0	int
,	O
"invalid tab specification `%s'"	*(char)
,	O
ispec	*(char)
)	O
;	O
usage	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)->(void)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
1	int
)	O
;	O
}	O
static	O
int	O
tcputchar	(int)->(int)
(	O
c	char
)	O
char	O
c	char
;	O
{	O
putchar	(int)->(int)
(	O
c	char
)	O
;	O
return	O
c	char
;	O
}	O
static	O
void	O
set_tabstops	(*(char),*(int),int)->(void)
(	O
term	*(char)
,	O
tabs	*(int)
,	O
numtabs	int
)	O
char	O
*	O
term	*(char)
;	O
int	O
*	O
tabs	*(int)
;	O
int	O
numtabs	int
;	O
{	O
char	O
*	O
cr	*(char)
,	O
*	O
ct	*(char)
,	O
*	O
st	*(char)
;	O
int	O
lines	int
,	O
tab	int
,	O
ix	int
,	O
col	int
;	O
char	O
*	O
noclear	*(char)
=	O
"cannot clear tabs on terminal %s"	*(char)
;	O
char	O
*	O
noset	*(char)
=	O
"cannot set nonstandard hardware tabs on terminal %s"	*(char)
;	O
ct	*(char)
=	O
tgetstr	(*(char),*(*(char)))->(*(char))
(	O
"ct"	*(char)
,	O
0	int
)	O
;	O
lines	int
=	O
tgetnum	(*(char))->(int)
(	O
"li"	*(char)
)	O
;	O
if	O
(	O
lines	int
<	O
0	int
)	O
lines	int
=	O
25	int
;	O
if	O
(	O
numtabs	int
==	O
0	int
)	O
{	O
if	O
(	O
ct	*(char)
==	O
0	int
)	O
error	()->(void)
(	O
1	int
,	O
0	int
,	O
noclear	*(char)
,	O
term	*(char)
)	O
;	O
}	O
else	O
{	O
if	O
(	O
(	O
ct	*(char)
==	O
0	int
)	O
||	O
(	O
st	*(char)
=	O
tgetstr	(*(char),*(*(char)))->(*(char))
(	O
"st"	*(char)
,	O
0	int
)	O
)	O
==	O
0	int
)	O
{	O
for	O
(	O
tab	int
=	O
1	int
,	O
ix	int
=	O
0	int
;	O
ix	int
<	O
numtabs	int
;	O
ix	int
++	O
,	O
tab	int
+=	O
8	int
)	O
{	O
if	O
(	O
tabs	*(int)
[	O
ix	int
]	O
!=	O
tab	int
)	O
error	()->(void)
(	O
1	int
,	O
0	int
,	O
noset	*(char)
,	O
term	*(char)
)	O
;	O
}	O
return	O
;	O
}	O
}	O
cr	*(char)
=	O
tgetstr	(*(char),*(*(char)))->(*(char))
(	O
"cr"	*(char)
,	O
0	int
)	O
;	O
if	O
(	O
cr	*(char)
==	O
0	int
)	O
cr	*(char)
=	O
"\r"	*(char)
;	O
translations_off	()->(void)
(	O
)	O
;	O
tputs	(*(char),int,*((int)->(int)))->(void)
(	O
cr	*(char)
,	O
lines	int
,	O
tcputchar	(int)->(int)
)	O
;	O
tputs	(*(char),int,*((int)->(int)))->(void)
(	O
ct	*(char)
,	O
lines	int
,	O
tcputchar	(int)->(int)
)	O
;	O
tputs	(*(char),int,*((int)->(int)))->(void)
(	O
cr	*(char)
,	O
lines	int
,	O
tcputchar	(int)->(int)
)	O
;	O
if	O
(	O
numtabs	int
)	O
{	O
for	O
(	O
ix	int
=	O
0	int
,	O
col	int
=	O
1	int
;	O
ix	int
<	O
numtabs	int
&&	O
col	int
<=	O
term_width	int
;	O
ix	int
++	O
)	O
{	O
while	O
(	O
tabs	*(int)
[	O
ix	int
]	O
>	O
col	int
&&	O
col	int
<=	O
term_width	int
)	O
{	O
putchar	(int)->(int)
(	O
' '	O
)	O
;	O
col	int
++	O
;	O
}	O
tputs	(*(char),int,*((int)->(int)))->(void)
(	O
st	*(char)
,	O
1	int
,	O
tcputchar	(int)->(int)
)	O
;	O
}	O
tputs	(*(char),int,*((int)->(int)))->(void)
(	O
cr	*(char)
,	O
lines	int
,	O
tcputchar	(int)->(int)
)	O
;	O
}	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
restore_translations	()->(void)
(	O
)	O
;	O
disable_xtabs	()->(void)
(	O
)	O
;	O
}	O
static	O
void	O
prepare_termcap	(*(char))->(void)
(	O
term	*(char)
)	O
char	O
*	O
term	*(char)
;	O
{	O
char	O
*	O
tc_pc	*(char)
;	O
if	O
(	O
term	*(char)
==	O
NULL	O
)	O
error	()->(void)
(	O
1	int
,	O
0	int
,	O
"No value for $TERM and no -T specified"	*(char)
)	O
;	O
switch	O
(	O
tgetent	(*(char),*(char))->(int)
(	O
0	int
,	O
term	*(char)
)	O
)	O
{	O
case	O
0	int
:	O
error	()->(void)
(	O
1	int
,	O
0	int
,	O
"Unknown terminal type `%s'"	*(char)
,	O
term	*(char)
)	O
;	O
case	O
(	O
-	O
1	int
)	O
:	O
error	()->(void)
(	O
1	int
,	O
0	int
,	O
"No termcap database"	*(char)
)	O
;	O
}	O
tc_pc	*(char)
=	O
tgetstr	(*(char),*(*(char)))->(*(char))
(	O
"pc"	*(char)
,	O
0	int
)	O
;	O
PC	char
=	O
tc_pc	*(char)
?	O
*	O
tc_pc	*(char)
:	O
0	int
;	O
term_width	int
=	O
tgetnum	(*(char))->(int)
(	O
"co"	*(char)
)	O
;	O
if	O
(	O
term_width	int
<=	O
0	int
)	O
term_width	int
=	O
80	int
;	O
}	O
void	O
version	()->(void)
(	O
)	O
{	O
printf	(*(char))->(int)
(	O
"GNU tabs version %s\n"	*(char)
,	O
version_string	*(char)
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
static	O
char	O
*	O
optval	*(char)
;	O
enum	O
tabs_args	enum(int,int,int,int,int,int,int,int)
{	O
arg_termtype	int
,	O
arg_help	int
,	O
arg_version	int
,	O
arg_canned_tabs	int
,	O
arg_file	int
,	O
arg_every_n_column	int
,	O
arg_tablist	int
,	O
arg_bad	int
}	O
;	O
static	O
enum	O
tabs_args	enum(int,int,int,int,int,int,int,int)
parse_an_arg	(*(char))->(enum(int,int,int,int,int,int,int,int))
(	O
arg	*(char)
)	O
char	O
*	O
arg	*(char)
;	O
{	O
int	O
arglen	int
;	O
switch	O
(	O
arg	*(char)
[	O
0	int
]	O
)	O
{	O
case	O
'-'	O
:	O
switch	O
(	O
arg	*(char)
[	O
1	int
]	O
)	O
{	O
case	O
'T'	O
:	O
if	O
(	O
arg	*(char)
[	O
2	int
]	O
)	O
optval	*(char)
=	O
&	O
arg	*(char)
[	O
2	int
]	O
;	O
else	O
optval	*(char)
=	O
0	int
;	O
return	O
arg_termtype	int
;	O
case	O
'-'	O
:	O
switch	O
(	O
arg	*(char)
[	O
2	int
]	O
)	O
{	O
case	O
't'	O
:	O
case	O
'h'	O
:	O
case	O
'v'	O
:	O
case	O
'f'	O
:	O
case	O
'c'	O
:	O
optval	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
&	O
arg	*(char)
[	O
3	int
]	O
,	O
'='	O
)	O
;	O
if	O
(	O
optval	*(char)
)	O
{	O
*	O
optval	*(char)
++	O
=	O
0	int
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
&	O
arg	*(char)
[	O
2	int
]	O
,	O
"terminal"	*(char)
,	O
optval	*(char)
-	O
&	O
arg	*(char)
[	O
3	int
]	O
)	O
==	O
0	int
)	O
return	O
arg_termtype	int
;	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
&	O
arg	*(char)
[	O
2	int
]	O
,	O
"file"	*(char)
,	O
optval	*(char)
-	O
&	O
arg	*(char)
[	O
3	int
]	O
)	O
==	O
0	int
)	O
return	O
arg_file	int
;	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
&	O
arg	*(char)
[	O
2	int
]	O
,	O
"code"	*(char)
,	O
optval	*(char)
-	O
&	O
arg	*(char)
[	O
3	int
]	O
)	O
==	O
0	int
)	O
return	O
arg_canned_tabs	int
;	O
optval	*(char)
[	O
-	O
1	int
]	O
=	O
'='	O
;	O
}	O
else	O
{	O
optval	*(char)
=	O
0	int
;	O
arglen	int
=	O
strlen	(*(char))->(long)
(	O
&	O
arg	*(char)
[	O
2	int
]	O
)	O
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
&	O
arg	*(char)
[	O
2	int
]	O
,	O
"terminal"	*(char)
,	O
arglen	int
)	O
==	O
0	int
)	O
return	O
arg_termtype	int
;	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
&	O
arg	*(char)
[	O
2	int
]	O
,	O
"file"	*(char)
,	O
arglen	int
)	O
==	O
0	int
)	O
return	O
arg_file	int
;	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
&	O
arg	*(char)
[	O
2	int
]	O
,	O
"code"	*(char)
,	O
arglen	int
)	O
==	O
0	int
)	O
return	O
arg_canned_tabs	int
;	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
&	O
arg	*(char)
[	O
2	int
]	O
,	O
"version"	*(char)
,	O
arglen	int
)	O
==	O
0	int
)	O
return	O
arg_version	int
;	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
&	O
arg	*(char)
[	O
2	int
]	O
,	O
"help"	*(char)
,	O
arglen	int
)	O
==	O
0	int
)	O
return	O
arg_help	int
;	O
}	O
default	O
:	O
optval	*(char)
=	O
&	O
arg	*(char)
[	O
2	int
]	O
;	O
return	O
arg_file	int
;	O
}	O
break	O
;	O
case	O
'F'	O
:	O
if	O
(	O
arg	*(char)
[	O
2	int
]	O
)	O
optval	*(char)
=	O
&	O
arg	*(char)
[	O
2	int
]	O
;	O
else	O
optval	*(char)
=	O
0	int
;	O
return	O
arg_file	int
;	O
case	O
'C'	O
:	O
if	O
(	O
arg	*(char)
[	O
2	int
]	O
)	O
optval	*(char)
=	O
&	O
arg	*(char)
[	O
2	int
]	O
;	O
else	O
optval	*(char)
=	O
0	int
;	O
return	O
arg_canned_tabs	int
;	O
case	O
'h'	O
:	O
return	O
arg_help	int
;	O
case	O
'V'	O
:	O
return	O
arg_version	int
;	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
{	O
char	O
*	O
cp	*(char)
;	O
int	O
bad	int
;	O
for	O
(	O
bad	int
=	O
0	int
,	O
cp	*(char)
=	O
&	O
arg	*(char)
[	O
1	int
]	O
;	O
*	O
cp	*(char)
;	O
cp	*(char)
++	O
)	O
if	O
(	O
!	O
(	O
*	O
cp	*(char)
>=	O
'0'	O
&&	O
*	O
cp	*(char)
<=	O
'9'	O
)	O
)	O
{	O
bad	int
++	O
;	O
break	O
;	O
}	O
if	O
(	O
bad	int
==	O
0	int
)	O
{	O
optval	*(char)
=	O
&	O
arg	*(char)
[	O
1	int
]	O
;	O
return	O
arg_every_n_column	int
;	O
}	O
}	O
default	O
:	O
optval	*(char)
=	O
&	O
arg	*(char)
[	O
1	int
]	O
;	O
return	O
arg_canned_tabs	int
;	O
}	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
optval	*(char)
=	O
arg	*(char)
;	O
return	O
arg_tablist	int
;	O
default	O
:	O
return	O
arg_bad	int
;	O
}	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
argc	int
,	O
argv	*(*(char))
)	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	*(*(char))
;	O
{	O
int	O
*	O
tabs	*(int)
;	O
int	O
every	int
;	O
int	O
numtabs	int
;	O
int	O
opt	int
;	O
char	O
*	O
tabspec	*(char)
;	O
enum	O
{	O
spec_normal	int
,	O
spec_every	int
,	O
spec_file	int
}	O
tabspec_type	enum(int,int,int)
;	O
char	O
*	O
nonunique	*(char)
=	O
"More than one tabspec specified"	*(char)
;	O
char	O
*	O
term	*(char)
;	O
char	O
*	O
required	*(char)
=	O
"option requires an argument -- %c"	*(char)
;	O
program_name	*(char)
=	O
argv	*(*(char))
[	O
0	int
]	O
;	O
term	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"TERM"	*(char)
)	O
;	O
tabs	*(int)
=	O
0	int
;	O
tabspec	*(char)
=	O
0	int
;	O
for	O
(	O
opt	int
=	O
1	int
;	O
opt	int
<	O
argc	int
;	O
opt	int
++	O
)	O
{	O
switch	O
(	O
parse_an_arg	(*(char))->(enum(int,int,int,int,int,int,int,int))
(	O
argv	*(*(char))
[	O
opt	int
]	O
)	O
)	O
{	O
case	O
arg_termtype	int
:	O
if	O
(	O
optval	*(char)
)	O
term	*(char)
=	O
optval	*(char)
;	O
else	O
if	O
(	O
opt	int
==	O
argc	int
-	O
1	int
)	O
error	()->(void)
(	O
1	int
,	O
0	int
,	O
required	*(char)
,	O
'T'	O
)	O
;	O
else	O
term	*(char)
=	O
argv	*(*(char))
[	O
++	O
opt	int
]	O
;	O
break	O
;	O
case	O
arg_help	int
:	O
usage	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)->(void)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
0	int
)	O
;	O
case	O
arg_version	int
:	O
version	()->(void)
(	O
)	O
;	O
case	O
arg_every_n_column	int
:	O
if	O
(	O
tabspec	*(char)
)	O
error	()->(void)
(	O
1	int
,	O
0	int
,	O
nonunique	*(char)
)	O
;	O
tabspec	*(char)
=	O
optval	*(char)
;	O
tabspec_type	enum(int,int,int)
=	O
spec_every	int
;	O
break	O
;	O
case	O
arg_canned_tabs	int
:	O
case	O
arg_tablist	int
:	O
if	O
(	O
tabspec	*(char)
)	O
error	()->(void)
(	O
1	int
,	O
0	int
,	O
nonunique	*(char)
)	O
;	O
if	O
(	O
optval	*(char)
)	O
tabspec	*(char)
=	O
optval	*(char)
;	O
else	O
if	O
(	O
opt	int
==	O
argc	int
-	O
1	int
)	O
error	()->(void)
(	O
1	int
,	O
0	int
,	O
required	*(char)
,	O
'C'	O
)	O
;	O
else	O
tabspec	*(char)
=	O
argv	*(*(char))
[	O
++	O
opt	int
]	O
;	O
tabspec_type	enum(int,int,int)
=	O
spec_normal	int
;	O
break	O
;	O
case	O
arg_file	int
:	O
if	O
(	O
tabspec	*(char)
)	O
error	()->(void)
(	O
1	int
,	O
0	int
,	O
nonunique	*(char)
)	O
;	O
if	O
(	O
optval	*(char)
)	O
tabspec	*(char)
=	O
optval	*(char)
;	O
else	O
if	O
(	O
opt	int
==	O
argc	int
-	O
1	int
)	O
error	()->(void)
(	O
1	int
,	O
0	int
,	O
required	*(char)
,	O
'f'	O
)	O
;	O
else	O
tabspec	*(char)
=	O
argv	*(*(char))
[	O
++	O
opt	int
]	O
;	O
tabspec_type	enum(int,int,int)
=	O
spec_file	int
;	O
break	O
;	O
case	O
arg_bad	int
:	O
default	O
:	O
usage	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)->(void)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
tabspec	*(char)
==	O
0	int
)	O
usage	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)->(void)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
1	int
)	O
;	O
if	O
(	O
(	O
term	*(char)
==	O
0	int
)	O
||	O
(	O
term	*(char)
[	O
0	int
]	O
==	O
0	int
)	O
)	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
prepare_termcap	(*(char))->(void)
(	O
term	*(char)
)	O
;	O
tabs	*(int)
=	O
(	O
int	O
*	O
)	O
xmalloc	()->(int)
(	O
sizeof	O
(	O
int	O
)	O
*	O
term_width	int
)	O
;	O
switch	O
(	O
tabspec_type	enum(int,int,int)
)	O
{	O
case	O
spec_every	int
:	O
every	int
=	O
a_to_i	(*(char),*(*(char)),int)->(int)
(	O
tabspec	*(char)
,	O
0	int
,	O
0	int
)	O
;	O
every_n_column	O
:	O
if	O
(	O
every	int
==	O
0	int
)	O
numtabs	int
=	O
0	int
;	O
else	O
{	O
int	O
col	int
,	O
ix	int
;	O
numtabs	int
=	O
term_width	int
/	O
every	int
;	O
for	O
(	O
ix	int
=	O
0	int
,	O
col	int
=	O
1	int
;	O
col	int
<=	O
term_width	int
;	O
ix	int
++	O
,	O
col	int
+=	O
every	int
)	O
tabs	*(int)
[	O
ix	int
]	O
=	O
col	int
;	O
}	O
break	O
;	O
case	O
spec_file	int
:	O
{	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
char	O
*	O
line	*(char)
;	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
tabspec	*(char)
,	O
"r"	*(char)
)	O
;	O
if	O
(	O
!	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
error	()->(void)
(	O
0	int
,	O
errno	O
,	O
"cannot open `%s'"	*(char)
,	O
tabspec	*(char)
)	O
;	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
line	*(char)
=	O
fgetline	()->(*(char))
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
line	*(char)
==	O
0	int
)	O
{	O
every	int
=	O
8	int
;	O
goto	O
every_n_column	O
;	O
}	O
else	O
{	O
int	O
first	int
;	O
char	O
*	O
next	*(*(char))
;	O
first	int
=	O
1	int
;	O
tabspec	*(char)
=	O
line	*(char)
;	O
while	O
(	O
(	O
tabspec	*(char)
=	O
parse_fspec_line	(*(char),int,*(*(char)))->(*(char))
(	O
tabspec	*(char)
,	O
first	int
,	O
&	O
next	*(*(char))
)	O
)	O
!=	O
0	int
)	O
{	O
first	int
=	O
0	int
;	O
if	O
(	O
*	O
tabspec	*(char)
==	O
't'	O
)	O
{	O
numtabs	int
=	O
parse_tabspec	(*(char),*(int),int)->(int)
(	O
tabspec	*(char)
+	O
1	int
,	O
tabs	*(int)
,	O
term_width	int
)	O
;	O
free	(*(void))->(void)
(	O
line	*(char)
)	O
;	O
goto	O
set_tabs	O
;	O
}	O
else	O
tabspec	*(char)
=	O
next	*(*(char))
;	O
}	O
free	(*(void))->(void)
(	O
line	*(char)
)	O
;	O
every	int
=	O
8	int
;	O
goto	O
every_n_column	O
;	O
}	O
}	O
break	O
;	O
default	O
:	O
numtabs	int
=	O
parse_tabspec	(*(char),*(int),int)->(int)
(	O
tabspec	*(char)
,	O
tabs	*(int)
,	O
term_width	int
)	O
;	O
if	O
(	O
numtabs	int
<	O
0	int
)	O
usage	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)->(void)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
1	int
)	O
;	O
break	O
;	O
}	O
set_tabs	O
:	O
set_tabstops	(*(char),*(int),int)->(void)
(	O
term	*(char)
,	O
tabs	*(int)
,	O
numtabs	int
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
