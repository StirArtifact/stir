Gc_rc	enum(int,int,int,int,int,int,int,int,int)
gc_pbkdf2_sha1	(*(char),long,*(char),long,int,*(char),long)->(enum(int,int,int,int,int,int,int,int,int))
(	O
const	O
char	O
*	O
P	*(char)
,	O
size_t	long
Plen	long
,	O
const	O
char	O
*	O
S	*(char)
,	O
size_t	long
Slen	long
,	O
unsigned	O
int	O
c	int
,	O
char	O
*	O
DK	*(char)
,	O
size_t	long
dkLen	long
)	O
{	O
unsigned	O
int	O
hLen	int
=	O
20	int
;	O
char	O
U	array(char)
[	O
20	int
]	O
;	O
char	O
T	array(char)
[	O
20	int
]	O
;	O
unsigned	O
int	O
u	int
;	O
unsigned	O
int	O
l	int
;	O
unsigned	O
int	O
r	int
;	O
unsigned	O
int	O
i	int
;	O
unsigned	O
int	O
k	int
;	O
int	O
rc	int
;	O
char	O
*	O
tmp	*(char)
;	O
size_t	long
tmplen	long
=	O
Slen	long
+	O
4	int
;	O
if	O
(	O
c	int
==	O
0	int
)	O
return	O
GC_PKCS5_INVALID_ITERATION_COUNT	int
;	O
if	O
(	O
dkLen	long
==	O
0	int
)	O
return	O
GC_PKCS5_INVALID_DERIVED_KEY_LENGTH	int
;	O
if	O
(	O
dkLen	long
>	O
4294967295U	int
)	O
return	O
GC_PKCS5_DERIVED_KEY_TOO_LONG	int
;	O
l	int
=	O
(	O
(	O
dkLen	long
-	O
1	int
)	O
/	O
hLen	int
)	O
+	O
1	int
;	O
r	int
=	O
dkLen	long
-	O
(	O
l	int
-	O
1	int
)	O
*	O
hLen	int
;	O
tmp	*(char)
=	O
malloc	(long)->(*(void))
(	O
tmplen	long
)	O
;	O
if	O
(	O
tmp	*(char)
==	O
NULL	O
)	O
return	O
GC_MALLOC_ERROR	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
tmp	*(char)
,	O
S	*(char)
,	O
Slen	long
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
l	int
;	O
i	int
++	O
)	O
{	O
memset	(*(void),int,long)->(*(void))
(	O
T	array(char)
,	O
0	int
,	O
hLen	int
)	O
;	O
for	O
(	O
u	int
=	O
1	int
;	O
u	int
<=	O
c	int
;	O
u	int
++	O
)	O
{	O
if	O
(	O
u	int
==	O
1	int
)	O
{	O
tmp	*(char)
[	O
Slen	long
+	O
0	int
]	O
=	O
(	O
i	int
&	O
0xff000000	int
)	O
>>	O
24	int
;	O
tmp	*(char)
[	O
Slen	long
+	O
1	int
]	O
=	O
(	O
i	int
&	O
0x00ff0000	int
)	O
>>	O
16	int
;	O
tmp	*(char)
[	O
Slen	long
+	O
2	int
]	O
=	O
(	O
i	int
&	O
0x0000ff00	int
)	O
>>	O
8	int
;	O
tmp	*(char)
[	O
Slen	long
+	O
3	int
]	O
=	O
(	O
i	int
&	O
0x000000ff	int
)	O
>>	O
0	int
;	O
rc	int
=	O
gc_hmac_sha1	(*(void),long,*(void),long,*(char))->(enum(int,int,int,int,int,int,int,int,int))
(	O
P	*(char)
,	O
Plen	long
,	O
tmp	*(char)
,	O
tmplen	long
,	O
U	array(char)
)	O
;	O
}	O
else	O
rc	int
=	O
gc_hmac_sha1	(*(void),long,*(void),long,*(char))->(enum(int,int,int,int,int,int,int,int,int))
(	O
P	*(char)
,	O
Plen	long
,	O
U	array(char)
,	O
hLen	int
,	O
U	array(char)
)	O
;	O
if	O
(	O
rc	int
!=	O
GC_OK	int
)	O
{	O
free	(*(void))->(void)
(	O
tmp	*(char)
)	O
;	O
return	O
rc	int
;	O
}	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
hLen	int
;	O
k	int
++	O
)	O
T	array(char)
[	O
k	int
]	O
^=	O
U	array(char)
[	O
k	int
]	O
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
DK	*(char)
+	O
(	O
i	int
-	O
1	int
)	O
*	O
hLen	int
,	O
T	array(char)
,	O
i	int
==	O
l	int
?	O
r	int
:	O
hLen	int
)	O
;	O
}	O
free	(*(void))->(void)
(	O
tmp	*(char)
)	O
;	O
return	O
GC_OK	int
;	O
}	O
