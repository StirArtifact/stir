static	O
char	O
*	O
mailer_url_default	*(char)
;	O
int	O
mu_mailer_set_url_default	(*(char))->(int)
(	O
const	O
char	O
*	O
url	*(struct)
)	O
{	O
char	O
*	O
n	long
=	O
NULL	O
;	O
if	O
(	O
!	O
url	*(struct)
)	O
return	O
EINVAL	int
;	O
if	O
(	O
(	O
n	long
=	O
strdup	(*(char))->(*(char))
(	O
url	*(struct)
)	O
)	O
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
if	O
(	O
mailer_url_default	*(char)
)	O
free	(*(void))->(void)
(	O
mailer_url_default	*(char)
)	O
;	O
mailer_url_default	*(char)
=	O
n	long
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailer_get_url_default	(*(*(char)))->(int)
(	O
const	O
char	O
*	O
*	O
url	*(struct)
)	O
{	O
if	O
(	O
!	O
url	*(struct)
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mailer_url_default	*(char)
)	O
*	O
url	*(struct)
=	O
mailer_url_default	*(char)
;	O
else	O
*	O
url	*(struct)
=	O
MAILER_URL_DEFAULT	*(char)
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailer_create_from_url	(*(*(struct)),*(struct))->(int)
(	O
mu_mailer_t	*(struct)
*	O
pmailer	*(*(struct))
,	O
mu_url_t	*(struct)
url	*(struct)
)	O
{	O
mu_record_t	*(struct)
record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
;	O
if	O
(	O
mu_registrar_lookup_url	(*(struct),int,*(*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int))))),*(int))->(int)
(	O
url	*(struct)
,	O
MU_FOLDER_ATTRIBUTE_FILE	int
,	O
&	O
record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
,	O
NULL	O
)	O
==	O
0	int
)	O
{	O
int	O
(	O
*	O
m_init	*((*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))))->(int))
)	O
(	O
mu_mailer_t	*(struct)
)	O
=	O
NULL	O
;	O
mu_record_get_mailer	(*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(*((*(struct`))->(int))))->(int)
(	O
record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
,	O
&	O
m_init	*((*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))))->(int))
)	O
;	O
if	O
(	O
m_init	*((*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))))->(int))
)	O
{	O
int	O
status	int
;	O
mu_mailer_t	*(struct)
mailer	*(struct)
;	O
int	O
(	O
*	O
u_init	*((*(struct))->(int))
)	O
(	O
mu_url_t	*(struct)
)	O
=	O
NULL	O
;	O
mailer	*(struct)
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
mailer	*(struct)
)	O
)	O
;	O
if	O
(	O
mailer	*(struct)
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
status	int
=	O
mu_monitor_create	(*(*(struct(*(void),*(void),int,int))),int,*(void))->(int)
(	O
&	O
mailer	*(struct)
->	O
monitor	*(struct(*(void),*(void),int,int))
,	O
0	int
,	O
mailer	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_mailer_destroy	(*(*(struct)))->(void)
(	O
&	O
mailer	*(struct)
)	O
;	O
return	O
status	int
;	O
}	O
status	int
=	O
m_init	*((*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))))->(int))
(	O
mailer	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_mailer_destroy	(*(*(struct)))->(void)
(	O
&	O
mailer	*(struct)
)	O
;	O
return	O
status	int
;	O
}	O
mu_record_get_url	(*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(*((*(struct`))->(int))))->(int)
(	O
record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
,	O
&	O
u_init	*((*(struct))->(int))
)	O
;	O
if	O
(	O
u_init	*((*(struct))->(int))
&&	O
(	O
status	int
=	O
u_init	*((*(struct))->(int))
(	O
url	*(struct)
)	O
)	O
!=	O
0	int
)	O
{	O
mu_mailer_destroy	(*(*(struct)))->(void)
(	O
&	O
mailer	*(struct)
)	O
;	O
return	O
status	int
;	O
}	O
mailer	*(struct)
->	O
url	*(struct)
=	O
url	*(struct)
;	O
*	O
pmailer	*(*(struct))
=	O
mailer	*(struct)
;	O
return	O
status	int
;	O
}	O
}	O
return	O
MU_ERR_MAILER_BAD_URL	O
;	O
}	O
int	O
mu_mailer_create	(*(*(struct)),*(char))->(int)
(	O
mu_mailer_t	*(struct)
*	O
pmailer	*(*(struct))
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
int	O
status	int
;	O
mu_url_t	*(struct)
url	*(struct)
;	O
if	O
(	O
name	*(char)
==	O
NULL	O
)	O
mu_mailer_get_url_default	(*(*(char)))->(int)
(	O
&	O
name	*(char)
)	O
;	O
status	int
=	O
mu_url_create	(*(*(struct)),*(char))->(int)
(	O
&	O
url	*(struct)
,	O
name	*(char)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
mu_mailer_create_from_url	(*(*(struct)),*(struct))->(int)
(	O
pmailer	*(*(struct))
,	O
url	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
mu_url_destroy	(*(*(struct)))->(void)
(	O
&	O
url	*(struct)
)	O
;	O
return	O
status	int
;	O
}	O
void	O
mu_mailer_destroy	(*(*(struct)))->(void)
(	O
mu_mailer_t	*(struct)
*	O
pmailer	*(*(struct))
)	O
{	O
if	O
(	O
pmailer	*(*(struct))
&&	O
*	O
pmailer	*(*(struct))
)	O
{	O
mu_mailer_t	*(struct)
mailer	*(struct)
=	O
*	O
pmailer	*(*(struct))
;	O
mu_monitor_t	*(struct(*(void),*(void),int,int))
monitor	*(struct(*(void),*(void),int,int))
=	O
mailer	*(struct)
->	O
monitor	*(struct(*(void),*(void),int,int))
;	O
if	O
(	O
mailer	*(struct)
->	O
observable	*(struct)
)	O
{	O
mu_observable_notify	(*(struct),int,*(void))->(int)
(	O
mailer	*(struct)
->	O
observable	*(struct)
,	O
MU_EVT_MAILER_DESTROY	int
,	O
mailer	*(struct)
)	O
;	O
mu_observable_destroy	(*(*(struct)),*(void))->(void)
(	O
&	O
mailer	*(struct)
->	O
observable	*(struct)
,	O
mailer	*(struct)
)	O
;	O
}	O
if	O
(	O
mailer	*(struct)
->	O
_destroy	*((*(struct),*(void))->(int))
)	O
mailer	*(struct)
->	O
_destroy	*((*(struct),*(void))->(int))
(	O
mailer	*(struct)
)	O
;	O
mu_monitor_wrlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
if	O
(	O
mailer	*(struct)
->	O
stream	*(struct)
)	O
{	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
mailer	*(struct)
->	O
stream	*(struct)
)	O
;	O
}	O
if	O
(	O
mailer	*(struct)
->	O
url	*(struct)
)	O
mu_url_destroy	(*(*(struct)))->(void)
(	O
&	O
(	O
mailer	*(struct)
->	O
url	*(struct)
)	O
)	O
;	O
if	O
(	O
mailer	*(struct)
->	O
property	*(struct)
)	O
mu_property_destroy	(*(*(struct)))->(void)
(	O
&	O
mailer	*(struct)
->	O
property	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
mailer	*(struct)
)	O
;	O
*	O
pmailer	*(*(struct))
=	O
NULL	O
;	O
mu_monitor_unlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
mu_monitor_destroy	(*(*(struct(*(void),*(void),int,int))),*(void))->(void)
(	O
&	O
monitor	*(struct(*(void),*(void),int,int))
,	O
mailer	*(struct)
)	O
;	O
}	O
}	O
int	O
mu_mailer_open	(*(struct),int)->(int)
(	O
mu_mailer_t	*(struct)
mailer	*(struct)
,	O
int	O
flag	int
)	O
{	O
if	O
(	O
mailer	*(struct)
==	O
NULL	O
||	O
mailer	*(struct)
->	O
_open	*((*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),int)->(int))
==	O
NULL	O
)	O
return	O
ENOSYS	int
;	O
return	O
mailer	*(struct)
->	O
_open	*((*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),int)->(int))
(	O
mailer	*(struct)
,	O
flag	int
)	O
;	O
}	O
int	O
mu_mailer_close	(*(struct))->(int)
(	O
mu_mailer_t	*(struct)
mailer	*(struct)
)	O
{	O
if	O
(	O
mailer	*(struct)
==	O
NULL	O
||	O
mailer	*(struct)
->	O
_close	*((*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))))->(int))
==	O
NULL	O
)	O
return	O
ENOSYS	int
;	O
return	O
mailer	*(struct)
->	O
_close	*((*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))))->(int))
(	O
mailer	*(struct)
)	O
;	O
}	O
int	O
mu_mailer_check_from	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
mu_address_t	*(struct)
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
)	O
{	O
size_t	long
n	long
=	O
0	int
;	O
if	O
(	O
!	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mu_address_get_count	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(long))->(int)
(	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
&	O
n	long
)	O
||	O
n	long
!=	O
1	int
)	O
return	O
MU_ERR_MAILER_BAD_FROM	O
;	O
if	O
(	O
mu_address_get_email_count	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(long))->(int)
(	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
&	O
n	long
)	O
||	O
n	long
==	O
0	int
)	O
return	O
MU_ERR_MAILER_BAD_FROM	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailer_check_to	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
mu_address_t	*(struct)
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
{	O
size_t	long
count	long
=	O
0	int
;	O
size_t	long
emails	long
=	O
0	int
;	O
size_t	long
groups	long
=	O
0	int
;	O
if	O
(	O
!	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mu_address_get_count	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(long))->(int)
(	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
&	O
count	long
)	O
)	O
return	O
MU_ERR_MAILER_BAD_TO	O
;	O
if	O
(	O
mu_address_get_email_count	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(long))->(int)
(	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
&	O
emails	long
)	O
)	O
return	O
MU_ERR_MAILER_BAD_TO	O
;	O
if	O
(	O
emails	long
==	O
0	int
)	O
return	O
MU_ERR_MAILER_NO_RCPT_TO	O
;	O
if	O
(	O
mu_address_get_group_count	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(long))->(int)
(	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
&	O
groups	long
)	O
)	O
return	O
MU_ERR_MAILER_BAD_TO	O
;	O
if	O
(	O
count	long
-	O
emails	long
-	O
groups	long
!=	O
0	int
)	O
return	O
MU_ERR_MAILER_BAD_TO	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
save_fcc	(*(struct))->(void)
(	O
mu_message_t	*(struct)
msg	*(struct)
)	O
{	O
mu_header_t	*(struct)
hdr	*(struct)
;	O
size_t	long
count	long
=	O
0	int
,	O
i	long
;	O
const	O
char	O
*	O
buf	*(char)
;	O
char	O
*	O
fcc	*(char)
;	O
if	O
(	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
hdr	*(struct)
)	O
)	O
return	O
;	O
if	O
(	O
mu_header_get_value	O
(	O
hdr	*(struct)
,	O
MU_HEADER_FCC	*(char)
,	O
NULL	O
,	O
0	int
,	O
NULL	O
)	O
)	O
return	O
;	O
mu_header_get_field_count	(*(struct),*(long))->(int)
(	O
hdr	*(struct)
,	O
&	O
count	long
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
count	long
;	O
i	long
++	O
)	O
{	O
mu_mailbox_t	*(struct)
mbox	*(struct)
;	O
mu_header_sget_field_name	(*(struct),long,*(*(char)))->(int)
(	O
hdr	*(struct)
,	O
i	long
,	O
&	O
buf	*(char)
)	O
;	O
if	O
(	O
mu_c_strcasecmp	(*(char),*(char))->(int)
(	O
buf	*(char)
,	O
MU_HEADER_FCC	*(char)
)	O
==	O
0	int
&&	O
mu_header_aget_field_value	(*(struct),long,*(*(char)))->(int)
(	O
hdr	*(struct)
,	O
i	long
,	O
&	O
fcc	*(char)
)	O
==	O
0	int
)	O
{	O
size_t	long
i	long
;	O
struct	O
mu_wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_delim	*(char)
=	O
","	*(char)
;	O
if	O
(	O
mu_wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
(	O
fcc	*(char)
,	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
MU_WRDSF_DEFFLAGS	O
|	O
MU_WRDSF_DELIM	O
|	O
MU_WRDSF_WS	O
)	O
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"cannot split line `%s': %s"	*(char)
)	O
,	O
fcc	*(char)
,	O
mu_wordsplit_strerror	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(*(char))
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
)	O
;	O
continue	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordc	long
;	O
i	long
+=	O
2	int
)	O
{	O
if	O
(	O
mu_mailbox_create_default	(*(*(struct)),*(char))->(int)
(	O
&	O
mbox	*(struct)
,	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordv	*(*(char))
[	O
i	long
]	O
)	O
)	O
continue	O
;	O
if	O
(	O
mu_mailbox_open	(*(struct),int)->(int)
(	O
mbox	*(struct)
,	O
MU_STREAM_RDWR	O
|	O
MU_STREAM_CREAT	int
|	O
MU_STREAM_APPEND	int
)	O
==	O
0	int
)	O
{	O
mu_mailbox_append_message	(*(struct),*(struct))->(int)
(	O
mbox	*(struct)
,	O
msg	*(struct)
)	O
;	O
mu_mailbox_flush	(*(struct),int)->(int)
(	O
mbox	*(struct)
,	O
0	int
)	O
;	O
}	O
mu_mailbox_close	(*(struct))->(int)
(	O
mbox	*(struct)
)	O
;	O
mu_mailbox_destroy	(*(*(struct)))->(void)
(	O
&	O
mbox	*(struct)
)	O
;	O
}	O
mu_wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
free	(*(void))->(void)
(	O
fcc	*(char)
)	O
;	O
}	O
}	O
}	O
static	O
int	O
copy_fragment	(*(*(char)),*(char),*(char))->(int)
(	O
char	O
*	O
*	O
pretender	*(*(char))
,	O
const	O
char	O
*	O
p	*(char)
,	O
const	O
char	O
*	O
q	*(char)
)	O
{	O
size_t	long
len	long
=	O
q	*(char)
-	O
p	*(char)
+	O
1	int
;	O
*	O
pretender	*(*(char))
=	O
malloc	(long)->(*(void))
(	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
*	O
pretender	*(*(char))
)	O
return	O
ENOMEM	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
*	O
pretender	*(*(char))
,	O
p	*(char)
,	O
len	long
)	O
;	O
(	O
*	O
pretender	*(*(char))
)	O
[	O
len	long
]	O
=	O
0	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
recover_email	(*(char),*(*(char)))->(int)
(	O
const	O
char	O
*	O
string	*(char)
,	O
char	O
*	O
*	O
pretender	*(*(char))
)	O
{	O
char	O
*	O
p	*(char)
,	O
*	O
q	*(char)
;	O
p	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
string	*(char)
,	O
'<'	O
)	O
;	O
if	O
(	O
p	*(char)
)	O
{	O
q	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
p	*(char)
,	O
'>'	O
)	O
;	O
if	O
(	O
q	*(char)
)	O
return	O
copy_fragment	(*(*(char)),*(char),*(char))->(int)
(	O
pretender	*(*(char))
,	O
p	*(char)
,	O
q	*(char)
)	O
;	O
}	O
p	*(char)
=	O
mu_str_skip_class	(*(char),int)->(*(char))
(	O
string	*(char)
,	O
MU_CTYPE_SPACE	int
)	O
;	O
if	O
(	O
*	O
p	*(char)
&&	O
mu_parse822_is_atom_char	(char)->(int)
(	O
*	O
p	*(char)
)	O
)	O
{	O
q	*(char)
=	O
p	*(char)
;	O
while	O
(	O
*	O
++	O
q	*(char)
&&	O
(	O
mu_parse822_is_atom_char	(char)->(int)
(	O
*	O
q	*(char)
)	O
||	O
*	O
q	*(char)
==	O
'.'	O
)	O
)	O
;	O
if	O
(	O
*	O
q	*(char)
==	O
'@'	O
)	O
while	O
(	O
*	O
++	O
q	*(char)
&&	O
(	O
mu_parse822_is_atom_char	(char)->(int)
(	O
*	O
q	*(char)
)	O
||	O
*	O
q	*(char)
==	O
'.'	O
)	O
)	O
;	O
q	*(char)
--	O
;	O
if	O
(	O
q	*(char)
>	O
p	*(char)
)	O
return	O
copy_fragment	(*(*(char)),*(char),*(char))->(int)
(	O
pretender	*(*(char))
,	O
p	*(char)
,	O
q	*(char)
)	O
;	O
}	O
return	O
MU_ERR_NOENT	O
;	O
}	O
static	O
int	O
safe_address_create	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(char),*(char))->(int)
(	O
mu_address_t	*(struct)
*	O
paddr	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
const	O
char	O
*	O
addr_str	*(char)
,	O
const	O
char	O
*	O
who	*(char)
)	O
{	O
int	O
status	int
=	O
mu_address_create	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(char))->(int)
(	O
paddr	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
addr_str	*(char)
)	O
;	O
if	O
(	O
status	int
==	O
MU_ERR_INVALID_EMAIL	O
)	O
{	O
int	O
rc	int
;	O
char	O
*	O
p	*(char)
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"bad %s address: %s"	*(char)
,	O
who	*(char)
,	O
addr_str	*(char)
)	O
)	O
;	O
rc	int
=	O
recover_email	(*(char),*(*(char)))->(int)
(	O
addr_str	*(char)
,	O
&	O
p	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
if	O
(	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s address recovery failed: %s"	*(char)
,	O
who	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
}	O
else	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_TRACE1	int
,	O
(	O
"recovered possible %s address: %s"	*(char)
,	O
who	*(char)
,	O
p	*(char)
)	O
)	O
;	O
rc	int
=	O
mu_address_create	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(char))->(int)
(	O
paddr	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
p	*(char)
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
status	int
=	O
0	int
;	O
else	O
if	O
(	O
rc	int
==	O
MU_ERR_INVALID_EMAIL	O
)	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_TRACE1	int
,	O
(	O
"%s address guess failed"	*(char)
,	O
who	*(char)
)	O
)	O
;	O
else	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"cannot convert %s address '%s': %s"	*(char)
,	O
who	*(char)
,	O
p	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
free	(*(void))->(void)
(	O
p	*(char)
)	O
;	O
}	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
_set_from	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(struct(*(struct),*(struct),*(struct),int,*(struct(*`,*`,int,int)),*(struct),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))))->(int)
(	O
mu_address_t	*(struct)
*	O
pfrom	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
mu_message_t	*(struct)
msg	*(struct)
,	O
mu_address_t	*(struct)
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
mu_mailer_t	*(struct)
mailer	*(struct)
)	O
{	O
int	O
status	int
=	O
0	int
;	O
*	O
pfrom	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
=	O
NULL	O
;	O
if	O
(	O
!	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
)	O
{	O
const	O
char	O
*	O
type	long
;	O
mu_envelope_t	*(struct)
env	*(struct)
;	O
const	O
char	O
*	O
mail_from	*(char)
;	O
status	int
=	O
mu_url_sget_param	(*(struct),*(char),*(*(char)))->(int)
(	O
mailer	*(struct)
->	O
url	*(struct)
,	O
"from"	*(char)
,	O
&	O
mail_from	*(char)
)	O
;	O
if	O
(	O
status	int
)	O
{	O
status	int
=	O
mu_message_get_envelope	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
env	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
mu_envelope_sget_sender	(*(struct),*(*(char)))->(int)
(	O
env	*(struct)
,	O
&	O
mail_from	*(char)
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_header_t	*(struct)
header	*(struct)
;	O
status	int
=	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
header	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
mu_header_sget_value	O
(	O
header	*(struct)
,	O
MU_HEADER_FROM	*(char)
,	O
&	O
mail_from	*(char)
)	O
;	O
}	O
}	O
switch	O
(	O
status	int
)	O
{	O
default	O
:	O
return	O
status	int
;	O
case	O
0	int
:	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_TRACE	O
,	O
(	O
"mu_mailer_send_message(): using From: %s"	*(char)
,	O
mail_from	*(char)
)	O
)	O
;	O
break	O
;	O
case	O
MU_ERR_NOENT	O
:	O
if	O
(	O
mu_property_sget_value	(*(struct),*(char),*(*(char)))->(int)
(	O
mailer	*(struct)
->	O
property	*(struct)
,	O
"TYPE"	*(char)
,	O
&	O
type	long
)	O
==	O
0	int
&&	O
strcmp	(*(char),*(char))->(int)
(	O
type	long
,	O
"SENDMAIL"	*(char)
)	O
==	O
0	int
)	O
return	O
0	int
;	O
mail_from	*(char)
=	O
mu_get_user_email	(*(char))->(*(char))
(	O
NULL	O
)	O
;	O
if	O
(	O
mail_from	*(char)
)	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_TRACE	O
,	O
(	O
"mu_mailer_send_message(): using user's address: %s"	*(char)
,	O
mail_from	*(char)
)	O
)	O
;	O
else	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"mu_mailer_send_message(): "	*(char)
"no user's address, failing"	*(char)
)	O
)	O
;	O
return	O
errno	O
;	O
}	O
break	O
;	O
}	O
status	int
=	O
safe_address_create	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(char),*(char))->(int)
(	O
pfrom	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
mail_from	*(char)
,	O
"sender"	*(char)
)	O
;	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
_set_to	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(struct(*(struct),*(struct),*(struct),int,*(struct(*`,*`,int,int)),*(struct),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))))->(int)
(	O
mu_address_t	*(struct)
*	O
paddr	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
mu_message_t	*(struct)
msg	*(struct)
,	O
mu_address_t	*(struct)
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
mu_mailer_t	*(struct)
mailer	*(struct)
)	O
{	O
int	O
status	int
=	O
0	int
;	O
*	O
paddr	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
=	O
NULL	O
;	O
if	O
(	O
!	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
{	O
const	O
char	O
*	O
rcpt_to	*(char)
;	O
status	int
=	O
mu_url_sget_param	(*(struct),*(char),*(*(char)))->(int)
(	O
mailer	*(struct)
->	O
url	*(struct)
,	O
"to"	*(char)
,	O
&	O
rcpt_to	*(char)
)	O
;	O
switch	O
(	O
status	int
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
MU_ERR_NOENT	O
:	O
return	O
0	int
;	O
default	O
:	O
return	O
status	int
;	O
}	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_TRACE	O
,	O
(	O
"mu_mailer_send_message(): using RCPT TO: %s"	*(char)
,	O
rcpt_to	*(char)
)	O
)	O
;	O
status	int
=	O
safe_address_create	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(char),*(char))->(int)
(	O
paddr	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
rcpt_to	*(char)
,	O
"recipient"	*(char)
)	O
;	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
create_part	(*(struct),*(struct),long,long,long,*(char))->(int)
(	O
mu_mime_t	*(struct)
mime	*(struct)
,	O
mu_stream_t	*(struct)
istr	*(struct)
,	O
size_t	long
fragsize	long
,	O
size_t	long
n	long
,	O
size_t	long
nparts	*(long)
,	O
char	O
*	O
msgid	*(char)
)	O
{	O
int	O
status	int
=	O
0	int
;	O
mu_message_t	*(struct)
newmsg	*(*(struct))
;	O
mu_header_t	*(struct)
newhdr	*(struct)
;	O
mu_body_t	*(struct)
body	*(struct)
;	O
mu_stream_t	*(struct)
ostr	*(struct)
;	O
char	O
buffer	*(*(char))
[	O
512	int
]	O
,	O
*	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
;	O
size_t	long
slen	long
;	O
mu_message_create	(*(*(struct)),*(void))->(int)
(	O
&	O
newmsg	*(*(struct))
,	O
NULL	O
)	O
;	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
newmsg	*(*(struct))
,	O
&	O
newhdr	*(struct)
)	O
;	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
=	O
NULL	O
;	O
slen	long
=	O
0	int
;	O
mu_asnprintf	(*(*(char)),*(long),*(char))->(int)
(	O
&	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
,	O
&	O
slen	long
,	O
"message/partial; id=\"%s\"; number=%lu; total=%lu"	*(char)
,	O
msgid	*(char)
,	O
(	O
unsigned	O
long	O
)	O
n	long
,	O
(	O
unsigned	O
long	O
)	O
nparts	*(long)
)	O
;	O
mu_header_append	(*(struct),*(char),*(char))->(int)
(	O
newhdr	*(struct)
,	O
MU_HEADER_CONTENT_TYPE	*(char)
,	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
)	O
;	O
mu_asnprintf	(*(*(char)),*(long),*(char))->(int)
(	O
&	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
,	O
&	O
slen	long
,	O
"part %lu of %lu"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
n	long
,	O
(	O
unsigned	O
long	O
)	O
nparts	*(long)
)	O
;	O
mu_header_append	(*(struct),*(char),*(char))->(int)
(	O
newhdr	*(struct)
,	O
MU_HEADER_CONTENT_DESCRIPTION	*(char)
,	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
)	O
;	O
free	(*(void))->(void)
(	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
)	O
;	O
mu_message_get_body	(*(struct),*(*(struct)))->(int)
(	O
newmsg	*(*(struct))
,	O
&	O
body	*(struct)
)	O
;	O
mu_body_get_streamref	(*(struct),*(*(struct)))->(int)
(	O
body	*(struct)
,	O
&	O
ostr	*(struct)
)	O
;	O
status	int
=	O
mu_stream_seek	(*(struct),long,int,*(long))->(int)
(	O
ostr	*(struct)
,	O
0	int
,	O
SEEK_SET	int
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
while	O
(	O
fragsize	long
)	O
{	O
size_t	long
rds	long
=	O
fragsize	long
;	O
if	O
(	O
rds	long
>	O
sizeof	O
buffer	*(*(char))
)	O
rds	long
=	O
sizeof	O
buffer	*(*(char))
;	O
status	int
=	O
mu_stream_read	(*(struct),*(void),long,*(long))->(int)
(	O
istr	*(struct)
,	O
buffer	*(*(char))
,	O
rds	long
,	O
&	O
rds	long
)	O
;	O
if	O
(	O
status	int
||	O
rds	long
==	O
0	int
)	O
break	O
;	O
status	int
=	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
ostr	*(struct)
,	O
buffer	*(*(char))
,	O
rds	long
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
fragsize	long
-=	O
rds	long
;	O
}	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
ostr	*(struct)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
mu_mime_add_part	(*(struct),*(struct))->(int)
(	O
mime	*(struct)
,	O
newmsg	*(*(struct))
)	O
;	O
mu_message_unref	(*(struct))->(void)
(	O
newmsg	*(*(struct))
)	O
;	O
}	O
return	O
status	int
;	O
}	O
static	O
void	O
merge_headers	(*(struct),*(struct))->(void)
(	O
mu_message_t	*(struct)
newmsg	*(*(struct))
,	O
mu_header_t	*(struct)
hdr	*(struct)
)	O
{	O
size_t	long
i	long
,	O
count	long
;	O
mu_header_t	*(struct)
newhdr	*(struct)
;	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
newmsg	*(*(struct))
,	O
&	O
newhdr	*(struct)
)	O
;	O
mu_header_get_field_count	(*(struct),*(long))->(int)
(	O
hdr	*(struct)
,	O
&	O
count	long
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
count	long
;	O
i	long
++	O
)	O
{	O
const	O
char	O
*	O
fn	*(char)
,	O
*	O
fv	*(char)
;	O
mu_header_sget_field_name	(*(struct),long,*(*(char)))->(int)
(	O
hdr	*(struct)
,	O
i	long
,	O
&	O
fn	*(char)
)	O
;	O
mu_header_sget_field_value	(*(struct),long,*(*(char)))->(int)
(	O
hdr	*(struct)
,	O
i	long
,	O
&	O
fv	*(char)
)	O
;	O
if	O
(	O
mu_c_strcasecmp	(*(char),*(char))->(int)
(	O
fn	*(char)
,	O
MU_HEADER_MESSAGE_ID	*(char)
)	O
==	O
0	int
)	O
continue	O
;	O
else	O
if	O
(	O
mu_c_strcasecmp	(*(char),*(char))->(int)
(	O
fn	*(char)
,	O
MU_HEADER_MIME_VERSION	*(char)
)	O
==	O
0	int
)	O
mu_header_append	(*(struct),*(char),*(char))->(int)
(	O
newhdr	*(struct)
,	O
"X-Orig-"	*(char)
MU_HEADER_MIME_VERSION	*(char)
,	O
fv	*(char)
)	O
;	O
else	O
if	O
(	O
mu_c_strcasecmp	(*(char),*(char))->(int)
(	O
fn	*(char)
,	O
MU_HEADER_CONTENT_TYPE	*(char)
)	O
==	O
0	int
)	O
mu_header_append	(*(struct),*(char),*(char))->(int)
(	O
newhdr	*(struct)
,	O
"X-Orig-"	*(char)
MU_HEADER_CONTENT_TYPE	*(char)
,	O
fv	*(char)
)	O
;	O
else	O
if	O
(	O
mu_c_strcasecmp	(*(char),*(char))->(int)
(	O
fn	*(char)
,	O
MU_HEADER_CONTENT_DESCRIPTION	*(char)
)	O
==	O
0	int
)	O
mu_header_append	(*(struct),*(char),*(char))->(int)
(	O
newhdr	*(struct)
,	O
"X-Orig-"	*(char)
MU_HEADER_CONTENT_DESCRIPTION	*(char)
,	O
fv	*(char)
)	O
;	O
else	O
mu_header_append	(*(struct),*(char),*(char))->(int)
(	O
newhdr	*(struct)
,	O
fn	*(char)
,	O
fv	*(char)
)	O
;	O
}	O
}	O
int	O
send_fragments	(*(struct(*(struct),*(struct),*(struct),int,*(struct(*`,*`,int,int)),*(struct),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct),long,long,*(struct(long,long)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
mu_mailer_t	*(struct)
mailer	*(struct)
,	O
mu_header_t	*(struct)
hdr	*(struct)
,	O
mu_stream_t	*(struct)
str	*(struct(int,*(char),*(char),*(char),*(char)))
,	O
size_t	long
nparts	*(long)
,	O
size_t	long
fragsize	long
,	O
struct	O
timeval	struct(long,long)
*	O
delay	*(struct(long,long))
,	O
mu_address_t	*(struct)
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
mu_address_t	*(struct)
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
{	O
int	O
status	int
=	O
0	int
;	O
size_t	long
i	long
;	O
char	O
*	O
msgid	*(char)
=	O
NULL	O
;	O
if	O
(	O
mu_header_aget_value	O
(	O
hdr	*(struct)
,	O
MU_HEADER_MESSAGE_ID	*(char)
,	O
&	O
msgid	*(char)
)	O
)	O
mu_rfc2822_msg_id	(int,*(*(char)))->(int)
(	O
0	int
,	O
&	O
msgid	*(char)
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
nparts	*(long)
;	O
i	long
++	O
)	O
{	O
mu_message_t	*(struct)
newmsg	*(*(struct))
;	O
mu_mime_t	*(struct)
mime	*(struct)
;	O
mu_mime_create	(*(*(struct)),*(struct),int)->(int)
(	O
&	O
mime	*(struct)
,	O
NULL	O
,	O
0	int
)	O
;	O
status	int
=	O
create_part	(*(struct),*(struct),long,long,long,*(char))->(int)
(	O
mime	*(struct)
,	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
,	O
fragsize	long
,	O
i	long
,	O
nparts	*(long)
,	O
msgid	*(char)
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
mu_mime_to_message	(*(struct),*(*(struct)))->(int)
(	O
mime	*(struct)
,	O
&	O
newmsg	*(*(struct))
)	O
;	O
merge_headers	(*(struct),*(struct))->(void)
(	O
newmsg	*(*(struct))
,	O
hdr	*(struct)
)	O
;	O
status	int
=	O
mailer	*(struct)
->	O
_send_message	*((*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))->(int))
(	O
mailer	*(struct)
,	O
newmsg	*(*(struct))
,	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
mu_message_unref	(*(struct))->(void)
(	O
newmsg	*(*(struct))
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
if	O
(	O
delay	*(struct(long,long))
)	O
{	O
struct	O
timeval	struct(long,long)
t	struct(long,long)
=	O
*	O
delay	*(struct(long,long))
;	O
select	(int,*(struct(array(long))),*(struct(array(long))),*(struct(array(long))),*(struct(long,long)))->(int)
(	O
0	int
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
&	O
t	struct(long,long)
)	O
;	O
}	O
}	O
free	(*(void))->(void)
(	O
msgid	*(char)
)	O
;	O
return	O
status	int
;	O
}	O
int	O
mu_mailer_send_fragments	(*(struct),*(struct),long,*(struct(long,long)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
mu_mailer_t	*(struct)
mailer	*(struct)
,	O
mu_message_t	*(struct)
msg	*(struct)
,	O
size_t	long
fragsize	long
,	O
struct	O
timeval	struct(long,long)
*	O
delay	*(struct(long,long))
,	O
mu_address_t	*(struct)
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
mu_address_t	*(struct)
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
{	O
int	O
status	int
;	O
mu_address_t	*(struct)
sender_addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
NULL	O
,	O
rcpt_addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
NULL	O
;	O
if	O
(	O
mailer	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mailer	*(struct)
->	O
_send_message	*((*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))->(int))
==	O
NULL	O
)	O
return	O
ENOSYS	int
;	O
status	int
=	O
_set_from	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(struct(*(struct),*(struct),*(struct),int,*(struct(*`,*`,int,int)),*(struct),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))))->(int)
(	O
&	O
sender_addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
msg	*(struct)
,	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
mailer	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
sender_addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
=	O
sender_addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
status	int
=	O
_set_to	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(struct(*(struct),*(struct),*(struct),int,*(struct(*`,*`,int,int)),*(struct),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))))->(int)
(	O
&	O
rcpt_addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
msg	*(struct)
,	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
mailer	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
rcpt_addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
rcpt_addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
if	O
(	O
(	O
!	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
||	O
(	O
status	int
=	O
mu_mailer_check_from	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
)	O
)	O
==	O
0	int
)	O
&&	O
(	O
!	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
||	O
(	O
status	int
=	O
mu_mailer_check_to	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
)	O
==	O
0	int
)	O
)	O
{	O
save_fcc	(*(struct))->(void)
(	O
msg	*(struct)
)	O
;	O
if	O
(	O
fragsize	long
==	O
0	int
)	O
status	int
=	O
mailer	*(struct)
->	O
_send_message	*((*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))->(int))
(	O
mailer	*(struct)
,	O
msg	*(struct)
,	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
else	O
{	O
mu_header_t	*(struct)
hdr	*(struct)
;	O
mu_body_t	*(struct)
body	*(struct)
;	O
size_t	long
bsize	long
;	O
size_t	long
nparts	*(long)
;	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
hdr	*(struct)
)	O
;	O
mu_message_get_body	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
body	*(struct)
)	O
;	O
mu_body_size	(*(struct),*(long))->(int)
(	O
body	*(struct)
,	O
&	O
bsize	long
)	O
;	O
nparts	*(long)
=	O
bsize	long
+	O
fragsize	long
-	O
1	int
;	O
if	O
(	O
nparts	*(long)
<	O
bsize	long
)	O
return	O
EINVAL	int
;	O
nparts	*(long)
/=	O
fragsize	long
;	O
if	O
(	O
nparts	*(long)
==	O
1	int
)	O
status	int
=	O
mailer	*(struct)
->	O
_send_message	*((*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))->(int))
(	O
mailer	*(struct)
,	O
msg	*(struct)
,	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
else	O
{	O
mu_stream_t	*(struct)
str	*(struct(int,*(char),*(char),*(char),*(char)))
;	O
status	int
=	O
mu_body_get_streamref	(*(struct),*(*(struct)))->(int)
(	O
body	*(struct)
,	O
&	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
)	O
;	O
if	O
(	O
status	int
)	O
{	O
status	int
=	O
send_fragments	(*(struct(*(struct),*(struct),*(struct),int,*(struct(*`,*`,int,int)),*(struct),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct),long,long,*(struct(long,long)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
mailer	*(struct)
,	O
hdr	*(struct)
,	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
,	O
nparts	*(long)
,	O
fragsize	long
,	O
delay	*(struct(long,long))
,	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
)	O
;	O
}	O
}	O
}	O
}	O
mu_address_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(void)
(	O
&	O
sender_addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
mu_address_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(void)
(	O
&	O
rcpt_addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
return	O
status	int
;	O
}	O
int	O
mu_mailer_send_message	(*(struct),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
mu_mailer_t	*(struct)
mailer	*(struct)
,	O
mu_message_t	*(struct)
msg	*(struct)
,	O
mu_address_t	*(struct)
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
mu_address_t	*(struct)
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
{	O
return	O
mu_mailer_send_fragments	(*(struct),*(struct),long,*(struct(long,long)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
mailer	*(struct)
,	O
msg	*(struct)
,	O
0	int
,	O
NULL	O
,	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
}	O
int	O
mu_mailer_set_stream	(*(struct),*(struct))->(int)
(	O
mu_mailer_t	*(struct)
mailer	*(struct)
,	O
mu_stream_t	*(struct)
stream	*(struct)
)	O
{	O
if	O
(	O
mailer	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
mailer	*(struct)
->	O
stream	*(struct)
=	O
stream	*(struct)
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailer_get_stream	(*(struct),*(*(struct)))->(int)
(	O
mu_mailer_t	*(struct)
mailer	*(struct)
,	O
mu_stream_t	*(struct)
*	O
pstream	*(*(struct))
)	O
{	O
if	O
(	O
mailer	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
pstream	*(*(struct))
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
*	O
pstream	*(*(struct))
=	O
mailer	*(struct)
->	O
stream	*(struct)
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailer_get_streamref	(*(struct),*(*(struct)))->(int)
(	O
mu_mailer_t	*(struct)
mailer	*(struct)
,	O
mu_stream_t	*(struct)
*	O
pstream	*(*(struct))
)	O
{	O
if	O
(	O
mailer	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
pstream	*(*(struct))
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
return	O
mu_streamref_create	(*(*(struct)),*(struct))->(int)
(	O
pstream	*(*(struct))
,	O
mailer	*(struct)
->	O
stream	*(struct)
)	O
;	O
}	O
int	O
mu_mailer_get_observable	(*(struct),*(*(struct)))->(int)
(	O
mu_mailer_t	*(struct)
mailer	*(struct)
,	O
mu_observable_t	*(struct)
*	O
pobservable	*(*(struct))
)	O
{	O
if	O
(	O
mailer	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
pobservable	*(*(struct))
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
mailer	*(struct)
->	O
observable	*(struct)
==	O
NULL	O
)	O
{	O
int	O
status	int
=	O
mu_observable_create	(*(*(struct)),*(void))->(int)
(	O
&	O
(	O
mailer	*(struct)
->	O
observable	*(struct)
)	O
,	O
mailer	*(struct)
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
}	O
*	O
pobservable	*(*(struct))
=	O
mailer	*(struct)
->	O
observable	*(struct)
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailer_set_property	(*(struct),*(struct))->(int)
(	O
mu_mailer_t	*(struct)
mailer	*(struct)
,	O
mu_property_t	*(struct)
property	*(struct)
)	O
{	O
if	O
(	O
mailer	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mailer	*(struct)
->	O
property	*(struct)
)	O
mu_property_unref	(*(struct))->(void)
(	O
mailer	*(struct)
->	O
property	*(struct)
)	O
;	O
mailer	*(struct)
->	O
property	*(struct)
=	O
property	*(struct)
;	O
mu_property_ref	(*(struct))->(void)
(	O
property	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailer_get_property	(*(struct),*(*(struct)))->(int)
(	O
mu_mailer_t	*(struct)
mailer	*(struct)
,	O
mu_property_t	*(struct)
*	O
pproperty	*(*(struct))
)	O
{	O
if	O
(	O
mailer	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
pproperty	*(*(struct))
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
mailer	*(struct)
->	O
property	*(struct)
==	O
NULL	O
)	O
{	O
int	O
status	int
;	O
if	O
(	O
mailer	*(struct)
->	O
_get_property	*((*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(*(struct)))->(int))
)	O
status	int
=	O
mailer	*(struct)
->	O
_get_property	*((*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(*(struct)))->(int))
(	O
mailer	*(struct)
,	O
&	O
mailer	*(struct)
->	O
property	*(struct)
)	O
;	O
else	O
status	int
=	O
mu_property_create_init	(*(*(struct)),*((*(struct))->(int)),*(void))->(int)
(	O
&	O
mailer	*(struct)
->	O
property	*(struct)
,	O
mu_assoc_property_init	(*(struct))->(int)
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
}	O
*	O
pproperty	*(*(struct))
=	O
mailer	*(struct)
->	O
property	*(struct)
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailer_get_url	(*(struct),*(*(struct)))->(int)
(	O
mu_mailer_t	*(struct)
mailer	*(struct)
,	O
mu_url_t	*(struct)
*	O
purl	*(*(struct))
)	O
{	O
if	O
(	O
!	O
mailer	*(struct)
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
purl	*(*(struct))
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
*	O
purl	*(*(struct))
=	O
mailer	*(struct)
->	O
url	*(struct)
;	O
return	O
0	int
;	O
}	O
