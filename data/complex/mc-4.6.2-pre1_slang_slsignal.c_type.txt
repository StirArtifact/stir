SLSig_Fun_Type	(int)->(void)
*	O
SLsignal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
int	O
sig	int
,	O
SLSig_Fun_Type	(int)->(void)
*	O
f	float
)	O
{	O
struct	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
old_sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
new_sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
if	O
(	O
sig	int
==	O
SIGALRM	int
)	O
return	O
SLsignal_intr	(int,*((int)->(void)))->(*((int)->(void)))
(	O
sig	int
,	O
f	float
)	O
;	O
sigemptyset	(*(struct(array(long))))->(int)
(	O
&	O
new_sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
.	O
sa_mask	struct(array(long))
)	O
;	O
new_sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
.	O
sa_handler	*((int)->(void))
=	O
f	float
;	O
new_sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
.	O
sa_flags	int
=	O
0	int
;	O
new_sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
.	O
sa_flags	int
|=	O
SA_RESTART	int
;	O
if	O
(	O
-	O
1	int
==	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
(	O
sig	int
,	O
&	O
new_sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
&	O
old_sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
)	O
)	O
return	O
(	O
SLSig_Fun_Type	(int)->(void)
*	O
)	O
SIG_ERR	O
;	O
return	O
old_sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
.	O
sa_handler	*((int)->(void))
;	O
}	O
SLSig_Fun_Type	(int)->(void)
*	O
SLsignal_intr	(int,*((int)->(void)))->(*((int)->(void)))
(	O
int	O
sig	int
,	O
SLSig_Fun_Type	(int)->(void)
*	O
f	float
)	O
{	O
struct	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
old_sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
new_sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
sigemptyset	(*(struct(array(long))))->(int)
(	O
&	O
new_sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
.	O
sa_mask	struct(array(long))
)	O
;	O
new_sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
.	O
sa_handler	*((int)->(void))
=	O
f	float
;	O
new_sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
.	O
sa_flags	int
=	O
0	int
;	O
new_sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
.	O
sa_flags	int
|=	O
SA_INTERRUPT	int
;	O
if	O
(	O
-	O
1	int
==	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
(	O
sig	int
,	O
&	O
new_sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
&	O
old_sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
)	O
)	O
return	O
(	O
SLSig_Fun_Type	(int)->(void)
*	O
)	O
SIG_ERR	O
;	O
return	O
old_sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
.	O
sa_handler	*((int)->(void))
;	O
}	O
static	O
sigset_t	struct(array(long))
Old_Signal_Mask	struct(array(long))
;	O
static	O
volatile	O
unsigned	O
int	O
Blocked_Depth	int
;	O
int	O
SLsig_block_signals	()->(int)
(	O
void	O
)	O
{	O
sigset_t	struct(array(long))
new_mask	struct(array(long))
;	O
Blocked_Depth	int
++	O
;	O
if	O
(	O
Blocked_Depth	int
!=	O
1	int
)	O
{	O
return	O
0	int
;	O
}	O
sigemptyset	(*(struct(array(long))))->(int)
(	O
&	O
new_mask	struct(array(long))
)	O
;	O
sigaddset	(*(struct(array(long))),int)->(int)
(	O
&	O
new_mask	struct(array(long))
,	O
SIGQUIT	int
)	O
;	O
sigaddset	(*(struct(array(long))),int)->(int)
(	O
&	O
new_mask	struct(array(long))
,	O
SIGTSTP	int
)	O
;	O
sigaddset	(*(struct(array(long))),int)->(int)
(	O
&	O
new_mask	struct(array(long))
,	O
SIGINT	int
)	O
;	O
sigaddset	(*(struct(array(long))),int)->(int)
(	O
&	O
new_mask	struct(array(long))
,	O
SIGTTIN	int
)	O
;	O
sigaddset	(*(struct(array(long))),int)->(int)
(	O
&	O
new_mask	struct(array(long))
,	O
SIGTTOU	int
)	O
;	O
sigaddset	(*(struct(array(long))),int)->(int)
(	O
&	O
new_mask	struct(array(long))
,	O
SIGWINCH	int
)	O
;	O
(	O
void	O
)	O
sigprocmask	(int,*(struct(array(long))),*(struct(array(long))))->(int)
(	O
SIG_BLOCK	int
,	O
&	O
new_mask	struct(array(long))
,	O
&	O
Old_Signal_Mask	struct(array(long))
)	O
;	O
return	O
0	int
;	O
}	O
int	O
SLsig_unblock_signals	()->(int)
(	O
void	O
)	O
{	O
if	O
(	O
Blocked_Depth	int
==	O
0	int
)	O
return	O
-	O
1	int
;	O
Blocked_Depth	int
--	O
;	O
if	O
(	O
Blocked_Depth	int
!=	O
0	int
)	O
return	O
0	int
;	O
(	O
void	O
)	O
sigprocmask	(int,*(struct(array(long))),*(struct(array(long))))->(int)
(	O
SIG_SETMASK	int
,	O
&	O
Old_Signal_Mask	struct(array(long))
,	O
NULL	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
SLsystem	(*(char))->(int)
(	O
char	O
*	O
cmd	*(char)
)	O
{	O
pid_t	int
pid	int
;	O
int	O
status	int
;	O
struct	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
ignore	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
struct	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
save_intr	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
struct	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
save_quit	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
sigset_t	struct(array(long))
child_mask	struct(array(long))
,	O
save_mask	struct(array(long))
;	O
if	O
(	O
cmd	*(char)
==	O
NULL	O
)	O
return	O
1	int
;	O
ignore	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
.	O
sa_handler	*((int)->(void))
=	O
SIG_IGN	O
;	O
sigemptyset	(*(struct(array(long))))->(int)
(	O
&	O
ignore	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
.	O
sa_mask	struct(array(long))
)	O
;	O
ignore	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
.	O
sa_flags	int
=	O
0	int
;	O
if	O
(	O
-	O
1	int
==	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
(	O
SIGINT	int
,	O
&	O
ignore	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
&	O
save_intr	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
-	O
1	int
==	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
(	O
SIGQUIT	int
,	O
&	O
ignore	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
&	O
save_quit	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
)	O
)	O
{	O
(	O
void	O
)	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
(	O
SIGINT	int
,	O
&	O
save_intr	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
NULL	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
sigemptyset	(*(struct(array(long))))->(int)
(	O
&	O
child_mask	struct(array(long))
)	O
;	O
sigaddset	(*(struct(array(long))),int)->(int)
(	O
&	O
child_mask	struct(array(long))
,	O
SIGCHLD	int
)	O
;	O
if	O
(	O
-	O
1	int
==	O
sigprocmask	(int,*(struct(array(long))),*(struct(array(long))))->(int)
(	O
SIG_BLOCK	int
,	O
&	O
child_mask	struct(array(long))
,	O
&	O
save_mask	struct(array(long))
)	O
)	O
{	O
(	O
void	O
)	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
(	O
SIGINT	int
,	O
&	O
save_intr	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
NULL	O
)	O
;	O
(	O
void	O
)	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
(	O
SIGQUIT	int
,	O
&	O
save_quit	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
NULL	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
pid	int
=	O
fork	()->(int)
(	O
)	O
;	O
if	O
(	O
pid	int
==	O
-	O
1	int
)	O
status	int
=	O
-	O
1	int
;	O
else	O
if	O
(	O
pid	int
==	O
0	int
)	O
{	O
(	O
void	O
)	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
(	O
SIGINT	int
,	O
&	O
save_intr	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
NULL	O
)	O
;	O
(	O
void	O
)	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
(	O
SIGQUIT	int
,	O
&	O
save_quit	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
NULL	O
)	O
;	O
(	O
void	O
)	O
sigprocmask	(int,*(struct(array(long))),*(struct(array(long))))->(int)
(	O
SIG_SETMASK	int
,	O
&	O
save_mask	struct(array(long))
,	O
NULL	O
)	O
;	O
execl	(*(char),*(char))->(int)
(	O
"/bin/sh"	*(char)
,	O
"sh"	*(char)
,	O
"-c"	*(char)
,	O
cmd	*(char)
,	O
NULL	O
)	O
;	O
_exit	(int)->(void)
(	O
127	int
)	O
;	O
}	O
else	O
{	O
while	O
(	O
-	O
1	int
==	O
waitpid	(int,*(int),int)->(int)
(	O
pid	int
,	O
&	O
status	int
,	O
0	int
)	O
)	O
{	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
continue	O
;	O
status	int
=	O
-	O
1	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
-	O
1	int
==	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
(	O
SIGINT	int
,	O
&	O
save_intr	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
NULL	O
)	O
)	O
status	int
=	O
-	O
1	int
;	O
if	O
(	O
-	O
1	int
==	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
(	O
SIGQUIT	int
,	O
&	O
save_quit	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
NULL	O
)	O
)	O
status	int
=	O
-	O
1	int
;	O
if	O
(	O
-	O
1	int
==	O
sigprocmask	(int,*(struct(array(long))),*(struct(array(long))))->(int)
(	O
SIG_SETMASK	int
,	O
&	O
save_mask	struct(array(long))
,	O
NULL	O
)	O
)	O
status	int
=	O
-	O
1	int
;	O
return	O
status	int
;	O
}	O
