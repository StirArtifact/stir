gsl_multilarge_linear_workspace	struct(*(struct(*(char),*((long)->(*`)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((double,*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(void),long)
*	O
gsl_multilarge_linear_alloc	(*(struct(*(char),*((long)->(*`)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((double,*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),long)->(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(void),long)))
(	O
const	O
gsl_multilarge_linear_type	struct(*(char),*((long)->(*(void))),*((*(void))->(int)),*((*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(void))->(int)),*((double,*(struct(long,long,*`,*`,int)),*(double),*(double),*(void))->(int)),*((*(double),*(void))->(int)),*((*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(void))->(int)),*((*(void))->(void)))
*	O
T	*(struct(*(char),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),double))
,	O
const	O
size_t	long
p	int
)	O
{	O
gsl_multilarge_linear_workspace	struct(*(struct(*(char),*((long)->(*`)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((double,*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(void),long)
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
gsl_multilarge_linear_workspace	struct(*(struct(*(char),*((long)->(*`)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((double,*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(void),long)
)	O
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for workspace"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
type	*(struct(*(char),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),double))
=	O
T	*(struct(*(char),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),double))
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
state	*(int)
=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
type	*(struct(*(char),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),double))
->	O
alloc	*((long)->(*(void)))
(	O
p	int
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
state	*(int)
==	O
NULL	O
)	O
{	O
gsl_multilarge_linear_free	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(void),long)))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for multilarge state"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
p	int
=	O
p	int
;	O
gsl_multilarge_linear_reset	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(void),long)))->(int)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
return	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
}	O
void	O
gsl_multilarge_linear_free	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(void),long)))->(void)
(	O
gsl_multilarge_linear_workspace	struct(*(struct(*(char),*((long)->(*`)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((double,*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(void),long)
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
RETURN_IF_NULL	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
state	*(int)
)	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
type	*(struct(*(char),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),double))
->	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
state	*(int)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
}	O
const	O
char	O
*	O
gsl_multilarge_linear_name	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(void),long)))->(*(char))
(	O
const	O
gsl_multilarge_linear_workspace	struct(*(struct(*(char),*((long)->(*`)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((double,*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(void),long)
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
return	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
type	*(struct(*(char),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),double))
->	O
name	*(char)
;	O
}	O
int	O
gsl_multilarge_linear_reset	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(void),long)))->(int)
(	O
gsl_multilarge_linear_workspace	struct(*(struct(*(char),*((long)->(*`)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((double,*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(void),long)
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
int	O
status	int
=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
type	*(struct(*(char),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),double))
->	O
reset	*((*(void))->(int))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
state	*(int)
)	O
;	O
return	O
status	int
;	O
}	O
int	O
gsl_multilarge_linear_accumulate	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(void),long)))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
X	*(float)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
y	double
,	O
gsl_multilarge_linear_workspace	struct(*(struct(*(char),*((long)->(*`)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((double,*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(void),long)
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
int	O
status	int
=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
type	*(struct(*(char),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),double))
->	O
accumulate	*((*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(void))->(int))
(	O
X	*(float)
,	O
y	double
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
state	*(int)
)	O
;	O
return	O
status	int
;	O
}	O
int	O
gsl_multilarge_linear_solve	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(void),long)))->(int)
(	O
const	O
double	O
lambda	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
c	*(float)
,	O
double	O
*	O
rnorm	*(double)
,	O
double	O
*	O
snorm	*(double)
,	O
gsl_multilarge_linear_workspace	struct(*(struct(*(char),*((long)->(*`)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((double,*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(void),long)
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
int	O
status	int
=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
type	*(struct(*(char),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),double))
->	O
solve	*((double,*(struct(long,long,*(double),*(struct`),int)),*(double),*(double),*(void))->(int))
(	O
lambda	double
,	O
c	*(float)
,	O
rnorm	*(double)
,	O
snorm	*(double)
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
state	*(int)
)	O
;	O
return	O
status	int
;	O
}	O
int	O
gsl_multilarge_linear_rcond	(*(double),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(void),long)))->(int)
(	O
double	O
*	O
rcond	double
,	O
gsl_multilarge_linear_workspace	struct(*(struct(*(char),*((long)->(*`)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((double,*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(void),long)
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
int	O
status	int
=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
type	*(struct(*(char),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),double))
->	O
rcond	double
(	O
rcond	double
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
state	*(int)
)	O
;	O
return	O
status	int
;	O
}	O
int	O
gsl_multilarge_linear_lcurve	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(void),long)))->(int)
(	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
reg_param	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
rho	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
eta	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_multilarge_linear_workspace	struct(*(struct(*(char),*((long)->(*`)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((double,*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(void),long)
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
const	O
size_t	long
len	long
=	O
reg_param	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
;	O
if	O
(	O
len	long
!=	O
rho	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"reg_param and rho have different sizes"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
len	long
!=	O
eta	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"reg_param and eta have different sizes"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
type	*(struct(*(char),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),double))
->	O
lcurve	*((*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(void))->(int))
(	O
reg_param	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
rho	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
eta	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
state	*(int)
)	O
;	O
return	O
status	int
;	O
}	O
}	O
int	O
gsl_multilarge_linear_wstdform1	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(void),long)))->(int)
(	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
X	*(float)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
y	double
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
Xs	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
ys	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_multilarge_linear_workspace	struct(*(struct(*(char),*((long)->(*`)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((double,*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(void),long)
*	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
)	O
{	O
const	O
size_t	long
n	int
=	O
X	*(float)
->	O
size1	long
;	O
const	O
size_t	long
p	int
=	O
X	*(float)
->	O
size2	long
;	O
(	O
void	O
)	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
;	O
if	O
(	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
!=	O
NULL	O
&&	O
p	int
!=	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"L vector does not match X"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
n	int
!=	O
y	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"y vector does not match X"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
!=	O
NULL	O
&&	O
n	int
!=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"weight vector does not match X"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
n	int
!=	O
Xs	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
||	O
p	int
!=	O
Xs	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"Xs matrix dimensions do not match X"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
n	int
!=	O
ys	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"ys vector must be length n"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
=	O
GSL_SUCCESS	int
;	O
status	int
=	O
gsl_multifit_linear_applyW	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
X	*(float)
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
y	double
,	O
Xs	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
ys	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
!=	O
NULL	O
)	O
{	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
p	int
;	O
++	O
j	long
)	O
{	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
Xj	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_column	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
Xs	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
j	long
)	O
;	O
double	O
lj	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
j	long
)	O
;	O
if	O
(	O
lj	double
==	O
0.0	int
)	O
{	O
GSL_ERROR	O
(	O
"L matrix is singular"	*(char)
,	O
GSL_EDOM	int
)	O
;	O
}	O
gsl_vector_scale	(*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(int)
(	O
&	O
Xj	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
1.0	int
/	O
lj	double
)	O
;	O
}	O
}	O
return	O
status	int
;	O
}	O
}	O
int	O
gsl_multilarge_linear_stdform1	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(void),long)))->(int)
(	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
X	*(float)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
y	double
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
Xs	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
ys	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_multilarge_linear_workspace	struct(*(struct(*(char),*((long)->(*`)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((double,*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(void),long)
*	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
)	O
{	O
int	O
status	int
;	O
status	int
=	O
gsl_multilarge_linear_wstdform1	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(void),long)))->(int)
(	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
X	*(float)
,	O
NULL	O
,	O
y	double
,	O
Xs	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
ys	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
)	O
;	O
return	O
status	int
;	O
}	O
int	O
gsl_multilarge_linear_L_decomp	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
tau	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
const	O
size_t	long
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
const	O
size_t	long
p	int
=	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
;	O
if	O
(	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
<	O
p	int
)	O
{	O
GSL_ERROR	O
(	O
"m < p not yet supported"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
status	int
=	O
gsl_multifit_linear_L_decomp	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
tau	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
return	O
status	int
;	O
}	O
}	O
int	O
gsl_multilarge_linear_wstdform2	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(void),long)))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
LQR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
Ltau	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
X	*(float)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
y	double
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
Xs	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
ys	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_multilarge_linear_workspace	struct(*(struct(*(char),*((long)->(*`)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((double,*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(void),long)
*	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
)	O
{	O
const	O
size_t	long
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
LQR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
const	O
size_t	long
n	int
=	O
X	*(float)
->	O
size1	long
;	O
const	O
size_t	long
p	int
=	O
X	*(float)
->	O
size2	long
;	O
(	O
void	O
)	O
Ltau	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
if	O
(	O
p	int
!=	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
->	O
p	int
)	O
{	O
GSL_ERROR	O
(	O
"X has wrong number of columns"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
p	int
!=	O
LQR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"LQR and X matrices have different numbers of columns"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
n	int
!=	O
y	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"y vector does not match X"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
!=	O
NULL	O
&&	O
n	int
!=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"weights vector must be length n"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
<	O
p	int
)	O
{	O
GSL_ERROR	O
(	O
"m < p not yet supported"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
n	int
!=	O
Xs	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
||	O
p	int
!=	O
Xs	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"Xs matrix must be n-by-p"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
n	int
!=	O
ys	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"ys vector must have length n"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
size_t	long
i	long
;	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
R	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
LQR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
,	O
p	int
,	O
p	int
)	O
;	O
status	int
=	O
gsl_multifit_linear_applyW	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
X	*(float)
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
y	double
,	O
Xs	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
ys	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
++	O
i	long
)	O
{	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_row	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
Xs	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
gsl_blas_dtrsv	(enum(int,int),enum(int,int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasUpper	int
,	O
CblasTrans	int
,	O
CblasNonUnit	int
,	O
&	O
R	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_multilarge_linear_stdform2	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(void),long)))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
LQR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
Ltau	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
X	*(float)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
y	double
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
Xs	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
ys	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_multilarge_linear_workspace	struct(*(struct(*(char),*((long)->(*`)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((double,*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(void),long)
*	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
)	O
{	O
int	O
status	int
;	O
status	int
=	O
gsl_multilarge_linear_wstdform2	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(void),long)))->(int)
(	O
LQR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
Ltau	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
X	*(float)
,	O
NULL	O
,	O
y	double
,	O
Xs	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
ys	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
)	O
;	O
return	O
status	int
;	O
}	O
int	O
gsl_multilarge_linear_genform1	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(void),long)))->(int)
(	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
cs	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
c	*(float)
,	O
gsl_multilarge_linear_workspace	struct(*(struct(*(char),*((long)->(*`)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((double,*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(void),long)
*	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
)	O
{	O
if	O
(	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
->	O
p	int
)	O
{	O
GSL_ERROR	O
(	O
"L vector does not match workspace"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
cs	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"cs vector does not match L"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
c	*(float)
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"c vector does not match L"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
c	*(float)
,	O
cs	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_div	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
c	*(float)
,	O
L	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_multilarge_linear_genform2	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(void),long)))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
LQR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
Ltau	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
cs	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
c	*(float)
,	O
gsl_multilarge_linear_workspace	struct(*(struct(*(char),*((long)->(*`)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((double,*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(void),long)
*	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
)	O
{	O
const	O
size_t	long
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
LQR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
const	O
size_t	long
p	int
=	O
LQR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
;	O
(	O
void	O
)	O
Ltau	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
(	O
void	O
)	O
work	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
;	O
if	O
(	O
p	int
!=	O
c	*(float)
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"c vector does not match LQR"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
<	O
p	int
)	O
{	O
GSL_ERROR	O
(	O
"m < p not yet supported"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
p	int
!=	O
cs	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"cs vector size does not match c"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
s	*(float)
;	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
R	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
LQR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
,	O
p	int
,	O
p	int
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
c	*(float)
,	O
cs	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
s	*(float)
=	O
gsl_blas_dtrsv	(enum(int,int),enum(int,int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
&	O
R	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
c	*(float)
)	O
;	O
return	O
s	*(float)
;	O
}	O
}	O
