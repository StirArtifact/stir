int	O
gsl_histogram_equal_bins_p	(*(struct(long,*(double),*(double))),*(struct(long,*(double),*(double))))->(int)
(	O
const	O
gsl_histogram	struct(long,*(double),*(double))
*	O
h1	*(struct(long,*(double),*(double)))
,	O
const	O
gsl_histogram	struct(long,*(double),*(double))
*	O
h2	*(struct(long,*(double),*(double)))
)	O
{	O
if	O
(	O
h1	*(struct(long,*(double),*(double)))
->	O
n	long
!=	O
h2	*(struct(long,*(double),*(double)))
->	O
n	long
)	O
{	O
return	O
0	int
;	O
}	O
{	O
size_t	long
i	*(long)
;	O
for	O
(	O
i	*(long)
=	O
0	int
;	O
i	*(long)
<=	O
h1	*(struct(long,*(double),*(double)))
->	O
n	long
;	O
i	*(long)
++	O
)	O
{	O
if	O
(	O
h1	*(struct(long,*(double),*(double)))
->	O
range	*(double)
[	O
i	*(long)
]	O
!=	O
h2	*(struct(long,*(double),*(double)))
->	O
range	*(double)
[	O
i	*(long)
]	O
)	O
{	O
return	O
0	int
;	O
}	O
}	O
}	O
return	O
1	int
;	O
}	O
int	O
gsl_histogram_add	(*(struct(long,*(double),*(double))),*(struct(long,*(double),*(double))))->(int)
(	O
gsl_histogram	struct(long,*(double),*(double))
*	O
h1	*(struct(long,*(double),*(double)))
,	O
const	O
gsl_histogram	struct(long,*(double),*(double))
*	O
h2	*(struct(long,*(double),*(double)))
)	O
{	O
size_t	long
i	*(long)
;	O
if	O
(	O
!	O
gsl_histogram_equal_bins_p	(*(struct(long,*(double),*(double))),*(struct(long,*(double),*(double))))->(int)
(	O
h1	*(struct(long,*(double),*(double)))
,	O
h2	*(struct(long,*(double),*(double)))
)	O
)	O
{	O
GSL_ERROR	O
(	O
"histograms have different binning"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
for	O
(	O
i	*(long)
=	O
0	int
;	O
i	*(long)
<	O
h1	*(struct(long,*(double),*(double)))
->	O
n	long
;	O
i	*(long)
++	O
)	O
{	O
h1	*(struct(long,*(double),*(double)))
->	O
bin	*(double)
[	O
i	*(long)
]	O
+=	O
h2	*(struct(long,*(double),*(double)))
->	O
bin	*(double)
[	O
i	*(long)
]	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_histogram_sub	(*(struct(long,*(double),*(double))),*(struct(long,*(double),*(double))))->(int)
(	O
gsl_histogram	struct(long,*(double),*(double))
*	O
h1	*(struct(long,*(double),*(double)))
,	O
const	O
gsl_histogram	struct(long,*(double),*(double))
*	O
h2	*(struct(long,*(double),*(double)))
)	O
{	O
size_t	long
i	*(long)
;	O
if	O
(	O
!	O
gsl_histogram_equal_bins_p	(*(struct(long,*(double),*(double))),*(struct(long,*(double),*(double))))->(int)
(	O
h1	*(struct(long,*(double),*(double)))
,	O
h2	*(struct(long,*(double),*(double)))
)	O
)	O
{	O
GSL_ERROR	O
(	O
"histograms have different binning"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
for	O
(	O
i	*(long)
=	O
0	int
;	O
i	*(long)
<	O
h1	*(struct(long,*(double),*(double)))
->	O
n	long
;	O
i	*(long)
++	O
)	O
{	O
h1	*(struct(long,*(double),*(double)))
->	O
bin	*(double)
[	O
i	*(long)
]	O
-=	O
h2	*(struct(long,*(double),*(double)))
->	O
bin	*(double)
[	O
i	*(long)
]	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_histogram_mul	(*(struct(long,*(double),*(double))),*(struct(long,*(double),*(double))))->(int)
(	O
gsl_histogram	struct(long,*(double),*(double))
*	O
h1	*(struct(long,*(double),*(double)))
,	O
const	O
gsl_histogram	struct(long,*(double),*(double))
*	O
h2	*(struct(long,*(double),*(double)))
)	O
{	O
size_t	long
i	*(long)
;	O
if	O
(	O
!	O
gsl_histogram_equal_bins_p	(*(struct(long,*(double),*(double))),*(struct(long,*(double),*(double))))->(int)
(	O
h1	*(struct(long,*(double),*(double)))
,	O
h2	*(struct(long,*(double),*(double)))
)	O
)	O
{	O
GSL_ERROR	O
(	O
"histograms have different binning"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
for	O
(	O
i	*(long)
=	O
0	int
;	O
i	*(long)
<	O
h1	*(struct(long,*(double),*(double)))
->	O
n	long
;	O
i	*(long)
++	O
)	O
{	O
h1	*(struct(long,*(double),*(double)))
->	O
bin	*(double)
[	O
i	*(long)
]	O
*=	O
h2	*(struct(long,*(double),*(double)))
->	O
bin	*(double)
[	O
i	*(long)
]	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_histogram_div	(*(struct(long,*(double),*(double))),*(struct(long,*(double),*(double))))->(int)
(	O
gsl_histogram	struct(long,*(double),*(double))
*	O
h1	*(struct(long,*(double),*(double)))
,	O
const	O
gsl_histogram	struct(long,*(double),*(double))
*	O
h2	*(struct(long,*(double),*(double)))
)	O
{	O
size_t	long
i	*(long)
;	O
if	O
(	O
!	O
gsl_histogram_equal_bins_p	(*(struct(long,*(double),*(double))),*(struct(long,*(double),*(double))))->(int)
(	O
h1	*(struct(long,*(double),*(double)))
,	O
h2	*(struct(long,*(double),*(double)))
)	O
)	O
{	O
GSL_ERROR	O
(	O
"histograms have different binning"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
for	O
(	O
i	*(long)
=	O
0	int
;	O
i	*(long)
<	O
h1	*(struct(long,*(double),*(double)))
->	O
n	long
;	O
i	*(long)
++	O
)	O
{	O
h1	*(struct(long,*(double),*(double)))
->	O
bin	*(double)
[	O
i	*(long)
]	O
/=	O
h2	*(struct(long,*(double),*(double)))
->	O
bin	*(double)
[	O
i	*(long)
]	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_histogram_scale	(*(struct(long,*(double),*(double))),double)->(int)
(	O
gsl_histogram	struct(long,*(double),*(double))
*	O
h	*(struct(long,*(double),*(double)))
,	O
double	O
scale	double
)	O
{	O
size_t	long
i	*(long)
;	O
for	O
(	O
i	*(long)
=	O
0	int
;	O
i	*(long)
<	O
h	*(struct(long,*(double),*(double)))
->	O
n	long
;	O
i	*(long)
++	O
)	O
{	O
h	*(struct(long,*(double),*(double)))
->	O
bin	*(double)
[	O
i	*(long)
]	O
*=	O
scale	double
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_histogram_shift	(*(struct(long,*(double),*(double))),double)->(int)
(	O
gsl_histogram	struct(long,*(double),*(double))
*	O
h	*(struct(long,*(double),*(double)))
,	O
double	O
shift	double
)	O
{	O
size_t	long
i	*(long)
;	O
for	O
(	O
i	*(long)
=	O
0	int
;	O
i	*(long)
<	O
h	*(struct(long,*(double),*(double)))
->	O
n	long
;	O
i	*(long)
++	O
)	O
{	O
h	*(struct(long,*(double),*(double)))
->	O
bin	*(double)
[	O
i	*(long)
]	O
+=	O
shift	double
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
