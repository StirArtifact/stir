unsigned	O
int	O
no_of_files	int
;	O
char	O
*	O
current_filename	*(char)
;	O
short	O
pass	short
;	O
unsigned	O
int	O
file_number	int
;	O
long	O
total_pages	long
;	O
int	O
page_width	int
;	O
int	O
page_length	int
;	O
boolean	enum(int,int,int)
use_environment	enum(int,int,int)
;	O
static	O
boolean	enum(int,int,int)
no_print_body	enum(int,int,int)
;	O
static	O
boolean	enum(int,int,int)
no_print_file_index	enum(int,int,int)
;	O
static	O
boolean	enum(int,int,int)
no_print_function_index	enum(int,int,int)
;	O
static	O
char	O
*	O
destination	*(char)
;	O
static	O
char	O
*	O
printer_destination	*(char)
;	O
static	O
short	O
no_of_copies	short
;	O
static	O
char	O
*	O
*	O
file_names	*(*(char))
;	O
static	O
char	O
*	O
output_filename	*(char)
;	O
static	O
boolean	enum(int,int,int)
redirect_output	enum(int,int,int)
;	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
,	O
char	O
*	O
*	O
)	O
;	O
static	O
void	O
setup_main	()->(void)
(	O
void	O
)	O
;	O
static	O
void	O
print_files	()->(void)
(	O
void	O
)	O
;	O
static	O
void	O
set_dest	(*(char),*(char),*(char))->(void)
(	O
const	O
char	O
*	O
p	*(char)
,	O
const	O
char	O
*	O
o	*(char)
,	O
char	O
*	O
value	*(char)
)	O
;	O
static	O
void	O
set_dest_default	(*(char))->(void)
(	O
char	O
*	O
value	*(char)
)	O
;	O
static	O
void	O
print_help	(*(char),*(char),*(char))->(void)
(	O
const	O
char	O
*	O
p	*(char)
,	O
const	O
char	O
*	O
o	*(char)
,	O
char	O
*	O
value	*(char)
)	O
;	O
static	O
void	O
print_version	(*(char),*(char))->(void)
(	O
const	O
char	O
*	O
p	*(char)
,	O
const	O
char	O
*	O
o	*(char)
)	O
;	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
unsigned	O
int	O
last_param_used	int
;	O
int	O
pipe_handle	int
=	O
-	O
1	int
;	O
use_environment	enum(int,int,int)
=	O
TRUE	int
;	O
setup_options	()->(void)
(	O
)	O
;	O
setup_debug	()->(void)
(	O
)	O
;	O
setup_input	()->(void)
(	O
)	O
;	O
setup_diffs	()->(void)
(	O
)	O
;	O
setup_headers	()->(void)
(	O
)	O
;	O
setup_index	()->(void)
(	O
)	O
;	O
setup_language	()->(void)
(	O
)	O
;	O
setup_output	()->(void)
(	O
)	O
;	O
setup_postscript	()->(void)
(	O
)	O
;	O
setup_printers_fl	()->(void)
(	O
)	O
;	O
setup_print_prompter	()->(void)
(	O
)	O
;	O
setup_main	()->(void)
(	O
)	O
;	O
use_environment	enum(int,int,int)
=	O
1	int
;	O
last_param_used	int
=	O
handle_options	(int,*(*(char)))->(int)
(	O
argc	int
,	O
argv	*(*(char))
)	O
;	O
dm	(char,int,*(char))->(void)
(	O
'o'	O
,	O
1	int
,	O
"Looking at TP_OPTS options\n"	*(char)
)	O
;	O
handle_string_options	(*(char))->(void)
(	O
getenv	(*(char))->(*(char))
(	O
"TP_OPTS"	*(char)
)	O
)	O
;	O
write_log	O
(	O
)	O
;	O
dm	(char,int,*(char))->(void)
(	O
'P'	O
,	O
1	int
,	O
"Checking parameters\n"	*(char)
)	O
;	O
if	O
(	O
last_param_used	int
<	O
(	O
unsigned	O
int	O
)	O
argc	int
)	O
{	O
file_names	*(*(char))
=	O
&	O
(	O
argv	*(*(char))
[	O
last_param_used	int
]	O
)	O
;	O
no_of_files	int
=	O
(	O
unsigned	O
int	O
)	O
argc	int
-	O
last_param_used	int
;	O
dm	(char,int,*(char))->(void)
(	O
'P'	O
,	O
1	int
,	O
"Got %d file names\n"	*(char)
,	O
no_of_files	int
)	O
;	O
}	O
else	O
{	O
static	O
char	O
*	O
stdin_filenames	array(*(char))
[	O
]	O
=	O
{	O
"-"	*(char)
,	O
0	int
}	O
;	O
file_names	*(*(char))
=	O
stdin_filenames	array(*(char))
;	O
no_of_files	int
=	O
1	int
;	O
dm	(char,int,*(char))->(void)
(	O
'P'	O
,	O
1	int
,	O
"No filenames - reading stdin\n"	*(char)
)	O
;	O
}	O
dm	(char,int,*(char))->(void)
(	O
'l'	O
,	O
1	int
,	O
"Setting language for filename %s\n"	*(char)
,	O
file_names	*(*(char))
[	O
0	int
]	O
)	O
;	O
handle_string_options	(*(char))->(void)
(	O
language_defaults	(*(char))->(*(char))
(	O
file_names	*(*(char))
[	O
0	int
]	O
)	O
)	O
;	O
dm	(char,int,*(char))->(void)
(	O
'o'	O
,	O
1	int
,	O
"Setting default options\n"	*(char)
)	O
;	O
if	O
(	O
use_environment	enum(int,int,int)
)	O
handle_string_options	(*(char))->(void)
(	O
DEFAULT_OPTS	*(char)
)	O
;	O
set_option_defaults	()->(void)
(	O
)	O
;	O
PS_pagesize	(*(char),*(int),*(int))->(void)
(	O
destination	*(char)
,	O
&	O
page_width	int
,	O
&	O
page_length	int
)	O
;	O
dm	(char,int,*(char))->(void)
(	O
'O'	O
,	O
1	int
,	O
"Page width is  %d, page length is %d\n"	*(char)
,	O
page_width	int
,	O
page_length	int
)	O
;	O
if	O
(	O
redirect_output	enum(int,int,int)
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
file_names	*(*(char))
[	O
0	int
]	O
,	O
"-"	*(char)
)	O
==	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
gettext	(*(char))->(*(char))
(	O
CMD_NAME	*(char)
": cannot use redirect-output option with stdin\n"	*(char)
)	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
output_filename	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
file_names	*(*(char))
[	O
0	int
]	O
)	O
+	O
4	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
output_filename	*(char)
,	O
file_names	*(*(char))
[	O
0	int
]	O
)	O
;	O
{	O
char	O
*	O
suffix	*(char)
;	O
suffix	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
output_filename	*(char)
,	O
'.'	O
)	O
;	O
if	O
(	O
suffix	*(char)
==	O
NULL	O
)	O
{	O
suffix	*(char)
=	O
output_filename	*(char)
+	O
strlen	(*(char))->(long)
(	O
output_filename	*(char)
)	O
;	O
}	O
*	O
(	O
suffix	*(char)
++	O
)	O
=	O
'.'	O
;	O
*	O
(	O
suffix	*(char)
++	O
)	O
=	O
'p'	O
;	O
*	O
(	O
suffix	*(char)
++	O
)	O
=	O
's'	O
;	O
*	O
(	O
suffix	*(char)
++	O
)	O
=	O
'\0'	O
;	O
}	O
dm	(char,int,*(char))->(void)
(	O
'O'	O
,	O
1	int
,	O
"main.c:main() Redirecting output to %s\n"	*(char)
,	O
output_filename	*(char)
)	O
;	O
}	O
dm	(char,int,*(char))->(void)
(	O
'p'	O
,	O
1	int
,	O
"Starting first pass\n"	*(char)
)	O
;	O
pass	short
=	O
0	int
;	O
init_postscript	()->(void)
(	O
)	O
;	O
print_files	()->(void)
(	O
)	O
;	O
total_pages	long
=	O
page_number	long
;	O
if	O
(	O
!	O
got_some_input	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
gettext	(*(char))->(*(char))
(	O
CMD_NAME	*(char)
": empty input, not submitting print job\n"	*(char)
)	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
dm	(char,int,*(char))->(void)
(	O
'p'	O
,	O
1	int
,	O
"Starting second pass\n"	*(char)
)	O
;	O
pass	short
=	O
1	int
;	O
init_postscript	()->(void)
(	O
)	O
;	O
if	O
(	O
(	O
strlen	(*(char))->(long)
(	O
output_filename	*(char)
)	O
>	O
0	int
)	O
&&	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
output_filename	*(char)
,	O
"-"	*(char)
)	O
!=	O
0	int
)	O
)	O
{	O
pipe_handle	int
=	O
creat	(*(char),int)->(int)
(	O
output_filename	*(char)
,	O
0666	int
)	O
;	O
if	O
(	O
pipe_handle	int
==	O
-	O
1	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
gettext	(*(char))->(*(char))
(	O
CMD_NAME	*(char)
": cannot open %s for writing, %s\n"	*(char)
)	O
,	O
output_filename	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
!	O
(	O
(	O
close	(int)->(int)
(	O
1	int
)	O
==	O
0	int
)	O
&&	O
(	O
dup	(int)->(int)
(	O
pipe_handle	int
)	O
==	O
1	int
)	O
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
dm	(char,int,*(char))->(void)
(	O
'O'	O
,	O
1	int
,	O
"Sending output to %s\n"	*(char)
,	O
output_filename	*(char)
)	O
;	O
}	O
else	O
{	O
}	O
dm	(char,int,*(char))->(void)
(	O
'P'	O
,	O
1	int
,	O
"Print out postscript header\n"	*(char)
)	O
;	O
PS_header	(*(char),enum(int,int,int))->(void)
(	O
use_environment	enum(int,int,int)
?	O
VERSION	*(char)
:	O
"3.6.5"	*(char)
,	O
!	O
no_print_body	enum(int,int,int)
)	O
;	O
dm	(char,int,*(char))->(void)
(	O
'i'	O
,	O
1	int
,	O
"sort function names & print indices if necessary\n"	*(char)
)	O
;	O
sort_function_names	()->(void)
(	O
)	O
;	O
if	O
(	O
(	O
no_print_function_index	enum(int,int,int)
==	O
FALSE	int
)	O
&&	O
(	O
print_prompt	(enum(int,int,int),long,*(char))->(enum(int,int,int))
(	O
PAGE_SPECIAL	int
,	O
0	int
,	O
"function index"	*(char)
)	O
==	O
TRUE	int
)	O
)	O
print_index	()->(void)
(	O
)	O
;	O
if	O
(	O
(	O
no_of_files	int
>	O
1	int
)	O
&&	O
(	O
no_print_file_index	enum(int,int,int)
==	O
FALSE	int
)	O
&&	O
(	O
print_prompt	(enum(int,int,int),long,*(char))->(enum(int,int,int))
(	O
PAGE_SPECIAL	int
,	O
0	int
,	O
"file index"	*(char)
)	O
==	O
TRUE	int
)	O
)	O
print_out_file_index	()->(void)
(	O
)	O
;	O
if	O
(	O
no_print_body	enum(int,int,int)
==	O
FALSE	int
)	O
{	O
print_files	()->(void)
(	O
)	O
;	O
}	O
PS_end_output	()->(void)
(	O
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
close	(int)->(int)
(	O
1	int
)	O
;	O
if	O
(	O
pipe_handle	int
!=	O
-	O
1	int
)	O
closepipe	(int)->(void)
(	O
pipe_handle	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
void	O
print_files	()->(void)
(	O
void	O
)	O
{	O
int	O
stream	int
;	O
static	O
int	O
stdin_stream	int
=	O
-	O
1	int
;	O
init_input	()->(void)
(	O
)	O
;	O
init_output	()->(void)
(	O
)	O
;	O
for	O
(	O
file_number	int
=	O
0	int
;	O
file_names	*(*(char))
[	O
file_number	int
]	O
;	O
file_number	int
++	O
)	O
{	O
current_filename	*(char)
=	O
file_names	*(*(char))
[	O
file_number	int
]	O
;	O
dm	(char,int,*(char))->(void)
(	O
'p'	O
,	O
3	int
,	O
"Looking at file %s\n"	*(char)
,	O
current_filename	*(char)
)	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
current_filename	*(char)
,	O
"-"	*(char)
)	O
==	O
0	int
)	O
{	O
if	O
(	O
pass	short
==	O
0	int
)	O
{	O
char	O
input_buffer	array(char)
[	O
BUFFER_SIZE	int
]	O
;	O
int	O
buffer_size	int
;	O
if	O
(	O
stdin_stream	int
!=	O
-	O
1	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
gettext	(*(char))->(*(char))
(	O
CMD_NAME	*(char)
": cannot specify stdin twice on command line\n"	*(char)
)	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
stdin_stream	int
=	O
fileno	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
tmpfile	()->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
)	O
)	O
;	O
while	O
(	O
(	O
buffer_size	int
=	O
read	(int,*(void),long)->(long)
(	O
fileno	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
,	O
input_buffer	array(char)
,	O
BUFFER_SIZE	int
)	O
)	O
>	O
0	int
)	O
{	O
if	O
(	O
write	(int,*(void),long)->(long)
(	O
stdin_stream	int
,	O
input_buffer	array(char)
,	O
buffer_size	int
)	O
<=	O
0	int
)	O
{	O
perror	(*(char))->(void)
(	O
CMD_NAME	*(char)
": cannot write to tmp file"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
}	O
if	O
(	O
lseek	(int,long,int)->(long)
(	O
stdin_stream	int
,	O
0	int
,	O
SEEK_SET	int
)	O
==	O
(	O
off_t	long
)	O
-	O
1	int
)	O
perror	(*(char))->(void)
(	O
CMD_NAME	*(char)
": cannot seek to start of tmp file"	*(char)
)	O
;	O
stream	int
=	O
stdin_stream	int
;	O
}	O
else	O
if	O
(	O
(	O
stream	int
=	O
open	(*(char),int)->(int)
(	O
file_names	*(*(char))
[	O
file_number	int
]	O
,	O
O_RDONLY	int
)	O
)	O
==	O
-	O
1	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
gettext	(*(char))->(*(char))
(	O
CMD_NAME	*(char)
": cannot open file %s, %s\n"	*(char)
)	O
,	O
current_filename	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
dm	(char,int,*(char))->(void)
(	O
'f'	O
,	O
3	int
,	O
"Opened stream %d to read file %s\n"	*(char)
,	O
stream	int
,	O
file_names	*(*(char))
[	O
file_number	int
]	O
)	O
;	O
if	O
(	O
pass	short
==	O
0	int
)	O
{	O
dm	(char,int,*(char))->(void)
(	O
'i'	O
,	O
3	int
,	O
"Pass file %s to index module\n"	*(char)
,	O
current_filename	*(char)
)	O
;	O
add_file	(*(char),int,long)->(void)
(	O
current_filename	*(char)
,	O
file_number	int
,	O
page_number	long
+	O
1	int
)	O
;	O
}	O
if	O
(	O
set_input_stream	(int)->(enum(int,int,int))
(	O
stream	int
)	O
)	O
{	O
dm	(char,int,*(char))->(void)
(	O
'd'	O
,	O
3	int
,	O
"Init diffs for pass %d, file %s\n"	*(char)
,	O
pass	short
,	O
current_filename	*(char)
)	O
;	O
init_diffs	(array(char))->(void)
(	O
current_filename	*(char)
)	O
;	O
print_file	()->(void)
(	O
)	O
;	O
dm	(char,int,*(char))->(void)
(	O
'd'	O
,	O
3	int
,	O
"Ending diffs for pass %d, file %s\n"	*(char)
,	O
pass	short
,	O
current_filename	*(char)
)	O
;	O
end_diffs	()->(void)
(	O
)	O
;	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
gettext	(*(char))->(*(char))
(	O
CMD_NAME	*(char)
": cannot read %s - possibly an empty file\n"	*(char)
)	O
,	O
current_filename	*(char)
)	O
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
file_names	*(*(char))
[	O
file_number	int
]	O
,	O
"-"	*(char)
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
close	(int)->(int)
(	O
stream	int
)	O
==	O
-	O
1	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
gettext	(*(char))->(*(char))
(	O
CMD_NAME	*(char)
": cannot close %s, %s\n"	*(char)
)	O
,	O
file_names	*(*(char))
[	O
file_number	int
]	O
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
pass	short
==	O
0	int
)	O
{	O
dm	(char,int,*(char))->(void)
(	O
'i'	O
,	O
3	int
,	O
"End file for index module\n"	*(char)
)	O
;	O
end_file	(int,long)->(void)
(	O
file_number	int
,	O
page_number	long
)	O
;	O
}	O
}	O
if	O
(	O
pass	short
==	O
1	int
)	O
{	O
file_number	int
--	O
;	O
fill_sheet_with_blank_pages	()->(void)
(	O
)	O
;	O
}	O
}	O
void	O
setup_main	()->(void)
(	O
void	O
)	O
{	O
page_width	int
=	O
-	O
1	int
;	O
page_length	int
=	O
-	O
1	int
;	O
destination	*(char)
=	O
NULL	O
;	O
printer_destination	*(char)
=	O
""	*(char)
;	O
no_of_copies	short
=	O
-	O
1	int
;	O
string_option	(*(char),*(char),*(char),*(*(char)),*((*(char),*(char),*(char))->(void)),*((*(char))->(void)),enum(int,int,int,int,int,int),*(char))->(void)
(	O
"d"	*(char)
,	O
"printer"	*(char)
,	O
""	*(char)
,	O
NULL	O
,	O
&	O
set_dest	(*(char),*(char),*(char))->(void)
,	O
&	O
set_dest_default	(*(char))->(void)
,	O
OPT_OUTPUT	int
,	O
"use printer <string>"	*(char)
)	O
;	O
string_option	(*(char),*(char),*(char),*(*(char)),*((*(char),*(char),*(char))->(void)),*((*(char))->(void)),enum(int,int,int,int,int,int),*(char))->(void)
(	O
"P"	*(char)
,	O
"printer"	*(char)
,	O
""	*(char)
,	O
NULL	O
,	O
&	O
set_dest	(*(char),*(char),*(char))->(void)
,	O
&	O
set_dest_default	(*(char))->(void)
,	O
OPT_OUTPUT	int
,	O
"use printer <string>"	*(char)
)	O
;	O
string_option	(*(char),*(char),*(char),*(*(char)),*((*(char),*(char),*(char))->(void)),*((*(char))->(void)),enum(int,int,int,int,int,int),*(char))->(void)
(	O
"s"	*(char)
,	O
"output"	*(char)
,	O
""	*(char)
,	O
&	O
output_filename	*(char)
,	O
NULL	O
,	O
NULL	O
,	O
OPT_OUTPUT	int
,	O
"send output to filename <string>; use - for stdout"	*(char)
)	O
;	O
boolean_option	(*(char),*(char),*(char),enum(int,int,int),*(enum(int,int,int)),*((*(char),*(char),enum(int,int,int))->(void)),*((enum(int,int,int))->(void)),enum(int,int,int,int,int,int),*(char),*(char))->(void)
(	O
"r"	*(char)
,	O
"redirect-output"	*(char)
,	O
"no-redirect-output"	*(char)
,	O
FALSE	int
,	O
&	O
redirect_output	enum(int,int,int)
,	O
NULL	O
,	O
NULL	O
,	O
OPT_OUTPUT	int
,	O
"redirect output to .ps file named after first filename"	*(char)
,	O
"don't redirect output"	*(char)
)	O
;	O
short_option	(*(char),*(char),short,*(char),short,short,short,*(short),*((*(char),*(char),short,short,short)->(void)),*((short)->(void)),enum(int,int,int,int,int,int),*(char),*(char))->(void)
(	O
"c"	*(char)
,	O
"copies"	*(char)
,	O
1	int
,	O
NULL	O
,	O
0	int
,	O
1	int
,	O
200	int
,	O
&	O
no_of_copies	short
,	O
NULL	O
,	O
NULL	O
,	O
OPT_OUTPUT	int
,	O
"specify number of copies to be printed"	*(char)
,	O
NULL	O
)	O
;	O
boolean_option	(*(char),*(char),*(char),enum(int,int,int),*(enum(int,int,int)),*((*(char),*(char),enum(int,int,int))->(void)),*((enum(int,int,int))->(void)),enum(int,int,int,int,int,int),*(char),*(char))->(void)
(	O
"F"	*(char)
,	O
"no-file-index"	*(char)
,	O
"file-index"	*(char)
,	O
FALSE	int
,	O
&	O
no_print_file_index	enum(int,int,int)
,	O
NULL	O
,	O
NULL	O
,	O
OPT_PRINT	int
,	O
"don't print file index"	*(char)
,	O
"print file index"	*(char)
)	O
;	O
boolean_option	(*(char),*(char),*(char),enum(int,int,int),*(enum(int,int,int)),*((*(char),*(char),enum(int,int,int))->(void)),*((enum(int,int,int))->(void)),enum(int,int,int,int,int,int),*(char),*(char))->(void)
(	O
"f"	*(char)
,	O
"no-function-index"	*(char)
,	O
"function-index"	*(char)
,	O
FALSE	int
,	O
&	O
no_print_function_index	enum(int,int,int)
,	O
NULL	O
,	O
NULL	O
,	O
OPT_PRINT	int
,	O
"don't print function index"	*(char)
,	O
"print function index"	*(char)
)	O
;	O
optional_string_option	(*(char),*(char),*((*(char),*(char),*(char))->(void)),enum(int,int,int,int,int,int),*(char))->(void)
(	O
"H"	*(char)
,	O
"help"	*(char)
,	O
&	O
print_help	(*(char),*(char),*(char))->(void)
,	O
OPT_MISC	int
,	O
"Type help information\n"	*(char)
"    --help=all-options - list all options\n"	*(char)
"    --help=misc-options - list miscellaneous options\n"	*(char)
"    --help=page-furniture-options - list page furniture options\n"	*(char)
"    --help=text-format-options - list text formatting options\n"	*(char)
"    --help=print-options - list options that select what to print\n"	*(char)
"    --help=page-format-options - list page format options\n"	*(char)
"    --help=output-options - list options that affect where output goes\n"	*(char)
"    --help=language - list languages\n"	*(char)
"    --help=prompt - format for --print-pages string\n"	*(char)
"    --help=debug - format for --debug string\n"	*(char)
"    --help=header - format for header & footer strings\n"	*(char)
"    --help=report - file format for --language=report input\n"	*(char)
"    --help=environment - list environment vars used"	*(char)
)	O
;	O
noparm_option	(*(char),*(char),enum(int,int,int),*((*(char),*(char))->(void)),*(()->(void)),enum(int,int,int,int,int,int),*(char))->(void)
(	O
"V"	*(char)
,	O
"version"	*(char)
,	O
FALSE	int
,	O
&	O
print_version	(*(char),*(char))->(void)
,	O
NULL	O
,	O
OPT_MISC	int
,	O
"Type version information"	*(char)
)	O
;	O
boolean_option	(*(char),*(char),*(char),enum(int,int,int),*(enum(int,int,int)),*((*(char),*(char),enum(int,int,int))->(void)),*((enum(int,int,int))->(void)),enum(int,int,int,int,int,int),*(char),*(char))->(void)
(	O
"B"	*(char)
,	O
"no-print-body"	*(char)
,	O
"print-body"	*(char)
,	O
FALSE	int
,	O
&	O
no_print_body	enum(int,int,int)
,	O
NULL	O
,	O
NULL	O
,	O
OPT_PRINT	int
,	O
"don't print body of text"	*(char)
,	O
"print body of text"	*(char)
)	O
;	O
boolean_option	(*(char),*(char),*(char),enum(int,int,int),*(enum(int,int,int)),*((*(char),*(char),enum(int,int,int))->(void)),*((enum(int,int,int))->(void)),enum(int,int,int,int,int,int),*(char),*(char))->(void)
(	O
"N"	*(char)
,	O
"use-environment"	*(char)
,	O
"ignore-environment"	*(char)
,	O
TRUE	int
,	O
&	O
use_environment	enum(int,int,int)
,	O
NULL	O
,	O
NULL	O
,	O
OPT_MISC	int
,	O
"use environment variables"	*(char)
,	O
"don't use values from environment, such as time,\n"	*(char)
"    $USER, etc.  This is for test purposes, to make test results\n"	*(char)
"    more reproducible"	*(char)
)	O
;	O
int_option	(*(char),*(char),int,*(char),int,int,int,*(int),*((*(char),*(char),int,int,int)->(void)),*((int)->(void)),enum(int,int,int,int,int,int),*(char),*(char))->(void)
(	O
"w"	*(char)
,	O
"line-wrap"	*(char)
,	O
-	O
1	int
,	O
"no-line-wrap"	*(char)
,	O
0	int
,	O
-	O
1	int
,	O
200	int
,	O
&	O
page_width	int
,	O
NULL	O
,	O
NULL	O
,	O
OPT_TEXT_FORMAT	int
,	O
"specify the line-wrap column."	*(char)
,	O
"turn off line-wrap"	*(char)
)	O
;	O
int_option	(*(char),*(char),int,*(char),int,int,int,*(int),*((*(char),*(char),int,int,int)->(void)),*((int)->(void)),enum(int,int,int,int,int,int),*(char),*(char))->(void)
(	O
"l"	*(char)
,	O
"page-length"	*(char)
,	O
-	O
1	int
,	O
NULL	O
,	O
0	int
,	O
5	int
,	O
200	int
,	O
&	O
page_length	int
,	O
NULL	O
,	O
NULL	O
,	O
OPT_TEXT_FORMAT	int
,	O
"specify number of lines on a page, point size is\n"	*(char)
"    calculated appropriately"	*(char)
,	O
NULL	O
)	O
;	O
}	O
void	O
set_dest_default	(*(char))->(void)
(	O
char	O
*	O
value	*(char)
)	O
{	O
set_dest	(*(char),*(char),*(char))->(void)
(	O
NULL	O
,	O
NULL	O
,	O
value	*(char)
)	O
;	O
}	O
void	O
set_dest	(*(char),*(char),*(char))->(void)
(	O
const	O
char	O
*	O
p	*(char)
,	O
const	O
char	O
*	O
o	*(char)
,	O
char	O
*	O
value	*(char)
)	O
{	O
return	O
;	O
}	O
void	O
print_help	(*(char),*(char),*(char))->(void)
(	O
const	O
char	O
*	O
p	*(char)
,	O
const	O
char	O
*	O
o	*(char)
,	O
char	O
*	O
value	*(char)
)	O
{	O
if	O
(	O
value	*(char)
)	O
{	O
printf	(*(char))->(int)
(	O
gettext	(*(char))->(*(char))
(	O
"Help for %s:\n"	*(char)
)	O
,	O
value	*(char)
)	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
value	*(char)
,	O
"all-options"	*(char)
)	O
==	O
0	int
)	O
{	O
print_usage_msgs	(enum(int,int,int,int,int,int))->(void)
(	O
OPT_MISC	int
)	O
;	O
print_usage_msgs	(enum(int,int,int,int,int,int))->(void)
(	O
OPT_PAGE_FURNITURE	int
)	O
;	O
print_usage_msgs	(enum(int,int,int,int,int,int))->(void)
(	O
OPT_TEXT_FORMAT	int
)	O
;	O
print_usage_msgs	(enum(int,int,int,int,int,int))->(void)
(	O
OPT_PRINT	int
)	O
;	O
print_usage_msgs	(enum(int,int,int,int,int,int))->(void)
(	O
OPT_PAGE_FORMAT	int
)	O
;	O
print_usage_msgs	(enum(int,int,int,int,int,int))->(void)
(	O
OPT_OUTPUT	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
value	*(char)
,	O
"misc-options"	*(char)
)	O
==	O
0	int
)	O
{	O
print_usage_msgs	(enum(int,int,int,int,int,int))->(void)
(	O
OPT_MISC	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
value	*(char)
,	O
"page-furniture-options"	*(char)
)	O
==	O
0	int
)	O
{	O
print_usage_msgs	(enum(int,int,int,int,int,int))->(void)
(	O
OPT_PAGE_FURNITURE	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
value	*(char)
,	O
"text-format-options"	*(char)
)	O
==	O
0	int
)	O
{	O
print_usage_msgs	(enum(int,int,int,int,int,int))->(void)
(	O
OPT_TEXT_FORMAT	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
value	*(char)
,	O
"print-options"	*(char)
)	O
==	O
0	int
)	O
{	O
print_usage_msgs	(enum(int,int,int,int,int,int))->(void)
(	O
OPT_PRINT	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
value	*(char)
,	O
"page-format-options"	*(char)
)	O
==	O
0	int
)	O
{	O
print_usage_msgs	(enum(int,int,int,int,int,int))->(void)
(	O
OPT_PAGE_FORMAT	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
value	*(char)
,	O
"output-options"	*(char)
)	O
==	O
0	int
)	O
{	O
print_usage_msgs	(enum(int,int,int,int,int,int))->(void)
(	O
OPT_OUTPUT	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
value	*(char)
,	O
"language"	*(char)
)	O
==	O
0	int
)	O
{	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
gettext	(*(char))->(*(char))
(	O
language_list	*(char)
)	O
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
value	*(char)
,	O
"environment"	*(char)
)	O
==	O
0	int
)	O
{	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
gettext	(*(char))->(*(char))
(	O
"  Environment variables used by trueprint:\n"	*(char)
"    TP_DIFF_CMD:  command used to generate diffs, devault is diff\n"	*(char)
"    USER:         username for headers, footers, coversheet, etc.\n"	*(char)
"    TP_OPTS:      default trueprint options, overridden by command line opts\n"	*(char)
"    TP_PRINT_CMD: command used to print output, default is lp or lpr\n"	*(char)
"    PRINTER:      name of printer to send output to\n"	*(char)
)	O
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
value	*(char)
,	O
"prompt"	*(char)
)	O
==	O
0	int
)	O
{	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
gettext	(*(char))->(*(char))
(	O
"--print-pages <pagelist>\n"	*(char)
" Format for <pagelist>:\n"	*(char)
"      <pagelist> is a comma separated list of specifiers.  A specifier can be\n"	*(char)
"      a single page number, a range of page numbers, a function name, or a\n"	*(char)
"      special letter:\n"	*(char)
"      A range of pages is specified by the lower number, then a dash, then the\n"	*(char)
"      upper number\n"	*(char)
"      A special letter can be d, D, f, F or c for\n"	*(char)
"	changed pages, changed functions, function index, file index or cross\n"	*(char)
"      reference information respectively - note that the page will only be printed\n"	*(char)
"      if it would have been printed without the -A option\n"	*(char)
"      For example: trueprint --print-pages 1-5,main,f main.c\n"	*(char)
"           will print out pages 1-5, all pages for function main, and the function index\n"	*(char)
)	O
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
value	*(char)
,	O
"header"	*(char)
)	O
==	O
0	int
)	O
{	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
gettext	(*(char))->(*(char))
(	O
" Format for <string>:\n"	*(char)
"	<string> is used to specify header and footer contents, and can contain the\n"	*(char)
"	following sequences:\n"	*(char)
"	%% a percent character\n"	*(char)
"	%m month of year\n"	*(char)
"	%d day of month\n"	*(char)
"	%y year e.g. 1993\n"	*(char)
"	%D date mm/dd/yy\n"	*(char)
"	%L long date e.g. Fri Oct 8 11:49:51 1993\n"	*(char)
"	%c file modification date mm/dd/yy\n"	*(char)
"	%C file modification date in long format\n"	*(char)
"	%H hour\n"	*(char)
"	%M minute\n"	*(char)
"	%S second\n"	*(char)
"	%T time HH:MM:SS\n"	*(char)
"	%j day of year ddd\n"	*(char)
"	%w day of week (Sunday = 0)\n"	*(char)
"	%a abbreviated weekday\n"	*(char)
"	%h abbreviated month\n"	*(char)
"	%r time in am/pm notation\n"	*(char)
"	%p page number in current file\n"	*(char)
"	%P overall page number\n"	*(char)
"	%f number of pages in current file\n"	*(char)
"	%F final overall page number\n"	*(char)
"	%n current filename\n"	*(char)
"	%N current functionname\n"	*(char)
"	%l login name\n"	*(char)
)	O
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
value	*(char)
,	O
"debug"	*(char)
)	O
==	O
0	int
)	O
{	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
gettext	(*(char))->(*(char))
(	O
" Format for <debug-string>:	series of char/digit pairs where char\n"	*(char)
"	specifies information, digit specifies level of detail, in\n"	*(char)
"	general 1=stuff that happens once, 2=per-pass, 3=per-file,\n"	*(char)
"	4=per-page, 8=per-line - but this is not fully implemented...\n"	*(char)
"	Current chars are: o=options, i=index, O=output, P=parameters\n"	*(char)
"	l=language, p=pass, h=headers/footers, I=input,\n"	*(char)
"	d=diffs, f=file/stream handling, D=destination/printer\n"	*(char)
"	@=all of the above\n"	*(char)
)	O
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
value	*(char)
,	O
"report"	*(char)
)	O
==	O
0	int
)	O
{	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
gettext	(*(char))->(*(char))
(	O
" Format for files when using --language=report:\n"	*(char)
"   Strings between ^B amd ^E are printed in bold and\n"	*(char)
"   are indexed as function names.\n"	*(char)
"   Strings between ^C and ^C are printed in italics\n"	*(char)
)	O
)	O
;	O
}	O
else	O
{	O
printf	(*(char))->(int)
(	O
gettext	(*(char))->(*(char))
(	O
CMD_NAME	*(char)
": Unrecognized help option:%s\nUse --help for valid options\n"	*(char)
)	O
,	O
value	*(char)
)	O
;	O
}	O
}	O
else	O
{	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
gettext	(*(char))->(*(char))
(	O
"Usage: trueprint <options> <filenames>\n"	*(char)
"For details see:\n"	*(char)
"    --help=all-options - list all options\n"	*(char)
"    --help=misc-options - list miscellaneous options\n"	*(char)
"    --help=page-furniture-options - list page furniture options\n"	*(char)
"    --help=text-format-options - list text formatting options\n"	*(char)
"    --help=print-options - list options that select what to print\n"	*(char)
"    --help=page-format-options - list page format options\n"	*(char)
"    --help=output-options - list options that affect where output goes\n"	*(char)
"    --help=language - list languages\n"	*(char)
"    --help=prompt - format for --print-pages string\n"	*(char)
"    --help=debug - format for --debug string\n"	*(char)
"    --help=header - format for header & footer strings\n"	*(char)
"    --help=report - file format for --language=report input\n"	*(char)
"    --help=environment - list environment vars used\n"	*(char)
)	O
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
gettext	(*(char))->(*(char))
(	O
"Report bugs to bug-trueprint@gnu.org\n"	*(char)
)	O
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
void	O
print_version	(*(char),*(char))->(void)
(	O
const	O
char	O
*	O
p	*(char)
,	O
const	O
char	O
*	O
o	*(char)
)	O
{	O
printf	(*(char))->(int)
(	O
"GNU Trueprint %s\n"	*(char)
,	O
VERSION	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
gettext	(*(char))->(*(char))
(	O
"Copyright (C) 1999 Free Software Foundation, Inc.\n"	*(char)
"GNU Trueprint comes with NO WARRANTY,\n"	*(char)
"to the extent permitted by law.\n"	*(char)
"You may redistribute copies of GNU Trueprint\n"	*(char)
"under the terms of the GNU General Public License.\n"	*(char)
"For more information about these matters,\n"	*(char)
"see the file named COPYING.\n"	*(char)
)	O
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
