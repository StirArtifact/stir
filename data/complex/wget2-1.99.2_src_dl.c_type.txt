static	O
void	O
dl_error_set_noalloc	(*(struct(*(char))),*(char))->(void)
(	O
dl_error_t	struct(*(char))
*	O
e	*(struct(*(char)))
,	O
const	O
char	O
*	O
msg	*(char)
)	O
{	O
if	O
(	O
msg	*(char)
&&	O
e	*(struct(*(char)))
->	O
msg	*(char)
)	O
wget_error_printf	(*(char))->(void)
(	O
_	O
(	O
"Piling up error '%s' over error '%s'"	*(char)
)	O
,	O
msg	*(char)
,	O
e	*(struct(*(char)))
->	O
msg	*(char)
)	O
;	O
wget_free	*((*(void))->(void))
(	O
(	O
void	O
*	O
)	O
e	*(struct(*(char)))
->	O
msg	*(char)
)	O
;	O
e	*(struct(*(char)))
->	O
msg	*(char)
=	O
msg	*(char)
;	O
}	O
void	O
dl_error_set	(*(struct(*(char))),*(char))->(void)
(	O
dl_error_t	struct(*(char))
*	O
e	*(struct(*(char)))
,	O
const	O
char	O
*	O
msg	*(char)
)	O
{	O
dl_error_set_noalloc	(*(struct(*(char))),*(char))->(void)
(	O
e	*(struct(*(char)))
,	O
wget_strdup	(*(char))->(*(char))
(	O
msg	*(char)
)	O
)	O
;	O
}	O
void	O
dl_error_set_printf	(*(struct(*(char))),*(char))->(void)
(	O
dl_error_t	struct(*(char))
*	O
e	*(struct(*(char)))
,	O
const	O
char	O
*	O
format	*(char)
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
arglist	array(struct(int,int,*(void),*(void)))
;	O
va_start	O
(	O
arglist	array(struct(int,int,*(void),*(void)))
,	O
format	*(char)
)	O
;	O
dl_error_set_noalloc	(*(struct(*(char))),*(char))->(void)
(	O
e	*(struct(*(char)))
,	O
wget_vaprintf	(*(char),array(struct(int,int,*(void),*(void))))->(*(char))
(	O
format	*(char)
,	O
arglist	array(struct(int,int,*(void),*(void)))
)	O
)	O
;	O
va_end	O
(	O
arglist	array(struct(int,int,*(void),*(void)))
)	O
;	O
}	O
static	O
char	O
*	O
convert_to_path_if_not	(*(char))->(*(char))
(	O
const	O
char	O
*	O
str	*(char)
)	O
{	O
if	O
(	O
str	*(char)
&&	O
!	O
strchr	(*(char),int)->(*(char))
(	O
str	*(char)
,	O
'/'	O
)	O
)	O
return	O
wget_aprintf	(*(char))->(*(char))
(	O
"./%s"	*(char)
,	O
str	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
int	O
dl_supported	()->(int)
(	O
void	O
)	O
{	O
return	O
1	int
;	O
}	O
struct	O
dl_file_st	struct(*(void))
{	O
void	O
*	O
handle	*(struct)
;	O
}	O
;	O
dl_file_t	struct
*	O
dl_file_open	(*(char),*(struct(*(char))))->(*(struct))
(	O
const	O
char	O
*	O
filename	*(*(char))
,	O
dl_error_t	struct(*(char))
*	O
e	*(struct(*(char)))
)	O
{	O
dl_file_t	struct
*	O
dm	*(struct)
=	O
NULL	O
;	O
dl_file_t	struct
dm_st	struct(*(void))
;	O
char	O
*	O
buf	*(char)
=	O
convert_to_path_if_not	(*(char))->(*(char))
(	O
filename	*(*(char))
)	O
;	O
dm_st	struct(*(void))
.	O
handle	*(struct)
=	O
dlopen	(*(char),int)->(*(void))
(	O
buf	*(char)
?	O
buf	*(char)
:	O
filename	*(*(char))
,	O
RTLD_LAZY	int
|	O
RTLD_LOCAL	int
)	O
;	O
wget_xfree	O
(	O
buf	*(char)
)	O
;	O
if	O
(	O
dm_st	struct(*(void))
.	O
handle	*(struct)
)	O
dm	*(struct)
=	O
wget_memdup	(*(void),long)->(*(void))
(	O
&	O
dm_st	struct(*(void))
,	O
sizeof	O
(	O
dl_file_t	struct
)	O
)	O
;	O
else	O
dl_error_set	(*(struct(*(char))),*(char))->(void)
(	O
e	*(struct(*(char)))
,	O
dlerror	()->(*(char))
(	O
)	O
)	O
;	O
return	O
dm	*(struct)
;	O
}	O
void	O
*	O
dl_file_lookup	(*(struct),*(char),*(struct(*(char))))->(*(void))
(	O
dl_file_t	struct
*	O
dm	*(struct)
,	O
const	O
char	O
*	O
symbol	*(char)
,	O
dl_error_t	struct(*(char))
*	O
e	*(struct(*(char)))
)	O
{	O
void	O
*	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
;	O
char	O
*	O
error	bool
;	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
=	O
dlsym	(*(void),*(char))->(*(void))
(	O
dm	*(struct)
->	O
handle	*(struct)
,	O
symbol	*(char)
)	O
;	O
error	bool
=	O
dlerror	()->(*(char))
(	O
)	O
;	O
if	O
(	O
error	bool
)	O
{	O
dl_error_set	(*(struct(*(char))),*(char))->(void)
(	O
e	*(struct(*(char)))
,	O
error	bool
)	O
;	O
return	O
NULL	O
;	O
}	O
return	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
;	O
}	O
void	O
dl_file_close	(*(struct))->(void)
(	O
dl_file_t	struct
*	O
dm	*(struct)
)	O
{	O
dlclose	(*(void))->(int)
(	O
dm	*(struct)
->	O
handle	*(struct)
)	O
;	O
wget_free	*((*(void))->(void))
(	O
dm	*(struct)
)	O
;	O
}	O
typedef	O
struct	O
{	O
const	O
char	O
*	O
prefix	*(char)
;	O
const	O
char	O
*	O
suffix	*(char)
;	O
}	O
object_pattern_t	struct(*(char),*(char))
;	O
static	O
const	O
object_pattern_t	struct(*(char),*(char))
dl_patterns	array(struct(*(char),*(char)))
[	O
]	O
=	O
{	O
PATTERNS	O
,	O
{	O
NULL	O
,	O
NULL	O
}	O
}	O
;	O
static	O
int	O
dl_match	(*(char),*(long),*(long))->(int)
(	O
const	O
char	O
*	O
path	*(char)
,	O
size_t	long
*	O
start_out	*(long)
,	O
size_t	long
*	O
len_out	*(long)
)	O
{	O
size_t	long
i	long
,	O
mark	long
;	O
size_t	long
start	int
,	O
len	long
;	O
mark	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
path	*(char)
[	O
i	long
]	O
;	O
i	long
++	O
)	O
{	O
if	O
(	O
path	*(char)
[	O
i	long
]	O
==	O
'/'	O
)	O
mark	long
=	O
i	long
+	O
1	int
;	O
}	O
start	int
=	O
mark	long
;	O
len	long
=	O
i	long
-	O
start	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
dl_patterns	array(struct(*(char),*(char)))
[	O
i	long
]	O
.	O
prefix	*(char)
;	O
i	long
++	O
)	O
{	O
const	O
char	O
*	O
p	*(char)
=	O
dl_patterns	array(struct(*(char),*(char)))
[	O
i	long
]	O
.	O
prefix	*(char)
;	O
const	O
char	O
*	O
s	*(char)
=	O
dl_patterns	array(struct(*(char),*(char)))
[	O
i	long
]	O
.	O
suffix	*(char)
;	O
size_t	long
pl	long
=	O
strlen	(*(char))->(long)
(	O
p	*(char)
)	O
;	O
size_t	long
sl	long
=	O
strlen	(*(char))->(long)
(	O
s	*(char)
)	O
;	O
if	O
(	O
pl	long
+	O
sl	long
>=	O
len	long
)	O
continue	O
;	O
if	O
(	O
memcmp	(*(void),*(void),long)->(int)
(	O
path	*(char)
+	O
start	int
+	O
len	long
-	O
sl	long
,	O
s	*(char)
,	O
sl	long
)	O
==	O
0	int
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
path	*(char)
+	O
start	int
,	O
p	*(char)
,	O
pl	long
)	O
==	O
0	int
)	O
{	O
start	int
+=	O
pl	long
;	O
len	long
-=	O
(	O
pl	long
+	O
sl	long
)	O
;	O
break	O
;	O
}	O
}	O
*	O
start_out	*(long)
=	O
start	int
;	O
*	O
len_out	*(long)
=	O
len	long
;	O
return	O
dl_patterns	array(struct(*(char),*(char)))
[	O
i	long
]	O
.	O
prefix	*(char)
?	O
1	int
:	O
0	int
;	O
}	O
static	O
int	O
is_regular_file	(*(char))->(int)
(	O
const	O
char	O
*	O
filename	*(*(char))
)	O
{	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
filename	*(*(char))
,	O
&	O
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
<	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
S_ISREG	O
(	O
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
char	O
*	O
dl_get_name_from_path	(*(char),int)->(*(char))
(	O
const	O
char	O
*	O
path	*(char)
,	O
int	O
strict	int
)	O
{	O
size_t	long
start	int
,	O
len	long
;	O
int	O
match	int
=	O
dl_match	(*(char),*(long),*(long))->(int)
(	O
path	*(char)
,	O
&	O
start	int
,	O
&	O
len	long
)	O
;	O
if	O
(	O
!	O
match	int
&&	O
strict	int
)	O
return	O
NULL	O
;	O
else	O
return	O
wget_strmemdup	(*(void),long)->(*(char))
(	O
path	*(char)
+	O
start	int
,	O
len	long
)	O
;	O
}	O
char	O
*	O
dl_search	(*(char),*(struct))->(*(char))
(	O
const	O
char	O
*	O
name	*(char)
,	O
const	O
wget_vector	struct
*	O
dirs	*(struct)
)	O
{	O
int	O
n_dirs	int
=	O
wget_vector_size	(*(struct))->(int)
(	O
dirs	*(struct)
)	O
;	O
for	O
(	O
int	O
i	long
=	O
0	int
;	O
i	long
<	O
n_dirs	int
;	O
i	long
++	O
)	O
{	O
const	O
char	O
*	O
dir	array(char)
=	O
wget_vector_get	(*(struct),int)->(*(void))
(	O
dirs	*(struct)
,	O
i	long
)	O
;	O
if	O
(	O
dir	array(char)
&&	O
*	O
dir	array(char)
)	O
{	O
for	O
(	O
int	O
j	int
=	O
0	int
;	O
dl_patterns	array(struct(*(char),*(char)))
[	O
j	int
]	O
.	O
prefix	*(char)
;	O
j	int
++	O
)	O
{	O
char	O
*	O
filename	*(*(char))
=	O
wget_aprintf	(*(char))->(*(char))
(	O
"%s/%s%s%s"	*(char)
,	O
dir	array(char)
,	O
dl_patterns	array(struct(*(char),*(char)))
[	O
j	int
]	O
.	O
prefix	*(char)
,	O
name	*(char)
,	O
dl_patterns	array(struct(*(char),*(char)))
[	O
j	int
]	O
.	O
suffix	*(char)
)	O
;	O
if	O
(	O
is_regular_file	(*(char))->(int)
(	O
filename	*(*(char))
)	O
)	O
return	O
filename	*(*(char))
;	O
wget_free	*((*(void))->(void))
(	O
filename	*(*(char))
)	O
;	O
}	O
}	O
else	O
{	O
for	O
(	O
int	O
j	int
=	O
0	int
;	O
dl_patterns	array(struct(*(char),*(char)))
[	O
j	int
]	O
.	O
prefix	*(char)
;	O
j	int
++	O
)	O
{	O
char	O
*	O
filename	*(*(char))
=	O
wget_aprintf	(*(char))->(*(char))
(	O
"%s%s%s"	*(char)
,	O
dl_patterns	array(struct(*(char),*(char)))
[	O
j	int
]	O
.	O
prefix	*(char)
,	O
name	*(char)
,	O
dl_patterns	array(struct(*(char),*(char)))
[	O
j	int
]	O
.	O
suffix	*(char)
)	O
;	O
if	O
(	O
is_regular_file	(*(char))->(int)
(	O
filename	*(*(char))
)	O
)	O
return	O
filename	*(*(char))
;	O
wget_free	*((*(void))->(void))
(	O
filename	*(*(char))
)	O
;	O
}	O
}	O
}	O
return	O
NULL	O
;	O
}	O
void	O
dl_list	(*(struct),*(struct))->(void)
(	O
const	O
wget_vector	struct
*	O
dirs	*(struct)
,	O
wget_vector	struct
*	O
names_out	*(struct)
)	O
{	O
int	O
n_dirs	int
=	O
wget_vector_size	(*(struct))->(int)
(	O
dirs	*(struct)
)	O
;	O
for	O
(	O
int	O
i	long
=	O
0	int
;	O
i	long
<	O
n_dirs	int
;	O
i	long
++	O
)	O
{	O
DIR	struct
*	O
dirp	*(struct)
;	O
struct	O
dirent	struct(long,long,short,char,array(char))
*	O
ent	*(struct(long,long,short,char,array(char)))
;	O
const	O
char	O
*	O
dir	array(char)
=	O
wget_vector_get	(*(struct),int)->(*(void))
(	O
dirs	*(struct)
,	O
i	long
)	O
;	O
dirp	*(struct)
=	O
opendir	(*(char))->(*(struct))
(	O
dir	array(char)
)	O
;	O
if	O
(	O
!	O
dirp	*(struct)
)	O
continue	O
;	O
while	O
(	O
(	O
ent	*(struct(long,long,short,char,array(char)))
=	O
readdir	(*(struct))->(*(struct(long,long,short,char,array(char))))
(	O
dirp	*(struct)
)	O
)	O
!=	O
NULL	O
)	O
{	O
char	O
*	O
fname	*(char)
;	O
char	O
*	O
name	*(char)
;	O
fname	*(char)
=	O
ent	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
;	O
name	*(char)
=	O
dl_get_name_from_path	(*(char),int)->(*(char))
(	O
fname	*(char)
,	O
1	int
)	O
;	O
if	O
(	O
!	O
name	*(char)
)	O
continue	O
;	O
{	O
char	O
*	O
sfname	*(char)
=	O
wget_aprintf	(*(char))->(*(char))
(	O
"%s/%s"	*(char)
,	O
dir	array(char)
,	O
fname	*(char)
)	O
;	O
int	O
x	int
=	O
is_regular_file	(*(char))->(int)
(	O
sfname	*(char)
)	O
;	O
wget_free	*((*(void))->(void))
(	O
sfname	*(char)
)	O
;	O
if	O
(	O
!	O
x	int
)	O
{	O
wget_free	*((*(void))->(void))
(	O
name	*(char)
)	O
;	O
continue	O
;	O
}	O
}	O
wget_vector_add	(*(struct),*(void))->(int)
(	O
names_out	*(struct)
,	O
name	*(char)
)	O
;	O
}	O
closedir	(*(struct))->(int)
(	O
dirp	*(struct)
)	O
;	O
}	O
}	O
