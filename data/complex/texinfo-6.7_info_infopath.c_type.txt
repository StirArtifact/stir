typedef	O
struct	O
{	O
char	O
*	O
name	*(char)
;	O
dev_t	long
device	long
;	O
ino_t	long
inode	long
;	O
}	O
INFO_DIR	struct(*(char),long,long)
;	O
INFO_DIR	struct(*(char),long,long)
*	O
*	O
infodirs	*(*(struct(*(char),long,long)))
=	O
0	int
;	O
size_t	long
infodirs_index	long
=	O
0	int
;	O
size_t	long
infodirs_slots	long
=	O
0	int
;	O
int	O
infopath_no_defaults_p	int
;	O
static	O
void	O
infopath_add_dir	(*(char))->(void)
(	O
char	O
*	O
path	*(char)
)	O
;	O
char	O
*	O
extract_colon_unit	(*(char),*(int))->(*(char))
(	O
char	O
*	O
string	*(char)
,	O
int	O
*	O
idx	*(int)
)	O
;	O
void	O
infopath_init	()->(void)
(	O
)	O
{	O
char	O
*	O
path_from_env	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"INFOPATH"	*(char)
)	O
;	O
if	O
(	O
path_from_env	*(char)
)	O
{	O
infopath_add	(*(char))->(void)
(	O
path_from_env	*(char)
)	O
;	O
}	O
if	O
(	O
!	O
infopath_no_defaults_p	int
)	O
{	O
infopath_add	(*(char))->(void)
(	O
INFODIR	O
)	O
;	O
if	O
(	O
!	O
STREQ	O
(	O
INFODIR	O
,	O
INFODIR2	O
)	O
)	O
infopath_add	(*(char))->(void)
(	O
INFODIR2	O
)	O
;	O
}	O
if	O
(	O
!	O
path_from_env	*(char)
)	O
{	O
infopath_add	(*(char))->(void)
(	O
DEFAULT_INFOPATH	*(char)
)	O
;	O
}	O
else	O
{	O
unsigned	O
len	long
=	O
strlen	(*(char))->(long)
(	O
path_from_env	*(char)
)	O
;	O
if	O
(	O
len	long
&&	O
path_from_env	*(char)
[	O
len	long
-	O
1	int
]	O
==	O
PATH_SEP	*(char)
[	O
0	int
]	O
)	O
{	O
path_from_env	*(char)
[	O
len	long
-	O
1	int
]	O
=	O
0	int
;	O
infopath_add	(*(char))->(void)
(	O
DEFAULT_INFOPATH	*(char)
)	O
;	O
}	O
}	O
}	O
char	O
*	O
infopath_string	()->(*(char))
(	O
)	O
{	O
struct	O
text_buffer	struct(*(char),long,long)
path	*(char)
;	O
int	O
dir_idx	int
;	O
char	O
*	O
this_dir	*(char)
;	O
this_dir	*(char)
=	O
infopath_first	(*(int))->(*(char))
(	O
&	O
dir_idx	int
)	O
;	O
if	O
(	O
!	O
this_dir	*(char)
)	O
return	O
""	*(char)
;	O
text_buffer_init	(*(struct(*(char),long,long)))->(void)
(	O
&	O
path	*(char)
)	O
;	O
while	O
(	O
1	int
)	O
{	O
text_buffer_printf	(*(struct(*(char),long,long)),*(char))->(long)
(	O
&	O
path	*(char)
,	O
"%s"	*(char)
,	O
this_dir	*(char)
)	O
;	O
this_dir	*(char)
=	O
infopath_next	(*(int))->(*(char))
(	O
&	O
dir_idx	int
)	O
;	O
if	O
(	O
!	O
this_dir	*(char)
)	O
break	O
;	O
text_buffer_add_char	(*(struct(*(char),long,long)),int)->(void)
(	O
&	O
path	*(char)
,	O
':'	O
)	O
;	O
}	O
return	O
text_buffer_base	O
(	O
&	O
path	*(char)
)	O
;	O
}	O
static	O
void	O
build_infopath_from_path	()->(void)
(	O
void	O
)	O
{	O
char	O
*	O
path_from_env	*(char)
,	O
*	O
temp_dirname	*(char)
;	O
int	O
dirname_index	int
=	O
0	int
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
finfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
path_from_env	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"PATH"	*(char)
)	O
;	O
while	O
(	O
(	O
temp_dirname	*(char)
=	O
extract_colon_unit	(*(char),*(int))->(*(char))
(	O
path_from_env	*(char)
,	O
&	O
dirname_index	int
)	O
)	O
)	O
{	O
unsigned	O
int	O
i	int
,	O
dir	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
temp_dirname	*(char)
[	O
i	int
]	O
;	O
i	int
++	O
)	O
if	O
(	O
i	int
&&	O
IS_SLASH	O
(	O
temp_dirname	*(char)
[	O
i	int
]	O
)	O
)	O
dir	int
=	O
i	int
+	O
1	int
;	O
if	O
(	O
!	O
temp_dirname	*(char)
[	O
dir	int
]	O
||	O
STREQ	O
(	O
temp_dirname	*(char)
+	O
dir	int
,	O
"."	*(char)
)	O
||	O
STREQ	O
(	O
temp_dirname	*(char)
+	O
dir	int
,	O
"."	*(char)
)	O
)	O
dir	int
=	O
0	int
;	O
if	O
(	O
dir	int
)	O
{	O
temp_dirname	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
temp_dirname	*(char)
,	O
dir	int
+	O
strlen	(*(char))->(long)
(	O
"share/info"	*(char)
)	O
+	O
1	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
temp_dirname	*(char)
+	O
dir	int
,	O
"share/info"	*(char)
)	O
;	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
temp_dirname	*(char)
,	O
&	O
finfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
!=	O
0	int
||	O
!	O
S_ISDIR	O
(	O
finfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
temp_dirname	*(char)
+	O
dir	int
,	O
"info"	*(char)
)	O
;	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
temp_dirname	*(char)
,	O
&	O
finfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
!=	O
0	int
||	O
!	O
S_ISDIR	O
(	O
finfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
)	O
dir	int
=	O
0	int
;	O
}	O
}	O
if	O
(	O
dir	int
)	O
infopath_add_dir	(*(char))->(void)
(	O
temp_dirname	*(char)
)	O
;	O
else	O
free	(*(void))->(void)
(	O
temp_dirname	*(char)
)	O
;	O
}	O
}	O
static	O
void	O
infopath_add_dir	(*(char))->(void)
(	O
char	O
*	O
path	*(char)
)	O
{	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
dirinfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
INFO_DIR	struct(*(char),long,long)
*	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
;	O
int	O
i	int
;	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
path	*(char)
,	O
&	O
dirinfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
==	O
-	O
1	int
)	O
{	O
debug	O
(	O
2	int
,	O
(	O
"inaccessible directory %s not added to INFOPATH"	*(char)
,	O
path	*(char)
)	O
)	O
;	O
free	(*(void))->(void)
(	O
path	*(char)
)	O
;	O
return	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
infodirs_index	long
;	O
i	int
++	O
)	O
{	O
if	O
(	O
dirinfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_ino	long
==	O
infodirs	*(*(struct(*(char),long,long)))
[	O
i	int
]	O
->	O
inode	long
&&	O
dirinfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_dev	long
==	O
infodirs	*(*(struct(*(char),long,long)))
[	O
i	int
]	O
->	O
device	long
&&	O
(	O
infodirs	*(*(struct(*(char),long,long)))
[	O
i	int
]	O
->	O
inode	long
!=	O
0	int
||	O
fncmp	O
(	O
path	*(char)
,	O
infodirs	*(*(struct(*(char),long,long)))
[	O
i	int
]	O
->	O
name	*(char)
)	O
==	O
0	int
)	O
)	O
{	O
debug	O
(	O
2	int
,	O
(	O
"duplicate directory %s not added to INFOPATH"	*(char)
,	O
path	*(char)
)	O
)	O
;	O
free	(*(void))->(void)
(	O
path	*(char)
)	O
;	O
return	O
;	O
}	O
}	O
debug	O
(	O
2	int
,	O
(	O
"adding %s to INFOPATH"	*(char)
,	O
path	*(char)
)	O
)	O
;	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
=	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
INFO_DIR	struct(*(char),long,long)
)	O
)	O
;	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
name	*(char)
=	O
path	*(char)
;	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
inode	long
=	O
dirinfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_ino	long
;	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
device	long
=	O
dirinfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_dev	long
;	O
add_pointer_to_array	O
(	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
,	O
infodirs_index	long
,	O
infodirs	*(*(struct(*(char),long,long)))
,	O
infodirs_slots	long
,	O
8	int
)	O
;	O
}	O
void	O
infopath_add	(*(char))->(void)
(	O
char	O
*	O
path	*(char)
)	O
{	O
int	O
idx	*(int)
=	O
0	int
;	O
char	O
*	O
dirname	*(char)
;	O
while	O
(	O
dirname	*(char)
=	O
extract_colon_unit	(*(char),*(int))->(*(char))
(	O
path	*(char)
,	O
&	O
idx	*(int)
)	O
)	O
{	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
"PATH"	*(char)
,	O
dirname	*(char)
)	O
)	O
{	O
free	(*(void))->(void)
(	O
dirname	*(char)
)	O
;	O
build_infopath_from_path	()->(void)
(	O
)	O
;	O
}	O
else	O
infopath_add_dir	(*(char))->(void)
(	O
dirname	*(char)
)	O
;	O
}	O
}	O
char	O
*	O
infopath_next	(*(int))->(*(char))
(	O
int	O
*	O
idx	*(int)
)	O
{	O
INFO_DIR	struct(*(char),long,long)
*	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
;	O
if	O
(	O
!	O
infodirs	*(*(struct(*(char),long,long)))
)	O
return	O
0	int
;	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
=	O
infodirs	*(*(struct(*(char),long,long)))
[	O
(	O
*	O
idx	*(int)
)	O
++	O
]	O
;	O
if	O
(	O
!	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
)	O
return	O
0	int
;	O
return	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
name	*(char)
;	O
}	O
char	O
*	O
infopath_first	(*(int))->(*(char))
(	O
int	O
*	O
idx	*(int)
)	O
{	O
*	O
idx	*(int)
=	O
0	int
;	O
return	O
infopath_next	(*(int))->(*(char))
(	O
idx	*(int)
)	O
;	O
}	O
char	O
*	O
extract_colon_unit	(*(char),*(int))->(*(char))
(	O
char	O
*	O
string	*(char)
,	O
int	O
*	O
idx	*(int)
)	O
{	O
unsigned	O
int	O
i	int
=	O
(	O
unsigned	O
int	O
)	O
*	O
idx	*(int)
;	O
unsigned	O
int	O
start	int
=	O
i	int
;	O
if	O
(	O
!	O
string	*(char)
||	O
i	int
>=	O
strlen	(*(char))->(long)
(	O
string	*(char)
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
string	*(char)
[	O
i	int
]	O
)	O
return	O
NULL	O
;	O
while	O
(	O
string	*(char)
[	O
i	int
]	O
&&	O
string	*(char)
[	O
i	int
]	O
!=	O
PATH_SEP	*(char)
[	O
0	int
]	O
)	O
i	int
++	O
;	O
{	O
char	O
*	O
value	union(*(struct(*(()->(void)),*(char),*(struct(*`,*`,*`)),*(char))),*(struct(char,union(*(struct`),*(struct`)))))
=	O
xmalloc	(long)->(*(void))
(	O
(	O
i	int
-	O
start	int
)	O
+	O
1	int
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
value	union(*(struct(*(()->(void)),*(char),*(struct(*`,*`,*`)),*(char))),*(struct(char,union(*(struct`),*(struct`)))))
,	O
&	O
string	*(char)
[	O
start	int
]	O
,	O
(	O
i	int
-	O
start	int
)	O
)	O
;	O
value	union(*(struct(*(()->(void)),*(char),*(struct(*`,*`,*`)),*(char))),*(struct(char,union(*(struct`),*(struct`)))))
[	O
i	int
-	O
start	int
]	O
=	O
0	int
;	O
i	int
++	O
;	O
*	O
idx	*(int)
=	O
i	int
;	O
return	O
value	union(*(struct(*(()->(void)),*(char),*(struct(*`,*`,*`)),*(char))),*(struct(char,union(*(struct`),*(struct`)))))
;	O
}	O
}	O
