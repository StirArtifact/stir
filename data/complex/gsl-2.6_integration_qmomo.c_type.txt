static	O
void	O
initialise	(*(double),*(double),*(double),*(double),double,double)->(void)
(	O
double	O
*	O
ri	array(double)
,	O
double	O
*	O
rj	array(double)
,	O
double	O
*	O
rg	array(double)
,	O
double	O
*	O
rh	array(double)
,	O
double	O
alpha	double
,	O
double	O
beta	double
)	O
;	O
gsl_integration_qaws_table	struct(double,double,int,int,array(double),array(double),array(double),array(double))
*	O
gsl_integration_qaws_table_alloc	(double,double,int,int)->(*(struct(double,double,int,int,array(double),array(double),array(double),array(double))))
(	O
double	O
alpha	double
,	O
double	O
beta	double
,	O
int	O
mu	int
,	O
int	O
nu	int
)	O
{	O
gsl_integration_qaws_table	struct(double,double,int,int,array(double),array(double),array(double),array(double))
*	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
;	O
if	O
(	O
alpha	double
<	O
-	O
1.0	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"alpha must be greater than -1.0"	*(char)
,	O
GSL_EINVAL	int
,	O
0	int
)	O
;	O
}	O
if	O
(	O
beta	double
<	O
-	O
1.0	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"beta must be greater than -1.0"	*(char)
,	O
GSL_EINVAL	int
,	O
0	int
)	O
;	O
}	O
if	O
(	O
mu	int
!=	O
0	int
&&	O
mu	int
!=	O
1	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"mu must be 0 or 1"	*(char)
,	O
GSL_EINVAL	int
,	O
0	int
)	O
;	O
}	O
if	O
(	O
nu	int
!=	O
0	int
&&	O
nu	int
!=	O
1	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"nu must be 0 or 1"	*(char)
,	O
GSL_EINVAL	int
,	O
0	int
)	O
;	O
}	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
=	O
(	O
gsl_integration_qaws_table	struct(double,double,int,int,array(double),array(double),array(double),array(double))
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
gsl_integration_qaws_table	struct(double,double,int,int,array(double),array(double),array(double),array(double))
)	O
)	O
;	O
if	O
(	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
==	O
0	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for qaws_table struct"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
->	O
alpha	double
=	O
alpha	double
;	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
->	O
beta	double
=	O
beta	double
;	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
->	O
mu	int
=	O
mu	int
;	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
->	O
nu	int
=	O
nu	int
;	O
initialise	(*(double),*(double),*(double),*(double),double,double)->(void)
(	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
->	O
ri	array(double)
,	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
->	O
rj	array(double)
,	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
->	O
rg	array(double)
,	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
->	O
rh	array(double)
,	O
alpha	double
,	O
beta	double
)	O
;	O
return	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
;	O
}	O
int	O
gsl_integration_qaws_table_set	(*(struct(double,double,int,int,array(double),array(double),array(double),array(double))),double,double,int,int)->(int)
(	O
gsl_integration_qaws_table	struct(double,double,int,int,array(double),array(double),array(double),array(double))
*	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
,	O
double	O
alpha	double
,	O
double	O
beta	double
,	O
int	O
mu	int
,	O
int	O
nu	int
)	O
{	O
if	O
(	O
alpha	double
<	O
-	O
1.0	int
)	O
{	O
GSL_ERROR	O
(	O
"alpha must be greater than -1.0"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
if	O
(	O
beta	double
<	O
-	O
1.0	int
)	O
{	O
GSL_ERROR	O
(	O
"beta must be greater than -1.0"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
if	O
(	O
mu	int
!=	O
0	int
&&	O
mu	int
!=	O
1	int
)	O
{	O
GSL_ERROR	O
(	O
"mu must be 0 or 1"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
if	O
(	O
nu	int
!=	O
0	int
&&	O
nu	int
!=	O
1	int
)	O
{	O
GSL_ERROR	O
(	O
"nu must be 0 or 1"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
->	O
alpha	double
=	O
alpha	double
;	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
->	O
beta	double
=	O
beta	double
;	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
->	O
mu	int
=	O
mu	int
;	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
->	O
nu	int
=	O
nu	int
;	O
initialise	(*(double),*(double),*(double),*(double),double,double)->(void)
(	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
->	O
ri	array(double)
,	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
->	O
rj	array(double)
,	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
->	O
rg	array(double)
,	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
->	O
rh	array(double)
,	O
alpha	double
,	O
beta	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
void	O
gsl_integration_qaws_table_free	(*(struct(double,double,int,int,array(double),array(double),array(double),array(double))))->(void)
(	O
gsl_integration_qaws_table	struct(double,double,int,int,array(double),array(double),array(double),array(double))
*	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
)	O
{	O
RETURN_IF_NULL	O
(	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
)	O
;	O
free	(*(void))->(void)
(	O
t	*(struct(double,double,int,int,array(double),array(double),array(double),array(double)))
)	O
;	O
}	O
static	O
void	O
initialise	(*(double),*(double),*(double),*(double),double,double)->(void)
(	O
double	O
*	O
ri	array(double)
,	O
double	O
*	O
rj	array(double)
,	O
double	O
*	O
rg	array(double)
,	O
double	O
*	O
rh	array(double)
,	O
double	O
alpha	double
,	O
double	O
beta	double
)	O
{	O
const	O
double	O
alpha_p1	double
=	O
alpha	double
+	O
1.0	int
;	O
const	O
double	O
beta_p1	double
=	O
beta	double
+	O
1.0	int
;	O
const	O
double	O
alpha_p2	double
=	O
alpha	double
+	O
2.0	int
;	O
const	O
double	O
beta_p2	double
=	O
beta	double
+	O
2.0	int
;	O
const	O
double	O
r_alpha	double
=	O
pow	(double,double)->(double)
(	O
2.0	int
,	O
alpha_p1	double
)	O
;	O
const	O
double	O
r_beta	double
=	O
pow	(double,double)->(double)
(	O
2.0	int
,	O
beta_p1	double
)	O
;	O
size_t	long
i	long
;	O
double	O
an	double
,	O
anm1	double
;	O
ri	array(double)
[	O
0	int
]	O
=	O
r_alpha	double
/	O
alpha_p1	double
;	O
ri	array(double)
[	O
1	int
]	O
=	O
ri	array(double)
[	O
0	int
]	O
*	O
alpha	double
/	O
alpha_p2	double
;	O
an	double
=	O
2.0	int
;	O
anm1	double
=	O
1.0	int
;	O
for	O
(	O
i	long
=	O
2	int
;	O
i	long
<	O
25	int
;	O
i	long
++	O
)	O
{	O
ri	array(double)
[	O
i	long
]	O
=	O
-	O
(	O
r_alpha	double
+	O
an	double
*	O
(	O
an	double
-	O
alpha_p2	double
)	O
*	O
ri	array(double)
[	O
i	long
-	O
1	int
]	O
)	O
/	O
(	O
anm1	double
*	O
(	O
an	double
+	O
alpha_p1	double
)	O
)	O
;	O
anm1	double
=	O
an	double
;	O
an	double
=	O
an	double
+	O
1.0	int
;	O
}	O
rj	array(double)
[	O
0	int
]	O
=	O
r_beta	double
/	O
beta_p1	double
;	O
rj	array(double)
[	O
1	int
]	O
=	O
rj	array(double)
[	O
0	int
]	O
*	O
beta	double
/	O
beta_p2	double
;	O
an	double
=	O
2.0	int
;	O
anm1	double
=	O
1.0	int
;	O
for	O
(	O
i	long
=	O
2	int
;	O
i	long
<	O
25	int
;	O
i	long
++	O
)	O
{	O
rj	array(double)
[	O
i	long
]	O
=	O
-	O
(	O
r_beta	double
+	O
an	double
*	O
(	O
an	double
-	O
beta_p2	double
)	O
*	O
rj	array(double)
[	O
i	long
-	O
1	int
]	O
)	O
/	O
(	O
anm1	double
*	O
(	O
an	double
+	O
beta_p1	double
)	O
)	O
;	O
anm1	double
=	O
an	double
;	O
an	double
=	O
an	double
+	O
1.0	int
;	O
}	O
rg	array(double)
[	O
0	int
]	O
=	O
-	O
ri	array(double)
[	O
0	int
]	O
/	O
alpha_p1	double
;	O
rg	array(double)
[	O
1	int
]	O
=	O
-	O
rg	array(double)
[	O
0	int
]	O
-	O
2.0	int
*	O
r_alpha	double
/	O
(	O
alpha_p2	double
*	O
alpha_p2	double
)	O
;	O
an	double
=	O
2.0	int
;	O
anm1	double
=	O
1.0	int
;	O
for	O
(	O
i	long
=	O
2	int
;	O
i	long
<	O
25	int
;	O
i	long
++	O
)	O
{	O
rg	array(double)
[	O
i	long
]	O
=	O
-	O
(	O
an	double
*	O
(	O
an	double
-	O
alpha_p2	double
)	O
*	O
rg	array(double)
[	O
i	long
-	O
1	int
]	O
-	O
an	double
*	O
ri	array(double)
[	O
i	long
-	O
1	int
]	O
+	O
anm1	double
*	O
ri	array(double)
[	O
i	long
]	O
)	O
/	O
(	O
anm1	double
*	O
(	O
an	double
+	O
alpha_p1	double
)	O
)	O
;	O
anm1	double
=	O
an	double
;	O
an	double
=	O
an	double
+	O
1.0	int
;	O
}	O
rh	array(double)
[	O
0	int
]	O
=	O
-	O
rj	array(double)
[	O
0	int
]	O
/	O
beta_p1	double
;	O
rh	array(double)
[	O
1	int
]	O
=	O
-	O
rh	array(double)
[	O
0	int
]	O
-	O
2.0	int
*	O
r_beta	double
/	O
(	O
beta_p2	double
*	O
beta_p2	double
)	O
;	O
an	double
=	O
2.0	int
;	O
anm1	double
=	O
1.0	int
;	O
for	O
(	O
i	long
=	O
2	int
;	O
i	long
<	O
25	int
;	O
i	long
++	O
)	O
{	O
rh	array(double)
[	O
i	long
]	O
=	O
-	O
(	O
an	double
*	O
(	O
an	double
-	O
beta_p2	double
)	O
*	O
rh	array(double)
[	O
i	long
-	O
1	int
]	O
-	O
an	double
*	O
rj	array(double)
[	O
i	long
-	O
1	int
]	O
+	O
anm1	double
*	O
rj	array(double)
[	O
i	long
]	O
)	O
/	O
(	O
anm1	double
*	O
(	O
an	double
+	O
beta_p1	double
)	O
)	O
;	O
anm1	double
=	O
an	double
;	O
an	double
=	O
an	double
+	O
1.0	int
;	O
}	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
25	int
;	O
i	long
+=	O
2	int
)	O
{	O
rj	array(double)
[	O
i	long
]	O
*=	O
-	O
1	int
;	O
rh	array(double)
[	O
i	long
]	O
*=	O
-	O
1	int
;	O
}	O
}	O
