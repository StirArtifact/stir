typedef	O
struct	O
{	O
ESint32	int
capacity	int
;	O
ESint32	int
num_items	int
;	O
ESint32	int
size_items	int
;	O
EDMAT_BUFFER	struct(long,long,*(void))
items	struct(long,long,*(void))
;	O
EUint32	long
capacity_incr	long
;	O
}	O
DtVECTOR	struct(int,int,int,struct(long,long,*(void)),long)
;	O
ESint32	int
EDMAPROC	O
VECTORaddPrS32	(int,*(void))->(int)
(	O
OBJID	int
IdObj	int
,	O
EPVoid	*(void)
data	*(void)
)	O
{	O
DtVECTOR	struct(int,int,int,struct(long,long,*(void)),long)
*	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
;	O
EPVoid	*(void)
*	O
item	*(*(void))
;	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
=	O
(	O
DtVECTOR	struct(int,int,int,struct(long,long,*(void)),long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
if	O
(	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
capacity	int
==	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
num_items	int
)	O
{	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
capacity	int
+=	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
capacity_incr	long
;	O
edma_buffer_realloc	(*(struct(long,long,*(void))),long)->(int)
(	O
&	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
items	struct(long,long,*(void))
,	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
capacity	int
*	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
size_items	int
)	O
;	O
}	O
item	*(*(void))
=	O
(	O
EPVoid	*(void)
*	O
)	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
items	struct(long,long,*(void))
.	O
dat	*(void)
;	O
item	*(*(void))
[	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
num_items	int
]	O
=	O
data	*(void)
;	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
num_items	int
++	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
VECTORdelS32rS32	(int,int)->(int)
(	O
OBJID	int
IdObj	int
,	O
ESint32	int
indx	int
)	O
{	O
DtVECTOR	struct(int,int,int,struct(long,long,*(void)),long)
*	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
;	O
EPVoid	*(void)
*	O
item	*(*(void))
;	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
=	O
(	O
DtVECTOR	struct(int,int,int,struct(long,long,*(void)),long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
if	O
(	O
(	O
indx	int
<	O
0	int
)	O
||	O
(	O
indx	int
>	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
num_items	int
-	O
1	int
)	O
)	O
{	O
edma_printf_err	(*(char))->(long)
(	O
"[%s] Invalid index %d"	*(char)
,	O
__FUNCTION__	O
,	O
indx	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
item	*(*(void))
=	O
(	O
EPVoid	*(void)
*	O
)	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
items	struct(long,long,*(void))
.	O
dat	*(void)
;	O
item	*(*(void))
[	O
indx	int
]	O
=	O
NULL	O
;	O
memmove	(*(void),*(void),int)->(*(void))
(	O
&	O
item	*(*(void))
[	O
indx	int
]	O
,	O
&	O
item	*(*(void))
[	O
indx	int
+	O
1	int
]	O
,	O
(	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
num_items	int
-	O
indx	int
-	O
1	int
)	O
*	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
size_items	int
)	O
;	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
num_items	int
--	O
;	O
return	O
0	int
;	O
}	O
EPVoid	*(void)
EDMAPROC	O
VECTORgetS32rP	(int,int)->(*(void))
(	O
OBJID	int
IdObj	int
,	O
ESint32	int
indx	int
)	O
{	O
DtVECTOR	struct(int,int,int,struct(long,long,*(void)),long)
*	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
;	O
EPVoid	*(void)
*	O
item	*(*(void))
;	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
=	O
(	O
DtVECTOR	struct(int,int,int,struct(long,long,*(void)),long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
if	O
(	O
(	O
indx	int
<	O
0	int
)	O
||	O
(	O
indx	int
>	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
num_items	int
-	O
1	int
)	O
)	O
{	O
edma_printf_err	(*(char))->(long)
(	O
"[%s] Invalid index %d"	*(char)
,	O
__FUNCTION__	O
,	O
indx	int
)	O
;	O
return	O
NULL	O
;	O
}	O
item	*(*(void))
=	O
(	O
EPVoid	*(void)
*	O
)	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
items	struct(long,long,*(void))
.	O
dat	*(void)
;	O
return	O
item	*(*(void))
[	O
indx	int
]	O
;	O
}	O
ESint32	int
EDMAPROC	O
VECTORsetS32PrS32	(int,int,*(void))->(int)
(	O
OBJID	int
IdObj	int
,	O
ESint32	int
indx	int
,	O
EPVoid	*(void)
data	*(void)
)	O
{	O
DtVECTOR	struct(int,int,int,struct(long,long,*(void)),long)
*	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
;	O
EPVoid	*(void)
*	O
item	*(*(void))
;	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
=	O
(	O
DtVECTOR	struct(int,int,int,struct(long,long,*(void)),long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
if	O
(	O
(	O
indx	int
<	O
0	int
)	O
||	O
(	O
indx	int
>	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
num_items	int
-	O
1	int
)	O
)	O
{	O
edma_printf_err	(*(char))->(long)
(	O
"[%s] Invalid index %d"	*(char)
,	O
__FUNCTION__	O
,	O
indx	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
item	*(*(void))
=	O
(	O
EPVoid	*(void)
*	O
)	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
items	struct(long,long,*(void))
.	O
dat	*(void)
;	O
item	*(*(void))
[	O
indx	int
]	O
=	O
data	*(void)
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
VECTORclear	(int)->(int)
(	O
OBJID	int
IdObj	int
)	O
{	O
DtVECTOR	struct(int,int,int,struct(long,long,*(void)),long)
*	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
;	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
=	O
(	O
DtVECTOR	struct(int,int,int,struct(long,long,*(void)),long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
if	O
(	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
num_items	int
==	O
0	int
)	O
{	O
edma_printf_err	(*(char))->(long)
(	O
"[%s] Vector is empty"	*(char)
,	O
__FUNCTION__	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
num_items	int
=	O
0	int
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
VECTORcreateS32rS32	(int,int)->(int)
(	O
OBJID	int
IdObj	int
,	O
ESint32	int
capacity_incr	long
)	O
{	O
DtVECTOR	struct(int,int,int,struct(long,long,*(void)),long)
*	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
;	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
=	O
(	O
DtVECTOR	struct(int,int,int,struct(long,long,*(void)),long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
if	O
(	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
capacity	int
!=	O
0	int
)	O
{	O
edma_printf_err	(*(char))->(long)
(	O
"[%s] Vector already initialised"	*(char)
,	O
__FUNCTION__	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
capacity_incr	long
<	O
0	int
)	O
{	O
edma_printf_err	(*(char))->(long)
(	O
"[%s] Invalid capacity value. Must be > 0"	*(char)
,	O
__FUNCTION__	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
capacity	int
=	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
capacity_incr	long
=	O
capacity_incr	long
;	O
edma_buffer_alloc	(*(struct(long,long,*(void))),long)->(int)
(	O
&	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
items	struct(long,long,*(void))
,	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
size_items	int
*	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
capacity	int
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
VECTORget_n_itemsrS32	(int)->(int)
(	O
OBJID	int
IdObj	int
)	O
{	O
DtVECTOR	struct(int,int,int,struct(long,long,*(void)),long)
*	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
;	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
=	O
(	O
DtVECTOR	struct(int,int,int,struct(long,long,*(void)),long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
return	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
num_items	int
;	O
}	O
ESint32	int
EDMAPROC	O
VECTORget_items_sizerS32	(int)->(int)
(	O
OBJID	int
IdObj	int
)	O
{	O
DtVECTOR	struct(int,int,int,struct(long,long,*(void)),long)
*	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
;	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
=	O
(	O
DtVECTOR	struct(int,int,int,struct(long,long,*(void)),long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
return	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
size_items	int
;	O
}	O
ESint32	int
EDMAPROC	O
VECTORset_items_sizeU32rS32	(int,int)->(int)
(	O
OBJID	int
IdObj	int
,	O
ESint32	int
size	int
)	O
{	O
DtVECTOR	struct(int,int,int,struct(long,long,*(void)),long)
*	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
;	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
=	O
(	O
DtVECTOR	struct(int,int,int,struct(long,long,*(void)),long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
if	O
(	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
num_items	int
!=	O
0	int
)	O
{	O
edma_printf_err	(*(char))->(long)
(	O
"[%s] Cannot change item size on a populated array"	*(char)
,	O
__FUNCTION__	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
size_items	int
=	O
size	int
;	O
if	O
(	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
capacity	int
!=	O
0	int
)	O
edma_buffer_realloc	(*(struct(long,long,*(void))),long)->(int)
(	O
&	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
items	struct(long,long,*(void))
,	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
size_items	int
*	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
capacity	int
)	O
;	O
return	O
0	int
;	O
}	O
EDMAT_BUFFER	struct(long,long,*(void))
EDMAPROC	O
VECTORget_itemsrA	(int)->(struct(long,long,*(void)))
(	O
OBJID	int
IdObj	int
)	O
{	O
DtVECTOR	struct(int,int,int,struct(long,long,*(void)),long)
*	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
;	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
=	O
(	O
DtVECTOR	struct(int,int,int,struct(long,long,*(void)),long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
return	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
items	struct(long,long,*(void))
;	O
}	O
ESint32	int
EDMAPROC	O
VECTORget_capacityrS32	(int)->(int)
(	O
OBJID	int
IdObj	int
)	O
{	O
DtVECTOR	struct(int,int,int,struct(long,long,*(void)),long)
*	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
;	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
=	O
(	O
DtVECTOR	struct(int,int,int,struct(long,long,*(void)),long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
return	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
capacity	int
;	O
}	O
ESint32	int
EDMAPROC	O
VECTORset_capacityS32rS32	(int,int)->(int)
(	O
OBJID	int
IdObj	int
,	O
ESint32	int
cap	int
)	O
{	O
DtVECTOR	struct(int,int,int,struct(long,long,*(void)),long)
*	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
;	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
=	O
(	O
DtVECTOR	struct(int,int,int,struct(long,long,*(void)),long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
if	O
(	O
cap	int
<	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
num_items	int
)	O
{	O
edma_printf_err	(*(char))->(long)
(	O
"[%s] Cannot reduce capacity beyond current vector size"	*(char)
,	O
__FUNCTION__	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
capacity	int
=	O
cap	int
;	O
edma_buffer_realloc	(*(struct(long,long,*(void))),long)->(int)
(	O
&	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
items	struct(long,long,*(void))
,	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
size_items	int
*	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
capacity	int
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
VECTORborn	(int)->(int)
(	O
OBJID	int
IdObj	int
)	O
{	O
DtVECTOR	struct(int,int,int,struct(long,long,*(void)),long)
*	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
;	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
=	O
(	O
DtVECTOR	struct(int,int,int,struct(long,long,*(void)),long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
capacity	int
=	O
0	int
;	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
num_items	int
=	O
0	int
;	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
capacity_incr	long
=	O
10	int
;	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
size_items	int
=	O
sizeof	O
(	O
OBJID	int
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
VECTORrip	(int)->(int)
(	O
OBJID	int
IdObj	int
)	O
{	O
DtVECTOR	struct(int,int,int,struct(long,long,*(void)),long)
*	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
;	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
=	O
(	O
DtVECTOR	struct(int,int,int,struct(long,long,*(void)),long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
edma_buffer_free	(*(struct(long,long,*(void))))->(int)
(	O
&	O
m	*(struct(int,int,int,struct(long,long,*(void)),long))
->	O
items	struct(long,long,*(void))
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
VECTOR_class_factory	()->(int)
(	O
)	O
{	O
CLASSID	int
cid	int
;	O
cid	int
=	O
edma_idf_get_free_class_id	(int)->(int)
(	O
EDMA_LOCAL_CLASS	int
)	O
;	O
edma_idf_set_class_name	(int,*(char))->(int)
(	O
cid	int
,	O
"VECTOR"	*(char)
)	O
;	O
edma_idf_set_class_namespace	(int,*(char))->(int)
(	O
cid	int
,	O
"system/data_structs"	*(char)
)	O
;	O
edma_idf_set_class_version	(int,int,int)->(int)
(	O
cid	int
,	O
0	int
,	O
0	int
)	O
;	O
edma_add_local_class_property	(int,*(char),long,int,long)->(int)
(	O
cid	int
,	O
"capacity"	*(char)
,	O
DT_ESINT32	int
,	O
E_L	int
,	O
0	int
)	O
;	O
edma_add_local_class_property	(int,*(char),long,int,long)->(int)
(	O
cid	int
,	O
"num_items"	*(char)
,	O
DT_ESINT32	int
,	O
E_L	int
,	O
0	int
)	O
;	O
edma_add_local_class_property	(int,*(char),long,int,long)->(int)
(	O
cid	int
,	O
"size_items"	*(char)
,	O
DT_ESINT32	int
,	O
E_L	int
,	O
0	int
)	O
;	O
edma_add_local_class_property	(int,*(char),long,int,long)->(int)
(	O
cid	int
,	O
"items"	*(char)
,	O
DT_EBUFFER	int
,	O
E_L	int
,	O
0	int
)	O
;	O
edma_add_local_class_property	(int,*(char),long,int,long)->(int)
(	O
cid	int
,	O
"capacity_incr"	*(char)
,	O
DT_EUINT32	int
,	O
E_L	int
,	O
0	int
)	O
;	O
edma_add_local_class_method	(int,*(char),*(char),*(()->(void)),int,int,int)->(int)
(	O
cid	int
,	O
"add"	*(char)
,	O
"PrS32"	*(char)
,	O
(	O
PPROC	*(()->(void))
)	O
VECTORaddPrS32	(int,*(void))->(int)
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
edma_add_local_class_method	(int,*(char),*(char),*(()->(void)),int,int,int)->(int)
(	O
cid	int
,	O
"del"	*(char)
,	O
"S32rS32"	*(char)
,	O
(	O
PPROC	*(()->(void))
)	O
VECTORdelS32rS32	(int,int)->(int)
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
edma_add_local_class_method	(int,*(char),*(char),*(()->(void)),int,int,int)->(int)
(	O
cid	int
,	O
"get"	*(char)
,	O
"S32rP"	*(char)
,	O
(	O
PPROC	*(()->(void))
)	O
VECTORgetS32rP	(int,int)->(*(void))
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
edma_add_local_class_method	(int,*(char),*(char),*(()->(void)),int,int,int)->(int)
(	O
cid	int
,	O
"set"	*(char)
,	O
"S32PrS32"	*(char)
,	O
(	O
PPROC	*(()->(void))
)	O
VECTORsetS32PrS32	(int,int,*(void))->(int)
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
edma_add_local_class_method	(int,*(char),*(char),*(()->(void)),int,int,int)->(int)
(	O
cid	int
,	O
"clear"	*(char)
,	O
""	*(char)
,	O
(	O
PPROC	*(()->(void))
)	O
VECTORclear	(int)->(int)
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
edma_add_local_class_method	(int,*(char),*(char),*(()->(void)),int,int,int)->(int)
(	O
cid	int
,	O
"create"	*(char)
,	O
"S32rS32"	*(char)
,	O
(	O
PPROC	*(()->(void))
)	O
VECTORcreateS32rS32	(int,int)->(int)
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
edma_add_local_class_method	(int,*(char),*(char),*(()->(void)),int,int,int)->(int)
(	O
cid	int
,	O
"get_n_items"	*(char)
,	O
"rS32"	*(char)
,	O
(	O
PPROC	*(()->(void))
)	O
VECTORget_n_itemsrS32	(int)->(int)
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
edma_add_local_class_method	(int,*(char),*(char),*(()->(void)),int,int,int)->(int)
(	O
cid	int
,	O
"get_items_size"	*(char)
,	O
"rS32"	*(char)
,	O
(	O
PPROC	*(()->(void))
)	O
VECTORget_items_sizerS32	(int)->(int)
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
edma_add_local_class_method	(int,*(char),*(char),*(()->(void)),int,int,int)->(int)
(	O
cid	int
,	O
"set_items_size"	*(char)
,	O
"U32rS32"	*(char)
,	O
(	O
PPROC	*(()->(void))
)	O
VECTORset_items_sizeU32rS32	(int,int)->(int)
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
edma_add_local_class_method	(int,*(char),*(char),*(()->(void)),int,int,int)->(int)
(	O
cid	int
,	O
"get_items"	*(char)
,	O
"rA"	*(char)
,	O
(	O
PPROC	*(()->(void))
)	O
VECTORget_itemsrA	(int)->(struct(long,long,*(void)))
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
edma_add_local_class_method	(int,*(char),*(char),*(()->(void)),int,int,int)->(int)
(	O
cid	int
,	O
"get_capacity"	*(char)
,	O
"rS32"	*(char)
,	O
(	O
PPROC	*(()->(void))
)	O
VECTORget_capacityrS32	(int)->(int)
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
edma_add_local_class_method	(int,*(char),*(char),*(()->(void)),int,int,int)->(int)
(	O
cid	int
,	O
"set_capacity"	*(char)
,	O
"S32rS32"	*(char)
,	O
(	O
PPROC	*(()->(void))
)	O
VECTORset_capacityS32rS32	(int,int)->(int)
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
edma_idf_set_class_id	(int)->(int)
(	O
cid	int
)	O
;	O
return	O
0	int
;	O
}	O
