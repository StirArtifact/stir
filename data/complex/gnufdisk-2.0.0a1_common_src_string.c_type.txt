struct	O
gnufdisk_string	struct(*(char),long)
{	O
char	O
*	O
data	*(char)
;	O
size_t	long
size	long
;	O
}	O
;	O
static	O
int	O
check_string	(*(struct(*(char),long)))->(int)
(	O
struct	O
gnufdisk_string	struct(*(char),long)
*	O
_s	*(struct)
)	O
{	O
if	O
(	O
gnufdisk_check_memory	(*(void),long,int)->(int)
(	O
_s	*(struct)
,	O
sizeof	O
(	O
struct	O
gnufdisk_string	struct(*(char),long)
)	O
,	O
0	int
)	O
!=	O
0	int
||	O
(	O
_s	*(struct)
->	O
data	*(char)
!=	O
NULL	O
&&	O
gnufdisk_check_memory	(*(void),long,int)->(int)
(	O
_s	*(struct)
->	O
data	*(char)
,	O
_s	*(struct)
->	O
size	long
,	O
0	int
)	O
!=	O
0	int
)	O
)	O
return	O
EFAULT	int
;	O
return	O
0	int
;	O
}	O
struct	O
gnufdisk_string	struct(*(char),long)
*	O
gnufdisk_string_new	(*(char))->(*(struct))
(	O
const	O
char	O
*	O
_fmt	*(char)
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
args	array(struct(int,int,*(void),*(void)))
;	O
struct	O
gnufdisk_string	struct(*(char),long)
*	O
ret	*(struct(*(char),long))
;	O
int	O
err	int
;	O
if	O
(	O
(	O
ret	*(struct(*(char),long))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
gnufdisk_string	struct(*(char),long)
)	O
)	O
)	O
==	O
NULL	O
)	O
{	O
err	int
=	O
errno	O
;	O
goto	O
lb_out	O
;	O
}	O
memset	(*(void),int,long)->(*(void))
(	O
ret	*(struct(*(char),long))
,	O
0	int
,	O
sizeof	O
(	O
struct	O
gnufdisk_string	struct(*(char),long)
)	O
)	O
;	O
va_start	O
(	O
args	array(struct(int,int,*(void),*(void)))
,	O
_fmt	*(char)
)	O
;	O
ret	*(struct(*(char),long))
->	O
size	long
=	O
gnufdisk_vasprintf	(*(*(char)),*(char),array(struct(int,int,*(void),*(void))))->(int)
(	O
&	O
ret	*(struct(*(char),long))
->	O
data	*(char)
,	O
_fmt	*(char)
,	O
args	array(struct(int,int,*(void),*(void)))
)	O
;	O
va_end	O
(	O
args	array(struct(int,int,*(void),*(void)))
)	O
;	O
if	O
(	O
ret	*(struct(*(char),long))
->	O
size	long
<	O
0	int
)	O
{	O
err	int
=	O
errno	O
;	O
free	(*(void))->(void)
(	O
ret	*(struct(*(char),long))
)	O
;	O
ret	*(struct(*(char),long))
=	O
NULL	O
;	O
}	O
lb_out	O
:	O
errno	O
=	O
err	int
;	O
return	O
ret	*(struct(*(char),long))
;	O
}	O
int	O
gnufdisk_string_set	(*(struct),*(char))->(int)
(	O
struct	O
gnufdisk_string	struct(*(char),long)
*	O
_p	*(void)
,	O
const	O
char	O
*	O
_fmt	*(char)
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
args	array(struct(int,int,*(void),*(void)))
;	O
char	O
*	O
s	*(char)
;	O
int	O
err	int
;	O
int	O
ret	*(struct(*(char),long))
;	O
if	O
(	O
(	O
err	int
=	O
check_string	(*(struct(*(char),long)))->(int)
(	O
_p	*(void)
)	O
)	O
!=	O
0	int
)	O
{	O
ret	*(struct(*(char),long))
=	O
-	O
1	int
;	O
goto	O
lb_out	O
;	O
}	O
va_start	O
(	O
args	array(struct(int,int,*(void),*(void)))
,	O
_fmt	*(char)
)	O
;	O
ret	*(struct(*(char),long))
=	O
gnufdisk_vasprintf	(*(*(char)),*(char),array(struct(int,int,*(void),*(void))))->(int)
(	O
&	O
s	*(char)
,	O
_fmt	*(char)
,	O
args	array(struct(int,int,*(void),*(void)))
)	O
;	O
va_end	O
(	O
args	array(struct(int,int,*(void),*(void)))
)	O
;	O
if	O
(	O
ret	*(struct(*(char),long))
<	O
0	int
)	O
{	O
ret	*(struct(*(char),long))
=	O
-	O
1	int
;	O
err	int
=	O
errno	O
;	O
goto	O
lb_out	O
;	O
}	O
else	O
err	int
=	O
0	int
;	O
if	O
(	O
_p	*(void)
->	O
data	*(char)
)	O
free	(*(void))->(void)
(	O
_p	*(void)
->	O
data	*(char)
)	O
;	O
_p	*(void)
->	O
data	*(char)
=	O
s	*(char)
;	O
_p	*(void)
->	O
size	long
=	O
ret	*(struct(*(char),long))
;	O
lb_out	O
:	O
errno	O
=	O
err	int
;	O
return	O
ret	*(struct(*(char),long))
;	O
}	O
int	O
gnufdisk_string_length	(*(struct))->(int)
(	O
struct	O
gnufdisk_string	struct(*(char),long)
*	O
_p	*(void)
)	O
{	O
if	O
(	O
(	O
errno	O
=	O
check_string	(*(struct(*(char),long)))->(int)
(	O
_p	*(void)
)	O
)	O
!=	O
0	int
)	O
return	O
-	O
1	int
;	O
return	O
strlen	(*(char))->(long)
(	O
_p	*(void)
->	O
data	*(char)
!=	O
NULL	O
?	O
_p	*(void)
->	O
data	*(char)
:	O
""	*(char)
)	O
;	O
}	O
const	O
char	O
*	O
gnufdisk_string_c_string	(*(struct))->(*(char))
(	O
struct	O
gnufdisk_string	struct(*(char),long)
*	O
_p	*(void)
)	O
{	O
if	O
(	O
(	O
errno	O
=	O
check_string	(*(struct(*(char),long)))->(int)
(	O
_p	*(void)
)	O
)	O
!=	O
0	int
)	O
return	O
NULL	O
;	O
return	O
_p	*(void)
->	O
data	*(char)
;	O
}	O
char	O
*	O
gnufdisk_string_c_string_dup	(*(struct))->(*(char))
(	O
struct	O
gnufdisk_string	struct(*(char),long)
*	O
_p	*(void)
)	O
{	O
char	O
*	O
r	*(char)
;	O
if	O
(	O
(	O
errno	O
=	O
check_string	(*(struct(*(char),long)))->(int)
(	O
_p	*(void)
)	O
)	O
!=	O
0	int
)	O
return	O
NULL	O
;	O
r	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
_p	*(void)
->	O
data	*(char)
?	O
_p	*(void)
->	O
data	*(char)
:	O
""	*(char)
)	O
;	O
if	O
(	O
r	*(char)
==	O
NULL	O
)	O
errno	O
=	O
ENOMEM	int
;	O
return	O
r	*(char)
;	O
}	O
int	O
gnufdisk_string_delete	(*(struct))->(int)
(	O
struct	O
gnufdisk_string	struct(*(char),long)
*	O
_s	*(struct)
)	O
{	O
if	O
(	O
(	O
errno	O
=	O
check_string	(*(struct(*(char),long)))->(int)
(	O
_s	*(struct)
)	O
)	O
!=	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
_s	*(struct)
->	O
data	*(char)
)	O
free	(*(void))->(void)
(	O
_s	*(struct)
->	O
data	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
_s	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
