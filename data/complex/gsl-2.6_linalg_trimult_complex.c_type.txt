static	O
int	O
triangular_multherm_L2	(enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CBLAS_UPLO_t	enum(int,int)
Uplo	enum(int,int)
,	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
static	O
int	O
triangular_multherm_L3	(enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CBLAS_UPLO_t	enum(int,int)
Uplo	enum(int,int)
,	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
static	O
int	O
triangular_mult_L2	(enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CBLAS_UPLO_t	enum(int,int)
Uplo	enum(int,int)
,	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
static	O
int	O
triangular_mult_L3	(enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CBLAS_UPLO_t	enum(int,int)
Uplo	enum(int,int)
,	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
)	O
;	O
static	O
void	O
complex_conj_vector	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
int	O
gsl_linalg_complex_tri_LHL	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
return	O
triangular_multherm_L3	(enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLower	int
,	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
int	O
gsl_linalg_complex_tri_UL	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
return	O
triangular_mult_L3	(enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasUpper	int
,	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
static	O
int	O
triangular_multherm_L2	(enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CBLAS_UPLO_t	enum(int,int)
Uplo	enum(int,int)
,	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
const	O
size_t	long
N	int
=	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
if	O
(	O
N	int
!=	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
if	O
(	O
Uplo	enum(int,int)
==	O
CblasUpper	int
)	O
{	O
}	O
else	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
gsl_complex	struct(array(double))
*	O
Tii	*(struct(array(double)))
=	O
gsl_matrix_complex_ptr	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(*(struct(array(double))))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
i	long
)	O
;	O
gsl_complex	struct(array(double))
z0	struct(array(double))
=	O
*	O
Tii	*(struct(array(double)))
;	O
if	O
(	O
i	long
<	O
N	int
-	O
1	int
)	O
{	O
gsl_vector_complex_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_complex_subcolumn	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
i	long
+	O
1	int
,	O
N	int
-	O
i	long
-	O
1	int
)	O
;	O
double	O
norm	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_blas_dznrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
GSL_REAL	O
(	O
*	O
Tii	*(struct(array(double)))
)	O
=	O
gsl_complex_abs2	(struct(array(double)))->(double)
(	O
*	O
Tii	*(struct(array(double)))
)	O
+	O
norm	*(struct(long,long,*(double),*(struct(long,*(double))),int))
*	O
norm	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
if	O
(	O
i	long
>	O
0	int
)	O
{	O
gsl_vector_complex_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_complex_subrow	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
0	int
,	O
i	long
)	O
;	O
gsl_matrix_complex_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_complex_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
+	O
1	int
,	O
0	int
,	O
N	int
-	O
i	long
-	O
1	int
,	O
i	long
)	O
;	O
complex_conj_vector	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
&	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_zgemv	(enum(int,int,int),struct(array(double)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(array(double)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasConjTrans	int
,	O
GSL_COMPLEX_ONE	O
,	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
z0	struct(array(double))
,	O
&	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
complex_conj_vector	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
&	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
}	O
else	O
{	O
gsl_vector_complex_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_complex_row	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
gsl_blas_zdscal	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
GSL_REAL	O
(	O
z0	struct(array(double))
)	O
,	O
&	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
GSL_IMAG	O
(	O
*	O
Tii	*(struct(array(double)))
)	O
=	O
0.0	int
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
triangular_multherm_L3	(enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CBLAS_UPLO_t	enum(int,int)
Uplo	enum(int,int)
,	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
const	O
size_t	long
N	int
=	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
if	O
(	O
N	int
!=	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
<=	O
CROSSOVER_TRIMULT	O
)	O
{	O
return	O
triangular_multherm_L2	(enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
Uplo	enum(int,int)
,	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
const	O
size_t	long
N1	long
=	O
GSL_LINALG_SPLIT_COMPLEX	O
(	O
N	int
)	O
;	O
const	O
size_t	long
N2	long
=	O
N	int
-	O
N1	long
;	O
gsl_matrix_complex_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
T11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
,	O
N1	long
,	O
N1	long
)	O
;	O
gsl_matrix_complex_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
T12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
N1	long
,	O
N1	long
,	O
N2	long
)	O
;	O
gsl_matrix_complex_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
T21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
N1	long
,	O
0	int
,	O
N2	long
,	O
N1	long
)	O
;	O
gsl_matrix_complex_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
T22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
N1	long
,	O
N1	long
,	O
N2	long
,	O
N2	long
)	O
;	O
status	int
=	O
triangular_multherm_L3	(enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
Uplo	enum(int,int)
,	O
&	O
T11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
Uplo	enum(int,int)
==	O
CblasLower	int
)	O
{	O
gsl_blas_zherk	(enum(int,int),enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
Uplo	enum(int,int)
,	O
CblasConjTrans	int
,	O
1.0	int
,	O
&	O
T21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
1.0	int
,	O
&	O
T11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_ztrmm	(enum(int,int),enum(int,int),enum(int,int,int),enum(int,int),struct(array(double)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLeft	int
,	O
Uplo	enum(int,int)
,	O
CblasConjTrans	int
,	O
CblasNonUnit	int
,	O
GSL_COMPLEX_ONE	O
,	O
&	O
T22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
T21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
else	O
{	O
gsl_blas_zherk	(enum(int,int),enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
Uplo	enum(int,int)
,	O
CblasNoTrans	int
,	O
1.0	int
,	O
&	O
T12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
1.0	int
,	O
&	O
T11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_ztrmm	(enum(int,int),enum(int,int),enum(int,int,int),enum(int,int),struct(array(double)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasRight	int
,	O
Uplo	enum(int,int)
,	O
CblasConjTrans	int
,	O
CblasNonUnit	int
,	O
GSL_COMPLEX_ONE	O
,	O
&	O
T22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
T12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
status	int
=	O
triangular_multherm_L3	(enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
Uplo	enum(int,int)
,	O
&	O
T22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
triangular_mult_L2	(enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CBLAS_UPLO_t	enum(int,int)
Uplo	enum(int,int)
,	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
const	O
size_t	long
N	int
=	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
if	O
(	O
N	int
!=	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
if	O
(	O
N	int
==	O
1	int
)	O
return	O
GSL_SUCCESS	int
;	O
if	O
(	O
Uplo	enum(int,int)
==	O
CblasUpper	int
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
gsl_complex	struct(array(double))
*	O
Aii	*(struct(array(double)))
=	O
gsl_matrix_complex_ptr	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(*(struct(array(double))))
(	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
i	long
)	O
;	O
gsl_complex	struct(array(double))
Uii	struct(array(double))
=	O
*	O
Aii	*(struct(array(double)))
;	O
if	O
(	O
i	long
<	O
N	int
-	O
1	int
)	O
{	O
gsl_vector_complex_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
lb	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_subcolumn	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
i	long
+	O
1	int
,	O
N	int
-	O
i	long
-	O
1	int
)	O
;	O
gsl_vector_complex_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
ur	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_subrow	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
i	long
+	O
1	int
,	O
N	int
-	O
i	long
-	O
1	int
)	O
;	O
gsl_complex	struct(array(double))
dot	struct(array(double))
;	O
gsl_blas_zdotu	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(array(double))))->(int)
(	O
&	O
lb	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
ur	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
dot	struct(array(double))
)	O
;	O
*	O
Aii	*(struct(array(double)))
=	O
gsl_complex_add	(struct(array(double)),struct(array(double)))->(struct(array(double)))
(	O
*	O
Aii	*(struct(array(double)))
,	O
dot	struct(array(double))
)	O
;	O
if	O
(	O
i	long
>	O
0	int
)	O
{	O
gsl_matrix_complex_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
U_TR	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
i	long
+	O
1	int
,	O
i	long
,	O
N	int
-	O
i	long
-	O
1	int
)	O
;	O
gsl_matrix_complex_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
L_BL	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
+	O
1	int
,	O
0	int
,	O
N	int
-	O
i	long
-	O
1	int
,	O
i	long
)	O
;	O
gsl_vector_complex_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
ut	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_subcolumn	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
0	int
,	O
i	long
)	O
;	O
gsl_vector_complex_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
ll	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_subrow	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
0	int
,	O
i	long
)	O
;	O
gsl_blas_zgemv	(enum(int,int,int),struct(array(double)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(array(double)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasTrans	int
,	O
GSL_COMPLEX_ONE	O
,	O
&	O
L_BL	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
ur	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
Uii	struct(array(double))
,	O
&	O
ll	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_zgemv	(enum(int,int,int),struct(array(double)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(array(double)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasNoTrans	int
,	O
GSL_COMPLEX_ONE	O
,	O
&	O
U_TR	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
lb	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
GSL_COMPLEX_ONE	O
,	O
&	O
ut	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
}	O
else	O
{	O
gsl_vector_complex_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_complex_subrow	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
0	int
,	O
i	long
)	O
;	O
gsl_blas_zscal	(struct(array(double)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
Uii	struct(array(double))
,	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
}	O
}	O
else	O
{	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
triangular_mult_L3	(enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CBLAS_UPLO_t	enum(int,int)
Uplo	enum(int,int)
,	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
)	O
{	O
const	O
size_t	long
N	int
=	O
A	*(float)
->	O
size1	long
;	O
if	O
(	O
N	int
!=	O
A	*(float)
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
<=	O
CROSSOVER_TRIMULT	O
)	O
{	O
return	O
triangular_mult_L2	(enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
Uplo	enum(int,int)
,	O
A	*(float)
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
const	O
size_t	long
N1	long
=	O
GSL_LINALG_SPLIT_COMPLEX	O
(	O
N	int
)	O
;	O
const	O
size_t	long
N2	long
=	O
N	int
-	O
N1	long
;	O
gsl_matrix_complex_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
A11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
0	int
,	O
0	int
,	O
N1	long
,	O
N1	long
)	O
;	O
gsl_matrix_complex_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
A12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
0	int
,	O
N1	long
,	O
N1	long
,	O
N2	long
)	O
;	O
gsl_matrix_complex_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
A21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
N1	long
,	O
0	int
,	O
N2	long
,	O
N1	long
)	O
;	O
gsl_matrix_complex_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
A22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
N1	long
,	O
N1	long
,	O
N2	long
,	O
N2	long
)	O
;	O
status	int
=	O
triangular_mult_L3	(enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
Uplo	enum(int,int)
,	O
&	O
A11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
Uplo	enum(int,int)
==	O
CblasLower	int
)	O
{	O
}	O
else	O
{	O
gsl_blas_zgemm	(enum(int,int,int),enum(int,int,int),struct(array(double)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),struct(array(double)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasNoTrans	int
,	O
CblasNoTrans	int
,	O
GSL_COMPLEX_ONE	O
,	O
&	O
A12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
A21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
GSL_COMPLEX_ONE	O
,	O
&	O
A11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_ztrmm	(enum(int,int),enum(int,int),enum(int,int,int),enum(int,int),struct(array(double)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasRight	int
,	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasUnit	int
,	O
GSL_COMPLEX_ONE	O
,	O
&	O
A22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
A12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_ztrmm	(enum(int,int),enum(int,int),enum(int,int,int),enum(int,int),struct(array(double)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLeft	int
,	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
GSL_COMPLEX_ONE	O
,	O
&	O
A22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
A21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
status	int
=	O
triangular_mult_L3	(enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
Uplo	enum(int,int)
,	O
&	O
A22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
void	O
complex_conj_vector	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
size	long
;	O
++	O
i	long
)	O
{	O
gsl_complex	struct(array(double))
*	O
vi	double
=	O
gsl_vector_complex_ptr	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(*(struct(array(double))))
(	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
i	long
)	O
;	O
GSL_IMAG	O
(	O
*	O
vi	double
)	O
=	O
-	O
GSL_IMAG	O
(	O
*	O
vi	double
)	O
;	O
}	O
}	O
