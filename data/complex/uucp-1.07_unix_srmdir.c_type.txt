static	O
int	O
isremove_dir	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),int)->(int)
P	O
(	O
(	O
const	O
char	O
*	O
,	O
const	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
*	O
,	O
int	O
)	O
)	O
;	O
struct	O
sdirlist	struct(*(struct(*(struct(*(struct`),*(char))),*(char))),*(char))
{	O
struct	O
sdirlist	struct(*(struct(*(struct(*(struct`),*(char))),*(char))),*(char))
*	O
qnext	*(struct(*(struct(*(struct`),*(char))),*(char)))
;	O
char	O
*	O
zdir	*(char)
;	O
}	O
;	O
static	O
struct	O
sdirlist	struct(*(struct(*(struct(*(struct`),*(char))),*(char))),*(char))
*	O
qSdirlist	*(struct(*(struct(*(struct`),*(char))),*(char)))
;	O
boolean	int
fsysdep_rmdir	(*(char))->(int)
(	O
zdir	*(char)
)	O
const	O
char	O
*	O
zdir	*(char)
;	O
{	O
boolean	int
fret	int
;	O
struct	O
sdirlist	struct(*(struct(*(struct(*(struct`),*(char))),*(char))),*(char))
*	O
q	*(struct)
;	O
qSdirlist	*(struct(*(struct(*(struct`),*(char))),*(char)))
=	O
NULL	O
;	O
fret	int
=	O
TRUE	O
;	O
if	O
(	O
ftw	short
(	O
(	O
char	O
*	O
)	O
zdir	*(char)
,	O
isremove_dir	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),int)->(int)
,	O
5	int
)	O
!=	O
0	int
)	O
{	O
ulog	(enum(int,int,int,int,int,int,int),*(char))->(void)
(	O
LOG_ERROR	int
,	O
"ftw: %s"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
fret	int
=	O
FALSE	O
;	O
}	O
q	*(struct)
=	O
qSdirlist	*(struct(*(struct(*(struct`),*(char))),*(char)))
;	O
while	O
(	O
q	*(struct)
!=	O
NULL	O
)	O
{	O
struct	O
sdirlist	struct(*(struct(*(struct(*(struct`),*(char))),*(char))),*(char))
*	O
qnext	*(struct(*(struct(*(struct`),*(char))),*(char)))
;	O
if	O
(	O
rmdir	(*(char))->(int)
(	O
q	*(struct)
->	O
zdir	*(char)
)	O
!=	O
0	int
)	O
{	O
ulog	(enum(int,int,int,int,int,int,int),*(char))->(void)
(	O
LOG_ERROR	int
,	O
"rmdir (%s): %s"	*(char)
,	O
q	*(struct)
->	O
zdir	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
fret	int
=	O
FALSE	O
;	O
}	O
ubuffree	(*(char))->(void)
(	O
q	*(struct)
->	O
zdir	*(char)
)	O
;	O
qnext	*(struct(*(struct(*(struct`),*(char))),*(char)))
=	O
q	*(struct)
->	O
qnext	*(struct(*(struct(*(struct`),*(char))),*(char)))
;	O
xfree	(*(void))->(void)
(	O
(	O
pointer	*(void)
)	O
q	*(struct)
)	O
;	O
q	*(struct)
=	O
qnext	*(struct(*(struct(*(struct`),*(char))),*(char)))
;	O
}	O
return	O
fret	int
;	O
}	O
static	O
int	O
isremove_dir	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),int)->(int)
(	O
zfile	*(char)
,	O
qstat	*(struct(enum(int,int,int,int,int,int,int,int,int),int,long,int,*(char)))
,	O
iflag	int
)	O
const	O
char	O
*	O
zfile	*(char)
;	O
const	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
*	O
qstat	*(struct(enum(int,int,int,int,int,int,int,int,int),int,long,int,*(char)))
ATTRIBUTE_UNUSED	O
;	O
int	O
iflag	int
;	O
{	O
if	O
(	O
iflag	int
==	O
FTW_D	int
||	O
iflag	int
==	O
FTW_DNR	int
)	O
{	O
struct	O
sdirlist	struct(*(struct(*(struct(*(struct`),*(char))),*(char))),*(char))
*	O
q	*(struct)
;	O
q	*(struct)
=	O
(	O
struct	O
sdirlist	struct(*(struct(*(struct(*(struct`),*(char))),*(char))),*(char))
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
sdirlist	struct(*(struct(*(struct(*(struct`),*(char))),*(char))),*(char))
)	O
)	O
;	O
q	*(struct)
->	O
qnext	*(struct(*(struct(*(struct`),*(char))),*(char)))
=	O
qSdirlist	*(struct(*(struct(*(struct`),*(char))),*(char)))
;	O
q	*(struct)
->	O
zdir	*(char)
=	O
zbufcpy	(*(char))->(*(char))
(	O
zfile	*(char)
)	O
;	O
qSdirlist	*(struct(*(struct(*(struct`),*(char))),*(char)))
=	O
q	*(struct)
;	O
}	O
else	O
{	O
if	O
(	O
remove	(*(char))->(int)
(	O
zfile	*(char)
)	O
!=	O
0	int
)	O
ulog	(enum(int,int,int,int,int,int,int),*(char))->(void)
(	O
LOG_ERROR	int
,	O
"remove (%s): %s"	*(char)
,	O
zfile	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
