int	O
gsl_linalg_hermtd_decomp	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
tau	double
)	O
{	O
if	O
(	O
A	*(float)
->	O
size1	long
!=	O
A	*(float)
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"hermitian tridiagonal decomposition requires square matrix"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
tau	double
->	O
size	long
+	O
1	int
!=	O
A	*(float)
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"size of tau must be (matrix size - 1)"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
const	O
size_t	long
N	int
=	O
A	*(float)
->	O
size1	long
;	O
size_t	long
i	long
;	O
const	O
gsl_complex	struct(array(double))
zero	struct(array(double))
=	O
gsl_complex_rect	(double,double)->(struct(array(double)))
(	O
0.0	int
,	O
0.0	int
)	O
;	O
const	O
gsl_complex	struct(array(double))
one	struct(array(double))
=	O
gsl_complex_rect	(double,double)->(struct(array(double)))
(	O
1.0	int
,	O
0.0	int
)	O
;	O
const	O
gsl_complex	struct(array(double))
neg_one	struct(array(double))
=	O
gsl_complex_rect	(double,double)->(struct(array(double)))
(	O
-	O
1.0	int
,	O
0.0	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
-	O
1	int
;	O
i	long
++	O
)	O
{	O
gsl_vector_complex_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
c	*(float)
=	O
gsl_matrix_complex_column	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
i	long
)	O
;	O
gsl_vector_complex_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_vector_complex_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
c	*(float)
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
i	long
+	O
1	int
,	O
N	int
-	O
(	O
i	long
+	O
1	int
)	O
)	O
;	O
gsl_complex	struct(array(double))
tau_i	struct(array(double))
=	O
gsl_linalg_complex_householder_transform	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(struct(array(double)))
(	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
(	O
i	long
+	O
1	int
)	O
<	O
(	O
N	int
-	O
1	int
)	O
&&	O
!	O
(	O
GSL_REAL	O
(	O
tau_i	struct(array(double))
)	O
==	O
0.0	int
&&	O
GSL_IMAG	O
(	O
tau_i	struct(array(double))
)	O
==	O
0.0	int
)	O
)	O
{	O
gsl_matrix_complex_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_complex_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
i	long
+	O
1	int
,	O
i	long
+	O
1	int
,	O
N	int
-	O
(	O
i	long
+	O
1	int
)	O
,	O
N	int
-	O
(	O
i	long
+	O
1	int
)	O
)	O
;	O
gsl_complex	struct(array(double))
ei	struct(array(double))
=	O
gsl_vector_complex_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(struct(array(double)))
(	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
0	int
)	O
;	O
gsl_vector_complex_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
x	double
=	O
gsl_vector_complex_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
tau	double
,	O
i	long
,	O
N	int
-	O
(	O
i	long
+	O
1	int
)	O
)	O
;	O
gsl_vector_complex_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,struct(array(double)))->(void)
(	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
0	int
,	O
one	struct(array(double))
)	O
;	O
gsl_blas_zhemv	(enum(int,int),struct(array(double)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(array(double)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLower	int
,	O
tau_i	struct(array(double))
,	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
zero	struct(array(double))
,	O
&	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
{	O
gsl_complex	struct(array(double))
xv	struct(array(double))
,	O
txv	struct(array(double))
,	O
alpha	long double
;	O
gsl_blas_zdotc	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(array(double))))->(int)
(	O
&	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
xv	struct(array(double))
)	O
;	O
txv	struct(array(double))
=	O
gsl_complex_mul	(struct(array(double)),struct(array(double)))->(struct(array(double)))
(	O
tau_i	struct(array(double))
,	O
xv	struct(array(double))
)	O
;	O
alpha	long double
=	O
gsl_complex_mul_real	(struct(array(double)),double)->(struct(array(double)))
(	O
txv	struct(array(double))
,	O
-	O
0.5	int
)	O
;	O
gsl_blas_zaxpy	(struct(array(double)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
alpha	long double
,	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
gsl_blas_zher2	(enum(int,int),struct(array(double)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLower	int
,	O
neg_one	struct(array(double))
,	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_vector_complex_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,struct(array(double)))->(void)
(	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
0	int
,	O
ei	struct(array(double))
)	O
;	O
}	O
gsl_vector_complex_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,struct(array(double)))->(void)
(	O
tau	double
,	O
i	long
,	O
tau_i	struct(array(double))
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_hermtd_unpack	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
const	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
tau	double
,	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
U	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
sdiag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
if	O
(	O
A	*(float)
->	O
size1	long
!=	O
A	*(float)
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix A must be sqaure"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
tau	double
->	O
size	long
+	O
1	int
!=	O
A	*(float)
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"size of tau must be (matrix size - 1)"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
U	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
A	*(float)
->	O
size1	long
||	O
U	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
!=	O
A	*(float)
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"size of U must match size of A"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
A	*(float)
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"size of diagonal must match size of A"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
sdiag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
+	O
1	int
!=	O
A	*(float)
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"size of subdiagonal must be (matrix size - 1)"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
const	O
size_t	long
N	int
=	O
A	*(float)
->	O
size1	long
;	O
gsl_vector_complex_const_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
zd	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_const_diagonal	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
)	O
;	O
gsl_vector_complex_const_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
zsd	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_const_subdiagonal	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
1	int
)	O
;	O
gsl_vector_const_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
d	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_complex_const_real	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
zd	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_vector_const_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
sd	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_complex_const_real	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
zsd	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_complex_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
N	int
)	O
;	O
size_t	long
i	long
;	O
gsl_matrix_complex_set_identity	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
U	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
for	O
(	O
i	long
=	O
N	int
-	O
1	int
;	O
i	long
--	O
>	O
0	int
;	O
)	O
{	O
gsl_complex	struct(array(double))
ti	struct(array(double))
=	O
gsl_vector_complex_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(struct(array(double)))
(	O
tau	double
,	O
i	long
)	O
;	O
gsl_vector_complex_const_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
h	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_const_subcolumn	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
i	long
,	O
i	long
+	O
1	int
,	O
N	int
-	O
i	long
-	O
1	int
)	O
;	O
gsl_matrix_complex_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_complex_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
U	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
+	O
1	int
,	O
i	long
+	O
1	int
,	O
N	int
-	O
i	long
-	O
1	int
,	O
N	int
-	O
i	long
-	O
1	int
)	O
;	O
gsl_vector_complex_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_vector_complex_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
N	int
-	O
i	long
-	O
1	int
)	O
;	O
gsl_linalg_complex_householder_left	(struct(array(double)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
ti	struct(array(double))
,	O
&	O
h	*(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
&	O
d	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
sdiag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
&	O
sd	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_vector_complex_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_hermtd_unpack_T	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
sdiag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
if	O
(	O
A	*(float)
->	O
size1	long
!=	O
A	*(float)
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix A must be sqaure"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
A	*(float)
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"size of diagonal must match size of A"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
sdiag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
+	O
1	int
!=	O
A	*(float)
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"size of subdiagonal must be (matrix size - 1)"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
const	O
size_t	long
N	int
=	O
A	*(float)
->	O
size1	long
;	O
gsl_vector_complex_const_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
zd	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_const_diagonal	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
)	O
;	O
gsl_vector_complex_const_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
zsd	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_const_subdiagonal	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
1	int
)	O
;	O
gsl_vector_const_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
d	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_complex_const_real	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
zd	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_vector_const_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
sd	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_complex_const_real	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
zsd	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
&	O
d	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
sdiag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
&	O
sd	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
