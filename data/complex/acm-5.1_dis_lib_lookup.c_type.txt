static	O
struct	O
timeval	struct(long,long)
TIMEOUT	struct(long,long)
=	O
{	O
25	int
,	O
0	int
}	O
;	O
extern	O
CLIENT	struct
*	O
simx_clnt	*(struct(*(struct(struct(int,*`,int),struct(int,*`,int),union(struct`,array(char)),*(struct`),*(char))),*(struct(*((*`,long,*`,*`,*`,*`,struct`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*(()->(void)),*((*`,*`)->(void)),*((*`,*`,*`)->(int)),*((*`)->(void)),*((*`,int,*`)->(int)))),*(char)))
;	O
extern	O
bool_t	int
xdr_simx_lookup_complete_entity_type_result	(*(struct(enum(int,int,int),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char),*(char),int)),*(struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char))))->(int)
(	O
register	O
XDR	struct
*	O
xdrs	*(struct(enum(int,int,int),*(struct(*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`,int)->(int)),*((*`)->(int)),*((*`,int)->(int)),*((*`,int)->(*`)),*((*`)->(void)),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(char),*(char),*(char),int))
,	O
simx_lookup_complete_entity_type_result	struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char))
*	O
objp	*(struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)))
)	O
;	O
typedef	O
struct	O
_client_names_cache_entry	struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))))))
{	O
dis_entity_type	struct(char,char,short,char,char,char,char)
key	struct(int,int)
;	O
simx_lookup_complete_entity_type_result	struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char))
result	char
;	O
struct	O
_client_names_cache_entry	struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))))))
*	O
next	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
;	O
struct	O
_client_names_cache_entry	struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))))))
*	O
prev	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
;	O
}	O
client_names_cache_entry	struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct`,struct`,*`,*`)),*(struct(struct`,struct`,*`,*`)))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct`,struct`,*`,*`)),*(struct(struct`,struct`,*`,*`)))))
;	O
static	O
client_names_cache_entry	struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct`,struct`,*`,*`)),*(struct(struct`,struct`,*`,*`)))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct`,struct`,*`,*`)),*(struct(struct`,struct`,*`,*`)))))
*	O
cache_list_head	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
=	O
0	int
,	O
*	O
cache_list_tail	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
=	O
0	int
;	O
static	O
int	O
cache_list_count	int
=	O
0	int
;	O
static	O
int	O
cache_list_max	int
=	O
32	int
;	O
int	O
SIMxLookupEntityName	(*(struct(char,char,short,char,char,char,char)),*(char),int)->(int)
(	O
dis_entity_type	struct(char,char,short,char,char,char,char)
*	O
p	*(struct(char,char,short,char,char,char,char))
,	O
char	O
*	O
result	char
,	O
int	O
size	int
)	O
{	O
simx_lookup_entity_type_result	struct(enum(int,int,int,int,int),*(char))
res	struct(enum(int,int,int,int,int),*(char))
;	O
res	struct(enum(int,int,int,int,int),*(char))
.	O
value	int
=	O
NULL	O
;	O
if	O
(	O
clnt_call	O
(	O
simx_clnt	*(struct(*(struct(struct(int,*`,int),struct(int,*`,int),union(struct`,array(char)),*(struct`),*(char))),*(struct(*((*`,long,*`,*`,*`,*`,struct`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*(()->(void)),*((*`,*`)->(void)),*((*`,*`,*`)->(int)),*((*`)->(void)),*((*`,int,*`)->(int)))),*(char)))
,	O
SIMxLookupEntityNameP	int
,	O
(	O
xdrproc_t	*((*(struct(enum(int,int,int),*(struct`),*(char),*(char),*(char),int)),*(void))->(int))
)	O
xdr_dis_entity_type	(*(struct(enum(int,int,int),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char),*(char),int)),*(struct(char,char,short,char,char,char,char)))->(int)
,	O
(	O
char	O
*	O
)	O
p	*(struct(char,char,short,char,char,char,char))
,	O
(	O
xdrproc_t	*((*(struct(enum(int,int,int),*(struct`),*(char),*(char),*(char),int)),*(void))->(int))
)	O
xdr_simx_lookup_entity_type_result	(*(struct(enum(int,int,int),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char),*(char),int)),*(struct(enum(int,int,int,int,int),*(char))))->(int)
,	O
(	O
char	O
*	O
)	O
&	O
res	struct(enum(int,int,int,int,int),*(char))
,	O
TIMEOUT	struct(long,long)
)	O
!=	O
RPC_SUCCESS	int
)	O
{	O
return	O
SIMx_TIMEOUT	int
;	O
}	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
result	char
,	O
res	struct(enum(int,int,int,int,int),*(char))
.	O
value	int
,	O
size	int
)	O
;	O
free	(*(void))->(void)
(	O
res	struct(enum(int,int,int,int,int),*(char))
.	O
value	int
)	O
;	O
return	O
res	struct(enum(int,int,int,int,int),*(char))
.	O
status_code	enum(int,int,int,int,int)
;	O
}	O
int	O
SIMxLookupEntityNames	(*(struct(char,char,short,char,char,char,char)),array(*(char)),int)->(int)
(	O
dis_entity_type	struct(char,char,short,char,char,char,char)
*	O
p	*(struct(char,char,short,char,char,char,char))
,	O
char	O
*	O
result	char
[	O
7	int
]	O
,	O
int	O
size	int
)	O
{	O
simx_lookup_complete_entity_type_result	struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char))
res	struct(enum(int,int,int,int,int),*(char))
;	O
client_names_cache_entry	struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct`,struct`,*`,*`)),*(struct(struct`,struct`,*`,*`)))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct`,struct`,*`,*`)),*(struct(struct`,struct`,*`,*`)))))
*	O
cp	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
;	O
for	O
(	O
cp	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
=	O
cache_list_head	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
;	O
cp	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
;	O
cp	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
=	O
cp	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
->	O
next	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
)	O
{	O
if	O
(	O
memcmp	(*(void),*(void),long)->(int)
(	O
(	O
char	O
*	O
)	O
&	O
cp	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
->	O
key	struct(int,int)
,	O
(	O
char	O
*	O
)	O
p	*(struct(char,char,short,char,char,char,char))
,	O
sizeof	O
(	O
cp	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
->	O
key	struct(int,int)
)	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
cache_list_head	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
!=	O
cp	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
)	O
{	O
if	O
(	O
cache_list_tail	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
==	O
cp	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
)	O
{	O
cache_list_tail	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
=	O
cp	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
->	O
prev	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
;	O
}	O
if	O
(	O
cp	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
->	O
prev	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
)	O
{	O
cp	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
->	O
prev	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
->	O
next	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
=	O
cp	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
->	O
next	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
;	O
}	O
if	O
(	O
cp	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
->	O
next	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
)	O
{	O
cp	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
->	O
next	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
->	O
prev	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
=	O
cp	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
->	O
prev	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
;	O
}	O
cp	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
->	O
next	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
=	O
cache_list_head	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
;	O
cp	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
->	O
prev	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
=	O
0	int
;	O
cp	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
->	O
next	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
->	O
prev	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
=	O
cp	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
;	O
cache_list_head	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
=	O
cp	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
;	O
}	O
res	struct(enum(int,int,int,int,int),*(char))
=	O
cp	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
->	O
result	char
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
result	char
[	O
0	int
]	O
,	O
res	struct(enum(int,int,int,int,int),*(char))
.	O
kind_value	*(char)
,	O
size	int
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
result	char
[	O
1	int
]	O
,	O
res	struct(enum(int,int,int,int,int),*(char))
.	O
domain_value	*(char)
,	O
size	int
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
result	char
[	O
2	int
]	O
,	O
res	struct(enum(int,int,int,int,int),*(char))
.	O
country_value	*(char)
,	O
size	int
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
result	char
[	O
3	int
]	O
,	O
res	struct(enum(int,int,int,int,int),*(char))
.	O
category_value	*(char)
,	O
size	int
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
result	char
[	O
4	int
]	O
,	O
res	struct(enum(int,int,int,int,int),*(char))
.	O
subcategory_value	*(char)
,	O
size	int
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
result	char
[	O
5	int
]	O
,	O
res	struct(enum(int,int,int,int,int),*(char))
.	O
specific_value	*(char)
,	O
size	int
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
result	char
[	O
6	int
]	O
,	O
res	struct(enum(int,int,int,int,int),*(char))
.	O
extra_value	*(char)
,	O
size	int
)	O
;	O
return	O
res	struct(enum(int,int,int,int,int),*(char))
.	O
status_code	enum(int,int,int,int,int)
;	O
}	O
}	O
res	struct(enum(int,int,int,int,int),*(char))
.	O
status_code	enum(int,int,int,int,int)
=	O
0	int
;	O
res	struct(enum(int,int,int,int,int),*(char))
.	O
kind_value	*(char)
=	O
NULL	O
;	O
res	struct(enum(int,int,int,int,int),*(char))
.	O
domain_value	*(char)
=	O
NULL	O
;	O
res	struct(enum(int,int,int,int,int),*(char))
.	O
country_value	*(char)
=	O
NULL	O
;	O
res	struct(enum(int,int,int,int,int),*(char))
.	O
category_value	*(char)
=	O
NULL	O
;	O
res	struct(enum(int,int,int,int,int),*(char))
.	O
subcategory_value	*(char)
=	O
NULL	O
;	O
res	struct(enum(int,int,int,int,int),*(char))
.	O
specific_value	*(char)
=	O
NULL	O
;	O
res	struct(enum(int,int,int,int,int),*(char))
.	O
extra_value	*(char)
=	O
NULL	O
;	O
if	O
(	O
clnt_call	O
(	O
simx_clnt	*(struct(*(struct(struct(int,*`,int),struct(int,*`,int),union(struct`,array(char)),*(struct`),*(char))),*(struct(*((*`,long,*`,*`,*`,*`,struct`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*(()->(void)),*((*`,*`)->(void)),*((*`,*`,*`)->(int)),*((*`)->(void)),*((*`,int,*`)->(int)))),*(char)))
,	O
SIMxLookupEntityNamesP	int
,	O
(	O
xdrproc_t	*((*(struct(enum(int,int,int),*(struct`),*(char),*(char),*(char),int)),*(void))->(int))
)	O
xdr_dis_entity_type	(*(struct(enum(int,int,int),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char),*(char),int)),*(struct(char,char,short,char,char,char,char)))->(int)
,	O
(	O
char	O
*	O
)	O
p	*(struct(char,char,short,char,char,char,char))
,	O
(	O
xdrproc_t	*((*(struct(enum(int,int,int),*(struct`),*(char),*(char),*(char),int)),*(void))->(int))
)	O
xdr_simx_lookup_complete_entity_type_result	(*(struct(enum(int,int,int),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char),*(char),int)),*(struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char))))->(int)
,	O
(	O
char	O
*	O
)	O
&	O
res	struct(enum(int,int,int,int,int),*(char))
,	O
TIMEOUT	struct(long,long)
)	O
!=	O
RPC_SUCCESS	int
)	O
{	O
return	O
SIMx_TIMEOUT	int
;	O
}	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
result	char
[	O
0	int
]	O
,	O
res	struct(enum(int,int,int,int,int),*(char))
.	O
kind_value	*(char)
,	O
size	int
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
result	char
[	O
1	int
]	O
,	O
res	struct(enum(int,int,int,int,int),*(char))
.	O
domain_value	*(char)
,	O
size	int
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
result	char
[	O
2	int
]	O
,	O
res	struct(enum(int,int,int,int,int),*(char))
.	O
country_value	*(char)
,	O
size	int
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
result	char
[	O
3	int
]	O
,	O
res	struct(enum(int,int,int,int,int),*(char))
.	O
category_value	*(char)
,	O
size	int
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
result	char
[	O
4	int
]	O
,	O
res	struct(enum(int,int,int,int,int),*(char))
.	O
subcategory_value	*(char)
,	O
size	int
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
result	char
[	O
5	int
]	O
,	O
res	struct(enum(int,int,int,int,int),*(char))
.	O
specific_value	*(char)
,	O
size	int
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
result	char
[	O
6	int
]	O
,	O
res	struct(enum(int,int,int,int,int),*(char))
.	O
extra_value	*(char)
,	O
size	int
)	O
;	O
if	O
(	O
cache_list_count	int
==	O
cache_list_max	int
)	O
{	O
cp	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
=	O
cache_list_tail	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
;	O
free	(*(void))->(void)
(	O
cp	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
->	O
result	char
.	O
kind_value	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
cp	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
->	O
result	char
.	O
domain_value	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
cp	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
->	O
result	char
.	O
country_value	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
cp	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
->	O
result	char
.	O
category_value	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
cp	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
->	O
result	char
.	O
subcategory_value	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
cp	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
->	O
result	char
.	O
specific_value	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
cp	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
->	O
result	char
.	O
extra_value	*(char)
)	O
;	O
}	O
else	O
{	O
cp	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
=	O
(	O
client_names_cache_entry	struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct`,struct`,*`,*`)),*(struct(struct`,struct`,*`,*`)))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct`,struct`,*`,*`)),*(struct(struct`,struct`,*`,*`)))))
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
client_names_cache_entry	struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct`,struct`,*`,*`)),*(struct(struct`,struct`,*`,*`)))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct`,struct`,*`,*`)),*(struct(struct`,struct`,*`,*`)))))
)	O
)	O
;	O
cp	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
->	O
next	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
=	O
0	int
;	O
cp	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
->	O
prev	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
=	O
cache_list_tail	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
;	O
cache_list_tail	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
=	O
cp	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
;	O
++	O
cache_list_count	int
;	O
}	O
cp	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
->	O
key	struct(int,int)
=	O
*	O
p	*(struct(char,char,short,char,char,char,char))
;	O
cp	*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*(char),*(char),*(char),*(char),*(char),*(char),*(char)),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`))),*(struct(struct(char,char,short,char,char,char,char),struct(enum(int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`),*(struct`),*(struct`)))))
->	O
result	char
=	O
res	struct(enum(int,int,int,int,int),*(char))
;	O
return	O
res	struct(enum(int,int,int,int,int),*(char))
.	O
status_code	enum(int,int,int,int,int)
;	O
}	O
