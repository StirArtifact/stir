double	O
dap_double	double
;	O
static	O
int	O
putnd	(int,int,array(char))->(int)
(	O
unsigned	O
int	O
h	int
,	O
int	O
n	int
,	O
char	O
dstr	array(char)
[	O
]	O
)	O
{	O
int	O
d	int
;	O
d	int
=	O
0	int
;	O
while	O
(	O
--	O
n	int
>=	O
0	int
)	O
dstr	array(char)
[	O
d	int
++	O
]	O
=	O
(	O
(	O
h	int
>>	O
(	O
6	int
*	O
n	int
)	O
)	O
&	O
0x3f	int
)	O
+	O
CHARBASE	char
;	O
return	O
d	int
;	O
}	O
int	O
dap_dblhigh	int
;	O
int	O
dap_dbllow	int
;	O
void	O
dap_putdouble	(*(struct(*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(*`,*`,*`)))))->(void)
(	O
DFILE	struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(*(char),*(char),*(char))))
*	O
dfp	*(struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(*(char),*(char),*(char)))))
)	O
{	O
unsigned	O
int	O
ix	array(int)
[	O
2	int
]	O
;	O
unsigned	O
int	O
sign	int
;	O
unsigned	O
int	O
e	int
;	O
char	O
dstr	array(char)
[	O
13	int
]	O
;	O
int	O
d	int
;	O
d	int
=	O
0	int
;	O
ix	array(int)
[	O
0	int
]	O
=	O
*	O
(	O
(	O
(	O
unsigned	O
int	O
*	O
)	O
&	O
dap_double	double
)	O
+	O
dap_dbllow	int
)	O
;	O
ix	array(int)
[	O
1	int
]	O
=	O
*	O
(	O
(	O
(	O
unsigned	O
int	O
*	O
)	O
&	O
dap_double	double
)	O
+	O
dap_dblhigh	int
)	O
;	O
if	O
(	O
!	O
(	O
ix	array(int)
[	O
0	int
]	O
&	O
0x7fffffff	int
)	O
&&	O
!	O
ix	array(int)
[	O
1	int
]	O
)	O
{	O
dstr	array(char)
[	O
d	int
++	O
]	O
=	O
'A'	O
;	O
for	O
(	O
e	int
=	O
0	int
;	O
e	int
<	O
11	int
;	O
e	int
++	O
)	O
dstr	array(char)
[	O
d	int
++	O
]	O
=	O
'!'	O
;	O
}	O
else	O
{	O
sign	int
=	O
(	O
(	O
ix	array(int)
[	O
1	int
]	O
>>	O
20	int
)	O
&	O
0x800	int
)	O
;	O
e	int
=	O
(	O
(	O
ix	array(int)
[	O
1	int
]	O
>>	O
20	int
)	O
&	O
0x7ff	int
)	O
;	O
if	O
(	O
!	O
e	int
)	O
{	O
dstr	array(char)
[	O
d	int
++	O
]	O
=	O
'A'	O
;	O
for	O
(	O
e	int
=	O
0	int
;	O
e	int
<	O
11	int
;	O
e	int
++	O
)	O
dstr	array(char)
[	O
d	int
++	O
]	O
=	O
'!'	O
;	O
}	O
else	O
if	O
(	O
e	int
==	O
0x7ff	int
)	O
{	O
for	O
(	O
e	int
=	O
0	int
;	O
e	int
<	O
12	int
;	O
e	int
++	O
)	O
dstr	array(char)
[	O
d	int
++	O
]	O
=	O
'a'	O
;	O
}	O
else	O
{	O
if	O
(	O
sign	int
)	O
{	O
e	int
=	O
0x800	int
-	O
e	int
;	O
ix	array(int)
[	O
1	int
]	O
=	O
(	O
(	O
~	O
ix	array(int)
[	O
1	int
]	O
)	O
&	O
0xfffff	int
)	O
;	O
ix	array(int)
[	O
0	int
]	O
=	O
(	O
~	O
ix	array(int)
[	O
0	int
]	O
)	O
;	O
}	O
else	O
e	int
+=	O
0x800	int
;	O
d	int
+=	O
putnd	(int,int,array(char))->(int)
(	O
e	int
,	O
2	int
,	O
dstr	array(char)
+	O
d	int
)	O
;	O
d	int
+=	O
putnd	(int,int,array(char))->(int)
(	O
ix	array(int)
[	O
1	int
]	O
,	O
4	int
,	O
dstr	array(char)
+	O
d	int
)	O
;	O
d	int
+=	O
putnd	(int,int,array(char))->(int)
(	O
ix	array(int)
[	O
0	int
]	O
,	O
6	int
,	O
dstr	array(char)
+	O
d	int
)	O
;	O
}	O
}	O
dstr	array(char)
[	O
d	int
]	O
=	O
'\0'	O
;	O
for	O
(	O
d	int
=	O
0	int
;	O
dstr	array(char)
[	O
d	int
]	O
;	O
d	int
++	O
)	O
dap_putc	(int,*(struct(*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(*`,*`,*`)))))->(void)
(	O
dstr	array(char)
[	O
d	int
]	O
,	O
dfp	*(struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(*(char),*(char),*(char)))))
)	O
;	O
}	O
static	O
unsigned	O
int	O
getnh	(array(char),int)->(int)
(	O
char	O
s	array(char)
[	O
]	O
,	O
int	O
n	int
)	O
{	O
unsigned	O
int	O
h	int
;	O
int	O
i	int
;	O
for	O
(	O
h	int
=	O
(	O
(	O
s	array(char)
[	O
0	int
]	O
-	O
CHARBASE	char
)	O
&	O
0x3f	int
)	O
,	O
i	int
=	O
1	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
h	int
=	O
(	O
(	O
h	int
<<	O
6	int
)	O
|	O
(	O
(	O
s	array(char)
[	O
i	int
]	O
-	O
CHARBASE	char
)	O
&	O
0x3f	int
)	O
)	O
;	O
return	O
h	int
;	O
}	O
void	O
dap_getdouble	(array(char))->(void)
(	O
char	O
code	array(char)
[	O
]	O
)	O
{	O
unsigned	O
int	O
ix	array(int)
[	O
2	int
]	O
;	O
unsigned	O
int	O
sign	int
;	O
unsigned	O
int	O
e	int
;	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
code	array(char)
,	O
"A!!!!!!!!!!!"	*(char)
,	O
12	int
)	O
)	O
{	O
dap_double	double
=	O
0.0	int
;	O
return	O
;	O
}	O
else	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
code	array(char)
,	O
"aaaaaaaaaaaa"	*(char)
,	O
12	int
)	O
)	O
{	O
dap_double	double
=	O
0.0	int
/	O
0.0	int
;	O
return	O
;	O
}	O
sign	int
=	O
(	O
'!'	O
<=	O
code	array(char)
[	O
0	int
]	O
&&	O
code	array(char)
[	O
0	int
]	O
<=	O
'@'	O
)	O
;	O
e	int
=	O
getnh	(array(char),int)->(int)
(	O
code	array(char)
,	O
2	int
)	O
;	O
if	O
(	O
sign	int
)	O
e	int
=	O
(	O
(	O
0x800	int
-	O
e	int
)	O
|	O
0x800	int
)	O
;	O
else	O
e	int
-=	O
0x800	int
;	O
ix	array(int)
[	O
1	int
]	O
=	O
getnh	(array(char),int)->(int)
(	O
code	array(char)
+	O
2	int
,	O
4	int
)	O
;	O
ix	array(int)
[	O
0	int
]	O
=	O
getnh	(array(char),int)->(int)
(	O
code	array(char)
+	O
6	int
,	O
6	int
)	O
;	O
if	O
(	O
sign	int
)	O
{	O
ix	array(int)
[	O
1	int
]	O
=	O
(	O
(	O
(	O
~	O
ix	array(int)
[	O
1	int
]	O
)	O
&	O
0xfffff	int
)	O
|	O
(	O
e	int
<<	O
20	int
)	O
)	O
;	O
ix	array(int)
[	O
1	int
]	O
=	O
(	O
ix	array(int)
[	O
1	int
]	O
|	O
0x80000000	int
)	O
;	O
ix	array(int)
[	O
0	int
]	O
=	O
(	O
~	O
ix	array(int)
[	O
0	int
]	O
)	O
;	O
}	O
else	O
ix	array(int)
[	O
1	int
]	O
=	O
(	O
ix	array(int)
[	O
1	int
]	O
|	O
(	O
e	int
<<	O
20	int
)	O
)	O
;	O
*	O
(	O
(	O
(	O
unsigned	O
int	O
*	O
)	O
&	O
dap_double	double
)	O
+	O
dap_dbllow	int
)	O
=	O
ix	array(int)
[	O
0	int
]	O
;	O
*	O
(	O
(	O
(	O
unsigned	O
int	O
*	O
)	O
&	O
dap_double	double
)	O
+	O
dap_dblhigh	int
)	O
=	O
ix	array(int)
[	O
1	int
]	O
;	O
}	O
void	O
dap_putint	(int,*(struct(*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(*`,*`,*`)))))->(void)
(	O
int	O
i	int
,	O
DFILE	struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(*(char),*(char),*(char))))
*	O
dfp	*(struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(*(char),*(char),*(char)))))
)	O
{	O
int	O
j	int
;	O
int	O
ndig	int
;	O
int	O
sign	int
;	O
if	O
(	O
!	O
i	int
)	O
dap_putc	(int,*(struct(*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(*`,*`,*`)))))->(void)
(	O
'0'	O
,	O
dfp	*(struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(*(char),*(char),*(char)))))
)	O
;	O
sign	int
=	O
1	int
;	O
if	O
(	O
i	int
<	O
0	int
)	O
{	O
sign	int
=	O
-	O
1	int
;	O
i	int
=	O
-	O
i	int
;	O
}	O
for	O
(	O
ndig	int
=	O
0	int
,	O
j	int
=	O
i	int
;	O
j	int
;	O
ndig	int
++	O
)	O
j	int
=	O
(	O
j	int
>>	O
6	int
)	O
;	O
dap_putc	(int,*(struct(*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(*`,*`,*`)))))->(void)
(	O
'0'	O
+	O
sign	int
*	O
ndig	int
,	O
dfp	*(struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(*(char),*(char),*(char)))))
)	O
;	O
if	O
(	O
sign	int
>	O
0	int
)	O
{	O
while	O
(	O
--	O
ndig	int
>=	O
0	int
)	O
dap_putc	(int,*(struct(*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(*`,*`,*`)))))->(void)
(	O
(	O
(	O
i	int
>>	O
(	O
6	int
*	O
ndig	int
)	O
)	O
&	O
0x3f	int
)	O
+	O
CHARBASE	char
,	O
dfp	*(struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(*(char),*(char),*(char)))))
)	O
;	O
}	O
else	O
{	O
while	O
(	O
--	O
ndig	int
>=	O
0	int
)	O
dap_putc	(int,*(struct(*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(*`,*`,*`)))))->(void)
(	O
(	O
(	O
0x40	int
-	O
(	O
i	int
>>	O
(	O
6	int
*	O
ndig	int
)	O
)	O
)	O
&	O
0x3f	int
)	O
+	O
CHARBASE	char
,	O
dfp	*(struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(*(char),*(char),*(char)))))
)	O
;	O
}	O
}	O
int	O
dap_getint	(array(char))->(int)
(	O
char	O
code	array(char)
[	O
]	O
)	O
{	O
int	O
i	int
,	O
j	int
;	O
int	O
ndig	int
;	O
int	O
sign	int
;	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
code	array(char)
,	O
"0"	*(char)
,	O
1	int
)	O
)	O
return	O
0	int
;	O
sign	int
=	O
(	O
code	array(char)
[	O
0	int
]	O
<	O
'0'	O
)	O
;	O
if	O
(	O
sign	int
)	O
ndig	int
=	O
'0'	O
-	O
code	array(char)
[	O
0	int
]	O
;	O
else	O
ndig	int
=	O
code	array(char)
[	O
0	int
]	O
-	O
'0'	O
;	O
if	O
(	O
sign	int
)	O
{	O
for	O
(	O
j	int
=	O
1	int
,	O
i	int
=	O
0	int
;	O
j	int
<=	O
ndig	int
;	O
j	int
++	O
)	O
i	int
=	O
(	O
(	O
i	int
<<	O
6	int
)	O
|	O
(	O
0x40	int
+	O
CHARBASE	char
-	O
code	array(char)
[	O
j	int
]	O
)	O
)	O
;	O
}	O
else	O
{	O
for	O
(	O
j	int
=	O
1	int
,	O
i	int
=	O
0	int
;	O
j	int
<=	O
ndig	int
;	O
j	int
++	O
)	O
i	int
=	O
(	O
(	O
i	int
<<	O
6	int
)	O
|	O
(	O
code	array(char)
[	O
j	int
]	O
-	O
CHARBASE	char
)	O
)	O
;	O
}	O
return	O
(	O
sign	int
?	O
-	O
i	int
:	O
i	int
)	O
;	O
}	O
