int	O
_idn2_contextj_rule	(*(int),long,long)->(int)
(	O
const	O
uint32_t	int
*	O
label	*(int)
,	O
size_t	long
llen	long
,	O
size_t	long
pos	long
)	O
{	O
uint32_t	int
cp	int
;	O
if	O
(	O
llen	long
==	O
0	int
)	O
return	O
IDN2_OK	int
;	O
cp	int
=	O
label	*(int)
[	O
pos	long
]	O
;	O
if	O
(	O
!	O
_idn2_contextj_p	(int)->(int)
(	O
cp	int
)	O
)	O
return	O
IDN2_OK	int
;	O
switch	O
(	O
cp	int
)	O
{	O
case	O
0x200C	int
:	O
if	O
(	O
pos	long
>	O
0	int
)	O
{	O
uint32_t	int
before_cp	int
=	O
label	*(int)
[	O
pos	long
-	O
1	int
]	O
;	O
int	O
cc	int
=	O
uc_combining_class	(int)->(int)
(	O
before_cp	int
)	O
;	O
if	O
(	O
cc	int
==	O
UC_CCC_VR	int
)	O
return	O
IDN2_OK	int
;	O
}	O
if	O
(	O
pos	long
==	O
0	int
||	O
pos	long
==	O
llen	long
-	O
1	int
)	O
return	O
IDN2_CONTEXTJ	int
;	O
{	O
int	O
jt	int
;	O
size_t	long
tmp	long
;	O
for	O
(	O
tmp	long
=	O
pos	long
-	O
1	int
;	O
;	O
tmp	long
--	O
)	O
{	O
jt	int
=	O
uc_joining_type	(int)->(int)
(	O
label	*(int)
[	O
tmp	long
]	O
)	O
;	O
if	O
(	O
jt	int
==	O
UC_JOINING_TYPE_L	int
||	O
jt	int
==	O
UC_JOINING_TYPE_D	int
)	O
break	O
;	O
if	O
(	O
tmp	long
==	O
0	int
)	O
return	O
IDN2_CONTEXTJ	int
;	O
if	O
(	O
jt	int
==	O
UC_JOINING_TYPE_T	int
)	O
continue	O
;	O
return	O
IDN2_CONTEXTJ	int
;	O
}	O
for	O
(	O
tmp	long
=	O
pos	long
+	O
1	int
;	O
tmp	long
<	O
llen	long
;	O
tmp	long
++	O
)	O
{	O
jt	int
=	O
uc_joining_type	(int)->(int)
(	O
label	*(int)
[	O
tmp	long
]	O
)	O
;	O
if	O
(	O
jt	int
==	O
UC_JOINING_TYPE_R	int
||	O
jt	int
==	O
UC_JOINING_TYPE_D	int
)	O
break	O
;	O
if	O
(	O
tmp	long
==	O
llen	long
-	O
1	int
)	O
return	O
IDN2_CONTEXTJ	int
;	O
if	O
(	O
jt	int
==	O
UC_JOINING_TYPE_T	int
)	O
continue	O
;	O
return	O
IDN2_CONTEXTJ	int
;	O
}	O
}	O
return	O
IDN2_OK	int
;	O
break	O
;	O
case	O
0x200D	int
:	O
if	O
(	O
pos	long
>	O
0	int
)	O
{	O
uint32_t	int
before_cp	int
=	O
label	*(int)
[	O
pos	long
-	O
1	int
]	O
;	O
int	O
cc	int
=	O
uc_combining_class	(int)->(int)
(	O
before_cp	int
)	O
;	O
if	O
(	O
cc	int
==	O
UC_CCC_VR	int
)	O
return	O
IDN2_OK	int
;	O
}	O
return	O
IDN2_CONTEXTJ	int
;	O
}	O
return	O
IDN2_CONTEXTJ_NO_RULE	int
;	O
}	O
static	O
const	O
char	O
*	O
_uc_script_name	(int)->(*(char))
(	O
ucs4_t	int
uc	int
)	O
{	O
const	O
uc_script_t	struct(int,*(struct(int,int,int)),*(char))
*	O
ucs	*(struct(int,*(struct(int,int,int)),*(char)))
=	O
uc_script	(int)->(*(struct(int,*(struct(int,int,int)),*(char))))
(	O
uc	int
)	O
;	O
if	O
(	O
!	O
ucs	*(struct(int,*(struct(int,int,int)),*(char)))
)	O
return	O
""	*(char)
;	O
return	O
ucs	*(struct(int,*(struct(int,int,int)),*(char)))
->	O
name	*(char)
;	O
}	O
int	O
_idn2_contexto_rule	(*(int),long,long)->(int)
(	O
const	O
uint32_t	int
*	O
label	*(int)
,	O
size_t	long
llen	long
,	O
size_t	long
pos	long
)	O
{	O
uint32_t	int
cp	int
=	O
label	*(int)
[	O
pos	long
]	O
;	O
if	O
(	O
!	O
_idn2_contexto_p	(int)->(int)
(	O
cp	int
)	O
)	O
return	O
IDN2_OK	int
;	O
switch	O
(	O
cp	int
)	O
{	O
case	O
0x00B7	int
:	O
if	O
(	O
llen	long
<	O
3	int
)	O
return	O
IDN2_CONTEXTO	int
;	O
if	O
(	O
pos	long
==	O
0	int
||	O
pos	long
==	O
llen	long
-	O
1	int
)	O
return	O
IDN2_CONTEXTO	int
;	O
if	O
(	O
label	*(int)
[	O
pos	long
-	O
1	int
]	O
==	O
0x006C	int
&&	O
label	*(int)
[	O
pos	long
+	O
1	int
]	O
==	O
0x006C	int
)	O
return	O
IDN2_OK	int
;	O
return	O
IDN2_CONTEXTO	int
;	O
break	O
;	O
case	O
0x0375	int
:	O
if	O
(	O
pos	long
==	O
llen	long
-	O
1	int
)	O
return	O
IDN2_CONTEXTO	int
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
_uc_script_name	(int)->(*(char))
(	O
label	*(int)
[	O
pos	long
+	O
1	int
]	O
)	O
,	O
"Greek"	*(char)
)	O
==	O
0	int
)	O
return	O
IDN2_OK	int
;	O
return	O
IDN2_CONTEXTO	int
;	O
break	O
;	O
case	O
0x05F3	int
:	O
case	O
0x05F4	int
:	O
if	O
(	O
pos	long
==	O
0	int
)	O
return	O
IDN2_CONTEXTO	int
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
_uc_script_name	(int)->(*(char))
(	O
label	*(int)
[	O
pos	long
-	O
1	int
]	O
)	O
,	O
"Hebrew"	*(char)
)	O
==	O
0	int
)	O
return	O
IDN2_OK	int
;	O
return	O
IDN2_CONTEXTO	int
;	O
break	O
;	O
case	O
0x0660	int
:	O
case	O
0x0661	int
:	O
case	O
0x0662	int
:	O
case	O
0x0663	int
:	O
case	O
0x0664	int
:	O
case	O
0x0665	int
:	O
case	O
0x0666	int
:	O
case	O
0x0667	int
:	O
case	O
0x0668	int
:	O
case	O
0x0669	int
:	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
llen	long
;	O
i	long
++	O
)	O
if	O
(	O
label	*(int)
[	O
i	long
]	O
>=	O
0x6F0	int
&&	O
label	*(int)
[	O
i	long
]	O
<=	O
0x06F9	int
)	O
return	O
IDN2_CONTEXTO	int
;	O
return	O
IDN2_OK	int
;	O
break	O
;	O
}	O
case	O
0x06F0	int
:	O
case	O
0x06F1	int
:	O
case	O
0x06F2	int
:	O
case	O
0x06F3	int
:	O
case	O
0x06F4	int
:	O
case	O
0x06F5	int
:	O
case	O
0x06F6	int
:	O
case	O
0x06F7	int
:	O
case	O
0x06F8	int
:	O
case	O
0x06F9	int
:	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
llen	long
;	O
i	long
++	O
)	O
if	O
(	O
label	*(int)
[	O
i	long
]	O
>=	O
0x660	int
&&	O
label	*(int)
[	O
i	long
]	O
<=	O
0x0669	int
)	O
return	O
IDN2_CONTEXTO	int
;	O
return	O
IDN2_OK	int
;	O
break	O
;	O
}	O
case	O
0x30FB	int
:	O
{	O
size_t	long
i	long
;	O
bool	bool
script_ok	bool
=	O
false	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
!	O
script_ok	bool
&&	O
i	long
<	O
llen	long
;	O
i	long
++	O
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
_uc_script_name	(int)->(*(char))
(	O
label	*(int)
[	O
i	long
]	O
)	O
,	O
"Hiragana"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
_uc_script_name	(int)->(*(char))
(	O
label	*(int)
[	O
i	long
]	O
)	O
,	O
"Katakana"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
_uc_script_name	(int)->(*(char))
(	O
label	*(int)
[	O
i	long
]	O
)	O
,	O
"Han"	*(char)
)	O
==	O
0	int
)	O
script_ok	bool
=	O
true	int
;	O
if	O
(	O
script_ok	bool
)	O
return	O
IDN2_OK	int
;	O
return	O
IDN2_CONTEXTO	int
;	O
break	O
;	O
}	O
}	O
return	O
IDN2_CONTEXTO_NO_RULE	int
;	O
}	O
bool	bool
_idn2_contexto_with_rule	(int)->(bool)
(	O
uint32_t	int
cp	int
)	O
{	O
switch	O
(	O
cp	int
)	O
{	O
case	O
0x00B7	int
:	O
case	O
0x0375	int
:	O
case	O
0x05F3	int
:	O
case	O
0x05F4	int
:	O
case	O
0x0660	int
:	O
case	O
0x0661	int
:	O
case	O
0x0662	int
:	O
case	O
0x0663	int
:	O
case	O
0x0664	int
:	O
case	O
0x0665	int
:	O
case	O
0x0666	int
:	O
case	O
0x0667	int
:	O
case	O
0x0668	int
:	O
case	O
0x0669	int
:	O
case	O
0x06F0	int
:	O
case	O
0x06F1	int
:	O
case	O
0x06F2	int
:	O
case	O
0x06F3	int
:	O
case	O
0x06F4	int
:	O
case	O
0x06F5	int
:	O
case	O
0x06F6	int
:	O
case	O
0x06F7	int
:	O
case	O
0x06F8	int
:	O
case	O
0x06F9	int
:	O
case	O
0x30FB	int
:	O
return	O
true	int
;	O
break	O
;	O
}	O
return	O
false	int
;	O
}	O
