typedef	O
struct	O
{	O
term_color_t	O
color	O
;	O
term_color_t	O
bgcolor	O
;	O
term_weight_t	O
weight	O
;	O
term_posture_t	O
posture	O
;	O
term_underline_t	O
underline	O
;	O
}	O
attributes_t	O
;	O
const	O
typeinfo_t	O
term_styled_ostream_typeinfo	O
=	O
{	O
"term_styled_ostream"	*(char)
}	O
;	O
static	O
const	O
typeinfo_t	O
*	O
const	O
term_styled_ostream_superclasses	array(*(int))
[	O
]	O
=	O
{	O
term_styled_ostream_SUPERCLASSES	O
}	O
;	O
static	O
void	O
term_styled_ostream__write_mem	(int,*(void),int)->(void)
(	O
term_styled_ostream_t	O
stream	int
,	O
const	O
void	O
*	O
data	*(void)
,	O
size_t	O
len	int
)	O
{	O
term_ostream_set_color	()->(int)
(	O
stream	int
->	O
destination	O
,	O
stream	int
->	O
curr_attr	O
->	O
color	O
)	O
;	O
term_ostream_set_bgcolor	()->(int)
(	O
stream	int
->	O
destination	O
,	O
stream	int
->	O
curr_attr	O
->	O
bgcolor	O
)	O
;	O
term_ostream_set_weight	()->(int)
(	O
stream	int
->	O
destination	O
,	O
stream	int
->	O
curr_attr	O
->	O
weight	O
)	O
;	O
term_ostream_set_posture	()->(int)
(	O
stream	int
->	O
destination	O
,	O
stream	int
->	O
curr_attr	O
->	O
posture	O
)	O
;	O
term_ostream_set_underline	()->(int)
(	O
stream	int
->	O
destination	O
,	O
stream	int
->	O
curr_attr	O
->	O
underline	O
)	O
;	O
term_ostream_write_mem	()->(int)
(	O
stream	int
->	O
destination	O
,	O
data	*(void)
,	O
len	int
)	O
;	O
}	O
static	O
void	O
term_styled_ostream__flush	(int,int)->(void)
(	O
term_styled_ostream_t	O
stream	int
,	O
ostream_flush_scope_t	O
scope	int
)	O
{	O
term_ostream_flush	()->(int)
(	O
stream	int
->	O
destination	O
,	O
scope	int
)	O
;	O
}	O
static	O
void	O
term_styled_ostream__free	(int)->(void)
(	O
term_styled_ostream_t	O
stream	int
)	O
{	O
term_ostream_free	()->(int)
(	O
stream	int
->	O
destination	O
)	O
;	O
cr_cascade_destroy	O
(	O
stream	int
->	O
css_document	O
)	O
;	O
cr_sel_eng_destroy	O
(	O
stream	int
->	O
css_engine	O
)	O
;	O
free	()->(int)
(	O
stream	int
->	O
curr_classes	O
)	O
;	O
{	O
void	O
*	O
ptr	*(void)
=	O
NULL	O
;	O
const	O
void	O
*	O
key	*(void)
;	O
size_t	O
keylen	O
;	O
void	O
*	O
data	*(void)
;	O
while	O
(	O
hash_iterate	O
(	O
&	O
stream	int
->	O
cache	O
,	O
&	O
ptr	*(void)
,	O
&	O
key	*(void)
,	O
&	O
keylen	O
,	O
&	O
data	*(void)
)	O
==	O
0	int
)	O
{	O
free	()->(int)
(	O
data	*(void)
)	O
;	O
}	O
}	O
hash_destroy	O
(	O
&	O
stream	int
->	O
cache	O
)	O
;	O
free	()->(int)
(	O
stream	int
)	O
;	O
}	O
enum	O
CRXTextDecorationType	enum(int,int,int,int,int,int)
{	O
TEXT_DECORATION_NONE	int
,	O
TEXT_DECORATION_UNDERLINE	int
,	O
TEXT_DECORATION_OVERLINE	int
,	O
TEXT_DECORATION_LINE_THROUGH	int
,	O
TEXT_DECORATION_BLINK	int
,	O
TEXT_DECORATION_INHERIT	int
}	O
;	O
typedef	O
struct	O
_CRXStyle	struct(*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int))
{	O
struct	O
_CRXStyle	struct(*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int))
*	O
parent_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
;	O
CRStyle	O
*	O
base	*(int)
;	O
enum	O
CRXTextDecorationType	enum(int,int,int,int,int,int)
text_decoration	enum(int,int,int,int,int,int)
;	O
}	O
CRXStyle	struct(*(struct(*(struct(*`,*`,enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int))
;	O
static	O
CRXStyle	struct(*(struct(*(struct(*`,*`,enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int))
*	O
crx_style_new	(int)->(*(struct(*(struct(*`,*`,enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int))))
(	O
gboolean	O
a_set_props_to_initial_values	int
)	O
{	O
CRStyle	O
*	O
base	*(int)
;	O
CRXStyle	struct(*(struct(*(struct(*`,*`,enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int))
*	O
result	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
;	O
base	*(int)
=	O
cr_style_new	O
(	O
a_set_props_to_initial_values	int
)	O
;	O
if	O
(	O
base	*(int)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
result	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
=	O
XMALLOC	()->(int)
(	O
CRXStyle	struct(*(struct(*(struct(*`,*`,enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int))
)	O
;	O
result	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
->	O
base	*(int)
=	O
base	*(int)
;	O
if	O
(	O
a_set_props_to_initial_values	int
)	O
result	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
->	O
text_decoration	enum(int,int,int,int,int,int)
=	O
TEXT_DECORATION_NONE	int
;	O
else	O
result	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
->	O
text_decoration	enum(int,int,int,int,int,int)
=	O
TEXT_DECORATION_INHERIT	int
;	O
return	O
result	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
;	O
}	O
static	O
void	O
crx_style_destroy	(*(struct(*(struct(*`,*`,enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int))))->(void)
(	O
CRXStyle	struct(*(struct(*(struct(*`,*`,enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int))
*	O
a_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
)	O
{	O
cr_style_destroy	O
(	O
a_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
->	O
base	*(int)
)	O
;	O
free	()->(int)
(	O
a_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
)	O
;	O
}	O
static	O
enum	O
CRStatus	O
crx_sel_eng_get_matched_style	(*(int),*(int),*(int),*(struct(*(struct(*`,*`,enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int))),*(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int)))),int)->(enum)
(	O
CRSelEng	O
*	O
a_this	*(int)
,	O
CRCascade	O
*	O
a_cascade	*(int)
,	O
xmlNode	O
*	O
a_node	*(int)
,	O
CRXStyle	struct(*(struct(*(struct(*`,*`,enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int))
*	O
a_parent_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
,	O
CRXStyle	struct(*(struct(*(struct(*`,*`,enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int))
*	O
*	O
a_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
,	O
gboolean	O
a_set_props_to_initial_values	int
)	O
{	O
enum	O
CRStatus	O
status	enum
;	O
CRPropList	O
*	O
props	O
=	O
NULL	O
;	O
if	O
(	O
!	O
(	O
a_this	*(int)
&&	O
a_cascade	*(int)
&&	O
a_node	*(int)
&&	O
a_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
)	O
)	O
return	O
CR_BAD_PARAM_ERROR	O
;	O
status	enum
=	O
cr_sel_eng_get_matched_properties_from_cascade	O
(	O
a_this	*(int)
,	O
a_cascade	*(int)
,	O
a_node	*(int)
,	O
&	O
props	O
)	O
;	O
if	O
(	O
!	O
(	O
status	enum
==	O
CR_OK	O
)	O
)	O
return	O
status	enum
;	O
if	O
(	O
props	O
)	O
{	O
CRXStyle	struct(*(struct(*(struct(*`,*`,enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int))
*	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
;	O
if	O
(	O
!	O
*	O
a_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
)	O
{	O
*	O
a_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
=	O
crx_style_new	(int)->(*(struct(*(struct(*`,*`,enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int))))
(	O
a_set_props_to_initial_values	int
)	O
;	O
if	O
(	O
!	O
*	O
a_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
)	O
return	O
CR_ERROR	O
;	O
}	O
else	O
{	O
if	O
(	O
a_set_props_to_initial_values	int
)	O
{	O
cr_style_set_props_to_initial_values	O
(	O
(	O
*	O
a_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
)	O
->	O
base	*(int)
)	O
;	O
(	O
*	O
a_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
)	O
->	O
text_decoration	enum(int,int,int,int,int,int)
=	O
TEXT_DECORATION_NONE	int
;	O
}	O
else	O
{	O
cr_style_set_props_to_default_values	O
(	O
(	O
*	O
a_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
)	O
->	O
base	*(int)
)	O
;	O
(	O
*	O
a_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
)	O
->	O
text_decoration	enum(int,int,int,int,int,int)
=	O
TEXT_DECORATION_INHERIT	int
;	O
}	O
}	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
=	O
*	O
a_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
;	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
->	O
parent_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
=	O
a_parent_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
;	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
->	O
base	*(int)
->	O
parent_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
=	O
(	O
a_parent_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
!=	O
NULL	O
?	O
a_parent_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
->	O
base	*(int)
:	O
NULL	O
)	O
;	O
{	O
CRPropList	O
*	O
cur	O
;	O
for	O
(	O
cur	O
=	O
props	O
;	O
cur	O
!=	O
NULL	O
;	O
cur	O
=	O
cr_prop_list_get_next	O
(	O
cur	O
)	O
)	O
{	O
CRDeclaration	O
*	O
decl	O
=	O
NULL	O
;	O
cr_prop_list_get_decl	O
(	O
cur	O
,	O
&	O
decl	O
)	O
;	O
cr_style_set_style_from_decl	O
(	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
->	O
base	*(int)
,	O
decl	O
)	O
;	O
if	O
(	O
decl	O
!=	O
NULL	O
&&	O
decl	O
->	O
property	O
!=	O
NULL	O
&&	O
decl	O
->	O
property	O
->	O
stryng	O
!=	O
NULL	O
&&	O
decl	O
->	O
property	O
->	O
stryng	O
->	O
str	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
strcmp	O
(	O
decl	O
->	O
property	O
->	O
stryng	O
->	O
str	O
,	O
"text-decoration"	*(char)
)	O
==	O
0	int
&&	O
decl	O
->	O
value	*(char)
!=	O
NULL	O
&&	O
decl	O
->	O
value	*(char)
->	O
type	O
==	O
TERM_IDENT	O
&&	O
decl	O
->	O
value	*(char)
->	O
content	O
.	O
str	O
!=	O
NULL	O
)	O
{	O
const	O
char	O
*	O
value	*(char)
=	O
cr_string_peek_raw_str	O
(	O
decl	O
->	O
value	*(char)
->	O
content	O
.	O
str	O
)	O
;	O
if	O
(	O
value	*(char)
!=	O
NULL	O
)	O
{	O
if	O
(	O
strcmp	O
(	O
value	*(char)
,	O
"none"	*(char)
)	O
==	O
0	int
)	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
->	O
text_decoration	enum(int,int,int,int,int,int)
=	O
TEXT_DECORATION_NONE	int
;	O
else	O
if	O
(	O
strcmp	O
(	O
value	*(char)
,	O
"underline"	*(char)
)	O
==	O
0	int
)	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
->	O
text_decoration	enum(int,int,int,int,int,int)
=	O
TEXT_DECORATION_UNDERLINE	int
;	O
else	O
if	O
(	O
strcmp	O
(	O
value	*(char)
,	O
"overline"	*(char)
)	O
==	O
0	int
)	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
->	O
text_decoration	enum(int,int,int,int,int,int)
=	O
TEXT_DECORATION_OVERLINE	int
;	O
else	O
if	O
(	O
strcmp	O
(	O
value	*(char)
,	O
"line-through"	*(char)
)	O
==	O
0	int
)	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
->	O
text_decoration	enum(int,int,int,int,int,int)
=	O
TEXT_DECORATION_LINE_THROUGH	int
;	O
else	O
if	O
(	O
strcmp	O
(	O
value	*(char)
,	O
"blink"	*(char)
)	O
==	O
0	int
)	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
->	O
text_decoration	enum(int,int,int,int,int,int)
=	O
TEXT_DECORATION_BLINK	int
;	O
else	O
if	O
(	O
strcmp	O
(	O
value	*(char)
,	O
"inherit"	*(char)
)	O
==	O
0	int
)	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
->	O
text_decoration	enum(int,int,int,int,int,int)
=	O
TEXT_DECORATION_INHERIT	int
;	O
}	O
}	O
}	O
}	O
}	O
cr_prop_list_destroy	O
(	O
props	O
)	O
;	O
}	O
return	O
CR_OK	O
;	O
}	O
static	O
term_color_t	O
style_compute_color_value	(*(int),enum,int)->(int)
(	O
CRStyle	O
*	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
,	O
enum	O
CRRgbProp	O
which	enum
,	O
term_ostream_t	O
stream	int
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
==	O
NULL	O
)	O
return	O
COLOR_DEFAULT	O
;	O
if	O
(	O
cr_rgb_is_set_to_inherit	O
(	O
&	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
->	O
rgb_props	O
[	O
which	enum
]	O
.	O
sv	O
)	O
)	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
=	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
->	O
parent_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
;	O
else	O
if	O
(	O
cr_rgb_is_set_to_transparent	O
(	O
&	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
->	O
rgb_props	O
[	O
which	enum
]	O
.	O
sv	O
)	O
)	O
return	O
COLOR_DEFAULT	O
;	O
else	O
{	O
CRRgb	O
rgb	O
;	O
int	O
r	int
;	O
int	O
g	int
;	O
int	O
b	int
;	O
cr_rgb_copy	O
(	O
&	O
rgb	O
,	O
&	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
->	O
rgb_props	O
[	O
which	enum
]	O
.	O
sv	O
)	O
;	O
if	O
(	O
cr_rgb_compute_from_percentage	O
(	O
&	O
rgb	O
)	O
!=	O
CR_OK	O
)	O
abort	O
(	O
)	O
;	O
r	int
=	O
rgb	O
.	O
red	O
&	O
0xff	int
;	O
g	int
=	O
rgb	O
.	O
green	O
&	O
0xff	int
;	O
b	int
=	O
rgb	O
.	O
blue	O
&	O
0xff	int
;	O
return	O
term_ostream_rgb_to_color	()->(int)
(	O
stream	int
,	O
r	int
,	O
g	int
,	O
b	int
)	O
;	O
}	O
}	O
}	O
static	O
term_weight_t	O
style_compute_font_weight_value	(*(int))->(int)
(	O
const	O
CRStyle	O
*	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
)	O
{	O
int	O
value	*(char)
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
==	O
NULL	O
)	O
value	*(char)
+=	O
4	int
;	O
else	O
switch	O
(	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
->	O
font_weight	O
)	O
{	O
case	O
FONT_WEIGHT_INHERIT	O
:	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
=	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
->	O
parent_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
;	O
continue	O
;	O
case	O
FONT_WEIGHT_BOLDER	O
:	O
value	*(char)
+=	O
1	int
;	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
=	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
->	O
parent_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
;	O
continue	O
;	O
case	O
FONT_WEIGHT_LIGHTER	O
:	O
value	*(char)
-=	O
1	int
;	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
=	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
->	O
parent_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
;	O
continue	O
;	O
case	O
FONT_WEIGHT_100	O
:	O
value	*(char)
+=	O
1	int
;	O
break	O
;	O
case	O
FONT_WEIGHT_200	O
:	O
value	*(char)
+=	O
2	int
;	O
break	O
;	O
case	O
FONT_WEIGHT_300	O
:	O
value	*(char)
+=	O
3	int
;	O
break	O
;	O
case	O
FONT_WEIGHT_400	O
:	O
case	O
FONT_WEIGHT_NORMAL	O
:	O
value	*(char)
+=	O
4	int
;	O
break	O
;	O
case	O
FONT_WEIGHT_500	O
:	O
value	*(char)
+=	O
5	int
;	O
break	O
;	O
case	O
FONT_WEIGHT_600	O
:	O
value	*(char)
+=	O
6	int
;	O
break	O
;	O
case	O
FONT_WEIGHT_700	O
:	O
case	O
FONT_WEIGHT_BOLD	O
:	O
value	*(char)
+=	O
7	int
;	O
break	O
;	O
case	O
FONT_WEIGHT_800	O
:	O
value	*(char)
+=	O
8	int
;	O
break	O
;	O
case	O
FONT_WEIGHT_900	O
:	O
value	*(char)
+=	O
9	int
;	O
break	O
;	O
default	O
:	O
abort	O
(	O
)	O
;	O
}	O
return	O
(	O
value	*(char)
>=	O
6	int
?	O
WEIGHT_BOLD	O
:	O
WEIGHT_NORMAL	O
)	O
;	O
}	O
}	O
static	O
term_posture_t	O
style_compute_font_posture_value	(*(int))->(int)
(	O
const	O
CRStyle	O
*	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
==	O
NULL	O
)	O
return	O
POSTURE_DEFAULT	O
;	O
switch	O
(	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
->	O
font_style	O
)	O
{	O
case	O
FONT_STYLE_INHERIT	O
:	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
=	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
->	O
parent_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
;	O
break	O
;	O
case	O
FONT_STYLE_NORMAL	O
:	O
return	O
POSTURE_NORMAL	O
;	O
case	O
FONT_STYLE_ITALIC	O
:	O
case	O
FONT_STYLE_OBLIQUE	O
:	O
return	O
POSTURE_ITALIC	O
;	O
default	O
:	O
abort	O
(	O
)	O
;	O
}	O
}	O
}	O
static	O
term_underline_t	O
style_compute_text_underline_value	(*(struct(*(struct(*`,*`,enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int))))->(int)
(	O
const	O
CRXStyle	struct(*(struct(*(struct(*`,*`,enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int))
*	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
==	O
NULL	O
)	O
return	O
UNDERLINE_DEFAULT	O
;	O
switch	O
(	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
->	O
text_decoration	enum(int,int,int,int,int,int)
)	O
{	O
case	O
TEXT_DECORATION_INHERIT	int
:	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
=	O
style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
->	O
parent_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
;	O
break	O
;	O
case	O
TEXT_DECORATION_NONE	int
:	O
case	O
TEXT_DECORATION_OVERLINE	int
:	O
case	O
TEXT_DECORATION_LINE_THROUGH	int
:	O
case	O
TEXT_DECORATION_BLINK	int
:	O
return	O
UNDERLINE_OFF	O
;	O
case	O
TEXT_DECORATION_UNDERLINE	int
:	O
return	O
UNDERLINE_ON	O
;	O
default	O
:	O
abort	O
(	O
)	O
;	O
}	O
}	O
}	O
static	O
attributes_t	O
*	O
match	(int)->(*(int))
(	O
term_styled_ostream_t	O
stream	int
)	O
{	O
xmlNodePtr	O
root	O
;	O
xmlNodePtr	O
curr	O
;	O
char	O
*	O
p_end	*(char)
;	O
char	O
*	O
p_start	*(char)
;	O
CRXStyle	struct(*(struct(*(struct(*`,*`,enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int))
*	O
curr_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
;	O
CRStyle	O
*	O
curr_style_base	O
;	O
attributes_t	O
*	O
attr	O
;	O
root	O
=	O
xmlNewNode	O
(	O
NULL	O
,	O
(	O
const	O
xmlChar	O
*	O
)	O
"__root__"	*(char)
)	O
;	O
root	O
->	O
type	O
=	O
XML_ELEMENT_NODE	O
;	O
curr	O
=	O
root	O
;	O
p_end	*(char)
=	O
&	O
stream	int
->	O
curr_classes	O
[	O
stream	int
->	O
curr_classes_length	O
]	O
;	O
p_start	*(char)
=	O
stream	int
->	O
curr_classes	O
;	O
while	O
(	O
p_start	*(char)
<	O
p_end	*(char)
)	O
{	O
char	O
*	O
p	*(char)
;	O
xmlNodePtr	O
child	O
;	O
if	O
(	O
!	O
(	O
*	O
p_start	*(char)
==	O
' '	O
)	O
)	O
abort	O
(	O
)	O
;	O
p_start	*(char)
++	O
;	O
for	O
(	O
p	*(char)
=	O
p_start	*(char)
;	O
p	*(char)
<	O
p_end	*(char)
&&	O
*	O
p	*(char)
!=	O
' '	O
;	O
p	*(char)
++	O
)	O
;	O
*	O
p	*(char)
=	O
'\0'	O
;	O
child	O
=	O
xmlNewNode	O
(	O
NULL	O
,	O
(	O
const	O
xmlChar	O
*	O
)	O
p_start	*(char)
)	O
;	O
child	O
->	O
type	O
=	O
XML_ELEMENT_NODE	O
;	O
xmlSetProp	O
(	O
child	O
,	O
(	O
const	O
xmlChar	O
*	O
)	O
"class"	*(char)
,	O
(	O
const	O
xmlChar	O
*	O
)	O
p_start	*(char)
)	O
;	O
*	O
p	*(char)
=	O
' '	O
;	O
if	O
(	O
xmlAddChild	O
(	O
curr	O
,	O
child	O
)	O
==	O
NULL	O
)	O
abort	O
(	O
)	O
;	O
curr	O
=	O
child	O
;	O
p_start	*(char)
=	O
p	*(char)
;	O
}	O
curr_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
=	O
NULL	O
;	O
for	O
(	O
curr	O
=	O
root	O
;	O
curr	O
!=	O
NULL	O
;	O
curr	O
=	O
curr	O
->	O
children	O
)	O
{	O
CRXStyle	struct(*(struct(*(struct(*`,*`,enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int))
*	O
parent_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
=	O
curr_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
;	O
curr_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
=	O
NULL	O
;	O
if	O
(	O
crx_sel_eng_get_matched_style	(*(int),*(int),*(int),*(struct(*(struct(*`,*`,enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int))),*(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int)))),int)->(enum)
(	O
stream	int
->	O
css_engine	O
,	O
stream	int
->	O
css_document	O
,	O
curr	O
,	O
parent_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
,	O
&	O
curr_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
,	O
FALSE	O
)	O
!=	O
CR_OK	O
)	O
abort	O
(	O
)	O
;	O
if	O
(	O
curr_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
==	O
NULL	O
)	O
curr_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
=	O
parent_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
;	O
else	O
;	O
}	O
curr_style_base	O
=	O
(	O
curr_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
!=	O
NULL	O
?	O
curr_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
->	O
base	*(int)
:	O
NULL	O
)	O
;	O
attr	O
=	O
XMALLOC	()->(int)
(	O
attributes_t	O
)	O
;	O
attr	O
->	O
color	O
=	O
style_compute_color_value	(*(int),enum,int)->(int)
(	O
curr_style_base	O
,	O
RGB_PROP_COLOR	O
,	O
stream	int
->	O
destination	O
)	O
;	O
attr	O
->	O
bgcolor	O
=	O
style_compute_color_value	(*(int),enum,int)->(int)
(	O
curr_style_base	O
,	O
RGB_PROP_BACKGROUND_COLOR	O
,	O
stream	int
->	O
destination	O
)	O
;	O
attr	O
->	O
weight	O
=	O
style_compute_font_weight_value	(*(int))->(int)
(	O
curr_style_base	O
)	O
;	O
attr	O
->	O
posture	O
=	O
style_compute_font_posture_value	(*(int))->(int)
(	O
curr_style_base	O
)	O
;	O
attr	O
->	O
underline	O
=	O
style_compute_text_underline_value	(*(struct(*(struct(*`,*`,enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int))))->(int)
(	O
curr_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
)	O
;	O
while	O
(	O
curr_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
!=	O
NULL	O
)	O
{	O
CRXStyle	struct(*(struct(*(struct(*`,*`,enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int))
*	O
parent_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
=	O
curr_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
->	O
parent_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
;	O
crx_style_destroy	(*(struct(*(struct(*`,*`,enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int))))->(void)
(	O
curr_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
)	O
;	O
curr_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
=	O
parent_style	*(struct(*(struct(*(struct`),*(int),enum(int,int,int,int,int,int))),*(int),enum(int,int,int,int,int,int)))
;	O
}	O
xmlFreeNodeList	O
(	O
root	O
)	O
;	O
return	O
attr	O
;	O
}	O
static	O
void	O
match_and_cache	(int)->(void)
(	O
term_styled_ostream_t	O
stream	int
)	O
{	O
attributes_t	O
*	O
attr	O
=	O
match	(int)->(*(int))
(	O
stream	int
)	O
;	O
if	O
(	O
hash_insert_entry	O
(	O
&	O
stream	int
->	O
cache	O
,	O
stream	int
->	O
curr_classes	O
,	O
stream	int
->	O
curr_classes_length	O
,	O
attr	O
)	O
==	O
NULL	O
)	O
abort	O
(	O
)	O
;	O
stream	int
->	O
curr_attr	O
=	O
attr	O
;	O
}	O
static	O
void	O
term_styled_ostream__begin_use_class	(int,*(char))->(void)
(	O
term_styled_ostream_t	O
stream	int
,	O
const	O
char	O
*	O
classname	*(char)
)	O
{	O
size_t	O
classname_len	O
;	O
char	O
*	O
p	*(char)
;	O
void	O
*	O
found	*(void)
;	O
if	O
(	O
classname	*(char)
[	O
0	int
]	O
==	O
'\0'	O
||	O
strchr	O
(	O
classname	*(char)
,	O
' '	O
)	O
!=	O
NULL	O
)	O
abort	O
(	O
)	O
;	O
classname_len	O
=	O
strlen	O
(	O
classname	*(char)
)	O
;	O
if	O
(	O
stream	int
->	O
curr_classes_length	O
+	O
1	int
+	O
classname_len	O
+	O
1	int
>	O
stream	int
->	O
curr_classes_allocated	O
)	O
{	O
size_t	O
new_allocated	O
=	O
stream	int
->	O
curr_classes_length	O
+	O
1	int
+	O
classname_len	O
+	O
1	int
;	O
if	O
(	O
new_allocated	O
<	O
2	int
*	O
stream	int
->	O
curr_classes_allocated	O
)	O
new_allocated	O
=	O
2	int
*	O
stream	int
->	O
curr_classes_allocated	O
;	O
stream	int
->	O
curr_classes	O
=	O
xrealloc	O
(	O
stream	int
->	O
curr_classes	O
,	O
new_allocated	O
)	O
;	O
stream	int
->	O
curr_classes_allocated	O
=	O
new_allocated	O
;	O
}	O
p	*(char)
=	O
&	O
stream	int
->	O
curr_classes	O
[	O
stream	int
->	O
curr_classes_length	O
]	O
;	O
*	O
p	*(char)
++	O
=	O
' '	O
;	O
memcpy	O
(	O
p	*(char)
,	O
classname	*(char)
,	O
classname_len	O
)	O
;	O
stream	int
->	O
curr_classes_length	O
+=	O
1	int
+	O
classname_len	O
;	O
if	O
(	O
hash_find_entry	O
(	O
&	O
stream	int
->	O
cache	O
,	O
stream	int
->	O
curr_classes	O
,	O
stream	int
->	O
curr_classes_length	O
,	O
&	O
found	*(void)
)	O
<	O
0	int
)	O
match_and_cache	(int)->(void)
(	O
stream	int
)	O
;	O
else	O
stream	int
->	O
curr_attr	O
=	O
(	O
attributes_t	O
*	O
)	O
found	*(void)
;	O
}	O
static	O
void	O
term_styled_ostream__end_use_class	(int,*(char))->(void)
(	O
term_styled_ostream_t	O
stream	int
,	O
const	O
char	O
*	O
classname	*(char)
)	O
{	O
char	O
*	O
p_end	*(char)
;	O
char	O
*	O
p_start	*(char)
;	O
char	O
*	O
p	*(char)
;	O
void	O
*	O
found	*(void)
;	O
if	O
(	O
stream	int
->	O
curr_classes_length	O
==	O
0	int
)	O
abort	O
(	O
)	O
;	O
p_end	*(char)
=	O
&	O
stream	int
->	O
curr_classes	O
[	O
stream	int
->	O
curr_classes_length	O
]	O
;	O
p	*(char)
=	O
p_end	*(char)
;	O
while	O
(	O
*	O
--	O
p	*(char)
!=	O
' '	O
)	O
;	O
p_start	*(char)
=	O
p	*(char)
+	O
1	int
;	O
if	O
(	O
!	O
(	O
p_end	*(char)
-	O
p_start	*(char)
==	O
strlen	O
(	O
classname	*(char)
)	O
&&	O
memcmp	O
(	O
p_start	*(char)
,	O
classname	*(char)
,	O
p_end	*(char)
-	O
p_start	*(char)
)	O
==	O
0	int
)	O
)	O
abort	O
(	O
)	O
;	O
stream	int
->	O
curr_classes_length	O
=	O
p	*(char)
-	O
stream	int
->	O
curr_classes	O
;	O
if	O
(	O
hash_find_entry	O
(	O
&	O
stream	int
->	O
cache	O
,	O
stream	int
->	O
curr_classes	O
,	O
stream	int
->	O
curr_classes_length	O
,	O
&	O
found	*(void)
)	O
<	O
0	int
)	O
abort	O
(	O
)	O
;	O
stream	int
->	O
curr_attr	O
=	O
(	O
attributes_t	O
*	O
)	O
found	*(void)
;	O
}	O
static	O
void	O
term_styled_ostream__flush_to_current_style	(int)->(void)
(	O
term_styled_ostream_t	O
stream	int
)	O
{	O
term_ostream_set_color	()->(int)
(	O
stream	int
->	O
destination	O
,	O
stream	int
->	O
curr_attr	O
->	O
color	O
)	O
;	O
term_ostream_set_bgcolor	()->(int)
(	O
stream	int
->	O
destination	O
,	O
stream	int
->	O
curr_attr	O
->	O
bgcolor	O
)	O
;	O
term_ostream_set_weight	()->(int)
(	O
stream	int
->	O
destination	O
,	O
stream	int
->	O
curr_attr	O
->	O
weight	O
)	O
;	O
term_ostream_set_posture	()->(int)
(	O
stream	int
->	O
destination	O
,	O
stream	int
->	O
curr_attr	O
->	O
posture	O
)	O
;	O
term_ostream_set_underline	()->(int)
(	O
stream	int
->	O
destination	O
,	O
stream	int
->	O
curr_attr	O
->	O
underline	O
)	O
;	O
term_ostream_flush_to_current_style	()->(int)
(	O
stream	int
->	O
destination	O
)	O
;	O
}	O
term_styled_ostream_t	O
term_styled_ostream_create	(int,*(char),int,*(char))->(int)
(	O
int	O
fd	int
,	O
const	O
char	O
*	O
filename	*(char)
,	O
ttyctl_t	O
tty_control	int
,	O
const	O
char	O
*	O
css_filename	*(char)
)	O
{	O
term_styled_ostream_t	O
stream	int
;	O
CRStyleSheet	O
*	O
css_file_contents	O
;	O
if	O
(	O
css_filename	*(char)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
stream	int
=	O
XMALLOC	()->(int)
(	O
struct	O
term_styled_ostream_representation	O
)	O
;	O
stream	int
->	O
base	*(int)
.	O
base	*(int)
.	O
vtable	*(struct)
=	O
&	O
term_styled_ostream_vtable	O
;	O
stream	int
->	O
destination	O
=	O
term_ostream_create	()->(int)
(	O
fd	int
,	O
filename	*(char)
,	O
tty_control	int
)	O
;	O
if	O
(	O
cr_om_parser_simply_parse_file	O
(	O
(	O
const	O
guchar	O
*	O
)	O
css_filename	*(char)
,	O
CR_UTF_8	O
,	O
&	O
css_file_contents	O
)	O
!=	O
CR_OK	O
)	O
{	O
term_ostream_free	()->(int)
(	O
stream	int
->	O
destination	O
)	O
;	O
free	()->(int)
(	O
stream	int
)	O
;	O
return	O
NULL	O
;	O
}	O
stream	int
->	O
css_document	O
=	O
cr_cascade_new	O
(	O
NULL	O
,	O
css_file_contents	O
,	O
NULL	O
)	O
;	O
stream	int
->	O
css_engine	O
=	O
cr_sel_eng_new	O
(	O
)	O
;	O
stream	int
->	O
curr_classes_allocated	O
=	O
60	int
;	O
stream	int
->	O
curr_classes	O
=	O
XNMALLOC	()->(int)
(	O
stream	int
->	O
curr_classes_allocated	O
,	O
char	O
)	O
;	O
stream	int
->	O
curr_classes_length	O
=	O
0	int
;	O
hash_init	O
(	O
&	O
stream	int
->	O
cache	O
,	O
10	int
)	O
;	O
match_and_cache	(int)->(void)
(	O
stream	int
)	O
;	O
return	O
stream	int
;	O
}	O
const	O
struct	O
term_styled_ostream_implementation	O
term_styled_ostream_vtable	O
=	O
{	O
term_styled_ostream_superclasses	array(*(int))
,	O
sizeof	O
(	O
term_styled_ostream_superclasses	array(*(int))
)	O
/	O
sizeof	O
(	O
term_styled_ostream_superclasses	array(*(int))
[	O
0	int
]	O
)	O
,	O
sizeof	O
(	O
struct	O
term_styled_ostream_representation	O
)	O
,	O
term_styled_ostream__write_mem	(int,*(void),int)->(void)
,	O
term_styled_ostream__flush	(int,int)->(void)
,	O
term_styled_ostream__free	(int)->(void)
,	O
term_styled_ostream__begin_use_class	(int,*(char))->(void)
,	O
term_styled_ostream__end_use_class	(int,*(char))->(void)
,	O
term_styled_ostream__flush_to_current_style	(int)->(void)
,	O
}	O
;	O
void	O
term_styled_ostream_write_mem	(int,*(void),int)->(void)
(	O
term_styled_ostream_t	O
first_arg	int
,	O
const	O
void	O
*	O
data	*(void)
,	O
size_t	O
len	int
)	O
{	O
const	O
struct	O
term_styled_ostream_implementation	O
*	O
vtable	*(struct)
=	O
(	O
(	O
struct	O
term_styled_ostream_representation_header	O
*	O
)	O
(	O
struct	O
term_styled_ostream_representation	O
*	O
)	O
first_arg	int
)	O
->	O
vtable	*(struct)
;	O
vtable	*(struct)
->	O
write_mem	O
(	O
first_arg	int
,	O
data	*(void)
,	O
len	int
)	O
;	O
}	O
void	O
term_styled_ostream_flush	(int,int)->(void)
(	O
term_styled_ostream_t	O
first_arg	int
,	O
ostream_flush_scope_t	O
scope	int
)	O
{	O
const	O
struct	O
term_styled_ostream_implementation	O
*	O
vtable	*(struct)
=	O
(	O
(	O
struct	O
term_styled_ostream_representation_header	O
*	O
)	O
(	O
struct	O
term_styled_ostream_representation	O
*	O
)	O
first_arg	int
)	O
->	O
vtable	*(struct)
;	O
vtable	*(struct)
->	O
flush	O
(	O
first_arg	int
,	O
scope	int
)	O
;	O
}	O
void	O
term_styled_ostream_free	(int)->(void)
(	O
term_styled_ostream_t	O
first_arg	int
)	O
{	O
const	O
struct	O
term_styled_ostream_implementation	O
*	O
vtable	*(struct)
=	O
(	O
(	O
struct	O
term_styled_ostream_representation_header	O
*	O
)	O
(	O
struct	O
term_styled_ostream_representation	O
*	O
)	O
first_arg	int
)	O
->	O
vtable	*(struct)
;	O
vtable	*(struct)
->	O
free	()->(int)
(	O
first_arg	int
)	O
;	O
}	O
void	O
term_styled_ostream_begin_use_class	(int,*(char))->(void)
(	O
term_styled_ostream_t	O
first_arg	int
,	O
const	O
char	O
*	O
classname	*(char)
)	O
{	O
const	O
struct	O
term_styled_ostream_implementation	O
*	O
vtable	*(struct)
=	O
(	O
(	O
struct	O
term_styled_ostream_representation_header	O
*	O
)	O
(	O
struct	O
term_styled_ostream_representation	O
*	O
)	O
first_arg	int
)	O
->	O
vtable	*(struct)
;	O
vtable	*(struct)
->	O
begin_use_class	O
(	O
first_arg	int
,	O
classname	*(char)
)	O
;	O
}	O
void	O
term_styled_ostream_end_use_class	(int,*(char))->(void)
(	O
term_styled_ostream_t	O
first_arg	int
,	O
const	O
char	O
*	O
classname	*(char)
)	O
{	O
const	O
struct	O
term_styled_ostream_implementation	O
*	O
vtable	*(struct)
=	O
(	O
(	O
struct	O
term_styled_ostream_representation_header	O
*	O
)	O
(	O
struct	O
term_styled_ostream_representation	O
*	O
)	O
first_arg	int
)	O
->	O
vtable	*(struct)
;	O
vtable	*(struct)
->	O
end_use_class	O
(	O
first_arg	int
,	O
classname	*(char)
)	O
;	O
}	O
void	O
term_styled_ostream_flush_to_current_style	(int)->(void)
(	O
term_styled_ostream_t	O
first_arg	int
)	O
{	O
const	O
struct	O
term_styled_ostream_implementation	O
*	O
vtable	*(struct)
=	O
(	O
(	O
struct	O
term_styled_ostream_representation_header	O
*	O
)	O
(	O
struct	O
term_styled_ostream_representation	O
*	O
)	O
first_arg	int
)	O
->	O
vtable	*(struct)
;	O
vtable	*(struct)
->	O
flush_to_current_style	O
(	O
first_arg	int
)	O
;	O
}	O
