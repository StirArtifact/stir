static	O
unsigned	O
long	O
higher_prime_number	O
(	O
unsigned	O
long	O
n	long
)	O
{	O
static	O
const	O
unsigned	O
long	O
primes	O
[	O
]	O
=	O
{	O
(	O
unsigned	O
long	O
)	O
31	int
,	O
(	O
unsigned	O
long	O
)	O
61	int
,	O
(	O
unsigned	O
long	O
)	O
127	int
,	O
(	O
unsigned	O
long	O
)	O
251	int
,	O
(	O
unsigned	O
long	O
)	O
509	int
,	O
(	O
unsigned	O
long	O
)	O
1021	int
,	O
(	O
unsigned	O
long	O
)	O
2039	int
,	O
(	O
unsigned	O
long	O
)	O
4093	int
,	O
(	O
unsigned	O
long	O
)	O
8191	int
,	O
(	O
unsigned	O
long	O
)	O
16381	int
,	O
(	O
unsigned	O
long	O
)	O
32749	int
,	O
(	O
unsigned	O
long	O
)	O
65521	int
,	O
(	O
unsigned	O
long	O
)	O
131071	int
,	O
(	O
unsigned	O
long	O
)	O
262139	int
,	O
(	O
unsigned	O
long	O
)	O
524287	int
,	O
(	O
unsigned	O
long	O
)	O
1048573	int
,	O
(	O
unsigned	O
long	O
)	O
2097143	int
,	O
(	O
unsigned	O
long	O
)	O
4194301	int
,	O
(	O
unsigned	O
long	O
)	O
8388593	int
,	O
(	O
unsigned	O
long	O
)	O
16777213	int
,	O
(	O
unsigned	O
long	O
)	O
33554393	int
,	O
(	O
unsigned	O
long	O
)	O
67108859	int
,	O
(	O
unsigned	O
long	O
)	O
134217689	int
,	O
(	O
unsigned	O
long	O
)	O
268435399	int
,	O
(	O
unsigned	O
long	O
)	O
536870909	int
,	O
(	O
unsigned	O
long	O
)	O
1073741789	int
,	O
(	O
unsigned	O
long	O
)	O
2147483647	int
,	O
(	O
(	O
unsigned	O
long	O
)	O
2147483647	int
)	O
+	O
(	O
(	O
unsigned	O
long	O
)	O
2147483644	int
)	O
,	O
}	O
;	O
const	O
unsigned	O
long	O
*	O
low	O
=	O
&	O
primes	O
[	O
0	int
]	O
;	O
const	O
unsigned	O
long	O
*	O
high	O
=	O
&	O
primes	O
[	O
sizeof	O
(	O
primes	O
)	O
/	O
sizeof	O
(	O
primes	O
[	O
0	int
]	O
)	O
]	O
;	O
while	O
(	O
low	O
!=	O
high	O
)	O
{	O
const	O
unsigned	O
long	O
*	O
mid	O
=	O
low	O
+	O
(	O
high	O
-	O
low	O
)	O
/	O
2	int
;	O
if	O
(	O
n	long
>=	O
*	O
mid	O
)	O
low	O
=	O
mid	O
+	O
1	int
;	O
else	O
high	O
=	O
mid	O
;	O
}	O
if	O
(	O
n	long
>=	O
*	O
low	O
)	O
return	O
0	int
;	O
return	O
*	O
low	O
;	O
}	O
static	O
unsigned	O
long	O
bfd_default_hash_table_size	O
=	O
DEFAULT_SIZE	O
;	O
bfd_boolean	int
bfd_hash_table_init_n	(*(struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*((*(struct(*`,*`,long)),*(struct(*`,*`,*`,int,int,int,int)),*(char))->(*(struct(*`,*`,long)))),int,int)->(int)
(	O
struct	O
bfd_hash_table	struct(*(*(struct(*(struct(*`,*`,long)),*(char),long))),*((*(struct(*(struct`),*(char),long)),*(struct(*(*`),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*(char))->(*(struct(*(struct`),*(char),long)))),*(void),int,int,int,int)
*	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
,	O
struct	O
bfd_hash_entry	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
*	O
(	O
*	O
newfunc	*((*(struct(*(struct`),*(char),long)),*(struct(*(*`),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*(char))->(*(struct(*(struct`),*(char),long))))
)	O
(	O
struct	O
bfd_hash_entry	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
*	O
,	O
struct	O
bfd_hash_table	struct(*(*(struct(*(struct(*`,*`,long)),*(char),long))),*((*(struct(*(struct`),*(char),long)),*(struct(*(*`),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*(char))->(*(struct(*(struct`),*(char),long)))),*(void),int,int,int,int)
*	O
,	O
const	O
char	O
*	O
)	O
,	O
unsigned	O
int	O
entsize	int
,	O
unsigned	O
int	O
size	long
)	O
{	O
unsigned	O
long	O
alloc	O
;	O
alloc	O
=	O
size	long
;	O
alloc	O
*=	O
sizeof	O
(	O
struct	O
bfd_hash_entry	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
*	O
)	O
;	O
if	O
(	O
alloc	O
/	O
sizeof	O
(	O
struct	O
bfd_hash_entry	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
*	O
)	O
!=	O
size	long
)	O
{	O
bfd_set_error	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(void)
(	O
bfd_error_no_memory	int
)	O
;	O
return	O
FALSE	O
;	O
}	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
memory	*(void)
=	O
(	O
void	O
*	O
)	O
objalloc_create	O
(	O
)	O
;	O
if	O
(	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
memory	*(void)
==	O
NULL	O
)	O
{	O
bfd_set_error	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(void)
(	O
bfd_error_no_memory	int
)	O
;	O
return	O
FALSE	O
;	O
}	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
=	O
(	O
struct	O
bfd_hash_entry	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
*	O
*	O
)	O
objalloc_alloc	O
(	O
(	O
struct	O
objalloc	O
*	O
)	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
memory	*(void)
,	O
alloc	O
)	O
;	O
if	O
(	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
==	O
NULL	O
)	O
{	O
bfd_hash_table_free	(*(struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)))->(void)
(	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
)	O
;	O
bfd_set_error	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(void)
(	O
bfd_error_no_memory	int
)	O
;	O
return	O
FALSE	O
;	O
}	O
memset	(*(void),int,long)->(*(void))
(	O
(	O
void	O
*	O
)	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
,	O
0	int
,	O
alloc	O
)	O
;	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
size	long
=	O
size	long
;	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
entsize	int
=	O
entsize	int
;	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
count	int
=	O
0	int
;	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
frozen	int
=	O
0	int
;	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
newfunc	*((*(struct(*(struct`),*(char),long)),*(struct(*(*`),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*(char))->(*(struct(*(struct`),*(char),long))))
=	O
newfunc	*((*(struct(*(struct`),*(char),long)),*(struct(*(*`),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*(char))->(*(struct(*(struct`),*(char),long))))
;	O
return	O
TRUE	int
;	O
}	O
bfd_boolean	int
bfd_hash_table_init	(*(struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*((*(struct(*`,*`,long)),*(struct(*`,*`,*`,int,int,int,int)),*(char))->(*(struct(*`,*`,long)))),int)->(int)
(	O
struct	O
bfd_hash_table	struct(*(*(struct(*(struct(*`,*`,long)),*(char),long))),*((*(struct(*(struct`),*(char),long)),*(struct(*(*`),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*(char))->(*(struct(*(struct`),*(char),long)))),*(void),int,int,int,int)
*	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
,	O
struct	O
bfd_hash_entry	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
*	O
(	O
*	O
newfunc	*((*(struct(*(struct`),*(char),long)),*(struct(*(*`),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*(char))->(*(struct(*(struct`),*(char),long))))
)	O
(	O
struct	O
bfd_hash_entry	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
*	O
,	O
struct	O
bfd_hash_table	struct(*(*(struct(*(struct(*`,*`,long)),*(char),long))),*((*(struct(*(struct`),*(char),long)),*(struct(*(*`),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*(char))->(*(struct(*(struct`),*(char),long)))),*(void),int,int,int,int)
*	O
,	O
const	O
char	O
*	O
)	O
,	O
unsigned	O
int	O
entsize	int
)	O
{	O
return	O
bfd_hash_table_init_n	(*(struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*((*(struct(*`,*`,long)),*(struct(*`,*`,*`,int,int,int,int)),*(char))->(*(struct(*`,*`,long)))),int,int)->(int)
(	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
,	O
newfunc	*((*(struct(*(struct`),*(char),long)),*(struct(*(*`),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*(char))->(*(struct(*(struct`),*(char),long))))
,	O
entsize	int
,	O
bfd_default_hash_table_size	O
)	O
;	O
}	O
void	O
bfd_hash_table_free	(*(struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)))->(void)
(	O
struct	O
bfd_hash_table	struct(*(*(struct(*(struct(*`,*`,long)),*(char),long))),*((*(struct(*(struct`),*(char),long)),*(struct(*(*`),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*(char))->(*(struct(*(struct`),*(char),long)))),*(void),int,int,int,int)
*	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
)	O
{	O
objalloc_free	O
(	O
(	O
struct	O
objalloc	O
*	O
)	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
memory	*(void)
)	O
;	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
memory	*(void)
=	O
NULL	O
;	O
}	O
static	O
inline	O
unsigned	O
long	O
bfd_hash_hash	O
(	O
const	O
char	O
*	O
string	*(char)
,	O
unsigned	O
int	O
*	O
lenp	O
)	O
{	O
const	O
unsigned	O
char	O
*	O
s	*(void)
;	O
unsigned	O
long	O
hash	long
;	O
unsigned	O
int	O
len	long
;	O
unsigned	O
int	O
c	O
;	O
BFD_ASSERT	O
(	O
string	*(char)
!=	O
NULL	O
)	O
;	O
hash	long
=	O
0	int
;	O
len	long
=	O
0	int
;	O
s	*(void)
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
string	*(char)
;	O
while	O
(	O
(	O
c	O
=	O
*	O
s	*(void)
++	O
)	O
!=	O
'\0'	O
)	O
{	O
hash	long
+=	O
c	O
+	O
(	O
c	O
<<	O
17	int
)	O
;	O
hash	long
^=	O
hash	long
>>	O
2	int
;	O
}	O
len	long
=	O
(	O
s	*(void)
-	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
string	*(char)
)	O
-	O
1	int
;	O
hash	long
+=	O
len	long
+	O
(	O
len	long
<<	O
17	int
)	O
;	O
hash	long
^=	O
hash	long
>>	O
2	int
;	O
if	O
(	O
lenp	O
!=	O
NULL	O
)	O
*	O
lenp	O
=	O
len	long
;	O
return	O
hash	long
;	O
}	O
struct	O
bfd_hash_entry	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
*	O
bfd_hash_lookup	(*(struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*(char),int,int)->(*(struct(*(struct(*`,*`,long)),*(char),long)))
(	O
struct	O
bfd_hash_table	struct(*(*(struct(*(struct(*`,*`,long)),*(char),long))),*((*(struct(*(struct`),*(char),long)),*(struct(*(*`),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*(char))->(*(struct(*(struct`),*(char),long)))),*(void),int,int,int,int)
*	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
,	O
const	O
char	O
*	O
string	*(char)
,	O
bfd_boolean	int
create	int
,	O
bfd_boolean	int
copy	int
)	O
{	O
unsigned	O
long	O
hash	long
;	O
struct	O
bfd_hash_entry	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
*	O
hashp	O
;	O
unsigned	O
int	O
len	long
;	O
unsigned	O
int	O
_index	O
;	O
hash	long
=	O
bfd_hash_hash	O
(	O
string	*(char)
,	O
&	O
len	long
)	O
;	O
_index	O
=	O
hash	long
%	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
size	long
;	O
for	O
(	O
hashp	O
=	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
[	O
_index	O
]	O
;	O
hashp	O
!=	O
NULL	O
;	O
hashp	O
=	O
hashp	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
{	O
if	O
(	O
hashp	O
->	O
hash	long
==	O
hash	long
&&	O
strcmp	(*(char),*(char))->(int)
(	O
hashp	O
->	O
string	*(char)
,	O
string	*(char)
)	O
==	O
0	int
)	O
return	O
hashp	O
;	O
}	O
if	O
(	O
!	O
create	int
)	O
return	O
NULL	O
;	O
if	O
(	O
copy	int
)	O
{	O
char	O
*	O
new_string	O
;	O
new_string	O
=	O
(	O
char	O
*	O
)	O
objalloc_alloc	O
(	O
(	O
struct	O
objalloc	O
*	O
)	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
memory	*(void)
,	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
new_string	O
)	O
{	O
bfd_set_error	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(void)
(	O
bfd_error_no_memory	int
)	O
;	O
return	O
NULL	O
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
new_string	O
,	O
string	*(char)
,	O
len	long
+	O
1	int
)	O
;	O
string	*(char)
=	O
new_string	O
;	O
}	O
return	O
bfd_hash_insert	(*(struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*(char),long)->(*(struct(*(struct(*`,*`,long)),*(char),long)))
(	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
,	O
string	*(char)
,	O
hash	long
)	O
;	O
}	O
struct	O
bfd_hash_entry	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
*	O
bfd_hash_insert	(*(struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*(char),long)->(*(struct(*(struct(*`,*`,long)),*(char),long)))
(	O
struct	O
bfd_hash_table	struct(*(*(struct(*(struct(*`,*`,long)),*(char),long))),*((*(struct(*(struct`),*(char),long)),*(struct(*(*`),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*(char))->(*(struct(*(struct`),*(char),long)))),*(void),int,int,int,int)
*	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
,	O
const	O
char	O
*	O
string	*(char)
,	O
unsigned	O
long	O
hash	long
)	O
{	O
struct	O
bfd_hash_entry	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
*	O
hashp	O
;	O
unsigned	O
int	O
_index	O
;	O
hashp	O
=	O
(	O
*	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
newfunc	*((*(struct(*(struct`),*(char),long)),*(struct(*(*`),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*(char))->(*(struct(*(struct`),*(char),long))))
)	O
(	O
NULL	O
,	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
,	O
string	*(char)
)	O
;	O
if	O
(	O
hashp	O
==	O
NULL	O
)	O
return	O
NULL	O
;	O
hashp	O
->	O
string	*(char)
=	O
string	*(char)
;	O
hashp	O
->	O
hash	long
=	O
hash	long
;	O
_index	O
=	O
hash	long
%	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
size	long
;	O
hashp	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
=	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
[	O
_index	O
]	O
;	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
[	O
_index	O
]	O
=	O
hashp	O
;	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
count	int
++	O
;	O
if	O
(	O
!	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
frozen	int
&&	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
count	int
>	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
size	long
*	O
3	int
/	O
4	int
)	O
{	O
unsigned	O
long	O
newsize	O
=	O
higher_prime_number	O
(	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
size	long
)	O
;	O
struct	O
bfd_hash_entry	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
*	O
*	O
newtable	O
;	O
unsigned	O
int	O
hi	O
;	O
unsigned	O
long	O
alloc	O
=	O
newsize	O
*	O
sizeof	O
(	O
struct	O
bfd_hash_entry	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
*	O
)	O
;	O
if	O
(	O
newsize	O
==	O
0	int
||	O
alloc	O
/	O
sizeof	O
(	O
struct	O
bfd_hash_entry	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
*	O
)	O
!=	O
newsize	O
)	O
{	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
frozen	int
=	O
1	int
;	O
return	O
hashp	O
;	O
}	O
newtable	O
=	O
(	O
(	O
struct	O
bfd_hash_entry	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
*	O
*	O
)	O
objalloc_alloc	O
(	O
(	O
struct	O
objalloc	O
*	O
)	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
memory	*(void)
,	O
alloc	O
)	O
)	O
;	O
if	O
(	O
newtable	O
==	O
NULL	O
)	O
{	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
frozen	int
=	O
1	int
;	O
return	O
hashp	O
;	O
}	O
memset	(*(void),int,long)->(*(void))
(	O
newtable	O
,	O
0	int
,	O
alloc	O
)	O
;	O
for	O
(	O
hi	O
=	O
0	int
;	O
hi	O
<	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
size	long
;	O
hi	O
++	O
)	O
while	O
(	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
[	O
hi	O
]	O
)	O
{	O
struct	O
bfd_hash_entry	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
*	O
chain	O
=	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
[	O
hi	O
]	O
;	O
struct	O
bfd_hash_entry	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
*	O
chain_end	O
=	O
chain	O
;	O
while	O
(	O
chain_end	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
&&	O
chain_end	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
->	O
hash	long
==	O
chain	O
->	O
hash	long
)	O
chain_end	O
=	O
chain_end	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
[	O
hi	O
]	O
=	O
chain_end	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
_index	O
=	O
chain	O
->	O
hash	long
%	O
newsize	O
;	O
chain_end	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
=	O
newtable	O
[	O
_index	O
]	O
;	O
newtable	O
[	O
_index	O
]	O
=	O
chain	O
;	O
}	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
=	O
newtable	O
;	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
size	long
=	O
newsize	O
;	O
}	O
return	O
hashp	O
;	O
}	O
void	O
bfd_hash_rename	(*(struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*(char),*(struct(*(struct(*`,*`,long)),*(char),long)))->(void)
(	O
struct	O
bfd_hash_table	struct(*(*(struct(*(struct(*`,*`,long)),*(char),long))),*((*(struct(*(struct`),*(char),long)),*(struct(*(*`),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*(char))->(*(struct(*(struct`),*(char),long)))),*(void),int,int,int,int)
*	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
,	O
const	O
char	O
*	O
string	*(char)
,	O
struct	O
bfd_hash_entry	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
*	O
ent	O
)	O
{	O
unsigned	O
int	O
_index	O
;	O
struct	O
bfd_hash_entry	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
*	O
*	O
pph	O
;	O
_index	O
=	O
ent	O
->	O
hash	long
%	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
size	long
;	O
for	O
(	O
pph	O
=	O
&	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
[	O
_index	O
]	O
;	O
*	O
pph	O
!=	O
NULL	O
;	O
pph	O
=	O
&	O
(	O
*	O
pph	O
)	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
if	O
(	O
*	O
pph	O
==	O
ent	O
)	O
break	O
;	O
if	O
(	O
*	O
pph	O
==	O
NULL	O
)	O
abort	()->(void)
(	O
)	O
;	O
*	O
pph	O
=	O
ent	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
ent	O
->	O
string	*(char)
=	O
string	*(char)
;	O
ent	O
->	O
hash	long
=	O
bfd_hash_hash	O
(	O
string	*(char)
,	O
NULL	O
)	O
;	O
_index	O
=	O
ent	O
->	O
hash	long
%	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
size	long
;	O
ent	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
=	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
[	O
_index	O
]	O
;	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
[	O
_index	O
]	O
=	O
ent	O
;	O
}	O
void	O
bfd_hash_replace	(*(struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*(struct(*(struct(*`,*`,long)),*(char),long)),*(struct(*(struct(*`,*`,long)),*(char),long)))->(void)
(	O
struct	O
bfd_hash_table	struct(*(*(struct(*(struct(*`,*`,long)),*(char),long))),*((*(struct(*(struct`),*(char),long)),*(struct(*(*`),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*(char))->(*(struct(*(struct`),*(char),long)))),*(void),int,int,int,int)
*	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
,	O
struct	O
bfd_hash_entry	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
*	O
old	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
,	O
struct	O
bfd_hash_entry	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
*	O
nw	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
{	O
unsigned	O
int	O
_index	O
;	O
struct	O
bfd_hash_entry	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
*	O
*	O
pph	O
;	O
_index	O
=	O
old	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
->	O
hash	long
%	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
size	long
;	O
for	O
(	O
pph	O
=	O
&	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
[	O
_index	O
]	O
;	O
(	O
*	O
pph	O
)	O
!=	O
NULL	O
;	O
pph	O
=	O
&	O
(	O
*	O
pph	O
)	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
{	O
if	O
(	O
*	O
pph	O
==	O
old	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
{	O
*	O
pph	O
=	O
nw	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
return	O
;	O
}	O
}	O
abort	()->(void)
(	O
)	O
;	O
}	O
void	O
*	O
bfd_hash_allocate	(*(struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),int)->(*(void))
(	O
struct	O
bfd_hash_table	struct(*(*(struct(*(struct(*`,*`,long)),*(char),long))),*((*(struct(*(struct`),*(char),long)),*(struct(*(*`),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*(char))->(*(struct(*(struct`),*(char),long)))),*(void),int,int,int,int)
*	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
,	O
unsigned	O
int	O
size	long
)	O
{	O
void	O
*	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
;	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
=	O
objalloc_alloc	O
(	O
(	O
struct	O
objalloc	O
*	O
)	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
memory	*(void)
,	O
size	long
)	O
;	O
if	O
(	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
==	O
NULL	O
&&	O
size	long
!=	O
0	int
)	O
bfd_set_error	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(void)
(	O
bfd_error_no_memory	int
)	O
;	O
return	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
;	O
}	O
struct	O
bfd_hash_entry	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
*	O
bfd_hash_newfunc	(*(struct(*(struct(*`,*`,long)),*(char),long)),*(struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*(char))->(*(struct(*(struct(*`,*`,long)),*(char),long)))
(	O
struct	O
bfd_hash_entry	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
*	O
entry	O
,	O
struct	O
bfd_hash_table	struct(*(*(struct(*(struct(*`,*`,long)),*(char),long))),*((*(struct(*(struct`),*(char),long)),*(struct(*(*`),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*(char))->(*(struct(*(struct`),*(char),long)))),*(void),int,int,int,int)
*	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
,	O
const	O
char	O
*	O
string	*(char)
ATTRIBUTE_UNUSED	O
)	O
{	O
if	O
(	O
entry	O
==	O
NULL	O
)	O
entry	O
=	O
(	O
struct	O
bfd_hash_entry	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
*	O
)	O
bfd_hash_allocate	(*(struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),int)->(*(void))
(	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
,	O
sizeof	O
(	O
*	O
entry	O
)	O
)	O
;	O
return	O
entry	O
;	O
}	O
void	O
bfd_hash_traverse	(*(struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*((*(struct(*`,*`,long)),*(void))->(int)),*(void))->(void)
(	O
struct	O
bfd_hash_table	struct(*(*(struct(*(struct(*`,*`,long)),*(char),long))),*((*(struct(*(struct`),*(char),long)),*(struct(*(*`),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*(char))->(*(struct(*(struct`),*(char),long)))),*(void),int,int,int,int)
*	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
,	O
bfd_boolean	int
(	O
*	O
func	*((*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(void))->(int))
)	O
(	O
struct	O
bfd_hash_entry	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
info	*(void)
)	O
{	O
unsigned	O
int	O
i	*(struct)
;	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
frozen	int
=	O
1	int
;	O
for	O
(	O
i	*(struct)
=	O
0	int
;	O
i	*(struct)
<	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
size	long
;	O
i	*(struct)
++	O
)	O
{	O
struct	O
bfd_hash_entry	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
*	O
p	*(void)
;	O
for	O
(	O
p	*(void)
=	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
[	O
i	*(struct)
]	O
;	O
p	*(void)
!=	O
NULL	O
;	O
p	*(void)
=	O
p	*(void)
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
if	O
(	O
!	O
(	O
*	O
func	*((*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(void))->(int))
)	O
(	O
p	*(void)
,	O
info	*(void)
)	O
)	O
goto	O
out	O
;	O
}	O
out	O
:	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
frozen	int
=	O
0	int
;	O
}	O
unsigned	O
long	O
bfd_hash_set_default_size	(long)->(long)
(	O
unsigned	O
long	O
hash_size	O
)	O
{	O
static	O
const	O
unsigned	O
long	O
hash_size_primes	O
[	O
]	O
=	O
{	O
31	int
,	O
61	int
,	O
127	int
,	O
251	int
,	O
509	int
,	O
1021	int
,	O
2039	int
,	O
4091	int
,	O
8191	int
,	O
16381	int
,	O
32749	int
,	O
65537	int
}	O
;	O
unsigned	O
int	O
_index	O
;	O
for	O
(	O
_index	O
=	O
0	int
;	O
_index	O
<	O
ARRAY_SIZE	O
(	O
hash_size_primes	O
)	O
-	O
1	int
;	O
++	O
_index	O
)	O
if	O
(	O
hash_size	O
<=	O
hash_size_primes	O
[	O
_index	O
]	O
)	O
break	O
;	O
bfd_default_hash_table_size	O
=	O
hash_size_primes	O
[	O
_index	O
]	O
;	O
return	O
bfd_default_hash_table_size	O
;	O
}	O
struct	O
strtab_hash_entry	O
{	O
struct	O
bfd_hash_entry	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
root	O
;	O
bfd_size_type	long
index	(*(char),int)->(*(char))
;	O
struct	O
strtab_hash_entry	O
*	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
}	O
;	O
struct	O
bfd_strtab_hash	O
{	O
struct	O
bfd_hash_table	struct(*(*(struct(*(struct(*`,*`,long)),*(char),long))),*((*(struct(*(struct`),*(char),long)),*(struct(*(*`),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*(char))->(*(struct(*(struct`),*(char),long)))),*(void),int,int,int,int)
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
;	O
bfd_size_type	long
size	long
;	O
struct	O
strtab_hash_entry	O
*	O
first	O
;	O
struct	O
strtab_hash_entry	O
*	O
last	O
;	O
bfd_boolean	int
xcoff	O
;	O
}	O
;	O
static	O
struct	O
bfd_hash_entry	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
*	O
strtab_hash_newfunc	O
(	O
struct	O
bfd_hash_entry	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
*	O
entry	O
,	O
struct	O
bfd_hash_table	struct(*(*(struct(*(struct(*`,*`,long)),*(char),long))),*((*(struct(*(struct`),*(char),long)),*(struct(*(*`),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*(char))->(*(struct(*(struct`),*(char),long)))),*(void),int,int,int,int)
*	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
,	O
const	O
char	O
*	O
string	*(char)
)	O
{	O
struct	O
strtab_hash_entry	O
*	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
=	O
(	O
struct	O
strtab_hash_entry	O
*	O
)	O
entry	O
;	O
if	O
(	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
==	O
NULL	O
)	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
=	O
(	O
struct	O
strtab_hash_entry	O
*	O
)	O
bfd_hash_allocate	(*(struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),int)->(*(void))
(	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
,	O
sizeof	O
(	O
*	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
)	O
)	O
;	O
if	O
(	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
==	O
NULL	O
)	O
return	O
NULL	O
;	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
=	O
(	O
struct	O
strtab_hash_entry	O
*	O
)	O
bfd_hash_newfunc	(*(struct(*(struct(*`,*`,long)),*(char),long)),*(struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*(char))->(*(struct(*(struct(*`,*`,long)),*(char),long)))
(	O
(	O
struct	O
bfd_hash_entry	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
*	O
)	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
,	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
,	O
string	*(char)
)	O
;	O
if	O
(	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
)	O
{	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
->	O
index	(*(char),int)->(*(char))
=	O
(	O
bfd_size_type	long
)	O
-	O
1	int
;	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
=	O
NULL	O
;	O
}	O
return	O
(	O
struct	O
bfd_hash_entry	struct(*(struct(*(struct(*(struct`),*(char),long)),*(char),long)),*(char),long)
*	O
)	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
;	O
}	O
struct	O
bfd_strtab_hash	O
*	O
_bfd_stringtab_init	O
(	O
void	O
)	O
{	O
struct	O
bfd_strtab_hash	O
*	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
;	O
bfd_size_type	long
amt	O
=	O
sizeof	O
(	O
*	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
)	O
;	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
=	O
(	O
struct	O
bfd_strtab_hash	O
*	O
)	O
bfd_malloc	O
(	O
amt	O
)	O
;	O
if	O
(	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
bfd_hash_table_init	(*(struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*((*(struct(*`,*`,long)),*(struct(*`,*`,*`,int,int,int,int)),*(char))->(*(struct(*`,*`,long)))),int)->(int)
(	O
&	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
,	O
strtab_hash_newfunc	O
,	O
sizeof	O
(	O
struct	O
strtab_hash_entry	O
)	O
)	O
)	O
{	O
free	(*(void))->(void)
(	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
)	O
;	O
return	O
NULL	O
;	O
}	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
size	long
=	O
0	int
;	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
first	O
=	O
NULL	O
;	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
last	O
=	O
NULL	O
;	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
xcoff	O
=	O
FALSE	O
;	O
return	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
;	O
}	O
struct	O
bfd_strtab_hash	O
*	O
_bfd_xcoff_stringtab_init	O
(	O
void	O
)	O
{	O
struct	O
bfd_strtab_hash	O
*	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
;	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
=	O
_bfd_stringtab_init	O
(	O
)	O
;	O
if	O
(	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
!=	O
NULL	O
)	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
->	O
xcoff	O
=	O
TRUE	int
;	O
return	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
;	O
}	O
void	O
_bfd_stringtab_free	O
(	O
struct	O
bfd_strtab_hash	O
*	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
)	O
{	O
bfd_hash_table_free	(*(struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)))->(void)
(	O
&	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
->	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
)	O
;	O
free	(*(void))->(void)
(	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
)	O
;	O
}	O
bfd_size_type	long
_bfd_stringtab_add	O
(	O
struct	O
bfd_strtab_hash	O
*	O
tab	O
,	O
const	O
char	O
*	O
str	O
,	O
bfd_boolean	int
hash	long
,	O
bfd_boolean	int
copy	int
)	O
{	O
struct	O
strtab_hash_entry	O
*	O
entry	O
;	O
if	O
(	O
hash	long
)	O
{	O
entry	O
=	O
strtab_hash_lookup	O
(	O
tab	O
,	O
str	O
,	O
TRUE	int
,	O
copy	int
)	O
;	O
if	O
(	O
entry	O
==	O
NULL	O
)	O
return	O
(	O
bfd_size_type	long
)	O
-	O
1	int
;	O
}	O
else	O
{	O
entry	O
=	O
(	O
struct	O
strtab_hash_entry	O
*	O
)	O
bfd_hash_allocate	(*(struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),int)->(*(void))
(	O
&	O
tab	O
->	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
,	O
sizeof	O
(	O
*	O
entry	O
)	O
)	O
;	O
if	O
(	O
entry	O
==	O
NULL	O
)	O
return	O
(	O
bfd_size_type	long
)	O
-	O
1	int
;	O
if	O
(	O
!	O
copy	int
)	O
entry	O
->	O
root	O
.	O
string	*(char)
=	O
str	O
;	O
else	O
{	O
size_t	long
len	long
=	O
strlen	(*(char))->(long)
(	O
str	O
)	O
+	O
1	int
;	O
char	O
*	O
n	long
;	O
n	long
=	O
(	O
char	O
*	O
)	O
bfd_hash_allocate	(*(struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),int)->(*(void))
(	O
&	O
tab	O
->	O
table	*(*(struct(*(struct(*`,*`,long)),*(char),long)))
,	O
len	long
)	O
;	O
if	O
(	O
n	long
==	O
NULL	O
)	O
return	O
(	O
bfd_size_type	long
)	O
-	O
1	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
n	long
,	O
str	O
,	O
len	long
)	O
;	O
entry	O
->	O
root	O
.	O
string	*(char)
=	O
n	long
;	O
}	O
entry	O
->	O
index	(*(char),int)->(*(char))
=	O
(	O
bfd_size_type	long
)	O
-	O
1	int
;	O
entry	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
=	O
NULL	O
;	O
}	O
if	O
(	O
entry	O
->	O
index	(*(char),int)->(*(char))
==	O
(	O
bfd_size_type	long
)	O
-	O
1	int
)	O
{	O
entry	O
->	O
index	(*(char),int)->(*(char))
=	O
tab	O
->	O
size	long
;	O
tab	O
->	O
size	long
+=	O
strlen	(*(char))->(long)
(	O
str	O
)	O
+	O
1	int
;	O
if	O
(	O
tab	O
->	O
xcoff	O
)	O
{	O
entry	O
->	O
index	(*(char),int)->(*(char))
+=	O
2	int
;	O
tab	O
->	O
size	long
+=	O
2	int
;	O
}	O
if	O
(	O
tab	O
->	O
first	O
==	O
NULL	O
)	O
tab	O
->	O
first	O
=	O
entry	O
;	O
else	O
tab	O
->	O
last	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
=	O
entry	O
;	O
tab	O
->	O
last	O
=	O
entry	O
;	O
}	O
return	O
entry	O
->	O
index	(*(char),int)->(*(char))
;	O
}	O
bfd_size_type	long
_bfd_stringtab_size	O
(	O
struct	O
bfd_strtab_hash	O
*	O
tab	O
)	O
{	O
return	O
tab	O
->	O
size	long
;	O
}	O
bfd_boolean	int
_bfd_stringtab_emit	O
(	O
bfd	struct
*	O
abfd	*(struct)
,	O
struct	O
bfd_strtab_hash	O
*	O
tab	O
)	O
{	O
bfd_boolean	int
xcoff	O
;	O
struct	O
strtab_hash_entry	O
*	O
entry	O
;	O
xcoff	O
=	O
tab	O
->	O
xcoff	O
;	O
for	O
(	O
entry	O
=	O
tab	O
->	O
first	O
;	O
entry	O
!=	O
NULL	O
;	O
entry	O
=	O
entry	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
{	O
const	O
char	O
*	O
str	O
;	O
size_t	long
len	long
;	O
str	O
=	O
entry	O
->	O
root	O
.	O
string	*(char)
;	O
len	long
=	O
strlen	(*(char))->(long)
(	O
str	O
)	O
+	O
1	int
;	O
if	O
(	O
xcoff	O
)	O
{	O
bfd_byte	char
buf	*(void)
[	O
2	int
]	O
;	O
bfd_put_16	O
(	O
abfd	*(struct)
,	O
(	O
bfd_vma	long
)	O
len	long
,	O
buf	*(void)
)	O
;	O
if	O
(	O
bfd_bwrite	(*(void),long,*(struct))->(long)
(	O
(	O
void	O
*	O
)	O
buf	*(void)
,	O
(	O
bfd_size_type	long
)	O
2	int
,	O
abfd	*(struct)
)	O
!=	O
2	int
)	O
return	O
FALSE	O
;	O
}	O
if	O
(	O
bfd_bwrite	(*(void),long,*(struct))->(long)
(	O
(	O
void	O
*	O
)	O
str	O
,	O
(	O
bfd_size_type	long
)	O
len	long
,	O
abfd	*(struct)
)	O
!=	O
len	long
)	O
return	O
FALSE	O
;	O
}	O
return	O
TRUE	int
;	O
}	O
