local	O
int	O
near	O
extra_lbits	array(int)
[	O
LENGTH_CODES	int
]	O
=	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
4	int
,	O
4	int
,	O
4	int
,	O
4	int
,	O
5	int
,	O
5	int
,	O
5	int
,	O
5	int
,	O
0	int
}	O
;	O
local	O
int	O
near	O
extra_dbits	array(int)
[	O
D_CODES	int
]	O
=	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
2	int
,	O
2	int
,	O
3	int
,	O
3	int
,	O
4	int
,	O
4	int
,	O
5	int
,	O
5	int
,	O
6	int
,	O
6	int
,	O
7	int
,	O
7	int
,	O
8	int
,	O
8	int
,	O
9	int
,	O
9	int
,	O
10	int
,	O
10	int
,	O
11	int
,	O
11	int
,	O
12	int
,	O
12	int
,	O
13	int
,	O
13	int
}	O
;	O
local	O
int	O
near	O
extra_blbits	array(int)
[	O
BL_CODES	int
]	O
=	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
2	int
,	O
3	int
,	O
7	int
}	O
;	O
typedef	O
struct	O
ct_data	struct(union(short,short),union(short,short))
{	O
union	O
{	O
ush	short
freq	long
;	O
ush	short
code	short
;	O
}	O
fc	union(short,short)
;	O
union	O
{	O
ush	short
dad	short
;	O
ush	short
len	int
;	O
}	O
dl	union(short,short)
;	O
}	O
ct_data	struct(union(short,short),union(short,short))
;	O
local	O
ct_data	struct(union(short,short),union(short,short))
near	O
dyn_ltree	array(struct(union(short,short),union(short,short)))
[	O
HEAP_SIZE	O
]	O
;	O
local	O
ct_data	struct(union(short,short),union(short,short))
near	O
dyn_dtree	array(struct(union(short,short),union(short,short)))
[	O
2	int
*	O
D_CODES	int
+	O
1	int
]	O
;	O
local	O
ct_data	struct(union(short,short),union(short,short))
near	O
static_ltree	array(struct(union(short,short),union(short,short)))
[	O
L_CODES	O
+	O
2	int
]	O
;	O
local	O
ct_data	struct(union(short,short),union(short,short))
near	O
static_dtree	array(struct(union(short,short),union(short,short)))
[	O
D_CODES	int
]	O
;	O
local	O
ct_data	struct(union(short,short),union(short,short))
near	O
bl_tree	array(struct(union(short,short),union(short,short)))
[	O
2	int
*	O
BL_CODES	int
+	O
1	int
]	O
;	O
typedef	O
struct	O
tree_desc	struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int)
{	O
ct_data	struct(union(short,short),union(short,short))
near	O
*	O
dyn_tree	*(struct(union(short,short),union(short,short)))
;	O
ct_data	struct(union(short,short),union(short,short))
near	O
*	O
static_tree	*(struct(union(short,short),union(short,short)))
;	O
int	O
near	O
*	O
extra_bits	*(int)
;	O
int	O
extra_base	int
;	O
int	O
elems	int
;	O
int	O
max_length	int
;	O
int	O
max_code	int
;	O
}	O
tree_desc	struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int)
;	O
local	O
tree_desc	struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int)
near	O
l_desc	struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int)
=	O
{	O
dyn_ltree	array(struct(union(short,short),union(short,short)))
,	O
static_ltree	array(struct(union(short,short),union(short,short)))
,	O
extra_lbits	array(int)
,	O
LITERALS	int
+	O
1	int
,	O
L_CODES	O
,	O
MAX_BITS	int
,	O
0	int
}	O
;	O
local	O
tree_desc	struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int)
near	O
d_desc	struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int)
=	O
{	O
dyn_dtree	array(struct(union(short,short),union(short,short)))
,	O
static_dtree	array(struct(union(short,short),union(short,short)))
,	O
extra_dbits	array(int)
,	O
0	int
,	O
D_CODES	int
,	O
MAX_BITS	int
,	O
0	int
}	O
;	O
local	O
tree_desc	struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int)
near	O
bl_desc	struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int)
=	O
{	O
bl_tree	array(struct(union(short,short),union(short,short)))
,	O
(	O
ct_data	struct(union(short,short),union(short,short))
near	O
*	O
)	O
0	int
,	O
extra_blbits	array(int)
,	O
0	int
,	O
BL_CODES	int
,	O
MAX_BL_BITS	int
,	O
0	int
}	O
;	O
local	O
ush	short
near	O
bl_count	array(short)
[	O
MAX_BITS	int
+	O
1	int
]	O
;	O
local	O
uch	char
near	O
bl_order	array(char)
[	O
BL_CODES	int
]	O
=	O
{	O
16	int
,	O
17	int
,	O
18	int
,	O
0	int
,	O
8	int
,	O
7	int
,	O
9	int
,	O
6	int
,	O
10	int
,	O
5	int
,	O
11	int
,	O
4	int
,	O
12	int
,	O
3	int
,	O
13	int
,	O
2	int
,	O
14	int
,	O
1	int
,	O
15	int
}	O
;	O
local	O
int	O
near	O
heap	array(int)
[	O
2	int
*	O
L_CODES	O
+	O
1	int
]	O
;	O
local	O
int	O
heap_len	int
;	O
local	O
int	O
heap_max	int
;	O
local	O
uch	char
near	O
depth	array(char)
[	O
2	int
*	O
L_CODES	O
+	O
1	int
]	O
;	O
local	O
uch	char
length_code	array(char)
[	O
MAX_MATCH	int
-	O
MIN_MATCH	int
+	O
1	int
]	O
;	O
local	O
uch	char
dist_code	array(char)
[	O
512	int
]	O
;	O
local	O
int	O
near	O
base_length	array(int)
[	O
LENGTH_CODES	int
]	O
;	O
local	O
int	O
near	O
base_dist	array(int)
[	O
D_CODES	int
]	O
;	O
local	O
uch	char
near	O
flag_buf	array(char)
[	O
(	O
LIT_BUFSIZE	int
/	O
8	int
)	O
]	O
;	O
local	O
unsigned	O
last_lit	int
;	O
local	O
unsigned	O
last_dist	int
;	O
local	O
unsigned	O
last_flags	int
;	O
local	O
uch	char
flags	*(short)
;	O
local	O
uch	char
flag_bit	char
;	O
local	O
ulg	long
opt_len	long
;	O
local	O
ulg	long
static_len	long
;	O
local	O
off_t	long
compressed_len	long
;	O
local	O
off_t	long
input_len	long
;	O
static	O
ush	short
*	O
file_type	*(short)
;	O
static	O
int	O
*	O
file_method	*(int)
;	O
extern	O
long	O
block_start	long
;	O
extern	O
unsigned	O
near	O
strstart	int
;	O
local	O
void	O
init_block	()->(void)
(	O
void	O
)	O
;	O
local	O
void	O
pqdownheap	(*(struct(union(short,short),union(short,short))),int)->(void)
(	O
ct_data	struct(union(short,short),union(short,short))
near	O
*	O
tree	*(struct(union(short,short),union(short,short)))
,	O
int	O
k	int
)	O
;	O
local	O
void	O
gen_bitlen	(*(struct(*(struct(union`,union`)),*(struct(union`,union`)),*(int),int,int,int,int)))->(void)
(	O
tree_desc	struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int)
near	O
*	O
desc	*(struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int))
)	O
;	O
local	O
void	O
gen_codes	(*(struct(union(short,short),union(short,short))),int)->(void)
(	O
ct_data	struct(union(short,short),union(short,short))
near	O
*	O
tree	*(struct(union(short,short),union(short,short)))
,	O
int	O
max_code	int
)	O
;	O
local	O
void	O
build_tree	(*(struct(*(struct(union`,union`)),*(struct(union`,union`)),*(int),int,int,int,int)))->(void)
(	O
tree_desc	struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int)
near	O
*	O
desc	*(struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int))
)	O
;	O
local	O
void	O
scan_tree	(*(struct(union(short,short),union(short,short))),int)->(void)
(	O
ct_data	struct(union(short,short),union(short,short))
near	O
*	O
tree	*(struct(union(short,short),union(short,short)))
,	O
int	O
max_code	int
)	O
;	O
local	O
void	O
send_tree	(*(struct(union(short,short),union(short,short))),int)->(void)
(	O
ct_data	struct(union(short,short),union(short,short))
near	O
*	O
tree	*(struct(union(short,short),union(short,short)))
,	O
int	O
max_code	int
)	O
;	O
local	O
int	O
build_bl_tree	()->(int)
(	O
void	O
)	O
;	O
local	O
void	O
send_all_trees	(int,int,int)->(void)
(	O
int	O
lcodes	int
,	O
int	O
dcodes	int
,	O
int	O
blcodes	int
)	O
;	O
local	O
void	O
compress_block	(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))))->(void)
(	O
ct_data	struct(union(short,short),union(short,short))
near	O
*	O
ltree	*(struct(union(short,short),union(short,short)))
,	O
ct_data	struct(union(short,short),union(short,short))
near	O
*	O
dtree	*(struct(union(short,short),union(short,short)))
)	O
;	O
local	O
void	O
set_file_type	()->(void)
(	O
void	O
)	O
;	O
void	O
ct_init	(*(short),*(int))->(void)
(	O
attr	*(short)
,	O
methodp	*(int)
)	O
ush	short
*	O
attr	*(short)
;	O
int	O
*	O
methodp	*(int)
;	O
{	O
int	O
n	int
;	O
int	O
bits	int
;	O
int	O
length	int
;	O
int	O
code	short
;	O
int	O
dist	int
;	O
file_type	*(short)
=	O
attr	*(short)
;	O
file_method	*(int)
=	O
methodp	*(int)
;	O
compressed_len	long
=	O
input_len	long
=	O
0L	int
;	O
if	O
(	O
static_dtree	array(struct(union(short,short),union(short,short)))
[	O
0	int
]	O
.	O
Len	O
!=	O
0	int
)	O
return	O
;	O
length	int
=	O
0	int
;	O
for	O
(	O
code	short
=	O
0	int
;	O
code	short
<	O
LENGTH_CODES	int
-	O
1	int
;	O
code	short
++	O
)	O
{	O
base_length	array(int)
[	O
code	short
]	O
=	O
length	int
;	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
(	O
1	int
<<	O
extra_lbits	array(int)
[	O
code	short
]	O
)	O
;	O
n	int
++	O
)	O
{	O
length_code	array(char)
[	O
length	int
++	O
]	O
=	O
(	O
uch	char
)	O
code	short
;	O
}	O
}	O
Assert	O
(	O
length	int
==	O
256	int
,	O
"ct_init: length != 256"	*(char)
)	O
;	O
length_code	array(char)
[	O
length	int
-	O
1	int
]	O
=	O
(	O
uch	char
)	O
code	short
;	O
dist	int
=	O
0	int
;	O
for	O
(	O
code	short
=	O
0	int
;	O
code	short
<	O
16	int
;	O
code	short
++	O
)	O
{	O
base_dist	array(int)
[	O
code	short
]	O
=	O
dist	int
;	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
(	O
1	int
<<	O
extra_dbits	array(int)
[	O
code	short
]	O
)	O
;	O
n	int
++	O
)	O
{	O
dist_code	array(char)
[	O
dist	int
++	O
]	O
=	O
(	O
uch	char
)	O
code	short
;	O
}	O
}	O
Assert	O
(	O
dist	int
==	O
256	int
,	O
"ct_init: dist != 256"	*(char)
)	O
;	O
dist	int
>>=	O
7	int
;	O
for	O
(	O
;	O
code	short
<	O
D_CODES	int
;	O
code	short
++	O
)	O
{	O
base_dist	array(int)
[	O
code	short
]	O
=	O
dist	int
<<	O
7	int
;	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
(	O
1	int
<<	O
(	O
extra_dbits	array(int)
[	O
code	short
]	O
-	O
7	int
)	O
)	O
;	O
n	int
++	O
)	O
{	O
dist_code	array(char)
[	O
256	int
+	O
dist	int
++	O
]	O
=	O
(	O
uch	char
)	O
code	short
;	O
}	O
}	O
Assert	O
(	O
dist	int
==	O
256	int
,	O
"ct_init: 256+dist != 512"	*(char)
)	O
;	O
for	O
(	O
bits	int
=	O
0	int
;	O
bits	int
<=	O
MAX_BITS	int
;	O
bits	int
++	O
)	O
bl_count	array(short)
[	O
bits	int
]	O
=	O
0	int
;	O
n	int
=	O
0	int
;	O
while	O
(	O
n	int
<=	O
143	int
)	O
static_ltree	array(struct(union(short,short),union(short,short)))
[	O
n	int
++	O
]	O
.	O
Len	O
=	O
8	int
,	O
bl_count	array(short)
[	O
8	int
]	O
++	O
;	O
while	O
(	O
n	int
<=	O
255	int
)	O
static_ltree	array(struct(union(short,short),union(short,short)))
[	O
n	int
++	O
]	O
.	O
Len	O
=	O
9	int
,	O
bl_count	array(short)
[	O
9	int
]	O
++	O
;	O
while	O
(	O
n	int
<=	O
279	int
)	O
static_ltree	array(struct(union(short,short),union(short,short)))
[	O
n	int
++	O
]	O
.	O
Len	O
=	O
7	int
,	O
bl_count	array(short)
[	O
7	int
]	O
++	O
;	O
while	O
(	O
n	int
<=	O
287	int
)	O
static_ltree	array(struct(union(short,short),union(short,short)))
[	O
n	int
++	O
]	O
.	O
Len	O
=	O
8	int
,	O
bl_count	array(short)
[	O
8	int
]	O
++	O
;	O
gen_codes	(*(struct(union(short,short),union(short,short))),int)->(void)
(	O
(	O
ct_data	struct(union(short,short),union(short,short))
near	O
*	O
)	O
static_ltree	array(struct(union(short,short),union(short,short)))
,	O
L_CODES	O
+	O
1	int
)	O
;	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
D_CODES	int
;	O
n	int
++	O
)	O
{	O
static_dtree	array(struct(union(short,short),union(short,short)))
[	O
n	int
]	O
.	O
Len	O
=	O
5	int
;	O
static_dtree	array(struct(union(short,short),union(short,short)))
[	O
n	int
]	O
.	O
Code	O
=	O
bi_reverse	(int,int)->(int)
(	O
n	int
,	O
5	int
)	O
;	O
}	O
init_block	()->(void)
(	O
)	O
;	O
}	O
local	O
void	O
init_block	()->(void)
(	O
)	O
{	O
int	O
n	int
;	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
L_CODES	O
;	O
n	int
++	O
)	O
dyn_ltree	array(struct(union(short,short),union(short,short)))
[	O
n	int
]	O
.	O
Freq	O
=	O
0	int
;	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
D_CODES	int
;	O
n	int
++	O
)	O
dyn_dtree	array(struct(union(short,short),union(short,short)))
[	O
n	int
]	O
.	O
Freq	O
=	O
0	int
;	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
BL_CODES	int
;	O
n	int
++	O
)	O
bl_tree	array(struct(union(short,short),union(short,short)))
[	O
n	int
]	O
.	O
Freq	O
=	O
0	int
;	O
dyn_ltree	array(struct(union(short,short),union(short,short)))
[	O
END_BLOCK	int
]	O
.	O
Freq	O
=	O
1	int
;	O
opt_len	long
=	O
static_len	long
=	O
0L	int
;	O
last_lit	int
=	O
last_dist	int
=	O
last_flags	int
=	O
0	int
;	O
flags	*(short)
=	O
0	int
;	O
flag_bit	char
=	O
1	int
;	O
}	O
local	O
void	O
pqdownheap	(*(struct(union(short,short),union(short,short))),int)->(void)
(	O
tree	*(struct(union(short,short),union(short,short)))
,	O
k	int
)	O
ct_data	struct(union(short,short),union(short,short))
near	O
*	O
tree	*(struct(union(short,short),union(short,short)))
;	O
int	O
k	int
;	O
{	O
int	O
v	int
=	O
heap	array(int)
[	O
k	int
]	O
;	O
int	O
j	int
=	O
k	int
<<	O
1	int
;	O
while	O
(	O
j	int
<=	O
heap_len	int
)	O
{	O
if	O
(	O
j	int
<	O
heap_len	int
&&	O
smaller	O
(	O
tree	*(struct(union(short,short),union(short,short)))
,	O
heap	array(int)
[	O
j	int
+	O
1	int
]	O
,	O
heap	array(int)
[	O
j	int
]	O
)	O
)	O
j	int
++	O
;	O
if	O
(	O
smaller	O
(	O
tree	*(struct(union(short,short),union(short,short)))
,	O
v	int
,	O
heap	array(int)
[	O
j	int
]	O
)	O
)	O
break	O
;	O
heap	array(int)
[	O
k	int
]	O
=	O
heap	array(int)
[	O
j	int
]	O
;	O
k	int
=	O
j	int
;	O
j	int
<<=	O
1	int
;	O
}	O
heap	array(int)
[	O
k	int
]	O
=	O
v	int
;	O
}	O
local	O
void	O
gen_bitlen	(*(struct(*(struct(union`,union`)),*(struct(union`,union`)),*(int),int,int,int,int)))->(void)
(	O
desc	*(struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int))
)	O
tree_desc	struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int)
near	O
*	O
desc	*(struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int))
;	O
{	O
ct_data	struct(union(short,short),union(short,short))
near	O
*	O
tree	*(struct(union(short,short),union(short,short)))
=	O
desc	*(struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int))
->	O
dyn_tree	*(struct(union(short,short),union(short,short)))
;	O
int	O
near	O
*	O
extra	*(int)
=	O
desc	*(struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int))
->	O
extra_bits	*(int)
;	O
int	O
base	int
=	O
desc	*(struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int))
->	O
extra_base	int
;	O
int	O
max_code	int
=	O
desc	*(struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int))
->	O
max_code	int
;	O
int	O
max_length	int
=	O
desc	*(struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int))
->	O
max_length	int
;	O
ct_data	struct(union(short,short),union(short,short))
near	O
*	O
stree	*(struct(union(short,short),union(short,short)))
=	O
desc	*(struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int))
->	O
static_tree	*(struct(union(short,short),union(short,short)))
;	O
int	O
h	int
;	O
int	O
n	int
,	O
m	*(char)
;	O
int	O
bits	int
;	O
int	O
xbits	int
;	O
ush	short
f	short
;	O
int	O
overflow	int
=	O
0	int
;	O
for	O
(	O
bits	int
=	O
0	int
;	O
bits	int
<=	O
MAX_BITS	int
;	O
bits	int
++	O
)	O
bl_count	array(short)
[	O
bits	int
]	O
=	O
0	int
;	O
tree	*(struct(union(short,short),union(short,short)))
[	O
heap	array(int)
[	O
heap_max	int
]	O
]	O
.	O
Len	O
=	O
0	int
;	O
for	O
(	O
h	int
=	O
heap_max	int
+	O
1	int
;	O
h	int
<	O
HEAP_SIZE	O
;	O
h	int
++	O
)	O
{	O
n	int
=	O
heap	array(int)
[	O
h	int
]	O
;	O
bits	int
=	O
tree	*(struct(union(short,short),union(short,short)))
[	O
tree	*(struct(union(short,short),union(short,short)))
[	O
n	int
]	O
.	O
Dad	O
]	O
.	O
Len	O
+	O
1	int
;	O
if	O
(	O
bits	int
>	O
max_length	int
)	O
bits	int
=	O
max_length	int
,	O
overflow	int
++	O
;	O
tree	*(struct(union(short,short),union(short,short)))
[	O
n	int
]	O
.	O
Len	O
=	O
(	O
ush	short
)	O
bits	int
;	O
if	O
(	O
n	int
>	O
max_code	int
)	O
continue	O
;	O
bl_count	array(short)
[	O
bits	int
]	O
++	O
;	O
xbits	int
=	O
0	int
;	O
if	O
(	O
n	int
>=	O
base	int
)	O
xbits	int
=	O
extra	*(int)
[	O
n	int
-	O
base	int
]	O
;	O
f	short
=	O
tree	*(struct(union(short,short),union(short,short)))
[	O
n	int
]	O
.	O
Freq	O
;	O
opt_len	long
+=	O
(	O
ulg	long
)	O
f	short
*	O
(	O
bits	int
+	O
xbits	int
)	O
;	O
if	O
(	O
stree	*(struct(union(short,short),union(short,short)))
)	O
static_len	long
+=	O
(	O
ulg	long
)	O
f	short
*	O
(	O
stree	*(struct(union(short,short),union(short,short)))
[	O
n	int
]	O
.	O
Len	O
+	O
xbits	int
)	O
;	O
}	O
if	O
(	O
overflow	int
==	O
0	int
)	O
return	O
;	O
Trace	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\nbit length overflow\n"	*(char)
)	O
)	O
;	O
do	O
{	O
bits	int
=	O
max_length	int
-	O
1	int
;	O
while	O
(	O
bl_count	array(short)
[	O
bits	int
]	O
==	O
0	int
)	O
bits	int
--	O
;	O
bl_count	array(short)
[	O
bits	int
]	O
--	O
;	O
bl_count	array(short)
[	O
bits	int
+	O
1	int
]	O
+=	O
2	int
;	O
bl_count	array(short)
[	O
max_length	int
]	O
--	O
;	O
overflow	int
-=	O
2	int
;	O
}	O
while	O
(	O
overflow	int
>	O
0	int
)	O
;	O
for	O
(	O
bits	int
=	O
max_length	int
;	O
bits	int
!=	O
0	int
;	O
bits	int
--	O
)	O
{	O
n	int
=	O
bl_count	array(short)
[	O
bits	int
]	O
;	O
while	O
(	O
n	int
!=	O
0	int
)	O
{	O
m	*(char)
=	O
heap	array(int)
[	O
--	O
h	int
]	O
;	O
if	O
(	O
m	*(char)
>	O
max_code	int
)	O
continue	O
;	O
if	O
(	O
tree	*(struct(union(short,short),union(short,short)))
[	O
m	*(char)
]	O
.	O
Len	O
!=	O
(	O
unsigned	O
)	O
bits	int
)	O
{	O
Trace	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"code %d bits %d->%d\n"	*(char)
,	O
m	*(char)
,	O
tree	*(struct(union(short,short),union(short,short)))
[	O
m	*(char)
]	O
.	O
Len	O
,	O
bits	int
)	O
)	O
;	O
opt_len	long
+=	O
(	O
(	O
long	O
)	O
bits	int
-	O
(	O
long	O
)	O
tree	*(struct(union(short,short),union(short,short)))
[	O
m	*(char)
]	O
.	O
Len	O
)	O
*	O
(	O
long	O
)	O
tree	*(struct(union(short,short),union(short,short)))
[	O
m	*(char)
]	O
.	O
Freq	O
;	O
tree	*(struct(union(short,short),union(short,short)))
[	O
m	*(char)
]	O
.	O
Len	O
=	O
(	O
ush	short
)	O
bits	int
;	O
}	O
n	int
--	O
;	O
}	O
}	O
}	O
local	O
void	O
gen_codes	(*(struct(union(short,short),union(short,short))),int)->(void)
(	O
tree	*(struct(union(short,short),union(short,short)))
,	O
max_code	int
)	O
ct_data	struct(union(short,short),union(short,short))
near	O
*	O
tree	*(struct(union(short,short),union(short,short)))
;	O
int	O
max_code	int
;	O
{	O
ush	short
next_code	array(short)
[	O
MAX_BITS	int
+	O
1	int
]	O
;	O
ush	short
code	short
=	O
0	int
;	O
int	O
bits	int
;	O
int	O
n	int
;	O
for	O
(	O
bits	int
=	O
1	int
;	O
bits	int
<=	O
MAX_BITS	int
;	O
bits	int
++	O
)	O
{	O
next_code	array(short)
[	O
bits	int
]	O
=	O
code	short
=	O
(	O
code	short
+	O
bl_count	array(short)
[	O
bits	int
-	O
1	int
]	O
)	O
<<	O
1	int
;	O
}	O
Assert	O
(	O
code	short
+	O
bl_count	array(short)
[	O
MAX_BITS	int
]	O
-	O
1	int
==	O
(	O
1	int
<<	O
MAX_BITS	int
)	O
-	O
1	int
,	O
"inconsistent bit counts"	*(char)
)	O
;	O
Tracev	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\ngen_codes: max_code %d "	*(char)
,	O
max_code	int
)	O
)	O
;	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<=	O
max_code	int
;	O
n	int
++	O
)	O
{	O
int	O
len	int
=	O
tree	*(struct(union(short,short),union(short,short)))
[	O
n	int
]	O
.	O
Len	O
;	O
if	O
(	O
len	int
==	O
0	int
)	O
continue	O
;	O
tree	*(struct(union(short,short),union(short,short)))
[	O
n	int
]	O
.	O
Code	O
=	O
bi_reverse	(int,int)->(int)
(	O
next_code	array(short)
[	O
len	int
]	O
++	O
,	O
len	int
)	O
;	O
Tracec	O
(	O
tree	*(struct(union(short,short),union(short,short)))
!=	O
static_ltree	array(struct(union(short,short),union(short,short)))
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\nn %3d %c l %2d c %4x (%x) "	*(char)
,	O
n	int
,	O
(	O
isgraph	(int)->(int)
(	O
n	int
)	O
?	O
n	int
:	O
' '	O
)	O
,	O
len	int
,	O
tree	*(struct(union(short,short),union(short,short)))
[	O
n	int
]	O
.	O
Code	O
,	O
next_code	array(short)
[	O
len	int
]	O
-	O
1	int
)	O
)	O
;	O
}	O
}	O
local	O
void	O
build_tree	(*(struct(*(struct(union`,union`)),*(struct(union`,union`)),*(int),int,int,int,int)))->(void)
(	O
desc	*(struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int))
)	O
tree_desc	struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int)
near	O
*	O
desc	*(struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int))
;	O
{	O
ct_data	struct(union(short,short),union(short,short))
near	O
*	O
tree	*(struct(union(short,short),union(short,short)))
=	O
desc	*(struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int))
->	O
dyn_tree	*(struct(union(short,short),union(short,short)))
;	O
ct_data	struct(union(short,short),union(short,short))
near	O
*	O
stree	*(struct(union(short,short),union(short,short)))
=	O
desc	*(struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int))
->	O
static_tree	*(struct(union(short,short),union(short,short)))
;	O
int	O
elems	int
=	O
desc	*(struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int))
->	O
elems	int
;	O
int	O
n	int
,	O
m	*(char)
;	O
int	O
max_code	int
=	O
-	O
1	int
;	O
int	O
node	int
=	O
elems	int
;	O
heap_len	int
=	O
0	int
,	O
heap_max	int
=	O
HEAP_SIZE	O
;	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
elems	int
;	O
n	int
++	O
)	O
{	O
if	O
(	O
tree	*(struct(union(short,short),union(short,short)))
[	O
n	int
]	O
.	O
Freq	O
!=	O
0	int
)	O
{	O
heap	array(int)
[	O
++	O
heap_len	int
]	O
=	O
max_code	int
=	O
n	int
;	O
depth	array(char)
[	O
n	int
]	O
=	O
0	int
;	O
}	O
else	O
{	O
tree	*(struct(union(short,short),union(short,short)))
[	O
n	int
]	O
.	O
Len	O
=	O
0	int
;	O
}	O
}	O
while	O
(	O
heap_len	int
<	O
2	int
)	O
{	O
int	O
new	int
=	O
heap	array(int)
[	O
++	O
heap_len	int
]	O
=	O
(	O
max_code	int
<	O
2	int
?	O
++	O
max_code	int
:	O
0	int
)	O
;	O
tree	*(struct(union(short,short),union(short,short)))
[	O
new	int
]	O
.	O
Freq	O
=	O
1	int
;	O
depth	array(char)
[	O
new	int
]	O
=	O
0	int
;	O
opt_len	long
--	O
;	O
if	O
(	O
stree	*(struct(union(short,short),union(short,short)))
)	O
static_len	long
-=	O
stree	*(struct(union(short,short),union(short,short)))
[	O
new	int
]	O
.	O
Len	O
;	O
}	O
desc	*(struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int))
->	O
max_code	int
=	O
max_code	int
;	O
for	O
(	O
n	int
=	O
heap_len	int
/	O
2	int
;	O
n	int
>=	O
1	int
;	O
n	int
--	O
)	O
pqdownheap	(*(struct(union(short,short),union(short,short))),int)->(void)
(	O
tree	*(struct(union(short,short),union(short,short)))
,	O
n	int
)	O
;	O
do	O
{	O
pqremove	O
(	O
tree	*(struct(union(short,short),union(short,short)))
,	O
n	int
)	O
;	O
m	*(char)
=	O
heap	array(int)
[	O
SMALLEST	int
]	O
;	O
heap	array(int)
[	O
--	O
heap_max	int
]	O
=	O
n	int
;	O
heap	array(int)
[	O
--	O
heap_max	int
]	O
=	O
m	*(char)
;	O
tree	*(struct(union(short,short),union(short,short)))
[	O
node	int
]	O
.	O
Freq	O
=	O
tree	*(struct(union(short,short),union(short,short)))
[	O
n	int
]	O
.	O
Freq	O
+	O
tree	*(struct(union(short,short),union(short,short)))
[	O
m	*(char)
]	O
.	O
Freq	O
;	O
depth	array(char)
[	O
node	int
]	O
=	O
(	O
uch	char
)	O
(	O
MAX	O
(	O
depth	array(char)
[	O
n	int
]	O
,	O
depth	array(char)
[	O
m	*(char)
]	O
)	O
+	O
1	int
)	O
;	O
tree	*(struct(union(short,short),union(short,short)))
[	O
n	int
]	O
.	O
Dad	O
=	O
tree	*(struct(union(short,short),union(short,short)))
[	O
m	*(char)
]	O
.	O
Dad	O
=	O
(	O
ush	short
)	O
node	int
;	O
heap	array(int)
[	O
SMALLEST	int
]	O
=	O
node	int
++	O
;	O
pqdownheap	(*(struct(union(short,short),union(short,short))),int)->(void)
(	O
tree	*(struct(union(short,short),union(short,short)))
,	O
SMALLEST	int
)	O
;	O
}	O
while	O
(	O
heap_len	int
>=	O
2	int
)	O
;	O
heap	array(int)
[	O
--	O
heap_max	int
]	O
=	O
heap	array(int)
[	O
SMALLEST	int
]	O
;	O
gen_bitlen	(*(struct(*(struct(union`,union`)),*(struct(union`,union`)),*(int),int,int,int,int)))->(void)
(	O
(	O
tree_desc	struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int)
near	O
*	O
)	O
desc	*(struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int))
)	O
;	O
gen_codes	(*(struct(union(short,short),union(short,short))),int)->(void)
(	O
(	O
ct_data	struct(union(short,short),union(short,short))
near	O
*	O
)	O
tree	*(struct(union(short,short),union(short,short)))
,	O
max_code	int
)	O
;	O
}	O
local	O
void	O
scan_tree	(*(struct(union(short,short),union(short,short))),int)->(void)
(	O
tree	*(struct(union(short,short),union(short,short)))
,	O
max_code	int
)	O
ct_data	struct(union(short,short),union(short,short))
near	O
*	O
tree	*(struct(union(short,short),union(short,short)))
;	O
int	O
max_code	int
;	O
{	O
int	O
n	int
;	O
int	O
prevlen	int
=	O
-	O
1	int
;	O
int	O
curlen	int
;	O
int	O
nextlen	int
=	O
tree	*(struct(union(short,short),union(short,short)))
[	O
0	int
]	O
.	O
Len	O
;	O
int	O
count	int
=	O
0	int
;	O
int	O
max_count	int
=	O
7	int
;	O
int	O
min_count	int
=	O
4	int
;	O
if	O
(	O
nextlen	int
==	O
0	int
)	O
max_count	int
=	O
138	int
,	O
min_count	int
=	O
3	int
;	O
tree	*(struct(union(short,short),union(short,short)))
[	O
max_code	int
+	O
1	int
]	O
.	O
Len	O
=	O
(	O
ush	short
)	O
0xffff	int
;	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<=	O
max_code	int
;	O
n	int
++	O
)	O
{	O
curlen	int
=	O
nextlen	int
;	O
nextlen	int
=	O
tree	*(struct(union(short,short),union(short,short)))
[	O
n	int
+	O
1	int
]	O
.	O
Len	O
;	O
if	O
(	O
++	O
count	int
<	O
max_count	int
&&	O
curlen	int
==	O
nextlen	int
)	O
{	O
continue	O
;	O
}	O
else	O
if	O
(	O
count	int
<	O
min_count	int
)	O
{	O
bl_tree	array(struct(union(short,short),union(short,short)))
[	O
curlen	int
]	O
.	O
Freq	O
+=	O
count	int
;	O
}	O
else	O
if	O
(	O
curlen	int
!=	O
0	int
)	O
{	O
if	O
(	O
curlen	int
!=	O
prevlen	int
)	O
bl_tree	array(struct(union(short,short),union(short,short)))
[	O
curlen	int
]	O
.	O
Freq	O
++	O
;	O
bl_tree	array(struct(union(short,short),union(short,short)))
[	O
REP_3_6	int
]	O
.	O
Freq	O
++	O
;	O
}	O
else	O
if	O
(	O
count	int
<=	O
10	int
)	O
{	O
bl_tree	array(struct(union(short,short),union(short,short)))
[	O
REPZ_3_10	int
]	O
.	O
Freq	O
++	O
;	O
}	O
else	O
{	O
bl_tree	array(struct(union(short,short),union(short,short)))
[	O
REPZ_11_138	int
]	O
.	O
Freq	O
++	O
;	O
}	O
count	int
=	O
0	int
;	O
prevlen	int
=	O
curlen	int
;	O
if	O
(	O
nextlen	int
==	O
0	int
)	O
{	O
max_count	int
=	O
138	int
,	O
min_count	int
=	O
3	int
;	O
}	O
else	O
if	O
(	O
curlen	int
==	O
nextlen	int
)	O
{	O
max_count	int
=	O
6	int
,	O
min_count	int
=	O
3	int
;	O
}	O
else	O
{	O
max_count	int
=	O
7	int
,	O
min_count	int
=	O
4	int
;	O
}	O
}	O
}	O
local	O
void	O
send_tree	(*(struct(union(short,short),union(short,short))),int)->(void)
(	O
tree	*(struct(union(short,short),union(short,short)))
,	O
max_code	int
)	O
ct_data	struct(union(short,short),union(short,short))
near	O
*	O
tree	*(struct(union(short,short),union(short,short)))
;	O
int	O
max_code	int
;	O
{	O
int	O
n	int
;	O
int	O
prevlen	int
=	O
-	O
1	int
;	O
int	O
curlen	int
;	O
int	O
nextlen	int
=	O
tree	*(struct(union(short,short),union(short,short)))
[	O
0	int
]	O
.	O
Len	O
;	O
int	O
count	int
=	O
0	int
;	O
int	O
max_count	int
=	O
7	int
;	O
int	O
min_count	int
=	O
4	int
;	O
if	O
(	O
nextlen	int
==	O
0	int
)	O
max_count	int
=	O
138	int
,	O
min_count	int
=	O
3	int
;	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<=	O
max_code	int
;	O
n	int
++	O
)	O
{	O
curlen	int
=	O
nextlen	int
;	O
nextlen	int
=	O
tree	*(struct(union(short,short),union(short,short)))
[	O
n	int
+	O
1	int
]	O
.	O
Len	O
;	O
if	O
(	O
++	O
count	int
<	O
max_count	int
&&	O
curlen	int
==	O
nextlen	int
)	O
{	O
continue	O
;	O
}	O
else	O
if	O
(	O
count	int
<	O
min_count	int
)	O
{	O
do	O
{	O
send_code	O
(	O
curlen	int
,	O
bl_tree	array(struct(union(short,short),union(short,short)))
)	O
;	O
}	O
while	O
(	O
--	O
count	int
!=	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
curlen	int
!=	O
0	int
)	O
{	O
if	O
(	O
curlen	int
!=	O
prevlen	int
)	O
{	O
send_code	O
(	O
curlen	int
,	O
bl_tree	array(struct(union(short,short),union(short,short)))
)	O
;	O
count	int
--	O
;	O
}	O
Assert	O
(	O
count	int
>=	O
3	int
&&	O
count	int
<=	O
6	int
,	O
" 3_6?"	*(char)
)	O
;	O
send_code	O
(	O
REP_3_6	int
,	O
bl_tree	array(struct(union(short,short),union(short,short)))
)	O
;	O
send_bits	(int,int)->(void)
(	O
count	int
-	O
3	int
,	O
2	int
)	O
;	O
}	O
else	O
if	O
(	O
count	int
<=	O
10	int
)	O
{	O
send_code	O
(	O
REPZ_3_10	int
,	O
bl_tree	array(struct(union(short,short),union(short,short)))
)	O
;	O
send_bits	(int,int)->(void)
(	O
count	int
-	O
3	int
,	O
3	int
)	O
;	O
}	O
else	O
{	O
send_code	O
(	O
REPZ_11_138	int
,	O
bl_tree	array(struct(union(short,short),union(short,short)))
)	O
;	O
send_bits	(int,int)->(void)
(	O
count	int
-	O
11	int
,	O
7	int
)	O
;	O
}	O
count	int
=	O
0	int
;	O
prevlen	int
=	O
curlen	int
;	O
if	O
(	O
nextlen	int
==	O
0	int
)	O
{	O
max_count	int
=	O
138	int
,	O
min_count	int
=	O
3	int
;	O
}	O
else	O
if	O
(	O
curlen	int
==	O
nextlen	int
)	O
{	O
max_count	int
=	O
6	int
,	O
min_count	int
=	O
3	int
;	O
}	O
else	O
{	O
max_count	int
=	O
7	int
,	O
min_count	int
=	O
4	int
;	O
}	O
}	O
}	O
local	O
int	O
build_bl_tree	()->(int)
(	O
)	O
{	O
int	O
max_blindex	int
;	O
scan_tree	(*(struct(union(short,short),union(short,short))),int)->(void)
(	O
(	O
ct_data	struct(union(short,short),union(short,short))
near	O
*	O
)	O
dyn_ltree	array(struct(union(short,short),union(short,short)))
,	O
l_desc	struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int)
.	O
max_code	int
)	O
;	O
scan_tree	(*(struct(union(short,short),union(short,short))),int)->(void)
(	O
(	O
ct_data	struct(union(short,short),union(short,short))
near	O
*	O
)	O
dyn_dtree	array(struct(union(short,short),union(short,short)))
,	O
d_desc	struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int)
.	O
max_code	int
)	O
;	O
build_tree	(*(struct(*(struct(union`,union`)),*(struct(union`,union`)),*(int),int,int,int,int)))->(void)
(	O
(	O
tree_desc	struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int)
near	O
*	O
)	O
(	O
&	O
bl_desc	struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int)
)	O
)	O
;	O
for	O
(	O
max_blindex	int
=	O
BL_CODES	int
-	O
1	int
;	O
max_blindex	int
>=	O
3	int
;	O
max_blindex	int
--	O
)	O
{	O
if	O
(	O
bl_tree	array(struct(union(short,short),union(short,short)))
[	O
bl_order	array(char)
[	O
max_blindex	int
]	O
]	O
.	O
Len	O
!=	O
0	int
)	O
break	O
;	O
}	O
opt_len	long
+=	O
3	int
*	O
(	O
max_blindex	int
+	O
1	int
)	O
+	O
5	int
+	O
5	int
+	O
4	int
;	O
Tracev	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\ndyn trees: dyn %lu, stat %lu"	*(char)
,	O
opt_len	long
,	O
static_len	long
)	O
)	O
;	O
return	O
max_blindex	int
;	O
}	O
local	O
void	O
send_all_trees	(int,int,int)->(void)
(	O
lcodes	int
,	O
dcodes	int
,	O
blcodes	int
)	O
int	O
lcodes	int
,	O
dcodes	int
,	O
blcodes	int
;	O
{	O
int	O
rank	int
;	O
Assert	O
(	O
lcodes	int
>=	O
257	int
&&	O
dcodes	int
>=	O
1	int
&&	O
blcodes	int
>=	O
4	int
,	O
"not enough codes"	*(char)
)	O
;	O
Assert	O
(	O
lcodes	int
<=	O
L_CODES	O
&&	O
dcodes	int
<=	O
D_CODES	int
&&	O
blcodes	int
<=	O
BL_CODES	int
,	O
"too many codes"	*(char)
)	O
;	O
Tracev	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\nbl counts: "	*(char)
)	O
)	O
;	O
send_bits	(int,int)->(void)
(	O
lcodes	int
-	O
257	int
,	O
5	int
)	O
;	O
send_bits	(int,int)->(void)
(	O
dcodes	int
-	O
1	int
,	O
5	int
)	O
;	O
send_bits	(int,int)->(void)
(	O
blcodes	int
-	O
4	int
,	O
4	int
)	O
;	O
for	O
(	O
rank	int
=	O
0	int
;	O
rank	int
<	O
blcodes	int
;	O
rank	int
++	O
)	O
{	O
Tracev	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\nbl code %2d "	*(char)
,	O
bl_order	array(char)
[	O
rank	int
]	O
)	O
)	O
;	O
send_bits	(int,int)->(void)
(	O
bl_tree	array(struct(union(short,short),union(short,short)))
[	O
bl_order	array(char)
[	O
rank	int
]	O
]	O
.	O
Len	O
,	O
3	int
)	O
;	O
}	O
send_tree	(*(struct(union(short,short),union(short,short))),int)->(void)
(	O
(	O
ct_data	struct(union(short,short),union(short,short))
near	O
*	O
)	O
dyn_ltree	array(struct(union(short,short),union(short,short)))
,	O
lcodes	int
-	O
1	int
)	O
;	O
send_tree	(*(struct(union(short,short),union(short,short))),int)->(void)
(	O
(	O
ct_data	struct(union(short,short),union(short,short))
near	O
*	O
)	O
dyn_dtree	array(struct(union(short,short),union(short,short)))
,	O
dcodes	int
-	O
1	int
)	O
;	O
}	O
off_t	long
flush_block	(*(char),long,int,int)->(long)
(	O
buf	*(char)
,	O
stored_len	long
,	O
pad	int
,	O
eof	int
)	O
char	O
*	O
buf	*(char)
;	O
ulg	long
stored_len	long
;	O
int	O
pad	int
;	O
int	O
eof	int
;	O
{	O
ulg	long
opt_lenb	long
,	O
static_lenb	long
;	O
int	O
max_blindex	int
;	O
flag_buf	array(char)
[	O
last_flags	int
]	O
=	O
flags	*(short)
;	O
if	O
(	O
*	O
file_type	*(short)
==	O
(	O
ush	short
)	O
UNKNOWN	int
)	O
set_file_type	()->(void)
(	O
)	O
;	O
build_tree	(*(struct(*(struct(union`,union`)),*(struct(union`,union`)),*(int),int,int,int,int)))->(void)
(	O
(	O
tree_desc	struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int)
near	O
*	O
)	O
(	O
&	O
l_desc	struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int)
)	O
)	O
;	O
Tracev	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\nlit data: dyn %lu, stat %lu"	*(char)
,	O
opt_len	long
,	O
static_len	long
)	O
)	O
;	O
build_tree	(*(struct(*(struct(union`,union`)),*(struct(union`,union`)),*(int),int,int,int,int)))->(void)
(	O
(	O
tree_desc	struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int)
near	O
*	O
)	O
(	O
&	O
d_desc	struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int)
)	O
)	O
;	O
Tracev	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\ndist data: dyn %lu, stat %lu"	*(char)
,	O
opt_len	long
,	O
static_len	long
)	O
)	O
;	O
max_blindex	int
=	O
build_bl_tree	()->(int)
(	O
)	O
;	O
opt_lenb	long
=	O
(	O
opt_len	long
+	O
3	int
+	O
7	int
)	O
>>	O
3	int
;	O
static_lenb	long
=	O
(	O
static_len	long
+	O
3	int
+	O
7	int
)	O
>>	O
3	int
;	O
input_len	long
+=	O
stored_len	long
;	O
Trace	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u dist %u "	*(char)
,	O
opt_lenb	long
,	O
opt_len	long
,	O
static_lenb	long
,	O
static_len	long
,	O
stored_len	long
,	O
last_lit	int
,	O
last_dist	int
)	O
)	O
;	O
if	O
(	O
static_lenb	long
<=	O
opt_lenb	long
)	O
opt_lenb	long
=	O
static_lenb	long
;	O
if	O
(	O
stored_len	long
<=	O
opt_lenb	long
&&	O
eof	int
&&	O
compressed_len	long
==	O
0L	int
&&	O
seekable	int
(	O
)	O
)	O
{	O
if	O
(	O
!	O
buf	*(char)
)	O
gzip_error	(*(char))->(void)
(	O
"block vanished"	*(char)
)	O
;	O
copy_block	(*(char),int,int)->(void)
(	O
buf	*(char)
,	O
(	O
unsigned	O
)	O
stored_len	long
,	O
0	int
)	O
;	O
compressed_len	long
=	O
stored_len	long
<<	O
3	int
;	O
*	O
file_method	*(int)
=	O
STORED	int
;	O
}	O
else	O
if	O
(	O
stored_len	long
+	O
4	int
<=	O
opt_lenb	long
&&	O
buf	*(char)
!=	O
(	O
char	O
*	O
)	O
0	int
)	O
{	O
send_bits	(int,int)->(void)
(	O
(	O
STORED_BLOCK	int
<<	O
1	int
)	O
+	O
eof	int
,	O
3	int
)	O
;	O
compressed_len	long
=	O
(	O
compressed_len	long
+	O
3	int
+	O
7	int
)	O
&	O
~	O
7L	int
;	O
compressed_len	long
+=	O
(	O
stored_len	long
+	O
4	int
)	O
<<	O
3	int
;	O
copy_block	(*(char),int,int)->(void)
(	O
buf	*(char)
,	O
(	O
unsigned	O
)	O
stored_len	long
,	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
static_lenb	long
==	O
opt_lenb	long
)	O
{	O
send_bits	(int,int)->(void)
(	O
(	O
STATIC_TREES	int
<<	O
1	int
)	O
+	O
eof	int
,	O
3	int
)	O
;	O
compress_block	(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))))->(void)
(	O
(	O
ct_data	struct(union(short,short),union(short,short))
near	O
*	O
)	O
static_ltree	array(struct(union(short,short),union(short,short)))
,	O
(	O
ct_data	struct(union(short,short),union(short,short))
near	O
*	O
)	O
static_dtree	array(struct(union(short,short),union(short,short)))
)	O
;	O
compressed_len	long
+=	O
3	int
+	O
static_len	long
;	O
}	O
else	O
{	O
send_bits	(int,int)->(void)
(	O
(	O
DYN_TREES	int
<<	O
1	int
)	O
+	O
eof	int
,	O
3	int
)	O
;	O
send_all_trees	(int,int,int)->(void)
(	O
l_desc	struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int)
.	O
max_code	int
+	O
1	int
,	O
d_desc	struct(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))),*(int),int,int,int,int)
.	O
max_code	int
+	O
1	int
,	O
max_blindex	int
+	O
1	int
)	O
;	O
compress_block	(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))))->(void)
(	O
(	O
ct_data	struct(union(short,short),union(short,short))
near	O
*	O
)	O
dyn_ltree	array(struct(union(short,short),union(short,short)))
,	O
(	O
ct_data	struct(union(short,short),union(short,short))
near	O
*	O
)	O
dyn_dtree	array(struct(union(short,short),union(short,short)))
)	O
;	O
compressed_len	long
+=	O
3	int
+	O
opt_len	long
;	O
}	O
Assert	O
(	O
compressed_len	long
==	O
bits_sent	O
,	O
"bad compressed size"	*(char)
)	O
;	O
init_block	()->(void)
(	O
)	O
;	O
if	O
(	O
eof	int
)	O
{	O
Assert	O
(	O
input_len	long
==	O
bytes_in	long
,	O
"bad input size"	*(char)
)	O
;	O
bi_windup	()->(void)
(	O
)	O
;	O
compressed_len	long
+=	O
7	int
;	O
}	O
else	O
if	O
(	O
pad	int
&&	O
(	O
compressed_len	long
%	O
8	int
)	O
!=	O
0	int
)	O
{	O
send_bits	(int,int)->(void)
(	O
(	O
STORED_BLOCK	int
<<	O
1	int
)	O
+	O
eof	int
,	O
3	int
)	O
;	O
compressed_len	long
=	O
(	O
compressed_len	long
+	O
3	int
+	O
7	int
)	O
&	O
~	O
7L	int
;	O
copy_block	(*(char),int,int)->(void)
(	O
buf	*(char)
,	O
0	int
,	O
1	int
)	O
;	O
}	O
return	O
compressed_len	long
>>	O
3	int
;	O
}	O
int	O
ct_tally	(int,int)->(int)
(	O
dist	int
,	O
lc	int
)	O
int	O
dist	int
;	O
int	O
lc	int
;	O
{	O
l_buf	O
[	O
last_lit	int
++	O
]	O
=	O
(	O
uch	char
)	O
lc	int
;	O
if	O
(	O
dist	int
==	O
0	int
)	O
{	O
dyn_ltree	array(struct(union(short,short),union(short,short)))
[	O
lc	int
]	O
.	O
Freq	O
++	O
;	O
}	O
else	O
{	O
dist	int
--	O
;	O
Assert	O
(	O
(	O
ush	short
)	O
dist	int
<	O
(	O
ush	short
)	O
MAX_DIST	O
&&	O
(	O
ush	short
)	O
lc	int
<=	O
(	O
ush	short
)	O
(	O
MAX_MATCH	int
-	O
MIN_MATCH	int
)	O
&&	O
(	O
ush	short
)	O
d_code	O
(	O
dist	int
)	O
<	O
(	O
ush	short
)	O
D_CODES	int
,	O
"ct_tally: bad match"	*(char)
)	O
;	O
dyn_ltree	array(struct(union(short,short),union(short,short)))
[	O
length_code	array(char)
[	O
lc	int
]	O
+	O
LITERALS	int
+	O
1	int
]	O
.	O
Freq	O
++	O
;	O
dyn_dtree	array(struct(union(short,short),union(short,short)))
[	O
d_code	O
(	O
dist	int
)	O
]	O
.	O
Freq	O
++	O
;	O
d_buf	array(short)
[	O
last_dist	int
++	O
]	O
=	O
(	O
ush	short
)	O
dist	int
;	O
flags	*(short)
|=	O
flag_bit	char
;	O
}	O
flag_bit	char
<<=	O
1	int
;	O
if	O
(	O
(	O
last_lit	int
&	O
7	int
)	O
==	O
0	int
)	O
{	O
flag_buf	array(char)
[	O
last_flags	int
++	O
]	O
=	O
flags	*(short)
;	O
flags	*(short)
=	O
0	int
,	O
flag_bit	char
=	O
1	int
;	O
}	O
if	O
(	O
level	int
>	O
2	int
&&	O
(	O
last_lit	int
&	O
0xfff	int
)	O
==	O
0	int
)	O
{	O
ulg	long
out_length	long
=	O
(	O
ulg	long
)	O
last_lit	int
*	O
8L	int
;	O
ulg	long
in_length	long
=	O
(	O
ulg	long
)	O
strstart	int
-	O
block_start	long
;	O
int	O
dcode	int
;	O
for	O
(	O
dcode	int
=	O
0	int
;	O
dcode	int
<	O
D_CODES	int
;	O
dcode	int
++	O
)	O
{	O
out_length	long
+=	O
(	O
ulg	long
)	O
dyn_dtree	array(struct(union(short,short),union(short,short)))
[	O
dcode	int
]	O
.	O
Freq	O
*	O
(	O
5L	int
+	O
extra_dbits	array(int)
[	O
dcode	int
]	O
)	O
;	O
}	O
out_length	long
>>=	O
3	int
;	O
Trace	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\nlast_lit %u, last_dist %u, in %ld, out ~%ld(%ld%%) "	*(char)
,	O
last_lit	int
,	O
last_dist	int
,	O
in_length	long
,	O
out_length	long
,	O
100L	int
-	O
out_length	long
*	O
100L	int
/	O
in_length	long
)	O
)	O
;	O
if	O
(	O
last_dist	int
<	O
last_lit	int
/	O
2	int
&&	O
out_length	long
<	O
in_length	long
/	O
2	int
)	O
return	O
1	int
;	O
}	O
return	O
(	O
last_lit	int
==	O
LIT_BUFSIZE	int
-	O
1	int
||	O
last_dist	int
==	O
DIST_BUFSIZE	int
)	O
;	O
}	O
local	O
void	O
compress_block	(*(struct(union(short,short),union(short,short))),*(struct(union(short,short),union(short,short))))->(void)
(	O
ltree	*(struct(union(short,short),union(short,short)))
,	O
dtree	*(struct(union(short,short),union(short,short)))
)	O
ct_data	struct(union(short,short),union(short,short))
near	O
*	O
ltree	*(struct(union(short,short),union(short,short)))
;	O
ct_data	struct(union(short,short),union(short,short))
near	O
*	O
dtree	*(struct(union(short,short),union(short,short)))
;	O
{	O
unsigned	O
dist	int
;	O
int	O
lc	int
;	O
unsigned	O
lx	int
=	O
0	int
;	O
unsigned	O
dx	int
=	O
0	int
;	O
unsigned	O
fx	int
=	O
0	int
;	O
uch	char
flag	char
=	O
0	int
;	O
unsigned	O
code	short
;	O
int	O
extra	*(int)
;	O
if	O
(	O
last_lit	int
!=	O
0	int
)	O
do	O
{	O
if	O
(	O
(	O
lx	int
&	O
7	int
)	O
==	O
0	int
)	O
flag	char
=	O
flag_buf	array(char)
[	O
fx	int
++	O
]	O
;	O
lc	int
=	O
l_buf	O
[	O
lx	int
++	O
]	O
;	O
if	O
(	O
(	O
flag	char
&	O
1	int
)	O
==	O
0	int
)	O
{	O
send_code	O
(	O
lc	int
,	O
ltree	*(struct(union(short,short),union(short,short)))
)	O
;	O
Tracecv	O
(	O
isgraph	(int)->(int)
(	O
lc	int
)	O
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
" '%c' "	*(char)
,	O
lc	int
)	O
)	O
;	O
}	O
else	O
{	O
code	short
=	O
length_code	array(char)
[	O
lc	int
]	O
;	O
send_code	O
(	O
code	short
+	O
LITERALS	int
+	O
1	int
,	O
ltree	*(struct(union(short,short),union(short,short)))
)	O
;	O
extra	*(int)
=	O
extra_lbits	array(int)
[	O
code	short
]	O
;	O
if	O
(	O
extra	*(int)
!=	O
0	int
)	O
{	O
lc	int
-=	O
base_length	array(int)
[	O
code	short
]	O
;	O
send_bits	(int,int)->(void)
(	O
lc	int
,	O
extra	*(int)
)	O
;	O
}	O
dist	int
=	O
d_buf	array(short)
[	O
dx	int
++	O
]	O
;	O
code	short
=	O
d_code	O
(	O
dist	int
)	O
;	O
Assert	O
(	O
code	short
<	O
D_CODES	int
,	O
"bad d_code"	*(char)
)	O
;	O
send_code	O
(	O
code	short
,	O
dtree	*(struct(union(short,short),union(short,short)))
)	O
;	O
extra	*(int)
=	O
extra_dbits	array(int)
[	O
code	short
]	O
;	O
if	O
(	O
extra	*(int)
!=	O
0	int
)	O
{	O
dist	int
-=	O
base_dist	array(int)
[	O
code	short
]	O
;	O
send_bits	(int,int)->(void)
(	O
dist	int
,	O
extra	*(int)
)	O
;	O
}	O
}	O
flag	char
>>=	O
1	int
;	O
}	O
while	O
(	O
lx	int
<	O
last_lit	int
)	O
;	O
send_code	O
(	O
END_BLOCK	int
,	O
ltree	*(struct(union(short,short),union(short,short)))
)	O
;	O
}	O
local	O
void	O
set_file_type	()->(void)
(	O
)	O
{	O
int	O
n	int
=	O
0	int
;	O
unsigned	O
ascii_freq	int
=	O
0	int
;	O
unsigned	O
bin_freq	int
=	O
0	int
;	O
while	O
(	O
n	int
<	O
7	int
)	O
bin_freq	int
+=	O
dyn_ltree	array(struct(union(short,short),union(short,short)))
[	O
n	int
++	O
]	O
.	O
Freq	O
;	O
while	O
(	O
n	int
<	O
128	int
)	O
ascii_freq	int
+=	O
dyn_ltree	array(struct(union(short,short),union(short,short)))
[	O
n	int
++	O
]	O
.	O
Freq	O
;	O
while	O
(	O
n	int
<	O
LITERALS	int
)	O
bin_freq	int
+=	O
dyn_ltree	array(struct(union(short,short),union(short,short)))
[	O
n	int
++	O
]	O
.	O
Freq	O
;	O
*	O
file_type	*(short)
=	O
bin_freq	int
>	O
(	O
ascii_freq	int
>>	O
2	int
)	O
?	O
BINARY	int
:	O
ASCII	int
;	O
if	O
(	O
*	O
file_type	*(short)
==	O
BINARY	int
&&	O
translate_eol	int
)	O
{	O
warning	(*(char))->(void)
(	O
"-l used on binary file"	*(char)
)	O
;	O
}	O
}	O
