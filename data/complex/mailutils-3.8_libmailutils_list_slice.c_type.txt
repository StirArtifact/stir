struct	O
slice_info	struct(long,*(long),long,long,*((*(*(void)),*(void),*(void))->(int)),*(void),int)
{	O
size_t	long
cur	long
;	O
size_t	long
*	O
posv	*(long)
;	O
size_t	long
posc	long
;	O
size_t	long
idx	long
;	O
int	O
(	O
*	O
dup_item	*((*(*(void)),*(void),*(void))->(int))
)	O
(	O
void	O
*	O
*	O
,	O
void	O
*	O
,	O
void	O
*	O
)	O
;	O
void	O
*	O
dup_data	*(void)
;	O
int	O
err	int
;	O
}	O
;	O
static	O
int	O
_slice_mapper	(*(*(void)),long,*(void))->(int)
(	O
void	O
*	O
*	O
itmv	*(*(void))
,	O
size_t	long
itmc	long
,	O
void	O
*	O
call_data	*(void)
)	O
{	O
struct	O
slice_info	struct(long,*(long),long,long,*((*(*(void)),*(void),*(void))->(int)),*(void),int)
*	O
si	*(struct(long,*(long),long,long,*((*(*`),*(void),*(void))->(int)),*(void),int))
=	O
call_data	*(void)
;	O
size_t	long
cur	long
=	O
si	*(struct(long,*(long),long,long,*((*(*`),*(void),*(void))->(int)),*(void),int))
->	O
cur	long
++	O
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
cur	long
<	O
si	*(struct(long,*(long),long,long,*((*(*`),*(void),*(void))->(int)),*(void),int))
->	O
posv	*(long)
[	O
si	*(struct(long,*(long),long,long,*((*(*`),*(void),*(void))->(int)),*(void),int))
->	O
idx	long
]	O
)	O
return	O
MU_LIST_MAP_SKIP	int
;	O
if	O
(	O
si	*(struct(long,*(long),long,long,*((*(*`),*(void),*(void))->(int)),*(void),int))
->	O
idx	long
+	O
1	int
<	O
si	*(struct(long,*(long),long,long,*((*(*`),*(void),*(void))->(int)),*(void),int))
->	O
posc	long
&&	O
cur	long
>	O
si	*(struct(long,*(long),long,long,*((*(*`),*(void),*(void))->(int)),*(void),int))
->	O
posv	*(long)
[	O
si	*(struct(long,*(long),long,long,*((*(*`),*(void),*(void))->(int)),*(void),int))
->	O
idx	long
+	O
1	int
]	O
)	O
{	O
si	*(struct(long,*(long),long,long,*((*(*`),*(void),*(void))->(int)),*(void),int))
->	O
idx	long
+=	O
2	int
;	O
if	O
(	O
si	*(struct(long,*(long),long,long,*((*(*`),*(void),*(void))->(int)),*(void),int))
->	O
idx	long
>=	O
si	*(struct(long,*(long),long,long,*((*(*`),*(void),*(void))->(int)),*(void),int))
->	O
posc	long
)	O
return	O
MU_LIST_MAP_STOP	int
|	O
MU_LIST_MAP_SKIP	int
;	O
}	O
else	O
break	O
;	O
}	O
if	O
(	O
si	*(struct(long,*(long),long,long,*((*(*`),*(void),*(void))->(int)),*(void),int))
->	O
dup_item	*((*(*(void)),*(void),*(void))->(int))
&&	O
itmv	*(*(void))
[	O
0	int
]	O
)	O
{	O
void	O
*	O
p	*(void)
;	O
int	O
rc	int
=	O
si	*(struct(long,*(long),long,long,*((*(*`),*(void),*(void))->(int)),*(void),int))
->	O
dup_item	*((*(*(void)),*(void),*(void))->(int))
(	O
&	O
p	*(void)
,	O
itmv	*(*(void))
[	O
0	int
]	O
,	O
si	*(struct(long,*(long),long,long,*((*(*`),*(void),*(void))->(int)),*(void),int))
->	O
dup_data	*(void)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
si	*(struct(long,*(long),long,long,*((*(*`),*(void),*(void))->(int)),*(void),int))
->	O
err	int
=	O
rc	int
;	O
return	O
MU_LIST_MAP_STOP	int
|	O
MU_LIST_MAP_SKIP	int
;	O
}	O
itmv	*(*(void))
[	O
0	int
]	O
=	O
p	*(void)
;	O
}	O
return	O
MU_LIST_MAP_OK	int
;	O
}	O
static	O
int	O
poscmp	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
a	*(void)
,	O
const	O
void	O
*	O
b	*(void)
)	O
{	O
size_t	long
posa	long
=	O
*	O
(	O
size_t	long
*	O
)	O
a	*(void)
;	O
size_t	long
posb	long
=	O
*	O
(	O
size_t	long
*	O
)	O
b	*(void)
;	O
if	O
(	O
posa	long
<	O
posb	long
)	O
return	O
-	O
1	int
;	O
else	O
if	O
(	O
posa	long
>	O
posb	long
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_list_slice_dup	(*(*(struct)),*(struct),*(long),long,*((*(*(void)),*(void),*(void))->(int)),*(void))->(int)
(	O
mu_list_t	*(struct)
*	O
pdest	*(*(struct(struct(*(void),*(struct`),*(struct`)),long,*(struct(*`,*`,int,int)),*((*`,*`)->(int)),*((*`)->(void)),*(struct))))
,	O
mu_list_t	*(struct)
list	*(struct)
,	O
size_t	long
*	O
posv	*(long)
,	O
size_t	long
posc	long
,	O
int	O
(	O
*	O
dup_item	*((*(*(void)),*(void),*(void))->(int))
)	O
(	O
void	O
*	O
*	O
,	O
void	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
dup_data	*(void)
)	O
{	O
int	O
rc	int
;	O
struct	O
slice_info	struct(long,*(long),long,long,*((*(*(void)),*(void),*(void))->(int)),*(void),int)
si	*(struct(long,*(long),long,long,*((*(*`),*(void),*(void))->(int)),*(void),int))
;	O
mu_list_t	*(struct)
dest	*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct)))
;	O
si	*(struct(long,*(long),long,long,*((*(*`),*(void),*(void))->(int)),*(void),int))
.	O
cur	long
=	O
0	int
;	O
si	*(struct(long,*(long),long,long,*((*(*`),*(void),*(void))->(int)),*(void),int))
.	O
idx	long
=	O
0	int
;	O
si	*(struct(long,*(long),long,long,*((*(*`),*(void),*(void))->(int)),*(void),int))
.	O
posv	*(long)
=	O
posv	*(long)
;	O
si	*(struct(long,*(long),long,long,*((*(*`),*(void),*(void))->(int)),*(void),int))
.	O
posc	long
=	O
posc	long
;	O
si	*(struct(long,*(long),long,long,*((*(*`),*(void),*(void))->(int)),*(void),int))
.	O
dup_item	*((*(*(void)),*(void),*(void))->(int))
=	O
dup_item	*((*(*(void)),*(void),*(void))->(int))
;	O
si	*(struct(long,*(long),long,long,*((*(*`),*(void),*(void))->(int)),*(void),int))
.	O
dup_data	*(void)
=	O
dup_data	*(void)
;	O
si	*(struct(long,*(long),long,long,*((*(*`),*(void),*(void))->(int)),*(void),int))
.	O
err	int
=	O
0	int
;	O
qsort	(*(void),long,long,*((*(void),*(void))->(int)))->(void)
(	O
posv	*(long)
,	O
posc	long
,	O
sizeof	O
(	O
posv	*(long)
[	O
0	int
]	O
)	O
,	O
poscmp	(*(void),*(void))->(int)
)	O
;	O
rc	int
=	O
mu_list_map	(*(struct),*((*(*(void)),long,*(void))->(int)),*(void),long,*(*(struct)))->(int)
(	O
list	*(struct)
,	O
_slice_mapper	(*(*(void)),long,*(void))->(int)
,	O
&	O
si	*(struct(long,*(long),long,long,*((*(*`),*(void),*(void))->(int)),*(void),int))
,	O
1	int
,	O
&	O
dest	*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct)))
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
si	*(struct(long,*(long),long,long,*((*(*`),*(void),*(void))->(int)),*(void),int))
.	O
err	int
)	O
{	O
mu_list_destroy	(*(*(struct)))->(void)
(	O
&	O
dest	*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct)))
)	O
;	O
rc	int
=	O
si	*(struct(long,*(long),long,long,*((*(*`),*(void),*(void))->(int)),*(void),int))
.	O
err	int
;	O
}	O
else	O
{	O
if	O
(	O
dup_item	*((*(*(void)),*(void),*(void))->(int))
)	O
mu_list_set_destroy_item	(*(struct),*((*(void))->(void)))->(*((*(void))->(void)))
(	O
dest	*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct)))
,	O
list	*(struct)
->	O
destroy_item	*((*(void))->(void))
)	O
;	O
*	O
pdest	*(*(struct(struct(*(void),*(struct`),*(struct`)),long,*(struct(*`,*`,int,int)),*((*`,*`)->(int)),*((*`)->(void)),*(struct))))
=	O
dest	*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct)))
;	O
}	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_list_slice	(*(*(struct)),*(struct),*(long),long)->(int)
(	O
mu_list_t	*(struct)
*	O
pdest	*(*(struct(struct(*(void),*(struct`),*(struct`)),long,*(struct(*`,*`,int,int)),*((*`,*`)->(int)),*((*`)->(void)),*(struct))))
,	O
mu_list_t	*(struct)
list	*(struct)
,	O
size_t	long
*	O
posv	*(long)
,	O
size_t	long
posc	long
)	O
{	O
return	O
mu_list_slice_dup	(*(*(struct)),*(struct),*(long),long,*((*(*(void)),*(void),*(void))->(int)),*(void))->(int)
(	O
pdest	*(*(struct(struct(*(void),*(struct`),*(struct`)),long,*(struct(*`,*`,int,int)),*((*`,*`)->(int)),*((*`)->(void)),*(struct))))
,	O
list	*(struct)
,	O
posv	*(long)
,	O
posc	long
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
