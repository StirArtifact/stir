struct	O
dico_stream	struct(enum(int,int,int),long,*(char),long,*(char),int,long,long,int,*((*(void),*(char),long,*(long))->(int)),*((*(void),*(char),long,*(long))->(int)),*((*(void))->(int)),*((*(void),int)->(int)),*((*(void))->(int)),*((*(void))->(int)),*((*(void),long,int,*(long))->(int)),*((*(void),*(long))->(int)),*((*(void),int,*(void))->(int)),*((*(void),int)->(*(char))),*(void))
{	O
enum	O
dico_buffer_type	enum(int,int,int)
buftype	enum(int,int,int)
;	O
size_t	long
bufsize	long
;	O
char	O
*	O
buffer	*(char)
;	O
size_t	long
level	int
;	O
char	O
*	O
cur	*(char)
;	O
int	O
flags	int
;	O
off_t	long
bytes_in	long
,	O
bytes_out	long
;	O
int	O
last_err	int
;	O
int	O
(	O
*	O
read	*((*(void))->(int))
)	O
(	O
void	O
*	O
,	O
char	O
*	O
,	O
size_t	long
,	O
size_t	long
*	O
)	O
;	O
int	O
(	O
*	O
write	*((*(void),*(char),long,*(long))->(int))
)	O
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
size_t	long
,	O
size_t	long
*	O
)	O
;	O
int	O
(	O
*	O
flush	*((*(void))->(int))
)	O
(	O
void	O
*	O
)	O
;	O
int	O
(	O
*	O
open	*((*(void),int)->(int))
)	O
(	O
void	O
*	O
,	O
int	O
)	O
;	O
int	O
(	O
*	O
close	*((*(void))->(int))
)	O
(	O
void	O
*	O
)	O
;	O
int	O
(	O
*	O
destroy	*((*(void))->(int))
)	O
(	O
void	O
*	O
)	O
;	O
int	O
(	O
*	O
seek	*((*(void),long,int,*(long))->(int))
)	O
(	O
void	O
*	O
,	O
off_t	long
,	O
int	O
,	O
off_t	long
*	O
)	O
;	O
int	O
(	O
*	O
size	long
)	O
(	O
void	O
*	O
,	O
off_t	long
*	O
)	O
;	O
int	O
(	O
*	O
ctl	*((*(void),int,*(void))->(int))
)	O
(	O
void	O
*	O
,	O
int	O
,	O
void	O
*	O
)	O
;	O
const	O
char	O
*	O
(	O
*	O
error_string	*((*(void),int)->(*(char)))
)	O
(	O
void	O
*	O
,	O
int	O
)	O
;	O
void	O
*	O
data	*(void)
;	O
}	O
;	O
static	O
int	O
_stream_seterror	(*(struct(enum(int,int,int),long,*(char),long,*(char),int,long,long,int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,int,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int)),*((*`,int)->(*`)),*(void))),int,int)->(int)
(	O
dico_stream_t	*(struct)
stream	*(struct)
,	O
int	O
code	int
,	O
int	O
perm	int
)	O
{	O
stream	*(struct)
->	O
last_err	int
=	O
code	int
;	O
if	O
(	O
perm	int
)	O
stream	*(struct)
->	O
flags	int
|=	O
_STR_ERR	int
;	O
return	O
code	int
;	O
}	O
int	O
dico_stream_create	(*(*(struct)),int,*(void))->(int)
(	O
dico_stream_t	*(struct)
*	O
pstream	*(*(struct))
,	O
int	O
flags	int
,	O
void	O
*	O
data	*(void)
)	O
{	O
dico_stream_t	*(struct)
stream	*(struct)
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
stream	*(struct)
)	O
)	O
;	O
if	O
(	O
stream	*(struct)
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
memset	(*(void),int,long)->(*(void))
(	O
stream	*(struct)
,	O
0	int
,	O
sizeof	O
(	O
*	O
stream	*(struct)
)	O
)	O
;	O
stream	*(struct)
->	O
flags	int
=	O
flags	int
;	O
stream	*(struct)
->	O
data	*(void)
=	O
data	*(void)
;	O
*	O
pstream	*(*(struct))
=	O
stream	*(struct)
;	O
return	O
0	int
;	O
}	O
int	O
dico_stream_open	(*(struct))->(int)
(	O
dico_stream_t	*(struct)
stream	*(struct)
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
stream	*(struct)
->	O
open	*((*(void),int)->(int))
&&	O
(	O
rc	int
=	O
stream	*(struct)
->	O
open	*((*(void),int)->(int))
(	O
stream	*(struct)
->	O
data	*(void)
,	O
stream	*(struct)
->	O
flags	int
)	O
)	O
)	O
return	O
_stream_seterror	(*(struct(enum(int,int,int),long,*(char),long,*(char),int,long,long,int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,int,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int)),*((*`,int)->(*`)),*(void))),int,int)->(int)
(	O
stream	*(struct)
,	O
rc	int
,	O
1	int
)	O
;	O
stream	*(struct)
->	O
bytes_in	long
=	O
stream	*(struct)
->	O
bytes_out	long
=	O
0	int
;	O
return	O
0	int
;	O
}	O
void	O
dico_stream_set_error_string	(*(struct),*((*(void),int)->(*(char))))->(void)
(	O
dico_stream_t	*(struct)
stream	*(struct)
,	O
const	O
char	O
*	O
(	O
*	O
error_string	*((*(void),int)->(*(char)))
)	O
(	O
void	O
*	O
,	O
int	O
)	O
)	O
{	O
stream	*(struct)
->	O
error_string	*((*(void),int)->(*(char)))
=	O
error_string	*((*(void),int)->(*(char)))
;	O
}	O
void	O
dico_stream_set_open	(*(struct),*((*(void),int)->(int)))->(void)
(	O
dico_stream_t	*(struct)
stream	*(struct)
,	O
int	O
(	O
*	O
openfn	*((*(void),int)->(int))
)	O
(	O
void	O
*	O
,	O
int	O
)	O
)	O
{	O
stream	*(struct)
->	O
open	*((*(void),int)->(int))
=	O
openfn	*((*(void),int)->(int))
;	O
}	O
void	O
dico_stream_set_seek	(*(struct),*((*(void),long,int,*(long))->(int)))->(void)
(	O
dico_stream_t	*(struct)
stream	*(struct)
,	O
int	O
(	O
*	O
fun_seek	*((*(void),long,int,*(long))->(int))
)	O
(	O
void	O
*	O
,	O
off_t	long
,	O
int	O
,	O
off_t	long
*	O
)	O
)	O
{	O
stream	*(struct)
->	O
seek	*((*(void),long,int,*(long))->(int))
=	O
fun_seek	*((*(void),long,int,*(long))->(int))
;	O
}	O
void	O
dico_stream_set_read	(*(struct),*((*(void),*(char),long,*(long))->(int)))->(void)
(	O
dico_stream_t	*(struct)
stream	*(struct)
,	O
int	O
(	O
*	O
readfn	*((*(void),*(char),long,*(long))->(int))
)	O
(	O
void	O
*	O
,	O
char	O
*	O
,	O
size_t	long
,	O
size_t	long
*	O
)	O
)	O
{	O
stream	*(struct)
->	O
read	*((*(void))->(int))
=	O
readfn	*((*(void),*(char),long,*(long))->(int))
;	O
}	O
void	O
dico_stream_set_write	(*(struct),*((*(void),*(char),long,*(long))->(int)))->(void)
(	O
dico_stream_t	*(struct)
stream	*(struct)
,	O
int	O
(	O
*	O
writefn	*((*(void),*(char),long,*(long))->(int))
)	O
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
size_t	long
,	O
size_t	long
*	O
)	O
)	O
{	O
stream	*(struct)
->	O
write	*((*(void),*(char),long,*(long))->(int))
=	O
writefn	*((*(void),*(char),long,*(long))->(int))
;	O
}	O
void	O
dico_stream_set_flush	(*(struct),*((*(void))->(int)))->(void)
(	O
dico_stream_t	*(struct)
stream	*(struct)
,	O
int	O
(	O
*	O
flushfn	*((*(void))->(int))
)	O
(	O
void	O
*	O
)	O
)	O
{	O
stream	*(struct)
->	O
flush	*((*(void))->(int))
=	O
flushfn	*((*(void))->(int))
;	O
}	O
void	O
dico_stream_set_close	(*(struct),*((*(void))->(int)))->(void)
(	O
dico_stream_t	*(struct)
stream	*(struct)
,	O
int	O
(	O
*	O
closefn	*((*(void))->(int))
)	O
(	O
void	O
*	O
)	O
)	O
{	O
stream	*(struct)
->	O
close	*((*(void))->(int))
=	O
closefn	*((*(void))->(int))
;	O
}	O
void	O
dico_stream_set_destroy	(*(struct),*((*(void))->(int)))->(void)
(	O
dico_stream_t	*(struct)
stream	*(struct)
,	O
int	O
(	O
*	O
destroyfn	*((*(void))->(int))
)	O
(	O
void	O
*	O
)	O
)	O
{	O
stream	*(struct)
->	O
destroy	*((*(void))->(int))
=	O
destroyfn	*((*(void))->(int))
;	O
}	O
void	O
dico_stream_set_size	(*(struct),*((*(void),*(long))->(int)))->(void)
(	O
dico_stream_t	*(struct)
stream	*(struct)
,	O
int	O
(	O
*	O
sizefn	*((*(void),*(long))->(int))
)	O
(	O
void	O
*	O
,	O
off_t	long
*	O
)	O
)	O
{	O
stream	*(struct)
->	O
size	long
=	O
sizefn	*((*(void),*(long))->(int))
;	O
}	O
void	O
dico_stream_set_ioctl	(*(struct),*((*(void),int,*(void))->(int)))->(void)
(	O
dico_stream_t	*(struct)
stream	*(struct)
,	O
int	O
(	O
*	O
ctl	*((*(void),int,*(void))->(int))
)	O
(	O
void	O
*	O
,	O
int	O
,	O
void	O
*	O
)	O
)	O
{	O
stream	*(struct)
->	O
ctl	*((*(void),int,*(void))->(int))
=	O
ctl	*((*(void),int,*(void))->(int))
;	O
}	O
const	O
char	O
*	O
dico_stream_strerror	(*(struct),int)->(*(char))
(	O
dico_stream_t	*(struct)
stream	*(struct)
,	O
int	O
rc	int
)	O
{	O
const	O
char	O
*	O
str	*(struct)
;	O
if	O
(	O
stream	*(struct)
->	O
error_string	*((*(void),int)->(*(char)))
)	O
str	*(struct)
=	O
stream	*(struct)
->	O
error_string	*((*(void),int)->(*(char)))
(	O
stream	*(struct)
->	O
data	*(void)
,	O
rc	int
)	O
;	O
else	O
str	*(struct)
=	O
strerror	(int)->(*(char))
(	O
rc	int
)	O
;	O
return	O
str	*(struct)
;	O
}	O
int	O
dico_stream_last_error	(*(struct))->(int)
(	O
dico_stream_t	*(struct)
stream	*(struct)
)	O
{	O
return	O
stream	*(struct)
->	O
last_err	int
;	O
}	O
void	O
dico_stream_clearerr	(*(struct))->(void)
(	O
dico_stream_t	*(struct)
stream	*(struct)
)	O
{	O
stream	*(struct)
->	O
last_err	int
=	O
0	int
;	O
}	O
int	O
dico_stream_eof	(*(struct))->(int)
(	O
dico_stream_t	*(struct)
stream	*(struct)
)	O
{	O
return	O
stream	*(struct)
->	O
flags	int
&	O
_STR_EOF	int
;	O
}	O
off_t	long
dico_stream_seek	(*(struct),long,int)->(long)
(	O
dico_stream_t	*(struct)
stream	*(struct)
,	O
off_t	long
offset	long
,	O
int	O
whence	int
)	O
{	O
int	O
rc	int
;	O
off_t	long
res	long
;	O
size_t	long
bpos	long
;	O
if	O
(	O
stream	*(struct)
->	O
flags	int
&	O
_STR_ERR	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
!	O
stream	*(struct)
->	O
seek	*((*(void),long,int,*(long))->(int))
)	O
{	O
_stream_seterror	(*(struct(enum(int,int,int),long,*(char),long,*(char),int,long,long,int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,int,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int)),*((*`,int)->(*`)),*(void))),int,int)->(int)
(	O
stream	*(struct)
,	O
ENOSYS	int
,	O
0	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
!	O
(	O
stream	*(struct)
->	O
flags	int
&	O
DICO_STREAM_SEEK	int
)	O
)	O
{	O
_stream_seterror	(*(struct(enum(int,int,int),long,*(char),long,*(char),int,long,long,int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,int,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int)),*((*`,int)->(*`)),*(void))),int,int)->(int)
(	O
stream	*(struct)
,	O
EACCES	int
,	O
1	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
switch	O
(	O
whence	int
)	O
{	O
case	O
DICO_SEEK_SET	int
:	O
break	O
;	O
case	O
DICO_SEEK_CUR	int
:	O
break	O
;	O
case	O
DICO_SEEK_END	int
:	O
bpos	long
=	O
_stream_buffer_offset	O
(	O
stream	*(struct)
)	O
;	O
if	O
(	O
bpos	long
+	O
offset	long
>=	O
0	int
&&	O
bpos	long
+	O
offset	long
<	O
_stream_orig_level	O
(	O
stream	*(struct)
)	O
)	O
{	O
if	O
(	O
(	O
rc	int
=	O
stream	*(struct)
->	O
seek	*((*(void),long,int,*(long))->(int))
(	O
stream	*(struct)
->	O
data	*(void)
,	O
offset	long
,	O
whence	int
,	O
&	O
res	long
)	O
)	O
)	O
{	O
_stream_seterror	(*(struct(enum(int,int,int),long,*(char),long,*(char),int,long,long,int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,int,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int)),*((*`,int)->(*`)),*(void))),int,int)->(int)
(	O
stream	*(struct)
,	O
rc	int
,	O
1	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
offset	long
-=	O
bpos	long
;	O
_stream_advance_buffer	O
(	O
stream	*(struct)
,	O
offset	long
)	O
;	O
_stream_cleareof	O
(	O
stream	*(struct)
)	O
;	O
return	O
res	long
-	O
stream	*(struct)
->	O
level	int
;	O
}	O
break	O
;	O
default	O
:	O
_stream_seterror	(*(struct(enum(int,int,int),long,*(char),long,*(char),int,long,long,int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,int,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int)),*((*`,int)->(*`)),*(void))),int,int)->(int)
(	O
stream	*(struct)
,	O
EINVAL	int
,	O
1	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
dico_stream_flush	(*(struct))->(int)
(	O
stream	*(struct)
)	O
)	O
return	O
-	O
1	int
;	O
rc	int
=	O
stream	*(struct)
->	O
seek	*((*(void),long,int,*(long))->(int))
(	O
stream	*(struct)
->	O
data	*(void)
,	O
offset	long
,	O
whence	int
,	O
&	O
res	long
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
_stream_seterror	(*(struct(enum(int,int,int),long,*(char),long,*(char),int,long,long,int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,int,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int)),*((*`,int)->(*`)),*(void))),int,int)->(int)
(	O
stream	*(struct)
,	O
rc	int
,	O
1	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
_stream_cleareof	O
(	O
stream	*(struct)
)	O
;	O
return	O
res	long
;	O
}	O
int	O
dico_stream_set_buffer	(*(struct),enum(int,int,int),long)->(int)
(	O
dico_stream_t	*(struct)
stream	*(struct)
,	O
enum	O
dico_buffer_type	enum(int,int,int)
type	enum(int,int,int)
,	O
size_t	long
size	long
)	O
{	O
if	O
(	O
size	long
==	O
0	int
)	O
type	enum(int,int,int)
=	O
dico_buffer_none	int
;	O
if	O
(	O
stream	*(struct)
->	O
buffer	*(char)
)	O
{	O
dico_stream_flush	(*(struct))->(int)
(	O
stream	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
stream	*(struct)
->	O
buffer	*(char)
)	O
;	O
}	O
stream	*(struct)
->	O
buftype	enum(int,int,int)
=	O
type	enum(int,int,int)
;	O
if	O
(	O
type	enum(int,int,int)
==	O
dico_buffer_none	int
)	O
{	O
stream	*(struct)
->	O
buffer	*(char)
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
stream	*(struct)
->	O
buffer	*(char)
=	O
malloc	(long)->(*(void))
(	O
size	long
)	O
;	O
if	O
(	O
stream	*(struct)
->	O
buffer	*(char)
==	O
NULL	O
)	O
{	O
stream	*(struct)
->	O
buftype	enum(int,int,int)
=	O
dico_buffer_none	int
;	O
return	O
_stream_seterror	(*(struct(enum(int,int,int),long,*(char),long,*(char),int,long,long,int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,int,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int)),*((*`,int)->(*`)),*(void))),int,int)->(int)
(	O
stream	*(struct)
,	O
ENOMEM	int
,	O
1	int
)	O
;	O
}	O
stream	*(struct)
->	O
bufsize	long
=	O
size	long
;	O
stream	*(struct)
->	O
cur	*(char)
=	O
stream	*(struct)
->	O
buffer	*(char)
;	O
stream	*(struct)
->	O
level	int
=	O
0	int
;	O
return	O
0	int
;	O
}	O
int	O
dico_stream_read_unbuffered	(*(struct),*(void),long,*(long))->(int)
(	O
dico_stream_t	*(struct)
stream	*(struct)
,	O
void	O
*	O
buf	*(void)
,	O
size_t	long
size	long
,	O
size_t	long
*	O
pread	*(long)
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
if	O
(	O
!	O
stream	*(struct)
->	O
read	*((*(void))->(int))
)	O
return	O
_stream_seterror	(*(struct(enum(int,int,int),long,*(char),long,*(char),int,long,long,int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,int,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int)),*((*`,int)->(*`)),*(void))),int,int)->(int)
(	O
stream	*(struct)
,	O
ENOSYS	int
,	O
0	int
)	O
;	O
if	O
(	O
!	O
(	O
stream	*(struct)
->	O
flags	int
&	O
DICO_STREAM_READ	int
)	O
)	O
return	O
_stream_seterror	(*(struct(enum(int,int,int),long,*(char),long,*(char),int,long,long,int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,int,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int)),*((*`,int)->(*`)),*(void))),int,int)->(int)
(	O
stream	*(struct)
,	O
EACCES	int
,	O
1	int
)	O
;	O
if	O
(	O
stream	*(struct)
->	O
flags	int
&	O
_STR_ERR	int
)	O
return	O
stream	*(struct)
->	O
last_err	int
;	O
if	O
(	O
(	O
stream	*(struct)
->	O
flags	int
&	O
_STR_EOF	int
)	O
||	O
size	long
==	O
0	int
)	O
{	O
if	O
(	O
pread	*(long)
)	O
{	O
*	O
pread	*(long)
=	O
0	int
;	O
return	O
0	int
;	O
}	O
else	O
{	O
_stream_seterror	(*(struct(enum(int,int,int),long,*(char),long,*(char),int,long,long,int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,int,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int)),*((*`,int)->(*`)),*(void))),int,int)->(int)
(	O
stream	*(struct)
,	O
EIO	int
,	O
0	int
)	O
;	O
return	O
EIO	int
;	O
}	O
}	O
if	O
(	O
pread	*(long)
==	O
NULL	O
)	O
{	O
size_t	long
rdbytes	long
;	O
while	O
(	O
size	long
>	O
0	int
&&	O
(	O
rc	int
=	O
stream	*(struct)
->	O
read	*((*(void))->(int))
(	O
stream	*(struct)
->	O
data	*(void)
,	O
buf	*(void)
,	O
size	long
,	O
&	O
rdbytes	long
)	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
rdbytes	long
==	O
0	int
)	O
{	O
stream	*(struct)
->	O
flags	int
|=	O
_STR_EOF	int
;	O
break	O
;	O
}	O
buf	*(void)
+=	O
rdbytes	long
;	O
size	long
-=	O
rdbytes	long
;	O
stream	*(struct)
->	O
bytes_in	long
+=	O
rdbytes	long
;	O
}	O
if	O
(	O
size	long
)	O
{	O
_stream_seterror	(*(struct(enum(int,int,int),long,*(char),long,*(char),int,long,long,int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,int,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int)),*((*`,int)->(*`)),*(void))),int,int)->(int)
(	O
stream	*(struct)
,	O
EIO	int
,	O
0	int
)	O
;	O
return	O
EIO	int
;	O
}	O
}	O
else	O
{	O
rc	int
=	O
stream	*(struct)
->	O
read	*((*(void))->(int))
(	O
stream	*(struct)
->	O
data	*(void)
,	O
buf	*(void)
,	O
size	long
,	O
pread	*(long)
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
*	O
pread	*(long)
==	O
0	int
)	O
stream	*(struct)
->	O
flags	int
|=	O
_STR_EOF	int
;	O
stream	*(struct)
->	O
bytes_in	long
+=	O
*	O
pread	*(long)
;	O
}	O
}	O
_stream_seterror	(*(struct(enum(int,int,int),long,*(char),long,*(char),int,long,long,int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,int,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int)),*((*`,int)->(*`)),*(void))),int,int)->(int)
(	O
stream	*(struct)
,	O
rc	int
,	O
rc	int
!=	O
0	int
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
dico_stream_write_unbuffered	(*(struct),*(void),long,*(long))->(int)
(	O
dico_stream_t	*(struct)
stream	*(struct)
,	O
const	O
void	O
*	O
buf	*(void)
,	O
size_t	long
size	long
,	O
size_t	long
*	O
pwrite	*(long)
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
!	O
stream	*(struct)
->	O
write	*((*(void),*(char),long,*(long))->(int))
)	O
return	O
_stream_seterror	(*(struct(enum(int,int,int),long,*(char),long,*(char),int,long,long,int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,int,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int)),*((*`,int)->(*`)),*(void))),int,int)->(int)
(	O
stream	*(struct)
,	O
ENOSYS	int
,	O
0	int
)	O
;	O
if	O
(	O
!	O
(	O
stream	*(struct)
->	O
flags	int
&	O
DICO_STREAM_WRITE	int
)	O
)	O
return	O
_stream_seterror	(*(struct(enum(int,int,int),long,*(char),long,*(char),int,long,long,int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,int,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int)),*((*`,int)->(*`)),*(void))),int,int)->(int)
(	O
stream	*(struct)
,	O
EACCES	int
,	O
1	int
)	O
;	O
if	O
(	O
stream	*(struct)
->	O
flags	int
&	O
_STR_ERR	int
)	O
return	O
stream	*(struct)
->	O
last_err	int
;	O
if	O
(	O
size	long
==	O
0	int
)	O
{	O
if	O
(	O
pwrite	*(long)
)	O
*	O
pwrite	*(long)
=	O
0	int
;	O
return	O
0	int
;	O
}	O
if	O
(	O
pwrite	*(long)
==	O
NULL	O
)	O
{	O
size_t	long
wrbytes	long
;	O
const	O
char	O
*	O
bufp	*(char)
=	O
buf	*(void)
;	O
while	O
(	O
size	long
>	O
0	int
&&	O
(	O
rc	int
=	O
stream	*(struct)
->	O
write	*((*(void),*(char),long,*(long))->(int))
(	O
stream	*(struct)
->	O
data	*(void)
,	O
bufp	*(char)
,	O
size	long
,	O
&	O
wrbytes	long
)	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
wrbytes	long
==	O
0	int
)	O
{	O
rc	int
=	O
EIO	int
;	O
break	O
;	O
}	O
bufp	*(char)
+=	O
wrbytes	long
;	O
size	long
-=	O
wrbytes	long
;	O
stream	*(struct)
->	O
bytes_out	long
+=	O
wrbytes	long
;	O
}	O
}	O
else	O
{	O
rc	int
=	O
stream	*(struct)
->	O
write	*((*(void),*(char),long,*(long))->(int))
(	O
stream	*(struct)
->	O
data	*(void)
,	O
buf	*(void)
,	O
size	long
,	O
pwrite	*(long)
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
stream	*(struct)
->	O
bytes_out	long
+=	O
*	O
pwrite	*(long)
;	O
}	O
_stream_seterror	(*(struct(enum(int,int,int),long,*(char),long,*(char),int,long,long,int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,int,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int)),*((*`,int)->(*`)),*(void))),int,int)->(int)
(	O
stream	*(struct)
,	O
rc	int
,	O
rc	int
!=	O
0	int
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_stream_fill_buffer	(*(struct(enum(int,int,int),long,*(char),long,*(char),int,long,long,int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,int,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int)),*((*`,int)->(*`)),*(void))))->(int)
(	O
dico_stream_t	*(struct)
stream	*(struct)
)	O
{	O
size_t	long
n	long
;	O
int	O
rc	int
=	O
0	int
;	O
char	O
c	int
;	O
switch	O
(	O
stream	*(struct)
->	O
buftype	enum(int,int,int)
)	O
{	O
case	O
dico_buffer_none	int
:	O
return	O
0	int
;	O
case	O
dico_buffer_full	int
:	O
if	O
(	O
dico_stream_read_unbuffered	(*(struct),*(void),long,*(long))->(int)
(	O
stream	*(struct)
,	O
stream	*(struct)
->	O
buffer	*(char)
,	O
stream	*(struct)
->	O
bufsize	long
,	O
&	O
stream	*(struct)
->	O
level	int
)	O
)	O
return	O
1	int
;	O
break	O
;	O
case	O
dico_buffer_line	int
:	O
for	O
(	O
n	long
=	O
0	int
;	O
n	long
<	O
stream	*(struct)
->	O
bufsize	long
&&	O
(	O
rc	int
=	O
dico_stream_read_unbuffered	(*(struct),*(void),long,*(long))->(int)
(	O
stream	*(struct)
,	O
&	O
c	int
,	O
1	int
,	O
NULL	O
)	O
)	O
==	O
0	int
;	O
)	O
{	O
stream	*(struct)
->	O
buffer	*(char)
[	O
n	long
++	O
]	O
=	O
c	int
;	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
break	O
;	O
}	O
stream	*(struct)
->	O
level	int
=	O
n	long
;	O
break	O
;	O
}	O
stream	*(struct)
->	O
cur	*(char)
=	O
stream	*(struct)
->	O
buffer	*(char)
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_stream_buffer_full_p	(*(struct(enum(int,int,int),long,*(char),long,*(char),int,long,long,int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,int,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int)),*((*`,int)->(*`)),*(void))))->(int)
(	O
dico_stream_t	*(struct)
stream	*(struct)
)	O
{	O
switch	O
(	O
stream	*(struct)
->	O
buftype	enum(int,int,int)
)	O
{	O
case	O
dico_buffer_none	int
:	O
break	O
;	O
case	O
dico_buffer_line	int
:	O
return	O
BUFFER_FULL_P	O
(	O
stream	*(struct)
)	O
||	O
memchr	(*(void),int,long)->(*(void))
(	O
stream	*(struct)
->	O
cur	*(char)
,	O
'\n'	O
,	O
stream	*(struct)
->	O
level	int
)	O
!=	O
NULL	O
;	O
case	O
dico_buffer_full	int
:	O
return	O
BUFFER_FULL_P	O
(	O
stream	*(struct)
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
_stream_flush_buffer	(*(struct(enum(int,int,int),long,*(char),long,*(char),int,long,long,int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,int,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int)),*((*`,int)->(*`)),*(void))),int)->(int)
(	O
dico_stream_t	*(struct)
stream	*(struct)
,	O
int	O
all	int
)	O
{	O
char	O
*	O
end	int
;	O
if	O
(	O
stream	*(struct)
->	O
flags	int
&	O
_STR_DIRTY	int
)	O
{	O
if	O
(	O
(	O
stream	*(struct)
->	O
flags	int
&	O
DICO_STREAM_SEEK	int
)	O
&&	O
dico_stream_seek	(*(struct),long,int)->(long)
(	O
stream	*(struct)
,	O
-	O
_stream_orig_level	O
(	O
stream	*(struct)
)	O
,	O
DICO_SEEK_CUR	int
)	O
<	O
0	int
)	O
return	O
1	int
;	O
switch	O
(	O
stream	*(struct)
->	O
buftype	enum(int,int,int)
)	O
{	O
case	O
dico_buffer_none	int
:	O
abort	()->(void)
(	O
)	O
;	O
case	O
dico_buffer_full	int
:	O
if	O
(	O
dico_stream_write_unbuffered	(*(struct),*(void),long,*(long))->(int)
(	O
stream	*(struct)
,	O
stream	*(struct)
->	O
cur	*(char)
,	O
stream	*(struct)
->	O
level	int
,	O
NULL	O
)	O
)	O
return	O
1	int
;	O
_stream_advance_buffer	O
(	O
stream	*(struct)
,	O
stream	*(struct)
->	O
level	int
)	O
;	O
break	O
;	O
case	O
dico_buffer_line	int
:	O
if	O
(	O
stream	*(struct)
->	O
level	int
==	O
0	int
)	O
break	O
;	O
for	O
(	O
end	int
=	O
memchr	(*(void),int,long)->(*(void))
(	O
stream	*(struct)
->	O
cur	*(char)
,	O
'\n'	O
,	O
stream	*(struct)
->	O
level	int
)	O
;	O
end	int
;	O
end	int
=	O
memchr	(*(void),int,long)->(*(void))
(	O
stream	*(struct)
->	O
cur	*(char)
,	O
'\n'	O
,	O
stream	*(struct)
->	O
level	int
)	O
)	O
{	O
size_t	long
size	long
=	O
end	int
-	O
stream	*(struct)
->	O
cur	*(char)
+	O
1	int
;	O
int	O
rc	int
=	O
dico_stream_write_unbuffered	(*(struct),*(void),long,*(long))->(int)
(	O
stream	*(struct)
,	O
stream	*(struct)
->	O
cur	*(char)
,	O
size	long
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
_stream_advance_buffer	O
(	O
stream	*(struct)
,	O
size	long
)	O
;	O
}	O
if	O
(	O
(	O
all	int
&&	O
stream	*(struct)
->	O
level	int
)	O
||	O
BUFFER_FULL_P	O
(	O
stream	*(struct)
)	O
)	O
{	O
int	O
rc	int
=	O
dico_stream_write_unbuffered	(*(struct),*(void),long,*(long))->(int)
(	O
stream	*(struct)
,	O
stream	*(struct)
->	O
cur	*(char)
,	O
stream	*(struct)
->	O
level	int
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
_stream_advance_buffer	O
(	O
stream	*(struct)
,	O
stream	*(struct)
->	O
level	int
)	O
;	O
}	O
}	O
}	O
if	O
(	O
stream	*(struct)
->	O
level	int
)	O
{	O
if	O
(	O
stream	*(struct)
->	O
cur	*(char)
>	O
stream	*(struct)
->	O
buffer	*(char)
)	O
memmove	(*(void),*(void),long)->(*(void))
(	O
stream	*(struct)
->	O
buffer	*(char)
,	O
stream	*(struct)
->	O
cur	*(char)
,	O
stream	*(struct)
->	O
level	int
)	O
;	O
}	O
else	O
{	O
stream	*(struct)
->	O
flags	int
&=	O
~	O
_STR_DIRTY	int
;	O
stream	*(struct)
->	O
level	int
=	O
0	int
;	O
}	O
stream	*(struct)
->	O
cur	*(char)
=	O
stream	*(struct)
->	O
buffer	*(char)
;	O
return	O
0	int
;	O
}	O
int	O
dico_stream_read	(*(struct),*(void),long,*(long))->(int)
(	O
dico_stream_t	*(struct)
stream	*(struct)
,	O
void	O
*	O
buf	*(void)
,	O
size_t	long
size	long
,	O
size_t	long
*	O
pread	*(long)
)	O
{	O
if	O
(	O
stream	*(struct)
->	O
buftype	enum(int,int,int)
==	O
dico_buffer_none	int
)	O
return	O
dico_stream_read_unbuffered	(*(struct),*(void),long,*(long))->(int)
(	O
stream	*(struct)
,	O
buf	*(void)
,	O
size	long
,	O
pread	*(long)
)	O
;	O
else	O
{	O
char	O
*	O
bufp	*(char)
=	O
buf	*(void)
;	O
size_t	long
nbytes	long
=	O
0	int
;	O
if	O
(	O
stream	*(struct)
->	O
flags	int
&	O
_STR_ERR	int
)	O
return	O
stream	*(struct)
->	O
last_err	int
;	O
while	O
(	O
size	long
)	O
{	O
size_t	long
n	long
;	O
if	O
(	O
stream	*(struct)
->	O
level	int
==	O
0	int
)	O
{	O
if	O
(	O
_stream_fill_buffer	(*(struct(enum(int,int,int),long,*(char),long,*(char),int,long,long,int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,int,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int)),*((*`,int)->(*`)),*(void))))->(int)
(	O
stream	*(struct)
)	O
)	O
{	O
if	O
(	O
nbytes	long
)	O
break	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
stream	*(struct)
->	O
level	int
==	O
0	int
)	O
break	O
;	O
}	O
n	long
=	O
size	long
;	O
if	O
(	O
n	long
>	O
stream	*(struct)
->	O
level	int
)	O
n	long
=	O
stream	*(struct)
->	O
level	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
bufp	*(char)
,	O
stream	*(struct)
->	O
cur	*(char)
,	O
n	long
)	O
;	O
_stream_advance_buffer	O
(	O
stream	*(struct)
,	O
n	long
)	O
;	O
nbytes	long
+=	O
n	long
;	O
bufp	*(char)
+=	O
n	long
;	O
size	long
-=	O
n	long
;	O
if	O
(	O
stream	*(struct)
->	O
buftype	enum(int,int,int)
==	O
dico_buffer_line	int
&&	O
bufp	*(char)
[	O
-	O
1	int
]	O
==	O
'\n'	O
)	O
break	O
;	O
}	O
if	O
(	O
pread	*(long)
)	O
*	O
pread	*(long)
=	O
nbytes	long
;	O
else	O
if	O
(	O
size	long
)	O
return	O
_stream_seterror	(*(struct(enum(int,int,int),long,*(char),long,*(char),int,long,long,int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,int,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int)),*((*`,int)->(*`)),*(void))),int,int)->(int)
(	O
stream	*(struct)
,	O
EIO	int
,	O
1	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
dico_stream_readln	(*(struct),*(char),long,*(long))->(int)
(	O
dico_stream_t	*(struct)
stream	*(struct)
,	O
char	O
*	O
buf	*(void)
,	O
size_t	long
size	long
,	O
size_t	long
*	O
pread	*(long)
)	O
{	O
int	O
rc	int
;	O
char	O
c	int
;	O
size_t	long
n	long
=	O
0	int
;	O
if	O
(	O
size	long
==	O
0	int
)	O
return	O
EIO	int
;	O
size	long
--	O
;	O
for	O
(	O
n	long
=	O
0	int
;	O
n	long
<	O
size	long
&&	O
(	O
rc	int
=	O
dico_stream_read	(*(struct),*(void),long,*(long))->(int)
(	O
stream	*(struct)
,	O
&	O
c	int
,	O
1	int
,	O
NULL	O
)	O
)	O
==	O
0	int
;	O
n	long
++	O
)	O
{	O
*	O
buf	*(void)
++	O
=	O
c	int
;	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
break	O
;	O
}	O
*	O
buf	*(void)
=	O
0	int
;	O
if	O
(	O
pread	*(long)
)	O
*	O
pread	*(long)
=	O
n	long
;	O
return	O
rc	int
;	O
}	O
int	O
dico_stream_getdelim	(*(struct),*(*(char)),*(long),int,*(long))->(int)
(	O
dico_stream_t	*(struct)
stream	*(struct)
,	O
char	O
*	O
*	O
pbuf	*(*(char))
,	O
size_t	long
*	O
psize	*(long)
,	O
int	O
delim	*(char)
,	O
size_t	long
*	O
pread	*(long)
)	O
{	O
int	O
rc	int
;	O
char	O
*	O
lineptr	*(char)
=	O
*	O
pbuf	*(*(char))
;	O
size_t	long
n	long
=	O
*	O
psize	*(long)
;	O
size_t	long
cur_len	long
=	O
0	int
;	O
if	O
(	O
lineptr	*(char)
==	O
NULL	O
||	O
n	long
==	O
0	int
)	O
{	O
char	O
*	O
new_lineptr	*(char)
;	O
n	long
=	O
120	int
;	O
new_lineptr	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
lineptr	*(char)
,	O
n	long
)	O
;	O
if	O
(	O
new_lineptr	*(char)
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
lineptr	*(char)
=	O
new_lineptr	*(char)
;	O
}	O
for	O
(	O
;	O
;	O
)	O
{	O
char	O
c	int
;	O
rc	int
=	O
dico_stream_read	(*(struct),*(void),long,*(long))->(int)
(	O
stream	*(struct)
,	O
&	O
c	int
,	O
1	int
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
if	O
(	O
cur_len	long
+	O
1	int
>=	O
n	long
)	O
{	O
char	O
*	O
new_lineptr	*(char)
;	O
if	O
(	O
(	O
size_t	long
)	O
-	O
1	int
/	O
3	int
*	O
2	int
<=	O
n	long
)	O
{	O
rc	int
=	O
EOVERFLOW	int
;	O
break	O
;	O
}	O
n	long
+=	O
(	O
n	long
+	O
1	int
)	O
/	O
2	int
;	O
new_lineptr	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
lineptr	*(char)
,	O
n	long
)	O
;	O
if	O
(	O
new_lineptr	*(char)
==	O
NULL	O
)	O
{	O
rc	int
=	O
ENOMEM	int
;	O
break	O
;	O
}	O
lineptr	*(char)
=	O
new_lineptr	*(char)
;	O
}	O
lineptr	*(char)
[	O
cur_len	long
]	O
=	O
c	int
;	O
cur_len	long
++	O
;	O
if	O
(	O
c	int
==	O
delim	*(char)
)	O
break	O
;	O
}	O
lineptr	*(char)
[	O
cur_len	long
]	O
=	O
'\0'	O
;	O
*	O
pbuf	*(*(char))
=	O
lineptr	*(char)
;	O
*	O
psize	*(long)
=	O
n	long
;	O
if	O
(	O
pread	*(long)
)	O
*	O
pread	*(long)
=	O
cur_len	long
;	O
return	O
rc	int
;	O
}	O
int	O
dico_stream_getline	(*(struct),*(*(char)),*(long),*(long))->(int)
(	O
dico_stream_t	*(struct)
stream	*(struct)
,	O
char	O
*	O
*	O
pbuf	*(*(char))
,	O
size_t	long
*	O
psize	*(long)
,	O
size_t	long
*	O
pread	*(long)
)	O
{	O
return	O
dico_stream_getdelim	(*(struct),*(*(char)),*(long),int,*(long))->(int)
(	O
stream	*(struct)
,	O
pbuf	*(*(char))
,	O
psize	*(long)
,	O
'\n'	O
,	O
pread	*(long)
)	O
;	O
}	O
int	O
dico_stream_write	(*(struct),*(void),long)->(int)
(	O
dico_stream_t	*(struct)
stream	*(struct)
,	O
const	O
void	O
*	O
buf	*(void)
,	O
size_t	long
size	long
)	O
{	O
if	O
(	O
stream	*(struct)
->	O
buftype	enum(int,int,int)
==	O
dico_buffer_none	int
)	O
return	O
dico_stream_write_unbuffered	(*(struct),*(void),long,*(long))->(int)
(	O
stream	*(struct)
,	O
buf	*(void)
,	O
size	long
,	O
NULL	O
)	O
;	O
else	O
{	O
size_t	long
nbytes	long
=	O
0	int
;	O
const	O
char	O
*	O
bufp	*(char)
=	O
buf	*(void)
;	O
if	O
(	O
stream	*(struct)
->	O
flags	int
&	O
_STR_ERR	int
)	O
return	O
stream	*(struct)
->	O
last_err	int
;	O
while	O
(	O
1	int
)	O
{	O
size_t	long
n	long
;	O
if	O
(	O
_stream_buffer_full_p	(*(struct(enum(int,int,int),long,*(char),long,*(char),int,long,long,int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,int,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int)),*((*`,int)->(*`)),*(void))))->(int)
(	O
stream	*(struct)
)	O
&&	O
_stream_flush_buffer	(*(struct(enum(int,int,int),long,*(char),long,*(char),int,long,long,int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,int,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int)),*((*`,int)->(*`)),*(void))),int)->(int)
(	O
stream	*(struct)
,	O
0	int
)	O
)	O
return	O
1	int
;	O
if	O
(	O
size	long
==	O
0	int
)	O
break	O
;	O
n	long
=	O
stream	*(struct)
->	O
bufsize	long
-	O
stream	*(struct)
->	O
level	int
;	O
if	O
(	O
n	long
>	O
size	long
)	O
n	long
=	O
size	long
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
stream	*(struct)
->	O
cur	*(char)
+	O
stream	*(struct)
->	O
level	int
,	O
bufp	*(char)
,	O
n	long
)	O
;	O
stream	*(struct)
->	O
level	int
+=	O
n	long
;	O
nbytes	long
+=	O
n	long
;	O
bufp	*(char)
+=	O
n	long
;	O
size	long
-=	O
n	long
;	O
stream	*(struct)
->	O
flags	int
|=	O
_STR_DIRTY	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
dico_stream_writeln	(*(struct),*(char),long)->(int)
(	O
dico_stream_t	*(struct)
stream	*(struct)
,	O
const	O
char	O
*	O
buf	*(void)
,	O
size_t	long
size	long
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
(	O
rc	int
=	O
dico_stream_write	(*(struct),*(void),long)->(int)
(	O
stream	*(struct)
,	O
buf	*(void)
,	O
size	long
)	O
)	O
==	O
0	int
)	O
rc	int
=	O
dico_stream_write	(*(struct),*(void),long)->(int)
(	O
stream	*(struct)
,	O
"\n"	*(char)
,	O
1	int
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
dico_stream_flush	(*(struct))->(int)
(	O
dico_stream_t	*(struct)
stream	*(struct)
)	O
{	O
if	O
(	O
!	O
stream	*(struct)
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
1	int
;	O
}	O
if	O
(	O
_stream_flush_buffer	(*(struct(enum(int,int,int),long,*(char),long,*(char),int,long,long,int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,int,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int)),*((*`,int)->(*`)),*(void))),int)->(int)
(	O
stream	*(struct)
,	O
1	int
)	O
)	O
return	O
1	int
;	O
if	O
(	O
stream	*(struct)
->	O
flush	*((*(void))->(int))
)	O
return	O
stream	*(struct)
->	O
flush	*((*(void))->(int))
(	O
stream	*(struct)
->	O
data	*(void)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
dico_stream_close	(*(struct))->(int)
(	O
dico_stream_t	*(struct)
stream	*(struct)
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
if	O
(	O
!	O
stream	*(struct)
)	O
return	O
EINVAL	int
;	O
dico_stream_flush	(*(struct))->(int)
(	O
stream	*(struct)
)	O
;	O
if	O
(	O
stream	*(struct)
->	O
close	*((*(void))->(int))
)	O
rc	int
=	O
stream	*(struct)
->	O
close	*((*(void))->(int))
(	O
stream	*(struct)
->	O
data	*(void)
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
dico_stream_size	(*(struct),*(long))->(int)
(	O
dico_stream_t	*(struct)
stream	*(struct)
,	O
off_t	long
*	O
psize	*(long)
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
!	O
stream	*(struct)
->	O
size	long
)	O
return	O
_stream_seterror	(*(struct(enum(int,int,int),long,*(char),long,*(char),int,long,long,int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,int,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int)),*((*`,int)->(*`)),*(void))),int,int)->(int)
(	O
stream	*(struct)
,	O
ENOSYS	int
,	O
0	int
)	O
;	O
rc	int
=	O
stream	*(struct)
->	O
size	long
(	O
stream	*(struct)
->	O
data	*(void)
,	O
psize	*(long)
)	O
;	O
return	O
_stream_seterror	(*(struct(enum(int,int,int),long,*(char),long,*(char),int,long,long,int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,int,*`)->(int)),*((*`,*`)->(int)),*((*`,int,*`)->(int)),*((*`,int)->(*`)),*(void))),int,int)->(int)
(	O
stream	*(struct)
,	O
rc	int
,	O
rc	int
!=	O
0	int
)	O
;	O
}	O
void	O
dico_stream_destroy	(*(*(struct)))->(void)
(	O
dico_stream_t	*(struct)
*	O
stream	*(struct)
)	O
{	O
if	O
(	O
!	O
stream	*(struct)
||	O
!	O
*	O
stream	*(struct)
)	O
return	O
;	O
if	O
(	O
(	O
*	O
stream	*(struct)
)	O
->	O
destroy	*((*(void))->(int))
)	O
(	O
*	O
stream	*(struct)
)	O
->	O
destroy	*((*(void))->(int))
(	O
(	O
*	O
stream	*(struct)
)	O
->	O
data	*(void)
)	O
;	O
free	(*(void))->(void)
(	O
*	O
stream	*(struct)
)	O
;	O
*	O
stream	*(struct)
=	O
NULL	O
;	O
}	O
off_t	long
dico_stream_bytes_in	(*(struct))->(long)
(	O
dico_stream_t	*(struct)
stream	*(struct)
)	O
{	O
off_t	long
val	long
;	O
if	O
(	O
dico_stream_ioctl	(*(struct),int,*(void))->(int)
(	O
stream	*(struct)
,	O
DICO_IOCTL_BYTES_IN	int
,	O
&	O
val	long
)	O
==	O
0	int
)	O
return	O
val	long
;	O
return	O
stream	*(struct)
->	O
bytes_in	long
;	O
}	O
off_t	long
dico_stream_bytes_out	(*(struct))->(long)
(	O
dico_stream_t	*(struct)
stream	*(struct)
)	O
{	O
off_t	long
val	long
;	O
if	O
(	O
dico_stream_ioctl	(*(struct),int,*(void))->(int)
(	O
stream	*(struct)
,	O
DICO_IOCTL_BYTES_OUT	int
,	O
&	O
val	long
)	O
==	O
0	int
)	O
return	O
val	long
;	O
return	O
stream	*(struct)
->	O
bytes_out	long
;	O
}	O
int	O
dico_stream_ioctl	(*(struct),int,*(void))->(int)
(	O
dico_stream_t	*(struct)
stream	*(struct)
,	O
int	O
code	int
,	O
void	O
*	O
ptr	*(void)
)	O
{	O
if	O
(	O
stream	*(struct)
->	O
ctl	*((*(void),int,*(void))->(int))
==	O
NULL	O
)	O
{	O
errno	O
=	O
ENOSYS	int
;	O
return	O
-	O
1	int
;	O
}	O
return	O
stream	*(struct)
->	O
ctl	*((*(void),int,*(void))->(int))
(	O
stream	*(struct)
->	O
data	*(void)
,	O
code	int
,	O
ptr	*(void)
)	O
;	O
}	O
