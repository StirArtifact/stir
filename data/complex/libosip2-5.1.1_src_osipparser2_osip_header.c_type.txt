int	O
osip_message_set_header	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))),*(char),*(char))->(int)
(	O
osip_message_t	struct
*	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
,	O
const	O
char	O
*	O
hname	*(char)
,	O
const	O
char	O
*	O
hvalue	*(char)
)	O
{	O
osip_header_t	struct
*	O
h	*(struct(*(char),*(char)))
;	O
int	O
i	int
;	O
if	O
(	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
==	O
NULL	O
||	O
hname	*(char)
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
i	int
=	O
osip_header_init	(*(*(struct(*(char),*(char)))))->(int)
(	O
&	O
h	*(struct(*(char),*(char)))
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
h	*(struct(*(char),*(char)))
->	O
hname	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
strlen	(*(char))->(long)
(	O
hname	*(char)
)	O
+	O
1	int
)	O
;	O
if	O
(	O
h	*(struct(*(char),*(char)))
->	O
hname	*(char)
==	O
NULL	O
)	O
{	O
osip_header_free	(*(struct(*(char),*(char))))->(void)
(	O
h	*(struct(*(char),*(char)))
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
osip_clrncpy	(*(char),*(char),long)->(*(char))
(	O
h	*(struct(*(char),*(char)))
->	O
hname	*(char)
,	O
hname	*(char)
,	O
strlen	(*(char))->(long)
(	O
hname	*(char)
)	O
)	O
;	O
if	O
(	O
hvalue	*(char)
!=	O
NULL	O
)	O
{	O
h	*(struct(*(char),*(char)))
->	O
hvalue	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
strlen	(*(char))->(long)
(	O
hvalue	*(char)
)	O
+	O
1	int
)	O
;	O
if	O
(	O
h	*(struct(*(char),*(char)))
->	O
hvalue	*(char)
==	O
NULL	O
)	O
{	O
osip_header_free	(*(struct(*(char),*(char))))->(void)
(	O
h	*(struct(*(char),*(char)))
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
osip_clrncpy	(*(char),*(char),long)->(*(char))
(	O
h	*(struct(*(char),*(char)))
->	O
hvalue	*(char)
,	O
hvalue	*(char)
,	O
strlen	(*(char))->(long)
(	O
hvalue	*(char)
)	O
)	O
;	O
}	O
else	O
h	*(struct(*(char),*(char)))
->	O
hvalue	*(char)
=	O
NULL	O
;	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
->	O
message_property	int
=	O
2	int
;	O
osip_list_add	(*(struct(int,*(struct(*`,*`)))),*(void),int)->(int)
(	O
&	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
->	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
,	O
h	*(struct(*(char),*(char)))
,	O
-	O
1	int
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_message_replace_header	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))),*(char),*(char))->(int)
(	O
osip_message_t	struct
*	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
,	O
const	O
char	O
*	O
hname	*(char)
,	O
const	O
char	O
*	O
hvalue	*(char)
)	O
{	O
osip_header_t	struct
*	O
h	*(struct(*(char),*(char)))
,	O
*	O
oldh	*(struct(*(char),*(char)))
;	O
int	O
i	int
,	O
oldpos	int
=	O
-	O
1	int
;	O
if	O
(	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
==	O
NULL	O
||	O
hname	*(char)
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
oldpos	int
=	O
osip_message_header_get_byname	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))),*(char),int,*(*(struct(*(char),*(char)))))->(int)
(	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
,	O
hname	*(char)
,	O
0	int
,	O
&	O
oldh	*(struct(*(char),*(char)))
)	O
;	O
i	int
=	O
osip_header_init	(*(*(struct(*(char),*(char)))))->(int)
(	O
&	O
h	*(struct(*(char),*(char)))
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
h	*(struct(*(char),*(char)))
->	O
hname	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
strlen	(*(char))->(long)
(	O
hname	*(char)
)	O
+	O
1	int
)	O
;	O
if	O
(	O
h	*(struct(*(char),*(char)))
->	O
hname	*(char)
==	O
NULL	O
)	O
{	O
osip_header_free	(*(struct(*(char),*(char))))->(void)
(	O
h	*(struct(*(char),*(char)))
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
osip_clrncpy	(*(char),*(char),long)->(*(char))
(	O
h	*(struct(*(char),*(char)))
->	O
hname	*(char)
,	O
hname	*(char)
,	O
strlen	(*(char))->(long)
(	O
hname	*(char)
)	O
)	O
;	O
if	O
(	O
hvalue	*(char)
!=	O
NULL	O
)	O
{	O
h	*(struct(*(char),*(char)))
->	O
hvalue	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
strlen	(*(char))->(long)
(	O
hvalue	*(char)
)	O
+	O
1	int
)	O
;	O
if	O
(	O
h	*(struct(*(char),*(char)))
->	O
hvalue	*(char)
==	O
NULL	O
)	O
{	O
osip_header_free	(*(struct(*(char),*(char))))->(void)
(	O
h	*(struct(*(char),*(char)))
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
osip_clrncpy	(*(char),*(char),long)->(*(char))
(	O
h	*(struct(*(char),*(char)))
->	O
hvalue	*(char)
,	O
hvalue	*(char)
,	O
strlen	(*(char))->(long)
(	O
hvalue	*(char)
)	O
)	O
;	O
}	O
else	O
h	*(struct(*(char),*(char)))
->	O
hvalue	*(char)
=	O
NULL	O
;	O
if	O
(	O
oldpos	int
!=	O
-	O
1	int
)	O
{	O
osip_list_remove	(*(struct(int,*(struct(*`,*`)))),int)->(int)
(	O
&	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
->	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
,	O
oldpos	int
)	O
;	O
osip_header_free	(*(struct(*(char),*(char))))->(void)
(	O
oldh	*(struct(*(char),*(char)))
)	O
;	O
}	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
->	O
message_property	int
=	O
2	int
;	O
osip_list_add	(*(struct(int,*(struct(*`,*`)))),*(void),int)->(int)
(	O
&	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
->	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
,	O
h	*(struct(*(char),*(char)))
,	O
-	O
1	int
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_message_set_topheader	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))),*(char),*(char))->(int)
(	O
osip_message_t	struct
*	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
,	O
const	O
char	O
*	O
hname	*(char)
,	O
const	O
char	O
*	O
hvalue	*(char)
)	O
{	O
osip_header_t	struct
*	O
h	*(struct(*(char),*(char)))
;	O
int	O
i	int
;	O
if	O
(	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
==	O
NULL	O
||	O
hname	*(char)
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
i	int
=	O
osip_header_init	(*(*(struct(*(char),*(char)))))->(int)
(	O
&	O
h	*(struct(*(char),*(char)))
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
h	*(struct(*(char),*(char)))
->	O
hname	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
strlen	(*(char))->(long)
(	O
hname	*(char)
)	O
+	O
1	int
)	O
;	O
if	O
(	O
h	*(struct(*(char),*(char)))
->	O
hname	*(char)
==	O
NULL	O
)	O
{	O
osip_header_free	(*(struct(*(char),*(char))))->(void)
(	O
h	*(struct(*(char),*(char)))
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
osip_clrncpy	(*(char),*(char),long)->(*(char))
(	O
h	*(struct(*(char),*(char)))
->	O
hname	*(char)
,	O
hname	*(char)
,	O
strlen	(*(char))->(long)
(	O
hname	*(char)
)	O
)	O
;	O
if	O
(	O
hvalue	*(char)
!=	O
NULL	O
)	O
{	O
h	*(struct(*(char),*(char)))
->	O
hvalue	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
strlen	(*(char))->(long)
(	O
hvalue	*(char)
)	O
+	O
1	int
)	O
;	O
if	O
(	O
h	*(struct(*(char),*(char)))
->	O
hvalue	*(char)
==	O
NULL	O
)	O
{	O
osip_header_free	(*(struct(*(char),*(char))))->(void)
(	O
h	*(struct(*(char),*(char)))
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
osip_clrncpy	(*(char),*(char),long)->(*(char))
(	O
h	*(struct(*(char),*(char)))
->	O
hvalue	*(char)
,	O
hvalue	*(char)
,	O
strlen	(*(char))->(long)
(	O
hvalue	*(char)
)	O
)	O
;	O
}	O
else	O
h	*(struct(*(char),*(char)))
->	O
hvalue	*(char)
=	O
NULL	O
;	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
->	O
message_property	int
=	O
2	int
;	O
osip_list_add	(*(struct(int,*(struct(*`,*`)))),*(void),int)->(int)
(	O
&	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
->	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
,	O
h	*(struct(*(char),*(char)))
,	O
0	int
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_message_get_header	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))),int,*(*(struct(*(char),*(char)))))->(int)
(	O
const	O
osip_message_t	struct
*	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
,	O
int	O
pos	int
,	O
osip_header_t	struct
*	O
*	O
dest	*(char)
)	O
{	O
*	O
dest	*(char)
=	O
NULL	O
;	O
if	O
(	O
osip_list_size	(*(struct(int,*(struct(*`,*`)))))->(int)
(	O
&	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
->	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
)	O
<=	O
pos	int
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
*	O
dest	*(char)
=	O
(	O
osip_header_t	struct
*	O
)	O
osip_list_get	(*(struct(int,*(struct(*`,*`)))),int)->(*(void))
(	O
&	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
->	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
,	O
pos	int
)	O
;	O
return	O
pos	int
;	O
}	O
int	O
osip_message_header_get_byname	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))),*(char),int,*(*(struct(*(char),*(char)))))->(int)
(	O
const	O
osip_message_t	struct
*	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
,	O
const	O
char	O
*	O
hname	*(char)
,	O
int	O
pos	int
,	O
osip_header_t	struct
*	O
*	O
dest	*(char)
)	O
{	O
int	O
i	int
;	O
osip_header_t	struct
*	O
tmp	*(struct(*(char),*(char)))
;	O
*	O
dest	*(char)
=	O
NULL	O
;	O
i	int
=	O
pos	int
;	O
if	O
(	O
osip_list_size	(*(struct(int,*(struct(*`,*`)))))->(int)
(	O
&	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
->	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
)	O
<=	O
pos	int
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
while	O
(	O
osip_list_size	(*(struct(int,*(struct(*`,*`)))))->(int)
(	O
&	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
->	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
)	O
>	O
i	int
)	O
{	O
tmp	*(struct(*(char),*(char)))
=	O
(	O
osip_header_t	struct
*	O
)	O
osip_list_get	(*(struct(int,*(struct(*`,*`)))),int)->(*(void))
(	O
&	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
->	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
,	O
i	int
)	O
;	O
if	O
(	O
osip_strcasecmp	(*(char),*(char))->(int)
(	O
tmp	*(struct(*(char),*(char)))
->	O
hname	*(char)
,	O
hname	*(char)
)	O
==	O
0	int
)	O
{	O
*	O
dest	*(char)
=	O
tmp	*(struct(*(char),*(char)))
;	O
return	O
i	int
;	O
}	O
i	int
++	O
;	O
}	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
}	O
int	O
osip_header_init	(*(*(struct(*(char),*(char)))))->(int)
(	O
osip_header_t	struct
*	O
*	O
header	*(*(struct(*(char),*(char))))
)	O
{	O
*	O
header	*(*(struct(*(char),*(char))))
=	O
(	O
osip_header_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
osip_header_t	struct
)	O
)	O
;	O
if	O
(	O
*	O
header	*(*(struct(*(char),*(char))))
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
(	O
*	O
header	*(*(struct(*(char),*(char))))
)	O
->	O
hname	*(char)
=	O
NULL	O
;	O
(	O
*	O
header	*(*(struct(*(char),*(char))))
)	O
->	O
hvalue	*(char)
=	O
NULL	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
osip_header_free	(*(struct(*(char),*(char))))->(void)
(	O
osip_header_t	struct
*	O
header	*(*(struct(*(char),*(char))))
)	O
{	O
if	O
(	O
header	*(*(struct(*(char),*(char))))
==	O
NULL	O
)	O
return	O
;	O
osip_free	O
(	O
header	*(*(struct(*(char),*(char))))
->	O
hname	*(char)
)	O
;	O
osip_free	O
(	O
header	*(*(struct(*(char),*(char))))
->	O
hvalue	*(char)
)	O
;	O
header	*(*(struct(*(char),*(char))))
->	O
hname	*(char)
=	O
NULL	O
;	O
header	*(*(struct(*(char),*(char))))
->	O
hvalue	*(char)
=	O
NULL	O
;	O
osip_free	O
(	O
header	*(*(struct(*(char),*(char))))
)	O
;	O
}	O
int	O
osip_header_to_str	(*(struct(*(char),*(char))),*(*(char)))->(int)
(	O
const	O
osip_header_t	struct
*	O
header	*(*(struct(*(char),*(char))))
,	O
char	O
*	O
*	O
dest	*(char)
)	O
{	O
size_t	long
len	long
,	O
hlen	long
;	O
*	O
dest	*(char)
=	O
NULL	O
;	O
if	O
(	O
(	O
header	*(*(struct(*(char),*(char))))
==	O
NULL	O
)	O
||	O
(	O
header	*(*(struct(*(char),*(char))))
->	O
hname	*(char)
==	O
NULL	O
)	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
len	long
=	O
0	int
;	O
hlen	long
=	O
strlen	(*(char))->(long)
(	O
header	*(*(struct(*(char),*(char))))
->	O
hname	*(char)
)	O
;	O
if	O
(	O
header	*(*(struct(*(char),*(char))))
->	O
hvalue	*(char)
!=	O
NULL	O
)	O
len	long
=	O
strlen	(*(char))->(long)
(	O
header	*(*(struct(*(char),*(char))))
->	O
hvalue	*(char)
)	O
;	O
*	O
dest	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
hlen	long
+	O
len	long
+	O
3	int
)	O
;	O
if	O
(	O
*	O
dest	*(char)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
if	O
(	O
header	*(*(struct(*(char),*(char))))
->	O
hvalue	*(char)
!=	O
NULL	O
)	O
snprintf	(*(char),long,*(char))->(int)
(	O
*	O
dest	*(char)
,	O
hlen	long
+	O
len	long
+	O
3	int
,	O
"%s: %s"	*(char)
,	O
header	*(*(struct(*(char),*(char))))
->	O
hname	*(char)
,	O
header	*(*(struct(*(char),*(char))))
->	O
hvalue	*(char)
)	O
;	O
else	O
snprintf	(*(char),long,*(char))->(int)
(	O
*	O
dest	*(char)
,	O
hlen	long
+	O
len	long
+	O
3	int
,	O
"%s: "	*(char)
,	O
header	*(*(struct(*(char),*(char))))
->	O
hname	*(char)
)	O
;	O
if	O
(	O
*	O
dest	*(char)
[	O
0	int
]	O
>=	O
'a'	O
&&	O
*	O
dest	*(char)
[	O
0	int
]	O
<=	O
'z'	O
)	O
*	O
dest	*(char)
[	O
0	int
]	O
=	O
(	O
*	O
dest	*(char)
[	O
0	int
]	O
-	O
32	int
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
char	O
*	O
osip_header_get_name	(*(struct(*(char),*(char))))->(*(char))
(	O
const	O
osip_header_t	struct
*	O
header	*(*(struct(*(char),*(char))))
)	O
{	O
if	O
(	O
header	*(*(struct(*(char),*(char))))
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
header	*(*(struct(*(char),*(char))))
->	O
hname	*(char)
;	O
}	O
void	O
osip_header_set_name	(*(struct(*(char),*(char))),*(char))->(void)
(	O
osip_header_t	struct
*	O
header	*(*(struct(*(char),*(char))))
,	O
char	O
*	O
name	*(char)
)	O
{	O
header	*(*(struct(*(char),*(char))))
->	O
hname	*(char)
=	O
name	*(char)
;	O
}	O
char	O
*	O
osip_header_get_value	(*(struct(*(char),*(char))))->(*(char))
(	O
const	O
osip_header_t	struct
*	O
header	*(*(struct(*(char),*(char))))
)	O
{	O
if	O
(	O
header	*(*(struct(*(char),*(char))))
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
header	*(*(struct(*(char),*(char))))
->	O
hvalue	*(char)
;	O
}	O
void	O
osip_header_set_value	(*(struct(*(char),*(char))),*(char))->(void)
(	O
osip_header_t	struct
*	O
header	*(*(struct(*(char),*(char))))
,	O
char	O
*	O
value	*(char)
)	O
{	O
header	*(*(struct(*(char),*(char))))
->	O
hvalue	*(char)
=	O
value	*(char)
;	O
}	O
int	O
osip_header_clone	(*(struct(*(char),*(char))),*(*(struct(*(char),*(char)))))->(int)
(	O
const	O
osip_header_t	struct
*	O
header	*(*(struct(*(char),*(char))))
,	O
osip_header_t	struct
*	O
*	O
dest	*(char)
)	O
{	O
int	O
i	int
;	O
osip_header_t	struct
*	O
he	*(struct(*(char),*(char)))
;	O
*	O
dest	*(char)
=	O
NULL	O
;	O
if	O
(	O
header	*(*(struct(*(char),*(char))))
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
header	*(*(struct(*(char),*(char))))
->	O
hname	*(char)
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
i	int
=	O
osip_header_init	(*(*(struct(*(char),*(char)))))->(int)
(	O
&	O
he	*(struct(*(char),*(char)))
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
he	*(struct(*(char),*(char)))
->	O
hname	*(char)
=	O
osip_strdup	(*(char))->(*(char))
(	O
header	*(*(struct(*(char),*(char))))
->	O
hname	*(char)
)	O
;	O
if	O
(	O
he	*(struct(*(char),*(char)))
->	O
hname	*(char)
==	O
NULL	O
)	O
{	O
osip_header_free	(*(struct(*(char),*(char))))->(void)
(	O
he	*(struct(*(char),*(char)))
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
if	O
(	O
header	*(*(struct(*(char),*(char))))
->	O
hvalue	*(char)
!=	O
NULL	O
)	O
{	O
he	*(struct(*(char),*(char)))
->	O
hvalue	*(char)
=	O
osip_strdup	(*(char))->(*(char))
(	O
header	*(*(struct(*(char),*(char))))
->	O
hvalue	*(char)
)	O
;	O
if	O
(	O
he	*(struct(*(char),*(char)))
->	O
hvalue	*(char)
==	O
NULL	O
)	O
{	O
osip_header_free	(*(struct(*(char),*(char))))->(void)
(	O
he	*(struct(*(char),*(char)))
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
}	O
*	O
dest	*(char)
=	O
he	*(struct(*(char),*(char)))
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
