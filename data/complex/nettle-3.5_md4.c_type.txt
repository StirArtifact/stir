static	O
void	O
md4_transform	(*(int),*(int))->(void)
(	O
uint32_t	int
*	O
digest	*(char)
,	O
const	O
uint32_t	int
*	O
data	*(char)
)	O
;	O
static	O
void	O
md4_compress	(*(struct(array(int),long,int,array(char))),*(char))->(void)
(	O
struct	O
md4_ctx	struct(array(int),long,int,array(char))
*	O
ctx	*(void)
,	O
const	O
uint8_t	char
*	O
block	array(char)
)	O
;	O
void	O
md4_init	O
(	O
struct	O
md4_ctx	struct(array(int),long,int,array(char))
*	O
ctx	*(void)
)	O
{	O
const	O
uint32_t	int
iv	array(int)
[	O
_MD4_DIGEST_LENGTH	int
]	O
=	O
{	O
0x67452301	int
,	O
0xefcdab89	int
,	O
0x98badcfe	int
,	O
0x10325476	int
,	O
}	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
ctx	*(void)
->	O
state	array(int)
,	O
iv	array(int)
,	O
sizeof	O
(	O
ctx	*(void)
->	O
state	array(int)
)	O
)	O
;	O
ctx	*(void)
->	O
count	long
=	O
0	int
;	O
ctx	*(void)
->	O
index	(*(char),int)->(*(char))
=	O
0	int
;	O
}	O
void	O
md4_update	O
(	O
struct	O
md4_ctx	struct(array(int),long,int,array(char))
*	O
ctx	*(void)
,	O
size_t	long
length	long
,	O
const	O
uint8_t	char
*	O
data	*(char)
)	O
{	O
MD_UPDATE	O
(	O
ctx	*(void)
,	O
length	long
,	O
data	*(char)
,	O
md4_compress	(*(struct(array(int),long,int,array(char))),*(char))->(void)
,	O
ctx	*(void)
->	O
count	long
++	O
)	O
;	O
}	O
void	O
md4_digest	O
(	O
struct	O
md4_ctx	struct(array(int),long,int,array(char))
*	O
ctx	*(void)
,	O
size_t	long
length	long
,	O
uint8_t	char
*	O
digest	*(char)
)	O
{	O
uint64_t	long
bit_count	long
;	O
uint32_t	int
data	*(char)
[	O
MD4_DATA_LENGTH	int
]	O
;	O
unsigned	O
i	int
;	O
assert	O
(	O
length	long
<=	O
MD4_DIGEST_SIZE	int
)	O
;	O
MD_PAD	O
(	O
ctx	*(void)
,	O
8	int
,	O
md4_compress	(*(struct(array(int),long,int,array(char))),*(char))->(void)
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
MD4_DATA_LENGTH	int
-	O
2	int
;	O
i	int
++	O
)	O
data	*(char)
[	O
i	int
]	O
=	O
LE_READ_UINT32	O
(	O
ctx	*(void)
->	O
block	array(char)
+	O
4	int
*	O
i	int
)	O
;	O
bit_count	long
=	O
(	O
ctx	*(void)
->	O
count	long
<<	O
9	int
)	O
|	O
(	O
ctx	*(void)
->	O
index	(*(char),int)->(*(char))
<<	O
3	int
)	O
;	O
data	*(char)
[	O
MD4_DATA_LENGTH	int
-	O
2	int
]	O
=	O
bit_count	long
;	O
data	*(char)
[	O
MD4_DATA_LENGTH	int
-	O
1	int
]	O
=	O
bit_count	long
>>	O
32	int
;	O
md4_transform	(*(int),*(int))->(void)
(	O
ctx	*(void)
->	O
state	array(int)
,	O
data	*(char)
)	O
;	O
_nettle_write_le32	(long,*(char),*(int))->(void)
(	O
length	long
,	O
digest	*(char)
,	O
ctx	*(void)
->	O
state	array(int)
)	O
;	O
md4_init	O
(	O
ctx	*(void)
)	O
;	O
}	O
static	O
void	O
md4_transform	(*(int),*(int))->(void)
(	O
uint32_t	int
*	O
digest	*(char)
,	O
const	O
uint32_t	int
*	O
data	*(char)
)	O
{	O
uint32_t	int
a	int
,	O
b	array(char)
,	O
c	int
,	O
d	int
;	O
a	int
=	O
digest	*(char)
[	O
0	int
]	O
;	O
b	array(char)
=	O
digest	*(char)
[	O
1	int
]	O
;	O
c	int
=	O
digest	*(char)
[	O
2	int
]	O
;	O
d	int
=	O
digest	*(char)
[	O
3	int
]	O
;	O
ROUND	O
(	O
F	O
,	O
a	int
,	O
b	array(char)
,	O
c	int
,	O
d	int
,	O
data	*(char)
[	O
0	int
]	O
,	O
3	int
)	O
;	O
ROUND	O
(	O
F	O
,	O
d	int
,	O
a	int
,	O
b	array(char)
,	O
c	int
,	O
data	*(char)
[	O
1	int
]	O
,	O
7	int
)	O
;	O
ROUND	O
(	O
F	O
,	O
c	int
,	O
d	int
,	O
a	int
,	O
b	array(char)
,	O
data	*(char)
[	O
2	int
]	O
,	O
11	int
)	O
;	O
ROUND	O
(	O
F	O
,	O
b	array(char)
,	O
c	int
,	O
d	int
,	O
a	int
,	O
data	*(char)
[	O
3	int
]	O
,	O
19	int
)	O
;	O
ROUND	O
(	O
F	O
,	O
a	int
,	O
b	array(char)
,	O
c	int
,	O
d	int
,	O
data	*(char)
[	O
4	int
]	O
,	O
3	int
)	O
;	O
ROUND	O
(	O
F	O
,	O
d	int
,	O
a	int
,	O
b	array(char)
,	O
c	int
,	O
data	*(char)
[	O
5	int
]	O
,	O
7	int
)	O
;	O
ROUND	O
(	O
F	O
,	O
c	int
,	O
d	int
,	O
a	int
,	O
b	array(char)
,	O
data	*(char)
[	O
6	int
]	O
,	O
11	int
)	O
;	O
ROUND	O
(	O
F	O
,	O
b	array(char)
,	O
c	int
,	O
d	int
,	O
a	int
,	O
data	*(char)
[	O
7	int
]	O
,	O
19	int
)	O
;	O
ROUND	O
(	O
F	O
,	O
a	int
,	O
b	array(char)
,	O
c	int
,	O
d	int
,	O
data	*(char)
[	O
8	int
]	O
,	O
3	int
)	O
;	O
ROUND	O
(	O
F	O
,	O
d	int
,	O
a	int
,	O
b	array(char)
,	O
c	int
,	O
data	*(char)
[	O
9	int
]	O
,	O
7	int
)	O
;	O
ROUND	O
(	O
F	O
,	O
c	int
,	O
d	int
,	O
a	int
,	O
b	array(char)
,	O
data	*(char)
[	O
10	int
]	O
,	O
11	int
)	O
;	O
ROUND	O
(	O
F	O
,	O
b	array(char)
,	O
c	int
,	O
d	int
,	O
a	int
,	O
data	*(char)
[	O
11	int
]	O
,	O
19	int
)	O
;	O
ROUND	O
(	O
F	O
,	O
a	int
,	O
b	array(char)
,	O
c	int
,	O
d	int
,	O
data	*(char)
[	O
12	int
]	O
,	O
3	int
)	O
;	O
ROUND	O
(	O
F	O
,	O
d	int
,	O
a	int
,	O
b	array(char)
,	O
c	int
,	O
data	*(char)
[	O
13	int
]	O
,	O
7	int
)	O
;	O
ROUND	O
(	O
F	O
,	O
c	int
,	O
d	int
,	O
a	int
,	O
b	array(char)
,	O
data	*(char)
[	O
14	int
]	O
,	O
11	int
)	O
;	O
ROUND	O
(	O
F	O
,	O
b	array(char)
,	O
c	int
,	O
d	int
,	O
a	int
,	O
data	*(char)
[	O
15	int
]	O
,	O
19	int
)	O
;	O
ROUND	O
(	O
G	O
,	O
a	int
,	O
b	array(char)
,	O
c	int
,	O
d	int
,	O
data	*(char)
[	O
0	int
]	O
+	O
0x5a827999	int
,	O
3	int
)	O
;	O
ROUND	O
(	O
G	O
,	O
d	int
,	O
a	int
,	O
b	array(char)
,	O
c	int
,	O
data	*(char)
[	O
4	int
]	O
+	O
0x5a827999	int
,	O
5	int
)	O
;	O
ROUND	O
(	O
G	O
,	O
c	int
,	O
d	int
,	O
a	int
,	O
b	array(char)
,	O
data	*(char)
[	O
8	int
]	O
+	O
0x5a827999	int
,	O
9	int
)	O
;	O
ROUND	O
(	O
G	O
,	O
b	array(char)
,	O
c	int
,	O
d	int
,	O
a	int
,	O
data	*(char)
[	O
12	int
]	O
+	O
0x5a827999	int
,	O
13	int
)	O
;	O
ROUND	O
(	O
G	O
,	O
a	int
,	O
b	array(char)
,	O
c	int
,	O
d	int
,	O
data	*(char)
[	O
1	int
]	O
+	O
0x5a827999	int
,	O
3	int
)	O
;	O
ROUND	O
(	O
G	O
,	O
d	int
,	O
a	int
,	O
b	array(char)
,	O
c	int
,	O
data	*(char)
[	O
5	int
]	O
+	O
0x5a827999	int
,	O
5	int
)	O
;	O
ROUND	O
(	O
G	O
,	O
c	int
,	O
d	int
,	O
a	int
,	O
b	array(char)
,	O
data	*(char)
[	O
9	int
]	O
+	O
0x5a827999	int
,	O
9	int
)	O
;	O
ROUND	O
(	O
G	O
,	O
b	array(char)
,	O
c	int
,	O
d	int
,	O
a	int
,	O
data	*(char)
[	O
13	int
]	O
+	O
0x5a827999	int
,	O
13	int
)	O
;	O
ROUND	O
(	O
G	O
,	O
a	int
,	O
b	array(char)
,	O
c	int
,	O
d	int
,	O
data	*(char)
[	O
2	int
]	O
+	O
0x5a827999	int
,	O
3	int
)	O
;	O
ROUND	O
(	O
G	O
,	O
d	int
,	O
a	int
,	O
b	array(char)
,	O
c	int
,	O
data	*(char)
[	O
6	int
]	O
+	O
0x5a827999	int
,	O
5	int
)	O
;	O
ROUND	O
(	O
G	O
,	O
c	int
,	O
d	int
,	O
a	int
,	O
b	array(char)
,	O
data	*(char)
[	O
10	int
]	O
+	O
0x5a827999	int
,	O
9	int
)	O
;	O
ROUND	O
(	O
G	O
,	O
b	array(char)
,	O
c	int
,	O
d	int
,	O
a	int
,	O
data	*(char)
[	O
14	int
]	O
+	O
0x5a827999	int
,	O
13	int
)	O
;	O
ROUND	O
(	O
G	O
,	O
a	int
,	O
b	array(char)
,	O
c	int
,	O
d	int
,	O
data	*(char)
[	O
3	int
]	O
+	O
0x5a827999	int
,	O
3	int
)	O
;	O
ROUND	O
(	O
G	O
,	O
d	int
,	O
a	int
,	O
b	array(char)
,	O
c	int
,	O
data	*(char)
[	O
7	int
]	O
+	O
0x5a827999	int
,	O
5	int
)	O
;	O
ROUND	O
(	O
G	O
,	O
c	int
,	O
d	int
,	O
a	int
,	O
b	array(char)
,	O
data	*(char)
[	O
11	int
]	O
+	O
0x5a827999	int
,	O
9	int
)	O
;	O
ROUND	O
(	O
G	O
,	O
b	array(char)
,	O
c	int
,	O
d	int
,	O
a	int
,	O
data	*(char)
[	O
15	int
]	O
+	O
0x5a827999	int
,	O
13	int
)	O
;	O
ROUND	O
(	O
H	O
,	O
a	int
,	O
b	array(char)
,	O
c	int
,	O
d	int
,	O
data	*(char)
[	O
0	int
]	O
+	O
0x6ed9eba1	int
,	O
3	int
)	O
;	O
ROUND	O
(	O
H	O
,	O
d	int
,	O
a	int
,	O
b	array(char)
,	O
c	int
,	O
data	*(char)
[	O
8	int
]	O
+	O
0x6ed9eba1	int
,	O
9	int
)	O
;	O
ROUND	O
(	O
H	O
,	O
c	int
,	O
d	int
,	O
a	int
,	O
b	array(char)
,	O
data	*(char)
[	O
4	int
]	O
+	O
0x6ed9eba1	int
,	O
11	int
)	O
;	O
ROUND	O
(	O
H	O
,	O
b	array(char)
,	O
c	int
,	O
d	int
,	O
a	int
,	O
data	*(char)
[	O
12	int
]	O
+	O
0x6ed9eba1	int
,	O
15	int
)	O
;	O
ROUND	O
(	O
H	O
,	O
a	int
,	O
b	array(char)
,	O
c	int
,	O
d	int
,	O
data	*(char)
[	O
2	int
]	O
+	O
0x6ed9eba1	int
,	O
3	int
)	O
;	O
ROUND	O
(	O
H	O
,	O
d	int
,	O
a	int
,	O
b	array(char)
,	O
c	int
,	O
data	*(char)
[	O
10	int
]	O
+	O
0x6ed9eba1	int
,	O
9	int
)	O
;	O
ROUND	O
(	O
H	O
,	O
c	int
,	O
d	int
,	O
a	int
,	O
b	array(char)
,	O
data	*(char)
[	O
6	int
]	O
+	O
0x6ed9eba1	int
,	O
11	int
)	O
;	O
ROUND	O
(	O
H	O
,	O
b	array(char)
,	O
c	int
,	O
d	int
,	O
a	int
,	O
data	*(char)
[	O
14	int
]	O
+	O
0x6ed9eba1	int
,	O
15	int
)	O
;	O
ROUND	O
(	O
H	O
,	O
a	int
,	O
b	array(char)
,	O
c	int
,	O
d	int
,	O
data	*(char)
[	O
1	int
]	O
+	O
0x6ed9eba1	int
,	O
3	int
)	O
;	O
ROUND	O
(	O
H	O
,	O
d	int
,	O
a	int
,	O
b	array(char)
,	O
c	int
,	O
data	*(char)
[	O
9	int
]	O
+	O
0x6ed9eba1	int
,	O
9	int
)	O
;	O
ROUND	O
(	O
H	O
,	O
c	int
,	O
d	int
,	O
a	int
,	O
b	array(char)
,	O
data	*(char)
[	O
5	int
]	O
+	O
0x6ed9eba1	int
,	O
11	int
)	O
;	O
ROUND	O
(	O
H	O
,	O
b	array(char)
,	O
c	int
,	O
d	int
,	O
a	int
,	O
data	*(char)
[	O
13	int
]	O
+	O
0x6ed9eba1	int
,	O
15	int
)	O
;	O
ROUND	O
(	O
H	O
,	O
a	int
,	O
b	array(char)
,	O
c	int
,	O
d	int
,	O
data	*(char)
[	O
3	int
]	O
+	O
0x6ed9eba1	int
,	O
3	int
)	O
;	O
ROUND	O
(	O
H	O
,	O
d	int
,	O
a	int
,	O
b	array(char)
,	O
c	int
,	O
data	*(char)
[	O
11	int
]	O
+	O
0x6ed9eba1	int
,	O
9	int
)	O
;	O
ROUND	O
(	O
H	O
,	O
c	int
,	O
d	int
,	O
a	int
,	O
b	array(char)
,	O
data	*(char)
[	O
7	int
]	O
+	O
0x6ed9eba1	int
,	O
11	int
)	O
;	O
ROUND	O
(	O
H	O
,	O
b	array(char)
,	O
c	int
,	O
d	int
,	O
a	int
,	O
data	*(char)
[	O
15	int
]	O
+	O
0x6ed9eba1	int
,	O
15	int
)	O
;	O
digest	*(char)
[	O
0	int
]	O
+=	O
a	int
;	O
digest	*(char)
[	O
1	int
]	O
+=	O
b	array(char)
;	O
digest	*(char)
[	O
2	int
]	O
+=	O
c	int
;	O
digest	*(char)
[	O
3	int
]	O
+=	O
d	int
;	O
}	O
static	O
void	O
md4_compress	(*(struct(array(int),long,int,array(char))),*(char))->(void)
(	O
struct	O
md4_ctx	struct(array(int),long,int,array(char))
*	O
ctx	*(void)
,	O
const	O
uint8_t	char
*	O
block	array(char)
)	O
{	O
uint32_t	int
data	*(char)
[	O
MD4_DATA_LENGTH	int
]	O
;	O
unsigned	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
16	int
;	O
i	int
++	O
,	O
block	array(char)
+=	O
4	int
)	O
data	*(char)
[	O
i	int
]	O
=	O
LE_READ_UINT32	O
(	O
block	array(char)
)	O
;	O
md4_transform	(*(int),*(int))->(void)
(	O
ctx	*(void)
->	O
state	array(int)
,	O
data	*(char)
)	O
;	O
}	O
