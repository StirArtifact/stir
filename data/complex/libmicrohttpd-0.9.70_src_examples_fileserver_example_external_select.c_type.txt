static	O
ssize_t	long
file_reader	(*(void),long,*(char),long)->(long)
(	O
void	O
*	O
cls	*(void)
,	O
uint64_t	long
pos	long
,	O
char	O
*	O
buf	*(char)
,	O
size_t	long
max	long
)	O
{	O
FILE	struct
*	O
file	*(char)
=	O
cls	*(void)
;	O
(	O
void	O
)	O
fseek	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),long,int)->(int)
(	O
file	*(char)
,	O
pos	long
,	O
SEEK_SET	int
)	O
;	O
return	O
fread	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
buf	*(char)
,	O
1	int
,	O
max	long
,	O
file	*(char)
)	O
;	O
}	O
static	O
void	O
free_callback	(*(void))->(void)
(	O
void	O
*	O
cls	*(void)
)	O
{	O
FILE	struct
*	O
file	*(char)
=	O
cls	*(void)
;	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
file	*(char)
)	O
;	O
}	O
static	O
int	O
ahc_echo	(*(void),*(struct),*(char),*(char),*(char),*(char),*(long),*(*(void)))->(int)
(	O
void	O
*	O
cls	*(void)
,	O
struct	O
MHD_Connection	O
*	O
connection	*(struct)
,	O
const	O
char	O
*	O
url	*(char)
,	O
const	O
char	O
*	O
method	*(char)
,	O
const	O
char	O
*	O
version	*(char)
,	O
const	O
char	O
*	O
upload_data	*(char)
,	O
size_t	long
*	O
upload_data_size	*(long)
,	O
void	O
*	O
*	O
ptr	*(void)
)	O
{	O
static	O
int	O
aptr	int
;	O
struct	O
MHD_Response	O
*	O
response	*(struct)
;	O
int	O
ret	int
;	O
FILE	struct
*	O
file	*(char)
;	O
int	O
fd	int
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
buf	*(char)
;	O
(	O
void	O
)	O
cls	*(void)
;	O
(	O
void	O
)	O
version	*(char)
;	O
(	O
void	O
)	O
upload_data	*(char)
;	O
(	O
void	O
)	O
upload_data_size	*(long)
;	O
if	O
(	O
0	int
!=	O
strcmp	(*(char),*(char))->(int)
(	O
method	*(char)
,	O
MHD_HTTP_METHOD_GET	*(char)
)	O
)	O
return	O
MHD_NO	int
;	O
if	O
(	O
&	O
aptr	int
!=	O
*	O
ptr	*(void)
)	O
{	O
*	O
ptr	*(void)
=	O
&	O
aptr	int
;	O
return	O
MHD_YES	int
;	O
}	O
*	O
ptr	*(void)
=	O
NULL	O
;	O
file	*(char)
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
&	O
url	*(char)
[	O
1	int
]	O
,	O
"rb"	*(char)
)	O
;	O
if	O
(	O
NULL	O
!=	O
file	*(char)
)	O
{	O
fd	int
=	O
fileno	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
file	*(char)
)	O
;	O
if	O
(	O
-	O
1	int
==	O
fd	int
)	O
{	O
(	O
void	O
)	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
file	*(char)
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
if	O
(	O
(	O
0	int
!=	O
fstat	(int,*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
fd	int
,	O
&	O
buf	*(char)
)	O
)	O
||	O
(	O
!	O
S_ISREG	O
(	O
buf	*(char)
.	O
st_mode	int
)	O
)	O
)	O
{	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
file	*(char)
)	O
;	O
file	*(char)
=	O
NULL	O
;	O
}	O
}	O
if	O
(	O
NULL	O
==	O
file	*(char)
)	O
{	O
response	*(struct)
=	O
MHD_create_response_from_buffer	(long,*(void),enum(int,int,int))->(*(struct))
(	O
strlen	(*(char))->(long)
(	O
PAGE	*(char)
)	O
,	O
(	O
void	O
*	O
)	O
PAGE	*(char)
,	O
MHD_RESPMEM_PERSISTENT	int
)	O
;	O
ret	int
=	O
MHD_queue_response	(*(struct),int,*(struct))->(int)
(	O
connection	*(struct)
,	O
MHD_HTTP_NOT_FOUND	int
,	O
response	*(struct)
)	O
;	O
MHD_destroy_response	(*(struct))->(void)
(	O
response	*(struct)
)	O
;	O
}	O
else	O
{	O
response	*(struct)
=	O
MHD_create_response_from_callback	(long,long,*((*(void),long,*(char),long)->(long)),*(void),*((*(void))->(void)))->(*(struct))
(	O
buf	*(char)
.	O
st_size	long
,	O
32	int
*	O
1024	int
,	O
&	O
file_reader	(*(void),long,*(char),long)->(long)
,	O
file	*(char)
,	O
&	O
free_callback	(*(void))->(void)
)	O
;	O
if	O
(	O
NULL	O
==	O
response	*(struct)
)	O
{	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
file	*(char)
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
ret	int
=	O
MHD_queue_response	(*(struct),int,*(struct))->(int)
(	O
connection	*(struct)
,	O
MHD_HTTP_OK	int
,	O
response	*(struct)
)	O
;	O
MHD_destroy_response	(*(struct))->(void)
(	O
response	*(struct)
)	O
;	O
}	O
return	O
ret	int
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
const	O
*	O
argv	*(*(char))
)	O
{	O
struct	O
MHD_Daemon	O
*	O
d	*(struct)
;	O
time_t	long
end	long
;	O
time_t	long
t	long
;	O
struct	O
timeval	struct(long,long)
tv	struct(long,long)
;	O
fd_set	struct(array(long))
rs	struct(array(long))
;	O
fd_set	struct(array(long))
ws	struct(array(long))
;	O
fd_set	struct(array(long))
es	struct(array(long))
;	O
MHD_socket	int
max	long
;	O
MHD_UNSIGNED_LONG_LONG	O
mhd_timeout	long long
;	O
if	O
(	O
argc	int
!=	O
3	int
)	O
{	O
printf	(*(char))->(int)
(	O
"%s PORT SECONDS-TO-RUN\n"	*(char)
,	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
return	O
1	int
;	O
}	O
d	*(struct)
=	O
MHD_start_daemon	(int,short,*((*(void),*(struct(short,array(char))),int)->(int)),*(void),*((*(void),*(struct),*(char),*(char),*(char),*(char),*(long),*(*(void)))->(int)),*(void))->(*(struct))
(	O
MHD_USE_ERROR_LOG	int
,	O
atoi	(*(char))->(int)
(	O
argv	*(*(char))
[	O
1	int
]	O
)	O
,	O
NULL	O
,	O
NULL	O
,	O
&	O
ahc_echo	(*(void),*(struct),*(char),*(char),*(char),*(char),*(long),*(*(void)))->(int)
,	O
PAGE	*(char)
,	O
MHD_OPTION_END	int
)	O
;	O
if	O
(	O
d	*(struct)
==	O
NULL	O
)	O
return	O
1	int
;	O
end	long
=	O
time	struct(long,long)
(	O
NULL	O
)	O
+	O
atoi	(*(char))->(int)
(	O
argv	*(*(char))
[	O
2	int
]	O
)	O
;	O
while	O
(	O
(	O
t	long
=	O
time	struct(long,long)
(	O
NULL	O
)	O
)	O
<	O
end	long
)	O
{	O
tv	struct(long,long)
.	O
tv_sec	long
=	O
end	long
-	O
t	long
;	O
tv	struct(long,long)
.	O
tv_usec	long
=	O
0	int
;	O
max	long
=	O
0	int
;	O
FD_ZERO	O
(	O
&	O
rs	struct(array(long))
)	O
;	O
FD_ZERO	O
(	O
&	O
ws	struct(array(long))
)	O
;	O
FD_ZERO	O
(	O
&	O
es	struct(array(long))
)	O
;	O
if	O
(	O
MHD_YES	int
!=	O
MHD_get_fdset	(*(struct),*(struct(array(long))),*(struct(array(long))),*(struct(array(long))),*(int))->(int)
(	O
d	*(struct)
,	O
&	O
rs	struct(array(long))
,	O
&	O
ws	struct(array(long))
,	O
&	O
es	struct(array(long))
,	O
&	O
max	long
)	O
)	O
break	O
;	O
if	O
(	O
MHD_get_timeout	(*(struct),*(long long))->(int)
(	O
d	*(struct)
,	O
&	O
mhd_timeout	long long
)	O
==	O
MHD_YES	int
)	O
{	O
if	O
(	O
(	O
(	O
MHD_UNSIGNED_LONG_LONG	O
)	O
tv	struct(long,long)
.	O
tv_sec	long
)	O
<	O
mhd_timeout	long long
/	O
1000LL	int
)	O
{	O
tv	struct(long,long)
.	O
tv_sec	long
=	O
mhd_timeout	long long
/	O
1000LL	int
;	O
tv	struct(long,long)
.	O
tv_usec	long
=	O
(	O
mhd_timeout	long long
-	O
(	O
tv	struct(long,long)
.	O
tv_sec	long
*	O
1000LL	int
)	O
)	O
*	O
1000LL	int
;	O
}	O
}	O
if	O
(	O
-	O
1	int
==	O
select	(int,*(struct(array(long))),*(struct(array(long))),*(struct(array(long))),*(struct(long,long)))->(int)
(	O
max	long
+	O
1	int
,	O
&	O
rs	struct(array(long))
,	O
&	O
ws	struct(array(long))
,	O
&	O
es	struct(array(long))
,	O
&	O
tv	struct(long,long)
)	O
)	O
{	O
if	O
(	O
EINTR	int
!=	O
errno	O
)	O
abort	()->(void)
(	O
)	O
;	O
}	O
MHD_run	(*(struct))->(int)
(	O
d	*(struct)
)	O
;	O
}	O
MHD_stop_daemon	(*(struct))->(void)
(	O
d	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
