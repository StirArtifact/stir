int	O
test_file	(*(char))->(int)
(	O
EPChar	*(char)
)	O
;	O
typedef	O
EChar	char
my_string	array(char)
[	O
80	int
]	O
;	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array(*(char))
[	O
]	O
)	O
{	O
int	O
i	int
,	O
n	int
,	O
type	long
;	O
FILE	struct
*	O
f_in	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),int,int,long,short,char,array(char),*(void),long long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(void),int,int,array(char)))
;	O
my_string	array(char)
aux	array(char)
;	O
my_string	array(char)
fname	*(char)
,	O
base_name	array(char)
;	O
EPChar	*(char)
field	*(char)
;	O
EPChar	*(char)
value	*(char)
;	O
my_string	array(char)
data	array(array(char))
[	O
8	int
]	O
;	O
CLASS_INFO	struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char))
ci	struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char))
;	O
my_string	array(char)
imp_fn	array(char)
;	O
my_string	array(char)
int_fn	array(char)
;	O
EChar	char
cpath	array(char)
[	O
1024	int
]	O
;	O
EChar	char
tpath	array(char)
[	O
1024	int
]	O
;	O
EPChar	*(char)
spath	*(char)
;	O
EChar	char
sfn	array(char)
[	O
1100	int
]	O
;	O
EChar	char
cmd	array(char)
[	O
2200	int
]	O
;	O
EChar	char
update_script	array(char)
[	O
1100	int
]	O
;	O
ESint32	int
current_parm	int
=	O
1	int
;	O
ESint32	int
procp	int
=	O
0	int
;	O
EChar	char
*	O
repo_dir	*(char)
=	O
NULL	O
;	O
EChar	char
*	O
repo_fname	*(char)
=	O
NULL	O
;	O
EChar	char
*	O
ines_file	*(char)
=	O
NULL	O
;	O
EDMA_REPO	*(void)
repo	*(void)
;	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
"\nINES (INstall EDMA System) Class Register"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"\nVersion %s (GNU/EDMA Version: %s)"	*(char)
,	O
INES_VERSION	*(char)
,	O
VERSION	int
)	O
;	O
printf	(*(char))->(int)
(	O
"\n%s\n"	*(char)
,	O
COPYRIGHT	*(char)
)	O
;	O
if	O
(	O
argc	int
<	O
2	int
)	O
{	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
"\nWrong parameter number"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
"\nUsage: ines_installer [--repo repodir repo_name] file.INES"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
"\n\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"Processing %d parameters\n"	*(char)
,	O
argc	int
)	O
;	O
while	O
(	O
current_parm	int
<	O
argc	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Processing parameter %ld (proc: %ld) : '%s'\n"	*(char)
,	O
current_parm	int
,	O
procp	int
,	O
argv	array(*(char))
[	O
current_parm	int
]	O
)	O
;	O
switch	O
(	O
procp	int
)	O
{	O
case	O
1	int
:	O
{	O
printf	(*(char))->(int)
(	O
"Processing Repository dir\n"	*(char)
)	O
;	O
repo_dir	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
argv	array(*(char))
[	O
current_parm	int
]	O
)	O
;	O
current_parm	int
++	O
;	O
procp	int
=	O
2	int
;	O
continue	O
;	O
}	O
case	O
2	int
:	O
{	O
printf	(*(char))->(int)
(	O
"Processing Repository name\n"	*(char)
)	O
;	O
repo_fname	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
argv	array(*(char))
[	O
current_parm	int
]	O
)	O
;	O
current_parm	int
++	O
;	O
procp	int
=	O
3	int
;	O
continue	O
;	O
}	O
case	O
3	int
:	O
{	O
printf	(*(char))->(int)
(	O
"Processing File name\n"	*(char)
)	O
;	O
ines_file	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
argv	array(*(char))
[	O
current_parm	int
]	O
)	O
;	O
current_parm	int
++	O
;	O
procp	int
=	O
4	int
;	O
continue	O
;	O
}	O
default	O
:	O
break	O
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	array(*(char))
[	O
current_parm	int
]	O
,	O
"--repo"	*(char)
)	O
==	O
0	int
)	O
{	O
procp	int
=	O
1	int
;	O
current_parm	int
++	O
;	O
printf	(*(char))->(int)
(	O
"Found repository...\n"	*(char)
)	O
;	O
}	O
else	O
{	O
printf	(*(char))->(int)
(	O
"No repository.... procesing file name\n"	*(char)
)	O
;	O
procp	int
=	O
3	int
;	O
}	O
}	O
printf	(*(char))->(int)
(	O
"DONE!!"	*(char)
)	O
;	O
if	O
(	O
procp	int
==	O
4	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Repository : '%s':'%s'\n"	*(char)
,	O
repo_dir	*(char)
,	O
repo_fname	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"Ines file: '%s'\n"	*(char)
,	O
ines_file	*(char)
)	O
;	O
}	O
else	O
{	O
switch	O
(	O
procp	int
)	O
{	O
case	O
1	int
:	O
{	O
printf	(*(char))->(int)
(	O
"ERROR: Missing repository base directory\n"	*(char)
)	O
;	O
break	O
;	O
}	O
case	O
2	int
:	O
{	O
printf	(*(char))->(int)
(	O
"ERROR: Missing repository name\n"	*(char)
)	O
;	O
break	O
;	O
}	O
case	O
3	int
:	O
{	O
printf	(*(char))->(int)
(	O
"ERROR: No ines file provided. Nothing to install\n"	*(char)
)	O
;	O
break	O
;	O
}	O
default	O
:	O
printf	(*(char))->(int)
(	O
"Unknown option: %ld\n"	*(char)
,	O
procp	int
)	O
;	O
}	O
}	O
strncpy	(*(char),*(char),int)->(*(char))
(	O
fname	*(char)
,	O
ines_file	*(char)
,	O
80	int
)	O
;	O
if	O
(	O
strstr	(*(char),*(char))->(*(char))
(	O
argv	array(*(char))
[	O
1	int
]	O
,	O
".ines"	*(char)
)	O
!=	O
0	int
)	O
{	O
type	long
=	O
0	int
;	O
}	O
f_in	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),int,int,long,short,char,array(char),*(void),long long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(void),int,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),int,int,long,short,char,array(char),*(void),long long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),*(void),int,int,array(char))))
(	O
fname	*(char)
,	O
"rt"	*(char)
)	O
;	O
if	O
(	O
f_in	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),int,int,long,short,char,array(char),*(void),long long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(void),int,int,array(char)))
==	O
NULL	O
)	O
{	O
printf	(*(char))->(int)
(	O
"\nCan't open file %s\n"	*(char)
,	O
argv	array(*(char))
[	O
1	int
]	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
EDMAInit	()->(long)
(	O
)	O
;	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
"\nEDMA System up"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
"\nINES (INstaller EDMA System) Installer ready"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
"\n---------------------------------------------------"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"\n + Processing file %s..."	*(char)
,	O
argv	array(*(char))
[	O
1	int
]	O
)	O
;	O
n	int
=	O
i	int
=	O
0	int
;	O
memset	(*(void),int,int)->(*(void))
(	O
&	O
ci	struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char))
,	O
0	int
,	O
sizeof	O
(	O
ci	struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char))
)	O
)	O
;	O
while	O
(	O
!	O
feof	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),int,int,long,short,char,array(char),*(void),long long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),*(void),int,int,array(char))))->(int)
(	O
f_in	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),int,int,long,short,char,array(char),*(void),long long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(void),int,int,array(char)))
)	O
)	O
{	O
fgets	(*(char),int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),int,int,long,short,char,array(char),*(void),long long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),*(void),int,int,array(char))))->(*(char))
(	O
aux	array(char)
,	O
80	int
,	O
f_in	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),int,int,long,short,char,array(char),*(void),long long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(void),int,int,array(char)))
)	O
;	O
field	*(char)
=	O
aux	array(char)
;	O
aux	array(char)
[	O
strlen	(*(char))->(int)
(	O
aux	array(char)
)	O
-	O
1	int
]	O
=	O
0	int
;	O
value	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
aux	array(char)
,	O
'='	O
)	O
;	O
if	O
(	O
value	*(char)
)	O
{	O
*	O
(	O
value	*(char)
)	O
=	O
0	int
;	O
value	*(char)
++	O
;	O
}	O
else	O
continue	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
field	*(char)
,	O
"ClassName"	*(char)
)	O
==	O
0	int
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
data	array(array(char))
[	O
n	int
]	O
,	O
value	*(char)
)	O
;	O
ci	struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char))
.	O
ClassName	*(char)
=	O
data	array(array(char))
[	O
n	int
]	O
;	O
n	int
++	O
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
field	*(char)
,	O
"NameSpace"	*(char)
)	O
==	O
0	int
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
data	array(array(char))
[	O
n	int
]	O
,	O
value	*(char)
)	O
;	O
ci	struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char))
.	O
NameSpace	*(char)
=	O
data	array(array(char))
[	O
n	int
]	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
int_fn	array(char)
,	O
"%s/%s.idf"	*(char)
,	O
value	*(char)
,	O
ci	struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char))
.	O
ClassName	*(char)
)	O
;	O
n	int
++	O
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
field	*(char)
,	O
"Machine"	*(char)
)	O
==	O
0	int
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
data	array(array(char))
[	O
n	int
]	O
,	O
value	*(char)
)	O
;	O
ci	struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char))
.	O
MaqName	*(char)
=	O
data	array(array(char))
[	O
n	int
]	O
;	O
n	int
++	O
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
field	*(char)
,	O
"OperatingSystem"	*(char)
)	O
==	O
0	int
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
data	array(array(char))
[	O
n	int
]	O
,	O
value	*(char)
)	O
;	O
ci	struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char))
.	O
SOName	*(char)
=	O
data	array(array(char))
[	O
n	int
]	O
;	O
n	int
++	O
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
field	*(char)
,	O
"IDFParser"	*(char)
)	O
==	O
0	int
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
data	array(array(char))
[	O
n	int
]	O
,	O
value	*(char)
)	O
;	O
ci	struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char))
.	O
IDFName	*(char)
=	O
data	array(array(char))
[	O
n	int
]	O
;	O
n	int
++	O
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
field	*(char)
,	O
"SIUProxy"	*(char)
)	O
==	O
0	int
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
data	array(array(char))
[	O
n	int
]	O
,	O
value	*(char)
)	O
;	O
ci	struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char))
.	O
SIUName	*(char)
=	O
data	array(array(char))
[	O
n	int
]	O
;	O
n	int
++	O
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
field	*(char)
,	O
"IsIDFParser"	*(char)
)	O
==	O
0	int
)	O
{	O
if	O
(	O
value	*(char)
[	O
0	int
]	O
==	O
'1'	O
)	O
ci	struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char))
.	O
IsIDFParser	char
=	O
1	int
;	O
else	O
ci	struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char))
.	O
IsIDFParser	char
=	O
0	int
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
field	*(char)
,	O
"IsSIUProxy"	*(char)
)	O
==	O
0	int
)	O
{	O
if	O
(	O
value	*(char)
[	O
0	int
]	O
==	O
'1'	O
)	O
ci	struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char))
.	O
IsSIUProxy	char
=	O
1	int
;	O
else	O
ci	struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char))
.	O
IsSIUProxy	char
=	O
0	int
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
field	*(char)
,	O
"IsEMIComp"	*(char)
)	O
==	O
0	int
)	O
{	O
if	O
(	O
value	*(char)
[	O
0	int
]	O
==	O
'1'	O
)	O
ci	struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char))
.	O
IsEMIComp	char
=	O
1	int
;	O
else	O
ci	struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char))
.	O
IsEMIComp	char
=	O
0	int
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
field	*(char)
,	O
"Implementation"	*(char)
)	O
==	O
0	int
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
imp_fn	array(char)
,	O
"%s"	*(char)
,	O
value	*(char)
)	O
;	O
n	int
++	O
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
field	*(char)
,	O
"UpdateScript"	*(char)
)	O
==	O
0	int
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
update_script	array(char)
,	O
"%s"	*(char)
,	O
value	*(char)
)	O
;	O
ci	struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char))
.	O
UpdateScript	*(char)
=	O
update_script	array(char)
;	O
n	int
++	O
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
field	*(char)
,	O
"MajorVer"	*(char)
)	O
==	O
0	int
)	O
ci	struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char))
.	O
MajorVer	int
=	O
atol	(*(char))->(long)
(	O
value	*(char)
)	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
field	*(char)
,	O
"MinorVer"	*(char)
)	O
==	O
0	int
)	O
ci	struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char))
.	O
MinorVer	int
=	O
atol	(*(char))->(long)
(	O
value	*(char)
)	O
;	O
i	int
++	O
;	O
}	O
spath	*(char)
=	O
edma_get_system_path	()->(*(char))
(	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n + %d properties read %d properties default"	*(char)
,	O
n	int
,	O
10	int
-	O
n	int
)	O
;	O
printf	(*(char))->(int)
(	O
"\n   * ClassName           : %s"	*(char)
,	O
ci	struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char))
.	O
ClassName	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"\n   * NameSpace           : %s"	*(char)
,	O
ci	struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char))
.	O
NameSpace	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"\n   * Implementation file : %s"	*(char)
,	O
imp_fn	array(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"\n   * Interface file      : %s"	*(char)
,	O
int_fn	array(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"\n   * Machine ID          : %s"	*(char)
,	O
ci	struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char))
.	O
MaqName	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"\n   * Operating System ID : %s"	*(char)
,	O
ci	struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char))
.	O
SOName	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"\n   * IDF Parser          : %s"	*(char)
,	O
ci	struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char))
.	O
IDFName	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"\n   * SIU Proxy           : %s"	*(char)
,	O
ci	struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char))
.	O
SIUName	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"\n   * Is IDF Parser?      : %s"	*(char)
,	O
(	O
ci	struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char))
.	O
IsIDFParser	char
?	O
"Yes"	*(char)
:	O
"No"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n   * Is SIU Proxy?       : %s"	*(char)
,	O
(	O
ci	struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char))
.	O
IsSIUProxy	char
?	O
"Yes"	*(char)
:	O
"No"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n   * Is EMI Handler?     : %s"	*(char)
,	O
(	O
ci	struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char))
.	O
IsEMIComp	char
?	O
"Yes"	*(char)
:	O
"No"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n   * Major Version       : %ld"	*(char)
,	O
ci	struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char))
.	O
MajorVer	int
)	O
;	O
printf	(*(char))->(int)
(	O
"\n   * Minor Version       : %ld"	*(char)
,	O
ci	struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char))
.	O
MinorVer	int
)	O
;	O
printf	(*(char))->(int)
(	O
"\n + EDMA System Path : %s"	*(char)
,	O
spath	*(char)
)	O
;	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),int,int,long,short,char,array(char),*(void),long long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),*(void),int,int,array(char))))->(int)
(	O
f_in	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),int,int,long,short,char,array(char),*(void),long long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(void),int,int,array(char)))
)	O
;	O
printf	(*(char))->(int)
(	O
"\n + Looking for class %s in your EDMA system..."	*(char)
,	O
ci	struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char))
.	O
ClassName	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"\n + Registring class %s\n"	*(char)
,	O
ci	struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char))
.	O
ClassName	*(char)
)	O
;	O
if	O
(	O
repo_dir	*(char)
!=	O
NULL	O
&&	O
repo_fname	*(char)
!=	O
NULL	O
)	O
{	O
printf	(*(char))->(int)
(	O
"Repository Specified... trying to load\n"	*(char)
)	O
;	O
if	O
(	O
edma_load_registry	(*(char),*(char))->(int)
(	O
repo_dir	*(char)
,	O
repo_fname	*(char)
)	O
<	O
0	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Invalid repository. Aborting!\n"	*(char)
)	O
;	O
EDMAEnd	()->(long)
(	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
repo	*(void)
=	O
edma_repo_manager_get_repo_by_name	(*(char),*(char))->(*(void))
(	O
repo_dir	*(char)
,	O
repo_fname	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"Installing in local repository: 0x%p ('%ld')\n"	*(char)
,	O
repo	*(void)
,	O
edma_repo_get_id	(*(void))->(int)
(	O
repo	*(void)
)	O
)	O
;	O
}	O
else	O
{	O
repo	*(void)
=	O
edma_repo_manager_get_repo	(int)->(*(void))
(	O
0	int
)	O
;	O
printf	(*(char))->(int)
(	O
"Installing in System repository: 0x%p ('%ld')\n"	*(char)
,	O
repo	*(void)
,	O
edma_repo_get_id	(*(void))->(int)
(	O
repo	*(void)
)	O
)	O
;	O
}	O
if	O
(	O
edma_add_stock_class2	(*(void),struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char)),*(char),*(char))->(int)
(	O
repo	*(void)
,	O
ci	struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char))
,	O
int_fn	array(char)
,	O
imp_fn	array(char)
)	O
!=	O
-	O
1	int
)	O
{	O
if	O
(	O
type	long
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
"\nFinishing INES Extend Package instalation"	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
sfn	array(char)
,	O
"./"	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
sfn	array(char)
,	O
base_name	array(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
sfn	array(char)
,	O
".postinst"	*(char)
)	O
;	O
if	O
(	O
test_file	(*(char))->(int)
(	O
sfn	array(char)
)	O
)	O
{	O
printf	(*(char))->(int)
(	O
"\n + Running Post Install shell script %s\n"	*(char)
,	O
sfn	array(char)
)	O
;	O
system	(*(char))->(int)
(	O
sfn	array(char)
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
"\n + Restoring Working Directory..."	*(char)
)	O
;	O
chdir	(*(char))->(int)
(	O
cpath	array(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
"\n + Deleting Temporal Files..."	*(char)
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
cmd	array(char)
,	O
"rm -R %s"	*(char)
,	O
tpath	array(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"\n   + %s"	*(char)
,	O
cmd	array(char)
)	O
;	O
system	(*(char))->(int)
(	O
cmd	array(char)
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
"\n + All done!"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
"\n--------------------------------------------------------------"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"\nClass %s has been registred in system"	*(char)
,	O
ci	struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char))
.	O
ClassName	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
"\nEDMA Registry will be update when all EDMA apps shut down\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
"\nOperation complete"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
"\n--------------------------------------------------------------\n"	*(char)
)	O
;	O
}	O
else	O
{	O
printf	(*(char))->(int)
(	O
"\n + Error class %s not registred!"	*(char)
,	O
ci	struct(*(char),*(char),*(char),*(char),*(char),*(char),char,char,char,int,int,*(char))
.	O
ClassName	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
"\n--------------------------------------------------------------\n"	*(char)
)	O
;	O
}	O
free	(*(void))->(void)
(	O
spath	*(char)
)	O
;	O
EDMAEnd	()->(long)
(	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
test_file	(*(char))->(int)
(	O
EPChar	*(char)
fn	*(char)
)	O
{	O
FILE	struct
*	O
f	*(char)
;	O
if	O
(	O
(	O
f	*(char)
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),int,int,long,short,char,array(char),*(void),long long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),*(void),int,int,array(char))))
(	O
fn	*(char)
,	O
"r"	*(char)
)	O
)	O
==	O
NULL	O
)	O
return	O
0	int
;	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),int,int,long,short,char,array(char),*(void),long long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),*(void),int,int,array(char))))->(int)
(	O
f	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
