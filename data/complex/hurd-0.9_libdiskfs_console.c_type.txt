void	O
diskfs_console_stdio	()->(void)
(	O
)	O
{	O
if	O
(	O
getpid	()->(int)
(	O
)	O
>	O
0	int
)	O
{	O
if	O
(	O
write	*((*(void),*(char),long)->(long))
(	O
2	int
,	O
""	*(char)
,	O
0	int
)	O
==	O
0	int
)	O
dup2	(int,int)->(int)
(	O
2	int
,	O
1	int
)	O
;	O
else	O
{	O
int	O
fd	int
=	O
open	(*(char),int)->(int)
(	O
"/dev/console"	*(char)
,	O
O_RDWR	int
)	O
;	O
dup2	(int,int)->(int)
(	O
fd	int
,	O
0	int
)	O
;	O
dup2	(int,int)->(int)
(	O
fd	int
,	O
1	int
)	O
;	O
dup2	(int,int)->(int)
(	O
fd	int
,	O
2	int
)	O
;	O
if	O
(	O
fd	int
>	O
2	int
)	O
close	*((*(void))->(int))
(	O
fd	int
)	O
;	O
}	O
}	O
else	O
{	O
mach_port_t	O
dev	O
,	O
cons	O
;	O
error_t	int
err	int
;	O
if	O
(	O
diskfs_boot_filesystem	()->(int)
(	O
)	O
)	O
_diskfs_boot_privports	()->(int)
(	O
)	O
;	O
err	int
=	O
get_privileged_ports	()->(int)
(	O
NULL	O
,	O
&	O
dev	O
)	O
;	O
assert_perror	O
(	O
err	int
)	O
;	O
err	int
=	O
device_open	()->(int)
(	O
dev	O
,	O
D_READ	O
|	O
D_WRITE	O
,	O
"console"	*(char)
,	O
&	O
cons	O
)	O
;	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
dev	O
)	O
;	O
assert_perror	O
(	O
err	int
)	O
;	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
mach_open_devstream	()->(int)
(	O
cons	O
,	O
"r"	*(char)
)	O
;	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
mach_open_devstream	()->(int)
(	O
cons	O
,	O
"w"	*(char)
)	O
;	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
cons	O
)	O
;	O
}	O
}	O
