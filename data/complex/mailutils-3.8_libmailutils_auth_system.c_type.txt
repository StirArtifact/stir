static	O
int	O
mu_auth_system	(*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int))),*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))->(int)
(	O
struct	O
mu_auth_data	struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)
*	O
*	O
return_data	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
,	O
const	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
)	O
{	O
char	O
*	O
mailbox_name	*(char)
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
)	O
return	O
MU_ERR_AUTH_FAILURE	O
;	O
rc	int
=	O
mu_construct_user_mailbox_url	(*(*(char)),*(char))->(int)
(	O
&	O
mailbox_name	*(char)
,	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_auth_data_alloc	(*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int))),*(char),*(char),int,int,*(char),*(char),*(char),*(char),int)->(int)
(	O
return_data	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
,	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
,	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_passwd	*(char)
,	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_uid	int
,	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_gid	int
,	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_gecos	*(char)
,	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_dir	*(char)
,	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_shell	*(char)
,	O
mailbox_name	*(char)
,	O
1	int
)	O
;	O
free	(*(void))->(void)
(	O
mailbox_name	*(char)
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_auth_system_by_name	(*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int))),*(void),*(void),*(void))->(int)
(	O
struct	O
mu_auth_data	struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)
*	O
*	O
return_data	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
,	O
const	O
void	O
*	O
key	*(*(void))
,	O
void	O
*	O
func_data	*(void)
MU_ARG_UNUSED	O
,	O
void	O
*	O
call_data	*(void)
MU_ARG_UNUSED	O
)	O
{	O
if	O
(	O
!	O
key	*(*(void))
)	O
return	O
EINVAL	int
;	O
return	O
mu_auth_system	(*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int))),*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))->(int)
(	O
return_data	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
,	O
getpwnam	(*(char))->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
key	*(*(void))
)	O
)	O
;	O
}	O
static	O
int	O
mu_auth_system_by_uid	(*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int))),*(void),*(void),*(void))->(int)
(	O
struct	O
mu_auth_data	struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)
*	O
*	O
return_data	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
,	O
const	O
void	O
*	O
key	*(*(void))
,	O
void	O
*	O
func_data	*(void)
MU_ARG_UNUSED	O
,	O
void	O
*	O
call_data	*(void)
MU_ARG_UNUSED	O
)	O
{	O
if	O
(	O
!	O
key	*(*(void))
)	O
return	O
EINVAL	int
;	O
return	O
mu_auth_system	(*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int))),*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))->(int)
(	O
return_data	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
,	O
getpwuid	(int)->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
*	O
(	O
uid_t	int
*	O
)	O
key	*(*(void))
)	O
)	O
;	O
}	O
static	O
int	O
mu_authenticate_generic	(*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int))),*(void),*(void),*(void))->(int)
(	O
struct	O
mu_auth_data	struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)
*	O
*	O
return_data	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
MU_ARG_UNUSED	O
,	O
const	O
void	O
*	O
key	*(*(void))
,	O
void	O
*	O
func_data	*(void)
MU_ARG_UNUSED	O
,	O
void	O
*	O
call_data	*(void)
)	O
{	O
const	O
struct	O
mu_auth_data	struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)
*	O
auth_data	*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int))
=	O
key	*(*(void))
;	O
char	O
*	O
pass	*(char)
=	O
call_data	*(void)
;	O
char	O
*	O
crypt_pass	*(char)
;	O
if	O
(	O
!	O
auth_data	*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int))
||	O
!	O
pass	*(char)
)	O
return	O
EINVAL	int
;	O
return	O
auth_data	*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int))
->	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
&&	O
(	O
crypt_pass	*(char)
=	O
crypt	(*(char),*(char))->(*(char))
(	O
pass	*(char)
,	O
auth_data	*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int))
->	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
)	O
)	O
!=	O
NULL	O
&&	O
strcmp	(*(char),*(char))->(int)
(	O
auth_data	*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int))
->	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
,	O
crypt_pass	*(char)
)	O
==	O
0	int
?	O
0	int
:	O
MU_ERR_AUTH_FAILURE	O
;	O
}	O
static	O
int	O
mu_authenticate_system	(*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int))),*(void),*(void),*(void))->(int)
(	O
struct	O
mu_auth_data	struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)
*	O
*	O
return_data	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
MU_ARG_UNUSED	O
,	O
const	O
void	O
*	O
key	*(*(void))
,	O
void	O
*	O
func_data	*(void)
MU_ARG_UNUSED	O
,	O
void	O
*	O
call_data	*(void)
)	O
{	O
const	O
struct	O
mu_auth_data	struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)
*	O
auth_data	*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int))
=	O
key	*(*(void))
;	O
char	O
*	O
pass	*(char)
=	O
call_data	*(void)
;	O
if	O
(	O
auth_data	*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int))
)	O
{	O
struct	O
spwd	struct(*(char),*(char),long,long,long,long,long,long,long)
*	O
spw	*(struct(*(char),*(char),long,long,long,long,long,long,long))
;	O
char	O
*	O
crypt_pass	*(char)
;	O
spw	*(struct(*(char),*(char),long,long,long,long,long,long,long))
=	O
getspnam	(*(char))->(*(struct(*(char),*(char),long,long,long,long,long,long,long)))
(	O
auth_data	*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int))
->	O
name	*(char)
)	O
;	O
if	O
(	O
spw	*(struct(*(char),*(char),long,long,long,long,long,long,long))
)	O
return	O
(	O
crypt_pass	*(char)
=	O
crypt	(*(char),*(char))->(*(char))
(	O
pass	*(char)
,	O
spw	*(struct(*(char),*(char),long,long,long,long,long,long,long))
->	O
sp_pwdp	*(char)
)	O
)	O
!=	O
NULL	O
&&	O
strcmp	(*(char),*(char))->(int)
(	O
spw	*(struct(*(char),*(char),long,long,long,long,long,long,long))
->	O
sp_pwdp	*(char)
,	O
crypt_pass	*(char)
)	O
==	O
0	int
?	O
0	int
:	O
MU_ERR_AUTH_FAILURE	O
;	O
}	O
return	O
MU_ERR_AUTH_FAILURE	O
;	O
}	O
struct	O
mu_auth_module	struct(*(char),array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int))),array(*(void)),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct`),*(struct`),*(char))->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))),*((enum(int,int),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`))),*(char),*(*(void)),*(void),*(struct(*(struct`),*(struct`))))->(int)),*((*(void))->(void)))
mu_auth_system_module	struct(*(char),array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int))),array(*(void)),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*((*(void))->(void)))
=	O
{	O
.	O
name	*(char)
=	O
"system"	*(char)
,	O
.	O
handler	array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int)))
=	O
{	O
[	O
mu_auth_authenticate	int
]	O
=	O
mu_authenticate_system	(*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int))),*(void),*(void),*(void))->(int)
,	O
[	O
mu_auth_getpwnam	int
]	O
=	O
mu_auth_system_by_name	(*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int))),*(void),*(void),*(void))->(int)
,	O
[	O
mu_auth_getpwuid	int
]	O
=	O
mu_auth_system_by_uid	(*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int))),*(void),*(void),*(void))->(int)
}	O
}	O
;	O
struct	O
mu_auth_module	struct(*(char),array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int))),array(*(void)),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct`),*(struct`),*(char))->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))),*((enum(int,int),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`))),*(char),*(*(void)),*(void),*(struct(*(struct`),*(struct`))))->(int)),*((*(void))->(void)))
mu_auth_generic_module	struct(*(char),array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int))),array(*(void)),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*((*(void))->(void)))
=	O
{	O
.	O
name	*(char)
=	O
"generic"	*(char)
,	O
.	O
handler	array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int)))
=	O
{	O
[	O
mu_auth_authenticate	int
]	O
=	O
mu_authenticate_generic	(*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int))),*(void),*(void),*(void))->(int)
}	O
}	O
;	O
