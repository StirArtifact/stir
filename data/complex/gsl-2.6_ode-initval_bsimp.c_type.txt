static	O
const	O
int	O
bd_sequence	array(int)
[	O
SEQUENCE_COUNT	int
]	O
=	O
{	O
2	int
,	O
6	int
,	O
10	int
,	O
14	int
,	O
22	int
,	O
34	int
,	O
50	int
,	O
70	int
}	O
;	O
typedef	O
struct	O
{	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
d	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
a_mat	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_permutation	struct(long,*(long))
*	O
p_vec	*(struct(long,*(long)))
;	O
double	O
x	double
[	O
SEQUENCE_MAX	int
]	O
;	O
size_t	long
k_current	long
;	O
size_t	long
k_choice	long
;	O
double	O
h_next	double
;	O
double	O
eps	double
;	O
double	O
*	O
yp	array(double)
;	O
double	O
*	O
y_save	*(double)
;	O
double	O
*	O
yerr_save	*(double)
;	O
double	O
*	O
y_extrap_save	*(double)
;	O
double	O
*	O
y_extrap_sequence	*(double)
;	O
double	O
*	O
extrap_work	*(double)
;	O
double	O
*	O
dfdt	array(double)
;	O
double	O
*	O
y_temp	*(double)
;	O
double	O
*	O
delta_temp	*(double)
;	O
double	O
*	O
weight	*(double)
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
dfdy	*(double)
;	O
double	O
*	O
rhs_temp	*(double)
;	O
double	O
*	O
delta	*(double)
;	O
size_t	long
order	enum(int,int)
;	O
}	O
bsimp_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),array(double),long,long,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),long)
;	O
static	O
void	O
compute_weights	(array(double),array(double),long)->(void)
(	O
const	O
double	O
y	double
[	O
]	O
,	O
double	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
[	O
]	O
,	O
size_t	long
dim	long
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
double	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
fabs	(double)->(double)
(	O
y	double
[	O
i	long
]	O
)	O
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
[	O
i	long
]	O
=	O
(	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
>	O
0.0	int
)	O
?	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
:	O
1.0	int
;	O
}	O
}	O
static	O
size_t	long
bsimp_deuf_kchoice	(double,long)->(long)
(	O
double	O
eps	double
,	O
size_t	long
dimension	long
)	O
{	O
const	O
double	O
safety_f	double
=	O
0.25	int
;	O
const	O
double	O
small_eps	double
=	O
safety_f	double
*	O
eps	double
;	O
double	O
a_work	array(double)
[	O
SEQUENCE_COUNT	int
]	O
;	O
double	O
alpha	long double
[	O
SEQUENCE_MAX	int
]	O
[	O
SEQUENCE_MAX	int
]	O
;	O
int	O
i	long
,	O
k	long
;	O
a_work	array(double)
[	O
0	int
]	O
=	O
bd_sequence	array(int)
[	O
0	int
]	O
+	O
1.0	int
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
SEQUENCE_MAX	int
;	O
k	long
++	O
)	O
{	O
a_work	array(double)
[	O
k	long
+	O
1	int
]	O
=	O
a_work	array(double)
[	O
k	long
]	O
+	O
bd_sequence	array(int)
[	O
k	long
+	O
1	int
]	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
SEQUENCE_MAX	int
;	O
i	long
++	O
)	O
{	O
alpha	long double
[	O
i	long
]	O
[	O
i	long
]	O
=	O
1.0	int
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
i	long
;	O
k	long
++	O
)	O
{	O
const	O
double	O
tmp1	double
=	O
a_work	array(double)
[	O
k	long
+	O
1	int
]	O
-	O
a_work	array(double)
[	O
i	long
+	O
1	int
]	O
;	O
const	O
double	O
tmp2	double
=	O
(	O
a_work	array(double)
[	O
i	long
+	O
1	int
]	O
-	O
a_work	array(double)
[	O
0	int
]	O
+	O
1.0	int
)	O
*	O
(	O
2	int
*	O
k	long
+	O
1	int
)	O
;	O
alpha	long double
[	O
k	long
]	O
[	O
i	long
]	O
=	O
pow	(double,double)->(double)
(	O
small_eps	double
,	O
tmp1	double
/	O
tmp2	double
)	O
;	O
}	O
}	O
a_work	array(double)
[	O
0	int
]	O
+=	O
dimension	long
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
SEQUENCE_MAX	int
;	O
k	long
++	O
)	O
{	O
a_work	array(double)
[	O
k	long
+	O
1	int
]	O
=	O
a_work	array(double)
[	O
k	long
]	O
+	O
bd_sequence	array(int)
[	O
k	long
+	O
1	int
]	O
;	O
}	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
SEQUENCE_MAX	int
-	O
1	int
;	O
k	long
++	O
)	O
{	O
if	O
(	O
a_work	array(double)
[	O
k	long
+	O
2	int
]	O
>	O
a_work	array(double)
[	O
k	long
+	O
1	int
]	O
*	O
alpha	long double
[	O
k	long
]	O
[	O
k	long
+	O
1	int
]	O
)	O
break	O
;	O
}	O
return	O
k	long
;	O
}	O
static	O
void	O
poly_extrap	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),array(double),int,double,array(double),array(double),array(double),array(double),long)->(void)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
d	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
double	O
x	double
[	O
]	O
,	O
const	O
unsigned	O
int	O
i_step	int
,	O
const	O
double	O
x_i	double
,	O
const	O
double	O
y_i	array(double)
[	O
]	O
,	O
double	O
y_0	array(double)
[	O
]	O
,	O
double	O
y_0_err	array(double)
[	O
]	O
,	O
double	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
[	O
]	O
,	O
const	O
size_t	long
dim	long
)	O
{	O
size_t	long
j	long
,	O
k	long
;	O
DBL_MEMCPY	O
(	O
y_0_err	array(double)
,	O
y_i	array(double)
,	O
dim	long
)	O
;	O
DBL_MEMCPY	O
(	O
y_0	array(double)
,	O
y_i	array(double)
,	O
dim	long
)	O
;	O
if	O
(	O
i_step	int
==	O
0	int
)	O
{	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
dim	long
;	O
j	long
++	O
)	O
{	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
d	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
j	long
,	O
y_i	array(double)
[	O
j	long
]	O
)	O
;	O
}	O
}	O
else	O
{	O
DBL_MEMCPY	O
(	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
y_i	array(double)
,	O
dim	long
)	O
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
i_step	int
;	O
k	long
++	O
)	O
{	O
double	O
delta	*(double)
=	O
1.0	int
/	O
(	O
x	double
[	O
i_step	int
-	O
k	long
-	O
1	int
]	O
-	O
x_i	double
)	O
;	O
const	O
double	O
f1	double
=	O
delta	*(double)
*	O
x_i	double
;	O
const	O
double	O
f2	double
=	O
delta	*(double)
*	O
x	double
[	O
i_step	int
-	O
k	long
-	O
1	int
]	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
dim	long
;	O
j	long
++	O
)	O
{	O
const	O
double	O
q_kj	double
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
d	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
k	long
,	O
j	long
)	O
;	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
d	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
k	long
,	O
j	long
,	O
y_0_err	array(double)
[	O
j	long
]	O
)	O
;	O
delta	*(double)
=	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
[	O
j	long
]	O
-	O
q_kj	double
;	O
y_0_err	array(double)
[	O
j	long
]	O
=	O
f1	double
*	O
delta	*(double)
;	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
[	O
j	long
]	O
=	O
f2	double
*	O
delta	*(double)
;	O
y_0	array(double)
[	O
j	long
]	O
+=	O
y_0_err	array(double)
[	O
j	long
]	O
;	O
}	O
}	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
dim	long
;	O
j	long
++	O
)	O
{	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
d	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i_step	int
,	O
j	long
,	O
y_0_err	array(double)
[	O
j	long
]	O
)	O
;	O
}	O
}	O
}	O
static	O
int	O
bsimp_step_local	(*(void),long,double,double,int,array(double),array(double),array(double),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),array(double),*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
size_t	long
dim	long
,	O
const	O
double	O
t0	double
,	O
const	O
double	O
h_total	double
,	O
const	O
unsigned	O
int	O
n_step	int
,	O
const	O
double	O
y	double
[	O
]	O
,	O
const	O
double	O
yp	array(double)
[	O
]	O
,	O
const	O
double	O
dfdt	array(double)
[	O
]	O
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
dfdy	*(double)
,	O
double	O
y_out	array(double)
[	O
]	O
,	O
const	O
gsl_odeiv_system	struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void))
*	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
)	O
{	O
bsimp_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),array(double),long,long,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),long)
*	O
state	*(int)
=	O
(	O
bsimp_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),array(double),long,long,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),long)
*	O
)	O
vstate	*(void)
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
const	O
a_mat	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
state	*(int)
->	O
a_mat	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_permutation	struct(long,*(long))
*	O
const	O
p_vec	*(struct(long,*(long)))
=	O
state	*(int)
->	O
p_vec	*(struct(long,*(long)))
;	O
double	O
*	O
const	O
delta	*(double)
=	O
state	*(int)
->	O
delta	*(double)
;	O
double	O
*	O
const	O
y_temp	*(double)
=	O
state	*(int)
->	O
y_temp	*(double)
;	O
double	O
*	O
const	O
delta_temp	*(double)
=	O
state	*(int)
->	O
delta_temp	*(double)
;	O
double	O
*	O
const	O
rhs_temp	*(double)
=	O
state	*(int)
->	O
rhs_temp	*(double)
;	O
double	O
*	O
const	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
state	*(int)
->	O
weight	*(double)
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
y_temp_vec	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_view_array	(*(double),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
y_temp	*(double)
,	O
dim	long
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
delta_temp_vec	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_view_array	(*(double),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
delta_temp	*(double)
,	O
dim	long
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
rhs_temp_vec	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_view_array	(*(double),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
rhs_temp	*(double)
,	O
dim	long
)	O
;	O
const	O
double	O
h	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
h_total	double
/	O
n_step	int
;	O
double	O
t	double
=	O
t0	double
+	O
h	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
double	O
sum	double
;	O
const	O
double	O
max_sum	double
=	O
100.0	int
*	O
dim	long
;	O
int	O
signum	*(int)
,	O
status	int
;	O
size_t	long
i	long
,	O
j	long
;	O
size_t	long
n_inter	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
dim	long
;	O
j	long
++	O
)	O
{	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
a_mat	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
j	long
,	O
-	O
h	*(struct(long,long,*(double),*(struct(long,*(double))),int))
*	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
dfdy	*(double)
,	O
i	long
,	O
j	long
)	O
)	O
;	O
}	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
a_mat	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
i	long
,	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
a_mat	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
i	long
)	O
+	O
1.0	int
)	O
;	O
}	O
gsl_linalg_LU_decomp	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),*(int))->(int)
(	O
a_mat	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
p_vec	*(struct(long,*(long)))
,	O
&	O
signum	*(int)
)	O
;	O
compute_weights	(array(double),array(double),long)->(void)
(	O
y	double
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
dim	long
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
y_temp	*(double)
[	O
i	long
]	O
=	O
h	*(struct(long,long,*(double),*(struct(long,*(double))),int))
*	O
(	O
yp	array(double)
[	O
i	long
]	O
+	O
h	*(struct(long,long,*(double),*(struct(long,*(double))),int))
*	O
dfdt	array(double)
[	O
i	long
]	O
)	O
;	O
}	O
gsl_linalg_LU_solve	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
a_mat	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
p_vec	*(struct(long,*(long)))
,	O
&	O
y_temp_vec	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
delta_temp_vec	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
sum	double
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
const	O
double	O
di	double
=	O
delta_temp	*(double)
[	O
i	long
]	O
;	O
delta	*(double)
[	O
i	long
]	O
=	O
di	double
;	O
y_temp	*(double)
[	O
i	long
]	O
=	O
y	double
[	O
i	long
]	O
+	O
di	double
;	O
sum	double
+=	O
fabs	(double)->(double)
(	O
di	double
)	O
/	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
[	O
i	long
]	O
;	O
}	O
if	O
(	O
sum	double
>	O
max_sum	double
)	O
{	O
return	O
GSL_EFAILED	int
;	O
}	O
status	int
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
,	O
t	double
,	O
y_temp	*(double)
,	O
y_out	array(double)
)	O
;	O
if	O
(	O
status	int
)	O
{	O
return	O
status	int
;	O
}	O
for	O
(	O
n_inter	long
=	O
1	int
;	O
n_inter	long
<	O
n_step	int
;	O
n_inter	long
++	O
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
rhs_temp	*(double)
[	O
i	long
]	O
=	O
h	*(struct(long,long,*(double),*(struct(long,*(double))),int))
*	O
y_out	array(double)
[	O
i	long
]	O
-	O
delta	*(double)
[	O
i	long
]	O
;	O
}	O
gsl_linalg_LU_solve	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
a_mat	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
p_vec	*(struct(long,*(long)))
,	O
&	O
rhs_temp_vec	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
delta_temp_vec	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
sum	double
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
delta	*(double)
[	O
i	long
]	O
+=	O
2.0	int
*	O
delta_temp	*(double)
[	O
i	long
]	O
;	O
y_temp	*(double)
[	O
i	long
]	O
+=	O
delta	*(double)
[	O
i	long
]	O
;	O
sum	double
+=	O
fabs	(double)->(double)
(	O
delta	*(double)
[	O
i	long
]	O
)	O
/	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
[	O
i	long
]	O
;	O
}	O
if	O
(	O
sum	double
>	O
max_sum	double
)	O
{	O
return	O
GSL_EFAILED	int
;	O
}	O
t	double
+=	O
h	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
status	int
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
,	O
t	double
,	O
y_temp	*(double)
,	O
y_out	array(double)
)	O
;	O
if	O
(	O
status	int
)	O
{	O
return	O
status	int
;	O
}	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
rhs_temp	*(double)
[	O
i	long
]	O
=	O
h	*(struct(long,long,*(double),*(struct(long,*(double))),int))
*	O
y_out	array(double)
[	O
i	long
]	O
-	O
delta	*(double)
[	O
i	long
]	O
;	O
}	O
gsl_linalg_LU_solve	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
a_mat	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
p_vec	*(struct(long,*(long)))
,	O
&	O
rhs_temp_vec	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
delta_temp_vec	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
sum	double
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
y_out	array(double)
[	O
i	long
]	O
=	O
y_temp	*(double)
[	O
i	long
]	O
+	O
delta_temp	*(double)
[	O
i	long
]	O
;	O
sum	double
+=	O
fabs	(double)->(double)
(	O
delta_temp	*(double)
[	O
i	long
]	O
)	O
/	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
[	O
i	long
]	O
;	O
}	O
if	O
(	O
sum	double
>	O
max_sum	double
)	O
{	O
return	O
GSL_EFAILED	int
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
void	O
*	O
bsimp_alloc	(long)->(*(void))
(	O
size_t	long
dim	long
)	O
{	O
bsimp_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),array(double),long,long,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),long)
*	O
state	*(int)
=	O
(	O
bsimp_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),array(double),long,long,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),long)
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
bsimp_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),array(double),long,long,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),long)
)	O
)	O
;	O
state	*(int)
->	O
d	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_alloc	(long,long)->(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
SEQUENCE_MAX	int
,	O
dim	long
)	O
;	O
state	*(int)
->	O
a_mat	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_alloc	(long,long)->(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
dim	long
,	O
dim	long
)	O
;	O
state	*(int)
->	O
p_vec	*(struct(long,*(long)))
=	O
gsl_permutation_alloc	(long)->(*(struct(long,*(long))))
(	O
dim	long
)	O
;	O
state	*(int)
->	O
yp	array(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
state	*(int)
->	O
y_save	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
state	*(int)
->	O
yerr_save	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
state	*(int)
->	O
y_extrap_save	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
state	*(int)
->	O
y_extrap_sequence	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
state	*(int)
->	O
extrap_work	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
state	*(int)
->	O
dfdt	array(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
state	*(int)
->	O
y_temp	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
state	*(int)
->	O
delta_temp	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
state	*(int)
->	O
weight	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
state	*(int)
->	O
dfdy	*(double)
=	O
gsl_matrix_alloc	(long,long)->(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
dim	long
,	O
dim	long
)	O
;	O
state	*(int)
->	O
rhs_temp	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
state	*(int)
->	O
delta	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
{	O
size_t	long
k_choice	long
=	O
bsimp_deuf_kchoice	(double,long)->(long)
(	O
GSL_SQRT_DBL_EPSILON	int
,	O
dim	long
)	O
;	O
state	*(int)
->	O
k_choice	long
=	O
k_choice	long
;	O
state	*(int)
->	O
k_current	long
=	O
k_choice	long
;	O
state	*(int)
->	O
order	enum(int,int)
=	O
2	int
*	O
k_choice	long
;	O
}	O
state	*(int)
->	O
h_next	double
=	O
-	O
GSL_SQRT_DBL_MAX	int
;	O
return	O
state	*(int)
;	O
}	O
static	O
int	O
bsimp_apply	(*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
size_t	long
dim	long
,	O
double	O
t	double
,	O
double	O
h	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
double	O
y	double
[	O
]	O
,	O
double	O
yerr	array(double)
[	O
]	O
,	O
const	O
double	O
dydt_in	array(double)
[	O
]	O
,	O
double	O
dydt_out	array(double)
[	O
]	O
,	O
const	O
gsl_odeiv_system	struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void))
*	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
)	O
{	O
bsimp_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),array(double),long,long,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),long)
*	O
state	*(int)
=	O
(	O
bsimp_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),array(double),long,long,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),long)
*	O
)	O
vstate	*(void)
;	O
double	O
*	O
const	O
x	double
=	O
state	*(int)
->	O
x	double
;	O
double	O
*	O
const	O
yp	array(double)
=	O
state	*(int)
->	O
yp	array(double)
;	O
double	O
*	O
const	O
y_save	*(double)
=	O
state	*(int)
->	O
y_save	*(double)
;	O
double	O
*	O
const	O
yerr_save	*(double)
=	O
state	*(int)
->	O
yerr_save	*(double)
;	O
double	O
*	O
const	O
y_extrap_sequence	*(double)
=	O
state	*(int)
->	O
y_extrap_sequence	*(double)
;	O
double	O
*	O
const	O
y_extrap_save	*(double)
=	O
state	*(int)
->	O
y_extrap_save	*(double)
;	O
double	O
*	O
const	O
extrap_work	*(double)
=	O
state	*(int)
->	O
extrap_work	*(double)
;	O
double	O
*	O
const	O
dfdt	array(double)
=	O
state	*(int)
->	O
dfdt	array(double)
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
d	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
state	*(int)
->	O
d	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
dfdy	*(double)
=	O
state	*(int)
->	O
dfdy	*(double)
;	O
const	O
double	O
t_local	double
=	O
t	double
;	O
size_t	long
i	long
,	O
k	long
;	O
if	O
(	O
h	*(struct(long,long,*(double),*(struct(long,*(double))),int))
+	O
t_local	double
==	O
t_local	double
)	O
{	O
return	O
GSL_EUNDRFLW	int
;	O
}	O
DBL_MEMCPY	O
(	O
y_extrap_save	*(double)
,	O
y	double
,	O
dim	long
)	O
;	O
DBL_MEMCPY	O
(	O
y_save	*(double)
,	O
y	double
,	O
dim	long
)	O
;	O
DBL_MEMCPY	O
(	O
yerr_save	*(double)
,	O
yerr	array(double)
,	O
dim	long
)	O
;	O
if	O
(	O
dydt_in	array(double)
!=	O
NULL	O
)	O
{	O
DBL_MEMCPY	O
(	O
yp	array(double)
,	O
dydt_in	array(double)
,	O
dim	long
)	O
;	O
}	O
else	O
{	O
int	O
s	*(float)
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
,	O
t_local	double
,	O
y	double
,	O
yp	array(double)
)	O
;	O
if	O
(	O
s	*(float)
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	*(float)
;	O
}	O
}	O
{	O
int	O
s	*(float)
=	O
GSL_ODEIV_JA_EVAL	O
(	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
,	O
t_local	double
,	O
y	double
,	O
dfdy	*(double)
->	O
data	*(long)
,	O
dfdt	array(double)
)	O
;	O
if	O
(	O
s	*(float)
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	*(float)
;	O
}	O
}	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<=	O
state	*(int)
->	O
k_current	long
;	O
k	long
++	O
)	O
{	O
const	O
unsigned	O
int	O
N	int
=	O
bd_sequence	array(int)
[	O
k	long
]	O
;	O
const	O
double	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
(	O
h	*(struct(long,long,*(double),*(struct(long,*(double))),int))
/	O
N	int
)	O
;	O
const	O
double	O
x_k	double
=	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
*	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
int	O
status	int
=	O
bsimp_step_local	(*(void),long,double,double,int,array(double),array(double),array(double),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),array(double),*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))))->(int)
(	O
state	*(int)
,	O
dim	long
,	O
t_local	double
,	O
h	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
N	int
,	O
y_extrap_save	*(double)
,	O
yp	array(double)
,	O
dfdt	array(double)
,	O
dfdy	*(double)
,	O
y_extrap_sequence	*(double)
,	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
)	O
;	O
if	O
(	O
status	int
==	O
GSL_EFAILED	int
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
yerr	array(double)
[	O
i	long
]	O
=	O
GSL_POSINF	O
;	O
}	O
break	O
;	O
}	O
else	O
if	O
(	O
status	int
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
status	int
;	O
}	O
x	double
[	O
k	long
]	O
=	O
x_k	double
;	O
poly_extrap	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),array(double),int,double,array(double),array(double),array(double),array(double),long)->(void)
(	O
d	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
x	double
,	O
k	long
,	O
x_k	double
,	O
y_extrap_sequence	*(double)
,	O
y	double
,	O
yerr	array(double)
,	O
extrap_work	*(double)
,	O
dim	long
)	O
;	O
}	O
if	O
(	O
dydt_out	array(double)
!=	O
NULL	O
)	O
{	O
int	O
s	*(float)
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
,	O
t	double
+	O
h	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
y	double
,	O
dydt_out	array(double)
)	O
;	O
if	O
(	O
s	*(float)
!=	O
GSL_SUCCESS	int
)	O
{	O
DBL_MEMCPY	O
(	O
y	double
,	O
y_save	*(double)
,	O
dim	long
)	O
;	O
DBL_MEMCPY	O
(	O
yerr	array(double)
,	O
yerr_save	*(double)
,	O
dim	long
)	O
;	O
return	O
s	*(float)
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
unsigned	O
int	O
bsimp_order	(*(void))->(int)
(	O
void	O
*	O
vstate	*(void)
)	O
{	O
bsimp_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),array(double),long,long,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),long)
*	O
state	*(int)
=	O
(	O
bsimp_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),array(double),long,long,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),long)
*	O
)	O
vstate	*(void)
;	O
return	O
state	*(int)
->	O
order	enum(int,int)
;	O
}	O
static	O
int	O
bsimp_reset	(*(void),long)->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
size_t	long
dim	long
)	O
{	O
bsimp_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),array(double),long,long,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),long)
*	O
state	*(int)
=	O
(	O
bsimp_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),array(double),long,long,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),long)
*	O
)	O
vstate	*(void)
;	O
state	*(int)
->	O
h_next	double
=	O
0	int
;	O
DBL_ZERO_MEMSET	O
(	O
state	*(int)
->	O
yp	array(double)
,	O
dim	long
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
void	O
bsimp_free	(*(void))->(void)
(	O
void	O
*	O
vstate	*(void)
)	O
{	O
bsimp_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),array(double),long,long,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),long)
*	O
state	*(int)
=	O
(	O
bsimp_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),array(double),long,long,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),long)
*	O
)	O
vstate	*(void)
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
delta	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
rhs_temp	*(double)
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
dfdy	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
weight	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
delta_temp	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y_temp	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
dfdt	array(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
extrap_work	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y_extrap_sequence	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y_extrap_save	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y_save	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
yerr_save	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
yp	array(double)
)	O
;	O
gsl_permutation_free	(*(struct(long,*(long))))->(void)
(	O
state	*(int)
->	O
p_vec	*(struct(long,*(long)))
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
a_mat	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
d	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
}	O
static	O
const	O
gsl_odeiv_step_type	struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct(*`,*`,long,*`)))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void)))
bsimp_type	struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct(*`,*`,long,*`)))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void)))
=	O
{	O
"bsimp"	*(char)
,	O
1	int
,	O
1	int
,	O
&	O
bsimp_alloc	(long)->(*(void))
,	O
&	O
bsimp_apply	(*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))))->(int)
,	O
&	O
bsimp_reset	(*(void),long)->(int)
,	O
&	O
bsimp_order	(*(void))->(int)
,	O
&	O
bsimp_free	(*(void))->(void)
}	O
;	O
const	O
gsl_odeiv_step_type	struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct(*`,*`,long,*`)))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void)))
*	O
gsl_odeiv_step_bsimp	*(struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct`))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void))))
=	O
&	O
bsimp_type	struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct(*`,*`,long,*`)))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void)))
;	O
