static	O
inline	O
error_t	int
ftp_conn_add_reply_txt	(*(struct(*(struct(*`,long,int,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,int,*`,*`)->(int)),*((*`,int,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int))),int,int,*(char),long,long,long,*(char),long,*(char),*(char),*(void),int,*(struct(short,array(char))))),*(long),*(char),long)->(int)
(	O
struct	O
ftp_conn	struct(*(struct),*(struct(*((*(struct`),*(char))->(void)),*((*(struct`),int,*(char))->(void)),*((*(struct`))->(void)),*((*(struct`),int,*(*`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(int)))),struct(*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),*(*(struct`)))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),*(int))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),int,*(int),*(*(void)))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),int,*(void),*((*`,*`,*`,*`)->(int)),*(void))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),*(char),*(*(char)))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(*(char)))->(int))),int,int,*(char),long,long,long,*(char),long,*(char),*(char),*(void),int,*(struct(short,array(char))))
*	O
conn	*(struct)
,	O
size_t	long
*	O
offs	*(long)
,	O
const	O
char	O
*	O
str	*(char)
,	O
size_t	long
len	long
)	O
{	O
if	O
(	O
*	O
offs	*(long)
+	O
len	long
+	O
1	int
>	O
conn	*(struct)
->	O
reply_txt_sz	long
)	O
{	O
size_t	long
new_sz	long
=	O
*	O
offs	*(long)
+	O
len	long
+	O
50	int
;	O
char	O
*	O
new	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
conn	*(struct)
->	O
reply_txt	*(char)
,	O
new_sz	long
)	O
;	O
if	O
(	O
!	O
new	*(char)
)	O
return	O
ENOMEM	int
;	O
conn	*(struct)
->	O
reply_txt	*(char)
=	O
new	*(char)
;	O
conn	*(struct)
->	O
reply_txt_sz	long
=	O
new_sz	long
;	O
}	O
bcopy	(*(void),*(void),long)->(void)
(	O
str	*(char)
,	O
conn	*(struct)
->	O
reply_txt	*(char)
+	O
*	O
offs	*(long)
,	O
len	long
)	O
;	O
conn	*(struct)
->	O
reply_txt	*(char)
[	O
*	O
offs	*(long)
+	O
len	long
]	O
=	O
'\0'	O
;	O
*	O
offs	*(long)
+=	O
len	long
;	O
return	O
0	int
;	O
}	O
static	O
inline	O
error_t	int
ftp_conn_getline	(*(struct(*(struct(*`,long,int,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,int,*`,*`)->(int)),*((*`,int,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int))),int,int,*(char),long,long,long,*(char),long,*(char),*(char),*(void),int,*(struct(short,array(char))))),*(*(char)),*(long))->(int)
(	O
struct	O
ftp_conn	struct(*(struct),*(struct(*((*(struct`),*(char))->(void)),*((*(struct`),int,*(char))->(void)),*((*(struct`))->(void)),*((*(struct`),int,*(*`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(int)))),struct(*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),*(*(struct`)))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),*(int))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),int,*(int),*(*(void)))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),int,*(void),*((*`,*`,*`,*`)->(int)),*(void))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),*(char),*(*(char)))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(*(char)))->(int))),int,int,*(char),long,long,long,*(char),long,*(char),*(char),*(void),int,*(struct(short,array(char))))
*	O
conn	*(struct)
,	O
const	O
char	O
*	O
*	O
line	*(char)
,	O
size_t	long
*	O
line_len	long
)	O
{	O
char	O
*	O
l	*(char)
=	O
conn	*(struct)
->	O
line	*(char)
;	O
size_t	long
offs	*(long)
=	O
conn	*(struct)
->	O
line_offs	long
,	O
len	long
=	O
conn	*(struct)
->	O
line_len	long
,	O
sz	long
=	O
conn	*(struct)
->	O
line_sz	long
;	O
int	O
(	O
*	O
icheck	*((*(struct(*(struct`),*(struct`),struct(*`,*`,*`,*`,*`,*`),int,int,*(char),long,long,long,*(char),long,*(char),*(char),*(void),int,*(struct`))))->(int))
)	O
(	O
struct	O
ftp_conn	struct(*(struct),*(struct(*((*(struct`),*(char))->(void)),*((*(struct`),int,*(char))->(void)),*((*(struct`))->(void)),*((*(struct`),int,*(*`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(int)))),struct(*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),*(*(struct`)))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),*(int))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),int,*(int),*(*(void)))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),int,*(void),*((*`,*`,*`,*`)->(int)),*(void))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),*(char),*(*(char)))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(*(char)))->(int))),int,int,*(char),long,long,long,*(char),long,*(char),*(char),*(void),int,*(struct(short,array(char))))
*	O
conn	*(struct)
)	O
=	O
conn	*(struct)
->	O
hooks	*(struct(*((*(struct`),*(char))->(void)),*((*(struct`),int,*(char))->(void)),*((*(struct`))->(void)),*((*(struct`),int,*(*`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(int))))
->	O
interrupt_check	*((*(struct))->(int))
;	O
for	O
(	O
;	O
;	O
)	O
{	O
int	O
rd	int
;	O
if	O
(	O
offs	*(long)
<	O
len	long
)	O
{	O
char	O
*	O
nl	*(char)
=	O
memchr	(*(void),int,long)->(*(void))
(	O
l	*(char)
+	O
offs	*(long)
,	O
'\n'	O
,	O
len	long
-	O
offs	*(long)
)	O
;	O
if	O
(	O
nl	*(char)
)	O
{	O
*	O
line	*(char)
=	O
l	*(char)
+	O
offs	*(long)
;	O
offs	*(long)
=	O
nl	*(char)
+	O
1	int
-	O
l	*(char)
;	O
if	O
(	O
nl	*(char)
>	O
*	O
line	*(char)
&&	O
nl	*(char)
[	O
-	O
1	int
]	O
==	O
'\r'	O
)	O
nl	*(char)
--	O
;	O
*	O
nl	*(char)
=	O
'\0'	O
;	O
*	O
line_len	long
=	O
nl	*(char)
-	O
*	O
line	*(char)
;	O
if	O
(	O
offs	*(long)
==	O
len	long
)	O
conn	*(struct)
->	O
line_offs	long
=	O
conn	*(struct)
->	O
line_len	long
=	O
0	int
;	O
else	O
conn	*(struct)
->	O
line_offs	long
=	O
offs	*(long)
;	O
return	O
0	int
;	O
}	O
}	O
if	O
(	O
offs	*(long)
>	O
(	O
len	long
<<	O
2	int
)	O
&&	O
offs	*(long)
<	O
len	long
)	O
{	O
len	long
-=	O
offs	*(long)
;	O
bcopy	(*(void),*(void),long)->(void)
(	O
l	*(char)
+	O
offs	*(long)
,	O
l	*(char)
,	O
len	long
-	O
offs	*(long)
)	O
;	O
offs	*(long)
=	O
conn	*(struct)
->	O
line_offs	long
=	O
0	int
;	O
conn	*(struct)
->	O
line_len	long
=	O
len	long
;	O
}	O
if	O
(	O
len	long
==	O
sz	long
)	O
{	O
sz	long
=	O
sz	long
+	O
len	long
?	O
:	O
50	int
;	O
l	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
l	*(char)
,	O
sz	long
)	O
;	O
if	O
(	O
!	O
l	*(char)
)	O
return	O
ENOMEM	int
;	O
conn	*(struct)
->	O
line	*(char)
=	O
l	*(char)
;	O
conn	*(struct)
->	O
line_sz	long
=	O
sz	long
;	O
}	O
rd	int
=	O
read	(int,*(void),long)->(long)
(	O
conn	*(struct)
->	O
control	int
,	O
l	*(char)
+	O
len	long
,	O
sz	long
-	O
len	long
)	O
;	O
if	O
(	O
rd	int
<	O
0	int
)	O
return	O
errno	O
;	O
else	O
if	O
(	O
rd	int
==	O
0	int
)	O
{	O
*	O
line	*(char)
=	O
l	*(char)
+	O
offs	*(long)
;	O
*	O
line_len	long
=	O
0	int
;	O
return	O
0	int
;	O
}	O
len	long
+=	O
rd	int
;	O
conn	*(struct)
->	O
line_len	long
=	O
len	long
;	O
if	O
(	O
icheck	*((*(struct(*(struct`),*(struct`),struct(*`,*`,*`,*`,*`,*`),int,int,*(char),long,long,long,*(char),long,*(char),*(char),*(void),int,*(struct`))))->(int))
&&	O
(	O
*	O
icheck	*((*(struct(*(struct`),*(struct`),struct(*`,*`,*`,*`,*`,*`),int,int,*(char),long,long,long,*(char),long,*(char),*(char),*(void),int,*(struct`))))->(int))
)	O
(	O
conn	*(struct)
)	O
)	O
return	O
EINTR	int
;	O
}	O
}	O
inline	O
error_t	int
ftp_conn_get_raw_reply	(*(struct(*(struct(*`,long,int,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,int,*`,*`)->(int)),*((*`,int,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int))),int,int,*(char),long,long,long,*(char),long,*(char),*(char),*(void),int,*(struct(short,array(char))))),*(int),*(*(char)))->(int)
(	O
struct	O
ftp_conn	struct(*(struct),*(struct(*((*(struct`),*(char))->(void)),*((*(struct`),int,*(char))->(void)),*((*(struct`))->(void)),*((*(struct`),int,*(*`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(int)))),struct(*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),*(*(struct`)))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),*(int))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),int,*(int),*(*(void)))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),int,*(void),*((*`,*`,*`,*`)->(int)),*(void))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),*(char),*(*(char)))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(*(char)))->(int))),int,int,*(char),long,long,long,*(char),long,*(char),*(char),*(void),int,*(struct(short,array(char))))
*	O
conn	*(struct)
,	O
int	O
*	O
reply	*(int)
,	O
const	O
char	O
*	O
*	O
reply_txt	*(char)
)	O
{	O
size_t	long
reply_txt_offs	long
=	O
0	int
;	O
int	O
multi	int
=	O
0	int
;	O
if	O
(	O
!	O
reply	*(int)
&&	O
!	O
reply_txt	*(char)
)	O
return	O
0	int
;	O
do	O
{	O
const	O
char	O
*	O
l	*(char)
=	O
NULL	O
;	O
size_t	long
len	long
=	O
0	int
;	O
error_t	int
err	int
=	O
ftp_conn_getline	(*(struct(*(struct(*`,long,int,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,int,*`,*`)->(int)),*((*`,int,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int))),int,int,*(char),long,long,long,*(char),long,*(char),*(char),*(void),int,*(struct(short,array(char))))),*(*(char)),*(long))->(int)
(	O
conn	*(struct)
,	O
&	O
l	*(char)
,	O
&	O
len	long
)	O
;	O
if	O
(	O
err	int
)	O
return	O
err	int
;	O
if	O
(	O
!	O
multi	int
&&	O
len	long
==	O
0	int
)	O
return	O
EPIPE	int
;	O
if	O
(	O
conn	*(struct)
->	O
hooks	*(struct(*((*(struct`),*(char))->(void)),*((*(struct`),int,*(char))->(void)),*((*(struct`))->(void)),*((*(struct`),int,*(*`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(int))))
&&	O
conn	*(struct)
->	O
hooks	*(struct(*((*(struct`),*(char))->(void)),*((*(struct`),int,*(char))->(void)),*((*(struct`))->(void)),*((*(struct`),int,*(*`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(int))))
->	O
cntl_debug	*((*(struct),int,*(char))->(void))
)	O
(	O
*	O
conn	*(struct)
->	O
hooks	*(struct(*((*(struct`),*(char))->(void)),*((*(struct`),int,*(char))->(void)),*((*(struct`))->(void)),*((*(struct`),int,*(*`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(int))))
->	O
cntl_debug	*((*(struct),int,*(char))->(void))
)	O
(	O
conn	*(struct)
,	O
FTP_CONN_CNTL_DEBUG_REPLY	int
,	O
l	*(char)
)	O
;	O
if	O
(	O
isdigit	(int)->(int)
(	O
l	*(char)
[	O
0	int
]	O
)	O
&&	O
isdigit	(int)->(int)
(	O
l	*(char)
[	O
1	int
]	O
)	O
&&	O
isdigit	(int)->(int)
(	O
l	*(char)
[	O
2	int
]	O
)	O
)	O
{	O
int	O
code	int
=	O
(	O
l	*(char)
[	O
0	int
]	O
-	O
'0'	O
)	O
*	O
100	int
+	O
(	O
l	*(char)
[	O
1	int
]	O
-	O
'0'	O
)	O
*	O
10	int
+	O
(	O
l	*(char)
[	O
2	int
]	O
-	O
'0'	O
)	O
;	O
if	O
(	O
multi	int
&&	O
code	int
!=	O
multi	int
)	O
return	O
EGRATUITOUS	O
;	O
if	O
(	O
l	*(char)
[	O
3	int
]	O
==	O
'-'	O
)	O
multi	int
=	O
code	int
;	O
else	O
if	O
(	O
l	*(char)
[	O
3	int
]	O
!=	O
' '	O
)	O
return	O
EGRATUITOUS	O
;	O
else	O
{	O
multi	int
=	O
0	int
;	O
if	O
(	O
reply	*(int)
)	O
*	O
reply	*(int)
=	O
code	int
;	O
}	O
ACCUM	O
(	O
l	*(char)
+	O
4	int
,	O
len	long
-	O
4	int
)	O
;	O
}	O
else	O
if	O
(	O
multi	int
)	O
ACCUM	O
(	O
l	*(char)
,	O
len	long
)	O
;	O
else	O
return	O
EGRATUITOUS	O
;	O
}	O
while	O
(	O
multi	int
)	O
;	O
if	O
(	O
reply_txt	*(char)
)	O
*	O
reply_txt	*(char)
=	O
conn	*(struct)
->	O
reply_txt	*(char)
;	O
return	O
0	int
;	O
}	O
error_t	int
ftp_conn_get_reply	(*(struct(*(struct(*`,long,int,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,int,*`,*`)->(int)),*((*`,int,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int))),int,int,*(char),long,long,long,*(char),long,*(char),*(char),*(void),int,*(struct(short,array(char))))),*(int),*(*(char)))->(int)
(	O
struct	O
ftp_conn	struct(*(struct),*(struct(*((*(struct`),*(char))->(void)),*((*(struct`),int,*(char))->(void)),*((*(struct`))->(void)),*((*(struct`),int,*(*`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(int)))),struct(*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),*(*(struct`)))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),*(int))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),int,*(int),*(*(void)))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),int,*(void),*((*`,*`,*`,*`)->(int)),*(void))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(char),*(char),*(*(char)))->(int)),*((*(struct(*`,*`,struct`,int,int,*`,long,long,long,*`,long,*`,*`,*`,int,*`)),*(*(char)))->(int))),int,int,*(char),long,long,long,*(char),long,*(char),*(char),*(void),int,*(struct(short,array(char))))
*	O
conn	*(struct)
,	O
int	O
*	O
reply	*(int)
,	O
const	O
char	O
*	O
*	O
reply_txt	*(char)
)	O
{	O
int	O
code	int
;	O
error_t	int
err	int
;	O
do	O
err	int
=	O
ftp_conn_get_raw_reply	(*(struct(*(struct(*`,long,int,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,int,*`,*`)->(int)),*((*`,int,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int))),int,int,*(char),long,long,long,*(char),long,*(char),*(char),*(void),int,*(struct(short,array(char))))),*(int),*(*(char)))->(int)
(	O
conn	*(struct)
,	O
&	O
code	int
,	O
reply_txt	*(char)
)	O
;	O
while	O
(	O
!	O
err	int
&&	O
code	int
==	O
REPLY_ABORT_OK	int
)	O
;	O
if	O
(	O
!	O
err	int
&&	O
reply	*(int)
)	O
*	O
reply	*(int)
=	O
code	int
;	O
return	O
err	int
;	O
}	O
