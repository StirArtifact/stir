_rl_search_cxt	struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char))
*	O
_rl_nscxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
=	O
0	int
;	O
extern	O
HIST_ENTRY	struct(*(char),*(char),*(void))
*	O
_rl_saved_line_for_history	*(struct(*(char),*(char),*(void)))
;	O
extern	O
void	O
_rl_free_history_entry	(*(struct(*(char),*(char),*(void))))->(void)
PARAMS	O
(	O
(	O
HIST_ENTRY	struct(*(char),*(char),*(void))
*	O
)	O
)	O
;	O
static	O
char	O
*	O
noninc_search_string	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
static	O
int	O
noninc_history_pos	int
;	O
static	O
char	O
*	O
prev_line_found	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
static	O
int	O
rl_history_search_len	int
;	O
static	O
int	O
rl_history_search_pos	int
;	O
static	O
int	O
rl_history_search_flags	int
;	O
static	O
char	O
*	O
history_search_string	*(char)
;	O
static	O
int	O
history_string_size	int
;	O
static	O
void	O
make_history_line_current	(*(struct(*(char),*(char),*(void))))->(void)
PARAMS	O
(	O
(	O
HIST_ENTRY	struct(*(char),*(char),*(void))
*	O
)	O
)	O
;	O
static	O
int	O
noninc_search_from_pos	(*(char),int,int)->(int)
PARAMS	O
(	O
(	O
char	O
*	O
,	O
int	O
,	O
int	O
)	O
)	O
;	O
static	O
int	O
noninc_dosearch	(*(char),int)->(int)
PARAMS	O
(	O
(	O
char	O
*	O
,	O
int	O
)	O
)	O
;	O
static	O
int	O
noninc_search	(int,int)->(int)
PARAMS	O
(	O
(	O
int	O
,	O
int	O
)	O
)	O
;	O
static	O
int	O
rl_history_search_internal	(int,int)->(int)
PARAMS	O
(	O
(	O
int	O
,	O
int	O
)	O
)	O
;	O
static	O
void	O
rl_history_search_reinit	(int)->(void)
PARAMS	O
(	O
(	O
int	O
)	O
)	O
;	O
static	O
_rl_search_cxt	struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char))
*	O
_rl_nsearch_init	(int,int)->(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))))
PARAMS	O
(	O
(	O
int	O
,	O
int	O
)	O
)	O
;	O
static	O
void	O
_rl_nsearch_abort	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))))->(void)
PARAMS	O
(	O
(	O
_rl_search_cxt	struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char))
*	O
)	O
)	O
;	O
static	O
int	O
_rl_nsearch_dispatch	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))),int)->(int)
PARAMS	O
(	O
(	O
_rl_search_cxt	struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char))
*	O
,	O
int	O
)	O
)	O
;	O
static	O
void	O
make_history_line_current	(*(struct(*(char),*(char),*(void))))->(void)
(	O
entry	*(struct(*(char),*(char),*(void)))
)	O
HIST_ENTRY	struct(*(char),*(char),*(void))
*	O
entry	*(struct(*(char),*(char),*(void)))
;	O
{	O
_rl_replace_text	(*(char),int,int)->(int)
(	O
entry	*(struct(*(char),*(char),*(void)))
->	O
line	*(char)
,	O
0	int
,	O
rl_end	int
)	O
;	O
_rl_fix_point	(int)->(void)
(	O
1	int
)	O
;	O
if	O
(	O
rl_editing_mode	int
==	O
vi_mode	int
)	O
rl_free_undo_list	()->(void)
(	O
)	O
;	O
if	O
(	O
_rl_saved_line_for_history	*(struct(*(char),*(char),*(void)))
)	O
_rl_free_history_entry	(*(struct(*(char),*(char),*(void))))->(void)
(	O
_rl_saved_line_for_history	*(struct(*(char),*(char),*(void)))
)	O
;	O
_rl_saved_line_for_history	*(struct(*(char),*(char),*(void)))
=	O
(	O
HIST_ENTRY	struct(*(char),*(char),*(void))
*	O
)	O
NULL	O
;	O
}	O
static	O
int	O
noninc_search_from_pos	(*(char),int,int)->(int)
(	O
string	*(char)
,	O
pos	int
,	O
dir	int
)	O
char	O
*	O
string	*(char)
;	O
int	O
pos	int
,	O
dir	int
;	O
{	O
int	O
ret	int
,	O
old	int
;	O
if	O
(	O
pos	int
<	O
0	int
)	O
return	O
-	O
1	int
;	O
old	int
=	O
where_history	()->(int)
(	O
)	O
;	O
if	O
(	O
history_set_pos	(int)->(int)
(	O
pos	int
)	O
==	O
0	int
)	O
return	O
-	O
1	int
;	O
RL_SETSTATE	O
(	O
RL_STATE_SEARCH	int
)	O
;	O
if	O
(	O
*	O
string	*(char)
==	O
'^'	O
)	O
ret	int
=	O
history_search_prefix	(*(char),int)->(int)
(	O
string	*(char)
+	O
1	int
,	O
dir	int
)	O
;	O
else	O
ret	int
=	O
history_search	(*(char),int)->(int)
(	O
string	*(char)
,	O
dir	int
)	O
;	O
RL_UNSETSTATE	O
(	O
RL_STATE_SEARCH	int
)	O
;	O
if	O
(	O
ret	int
!=	O
-	O
1	int
)	O
ret	int
=	O
where_history	()->(int)
(	O
)	O
;	O
history_set_pos	(int)->(int)
(	O
old	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
static	O
int	O
noninc_dosearch	(*(char),int)->(int)
(	O
string	*(char)
,	O
dir	int
)	O
char	O
*	O
string	*(char)
;	O
int	O
dir	int
;	O
{	O
int	O
oldpos	int
,	O
pos	int
;	O
HIST_ENTRY	struct(*(char),*(char),*(void))
*	O
entry	*(struct(*(char),*(char),*(void)))
;	O
if	O
(	O
string	*(char)
==	O
0	int
||	O
*	O
string	*(char)
==	O
'\0'	O
||	O
noninc_history_pos	int
<	O
0	int
)	O
{	O
rl_ding	()->(int)
(	O
)	O
;	O
return	O
0	int
;	O
}	O
pos	int
=	O
noninc_search_from_pos	(*(char),int,int)->(int)
(	O
string	*(char)
,	O
noninc_history_pos	int
+	O
dir	int
,	O
dir	int
)	O
;	O
if	O
(	O
pos	int
==	O
-	O
1	int
)	O
{	O
rl_maybe_unsave_line	()->(int)
(	O
)	O
;	O
rl_clear_message	()->(int)
(	O
)	O
;	O
rl_point	int
=	O
0	int
;	O
rl_ding	()->(int)
(	O
)	O
;	O
return	O
0	int
;	O
}	O
noninc_history_pos	int
=	O
pos	int
;	O
oldpos	int
=	O
where_history	()->(int)
(	O
)	O
;	O
history_set_pos	(int)->(int)
(	O
noninc_history_pos	int
)	O
;	O
entry	*(struct(*(char),*(char),*(void)))
=	O
current_history	()->(*(struct(*(char),*(char),*(void))))
(	O
)	O
;	O
if	O
(	O
rl_editing_mode	int
!=	O
vi_mode	int
)	O
history_set_pos	(int)->(int)
(	O
oldpos	int
)	O
;	O
make_history_line_current	(*(struct(*(char),*(char),*(void))))->(void)
(	O
entry	*(struct(*(char),*(char),*(void)))
)	O
;	O
rl_point	int
=	O
0	int
;	O
rl_mark	int
=	O
rl_end	int
;	O
rl_clear_message	()->(int)
(	O
)	O
;	O
return	O
1	int
;	O
}	O
static	O
_rl_search_cxt	struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char))
*	O
_rl_nsearch_init	(int,int)->(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))))
(	O
dir	int
,	O
pchar	int
)	O
int	O
dir	int
,	O
pchar	int
;	O
{	O
_rl_search_cxt	struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char))
*	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
;	O
char	O
*	O
p	*(char)
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
=	O
_rl_scxt_alloc	(int,int)->(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))))
(	O
RL_SEARCH_NSEARCH	int
,	O
0	int
)	O
;	O
if	O
(	O
dir	int
<	O
0	int
)	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sflags	int
|=	O
SF_REVERSE	int
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
direction	int
=	O
dir	int
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
history_pos	int
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
save_line	int
;	O
rl_maybe_save_line	()->(int)
(	O
)	O
;	O
rl_undo_list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
=	O
0	int
;	O
rl_line_buffer	*(char)
[	O
0	int
]	O
=	O
0	int
;	O
rl_end	int
=	O
rl_point	int
=	O
0	int
;	O
p	*(char)
=	O
_rl_make_prompt_for_search	(int)->(*(char))
(	O
pchar	int
?	O
pchar	int
:	O
':'	O
)	O
;	O
rl_message	(*(char))->(int)
(	O
"%s"	*(char)
,	O
p	*(char)
)	O
;	O
xfree	(*(void))->(void)
(	O
p	*(char)
)	O
;	O
RL_SETSTATE	O
(	O
RL_STATE_NSEARCH	int
)	O
;	O
_rl_nscxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
;	O
return	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
;	O
}	O
int	O
_rl_nsearch_cleanup	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))),int)->(int)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
,	O
r	int
)	O
_rl_search_cxt	struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char))
*	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
;	O
int	O
r	int
;	O
{	O
_rl_scxt_dispose	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))),int)->(void)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
,	O
0	int
)	O
;	O
_rl_nscxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
=	O
0	int
;	O
RL_UNSETSTATE	O
(	O
RL_STATE_NSEARCH	int
)	O
;	O
return	O
(	O
r	int
!=	O
1	int
)	O
;	O
}	O
static	O
void	O
_rl_nsearch_abort	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))))->(void)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
)	O
_rl_search_cxt	struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char))
*	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
;	O
{	O
rl_maybe_unsave_line	()->(int)
(	O
)	O
;	O
rl_clear_message	()->(int)
(	O
)	O
;	O
rl_point	int
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
save_point	int
;	O
rl_mark	int
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
save_mark	int
;	O
rl_restore_prompt	()->(void)
(	O
)	O
;	O
RL_UNSETSTATE	O
(	O
RL_STATE_NSEARCH	int
)	O
;	O
}	O
static	O
int	O
_rl_nsearch_dispatch	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))),int)->(int)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
,	O
c	int
)	O
_rl_search_cxt	struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char))
*	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
;	O
int	O
c	int
;	O
{	O
switch	O
(	O
c	int
)	O
{	O
case	O
CTRL	O
(	O
'W'	O
)	O
:	O
rl_unix_word_rubout	(int,int)->(int)
(	O
1	int
,	O
c	int
)	O
;	O
break	O
;	O
case	O
CTRL	O
(	O
'U'	O
)	O
:	O
rl_unix_line_discard	(int,int)->(int)
(	O
1	int
,	O
c	int
)	O
;	O
break	O
;	O
case	O
RETURN	O
:	O
case	O
NEWLINE	char
:	O
return	O
0	int
;	O
case	O
CTRL	O
(	O
'H'	O
)	O
:	O
case	O
RUBOUT	int
:	O
if	O
(	O
rl_point	int
==	O
0	int
)	O
{	O
_rl_nsearch_abort	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))))->(void)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
_rl_rubout_char	(int,int)->(int)
(	O
1	int
,	O
c	int
)	O
;	O
break	O
;	O
case	O
CTRL	O
(	O
'C'	O
)	O
:	O
case	O
CTRL	O
(	O
'G'	O
)	O
:	O
rl_ding	()->(int)
(	O
)	O
;	O
_rl_nsearch_abort	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))))->(void)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
)	O
;	O
return	O
-	O
1	int
;	O
default	O
:	O
if	O
(	O
MB_CUR_MAX	O
>	O
1	int
&&	O
rl_byte_oriented	int
==	O
0	int
)	O
rl_insert_text	(*(char))->(int)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
mb	array(char)
)	O
;	O
else	O
_rl_insert_char	(int,int)->(int)
(	O
1	int
,	O
c	int
)	O
;	O
break	O
;	O
}	O
(	O
*	O
rl_redisplay_function	*(()->(void))
)	O
(	O
)	O
;	O
return	O
1	int
;	O
}	O
static	O
int	O
_rl_nsearch_dosearch	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))))->(int)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
)	O
_rl_search_cxt	struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char))
*	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
;	O
{	O
rl_mark	int
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
save_mark	int
;	O
if	O
(	O
rl_point	int
==	O
0	int
)	O
{	O
if	O
(	O
noninc_search_string	*(char)
==	O
0	int
)	O
{	O
rl_ding	()->(int)
(	O
)	O
;	O
rl_restore_prompt	()->(void)
(	O
)	O
;	O
RL_UNSETSTATE	O
(	O
RL_STATE_NSEARCH	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
else	O
{	O
noninc_history_pos	int
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
save_line	int
;	O
FREE	O
(	O
noninc_search_string	*(char)
)	O
;	O
noninc_search_string	*(char)
=	O
savestring	O
(	O
rl_line_buffer	*(char)
)	O
;	O
rl_free_undo_list	()->(void)
(	O
)	O
;	O
}	O
rl_restore_prompt	()->(void)
(	O
)	O
;	O
return	O
(	O
noninc_dosearch	(*(char),int)->(int)
(	O
noninc_search_string	*(char)
,	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
direction	int
)	O
)	O
;	O
}	O
static	O
int	O
noninc_search	(int,int)->(int)
(	O
dir	int
,	O
pchar	int
)	O
int	O
dir	int
;	O
int	O
pchar	int
;	O
{	O
_rl_search_cxt	struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char))
*	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
;	O
int	O
c	int
,	O
r	int
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
=	O
_rl_nsearch_init	(int,int)->(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))))
(	O
dir	int
,	O
pchar	int
)	O
;	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_CALLBACK	int
)	O
)	O
return	O
(	O
0	int
)	O
;	O
r	int
=	O
0	int
;	O
while	O
(	O
1	int
)	O
{	O
c	int
=	O
_rl_search_getchar	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))))->(int)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
)	O
;	O
if	O
(	O
c	int
==	O
0	int
)	O
break	O
;	O
r	int
=	O
_rl_nsearch_dispatch	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))),int)->(int)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
,	O
c	int
)	O
;	O
if	O
(	O
r	int
<	O
0	int
)	O
return	O
1	int
;	O
else	O
if	O
(	O
r	int
==	O
0	int
)	O
break	O
;	O
}	O
r	int
=	O
_rl_nsearch_dosearch	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))))->(int)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
)	O
;	O
return	O
(	O
(	O
r	int
>=	O
0	int
)	O
?	O
_rl_nsearch_cleanup	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))),int)->(int)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
,	O
r	int
)	O
:	O
(	O
r	int
!=	O
1	int
)	O
)	O
;	O
}	O
int	O
rl_noninc_forward_search	(int,int)->(int)
(	O
count	int
,	O
key	int
)	O
int	O
count	int
,	O
key	int
;	O
{	O
return	O
noninc_search	(int,int)->(int)
(	O
1	int
,	O
(	O
key	int
==	O
'?'	O
)	O
?	O
'?'	O
:	O
0	int
)	O
;	O
}	O
int	O
rl_noninc_reverse_search	(int,int)->(int)
(	O
count	int
,	O
key	int
)	O
int	O
count	int
,	O
key	int
;	O
{	O
return	O
noninc_search	(int,int)->(int)
(	O
-	O
1	int
,	O
(	O
key	int
==	O
'/'	O
)	O
?	O
'/'	O
:	O
0	int
)	O
;	O
}	O
int	O
rl_noninc_forward_search_again	(int,int)->(int)
(	O
count	int
,	O
key	int
)	O
int	O
count	int
,	O
key	int
;	O
{	O
int	O
r	int
;	O
if	O
(	O
!	O
noninc_search_string	*(char)
)	O
{	O
rl_ding	()->(int)
(	O
)	O
;	O
return	O
(	O
1	int
)	O
;	O
}	O
r	int
=	O
noninc_dosearch	(*(char),int)->(int)
(	O
noninc_search_string	*(char)
,	O
1	int
)	O
;	O
return	O
(	O
r	int
!=	O
1	int
)	O
;	O
}	O
int	O
rl_noninc_reverse_search_again	(int,int)->(int)
(	O
count	int
,	O
key	int
)	O
int	O
count	int
,	O
key	int
;	O
{	O
int	O
r	int
;	O
if	O
(	O
!	O
noninc_search_string	*(char)
)	O
{	O
rl_ding	()->(int)
(	O
)	O
;	O
return	O
(	O
1	int
)	O
;	O
}	O
r	int
=	O
noninc_dosearch	(*(char),int)->(int)
(	O
noninc_search_string	*(char)
,	O
-	O
1	int
)	O
;	O
return	O
(	O
r	int
!=	O
1	int
)	O
;	O
}	O
int	O
_rl_nsearch_callback	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))))->(int)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
)	O
_rl_search_cxt	struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char))
*	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
;	O
{	O
int	O
c	int
,	O
r	int
;	O
c	int
=	O
_rl_search_getchar	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))))->(int)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
)	O
;	O
r	int
=	O
_rl_nsearch_dispatch	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))),int)->(int)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
,	O
c	int
)	O
;	O
if	O
(	O
r	int
!=	O
0	int
)	O
return	O
1	int
;	O
r	int
=	O
_rl_nsearch_dosearch	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))))->(int)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
)	O
;	O
return	O
(	O
(	O
r	int
>=	O
0	int
)	O
?	O
_rl_nsearch_cleanup	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))),int)->(int)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
,	O
r	int
)	O
:	O
(	O
r	int
!=	O
1	int
)	O
)	O
;	O
}	O
static	O
int	O
rl_history_search_internal	(int,int)->(int)
(	O
count	int
,	O
dir	int
)	O
int	O
count	int
,	O
dir	int
;	O
{	O
HIST_ENTRY	struct(*(char),*(char),*(void))
*	O
temp	*(struct(*(char),*(char),*(void)))
;	O
int	O
ret	int
,	O
oldpos	int
;	O
char	O
*	O
t	*(char)
;	O
rl_maybe_save_line	()->(int)
(	O
)	O
;	O
temp	*(struct(*(char),*(char),*(void)))
=	O
(	O
HIST_ENTRY	struct(*(char),*(char),*(void))
*	O
)	O
NULL	O
;	O
while	O
(	O
count	int
)	O
{	O
RL_CHECK_SIGNALS	O
(	O
)	O
;	O
ret	int
=	O
noninc_search_from_pos	(*(char),int,int)->(int)
(	O
history_search_string	*(char)
,	O
rl_history_search_pos	int
+	O
dir	int
,	O
dir	int
)	O
;	O
if	O
(	O
ret	int
==	O
-	O
1	int
)	O
break	O
;	O
rl_history_search_pos	int
=	O
ret	int
;	O
oldpos	int
=	O
where_history	()->(int)
(	O
)	O
;	O
history_set_pos	(int)->(int)
(	O
rl_history_search_pos	int
)	O
;	O
temp	*(struct(*(char),*(char),*(void)))
=	O
current_history	()->(*(struct(*(char),*(char),*(void))))
(	O
)	O
;	O
history_set_pos	(int)->(int)
(	O
oldpos	int
)	O
;	O
if	O
(	O
prev_line_found	*(char)
&&	O
STREQ	O
(	O
prev_line_found	*(char)
,	O
temp	*(struct(*(char),*(char),*(void)))
->	O
line	*(char)
)	O
)	O
continue	O
;	O
prev_line_found	*(char)
=	O
temp	*(struct(*(char),*(char),*(void)))
->	O
line	*(char)
;	O
count	int
--	O
;	O
}	O
if	O
(	O
temp	*(struct(*(char),*(char),*(void)))
==	O
0	int
)	O
{	O
rl_maybe_unsave_line	()->(int)
(	O
)	O
;	O
rl_ding	()->(int)
(	O
)	O
;	O
rl_point	int
=	O
rl_history_search_len	int
;	O
rl_mark	int
=	O
rl_end	int
;	O
return	O
1	int
;	O
}	O
make_history_line_current	(*(struct(*(char),*(char),*(void))))->(void)
(	O
temp	*(struct(*(char),*(char),*(void)))
)	O
;	O
if	O
(	O
rl_history_search_flags	int
&	O
ANCHORED_SEARCH	int
)	O
rl_point	int
=	O
rl_history_search_len	int
;	O
else	O
{	O
t	*(char)
=	O
strstr	(*(char),*(char))->(*(char))
(	O
rl_line_buffer	*(char)
,	O
history_search_string	*(char)
)	O
;	O
rl_point	int
=	O
t	*(char)
?	O
(	O
int	O
)	O
(	O
t	*(char)
-	O
rl_line_buffer	*(char)
)	O
+	O
rl_history_search_len	int
:	O
rl_end	int
;	O
}	O
rl_mark	int
=	O
rl_end	int
;	O
return	O
0	int
;	O
}	O
static	O
void	O
rl_history_search_reinit	(int)->(void)
(	O
flags	int
)	O
int	O
flags	int
;	O
{	O
int	O
sind	int
;	O
rl_history_search_pos	int
=	O
where_history	()->(int)
(	O
)	O
;	O
rl_history_search_len	int
=	O
rl_point	int
;	O
rl_history_search_flags	int
=	O
flags	int
;	O
prev_line_found	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
if	O
(	O
rl_point	int
)	O
{	O
if	O
(	O
rl_history_search_len	int
>=	O
history_string_size	int
-	O
2	int
)	O
{	O
history_string_size	int
=	O
rl_history_search_len	int
+	O
2	int
;	O
history_search_string	*(char)
=	O
(	O
char	O
*	O
)	O
xrealloc	(*(void),long)->(*(void))
(	O
history_search_string	*(char)
,	O
history_string_size	int
)	O
;	O
}	O
sind	int
=	O
0	int
;	O
if	O
(	O
flags	int
&	O
ANCHORED_SEARCH	int
)	O
history_search_string	*(char)
[	O
sind	int
++	O
]	O
=	O
'^'	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
history_search_string	*(char)
+	O
sind	int
,	O
rl_line_buffer	*(char)
,	O
rl_point	int
)	O
;	O
history_search_string	*(char)
[	O
rl_point	int
+	O
sind	int
]	O
=	O
'\0'	O
;	O
}	O
_rl_free_saved_history_line	()->(int)
(	O
)	O
;	O
}	O
int	O
rl_history_search_forward	(int,int)->(int)
(	O
count	int
,	O
ignore	int
)	O
int	O
count	int
,	O
ignore	int
;	O
{	O
if	O
(	O
count	int
==	O
0	int
)	O
return	O
(	O
0	int
)	O
;	O
if	O
(	O
rl_last_func	*((int,int)->(int))
!=	O
rl_history_search_forward	(int,int)->(int)
&&	O
rl_last_func	*((int,int)->(int))
!=	O
rl_history_search_backward	(int,int)->(int)
)	O
rl_history_search_reinit	(int)->(void)
(	O
ANCHORED_SEARCH	int
)	O
;	O
if	O
(	O
rl_history_search_len	int
==	O
0	int
)	O
return	O
(	O
rl_get_next_history	(int,int)->(int)
(	O
count	int
,	O
ignore	int
)	O
)	O
;	O
return	O
(	O
rl_history_search_internal	(int,int)->(int)
(	O
abs	(int)->(int)
(	O
count	int
)	O
,	O
(	O
count	int
>	O
0	int
)	O
?	O
1	int
:	O
-	O
1	int
)	O
)	O
;	O
}	O
int	O
rl_history_search_backward	(int,int)->(int)
(	O
count	int
,	O
ignore	int
)	O
int	O
count	int
,	O
ignore	int
;	O
{	O
if	O
(	O
count	int
==	O
0	int
)	O
return	O
(	O
0	int
)	O
;	O
if	O
(	O
rl_last_func	*((int,int)->(int))
!=	O
rl_history_search_forward	(int,int)->(int)
&&	O
rl_last_func	*((int,int)->(int))
!=	O
rl_history_search_backward	(int,int)->(int)
)	O
rl_history_search_reinit	(int)->(void)
(	O
ANCHORED_SEARCH	int
)	O
;	O
if	O
(	O
rl_history_search_len	int
==	O
0	int
)	O
return	O
(	O
rl_get_previous_history	(int,int)->(int)
(	O
count	int
,	O
ignore	int
)	O
)	O
;	O
return	O
(	O
rl_history_search_internal	(int,int)->(int)
(	O
abs	(int)->(int)
(	O
count	int
)	O
,	O
(	O
count	int
>	O
0	int
)	O
?	O
-	O
1	int
:	O
1	int
)	O
)	O
;	O
}	O
int	O
rl_history_substr_search_forward	(int,int)->(int)
(	O
count	int
,	O
ignore	int
)	O
int	O
count	int
,	O
ignore	int
;	O
{	O
if	O
(	O
count	int
==	O
0	int
)	O
return	O
(	O
0	int
)	O
;	O
if	O
(	O
rl_last_func	*((int,int)->(int))
!=	O
rl_history_substr_search_forward	(int,int)->(int)
&&	O
rl_last_func	*((int,int)->(int))
!=	O
rl_history_substr_search_backward	(int,int)->(int)
)	O
rl_history_search_reinit	(int)->(void)
(	O
NON_ANCHORED_SEARCH	int
)	O
;	O
if	O
(	O
rl_history_search_len	int
==	O
0	int
)	O
return	O
(	O
rl_get_next_history	(int,int)->(int)
(	O
count	int
,	O
ignore	int
)	O
)	O
;	O
return	O
(	O
rl_history_search_internal	(int,int)->(int)
(	O
abs	(int)->(int)
(	O
count	int
)	O
,	O
(	O
count	int
>	O
0	int
)	O
?	O
1	int
:	O
-	O
1	int
)	O
)	O
;	O
}	O
int	O
rl_history_substr_search_backward	(int,int)->(int)
(	O
count	int
,	O
ignore	int
)	O
int	O
count	int
,	O
ignore	int
;	O
{	O
if	O
(	O
count	int
==	O
0	int
)	O
return	O
(	O
0	int
)	O
;	O
if	O
(	O
rl_last_func	*((int,int)->(int))
!=	O
rl_history_substr_search_forward	(int,int)->(int)
&&	O
rl_last_func	*((int,int)->(int))
!=	O
rl_history_substr_search_backward	(int,int)->(int)
)	O
rl_history_search_reinit	(int)->(void)
(	O
NON_ANCHORED_SEARCH	int
)	O
;	O
if	O
(	O
rl_history_search_len	int
==	O
0	int
)	O
return	O
(	O
rl_get_previous_history	(int,int)->(int)
(	O
count	int
,	O
ignore	int
)	O
)	O
;	O
return	O
(	O
rl_history_search_internal	(int,int)->(int)
(	O
abs	(int)->(int)
(	O
count	int
)	O
,	O
(	O
count	int
>	O
0	int
)	O
?	O
-	O
1	int
:	O
1	int
)	O
)	O
;	O
}	O
