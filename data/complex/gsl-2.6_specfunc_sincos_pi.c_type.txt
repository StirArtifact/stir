static	O
int	O
sin_pi_taylor	(double,*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
0.0	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
0.0	int
;	O
if	O
(	O
16.0	int
*	O
fabs	(double)->(double)
(	O
x	double
)	O
<	O
1.0	int
)	O
{	O
const	O
double	O
y	double
=	O
M_PI	int
*	O
x	double
;	O
const	O
double	O
a	double
=	O
y	double
*	O
y	double
;	O
result	*(struct(double,double))
->	O
val	double
=	O
y	double
*	O
(	O
1.0	int
-	O
a	double
*	O
(	O
1.0	int
-	O
a	double
*	O
(	O
1.0	int
-	O
a	double
*	O
(	O
1.0	int
-	O
a	double
*	O
(	O
1.0	int
-	O
a	double
/	O
110.0	int
)	O
/	O
72.0	int
)	O
/	O
42.0	int
)	O
/	O
20.0	int
)	O
/	O
6.0	int
)	O
;	O
}	O
else	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
sin	(double)->(double)
(	O
M_PI	int
*	O
x	double
)	O
;	O
}	O
result	*(struct(double,double))
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
cos_pi_taylor	(double,*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
0.0	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
0.0	int
;	O
if	O
(	O
20.0	int
*	O
fabs	(double)->(double)
(	O
x	double
)	O
<	O
1.0	int
)	O
{	O
const	O
double	O
y	double
=	O
M_PI	int
*	O
x	double
;	O
const	O
double	O
a	double
=	O
y	double
*	O
y	double
;	O
result	*(struct(double,double))
->	O
val	double
=	O
1.0	int
-	O
0.5	int
*	O
a	double
*	O
(	O
1.0	int
-	O
a	double
*	O
(	O
1.0	int
-	O
a	double
*	O
(	O
1.0	int
-	O
a	double
*	O
(	O
1.0	int
-	O
a	double
/	O
90.0	int
)	O
/	O
56.0	int
)	O
/	O
30.0	int
)	O
/	O
12.0	int
)	O
;	O
}	O
else	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
cos	(double)->(double)
(	O
M_PI	int
*	O
x	double
)	O
;	O
}	O
result	*(struct(double,double))
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_sf_sin_pi_e	(double,*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
double	O
intx	double
=	O
0.0	int
,	O
fracx	double
=	O
0.0	int
;	O
long	O
q	long
;	O
int	O
sign	int
=	O
1	int
,	O
status	int
;	O
result	*(struct(double,double))
->	O
val	double
=	O
0.0	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
0.0	int
;	O
fracx	double
=	O
modf	(double,*(double))->(double)
(	O
x	double
,	O
&	O
intx	double
)	O
;	O
if	O
(	O
fracx	double
==	O
0.0	int
)	O
return	O
GSL_SUCCESS	int
;	O
if	O
(	O
fabs	(double)->(double)
(	O
intx	double
)	O
>=	O
TWOBIG	O
)	O
return	O
GSL_SUCCESS	int
;	O
q	long
=	O
(	O
(	O
(	O
intx	double
>=	O
LONG_MIN	O
)	O
&&	O
(	O
intx	double
<=	O
LONG_MAX	O
)	O
)	O
?	O
intx	double
:	O
fmod	(double,double)->(double)
(	O
intx	double
,	O
2.0	int
)	O
)	O
;	O
sign	int
=	O
(	O
q	long
%	O
2	int
?	O
-	O
1	int
:	O
1	int
)	O
;	O
if	O
(	O
fabs	(double)->(double)
(	O
fracx	double
)	O
==	O
0.5	int
)	O
{	O
if	O
(	O
fracx	double
<	O
0.0	int
)	O
sign	int
=	O
-	O
sign	int
;	O
result	*(struct(double,double))
->	O
val	double
=	O
(	O
sign	int
!=	O
1	int
?	O
-	O
1.0	int
:	O
1.0	int
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
if	O
(	O
fabs	(double)->(double)
(	O
fracx	double
)	O
>	O
0.5	int
)	O
{	O
sign	int
=	O
-	O
sign	int
;	O
fracx	double
=	O
(	O
fracx	double
>	O
0.0	int
?	O
fracx	double
-	O
1.0	int
:	O
fracx	double
+	O
1.0	int
)	O
;	O
}	O
status	int
=	O
0	int
;	O
if	O
(	O
fracx	double
>	O
0.25	int
)	O
{	O
status	int
=	O
cos_pi_taylor	(double,*(struct(double,double)))->(int)
(	O
(	O
fracx	double
-	O
0.5	int
)	O
,	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
fracx	double
<	O
-	O
0.25	int
)	O
{	O
status	int
=	O
cos_pi_taylor	(double,*(struct(double,double)))->(int)
(	O
(	O
fracx	double
+	O
0.5	int
)	O
,	O
result	*(struct(double,double))
)	O
;	O
sign	int
=	O
-	O
sign	int
;	O
}	O
else	O
{	O
status	int
=	O
sin_pi_taylor	(double,*(struct(double,double)))->(int)
(	O
fracx	double
,	O
result	*(struct(double,double))
)	O
;	O
}	O
if	O
(	O
sign	int
!=	O
1	int
)	O
result	*(struct(double,double))
->	O
val	double
=	O
-	O
result	*(struct(double,double))
->	O
val	double
;	O
return	O
status	int
;	O
}	O
int	O
gsl_sf_cos_pi_e	(double,*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
double	O
intx	double
=	O
0.0	int
,	O
fracx	double
=	O
0.0	int
;	O
long	O
q	long
;	O
int	O
sign	int
=	O
1	int
,	O
status	int
;	O
result	*(struct(double,double))
->	O
val	double
=	O
0.0	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
0.0	int
;	O
fracx	double
=	O
modf	(double,*(double))->(double)
(	O
x	double
,	O
&	O
intx	double
)	O
;	O
if	O
(	O
fabs	(double)->(double)
(	O
fracx	double
)	O
==	O
0.5	int
)	O
return	O
GSL_SUCCESS	int
;	O
if	O
(	O
fabs	(double)->(double)
(	O
intx	double
)	O
>=	O
TWOBIG	O
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
1.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
q	long
=	O
(	O
(	O
(	O
intx	double
>=	O
LONG_MIN	O
)	O
&&	O
(	O
intx	double
<=	O
LONG_MAX	O
)	O
)	O
?	O
intx	double
:	O
fmod	(double,double)->(double)
(	O
intx	double
,	O
2.0	int
)	O
)	O
;	O
sign	int
=	O
(	O
q	long
%	O
2	int
?	O
-	O
1	int
:	O
1	int
)	O
;	O
if	O
(	O
fracx	double
==	O
0.0	int
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
(	O
sign	int
!=	O
1	int
?	O
-	O
1.0	int
:	O
1.0	int
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
if	O
(	O
fabs	(double)->(double)
(	O
fracx	double
)	O
>	O
0.5	int
)	O
{	O
sign	int
=	O
-	O
sign	int
;	O
fracx	double
=	O
(	O
fracx	double
>	O
0.0	int
?	O
fracx	double
-	O
1.0	int
:	O
fracx	double
+	O
1.0	int
)	O
;	O
}	O
status	int
=	O
0	int
;	O
if	O
(	O
fracx	double
>	O
0.25	int
)	O
{	O
status	int
=	O
sin_pi_taylor	(double,*(struct(double,double)))->(int)
(	O
(	O
fracx	double
-	O
0.5	int
)	O
,	O
result	*(struct(double,double))
)	O
;	O
sign	int
=	O
-	O
sign	int
;	O
}	O
else	O
if	O
(	O
fracx	double
<	O
-	O
0.25	int
)	O
{	O
status	int
=	O
sin_pi_taylor	(double,*(struct(double,double)))->(int)
(	O
(	O
fracx	double
+	O
0.5	int
)	O
,	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
{	O
status	int
=	O
cos_pi_taylor	(double,*(struct(double,double)))->(int)
(	O
fracx	double
,	O
result	*(struct(double,double))
)	O
;	O
}	O
if	O
(	O
sign	int
!=	O
1	int
)	O
result	*(struct(double,double))
->	O
val	double
=	O
-	O
result	*(struct(double,double))
->	O
val	double
;	O
return	O
status	int
;	O
}	O
double	O
gsl_sf_sin_pi	(double)->(double)
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_sin_pi_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
double	O
gsl_sf_cos_pi	(double)->(double)
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_cos_pi_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
