static	O
struct	O
timeval	struct(long,long)
TIMEOUT	struct(long,long)
=	O
{	O
25	int
,	O
0	int
}	O
;	O
CLIENT	struct
*	O
simx_clnt	*(struct(*(struct(struct(int,*`,int),struct(int,*`,int),union(struct`,array(char)),*(struct`),*(char))),*(struct(*((*`,long,*`,*`,*`,*`,struct`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*(()->(void)),*((*`,*`)->(void)),*((*`,*`,*`)->(int)),*((*`)->(void)),*((*`,int,*`)->(int)))),*(char)))
;	O
int	O
simx_initialized	int
;	O
int	O
SIMxRegisterApplication	(*(char),*(char),int,*(struct(short,short)))->(int)
(	O
char	O
*	O
server_host	*(char)
,	O
char	O
*	O
site_name	*(char)
,	O
unsigned	O
int	O
application_id	short
,	O
dis_simulation_addr	struct(short,short)
*	O
result	char
)	O
{	O
simx_register_app_args	struct(*(char),short)
args	struct(*(char),short)
;	O
simx_register_app_result	struct(enum(int,int,int,int,int),struct(short,short))
res	struct(enum(int,int,int,int,int),struct(short,short))
;	O
char	O
*	O
p	*(struct(char,char,short,char,char,char,char))
;	O
args	struct(*(char),short)
.	O
site_name	*(char)
=	O
site_name	*(char)
;	O
args	struct(*(char),short)
.	O
application_id	short
=	O
application_id	short
;	O
if	O
(	O
!	O
server_host	*(char)
)	O
{	O
if	O
(	O
(	O
p	*(struct(char,char,short,char,char,char,char))
=	O
getenv	(*(char))->(*(char))
(	O
"SIMX_HOST"	*(char)
)	O
)	O
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
server_host	*(char)
=	O
p	*(struct(char,char,short,char,char,char,char))
;	O
}	O
else	O
{	O
server_host	*(char)
=	O
"localhost"	*(char)
;	O
}	O
}	O
simx_clnt	*(struct(*(struct(struct(int,*`,int),struct(int,*`,int),union(struct`,array(char)),*(struct`),*(char))),*(struct(*((*`,long,*`,*`,*`,*`,struct`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*(()->(void)),*((*`,*`)->(void)),*((*`,*`,*`)->(int)),*((*`)->(void)),*((*`,int,*`)->(int)))),*(char)))
=	O
clnt_create	(*(char),long,long,*(char))->(*(struct(*(struct(struct`,struct`,union`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`)),*(char))))
(	O
server_host	*(char)
,	O
SIMx_PROGRAM	int
,	O
SIMx_VERSION	int
,	O
"udp"	*(char)
)	O
;	O
if	O
(	O
simx_clnt	*(struct(*(struct(struct(int,*`,int),struct(int,*`,int),union(struct`,array(char)),*(struct`),*(char))),*(struct(*((*`,long,*`,*`,*`,*`,struct`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*(()->(void)),*((*`,*`)->(void)),*((*`,*`,*`)->(int)),*((*`)->(void)),*((*`,int,*`)->(int)))),*(char)))
==	O
NULL	O
)	O
{	O
return	O
SIMx_NO_SERVER	int
;	O
}	O
simx_initialized	int
=	O
1	int
;	O
if	O
(	O
clnt_call	O
(	O
simx_clnt	*(struct(*(struct(struct(int,*`,int),struct(int,*`,int),union(struct`,array(char)),*(struct`),*(char))),*(struct(*((*`,long,*`,*`,*`,*`,struct`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*(()->(void)),*((*`,*`)->(void)),*((*`,*`,*`)->(int)),*((*`)->(void)),*((*`,int,*`)->(int)))),*(char)))
,	O
SIMxRegisterApplicationP	int
,	O
(	O
xdrproc_t	*((*(struct(enum(int,int,int),*(struct`),*(char),*(char),*(char),int)),*(void))->(int))
)	O
xdr_simx_register_app_args	(*(struct(enum(int,int,int),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char),*(char),int)),*(struct(*(char),short)))->(int)
,	O
(	O
char	O
*	O
)	O
&	O
args	struct(*(char),short)
,	O
(	O
xdrproc_t	*((*(struct(enum(int,int,int),*(struct`),*(char),*(char),*(char),int)),*(void))->(int))
)	O
xdr_simx_register_app_result	(*(struct(enum(int,int,int),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char),*(char),int)),*(struct(enum(int,int,int,int,int),struct(short,short))))->(int)
,	O
(	O
char	O
*	O
)	O
&	O
res	struct(enum(int,int,int,int,int),struct(short,short))
,	O
TIMEOUT	struct(long,long)
)	O
!=	O
RPC_SUCCESS	int
)	O
{	O
return	O
SIMx_TIMEOUT	int
;	O
}	O
*	O
result	char
=	O
res	struct(enum(int,int,int,int,int),struct(short,short))
.	O
result	char
;	O
return	O
res	struct(enum(int,int,int,int,int),struct(short,short))
.	O
status_code	enum(int,int,int,int,int)
;	O
}	O
