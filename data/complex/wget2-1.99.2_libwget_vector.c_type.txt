struct	O
wget_vector_st	struct(*((*(void),*(void))->(int)),*((*(void))->(void)),*(*(void)),int,int,bool,float)
{	O
wget_vector_compare_fn	(*(void),*(void))->(int)
*	O
cmp	*((*(void),*(void))->(int))
;	O
wget_vector_destructor	(*(void))->(void)
*	O
destructor	*((*(void))->(void))
;	O
void	O
*	O
*	O
entry	*(*(void))
;	O
int	O
max	int
,	O
cur	int
;	O
bool	bool
sorted	bool
:	O
1	int
;	O
float	O
resize_factor	float
;	O
}	O
;	O
wget_vector	struct
*	O
wget_vector_create	(int,*((*(void),*(void))->(int)))->(*(struct))
(	O
int	O
max	int
,	O
wget_vector_compare_fn	(*(void),*(void))->(int)
*	O
cmp	*((*(void),*(void))->(int))
)	O
{	O
wget_vector	struct
*	O
v	*(struct)
=	O
wget_calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
wget_vector	struct
)	O
)	O
;	O
if	O
(	O
!	O
v	*(struct)
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
(	O
v	*(struct)
->	O
entry	*(*(void))
=	O
wget_malloc	(long)->(*(void))
(	O
max	int
*	O
sizeof	O
(	O
void	O
*	O
)	O
)	O
)	O
)	O
{	O
xfree	O
(	O
v	*(struct)
)	O
;	O
return	O
NULL	O
;	O
}	O
v	*(struct)
->	O
max	int
=	O
max	int
;	O
v	*(struct)
->	O
resize_factor	float
=	O
2	int
;	O
v	*(struct)
->	O
cmp	*((*(void),*(void))->(int))
=	O
cmp	*((*(void),*(void))->(int))
;	O
v	*(struct)
->	O
destructor	*((*(void))->(void))
=	O
free	(*(void))->(void)
;	O
return	O
v	*(struct)
;	O
}	O
void	O
wget_vector_set_resize_factor	(*(struct),float)->(void)
(	O
wget_vector	struct
*	O
v	*(struct)
,	O
float	O
factor	float
)	O
{	O
if	O
(	O
v	*(struct)
)	O
v	*(struct)
->	O
resize_factor	float
=	O
factor	float
;	O
}	O
static	O
int	O
WGET_GCC_NONNULL	O
(	O
(	O
2	int
)	O
)	O
insert_element	(*(struct(*((*`,*`)->(int)),*((*`)->(void)),*(*(void)),int,int,bool,float)),*(void),int,int)->(int)
(	O
wget_vector	struct
*	O
v	*(struct)
,	O
const	O
void	O
*	O
elem	*(void)
,	O
int	O
pos	int
,	O
int	O
replace	int
)	O
{	O
if	O
(	O
pos	int
<	O
0	int
||	O
!	O
v	*(struct)
||	O
pos	int
>	O
v	*(struct)
->	O
cur	int
)	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
!	O
replace	int
)	O
{	O
if	O
(	O
v	*(struct)
->	O
max	int
==	O
v	*(struct)
->	O
cur	int
)	O
{	O
int	O
newsize	int
=	O
(	O
int	O
)	O
(	O
v	*(struct)
->	O
max	int
*	O
v	*(struct)
->	O
resize_factor	float
)	O
;	O
if	O
(	O
newsize	int
<=	O
v	*(struct)
->	O
max	int
)	O
return	O
WGET_E_INVALID	int
;	O
void	O
*	O
*	O
tmp	*(*(void))
=	O
wget_realloc	(*(void),long)->(*(void))
(	O
v	*(struct)
->	O
entry	*(*(void))
,	O
newsize	int
*	O
sizeof	O
(	O
void	O
*	O
)	O
)	O
;	O
if	O
(	O
!	O
tmp	*(*(void))
)	O
return	O
WGET_E_MEMORY	int
;	O
v	*(struct)
->	O
entry	*(*(void))
=	O
tmp	*(*(void))
;	O
v	*(struct)
->	O
max	int
=	O
newsize	int
;	O
}	O
memmove	(*(void),*(void),long)->(*(void))
(	O
&	O
v	*(struct)
->	O
entry	*(*(void))
[	O
pos	int
+	O
1	int
]	O
,	O
&	O
v	*(struct)
->	O
entry	*(*(void))
[	O
pos	int
]	O
,	O
(	O
v	*(struct)
->	O
cur	int
-	O
pos	int
)	O
*	O
sizeof	O
(	O
void	O
*	O
)	O
)	O
;	O
v	*(struct)
->	O
cur	int
++	O
;	O
}	O
v	*(struct)
->	O
entry	*(*(void))
[	O
pos	int
]	O
=	O
(	O
void	O
*	O
)	O
elem	*(void)
;	O
if	O
(	O
v	*(struct)
->	O
cmp	*((*(void),*(void))->(int))
)	O
{	O
if	O
(	O
v	*(struct)
->	O
cur	int
==	O
1	int
)	O
v	*(struct)
->	O
sorted	bool
=	O
1	int
;	O
else	O
if	O
(	O
v	*(struct)
->	O
cur	int
>	O
1	int
&&	O
v	*(struct)
->	O
sorted	bool
)	O
{	O
if	O
(	O
pos	int
==	O
0	int
)	O
{	O
if	O
(	O
v	*(struct)
->	O
cmp	*((*(void),*(void))->(int))
(	O
elem	*(void)
,	O
v	*(struct)
->	O
entry	*(*(void))
[	O
1	int
]	O
)	O
>	O
0	int
)	O
v	*(struct)
->	O
sorted	bool
=	O
0	int
;	O
}	O
else	O
if	O
(	O
pos	int
==	O
v	*(struct)
->	O
cur	int
-	O
1	int
)	O
{	O
if	O
(	O
v	*(struct)
->	O
cmp	*((*(void),*(void))->(int))
(	O
elem	*(void)
,	O
v	*(struct)
->	O
entry	*(*(void))
[	O
v	*(struct)
->	O
cur	int
-	O
2	int
]	O
)	O
<	O
0	int
)	O
v	*(struct)
->	O
sorted	bool
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
v	*(struct)
->	O
cmp	*((*(void),*(void))->(int))
(	O
elem	*(void)
,	O
v	*(struct)
->	O
entry	*(*(void))
[	O
pos	int
-	O
1	int
]	O
)	O
<	O
0	int
||	O
v	*(struct)
->	O
cmp	*((*(void),*(void))->(int))
(	O
elem	*(void)
,	O
v	*(struct)
->	O
entry	*(*(void))
[	O
pos	int
+	O
1	int
]	O
)	O
>	O
0	int
)	O
{	O
v	*(struct)
->	O
sorted	bool
=	O
0	int
;	O
}	O
}	O
}	O
}	O
return	O
pos	int
;	O
}	O
int	O
wget_vector_insert	(*(struct),*(void),int)->(int)
(	O
wget_vector	struct
*	O
v	*(struct)
,	O
const	O
void	O
*	O
elem	*(void)
,	O
int	O
pos	int
)	O
{	O
return	O
insert_element	(*(struct(*((*`,*`)->(int)),*((*`)->(void)),*(*(void)),int,int,bool,float)),*(void),int,int)->(int)
(	O
v	*(struct)
,	O
elem	*(void)
,	O
pos	int
,	O
0	int
)	O
;	O
}	O
int	O
wget_vector_insert_sorted	(*(struct),*(void))->(int)
(	O
wget_vector	struct
*	O
v	*(struct)
,	O
const	O
void	O
*	O
elem	*(void)
)	O
{	O
if	O
(	O
!	O
v	*(struct)
)	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
!	O
v	*(struct)
->	O
cmp	*((*(void),*(void))->(int))
)	O
return	O
insert_element	(*(struct(*((*`,*`)->(int)),*((*`)->(void)),*(*(void)),int,int,bool,float)),*(void),int,int)->(int)
(	O
v	*(struct)
,	O
elem	*(void)
,	O
v	*(struct)
->	O
cur	int
,	O
0	int
)	O
;	O
if	O
(	O
!	O
v	*(struct)
->	O
sorted	bool
)	O
wget_vector_sort	(*(struct))->(void)
(	O
v	*(struct)
)	O
;	O
int	O
l	int
=	O
0	int
,	O
r	int
=	O
v	*(struct)
->	O
cur	int
-	O
1	int
,	O
m	*(void)
=	O
0	int
,	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
=	O
0	int
;	O
while	O
(	O
l	int
<=	O
r	int
)	O
{	O
m	*(void)
=	O
(	O
l	int
+	O
r	int
)	O
/	O
2	int
;	O
if	O
(	O
(	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
=	O
v	*(struct)
->	O
cmp	*((*(void),*(void))->(int))
(	O
elem	*(void)
,	O
v	*(struct)
->	O
entry	*(*(void))
[	O
m	*(void)
]	O
)	O
)	O
>	O
0	int
)	O
l	int
=	O
m	*(void)
+	O
1	int
;	O
else	O
if	O
(	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
<	O
0	int
)	O
r	int
=	O
m	*(void)
-	O
1	int
;	O
else	O
return	O
insert_element	(*(struct(*((*`,*`)->(int)),*((*`)->(void)),*(*(void)),int,int,bool,float)),*(void),int,int)->(int)
(	O
v	*(struct)
,	O
elem	*(void)
,	O
m	*(void)
,	O
0	int
)	O
;	O
}	O
if	O
(	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
>	O
0	int
)	O
m	*(void)
++	O
;	O
return	O
insert_element	(*(struct(*((*`,*`)->(int)),*((*`)->(void)),*(*(void)),int,int,bool,float)),*(void),int,int)->(int)
(	O
v	*(struct)
,	O
elem	*(void)
,	O
m	*(void)
,	O
0	int
)	O
;	O
}	O
int	O
wget_vector_add_memdup	(*(struct),*(void),long)->(int)
(	O
wget_vector	struct
*	O
v	*(struct)
,	O
const	O
void	O
*	O
elem	*(void)
,	O
size_t	long
size	*(long)
)	O
{	O
void	O
*	O
elemp	*(void)
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
v	*(struct)
)	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
!	O
(	O
elemp	*(void)
=	O
wget_memdup	(*(void),long)->(*(void))
(	O
elem	*(void)
,	O
size	*(long)
)	O
)	O
)	O
return	O
WGET_E_MEMORY	int
;	O
if	O
(	O
(	O
rc	int
=	O
insert_element	(*(struct(*((*`,*`)->(int)),*((*`)->(void)),*(*(void)),int,int,bool,float)),*(void),int,int)->(int)
(	O
v	*(struct)
,	O
elemp	*(void)
,	O
v	*(struct)
->	O
cur	int
,	O
0	int
)	O
)	O
<	O
0	int
)	O
xfree	O
(	O
elemp	*(void)
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
wget_vector_add	(*(struct),*(void))->(int)
(	O
wget_vector	struct
*	O
v	*(struct)
,	O
const	O
void	O
*	O
elem	*(void)
)	O
{	O
return	O
v	*(struct)
?	O
insert_element	(*(struct(*((*`,*`)->(int)),*((*`)->(void)),*(*(void)),int,int,bool,float)),*(void),int,int)->(int)
(	O
v	*(struct)
,	O
elem	*(void)
,	O
v	*(struct)
->	O
cur	int
,	O
0	int
)	O
:	O
WGET_E_INVALID	int
;	O
}	O
int	O
wget_vector_add_vprintf	(*(struct),*(char),array(struct(int,int,*(void),*(void))))->(int)
(	O
wget_vector	struct
*	O
v	*(struct)
,	O
const	O
char	O
*	O
fmt	*(char)
,	O
va_list	array(struct(int,int,*(void),*(void)))
args	array(struct(int,int,*(void),*(void)))
)	O
{	O
if	O
(	O
!	O
v	*(struct)
||	O
!	O
fmt	*(char)
)	O
return	O
WGET_E_INVALID	int
;	O
char	O
*	O
p	*(char)
=	O
wget_vaprintf	(*(char),array(struct(int,int,*(void),*(void))))->(*(char))
(	O
fmt	*(char)
,	O
args	array(struct(int,int,*(void),*(void)))
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
return	O
WGET_E_MEMORY	int
;	O
return	O
insert_element	(*(struct(*((*`,*`)->(int)),*((*`)->(void)),*(*(void)),int,int,bool,float)),*(void),int,int)->(int)
(	O
v	*(struct)
,	O
p	*(char)
,	O
v	*(struct)
->	O
cur	int
,	O
0	int
)	O
;	O
}	O
int	O
wget_vector_add_printf	(*(struct),*(char))->(int)
(	O
wget_vector	struct
*	O
v	*(struct)
,	O
const	O
char	O
*	O
fmt	*(char)
,	O
...	O
)	O
{	O
if	O
(	O
!	O
v	*(struct)
||	O
!	O
fmt	*(char)
)	O
return	O
WGET_E_INVALID	int
;	O
va_list	array(struct(int,int,*(void),*(void)))
args	array(struct(int,int,*(void),*(void)))
;	O
va_start	O
(	O
args	array(struct(int,int,*(void),*(void)))
,	O
fmt	*(char)
)	O
;	O
char	O
*	O
p	*(char)
=	O
wget_vaprintf	(*(char),array(struct(int,int,*(void),*(void))))->(*(char))
(	O
fmt	*(char)
,	O
args	array(struct(int,int,*(void),*(void)))
)	O
;	O
va_end	O
(	O
args	array(struct(int,int,*(void),*(void)))
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
return	O
WGET_E_MEMORY	int
;	O
return	O
insert_element	(*(struct(*((*`,*`)->(int)),*((*`)->(void)),*(*(void)),int,int,bool,float)),*(void),int,int)->(int)
(	O
v	*(struct)
,	O
p	*(char)
,	O
v	*(struct)
->	O
cur	int
,	O
0	int
)	O
;	O
}	O
int	O
wget_vector_replace	(*(struct),*(void),int)->(int)
(	O
wget_vector	struct
*	O
v	*(struct)
,	O
const	O
void	O
*	O
elem	*(void)
,	O
int	O
pos	int
)	O
{	O
if	O
(	O
!	O
v	*(struct)
||	O
pos	int
<	O
0	int
||	O
pos	int
>=	O
v	*(struct)
->	O
cur	int
)	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
v	*(struct)
->	O
destructor	*((*(void))->(void))
)	O
v	*(struct)
->	O
destructor	*((*(void))->(void))
(	O
v	*(struct)
->	O
entry	*(*(void))
[	O
pos	int
]	O
)	O
;	O
return	O
insert_element	(*(struct(*((*`,*`)->(int)),*((*`)->(void)),*(*(void)),int,int,bool,float)),*(void),int,int)->(int)
(	O
v	*(struct)
,	O
elem	*(void)
,	O
pos	int
,	O
1	int
)	O
;	O
}	O
static	O
int	O
remove_element	(*(struct(*((*`,*`)->(int)),*((*`)->(void)),*(*(void)),int,int,bool,float)),int,int)->(int)
(	O
wget_vector	struct
*	O
v	*(struct)
,	O
int	O
pos	int
,	O
int	O
free_entry	int
)	O
{	O
if	O
(	O
pos	int
<	O
0	int
||	O
!	O
v	*(struct)
||	O
pos	int
>=	O
v	*(struct)
->	O
cur	int
)	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
free_entry	int
)	O
{	O
if	O
(	O
v	*(struct)
->	O
destructor	*((*(void))->(void))
)	O
v	*(struct)
->	O
destructor	*((*(void))->(void))
(	O
v	*(struct)
->	O
entry	*(*(void))
[	O
pos	int
]	O
)	O
;	O
}	O
memmove	(*(void),*(void),long)->(*(void))
(	O
&	O
v	*(struct)
->	O
entry	*(*(void))
[	O
pos	int
]	O
,	O
&	O
v	*(struct)
->	O
entry	*(*(void))
[	O
pos	int
+	O
1	int
]	O
,	O
(	O
v	*(struct)
->	O
cur	int
-	O
pos	int
-	O
1	int
)	O
*	O
sizeof	O
(	O
void	O
*	O
)	O
)	O
;	O
v	*(struct)
->	O
cur	int
--	O
;	O
return	O
pos	int
;	O
}	O
int	O
wget_vector_remove	(*(struct),int)->(int)
(	O
wget_vector	struct
*	O
v	*(struct)
,	O
int	O
pos	int
)	O
{	O
return	O
remove_element	(*(struct(*((*`,*`)->(int)),*((*`)->(void)),*(*(void)),int,int,bool,float)),int,int)->(int)
(	O
v	*(struct)
,	O
pos	int
,	O
1	int
)	O
;	O
}	O
int	O
wget_vector_remove_nofree	(*(struct),int)->(int)
(	O
wget_vector	struct
*	O
v	*(struct)
,	O
int	O
pos	int
)	O
{	O
return	O
remove_element	(*(struct(*((*`,*`)->(int)),*((*`)->(void)),*(*(void)),int,int,bool,float)),int,int)->(int)
(	O
v	*(struct)
,	O
pos	int
,	O
0	int
)	O
;	O
}	O
int	O
wget_vector_move	(*(struct),int,int)->(int)
(	O
wget_vector	struct
*	O
v	*(struct)
,	O
int	O
old_pos	int
,	O
int	O
new_pos	int
)	O
{	O
if	O
(	O
!	O
v	*(struct)
)	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
old_pos	int
<	O
0	int
||	O
old_pos	int
>=	O
v	*(struct)
->	O
cur	int
)	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
new_pos	int
<	O
0	int
||	O
new_pos	int
>=	O
v	*(struct)
->	O
cur	int
)	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
old_pos	int
==	O
new_pos	int
)	O
return	O
new_pos	int
;	O
if	O
(	O
v	*(struct)
->	O
sorted	bool
&&	O
v	*(struct)
->	O
cmp	*((*(void),*(void))->(int))
&&	O
v	*(struct)
->	O
cmp	*((*(void),*(void))->(int))
(	O
v	*(struct)
->	O
entry	*(*(void))
[	O
old_pos	int
]	O
,	O
v	*(struct)
->	O
entry	*(*(void))
[	O
new_pos	int
]	O
)	O
)	O
v	*(struct)
->	O
sorted	bool
=	O
0	int
;	O
if	O
(	O
old_pos	int
<	O
new_pos	int
)	O
{	O
void	O
*	O
tmp	*(*(void))
=	O
v	*(struct)
->	O
entry	*(*(void))
[	O
old_pos	int
]	O
;	O
memmove	(*(void),*(void),long)->(*(void))
(	O
&	O
v	*(struct)
->	O
entry	*(*(void))
[	O
old_pos	int
]	O
,	O
&	O
v	*(struct)
->	O
entry	*(*(void))
[	O
old_pos	int
+	O
1	int
]	O
,	O
(	O
new_pos	int
-	O
old_pos	int
)	O
*	O
sizeof	O
(	O
void	O
*	O
)	O
)	O
;	O
v	*(struct)
->	O
entry	*(*(void))
[	O
new_pos	int
]	O
=	O
tmp	*(*(void))
;	O
}	O
else	O
{	O
void	O
*	O
tmp	*(*(void))
=	O
v	*(struct)
->	O
entry	*(*(void))
[	O
old_pos	int
]	O
;	O
memmove	(*(void),*(void),long)->(*(void))
(	O
&	O
v	*(struct)
->	O
entry	*(*(void))
[	O
new_pos	int
+	O
1	int
]	O
,	O
&	O
v	*(struct)
->	O
entry	*(*(void))
[	O
new_pos	int
]	O
,	O
(	O
old_pos	int
-	O
new_pos	int
)	O
*	O
sizeof	O
(	O
void	O
*	O
)	O
)	O
;	O
v	*(struct)
->	O
entry	*(*(void))
[	O
new_pos	int
]	O
=	O
tmp	*(*(void))
;	O
}	O
return	O
new_pos	int
;	O
}	O
int	O
wget_vector_swap	(*(struct),int,int)->(int)
(	O
wget_vector	struct
*	O
v	*(struct)
,	O
int	O
pos1	int
,	O
int	O
pos2	int
)	O
{	O
if	O
(	O
!	O
v	*(struct)
)	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
pos1	int
<	O
0	int
||	O
pos1	int
>=	O
v	*(struct)
->	O
cur	int
)	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
pos2	int
<	O
0	int
||	O
pos2	int
>=	O
v	*(struct)
->	O
cur	int
)	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
pos1	int
==	O
pos2	int
)	O
return	O
pos2	int
;	O
void	O
*	O
tmp	*(*(void))
=	O
v	*(struct)
->	O
entry	*(*(void))
[	O
pos1	int
]	O
;	O
v	*(struct)
->	O
entry	*(*(void))
[	O
pos1	int
]	O
=	O
v	*(struct)
->	O
entry	*(*(void))
[	O
pos2	int
]	O
;	O
v	*(struct)
->	O
entry	*(*(void))
[	O
pos2	int
]	O
=	O
tmp	*(*(void))
;	O
if	O
(	O
v	*(struct)
->	O
sorted	bool
&&	O
v	*(struct)
->	O
cmp	*((*(void),*(void))->(int))
&&	O
v	*(struct)
->	O
cmp	*((*(void),*(void))->(int))
(	O
v	*(struct)
->	O
entry	*(*(void))
[	O
pos1	int
]	O
,	O
v	*(struct)
->	O
entry	*(*(void))
[	O
pos2	int
]	O
)	O
)	O
v	*(struct)
->	O
sorted	bool
=	O
0	int
;	O
return	O
pos2	int
;	O
}	O
void	O
wget_vector_free	(*(*(struct)))->(void)
(	O
wget_vector	struct
*	O
*	O
v	*(struct)
)	O
{	O
if	O
(	O
v	*(struct)
&&	O
*	O
v	*(struct)
)	O
{	O
wget_vector_clear	(*(struct))->(void)
(	O
*	O
v	*(struct)
)	O
;	O
xfree	O
(	O
(	O
*	O
v	*(struct)
)	O
->	O
entry	*(*(void))
)	O
;	O
xfree	O
(	O
*	O
v	*(struct)
)	O
;	O
}	O
}	O
void	O
wget_vector_clear	(*(struct))->(void)
(	O
wget_vector	struct
*	O
v	*(struct)
)	O
{	O
if	O
(	O
v	*(struct)
)	O
{	O
if	O
(	O
v	*(struct)
->	O
destructor	*((*(void))->(void))
)	O
{	O
for	O
(	O
int	O
it	int
=	O
0	int
;	O
it	int
<	O
v	*(struct)
->	O
cur	int
;	O
it	int
++	O
)	O
{	O
v	*(struct)
->	O
destructor	*((*(void))->(void))
(	O
v	*(struct)
->	O
entry	*(*(void))
[	O
it	int
]	O
)	O
;	O
v	*(struct)
->	O
entry	*(*(void))
[	O
it	int
]	O
=	O
NULL	O
;	O
}	O
}	O
v	*(struct)
->	O
cur	int
=	O
0	int
;	O
}	O
}	O
void	O
wget_vector_clear_nofree	(*(struct))->(void)
(	O
wget_vector	struct
*	O
v	*(struct)
)	O
{	O
if	O
(	O
v	*(struct)
)	O
{	O
for	O
(	O
int	O
it	int
=	O
0	int
;	O
it	int
<	O
v	*(struct)
->	O
cur	int
;	O
it	int
++	O
)	O
v	*(struct)
->	O
entry	*(*(void))
[	O
it	int
]	O
=	O
NULL	O
;	O
v	*(struct)
->	O
cur	int
=	O
0	int
;	O
}	O
}	O
int	O
wget_vector_size	(*(struct))->(int)
(	O
const	O
wget_vector	struct
*	O
v	*(struct)
)	O
{	O
return	O
v	*(struct)
?	O
v	*(struct)
->	O
cur	int
:	O
0	int
;	O
}	O
void	O
*	O
wget_vector_get	(*(struct),int)->(*(void))
(	O
const	O
wget_vector	struct
*	O
v	*(struct)
,	O
int	O
pos	int
)	O
{	O
if	O
(	O
pos	int
<	O
0	int
||	O
!	O
v	*(struct)
||	O
pos	int
>=	O
v	*(struct)
->	O
cur	int
)	O
return	O
NULL	O
;	O
return	O
v	*(struct)
->	O
entry	*(*(void))
[	O
pos	int
]	O
;	O
}	O
int	O
wget_vector_browse	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
const	O
wget_vector	struct
*	O
v	*(struct)
,	O
wget_vector_browse_fn	(*(void),*(void))->(int)
*	O
browse	*((*(void),*(void))->(int))
,	O
void	O
*	O
ctx	*(void)
)	O
{	O
if	O
(	O
v	*(struct)
)	O
{	O
for	O
(	O
int	O
ret	int
,	O
it	int
=	O
0	int
;	O
it	int
<	O
v	*(struct)
->	O
cur	int
;	O
it	int
++	O
)	O
if	O
(	O
(	O
ret	int
=	O
browse	*((*(void),*(void))->(int))
(	O
ctx	*(void)
,	O
v	*(struct)
->	O
entry	*(*(void))
[	O
it	int
]	O
)	O
)	O
!=	O
0	int
)	O
return	O
ret	int
;	O
}	O
return	O
0	int
;	O
}	O
void	O
wget_vector_setcmpfunc	(*(struct),*((*(void),*(void))->(int)))->(void)
(	O
wget_vector	struct
*	O
v	*(struct)
,	O
wget_vector_compare_fn	(*(void),*(void))->(int)
*	O
cmp	*((*(void),*(void))->(int))
)	O
{	O
if	O
(	O
v	*(struct)
)	O
{	O
v	*(struct)
->	O
cmp	*((*(void),*(void))->(int))
=	O
cmp	*((*(void),*(void))->(int))
;	O
if	O
(	O
v	*(struct)
->	O
cur	int
==	O
1	int
)	O
v	*(struct)
->	O
sorted	bool
=	O
1	int
;	O
else	O
v	*(struct)
->	O
sorted	bool
=	O
0	int
;	O
}	O
}	O
void	O
wget_vector_set_destructor	(*(struct),*((*(void))->(void)))->(void)
(	O
wget_vector	struct
*	O
v	*(struct)
,	O
wget_vector_destructor	(*(void))->(void)
*	O
destructor	*((*(void))->(void))
)	O
{	O
if	O
(	O
v	*(struct)
)	O
v	*(struct)
->	O
destructor	*((*(void))->(void))
=	O
destructor	*((*(void))->(void))
;	O
}	O
WGET_GCC_NONNULL_ALL	O
static	O
int	O
compare_element	(*(void),*(void),*(void))->(int)
(	O
const	O
void	O
*	O
p1	*(void)
,	O
const	O
void	O
*	O
p2	*(void)
,	O
void	O
*	O
v	*(struct)
)	O
{	O
return	O
(	O
(	O
wget_vector	struct
*	O
)	O
v	*(struct)
)	O
->	O
cmp	*((*(void),*(void))->(int))
(	O
*	O
(	O
(	O
void	O
*	O
*	O
)	O
p1	*(void)
)	O
,	O
*	O
(	O
(	O
void	O
*	O
*	O
)	O
p2	*(void)
)	O
)	O
;	O
}	O
void	O
wget_vector_sort	(*(struct))->(void)
(	O
wget_vector	struct
*	O
v	*(struct)
)	O
{	O
if	O
(	O
v	*(struct)
&&	O
v	*(struct)
->	O
cmp	*((*(void),*(void))->(int))
)	O
{	O
qsort_r	(*(void),long,long,*((*(void),*(void),*(void))->(int)),*(void))->(void)
(	O
v	*(struct)
->	O
entry	*(*(void))
,	O
v	*(struct)
->	O
cur	int
,	O
sizeof	O
(	O
void	O
*	O
)	O
,	O
compare_element	(*(void),*(void),*(void))->(int)
,	O
v	*(struct)
)	O
;	O
v	*(struct)
->	O
sorted	bool
=	O
1	int
;	O
}	O
}	O
int	O
wget_vector_find	(*(struct),*(void))->(int)
(	O
const	O
wget_vector	struct
*	O
v	*(struct)
,	O
const	O
void	O
*	O
elem	*(void)
)	O
{	O
if	O
(	O
!	O
v	*(struct)
||	O
!	O
v	*(struct)
->	O
cmp	*((*(void),*(void))->(int))
)	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
v	*(struct)
->	O
cur	int
==	O
1	int
)	O
{	O
if	O
(	O
v	*(struct)
->	O
cmp	*((*(void),*(void))->(int))
(	O
elem	*(void)
,	O
v	*(struct)
->	O
entry	*(*(void))
[	O
0	int
]	O
)	O
==	O
0	int
)	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
v	*(struct)
->	O
sorted	bool
)	O
{	O
for	O
(	O
int	O
l	int
=	O
0	int
,	O
r	int
=	O
v	*(struct)
->	O
cur	int
-	O
1	int
;	O
l	int
<=	O
r	int
;	O
)	O
{	O
int	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
,	O
m	*(void)
=	O
(	O
l	int
+	O
r	int
)	O
/	O
2	int
;	O
if	O
(	O
(	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
=	O
v	*(struct)
->	O
cmp	*((*(void),*(void))->(int))
(	O
elem	*(void)
,	O
v	*(struct)
->	O
entry	*(*(void))
[	O
m	*(void)
]	O
)	O
)	O
>	O
0	int
)	O
l	int
=	O
m	*(void)
+	O
1	int
;	O
else	O
if	O
(	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
<	O
0	int
)	O
r	int
=	O
m	*(void)
-	O
1	int
;	O
else	O
return	O
m	*(void)
;	O
}	O
}	O
else	O
{	O
for	O
(	O
int	O
it	int
=	O
0	int
;	O
it	int
<	O
v	*(struct)
->	O
cur	int
;	O
it	int
++	O
)	O
if	O
(	O
v	*(struct)
->	O
cmp	*((*(void),*(void))->(int))
(	O
elem	*(void)
,	O
v	*(struct)
->	O
entry	*(*(void))
[	O
it	int
]	O
)	O
==	O
0	int
)	O
return	O
it	int
;	O
}	O
return	O
WGET_E_UNKNOWN	int
;	O
}	O
bool	bool
wget_vector_contains	(*(struct),*(void))->(bool)
(	O
const	O
wget_vector	struct
*	O
v	*(struct)
,	O
const	O
void	O
*	O
elem	*(void)
)	O
{	O
return	O
wget_vector_find	(*(struct),*(void))->(int)
(	O
v	*(struct)
,	O
elem	*(void)
)	O
>=	O
0	int
;	O
}	O
int	O
wget_vector_findext	(*(struct),int,int,*((*(void))->(int)))->(int)
(	O
const	O
wget_vector	struct
*	O
v	*(struct)
,	O
int	O
start	int
,	O
int	O
direction	int
,	O
wget_vector_find_fn	(*(void))->(int)
*	O
find	*((*(void))->(int))
)	O
{	O
if	O
(	O
!	O
v	*(struct)
)	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
direction	int
)	O
{	O
if	O
(	O
start	int
<	O
v	*(struct)
->	O
cur	int
)	O
{	O
for	O
(	O
int	O
it	int
=	O
start	int
;	O
it	int
>=	O
0	int
;	O
it	int
--	O
)	O
if	O
(	O
find	*((*(void))->(int))
(	O
v	*(struct)
->	O
entry	*(*(void))
[	O
it	int
]	O
)	O
==	O
0	int
)	O
return	O
it	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
start	int
>=	O
0	int
)	O
{	O
for	O
(	O
int	O
it	int
=	O
start	int
;	O
it	int
<	O
v	*(struct)
->	O
cur	int
;	O
it	int
++	O
)	O
if	O
(	O
find	*((*(void))->(int))
(	O
v	*(struct)
->	O
entry	*(*(void))
[	O
it	int
]	O
)	O
==	O
0	int
)	O
return	O
it	int
;	O
}	O
}	O
return	O
WGET_E_UNKNOWN	int
;	O
}	O
