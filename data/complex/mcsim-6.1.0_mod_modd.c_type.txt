PSTR	*(char)
vrgszMathFuncs	array(*(char))
[	O
]	O
=	O
{	O
"acos"	*(char)
,	O
"asin"	*(char)
,	O
"atan"	*(char)
,	O
"atan2"	*(char)
,	O
"ceil"	*(char)
,	O
"cos"	*(char)
,	O
"cosh"	*(char)
,	O
"exp"	*(char)
,	O
"fabs"	*(char)
,	O
"floor"	*(char)
,	O
"fmax"	*(char)
,	O
"fmin"	*(char)
,	O
"fmod"	*(char)
,	O
"log"	*(char)
,	O
"log10"	*(char)
,	O
"pow"	*(char)
,	O
"sin"	*(char)
,	O
"sinh"	*(char)
,	O
"sqrt"	*(char)
,	O
"tan"	*(char)
,	O
"tanh"	*(char)
,	O
"CDFNormal"	*(char)
,	O
"erfc"	*(char)
,	O
"lnDFNormal"	*(char)
,	O
"lnGamma"	*(char)
,	O
"piecewise"	*(char)
,	O
"and"	*(char)
,	O
"leq"	*(char)
,	O
"lt"	*(char)
,	O
"BetaRandom"	*(char)
,	O
"BinomialBetaRandom"	*(char)
,	O
"BinomialRandom"	*(char)
,	O
"CauchyRandom"	*(char)
,	O
"Chi2Random"	*(char)
,	O
"ExpRandom"	*(char)
,	O
"GammaRandom"	*(char)
,	O
"GetSeed"	*(char)
,	O
"GGammaRandom"	*(char)
,	O
"InvGGammaRandom"	*(char)
,	O
"LogNormalRandom"	*(char)
,	O
"LogUniformRandom"	*(char)
,	O
"NormalRandom"	*(char)
,	O
"PiecewiseRandom"	*(char)
,	O
"PoissonRandom"	*(char)
,	O
"SetSeed"	*(char)
,	O
"StudentTRandom"	*(char)
,	O
"TruncInvGGammaRandom"	*(char)
,	O
"TruncLogNormalRandom"	*(char)
,	O
"TruncNormalRandom"	*(char)
,	O
"UniformRandom"	*(char)
,	O
""	*(char)
}	O
;	O
char	O
vszHasInitializer	array(char)
[	O
]	O
=	O
"0.0; /* Redefined later */"	*(char)
;	O
BOOL	int
IsMathFunc	(*(char))->(int)
(	O
PSTR	*(char)
sz	*(char)
)	O
{	O
int	O
i	int
=	O
0	int
;	O
while	O
(	O
*	O
vrgszMathFuncs	array(*(char))
[	O
i	int
]	O
&&	O
strcmp	(*(char),*(char))->(int)
(	O
vrgszMathFuncs	array(*(char))
[	O
i	int
]	O
,	O
sz	*(char)
)	O
)	O
i	int
++	O
;	O
return	O
(	O
*	O
vrgszMathFuncs	array(*(char))
[	O
i	int
]	O
)	O
;	O
}	O
BOOL	int
IsDelayFunc	(*(int),*(char))->(int)
(	O
BOOL	int
*	O
bDelays	int
,	O
PSTR	*(char)
sz	*(char)
)	O
{	O
BOOL	int
bIsDelay	int
;	O
bIsDelay	int
=	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
"CalcDelay"	*(char)
,	O
sz	*(char)
)	O
)	O
;	O
if	O
(	O
bIsDelay	int
&&	O
!	O
(	O
*	O
bDelays	int
)	O
)	O
*	O
bDelays	int
=	O
TRUE	int
;	O
return	O
(	O
bIsDelay	int
)	O
;	O
}	O
BOOL	int
VerifyEqn	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(char))->(int)
(	O
PINPUTBUF	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
PSTR	*(char)
szEqn	*(char)
)	O
{	O
INPUTBUF	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))
ibDummy	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))
;	O
PSTRLEX	array(char)
szLex	*(char)
;	O
int	O
iType	int
,	O
fContext	int
;	O
BOOL	int
bReturn	int
=	O
TRUE	int
;	O
BOOL	int
bOK	int
=	O
TRUE	int
;	O
PINPUTINFO	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
;	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
=	O
(	O
PINPUTINFO	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
)	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
->	O
pInfo	*(void)
;	O
MakeStringBuffer	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(char))->(void)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
&	O
ibDummy	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))
,	O
szEqn	*(char)
)	O
;	O
while	O
(	O
!	O
EOB	O
(	O
&	O
ibDummy	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))
)	O
)	O
{	O
NextLex	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),array(char),*(int))->(void)
(	O
&	O
ibDummy	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))
,	O
szLex	*(char)
,	O
&	O
iType	int
)	O
;	O
switch	O
(	O
iType	int
)	O
{	O
case	O
LX_IDENTIFIER	int
:	O
if	O
(	O
(	O
iType	int
=	O
GetKeywordCode	(*(char),*(int))->(int)
(	O
szLex	*(char)
,	O
&	O
fContext	int
)	O
)	O
)	O
{	O
if	O
(	O
!	O
(	O
bOK	int
=	O
(	O
iType	int
==	O
KM_DXDT	int
&&	O
(	O
fContext	int
&	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
wContext	int
)	O
)	O
)	O
)	O
ReportError	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),int,*(char),*(char))->(void)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
RE_BADCONTEXT	O
|	O
RE_FATAL	int
,	O
szLex	*(char)
,	O
NULL	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
GetFnType	(*(char))->(int)
(	O
szLex	*(char)
)	O
)	O
{	O
ReportError	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),int,*(char),*(char))->(void)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
RE_BADCONTEXT	O
|	O
RE_FATAL	int
,	O
szLex	*(char)
,	O
NULL	O
)	O
;	O
}	O
if	O
(	O
!	O
(	O
bOK	int
=	O
(	O
GetVarType	(*(struct(*(char),*(char),long,*(struct(*`,*`,long,*`)))),*(char))->(int)
(	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmGloVars	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
szLex	*(char)
)	O
||	O
IsMathFunc	(*(char))->(int)
(	O
szLex	*(char)
)	O
||	O
IsDelayFunc	(*(int),*(char))->(int)
(	O
&	O
(	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
bDelays	int
)	O
,	O
szLex	*(char)
)	O
||	O
(	O
(	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
wContext	int
==	O
CN_DYNAMICS	int
||	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
wContext	int
==	O
CN_SCALE	int
||	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
wContext	int
==	O
CN_CALCOUTPUTS	int
)	O
&&	O
!	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
szLex	*(char)
,	O
VSZ_TIME	*(char)
)	O
&&	O
strcmp	(*(char),*(char))->(int)
(	O
szLex	*(char)
,	O
VSZ_TIME_SBML	*(char)
)	O
)	O
)	O
)	O
)	O
)	O
ReportError	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),int,*(char),*(char))->(void)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
RE_UNDEFINED	O
|	O
RE_FATAL	int
,	O
szLex	*(char)
,	O
NULL	O
)	O
;	O
}	O
break	O
;	O
case	O
LX_EQNPUNCT	int
:	O
if	O
(	O
(	O
szLex	*(char)
[	O
0	int
]	O
==	O
'!'	O
||	O
szLex	*(char)
[	O
0	int
]	O
==	O
'='	O
)	O
&&	O
strlen	(*(char))->(long)
(	O
szLex	*(char)
)	O
==	O
1	int
)	O
{	O
ReportError	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),int,*(char),*(char))->(void)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
RE_UNEXPECTED	int
,	O
szLex	*(char)
,	O
".. in equation"	*(char)
)	O
;	O
bOK	int
=	O
FALSE	int
;	O
}	O
break	O
;	O
case	O
LX_PUNCT	int
:	O
ReportError	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),int,*(char),*(char))->(void)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
RE_UNEXPECTED	int
,	O
szLex	*(char)
,	O
".. in equation"	*(char)
)	O
;	O
bOK	int
=	O
FALSE	int
;	O
break	O
;	O
case	O
LX_INTEGER	int
:	O
case	O
LX_FLOAT	int
:	O
break	O
;	O
default	O
:	O
ReportError	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),int,*(char),*(char))->(void)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
RE_UNEXPECTED	int
,	O
szLex	*(char)
,	O
".. in equation"	*(char)
)	O
;	O
bOK	int
=	O
FALSE	int
;	O
break	O
;	O
}	O
bReturn	int
=	O
(	O
bReturn	int
&&	O
bOK	int
)	O
;	O
}	O
return	O
(	O
bReturn	int
)	O
;	O
}	O
void	O
AddEquation	(*(*(struct(*(char),*(char),long,*(struct`)))),*(char),*(char),long)->(void)
(	O
PVMMAPSTRCT	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
*	O
ppvm	*(*(struct(*(char),*(char),long,*(struct(*`,*`,long,*`)))))
,	O
PSTR	*(char)
szName	*(char)
,	O
PSTR	*(char)
szEqn	*(char)
,	O
HANDLE	long
hType	long
)	O
{	O
PVMMAPSTRCT	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
pvmNew	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
;	O
if	O
(	O
!	O
ppvm	*(*(struct(*(char),*(char),long,*(struct(*`,*`,long,*`)))))
||	O
!	O
szName	*(char)
)	O
return	O
;	O
if	O
(	O
(	O
pvmNew	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
=	O
(	O
PVMMAPSTRCT	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
VMMAPSTRCT	struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct(*`,*`,long,*`)))))
)	O
)	O
)	O
)	O
{	O
pvmNew	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
->	O
szName	*(char)
=	O
CopyString	(*(char))->(*(char))
(	O
szName	*(char)
)	O
;	O
pvmNew	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
->	O
szEqn	*(char)
=	O
CopyString	(*(char))->(*(char))
(	O
szEqn	*(char)
)	O
;	O
pvmNew	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
->	O
hType	long
=	O
hType	long
;	O
pvmNew	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmNextVar	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
=	O
*	O
ppvm	*(*(struct(*(char),*(char),long,*(struct(*`,*`,long,*`)))))
;	O
*	O
ppvm	*(*(struct(*(char),*(char),long,*(struct(*`,*`,long,*`)))))
=	O
pvmNew	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
;	O
}	O
else	O
ReportError	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),int,*(char),*(char))->(void)
(	O
NULL	O
,	O
RE_OUTOFMEM	int
|	O
RE_FATAL	int
,	O
szName	*(char)
,	O
"* .. creating new equation in AddEquation"	*(char)
)	O
;	O
}	O
PSTR	*(char)
CopyString	(*(char))->(*(char))
(	O
PSTR	*(char)
szOrg	*(char)
)	O
{	O
PSTR	*(char)
szBuf	*(char)
;	O
if	O
(	O
szOrg	*(char)
)	O
{	O
if	O
(	O
(	O
szBuf	*(char)
=	O
(	O
PSTR	*(char)
)	O
malloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
szOrg	*(char)
)	O
+	O
1	int
)	O
)	O
)	O
return	O
(	O
strcpy	(*(char),*(char))->(*(char))
(	O
(	O
PSTR	*(char)
)	O
szBuf	*(char)
,	O
szOrg	*(char)
)	O
)	O
;	O
else	O
ReportError	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),int,*(char),*(char))->(void)
(	O
NULL	O
,	O
RE_OUTOFMEM	int
|	O
RE_FATAL	int
,	O
szOrg	*(char)
,	O
"* .. defining equation in CopyString"	*(char)
)	O
;	O
}	O
return	O
(	O
NULL	O
)	O
;	O
}	O
void	O
SetEquation	(*(struct(*(char),*(char),long,*(struct(*`,*`,long,*`)))),*(char))->(void)
(	O
PVMMAPSTRCT	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
PSTR	*(char)
szEqn	*(char)
)	O
{	O
if	O
(	O
!	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
||	O
!	O
szEqn	*(char)
)	O
return	O
;	O
if	O
(	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
->	O
szEqn	*(char)
)	O
free	(*(void))->(void)
(	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
->	O
szEqn	*(char)
)	O
;	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
->	O
szEqn	*(char)
=	O
CopyString	(*(char))->(*(char))
(	O
szEqn	*(char)
)	O
;	O
}	O
void	O
SetVarType	(*(struct(*(char),*(char),long,*(struct(*`,*`,long,*`)))),*(char),long)->(void)
(	O
PVMMAPSTRCT	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
PSTR	*(char)
szName	*(char)
,	O
HANDLE	long
hType	long
)	O
{	O
while	O
(	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
&&	O
strcmp	(*(char),*(char))->(int)
(	O
szName	*(char)
,	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
->	O
szName	*(char)
)	O
)	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
=	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmNextVar	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
;	O
if	O
(	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
)	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
->	O
hType	long
=	O
hType	long
;	O
}	O
PVMMAPSTRCT	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
GetVarPTR	(*(struct(*(char),*(char),long,*(struct(*`,*`,long,*`)))),*(char))->(*(struct(*(char),*(char),long,*(struct(*`,*`,long,*`)))))
(	O
PVMMAPSTRCT	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
PSTR	*(char)
szName	*(char)
)	O
{	O
while	O
(	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
&&	O
strcmp	(*(char),*(char))->(int)
(	O
szName	*(char)
,	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
->	O
szName	*(char)
)	O
)	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
=	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmNextVar	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
;	O
return	O
(	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
)	O
;	O
}	O
int	O
GetVarType	(*(struct(*(char),*(char),long,*(struct(*`,*`,long,*`)))),*(char))->(int)
(	O
PVMMAPSTRCT	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
PSTR	*(char)
szName	*(char)
)	O
{	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
=	O
GetVarPTR	(*(struct(*(char),*(char),long,*(struct(*`,*`,long,*`)))),*(char))->(*(struct(*(char),*(char),long,*(struct(*`,*`,long,*`)))))
(	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
szName	*(char)
)	O
;	O
return	O
(	O
TYPE	O
(	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
)	O
)	O
;	O
}	O
HANDLE	long
CalculateVarHandle	(*(struct(*(char),*(char),long,*(struct(*`,*`,long,*`)))),*(char))->(long)
(	O
PVMMAPSTRCT	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
PSTR	*(char)
sz	*(char)
)	O
{	O
PVMMAPSTRCT	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
pvmVar	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
;	O
int	O
cSameType	int
=	O
0	int
;	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
=	O
pvmVar	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
=	O
GetVarPTR	(*(struct(*(char),*(char),long,*(struct(*`,*`,long,*`)))),*(char))->(*(struct(*(char),*(char),long,*(struct(*`,*`,long,*`)))))
(	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
sz	*(char)
)	O
;	O
if	O
(	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
)	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
=	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmNextVar	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
;	O
while	O
(	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
&&	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
->	O
hType	long
==	O
pvmVar	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
->	O
hType	long
)	O
{	O
cSameType	int
++	O
;	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
=	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmNextVar	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
;	O
}	O
return	O
(	O
(	O
HANDLE	long
)	O
(	O
pvmVar	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
?	O
pvmVar	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
->	O
hType	long
|	O
(	O
HANDLE	long
)	O
cSameType	int
:	O
0	int
)	O
)	O
;	O
}	O
void	O
DefineGlobalVar	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(struct(*(char),*(char),long,*(struct(*`,*`,long,*`)))),*(char),*(char),long)->(void)
(	O
PINPUTBUF	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
PVMMAPSTRCT	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
PSTR	*(char)
szName	*(char)
,	O
PSTR	*(char)
szEqn	*(char)
,	O
HANDLE	long
hType	long
)	O
{	O
PINPUTINFO	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
=	O
(	O
PINPUTINFO	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
)	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
->	O
pInfo	*(void)
;	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
szName	*(char)
,	O
"Inline"	*(char)
)	O
)	O
AddEquation	(*(*(struct(*(char),*(char),long,*(struct`)))),*(char),*(char),long)->(void)
(	O
&	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmGloVars	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
szName	*(char)
,	O
szEqn	*(char)
,	O
ID_INLINE	int
)	O
;	O
else	O
switch	O
(	O
hType	long
)	O
{	O
case	O
ID_NULL	int
:	O
AddEquation	(*(*(struct(*(char),*(char),long,*(struct`)))),*(char),*(char),long)->(void)
(	O
&	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmGloVars	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
szName	*(char)
,	O
szEqn	*(char)
,	O
ID_PARM	int
)	O
;	O
break	O
;	O
case	O
ID_INPUT	int
:	O
case	O
ID_OUTPUT	int
:	O
case	O
ID_STATE	int
:	O
assert	O
(	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
!=	O
NULL	O
)	O
;	O
if	O
(	O
!	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
->	O
szEqn	*(char)
)	O
{	O
if	O
(	O
hType	long
==	O
ID_INPUT	int
)	O
{	O
PIFN	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
=	O
(	O
PIFN	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
IFN	struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double))
)	O
)	O
;	O
if	O
(	O
GetInputFn	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(char),*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double))))->(int)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
szEqn	*(char)
,	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
)	O
)	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
->	O
szEqn	*(char)
=	O
(	O
PSTR	*(char)
)	O
pifn	*(struct(int,int,double,double,double,double,double,double,double,long,long,long,long,long,int,int,*(double),*(double),*(double)))
;	O
else	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
->	O
szEqn	*(char)
=	O
NULL	O
;	O
}	O
else	O
{	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
->	O
szEqn	*(char)
=	O
vszHasInitializer	array(char)
;	O
AddEquation	(*(*(struct(*(char),*(char),long,*(struct`)))),*(char),*(char),long)->(void)
(	O
&	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmGloVars	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
szName	*(char)
,	O
szEqn	*(char)
,	O
hType	long
)	O
;	O
}	O
break	O
;	O
}	O
case	O
ID_PARM	int
:	O
ReportError	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),int,*(char),*(char))->(void)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
RE_REDEF	O
|	O
RE_WARNING	int
,	O
szName	*(char)
,	O
NULL	O
)	O
;	O
break	O
;	O
default	O
:	O
ReportError	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),int,*(char),*(char))->(void)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
RE_BADCONTEXT	O
,	O
szName	*(char)
,	O
NULL	O
)	O
;	O
}	O
}	O
void	O
DefineDynamicsEqn	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(char),*(char),long)->(void)
(	O
PINPUTBUF	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
PSTR	*(char)
szName	*(char)
,	O
PSTR	*(char)
szEqn	*(char)
,	O
HANDLE	long
hType	long
)	O
{	O
HANDLE	long
hNewType	long
=	O
(	O
hType	long
?	O
hType	long
:	O
ID_LOCALDYN	int
)	O
;	O
PINPUTINFO	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
=	O
(	O
PINPUTINFO	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
)	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
->	O
pInfo	*(void)
;	O
hNewType	long
|=	O
ID_SPACEFLAG	int
;	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
szName	*(char)
,	O
"Inline"	*(char)
)	O
)	O
AddEquation	(*(*(struct(*(char),*(char),long,*(struct`)))),*(char),*(char),long)->(void)
(	O
&	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmDynEqns	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
szName	*(char)
,	O
szEqn	*(char)
,	O
ID_INLINE	int
)	O
;	O
else	O
switch	O
(	O
hType	long
)	O
{	O
case	O
ID_NULL	int
:	O
AddEquation	(*(*(struct(*(char),*(char),long,*(struct`)))),*(char),*(char),long)->(void)
(	O
&	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmGloVars	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
szName	*(char)
,	O
NULL	O
,	O
hNewType	long
)	O
;	O
case	O
ID_LOCALDYN	int
:	O
AddEquation	(*(*(struct(*(char),*(char),long,*(struct`)))),*(char),*(char),long)->(void)
(	O
&	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmDynEqns	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
szName	*(char)
,	O
szEqn	*(char)
,	O
hNewType	long
)	O
;	O
break	O
;	O
case	O
ID_FUNCTION	int
:	O
AddEquation	(*(*(struct(*(char),*(char),long,*(struct`)))),*(char),*(char),long)->(void)
(	O
&	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmGloVars	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
szName	*(char)
,	O
NULL	O
,	O
hNewType	long
)	O
;	O
break	O
;	O
case	O
ID_DERIV	int
:	O
case	O
ID_STATE	int
:	O
case	O
ID_OUTPUT	int
:	O
AddEquation	(*(*(struct(*(char),*(char),long,*(struct`)))),*(char),*(char),long)->(void)
(	O
&	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmDynEqns	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
szName	*(char)
,	O
szEqn	*(char)
,	O
hNewType	long
)	O
;	O
break	O
;	O
case	O
ID_INPUT	int
:	O
case	O
ID_PARM	int
:	O
ReportError	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),int,*(char),*(char))->(void)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
RE_REDEF	O
|	O
RE_WARNING	int
,	O
szName	*(char)
,	O
"  Inputs and parameters cannot be assigned in Dynamics\n"	*(char)
)	O
;	O
break	O
;	O
}	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
->	O
iLNPrev	int
=	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
->	O
iLineNum	int
;	O
}	O
void	O
DefineScaleEqn	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(char),*(char),long)->(void)
(	O
PINPUTBUF	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
PSTR	*(char)
szName	*(char)
,	O
PSTR	*(char)
szEqn	*(char)
,	O
HANDLE	long
hType	long
)	O
{	O
HANDLE	long
hNewType	long
=	O
(	O
hType	long
?	O
hType	long
:	O
ID_LOCALSCALE	int
)	O
;	O
PINPUTINFO	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
=	O
(	O
PINPUTINFO	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
)	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
->	O
pInfo	*(void)
;	O
if	O
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
->	O
iLineNum	int
-	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
->	O
iLNPrev	int
-	O
1	int
)	O
hNewType	long
|=	O
ID_SPACEFLAG	int
;	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
szName	*(char)
,	O
"Inline"	*(char)
)	O
)	O
AddEquation	(*(*(struct(*(char),*(char),long,*(struct`)))),*(char),*(char),long)->(void)
(	O
&	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmScaleEqns	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
szName	*(char)
,	O
szEqn	*(char)
,	O
ID_INLINE	int
)	O
;	O
else	O
{	O
if	O
(	O
!	O
hType	long
)	O
AddEquation	(*(*(struct(*(char),*(char),long,*(struct`)))),*(char),*(char),long)->(void)
(	O
&	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmGloVars	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
szName	*(char)
,	O
NULL	O
,	O
hNewType	long
)	O
;	O
if	O
(	O
(	O
hType	long
&	O
ID_LOCALSCALE	int
)	O
||	O
!	O
GetVarPTR	(*(struct(*(char),*(char),long,*(struct(*`,*`,long,*`)))),*(char))->(*(struct(*(char),*(char),long,*(struct(*`,*`,long,*`)))))
(	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmScaleEqns	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
szName	*(char)
)	O
)	O
AddEquation	(*(*(struct(*(char),*(char),long,*(struct`)))),*(char),*(char),long)->(void)
(	O
&	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmScaleEqns	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
szName	*(char)
,	O
szEqn	*(char)
,	O
hNewType	long
)	O
;	O
else	O
ReportError	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),int,*(char),*(char))->(void)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
RE_REDEF	O
|	O
RE_WARNING	int
,	O
szName	*(char)
,	O
"* Ignoring"	*(char)
)	O
;	O
}	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
->	O
iLNPrev	int
=	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
->	O
iLineNum	int
;	O
}	O
void	O
DefineCalcOutEqn	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(char),*(char),long)->(void)
(	O
PINPUTBUF	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
PSTR	*(char)
szName	*(char)
,	O
PSTR	*(char)
szEqn	*(char)
,	O
HANDLE	long
hType	long
)	O
{	O
HANDLE	long
hNewType	long
=	O
(	O
hType	long
?	O
hType	long
:	O
ID_LOCALCALCOUT	int
)	O
;	O
PINPUTINFO	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
=	O
(	O
PINPUTINFO	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
)	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
->	O
pInfo	*(void)
;	O
if	O
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
->	O
iLineNum	int
-	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
->	O
iLNPrev	int
-	O
1	int
)	O
hNewType	long
|=	O
ID_SPACEFLAG	int
;	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
szName	*(char)
,	O
"Inline"	*(char)
)	O
)	O
AddEquation	(*(*(struct(*(char),*(char),long,*(struct`)))),*(char),*(char),long)->(void)
(	O
&	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmCalcOutEqns	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
szName	*(char)
,	O
szEqn	*(char)
,	O
ID_INLINE	int
)	O
;	O
else	O
{	O
if	O
(	O
!	O
hType	long
)	O
AddEquation	(*(*(struct(*(char),*(char),long,*(struct`)))),*(char),*(char),long)->(void)
(	O
&	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmGloVars	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
szName	*(char)
,	O
NULL	O
,	O
hNewType	long
)	O
;	O
AddEquation	(*(*(struct(*(char),*(char),long,*(struct`)))),*(char),*(char),long)->(void)
(	O
&	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmCalcOutEqns	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
szName	*(char)
,	O
szEqn	*(char)
,	O
hNewType	long
)	O
;	O
}	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
->	O
iLNPrev	int
=	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
->	O
iLineNum	int
;	O
}	O
void	O
DefineJacobEqn	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(char),*(char),long)->(void)
(	O
PINPUTBUF	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
PSTR	*(char)
szName	*(char)
,	O
PSTR	*(char)
szEqn	*(char)
,	O
HANDLE	long
hType	long
)	O
{	O
HANDLE	long
hNewType	long
=	O
(	O
hType	long
?	O
hType	long
:	O
ID_LOCALJACOB	int
)	O
;	O
PINPUTINFO	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
=	O
(	O
PINPUTINFO	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
)	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
->	O
pInfo	*(void)
;	O
if	O
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
->	O
iLineNum	int
-	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
->	O
iLNPrev	int
-	O
1	int
)	O
hNewType	long
|=	O
ID_SPACEFLAG	int
;	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
szName	*(char)
,	O
"Inline"	*(char)
)	O
)	O
AddEquation	(*(*(struct(*(char),*(char),long,*(struct`)))),*(char),*(char),long)->(void)
(	O
&	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmJacobEqns	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
szName	*(char)
,	O
szEqn	*(char)
,	O
ID_INLINE	int
)	O
;	O
else	O
{	O
if	O
(	O
!	O
hType	long
)	O
AddEquation	(*(*(struct(*(char),*(char),long,*(struct`)))),*(char),*(char),long)->(void)
(	O
&	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmGloVars	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
szName	*(char)
,	O
NULL	O
,	O
hNewType	long
)	O
;	O
if	O
(	O
(	O
hType	long
&	O
ID_LOCALJACOB	int
)	O
||	O
!	O
GetVarPTR	(*(struct(*(char),*(char),long,*(struct(*`,*`,long,*`)))),*(char))->(*(struct(*(char),*(char),long,*(struct(*`,*`,long,*`)))))
(	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmJacobEqns	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
szName	*(char)
)	O
)	O
AddEquation	(*(*(struct(*(char),*(char),long,*(struct`)))),*(char),*(char),long)->(void)
(	O
&	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmJacobEqns	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
szName	*(char)
,	O
szEqn	*(char)
,	O
hNewType	long
)	O
;	O
else	O
ReportError	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),int,*(char),*(char))->(void)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
RE_REDEF	O
|	O
RE_WARNING	int
,	O
szName	*(char)
,	O
"* Ignoring"	*(char)
)	O
;	O
}	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
->	O
iLNPrev	int
=	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
->	O
iLineNum	int
;	O
}	O
void	O
DefineEventEqn	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(char),*(char),long)->(void)
(	O
PINPUTBUF	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
PSTR	*(char)
szName	*(char)
,	O
PSTR	*(char)
szEqn	*(char)
,	O
HANDLE	long
hType	long
)	O
{	O
HANDLE	long
hNewType	long
=	O
(	O
hType	long
?	O
hType	long
:	O
ID_LOCALJACOB	int
)	O
;	O
PINPUTINFO	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
=	O
(	O
PINPUTINFO	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
)	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
->	O
pInfo	*(void)
;	O
if	O
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
->	O
iLineNum	int
-	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
->	O
iLNPrev	int
-	O
1	int
)	O
hNewType	long
|=	O
ID_SPACEFLAG	int
;	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
szName	*(char)
,	O
"Inline"	*(char)
)	O
)	O
AddEquation	(*(*(struct(*(char),*(char),long,*(struct`)))),*(char),*(char),long)->(void)
(	O
&	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmEventEqns	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
szName	*(char)
,	O
szEqn	*(char)
,	O
ID_INLINE	int
)	O
;	O
else	O
{	O
if	O
(	O
!	O
hType	long
)	O
AddEquation	(*(*(struct(*(char),*(char),long,*(struct`)))),*(char),*(char),long)->(void)
(	O
&	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmGloVars	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
szName	*(char)
,	O
NULL	O
,	O
hNewType	long
)	O
;	O
if	O
(	O
(	O
hType	long
&	O
ID_LOCALJACOB	int
)	O
||	O
!	O
GetVarPTR	(*(struct(*(char),*(char),long,*(struct(*`,*`,long,*`)))),*(char))->(*(struct(*(char),*(char),long,*(struct(*`,*`,long,*`)))))
(	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmEventEqns	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
szName	*(char)
)	O
)	O
AddEquation	(*(*(struct(*(char),*(char),long,*(struct`)))),*(char),*(char),long)->(void)
(	O
&	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmEventEqns	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
szName	*(char)
,	O
szEqn	*(char)
,	O
hNewType	long
)	O
;	O
else	O
ReportError	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),int,*(char),*(char))->(void)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
RE_REDEF	O
|	O
RE_WARNING	int
,	O
szName	*(char)
,	O
"* Ignoring"	*(char)
)	O
;	O
}	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
->	O
iLNPrev	int
=	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
->	O
iLineNum	int
;	O
}	O
void	O
DefineRootEqn	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(char),*(char),long)->(void)
(	O
PINPUTBUF	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
PSTR	*(char)
szName	*(char)
,	O
PSTR	*(char)
szEqn	*(char)
,	O
HANDLE	long
hType	long
)	O
{	O
HANDLE	long
hNewType	long
=	O
(	O
hType	long
?	O
hType	long
:	O
ID_LOCALJACOB	int
)	O
;	O
PINPUTINFO	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
=	O
(	O
PINPUTINFO	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
)	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
->	O
pInfo	*(void)
;	O
if	O
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
->	O
iLineNum	int
-	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
->	O
iLNPrev	int
-	O
1	int
)	O
hNewType	long
|=	O
ID_SPACEFLAG	int
;	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
szName	*(char)
,	O
"Inline"	*(char)
)	O
)	O
AddEquation	(*(*(struct(*(char),*(char),long,*(struct`)))),*(char),*(char),long)->(void)
(	O
&	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmRootEqns	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
szName	*(char)
,	O
szEqn	*(char)
,	O
ID_INLINE	int
)	O
;	O
else	O
{	O
if	O
(	O
!	O
hType	long
)	O
AddEquation	(*(*(struct(*(char),*(char),long,*(struct`)))),*(char),*(char),long)->(void)
(	O
&	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmGloVars	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
szName	*(char)
,	O
NULL	O
,	O
hNewType	long
)	O
;	O
if	O
(	O
(	O
hType	long
&	O
ID_LOCALJACOB	int
)	O
||	O
!	O
GetVarPTR	(*(struct(*(char),*(char),long,*(struct(*`,*`,long,*`)))),*(char))->(*(struct(*(char),*(char),long,*(struct(*`,*`,long,*`)))))
(	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmRootEqns	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
szName	*(char)
)	O
)	O
AddEquation	(*(*(struct(*(char),*(char),long,*(struct`)))),*(char),*(char),long)->(void)
(	O
&	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmRootEqns	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
szName	*(char)
,	O
szEqn	*(char)
,	O
hNewType	long
)	O
;	O
else	O
ReportError	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),int,*(char),*(char))->(void)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
RE_REDEF	O
|	O
RE_WARNING	int
,	O
szName	*(char)
,	O
"* Ignoring"	*(char)
)	O
;	O
}	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
->	O
iLNPrev	int
=	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
->	O
iLineNum	int
;	O
}	O
void	O
DefineVariable	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(char),*(char),int)->(void)
(	O
PINPUTBUF	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
PSTR	*(char)
szName	*(char)
,	O
PSTR	*(char)
szEqn	*(char)
,	O
int	O
iKWCode	int
)	O
{	O
PVMMAPSTRCT	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
;	O
HANDLE	long
hGloVarType	long
;	O
PINPUTINFO	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
;	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
=	O
(	O
PINPUTINFO	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
)	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
->	O
pInfo	*(void)
;	O
assert	O
(	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
wContext	int
!=	O
CN_END	int
)	O
;	O
if	O
(	O
!	O
szName	*(char)
||	O
!	O
szEqn	*(char)
)	O
return	O
;	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
=	O
GetVarPTR	(*(struct(*(char),*(char),long,*(struct(*`,*`,long,*`)))),*(char))->(*(struct(*(char),*(char),long,*(struct(*`,*`,long,*`)))))
(	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmGloVars	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
szName	*(char)
)	O
;	O
hGloVarType	long
=	O
TYPE	O
(	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
)	O
;	O
if	O
(	O
(	O
(	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
wContext	int
==	O
CN_DYNAMICS	int
)	O
&&	O
(	O
(	O
hGloVarType	long
==	O
ID_LOCALSCALE	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALJACOB	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALEVENT	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALROOT	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALCALCOUT	int
)	O
)	O
)	O
||	O
(	O
(	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
wContext	int
==	O
CN_SCALE	int
)	O
&&	O
(	O
(	O
hGloVarType	long
==	O
ID_LOCALDYN	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALJACOB	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALEVENT	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALROOT	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALCALCOUT	int
)	O
)	O
)	O
||	O
(	O
(	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
wContext	int
==	O
CN_JACOB	int
)	O
&&	O
(	O
(	O
hGloVarType	long
==	O
ID_LOCALDYN	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALSCALE	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALEVENT	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALROOT	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALCALCOUT	int
)	O
)	O
)	O
||	O
(	O
(	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
wContext	int
==	O
CN_EVENTS	int
)	O
&&	O
(	O
(	O
hGloVarType	long
==	O
ID_LOCALDYN	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALSCALE	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALJACOB	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALROOT	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALCALCOUT	int
)	O
)	O
)	O
||	O
(	O
(	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
wContext	int
==	O
CN_ROOTS	int
)	O
&&	O
(	O
(	O
hGloVarType	long
==	O
ID_LOCALDYN	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALSCALE	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALJACOB	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALEVENT	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALCALCOUT	int
)	O
)	O
)	O
||	O
(	O
(	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
wContext	int
==	O
CN_CALCOUTPUTS	int
)	O
&&	O
(	O
(	O
hGloVarType	long
==	O
ID_LOCALDYN	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALSCALE	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALEVENT	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALROOT	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALJACOB	int
)	O
)	O
)	O
)	O
{	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
=	O
NULL	O
;	O
hGloVarType	long
=	O
TYPE	O
(	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
)	O
;	O
}	O
if	O
(	O
(	O
iKWCode	int
!=	O
KM_INLINE	int
)	O
&&	O
(	O
hGloVarType	long
!=	O
ID_INPUT	int
||	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
wContext	int
!=	O
CN_GLOBAL	int
)	O
&&	O
!	O
VerifyEqn	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(char))->(int)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
szEqn	*(char)
)	O
)	O
return	O
;	O
switch	O
(	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
wContext	int
)	O
{	O
case	O
CN_GLOBAL	int
:	O
DefineGlobalVar	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(struct(*(char),*(char),long,*(struct(*`,*`,long,*`)))),*(char),*(char),long)->(void)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
pvm	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
szName	*(char)
,	O
szEqn	*(char)
,	O
hGloVarType	long
)	O
;	O
break	O
;	O
case	O
CN_DYNAMICS	int
:	O
if	O
(	O
iKWCode	int
==	O
KM_DXDT	int
)	O
DefineDynamicsEqn	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(char),*(char),long)->(void)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
szName	*(char)
,	O
szEqn	*(char)
,	O
ID_DERIV	int
)	O
;	O
else	O
if	O
(	O
iKWCode	int
==	O
KM_FUNCTION	int
)	O
DefineDynamicsEqn	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(char),*(char),long)->(void)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
szName	*(char)
,	O
szEqn	*(char)
,	O
ID_FUNCTION	int
)	O
;	O
else	O
DefineDynamicsEqn	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(char),*(char),long)->(void)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
szName	*(char)
,	O
szEqn	*(char)
,	O
hGloVarType	long
)	O
;	O
if	O
(	O
hGloVarType	long
==	O
ID_STATE	int
&&	O
iKWCode	int
!=	O
KM_DXDT	int
)	O
ReportError	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),int,*(char),*(char))->(void)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
RE_REDEF	O
|	O
RE_WARNING	int
,	O
szName	*(char)
,	O
"Non-standard assignment in Dynamics section. "	*(char)
"Potential state discontinuity.\n"	*(char)
)	O
;	O
break	O
;	O
case	O
CN_JACOB	int
:	O
DefineJacobEqn	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(char),*(char),long)->(void)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
szName	*(char)
,	O
szEqn	*(char)
,	O
hGloVarType	long
)	O
;	O
break	O
;	O
case	O
CN_EVENTS	int
:	O
DefineEventEqn	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(char),*(char),long)->(void)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
szName	*(char)
,	O
szEqn	*(char)
,	O
hGloVarType	long
)	O
;	O
break	O
;	O
case	O
CN_ROOTS	int
:	O
DefineRootEqn	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(char),*(char),long)->(void)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
szName	*(char)
,	O
szEqn	*(char)
,	O
hGloVarType	long
)	O
;	O
break	O
;	O
case	O
CN_SCALE	int
:	O
DefineScaleEqn	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(char),*(char),long)->(void)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
szName	*(char)
,	O
szEqn	*(char)
,	O
hGloVarType	long
)	O
;	O
break	O
;	O
case	O
CN_CALCOUTPUTS	int
:	O
if	O
(	O
(	O
hGloVarType	long
==	O
ID_OUTPUT	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_NULL	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALCALCOUT	int
)	O
||	O
(	O
iKWCode	int
==	O
KM_INLINE	int
)	O
)	O
DefineCalcOutEqn	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(char),*(char),long)->(void)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
szName	*(char)
,	O
szEqn	*(char)
,	O
hGloVarType	long
)	O
;	O
else	O
ReportError	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),int,*(char),*(char))->(void)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
RE_BADCONTEXT	O
|	O
RE_FATAL	int
,	O
szName	*(char)
,	O
"Only outputs and local variables can be "	*(char)
"defined in CalcOutputs{} section."	*(char)
)	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
void	O
DeclareModelVar	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),*(char),int)->(void)
(	O
PINPUTBUF	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
PSTR	*(char)
szName	*(char)
,	O
int	O
iKWCode	int
)	O
{	O
HANDLE	long
hType	long
;	O
PINPUTINFO	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
;	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
=	O
(	O
PINPUTINFO	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
)	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
->	O
pInfo	*(void)
;	O
assert	O
(	O
iKWCode	int
==	O
KM_STATES	int
||	O
iKWCode	int
==	O
KM_INPUTS	int
||	O
iKWCode	int
==	O
KM_OUTPUTS	int
||	O
iKWCode	int
==	O
KM_COMPARTMENTS	int
)	O
;	O
iKWCode	int
=	O
(	O
(	O
iKWCode	int
==	O
KM_STATES	int
?	O
ID_STATE	int
:	O
(	O
iKWCode	int
==	O
KM_INPUTS	int
?	O
ID_INPUT	int
:	O
(	O
iKWCode	int
==	O
KM_OUTPUTS	int
?	O
ID_OUTPUT	int
:	O
ID_COMPARTMENT	int
)	O
)	O
)	O
)	O
;	O
if	O
(	O
!	O
(	O
hType	long
=	O
GetVarType	(*(struct(*(char),*(char),long,*(struct(*`,*`,long,*`)))),*(char))->(int)
(	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmGloVars	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
szName	*(char)
)	O
)	O
)	O
{	O
if	O
(	O
iKWCode	int
==	O
ID_COMPARTMENT	int
)	O
AddEquation	(*(*(struct(*(char),*(char),long,*(struct`)))),*(char),*(char),long)->(void)
(	O
&	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmCpts	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
szName	*(char)
,	O
NULL	O
,	O
(	O
HANDLE	long
)	O
iKWCode	int
)	O
;	O
else	O
AddEquation	(*(*(struct(*(char),*(char),long,*(struct`)))),*(char),*(char),long)->(void)
(	O
&	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmGloVars	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
szName	*(char)
,	O
NULL	O
,	O
(	O
HANDLE	long
)	O
iKWCode	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
hType	long
==	O
iKWCode	int
)	O
ReportError	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),int,*(char),*(char))->(void)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
RE_DUPDECL	O
|	O
RE_WARNING	int
,	O
szName	*(char)
,	O
NULL	O
)	O
;	O
else	O
{	O
if	O
(	O
hType	long
==	O
ID_PARM	int
)	O
{	O
ReportError	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),int,*(char),*(char))->(void)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
RE_DUPDECL	O
|	O
RE_WARNING	int
,	O
szName	*(char)
,	O
"Model variable initialized before declaration"	*(char)
)	O
;	O
SetVarType	(*(struct(*(char),*(char),long,*(struct(*`,*`,long,*`)))),*(char),long)->(void)
(	O
pinfo	*(struct(int,int,int,int,*(char),*(char),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`))),*(struct(*(char),*(char),long,*(struct`)))))
->	O
pvmGloVars	*(struct(*(char),*(char),long,*(struct(*(char),*(char),long,*(struct`)))))
,	O
szName	*(char)
,	O
iKWCode	int
)	O
;	O
}	O
else	O
ReportError	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void))),int,*(char),*(char))->(void)
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),long,*(char),int,int,int,*(void),*(void)))
,	O
RE_DUPDECL	O
|	O
RE_FATAL	int
,	O
szName	*(char)
,	O
NULL	O
)	O
;	O
}	O
}	O
}	O
