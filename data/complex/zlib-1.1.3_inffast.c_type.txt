struct	O
inflate_codes_state	struct(int)
{	O
int	O
dummy	int
;	O
}	O
;	O
int	O
inflate_fast	(int,int,*(struct(union(struct(char,char),int),int)),*(struct(union(struct(char,char),int),int)),*(struct(enum(int,int,int,int,int,int,int,int,int,int),union(int,struct(int,int,*`,int,*`),struct(*`)),int,int,long,*(struct(union`,int)),*(char),*(char),*(char),*(char),*((long,*`,int)->(long)),long)),*(struct(*(char),int,long,*(char),int,long,*(char),*(struct(int)),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))->(int)
(	O
bl	int
,	O
bd	int
,	O
tl	*(struct(union(struct(char,char),int),int))
,	O
td	*(struct(union(struct(char,char),int),int))
,	O
s	*(char)
,	O
z	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
)	O
uInt	int
bl	int
,	O
bd	int
;	O
inflate_huft	struct
*	O
tl	*(struct(union(struct(char,char),int),int))
;	O
inflate_huft	struct
*	O
td	*(struct(union(struct(char,char),int),int))
;	O
inflate_blocks_statef	struct
*	O
s	*(char)
;	O
z_streamp	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
z	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
;	O
{	O
inflate_huft	struct
*	O
t	*(struct(union(struct(char,char),int),int))
;	O
uInt	int
e	int
;	O
uLong	long
b	long
;	O
uInt	int
k	int
;	O
Bytef	char
*	O
p	*(char)
;	O
uInt	int
n	int
;	O
Bytef	char
*	O
q	*(char)
;	O
uInt	int
m	int
;	O
uInt	int
ml	int
;	O
uInt	int
md	int
;	O
uInt	int
c	int
;	O
uInt	int
d	*(char)
;	O
Bytef	char
*	O
r	*(char)
;	O
LOAD	O
ml	int
=	O
inflate_mask	array(int)
[	O
bl	int
]	O
;	O
md	int
=	O
inflate_mask	array(int)
[	O
bd	int
]	O
;	O
do	O
{	O
GRABBITS	O
(	O
20	int
)	O
if	O
(	O
(	O
e	int
=	O
(	O
t	*(struct(union(struct(char,char),int),int))
=	O
tl	*(struct(union(struct(char,char),int),int))
+	O
(	O
(	O
uInt	int
)	O
b	long
&	O
ml	int
)	O
)	O
->	O
exop	O
)	O
==	O
0	int
)	O
{	O
DUMPBITS	O
(	O
t	*(struct(union(struct(char,char),int),int))
->	O
bits	O
)	O
Tracevv	O
(	O
(	O
stderr	O
,	O
t	*(struct(union(struct(char,char),int),int))
->	O
base	int
>=	O
0x20	int
&&	O
t	*(struct(union(struct(char,char),int),int))
->	O
base	int
<	O
0x7f	int
?	O
"inflate:         * literal '%c'\n"	*(char)
:	O
"inflate:         * literal 0x%02x\n"	*(char)
,	O
t	*(struct(union(struct(char,char),int),int))
->	O
base	int
)	O
)	O
;	O
*	O
q	*(char)
++	O
=	O
(	O
Byte	char
)	O
t	*(struct(union(struct(char,char),int),int))
->	O
base	int
;	O
m	int
--	O
;	O
continue	O
;	O
}	O
do	O
{	O
DUMPBITS	O
(	O
t	*(struct(union(struct(char,char),int),int))
->	O
bits	O
)	O
if	O
(	O
e	int
&	O
16	int
)	O
{	O
e	int
&=	O
15	int
;	O
c	int
=	O
t	*(struct(union(struct(char,char),int),int))
->	O
base	int
+	O
(	O
(	O
uInt	int
)	O
b	long
&	O
inflate_mask	array(int)
[	O
e	int
]	O
)	O
;	O
DUMPBITS	O
(	O
e	int
)	O
Tracevv	O
(	O
(	O
stderr	O
,	O
"inflate:         * length %u\n"	*(char)
,	O
c	int
)	O
)	O
;	O
GRABBITS	O
(	O
15	int
)	O
;	O
e	int
=	O
(	O
t	*(struct(union(struct(char,char),int),int))
=	O
td	*(struct(union(struct(char,char),int),int))
+	O
(	O
(	O
uInt	int
)	O
b	long
&	O
md	int
)	O
)	O
->	O
exop	O
;	O
do	O
{	O
DUMPBITS	O
(	O
t	*(struct(union(struct(char,char),int),int))
->	O
bits	O
)	O
if	O
(	O
e	int
&	O
16	int
)	O
{	O
e	int
&=	O
15	int
;	O
GRABBITS	O
(	O
e	int
)	O
d	*(char)
=	O
t	*(struct(union(struct(char,char),int),int))
->	O
base	int
+	O
(	O
(	O
uInt	int
)	O
b	long
&	O
inflate_mask	array(int)
[	O
e	int
]	O
)	O
;	O
DUMPBITS	O
(	O
e	int
)	O
Tracevv	O
(	O
(	O
stderr	O
,	O
"inflate:         * distance %u\n"	*(char)
,	O
d	*(char)
)	O
)	O
;	O
m	int
-=	O
c	int
;	O
if	O
(	O
(	O
uInt	int
)	O
(	O
q	*(char)
-	O
s	*(char)
->	O
window	*(char)
)	O
>=	O
d	*(char)
)	O
{	O
r	*(char)
=	O
q	*(char)
-	O
d	*(char)
;	O
*	O
q	*(char)
++	O
=	O
*	O
r	*(char)
++	O
;	O
c	int
--	O
;	O
*	O
q	*(char)
++	O
=	O
*	O
r	*(char)
++	O
;	O
c	int
--	O
;	O
}	O
else	O
{	O
e	int
=	O
d	*(char)
-	O
(	O
uInt	int
)	O
(	O
q	*(char)
-	O
s	*(char)
->	O
window	*(char)
)	O
;	O
r	*(char)
=	O
s	*(char)
->	O
end	*(char)
-	O
e	int
;	O
if	O
(	O
c	int
>	O
e	int
)	O
{	O
c	int
-=	O
e	int
;	O
do	O
{	O
*	O
q	*(char)
++	O
=	O
*	O
r	*(char)
++	O
;	O
}	O
while	O
(	O
--	O
e	int
)	O
;	O
r	*(char)
=	O
s	*(char)
->	O
window	*(char)
;	O
}	O
}	O
do	O
{	O
*	O
q	*(char)
++	O
=	O
*	O
r	*(char)
++	O
;	O
}	O
while	O
(	O
--	O
c	int
)	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
(	O
e	int
&	O
64	int
)	O
==	O
0	int
)	O
{	O
t	*(struct(union(struct(char,char),int),int))
+=	O
t	*(struct(union(struct(char,char),int),int))
->	O
base	int
;	O
e	int
=	O
(	O
t	*(struct(union(struct(char,char),int),int))
+=	O
(	O
(	O
uInt	int
)	O
b	long
&	O
inflate_mask	array(int)
[	O
e	int
]	O
)	O
)	O
->	O
exop	O
;	O
}	O
else	O
{	O
z	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
msg	*(char)
=	O
(	O
char	O
*	O
)	O
"invalid distance code"	*(char)
;	O
UNGRAB	O
UPDATE	O
return	O
Z_DATA_ERROR	O
;	O
}	O
}	O
while	O
(	O
1	int
)	O
;	O
break	O
;	O
}	O
if	O
(	O
(	O
e	int
&	O
64	int
)	O
==	O
0	int
)	O
{	O
t	*(struct(union(struct(char,char),int),int))
+=	O
t	*(struct(union(struct(char,char),int),int))
->	O
base	int
;	O
if	O
(	O
(	O
e	int
=	O
(	O
t	*(struct(union(struct(char,char),int),int))
+=	O
(	O
(	O
uInt	int
)	O
b	long
&	O
inflate_mask	array(int)
[	O
e	int
]	O
)	O
)	O
->	O
exop	O
)	O
==	O
0	int
)	O
{	O
DUMPBITS	O
(	O
t	*(struct(union(struct(char,char),int),int))
->	O
bits	O
)	O
Tracevv	O
(	O
(	O
stderr	O
,	O
t	*(struct(union(struct(char,char),int),int))
->	O
base	int
>=	O
0x20	int
&&	O
t	*(struct(union(struct(char,char),int),int))
->	O
base	int
<	O
0x7f	int
?	O
"inflate:         * literal '%c'\n"	*(char)
:	O
"inflate:         * literal 0x%02x\n"	*(char)
,	O
t	*(struct(union(struct(char,char),int),int))
->	O
base	int
)	O
)	O
;	O
*	O
q	*(char)
++	O
=	O
(	O
Byte	char
)	O
t	*(struct(union(struct(char,char),int),int))
->	O
base	int
;	O
m	int
--	O
;	O
break	O
;	O
}	O
}	O
else	O
if	O
(	O
e	int
&	O
32	int
)	O
{	O
Tracevv	O
(	O
(	O
stderr	O
,	O
"inflate:         * end of block\n"	*(char)
)	O
)	O
;	O
UNGRAB	O
UPDATE	O
return	O
Z_STREAM_END	int
;	O
}	O
else	O
{	O
z	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
msg	*(char)
=	O
(	O
char	O
*	O
)	O
"invalid literal/length code"	*(char)
;	O
UNGRAB	O
UPDATE	O
return	O
Z_DATA_ERROR	O
;	O
}	O
}	O
while	O
(	O
1	int
)	O
;	O
}	O
while	O
(	O
m	int
>=	O
258	int
&&	O
n	int
>=	O
10	int
)	O
;	O
UNGRAB	O
UPDATE	O
return	O
Z_OK	int
;	O
}	O
