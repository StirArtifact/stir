struct	O
grad_slist_bucket	struct(*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long)),*(char),long,long)
{	O
struct	O
grad_slist_bucket	struct(*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long)),*(char),long,long)
*	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
char	O
*	O
buf	*(char)
;	O
size_t	long
level	int
;	O
size_t	long
size	int
;	O
}	O
;	O
struct	O
grad_slist	struct(*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long)),*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long)),*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long)))
{	O
struct	O
grad_slist_bucket	struct(*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long)),*(char),long,long)
*	O
head	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
,	O
*	O
tail	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
;	O
struct	O
grad_slist_bucket	struct(*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long)),*(char),long,long)
*	O
free	*((*(void),*(void))->(int))
;	O
}	O
;	O
static	O
struct	O
grad_slist_bucket	struct(*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long)),*(char),long,long)
*	O
alloc_bucket	(long)->(*(struct(*(struct(*`,*`,long,long)),*(char),long,long)))
(	O
size_t	long
size	int
)	O
{	O
struct	O
grad_slist_bucket	struct(*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long)),*(char),long,long)
*	O
p	*(struct)
=	O
grad_malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
p	*(struct)
)	O
+	O
size	int
)	O
;	O
p	*(struct)
->	O
buf	*(char)
=	O
(	O
char	O
*	O
)	O
(	O
p	*(struct)
+	O
1	int
)	O
;	O
p	*(struct)
->	O
level	int
=	O
0	int
;	O
p	*(struct)
->	O
size	int
=	O
size	int
;	O
p	*(struct)
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
NULL	O
;	O
return	O
p	*(struct)
;	O
}	O
static	O
void	O
alloc_pool	(*(struct(*(struct(*`,*`,long,long)),*(struct(*`,*`,long,long)),*(struct(*`,*`,long,long)))),long)->(void)
(	O
grad_slist_t	*(struct)
slist	*(struct)
,	O
size_t	long
size	int
)	O
{	O
struct	O
grad_slist_bucket	struct(*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long)),*(char),long,long)
*	O
p	*(struct)
=	O
alloc_bucket	(long)->(*(struct(*(struct(*`,*`,long,long)),*(char),long,long)))
(	O
GRAD_SLIST_BUCKET_SIZE	int
)	O
;	O
if	O
(	O
slist	*(struct)
->	O
tail	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
)	O
slist	*(struct)
->	O
tail	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
p	*(struct)
;	O
else	O
slist	*(struct)
->	O
head	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
=	O
p	*(struct)
;	O
slist	*(struct)
->	O
tail	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
=	O
p	*(struct)
;	O
}	O
static	O
size_t	long
copy_chars	(*(struct(*(struct(*`,*`,long,long)),*(struct(*`,*`,long,long)),*(struct(*`,*`,long,long)))),*(char),long)->(long)
(	O
grad_slist_t	*(struct)
slist	*(struct)
,	O
char	O
*	O
str	*(char)
,	O
size_t	long
n	long
)	O
{	O
size_t	long
rest	long
;	O
if	O
(	O
!	O
slist	*(struct)
->	O
head	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
||	O
slist	*(struct)
->	O
tail	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
->	O
level	int
==	O
slist	*(struct)
->	O
tail	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
->	O
size	int
)	O
alloc_pool	(*(struct(*(struct(*`,*`,long,long)),*(struct(*`,*`,long,long)),*(struct(*`,*`,long,long)))),long)->(void)
(	O
slist	*(struct)
,	O
GRAD_SLIST_BUCKET_SIZE	int
)	O
;	O
rest	long
=	O
slist	*(struct)
->	O
tail	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
->	O
size	int
-	O
slist	*(struct)
->	O
tail	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
->	O
level	int
;	O
if	O
(	O
n	long
>	O
rest	long
)	O
n	long
=	O
rest	long
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
slist	*(struct)
->	O
tail	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
->	O
buf	*(char)
+	O
slist	*(struct)
->	O
tail	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
->	O
level	int
,	O
str	*(char)
,	O
n	long
)	O
;	O
slist	*(struct)
->	O
tail	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
->	O
level	int
+=	O
n	long
;	O
return	O
n	long
;	O
}	O
grad_slist_t	*(struct)
grad_slist_create	()->(*(struct))
(	O
)	O
{	O
grad_slist_t	*(struct)
slist	*(struct)
=	O
grad_malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
slist	*(struct)
)	O
)	O
;	O
slist	*(struct)
->	O
head	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
=	O
slist	*(struct)
->	O
tail	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
=	O
0	int
;	O
return	O
slist	*(struct)
;	O
}	O
void	O
grad_slist_clear	(*(struct))->(void)
(	O
grad_slist_t	*(struct)
slist	*(struct)
)	O
{	O
if	O
(	O
slist	*(struct)
->	O
tail	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
)	O
{	O
slist	*(struct)
->	O
tail	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
slist	*(struct)
->	O
free	*((*(void),*(void))->(int))
;	O
slist	*(struct)
->	O
free	*((*(void),*(void))->(int))
=	O
slist	*(struct)
->	O
head	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
;	O
slist	*(struct)
->	O
head	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
=	O
slist	*(struct)
->	O
tail	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
=	O
NULL	O
;	O
}	O
}	O
void	O
grad_slist_free	(*(*(struct)))->(void)
(	O
grad_slist_t	*(struct)
*	O
slist	*(struct)
)	O
{	O
struct	O
grad_slist_bucket	struct(*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long)),*(char),long,long)
*	O
p	*(struct)
;	O
if	O
(	O
*	O
slist	*(struct)
)	O
{	O
grad_slist_clear	(*(struct))->(void)
(	O
*	O
slist	*(struct)
)	O
;	O
for	O
(	O
p	*(struct)
=	O
(	O
*	O
slist	*(struct)
)	O
->	O
free	*((*(void),*(void))->(int))
;	O
p	*(struct)
;	O
)	O
{	O
struct	O
grad_slist_bucket	struct(*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long)),*(char),long,long)
*	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
p	*(struct)
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
grad_free	(*(void))->(void)
(	O
p	*(struct)
)	O
;	O
p	*(struct)
=	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
}	O
}	O
grad_free	(*(void))->(void)
(	O
*	O
slist	*(struct)
)	O
;	O
*	O
slist	*(struct)
=	O
NULL	O
;	O
}	O
void	O
grad_slist_append	(*(struct),*(void),long)->(void)
(	O
grad_slist_t	*(struct)
slist	*(struct)
,	O
void	O
*	O
str	*(char)
,	O
size_t	long
n	long
)	O
{	O
char	O
*	O
ptr	*(*(void))
=	O
str	*(char)
;	O
while	O
(	O
n	long
)	O
{	O
size_t	long
s	*(*(char))
=	O
copy_chars	(*(struct(*(struct(*`,*`,long,long)),*(struct(*`,*`,long,long)),*(struct(*`,*`,long,long)))),*(char),long)->(long)
(	O
slist	*(struct)
,	O
ptr	*(*(void))
,	O
n	long
)	O
;	O
ptr	*(*(void))
+=	O
s	*(*(char))
;	O
n	long
-=	O
s	*(*(char))
;	O
}	O
}	O
void	O
grad_slist_append_char	(*(struct),char)->(void)
(	O
grad_slist_t	*(struct)
slist	*(struct)
,	O
char	O
c	*(void)
)	O
{	O
grad_slist_append	(*(struct),*(void),long)->(void)
(	O
slist	*(struct)
,	O
&	O
c	*(void)
,	O
1	int
)	O
;	O
}	O
size_t	long
grad_slist_size	(*(struct))->(long)
(	O
grad_slist_t	*(struct)
slist	*(struct)
)	O
{	O
size_t	long
size	int
=	O
0	int
;	O
struct	O
grad_slist_bucket	struct(*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long)),*(char),long,long)
*	O
p	*(struct)
;	O
for	O
(	O
p	*(struct)
=	O
slist	*(struct)
->	O
head	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
;	O
p	*(struct)
;	O
p	*(struct)
=	O
p	*(struct)
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
size	int
+=	O
p	*(struct)
->	O
level	int
;	O
return	O
size	int
;	O
}	O
size_t	long
grad_slist_coalesce	(*(struct))->(long)
(	O
grad_slist_t	*(struct)
slist	*(struct)
)	O
{	O
size_t	long
size	int
;	O
if	O
(	O
slist	*(struct)
->	O
head	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
&&	O
slist	*(struct)
->	O
head	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
==	O
NULL	O
)	O
size	int
=	O
slist	*(struct)
->	O
head	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
->	O
level	int
;	O
else	O
{	O
struct	O
grad_slist_bucket	struct(*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long)),*(char),long,long)
*	O
bucket	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
;	O
struct	O
grad_slist_bucket	struct(*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long)),*(char),long,long)
*	O
p	*(struct)
;	O
size	int
=	O
grad_slist_size	(*(struct))->(long)
(	O
slist	*(struct)
)	O
;	O
bucket	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
=	O
alloc_bucket	(long)->(*(struct(*(struct(*`,*`,long,long)),*(char),long,long)))
(	O
size	int
)	O
;	O
for	O
(	O
p	*(struct)
=	O
slist	*(struct)
->	O
head	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
;	O
p	*(struct)
;	O
)	O
{	O
struct	O
grad_slist_bucket	struct(*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long)),*(char),long,long)
*	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
p	*(struct)
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
bucket	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
->	O
buf	*(char)
+	O
bucket	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
->	O
level	int
,	O
p	*(struct)
->	O
buf	*(char)
,	O
p	*(struct)
->	O
level	int
)	O
;	O
bucket	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
->	O
level	int
+=	O
p	*(struct)
->	O
level	int
;	O
grad_free	(*(void))->(void)
(	O
p	*(struct)
)	O
;	O
p	*(struct)
=	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
}	O
slist	*(struct)
->	O
head	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
=	O
slist	*(struct)
->	O
tail	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
=	O
bucket	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
;	O
}	O
return	O
size	int
;	O
}	O
void	O
*	O
grad_slist_head	(*(struct),*(long))->(*(void))
(	O
grad_slist_t	*(struct)
slist	*(struct)
,	O
size_t	long
*	O
psize	*(long)
)	O
{	O
if	O
(	O
psize	*(long)
)	O
*	O
psize	*(long)
=	O
slist	*(struct)
->	O
head	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
?	O
slist	*(struct)
->	O
head	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
->	O
level	int
:	O
0	int
;	O
return	O
slist	*(struct)
->	O
head	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
?	O
slist	*(struct)
->	O
head	*(struct(*(struct(*(struct`),*(char),long,long)),*(char),long,long))
->	O
buf	*(char)
:	O
NULL	O
;	O
}	O
void	O
*	O
grad_slist_finish	(*(struct))->(*(void))
(	O
grad_slist_t	*(struct)
slist	*(struct)
)	O
{	O
grad_slist_coalesce	(*(struct))->(long)
(	O
slist	*(struct)
)	O
;	O
grad_slist_clear	(*(struct))->(void)
(	O
slist	*(struct)
)	O
;	O
return	O
slist	*(struct)
->	O
free	*((*(void),*(void))->(int))
->	O
buf	*(char)
;	O
}	O
void	O
grad_slist_grow_backslash_num	(*(struct),*(char),*(*(char)),int,int)->(void)
(	O
grad_slist_t	*(struct)
slist	*(struct)
,	O
char	O
*	O
text	*(char)
,	O
char	O
*	O
*	O
pend	*(*(char))
,	O
int	O
len	int
,	O
int	O
base	int
)	O
{	O
int	O
i	int
;	O
int	O
val	int
=	O
0	int
;	O
char	O
*	O
start	*(struct(long,long))
=	O
text	*(char)
;	O
if	O
(	O
text	*(char)
[	O
0	int
]	O
==	O
'\\'	O
)	O
{	O
text	*(char)
++	O
;	O
if	O
(	O
base	int
==	O
16	int
)	O
text	*(char)
++	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
len	int
;	O
i	int
++	O
)	O
{	O
int	O
n	long
=	O
(	O
unsigned	O
char	O
)	O
text	*(char)
[	O
i	int
]	O
;	O
if	O
(	O
n	long
>	O
127	int
||	O
(	O
n	long
=	O
to_num	O
(	O
n	long
)	O
)	O
>=	O
base	int
)	O
break	O
;	O
val	int
=	O
val	int
*	O
base	int
+	O
n	long
;	O
}	O
if	O
(	O
i	int
==	O
0	int
)	O
{	O
grad_slist_append	(*(struct),*(void),long)->(void)
(	O
slist	*(struct)
,	O
start	*(struct(long,long))
,	O
1	int
)	O
;	O
if	O
(	O
pend	*(*(char))
)	O
*	O
pend	*(*(char))
=	O
start	*(struct(long,long))
+	O
1	int
;	O
}	O
else	O
{	O
grad_slist_append_char	(*(struct),char)->(void)
(	O
slist	*(struct)
,	O
val	int
)	O
;	O
if	O
(	O
pend	*(*(char))
)	O
*	O
pend	*(*(char))
=	O
text	*(char)
+	O
i	int
;	O
}	O
}	O
void	O
grad_slist_grow_backslash	(*(struct),*(char),*(*(char)))->(void)
(	O
grad_slist_t	*(struct)
slist	*(struct)
,	O
char	O
*	O
text	*(char)
,	O
char	O
*	O
*	O
endp	*(*(char))
)	O
{	O
if	O
(	O
text	*(char)
[	O
1	int
]	O
==	O
'\\'	O
||	O
(	O
unsigned	O
char	O
)	O
text	*(char)
[	O
1	int
]	O
>	O
127	int
)	O
{	O
grad_slist_append_char	(*(struct),char)->(void)
(	O
slist	*(struct)
,	O
text	*(char)
[	O
1	int
]	O
)	O
;	O
text	*(char)
+=	O
2	int
;	O
}	O
else	O
if	O
(	O
isdigit	O
(	O
text	*(char)
[	O
1	int
]	O
)	O
)	O
grad_slist_grow_backslash_num	(*(struct),*(char),*(*(char)),int,int)->(void)
(	O
slist	*(struct)
,	O
text	*(char)
,	O
&	O
text	*(char)
,	O
3	int
,	O
8	int
)	O
;	O
else	O
if	O
(	O
text	*(char)
[	O
1	int
]	O
==	O
'x'	O
||	O
text	*(char)
[	O
1	int
]	O
==	O
'X'	O
)	O
grad_slist_grow_backslash_num	(*(struct),*(char),*(*(char)),int,int)->(void)
(	O
slist	*(struct)
,	O
text	*(char)
,	O
&	O
text	*(char)
,	O
2	int
,	O
16	int
)	O
;	O
else	O
{	O
int	O
c	*(void)
=	O
grad_decode_backslash	(int)->(int)
(	O
text	*(char)
[	O
1	int
]	O
)	O
;	O
grad_slist_append_char	(*(struct),char)->(void)
(	O
slist	*(struct)
,	O
c	*(void)
)	O
;	O
text	*(char)
+=	O
2	int
;	O
}	O
*	O
endp	*(*(char))
=	O
text	*(char)
;	O
}	O
