void	O
VSetVisibility	(double)->(void)
(	O
double	O
d	long
)	O
{	O
int	O
i	int
;	O
double	O
k	double
;	O
_VDefaultWorkContext	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
visibility	double
=	O
d	long
;	O
if	O
(	O
_VDefaultWorkContext	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
visTable	*(double)
)	O
{	O
free	(*(void))->(void)
(	O
(	O
char	O
*	O
)	O
_VDefaultWorkContext	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
visTable	*(double)
)	O
;	O
}	O
_VDefaultWorkContext	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
visTable	*(double)
=	O
(	O
double	O
*	O
)	O
Vmalloc	(int)->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
_VDefaultWorkContext	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
depthCueSteps	int
)	O
;	O
k	double
=	O
log	(double)->(double)
(	O
1.0	int
/	O
(	O
double	O
)	O
_VDefaultWorkContext	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
depthCueSteps	int
)	O
/	O
_VDefaultWorkContext	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
visibility	double
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
_VDefaultWorkContext	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
depthCueSteps	int
-	O
1	int
;	O
++	O
i	int
)	O
{	O
_VDefaultWorkContext	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
visTable	*(double)
[	O
i	int
]	O
=	O
log	(double)->(double)
(	O
1.0	int
-	O
(	O
double	O
)	O
(	O
i	int
+	O
1	int
)	O
/	O
(	O
double	O
)	O
_VDefaultWorkContext	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
depthCueSteps	int
)	O
/	O
k	double
;	O
}	O
}	O
int	O
VComputePolygonColor	(*(struct(*(struct(*`,long,*`,int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*`,int,short,short,short,short,int,struct`,*`,*`,*`,*`,*`,*`,int,int,int,*`,int,int,*`,int,int,*`,int,int)),long,long,struct(array(array(double))),*(struct(short,short,short,struct`,*`,*`,*`,double)),array(struct(double,double,double)),double,double,double,double,int,int,struct(short,short),struct(double,double,double),*(struct),int,long,long,long,*(struct),array(long),int,int,long,long,long,*(short),*(short),array(short),struct(long,short,short,short,char,char),array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*(struct(*`,long,int,long,long,long,int,int)),*(struct(short,long,*`,*`)),long,long,*(()->(void)),*((*`,long,*`)->(int)),*((*`,int,int,int,int,short)->(void)),*((*`,*`,int,short)->(void)),*((*`,long,*`,*`)->(void)),*((*`,int,int,int,int,short)->(void)),*((*`,*`)->(void)),*((*`,int,int,int,int)->(void)),*((*`)->(void)),long)),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))->(int)
(	O
Viewport	struct(*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*`,*`,int)),*(struct(*`,*`,int)),*(struct(*`,*`,int)),*(struct(*`)),*(struct(*`)),*(struct(short,long,long,*`,*`,*`)),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int)),long,long,struct(array(array(double))),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)),array(struct(double,double,double)),double,double,double,double,int,int,struct(short,short),struct(double,double,double),*(struct),int,long,long,long,*(struct),array(long),int,int,long,long,long,*(short),*(short),array(short),struct(long,short,short,short,char,char),array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*(struct(*(struct(int,*`,*`,*`)),long,int,long,long,long,int,int)),*(struct(short,long,*(struct(short,long,*`,*`)),*(struct(short,long,*`,*`)))),long,long,*(()->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),long,*(struct(long,short,short,short,char,char)))->(int)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),int,int,int,int,short)->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),*(struct(short,short,short,short)),int,short)->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),long,*(struct),*(struct(short,short,short,struct`,*`,*`,*`,double)))->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),int,int,int,int,short)->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),*(struct))->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),int,int,int,int)->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)))->(void)),long)
*	O
v	struct(double,double,double)
,	O
VPolygon	struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),double)
*	O
poly	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
)	O
{	O
VColor	struct(*(char),short,short,*(struct(*(char),short,short,*(struct(*`,short,short,*`)))))
*	O
c	*(struct(long,short,short,short,char,char))
;	O
VPoint	struct(double,double,double)
*	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
;	O
int	O
i	int
;	O
double	O
d	long
;	O
if	O
(	O
poly	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
flags	short
&	O
PolyUseBackColor	int
)	O
{	O
c	*(struct(long,short,short,short,char,char))
=	O
poly	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
backColor	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
;	O
}	O
else	O
{	O
c	*(struct(long,short,short,short,char,char))
=	O
poly	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
color	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
;	O
}	O
if	O
(	O
(	O
v	struct(double,double,double)
->	O
flags	short
&	O
VPDepthCueing	int
)	O
==	O
0	int
||	O
(	O
c	*(struct(long,short,short,short,char,char))
->	O
flags	short
&	O
ColorEnableDepthCueing	int
)	O
==	O
0	int
)	O
{	O
return	O
v	struct(double,double,double)
->	O
pixel	long
[	O
c	*(struct(long,short,short,short,char,char))
->	O
cIndex	short
]	O
;	O
}	O
else	O
{	O
if	O
(	O
(	O
i	int
=	O
poly	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
assignedDepth	short
)	O
>	O
-	O
1	int
)	O
{	O
return	O
v	struct(double,double,double)
->	O
pixel	long
[	O
(	O
i	int
<	O
_VDefaultWorkContext	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
depthCueSteps	int
-	O
1	int
)	O
?	O
c	*(struct(long,short,short,short,char,char))
->	O
cIndex	short
+	O
i	int
:	O
_VDefaultWorkContext	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
depthCueColor	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
->	O
cIndex	short
]	O
;	O
}	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
=	O
&	O
poly	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
vertex	*(struct(double,double,double))
[	O
0	int
]	O
;	O
d	long
=	O
sqrt	(double)->(double)
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
x	double
*	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
x	double
+	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
y	double
*	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
y	double
+	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
z	double
*	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
z	double
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
_VDefaultWorkContext	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
depthCueSteps	int
-	O
1	int
;	O
++	O
i	int
)	O
{	O
if	O
(	O
d	long
<	O
_VDefaultWorkContext	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
visTable	*(double)
[	O
i	int
]	O
)	O
{	O
return	O
v	struct(double,double,double)
->	O
pixel	long
[	O
c	*(struct(long,short,short,short,char,char))
->	O
cIndex	short
+	O
i	int
]	O
;	O
}	O
}	O
return	O
v	struct(double,double,double)
->	O
pixel	long
[	O
_VDefaultWorkContext	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
depthCueColor	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
->	O
cIndex	short
]	O
;	O
}	O
}	O
