static	O
mp_limb_t	long
mpn_mul_fft_internal	(*(long),long,int,*(*(long)),*(*(long)),*(long),*(long),long,long,long,*(*(int)),*(long),int)->(long)
(	O
mp_ptr	*(long)
,	O
mp_size_t	long
,	O
int	O
,	O
mp_ptr	*(long)
*	O
,	O
mp_ptr	*(long)
*	O
,	O
mp_ptr	*(long)
,	O
mp_ptr	*(long)
,	O
mp_size_t	long
,	O
mp_size_t	long
,	O
mp_size_t	long
,	O
int	O
*	O
*	O
,	O
mp_ptr	*(long)
,	O
int	O
)	O
;	O
static	O
void	O
mpn_mul_fft_decompose	(*(long),*(*(long)),int,int,*(long),long,int,int,*(long))->(void)
(	O
mp_ptr	*(long)
,	O
mp_ptr	*(long)
*	O
,	O
int	O
,	O
int	O
,	O
mp_srcptr	*(long)
,	O
mp_size_t	long
,	O
int	O
,	O
int	O
,	O
mp_ptr	*(long)
)	O
;	O
FFT_TABLE_ATTRS	O
struct	O
fft_table_nk	struct(int,int)
mpn_fft_table3	array(array(struct(int,int)))
[	O
2	int
]	O
[	O
FFT_TABLE3_SIZE	O
]	O
=	O
{	O
MUL_FFT_TABLE3	O
,	O
SQR_FFT_TABLE3	O
}	O
;	O
int	O
mpn_fft_best_k	O
(	O
mp_size_t	long
n	long
,	O
int	O
sqr	int
)	O
{	O
FFT_TABLE_ATTRS	O
struct	O
fft_table_nk	struct(int,int)
*	O
fft_tab	*(struct(int,int))
,	O
*	O
tab	*(struct(int,int))
;	O
mp_size_t	long
tab_n	long
,	O
thres	long
;	O
int	O
last_k	int
;	O
fft_tab	*(struct(int,int))
=	O
mpn_fft_table3	array(array(struct(int,int)))
[	O
sqr	int
]	O
;	O
last_k	int
=	O
fft_tab	*(struct(int,int))
->	O
k	int
;	O
for	O
(	O
tab	*(struct(int,int))
=	O
fft_tab	*(struct(int,int))
+	O
1	int
;	O
;	O
tab	*(struct(int,int))
++	O
)	O
{	O
tab_n	long
=	O
tab	*(struct(int,int))
->	O
n	long
;	O
thres	long
=	O
tab_n	long
<<	O
last_k	int
;	O
if	O
(	O
n	long
<=	O
thres	long
)	O
break	O
;	O
last_k	int
=	O
tab	*(struct(int,int))
->	O
k	int
;	O
}	O
return	O
last_k	int
;	O
}	O
mp_size_t	long
mpn_fft_next_size	O
(	O
mp_size_t	long
pl	long
,	O
int	O
k	int
)	O
{	O
pl	long
=	O
1	int
+	O
(	O
(	O
pl	long
-	O
1	int
)	O
>>	O
k	int
)	O
;	O
return	O
pl	long
<<	O
k	int
;	O
}	O
static	O
void	O
mpn_fft_initl	(*(*(int)),int)->(void)
(	O
int	O
*	O
*	O
l	long
,	O
int	O
k	int
)	O
{	O
int	O
i	long
,	O
j	int
,	O
K	int
;	O
int	O
*	O
li	*(int)
;	O
l	long
[	O
0	int
]	O
[	O
0	int
]	O
=	O
0	int
;	O
for	O
(	O
i	long
=	O
1	int
,	O
K	int
=	O
1	int
;	O
i	long
<=	O
k	int
;	O
i	long
++	O
,	O
K	int
*=	O
2	int
)	O
{	O
li	*(int)
=	O
l	long
[	O
i	long
]	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
K	int
;	O
j	int
++	O
)	O
{	O
li	*(int)
[	O
j	int
]	O
=	O
2	int
*	O
l	long
[	O
i	long
-	O
1	int
]	O
[	O
j	int
]	O
;	O
li	*(int)
[	O
K	int
+	O
j	int
]	O
=	O
1	int
+	O
li	*(int)
[	O
j	int
]	O
;	O
}	O
}	O
}	O
static	O
void	O
mpn_fft_mul_2exp_modF	(*(long),*(long),int,long)->(void)
(	O
mp_ptr	*(long)
r	*(long)
,	O
mp_srcptr	*(long)
a	int
,	O
unsigned	O
int	O
d	long
,	O
mp_size_t	long
n	long
)	O
{	O
int	O
sh	int
;	O
mp_limb_t	long
cc	long
,	O
rd	long
;	O
sh	int
=	O
d	long
%	O
GMP_NUMB_BITS	O
;	O
d	long
/=	O
GMP_NUMB_BITS	O
;	O
if	O
(	O
d	long
>=	O
n	long
)	O
{	O
d	long
-=	O
n	long
;	O
if	O
(	O
sh	int
!=	O
0	int
)	O
{	O
mpn_lshift	O
(	O
r	*(long)
,	O
a	int
+	O
n	long
-	O
d	long
,	O
d	long
+	O
1	int
,	O
sh	int
)	O
;	O
rd	long
=	O
r	*(long)
[	O
d	long
]	O
;	O
cc	long
=	O
mpn_lshiftc	O
(	O
r	*(long)
+	O
d	long
,	O
a	int
,	O
n	long
-	O
d	long
,	O
sh	int
)	O
;	O
}	O
else	O
{	O
MPN_COPY	O
(	O
r	*(long)
,	O
a	int
+	O
n	long
-	O
d	long
,	O
d	long
)	O
;	O
rd	long
=	O
a	int
[	O
n	long
]	O
;	O
mpn_com	O
(	O
r	*(long)
+	O
d	long
,	O
a	int
,	O
n	long
-	O
d	long
)	O
;	O
cc	long
=	O
0	int
;	O
}	O
r	*(long)
[	O
n	long
]	O
=	O
0	int
;	O
cc	long
++	O
;	O
mpn_incr_u	O
(	O
r	*(long)
,	O
cc	long
)	O
;	O
rd	long
++	O
;	O
cc	long
=	O
(	O
rd	long
==	O
0	int
)	O
?	O
1	int
:	O
rd	long
;	O
r	*(long)
=	O
r	*(long)
+	O
d	long
+	O
(	O
rd	long
==	O
0	int
)	O
;	O
mpn_incr_u	O
(	O
r	*(long)
,	O
cc	long
)	O
;	O
}	O
else	O
{	O
if	O
(	O
sh	int
!=	O
0	int
)	O
{	O
mpn_lshiftc	O
(	O
r	*(long)
,	O
a	int
+	O
n	long
-	O
d	long
,	O
d	long
+	O
1	int
,	O
sh	int
)	O
;	O
rd	long
=	O
~	O
r	*(long)
[	O
d	long
]	O
;	O
cc	long
=	O
mpn_lshift	O
(	O
r	*(long)
+	O
d	long
,	O
a	int
,	O
n	long
-	O
d	long
,	O
sh	int
)	O
;	O
}	O
else	O
{	O
mpn_com	O
(	O
r	*(long)
,	O
a	int
+	O
n	long
-	O
d	long
,	O
d	long
+	O
1	int
)	O
;	O
rd	long
=	O
a	int
[	O
n	long
]	O
;	O
MPN_COPY	O
(	O
r	*(long)
+	O
d	long
,	O
a	int
,	O
n	long
-	O
d	long
)	O
;	O
cc	long
=	O
0	int
;	O
}	O
if	O
(	O
d	long
!=	O
0	int
)	O
{	O
if	O
(	O
cc	long
--	O
==	O
0	int
)	O
cc	long
=	O
mpn_add_1	O
(	O
r	*(long)
,	O
r	*(long)
,	O
n	long
,	O
CNST_LIMB	O
(	O
1	int
)	O
)	O
;	O
cc	long
=	O
mpn_sub_1	O
(	O
r	*(long)
,	O
r	*(long)
,	O
d	long
,	O
cc	long
)	O
+	O
1	int
;	O
}	O
r	*(long)
[	O
n	long
]	O
=	O
-	O
mpn_sub_1	O
(	O
r	*(long)
+	O
d	long
,	O
r	*(long)
+	O
d	long
,	O
n	long
-	O
d	long
,	O
cc	long
)	O
;	O
r	*(long)
[	O
n	long
]	O
-=	O
mpn_sub_1	O
(	O
r	*(long)
+	O
d	long
,	O
r	*(long)
+	O
d	long
,	O
n	long
-	O
d	long
,	O
rd	long
)	O
;	O
if	O
(	O
r	*(long)
[	O
n	long
]	O
&	O
GMP_LIMB_HIGHBIT	O
)	O
r	*(long)
[	O
n	long
]	O
=	O
mpn_add_1	O
(	O
r	*(long)
,	O
r	*(long)
,	O
n	long
,	O
CNST_LIMB	O
(	O
1	int
)	O
)	O
;	O
}	O
}	O
static	O
inline	O
void	O
mpn_fft_add_modF	(*(long),*(long),*(long),int)->(void)
(	O
mp_ptr	*(long)
r	*(long)
,	O
mp_srcptr	*(long)
a	int
,	O
mp_srcptr	*(long)
b	int
,	O
int	O
n	long
)	O
{	O
mp_limb_t	long
c	long
,	O
x	long
;	O
c	long
=	O
a	int
[	O
n	long
]	O
+	O
b	int
[	O
n	long
]	O
+	O
mpn_add_n	O
(	O
r	*(long)
,	O
a	int
,	O
b	int
,	O
n	long
)	O
;	O
x	long
=	O
(	O
c	long
-	O
1	int
)	O
&	O
-	O
(	O
c	long
!=	O
0	int
)	O
;	O
r	*(long)
[	O
n	long
]	O
=	O
c	long
-	O
x	long
;	O
MPN_DECR_U	O
(	O
r	*(long)
,	O
n	long
+	O
1	int
,	O
x	long
)	O
;	O
}	O
static	O
inline	O
void	O
mpn_fft_sub_modF	(*(long),*(long),*(long),int)->(void)
(	O
mp_ptr	*(long)
r	*(long)
,	O
mp_srcptr	*(long)
a	int
,	O
mp_srcptr	*(long)
b	int
,	O
int	O
n	long
)	O
{	O
mp_limb_t	long
c	long
,	O
x	long
;	O
c	long
=	O
a	int
[	O
n	long
]	O
-	O
b	int
[	O
n	long
]	O
-	O
mpn_sub_n	O
(	O
r	*(long)
,	O
a	int
,	O
b	int
,	O
n	long
)	O
;	O
x	long
=	O
(	O
-	O
c	long
)	O
&	O
-	O
(	O
(	O
c	long
&	O
GMP_LIMB_HIGHBIT	O
)	O
!=	O
0	int
)	O
;	O
r	*(long)
[	O
n	long
]	O
=	O
x	long
+	O
c	long
;	O
MPN_INCR_U	O
(	O
r	*(long)
,	O
n	long
+	O
1	int
,	O
x	long
)	O
;	O
}	O
static	O
void	O
mpn_fft_fft	(*(*(long)),long,*(*(int)),long,long,long,*(long))->(void)
(	O
mp_ptr	*(long)
*	O
Ap	*(*(long))
,	O
mp_size_t	long
K	int
,	O
int	O
*	O
*	O
ll	*(*(int))
,	O
mp_size_t	long
omega	long
,	O
mp_size_t	long
n	long
,	O
mp_size_t	long
inc	long
,	O
mp_ptr	*(long)
tp	*(long)
)	O
{	O
if	O
(	O
K	int
==	O
2	int
)	O
{	O
mp_limb_t	long
cy	long
;	O
MPN_COPY	O
(	O
tp	*(long)
,	O
Ap	*(*(long))
[	O
0	int
]	O
,	O
n	long
+	O
1	int
)	O
;	O
mpn_add_n	O
(	O
Ap	*(*(long))
[	O
0	int
]	O
,	O
Ap	*(*(long))
[	O
0	int
]	O
,	O
Ap	*(*(long))
[	O
inc	long
]	O
,	O
n	long
+	O
1	int
)	O
;	O
cy	long
=	O
mpn_sub_n	O
(	O
Ap	*(*(long))
[	O
inc	long
]	O
,	O
tp	*(long)
,	O
Ap	*(*(long))
[	O
inc	long
]	O
,	O
n	long
+	O
1	int
)	O
;	O
if	O
(	O
Ap	*(*(long))
[	O
0	int
]	O
[	O
n	long
]	O
>	O
1	int
)	O
Ap	*(*(long))
[	O
0	int
]	O
[	O
n	long
]	O
=	O
1	int
-	O
mpn_sub_1	O
(	O
Ap	*(*(long))
[	O
0	int
]	O
,	O
Ap	*(*(long))
[	O
0	int
]	O
,	O
n	long
,	O
Ap	*(*(long))
[	O
0	int
]	O
[	O
n	long
]	O
-	O
1	int
)	O
;	O
if	O
(	O
cy	long
)	O
Ap	*(*(long))
[	O
inc	long
]	O
[	O
n	long
]	O
=	O
mpn_add_1	O
(	O
Ap	*(*(long))
[	O
inc	long
]	O
,	O
Ap	*(*(long))
[	O
inc	long
]	O
,	O
n	long
,	O
~	O
Ap	*(*(long))
[	O
inc	long
]	O
[	O
n	long
]	O
+	O
1	int
)	O
;	O
}	O
else	O
{	O
int	O
j	int
;	O
int	O
*	O
lk	*(int)
=	O
*	O
ll	*(*(int))
;	O
mpn_fft_fft	(*(*(long)),long,*(*(int)),long,long,long,*(long))->(void)
(	O
Ap	*(*(long))
,	O
K	int
>>	O
1	int
,	O
ll	*(*(int))
-	O
1	int
,	O
2	int
*	O
omega	long
,	O
n	long
,	O
inc	long
*	O
2	int
,	O
tp	*(long)
)	O
;	O
mpn_fft_fft	(*(*(long)),long,*(*(int)),long,long,long,*(long))->(void)
(	O
Ap	*(*(long))
+	O
inc	long
,	O
K	int
>>	O
1	int
,	O
ll	*(*(int))
-	O
1	int
,	O
2	int
*	O
omega	long
,	O
n	long
,	O
inc	long
*	O
2	int
,	O
tp	*(long)
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
(	O
K	int
>>	O
1	int
)	O
;	O
j	int
++	O
,	O
lk	*(int)
+=	O
2	int
,	O
Ap	*(*(long))
+=	O
2	int
*	O
inc	long
)	O
{	O
mpn_fft_mul_2exp_modF	(*(long),*(long),int,long)->(void)
(	O
tp	*(long)
,	O
Ap	*(*(long))
[	O
inc	long
]	O
,	O
lk	*(int)
[	O
0	int
]	O
*	O
omega	long
,	O
n	long
)	O
;	O
mpn_fft_sub_modF	(*(long),*(long),*(long),int)->(void)
(	O
Ap	*(*(long))
[	O
inc	long
]	O
,	O
Ap	*(*(long))
[	O
0	int
]	O
,	O
tp	*(long)
,	O
n	long
)	O
;	O
mpn_fft_add_modF	(*(long),*(long),*(long),int)->(void)
(	O
Ap	*(*(long))
[	O
0	int
]	O
,	O
Ap	*(*(long))
[	O
0	int
]	O
,	O
tp	*(long)
,	O
n	long
)	O
;	O
}	O
}	O
}	O
static	O
inline	O
void	O
mpn_fft_normalize	(*(long),long)->(void)
(	O
mp_ptr	*(long)
ap	*(long)
,	O
mp_size_t	long
n	long
)	O
{	O
if	O
(	O
ap	*(long)
[	O
n	long
]	O
!=	O
0	int
)	O
{	O
MPN_DECR_U	O
(	O
ap	*(long)
,	O
n	long
+	O
1	int
,	O
CNST_LIMB	O
(	O
1	int
)	O
)	O
;	O
if	O
(	O
ap	*(long)
[	O
n	long
]	O
==	O
0	int
)	O
{	O
MPN_ZERO	O
(	O
ap	*(long)
,	O
n	long
)	O
;	O
ap	*(long)
[	O
n	long
]	O
=	O
1	int
;	O
}	O
else	O
ap	*(long)
[	O
n	long
]	O
=	O
0	int
;	O
}	O
}	O
static	O
void	O
mpn_fft_mul_modF_K	(*(*(long)),*(*(long)),long,int)->(void)
(	O
mp_ptr	*(long)
*	O
ap	*(long)
,	O
mp_ptr	*(long)
*	O
bp	*(*(long))
,	O
mp_size_t	long
n	long
,	O
int	O
K	int
)	O
{	O
int	O
i	long
;	O
int	O
sqr	int
=	O
(	O
ap	*(long)
==	O
bp	*(*(long))
)	O
;	O
TMP_DECL	O
;	O
TMP_MARK	O
;	O
if	O
(	O
n	long
>=	O
(	O
sqr	int
?	O
SQR_FFT_MODF_THRESHOLD	int
:	O
MUL_FFT_MODF_THRESHOLD	int
)	O
)	O
{	O
int	O
k	int
,	O
K2	int
,	O
nprime2	int
,	O
Nprime2	int
,	O
M2	int
,	O
maxLK	int
,	O
l	long
,	O
Mp2	int
;	O
int	O
*	O
*	O
fft_l	*(*(int))
;	O
mp_ptr	*(long)
*	O
Ap	*(*(long))
,	O
*	O
Bp	*(*(long))
,	O
A	*(long)
,	O
B	*(long)
,	O
T	*(long)
;	O
k	int
=	O
mpn_fft_best_k	O
(	O
n	long
,	O
sqr	int
)	O
;	O
K2	int
=	O
1	int
<<	O
k	int
;	O
ASSERT_ALWAYS	O
(	O
(	O
n	long
&	O
(	O
K2	int
-	O
1	int
)	O
)	O
==	O
0	int
)	O
;	O
maxLK	int
=	O
(	O
K2	int
>	O
GMP_NUMB_BITS	O
)	O
?	O
K2	int
:	O
GMP_NUMB_BITS	O
;	O
M2	int
=	O
n	long
*	O
GMP_NUMB_BITS	O
>>	O
k	int
;	O
l	long
=	O
n	long
>>	O
k	int
;	O
Nprime2	int
=	O
(	O
(	O
2	int
*	O
M2	int
+	O
k	int
+	O
2	int
+	O
maxLK	int
)	O
/	O
maxLK	int
)	O
*	O
maxLK	int
;	O
nprime2	int
=	O
Nprime2	int
/	O
GMP_NUMB_BITS	O
;	O
if	O
(	O
nprime2	int
>=	O
(	O
sqr	int
?	O
SQR_FFT_MODF_THRESHOLD	int
:	O
MUL_FFT_MODF_THRESHOLD	int
)	O
)	O
{	O
unsigned	O
long	O
K3	long
;	O
for	O
(	O
;	O
;	O
)	O
{	O
K3	long
=	O
1L	int
<<	O
mpn_fft_best_k	O
(	O
nprime2	int
,	O
sqr	int
)	O
;	O
if	O
(	O
(	O
nprime2	int
&	O
(	O
K3	long
-	O
1	int
)	O
)	O
==	O
0	int
)	O
break	O
;	O
nprime2	int
=	O
(	O
nprime2	int
+	O
K3	long
-	O
1	int
)	O
&	O
-	O
K3	long
;	O
Nprime2	int
=	O
nprime2	int
*	O
GMP_LIMB_BITS	int
;	O
}	O
}	O
ASSERT_ALWAYS	O
(	O
nprime2	int
<	O
n	long
)	O
;	O
Mp2	int
=	O
Nprime2	int
>>	O
k	int
;	O
Ap	*(*(long))
=	O
TMP_ALLOC_MP_PTRS	O
(	O
K2	int
)	O
;	O
Bp	*(*(long))
=	O
TMP_ALLOC_MP_PTRS	O
(	O
K2	int
)	O
;	O
A	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
2	int
*	O
(	O
nprime2	int
+	O
1	int
)	O
<<	O
k	int
)	O
;	O
T	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
2	int
*	O
(	O
nprime2	int
+	O
1	int
)	O
)	O
;	O
B	*(long)
=	O
A	*(long)
+	O
(	O
(	O
nprime2	int
+	O
1	int
)	O
<<	O
k	int
)	O
;	O
fft_l	*(*(int))
=	O
TMP_ALLOC_TYPE	O
(	O
k	int
+	O
1	int
,	O
int	O
*	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<=	O
k	int
;	O
i	long
++	O
)	O
fft_l	*(*(int))
[	O
i	long
]	O
=	O
TMP_ALLOC_TYPE	O
(	O
1	int
<<	O
i	long
,	O
int	O
)	O
;	O
mpn_fft_initl	(*(*(int)),int)->(void)
(	O
fft_l	*(*(int))
,	O
k	int
)	O
;	O
TRACE	O
(	O
printf	O
(	O
"recurse: %ldx%ld limbs -> %d times %dx%d (%1.2f)\n"	*(char)
,	O
n	long
,	O
n	long
,	O
K2	int
,	O
nprime2	int
,	O
nprime2	int
,	O
2.0	int
*	O
(	O
double	O
)	O
n	long
/	O
nprime2	int
/	O
K2	int
)	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
K	int
;	O
i	long
++	O
,	O
ap	*(long)
++	O
,	O
bp	*(*(long))
++	O
)	O
{	O
mp_limb_t	long
cy	long
;	O
mpn_fft_normalize	(*(long),long)->(void)
(	O
*	O
ap	*(long)
,	O
n	long
)	O
;	O
if	O
(	O
!	O
sqr	int
)	O
mpn_fft_normalize	(*(long),long)->(void)
(	O
*	O
bp	*(*(long))
,	O
n	long
)	O
;	O
mpn_mul_fft_decompose	(*(long),*(*(long)),int,int,*(long),long,int,int,*(long))->(void)
(	O
A	*(long)
,	O
Ap	*(*(long))
,	O
K2	int
,	O
nprime2	int
,	O
*	O
ap	*(long)
,	O
(	O
l	long
<<	O
k	int
)	O
+	O
1	int
,	O
l	long
,	O
Mp2	int
,	O
T	*(long)
)	O
;	O
if	O
(	O
!	O
sqr	int
)	O
mpn_mul_fft_decompose	(*(long),*(*(long)),int,int,*(long),long,int,int,*(long))->(void)
(	O
B	*(long)
,	O
Bp	*(*(long))
,	O
K2	int
,	O
nprime2	int
,	O
*	O
bp	*(*(long))
,	O
(	O
l	long
<<	O
k	int
)	O
+	O
1	int
,	O
l	long
,	O
Mp2	int
,	O
T	*(long)
)	O
;	O
cy	long
=	O
mpn_mul_fft_internal	(*(long),long,int,*(*(long)),*(*(long)),*(long),*(long),long,long,long,*(*(int)),*(long),int)->(long)
(	O
*	O
ap	*(long)
,	O
n	long
,	O
k	int
,	O
Ap	*(*(long))
,	O
Bp	*(*(long))
,	O
A	*(long)
,	O
B	*(long)
,	O
nprime2	int
,	O
l	long
,	O
Mp2	int
,	O
fft_l	*(*(int))
,	O
T	*(long)
,	O
sqr	int
)	O
;	O
(	O
*	O
ap	*(long)
)	O
[	O
n	long
]	O
=	O
cy	long
;	O
}	O
}	O
else	O
{	O
mp_ptr	*(long)
a	int
,	O
b	int
,	O
tp	*(long)
,	O
tpn	*(long)
;	O
mp_limb_t	long
cc	long
;	O
int	O
n2	int
=	O
2	int
*	O
n	long
;	O
tp	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
n2	int
)	O
;	O
tpn	*(long)
=	O
tp	*(long)
+	O
n	long
;	O
TRACE	O
(	O
printf	O
(	O
"  mpn_mul_n %d of %ld limbs\n"	*(char)
,	O
K	int
,	O
n	long
)	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
K	int
;	O
i	long
++	O
)	O
{	O
a	int
=	O
*	O
ap	*(long)
++	O
;	O
b	int
=	O
*	O
bp	*(*(long))
++	O
;	O
if	O
(	O
sqr	int
)	O
mpn_sqr	O
(	O
tp	*(long)
,	O
a	int
,	O
n	long
)	O
;	O
else	O
mpn_mul_n	O
(	O
tp	*(long)
,	O
b	int
,	O
a	int
,	O
n	long
)	O
;	O
if	O
(	O
a	int
[	O
n	long
]	O
!=	O
0	int
)	O
cc	long
=	O
mpn_add_n	O
(	O
tpn	*(long)
,	O
tpn	*(long)
,	O
b	int
,	O
n	long
)	O
;	O
else	O
cc	long
=	O
0	int
;	O
if	O
(	O
b	int
[	O
n	long
]	O
!=	O
0	int
)	O
cc	long
+=	O
mpn_add_n	O
(	O
tpn	*(long)
,	O
tpn	*(long)
,	O
a	int
,	O
n	long
)	O
+	O
a	int
[	O
n	long
]	O
;	O
if	O
(	O
cc	long
!=	O
0	int
)	O
{	O
cc	long
=	O
mpn_add_1	O
(	O
tp	*(long)
,	O
tp	*(long)
,	O
n2	int
,	O
cc	long
)	O
;	O
ASSERT	O
(	O
cc	long
==	O
0	int
)	O
;	O
}	O
a	int
[	O
n	long
]	O
=	O
mpn_sub_n	O
(	O
a	int
,	O
tp	*(long)
,	O
tpn	*(long)
,	O
n	long
)	O
&&	O
mpn_add_1	O
(	O
a	int
,	O
a	int
,	O
n	long
,	O
CNST_LIMB	O
(	O
1	int
)	O
)	O
;	O
}	O
}	O
TMP_FREE	O
;	O
}	O
static	O
void	O
mpn_fft_fftinv	(*(*(long)),int,long,long,*(long))->(void)
(	O
mp_ptr	*(long)
*	O
Ap	*(*(long))
,	O
int	O
K	int
,	O
mp_size_t	long
omega	long
,	O
mp_size_t	long
n	long
,	O
mp_ptr	*(long)
tp	*(long)
)	O
{	O
if	O
(	O
K	int
==	O
2	int
)	O
{	O
mp_limb_t	long
cy	long
;	O
MPN_COPY	O
(	O
tp	*(long)
,	O
Ap	*(*(long))
[	O
0	int
]	O
,	O
n	long
+	O
1	int
)	O
;	O
mpn_add_n	O
(	O
Ap	*(*(long))
[	O
0	int
]	O
,	O
Ap	*(*(long))
[	O
0	int
]	O
,	O
Ap	*(*(long))
[	O
1	int
]	O
,	O
n	long
+	O
1	int
)	O
;	O
cy	long
=	O
mpn_sub_n	O
(	O
Ap	*(*(long))
[	O
1	int
]	O
,	O
tp	*(long)
,	O
Ap	*(*(long))
[	O
1	int
]	O
,	O
n	long
+	O
1	int
)	O
;	O
if	O
(	O
Ap	*(*(long))
[	O
0	int
]	O
[	O
n	long
]	O
>	O
1	int
)	O
Ap	*(*(long))
[	O
0	int
]	O
[	O
n	long
]	O
=	O
1	int
-	O
mpn_sub_1	O
(	O
Ap	*(*(long))
[	O
0	int
]	O
,	O
Ap	*(*(long))
[	O
0	int
]	O
,	O
n	long
,	O
Ap	*(*(long))
[	O
0	int
]	O
[	O
n	long
]	O
-	O
1	int
)	O
;	O
if	O
(	O
cy	long
)	O
Ap	*(*(long))
[	O
1	int
]	O
[	O
n	long
]	O
=	O
mpn_add_1	O
(	O
Ap	*(*(long))
[	O
1	int
]	O
,	O
Ap	*(*(long))
[	O
1	int
]	O
,	O
n	long
,	O
~	O
Ap	*(*(long))
[	O
1	int
]	O
[	O
n	long
]	O
+	O
1	int
)	O
;	O
}	O
else	O
{	O
int	O
j	int
,	O
K2	int
=	O
K	int
>>	O
1	int
;	O
mpn_fft_fftinv	(*(*(long)),int,long,long,*(long))->(void)
(	O
Ap	*(*(long))
,	O
K2	int
,	O
2	int
*	O
omega	long
,	O
n	long
,	O
tp	*(long)
)	O
;	O
mpn_fft_fftinv	(*(*(long)),int,long,long,*(long))->(void)
(	O
Ap	*(*(long))
+	O
K2	int
,	O
K2	int
,	O
2	int
*	O
omega	long
,	O
n	long
,	O
tp	*(long)
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
K2	int
;	O
j	int
++	O
,	O
Ap	*(*(long))
++	O
)	O
{	O
mpn_fft_mul_2exp_modF	(*(long),*(long),int,long)->(void)
(	O
tp	*(long)
,	O
Ap	*(*(long))
[	O
K2	int
]	O
,	O
j	int
*	O
omega	long
,	O
n	long
)	O
;	O
mpn_fft_sub_modF	(*(long),*(long),*(long),int)->(void)
(	O
Ap	*(*(long))
[	O
K2	int
]	O
,	O
Ap	*(*(long))
[	O
0	int
]	O
,	O
tp	*(long)
,	O
n	long
)	O
;	O
mpn_fft_add_modF	(*(long),*(long),*(long),int)->(void)
(	O
Ap	*(*(long))
[	O
0	int
]	O
,	O
Ap	*(*(long))
[	O
0	int
]	O
,	O
tp	*(long)
,	O
n	long
)	O
;	O
}	O
}	O
}	O
static	O
void	O
mpn_fft_div_2exp_modF	(*(long),*(long),int,long)->(void)
(	O
mp_ptr	*(long)
r	*(long)
,	O
mp_srcptr	*(long)
a	int
,	O
int	O
k	int
,	O
mp_size_t	long
n	long
)	O
{	O
int	O
i	long
;	O
ASSERT	O
(	O
r	*(long)
!=	O
a	int
)	O
;	O
i	long
=	O
2	int
*	O
n	long
*	O
GMP_NUMB_BITS	O
-	O
k	int
;	O
mpn_fft_mul_2exp_modF	(*(long),*(long),int,long)->(void)
(	O
r	*(long)
,	O
a	int
,	O
i	long
,	O
n	long
)	O
;	O
mpn_fft_normalize	(*(long),long)->(void)
(	O
r	*(long)
,	O
n	long
)	O
;	O
}	O
static	O
int	O
mpn_fft_norm_modF	(*(long),long,*(long),long)->(int)
(	O
mp_ptr	*(long)
rp	*(long)
,	O
mp_size_t	long
n	long
,	O
mp_ptr	*(long)
ap	*(long)
,	O
mp_size_t	long
an	long
)	O
{	O
mp_size_t	long
l	long
;	O
long	O
int	O
m	long
;	O
mp_limb_t	long
cc	long
;	O
int	O
rpn	int
;	O
ASSERT	O
(	O
(	O
n	long
<=	O
an	long
)	O
&&	O
(	O
an	long
<=	O
3	int
*	O
n	long
)	O
)	O
;	O
m	long
=	O
an	long
-	O
2	int
*	O
n	long
;	O
if	O
(	O
m	long
>	O
0	int
)	O
{	O
l	long
=	O
n	long
;	O
cc	long
=	O
mpn_add_n	O
(	O
rp	*(long)
,	O
ap	*(long)
,	O
ap	*(long)
+	O
2	int
*	O
n	long
,	O
m	long
)	O
;	O
rpn	int
=	O
mpn_add_1	O
(	O
rp	*(long)
+	O
m	long
,	O
ap	*(long)
+	O
m	long
,	O
n	long
-	O
m	long
,	O
cc	long
)	O
;	O
}	O
else	O
{	O
l	long
=	O
an	long
-	O
n	long
;	O
MPN_COPY	O
(	O
rp	*(long)
,	O
ap	*(long)
,	O
n	long
)	O
;	O
rpn	int
=	O
0	int
;	O
}	O
cc	long
=	O
mpn_sub_n	O
(	O
rp	*(long)
,	O
rp	*(long)
,	O
ap	*(long)
+	O
n	long
,	O
l	long
)	O
;	O
rpn	int
-=	O
mpn_sub_1	O
(	O
rp	*(long)
+	O
l	long
,	O
rp	*(long)
+	O
l	long
,	O
n	long
-	O
l	long
,	O
cc	long
)	O
;	O
if	O
(	O
rpn	int
<	O
0	int
)	O
rpn	int
=	O
mpn_add_1	O
(	O
rp	*(long)
,	O
rp	*(long)
,	O
n	long
,	O
CNST_LIMB	O
(	O
1	int
)	O
)	O
;	O
return	O
rpn	int
;	O
}	O
static	O
void	O
mpn_mul_fft_decompose	(*(long),*(*(long)),int,int,*(long),long,int,int,*(long))->(void)
(	O
mp_ptr	*(long)
A	*(long)
,	O
mp_ptr	*(long)
*	O
Ap	*(*(long))
,	O
int	O
K	int
,	O
int	O
nprime	int
,	O
mp_srcptr	*(long)
n	long
,	O
mp_size_t	long
nl	long
,	O
int	O
l	long
,	O
int	O
Mp	int
,	O
mp_ptr	*(long)
T	*(long)
)	O
{	O
int	O
i	long
,	O
j	int
;	O
mp_ptr	*(long)
tmp	*(long)
;	O
mp_size_t	long
Kl	long
=	O
K	int
*	O
l	long
;	O
TMP_DECL	O
;	O
TMP_MARK	O
;	O
if	O
(	O
nl	long
>	O
Kl	long
)	O
{	O
mp_size_t	long
dif	long
=	O
nl	long
-	O
Kl	long
;	O
mp_limb_signed_t	long
cy	long
;	O
tmp	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
Kl	long
+	O
1	int
)	O
;	O
if	O
(	O
dif	long
>	O
Kl	long
)	O
{	O
int	O
subp	int
=	O
0	int
;	O
cy	long
=	O
mpn_sub_n	O
(	O
tmp	*(long)
,	O
n	long
,	O
n	long
+	O
Kl	long
,	O
Kl	long
)	O
;	O
n	long
+=	O
2	int
*	O
Kl	long
;	O
dif	long
-=	O
Kl	long
;	O
while	O
(	O
dif	long
>	O
Kl	long
)	O
{	O
if	O
(	O
subp	int
)	O
cy	long
+=	O
mpn_sub_n	O
(	O
tmp	*(long)
,	O
tmp	*(long)
,	O
n	long
,	O
Kl	long
)	O
;	O
else	O
cy	long
-=	O
mpn_add_n	O
(	O
tmp	*(long)
,	O
tmp	*(long)
,	O
n	long
,	O
Kl	long
)	O
;	O
subp	int
^=	O
1	int
;	O
n	long
+=	O
Kl	long
;	O
dif	long
-=	O
Kl	long
;	O
}	O
if	O
(	O
subp	int
)	O
cy	long
+=	O
mpn_sub	O
(	O
tmp	*(long)
,	O
tmp	*(long)
,	O
Kl	long
,	O
n	long
,	O
dif	long
)	O
;	O
else	O
cy	long
-=	O
mpn_add	O
(	O
tmp	*(long)
,	O
tmp	*(long)
,	O
Kl	long
,	O
n	long
,	O
dif	long
)	O
;	O
if	O
(	O
cy	long
>=	O
0	int
)	O
cy	long
=	O
mpn_add_1	O
(	O
tmp	*(long)
,	O
tmp	*(long)
,	O
Kl	long
,	O
cy	long
)	O
;	O
else	O
cy	long
=	O
mpn_sub_1	O
(	O
tmp	*(long)
,	O
tmp	*(long)
,	O
Kl	long
,	O
-	O
cy	long
)	O
;	O
}	O
else	O
{	O
cy	long
=	O
mpn_sub	O
(	O
tmp	*(long)
,	O
n	long
,	O
Kl	long
,	O
n	long
+	O
Kl	long
,	O
dif	long
)	O
;	O
cy	long
=	O
mpn_add_1	O
(	O
tmp	*(long)
,	O
tmp	*(long)
,	O
Kl	long
,	O
cy	long
)	O
;	O
}	O
tmp	*(long)
[	O
Kl	long
]	O
=	O
cy	long
;	O
nl	long
=	O
Kl	long
+	O
1	int
;	O
n	long
=	O
tmp	*(long)
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
K	int
;	O
i	long
++	O
)	O
{	O
Ap	*(*(long))
[	O
i	long
]	O
=	O
A	*(long)
;	O
if	O
(	O
nl	long
>	O
0	int
)	O
{	O
j	int
=	O
(	O
l	long
<=	O
nl	long
&&	O
i	long
<	O
K	int
-	O
1	int
)	O
?	O
l	long
:	O
nl	long
;	O
nl	long
-=	O
j	int
;	O
MPN_COPY	O
(	O
T	*(long)
,	O
n	long
,	O
j	int
)	O
;	O
MPN_ZERO	O
(	O
T	*(long)
+	O
j	int
,	O
nprime	int
+	O
1	int
-	O
j	int
)	O
;	O
n	long
+=	O
l	long
;	O
mpn_fft_mul_2exp_modF	(*(long),*(long),int,long)->(void)
(	O
A	*(long)
,	O
T	*(long)
,	O
i	long
*	O
Mp	int
,	O
nprime	int
)	O
;	O
}	O
else	O
MPN_ZERO	O
(	O
A	*(long)
,	O
nprime	int
+	O
1	int
)	O
;	O
A	*(long)
+=	O
nprime	int
+	O
1	int
;	O
}	O
ASSERT_ALWAYS	O
(	O
nl	long
==	O
0	int
)	O
;	O
TMP_FREE	O
;	O
}	O
static	O
mp_limb_t	long
mpn_mul_fft_internal	(*(long),long,int,*(*(long)),*(*(long)),*(long),*(long),long,long,long,*(*(int)),*(long),int)->(long)
(	O
mp_ptr	*(long)
op	*(long)
,	O
mp_size_t	long
pl	long
,	O
int	O
k	int
,	O
mp_ptr	*(long)
*	O
Ap	*(*(long))
,	O
mp_ptr	*(long)
*	O
Bp	*(*(long))
,	O
mp_ptr	*(long)
A	*(long)
,	O
mp_ptr	*(long)
B	*(long)
,	O
mp_size_t	long
nprime	int
,	O
mp_size_t	long
l	long
,	O
mp_size_t	long
Mp	int
,	O
int	O
*	O
*	O
fft_l	*(*(int))
,	O
mp_ptr	*(long)
T	*(long)
,	O
int	O
sqr	int
)	O
{	O
int	O
K	int
,	O
i	long
,	O
pla	int
,	O
lo	int
,	O
sh	int
,	O
j	int
;	O
mp_ptr	*(long)
p	*(char)
;	O
mp_limb_t	long
cc	long
;	O
K	int
=	O
1	int
<<	O
k	int
;	O
mpn_fft_fft	(*(*(long)),long,*(*(int)),long,long,long,*(long))->(void)
(	O
Ap	*(*(long))
,	O
K	int
,	O
fft_l	*(*(int))
+	O
k	int
,	O
2	int
*	O
Mp	int
,	O
nprime	int
,	O
1	int
,	O
T	*(long)
)	O
;	O
if	O
(	O
!	O
sqr	int
)	O
mpn_fft_fft	(*(*(long)),long,*(*(int)),long,long,long,*(long))->(void)
(	O
Bp	*(*(long))
,	O
K	int
,	O
fft_l	*(*(int))
+	O
k	int
,	O
2	int
*	O
Mp	int
,	O
nprime	int
,	O
1	int
,	O
T	*(long)
)	O
;	O
mpn_fft_mul_modF_K	(*(*(long)),*(*(long)),long,int)->(void)
(	O
Ap	*(*(long))
,	O
sqr	int
?	O
Ap	*(*(long))
:	O
Bp	*(*(long))
,	O
nprime	int
,	O
K	int
)	O
;	O
mpn_fft_fftinv	(*(*(long)),int,long,long,*(long))->(void)
(	O
Ap	*(*(long))
,	O
K	int
,	O
2	int
*	O
Mp	int
,	O
nprime	int
,	O
T	*(long)
)	O
;	O
Bp	*(*(long))
[	O
0	int
]	O
=	O
T	*(long)
+	O
nprime	int
+	O
1	int
;	O
mpn_fft_div_2exp_modF	(*(long),*(long),int,long)->(void)
(	O
Bp	*(*(long))
[	O
0	int
]	O
,	O
Ap	*(*(long))
[	O
0	int
]	O
,	O
k	int
,	O
nprime	int
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
K	int
;	O
i	long
++	O
)	O
{	O
Bp	*(*(long))
[	O
i	long
]	O
=	O
Ap	*(*(long))
[	O
i	long
-	O
1	int
]	O
;	O
mpn_fft_div_2exp_modF	(*(long),*(long),int,long)->(void)
(	O
Bp	*(*(long))
[	O
i	long
]	O
,	O
Ap	*(*(long))
[	O
i	long
]	O
,	O
k	int
+	O
(	O
K	int
-	O
i	long
)	O
*	O
Mp	int
,	O
nprime	int
)	O
;	O
}	O
MPN_ZERO	O
(	O
T	*(long)
,	O
nprime	int
+	O
1	int
)	O
;	O
pla	int
=	O
l	long
*	O
(	O
K	int
-	O
1	int
)	O
+	O
nprime	int
+	O
1	int
;	O
p	*(char)
=	O
B	*(long)
;	O
MPN_ZERO	O
(	O
p	*(char)
,	O
pla	int
)	O
;	O
cc	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
K	int
-	O
1	int
,	O
lo	int
=	O
l	long
*	O
i	long
+	O
nprime	int
,	O
sh	int
=	O
l	long
*	O
i	long
;	O
i	long
>=	O
0	int
;	O
i	long
--	O
,	O
lo	int
-=	O
l	long
,	O
sh	int
-=	O
l	long
)	O
{	O
mp_ptr	*(long)
n	long
=	O
p	*(char)
+	O
sh	int
;	O
j	int
=	O
(	O
K	int
-	O
i	long
)	O
&	O
(	O
K	int
-	O
1	int
)	O
;	O
if	O
(	O
mpn_add_n	O
(	O
n	long
,	O
n	long
,	O
Bp	*(*(long))
[	O
j	int
]	O
,	O
nprime	int
+	O
1	int
)	O
)	O
cc	long
+=	O
mpn_add_1	O
(	O
n	long
+	O
nprime	int
+	O
1	int
,	O
n	long
+	O
nprime	int
+	O
1	int
,	O
pla	int
-	O
sh	int
-	O
nprime	int
-	O
1	int
,	O
CNST_LIMB	O
(	O
1	int
)	O
)	O
;	O
T	*(long)
[	O
2	int
*	O
l	long
]	O
=	O
i	long
+	O
1	int
;	O
if	O
(	O
mpn_cmp	O
(	O
Bp	*(*(long))
[	O
j	int
]	O
,	O
T	*(long)
,	O
nprime	int
+	O
1	int
)	O
>	O
0	int
)	O
{	O
cc	long
-=	O
mpn_sub_1	O
(	O
n	long
,	O
n	long
,	O
pla	int
-	O
sh	int
,	O
CNST_LIMB	O
(	O
1	int
)	O
)	O
;	O
cc	long
-=	O
mpn_sub_1	O
(	O
p	*(char)
+	O
lo	int
,	O
p	*(char)
+	O
lo	int
,	O
pla	int
-	O
lo	int
,	O
CNST_LIMB	O
(	O
1	int
)	O
)	O
;	O
}	O
}	O
if	O
(	O
cc	long
==	O
-	O
CNST_LIMB	O
(	O
1	int
)	O
)	O
{	O
if	O
(	O
(	O
cc	long
=	O
mpn_add_1	O
(	O
p	*(char)
+	O
pla	int
-	O
pl	long
,	O
p	*(char)
+	O
pla	int
-	O
pl	long
,	O
pl	long
,	O
CNST_LIMB	O
(	O
1	int
)	O
)	O
)	O
)	O
{	O
mpn_sub_1	O
(	O
p	*(char)
+	O
pla	int
-	O
pl	long
-	O
1	int
,	O
p	*(char)
+	O
pla	int
-	O
pl	long
-	O
1	int
,	O
pl	long
+	O
1	int
,	O
CNST_LIMB	O
(	O
1	int
)	O
)	O
;	O
mpn_sub_1	O
(	O
p	*(char)
+	O
pla	int
-	O
1	int
,	O
p	*(char)
+	O
pla	int
-	O
1	int
,	O
1	int
,	O
CNST_LIMB	O
(	O
1	int
)	O
)	O
;	O
}	O
}	O
else	O
if	O
(	O
cc	long
==	O
1	int
)	O
{	O
if	O
(	O
pla	int
>=	O
2	int
*	O
pl	long
)	O
{	O
while	O
(	O
(	O
cc	long
=	O
mpn_add_1	O
(	O
p	*(char)
+	O
pla	int
-	O
2	int
*	O
pl	long
,	O
p	*(char)
+	O
pla	int
-	O
2	int
*	O
pl	long
,	O
2	int
*	O
pl	long
,	O
cc	long
)	O
)	O
)	O
;	O
}	O
else	O
{	O
cc	long
=	O
mpn_sub_1	O
(	O
p	*(char)
+	O
pla	int
-	O
pl	long
,	O
p	*(char)
+	O
pla	int
-	O
pl	long
,	O
pl	long
,	O
cc	long
)	O
;	O
ASSERT	O
(	O
cc	long
==	O
0	int
)	O
;	O
}	O
}	O
else	O
ASSERT	O
(	O
cc	long
==	O
0	int
)	O
;	O
return	O
mpn_fft_norm_modF	(*(long),long,*(long),long)->(int)
(	O
op	*(long)
,	O
pl	long
,	O
p	*(char)
,	O
pla	int
)	O
;	O
}	O
static	O
unsigned	O
long	O
int	O
mpn_mul_fft_lcm	(long,int)->(long)
(	O
unsigned	O
long	O
int	O
a	int
,	O
unsigned	O
int	O
k	int
)	O
{	O
unsigned	O
long	O
int	O
l	long
=	O
k	int
;	O
while	O
(	O
a	int
%	O
2	int
==	O
0	int
&&	O
k	int
>	O
0	int
)	O
{	O
a	int
>>=	O
1	int
;	O
k	int
--	O
;	O
}	O
return	O
a	int
<<	O
l	long
;	O
}	O
mp_limb_t	long
mpn_mul_fft	O
(	O
mp_ptr	*(long)
op	*(long)
,	O
mp_size_t	long
pl	long
,	O
mp_srcptr	*(long)
n	long
,	O
mp_size_t	long
nl	long
,	O
mp_srcptr	*(long)
m	long
,	O
mp_size_t	long
ml	long
,	O
int	O
k	int
)	O
{	O
int	O
K	int
,	O
maxLK	int
,	O
i	long
;	O
mp_size_t	long
N	long
,	O
Nprime	long
,	O
nprime	int
,	O
M	long
,	O
Mp	int
,	O
l	long
;	O
mp_ptr	*(long)
*	O
Ap	*(*(long))
,	O
*	O
Bp	*(*(long))
,	O
A	*(long)
,	O
T	*(long)
,	O
B	*(long)
;	O
int	O
*	O
*	O
fft_l	*(*(int))
;	O
int	O
sqr	int
=	O
(	O
n	long
==	O
m	long
&&	O
nl	long
==	O
ml	long
)	O
;	O
mp_limb_t	long
h	long
;	O
TMP_DECL	O
;	O
TRACE	O
(	O
printf	O
(	O
"\nmpn_mul_fft pl=%ld nl=%ld ml=%ld k=%d\n"	*(char)
,	O
pl	long
,	O
nl	long
,	O
ml	long
,	O
k	int
)	O
)	O
;	O
ASSERT_ALWAYS	O
(	O
mpn_fft_next_size	O
(	O
pl	long
,	O
k	int
)	O
==	O
pl	long
)	O
;	O
TMP_MARK	O
;	O
N	long
=	O
pl	long
*	O
GMP_NUMB_BITS	O
;	O
fft_l	*(*(int))
=	O
TMP_ALLOC_TYPE	O
(	O
k	int
+	O
1	int
,	O
int	O
*	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<=	O
k	int
;	O
i	long
++	O
)	O
fft_l	*(*(int))
[	O
i	long
]	O
=	O
TMP_ALLOC_TYPE	O
(	O
1	int
<<	O
i	long
,	O
int	O
)	O
;	O
mpn_fft_initl	(*(*(int)),int)->(void)
(	O
fft_l	*(*(int))
,	O
k	int
)	O
;	O
K	int
=	O
1	int
<<	O
k	int
;	O
M	long
=	O
N	long
>>	O
k	int
;	O
l	long
=	O
1	int
+	O
(	O
M	long
-	O
1	int
)	O
/	O
GMP_NUMB_BITS	O
;	O
maxLK	int
=	O
mpn_mul_fft_lcm	(long,int)->(long)
(	O
(	O
unsigned	O
long	O
)	O
GMP_NUMB_BITS	O
,	O
k	int
)	O
;	O
Nprime	long
=	O
(	O
1	int
+	O
(	O
2	int
*	O
M	long
+	O
k	int
+	O
2	int
)	O
/	O
maxLK	int
)	O
*	O
maxLK	int
;	O
nprime	int
=	O
Nprime	long
/	O
GMP_NUMB_BITS	O
;	O
TRACE	O
(	O
printf	O
(	O
"N=%ld K=%d, M=%ld, l=%ld, maxLK=%d, Np=%ld, np=%ld\n"	*(char)
,	O
N	long
,	O
K	int
,	O
M	long
,	O
l	long
,	O
maxLK	int
,	O
Nprime	long
,	O
nprime	int
)	O
)	O
;	O
if	O
(	O
nprime	int
>=	O
(	O
sqr	int
?	O
SQR_FFT_MODF_THRESHOLD	int
:	O
MUL_FFT_MODF_THRESHOLD	int
)	O
)	O
{	O
unsigned	O
long	O
K2	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
K2	int
=	O
1L	int
<<	O
mpn_fft_best_k	O
(	O
nprime	int
,	O
sqr	int
)	O
;	O
if	O
(	O
(	O
nprime	int
&	O
(	O
K2	int
-	O
1	int
)	O
)	O
==	O
0	int
)	O
break	O
;	O
nprime	int
=	O
(	O
nprime	int
+	O
K2	int
-	O
1	int
)	O
&	O
-	O
K2	int
;	O
Nprime	long
=	O
nprime	int
*	O
GMP_LIMB_BITS	int
;	O
}	O
TRACE	O
(	O
printf	O
(	O
"new maxLK=%d, Np=%ld, np=%ld\n"	*(char)
,	O
maxLK	int
,	O
Nprime	long
,	O
nprime	int
)	O
)	O
;	O
}	O
ASSERT_ALWAYS	O
(	O
nprime	int
<	O
pl	long
)	O
;	O
T	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
2	int
*	O
(	O
nprime	int
+	O
1	int
)	O
)	O
;	O
Mp	int
=	O
Nprime	long
>>	O
k	int
;	O
TRACE	O
(	O
printf	O
(	O
"%ldx%ld limbs -> %d times %ldx%ld limbs (%1.2f)\n"	*(char)
,	O
pl	long
,	O
pl	long
,	O
K	int
,	O
nprime	int
,	O
nprime	int
,	O
2.0	int
*	O
(	O
double	O
)	O
N	long
/	O
Nprime	long
/	O
K	int
)	O
;	O
printf	O
(	O
"   temp space %ld\n"	*(char)
,	O
2	int
*	O
K	int
*	O
(	O
nprime	int
+	O
1	int
)	O
)	O
)	O
;	O
A	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
K	int
*	O
(	O
nprime	int
+	O
1	int
)	O
)	O
;	O
Ap	*(*(long))
=	O
TMP_ALLOC_MP_PTRS	O
(	O
K	int
)	O
;	O
mpn_mul_fft_decompose	(*(long),*(*(long)),int,int,*(long),long,int,int,*(long))->(void)
(	O
A	*(long)
,	O
Ap	*(*(long))
,	O
K	int
,	O
nprime	int
,	O
n	long
,	O
nl	long
,	O
l	long
,	O
Mp	int
,	O
T	*(long)
)	O
;	O
if	O
(	O
sqr	int
)	O
{	O
mp_size_t	long
pla	int
;	O
pla	int
=	O
l	long
*	O
(	O
K	int
-	O
1	int
)	O
+	O
nprime	int
+	O
1	int
;	O
B	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
pla	int
)	O
;	O
Bp	*(*(long))
=	O
TMP_ALLOC_MP_PTRS	O
(	O
K	int
)	O
;	O
}	O
else	O
{	O
B	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
K	int
*	O
(	O
nprime	int
+	O
1	int
)	O
)	O
;	O
Bp	*(*(long))
=	O
TMP_ALLOC_MP_PTRS	O
(	O
K	int
)	O
;	O
mpn_mul_fft_decompose	(*(long),*(*(long)),int,int,*(long),long,int,int,*(long))->(void)
(	O
B	*(long)
,	O
Bp	*(*(long))
,	O
K	int
,	O
nprime	int
,	O
m	long
,	O
ml	long
,	O
l	long
,	O
Mp	int
,	O
T	*(long)
)	O
;	O
}	O
h	long
=	O
mpn_mul_fft_internal	(*(long),long,int,*(*(long)),*(*(long)),*(long),*(long),long,long,long,*(*(int)),*(long),int)->(long)
(	O
op	*(long)
,	O
pl	long
,	O
k	int
,	O
Ap	*(*(long))
,	O
Bp	*(*(long))
,	O
A	*(long)
,	O
B	*(long)
,	O
nprime	int
,	O
l	long
,	O
Mp	int
,	O
fft_l	*(*(int))
,	O
T	*(long)
,	O
sqr	int
)	O
;	O
TMP_FREE	O
;	O
return	O
h	long
;	O
}	O
