static	O
const	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
*	O
active_list	*(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
=	O
0	int
;	O
static	O
int	O
active_size	int
=	O
0	int
;	O
static	O
int	O
active_len	int
=	O
0	int
;	O
static	O
int	O
active_ptr	int
=	O
0	int
;	O
static	O
int	O
active_ndx	int
=	O
0	int
;	O
void	O
clear_active_list	()->(void)
(	O
void	O
)	O
{	O
disable_interrupts	()->(void)
(	O
)	O
;	O
if	O
(	O
active_list	*(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
)	O
free	(*(void))->(void)
(	O
active_list	*(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
)	O
;	O
active_list	*(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
=	O
0	int
;	O
active_size	int
=	O
active_len	int
=	O
active_ptr	int
=	O
active_ndx	int
=	O
0	int
;	O
enable_interrupts	()->(void)
(	O
)	O
;	O
}	O
const	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
next_active_node	()->(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
(	O
void	O
)	O
{	O
while	O
(	O
active_ptr	int
<	O
active_len	int
&&	O
!	O
active_list	*(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
[	O
active_ptr	int
]	O
)	O
++	O
active_ptr	int
;	O
return	O
(	O
active_ptr	int
<	O
active_len	int
)	O
?	O
active_list	*(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
[	O
active_ptr	int
++	O
]	O
:	O
0	int
;	O
}	O
char	O
set_active_node	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(char)
(	O
const	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
{	O
disable_interrupts	()->(void)
(	O
)	O
;	O
if	O
(	O
!	O
resize_line_buffer	(*(*(*(struct(*`,*`,long,int)))),*(int),int)->(char)
(	O
&	O
active_list	*(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
,	O
&	O
active_size	int
,	O
(	O
active_len	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
*	O
)	O
)	O
)	O
{	O
show_strerror	(*(char),int)->(void)
(	O
0	int
,	O
errno	O
)	O
;	O
set_error_msg	(*(char))->(void)
(	O
"Memory exhausted"	*(char)
)	O
;	O
enable_interrupts	()->(void)
(	O
)	O
;	O
return	O
0	int
;	O
}	O
enable_interrupts	()->(void)
(	O
)	O
;	O
active_list	*(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
[	O
active_len	int
++	O
]	O
=	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
;	O
return	O
1	int
;	O
}	O
void	O
unset_active_nodes	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(void)
(	O
const	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
np	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
,	O
const	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
mp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
{	O
const	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
np	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
;	O
while	O
(	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
!=	O
mp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
{	O
int	O
i	*(int)
;	O
for	O
(	O
i	*(int)
=	O
0	int
;	O
i	*(int)
<	O
active_len	int
;	O
++	O
i	*(int)
)	O
{	O
if	O
(	O
++	O
active_ndx	int
>=	O
active_len	int
)	O
active_ndx	int
=	O
0	int
;	O
if	O
(	O
active_list	*(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
[	O
active_ndx	int
]	O
==	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
{	O
active_list	*(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
[	O
active_ndx	int
]	O
=	O
0	int
;	O
break	O
;	O
}	O
}	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
q_forw	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
;	O
}	O
}	O
