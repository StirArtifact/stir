GEN	O
gnil	int
,	O
gzero	O
,	O
gun	O
,	O
gdeux	O
,	O
ghalf	O
,	O
gi	O
;	O
plong	int
lontyp	array(int)
[	O
30	int
]	O
=	O
{	O
0	int
,	O
0x10000	int
,	O
0x10000	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
2	int
,	O
1	int
,	O
0	int
,	O
2	int
,	O
2	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
}	O
;	O
unsigned	O
plong	int
hiremainder	O
,	O
overflow	O
;	O
char	O
initial_pari_stack	array(char)
[	O
400	int
]	O
;	O
our_ulong	O
bot	int
=	O
(	O
our_ulong	O
)	O
initial_pari_stack	array(char)
;	O
our_ulong	O
top	int
=	O
(	O
our_ulong	O
)	O
(	O
initial_pari_stack	array(char)
+	O
INITIAL_PARI_STACK	int
)	O
;	O
our_ulong	O
avma	int
=	O
0	int
;	O
void	O
err	(int)->(void)
(	O
s	int
)	O
int	O
s	int
;	O
{	O
switch	O
(	O
s	int
)	O
{	O
case	O
errpile	O
:	O
FEerror	()->(int)
(	O
"Out of bignum stack space, (si::MULTIPLY-BIGNUM-STACK n) to grow"	*(char)
,	O
0	int
)	O
;	O
case	O
dvmer1	O
:	O
case	O
diver4	O
:	O
case	O
diver2	O
:	O
case	O
diver1	O
:	O
FEerror	()->(int)
(	O
"Divide by zero"	*(char)
,	O
0	int
)	O
;	O
case	O
muler1	O
:	O
FEerror	()->(int)
(	O
"Multiply overflow"	*(char)
,	O
0	int
)	O
;	O
case	O
moder1	O
:	O
FEerror	()->(int)
(	O
"Mod by 0"	*(char)
,	O
0	int
)	O
;	O
default	O
:	O
FEerror	()->(int)
(	O
"Integer Arithmetic error"	*(char)
,	O
0	int
)	O
;	O
}	O
}	O
multiply_bignum_stack	(int)->(int)
(	O
n	int
)	O
int	O
n	int
;	O
{	O
int	O
parisize	int
=	O
n	int
*	O
(	O
top	int
-	O
bot	int
)	O
;	O
in_saved_avma	O
=	O
0	int
;	O
if	O
(	O
n	int
>	O
1	int
)	O
{	O
if	O
(	O
bot	int
!=	O
(	O
our_ulong	O
)	O
initial_pari_stack	array(char)
)	O
free	()->(int)
(	O
bot	int
)	O
;	O
set_pari_stack	()->(int)
(	O
parisize	int
)	O
;	O
}	O
return	O
parisize	int
;	O
}	O
set_pari_stack	()->(int)
(	O
parisize	int
)	O
int	O
parisize	int
;	O
{	O
bot	int
=	O
(	O
plong	int
)	O
malloc	O
(	O
parisize	int
)	O
;	O
top	int
=	O
avma	int
=	O
bot	int
+	O
parisize	int
;	O
}	O
static	O
init_pari	()->(int)
(	O
)	O
{	O
if	O
(	O
avma	int
==	O
0	int
)	O
{	O
make_si_sfun	()->(int)
(	O
"MULTIPLY-BIGNUM-STACK"	*(char)
,	O
multiply_bignum_stack	(int)->(int)
,	O
ARGTYPE1	()->(int)
(	O
f_fixnum	O
)	O
|	O
RESTYPE	()->(int)
(	O
f_fixnum	O
)	O
)	O
;	O
avma	int
=	O
top	int
;	O
}	O
gnil	int
=	O
cgeti	()->(int)
(	O
2	int
)	O
;	O
gnil	int
[	O
1	int
]	O
=	O
2	int
;	O
setpere	()->(int)
(	O
gnil	int
,	O
255	int
)	O
;	O
gzero	O
=	O
cgeti	()->(int)
(	O
2	int
)	O
;	O
gzero	O
[	O
1	int
]	O
=	O
2	int
;	O
setpere	()->(int)
(	O
gzero	O
,	O
255	int
)	O
;	O
gun	O
=	O
stoi	()->(int)
(	O
1	int
)	O
;	O
setpere	()->(int)
(	O
gun	O
,	O
255	int
)	O
;	O
gdeux	O
=	O
stoi	()->(int)
(	O
2	int
)	O
;	O
setpere	()->(int)
(	O
gdeux	O
,	O
255	int
)	O
;	O
ghalf	O
=	O
cgetg	()->(int)
(	O
3	int
,	O
4	int
)	O
;	O
ghalf	O
[	O
1	int
]	O
=	O
un	O
;	O
ghalf	O
[	O
2	int
]	O
=	O
deux	O
;	O
setpere	()->(int)
(	O
ghalf	O
,	O
255	int
)	O
;	O
gi	O
=	O
cgetg	()->(int)
(	O
3	int
,	O
6	int
)	O
;	O
gi	O
[	O
1	int
]	O
=	O
zero	O
;	O
gi	O
[	O
2	int
]	O
=	O
un	O
;	O
setpere	()->(int)
(	O
gi	O
,	O
255	int
)	O
;	O
}	O
