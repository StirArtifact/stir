struct	O
safety_check_closure	struct(int,*(int))
{	O
int	O
defval	int
;	O
int	O
*	O
data	*(void)
;	O
}	O
;	O
static	O
int	O
cb_safety_checks	(*(char),*(void))->(int)
(	O
const	O
char	O
*	O
name	*(char)
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
safety_check_closure	struct(int,*(int))
*	O
cp	*(struct(int,int,array(char),array(char)))
=	O
data	*(void)
;	O
if	O
(	O
mu_file_safety_compose	(*(int),*(char),int)->(int)
(	O
cp	*(struct(int,int,array(char),array(char)))
->	O
data	*(void)
,	O
name	*(char)
,	O
cp	*(struct(int,int,array(char),array(char)))
->	O
defval	int
)	O
)	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"unknown keyword: %s"	*(char)
)	O
,	O
name	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
cb_cert_safety_checks	(*(void),*(struct(int,union(*(struct`),*(char),struct(long,*`)))))->(int)
(	O
void	O
*	O
data	*(void)
,	O
mu_config_value_t	struct
*	O
arg	*(char)
)	O
{	O
struct	O
safety_check_closure	struct(int,*(int))
clos	struct(int,*(int))
;	O
clos	struct(int,*(int))
.	O
defval	int
=	O
MU_TLS_CERT_FILE_CHECKS	O
;	O
clos	struct(int,*(int))
.	O
data	*(void)
=	O
data	*(void)
;	O
return	O
mu_cfg_string_value_cb	(*(struct(int,union(*(struct`),*(char),struct(long,*`)))),*((*(char),*(void))->(int)),*(void))->(int)
(	O
arg	*(char)
,	O
cb_safety_checks	(*(char),*(void))->(int)
,	O
&	O
clos	struct(int,*(int))
)	O
;	O
}	O
static	O
int	O
cb_key_safety_checks	(*(void),*(struct(int,union(*(struct`),*(char),struct(long,*`)))))->(int)
(	O
void	O
*	O
data	*(void)
,	O
mu_config_value_t	struct
*	O
arg	*(char)
)	O
{	O
struct	O
safety_check_closure	struct(int,*(int))
clos	struct(int,*(int))
;	O
clos	struct(int,*(int))
.	O
defval	int
=	O
MU_TLS_KEY_FILE_CHECKS	O
;	O
clos	struct(int,*(int))
.	O
data	*(void)
=	O
data	*(void)
;	O
return	O
mu_cfg_string_value_cb	(*(struct(int,union(*(struct`),*(char),struct(long,*`)))),*((*(char),*(void))->(int)),*(void))->(int)
(	O
arg	*(char)
,	O
cb_safety_checks	(*(char),*(void))->(int)
,	O
&	O
clos	struct(int,*(int))
)	O
;	O
}	O
static	O
int	O
cb_ca_safety_checks	(*(void),*(struct(int,union(*(struct`),*(char),struct(long,*`)))))->(int)
(	O
void	O
*	O
data	*(void)
,	O
mu_config_value_t	struct
*	O
arg	*(char)
)	O
{	O
struct	O
safety_check_closure	struct(int,*(int))
clos	struct(int,*(int))
;	O
clos	struct(int,*(int))
.	O
defval	int
=	O
MU_TLS_CA_FILE_CHECKS	O
;	O
clos	struct(int,*(int))
.	O
data	*(void)
=	O
data	*(void)
;	O
return	O
mu_cfg_string_value_cb	(*(struct(int,union(*(struct`),*(char),struct(long,*`)))),*((*(char),*(void))->(int)),*(void))->(int)
(	O
arg	*(char)
,	O
cb_safety_checks	(*(char),*(void))->(int)
,	O
&	O
clos	struct(int,*(int))
)	O
;	O
}	O
static	O
struct	O
mu_cfg_param	struct(*(char),int,*(void),long,*((*(void),*(struct(int,union(*`,*`,struct`))))->(int)),*(char),*(char))
mu_tls_global_param	array(struct(*(char),int,*(void),long,*((*(void),*(struct(int,union`)))->(int)),*(char),*(char)))
[	O
]	O
=	O
{	O
{	O
"key-file"	*(char)
,	O
mu_cfg_callback	int
,	O
&	O
mu_tls_key_file_checks	int
,	O
0	int
,	O
cb_key_safety_checks	(*(void),*(struct(int,union(*(struct`),*(char),struct(long,*`)))))->(int)
,	O
N_	O
(	O
"Configure safety checks for SSL key file.  Argument is a list or "	*(char)
"sequence of check names optionally prefixed with '+' to enable or "	*(char)
"'-' to disable the corresponding check.  Valid check names are:\n"	*(char)
"\n"	*(char)
"  none          disable all checks\n"	*(char)
"  all           enable all checks\n"	*(char)
"  gwrfil        forbid group writable files\n"	*(char)
"  awrfil        forbid world writable files\n"	*(char)
"  grdfil        forbid group readable files\n"	*(char)
"  ardfil        forbid world writable files\n"	*(char)
"  linkwrdir     forbid symbolic links in group or world writable directories\n"	*(char)
"  gwrdir        forbid files in group writable directories\n"	*(char)
"  awrdir        forbid files in world writable directories\n"	*(char)
)	O
,	O
N_	O
(	O
"arg: list"	*(char)
)	O
}	O
,	O
{	O
"cert-file"	*(char)
,	O
mu_cfg_callback	int
,	O
&	O
mu_tls_cert_file_checks	int
,	O
0	int
,	O
cb_cert_safety_checks	(*(void),*(struct(int,union(*(struct`),*(char),struct(long,*`)))))->(int)
,	O
N_	O
(	O
"Configure safety checks for SSL certificate.  See above for a description of <arg>."	*(char)
)	O
,	O
N_	O
(	O
"arg: list"	*(char)
)	O
}	O
,	O
{	O
"ca-file"	*(char)
,	O
mu_cfg_callback	int
,	O
&	O
mu_tls_ca_file_checks	int
,	O
0	int
,	O
cb_ca_safety_checks	(*(void),*(struct(int,union(*(struct`),*(char),struct(long,*`)))))->(int)
,	O
N_	O
(	O
"Configure safety checks for SSL certificate authority file.  See above for a description of <arg>."	*(char)
)	O
,	O
N_	O
(	O
"arg: list"	*(char)
)	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
struct	O
mu_cfg_param	struct(*(char),int,*(void),long,*((*(void),*(struct(int,union(*`,*`,struct`))))->(int)),*(char),*(char))
tls_canned_param	array(struct(*(char),int,*(void),long,*((*(void),*(struct(int,union`)))->(int)),*(char),*(char)))
[	O
]	O
=	O
{	O
{	O
"ssl-certificate-file"	*(char)
,	O
mu_c_string	int
,	O
NULL	O
,	O
mu_offsetof	O
(	O
struct	O
mu_tls_config	struct(*(char),*(char),*(char),*(char))
,	O
cert_file	*(char)
)	O
,	O
NULL	O
,	O
N_	O
(	O
"Specify SSL certificate file."	*(char)
)	O
,	O
N_	O
(	O
"file"	*(char)
)	O
}	O
,	O
{	O
"ssl-key-file"	*(char)
,	O
mu_c_string	int
,	O
NULL	O
,	O
mu_offsetof	O
(	O
struct	O
mu_tls_config	struct(*(char),*(char),*(char),*(char))
,	O
key_file	*(char)
)	O
,	O
NULL	O
,	O
N_	O
(	O
"Specify SSL certificate key file."	*(char)
)	O
,	O
N_	O
(	O
"file"	*(char)
)	O
}	O
,	O
{	O
"ssl-ca-file"	*(char)
,	O
mu_c_string	int
,	O
NULL	O
,	O
mu_offsetof	O
(	O
struct	O
mu_tls_config	struct(*(char),*(char),*(char),*(char))
,	O
ca_file	*(char)
)	O
,	O
NULL	O
,	O
N_	O
(	O
"Specify trusted CAs file."	*(char)
)	O
,	O
N_	O
(	O
"file"	*(char)
)	O
}	O
,	O
{	O
"ssl-priorities"	*(char)
,	O
mu_c_string	int
,	O
NULL	O
,	O
mu_offsetof	O
(	O
struct	O
mu_tls_config	struct(*(char),*(char),*(char),*(char))
,	O
priorities	*(char)
)	O
,	O
NULL	O
,	O
N_	O
(	O
"Set the priorities to use on the ciphers, key exchange methods, "	*(char)
"macs and compression methods."	*(char)
)	O
,	O
NULL	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
void	O
mu_tls_cfg_init	()->(void)
(	O
void	O
)	O
{	O
struct	O
mu_cfg_section	int
*	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
;	O
if	O
(	O
mu_create_canned_section	(*(char),*(*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct`),*(char),*(void)))))->(int)
(	O
"tls"	*(char)
,	O
&	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
->	O
docstring	*(char)
=	O
N_	O
(	O
"Configure TLS"	*(char)
)	O
;	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
->	O
label	*(struct(int,union(*(struct),*(char),struct(long,*(struct`)))))
=	O
NULL	O
;	O
mu_cfg_section_add_params	(*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct),*(char),*(void))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))))->(int)
(	O
section	struct(*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(void),long,*(struct),*(char),*(void))
,	O
tls_canned_param	array(struct(*(char),int,*(void),long,*((*(void),*(struct(int,union`)))->(int)),*(char),*(char)))
)	O
;	O
}	O
struct	O
mu_auth_module	struct(*(char),array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int))),array(*(void)),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct`),*(struct`),*(char))->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))),*((enum(int,int),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`))),*(char),*(*(void)),*(void),*(struct(*(struct`),*(struct`))))->(int)),*((*(void))->(void)))
mu_auth_tls_module	struct(*(char),array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int))),array(*(void)),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*((*(void))->(void)))
=	O
{	O
.	O
name	*(char)
=	O
"tls-file-checks"	*(char)
,	O
.	O
cfg	*(struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char)))
=	O
mu_tls_global_param	array(struct(*(char),int,*(void),long,*((*(void),*(struct(int,union`)))->(int)),*(char),*(char)))
,	O
}	O
;	O
