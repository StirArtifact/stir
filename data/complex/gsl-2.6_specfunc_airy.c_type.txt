static	O
double	O
am21_data	array(double)
[	O
37	int
]	O
=	O
{	O
0.0065809191761485	int
,	O
0.0023675984685722	int
,	O
0.0001324741670371	int
,	O
0.0000157600904043	int
,	O
0.0000027529702663	int
,	O
0.0000006102679017	int
,	O
0.0000001595088468	int
,	O
0.0000000471033947	int
,	O
0.0000000152933871	int
,	O
0.0000000053590722	int
,	O
0.0000000020000910	int
,	O
0.0000000007872292	int
,	O
0.0000000003243103	int
,	O
0.0000000001390106	int
,	O
0.0000000000617011	int
,	O
0.0000000000282491	int
,	O
0.0000000000132979	int
,	O
0.0000000000064188	int
,	O
0.0000000000031697	int
,	O
0.0000000000015981	int
,	O
0.0000000000008213	int
,	O
0.0000000000004296	int
,	O
0.0000000000002284	int
,	O
0.0000000000001232	int
,	O
0.0000000000000675	int
,	O
0.0000000000000374	int
,	O
0.0000000000000210	int
,	O
0.0000000000000119	int
,	O
0.0000000000000068	int
,	O
0.0000000000000039	int
,	O
0.0000000000000023	int
,	O
0.0000000000000013	int
,	O
0.0000000000000008	int
,	O
0.0000000000000005	int
,	O
0.0000000000000003	int
,	O
0.0000000000000001	int
,	O
0.0000000000000001	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
am21_cs	struct(*(double),int,double,double,int)
=	O
{	O
am21_data	array(double)
,	O
36	int
,	O
-	O
1	int
,	O
1	int
,	O
20	int
}	O
;	O
static	O
double	O
ath1_data	array(double)
[	O
36	int
]	O
=	O
{	O
-	O
0.07125837815669365	int
,	O
-	O
0.00590471979831451	int
,	O
-	O
0.00012114544069499	int
,	O
-	O
0.00000988608542270	int
,	O
-	O
0.00000138084097352	int
,	O
-	O
0.00000026142640172	int
,	O
-	O
0.00000006050432589	int
,	O
-	O
0.00000001618436223	int
,	O
-	O
0.00000000483464911	int
,	O
-	O
0.00000000157655272	int
,	O
-	O
0.00000000055231518	int
,	O
-	O
0.00000000020545441	int
,	O
-	O
0.00000000008043412	int
,	O
-	O
0.00000000003291252	int
,	O
-	O
0.00000000001399875	int
,	O
-	O
0.00000000000616151	int
,	O
-	O
0.00000000000279614	int
,	O
-	O
0.00000000000130428	int
,	O
-	O
0.00000000000062373	int
,	O
-	O
0.00000000000030512	int
,	O
-	O
0.00000000000015239	int
,	O
-	O
0.00000000000007758	int
,	O
-	O
0.00000000000004020	int
,	O
-	O
0.00000000000002117	int
,	O
-	O
0.00000000000001132	int
,	O
-	O
0.00000000000000614	int
,	O
-	O
0.00000000000000337	int
,	O
-	O
0.00000000000000188	int
,	O
-	O
0.00000000000000105	int
,	O
-	O
0.00000000000000060	int
,	O
-	O
0.00000000000000034	int
,	O
-	O
0.00000000000000020	int
,	O
-	O
0.00000000000000011	int
,	O
-	O
0.00000000000000007	int
,	O
-	O
0.00000000000000004	int
,	O
-	O
0.00000000000000002	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
ath1_cs	struct(*(double),int,double,double,int)
=	O
{	O
ath1_data	array(double)
,	O
35	int
,	O
-	O
1	int
,	O
1	int
,	O
15	int
}	O
;	O
static	O
double	O
am22_data	array(double)
[	O
33	int
]	O
=	O
{	O
-	O
0.01562844480625341	int
,	O
0.00778336445239681	int
,	O
0.00086705777047718	int
,	O
0.00015696627315611	int
,	O
0.00003563962571432	int
,	O
0.00000924598335425	int
,	O
0.00000262110161850	int
,	O
0.00000079188221651	int
,	O
0.00000025104152792	int
,	O
0.00000008265223206	int
,	O
0.00000002805711662	int
,	O
0.00000000976821090	int
,	O
0.00000000347407923	int
,	O
0.00000000125828132	int
,	O
0.00000000046298826	int
,	O
0.00000000017272825	int
,	O
0.00000000006523192	int
,	O
0.00000000002490471	int
,	O
0.00000000000960156	int
,	O
0.00000000000373448	int
,	O
0.00000000000146417	int
,	O
0.00000000000057826	int
,	O
0.00000000000022991	int
,	O
0.00000000000009197	int
,	O
0.00000000000003700	int
,	O
0.00000000000001496	int
,	O
0.00000000000000608	int
,	O
0.00000000000000248	int
,	O
0.00000000000000101	int
,	O
0.00000000000000041	int
,	O
0.00000000000000017	int
,	O
0.00000000000000007	int
,	O
0.00000000000000002	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
am22_cs	struct(*(double),int,double,double,int)
=	O
{	O
am22_data	array(double)
,	O
32	int
,	O
-	O
1	int
,	O
1	int
,	O
15	int
}	O
;	O
static	O
double	O
ath2_data	array(double)
[	O
32	int
]	O
=	O
{	O
0.00440527345871877	int
,	O
-	O
0.03042919452318455	int
,	O
-	O
0.00138565328377179	int
,	O
-	O
0.00018044439089549	int
,	O
-	O
0.00003380847108327	int
,	O
-	O
0.00000767818353522	int
,	O
-	O
0.00000196783944371	int
,	O
-	O
0.00000054837271158	int
,	O
-	O
0.00000016254615505	int
,	O
-	O
0.00000005053049981	int
,	O
-	O
0.00000001631580701	int
,	O
-	O
0.00000000543420411	int
,	O
-	O
0.00000000185739855	int
,	O
-	O
0.00000000064895120	int
,	O
-	O
0.00000000023105948	int
,	O
-	O
0.00000000008363282	int
,	O
-	O
0.00000000003071196	int
,	O
-	O
0.00000000001142367	int
,	O
-	O
0.00000000000429811	int
,	O
-	O
0.00000000000163389	int
,	O
-	O
0.00000000000062693	int
,	O
-	O
0.00000000000024260	int
,	O
-	O
0.00000000000009461	int
,	O
-	O
0.00000000000003716	int
,	O
-	O
0.00000000000001469	int
,	O
-	O
0.00000000000000584	int
,	O
-	O
0.00000000000000233	int
,	O
-	O
0.00000000000000093	int
,	O
-	O
0.00000000000000037	int
,	O
-	O
0.00000000000000015	int
,	O
-	O
0.00000000000000006	int
,	O
-	O
0.00000000000000002	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
ath2_cs	struct(*(double),int,double,double,int)
=	O
{	O
ath2_data	array(double)
,	O
31	int
,	O
-	O
1	int
,	O
1	int
,	O
16	int
}	O
;	O
static	O
int	O
airy_mod_phase	(double,int,*(struct(double,double)),*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
gsl_mode_t	int
mode	int
,	O
gsl_sf_result	struct(double,double)
*	O
mod	*(struct(double,double))
,	O
gsl_sf_result	struct(double,double)
*	O
phase	*(struct(double,double))
)	O
{	O
gsl_sf_result	struct(double,double)
result_m	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
result_p	struct(double,double)
;	O
double	O
m	double
,	O
p	double
;	O
double	O
sqx	double
;	O
if	O
(	O
x	double
<	O
-	O
2.0	int
)	O
{	O
double	O
z	double
=	O
16.0	int
/	O
(	O
x	double
*	O
x	double
*	O
x	double
)	O
+	O
1.0	int
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
am21_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
mode	int
,	O
&	O
result_m	struct(double,double)
)	O
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
ath1_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
mode	int
,	O
&	O
result_p	struct(double,double)
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<=	O
-	O
1.0	int
)	O
{	O
double	O
z	double
=	O
(	O
16.0	int
/	O
(	O
x	double
*	O
x	double
*	O
x	double
)	O
+	O
9.0	int
)	O
/	O
7.0	int
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
am22_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
mode	int
,	O
&	O
result_m	struct(double,double)
)	O
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
ath2_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
mode	int
,	O
&	O
result_p	struct(double,double)
)	O
;	O
}	O
else	O
{	O
mod	*(struct(double,double))
->	O
val	double
=	O
0.0	int
;	O
mod	*(struct(double,double))
->	O
err	double
=	O
0.0	int
;	O
phase	*(struct(double,double))
->	O
val	double
=	O
0.0	int
;	O
phase	*(struct(double,double))
->	O
err	double
=	O
0.0	int
;	O
GSL_ERROR	O
(	O
"x is greater than 1.0"	*(char)
,	O
GSL_EDOM	int
)	O
;	O
}	O
m	double
=	O
0.3125	int
+	O
result_m	struct(double,double)
.	O
val	double
;	O
p	double
=	O
-	O
0.625	int
+	O
result_p	struct(double,double)
.	O
val	double
;	O
sqx	double
=	O
sqrt	(double)->(double)
(	O
-	O
x	double
)	O
;	O
mod	*(struct(double,double))
->	O
val	double
=	O
sqrt	(double)->(double)
(	O
m	double
/	O
sqx	double
)	O
;	O
mod	*(struct(double,double))
->	O
err	double
=	O
fabs	(double)->(double)
(	O
mod	*(struct(double,double))
->	O
val	double
)	O
*	O
(	O
GSL_DBL_EPSILON	int
+	O
fabs	(double)->(double)
(	O
result_m	struct(double,double)
.	O
err	double
/	O
result_m	struct(double,double)
.	O
val	double
)	O
)	O
;	O
phase	*(struct(double,double))
->	O
val	double
=	O
M_PI_4	int
-	O
x	double
*	O
sqx	double
*	O
p	double
;	O
phase	*(struct(double,double))
->	O
err	double
=	O
fabs	(double)->(double)
(	O
phase	*(struct(double,double))
->	O
val	double
)	O
*	O
(	O
GSL_DBL_EPSILON	int
+	O
fabs	(double)->(double)
(	O
result_p	struct(double,double)
.	O
err	double
/	O
result_p	struct(double,double)
.	O
val	double
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
double	O
ai_data_f	array(double)
[	O
9	int
]	O
=	O
{	O
-	O
0.03797135849666999750	int
,	O
0.05919188853726363857	int
,	O
0.00098629280577279975	int
,	O
0.00000684884381907656	int
,	O
0.00000002594202596219	int
,	O
0.00000000006176612774	int
,	O
0.00000000000010092454	int
,	O
0.00000000000000012014	int
,	O
0.00000000000000000010	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
aif_cs	struct(*(double),int,double,double,int)
=	O
{	O
ai_data_f	array(double)
,	O
8	int
,	O
-	O
1	int
,	O
1	int
,	O
8	int
}	O
;	O
static	O
double	O
ai_data_g	array(double)
[	O
8	int
]	O
=	O
{	O
0.01815236558116127	int
,	O
0.02157256316601076	int
,	O
0.00025678356987483	int
,	O
0.00000142652141197	int
,	O
0.00000000457211492	int
,	O
0.00000000000952517	int
,	O
0.00000000000001392	int
,	O
0.00000000000000001	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
aig_cs	struct(*(double),int,double,double,int)
=	O
{	O
ai_data_g	array(double)
,	O
7	int
,	O
-	O
1	int
,	O
1	int
,	O
7	int
}	O
;	O
static	O
double	O
data_bif	array(double)
[	O
9	int
]	O
=	O
{	O
-	O
0.01673021647198664948	int
,	O
0.10252335834249445610	int
,	O
0.00170830925073815165	int
,	O
0.00001186254546774468	int
,	O
0.00000004493290701779	int
,	O
0.00000000010698207143	int
,	O
0.00000000000017480643	int
,	O
0.00000000000000020810	int
,	O
0.00000000000000000018	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
bif_cs	struct(*(double),int,double,double,int)
=	O
{	O
data_bif	array(double)
,	O
8	int
,	O
-	O
1	int
,	O
1	int
,	O
8	int
}	O
;	O
static	O
double	O
data_big	array(double)
[	O
8	int
]	O
=	O
{	O
0.02246622324857452	int
,	O
0.03736477545301955	int
,	O
0.00044476218957212	int
,	O
0.00000247080756363	int
,	O
0.00000000791913533	int
,	O
0.00000000001649807	int
,	O
0.00000000000002411	int
,	O
0.00000000000000002	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
big_cs	struct(*(double),int,double,double,int)
=	O
{	O
data_big	array(double)
,	O
7	int
,	O
-	O
1	int
,	O
1	int
,	O
7	int
}	O
;	O
static	O
double	O
data_bif2	array(double)
[	O
10	int
]	O
=	O
{	O
0.0998457269381604100	int
,	O
0.4786249778630055380	int
,	O
0.0251552119604330118	int
,	O
0.0005820693885232645	int
,	O
0.0000074997659644377	int
,	O
0.0000000613460287034	int
,	O
0.0000000003462753885	int
,	O
0.0000000000014288910	int
,	O
0.0000000000000044962	int
,	O
0.0000000000000000111	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
bif2_cs	struct(*(double),int,double,double,int)
=	O
{	O
data_bif2	array(double)
,	O
9	int
,	O
-	O
1	int
,	O
1	int
,	O
9	int
}	O
;	O
static	O
double	O
data_big2	array(double)
[	O
10	int
]	O
=	O
{	O
0.033305662145514340	int
,	O
0.161309215123197068	int
,	O
0.0063190073096134286	int
,	O
0.0001187904568162517	int
,	O
0.0000013045345886200	int
,	O
0.0000000093741259955	int
,	O
0.0000000000474580188	int
,	O
0.0000000000001783107	int
,	O
0.0000000000000005167	int
,	O
0.0000000000000000011	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
big2_cs	struct(*(double),int,double,double,int)
=	O
{	O
data_big2	array(double)
,	O
9	int
,	O
-	O
1	int
,	O
1	int
,	O
9	int
}	O
;	O
static	O
double	O
data_aip	array(double)
[	O
36	int
]	O
=	O
{	O
-	O
0.0187519297793867540198	int
,	O
-	O
0.0091443848250055004725	int
,	O
0.0009010457337825074652	int
,	O
-	O
0.0001394184127221491507	int
,	O
0.0000273815815785209370	int
,	O
-	O
0.0000062750421119959424	int
,	O
0.0000016064844184831521	int
,	O
-	O
0.0000004476392158510354	int
,	O
0.0000001334635874651668	int
,	O
-	O
0.0000000420735334263215	int
,	O
0.0000000139021990246364	int
,	O
-	O
0.0000000047831848068048	int
,	O
0.0000000017047897907465	int
,	O
-	O
0.0000000006268389576018	int
,	O
0.0000000002369824276612	int
,	O
-	O
0.0000000000918641139267	int
,	O
0.0000000000364278543037	int
,	O
-	O
0.0000000000147475551725	int
,	O
0.0000000000060851006556	int
,	O
-	O
0.0000000000025552772234	int
,	O
0.0000000000010906187250	int
,	O
-	O
0.0000000000004725870319	int
,	O
0.0000000000002076969064	int
,	O
-	O
0.0000000000000924976214	int
,	O
0.0000000000000417096723	int
,	O
-	O
0.0000000000000190299093	int
,	O
0.0000000000000087790676	int
,	O
-	O
0.0000000000000040927557	int
,	O
0.0000000000000019271068	int
,	O
-	O
0.0000000000000009160199	int
,	O
0.0000000000000004393567	int
,	O
-	O
0.0000000000000002125503	int
,	O
0.0000000000000001036735	int
,	O
-	O
0.0000000000000000509642	int
,	O
0.0000000000000000252377	int
,	O
-	O
0.0000000000000000125793	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
aip_cs	struct(*(double),int,double,double,int)
=	O
{	O
data_aip	array(double)
,	O
35	int
,	O
-	O
1	int
,	O
1	int
,	O
17	int
}	O
;	O
static	O
double	O
data_bip	array(double)
[	O
24	int
]	O
=	O
{	O
-	O
0.08322047477943447	int
,	O
0.01146118927371174	int
,	O
0.00042896440718911	int
,	O
-	O
0.00014906639379950	int
,	O
-	O
0.00001307659726787	int
,	O
0.00000632759839610	int
,	O
-	O
0.00000042226696982	int
,	O
-	O
0.00000019147186298	int
,	O
0.00000006453106284	int
,	O
-	O
0.00000000784485467	int
,	O
-	O
0.00000000096077216	int
,	O
0.00000000070004713	int
,	O
-	O
0.00000000017731789	int
,	O
0.00000000002272089	int
,	O
0.00000000000165404	int
,	O
-	O
0.00000000000185171	int
,	O
0.00000000000059576	int
,	O
-	O
0.00000000000012194	int
,	O
0.00000000000001334	int
,	O
0.00000000000000172	int
,	O
-	O
0.00000000000000145	int
,	O
0.00000000000000049	int
,	O
-	O
0.00000000000000011	int
,	O
0.00000000000000001	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
bip_cs	struct(*(double),int,double,double,int)
=	O
{	O
data_bip	array(double)
,	O
23	int
,	O
-	O
1	int
,	O
1	int
,	O
14	int
}	O
;	O
static	O
double	O
data_bip2	array(double)
[	O
29	int
]	O
=	O
{	O
-	O
0.113596737585988679	int
,	O
0.0041381473947881595	int
,	O
0.0001353470622119332	int
,	O
0.0000104273166530153	int
,	O
0.0000013474954767849	int
,	O
0.0000001696537405438	int
,	O
-	O
0.0000000100965008656	int
,	O
-	O
0.0000000167291194937	int
,	O
-	O
0.0000000045815364485	int
,	O
0.0000000003736681366	int
,	O
0.0000000005766930320	int
,	O
0.0000000000621812650	int
,	O
-	O
0.0000000000632941202	int
,	O
-	O
0.0000000000149150479	int
,	O
0.0000000000078896213	int
,	O
0.0000000000024960513	int
,	O
-	O
0.0000000000012130075	int
,	O
-	O
0.0000000000003740493	int
,	O
0.0000000000002237727	int
,	O
0.0000000000000474902	int
,	O
-	O
0.0000000000000452616	int
,	O
-	O
0.0000000000000030172	int
,	O
0.0000000000000091058	int
,	O
-	O
0.0000000000000009814	int
,	O
-	O
0.0000000000000016429	int
,	O
0.0000000000000005533	int
,	O
0.0000000000000002175	int
,	O
-	O
0.0000000000000001737	int
,	O
-	O
0.0000000000000000010	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
bip2_cs	struct(*(double),int,double,double,int)
=	O
{	O
data_bip2	array(double)
,	O
28	int
,	O
-	O
1	int
,	O
1	int
,	O
10	int
}	O
;	O
inline	O
static	O
int	O
airy_aie	(double,int,*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
gsl_mode_t	int
mode	int
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
double	O
sqx	double
=	O
sqrt	(double)->(double)
(	O
x	double
)	O
;	O
double	O
z	double
=	O
2.0	int
/	O
(	O
x	double
*	O
sqx	double
)	O
-	O
1.0	int
;	O
double	O
y	double
=	O
sqrt	(double)->(double)
(	O
sqx	double
)	O
;	O
gsl_sf_result	struct(double,double)
result_c	struct(double,double)
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
aip_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
mode	int
,	O
&	O
result_c	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
(	O
0.28125	int
+	O
result_c	struct(double,double)
.	O
val	double
)	O
/	O
y	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
result_c	struct(double,double)
.	O
err	double
/	O
y	double
+	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
airy_bie	(double,int,*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
gsl_mode_t	int
mode	int
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
const	O
double	O
ATR	double
=	O
8.7506905708484345	int
;	O
const	O
double	O
BTR	double
=	O
-	O
2.0938363213560543	int
;	O
if	O
(	O
x	double
<	O
4.0	int
)	O
{	O
double	O
sqx	double
=	O
sqrt	(double)->(double)
(	O
x	double
)	O
;	O
double	O
z	double
=	O
ATR	double
/	O
(	O
x	double
*	O
sqx	double
)	O
+	O
BTR	double
;	O
double	O
y	double
=	O
sqrt	(double)->(double)
(	O
sqx	double
)	O
;	O
gsl_sf_result	struct(double,double)
result_c	struct(double,double)
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
bip_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
mode	int
,	O
&	O
result_c	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
(	O
0.625	int
+	O
result_c	struct(double,double)
.	O
val	double
)	O
/	O
y	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
result_c	struct(double,double)
.	O
err	double
/	O
y	double
+	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
}	O
else	O
{	O
double	O
sqx	double
=	O
sqrt	(double)->(double)
(	O
x	double
)	O
;	O
double	O
z	double
=	O
16.0	int
/	O
(	O
x	double
*	O
sqx	double
)	O
-	O
1.0	int
;	O
double	O
y	double
=	O
sqrt	(double)->(double)
(	O
sqx	double
)	O
;	O
gsl_sf_result	struct(double,double)
result_c	struct(double,double)
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
bip2_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
mode	int
,	O
&	O
result_c	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
(	O
0.625	int
+	O
result_c	struct(double,double)
.	O
val	double
)	O
/	O
y	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
result_c	struct(double,double)
.	O
err	double
/	O
y	double
+	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_sf_airy_Ai_e	(double,int,*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
const	O
gsl_mode_t	int
mode	int
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
if	O
(	O
x	double
<	O
-	O
1.0	int
)	O
{	O
gsl_sf_result	struct(double,double)
mod	*(struct(double,double))
;	O
gsl_sf_result	struct(double,double)
theta	double
;	O
gsl_sf_result	struct(double,double)
cos_result	struct(double,double)
;	O
int	O
stat_mp	int
=	O
airy_mod_phase	(double,int,*(struct(double,double)),*(struct(double,double)))->(int)
(	O
x	double
,	O
mode	int
,	O
&	O
mod	*(struct(double,double))
,	O
&	O
theta	double
)	O
;	O
int	O
stat_cos	int
=	O
gsl_sf_cos_err_e	(double,double,*(struct(double,double)))->(int)
(	O
theta	double
.	O
val	double
,	O
theta	double
.	O
err	double
,	O
&	O
cos_result	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
mod	*(struct(double,double))
.	O
val	double
*	O
cos_result	struct(double,double)
.	O
val	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
fabs	(double)->(double)
(	O
mod	*(struct(double,double))
.	O
val	double
*	O
cos_result	struct(double,double)
.	O
err	double
)	O
+	O
fabs	(double)->(double)
(	O
cos_result	struct(double,double)
.	O
val	double
*	O
mod	*(struct(double,double))
.	O
err	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_mp	int
,	O
stat_cos	int
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<=	O
1.0	int
)	O
{	O
const	O
double	O
z	double
=	O
x	double
*	O
x	double
*	O
x	double
;	O
gsl_sf_result	struct(double,double)
result_c0	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
result_c1	struct(double,double)
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
aif_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
mode	int
,	O
&	O
result_c0	struct(double,double)
)	O
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
aig_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
mode	int
,	O
&	O
result_c1	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
0.375	int
+	O
(	O
result_c0	struct(double,double)
.	O
val	double
-	O
x	double
*	O
(	O
0.25	int
+	O
result_c1	struct(double,double)
.	O
val	double
)	O
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
result_c0	struct(double,double)
.	O
err	double
+	O
fabs	(double)->(double)
(	O
x	double
*	O
result_c1	struct(double,double)
.	O
err	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
double	O
x32	double
=	O
x	double
*	O
sqrt	(double)->(double)
(	O
x	double
)	O
;	O
double	O
s	int
=	O
exp	(double)->(double)
(	O
-	O
2.0	int
*	O
x32	double
/	O
3.0	int
)	O
;	O
gsl_sf_result	struct(double,double)
result_aie	struct(double,double)
;	O
int	O
stat_aie	int
=	O
airy_aie	(double,int,*(struct(double,double)))->(int)
(	O
x	double
,	O
mode	int
,	O
&	O
result_aie	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
result_aie	struct(double,double)
.	O
val	double
*	O
s	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
result_aie	struct(double,double)
.	O
err	double
*	O
s	int
+	O
result	*(struct(double,double))
->	O
val	double
*	O
x32	double
*	O
GSL_DBL_EPSILON	int
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
CHECK_UNDERFLOW	O
(	O
result	*(struct(double,double))
)	O
;	O
return	O
stat_aie	int
;	O
}	O
}	O
int	O
gsl_sf_airy_Ai_scaled_e	(double,int,*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
gsl_mode_t	int
mode	int
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
if	O
(	O
x	double
<	O
-	O
1.0	int
)	O
{	O
gsl_sf_result	struct(double,double)
mod	*(struct(double,double))
;	O
gsl_sf_result	struct(double,double)
theta	double
;	O
gsl_sf_result	struct(double,double)
cos_result	struct(double,double)
;	O
int	O
stat_mp	int
=	O
airy_mod_phase	(double,int,*(struct(double,double)),*(struct(double,double)))->(int)
(	O
x	double
,	O
mode	int
,	O
&	O
mod	*(struct(double,double))
,	O
&	O
theta	double
)	O
;	O
int	O
stat_cos	int
=	O
gsl_sf_cos_err_e	(double,double,*(struct(double,double)))->(int)
(	O
theta	double
.	O
val	double
,	O
theta	double
.	O
err	double
,	O
&	O
cos_result	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
mod	*(struct(double,double))
.	O
val	double
*	O
cos_result	struct(double,double)
.	O
val	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
fabs	(double)->(double)
(	O
mod	*(struct(double,double))
.	O
val	double
*	O
cos_result	struct(double,double)
.	O
err	double
)	O
+	O
fabs	(double)->(double)
(	O
cos_result	struct(double,double)
.	O
val	double
*	O
mod	*(struct(double,double))
.	O
err	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_mp	int
,	O
stat_cos	int
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<=	O
1.0	int
)	O
{	O
const	O
double	O
z	double
=	O
x	double
*	O
x	double
*	O
x	double
;	O
gsl_sf_result	struct(double,double)
result_c0	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
result_c1	struct(double,double)
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
aif_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
mode	int
,	O
&	O
result_c0	struct(double,double)
)	O
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
aig_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
mode	int
,	O
&	O
result_c1	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
0.375	int
+	O
(	O
result_c0	struct(double,double)
.	O
val	double
-	O
x	double
*	O
(	O
0.25	int
+	O
result_c1	struct(double,double)
.	O
val	double
)	O
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
result_c0	struct(double,double)
.	O
err	double
+	O
fabs	(double)->(double)
(	O
x	double
*	O
result_c1	struct(double,double)
.	O
err	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
if	O
(	O
x	double
>	O
0.0	int
)	O
{	O
const	O
double	O
scale	double
=	O
exp	(double)->(double)
(	O
2.0	int
/	O
3.0	int
*	O
sqrt	(double)->(double)
(	O
z	double
)	O
)	O
;	O
result	*(struct(double,double))
->	O
val	double
*=	O
scale	double
;	O
result	*(struct(double,double))
->	O
err	double
*=	O
scale	double
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
return	O
airy_aie	(double,int,*(struct(double,double)))->(int)
(	O
x	double
,	O
mode	int
,	O
result	*(struct(double,double))
)	O
;	O
}	O
}	O
int	O
gsl_sf_airy_Bi_e	(double,int,*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
gsl_mode_t	int
mode	int
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
if	O
(	O
x	double
<	O
-	O
1.0	int
)	O
{	O
gsl_sf_result	struct(double,double)
mod	*(struct(double,double))
;	O
gsl_sf_result	struct(double,double)
theta	double
;	O
gsl_sf_result	struct(double,double)
sin_result	struct(double,double)
;	O
int	O
stat_mp	int
=	O
airy_mod_phase	(double,int,*(struct(double,double)),*(struct(double,double)))->(int)
(	O
x	double
,	O
mode	int
,	O
&	O
mod	*(struct(double,double))
,	O
&	O
theta	double
)	O
;	O
int	O
stat_sin	int
=	O
gsl_sf_sin_err_e	(double,double,*(struct(double,double)))->(int)
(	O
theta	double
.	O
val	double
,	O
theta	double
.	O
err	double
,	O
&	O
sin_result	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
mod	*(struct(double,double))
.	O
val	double
*	O
sin_result	struct(double,double)
.	O
val	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
fabs	(double)->(double)
(	O
mod	*(struct(double,double))
.	O
val	double
*	O
sin_result	struct(double,double)
.	O
err	double
)	O
+	O
fabs	(double)->(double)
(	O
sin_result	struct(double,double)
.	O
val	double
*	O
mod	*(struct(double,double))
.	O
err	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_mp	int
,	O
stat_sin	int
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
1.0	int
)	O
{	O
const	O
double	O
z	double
=	O
x	double
*	O
x	double
*	O
x	double
;	O
gsl_sf_result	struct(double,double)
result_c0	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
result_c1	struct(double,double)
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
bif_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
mode	int
,	O
&	O
result_c0	struct(double,double)
)	O
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
big_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
mode	int
,	O
&	O
result_c1	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
0.625	int
+	O
result_c0	struct(double,double)
.	O
val	double
+	O
x	double
*	O
(	O
0.4375	int
+	O
result_c1	struct(double,double)
.	O
val	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
result_c0	struct(double,double)
.	O
err	double
+	O
fabs	(double)->(double)
(	O
x	double
*	O
result_c1	struct(double,double)
.	O
err	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<=	O
2.0	int
)	O
{	O
const	O
double	O
z	double
=	O
(	O
2.0	int
*	O
x	double
*	O
x	double
*	O
x	double
-	O
9.0	int
)	O
/	O
7.0	int
;	O
gsl_sf_result	struct(double,double)
result_c0	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
result_c1	struct(double,double)
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
bif2_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
mode	int
,	O
&	O
result_c0	struct(double,double)
)	O
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
big2_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
mode	int
,	O
&	O
result_c1	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
1.125	int
+	O
result_c0	struct(double,double)
.	O
val	double
+	O
x	double
*	O
(	O
0.625	int
+	O
result_c1	struct(double,double)
.	O
val	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
result_c0	struct(double,double)
.	O
err	double
+	O
fabs	(double)->(double)
(	O
x	double
*	O
result_c1	struct(double,double)
.	O
err	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
const	O
double	O
y	double
=	O
2.0	int
*	O
x	double
*	O
sqrt	(double)->(double)
(	O
x	double
)	O
/	O
3.0	int
;	O
const	O
double	O
s	int
=	O
exp	(double)->(double)
(	O
y	double
)	O
;	O
if	O
(	O
y	double
>	O
GSL_LOG_DBL_MAX	int
-	O
1.0	int
)	O
{	O
OVERFLOW_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
{	O
gsl_sf_result	struct(double,double)
result_bie	struct(double,double)
;	O
int	O
stat_bie	int
=	O
airy_bie	(double,int,*(struct(double,double)))->(int)
(	O
x	double
,	O
mode	int
,	O
&	O
result_bie	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
result_bie	struct(double,double)
.	O
val	double
*	O
s	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
result_bie	struct(double,double)
.	O
err	double
*	O
s	int
+	O
fabs	(double)->(double)
(	O
1.5	int
*	O
y	double
*	O
(	O
GSL_DBL_EPSILON	int
*	O
result	*(struct(double,double))
->	O
val	double
)	O
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
stat_bie	int
;	O
}	O
}	O
}	O
int	O
gsl_sf_airy_Bi_scaled_e	(double,int,*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
gsl_mode_t	int
mode	int
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
if	O
(	O
x	double
<	O
-	O
1.0	int
)	O
{	O
gsl_sf_result	struct(double,double)
mod	*(struct(double,double))
;	O
gsl_sf_result	struct(double,double)
theta	double
;	O
gsl_sf_result	struct(double,double)
sin_result	struct(double,double)
;	O
int	O
stat_mp	int
=	O
airy_mod_phase	(double,int,*(struct(double,double)),*(struct(double,double)))->(int)
(	O
x	double
,	O
mode	int
,	O
&	O
mod	*(struct(double,double))
,	O
&	O
theta	double
)	O
;	O
int	O
stat_sin	int
=	O
gsl_sf_sin_err_e	(double,double,*(struct(double,double)))->(int)
(	O
theta	double
.	O
val	double
,	O
theta	double
.	O
err	double
,	O
&	O
sin_result	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
mod	*(struct(double,double))
.	O
val	double
*	O
sin_result	struct(double,double)
.	O
val	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
fabs	(double)->(double)
(	O
mod	*(struct(double,double))
.	O
val	double
*	O
sin_result	struct(double,double)
.	O
err	double
)	O
+	O
fabs	(double)->(double)
(	O
sin_result	struct(double,double)
.	O
val	double
*	O
mod	*(struct(double,double))
.	O
err	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_mp	int
,	O
stat_sin	int
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
1.0	int
)	O
{	O
const	O
double	O
z	double
=	O
x	double
*	O
x	double
*	O
x	double
;	O
gsl_sf_result	struct(double,double)
result_c0	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
result_c1	struct(double,double)
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
bif_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
mode	int
,	O
&	O
result_c0	struct(double,double)
)	O
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
big_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
mode	int
,	O
&	O
result_c1	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
0.625	int
+	O
result_c0	struct(double,double)
.	O
val	double
+	O
x	double
*	O
(	O
0.4375	int
+	O
result_c1	struct(double,double)
.	O
val	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
result_c0	struct(double,double)
.	O
err	double
+	O
fabs	(double)->(double)
(	O
x	double
*	O
result_c1	struct(double,double)
.	O
err	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
if	O
(	O
x	double
>	O
0.0	int
)	O
{	O
const	O
double	O
scale	double
=	O
exp	(double)->(double)
(	O
-	O
2.0	int
/	O
3.0	int
*	O
sqrt	(double)->(double)
(	O
z	double
)	O
)	O
;	O
result	*(struct(double,double))
->	O
val	double
*=	O
scale	double
;	O
result	*(struct(double,double))
->	O
err	double
*=	O
scale	double
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<=	O
2.0	int
)	O
{	O
const	O
double	O
x3	double
=	O
x	double
*	O
x	double
*	O
x	double
;	O
const	O
double	O
z	double
=	O
(	O
2.0	int
*	O
x3	double
-	O
9.0	int
)	O
/	O
7.0	int
;	O
const	O
double	O
s	int
=	O
exp	(double)->(double)
(	O
-	O
2.0	int
/	O
3.0	int
*	O
sqrt	(double)->(double)
(	O
x3	double
)	O
)	O
;	O
gsl_sf_result	struct(double,double)
result_c0	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
result_c1	struct(double,double)
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
bif2_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
mode	int
,	O
&	O
result_c0	struct(double,double)
)	O
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
big2_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
mode	int
,	O
&	O
result_c1	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
s	int
*	O
(	O
1.125	int
+	O
result_c0	struct(double,double)
.	O
val	double
+	O
x	double
*	O
(	O
0.625	int
+	O
result_c1	struct(double,double)
.	O
val	double
)	O
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
s	int
*	O
(	O
result_c0	struct(double,double)
.	O
err	double
+	O
fabs	(double)->(double)
(	O
x	double
*	O
result_c1	struct(double,double)
.	O
err	double
)	O
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
return	O
airy_bie	(double,int,*(struct(double,double)))->(int)
(	O
x	double
,	O
mode	int
,	O
result	*(struct(double,double))
)	O
;	O
}	O
}	O
double	O
gsl_sf_airy_Ai	(double,int)->(double)
(	O
const	O
double	O
x	double
,	O
gsl_mode_t	int
mode	int
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_airy_Ai_e	(double,int,*(struct(double,double)))->(int)
(	O
x	double
,	O
mode	int
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
double	O
gsl_sf_airy_Ai_scaled	(double,int)->(double)
(	O
const	O
double	O
x	double
,	O
gsl_mode_t	int
mode	int
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_airy_Ai_scaled_e	(double,int,*(struct(double,double)))->(int)
(	O
x	double
,	O
mode	int
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
double	O
gsl_sf_airy_Bi	(double,int)->(double)
(	O
const	O
double	O
x	double
,	O
gsl_mode_t	int
mode	int
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_airy_Bi_e	(double,int,*(struct(double,double)))->(int)
(	O
x	double
,	O
mode	int
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
double	O
gsl_sf_airy_Bi_scaled	(double,int)->(double)
(	O
const	O
double	O
x	double
,	O
gsl_mode_t	int
mode	int
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_airy_Bi_scaled_e	(double,int,*(struct(double,double)))->(int)
(	O
x	double
,	O
mode	int
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
