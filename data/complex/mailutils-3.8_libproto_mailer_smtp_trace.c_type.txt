static	O
const	O
char	O
*	O
smtp_prefix	array(*(char))
[	O
]	O
=	O
{	O
"S: "	*(char)
,	O
"C: "	*(char)
}	O
;	O
int	O
_mu_smtp_trace_enable	(*(struct(int,*(struct),enum(int,int,int,int,int,int,int,int),*(struct),*(struct),array(*(char)),*(struct),*(struct),*(struct),array(char),*(char),*(char),long,*(char),long,*(struct),struct(int,enum(int,int,int),long))))->(int)
(	O
mu_smtp_t	*(struct)
smtp	*(struct)
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
mu_stream_t	*(struct)
dstr	*(struct)
,	O
xstr	*(struct)
;	O
if	O
(	O
!	O
smtp	*(struct)
->	O
carrier	*(struct)
)	O
{	O
MU_SMTP_FSET	O
(	O
smtp	*(struct)
,	O
_MU_SMTP_TRACE	int
)	O
;	O
return	O
0	int
;	O
}	O
rc	int
=	O
mu_dbgstream_create	(*(*(struct)),int)->(int)
(	O
&	O
dstr	*(struct)
,	O
MU_DIAG_DEBUG	O
)	O
;	O
if	O
(	O
rc	int
)	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"cannot create debug stream; transcript disabled: %s"	*(char)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
else	O
{	O
rc	int
=	O
mu_xscript_stream_create	(*(*(struct)),*(struct),*(struct),array(*(char)))->(int)
(	O
&	O
xstr	*(struct)
,	O
smtp	*(struct)
->	O
carrier	*(struct)
,	O
dstr	*(struct)
,	O
smtp_prefix	array(*(char))
)	O
;	O
if	O
(	O
rc	int
)	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"cannot create transcript stream: %s"	*(char)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
else	O
{	O
mu_stream_unref	(*(struct))->(void)
(	O
smtp	*(struct)
->	O
carrier	*(struct)
)	O
;	O
smtp	*(struct)
->	O
carrier	*(struct)
=	O
xstr	*(struct)
;	O
MU_SMTP_FSET	O
(	O
smtp	*(struct)
,	O
_MU_SMTP_TRACE	int
)	O
;	O
}	O
}	O
return	O
rc	int
;	O
}	O
int	O
_mu_smtp_trace_disable	(*(struct(int,*(struct),enum(int,int,int,int,int,int,int,int),*(struct),*(struct),array(*(char)),*(struct),*(struct),*(struct),array(char),*(char),*(char),long,*(char),long,*(struct),struct(int,enum(int,int,int),long))))->(int)
(	O
mu_smtp_t	*(struct)
smtp	*(struct)
)	O
{	O
mu_stream_t	*(struct)
xstr	*(struct)
=	O
smtp	*(struct)
->	O
carrier	*(struct)
;	O
mu_stream_t	*(struct)
stream	*(struct)
[	O
2	int
]	O
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
xstr	*(struct)
)	O
return	O
0	int
;	O
rc	int
=	O
mu_stream_ioctl	(*(struct),int,int,*(void))->(int)
(	O
xstr	*(struct)
,	O
MU_IOCTL_TRANSPORT	int
,	O
MU_IOCTL_OP_GET	int
,	O
stream	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
smtp	*(struct)
->	O
carrier	*(struct)
=	O
stream	*(struct)
[	O
0	int
]	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
xstr	*(struct)
)	O
;	O
MU_SMTP_FCLR	O
(	O
smtp	*(struct)
,	O
_MU_SMTP_TRACE	int
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_smtp_trace	(*(struct),int)->(int)
(	O
mu_smtp_t	*(struct)
smtp	*(struct)
,	O
int	O
op	int
)	O
{	O
int	O
trace_on	int
=	O
MU_SMTP_FISSET	O
(	O
smtp	*(struct)
,	O
_MU_SMTP_TRACE	int
)	O
;	O
switch	O
(	O
op	int
)	O
{	O
case	O
MU_SMTP_TRACE_SET	int
:	O
if	O
(	O
trace_on	int
)	O
return	O
MU_ERR_EXISTS	O
;	O
return	O
_mu_smtp_trace_enable	(*(struct(int,*(struct),enum(int,int,int,int,int,int,int,int),*(struct),*(struct),array(*(char)),*(struct),*(struct),*(struct),array(char),*(char),*(char),long,*(char),long,*(struct),struct(int,enum(int,int,int),long))))->(int)
(	O
smtp	*(struct)
)	O
;	O
case	O
MU_SMTP_TRACE_CLR	int
:	O
if	O
(	O
!	O
trace_on	int
)	O
return	O
MU_ERR_NOENT	O
;	O
return	O
_mu_smtp_trace_disable	(*(struct(int,*(struct),enum(int,int,int,int,int,int,int,int),*(struct),*(struct),array(*(char)),*(struct),*(struct),*(struct),array(char),*(char),*(char),long,*(char),long,*(struct),struct(int,enum(int,int,int),long))))->(int)
(	O
smtp	*(struct)
)	O
;	O
case	O
MU_SMTP_TRACE_QRY	int
:	O
if	O
(	O
!	O
trace_on	int
)	O
return	O
MU_ERR_NOENT	O
;	O
return	O
0	int
;	O
}	O
return	O
EINVAL	int
;	O
}	O
int	O
mu_smtp_trace_mask	(*(struct),int,int)->(int)
(	O
mu_smtp_t	*(struct)
smtp	*(struct)
,	O
int	O
op	int
,	O
int	O
lev	int
)	O
{	O
switch	O
(	O
op	int
)	O
{	O
case	O
MU_SMTP_TRACE_SET	int
:	O
smtp	*(struct)
->	O
flags	int
|=	O
MU_SMTP_XSCRIPT_MASK	O
(	O
lev	int
)	O
;	O
break	O
;	O
case	O
MU_SMTP_TRACE_CLR	int
:	O
smtp	*(struct)
->	O
flags	int
&=	O
~	O
MU_SMTP_XSCRIPT_MASK	O
(	O
lev	int
)	O
;	O
break	O
;	O
case	O
MU_SMTP_TRACE_QRY	int
:	O
if	O
(	O
smtp	*(struct)
->	O
flags	int
&	O
MU_SMTP_XSCRIPT_MASK	O
(	O
lev	int
)	O
)	O
break	O
;	O
return	O
MU_ERR_NOENT	O
;	O
default	O
:	O
return	O
EINVAL	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
_mu_smtp_xscript_level	(*(struct(int,*(struct),enum(int,int,int,int,int,int,int,int),*(struct),*(struct),array(*(char)),*(struct),*(struct),*(struct),array(char),*(char),*(char),long,*(char),long,*(struct),struct(int,enum(int,int,int),long))),int)->(int)
(	O
mu_smtp_t	*(struct)
smtp	*(struct)
,	O
int	O
xlev	int
)	O
{	O
if	O
(	O
mu_stream_ioctl	(*(struct),int,int,*(void))->(int)
(	O
smtp	*(struct)
->	O
carrier	*(struct)
,	O
MU_IOCTL_XSCRIPTSTREAM	int
,	O
MU_IOCTL_XSCRIPTSTREAM_LEVEL	int
,	O
&	O
xlev	int
)	O
==	O
0	int
)	O
return	O
xlev	int
;	O
return	O
MU_XSCRIPT_NORMAL	int
;	O
}	O
