static	O
const	O
char	O
*	O
real_file_name	*(char)
;	O
extern	O
lex_pos_ty	struct
gram_pos	struct(*(char),long)
;	O
static	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
static	O
unsigned	O
char	O
phase1_pushback	array(char)
[	O
4	int
]	O
;	O
static	O
int	O
phase1_pushback_length	int
;	O
static	O
int	O
phase1_getc	()->(int)
(	O
)	O
{	O
int	O
c	char
;	O
if	O
(	O
phase1_pushback_length	int
)	O
return	O
phase1_pushback	array(char)
[	O
--	O
phase1_pushback_length	int
]	O
;	O
c	char
=	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
c	char
==	O
EOF	O
)	O
{	O
if	O
(	O
ferror	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
{	O
const	O
char	O
*	O
errno_description	*(char)
=	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
;	O
po_xerror	*((int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),*(char),long,long,int,*(char))->(void))
(	O
PO_SEVERITY_FATAL_ERROR	int
,	O
NULL	O
,	O
NULL	O
,	O
0	int
,	O
0	int
,	O
false	int
,	O
xasprintf	(*(char))->(*(char))
(	O
"%s: %s"	*(char)
,	O
xasprintf	(*(char))->(*(char))
(	O
_	O
(	O
"error while reading \"%s\""	*(char)
)	O
,	O
real_file_name	*(char)
)	O
,	O
errno_description	*(char)
)	O
)	O
;	O
}	O
return	O
EOF	O
;	O
}	O
return	O
c	char
;	O
}	O
static	O
void	O
phase1_ungetc	(int)->(void)
(	O
int	O
c	char
)	O
{	O
if	O
(	O
c	char
!=	O
EOF	O
)	O
phase1_pushback	array(char)
[	O
phase1_pushback_length	int
++	O
]	O
=	O
c	char
;	O
}	O
static	O
int	O
phase2_pushback	array(int)
[	O
4	int
]	O
;	O
static	O
int	O
phase2_pushback_length	int
;	O
enum	O
enc	enum(int,int,int,int,int)
{	O
enc_undetermined	int
,	O
enc_ucs2be	int
,	O
enc_ucs2le	int
,	O
enc_utf8	int
,	O
enc_iso8859_1	int
}	O
;	O
static	O
enum	O
enc	enum(int,int,int,int,int)
encoding	*(char)
;	O
static	O
int	O
phase2_getc	()->(int)
(	O
)	O
{	O
if	O
(	O
phase2_pushback_length	int
)	O
return	O
phase2_pushback	array(int)
[	O
--	O
phase2_pushback_length	int
]	O
;	O
if	O
(	O
encoding	*(char)
==	O
enc_undetermined	int
)	O
{	O
int	O
c0	int
,	O
c1	int
;	O
c0	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c0	int
==	O
EOF	O
)	O
return	O
UEOF	O
;	O
c1	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c1	int
==	O
EOF	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c0	int
)	O
;	O
encoding	*(char)
=	O
enc_iso8859_1	int
;	O
}	O
else	O
if	O
(	O
c0	int
==	O
0xfe	int
&&	O
c1	int
==	O
0xff	int
)	O
encoding	*(char)
=	O
enc_ucs2be	int
;	O
else	O
if	O
(	O
c0	int
==	O
0xff	int
&&	O
c1	int
==	O
0xfe	int
)	O
encoding	*(char)
=	O
enc_ucs2le	int
;	O
else	O
{	O
int	O
c2	int
;	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
==	O
EOF	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c1	int
)	O
;	O
phase1_ungetc	(int)->(void)
(	O
c0	int
)	O
;	O
encoding	*(char)
=	O
enc_iso8859_1	int
;	O
}	O
else	O
if	O
(	O
c0	int
==	O
0xef	int
&&	O
c1	int
==	O
0xbb	int
&&	O
c2	int
==	O
0xbf	int
)	O
encoding	*(char)
=	O
enc_utf8	int
;	O
else	O
{	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
phase1_ungetc	(int)->(void)
(	O
c1	int
)	O
;	O
phase1_ungetc	(int)->(void)
(	O
c0	int
)	O
;	O
encoding	*(char)
=	O
enc_iso8859_1	int
;	O
}	O
}	O
}	O
switch	O
(	O
encoding	*(char)
)	O
{	O
case	O
enc_ucs2be	int
:	O
{	O
int	O
c0	int
,	O
c1	int
;	O
c0	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c0	int
==	O
EOF	O
)	O
return	O
UEOF	O
;	O
c1	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c1	int
==	O
EOF	O
)	O
return	O
UEOF	O
;	O
return	O
(	O
c0	int
<<	O
8	int
)	O
+	O
c1	int
;	O
}	O
case	O
enc_ucs2le	int
:	O
{	O
int	O
c0	int
,	O
c1	int
;	O
c0	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c0	int
==	O
EOF	O
)	O
return	O
UEOF	O
;	O
c1	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c1	int
==	O
EOF	O
)	O
return	O
UEOF	O
;	O
return	O
c0	int
+	O
(	O
c1	int
<<	O
8	int
)	O
;	O
}	O
case	O
enc_utf8	int
:	O
{	O
unsigned	O
char	O
buf	array(char)
[	O
6	int
]	O
;	O
unsigned	O
int	O
count	int
;	O
int	O
c	char
;	O
ucs4_t	int
uc	int
;	O
c	char
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	char
==	O
EOF	O
)	O
return	O
UEOF	O
;	O
buf	array(char)
[	O
0	int
]	O
=	O
c	char
;	O
count	int
=	O
1	int
;	O
if	O
(	O
buf	array(char)
[	O
0	int
]	O
>=	O
0xc0	int
)	O
{	O
c	char
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	char
==	O
EOF	O
)	O
return	O
UEOF	O
;	O
buf	array(char)
[	O
1	int
]	O
=	O
c	char
;	O
count	int
=	O
2	int
;	O
if	O
(	O
buf	array(char)
[	O
0	int
]	O
>=	O
0xe0	int
&&	O
(	O
(	O
buf	array(char)
[	O
1	int
]	O
^	O
0x80	int
)	O
<	O
0x40	int
)	O
)	O
{	O
c	char
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	char
==	O
EOF	O
)	O
return	O
UEOF	O
;	O
buf	array(char)
[	O
2	int
]	O
=	O
c	char
;	O
count	int
=	O
3	int
;	O
if	O
(	O
buf	array(char)
[	O
0	int
]	O
>=	O
0xf0	int
&&	O
(	O
(	O
buf	array(char)
[	O
2	int
]	O
^	O
0x80	int
)	O
<	O
0x40	int
)	O
)	O
{	O
c	char
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	char
==	O
EOF	O
)	O
return	O
UEOF	O
;	O
buf	array(char)
[	O
3	int
]	O
=	O
c	char
;	O
count	int
=	O
4	int
;	O
if	O
(	O
buf	array(char)
[	O
0	int
]	O
>=	O
0xf8	int
&&	O
(	O
(	O
buf	array(char)
[	O
3	int
]	O
^	O
0x80	int
)	O
<	O
0x40	int
)	O
)	O
{	O
c	char
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	char
==	O
EOF	O
)	O
return	O
UEOF	O
;	O
buf	array(char)
[	O
4	int
]	O
=	O
c	char
;	O
count	int
=	O
5	int
;	O
if	O
(	O
buf	array(char)
[	O
0	int
]	O
>=	O
0xfc	int
&&	O
(	O
(	O
buf	array(char)
[	O
4	int
]	O
^	O
0x80	int
)	O
<	O
0x40	int
)	O
)	O
{	O
c	char
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	char
==	O
EOF	O
)	O
return	O
UEOF	O
;	O
buf	array(char)
[	O
5	int
]	O
=	O
c	char
;	O
count	int
=	O
6	int
;	O
}	O
}	O
}	O
}	O
}	O
u8_mbtouc	(*(int),*(char),long)->(int)
(	O
&	O
uc	int
,	O
buf	array(char)
,	O
count	int
)	O
;	O
return	O
uc	int
;	O
}	O
case	O
enc_iso8859_1	int
:	O
{	O
int	O
c	char
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	char
==	O
EOF	O
)	O
return	O
UEOF	O
;	O
return	O
c	char
;	O
}	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
}	O
static	O
void	O
phase2_ungetc	(int)->(void)
(	O
int	O
c	char
)	O
{	O
if	O
(	O
c	char
!=	O
UEOF	O
)	O
phase2_pushback	array(int)
[	O
phase2_pushback_length	int
++	O
]	O
=	O
c	char
;	O
}	O
static	O
int	O
phase3_getc	()->(int)
(	O
)	O
{	O
int	O
c	char
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	char
==	O
'\n'	O
)	O
gram_pos	struct(*(char),long)
.	O
line_number	long
++	O
;	O
return	O
c	char
;	O
}	O
static	O
void	O
phase3_ungetc	(int)->(void)
(	O
int	O
c	char
)	O
{	O
if	O
(	O
c	char
==	O
'\n'	O
)	O
--	O
gram_pos	struct(*(char),long)
.	O
line_number	long
;	O
phase2_ungetc	(int)->(void)
(	O
c	char
)	O
;	O
}	O
static	O
char	O
*	O
conv_from_ucs4	(*(int),long)->(*(char))
(	O
const	O
int	O
*	O
buffer	*(int)
,	O
size_t	long
buflen	long
)	O
{	O
unsigned	O
char	O
*	O
utf8_string	*(char)
;	O
size_t	long
pos	*(struct(*(char),long))
;	O
unsigned	O
char	O
*	O
q	*(char)
;	O
utf8_string	*(char)
=	O
XNMALLOC	O
(	O
6	int
*	O
buflen	long
+	O
1	int
,	O
unsigned	O
char	O
)	O
;	O
for	O
(	O
pos	*(struct(*(char),long))
=	O
0	int
,	O
q	*(char)
=	O
utf8_string	*(char)
;	O
pos	*(struct(*(char),long))
<	O
buflen	long
;	O
)	O
{	O
unsigned	O
int	O
uc	int
;	O
int	O
n	long
;	O
uc	int
=	O
buffer	*(int)
[	O
pos	*(struct(*(char),long))
++	O
]	O
;	O
n	long
=	O
u8_uctomb	(*(char),int,int)->(int)
(	O
q	*(char)
,	O
uc	int
,	O
6	int
)	O
;	O
assert	O
(	O
n	long
>	O
0	int
)	O
;	O
q	*(char)
+=	O
n	long
;	O
}	O
*	O
q	*(char)
=	O
'\0'	O
;	O
assert	O
(	O
q	*(char)
-	O
utf8_string	*(char)
<=	O
6	int
*	O
buflen	long
)	O
;	O
return	O
(	O
char	O
*	O
)	O
utf8_string	*(char)
;	O
}	O
static	O
char	O
*	O
parse_escaped_string	(*(int),long)->(*(char))
(	O
const	O
int	O
*	O
string	*(char)
,	O
size_t	long
length	long
)	O
{	O
static	O
int	O
*	O
buffer	*(int)
;	O
static	O
size_t	long
bufmax	long
;	O
static	O
size_t	long
buflen	long
;	O
const	O
int	O
*	O
string_limit	*(int)
=	O
string	*(char)
+	O
length	long
;	O
int	O
c	char
;	O
if	O
(	O
string	*(char)
==	O
string_limit	*(int)
)	O
return	O
NULL	O
;	O
c	char
=	O
*	O
string	*(char)
++	O
;	O
if	O
(	O
c	char
!=	O
'"'	O
)	O
return	O
NULL	O
;	O
buflen	long
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
string	*(char)
==	O
string_limit	*(int)
)	O
return	O
NULL	O
;	O
c	char
=	O
*	O
string	*(char)
++	O
;	O
if	O
(	O
c	char
==	O
'"'	O
)	O
break	O
;	O
if	O
(	O
c	char
==	O
'\\'	O
)	O
{	O
if	O
(	O
string	*(char)
==	O
string_limit	*(int)
)	O
return	O
NULL	O
;	O
c	char
=	O
*	O
string	*(char)
++	O
;	O
if	O
(	O
c	char
>=	O
'0'	O
&&	O
c	char
<=	O
'7'	O
)	O
{	O
unsigned	O
int	O
n	long
=	O
0	int
;	O
int	O
j	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
n	long
=	O
n	long
*	O
8	int
+	O
(	O
c	char
-	O
'0'	O
)	O
;	O
if	O
(	O
++	O
j	int
==	O
3	int
)	O
break	O
;	O
if	O
(	O
string	*(char)
==	O
string_limit	*(int)
)	O
break	O
;	O
c	char
=	O
*	O
string	*(char)
;	O
if	O
(	O
!	O
(	O
c	char
>=	O
'0'	O
&&	O
c	char
<=	O
'7'	O
)	O
)	O
break	O
;	O
string	*(char)
++	O
;	O
}	O
c	char
=	O
n	long
;	O
}	O
else	O
if	O
(	O
c	char
==	O
'u'	O
||	O
c	char
==	O
'U'	O
)	O
{	O
unsigned	O
int	O
n	long
=	O
0	int
;	O
int	O
j	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
4	int
;	O
j	int
++	O
)	O
{	O
if	O
(	O
string	*(char)
==	O
string_limit	*(int)
)	O
break	O
;	O
c	char
=	O
*	O
string	*(char)
;	O
if	O
(	O
c	char
>=	O
'0'	O
&&	O
c	char
<=	O
'9'	O
)	O
n	long
=	O
n	long
*	O
16	int
+	O
(	O
c	char
-	O
'0'	O
)	O
;	O
else	O
if	O
(	O
c	char
>=	O
'A'	O
&&	O
c	char
<=	O
'F'	O
)	O
n	long
=	O
n	long
*	O
16	int
+	O
(	O
c	char
-	O
'A'	O
+	O
10	int
)	O
;	O
else	O
if	O
(	O
c	char
>=	O
'a'	O
&&	O
c	char
<=	O
'f'	O
)	O
n	long
=	O
n	long
*	O
16	int
+	O
(	O
c	char
-	O
'a'	O
+	O
10	int
)	O
;	O
else	O
break	O
;	O
string	*(char)
++	O
;	O
}	O
c	char
=	O
n	long
;	O
}	O
else	O
switch	O
(	O
c	char
)	O
{	O
case	O
'a'	O
:	O
c	char
=	O
'\a'	O
;	O
break	O
;	O
case	O
'b'	O
:	O
c	char
=	O
'\b'	O
;	O
break	O
;	O
case	O
't'	O
:	O
c	char
=	O
'\t'	O
;	O
break	O
;	O
case	O
'r'	O
:	O
c	char
=	O
'\r'	O
;	O
break	O
;	O
case	O
'n'	O
:	O
c	char
=	O
'\n'	O
;	O
break	O
;	O
case	O
'v'	O
:	O
c	char
=	O
'\v'	O
;	O
break	O
;	O
case	O
'f'	O
:	O
c	char
=	O
'\f'	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
buflen	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(int)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(int)
,	O
bufmax	long
*	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
}	O
buffer	*(int)
[	O
buflen	long
++	O
]	O
=	O
c	char
;	O
}	O
return	O
conv_from_ucs4	(*(int),long)->(*(char))
(	O
buffer	*(int)
,	O
buflen	long
)	O
;	O
}	O
static	O
char	O
*	O
special_comment	*(char)
;	O
static	O
inline	O
void	O
special_comment_reset	()->(void)
(	O
)	O
{	O
if	O
(	O
special_comment	*(char)
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
special_comment	*(char)
)	O
;	O
special_comment	*(char)
=	O
NULL	O
;	O
}	O
static	O
void	O
special_comment_add	(*(char))->(void)
(	O
const	O
char	O
*	O
flag	bool
)	O
{	O
if	O
(	O
special_comment	*(char)
==	O
NULL	O
)	O
special_comment	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
flag	bool
)	O
;	O
else	O
{	O
size_t	long
total_len	long
=	O
strlen	(*(char))->(long)
(	O
special_comment	*(char)
)	O
+	O
2	int
+	O
strlen	(*(char))->(long)
(	O
flag	bool
)	O
+	O
1	int
;	O
special_comment	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
special_comment	*(char)
,	O
total_len	long
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
special_comment	*(char)
,	O
", "	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
special_comment	*(char)
,	O
flag	bool
)	O
;	O
}	O
}	O
static	O
inline	O
void	O
special_comment_finish	()->(void)
(	O
)	O
{	O
if	O
(	O
special_comment	*(char)
!=	O
NULL	O
)	O
{	O
po_callback_comment_special	(*(char))->(void)
(	O
special_comment	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
special_comment	*(char)
)	O
;	O
special_comment	*(char)
=	O
NULL	O
;	O
}	O
}	O
static	O
int	O
*	O
buffer	*(int)
;	O
static	O
size_t	long
bufmax	long
;	O
static	O
size_t	long
buflen	long
;	O
static	O
bool	bool
next_is_obsolete	bool
;	O
static	O
bool	bool
next_is_fuzzy	bool
;	O
static	O
char	O
*	O
fuzzy_msgstr	*(char)
;	O
static	O
bool	bool
expect_fuzzy_msgstr_as_c_comment	bool
;	O
static	O
bool	bool
expect_fuzzy_msgstr_as_cxx_comment	bool
;	O
static	O
inline	O
void	O
comment_start	()->(void)
(	O
)	O
{	O
buflen	long
=	O
0	int
;	O
}	O
static	O
inline	O
void	O
comment_add	(int)->(void)
(	O
int	O
c	char
)	O
{	O
if	O
(	O
buflen	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(int)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(int)
,	O
bufmax	long
*	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
}	O
buffer	*(int)
[	O
buflen	long
++	O
]	O
=	O
c	char
;	O
}	O
static	O
inline	O
void	O
comment_line_end	(long,bool)->(void)
(	O
size_t	long
chars_to_remove	long
,	O
bool	bool
test_for_fuzzy_msgstr	bool
)	O
{	O
char	O
*	O
line	long
;	O
buflen	long
-=	O
chars_to_remove	long
;	O
while	O
(	O
buflen	long
>=	O
1	int
&&	O
(	O
buffer	*(int)
[	O
buflen	long
-	O
1	int
]	O
==	O
' '	O
||	O
buffer	*(int)
[	O
buflen	long
-	O
1	int
]	O
==	O
'\t'	O
)	O
)	O
--	O
buflen	long
;	O
if	O
(	O
test_for_fuzzy_msgstr	bool
&&	O
buflen	long
>	O
2	int
&&	O
buffer	*(int)
[	O
0	int
]	O
==	O
'='	O
&&	O
buffer	*(int)
[	O
1	int
]	O
==	O
' '	O
&&	O
(	O
fuzzy_msgstr	*(char)
=	O
parse_escaped_string	(*(int),long)->(*(char))
(	O
buffer	*(int)
+	O
2	int
,	O
buflen	long
-	O
(	O
buffer	*(int)
[	O
buflen	long
-	O
1	int
]	O
==	O
';'	O
)	O
-	O
2	int
)	O
)	O
)	O
return	O
;	O
line	long
=	O
conv_from_ucs4	(*(int),long)->(*(char))
(	O
buffer	*(int)
,	O
buflen	long
)	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
line	long
,	O
"Flag: untranslated"	*(char)
)	O
==	O
0	int
)	O
{	O
special_comment_add	(*(char))->(void)
(	O
"fuzzy"	*(char)
)	O
;	O
next_is_fuzzy	bool
=	O
true	int
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
line	long
,	O
"Flag: unmatched"	*(char)
)	O
==	O
0	int
)	O
next_is_obsolete	bool
=	O
true	int
;	O
else	O
if	O
(	O
strlen	(*(char))->(long)
(	O
line	long
)	O
>=	O
6	int
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
line	long
,	O
"Flag: "	*(char)
,	O
6	int
)	O
==	O
0	int
)	O
special_comment_add	(*(char))->(void)
(	O
line	long
+	O
6	int
)	O
;	O
else	O
if	O
(	O
strlen	(*(char))->(long)
(	O
line	long
)	O
>=	O
9	int
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
line	long
,	O
"Comment: "	*(char)
,	O
9	int
)	O
==	O
0	int
)	O
po_callback_comment_dot	(*(char))->(void)
(	O
line	long
+	O
9	int
)	O
;	O
else	O
{	O
char	O
*	O
last_colon	*(char)
;	O
unsigned	O
long	O
number	long
;	O
char	O
*	O
endp	*(char)
;	O
if	O
(	O
strlen	(*(char))->(long)
(	O
line	long
)	O
>=	O
6	int
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
line	long
,	O
"File: "	*(char)
,	O
6	int
)	O
==	O
0	int
&&	O
(	O
last_colon	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
line	long
+	O
6	int
,	O
':'	O
)	O
)	O
!=	O
NULL	O
&&	O
*	O
(	O
last_colon	*(char)
+	O
1	int
)	O
!=	O
'\0'	O
&&	O
(	O
number	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
last_colon	*(char)
+	O
1	int
,	O
&	O
endp	*(char)
,	O
10	int
)	O
,	O
*	O
endp	*(char)
==	O
'\0'	O
)	O
)	O
{	O
*	O
last_colon	*(char)
=	O
'\0'	O
;	O
po_callback_comment_filepos	(*(char),long)->(void)
(	O
line	long
+	O
6	int
,	O
number	long
)	O
;	O
}	O
else	O
po_callback_comment	(*(char))->(void)
(	O
line	long
)	O
;	O
}	O
}	O
static	O
int	O
phase4_getc	()->(int)
(	O
)	O
{	O
int	O
c	char
;	O
c	char
=	O
phase3_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	char
!=	O
'/'	O
)	O
return	O
c	char
;	O
c	char
=	O
phase3_getc	()->(int)
(	O
)	O
;	O
switch	O
(	O
c	char
)	O
{	O
default	O
:	O
phase3_ungetc	(int)->(void)
(	O
c	char
)	O
;	O
return	O
'/'	O
;	O
case	O
'*'	O
:	O
{	O
bool	bool
last_was_star	bool
;	O
size_t	long
trailing_stars	long
;	O
bool	bool
seen_newline	bool
;	O
comment_start	()->(void)
(	O
)	O
;	O
last_was_star	bool
=	O
false	int
;	O
trailing_stars	long
=	O
0	int
;	O
seen_newline	bool
=	O
false	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	char
=	O
phase3_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	char
!=	O
'*'	O
)	O
break	O
;	O
last_was_star	bool
=	O
true	int
;	O
}	O
phase3_ungetc	(int)->(void)
(	O
c	char
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	char
=	O
phase3_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	char
==	O
UEOF	O
)	O
break	O
;	O
if	O
(	O
!	O
(	O
buflen	long
==	O
0	int
&&	O
(	O
c	char
==	O
' '	O
||	O
c	char
==	O
'\t'	O
)	O
)	O
)	O
comment_add	(int)->(void)
(	O
c	char
)	O
;	O
switch	O
(	O
c	char
)	O
{	O
case	O
'\n'	O
:	O
seen_newline	bool
=	O
true	int
;	O
comment_line_end	(long,bool)->(void)
(	O
1	int
,	O
false	int
)	O
;	O
comment_start	()->(void)
(	O
)	O
;	O
last_was_star	bool
=	O
false	int
;	O
trailing_stars	long
=	O
0	int
;	O
continue	O
;	O
case	O
'*'	O
:	O
last_was_star	bool
=	O
true	int
;	O
trailing_stars	long
++	O
;	O
continue	O
;	O
case	O
'/'	O
:	O
if	O
(	O
last_was_star	bool
)	O
{	O
comment_line_end	(long,bool)->(void)
(	O
trailing_stars	long
+	O
1	int
,	O
expect_fuzzy_msgstr_as_c_comment	bool
&&	O
!	O
seen_newline	bool
)	O
;	O
break	O
;	O
}	O
default	O
:	O
last_was_star	bool
=	O
false	int
;	O
trailing_stars	long
=	O
0	int
;	O
continue	O
;	O
}	O
break	O
;	O
}	O
return	O
' '	O
;	O
}	O
case	O
'/'	O
:	O
comment_start	()->(void)
(	O
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	char
=	O
phase3_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	char
==	O
'\n'	O
||	O
c	char
==	O
UEOF	O
)	O
break	O
;	O
if	O
(	O
!	O
(	O
buflen	long
==	O
0	int
&&	O
(	O
c	char
==	O
' '	O
||	O
c	char
==	O
'\t'	O
)	O
)	O
)	O
comment_add	(int)->(void)
(	O
c	char
)	O
;	O
}	O
comment_line_end	(long,bool)->(void)
(	O
0	int
,	O
expect_fuzzy_msgstr_as_cxx_comment	bool
)	O
;	O
return	O
'\n'	O
;	O
}	O
}	O
static	O
inline	O
void	O
phase4_ungetc	(int)->(void)
(	O
int	O
c	char
)	O
{	O
phase3_ungetc	(int)->(void)
(	O
c	char
)	O
;	O
}	O
static	O
bool	bool
is_whitespace	(int)->(bool)
(	O
int	O
c	char
)	O
{	O
return	O
(	O
c	char
==	O
' '	O
||	O
c	char
==	O
'\t'	O
||	O
c	char
==	O
'\r'	O
||	O
c	char
==	O
'\n'	O
||	O
c	char
==	O
'\f'	O
||	O
c	char
==	O
'\b'	O
)	O
;	O
}	O
static	O
bool	bool
is_quotable	(int)->(bool)
(	O
int	O
c	char
)	O
{	O
if	O
(	O
(	O
c	char
>=	O
'0'	O
&&	O
c	char
<=	O
'9'	O
)	O
||	O
(	O
c	char
>=	O
'A'	O
&&	O
c	char
<=	O
'Z'	O
)	O
||	O
(	O
c	char
>=	O
'a'	O
&&	O
c	char
<=	O
'z'	O
)	O
)	O
return	O
false	int
;	O
switch	O
(	O
c	char
)	O
{	O
case	O
'!'	O
:	O
case	O
'#'	O
:	O
case	O
'$'	O
:	O
case	O
'%'	O
:	O
case	O
'&'	O
:	O
case	O
'*'	O
:	O
case	O
'+'	O
:	O
case	O
'-'	O
:	O
case	O
'.'	O
:	O
case	O
'/'	O
:	O
case	O
':'	O
:	O
case	O
'?'	O
:	O
case	O
'@'	O
:	O
case	O
'|'	O
:	O
case	O
'~'	O
:	O
case	O
'_'	O
:	O
case	O
'^'	O
:	O
return	O
false	int
;	O
default	O
:	O
return	O
true	int
;	O
}	O
}	O
static	O
char	O
*	O
read_string	(*(struct(*(char),long)))->(*(char))
(	O
lex_pos_ty	struct
*	O
pos	*(struct(*(char),long))
)	O
{	O
static	O
int	O
*	O
buffer	*(int)
;	O
static	O
size_t	long
bufmax	long
;	O
static	O
size_t	long
buflen	long
;	O
int	O
c	char
;	O
do	O
c	char
=	O
phase4_getc	()->(int)
(	O
)	O
;	O
while	O
(	O
is_whitespace	(int)->(bool)
(	O
c	char
)	O
)	O
;	O
if	O
(	O
c	char
==	O
UEOF	O
)	O
return	O
NULL	O
;	O
*	O
pos	*(struct(*(char),long))
=	O
gram_pos	struct(*(char),long)
;	O
buflen	long
=	O
0	int
;	O
if	O
(	O
c	char
==	O
'"'	O
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
c	char
=	O
phase3_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	char
==	O
UEOF	O
||	O
c	char
==	O
'"'	O
)	O
break	O
;	O
if	O
(	O
c	char
==	O
'\\'	O
)	O
{	O
c	char
=	O
phase3_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	char
==	O
UEOF	O
)	O
break	O
;	O
if	O
(	O
c	char
>=	O
'0'	O
&&	O
c	char
<=	O
'7'	O
)	O
{	O
unsigned	O
int	O
n	long
=	O
0	int
;	O
int	O
j	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
n	long
=	O
n	long
*	O
8	int
+	O
(	O
c	char
-	O
'0'	O
)	O
;	O
if	O
(	O
++	O
j	int
==	O
3	int
)	O
break	O
;	O
c	char
=	O
phase3_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
!	O
(	O
c	char
>=	O
'0'	O
&&	O
c	char
<=	O
'7'	O
)	O
)	O
{	O
phase3_ungetc	(int)->(void)
(	O
c	char
)	O
;	O
break	O
;	O
}	O
}	O
c	char
=	O
n	long
;	O
}	O
else	O
if	O
(	O
c	char
==	O
'u'	O
||	O
c	char
==	O
'U'	O
)	O
{	O
unsigned	O
int	O
n	long
=	O
0	int
;	O
int	O
j	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
4	int
;	O
j	int
++	O
)	O
{	O
c	char
=	O
phase3_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	char
>=	O
'0'	O
&&	O
c	char
<=	O
'9'	O
)	O
n	long
=	O
n	long
*	O
16	int
+	O
(	O
c	char
-	O
'0'	O
)	O
;	O
else	O
if	O
(	O
c	char
>=	O
'A'	O
&&	O
c	char
<=	O
'F'	O
)	O
n	long
=	O
n	long
*	O
16	int
+	O
(	O
c	char
-	O
'A'	O
+	O
10	int
)	O
;	O
else	O
if	O
(	O
c	char
>=	O
'a'	O
&&	O
c	char
<=	O
'f'	O
)	O
n	long
=	O
n	long
*	O
16	int
+	O
(	O
c	char
-	O
'a'	O
+	O
10	int
)	O
;	O
else	O
{	O
phase3_ungetc	(int)->(void)
(	O
c	char
)	O
;	O
break	O
;	O
}	O
}	O
c	char
=	O
n	long
;	O
}	O
else	O
switch	O
(	O
c	char
)	O
{	O
case	O
'a'	O
:	O
c	char
=	O
'\a'	O
;	O
break	O
;	O
case	O
'b'	O
:	O
c	char
=	O
'\b'	O
;	O
break	O
;	O
case	O
't'	O
:	O
c	char
=	O
'\t'	O
;	O
break	O
;	O
case	O
'r'	O
:	O
c	char
=	O
'\r'	O
;	O
break	O
;	O
case	O
'n'	O
:	O
c	char
=	O
'\n'	O
;	O
break	O
;	O
case	O
'v'	O
:	O
c	char
=	O
'\v'	O
;	O
break	O
;	O
case	O
'f'	O
:	O
c	char
=	O
'\f'	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
buflen	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(int)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(int)
,	O
bufmax	long
*	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
}	O
buffer	*(int)
[	O
buflen	long
++	O
]	O
=	O
c	char
;	O
}	O
if	O
(	O
c	char
==	O
UEOF	O
)	O
po_xerror	*((int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),*(char),long,long,int,*(char))->(void))
(	O
PO_SEVERITY_ERROR	int
,	O
NULL	O
,	O
real_file_name	*(char)
,	O
gram_pos	struct(*(char),long)
.	O
line_number	long
,	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
,	O
false	int
,	O
_	O
(	O
"warning: unterminated string"	*(char)
)	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
is_quotable	(int)->(bool)
(	O
c	char
)	O
)	O
po_xerror	*((int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),*(char),long,long,int,*(char))->(void))
(	O
PO_SEVERITY_ERROR	int
,	O
NULL	O
,	O
real_file_name	*(char)
,	O
gram_pos	struct(*(char),long)
.	O
line_number	long
,	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
,	O
false	int
,	O
_	O
(	O
"warning: syntax error"	*(char)
)	O
)	O
;	O
for	O
(	O
;	O
c	char
!=	O
UEOF	O
&&	O
!	O
is_quotable	(int)->(bool)
(	O
c	char
)	O
;	O
c	char
=	O
phase4_getc	()->(int)
(	O
)	O
)	O
{	O
if	O
(	O
buflen	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(int)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(int)
,	O
bufmax	long
*	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
}	O
buffer	*(int)
[	O
buflen	long
++	O
]	O
=	O
c	char
;	O
}	O
}	O
return	O
conv_from_ucs4	(*(int),long)->(*(char))
(	O
buffer	*(int)
,	O
buflen	long
)	O
;	O
}	O
static	O
void	O
stringtable_parse	(*(struct(*(struct(long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),*(char))->(void)
(	O
abstract_catalog_reader_ty	struct
*	O
pop	*(struct)
,	O
FILE	struct
*	O
file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
const	O
char	O
*	O
real_filename	*(char)
,	O
const	O
char	O
*	O
logical_filename	*(char)
)	O
{	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
real_file_name	*(char)
=	O
real_filename	*(char)
;	O
gram_pos	struct(*(char),long)
.	O
file_name	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
real_file_name	*(char)
)	O
;	O
gram_pos	struct(*(char),long)
.	O
line_number	long
=	O
1	int
;	O
encoding	*(char)
=	O
enc_undetermined	int
;	O
expect_fuzzy_msgstr_as_c_comment	bool
=	O
false	int
;	O
expect_fuzzy_msgstr_as_cxx_comment	bool
=	O
false	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
char	O
*	O
msgid	*(char)
;	O
lex_pos_ty	struct
msgid_pos	*(struct(*(char),long))
;	O
char	O
*	O
msgstr	*(char)
;	O
lex_pos_ty	struct
msgstr_pos	*(struct(*(char),long))
;	O
int	O
c	char
;	O
special_comment_reset	()->(void)
(	O
)	O
;	O
next_is_obsolete	bool
=	O
false	int
;	O
next_is_fuzzy	bool
=	O
false	int
;	O
fuzzy_msgstr	*(char)
=	O
NULL	O
;	O
msgid	*(char)
=	O
read_string	(*(struct(*(char),long)))->(*(char))
(	O
&	O
msgid_pos	*(struct(*(char),long))
)	O
;	O
if	O
(	O
msgid	*(char)
==	O
NULL	O
)	O
break	O
;	O
special_comment_finish	()->(void)
(	O
)	O
;	O
do	O
c	char
=	O
phase4_getc	()->(int)
(	O
)	O
;	O
while	O
(	O
is_whitespace	(int)->(bool)
(	O
c	char
)	O
)	O
;	O
if	O
(	O
c	char
==	O
UEOF	O
)	O
{	O
po_xerror	*((int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),*(char),long,long,int,*(char))->(void))
(	O
PO_SEVERITY_ERROR	int
,	O
NULL	O
,	O
real_file_name	*(char)
,	O
gram_pos	struct(*(char),long)
.	O
line_number	long
,	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
,	O
false	int
,	O
_	O
(	O
"warning: unterminated key/value pair"	*(char)
)	O
)	O
;	O
break	O
;	O
}	O
if	O
(	O
c	char
==	O
';'	O
)	O
{	O
msgstr	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
""	*(char)
)	O
;	O
msgstr_pos	*(struct(*(char),long))
=	O
msgid_pos	*(struct(*(char),long))
;	O
po_callback_message	(*(char),*(char),*(struct(*(char),long)),*(char),*(char),long,*(struct(*(char),long)),*(char),*(char),*(char),bool,bool)->(void)
(	O
NULL	O
,	O
msgid	*(char)
,	O
&	O
msgid_pos	*(struct(*(char),long))
,	O
NULL	O
,	O
msgstr	*(char)
,	O
strlen	(*(char))->(long)
(	O
msgstr	*(char)
)	O
+	O
1	int
,	O
&	O
msgstr_pos	*(struct(*(char),long))
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
false	int
,	O
next_is_obsolete	bool
)	O
;	O
}	O
else	O
if	O
(	O
c	char
==	O
'='	O
)	O
{	O
msgstr	*(char)
=	O
read_string	(*(struct(*(char),long)))->(*(char))
(	O
&	O
msgstr_pos	*(struct(*(char),long))
)	O
;	O
if	O
(	O
msgstr	*(char)
==	O
NULL	O
)	O
{	O
po_xerror	*((int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),*(char),long,long,int,*(char))->(void))
(	O
PO_SEVERITY_ERROR	int
,	O
NULL	O
,	O
real_file_name	*(char)
,	O
gram_pos	struct(*(char),long)
.	O
line_number	long
,	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
,	O
false	int
,	O
_	O
(	O
"warning: unterminated key/value pair"	*(char)
)	O
)	O
;	O
break	O
;	O
}	O
expect_fuzzy_msgstr_as_c_comment	bool
=	O
next_is_fuzzy	bool
;	O
do	O
{	O
c	char
=	O
phase4_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
fuzzy_msgstr	*(char)
!=	O
NULL	O
)	O
expect_fuzzy_msgstr_as_c_comment	bool
=	O
false	int
;	O
}	O
while	O
(	O
is_whitespace	(int)->(bool)
(	O
c	char
)	O
)	O
;	O
expect_fuzzy_msgstr_as_c_comment	bool
=	O
false	int
;	O
if	O
(	O
c	char
==	O
';'	O
)	O
{	O
if	O
(	O
fuzzy_msgstr	*(char)
==	O
NULL	O
&&	O
next_is_fuzzy	bool
)	O
{	O
do	O
c	char
=	O
phase3_getc	()->(int)
(	O
)	O
;	O
while	O
(	O
c	char
==	O
' '	O
)	O
;	O
phase3_ungetc	(int)->(void)
(	O
c	char
)	O
;	O
expect_fuzzy_msgstr_as_cxx_comment	bool
=	O
true	int
;	O
c	char
=	O
phase4_getc	()->(int)
(	O
)	O
;	O
phase4_ungetc	(int)->(void)
(	O
c	char
)	O
;	O
expect_fuzzy_msgstr_as_cxx_comment	bool
=	O
false	int
;	O
}	O
if	O
(	O
fuzzy_msgstr	*(char)
!=	O
NULL	O
&&	O
strcmp	(*(char),*(char))->(int)
(	O
msgstr	*(char)
,	O
msgid	*(char)
)	O
==	O
0	int
)	O
msgstr	*(char)
=	O
fuzzy_msgstr	*(char)
;	O
po_callback_message	(*(char),*(char),*(struct(*(char),long)),*(char),*(char),long,*(struct(*(char),long)),*(char),*(char),*(char),bool,bool)->(void)
(	O
NULL	O
,	O
msgid	*(char)
,	O
&	O
msgid_pos	*(struct(*(char),long))
,	O
NULL	O
,	O
msgstr	*(char)
,	O
strlen	(*(char))->(long)
(	O
msgstr	*(char)
)	O
+	O
1	int
,	O
&	O
msgstr_pos	*(struct(*(char),long))
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
false	int
,	O
next_is_obsolete	bool
)	O
;	O
}	O
else	O
{	O
po_xerror	*((int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),*(char),long,long,int,*(char))->(void))
(	O
PO_SEVERITY_ERROR	int
,	O
NULL	O
,	O
real_file_name	*(char)
,	O
gram_pos	struct(*(char),long)
.	O
line_number	long
,	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
,	O
false	int
,	O
_	O
(	O
"warning: syntax error, expected ';' after string"	*(char)
)	O
)	O
;	O
break	O
;	O
}	O
}	O
else	O
{	O
po_xerror	*((int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),*(char),long,long,int,*(char))->(void))
(	O
PO_SEVERITY_ERROR	int
,	O
NULL	O
,	O
real_file_name	*(char)
,	O
gram_pos	struct(*(char),long)
.	O
line_number	long
,	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
,	O
false	int
,	O
_	O
(	O
"warning: syntax error, expected '=' or ';' after string"	*(char)
)	O
)	O
;	O
break	O
;	O
}	O
}	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
NULL	O
;	O
real_file_name	*(char)
=	O
NULL	O
;	O
gram_pos	struct(*(char),long)
.	O
line_number	long
=	O
0	int
;	O
}	O
const	O
struct	O
catalog_input_format	struct(*((*(struct(*(struct`))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),*(char))->(void)),bool)
input_format_stringtable	struct(*((*(struct(*`)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),*(char))->(void)),bool)
=	O
{	O
stringtable_parse	(*(struct(*(struct(long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),*(char))->(void)
,	O
true	int
}	O
;	O
