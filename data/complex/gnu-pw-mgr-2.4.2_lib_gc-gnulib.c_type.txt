Gc_rc	enum(int,int,int,int,int,int,int,int,int)
gc_init	()->(enum(int,int,int,int,int,int,int,int,int))
(	O
void	O
)	O
{	O
return	O
GC_OK	int
;	O
}	O
void	O
gc_done	()->(void)
(	O
void	O
)	O
{	O
return	O
;	O
}	O
static	O
Gc_rc	enum(int,int,int,int,int,int,int,int,int)
randomize	(int,*(char),long)->(enum(int,int,int,int,int,int,int,int,int))
(	O
int	O
level	int
,	O
char	O
*	O
data	*(char)
,	O
size_t	long
datalen	long
)	O
{	O
int	O
fd	int
;	O
const	O
char	O
*	O
device	*(char)
;	O
size_t	long
len	long
=	O
0	int
;	O
int	O
rc	int
;	O
switch	O
(	O
level	int
)	O
{	O
case	O
0	int
:	O
device	*(char)
=	O
NAME_OF_NONCE_DEVICE	*(char)
;	O
break	O
;	O
case	O
1	int
:	O
device	*(char)
=	O
NAME_OF_PSEUDO_RANDOM_DEVICE	*(char)
;	O
break	O
;	O
default	O
:	O
device	*(char)
=	O
NAME_OF_RANDOM_DEVICE	*(char)
;	O
break	O
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
device	*(char)
,	O
"no"	*(char)
)	O
==	O
0	int
)	O
return	O
GC_RANDOM_ERROR	int
;	O
fd	int
=	O
open	(*(char),int)->(int)
(	O
device	*(char)
,	O
O_RDONLY	int
)	O
;	O
if	O
(	O
fd	int
<	O
0	int
)	O
return	O
GC_RANDOM_ERROR	int
;	O
do	O
{	O
ssize_t	long
tmp	long
;	O
tmp	long
=	O
read	(int,*(void),long)->(long)
(	O
fd	int
,	O
data	*(char)
,	O
datalen	long
)	O
;	O
if	O
(	O
tmp	long
<	O
0	int
)	O
{	O
int	O
save_errno	int
=	O
errno	O
;	O
close	(int)->(int)
(	O
fd	int
)	O
;	O
errno	O
=	O
save_errno	int
;	O
return	O
GC_RANDOM_ERROR	int
;	O
}	O
len	long
+=	O
tmp	long
;	O
}	O
while	O
(	O
len	long
<	O
datalen	long
)	O
;	O
rc	int
=	O
close	(int)->(int)
(	O
fd	int
)	O
;	O
if	O
(	O
rc	int
<	O
0	int
)	O
return	O
GC_RANDOM_ERROR	int
;	O
return	O
GC_OK	int
;	O
}	O
Gc_rc	enum(int,int,int,int,int,int,int,int,int)
gc_nonce	(*(char),long)->(enum(int,int,int,int,int,int,int,int,int))
(	O
char	O
*	O
data	*(char)
,	O
size_t	long
datalen	long
)	O
{	O
return	O
randomize	(int,*(char),long)->(enum(int,int,int,int,int,int,int,int,int))
(	O
0	int
,	O
data	*(char)
,	O
datalen	long
)	O
;	O
}	O
Gc_rc	enum(int,int,int,int,int,int,int,int,int)
gc_pseudo_random	(*(char),long)->(enum(int,int,int,int,int,int,int,int,int))
(	O
char	O
*	O
data	*(char)
,	O
size_t	long
datalen	long
)	O
{	O
return	O
randomize	(int,*(char),long)->(enum(int,int,int,int,int,int,int,int,int))
(	O
1	int
,	O
data	*(char)
,	O
datalen	long
)	O
;	O
}	O
Gc_rc	enum(int,int,int,int,int,int,int,int,int)
gc_random	(*(char),long)->(enum(int,int,int,int,int,int,int,int,int))
(	O
char	O
*	O
data	*(char)
,	O
size_t	long
datalen	long
)	O
{	O
return	O
randomize	(int,*(char),long)->(enum(int,int,int,int,int,int,int,int,int))
(	O
2	int
,	O
data	*(char)
,	O
datalen	long
)	O
;	O
}	O
void	O
gc_set_allocators	(*((long)->(*(void))),*((long)->(*(void))),*((*(void))->(int)),*((*(void),long)->(*(void))),*((*(void))->(void)))->(void)
(	O
gc_malloc_t	*((long)->(*(void)))
func_malloc	*((long)->(*(void)))
,	O
gc_malloc_t	*((long)->(*(void)))
secure_malloc	*((long)->(*(void)))
,	O
gc_secure_check_t	*((*(void))->(int))
secure_check	*((*(void))->(int))
,	O
gc_realloc_t	*((*(void),long)->(*(void)))
func_realloc	*((*(void),long)->(*(void)))
,	O
gc_free_t	*((*(void))->(void))
func_free	*((*(void))->(void))
)	O
{	O
return	O
;	O
}	O
typedef	O
struct	O
_gc_cipher_ctx	struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int))
{	O
Gc_cipher	enum(int,int,int,int,int,int,int,int,int,int)
alg	enum(int,int,int,int,int,int,int,int,int,int)
;	O
Gc_cipher_mode	enum(int,int,int)
mode	enum(int,int,int)
;	O
}	O
_gc_cipher_ctx	struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int))
;	O
Gc_rc	enum(int,int,int,int,int,int,int,int,int)
gc_cipher_open	(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int),*(*(void)))->(enum(int,int,int,int,int,int,int,int,int))
(	O
Gc_cipher	enum(int,int,int,int,int,int,int,int,int,int)
alg	enum(int,int,int,int,int,int,int,int,int,int)
,	O
Gc_cipher_mode	enum(int,int,int)
mode	enum(int,int,int)
,	O
gc_cipher_handle	*(void)
*	O
outhandle	*(*(void))
)	O
{	O
_gc_cipher_ctx	struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int))
*	O
ctx	*(struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int)))
;	O
Gc_rc	enum(int,int,int,int,int,int,int,int,int)
rc	int
=	O
GC_OK	int
;	O
ctx	*(struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int)))
=	O
calloc	(long,long)->(*(void))
(	O
sizeof	O
(	O
*	O
ctx	*(struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int)))
)	O
,	O
1	int
)	O
;	O
if	O
(	O
!	O
ctx	*(struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int)))
)	O
return	O
GC_MALLOC_ERROR	int
;	O
ctx	*(struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int)))
->	O
alg	enum(int,int,int,int,int,int,int,int,int,int)
=	O
alg	enum(int,int,int,int,int,int,int,int,int,int)
;	O
ctx	*(struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int)))
->	O
mode	enum(int,int,int)
=	O
mode	enum(int,int,int)
;	O
switch	O
(	O
alg	enum(int,int,int,int,int,int,int,int,int,int)
)	O
{	O
default	O
:	O
rc	int
=	O
GC_INVALID_CIPHER	int
;	O
}	O
if	O
(	O
rc	int
==	O
GC_OK	int
)	O
*	O
outhandle	*(*(void))
=	O
ctx	*(struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int)))
;	O
else	O
free	(*(void))->(void)
(	O
ctx	*(struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int)))
)	O
;	O
return	O
rc	int
;	O
}	O
Gc_rc	enum(int,int,int,int,int,int,int,int,int)
gc_cipher_setkey	(*(void),long,*(char))->(enum(int,int,int,int,int,int,int,int,int))
(	O
gc_cipher_handle	*(void)
handle	*(void)
,	O
size_t	long
keylen	long
,	O
const	O
char	O
*	O
key	*(char)
)	O
{	O
_gc_cipher_ctx	struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int))
*	O
ctx	*(struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int)))
=	O
handle	*(void)
;	O
switch	O
(	O
ctx	*(struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int)))
->	O
alg	enum(int,int,int,int,int,int,int,int,int,int)
)	O
{	O
default	O
:	O
return	O
GC_INVALID_CIPHER	int
;	O
}	O
return	O
GC_OK	int
;	O
}	O
Gc_rc	enum(int,int,int,int,int,int,int,int,int)
gc_cipher_setiv	(*(void),long,*(char))->(enum(int,int,int,int,int,int,int,int,int))
(	O
gc_cipher_handle	*(void)
handle	*(void)
,	O
size_t	long
ivlen	long
,	O
const	O
char	O
*	O
iv	*(char)
)	O
{	O
_gc_cipher_ctx	struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int))
*	O
ctx	*(struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int)))
=	O
handle	*(void)
;	O
switch	O
(	O
ctx	*(struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int)))
->	O
alg	enum(int,int,int,int,int,int,int,int,int,int)
)	O
{	O
default	O
:	O
return	O
GC_INVALID_CIPHER	int
;	O
}	O
return	O
GC_OK	int
;	O
}	O
Gc_rc	enum(int,int,int,int,int,int,int,int,int)
gc_cipher_encrypt_inline	(*(void),long,*(char))->(enum(int,int,int,int,int,int,int,int,int))
(	O
gc_cipher_handle	*(void)
handle	*(void)
,	O
size_t	long
len	long
,	O
char	O
*	O
data	*(char)
)	O
{	O
_gc_cipher_ctx	struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int))
*	O
ctx	*(struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int)))
=	O
handle	*(void)
;	O
switch	O
(	O
ctx	*(struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int)))
->	O
alg	enum(int,int,int,int,int,int,int,int,int,int)
)	O
{	O
default	O
:	O
return	O
GC_INVALID_CIPHER	int
;	O
}	O
return	O
GC_OK	int
;	O
}	O
Gc_rc	enum(int,int,int,int,int,int,int,int,int)
gc_cipher_decrypt_inline	(*(void),long,*(char))->(enum(int,int,int,int,int,int,int,int,int))
(	O
gc_cipher_handle	*(void)
handle	*(void)
,	O
size_t	long
len	long
,	O
char	O
*	O
data	*(char)
)	O
{	O
_gc_cipher_ctx	struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int))
*	O
ctx	*(struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int)))
=	O
handle	*(void)
;	O
switch	O
(	O
ctx	*(struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int)))
->	O
alg	enum(int,int,int,int,int,int,int,int,int,int)
)	O
{	O
default	O
:	O
return	O
GC_INVALID_CIPHER	int
;	O
}	O
return	O
GC_OK	int
;	O
}	O
Gc_rc	enum(int,int,int,int,int,int,int,int,int)
gc_cipher_close	(*(void))->(enum(int,int,int,int,int,int,int,int,int))
(	O
gc_cipher_handle	*(void)
handle	*(void)
)	O
{	O
_gc_cipher_ctx	struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int))
*	O
ctx	*(struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int)))
=	O
handle	*(void)
;	O
free	(*(void))->(void)
(	O
ctx	*(struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int)))
)	O
;	O
return	O
GC_OK	int
;	O
}	O
typedef	O
struct	O
_gc_hash_ctx	struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int),array(char))
{	O
Gc_hash	enum(int,int,int,int,int,int,int,int,int,int)
alg	enum(int,int,int,int,int,int,int,int,int,int)
;	O
Gc_hash_mode	enum(int,int)
mode	enum(int,int,int)
;	O
char	O
hash	enum(int,int,int,int,int,int,int,int,int,int)
[	O
MAX_DIGEST_SIZE	int
]	O
;	O
}	O
_gc_hash_ctx	struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int),array(char))
;	O
Gc_rc	enum(int,int,int,int,int,int,int,int,int)
gc_hash_open	(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int),*(*(void)))->(enum(int,int,int,int,int,int,int,int,int))
(	O
Gc_hash	enum(int,int,int,int,int,int,int,int,int,int)
hash	enum(int,int,int,int,int,int,int,int,int,int)
,	O
Gc_hash_mode	enum(int,int)
mode	enum(int,int,int)
,	O
gc_hash_handle	*(void)
*	O
outhandle	*(*(void))
)	O
{	O
_gc_hash_ctx	struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int),array(char))
*	O
ctx	*(struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int)))
;	O
Gc_rc	enum(int,int,int,int,int,int,int,int,int)
rc	int
=	O
GC_OK	int
;	O
if	O
(	O
mode	enum(int,int,int)
!=	O
0	int
)	O
return	O
GC_INVALID_HASH	int
;	O
ctx	*(struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int)))
=	O
calloc	(long,long)->(*(void))
(	O
sizeof	O
(	O
*	O
ctx	*(struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int)))
)	O
,	O
1	int
)	O
;	O
if	O
(	O
!	O
ctx	*(struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int)))
)	O
return	O
GC_MALLOC_ERROR	int
;	O
ctx	*(struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int)))
->	O
alg	enum(int,int,int,int,int,int,int,int,int,int)
=	O
hash	enum(int,int,int,int,int,int,int,int,int,int)
;	O
ctx	*(struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int)))
->	O
mode	enum(int,int,int)
=	O
mode	enum(int,int,int)
;	O
switch	O
(	O
hash	enum(int,int,int,int,int,int,int,int,int,int)
)	O
{	O
default	O
:	O
rc	int
=	O
GC_INVALID_HASH	int
;	O
break	O
;	O
}	O
if	O
(	O
rc	int
==	O
GC_OK	int
)	O
*	O
outhandle	*(*(void))
=	O
ctx	*(struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int)))
;	O
else	O
free	(*(void))->(void)
(	O
ctx	*(struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int)))
)	O
;	O
return	O
rc	int
;	O
}	O
Gc_rc	enum(int,int,int,int,int,int,int,int,int)
gc_hash_clone	(*(void),*(*(void)))->(enum(int,int,int,int,int,int,int,int,int))
(	O
gc_hash_handle	*(void)
handle	*(void)
,	O
gc_hash_handle	*(void)
*	O
outhandle	*(*(void))
)	O
{	O
_gc_hash_ctx	struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int),array(char))
*	O
in	*(void)
=	O
handle	*(void)
;	O
_gc_hash_ctx	struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int),array(char))
*	O
out	*(char)
;	O
*	O
outhandle	*(*(void))
=	O
out	*(char)
=	O
calloc	(long,long)->(*(void))
(	O
sizeof	O
(	O
*	O
out	*(char)
)	O
,	O
1	int
)	O
;	O
if	O
(	O
!	O
out	*(char)
)	O
return	O
GC_MALLOC_ERROR	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
out	*(char)
,	O
in	*(void)
,	O
sizeof	O
(	O
*	O
out	*(char)
)	O
)	O
;	O
return	O
GC_OK	int
;	O
}	O
size_t	long
gc_hash_digest_length	(enum(int,int,int,int,int,int,int,int,int,int))->(long)
(	O
Gc_hash	enum(int,int,int,int,int,int,int,int,int,int)
hash	enum(int,int,int,int,int,int,int,int,int,int)
)	O
{	O
size_t	long
len	long
;	O
switch	O
(	O
hash	enum(int,int,int,int,int,int,int,int,int,int)
)	O
{	O
case	O
GC_MD2	int
:	O
len	long
=	O
GC_MD2_DIGEST_SIZE	int
;	O
break	O
;	O
case	O
GC_MD4	int
:	O
len	long
=	O
GC_MD4_DIGEST_SIZE	int
;	O
break	O
;	O
case	O
GC_MD5	int
:	O
len	long
=	O
GC_MD5_DIGEST_SIZE	int
;	O
break	O
;	O
case	O
GC_RMD160	int
:	O
len	long
=	O
GC_RMD160_DIGEST_SIZE	int
;	O
break	O
;	O
case	O
GC_SHA1	int
:	O
len	long
=	O
GC_SHA1_DIGEST_SIZE	int
;	O
break	O
;	O
case	O
GC_SM3	int
:	O
len	long
=	O
GC_SM3_DIGEST_SIZE	int
;	O
break	O
;	O
default	O
:	O
return	O
0	int
;	O
}	O
return	O
len	long
;	O
}	O
void	O
gc_hash_write	(*(void),long,*(char))->(void)
(	O
gc_hash_handle	*(void)
handle	*(void)
,	O
size_t	long
len	long
,	O
const	O
char	O
*	O
data	*(char)
)	O
{	O
_gc_hash_ctx	struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int),array(char))
*	O
ctx	*(struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int)))
=	O
handle	*(void)
;	O
switch	O
(	O
ctx	*(struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int)))
->	O
alg	enum(int,int,int,int,int,int,int,int,int,int)
)	O
{	O
default	O
:	O
break	O
;	O
}	O
}	O
const	O
char	O
*	O
gc_hash_read	(*(void))->(*(char))
(	O
gc_hash_handle	*(void)
handle	*(void)
)	O
{	O
_gc_hash_ctx	struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int),array(char))
*	O
ctx	*(struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int)))
=	O
handle	*(void)
;	O
const	O
char	O
*	O
ret	*(char)
=	O
NULL	O
;	O
switch	O
(	O
ctx	*(struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int)))
->	O
alg	enum(int,int,int,int,int,int,int,int,int,int)
)	O
{	O
default	O
:	O
return	O
NULL	O
;	O
}	O
return	O
ret	*(char)
;	O
}	O
void	O
gc_hash_close	(*(void))->(void)
(	O
gc_hash_handle	*(void)
handle	*(void)
)	O
{	O
_gc_hash_ctx	struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int),array(char))
*	O
ctx	*(struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int)))
=	O
handle	*(void)
;	O
free	(*(void))->(void)
(	O
ctx	*(struct(enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int)))
)	O
;	O
}	O
Gc_rc	enum(int,int,int,int,int,int,int,int,int)
gc_hash_buffer	(enum(int,int,int,int,int,int,int,int,int,int),*(void),long,*(char))->(enum(int,int,int,int,int,int,int,int,int))
(	O
Gc_hash	enum(int,int,int,int,int,int,int,int,int,int)
hash	enum(int,int,int,int,int,int,int,int,int,int)
,	O
const	O
void	O
*	O
in	*(void)
,	O
size_t	long
inlen	long
,	O
char	O
*	O
resbuf	*(void)
)	O
{	O
switch	O
(	O
hash	enum(int,int,int,int,int,int,int,int,int,int)
)	O
{	O
default	O
:	O
return	O
GC_INVALID_HASH	int
;	O
}	O
return	O
GC_OK	int
;	O
}	O
Gc_rc	enum(int,int,int,int,int,int,int,int,int)
gc_hmac_sha1	(*(void),long,*(void),long,*(char))->(enum(int,int,int,int,int,int,int,int,int))
(	O
const	O
void	O
*	O
key	*(char)
,	O
size_t	long
keylen	long
,	O
const	O
void	O
*	O
in	*(void)
,	O
size_t	long
inlen	long
,	O
char	O
*	O
resbuf	*(void)
)	O
{	O
hmac_sha1	(*(void),long,*(void),long,*(void))->(int)
(	O
key	*(char)
,	O
keylen	long
,	O
in	*(void)
,	O
inlen	long
,	O
resbuf	*(void)
)	O
;	O
return	O
GC_OK	int
;	O
}	O
