static	O
int	O
dilog_series_1	(double,*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
const	O
int	O
kmax	int
=	O
1000	int
;	O
double	O
sum	double
=	O
x	double
;	O
double	O
term	double
=	O
x	double
;	O
int	O
k	int
;	O
for	O
(	O
k	int
=	O
2	int
;	O
k	int
<	O
kmax	int
;	O
k	int
++	O
)	O
{	O
const	O
double	O
rk	double
=	O
(	O
k	int
-	O
1.0	int
)	O
/	O
k	int
;	O
term	double
*=	O
x	double
;	O
term	double
*=	O
rk	double
*	O
rk	double
;	O
sum	double
+=	O
term	double
;	O
if	O
(	O
fabs	(double)->(double)
(	O
term	double
/	O
sum	double
)	O
<	O
GSL_DBL_EPSILON	int
)	O
break	O
;	O
}	O
result	*(struct(double,double))
->	O
val	double
=	O
sum	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
fabs	(double)->(double)
(	O
term	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
if	O
(	O
k	int
==	O
kmax	int
)	O
GSL_ERROR	O
(	O
"error"	*(char)
,	O
GSL_EMAXITER	int
)	O
;	O
else	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
series_2	(double,*(struct(double,double)))->(int)
(	O
double	O
r	*(struct(double,double))
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
static	O
const	O
int	O
kmax	int
=	O
100	int
;	O
double	O
rk	double
=	O
r	*(struct(double,double))
;	O
double	O
sum	double
=	O
0.5	int
*	O
r	*(struct(double,double))
;	O
int	O
k	int
;	O
for	O
(	O
k	int
=	O
2	int
;	O
k	int
<	O
10	int
;	O
k	int
++	O
)	O
{	O
double	O
ds	double
;	O
rk	double
*=	O
r	*(struct(double,double))
;	O
ds	double
=	O
rk	double
/	O
(	O
k	int
*	O
k	int
*	O
(	O
k	int
+	O
1.0	int
)	O
)	O
;	O
sum	double
+=	O
ds	double
;	O
}	O
for	O
(	O
;	O
k	int
<	O
kmax	int
;	O
k	int
++	O
)	O
{	O
double	O
ds	double
;	O
rk	double
*=	O
r	*(struct(double,double))
;	O
ds	double
=	O
rk	double
/	O
(	O
k	int
*	O
k	int
*	O
(	O
k	int
+	O
1.0	int
)	O
)	O
;	O
sum	double
+=	O
ds	double
;	O
if	O
(	O
fabs	(double)->(double)
(	O
ds	double
/	O
sum	double
)	O
<	O
0.5	int
*	O
GSL_DBL_EPSILON	int
)	O
break	O
;	O
}	O
result	*(struct(double,double))
->	O
val	double
=	O
sum	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
kmax	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
sum	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
dilog_series_2	(double,*(struct(double,double)))->(int)
(	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
const	O
int	O
stat_s3	int
=	O
series_2	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
result	*(struct(double,double))
)	O
;	O
double	O
t	double
;	O
if	O
(	O
x	double
>	O
0.01	int
)	O
t	double
=	O
(	O
1.0	int
-	O
x	double
)	O
*	O
log	(double)->(double)
(	O
1.0	int
-	O
x	double
)	O
/	O
x	double
;	O
else	O
{	O
static	O
const	O
double	O
c3	double
=	O
1.0	int
/	O
3.0	int
;	O
static	O
const	O
double	O
c4	double
=	O
1.0	int
/	O
4.0	int
;	O
static	O
const	O
double	O
c5	double
=	O
1.0	int
/	O
5.0	int
;	O
static	O
const	O
double	O
c6	double
=	O
1.0	int
/	O
6.0	int
;	O
static	O
const	O
double	O
c7	double
=	O
1.0	int
/	O
7.0	int
;	O
static	O
const	O
double	O
c8	double
=	O
1.0	int
/	O
8.0	int
;	O
const	O
double	O
t68	double
=	O
c6	double
+	O
x	double
*	O
(	O
c7	double
+	O
x	double
*	O
c8	double
)	O
;	O
const	O
double	O
t38	double
=	O
c3	double
+	O
x	double
*	O
(	O
c4	double
+	O
x	double
*	O
(	O
c5	double
+	O
x	double
*	O
t68	double
)	O
)	O
;	O
t	double
=	O
(	O
x	double
-	O
1.0	int
)	O
*	O
(	O
1.0	int
+	O
x	double
*	O
(	O
0.5	int
+	O
x	double
*	O
t38	double
)	O
)	O
;	O
}	O
result	*(struct(double,double))
->	O
val	double
+=	O
1.0	int
+	O
t	double
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
t	double
)	O
;	O
return	O
stat_s3	int
;	O
}	O
static	O
int	O
dilog_xge0	(double,*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
if	O
(	O
x	double
>	O
2.0	int
)	O
{	O
gsl_sf_result	struct(double,double)
ser	struct(double,double)
;	O
const	O
int	O
stat_ser	int
=	O
dilog_series_2	(double,*(struct(double,double)))->(int)
(	O
1.0	int
/	O
x	double
,	O
&	O
ser	struct(double,double)
)	O
;	O
const	O
double	O
log_x	double
=	O
log	(double)->(double)
(	O
x	double
)	O
;	O
const	O
double	O
t1	double
=	O
M_PI	int
*	O
M_PI	int
/	O
3.0	int
;	O
const	O
double	O
t2	double
=	O
ser	struct(double,double)
.	O
val	double
;	O
const	O
double	O
t3	double
=	O
0.5	int
*	O
log_x	double
*	O
log_x	double
;	O
result	*(struct(double,double))
->	O
val	double
=	O
t1	double
-	O
t2	double
-	O
t3	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
log_x	double
)	O
+	O
ser	struct(double,double)
.	O
err	double
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	(double)->(double)
(	O
t1	double
)	O
+	O
fabs	(double)->(double)
(	O
t2	double
)	O
+	O
fabs	(double)->(double)
(	O
t3	double
)	O
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
stat_ser	int
;	O
}	O
else	O
if	O
(	O
x	double
>	O
1.01	int
)	O
{	O
gsl_sf_result	struct(double,double)
ser	struct(double,double)
;	O
const	O
int	O
stat_ser	int
=	O
dilog_series_2	(double,*(struct(double,double)))->(int)
(	O
1.0	int
-	O
1.0	int
/	O
x	double
,	O
&	O
ser	struct(double,double)
)	O
;	O
const	O
double	O
log_x	double
=	O
log	(double)->(double)
(	O
x	double
)	O
;	O
const	O
double	O
log_term	double
=	O
log_x	double
*	O
(	O
log	(double)->(double)
(	O
1.0	int
-	O
1.0	int
/	O
x	double
)	O
+	O
0.5	int
*	O
log_x	double
)	O
;	O
const	O
double	O
t1	double
=	O
M_PI	int
*	O
M_PI	int
/	O
6.0	int
;	O
const	O
double	O
t2	double
=	O
ser	struct(double,double)
.	O
val	double
;	O
const	O
double	O
t3	double
=	O
log_term	double
;	O
result	*(struct(double,double))
->	O
val	double
=	O
t1	double
+	O
t2	double
-	O
t3	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
log_x	double
)	O
+	O
ser	struct(double,double)
.	O
err	double
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	(double)->(double)
(	O
t1	double
)	O
+	O
fabs	(double)->(double)
(	O
t2	double
)	O
+	O
fabs	(double)->(double)
(	O
t3	double
)	O
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
stat_ser	int
;	O
}	O
else	O
if	O
(	O
x	double
>	O
1.0	int
)	O
{	O
const	O
double	O
eps	double
=	O
x	double
-	O
1.0	int
;	O
const	O
double	O
lne	double
=	O
log	(double)->(double)
(	O
eps	double
)	O
;	O
const	O
double	O
c0	double
=	O
M_PI	int
*	O
M_PI	int
/	O
6.0	int
;	O
const	O
double	O
c1	double
=	O
1.0	int
-	O
lne	double
;	O
const	O
double	O
c2	double
=	O
-	O
(	O
1.0	int
-	O
2.0	int
*	O
lne	double
)	O
/	O
4.0	int
;	O
const	O
double	O
c3	double
=	O
(	O
1.0	int
-	O
3.0	int
*	O
lne	double
)	O
/	O
9.0	int
;	O
const	O
double	O
c4	double
=	O
-	O
(	O
1.0	int
-	O
4.0	int
*	O
lne	double
)	O
/	O
16.0	int
;	O
const	O
double	O
c5	double
=	O
(	O
1.0	int
-	O
5.0	int
*	O
lne	double
)	O
/	O
25.0	int
;	O
const	O
double	O
c6	double
=	O
-	O
(	O
1.0	int
-	O
6.0	int
*	O
lne	double
)	O
/	O
36.0	int
;	O
const	O
double	O
c7	double
=	O
(	O
1.0	int
-	O
7.0	int
*	O
lne	double
)	O
/	O
49.0	int
;	O
const	O
double	O
c8	double
=	O
-	O
(	O
1.0	int
-	O
8.0	int
*	O
lne	double
)	O
/	O
64.0	int
;	O
result	*(struct(double,double))
->	O
val	double
=	O
c0	double
+	O
eps	double
*	O
(	O
c1	double
+	O
eps	double
*	O
(	O
c2	double
+	O
eps	double
*	O
(	O
c3	double
+	O
eps	double
*	O
(	O
c4	double
+	O
eps	double
*	O
(	O
c5	double
+	O
eps	double
*	O
(	O
c6	double
+	O
eps	double
*	O
(	O
c7	double
+	O
eps	double
*	O
c8	double
)	O
)	O
)	O
)	O
)	O
)	O
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
==	O
1.0	int
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
M_PI	int
*	O
M_PI	int
/	O
6.0	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
M_PI	int
*	O
M_PI	int
/	O
6.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
>	O
0.5	int
)	O
{	O
gsl_sf_result	struct(double,double)
ser	struct(double,double)
;	O
const	O
int	O
stat_ser	int
=	O
dilog_series_2	(double,*(struct(double,double)))->(int)
(	O
1.0	int
-	O
x	double
,	O
&	O
ser	struct(double,double)
)	O
;	O
const	O
double	O
log_x	double
=	O
log	(double)->(double)
(	O
x	double
)	O
;	O
const	O
double	O
t1	double
=	O
M_PI	int
*	O
M_PI	int
/	O
6.0	int
;	O
const	O
double	O
t2	double
=	O
ser	struct(double,double)
.	O
val	double
;	O
const	O
double	O
t3	double
=	O
log_x	double
*	O
log	(double)->(double)
(	O
1.0	int
-	O
x	double
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
t1	double
-	O
t2	double
-	O
t3	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
log_x	double
)	O
+	O
ser	struct(double,double)
.	O
err	double
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	(double)->(double)
(	O
t1	double
)	O
+	O
fabs	(double)->(double)
(	O
t2	double
)	O
+	O
fabs	(double)->(double)
(	O
t3	double
)	O
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
stat_ser	int
;	O
}	O
else	O
if	O
(	O
x	double
>	O
0.25	int
)	O
{	O
return	O
dilog_series_2	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
x	double
>	O
0.0	int
)	O
{	O
return	O
dilog_series_1	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
0.0	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
dilogc_series_1	(double,double,double,*(struct(double,double)),*(struct(double,double)))->(int)
(	O
const	O
double	O
r	*(struct(double,double))
,	O
const	O
double	O
x	double
,	O
const	O
double	O
y	double
,	O
gsl_sf_result	struct(double,double)
*	O
real_result	*(struct(double,double))
,	O
gsl_sf_result	struct(double,double)
*	O
imag_result	*(struct(double,double))
)	O
{	O
const	O
double	O
cos_theta	double
=	O
x	double
/	O
r	*(struct(double,double))
;	O
const	O
double	O
sin_theta	double
=	O
y	double
/	O
r	*(struct(double,double))
;	O
const	O
double	O
alpha	double
=	O
1.0	int
-	O
cos_theta	double
;	O
const	O
double	O
beta	double
=	O
sin_theta	double
;	O
double	O
ck	double
=	O
cos_theta	double
;	O
double	O
sk	double
=	O
sin_theta	double
;	O
double	O
rk	double
=	O
r	*(struct(double,double))
;	O
double	O
real_sum	double
=	O
r	*(struct(double,double))
*	O
ck	double
;	O
double	O
imag_sum	double
=	O
r	*(struct(double,double))
*	O
sk	double
;	O
const	O
int	O
kmax	int
=	O
50	int
+	O
(	O
int	O
)	O
(	O
22.0	int
/	O
(	O
-	O
log	(double)->(double)
(	O
r	*(struct(double,double))
)	O
)	O
)	O
;	O
int	O
k	int
;	O
for	O
(	O
k	int
=	O
2	int
;	O
k	int
<	O
kmax	int
;	O
k	int
++	O
)	O
{	O
double	O
dr	double
,	O
di	double
;	O
double	O
ck_tmp	double
=	O
ck	double
;	O
ck	double
=	O
ck	double
-	O
(	O
alpha	double
*	O
ck	double
+	O
beta	double
*	O
sk	double
)	O
;	O
sk	double
=	O
sk	double
-	O
(	O
alpha	double
*	O
sk	double
-	O
beta	double
*	O
ck_tmp	double
)	O
;	O
rk	double
*=	O
r	*(struct(double,double))
;	O
dr	double
=	O
rk	double
/	O
(	O
(	O
double	O
)	O
k	int
*	O
k	int
)	O
*	O
ck	double
;	O
di	double
=	O
rk	double
/	O
(	O
(	O
double	O
)	O
k	int
*	O
k	int
)	O
*	O
sk	double
;	O
real_sum	double
+=	O
dr	double
;	O
imag_sum	double
+=	O
di	double
;	O
if	O
(	O
fabs	(double)->(double)
(	O
(	O
dr	double
*	O
dr	double
+	O
di	double
*	O
di	double
)	O
/	O
(	O
real_sum	double
*	O
real_sum	double
+	O
imag_sum	double
*	O
imag_sum	double
)	O
)	O
<	O
GSL_DBL_EPSILON	int
*	O
GSL_DBL_EPSILON	int
)	O
break	O
;	O
}	O
real_result	*(struct(double,double))
->	O
val	double
=	O
real_sum	double
;	O
real_result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
kmax	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
real_sum	double
)	O
;	O
imag_result	*(struct(double,double))
->	O
val	double
=	O
imag_sum	double
;	O
imag_result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
kmax	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
imag_sum	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
series_2_c	(double,double,double,*(struct(double,double)),*(struct(double,double)))->(int)
(	O
double	O
r	*(struct(double,double))
,	O
double	O
x	double
,	O
double	O
y	double
,	O
gsl_sf_result	struct(double,double)
*	O
sum_re	*(struct(double,double))
,	O
gsl_sf_result	struct(double,double)
*	O
sum_im	*(struct(double,double))
)	O
{	O
const	O
double	O
cos_theta	double
=	O
x	double
/	O
r	*(struct(double,double))
;	O
const	O
double	O
sin_theta	double
=	O
y	double
/	O
r	*(struct(double,double))
;	O
const	O
double	O
alpha	double
=	O
1.0	int
-	O
cos_theta	double
;	O
const	O
double	O
beta	double
=	O
sin_theta	double
;	O
double	O
ck	double
=	O
cos_theta	double
;	O
double	O
sk	double
=	O
sin_theta	double
;	O
double	O
rk	double
=	O
r	*(struct(double,double))
;	O
double	O
real_sum	double
=	O
0.5	int
*	O
r	*(struct(double,double))
*	O
ck	double
;	O
double	O
imag_sum	double
=	O
0.5	int
*	O
r	*(struct(double,double))
*	O
sk	double
;	O
const	O
int	O
kmax	int
=	O
30	int
+	O
(	O
int	O
)	O
(	O
18.0	int
/	O
(	O
-	O
log	(double)->(double)
(	O
r	*(struct(double,double))
)	O
)	O
)	O
;	O
int	O
k	int
;	O
for	O
(	O
k	int
=	O
2	int
;	O
k	int
<	O
kmax	int
;	O
k	int
++	O
)	O
{	O
double	O
dr	double
,	O
di	double
;	O
const	O
double	O
ck_tmp	double
=	O
ck	double
;	O
ck	double
=	O
ck	double
-	O
(	O
alpha	double
*	O
ck	double
+	O
beta	double
*	O
sk	double
)	O
;	O
sk	double
=	O
sk	double
-	O
(	O
alpha	double
*	O
sk	double
-	O
beta	double
*	O
ck_tmp	double
)	O
;	O
rk	double
*=	O
r	*(struct(double,double))
;	O
dr	double
=	O
rk	double
/	O
(	O
(	O
double	O
)	O
k	int
*	O
k	int
*	O
(	O
k	int
+	O
1.0	int
)	O
)	O
*	O
ck	double
;	O
di	double
=	O
rk	double
/	O
(	O
(	O
double	O
)	O
k	int
*	O
k	int
*	O
(	O
k	int
+	O
1.0	int
)	O
)	O
*	O
sk	double
;	O
real_sum	double
+=	O
dr	double
;	O
imag_sum	double
+=	O
di	double
;	O
if	O
(	O
fabs	(double)->(double)
(	O
(	O
dr	double
*	O
dr	double
+	O
di	double
*	O
di	double
)	O
/	O
(	O
real_sum	double
*	O
real_sum	double
+	O
imag_sum	double
*	O
imag_sum	double
)	O
)	O
<	O
GSL_DBL_EPSILON	int
*	O
GSL_DBL_EPSILON	int
)	O
break	O
;	O
}	O
sum_re	*(struct(double,double))
->	O
val	double
=	O
real_sum	double
;	O
sum_re	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
kmax	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
real_sum	double
)	O
;	O
sum_im	*(struct(double,double))
->	O
val	double
=	O
imag_sum	double
;	O
sum_im	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
kmax	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
imag_sum	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
dilogc_series_2	(double,double,double,*(struct(double,double)),*(struct(double,double)))->(int)
(	O
const	O
double	O
r	*(struct(double,double))
,	O
const	O
double	O
x	double
,	O
const	O
double	O
y	double
,	O
gsl_sf_result	struct(double,double)
*	O
real_dl	*(struct(double,double))
,	O
gsl_sf_result	struct(double,double)
*	O
imag_dl	*(struct(double,double))
)	O
{	O
if	O
(	O
r	*(struct(double,double))
==	O
0.0	int
)	O
{	O
real_dl	*(struct(double,double))
->	O
val	double
=	O
0.0	int
;	O
imag_dl	*(struct(double,double))
->	O
val	double
=	O
0.0	int
;	O
real_dl	*(struct(double,double))
->	O
err	double
=	O
0.0	int
;	O
imag_dl	*(struct(double,double))
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
gsl_sf_result	struct(double,double)
sum_re	*(struct(double,double))
;	O
gsl_sf_result	struct(double,double)
sum_im	*(struct(double,double))
;	O
const	O
int	O
stat_s3	int
=	O
series_2_c	(double,double,double,*(struct(double,double)),*(struct(double,double)))->(int)
(	O
r	*(struct(double,double))
,	O
x	double
,	O
y	double
,	O
&	O
sum_re	*(struct(double,double))
,	O
&	O
sum_im	*(struct(double,double))
)	O
;	O
gsl_sf_result	struct(double,double)
ln_omz_r	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
ln_omz_theta	struct(double,double)
;	O
const	O
int	O
stat_log	int
=	O
gsl_sf_complex_log_e	(double,double,*(struct(double,double)),*(struct(double,double)))->(int)
(	O
1.0	int
-	O
x	double
,	O
-	O
y	double
,	O
&	O
ln_omz_r	struct(double,double)
,	O
&	O
ln_omz_theta	struct(double,double)
)	O
;	O
const	O
double	O
t_x	double
=	O
(	O
ln_omz_r	struct(double,double)
.	O
val	double
*	O
x	double
+	O
ln_omz_theta	struct(double,double)
.	O
val	double
*	O
y	double
)	O
/	O
(	O
r	*(struct(double,double))
*	O
r	*(struct(double,double))
)	O
;	O
const	O
double	O
t_y	double
=	O
(	O
-	O
ln_omz_r	struct(double,double)
.	O
val	double
*	O
y	double
+	O
ln_omz_theta	struct(double,double)
.	O
val	double
*	O
x	double
)	O
/	O
(	O
r	*(struct(double,double))
*	O
r	*(struct(double,double))
)	O
;	O
const	O
double	O
r_x	double
=	O
(	O
1.0	int
-	O
x	double
)	O
*	O
t_x	double
+	O
y	double
*	O
t_y	double
;	O
const	O
double	O
r_y	double
=	O
(	O
1.0	int
-	O
x	double
)	O
*	O
t_y	double
-	O
y	double
*	O
t_x	double
;	O
real_dl	*(struct(double,double))
->	O
val	double
=	O
sum_re	*(struct(double,double))
.	O
val	double
+	O
r_x	double
+	O
1.0	int
;	O
imag_dl	*(struct(double,double))
->	O
val	double
=	O
sum_im	*(struct(double,double))
.	O
val	double
+	O
r_y	double
;	O
real_dl	*(struct(double,double))
->	O
err	double
=	O
sum_re	*(struct(double,double))
.	O
err	double
+	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	(double)->(double)
(	O
real_dl	*(struct(double,double))
->	O
val	double
)	O
+	O
fabs	(double)->(double)
(	O
r_x	double
)	O
)	O
;	O
imag_dl	*(struct(double,double))
->	O
err	double
=	O
sum_im	*(struct(double,double))
.	O
err	double
+	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	(double)->(double)
(	O
imag_dl	*(struct(double,double))
->	O
val	double
)	O
+	O
fabs	(double)->(double)
(	O
r_y	double
)	O
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_s3	int
,	O
stat_log	int
)	O
;	O
}	O
}	O
static	O
int	O
dilogc_series_3	(double,double,double,*(struct(double,double)),*(struct(double,double)))->(int)
(	O
const	O
double	O
r	*(struct(double,double))
,	O
const	O
double	O
x	double
,	O
const	O
double	O
y	double
,	O
gsl_sf_result	struct(double,double)
*	O
real_result	*(struct(double,double))
,	O
gsl_sf_result	struct(double,double)
*	O
imag_result	*(struct(double,double))
)	O
{	O
const	O
double	O
theta	double
=	O
atan2	(double,double)->(double)
(	O
y	double
,	O
x	double
)	O
;	O
const	O
double	O
cos_theta	double
=	O
x	double
/	O
r	*(struct(double,double))
;	O
const	O
double	O
sin_theta	double
=	O
y	double
/	O
r	*(struct(double,double))
;	O
const	O
double	O
a	double
=	O
log	(double)->(double)
(	O
r	*(struct(double,double))
)	O
;	O
const	O
double	O
omc	double
=	O
1.0	int
-	O
cos_theta	double
;	O
const	O
double	O
omc2	double
=	O
omc	double
*	O
omc	double
;	O
double	O
H_re	array(double)
[	O
7	int
]	O
;	O
double	O
H_im	array(double)
[	O
7	int
]	O
;	O
double	O
an	double
,	O
nfact	double
;	O
double	O
sum_re	*(struct(double,double))
,	O
sum_im	*(struct(double,double))
;	O
gsl_sf_result	struct(double,double)
Him0	struct(double,double)
;	O
int	O
n	int
;	O
H_re	array(double)
[	O
0	int
]	O
=	O
M_PI	int
*	O
M_PI	int
/	O
6.0	int
+	O
0.25	int
*	O
(	O
theta	double
*	O
theta	double
-	O
2.0	int
*	O
M_PI	int
*	O
fabs	(double)->(double)
(	O
theta	double
)	O
)	O
;	O
gsl_sf_clausen_e	(double,*(struct(double,double)))->(int)
(	O
theta	double
,	O
&	O
Him0	struct(double,double)
)	O
;	O
H_im	array(double)
[	O
0	int
]	O
=	O
Him0	struct(double,double)
.	O
val	double
;	O
H_re	array(double)
[	O
1	int
]	O
=	O
-	O
0.5	int
*	O
log	(double)->(double)
(	O
2.0	int
*	O
omc	double
)	O
;	O
H_im	array(double)
[	O
1	int
]	O
=	O
-	O
atan2	(double,double)->(double)
(	O
-	O
sin_theta	double
,	O
omc	double
)	O
;	O
H_re	array(double)
[	O
2	int
]	O
=	O
-	O
0.5	int
;	O
H_im	array(double)
[	O
2	int
]	O
=	O
0.5	int
*	O
sin_theta	double
/	O
omc	double
;	O
H_re	array(double)
[	O
3	int
]	O
=	O
-	O
0.5	int
/	O
omc	double
;	O
H_im	array(double)
[	O
3	int
]	O
=	O
0.0	int
;	O
H_re	array(double)
[	O
4	int
]	O
=	O
0.0	int
;	O
H_im	array(double)
[	O
4	int
]	O
=	O
-	O
0.5	int
*	O
sin_theta	double
/	O
omc2	double
;	O
H_re	array(double)
[	O
5	int
]	O
=	O
0.5	int
*	O
(	O
2.0	int
+	O
cos_theta	double
)	O
/	O
omc2	double
;	O
H_im	array(double)
[	O
5	int
]	O
=	O
0.0	int
;	O
H_re	array(double)
[	O
6	int
]	O
=	O
0.0	int
;	O
H_im	array(double)
[	O
6	int
]	O
=	O
0.5	int
*	O
sin_theta	double
/	O
(	O
omc2	double
*	O
omc2	double
*	O
omc	double
)	O
*	O
(	O
8.0	int
*	O
omc	double
-	O
sin_theta	double
*	O
sin_theta	double
*	O
(	O
3.0	int
+	O
cos_theta	double
)	O
)	O
;	O
sum_re	*(struct(double,double))
=	O
H_re	array(double)
[	O
0	int
]	O
;	O
sum_im	*(struct(double,double))
=	O
H_im	array(double)
[	O
0	int
]	O
;	O
an	double
=	O
1.0	int
;	O
nfact	double
=	O
1.0	int
;	O
for	O
(	O
n	int
=	O
1	int
;	O
n	int
<=	O
6	int
;	O
n	int
++	O
)	O
{	O
double	O
t	double
;	O
an	double
*=	O
a	double
;	O
nfact	double
*=	O
n	int
;	O
t	double
=	O
an	double
/	O
nfact	double
;	O
sum_re	*(struct(double,double))
+=	O
t	double
*	O
H_re	array(double)
[	O
n	int
]	O
;	O
sum_im	*(struct(double,double))
+=	O
t	double
*	O
H_im	array(double)
[	O
n	int
]	O
;	O
}	O
real_result	*(struct(double,double))
->	O
val	double
=	O
sum_re	*(struct(double,double))
;	O
real_result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
6.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
sum_re	*(struct(double,double))
)	O
+	O
fabs	(double)->(double)
(	O
an	double
/	O
nfact	double
)	O
;	O
imag_result	*(struct(double,double))
->	O
val	double
=	O
sum_im	*(struct(double,double))
;	O
imag_result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
6.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
sum_im	*(struct(double,double))
)	O
+	O
Him0	struct(double,double)
.	O
err	double
+	O
fabs	(double)->(double)
(	O
an	double
/	O
nfact	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
dilogc_fundamental	(double,double,double,*(struct(double,double)),*(struct(double,double)))->(int)
(	O
double	O
r	*(struct(double,double))
,	O
double	O
x	double
,	O
double	O
y	double
,	O
gsl_sf_result	struct(double,double)
*	O
real_dl	*(struct(double,double))
,	O
gsl_sf_result	struct(double,double)
*	O
imag_dl	*(struct(double,double))
)	O
{	O
if	O
(	O
r	*(struct(double,double))
>	O
0.98	int
)	O
return	O
dilogc_series_3	(double,double,double,*(struct(double,double)),*(struct(double,double)))->(int)
(	O
r	*(struct(double,double))
,	O
x	double
,	O
y	double
,	O
real_dl	*(struct(double,double))
,	O
imag_dl	*(struct(double,double))
)	O
;	O
else	O
if	O
(	O
r	*(struct(double,double))
>	O
0.25	int
)	O
return	O
dilogc_series_2	(double,double,double,*(struct(double,double)),*(struct(double,double)))->(int)
(	O
r	*(struct(double,double))
,	O
x	double
,	O
y	double
,	O
real_dl	*(struct(double,double))
,	O
imag_dl	*(struct(double,double))
)	O
;	O
else	O
return	O
dilogc_series_1	(double,double,double,*(struct(double,double)),*(struct(double,double)))->(int)
(	O
r	*(struct(double,double))
,	O
x	double
,	O
y	double
,	O
real_dl	*(struct(double,double))
,	O
imag_dl	*(struct(double,double))
)	O
;	O
}	O
static	O
int	O
dilogc_unitdisk	(double,double,*(struct(double,double)),*(struct(double,double)))->(int)
(	O
double	O
x	double
,	O
double	O
y	double
,	O
gsl_sf_result	struct(double,double)
*	O
real_dl	*(struct(double,double))
,	O
gsl_sf_result	struct(double,double)
*	O
imag_dl	*(struct(double,double))
)	O
{	O
static	O
const	O
double	O
MAGIC_SPLIT_VALUE	double
=	O
0.732	int
;	O
static	O
const	O
double	O
zeta2	double
=	O
M_PI	int
*	O
M_PI	int
/	O
6.0	int
;	O
const	O
double	O
r	*(struct(double,double))
=	O
hypot	(double,double)->(double)
(	O
x	double
,	O
y	double
)	O
;	O
if	O
(	O
x	double
>	O
MAGIC_SPLIT_VALUE	double
)	O
{	O
const	O
double	O
x_tmp	double
=	O
1.0	int
-	O
x	double
;	O
const	O
double	O
y_tmp	double
=	O
-	O
y	double
;	O
const	O
double	O
r_tmp	double
=	O
hypot	(double,double)->(double)
(	O
x_tmp	double
,	O
y_tmp	double
)	O
;	O
gsl_sf_result	struct(double,double)
result_re_tmp	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
result_im_tmp	struct(double,double)
;	O
const	O
int	O
stat_dilog	int
=	O
dilogc_fundamental	(double,double,double,*(struct(double,double)),*(struct(double,double)))->(int)
(	O
r_tmp	double
,	O
x_tmp	double
,	O
y_tmp	double
,	O
&	O
result_re_tmp	struct(double,double)
,	O
&	O
result_im_tmp	struct(double,double)
)	O
;	O
const	O
double	O
lnz	double
=	O
log	(double)->(double)
(	O
r	*(struct(double,double))
)	O
;	O
const	O
double	O
lnomz	double
=	O
log	(double)->(double)
(	O
r_tmp	double
)	O
;	O
const	O
double	O
argz	double
=	O
atan2	(double,double)->(double)
(	O
y	double
,	O
x	double
)	O
;	O
const	O
double	O
argomz	double
=	O
atan2	(double,double)->(double)
(	O
y_tmp	double
,	O
x_tmp	double
)	O
;	O
real_dl	*(struct(double,double))
->	O
val	double
=	O
-	O
result_re_tmp	struct(double,double)
.	O
val	double
+	O
zeta2	double
-	O
lnz	double
*	O
lnomz	double
+	O
argz	double
*	O
argomz	double
;	O
real_dl	*(struct(double,double))
->	O
err	double
=	O
result_re_tmp	struct(double,double)
.	O
err	double
;	O
real_dl	*(struct(double,double))
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
zeta2	double
+	O
fabs	(double)->(double)
(	O
lnz	double
*	O
lnomz	double
)	O
+	O
fabs	(double)->(double)
(	O
argz	double
*	O
argomz	double
)	O
)	O
;	O
imag_dl	*(struct(double,double))
->	O
val	double
=	O
-	O
result_im_tmp	struct(double,double)
.	O
val	double
-	O
argz	double
*	O
lnomz	double
-	O
argomz	double
*	O
lnz	double
;	O
imag_dl	*(struct(double,double))
->	O
err	double
=	O
result_im_tmp	struct(double,double)
.	O
err	double
;	O
imag_dl	*(struct(double,double))
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	(double)->(double)
(	O
argz	double
*	O
lnomz	double
)	O
+	O
fabs	(double)->(double)
(	O
argomz	double
*	O
lnz	double
)	O
)	O
;	O
return	O
stat_dilog	int
;	O
}	O
else	O
{	O
return	O
dilogc_fundamental	(double,double,double,*(struct(double,double)),*(struct(double,double)))->(int)
(	O
r	*(struct(double,double))
,	O
x	double
,	O
y	double
,	O
real_dl	*(struct(double,double))
,	O
imag_dl	*(struct(double,double))
)	O
;	O
}	O
}	O
int	O
gsl_sf_dilog_e	(double,*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
if	O
(	O
x	double
>=	O
0.0	int
)	O
{	O
return	O
dilog_xge0	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
{	O
gsl_sf_result	struct(double,double)
d1	struct(double,double)
,	O
d2	struct(double,double)
;	O
int	O
stat_d1	int
=	O
dilog_xge0	(double,*(struct(double,double)))->(int)
(	O
-	O
x	double
,	O
&	O
d1	struct(double,double)
)	O
;	O
int	O
stat_d2	int
=	O
dilog_xge0	(double,*(struct(double,double)))->(int)
(	O
x	double
*	O
x	double
,	O
&	O
d2	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
-	O
d1	struct(double,double)
.	O
val	double
+	O
0.5	int
*	O
d2	struct(double,double)
.	O
val	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
d1	struct(double,double)
.	O
err	double
+	O
0.5	int
*	O
d2	struct(double,double)
.	O
err	double
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_d1	int
,	O
stat_d2	int
)	O
;	O
}	O
}	O
int	O
gsl_sf_complex_dilog_xy_e	(double,double,*(struct(double,double)),*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
const	O
double	O
y	double
,	O
gsl_sf_result	struct(double,double)
*	O
real_dl	*(struct(double,double))
,	O
gsl_sf_result	struct(double,double)
*	O
imag_dl	*(struct(double,double))
)	O
{	O
const	O
double	O
zeta2	double
=	O
M_PI	int
*	O
M_PI	int
/	O
6.0	int
;	O
const	O
double	O
r2	double
=	O
x	double
*	O
x	double
+	O
y	double
*	O
y	double
;	O
if	O
(	O
y	double
==	O
0.0	int
)	O
{	O
if	O
(	O
x	double
>=	O
1.0	int
)	O
{	O
imag_dl	*(struct(double,double))
->	O
val	double
=	O
-	O
M_PI	int
*	O
log	(double)->(double)
(	O
x	double
)	O
;	O
imag_dl	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
imag_dl	*(struct(double,double))
->	O
val	double
)	O
;	O
}	O
else	O
{	O
imag_dl	*(struct(double,double))
->	O
val	double
=	O
0.0	int
;	O
imag_dl	*(struct(double,double))
->	O
err	double
=	O
0.0	int
;	O
}	O
return	O
gsl_sf_dilog_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
real_dl	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
fabs	(double)->(double)
(	O
r2	double
-	O
1.0	int
)	O
<	O
GSL_DBL_EPSILON	int
)	O
{	O
const	O
double	O
theta	double
=	O
atan2	(double,double)->(double)
(	O
y	double
,	O
x	double
)	O
;	O
const	O
double	O
term1	double
=	O
theta	double
*	O
theta	double
/	O
4.0	int
;	O
const	O
double	O
term2	double
=	O
M_PI	int
*	O
fabs	(double)->(double)
(	O
theta	double
)	O
/	O
2.0	int
;	O
real_dl	*(struct(double,double))
->	O
val	double
=	O
zeta2	double
+	O
term1	double
-	O
term2	double
;	O
real_dl	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
zeta2	double
+	O
term1	double
+	O
term2	double
)	O
;	O
return	O
gsl_sf_clausen_e	(double,*(struct(double,double)))->(int)
(	O
theta	double
,	O
imag_dl	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
r2	double
<	O
1.0	int
)	O
{	O
return	O
dilogc_unitdisk	(double,double,*(struct(double,double)),*(struct(double,double)))->(int)
(	O
x	double
,	O
y	double
,	O
real_dl	*(struct(double,double))
,	O
imag_dl	*(struct(double,double))
)	O
;	O
}	O
else	O
{	O
const	O
double	O
r	*(struct(double,double))
=	O
sqrt	(double)->(double)
(	O
r2	double
)	O
;	O
const	O
double	O
x_tmp	double
=	O
x	double
/	O
r2	double
;	O
const	O
double	O
y_tmp	double
=	O
-	O
y	double
/	O
r2	double
;	O
gsl_sf_result	struct(double,double)
result_re_tmp	struct(double,double)
,	O
result_im_tmp	struct(double,double)
;	O
const	O
int	O
stat_dilog	int
=	O
dilogc_unitdisk	(double,double,*(struct(double,double)),*(struct(double,double)))->(int)
(	O
x_tmp	double
,	O
y_tmp	double
,	O
&	O
result_re_tmp	struct(double,double)
,	O
&	O
result_im_tmp	struct(double,double)
)	O
;	O
const	O
double	O
theta	double
=	O
atan2	(double,double)->(double)
(	O
y	double
,	O
x	double
)	O
;	O
const	O
double	O
theta_abs	double
=	O
fabs	(double)->(double)
(	O
theta	double
)	O
;	O
const	O
double	O
theta_sgn	double
=	O
(	O
theta	double
<	O
0.0	int
?	O
-	O
1.0	int
:	O
1.0	int
)	O
;	O
const	O
double	O
ln_minusz_re	double
=	O
log	(double)->(double)
(	O
r	*(struct(double,double))
)	O
;	O
const	O
double	O
ln_minusz_im	double
=	O
theta_sgn	double
*	O
(	O
theta_abs	double
-	O
M_PI	int
)	O
;	O
const	O
double	O
lmz2_re	double
=	O
ln_minusz_re	double
*	O
ln_minusz_re	double
-	O
ln_minusz_im	double
*	O
ln_minusz_im	double
;	O
const	O
double	O
lmz2_im	double
=	O
2.0	int
*	O
ln_minusz_re	double
*	O
ln_minusz_im	double
;	O
real_dl	*(struct(double,double))
->	O
val	double
=	O
-	O
result_re_tmp	struct(double,double)
.	O
val	double
-	O
0.5	int
*	O
lmz2_re	double
-	O
zeta2	double
;	O
real_dl	*(struct(double,double))
->	O
err	double
=	O
result_re_tmp	struct(double,double)
.	O
err	double
+	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
0.5	int
*	O
fabs	(double)->(double)
(	O
lmz2_re	double
)	O
+	O
zeta2	double
)	O
;	O
imag_dl	*(struct(double,double))
->	O
val	double
=	O
-	O
result_im_tmp	struct(double,double)
.	O
val	double
-	O
0.5	int
*	O
lmz2_im	double
;	O
imag_dl	*(struct(double,double))
->	O
err	double
=	O
result_im_tmp	struct(double,double)
.	O
err	double
+	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
lmz2_im	double
)	O
;	O
return	O
stat_dilog	int
;	O
}	O
}	O
int	O
gsl_sf_complex_dilog_e	(double,double,*(struct(double,double)),*(struct(double,double)))->(int)
(	O
const	O
double	O
r	*(struct(double,double))
,	O
const	O
double	O
theta	double
,	O
gsl_sf_result	struct(double,double)
*	O
real_dl	*(struct(double,double))
,	O
gsl_sf_result	struct(double,double)
*	O
imag_dl	*(struct(double,double))
)	O
{	O
const	O
double	O
cos_theta	double
=	O
cos	(double)->(double)
(	O
theta	double
)	O
;	O
const	O
double	O
sin_theta	double
=	O
sin	(double)->(double)
(	O
theta	double
)	O
;	O
const	O
double	O
x	double
=	O
r	*(struct(double,double))
*	O
cos_theta	double
;	O
const	O
double	O
y	double
=	O
r	*(struct(double,double))
*	O
sin_theta	double
;	O
return	O
gsl_sf_complex_dilog_xy_e	(double,double,*(struct(double,double)),*(struct(double,double)))->(int)
(	O
x	double
,	O
y	double
,	O
real_dl	*(struct(double,double))
,	O
imag_dl	*(struct(double,double))
)	O
;	O
}	O
int	O
gsl_sf_complex_spence_xy_e	(double,double,*(struct(double,double)),*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
const	O
double	O
y	double
,	O
gsl_sf_result	struct(double,double)
*	O
real_sp	*(struct(double,double))
,	O
gsl_sf_result	struct(double,double)
*	O
imag_sp	*(struct(double,double))
)	O
{	O
const	O
double	O
oms_x	double
=	O
1.0	int
-	O
x	double
;	O
const	O
double	O
oms_y	double
=	O
-	O
y	double
;	O
return	O
gsl_sf_complex_dilog_xy_e	(double,double,*(struct(double,double)),*(struct(double,double)))->(int)
(	O
oms_x	double
,	O
oms_y	double
,	O
real_sp	*(struct(double,double))
,	O
imag_sp	*(struct(double,double))
)	O
;	O
}	O
double	O
gsl_sf_dilog	(double)->(double)
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_dilog_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
