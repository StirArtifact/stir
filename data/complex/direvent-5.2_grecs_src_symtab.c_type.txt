static	O
unsigned	O
int	O
hash_size	array(int)
[	O
]	O
=	O
{	O
7	int
,	O
17	int
,	O
37	int
,	O
101	int
,	O
229	int
,	O
487	int
,	O
1009	int
,	O
2039	int
,	O
4091	int
,	O
8191	int
,	O
16411	int
}	O
;	O
static	O
unsigned	O
int	O
max_rehash	int
=	O
sizeof	O
(	O
hash_size	array(int)
)	O
/	O
sizeof	O
(	O
hash_size	array(int)
[	O
0	int
]	O
)	O
;	O
enum	O
symtab_defer_type	enum(int,int)
{	O
defer_add	int
,	O
defer_del	int
}	O
;	O
struct	O
grecs_symtab	struct(int,int,long,long,*(*(struct(*(char)))),*((*(void),long)->(int)),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((long)->(*(void))),*((*(void))->(void)),int,array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))))
{	O
int	O
flags	int
;	O
unsigned	O
int	O
hash_num	int
;	O
size_t	long
elsize	long
;	O
size_t	long
elcount	long
;	O
struct	O
grecs_syment	struct(*(char))
*	O
*	O
tab	*(*(struct(*(char))))
;	O
unsigned	O
(	O
*	O
hash_fun	*((*(void),long)->(int))
)	O
(	O
void	O
*	O
,	O
unsigned	O
long	O
)	O
;	O
int	O
(	O
*	O
cmp_fun	*((*(void),*(void))->(int))
)	O
(	O
const	O
void	O
*	O
,	O
const	O
void	O
*	O
)	O
;	O
int	O
(	O
*	O
copy_fun	*((*(void),*(void))->(int))
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
;	O
void	O
*	O
(	O
*	O
syment_alloc_fun	*((long)->(*(void)))
)	O
(	O
size_t	long
)	O
;	O
void	O
(	O
*	O
syment_free_fun	*((*(void))->(void))
)	O
(	O
void	O
*	O
)	O
;	O
unsigned	O
int	O
itr_level	int
;	O
grecs_list_ptr_t	*(struct)
defer_list	array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))))
[	O
2	int
]	O
;	O
}	O
;	O
static	O
void	O
syment_free	(*(struct(int,int,long,long,*(*(struct`)),*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((long)->(*`)),*((*`)->(void)),int,array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))))),*(void))->(void)
(	O
struct	O
grecs_symtab	struct(int,int,long,long,*(*(struct(*(char)))),*((*(void),long)->(int)),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((long)->(*(void))),*((*(void))->(void)),int,array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))))
*	O
st	*(struct)
,	O
void	O
*	O
ptr	*(void)
)	O
{	O
if	O
(	O
st	*(struct)
->	O
syment_free_fun	*((*(void))->(void))
)	O
st	*(struct)
->	O
syment_free_fun	*((*(void))->(void))
(	O
ptr	*(void)
)	O
;	O
else	O
free	(*(void))->(void)
(	O
ptr	*(void)
)	O
;	O
}	O
static	O
struct	O
grecs_syment	struct(*(char))
*	O
syment_alloc	(*(struct(int,int,long,long,*(*(struct`)),*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((long)->(*`)),*((*`)->(void)),int,array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))))),*(void))->(*(struct(*(char))))
(	O
struct	O
grecs_symtab	struct(int,int,long,long,*(*(struct(*(char)))),*((*(void),long)->(int)),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((long)->(*(void))),*((*(void))->(void)),int,array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))))
*	O
st	*(struct)
,	O
void	O
*	O
key	*(void)
)	O
{	O
struct	O
grecs_syment	struct(*(char))
*	O
ent	*(void)
;	O
ent	*(void)
=	O
st	*(struct)
->	O
syment_alloc_fun	*((long)->(*(void)))
?	O
st	*(struct)
->	O
syment_alloc_fun	*((long)->(*(void)))
(	O
st	*(struct)
->	O
elsize	long
)	O
:	O
malloc	(long)->(*(void))
(	O
st	*(struct)
->	O
elsize	long
)	O
;	O
if	O
(	O
ent	*(void)
)	O
{	O
memset	(*(void),int,long)->(*(void))
(	O
ent	*(void)
,	O
0	int
,	O
st	*(struct)
->	O
elsize	long
)	O
;	O
if	O
(	O
st	*(struct)
->	O
copy_fun	*((*(void),*(void))->(int))
(	O
ent	*(void)
,	O
key	*(void)
)	O
)	O
{	O
int	O
ec	int
=	O
errno	O
;	O
syment_free	(*(struct(int,int,long,long,*(*(struct`)),*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((long)->(*`)),*((*`)->(void)),int,array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))))),*(void))->(void)
(	O
st	*(struct)
,	O
ent	*(void)
)	O
;	O
errno	O
=	O
ec	int
;	O
return	O
NULL	O
;	O
}	O
}	O
return	O
ent	*(void)
;	O
}	O
static	O
void	O
symtab_defer_op	(*(struct(int,int,long,long,*(*(struct`)),*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((long)->(*`)),*((*`)->(void)),int,array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))))),enum(int,int),*(struct(*(char))))->(void)
(	O
struct	O
grecs_symtab	struct(int,int,long,long,*(*(struct(*(char)))),*((*(void),long)->(int)),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((long)->(*(void))),*((*(void))->(void)),int,array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))))
*	O
st	*(struct)
,	O
enum	O
symtab_defer_type	enum(int,int)
type	int
,	O
struct	O
grecs_syment	struct(*(char))
*	O
ent	*(void)
)	O
{	O
if	O
(	O
!	O
st	*(struct)
->	O
defer_list	array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))))
[	O
type	int
]	O
)	O
{	O
st	*(struct)
->	O
defer_list	array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))))
[	O
type	int
]	O
=	O
grecs_list_create	()->(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))
(	O
)	O
;	O
st	*(struct)
->	O
defer_list	array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))))
[	O
type	int
]	O
->	O
cmp	*((*(void),*(void))->(int))
=	O
st	*(struct)
->	O
cmp_fun	*((*(void),*(void))->(int))
;	O
}	O
grecs_list_append	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(void))->(void)
(	O
st	*(struct)
->	O
defer_list	array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))))
[	O
type	int
]	O
,	O
ent	*(void)
)	O
;	O
}	O
unsigned	O
grecs_hash_string	(*(char),long)->(int)
(	O
const	O
char	O
*	O
name	*(char)
,	O
unsigned	O
long	O
hashsize	long
)	O
{	O
unsigned	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
*	O
name	*(char)
;	O
name	*(char)
++	O
)	O
{	O
i	int
<<=	O
1	int
;	O
i	int
^=	O
*	O
(	O
unsigned	O
char	O
*	O
)	O
name	*(char)
;	O
}	O
return	O
i	int
%	O
hashsize	long
;	O
}	O
unsigned	O
grecs_hash_string_ci	(*(char),long)->(int)
(	O
const	O
char	O
*	O
name	*(char)
,	O
unsigned	O
long	O
hashsize	long
)	O
{	O
unsigned	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
*	O
name	*(char)
;	O
name	*(char)
++	O
)	O
{	O
i	int
<<=	O
1	int
;	O
i	int
^=	O
tolower	(int)->(int)
(	O
*	O
(	O
unsigned	O
char	O
*	O
)	O
name	*(char)
)	O
;	O
}	O
return	O
i	int
%	O
hashsize	long
;	O
}	O
static	O
unsigned	O
def_hash	(*(void),long)->(int)
(	O
void	O
*	O
data	*(void)
,	O
unsigned	O
long	O
hashsize	long
)	O
{	O
struct	O
grecs_syment	struct(*(char))
*	O
sym	*(void)
=	O
data	*(void)
;	O
return	O
grecs_hash_string	(*(char),long)->(int)
(	O
sym	*(void)
->	O
name	*(char)
,	O
hashsize	long
)	O
;	O
}	O
static	O
int	O
def_cmp	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
,	O
const	O
void	O
*	O
b	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
)	O
{	O
struct	O
grecs_syment	struct(*(char))
const	O
*	O
syma	*(struct(*(char)))
=	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
;	O
struct	O
grecs_syment	struct(*(char))
const	O
*	O
symb	*(struct(*(char)))
=	O
b	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
;	O
return	O
strcmp	(*(char),*(char))->(int)
(	O
syma	*(struct(*(char)))
->	O
name	*(char)
,	O
symb	*(struct(*(char)))
->	O
name	*(char)
)	O
;	O
}	O
static	O
int	O
def_copy	(*(void),*(void))->(int)
(	O
void	O
*	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
,	O
void	O
*	O
b	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
)	O
{	O
struct	O
grecs_syment	struct(*(char))
*	O
syma	*(struct(*(char)))
=	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
;	O
struct	O
grecs_syment	struct(*(char))
*	O
symb	*(struct(*(char)))
=	O
b	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
;	O
syma	*(struct(*(char)))
->	O
name	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
symb	*(struct(*(char)))
->	O
name	*(char)
)	O
;	O
return	O
syma	*(struct(*(char)))
->	O
name	*(char)
==	O
NULL	O
;	O
}	O
static	O
void	O
def_free_fun	(*(void))->(void)
(	O
void	O
*	O
p	*(void)
)	O
{	O
struct	O
grecs_syment	struct(*(char))
*	O
sym	*(void)
=	O
p	*(void)
;	O
free	(*(void))->(void)
(	O
sym	*(void)
->	O
name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
sym	*(void)
)	O
;	O
}	O
static	O
unsigned	O
symtab_insert_pos	(*(struct(int,int,long,long,*(*(struct`)),*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((long)->(*`)),*((*`)->(void)),int,array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))))),*(void))->(int)
(	O
struct	O
grecs_symtab	struct(int,int,long,long,*(*(struct(*(char)))),*((*(void),long)->(int)),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((long)->(*(void))),*((*(void))->(void)),int,array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))))
*	O
st	*(struct)
,	O
void	O
*	O
elt	*(void)
)	O
{	O
unsigned	O
i	int
;	O
unsigned	O
pos	int
=	O
st	*(struct)
->	O
hash_fun	*((*(void),long)->(int))
(	O
elt	*(void)
,	O
hash_size	array(int)
[	O
st	*(struct)
->	O
hash_num	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
pos	int
;	O
st	*(struct)
->	O
tab	*(*(struct(*(char))))
[	O
i	int
]	O
;	O
)	O
{	O
if	O
(	O
++	O
i	int
>=	O
hash_size	array(int)
[	O
st	*(struct)
->	O
hash_num	int
]	O
)	O
i	int
=	O
0	int
;	O
if	O
(	O
i	int
==	O
pos	int
)	O
abort	()->(void)
(	O
)	O
;	O
}	O
return	O
i	int
;	O
}	O
int	O
grecs_symtab_replace	(*(struct),*(void),*(*(void)))->(int)
(	O
struct	O
grecs_symtab	struct(int,int,long,long,*(*(struct(*(char)))),*((*(void),long)->(int)),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((long)->(*(void))),*((*(void))->(void)),int,array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))))
*	O
st	*(struct)
,	O
void	O
*	O
ent	*(void)
,	O
void	O
*	O
*	O
old_ent	*(*(void))
)	O
{	O
struct	O
grecs_syment	struct(*(char))
*	O
entry	*(struct(*(char)))
;	O
unsigned	O
i	int
,	O
pos	int
=	O
st	*(struct)
->	O
hash_fun	*((*(void),long)->(int))
(	O
ent	*(void)
,	O
hash_size	array(int)
[	O
st	*(struct)
->	O
hash_num	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
pos	int
;	O
(	O
entry	*(struct(*(char)))
=	O
st	*(struct)
->	O
tab	*(*(struct(*(char))))
[	O
i	int
]	O
)	O
;	O
)	O
{	O
if	O
(	O
st	*(struct)
->	O
cmp_fun	*((*(void),*(void))->(int))
(	O
entry	*(struct(*(char)))
,	O
ent	*(void)
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
++	O
i	int
>=	O
hash_size	array(int)
[	O
st	*(struct)
->	O
hash_num	int
]	O
)	O
i	int
=	O
0	int
;	O
if	O
(	O
i	int
==	O
pos	int
)	O
return	O
ENOENT	int
;	O
}	O
if	O
(	O
old_ent	*(*(void))
)	O
*	O
old_ent	*(*(void))
=	O
entry	*(struct(*(char)))
;	O
st	*(struct)
->	O
tab	*(*(struct(*(char))))
[	O
i	int
]	O
=	O
ent	*(void)
;	O
return	O
0	int
;	O
}	O
static	O
int	O
symtab_rehash	(*(struct(int,int,long,long,*(*(struct`)),*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((long)->(*`)),*((*`)->(void)),int,array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))))))->(int)
(	O
struct	O
grecs_symtab	struct(int,int,long,long,*(*(struct(*(char)))),*((*(void),long)->(int)),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((long)->(*(void))),*((*(void))->(void)),int,array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))))
*	O
st	*(struct)
)	O
{	O
struct	O
grecs_syment	struct(*(char))
*	O
*	O
old_tab	*(*(struct(*(char))))
=	O
st	*(struct)
->	O
tab	*(*(struct(*(char))))
;	O
struct	O
grecs_syment	struct(*(char))
*	O
*	O
new_tab	*(*(struct(*(char))))
;	O
unsigned	O
int	O
i	int
;	O
unsigned	O
int	O
hash_num	int
=	O
st	*(struct)
->	O
hash_num	int
+	O
1	int
;	O
if	O
(	O
hash_num	int
>=	O
max_rehash	int
)	O
return	O
E2BIG	int
;	O
new_tab	*(*(struct(*(char))))
=	O
calloc	(long,long)->(*(void))
(	O
hash_size	array(int)
[	O
hash_num	int
]	O
,	O
sizeof	O
(	O
*	O
new_tab	*(*(struct(*(char))))
)	O
)	O
;	O
if	O
(	O
!	O
new_tab	*(*(struct(*(char))))
)	O
return	O
ENOMEM	int
;	O
st	*(struct)
->	O
tab	*(*(struct(*(char))))
=	O
new_tab	*(*(struct(*(char))))
;	O
if	O
(	O
old_tab	*(*(struct(*(char))))
)	O
{	O
st	*(struct)
->	O
hash_num	int
=	O
hash_num	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
hash_size	array(int)
[	O
hash_num	int
-	O
1	int
]	O
;	O
i	int
++	O
)	O
{	O
struct	O
grecs_syment	struct(*(char))
*	O
elt	*(void)
=	O
old_tab	*(*(struct(*(char))))
[	O
i	int
]	O
;	O
if	O
(	O
elt	*(void)
->	O
name	*(char)
)	O
{	O
unsigned	O
n	long
=	O
symtab_insert_pos	(*(struct(int,int,long,long,*(*(struct`)),*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((long)->(*`)),*((*`)->(void)),int,array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))))),*(void))->(int)
(	O
st	*(struct)
,	O
elt	*(void)
)	O
;	O
new_tab	*(*(struct(*(char))))
[	O
n	long
]	O
=	O
elt	*(void)
;	O
}	O
}	O
free	(*(void))->(void)
(	O
old_tab	*(*(struct(*(char))))
)	O
;	O
}	O
return	O
0	int
;	O
}	O
const	O
char	O
*	O
grecs_symtab_strerror	(int)->(*(char))
(	O
int	O
rc	int
)	O
{	O
switch	O
(	O
rc	int
)	O
{	O
case	O
ENOENT	int
:	O
return	O
_	O
(	O
"element not found in table"	*(char)
)	O
;	O
case	O
E2BIG	int
:	O
return	O
_	O
(	O
"symbol table is full"	*(char)
)	O
;	O
case	O
ENOMEM	int
:	O
return	O
strerror	(int)->(*(char))
(	O
ENOMEM	int
)	O
;	O
}	O
return	O
strerror	(int)->(*(char))
(	O
rc	int
)	O
;	O
}	O
int	O
grecs_symtab_remove	(*(struct),*(void))->(int)
(	O
struct	O
grecs_symtab	struct(int,int,long,long,*(*(struct(*(char)))),*((*(void),long)->(int)),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((long)->(*(void))),*((*(void))->(void)),int,array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))))
*	O
st	*(struct)
,	O
void	O
*	O
elt	*(void)
)	O
{	O
unsigned	O
int	O
pos	int
,	O
i	int
,	O
j	int
,	O
r	int
;	O
struct	O
grecs_syment	struct(*(char))
*	O
entry	*(struct(*(char)))
;	O
if	O
(	O
st	*(struct)
->	O
itr_level	int
)	O
{	O
if	O
(	O
grecs_list_remove	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(void))->(int)
(	O
st	*(struct)
->	O
defer_list	array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))))
[	O
defer_add	int
]	O
,	O
elt	*(void)
)	O
==	O
0	int
)	O
return	O
0	int
;	O
}	O
pos	int
=	O
st	*(struct)
->	O
hash_fun	*((*(void),long)->(int))
(	O
elt	*(void)
,	O
hash_size	array(int)
[	O
st	*(struct)
->	O
hash_num	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
pos	int
;	O
(	O
entry	*(struct(*(char)))
=	O
st	*(struct)
->	O
tab	*(*(struct(*(char))))
[	O
i	int
]	O
)	O
;	O
)	O
{	O
if	O
(	O
st	*(struct)
->	O
cmp_fun	*((*(void),*(void))->(int))
(	O
entry	*(struct(*(char)))
,	O
elt	*(void)
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
++	O
i	int
>=	O
hash_size	array(int)
[	O
st	*(struct)
->	O
hash_num	int
]	O
)	O
i	int
=	O
0	int
;	O
if	O
(	O
i	int
==	O
pos	int
)	O
return	O
ENOENT	int
;	O
}	O
if	O
(	O
!	O
entry	*(struct(*(char)))
)	O
return	O
ENOENT	int
;	O
if	O
(	O
st	*(struct)
->	O
itr_level	int
)	O
{	O
symtab_defer_op	(*(struct(int,int,long,long,*(*(struct`)),*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((long)->(*`)),*((*`)->(void)),int,array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))))),enum(int,int),*(struct(*(char))))->(void)
(	O
st	*(struct)
,	O
defer_del	int
,	O
entry	*(struct(*(char)))
)	O
;	O
return	O
0	int
;	O
}	O
syment_free	(*(struct(int,int,long,long,*(*(struct`)),*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((long)->(*`)),*((*`)->(void)),int,array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))))),*(void))->(void)
(	O
st	*(struct)
,	O
entry	*(struct(*(char)))
)	O
;	O
st	*(struct)
->	O
elcount	long
--	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
st	*(struct)
->	O
tab	*(*(struct(*(char))))
[	O
i	int
]	O
=	O
NULL	O
;	O
j	int
=	O
i	int
;	O
do	O
{	O
if	O
(	O
++	O
i	int
>=	O
hash_size	array(int)
[	O
st	*(struct)
->	O
hash_num	int
]	O
)	O
i	int
=	O
0	int
;	O
if	O
(	O
!	O
st	*(struct)
->	O
tab	*(*(struct(*(char))))
[	O
i	int
]	O
)	O
return	O
0	int
;	O
r	int
=	O
st	*(struct)
->	O
hash_fun	*((*(void),long)->(int))
(	O
st	*(struct)
->	O
tab	*(*(struct(*(char))))
[	O
i	int
]	O
,	O
hash_size	array(int)
[	O
st	*(struct)
->	O
hash_num	int
]	O
)	O
;	O
}	O
while	O
(	O
(	O
j	int
<	O
r	int
&&	O
r	int
<=	O
i	int
)	O
||	O
(	O
i	int
<	O
j	int
&&	O
j	int
<	O
r	int
)	O
||	O
(	O
r	int
<=	O
i	int
&&	O
i	int
<	O
j	int
)	O
)	O
;	O
st	*(struct)
->	O
tab	*(*(struct(*(char))))
[	O
j	int
]	O
=	O
st	*(struct)
->	O
tab	*(*(struct(*(char))))
[	O
i	int
]	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
grecs_symtab_get_index	(*(int),*(struct(int,int,long,long,*(*(struct`)),*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((long)->(*`)),*((*`)->(void)),int,array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))))),*(void),*(int))->(int)
(	O
unsigned	O
*	O
idx	*(int)
,	O
struct	O
grecs_symtab	struct(int,int,long,long,*(*(struct(*(char)))),*((*(void),long)->(int)),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((long)->(*(void))),*((*(void))->(void)),int,array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))))
*	O
st	*(struct)
,	O
void	O
*	O
key	*(void)
,	O
int	O
*	O
install	*(int)
)	O
{	O
int	O
rc	int
;	O
unsigned	O
i	int
,	O
pos	int
;	O
struct	O
grecs_syment	struct(*(char))
*	O
elem	*(struct(*(char)))
;	O
if	O
(	O
!	O
st	*(struct)
->	O
tab	*(*(struct(*(char))))
)	O
{	O
if	O
(	O
install	*(int)
)	O
{	O
rc	int
=	O
symtab_rehash	(*(struct(int,int,long,long,*(*(struct`)),*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((long)->(*`)),*((*`)->(void)),int,array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))))))->(int)
(	O
st	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
else	O
return	O
ENOENT	int
;	O
}	O
pos	int
=	O
st	*(struct)
->	O
hash_fun	*((*(void),long)->(int))
(	O
key	*(void)
,	O
hash_size	array(int)
[	O
st	*(struct)
->	O
hash_num	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
pos	int
;	O
(	O
elem	*(struct(*(char)))
=	O
st	*(struct)
->	O
tab	*(*(struct(*(char))))
[	O
i	int
]	O
)	O
;	O
)	O
{	O
if	O
(	O
st	*(struct)
->	O
cmp_fun	*((*(void),*(void))->(int))
(	O
elem	*(struct(*(char)))
,	O
key	*(void)
)	O
==	O
0	int
)	O
{	O
if	O
(	O
install	*(int)
)	O
*	O
install	*(int)
=	O
0	int
;	O
*	O
idx	*(int)
=	O
i	int
;	O
return	O
0	int
;	O
}	O
if	O
(	O
++	O
i	int
>=	O
hash_size	array(int)
[	O
st	*(struct)
->	O
hash_num	int
]	O
)	O
i	int
=	O
0	int
;	O
if	O
(	O
i	int
==	O
pos	int
)	O
break	O
;	O
}	O
if	O
(	O
!	O
install	*(int)
)	O
return	O
ENOENT	int
;	O
if	O
(	O
!	O
elem	*(struct(*(char)))
)	O
{	O
*	O
install	*(int)
=	O
1	int
;	O
*	O
idx	*(int)
=	O
i	int
;	O
return	O
0	int
;	O
}	O
if	O
(	O
(	O
rc	int
=	O
symtab_rehash	(*(struct(int,int,long,long,*(*(struct`)),*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((long)->(*`)),*((*`)->(void)),int,array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))))))->(int)
(	O
st	*(struct)
)	O
)	O
!=	O
0	int
)	O
return	O
rc	int
;	O
return	O
grecs_symtab_get_index	(*(int),*(struct(int,int,long,long,*(*(struct`)),*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((long)->(*`)),*((*`)->(void)),int,array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))))),*(void),*(int))->(int)
(	O
idx	*(int)
,	O
st	*(struct)
,	O
key	*(void)
,	O
install	*(int)
)	O
;	O
}	O
void	O
*	O
grecs_symtab_lookup_or_install	(*(struct),*(void),*(int))->(*(void))
(	O
struct	O
grecs_symtab	struct(int,int,long,long,*(*(struct(*(char)))),*((*(void),long)->(int)),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((long)->(*(void))),*((*(void))->(void)),int,array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))))
*	O
st	*(struct)
,	O
void	O
*	O
key	*(void)
,	O
int	O
*	O
install	*(int)
)	O
{	O
unsigned	O
i	int
;	O
int	O
rc	int
=	O
grecs_symtab_get_index	(*(int),*(struct(int,int,long,long,*(*(struct`)),*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((long)->(*`)),*((*`)->(void)),int,array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))))),*(void),*(int))->(int)
(	O
&	O
i	int
,	O
st	*(struct)
,	O
key	*(void)
,	O
install	*(int)
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
install	*(int)
&&	O
*	O
install	*(int)
==	O
1	int
)	O
{	O
struct	O
grecs_syment	struct(*(char))
*	O
ent	*(void)
=	O
syment_alloc	(*(struct(int,int,long,long,*(*(struct`)),*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((long)->(*`)),*((*`)->(void)),int,array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))))),*(void))->(*(struct(*(char))))
(	O
st	*(struct)
,	O
key	*(void)
)	O
;	O
if	O
(	O
!	O
ent	*(void)
)	O
{	O
errno	O
=	O
ENOMEM	int
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
st	*(struct)
->	O
itr_level	int
)	O
{	O
symtab_defer_op	(*(struct(int,int,long,long,*(*(struct`)),*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((long)->(*`)),*((*`)->(void)),int,array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))))),enum(int,int),*(struct(*(char))))->(void)
(	O
st	*(struct)
,	O
defer_add	int
,	O
ent	*(void)
)	O
;	O
}	O
else	O
{	O
st	*(struct)
->	O
tab	*(*(struct(*(char))))
[	O
i	int
]	O
=	O
ent	*(void)
;	O
st	*(struct)
->	O
elcount	long
++	O
;	O
}	O
return	O
ent	*(void)
;	O
}	O
else	O
return	O
st	*(struct)
->	O
tab	*(*(struct(*(char))))
[	O
i	int
]	O
;	O
}	O
else	O
if	O
(	O
rc	int
==	O
ENOENT	int
&&	O
st	*(struct)
->	O
itr_level	int
)	O
{	O
void	O
*	O
ptr	*(void)
=	O
grecs_list_locate	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(void))->(*(void))
(	O
st	*(struct)
->	O
defer_list	array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))))
[	O
defer_add	int
]	O
,	O
key	*(void)
)	O
;	O
if	O
(	O
ptr	*(void)
)	O
return	O
ptr	*(void)
;	O
rc	int
=	O
ENOENT	int
;	O
}	O
errno	O
=	O
rc	int
;	O
return	O
NULL	O
;	O
}	O
void	O
grecs_symtab_clear	(*(struct))->(void)
(	O
struct	O
grecs_symtab	struct(int,int,long,long,*(*(struct(*(char)))),*((*(void),long)->(int)),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((long)->(*(void))),*((*(void))->(void)),int,array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))))
*	O
st	*(struct)
)	O
{	O
unsigned	O
i	int
,	O
hs	int
;	O
if	O
(	O
!	O
st	*(struct)
||	O
!	O
st	*(struct)
->	O
tab	*(*(struct(*(char))))
)	O
return	O
;	O
hs	int
=	O
hash_size	array(int)
[	O
st	*(struct)
->	O
hash_num	int
]	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
hs	int
;	O
i	int
++	O
)	O
{	O
struct	O
grecs_syment	struct(*(char))
*	O
elem	*(struct(*(char)))
=	O
st	*(struct)
->	O
tab	*(*(struct(*(char))))
[	O
i	int
]	O
;	O
if	O
(	O
elem	*(struct(*(char)))
)	O
{	O
syment_free	(*(struct(int,int,long,long,*(*(struct`)),*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((long)->(*`)),*((*`)->(void)),int,array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))))),*(void))->(void)
(	O
st	*(struct)
,	O
elem	*(struct(*(char)))
)	O
;	O
st	*(struct)
->	O
tab	*(*(struct(*(char))))
[	O
i	int
]	O
=	O
NULL	O
;	O
}	O
}	O
st	*(struct)
->	O
elcount	long
=	O
0	int
;	O
}	O
struct	O
grecs_symtab	struct(int,int,long,long,*(*(struct(*(char)))),*((*(void),long)->(int)),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((long)->(*(void))),*((*(void))->(void)),int,array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))))
*	O
grecs_symtab_create	(long,*((*(void),long)->(int)),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((long)->(*(void))),*((*(void))->(void)))->(*(struct))
(	O
size_t	long
elsize	long
,	O
unsigned	O
(	O
*	O
hash_fun	*((*(void),long)->(int))
)	O
(	O
void	O
*	O
,	O
unsigned	O
long	O
)	O
,	O
int	O
(	O
*	O
cmp_fun	*((*(void),*(void))->(int))
)	O
(	O
const	O
void	O
*	O
,	O
const	O
void	O
*	O
)	O
,	O
int	O
(	O
*	O
copy_fun	*((*(void),*(void))->(int))
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
(	O
*	O
alloc_fun	*((long)->(*(void)))
)	O
(	O
size_t	long
)	O
,	O
void	O
(	O
*	O
free_fun	*((*(void))->(void))
)	O
(	O
void	O
*	O
)	O
)	O
{	O
struct	O
grecs_symtab	struct(int,int,long,long,*(*(struct(*(char)))),*((*(void),long)->(int)),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((long)->(*(void))),*((*(void))->(void)),int,array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))))
*	O
st	*(struct)
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
st	*(struct)
)	O
)	O
;	O
if	O
(	O
st	*(struct)
)	O
{	O
memset	(*(void),int,long)->(*(void))
(	O
st	*(struct)
,	O
0	int
,	O
sizeof	O
(	O
*	O
st	*(struct)
)	O
)	O
;	O
st	*(struct)
->	O
elsize	long
=	O
elsize	long
;	O
st	*(struct)
->	O
elcount	long
=	O
0	int
;	O
st	*(struct)
->	O
hash_fun	*((*(void),long)->(int))
=	O
hash_fun	*((*(void),long)->(int))
?	O
hash_fun	*((*(void),long)->(int))
:	O
def_hash	(*(void),long)->(int)
;	O
st	*(struct)
->	O
cmp_fun	*((*(void),*(void))->(int))
=	O
cmp_fun	*((*(void),*(void))->(int))
?	O
cmp_fun	*((*(void),*(void))->(int))
:	O
def_cmp	(*(void),*(void))->(int)
;	O
st	*(struct)
->	O
copy_fun	*((*(void),*(void))->(int))
=	O
copy_fun	*((*(void),*(void))->(int))
?	O
copy_fun	*((*(void),*(void))->(int))
:	O
def_copy	(*(void),*(void))->(int)
;	O
st	*(struct)
->	O
syment_alloc_fun	*((long)->(*(void)))
=	O
alloc_fun	*((long)->(*(void)))
;	O
if	O
(	O
free_fun	*((*(void))->(void))
)	O
st	*(struct)
->	O
syment_free_fun	*((*(void))->(void))
=	O
free_fun	*((*(void))->(void))
;	O
else	O
if	O
(	O
!	O
copy_fun	*((*(void),*(void))->(int))
)	O
st	*(struct)
->	O
syment_free_fun	*((*(void))->(void))
=	O
def_free_fun	(*(void))->(void)
;	O
else	O
st	*(struct)
->	O
syment_free_fun	*((*(void))->(void))
=	O
NULL	O
;	O
st	*(struct)
->	O
tab	*(*(struct(*(char))))
=	O
calloc	(long,long)->(*(void))
(	O
hash_size	array(int)
[	O
st	*(struct)
->	O
hash_num	int
]	O
,	O
sizeof	O
(	O
*	O
st	*(struct)
->	O
tab	*(*(struct(*(char))))
)	O
)	O
;	O
if	O
(	O
!	O
st	*(struct)
->	O
tab	*(*(struct(*(char))))
)	O
{	O
free	(*(void))->(void)
(	O
st	*(struct)
)	O
;	O
st	*(struct)
=	O
NULL	O
;	O
}	O
}	O
return	O
st	*(struct)
;	O
}	O
struct	O
grecs_symtab	struct(int,int,long,long,*(*(struct(*(char)))),*((*(void),long)->(int)),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((long)->(*(void))),*((*(void))->(void)),int,array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))))
*	O
grecs_symtab_create_default	(long)->(*(struct))
(	O
size_t	long
elsize	long
)	O
{	O
return	O
grecs_symtab_create	(long,*((*(void),long)->(int)),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((long)->(*(void))),*((*(void))->(void)))->(*(struct))
(	O
elsize	long
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
void	O
grecs_symtab_free	(*(struct))->(void)
(	O
struct	O
grecs_symtab	struct(int,int,long,long,*(*(struct(*(char)))),*((*(void),long)->(int)),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((long)->(*(void))),*((*(void))->(void)),int,array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))))
*	O
st	*(struct)
)	O
{	O
if	O
(	O
st	*(struct)
)	O
{	O
grecs_symtab_clear	(*(struct))->(void)
(	O
st	*(struct)
)	O
;	O
grecs_list_free	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))->(void)
(	O
st	*(struct)
->	O
defer_list	array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))))
[	O
defer_add	int
]	O
)	O
;	O
grecs_list_free	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))->(void)
(	O
st	*(struct)
->	O
defer_list	array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))))
[	O
defer_del	int
]	O
)	O
;	O
free	(*(void))->(void)
(	O
st	*(struct)
->	O
tab	*(*(struct(*(char))))
)	O
;	O
free	(*(void))->(void)
(	O
st	*(struct)
)	O
;	O
}	O
}	O
size_t	long
grecs_symtab_count	(*(struct))->(long)
(	O
struct	O
grecs_symtab	struct(int,int,long,long,*(*(struct(*(char)))),*((*(void),long)->(int)),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((long)->(*(void))),*((*(void))->(void)),int,array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))))
*	O
st	*(struct)
)	O
{	O
return	O
st	*(struct)
->	O
elcount	long
;	O
}	O
int	O
grecs_symtab_foreach	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
struct	O
grecs_symtab	struct(int,int,long,long,*(*(struct(*(char)))),*((*(void),long)->(int)),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((long)->(*(void))),*((*(void))->(void)),int,array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))))
*	O
st	*(struct)
,	O
grecs_symtab_enumerator_t	*((*(void),*(void))->(int))
fun	*((*(void),*(void))->(int))
,	O
void	O
*	O
data	*(void)
)	O
{	O
unsigned	O
i	int
;	O
struct	O
grecs_syment	struct(*(char))
*	O
ep	*(struct(*(char)))
;	O
if	O
(	O
!	O
st	*(struct)
)	O
return	O
0	int
;	O
++	O
st	*(struct)
->	O
itr_level	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
hash_size	array(int)
[	O
st	*(struct)
->	O
hash_num	int
]	O
;	O
i	int
++	O
)	O
{	O
ep	*(struct(*(char)))
=	O
st	*(struct)
->	O
tab	*(*(struct(*(char))))
[	O
i	int
]	O
;	O
if	O
(	O
ep	*(struct(*(char)))
&&	O
!	O
grecs_list_locate	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(void))->(*(void))
(	O
st	*(struct)
->	O
defer_list	array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))))
[	O
defer_del	int
]	O
,	O
ep	*(struct(*(char)))
)	O
)	O
{	O
int	O
rc	int
=	O
fun	*((*(void),*(void))->(int))
(	O
ep	*(struct(*(char)))
,	O
data	*(void)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
}	O
if	O
(	O
--	O
st	*(struct)
->	O
itr_level	int
==	O
0	int
)	O
{	O
while	O
(	O
(	O
ep	*(struct(*(char)))
=	O
grecs_list_pop	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))->(*(void))
(	O
st	*(struct)
->	O
defer_list	array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))))
[	O
defer_del	int
]	O
)	O
)	O
!=	O
NULL	O
)	O
grecs_symtab_remove	(*(struct),*(void))->(int)
(	O
st	*(struct)
,	O
ep	*(struct(*(char)))
)	O
;	O
while	O
(	O
(	O
ep	*(struct(*(char)))
=	O
grecs_list_pop	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))->(*(void))
(	O
st	*(struct)
->	O
defer_list	array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))))
[	O
defer_add	int
]	O
)	O
)	O
!=	O
NULL	O
)	O
{	O
int	O
install	*(int)
=	O
1	int
;	O
if	O
(	O
grecs_symtab_get_index	(*(int),*(struct(int,int,long,long,*(*(struct`)),*((*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((long)->(*`)),*((*`)->(void)),int,array(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))))),*(void),*(int))->(int)
(	O
&	O
i	int
,	O
st	*(struct)
,	O
ep	*(struct(*(char)))
,	O
&	O
install	*(int)
)	O
==	O
0	int
)	O
{	O
st	*(struct)
->	O
tab	*(*(struct(*(char))))
[	O
i	int
]	O
=	O
ep	*(struct(*(char)))
;	O
st	*(struct)
->	O
elcount	long
++	O
;	O
}	O
}	O
}	O
return	O
0	int
;	O
}	O
