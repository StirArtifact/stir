extern	O
double	O
vrgModelVars	O
[	O
]	O
;	O
static	O
double	O
dInitialTime	O
;	O
int	O
iCurrentTime	O
;	O
double	O
*	O
rgdTime	O
=	O
NULL	O
;	O
long	O
*	O
rgiVars	O
=	O
NULL	O
;	O
double	O
*	O
*	O
pdVar	O
=	O
NULL	O
;	O
double	O
CalcDelay	O
(	O
HVAR	long
hvar	long
,	O
double	O
dTime	O
,	O
double	O
delay	O
)	O
{	O
int	O
i	O
;	O
int	O
sentinel	O
;	O
double	O
dTmp	O
,	O
oldTime	O
;	O
if	O
(	O
!	O
rgiVars	O
[	O
hvar	long
]	O
)	O
{	O
pdVar	O
[	O
hvar	long
]	O
=	O
InitdVector	(long)->(*(double))
(	O
MAX_DELAY	O
)	O
;	O
pdVar	O
[	O
hvar	long
]	O
[	O
0	int
]	O
=	O
vrgModelVars	O
[	O
hvar	long
]	O
;	O
rgiVars	O
[	O
hvar	long
]	O
=	O
1	int
;	O
}	O
if	O
(	O
delay	O
<=	O
0	int
)	O
{	O
printf	(*(char))->(int)
(	O
"\nError: negative or null delays aren't allowed - Exiting.\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
else	O
{	O
oldTime	O
=	O
dTime	O
-	O
delay	O
;	O
if	O
(	O
oldTime	O
<=	O
dInitialTime	O
)	O
{	O
return	O
(	O
pdVar	O
[	O
hvar	long
]	O
[	O
0	int
]	O
)	O
;	O
}	O
else	O
{	O
i	O
=	O
iCurrentTime	O
-	O
1	int
;	O
if	O
(	O
i	O
<	O
0	int
)	O
i	O
=	O
MAX_DELAY	O
-	O
1	int
;	O
sentinel	O
=	O
0	int
;	O
while	O
(	O
rgdTime	O
[	O
i	O
]	O
>	O
oldTime	O
)	O
{	O
i	O
=	O
i	O
-	O
1	int
;	O
if	O
(	O
i	O
<	O
0	int
)	O
i	O
=	O
MAX_DELAY	O
-	O
1	int
;	O
sentinel	O
=	O
sentinel	O
+	O
1	int
;	O
if	O
(	O
sentinel	O
>	O
MAX_DELAY	O
-	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Error: size MAX_DELAY of rgdTime array = "	*(char)
"%ld too small.\n"	*(char)
,	O
(	O
long	O
)	O
MAX_DELAY	O
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
}	O
if	O
(	O
i	O
==	O
(	O
iCurrentTime	O
-	O
1	int
)	O
)	O
{	O
dTmp	O
=	O
pdVar	O
[	O
hvar	long
]	O
[	O
i	O
-	O
1	int
]	O
+	O
(	O
(	O
pdVar	O
[	O
hvar	long
]	O
[	O
i	O
]	O
-	O
pdVar	O
[	O
hvar	long
]	O
[	O
i	O
-	O
1	int
]	O
)	O
*	O
(	O
oldTime	O
-	O
rgdTime	O
[	O
i	O
-	O
1	int
]	O
)	O
/	O
(	O
rgdTime	O
[	O
i	O
]	O
-	O
rgdTime	O
[	O
i	O
-	O
1	int
]	O
)	O
)	O
;	O
}	O
else	O
{	O
dTmp	O
=	O
pdVar	O
[	O
hvar	long
]	O
[	O
i	O
]	O
+	O
(	O
(	O
pdVar	O
[	O
hvar	long
]	O
[	O
i	O
+	O
1	int
]	O
-	O
pdVar	O
[	O
hvar	long
]	O
[	O
i	O
]	O
)	O
*	O
(	O
oldTime	O
-	O
rgdTime	O
[	O
i	O
]	O
)	O
/	O
(	O
rgdTime	O
[	O
i	O
+	O
1	int
]	O
-	O
rgdTime	O
[	O
i	O
]	O
)	O
)	O
;	O
}	O
}	O
return	O
dTmp	O
;	O
}	O
}	O
void	O
InitDelays	O
(	O
double	O
dTime	O
)	O
{	O
int	O
i	O
;	O
if	O
(	O
!	O
rgdTime	O
)	O
{	O
rgdTime	O
=	O
InitdVector	(long)->(*(double))
(	O
MAX_DELAY	O
)	O
;	O
iCurrentTime	O
=	O
-	O
1	int
;	O
dInitialTime	O
=	O
dTime	O
;	O
}	O
if	O
(	O
!	O
rgiVars	O
)	O
{	O
rgiVars	O
=	O
InitlVector	(long)->(*(long))
(	O
GetNModelVars	()->(int)
(	O
)	O
)	O
;	O
pdVar	O
=	O
InitpdVector	(long)->(*(*(double)))
(	O
GetNModelVars	()->(int)
(	O
)	O
)	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
GetNModelVars	()->(int)
(	O
)	O
;	O
i	O
++	O
)	O
rgiVars	O
[	O
i	O
]	O
=	O
0	int
;	O
}	O
}	O
void	O
StoreDelayed	O
(	O
double	O
t	*(double)
)	O
{	O
int	O
i	O
;	O
iCurrentTime	O
++	O
;	O
if	O
(	O
iCurrentTime	O
==	O
MAX_DELAY	O
)	O
iCurrentTime	O
=	O
0	int
;	O
rgdTime	O
[	O
iCurrentTime	O
]	O
=	O
t	*(double)
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
GetNModelVars	()->(int)
(	O
)	O
;	O
i	O
++	O
)	O
if	O
(	O
rgiVars	O
[	O
i	O
]	O
)	O
{	O
pdVar	O
[	O
i	O
]	O
[	O
iCurrentTime	O
]	O
=	O
vrgModelVars	O
[	O
i	O
]	O
;	O
}	O
}	O
