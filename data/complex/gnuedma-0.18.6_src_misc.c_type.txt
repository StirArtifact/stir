EUint32	long
EDMAPROC	O
edma_print	(*(char))->(long)
(	O
EPChar	*(char)
a	*(void)
)	O
{	O
printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
a	*(void)
)	O
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
edma_printf	(*(char))->(long)
(	O
EPChar	*(char)
f	*(char)
,	O
...	O
)	O
{	O
va_list	*(char)
p	*(char)
;	O
EChar	char
msg	*(char)
[	O
MSG_LEN	int
]	O
;	O
va_start	O
(	O
p	*(char)
,	O
f	*(char)
)	O
;	O
vsnprintf	(*(char),int,*(char),*(char))->(int)
(	O
msg	*(char)
,	O
MSG_LEN	int
,	O
f	*(char)
,	O
p	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
msg	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
edma_log	(*(char))->(long)
(	O
EPChar	*(char)
f	*(char)
,	O
...	O
)	O
{	O
va_list	*(char)
p	*(char)
;	O
EChar	char
msg	*(char)
[	O
MSG_LEN	int
]	O
;	O
if	O
(	O
GVar	*(struct(long,long,long,long,long,long,long,long,long,array(struct(array(char),long)),array(struct(array(char),long)),long,long,array(char),*(struct(long,long,array(char),long,long,long,char,char)),long,long,long,union(struct(int,int,int,int,int,union(struct`,struct`)),array(char),long),array(struct(long,long,array(char))),long,long,long))
->	O
DebugLevel	long
>	O
DEBUG_LEVEL_LOG	int
)	O
return	O
0	int
;	O
va_start	O
(	O
p	*(char)
,	O
f	*(char)
)	O
;	O
vsnprintf	(*(char),int,*(char),*(char))->(int)
(	O
msg	*(char)
,	O
MSG_LEN	int
,	O
f	*(char)
,	O
p	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"LOG: %s\n"	*(char)
,	O
msg	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
edma_printf_obj	(long,*(char))->(long)
(	O
OBJID	long
IdObj	long
,	O
EPChar	*(char)
f	*(char)
,	O
...	O
)	O
{	O
va_list	*(char)
p	*(char)
;	O
EChar	char
msg	*(char)
[	O
MSG_LEN	int
]	O
;	O
EChar	char
msg1	array(char)
[	O
MSG_LEN	int
]	O
;	O
if	O
(	O
(	O
edma_check_obj_id	(long,*(char))->(long)
(	O
IdObj	long
,	O
"edma_printf_obj"	*(char)
)	O
)	O
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
va_start	O
(	O
p	*(char)
,	O
f	*(char)
)	O
;	O
snprintf	(*(char),int,*(char))->(int)
(	O
msg1	array(char)
,	O
MSG_LEN	int
,	O
"(%s)"	*(char)
,	O
gClass	O
[	O
gObj	O
[	O
IdObj	long
]	O
->	O
IdClass	long
]	O
->	O
ClassName	array(char)
)	O
;	O
vsnprintf	(*(char),int,*(char),*(char))->(int)
(	O
msg	*(char)
,	O
MSG_LEN	int
,	O
f	*(char)
,	O
p	*(char)
)	O
;	O
strncat	(*(char),*(char),int)->(*(char))
(	O
msg1	array(char)
,	O
msg	*(char)
,	O
MSG_LEN	int
)	O
;	O
printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
msg1	array(char)
)	O
;	O
va_end	O
(	O
p	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
edma_printf_err	(*(char))->(long)
(	O
EPChar	*(char)
f	*(char)
,	O
...	O
)	O
{	O
va_list	*(char)
p	*(char)
;	O
EChar	char
msg	*(char)
[	O
MSG_LEN	int
]	O
;	O
EChar	char
msg1	array(char)
[	O
MSG_LEN	int
]	O
;	O
va_start	O
(	O
p	*(char)
,	O
f	*(char)
)	O
;	O
strncpy	(*(char),*(char),int)->(*(char))
(	O
msg1	array(char)
,	O
"**ERROR**"	*(char)
,	O
MSG_LEN	int
)	O
;	O
vsnprintf	(*(char),int,*(char),*(char))->(int)
(	O
msg	*(char)
,	O
MSG_LEN	int
,	O
f	*(char)
,	O
p	*(char)
)	O
;	O
strncat	(*(char),*(char),int)->(*(char))
(	O
msg1	array(char)
,	O
msg	*(char)
,	O
MSG_LEN	int
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),int,int,long,short,char,array(char),*(void),long long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),*(void),int,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),int,int,long,short,char,array(char),*(void),long long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long long,*(struct`),*(struct`),*(struct`),*(void),int,int,array(char))),*(void),int,int,array(char)))
,	O
"%s\n"	*(char)
,	O
msg1	array(char)
)	O
;	O
va_end	O
(	O
p	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
edma_printf_dbg	(long,long,*(char))->(long)
(	O
EUint32	long
l	long
,	O
OBJID	long
IdObj	long
,	O
EPChar	*(char)
f	*(char)
,	O
...	O
)	O
{	O
va_list	*(char)
p	*(char)
;	O
EChar	char
msg	*(char)
[	O
MSG_LEN	int
]	O
;	O
EChar	char
msg1	array(char)
[	O
MSG_LEN	int
]	O
;	O
if	O
(	O
l	long
>=	O
GVar	*(struct(long,long,long,long,long,long,long,long,long,array(struct(array(char),long)),array(struct(array(char),long)),long,long,array(char),*(struct(long,long,array(char),long,long,long,char,char)),long,long,long,union(struct(int,int,int,int,int,union(struct`,struct`)),array(char),long),array(struct(long,long,array(char))),long,long,long))
->	O
DebugLevel	long
)	O
{	O
va_start	O
(	O
p	*(char)
,	O
f	*(char)
)	O
;	O
if	O
(	O
IdObj	long
==	O
-	O
1	int
)	O
strncpy	(*(char),*(char),int)->(*(char))
(	O
msg1	array(char)
,	O
"(DEBUG-System)"	*(char)
,	O
MSG_LEN	int
)	O
;	O
else	O
snprintf	(*(char),int,*(char))->(int)
(	O
msg1	array(char)
,	O
MSG_LEN	int
,	O
"(DEBUG-%s)"	*(char)
,	O
gClass	O
[	O
gObj	O
[	O
IdObj	long
]	O
->	O
IdClass	long
]	O
->	O
ClassName	array(char)
)	O
;	O
vsnprintf	(*(char),int,*(char),*(char))->(int)
(	O
msg	*(char)
,	O
MSG_LEN	int
,	O
f	*(char)
,	O
p	*(char)
)	O
;	O
strncat	(*(char),*(char),int)->(*(char))
(	O
msg1	array(char)
,	O
msg	*(char)
,	O
MSG_LEN	int
)	O
;	O
printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
msg1	array(char)
)	O
;	O
va_end	O
(	O
p	*(char)
)	O
;	O
}	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
edma_set_app_name	(*(char))->(long)
(	O
EPChar	*(char)
n	*(char)
)	O
{	O
if	O
(	O
n	*(char)
==	O
NULL	O
)	O
{	O
edma_printf_err	(*(char))->(long)
(	O
"%s"	*(char)
,	O
"[edma_set_app_name] Invalid Application Name"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
strncpy	(*(char),*(char),int)->(*(char))
(	O
AppName	array(char)
,	O
n	*(char)
,	O
EDMA_GENERAL_ID_LEN	int
)	O
;	O
return	O
0	int
;	O
}	O
EPChar	*(char)
EDMAPROC	O
edma_get_system_path	()->(*(char))
(	O
EPChar	*(char)
c	*(char)
)	O
{	O
return	O
strdup	(*(char))->(*(char))
(	O
GVar	*(struct(long,long,long,long,long,long,long,long,long,array(struct(array(char),long)),array(struct(array(char),long)),long,long,array(char),*(struct(long,long,array(char),long,long,long,char,char)),long,long,long,union(struct(int,int,int,int,int,union(struct`,struct`)),array(char),long),array(struct(long,long,array(char))),long,long,long))
->	O
SystemPath	array(char)
)	O
;	O
}	O
EUint32	long
EDMAPROC	O
edma_set_debug_level	(long)->(long)
(	O
EUint32	long
l	long
)	O
{	O
EUint32	long
o	long
;	O
o	long
=	O
GVar	*(struct(long,long,long,long,long,long,long,long,long,array(struct(array(char),long)),array(struct(array(char),long)),long,long,array(char),*(struct(long,long,array(char),long,long,long,char,char)),long,long,long,union(struct(int,int,int,int,int,union(struct`,struct`)),array(char),long),array(struct(long,long,array(char))),long,long,long))
->	O
DebugLevel	long
;	O
GVar	*(struct(long,long,long,long,long,long,long,long,long,array(struct(array(char),long)),array(struct(array(char),long)),long,long,array(char),*(struct(long,long,array(char),long,long,long,char,char)),long,long,long,union(struct(int,int,int,int,int,union(struct`,struct`)),array(char),long),array(struct(long,long,array(char))),long,long,long))
->	O
DebugLevel	long
=	O
l	long
;	O
return	O
0	int
;	O
}	O
ESint32	long
EDMAPROC	O
edma_buffer_alloc	(*(struct(long,long,*(void))),long)->(long)
(	O
EDMAT_BUFFER	struct(long,long,*(void))
*	O
Buf	*(struct(long,long,*(void)))
,	O
EUint32	long
Size	long
)	O
{	O
if	O
(	O
Buf	*(struct(long,long,*(void)))
==	O
NULL	O
)	O
{	O
edma_printf_err	(*(char))->(long)
(	O
"%s"	*(char)
,	O
"[edma_buffer_alloc] Invalid target buffer"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
Buf	*(struct(long,long,*(void)))
->	O
h	long
=	O
edma_palloc	(long)->(long)
(	O
Size	long
)	O
;	O
if	O
(	O
Buf	*(struct(long,long,*(void)))
->	O
h	long
==	O
0	int
)	O
{	O
edma_printf_err	(*(char))->(long)
(	O
"%s"	*(char)
,	O
"[edma_buffer_alloc] Can't allocate buffer"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
Buf	*(struct(long,long,*(void)))
->	O
dat	*(void)
=	O
(	O
EPVoid	*(void)
)	O
edma_pget	(long)->(*(void))
(	O
Buf	*(struct(long,long,*(void)))
->	O
h	long
)	O
;	O
Buf	*(struct(long,long,*(void)))
->	O
Size	long
=	O
Size	long
;	O
memset	(*(void),int,int)->(*(void))
(	O
Buf	*(struct(long,long,*(void)))
->	O
dat	*(void)
,	O
0	int
,	O
Size	long
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	long
EDMAPROC	O
edma_buffer_free	(*(struct(long,long,*(void))))->(long)
(	O
EDMAT_BUFFER	struct(long,long,*(void))
*	O
Buf	*(struct(long,long,*(void)))
)	O
{	O
if	O
(	O
Buf	*(struct(long,long,*(void)))
==	O
NULL	O
)	O
{	O
edma_printf_err	(*(char))->(long)
(	O
"%s"	*(char)
,	O
"[edma_buffer_free] Invalid target buffer"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
Buf	*(struct(long,long,*(void)))
->	O
Size	long
!=	O
0	int
)	O
edma_pfree	(long,*(void))->(void)
(	O
Buf	*(struct(long,long,*(void)))
->	O
h	long
,	O
Buf	*(struct(long,long,*(void)))
->	O
dat	*(void)
)	O
;	O
Buf	*(struct(long,long,*(void)))
->	O
Size	long
=	O
0	int
;	O
return	O
0	int
;	O
}	O
ESint32	long
EDMAPROC	O
edma_buffer_realloc	(*(struct(long,long,*(void))),long)->(long)
(	O
EDMAT_BUFFER	struct(long,long,*(void))
*	O
Buf	*(struct(long,long,*(void)))
,	O
EUint32	long
Size	long
)	O
{	O
if	O
(	O
Buf	*(struct(long,long,*(void)))
==	O
NULL	O
)	O
{	O
edma_printf_err	(*(char))->(long)
(	O
"%s"	*(char)
,	O
"[edma_buffer_realloc] Invalid target buffer"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
Buf	*(struct(long,long,*(void)))
->	O
h	long
=	O
edma_prealloc	(long,long)->(long)
(	O
Buf	*(struct(long,long,*(void)))
->	O
h	long
,	O
Size	long
)	O
;	O
if	O
(	O
Buf	*(struct(long,long,*(void)))
->	O
h	long
==	O
0	int
)	O
{	O
edma_printf_err	(*(char))->(long)
(	O
"%s"	*(char)
,	O
"[edma_buffer_realloc] Can't reallocate buffer"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
Buf	*(struct(long,long,*(void)))
->	O
dat	*(void)
=	O
(	O
EPVoid	*(void)
)	O
edma_pget	(long)->(*(void))
(	O
Buf	*(struct(long,long,*(void)))
->	O
h	long
)	O
;	O
Buf	*(struct(long,long,*(void)))
->	O
Size	long
=	O
Size	long
;	O
return	O
0	int
;	O
}	O
ESint32	long
EDMAINLINE	O
edma_dict_map_string	(*(struct(long,long,long,long,long,*(struct(*`,long,long)))),*(char))->(long)
(	O
EDMA_DICT	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
,	O
EPChar	*(char)
str	*(char)
)	O
{	O
ESint32	long
i	long
,	O
hash	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
str	*(char)
[	O
i	long
]	O
!=	O
0	int
;	O
i	long
++	O
)	O
hash	long
+=	O
str	*(char)
[	O
i	long
]	O
;	O
hash	long
=	O
(	O
EUint32	long
)	O
(	O
hash	long
%	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
size	long
)	O
;	O
return	O
hash	long
;	O
}	O
EDMA_DICT	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
EDMAPROC	O
edma_dict_new	(long)->(*(struct(long,long,long,long,long,*(struct(*`,long,long)))))
(	O
ESint32	long
size	long
)	O
{	O
HMEM	long
h	long
;	O
EDMA_DICT	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
the_dict	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
;	O
ESint32	long
i	long
;	O
if	O
(	O
size	long
<=	O
0	int
)	O
return	O
NULL	O
;	O
if	O
(	O
(	O
h	long
=	O
edma_palloc	(long)->(long)
(	O
sizeof	O
(	O
EDMA_DICT_T	struct(long,long,long,long,long,*(struct(*(char),long,long)))
)	O
)	O
)	O
==	O
(	O
HMEM	long
)	O
0	int
)	O
{	O
edma_printf_err	(*(char))->(long)
(	O
"%s"	*(char)
,	O
"[edma_dict_new] Can't allocate memory "	*(char)
"to create Dictionary"	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
the_dict	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
=	O
edma_pget	(long)->(*(void))
(	O
h	long
)	O
;	O
the_dict	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
h_myself	long
=	O
h	long
;	O
if	O
(	O
(	O
h	long
=	O
edma_palloc	(long)->(long)
(	O
sizeof	O
(	O
EDMA_DICT_ITEM	struct(*(char),long,long)
)	O
*	O
size	long
*	O
2	int
)	O
)	O
==	O
(	O
HMEM	long
)	O
0	int
)	O
{	O
edma_printf_err	(*(char))->(long)
(	O
"%s"	*(char)
,	O
"[edma_dict_new] Can't allocate memory "	*(char)
"for dictionary entries"	*(char)
)	O
;	O
edma_pfree	(long,*(void))->(void)
(	O
the_dict	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
h_myself	long
,	O
the_dict	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
)	O
;	O
return	O
NULL	O
;	O
}	O
the_dict	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
h_entry	long
=	O
h	long
;	O
the_dict	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
entry	*(struct(*(char),long,long))
=	O
edma_pget	(long)->(*(void))
(	O
h	long
)	O
;	O
memset	(*(void),int,int)->(*(void))
(	O
the_dict	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
entry	*(struct(*(char),long,long))
,	O
0	int
,	O
sizeof	O
(	O
EDMA_DICT_ITEM	struct(*(char),long,long)
)	O
*	O
2	int
*	O
size	long
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
size	long
*	O
2	int
;	O
i	long
++	O
)	O
the_dict	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
entry	*(struct(*(char),long,long))
[	O
i	long
]	O
.	O
next	long
=	O
-	O
1	int
;	O
the_dict	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
size	long
=	O
size	long
;	O
the_dict	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
over_size	long
=	O
size	long
;	O
the_dict	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
over_indx	long
=	O
0	int
;	O
return	O
the_dict	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
;	O
}	O
ESint32	long
EDMAPROC	O
edma_dict_free	(*(struct(long,long,long,long,long,*(struct(*`,long,long)))))->(long)
(	O
EDMA_DICT	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
)	O
{	O
if	O
(	O
!	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
)	O
return	O
-	O
1	int
;	O
edma_pfree	(long,*(void))->(void)
(	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
h_entry	long
,	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
entry	*(struct(*(char),long,long))
)	O
;	O
edma_pfree	(long,*(void))->(void)
(	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
h_myself	long
,	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	long
EDMAPROC	O
edma_dict_add_entry	(*(struct(long,long,long,long,long,*(struct(*`,long,long)))),*(char),long)->(long)
(	O
EDMA_DICT	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
,	O
EPChar	*(char)
name	*(char)
,	O
ESint32	long
indx	long
)	O
{	O
EUint32	long
pos	long
;	O
if	O
(	O
!	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
)	O
return	O
-	O
1	int
;	O
if	O
(	O
!	O
name	*(char)
)	O
return	O
-	O
1	int
;	O
if	O
(	O
edma_dict_get_index	(*(struct(long,long,long,long,long,*(struct(*`,long,long)))),*(char))->(long)
(	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
,	O
name	*(char)
)	O
>=	O
0	int
)	O
{	O
edma_log	(*(char))->(long)
(	O
"[edma_dict_add_entry] WARNNING: Entry '%s' already exists"	*(char)
,	O
name	*(char)
)	O
;	O
}	O
pos	long
=	O
edma_dict_map_string	(*(struct(long,long,long,long,long,*(struct(*`,long,long)))),*(char))->(long)
(	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
,	O
name	*(char)
)	O
;	O
if	O
(	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
entry	*(struct(*(char),long,long))
[	O
pos	long
]	O
.	O
data	*(char)
==	O
NULL	O
)	O
{	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
entry	*(struct(*(char),long,long))
[	O
pos	long
]	O
.	O
data	*(char)
=	O
name	*(char)
;	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
entry	*(struct(*(char),long,long))
[	O
pos	long
]	O
.	O
indx	long
=	O
indx	long
;	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
entry	*(struct(*(char),long,long))
[	O
pos	long
]	O
.	O
next	long
=	O
-	O
1	int
;	O
}	O
else	O
{	O
while	O
(	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
entry	*(struct(*(char),long,long))
[	O
pos	long
]	O
.	O
next	long
>=	O
0	int
)	O
pos	long
=	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
entry	*(struct(*(char),long,long))
[	O
pos	long
]	O
.	O
next	long
;	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
entry	*(struct(*(char),long,long))
[	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
size	long
+	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
over_indx	long
]	O
.	O
data	*(char)
=	O
name	*(char)
;	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
entry	*(struct(*(char),long,long))
[	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
size	long
+	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
over_indx	long
]	O
.	O
indx	long
=	O
indx	long
;	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
entry	*(struct(*(char),long,long))
[	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
size	long
+	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
over_indx	long
]	O
.	O
next	long
=	O
-	O
1	int
;	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
entry	*(struct(*(char),long,long))
[	O
pos	long
]	O
.	O
next	long
=	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
size	long
+	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
over_indx	long
;	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
over_indx	long
++	O
;	O
}	O
return	O
0	int
;	O
}	O
ESint32	long
EDMAPROC	O
edma_dict_get_index	(*(struct(long,long,long,long,long,*(struct(*`,long,long)))),*(char))->(long)
(	O
EDMA_DICT	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
,	O
EPChar	*(char)
name	*(char)
)	O
{	O
ESint32	long
found	long
;	O
ESint32	long
pos	long
;	O
if	O
(	O
!	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
)	O
return	O
-	O
1	int
;	O
if	O
(	O
!	O
name	*(char)
)	O
return	O
-	O
1	int
;	O
pos	long
=	O
edma_dict_map_string	(*(struct(long,long,long,long,long,*(struct(*`,long,long)))),*(char))->(long)
(	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
,	O
name	*(char)
)	O
;	O
found	long
=	O
-	O
1	int
;	O
do	O
{	O
if	O
(	O
(	O
pos	long
==	O
-	O
1	int
)	O
||	O
(	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
entry	*(struct(*(char),long,long))
[	O
pos	long
]	O
.	O
data	*(char)
==	O
NULL	O
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
entry	*(struct(*(char),long,long))
[	O
pos	long
]	O
.	O
data	*(char)
,	O
name	*(char)
)	O
==	O
0	int
)	O
{	O
found	long
=	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
entry	*(struct(*(char),long,long))
[	O
pos	long
]	O
.	O
indx	long
;	O
break	O
;	O
}	O
pos	long
=	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
entry	*(struct(*(char),long,long))
[	O
pos	long
]	O
.	O
next	long
;	O
if	O
(	O
pos	long
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
}	O
while	O
(	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
entry	*(struct(*(char),long,long))
[	O
pos	long
]	O
.	O
data	*(char)
!=	O
NULL	O
)	O
;	O
return	O
found	long
;	O
}	O
ESint32	long
EDMAPROC	O
edma_dict_get_next_index	(*(struct(long,long,long,long,long,*(struct(*`,long,long)))),*(char),*(long))->(long)
(	O
EDMA_DICT	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
,	O
EPChar	*(char)
name	*(char)
,	O
ESint32	long
*	O
cpos	*(long)
)	O
{	O
ESint32	long
found	long
;	O
ESint32	long
pos	long
;	O
if	O
(	O
!	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
)	O
return	O
-	O
1	int
;	O
if	O
(	O
!	O
name	*(char)
)	O
return	O
-	O
1	int
;	O
if	O
(	O
*	O
cpos	*(long)
<	O
0	int
)	O
pos	long
=	O
edma_dict_map_string	(*(struct(long,long,long,long,long,*(struct(*`,long,long)))),*(char))->(long)
(	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
,	O
name	*(char)
)	O
;	O
else	O
pos	long
=	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
entry	*(struct(*(char),long,long))
[	O
*	O
cpos	*(long)
]	O
.	O
next	long
;	O
found	long
=	O
-	O
1	int
;	O
do	O
{	O
if	O
(	O
(	O
pos	long
==	O
-	O
1	int
)	O
||	O
(	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
entry	*(struct(*(char),long,long))
[	O
pos	long
]	O
.	O
data	*(char)
==	O
NULL	O
)	O
)	O
{	O
*	O
cpos	*(long)
=	O
-	O
1	int
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
entry	*(struct(*(char),long,long))
[	O
pos	long
]	O
.	O
data	*(char)
,	O
name	*(char)
)	O
==	O
0	int
)	O
{	O
found	long
=	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
entry	*(struct(*(char),long,long))
[	O
pos	long
]	O
.	O
indx	long
;	O
break	O
;	O
}	O
pos	long
=	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
entry	*(struct(*(char),long,long))
[	O
pos	long
]	O
.	O
next	long
;	O
if	O
(	O
pos	long
==	O
-	O
1	int
)	O
{	O
*	O
cpos	*(long)
=	O
-	O
1	int
;	O
return	O
-	O
1	int
;	O
}	O
}	O
while	O
(	O
d	*(struct(long,long,long,long,long,*(struct(*(char),long,long))))
->	O
entry	*(struct(*(char),long,long))
[	O
pos	long
]	O
.	O
data	*(char)
!=	O
NULL	O
)	O
;	O
*	O
cpos	*(long)
=	O
pos	long
;	O
return	O
found	long
;	O
}	O
