struct	O
line_entry	O
{	O
struct	O
line_entry	O
*	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
symbolS	O
*	O
label	O
;	O
struct	O
dwarf2_line_info	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
;	O
}	O
;	O
static	O
char	O
unused	O
[	O
offsetof	O
(	O
struct	O
line_entry	O
,	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
?	O
-	O
1	int
:	O
1	int
]	O
ATTRIBUTE_UNUSED	O
;	O
struct	O
line_subseg	O
{	O
struct	O
line_subseg	O
*	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
subsegT	O
subseg	O
;	O
struct	O
line_entry	O
*	O
head	O
;	O
struct	O
line_entry	O
*	O
*	O
ptail	O
;	O
struct	O
line_entry	O
*	O
*	O
pmove_tail	O
;	O
}	O
;	O
struct	O
line_seg	O
{	O
struct	O
line_seg	O
*	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
segT	O
seg	O
;	O
struct	O
line_subseg	O
*	O
head	O
;	O
symbolS	O
*	O
text_start	O
;	O
symbolS	O
*	O
text_end	O
;	O
}	O
;	O
static	O
struct	O
line_seg	O
*	O
all_segs	O
;	O
static	O
struct	O
line_seg	O
*	O
*	O
last_seg_ptr	O
;	O
struct	O
file_entry	O
{	O
const	O
char	O
*	O
filename	*(char)
;	O
unsigned	O
int	O
dir	*(char)
;	O
}	O
;	O
static	O
struct	O
file_entry	O
*	O
files	O
;	O
static	O
unsigned	O
int	O
files_in_use	O
;	O
static	O
unsigned	O
int	O
files_allocated	O
;	O
static	O
char	O
*	O
*	O
dirs	O
;	O
static	O
unsigned	O
int	O
dirs_in_use	O
;	O
static	O
unsigned	O
int	O
dirs_allocated	O
;	O
bfd_boolean	int
dwarf2_loc_directive_seen	O
;	O
bfd_boolean	int
dwarf2_loc_mark_labels	O
;	O
static	O
struct	O
dwarf2_line_info	O
current	O
=	O
{	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
DWARF2_LINE_DEFAULT_IS_STMT	O
?	O
DWARF2_FLAG_IS_STMT	O
:	O
0	int
,	O
0	int
,	O
NULL	O
}	O
;	O
static	O
symbolS	O
*	O
force_reset_view	O
;	O
static	O
symbolS	O
*	O
view_assert_failed	O
;	O
static	O
unsigned	O
int	O
sizeof_address	O
;	O
static	O
unsigned	O
int	O
get_filenum	O
(	O
const	O
char	O
*	O
,	O
unsigned	O
int	O
)	O
;	O
static	O
void	O
generic_dwarf2_emit_offset	O
(	O
symbolS	O
*	O
symbol	*(struct)
,	O
unsigned	O
int	O
size	int
)	O
{	O
expressionS	O
exp	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
exp	O
,	O
0	int
,	O
sizeof	O
exp	O
)	O
;	O
exp	O
.	O
X_op	O
=	O
O_symbol	O
;	O
exp	O
.	O
X_add_symbol	O
=	O
symbol	*(struct)
;	O
exp	O
.	O
X_add_number	O
=	O
0	int
;	O
emit_expr	O
(	O
&	O
exp	O
,	O
size	int
)	O
;	O
}	O
static	O
struct	O
line_subseg	O
*	O
get_line_subseg	O
(	O
segT	O
seg	O
,	O
subsegT	O
subseg	O
,	O
bfd_boolean	int
create_p	O
)	O
{	O
struct	O
line_seg	O
*	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
=	O
seg_info	O
(	O
seg	O
)	O
->	O
dwarf2_line_seg	O
;	O
struct	O
line_subseg	O
*	O
*	O
pss	O
,	O
*	O
lss	O
;	O
if	O
(	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
==	O
NULL	O
)	O
{	O
if	O
(	O
!	O
create_p	O
)	O
return	O
NULL	O
;	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
=	O
XNEW	O
(	O
struct	O
line_seg	O
)	O
;	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
=	O
NULL	O
;	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
->	O
seg	O
=	O
seg	O
;	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
->	O
head	O
=	O
NULL	O
;	O
*	O
last_seg_ptr	O
=	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
;	O
last_seg_ptr	O
=	O
&	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
seg_info	O
(	O
seg	O
)	O
->	O
dwarf2_line_seg	O
=	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
;	O
}	O
gas_assert	O
(	O
seg	O
==	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
->	O
seg	O
)	O
;	O
for	O
(	O
pss	O
=	O
&	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
->	O
head	O
;	O
(	O
lss	O
=	O
*	O
pss	O
)	O
!=	O
NULL	O
;	O
pss	O
=	O
&	O
lss	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
{	O
if	O
(	O
lss	O
->	O
subseg	O
==	O
subseg	O
)	O
goto	O
found_subseg	O
;	O
if	O
(	O
lss	O
->	O
subseg	O
>	O
subseg	O
)	O
break	O
;	O
}	O
lss	O
=	O
XNEW	O
(	O
struct	O
line_subseg	O
)	O
;	O
lss	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
=	O
*	O
pss	O
;	O
lss	O
->	O
subseg	O
=	O
subseg	O
;	O
lss	O
->	O
head	O
=	O
NULL	O
;	O
lss	O
->	O
ptail	O
=	O
&	O
lss	O
->	O
head	O
;	O
lss	O
->	O
pmove_tail	O
=	O
&	O
lss	O
->	O
head	O
;	O
*	O
pss	O
=	O
lss	O
;	O
found_subseg	O
:	O
return	O
lss	O
;	O
}	O
static	O
struct	O
line_entry	O
*	O
reverse_line_entry_list	O
(	O
struct	O
line_entry	O
*	O
h	O
)	O
{	O
struct	O
line_entry	O
*	O
p	*(void)
=	O
NULL	O
,	O
*	O
e	O
,	O
*	O
n	O
;	O
for	O
(	O
e	O
=	O
h	O
;	O
e	O
;	O
e	O
=	O
n	O
)	O
{	O
n	O
=	O
e	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
e	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
=	O
p	*(void)
;	O
p	*(void)
=	O
e	O
;	O
}	O
return	O
p	*(void)
;	O
}	O
static	O
void	O
set_or_check_view	O
(	O
struct	O
line_entry	O
*	O
e	O
,	O
struct	O
line_entry	O
*	O
p	*(void)
,	O
struct	O
line_entry	O
*	O
h	O
)	O
{	O
expressionS	O
viewx	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
viewx	O
,	O
0	int
,	O
sizeof	O
(	O
viewx	O
)	O
)	O
;	O
viewx	O
.	O
X_unsigned	O
=	O
1	int
;	O
if	O
(	O
!	O
p	*(void)
||	O
(	O
e	O
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
view	O
==	O
force_reset_view	O
&&	O
force_reset_view	O
)	O
)	O
{	O
viewx	O
.	O
X_op	O
=	O
O_constant	O
;	O
viewx	O
.	O
X_add_number	O
=	O
0	int
;	O
viewx	O
.	O
X_add_symbol	O
=	O
NULL	O
;	O
viewx	O
.	O
X_op_symbol	O
=	O
NULL	O
;	O
}	O
else	O
{	O
viewx	O
.	O
X_op	O
=	O
O_gt	O
;	O
viewx	O
.	O
X_add_number	O
=	O
0	int
;	O
viewx	O
.	O
X_add_symbol	O
=	O
e	O
->	O
label	O
;	O
viewx	O
.	O
X_op_symbol	O
=	O
p	*(void)
->	O
label	O
;	O
resolve_expression	O
(	O
&	O
viewx	O
)	O
;	O
if	O
(	O
viewx	O
.	O
X_op	O
==	O
O_constant	O
)	O
viewx	O
.	O
X_add_number	O
=	O
!	O
viewx	O
.	O
X_add_number	O
;	O
else	O
{	O
viewx	O
.	O
X_add_symbol	O
=	O
make_expr_symbol	O
(	O
&	O
viewx	O
)	O
;	O
viewx	O
.	O
X_add_number	O
=	O
0	int
;	O
viewx	O
.	O
X_op_symbol	O
=	O
NULL	O
;	O
viewx	O
.	O
X_op	O
=	O
O_logical_not	O
;	O
}	O
}	O
if	O
(	O
S_IS_DEFINED	O
(	O
e	O
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
view	O
)	O
&&	O
symbol_constant_p	O
(	O
e	O
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
view	O
)	O
)	O
{	O
expressionS	O
*	O
value	long
=	O
symbol_get_value_expression	O
(	O
e	O
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
view	O
)	O
;	O
if	O
(	O
viewx	O
.	O
X_op	O
==	O
O_constant	O
)	O
{	O
if	O
(	O
!	O
value	long
->	O
X_add_number	O
!=	O
!	O
viewx	O
.	O
X_add_number	O
)	O
as_bad	O
(	O
_	O
(	O
"view number mismatch"	*(char)
)	O
)	O
;	O
}	O
else	O
if	O
(	O
!	O
value	long
->	O
X_add_number	O
)	O
{	O
symbolS	O
*	O
deferred	O
=	O
make_expr_symbol	O
(	O
&	O
viewx	O
)	O
;	O
if	O
(	O
view_assert_failed	O
)	O
{	O
expressionS	O
chk	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
chk	O
,	O
0	int
,	O
sizeof	O
(	O
chk	O
)	O
)	O
;	O
chk	O
.	O
X_unsigned	O
=	O
1	int
;	O
chk	O
.	O
X_op	O
=	O
O_add	O
;	O
chk	O
.	O
X_add_number	O
=	O
0	int
;	O
chk	O
.	O
X_add_symbol	O
=	O
view_assert_failed	O
;	O
chk	O
.	O
X_op_symbol	O
=	O
deferred	O
;	O
deferred	O
=	O
make_expr_symbol	O
(	O
&	O
chk	O
)	O
;	O
}	O
view_assert_failed	O
=	O
deferred	O
;	O
}	O
}	O
if	O
(	O
viewx	O
.	O
X_op	O
!=	O
O_constant	O
||	O
viewx	O
.	O
X_add_number	O
)	O
{	O
expressionS	O
incv	O
;	O
if	O
(	O
!	O
p	*(void)
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
view	O
)	O
{	O
p	*(void)
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
view	O
=	O
symbol_temp_make	O
(	O
)	O
;	O
gas_assert	O
(	O
!	O
S_IS_DEFINED	O
(	O
p	*(void)
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
view	O
)	O
)	O
;	O
}	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
incv	O
,	O
0	int
,	O
sizeof	O
(	O
incv	O
)	O
)	O
;	O
incv	O
.	O
X_unsigned	O
=	O
1	int
;	O
incv	O
.	O
X_op	O
=	O
O_symbol	O
;	O
incv	O
.	O
X_add_symbol	O
=	O
p	*(void)
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
view	O
;	O
incv	O
.	O
X_add_number	O
=	O
1	int
;	O
if	O
(	O
viewx	O
.	O
X_op	O
==	O
O_constant	O
)	O
{	O
gas_assert	O
(	O
viewx	O
.	O
X_add_number	O
==	O
1	int
)	O
;	O
viewx	O
=	O
incv	O
;	O
}	O
else	O
{	O
viewx	O
.	O
X_add_symbol	O
=	O
make_expr_symbol	O
(	O
&	O
viewx	O
)	O
;	O
viewx	O
.	O
X_add_number	O
=	O
0	int
;	O
viewx	O
.	O
X_op_symbol	O
=	O
make_expr_symbol	O
(	O
&	O
incv	O
)	O
;	O
viewx	O
.	O
X_op	O
=	O
O_multiply	O
;	O
}	O
}	O
if	O
(	O
!	O
S_IS_DEFINED	O
(	O
e	O
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
view	O
)	O
)	O
{	O
symbol_set_value_expression	O
(	O
e	O
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
view	O
,	O
&	O
viewx	O
)	O
;	O
S_SET_SEGMENT	O
(	O
e	O
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
view	O
,	O
expr_section	O
)	O
;	O
symbol_set_frag	O
(	O
e	O
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
view	O
,	O
&	O
zero_address_frag	O
)	O
;	O
}	O
if	O
(	O
h	O
&&	O
p	*(void)
&&	O
p	*(void)
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
view	O
&&	O
!	O
S_IS_DEFINED	O
(	O
p	*(void)
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
view	O
)	O
)	O
{	O
struct	O
line_entry	O
*	O
h2	O
;	O
struct	O
line_entry	O
*	O
r	O
=	O
reverse_line_entry_list	O
(	O
h	O
)	O
;	O
gas_assert	O
(	O
r	O
==	O
p	*(void)
)	O
;	O
do	O
{	O
if	O
(	O
r	O
==	O
h	O
)	O
break	O
;	O
set_or_check_view	O
(	O
r	O
,	O
r	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
,	O
NULL	O
)	O
;	O
}	O
while	O
(	O
r	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
&&	O
r	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
view	O
&&	O
!	O
S_IS_DEFINED	O
(	O
r	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
view	O
)	O
&&	O
(	O
r	O
=	O
r	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
)	O
;	O
h2	O
=	O
reverse_line_entry_list	O
(	O
p	*(void)
)	O
;	O
gas_assert	O
(	O
h2	O
==	O
h	O
)	O
;	O
do	O
{	O
if	O
(	O
r	O
==	O
h	O
)	O
continue	O
;	O
gas_assert	O
(	O
S_IS_DEFINED	O
(	O
r	O
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
view	O
)	O
)	O
;	O
resolve_expression	O
(	O
symbol_get_value_expression	O
(	O
r	O
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
view	O
)	O
)	O
;	O
}	O
while	O
(	O
r	O
!=	O
p	*(void)
&&	O
(	O
r	O
=	O
r	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
)	O
;	O
resolve_expression	O
(	O
symbol_get_value_expression	O
(	O
e	O
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
view	O
)	O
)	O
;	O
}	O
}	O
static	O
void	O
dwarf2_gen_line_info_1	O
(	O
symbolS	O
*	O
label	O
,	O
struct	O
dwarf2_line_info	O
*	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
)	O
{	O
struct	O
line_subseg	O
*	O
lss	O
;	O
struct	O
line_entry	O
*	O
e	O
;	O
e	O
=	O
XNEW	O
(	O
struct	O
line_entry	O
)	O
;	O
e	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
=	O
NULL	O
;	O
e	O
->	O
label	O
=	O
label	O
;	O
e	O
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
=	O
*	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
;	O
lss	O
=	O
get_line_subseg	O
(	O
now_seg	O
,	O
now_subseg	O
,	O
TRUE	int
)	O
;	O
if	O
(	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
->	O
view	O
&&	O
lss	O
->	O
head	O
)	O
set_or_check_view	O
(	O
e	O
,	O
(	O
struct	O
line_entry	O
*	O
)	O
lss	O
->	O
ptail	O
,	O
lss	O
->	O
head	O
)	O
;	O
*	O
lss	O
->	O
ptail	O
=	O
e	O
;	O
lss	O
->	O
ptail	O
=	O
&	O
e	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
}	O
void	O
dwarf2_gen_line_info	O
(	O
addressT	O
ofs	O
,	O
struct	O
dwarf2_line_info	O
*	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
)	O
{	O
static	O
unsigned	O
int	O
line	O
=	O
-	O
1	int
;	O
static	O
unsigned	O
int	O
filenum	O
=	O
-	O
1	int
;	O
symbolS	O
*	O
sym	*(struct)
;	O
if	O
(	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
->	O
filenum	O
==	O
0	int
||	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
->	O
line	O
==	O
0	int
)	O
return	O
;	O
if	O
(	O
debug_type	O
==	O
DEBUG_DWARF2	O
&&	O
line	O
==	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
->	O
line	O
&&	O
filenum	O
==	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
->	O
filenum	O
)	O
return	O
;	O
line	O
=	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
->	O
line	O
;	O
filenum	O
=	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
->	O
filenum	O
;	O
if	O
(	O
linkrelax	O
)	O
{	O
char	O
name	*(char)
[	O
120	int
]	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
".Loc.%u.%u"	*(char)
,	O
line	O
,	O
filenum	O
)	O
;	O
sym	*(struct)
=	O
symbol_new	O
(	O
name	*(char)
,	O
now_seg	O
,	O
ofs	O
,	O
frag_now	O
)	O
;	O
}	O
else	O
sym	*(struct)
=	O
symbol_temp_new	O
(	O
now_seg	O
,	O
ofs	O
,	O
frag_now	O
)	O
;	O
dwarf2_gen_line_info_1	O
(	O
sym	*(struct)
,	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
)	O
;	O
}	O
void	O
dwarf2_where	O
(	O
struct	O
dwarf2_line_info	O
*	O
line	O
)	O
{	O
if	O
(	O
debug_type	O
==	O
DEBUG_DWARF2	O
)	O
{	O
const	O
char	O
*	O
filename	*(char)
;	O
memset	(*(void),int,long)->(*(void))
(	O
line	O
,	O
0	int
,	O
sizeof	O
(	O
*	O
line	O
)	O
)	O
;	O
filename	*(char)
=	O
as_where	O
(	O
&	O
line	O
->	O
line	O
)	O
;	O
line	O
->	O
filenum	O
=	O
get_filenum	O
(	O
filename	*(char)
,	O
0	int
)	O
;	O
line	O
->	O
column	O
=	O
0	int
;	O
line	O
->	O
flags	int
=	O
DWARF2_FLAG_IS_STMT	O
;	O
line	O
->	O
isa	O
=	O
current	O
.	O
isa	O
;	O
line	O
->	O
discriminator	O
=	O
current	O
.	O
discriminator	O
;	O
line	O
->	O
view	O
=	O
NULL	O
;	O
}	O
else	O
*	O
line	O
=	O
current	O
;	O
}	O
void	O
dwarf2_set_isa	O
(	O
unsigned	O
int	O
isa	O
)	O
{	O
current	O
.	O
isa	O
=	O
isa	O
;	O
}	O
void	O
dwarf2_emit_insn	O
(	O
int	O
size	int
)	O
{	O
struct	O
dwarf2_line_info	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
;	O
if	O
(	O
debug_type	O
!=	O
DEBUG_DWARF2	O
?	O
!	O
dwarf2_loc_directive_seen	O
:	O
!	O
seen_at_least_1_file	O
(	O
)	O
)	O
return	O
;	O
dwarf2_where	O
(	O
&	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
)	O
;	O
dwarf2_gen_line_info	O
(	O
(	O
frag_now_fix_octets	O
(	O
)	O
-	O
size	int
)	O
/	O
OCTETS_PER_BYTE	O
,	O
&	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
)	O
;	O
dwarf2_consume_line_info	O
(	O
)	O
;	O
}	O
void	O
dwarf2_move_insn	O
(	O
int	O
delta	O
)	O
{	O
struct	O
line_subseg	O
*	O
lss	O
;	O
struct	O
line_entry	O
*	O
e	O
;	O
valueT	O
now	O
;	O
if	O
(	O
delta	O
==	O
0	int
)	O
return	O
;	O
lss	O
=	O
get_line_subseg	O
(	O
now_seg	O
,	O
now_subseg	O
,	O
FALSE	O
)	O
;	O
if	O
(	O
!	O
lss	O
)	O
return	O
;	O
now	O
=	O
frag_now_fix	O
(	O
)	O
;	O
while	O
(	O
(	O
e	O
=	O
*	O
lss	O
->	O
pmove_tail	O
)	O
)	O
{	O
if	O
(	O
S_GET_VALUE	O
(	O
e	O
->	O
label	O
)	O
==	O
now	O
)	O
S_SET_VALUE	O
(	O
e	O
->	O
label	O
,	O
now	O
+	O
delta	O
)	O
;	O
lss	O
->	O
pmove_tail	O
=	O
&	O
e	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
}	O
}	O
void	O
dwarf2_consume_line_info	O
(	O
void	O
)	O
{	O
dwarf2_loc_directive_seen	O
=	O
FALSE	O
;	O
current	O
.	O
flags	int
&=	O
~	O
(	O
DWARF2_FLAG_BASIC_BLOCK	O
|	O
DWARF2_FLAG_PROLOGUE_END	O
|	O
DWARF2_FLAG_EPILOGUE_BEGIN	O
)	O
;	O
current	O
.	O
discriminator	O
=	O
0	int
;	O
current	O
.	O
view	O
=	O
NULL	O
;	O
}	O
void	O
dwarf2_emit_label	O
(	O
symbolS	O
*	O
label	O
)	O
{	O
struct	O
dwarf2_line_info	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
;	O
if	O
(	O
!	O
dwarf2_loc_mark_labels	O
)	O
return	O
;	O
if	O
(	O
S_GET_SEGMENT	O
(	O
label	O
)	O
!=	O
now_seg	O
)	O
return	O
;	O
if	O
(	O
!	O
(	O
bfd_section_flags	(*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))))->(int)
(	O
now_seg	O
)	O
&	O
SEC_CODE	O
)	O
)	O
return	O
;	O
if	O
(	O
files_in_use	O
==	O
0	int
&&	O
debug_type	O
!=	O
DEBUG_DWARF2	O
)	O
return	O
;	O
dwarf2_where	O
(	O
&	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
)	O
;	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
flags	int
|=	O
DWARF2_FLAG_BASIC_BLOCK	O
;	O
dwarf2_gen_line_info_1	O
(	O
label	O
,	O
&	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
)	O
;	O
dwarf2_consume_line_info	O
(	O
)	O
;	O
}	O
static	O
unsigned	O
int	O
get_filenum	O
(	O
const	O
char	O
*	O
filename	*(char)
,	O
unsigned	O
int	O
num	O
)	O
{	O
static	O
unsigned	O
int	O
last_used	O
,	O
last_used_dir_len	O
;	O
const	O
char	O
*	O
file	*(void)
;	O
size_t	long
dir_len	O
;	O
unsigned	O
int	O
i	*(struct)
,	O
dir	*(char)
;	O
if	O
(	O
num	O
==	O
0	int
&&	O
last_used	O
)	O
{	O
if	O
(	O
!	O
files	O
[	O
last_used	O
]	O
.	O
dir	*(char)
&&	O
filename_cmp	O
(	O
filename	*(char)
,	O
files	O
[	O
last_used	O
]	O
.	O
filename	*(char)
)	O
==	O
0	int
)	O
return	O
last_used	O
;	O
if	O
(	O
files	O
[	O
last_used	O
]	O
.	O
dir	*(char)
&&	O
filename_ncmp	O
(	O
filename	*(char)
,	O
dirs	O
[	O
files	O
[	O
last_used	O
]	O
.	O
dir	*(char)
]	O
,	O
last_used_dir_len	O
)	O
==	O
0	int
&&	O
IS_DIR_SEPARATOR	O
(	O
filename	*(char)
[	O
last_used_dir_len	O
]	O
)	O
&&	O
filename_cmp	O
(	O
filename	*(char)
+	O
last_used_dir_len	O
+	O
1	int
,	O
files	O
[	O
last_used	O
]	O
.	O
filename	*(char)
)	O
==	O
0	int
)	O
return	O
last_used	O
;	O
}	O
file	*(void)
=	O
lbasename	O
(	O
filename	*(char)
)	O
;	O
if	O
(	O
file	*(void)
==	O
filename	*(char)
+	O
1	int
)	O
file	*(void)
=	O
filename	*(char)
;	O
dir_len	O
=	O
file	*(void)
-	O
filename	*(char)
;	O
dir	*(char)
=	O
0	int
;	O
if	O
(	O
dir_len	O
)	O
{	O
--	O
dir_len	O
;	O
for	O
(	O
dir	*(char)
=	O
1	int
;	O
dir	*(char)
<	O
dirs_in_use	O
;	O
++	O
dir	*(char)
)	O
if	O
(	O
filename_ncmp	O
(	O
filename	*(char)
,	O
dirs	O
[	O
dir	*(char)
]	O
,	O
dir_len	O
)	O
==	O
0	int
&&	O
dirs	O
[	O
dir	*(char)
]	O
[	O
dir_len	O
]	O
==	O
'\0'	O
)	O
break	O
;	O
if	O
(	O
dir	*(char)
>=	O
dirs_in_use	O
)	O
{	O
if	O
(	O
dir	*(char)
>=	O
dirs_allocated	O
)	O
{	O
dirs_allocated	O
=	O
dir	*(char)
+	O
32	int
;	O
dirs	O
=	O
XRESIZEVEC	O
(	O
char	O
*	O
,	O
dirs	O
,	O
dirs_allocated	O
)	O
;	O
}	O
dirs	O
[	O
dir	*(char)
]	O
=	O
xmemdup0	O
(	O
filename	*(char)
,	O
dir_len	O
)	O
;	O
dirs_in_use	O
=	O
dir	*(char)
+	O
1	int
;	O
}	O
}	O
if	O
(	O
num	O
==	O
0	int
)	O
{	O
for	O
(	O
i	*(struct)
=	O
1	int
;	O
i	*(struct)
<	O
files_in_use	O
;	O
++	O
i	*(struct)
)	O
if	O
(	O
files	O
[	O
i	*(struct)
]	O
.	O
dir	*(char)
==	O
dir	*(char)
&&	O
files	O
[	O
i	*(struct)
]	O
.	O
filename	*(char)
&&	O
filename_cmp	O
(	O
file	*(void)
,	O
files	O
[	O
i	*(struct)
]	O
.	O
filename	*(char)
)	O
==	O
0	int
)	O
{	O
last_used	O
=	O
i	*(struct)
;	O
last_used_dir_len	O
=	O
dir_len	O
;	O
return	O
i	*(struct)
;	O
}	O
}	O
else	O
i	*(struct)
=	O
num	O
;	O
if	O
(	O
i	*(struct)
>=	O
files_allocated	O
)	O
{	O
unsigned	O
int	O
old	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
=	O
files_allocated	O
;	O
files_allocated	O
=	O
i	*(struct)
+	O
32	int
;	O
if	O
(	O
files_allocated	O
<=	O
old	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
{	O
as_bad	O
(	O
_	O
(	O
"file number %lu is too big"	*(char)
)	O
,	O
(	O
unsigned	O
long	O
)	O
i	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
files	O
=	O
XRESIZEVEC	O
(	O
struct	O
file_entry	O
,	O
files	O
,	O
files_allocated	O
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
files	O
+	O
old	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
,	O
0	int
,	O
(	O
i	*(struct)
+	O
32	int
-	O
old	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
*	O
sizeof	O
(	O
struct	O
file_entry	O
)	O
)	O
;	O
}	O
files	O
[	O
i	*(struct)
]	O
.	O
filename	*(char)
=	O
file	*(void)
;	O
files	O
[	O
i	*(struct)
]	O
.	O
dir	*(char)
=	O
dir	*(char)
;	O
if	O
(	O
files_in_use	O
<	O
i	*(struct)
+	O
1	int
)	O
files_in_use	O
=	O
i	*(struct)
+	O
1	int
;	O
last_used	O
=	O
i	*(struct)
;	O
last_used_dir_len	O
=	O
dir_len	O
;	O
return	O
i	*(struct)
;	O
}	O
char	O
*	O
dwarf2_directive_filename	O
(	O
void	O
)	O
{	O
valueT	O
num	O
;	O
char	O
*	O
filename	*(char)
;	O
int	O
filename_len	O
;	O
SKIP_WHITESPACE	O
(	O
)	O
;	O
if	O
(	O
*	O
input_line_pointer	O
==	O
'"'	O
)	O
{	O
s_app_file	O
(	O
0	int
)	O
;	O
return	O
NULL	O
;	O
}	O
num	O
=	O
get_absolute_expression	O
(	O
)	O
;	O
filename	*(char)
=	O
demand_copy_C_string	O
(	O
&	O
filename_len	O
)	O
;	O
if	O
(	O
filename	*(char)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
demand_empty_rest_of_line	O
(	O
)	O
;	O
if	O
(	O
(	O
offsetT	O
)	O
num	O
<	O
1	int
)	O
{	O
as_bad	O
(	O
_	O
(	O
"file number less than one"	*(char)
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
debug_type	O
=	O
DEBUG_NONE	O
;	O
if	O
(	O
num	O
!=	O
(	O
unsigned	O
int	O
)	O
num	O
||	O
num	O
>=	O
(	O
size_t	long
)	O
-	O
1	int
/	O
sizeof	O
(	O
struct	O
file_entry	O
)	O
-	O
32	int
)	O
{	O
as_bad	O
(	O
_	O
(	O
"file number %lu is too big"	*(char)
)	O
,	O
(	O
unsigned	O
long	O
)	O
num	O
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
num	O
<	O
files_in_use	O
&&	O
files	O
[	O
num	O
]	O
.	O
filename	*(char)
!=	O
0	int
)	O
{	O
as_bad	O
(	O
_	O
(	O
"file number %u already allocated"	*(char)
)	O
,	O
(	O
unsigned	O
int	O
)	O
num	O
)	O
;	O
return	O
NULL	O
;	O
}	O
get_filenum	O
(	O
filename	*(char)
,	O
(	O
unsigned	O
int	O
)	O
num	O
)	O
;	O
return	O
filename	*(char)
;	O
}	O
void	O
dwarf2_directive_file	O
(	O
int	O
dummy	O
ATTRIBUTE_UNUSED	O
)	O
{	O
(	O
void	O
)	O
dwarf2_directive_filename	O
(	O
)	O
;	O
}	O
void	O
dwarf2_directive_loc	O
(	O
int	O
dummy	O
ATTRIBUTE_UNUSED	O
)	O
{	O
offsetT	O
filenum	O
,	O
line	O
;	O
if	O
(	O
dwarf2_loc_directive_seen	O
)	O
dwarf2_emit_insn	O
(	O
0	int
)	O
;	O
filenum	O
=	O
get_absolute_expression	O
(	O
)	O
;	O
SKIP_WHITESPACE	O
(	O
)	O
;	O
line	O
=	O
get_absolute_expression	O
(	O
)	O
;	O
if	O
(	O
filenum	O
<	O
1	int
)	O
{	O
as_bad	O
(	O
_	O
(	O
"file number less than one"	*(char)
)	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
filenum	O
>=	O
(	O
int	O
)	O
files_in_use	O
||	O
files	O
[	O
filenum	O
]	O
.	O
filename	*(char)
==	O
0	int
)	O
{	O
as_bad	O
(	O
_	O
(	O
"unassigned file number %ld"	*(char)
)	O
,	O
(	O
long	O
)	O
filenum	O
)	O
;	O
return	O
;	O
}	O
current	O
.	O
filenum	O
=	O
filenum	O
;	O
current	O
.	O
line	O
=	O
line	O
;	O
current	O
.	O
discriminator	O
=	O
0	int
;	O
if	O
(	O
listing	O
)	O
{	O
if	O
(	O
files	O
[	O
filenum	O
]	O
.	O
dir	*(char)
)	O
{	O
size_t	long
dir_len	O
=	O
strlen	(*(char))->(long)
(	O
dirs	O
[	O
files	O
[	O
filenum	O
]	O
.	O
dir	*(char)
]	O
)	O
;	O
size_t	long
file_len	O
=	O
strlen	(*(char))->(long)
(	O
files	O
[	O
filenum	O
]	O
.	O
filename	*(char)
)	O
;	O
char	O
*	O
cp	O
=	O
XNEWVEC	O
(	O
char	O
,	O
dir_len	O
+	O
1	int
+	O
file_len	O
+	O
1	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
cp	O
,	O
dirs	O
[	O
files	O
[	O
filenum	O
]	O
.	O
dir	*(char)
]	O
,	O
dir_len	O
)	O
;	O
INSERT_DIR_SEPARATOR	O
(	O
cp	O
,	O
dir_len	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
cp	O
+	O
dir_len	O
+	O
1	int
,	O
files	O
[	O
filenum	O
]	O
.	O
filename	*(char)
,	O
file_len	O
)	O
;	O
cp	O
[	O
dir_len	O
+	O
file_len	O
+	O
1	int
]	O
=	O
'\0'	O
;	O
listing_source_file	O
(	O
cp	O
)	O
;	O
free	(*(void))->(void)
(	O
cp	O
)	O
;	O
}	O
else	O
listing_source_file	O
(	O
files	O
[	O
filenum	O
]	O
.	O
filename	*(char)
)	O
;	O
listing_source_line	O
(	O
line	O
)	O
;	O
}	O
SKIP_WHITESPACE	O
(	O
)	O
;	O
if	O
(	O
ISDIGIT	O
(	O
*	O
input_line_pointer	O
)	O
)	O
{	O
current	O
.	O
column	O
=	O
get_absolute_expression	O
(	O
)	O
;	O
SKIP_WHITESPACE	O
(	O
)	O
;	O
}	O
while	O
(	O
ISALPHA	O
(	O
*	O
input_line_pointer	O
)	O
)	O
{	O
char	O
*	O
p	*(void)
,	O
c	O
;	O
offsetT	O
value	long
;	O
c	O
=	O
get_symbol_name	O
(	O
&	O
p	*(void)
)	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
p	*(void)
,	O
"basic_block"	*(char)
)	O
==	O
0	int
)	O
{	O
current	O
.	O
flags	int
|=	O
DWARF2_FLAG_BASIC_BLOCK	O
;	O
*	O
input_line_pointer	O
=	O
c	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
p	*(void)
,	O
"prologue_end"	*(char)
)	O
==	O
0	int
)	O
{	O
current	O
.	O
flags	int
|=	O
DWARF2_FLAG_PROLOGUE_END	O
;	O
*	O
input_line_pointer	O
=	O
c	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
p	*(void)
,	O
"epilogue_begin"	*(char)
)	O
==	O
0	int
)	O
{	O
current	O
.	O
flags	int
|=	O
DWARF2_FLAG_EPILOGUE_BEGIN	O
;	O
*	O
input_line_pointer	O
=	O
c	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
p	*(void)
,	O
"is_stmt"	*(char)
)	O
==	O
0	int
)	O
{	O
(	O
void	O
)	O
restore_line_pointer	O
(	O
c	O
)	O
;	O
value	long
=	O
get_absolute_expression	O
(	O
)	O
;	O
if	O
(	O
value	long
==	O
0	int
)	O
current	O
.	O
flags	int
&=	O
~	O
DWARF2_FLAG_IS_STMT	O
;	O
else	O
if	O
(	O
value	long
==	O
1	int
)	O
current	O
.	O
flags	int
|=	O
DWARF2_FLAG_IS_STMT	O
;	O
else	O
{	O
as_bad	O
(	O
_	O
(	O
"is_stmt value not 0 or 1"	*(char)
)	O
)	O
;	O
return	O
;	O
}	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
p	*(void)
,	O
"isa"	*(char)
)	O
==	O
0	int
)	O
{	O
(	O
void	O
)	O
restore_line_pointer	O
(	O
c	O
)	O
;	O
value	long
=	O
get_absolute_expression	O
(	O
)	O
;	O
if	O
(	O
value	long
>=	O
0	int
)	O
current	O
.	O
isa	O
=	O
value	long
;	O
else	O
{	O
as_bad	O
(	O
_	O
(	O
"isa number less than zero"	*(char)
)	O
)	O
;	O
return	O
;	O
}	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
p	*(void)
,	O
"discriminator"	*(char)
)	O
==	O
0	int
)	O
{	O
(	O
void	O
)	O
restore_line_pointer	O
(	O
c	O
)	O
;	O
value	long
=	O
get_absolute_expression	O
(	O
)	O
;	O
if	O
(	O
value	long
>=	O
0	int
)	O
current	O
.	O
discriminator	O
=	O
value	long
;	O
else	O
{	O
as_bad	O
(	O
_	O
(	O
"discriminator less than zero"	*(char)
)	O
)	O
;	O
return	O
;	O
}	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
p	*(void)
,	O
"view"	*(char)
)	O
==	O
0	int
)	O
{	O
symbolS	O
*	O
sym	*(struct)
;	O
(	O
void	O
)	O
restore_line_pointer	O
(	O
c	O
)	O
;	O
SKIP_WHITESPACE	O
(	O
)	O
;	O
if	O
(	O
ISDIGIT	O
(	O
*	O
input_line_pointer	O
)	O
||	O
*	O
input_line_pointer	O
==	O
'-'	O
)	O
{	O
bfd_boolean	int
force_reset	O
=	O
*	O
input_line_pointer	O
==	O
'-'	O
;	O
value	long
=	O
get_absolute_expression	O
(	O
)	O
;	O
if	O
(	O
value	long
!=	O
0	int
)	O
{	O
as_bad	O
(	O
_	O
(	O
"numeric view can only be asserted to zero"	*(char)
)	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
force_reset	O
&&	O
force_reset_view	O
)	O
sym	*(struct)
=	O
force_reset_view	O
;	O
else	O
{	O
sym	*(struct)
=	O
symbol_temp_new	O
(	O
absolute_section	O
,	O
value	long
,	O
&	O
zero_address_frag	O
)	O
;	O
if	O
(	O
force_reset	O
)	O
force_reset_view	O
=	O
sym	*(struct)
;	O
}	O
}	O
else	O
{	O
char	O
*	O
name	*(char)
=	O
read_symbol_name	O
(	O
)	O
;	O
if	O
(	O
!	O
name	*(char)
)	O
return	O
;	O
sym	*(struct)
=	O
symbol_find_or_make	O
(	O
name	*(char)
)	O
;	O
if	O
(	O
S_IS_DEFINED	O
(	O
sym	*(struct)
)	O
||	O
symbol_equated_p	O
(	O
sym	*(struct)
)	O
)	O
{	O
if	O
(	O
S_IS_VOLATILE	O
(	O
sym	*(struct)
)	O
)	O
sym	*(struct)
=	O
symbol_clone	O
(	O
sym	*(struct)
,	O
1	int
)	O
;	O
else	O
if	O
(	O
!	O
S_CAN_BE_REDEFINED	O
(	O
sym	*(struct)
)	O
)	O
{	O
as_bad	O
(	O
_	O
(	O
"symbol `%s' is already defined"	*(char)
)	O
,	O
name	*(char)
)	O
;	O
return	O
;	O
}	O
}	O
S_SET_SEGMENT	O
(	O
sym	*(struct)
,	O
undefined_section	O
)	O
;	O
S_SET_VALUE	O
(	O
sym	*(struct)
,	O
0	int
)	O
;	O
symbol_set_frag	O
(	O
sym	*(struct)
,	O
&	O
zero_address_frag	O
)	O
;	O
}	O
current	O
.	O
view	O
=	O
sym	*(struct)
;	O
}	O
else	O
{	O
as_bad	O
(	O
_	O
(	O
"unknown .loc sub-directive `%s'"	*(char)
)	O
,	O
p	*(void)
)	O
;	O
(	O
void	O
)	O
restore_line_pointer	O
(	O
c	O
)	O
;	O
return	O
;	O
}	O
SKIP_WHITESPACE_AFTER_NAME	O
(	O
)	O
;	O
}	O
demand_empty_rest_of_line	O
(	O
)	O
;	O
dwarf2_loc_directive_seen	O
=	O
TRUE	int
;	O
debug_type	O
=	O
DEBUG_NONE	O
;	O
if	O
(	O
current	O
.	O
view	O
)	O
dwarf2_emit_insn	O
(	O
0	int
)	O
;	O
}	O
void	O
dwarf2_directive_loc_mark_labels	O
(	O
int	O
dummy	O
ATTRIBUTE_UNUSED	O
)	O
{	O
offsetT	O
value	long
=	O
get_absolute_expression	O
(	O
)	O
;	O
if	O
(	O
value	long
!=	O
0	int
&&	O
value	long
!=	O
1	int
)	O
{	O
as_bad	O
(	O
_	O
(	O
"expected 0 or 1"	*(char)
)	O
)	O
;	O
ignore_rest_of_line	O
(	O
)	O
;	O
}	O
else	O
{	O
dwarf2_loc_mark_labels	O
=	O
value	long
!=	O
0	int
;	O
demand_empty_rest_of_line	O
(	O
)	O
;	O
}	O
}	O
static	O
struct	O
frag	O
*	O
first_frag_for_seg	O
(	O
segT	O
seg	O
)	O
{	O
return	O
seg_info	O
(	O
seg	O
)	O
->	O
frchainP	O
->	O
frch_root	O
;	O
}	O
static	O
struct	O
frag	O
*	O
last_frag_for_seg	O
(	O
segT	O
seg	O
)	O
{	O
frchainS	O
*	O
f	O
=	O
seg_info	O
(	O
seg	O
)	O
->	O
frchainP	O
;	O
while	O
(	O
f	O
->	O
frch_next	O
!=	O
NULL	O
)	O
f	O
=	O
f	O
->	O
frch_next	O
;	O
return	O
f	O
->	O
frch_last	O
;	O
}	O
static	O
inline	O
void	O
out_byte	O
(	O
int	O
byte	O
)	O
{	O
FRAG_APPEND_1_CHAR	O
(	O
byte	O
)	O
;	O
}	O
static	O
inline	O
void	O
out_opcode	O
(	O
int	O
opc	O
)	O
{	O
out_byte	O
(	O
opc	O
)	O
;	O
}	O
static	O
inline	O
void	O
out_two	O
(	O
int	O
data	*(void)
)	O
{	O
md_number_to_chars	O
(	O
frag_more	O
(	O
2	int
)	O
,	O
data	*(void)
,	O
2	int
)	O
;	O
}	O
static	O
inline	O
void	O
out_four	O
(	O
int	O
data	*(void)
)	O
{	O
md_number_to_chars	O
(	O
frag_more	O
(	O
4	int
)	O
,	O
data	*(void)
,	O
4	int
)	O
;	O
}	O
static	O
void	O
out_uleb128	O
(	O
addressT	O
value	long
)	O
{	O
output_leb128	O
(	O
frag_more	O
(	O
sizeof_leb128	O
(	O
value	long
,	O
0	int
)	O
)	O
,	O
value	long
,	O
0	int
)	O
;	O
}	O
static	O
void	O
out_leb128	O
(	O
addressT	O
value	long
)	O
{	O
output_leb128	O
(	O
frag_more	O
(	O
sizeof_leb128	O
(	O
value	long
,	O
1	int
)	O
)	O
,	O
value	long
,	O
1	int
)	O
;	O
}	O
static	O
inline	O
void	O
out_abbrev	O
(	O
int	O
name	*(char)
,	O
int	O
form	O
)	O
{	O
out_uleb128	O
(	O
name	*(char)
)	O
;	O
out_uleb128	O
(	O
form	O
)	O
;	O
}	O
static	O
offsetT	O
get_frag_fix	O
(	O
fragS	O
*	O
frag	O
,	O
segT	O
seg	O
)	O
{	O
frchainS	O
*	O
fr	O
;	O
if	O
(	O
frag	O
->	O
fr_next	O
)	O
return	O
frag	O
->	O
fr_fix	O
;	O
for	O
(	O
fr	O
=	O
seg_info	O
(	O
seg	O
)	O
->	O
frchainP	O
;	O
fr	O
;	O
fr	O
=	O
fr	O
->	O
frch_next	O
)	O
if	O
(	O
fr	O
->	O
frch_last	O
==	O
frag	O
)	O
return	O
(	O
char	O
*	O
)	O
obstack_next_free	O
(	O
&	O
fr	O
->	O
frch_obstack	O
)	O
-	O
frag	O
->	O
fr_literal	O
;	O
abort	()->(void)
(	O
)	O
;	O
}	O
static	O
void	O
out_set_addr	O
(	O
symbolS	O
*	O
sym	*(struct)
)	O
{	O
expressionS	O
exp	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
exp	O
,	O
0	int
,	O
sizeof	O
exp	O
)	O
;	O
out_opcode	O
(	O
DW_LNS_extended_op	O
)	O
;	O
out_uleb128	O
(	O
sizeof_address	O
+	O
1	int
)	O
;	O
out_opcode	O
(	O
DW_LNE_set_address	O
)	O
;	O
exp	O
.	O
X_op	O
=	O
O_symbol	O
;	O
exp	O
.	O
X_add_symbol	O
=	O
sym	*(struct)
;	O
exp	O
.	O
X_add_number	O
=	O
0	int
;	O
emit_expr	O
(	O
&	O
exp	O
,	O
sizeof_address	O
)	O
;	O
}	O
static	O
void	O
scale_addr_delta	O
(	O
addressT	O
*	O
)	O
;	O
static	O
void	O
scale_addr_delta	O
(	O
addressT	O
*	O
addr_delta	O
)	O
{	O
static	O
int	O
printed_this	O
=	O
0	int
;	O
if	O
(	O
DWARF2_LINE_MIN_INSN_LENGTH	O
>	O
1	int
)	O
{	O
if	O
(	O
*	O
addr_delta	O
%	O
DWARF2_LINE_MIN_INSN_LENGTH	O
!=	O
0	int
&&	O
!	O
printed_this	O
)	O
{	O
as_bad	O
(	O
"unaligned opcodes detected in executable segment"	*(char)
)	O
;	O
printed_this	O
=	O
1	int
;	O
}	O
*	O
addr_delta	O
/=	O
DWARF2_LINE_MIN_INSN_LENGTH	O
;	O
}	O
}	O
static	O
int	O
size_inc_line_addr	O
(	O
int	O
line_delta	O
,	O
addressT	O
addr_delta	O
)	O
{	O
unsigned	O
int	O
tmp	O
,	O
opcode	O
;	O
int	O
len	long
=	O
0	int
;	O
scale_addr_delta	O
(	O
&	O
addr_delta	O
)	O
;	O
if	O
(	O
line_delta	O
==	O
INT_MAX	O
)	O
{	O
if	O
(	O
addr_delta	O
==	O
MAX_SPECIAL_ADDR_DELTA	O
)	O
len	long
=	O
1	int
;	O
else	O
if	O
(	O
addr_delta	O
)	O
len	long
=	O
1	int
+	O
sizeof_leb128	O
(	O
addr_delta	O
,	O
0	int
)	O
;	O
return	O
len	long
+	O
3	int
;	O
}	O
tmp	O
=	O
line_delta	O
-	O
DWARF2_LINE_BASE	O
;	O
if	O
(	O
tmp	O
>=	O
DWARF2_LINE_RANGE	O
)	O
{	O
len	long
=	O
1	int
+	O
sizeof_leb128	O
(	O
line_delta	O
,	O
1	int
)	O
;	O
line_delta	O
=	O
0	int
;	O
tmp	O
=	O
0	int
-	O
DWARF2_LINE_BASE	O
;	O
}	O
tmp	O
+=	O
DWARF2_LINE_OPCODE_BASE	O
;	O
if	O
(	O
addr_delta	O
<	O
256	int
+	O
MAX_SPECIAL_ADDR_DELTA	O
)	O
{	O
opcode	O
=	O
tmp	O
+	O
addr_delta	O
*	O
DWARF2_LINE_RANGE	O
;	O
if	O
(	O
opcode	O
<=	O
255	int
)	O
return	O
len	long
+	O
1	int
;	O
opcode	O
=	O
tmp	O
+	O
(	O
addr_delta	O
-	O
MAX_SPECIAL_ADDR_DELTA	O
)	O
*	O
DWARF2_LINE_RANGE	O
;	O
if	O
(	O
opcode	O
<=	O
255	int
)	O
return	O
len	long
+	O
2	int
;	O
}	O
len	long
+=	O
1	int
+	O
sizeof_leb128	O
(	O
addr_delta	O
,	O
0	int
)	O
;	O
len	long
+=	O
1	int
;	O
return	O
len	long
;	O
}	O
static	O
void	O
emit_inc_line_addr	O
(	O
int	O
line_delta	O
,	O
addressT	O
addr_delta	O
,	O
char	O
*	O
p	*(void)
,	O
int	O
len	long
)	O
{	O
unsigned	O
int	O
tmp	O
,	O
opcode	O
;	O
int	O
need_copy	O
=	O
0	int
;	O
char	O
*	O
end	*(*(char))
=	O
p	*(void)
+	O
len	long
;	O
gas_assert	O
(	O
(	O
offsetT	O
)	O
addr_delta	O
>=	O
0	int
)	O
;	O
scale_addr_delta	O
(	O
&	O
addr_delta	O
)	O
;	O
if	O
(	O
line_delta	O
==	O
INT_MAX	O
)	O
{	O
if	O
(	O
addr_delta	O
==	O
MAX_SPECIAL_ADDR_DELTA	O
)	O
*	O
p	*(void)
++	O
=	O
DW_LNS_const_add_pc	O
;	O
else	O
if	O
(	O
addr_delta	O
)	O
{	O
*	O
p	*(void)
++	O
=	O
DW_LNS_advance_pc	O
;	O
p	*(void)
+=	O
output_leb128	O
(	O
p	*(void)
,	O
addr_delta	O
,	O
0	int
)	O
;	O
}	O
*	O
p	*(void)
++	O
=	O
DW_LNS_extended_op	O
;	O
*	O
p	*(void)
++	O
=	O
1	int
;	O
*	O
p	*(void)
++	O
=	O
DW_LNE_end_sequence	O
;	O
goto	O
done	O
;	O
}	O
tmp	O
=	O
line_delta	O
-	O
DWARF2_LINE_BASE	O
;	O
if	O
(	O
tmp	O
>=	O
DWARF2_LINE_RANGE	O
)	O
{	O
*	O
p	*(void)
++	O
=	O
DW_LNS_advance_line	O
;	O
p	*(void)
+=	O
output_leb128	O
(	O
p	*(void)
,	O
line_delta	O
,	O
1	int
)	O
;	O
line_delta	O
=	O
0	int
;	O
tmp	O
=	O
0	int
-	O
DWARF2_LINE_BASE	O
;	O
need_copy	O
=	O
1	int
;	O
}	O
if	O
(	O
line_delta	O
==	O
0	int
&&	O
addr_delta	O
==	O
0	int
)	O
{	O
*	O
p	*(void)
++	O
=	O
DW_LNS_copy	O
;	O
goto	O
done	O
;	O
}	O
tmp	O
+=	O
DWARF2_LINE_OPCODE_BASE	O
;	O
if	O
(	O
addr_delta	O
<	O
256	int
+	O
MAX_SPECIAL_ADDR_DELTA	O
)	O
{	O
opcode	O
=	O
tmp	O
+	O
addr_delta	O
*	O
DWARF2_LINE_RANGE	O
;	O
if	O
(	O
opcode	O
<=	O
255	int
)	O
{	O
*	O
p	*(void)
++	O
=	O
opcode	O
;	O
goto	O
done	O
;	O
}	O
opcode	O
=	O
tmp	O
+	O
(	O
addr_delta	O
-	O
MAX_SPECIAL_ADDR_DELTA	O
)	O
*	O
DWARF2_LINE_RANGE	O
;	O
if	O
(	O
opcode	O
<=	O
255	int
)	O
{	O
*	O
p	*(void)
++	O
=	O
DW_LNS_const_add_pc	O
;	O
*	O
p	*(void)
++	O
=	O
opcode	O
;	O
goto	O
done	O
;	O
}	O
}	O
*	O
p	*(void)
++	O
=	O
DW_LNS_advance_pc	O
;	O
p	*(void)
+=	O
output_leb128	O
(	O
p	*(void)
,	O
addr_delta	O
,	O
0	int
)	O
;	O
if	O
(	O
need_copy	O
)	O
*	O
p	*(void)
++	O
=	O
DW_LNS_copy	O
;	O
else	O
*	O
p	*(void)
++	O
=	O
tmp	O
;	O
done	O
:	O
gas_assert	O
(	O
p	*(void)
==	O
end	*(*(char))
)	O
;	O
}	O
static	O
void	O
out_inc_line_addr	O
(	O
int	O
line_delta	O
,	O
addressT	O
addr_delta	O
)	O
{	O
int	O
len	long
=	O
size_inc_line_addr	O
(	O
line_delta	O
,	O
addr_delta	O
)	O
;	O
emit_inc_line_addr	O
(	O
line_delta	O
,	O
addr_delta	O
,	O
frag_more	O
(	O
len	long
)	O
,	O
len	long
)	O
;	O
}	O
static	O
int	O
size_fixed_inc_line_addr	O
(	O
int	O
line_delta	O
,	O
addressT	O
addr_delta	O
)	O
{	O
int	O
len	long
=	O
0	int
;	O
if	O
(	O
line_delta	O
!=	O
INT_MAX	O
)	O
len	long
=	O
1	int
+	O
sizeof_leb128	O
(	O
line_delta	O
,	O
1	int
)	O
;	O
if	O
(	O
addr_delta	O
>	O
ADDR_DELTA_LIMIT	O
)	O
{	O
len	long
+=	O
1	int
+	O
sizeof_leb128	O
(	O
sizeof_address	O
+	O
1	int
,	O
0	int
)	O
;	O
len	long
+=	O
1	int
+	O
sizeof_address	O
;	O
}	O
else	O
len	long
+=	O
3	int
;	O
if	O
(	O
line_delta	O
==	O
INT_MAX	O
)	O
len	long
+=	O
3	int
;	O
else	O
len	long
+=	O
1	int
;	O
return	O
len	long
;	O
}	O
static	O
void	O
emit_fixed_inc_line_addr	O
(	O
int	O
line_delta	O
,	O
addressT	O
addr_delta	O
,	O
fragS	O
*	O
frag	O
,	O
char	O
*	O
p	*(void)
,	O
int	O
len	long
)	O
{	O
expressionS	O
*	O
pexp	O
;	O
char	O
*	O
end	*(*(char))
=	O
p	*(void)
+	O
len	long
;	O
gas_assert	O
(	O
(	O
offsetT	O
)	O
addr_delta	O
>=	O
0	int
)	O
;	O
gas_assert	O
(	O
len	long
==	O
size_fixed_inc_line_addr	O
(	O
line_delta	O
,	O
addr_delta	O
)	O
)	O
;	O
if	O
(	O
line_delta	O
!=	O
INT_MAX	O
)	O
{	O
*	O
p	*(void)
++	O
=	O
DW_LNS_advance_line	O
;	O
p	*(void)
+=	O
output_leb128	O
(	O
p	*(void)
,	O
line_delta	O
,	O
1	int
)	O
;	O
}	O
pexp	O
=	O
symbol_get_value_expression	O
(	O
frag	O
->	O
fr_symbol	O
)	O
;	O
if	O
(	O
addr_delta	O
>	O
ADDR_DELTA_LIMIT	O
)	O
{	O
symbolS	O
*	O
to_sym	O
;	O
expressionS	O
exp	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
exp	O
,	O
0	int
,	O
sizeof	O
exp	O
)	O
;	O
gas_assert	O
(	O
pexp	O
->	O
X_op	O
==	O
O_subtract	O
)	O
;	O
to_sym	O
=	O
pexp	O
->	O
X_add_symbol	O
;	O
*	O
p	*(void)
++	O
=	O
DW_LNS_extended_op	O
;	O
p	*(void)
+=	O
output_leb128	O
(	O
p	*(void)
,	O
sizeof_address	O
+	O
1	int
,	O
0	int
)	O
;	O
*	O
p	*(void)
++	O
=	O
DW_LNE_set_address	O
;	O
exp	O
.	O
X_op	O
=	O
O_symbol	O
;	O
exp	O
.	O
X_add_symbol	O
=	O
to_sym	O
;	O
exp	O
.	O
X_add_number	O
=	O
0	int
;	O
emit_expr_fix	O
(	O
&	O
exp	O
,	O
sizeof_address	O
,	O
frag	O
,	O
p	*(void)
,	O
TC_PARSE_CONS_RETURN_NONE	O
)	O
;	O
p	*(void)
+=	O
sizeof_address	O
;	O
}	O
else	O
{	O
*	O
p	*(void)
++	O
=	O
DW_LNS_fixed_advance_pc	O
;	O
emit_expr_fix	O
(	O
pexp	O
,	O
2	int
,	O
frag	O
,	O
p	*(void)
,	O
TC_PARSE_CONS_RETURN_NONE	O
)	O
;	O
p	*(void)
+=	O
2	int
;	O
}	O
if	O
(	O
line_delta	O
==	O
INT_MAX	O
)	O
{	O
*	O
p	*(void)
++	O
=	O
DW_LNS_extended_op	O
;	O
*	O
p	*(void)
++	O
=	O
1	int
;	O
*	O
p	*(void)
++	O
=	O
DW_LNE_end_sequence	O
;	O
}	O
else	O
*	O
p	*(void)
++	O
=	O
DW_LNS_copy	O
;	O
gas_assert	O
(	O
p	*(void)
==	O
end	*(*(char))
)	O
;	O
}	O
static	O
void	O
relax_inc_line_addr	O
(	O
int	O
line_delta	O
,	O
symbolS	O
*	O
to_sym	O
,	O
symbolS	O
*	O
from_sym	O
)	O
{	O
expressionS	O
exp	O
;	O
int	O
max_chars	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
exp	O
,	O
0	int
,	O
sizeof	O
exp	O
)	O
;	O
exp	O
.	O
X_op	O
=	O
O_subtract	O
;	O
exp	O
.	O
X_add_symbol	O
=	O
to_sym	O
;	O
exp	O
.	O
X_op_symbol	O
=	O
from_sym	O
;	O
exp	O
.	O
X_add_number	O
=	O
0	int
;	O
if	O
(	O
DWARF2_USE_FIXED_ADVANCE_PC	O
)	O
max_chars	O
=	O
size_fixed_inc_line_addr	O
(	O
line_delta	O
,	O
-	O
DWARF2_LINE_MIN_INSN_LENGTH	O
)	O
;	O
else	O
max_chars	O
=	O
size_inc_line_addr	O
(	O
line_delta	O
,	O
-	O
DWARF2_LINE_MIN_INSN_LENGTH	O
)	O
;	O
frag_var	O
(	O
rs_dwarf2dbg	O
,	O
max_chars	O
,	O
max_chars	O
,	O
1	int
,	O
make_expr_symbol	O
(	O
&	O
exp	O
)	O
,	O
line_delta	O
,	O
NULL	O
)	O
;	O
}	O
int	O
dwarf2dbg_estimate_size_before_relax	O
(	O
fragS	O
*	O
frag	O
)	O
{	O
offsetT	O
addr_delta	O
;	O
int	O
size	int
;	O
addr_delta	O
=	O
resolve_symbol_value	O
(	O
frag	O
->	O
fr_symbol	O
)	O
;	O
if	O
(	O
DWARF2_USE_FIXED_ADVANCE_PC	O
)	O
size	int
=	O
size_fixed_inc_line_addr	O
(	O
frag	O
->	O
fr_offset	O
,	O
addr_delta	O
)	O
;	O
else	O
size	int
=	O
size_inc_line_addr	O
(	O
frag	O
->	O
fr_offset	O
,	O
addr_delta	O
)	O
;	O
frag	O
->	O
fr_subtype	O
=	O
size	int
;	O
return	O
size	int
;	O
}	O
int	O
dwarf2dbg_relax_frag	O
(	O
fragS	O
*	O
frag	O
)	O
{	O
int	O
old_size	O
,	O
new_size	O
;	O
old_size	O
=	O
frag	O
->	O
fr_subtype	O
;	O
new_size	O
=	O
dwarf2dbg_estimate_size_before_relax	O
(	O
frag	O
)	O
;	O
return	O
new_size	O
-	O
old_size	O
;	O
}	O
void	O
dwarf2dbg_convert_frag	O
(	O
fragS	O
*	O
frag	O
)	O
{	O
offsetT	O
addr_diff	O
;	O
if	O
(	O
DWARF2_USE_FIXED_ADVANCE_PC	O
)	O
{	O
int	O
saved_finalize_syms	O
=	O
finalize_syms	O
;	O
finalize_syms	O
=	O
0	int
;	O
addr_diff	O
=	O
resolve_symbol_value	O
(	O
frag	O
->	O
fr_symbol	O
)	O
;	O
finalize_syms	O
=	O
saved_finalize_syms	O
;	O
}	O
else	O
addr_diff	O
=	O
resolve_symbol_value	O
(	O
frag	O
->	O
fr_symbol	O
)	O
;	O
gas_assert	O
(	O
frag	O
->	O
fr_var	O
>=	O
(	O
int	O
)	O
frag	O
->	O
fr_subtype	O
)	O
;	O
if	O
(	O
DWARF2_USE_FIXED_ADVANCE_PC	O
)	O
emit_fixed_inc_line_addr	O
(	O
frag	O
->	O
fr_offset	O
,	O
addr_diff	O
,	O
frag	O
,	O
frag	O
->	O
fr_literal	O
+	O
frag	O
->	O
fr_fix	O
,	O
frag	O
->	O
fr_subtype	O
)	O
;	O
else	O
emit_inc_line_addr	O
(	O
frag	O
->	O
fr_offset	O
,	O
addr_diff	O
,	O
frag	O
->	O
fr_literal	O
+	O
frag	O
->	O
fr_fix	O
,	O
frag	O
->	O
fr_subtype	O
)	O
;	O
frag	O
->	O
fr_fix	O
+=	O
frag	O
->	O
fr_subtype	O
;	O
frag	O
->	O
fr_type	O
=	O
rs_fill	O
;	O
frag	O
->	O
fr_var	O
=	O
0	int
;	O
frag	O
->	O
fr_offset	O
=	O
0	int
;	O
}	O
static	O
void	O
process_entries	O
(	O
segT	O
seg	O
,	O
struct	O
line_entry	O
*	O
e	O
)	O
{	O
unsigned	O
filenum	O
=	O
1	int
;	O
unsigned	O
line	O
=	O
1	int
;	O
unsigned	O
column	O
=	O
0	int
;	O
unsigned	O
isa	O
=	O
0	int
;	O
unsigned	O
flags	int
=	O
DWARF2_LINE_DEFAULT_IS_STMT	O
?	O
DWARF2_FLAG_IS_STMT	O
:	O
0	int
;	O
fragS	O
*	O
last_frag	O
=	O
NULL	O
,	O
*	O
frag	O
;	O
addressT	O
last_frag_ofs	O
=	O
0	int
,	O
frag_ofs	O
;	O
symbolS	O
*	O
last_lab	O
=	O
NULL	O
,	O
*	O
lab	O
;	O
struct	O
line_entry	O
*	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
if	O
(	O
flag_dwarf_sections	O
)	O
{	O
char	O
*	O
name	*(char)
;	O
const	O
char	O
*	O
sec_name	O
;	O
sec_name	O
=	O
bfd_section_name	(*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))))->(*(char))
(	O
seg	O
)	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
sec_name	O
,	O
".text"	*(char)
)	O
!=	O
0	int
)	O
{	O
name	*(char)
=	O
concat	O
(	O
".debug_line"	*(char)
,	O
sec_name	O
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
subseg_set	O
(	O
subseg_get	O
(	O
name	*(char)
,	O
FALSE	O
)	O
,	O
0	int
)	O
;	O
}	O
else	O
subseg_set	O
(	O
subseg_get	O
(	O
".debug_line"	*(char)
,	O
FALSE	O
)	O
,	O
0	int
)	O
;	O
}	O
do	O
{	O
int	O
line_delta	O
;	O
if	O
(	O
filenum	O
!=	O
e	O
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
filenum	O
)	O
{	O
filenum	O
=	O
e	O
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
filenum	O
;	O
out_opcode	O
(	O
DW_LNS_set_file	O
)	O
;	O
out_uleb128	O
(	O
filenum	O
)	O
;	O
}	O
if	O
(	O
column	O
!=	O
e	O
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
column	O
)	O
{	O
column	O
=	O
e	O
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
column	O
;	O
out_opcode	O
(	O
DW_LNS_set_column	O
)	O
;	O
out_uleb128	O
(	O
column	O
)	O
;	O
}	O
if	O
(	O
e	O
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
discriminator	O
!=	O
0	int
)	O
{	O
out_opcode	O
(	O
DW_LNS_extended_op	O
)	O
;	O
out_leb128	O
(	O
1	int
+	O
sizeof_leb128	O
(	O
e	O
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
discriminator	O
,	O
0	int
)	O
)	O
;	O
out_opcode	O
(	O
DW_LNE_set_discriminator	O
)	O
;	O
out_uleb128	O
(	O
e	O
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
discriminator	O
)	O
;	O
}	O
if	O
(	O
isa	O
!=	O
e	O
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
isa	O
)	O
{	O
isa	O
=	O
e	O
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
isa	O
;	O
out_opcode	O
(	O
DW_LNS_set_isa	O
)	O
;	O
out_uleb128	O
(	O
isa	O
)	O
;	O
}	O
if	O
(	O
(	O
e	O
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
flags	int
^	O
flags	int
)	O
&	O
DWARF2_FLAG_IS_STMT	O
)	O
{	O
flags	int
=	O
e	O
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
flags	int
;	O
out_opcode	O
(	O
DW_LNS_negate_stmt	O
)	O
;	O
}	O
if	O
(	O
e	O
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
flags	int
&	O
DWARF2_FLAG_BASIC_BLOCK	O
)	O
out_opcode	O
(	O
DW_LNS_set_basic_block	O
)	O
;	O
if	O
(	O
e	O
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
flags	int
&	O
DWARF2_FLAG_PROLOGUE_END	O
)	O
out_opcode	O
(	O
DW_LNS_set_prologue_end	O
)	O
;	O
if	O
(	O
e	O
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
flags	int
&	O
DWARF2_FLAG_EPILOGUE_BEGIN	O
)	O
out_opcode	O
(	O
DW_LNS_set_epilogue_begin	O
)	O
;	O
line_delta	O
=	O
e	O
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
line	O
-	O
line	O
;	O
lab	O
=	O
e	O
->	O
label	O
;	O
frag	O
=	O
symbol_get_frag	O
(	O
lab	O
)	O
;	O
frag_ofs	O
=	O
S_GET_VALUE	O
(	O
lab	O
)	O
;	O
if	O
(	O
last_frag	O
==	O
NULL	O
||	O
(	O
e	O
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
view	O
==	O
force_reset_view	O
&&	O
force_reset_view	O
&&	O
(	O
frag	O
==	O
last_frag	O
?	O
(	O
last_frag_ofs	O
==	O
frag_ofs	O
)	O
:	O
(	O
frag_ofs	O
==	O
0	int
&&	O
(	O
(	O
offsetT	O
)	O
last_frag_ofs	O
>=	O
get_frag_fix	O
(	O
last_frag	O
,	O
seg	O
)	O
)	O
)	O
)	O
)	O
)	O
{	O
out_set_addr	O
(	O
lab	O
)	O
;	O
out_inc_line_addr	O
(	O
line_delta	O
,	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
frag	O
==	O
last_frag	O
&&	O
!	O
DWARF2_USE_FIXED_ADVANCE_PC	O
)	O
out_inc_line_addr	O
(	O
line_delta	O
,	O
frag_ofs	O
-	O
last_frag_ofs	O
)	O
;	O
else	O
relax_inc_line_addr	O
(	O
line_delta	O
,	O
lab	O
,	O
last_lab	O
)	O
;	O
line	O
=	O
e	O
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
line	O
;	O
last_lab	O
=	O
lab	O
;	O
last_frag	O
=	O
frag	O
;	O
last_frag_ofs	O
=	O
frag_ofs	O
;	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
=	O
e	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
free	(*(void))->(void)
(	O
e	O
)	O
;	O
e	O
=	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
}	O
while	O
(	O
e	O
)	O
;	O
frag	O
=	O
last_frag_for_seg	O
(	O
seg	O
)	O
;	O
frag_ofs	O
=	O
get_frag_fix	O
(	O
frag	O
,	O
seg	O
)	O
;	O
if	O
(	O
frag	O
==	O
last_frag	O
&&	O
!	O
DWARF2_USE_FIXED_ADVANCE_PC	O
)	O
out_inc_line_addr	O
(	O
INT_MAX	O
,	O
frag_ofs	O
-	O
last_frag_ofs	O
)	O
;	O
else	O
{	O
lab	O
=	O
symbol_temp_new	O
(	O
seg	O
,	O
frag_ofs	O
,	O
frag	O
)	O
;	O
relax_inc_line_addr	O
(	O
INT_MAX	O
,	O
lab	O
,	O
last_lab	O
)	O
;	O
}	O
}	O
static	O
void	O
out_file_list	O
(	O
void	O
)	O
{	O
size_t	long
size	int
;	O
const	O
char	O
*	O
dir	*(char)
;	O
char	O
*	O
cp	O
;	O
unsigned	O
int	O
i	*(struct)
;	O
for	O
(	O
i	*(struct)
=	O
1	int
;	O
i	*(struct)
<	O
dirs_in_use	O
;	O
++	O
i	*(struct)
)	O
{	O
dir	*(char)
=	O
remap_debug_filename	O
(	O
dirs	O
[	O
i	*(struct)
]	O
)	O
;	O
size	int
=	O
strlen	(*(char))->(long)
(	O
dir	*(char)
)	O
+	O
1	int
;	O
cp	O
=	O
frag_more	O
(	O
size	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
cp	O
,	O
dir	*(char)
,	O
size	int
)	O
;	O
}	O
out_byte	O
(	O
'\0'	O
)	O
;	O
for	O
(	O
i	*(struct)
=	O
1	int
;	O
i	*(struct)
<	O
files_in_use	O
;	O
++	O
i	*(struct)
)	O
{	O
const	O
char	O
*	O
fullfilename	O
;	O
if	O
(	O
files	O
[	O
i	*(struct)
]	O
.	O
filename	*(char)
==	O
NULL	O
)	O
{	O
as_bad	O
(	O
_	O
(	O
"unassigned file number %ld"	*(char)
)	O
,	O
(	O
long	O
)	O
i	*(struct)
)	O
;	O
files	O
[	O
i	*(struct)
]	O
.	O
filename	*(char)
=	O
""	*(char)
;	O
continue	O
;	O
}	O
fullfilename	O
=	O
DWARF2_FILE_NAME	O
(	O
files	O
[	O
i	*(struct)
]	O
.	O
filename	*(char)
,	O
files	O
[	O
i	*(struct)
]	O
.	O
dir	*(char)
?	O
dirs	O
[	O
files	O
[	O
i	*(struct)
]	O
.	O
dir	*(char)
]	O
:	O
""	*(char)
)	O
;	O
size	int
=	O
strlen	(*(char))->(long)
(	O
fullfilename	O
)	O
+	O
1	int
;	O
cp	O
=	O
frag_more	O
(	O
size	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
cp	O
,	O
fullfilename	O
,	O
size	int
)	O
;	O
out_uleb128	O
(	O
files	O
[	O
i	*(struct)
]	O
.	O
dir	*(char)
)	O
;	O
out_uleb128	O
(	O
DWARF2_FILE_TIME_NAME	O
(	O
files	O
[	O
i	*(struct)
]	O
.	O
filename	*(char)
,	O
files	O
[	O
i	*(struct)
]	O
.	O
dir	*(char)
?	O
dirs	O
[	O
files	O
[	O
i	*(struct)
]	O
.	O
dir	*(char)
]	O
:	O
""	*(char)
)	O
)	O
;	O
out_uleb128	O
(	O
DWARF2_FILE_SIZE_NAME	O
(	O
files	O
[	O
i	*(struct)
]	O
.	O
filename	*(char)
,	O
files	O
[	O
i	*(struct)
]	O
.	O
dir	*(char)
?	O
dirs	O
[	O
files	O
[	O
i	*(struct)
]	O
.	O
dir	*(char)
]	O
:	O
""	*(char)
)	O
)	O
;	O
}	O
out_byte	O
(	O
0	int
)	O
;	O
}	O
static	O
int	O
out_header	O
(	O
asection	struct(*(char),int,int,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*(struct`),long))),int,int,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`)))),union(*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`)))))
*	O
sec	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
,	O
expressionS	O
*	O
exp	O
)	O
{	O
symbolS	O
*	O
start_sym	O
;	O
symbolS	O
*	O
end_sym	O
;	O
subseg_set	O
(	O
sec	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
,	O
0	int
)	O
;	O
if	O
(	O
flag_dwarf_sections	O
)	O
{	O
frag_now_fix	O
(	O
)	O
;	O
start_sym	O
=	O
symbol_make	O
(	O
".Ldebug_line_start"	*(char)
)	O
;	O
end_sym	O
=	O
symbol_make	O
(	O
".Ldebug_line_end"	*(char)
)	O
;	O
symbol_set_value_now	O
(	O
start_sym	O
)	O
;	O
}	O
else	O
{	O
start_sym	O
=	O
symbol_temp_new_now_octets	O
(	O
)	O
;	O
end_sym	O
=	O
symbol_temp_make	O
(	O
)	O
;	O
}	O
exp	O
->	O
X_op	O
=	O
O_subtract	O
;	O
exp	O
->	O
X_add_symbol	O
=	O
end_sym	O
;	O
exp	O
->	O
X_op_symbol	O
=	O
start_sym	O
;	O
switch	O
(	O
DWARF2_FORMAT	O
(	O
sec	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
)	O
)	O
{	O
case	O
dwarf2_format_32bit	O
:	O
exp	O
->	O
X_add_number	O
=	O
-	O
4	int
;	O
emit_expr	O
(	O
exp	O
,	O
4	int
)	O
;	O
return	O
4	int
;	O
case	O
dwarf2_format_64bit	O
:	O
exp	O
->	O
X_add_number	O
=	O
-	O
12	int
;	O
out_four	O
(	O
-	O
1	int
)	O
;	O
emit_expr	O
(	O
exp	O
,	O
8	int
)	O
;	O
return	O
8	int
;	O
case	O
dwarf2_format_64bit_irix	O
:	O
exp	O
->	O
X_add_number	O
=	O
-	O
8	int
;	O
emit_expr	O
(	O
exp	O
,	O
8	int
)	O
;	O
return	O
8	int
;	O
}	O
as_fatal	O
(	O
_	O
(	O
"internal error: unknown dwarf2 format"	*(char)
)	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
out_debug_line	O
(	O
segT	O
line_seg	O
)	O
{	O
expressionS	O
exp	O
;	O
symbolS	O
*	O
prologue_start	O
,	O
*	O
prologue_end	O
;	O
symbolS	O
*	O
line_end	O
;	O
struct	O
line_seg	O
*	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
;	O
int	O
sizeof_offset	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
exp	O
,	O
0	int
,	O
sizeof	O
exp	O
)	O
;	O
sizeof_offset	O
=	O
out_header	O
(	O
line_seg	O
,	O
&	O
exp	O
)	O
;	O
line_end	O
=	O
exp	O
.	O
X_add_symbol	O
;	O
out_two	O
(	O
DWARF2_LINE_VERSION	O
)	O
;	O
prologue_start	O
=	O
symbol_temp_make	O
(	O
)	O
;	O
prologue_end	O
=	O
symbol_temp_make	O
(	O
)	O
;	O
exp	O
.	O
X_op	O
=	O
O_subtract	O
;	O
exp	O
.	O
X_add_symbol	O
=	O
prologue_end	O
;	O
exp	O
.	O
X_op_symbol	O
=	O
prologue_start	O
;	O
exp	O
.	O
X_add_number	O
=	O
0	int
;	O
emit_expr	O
(	O
&	O
exp	O
,	O
sizeof_offset	O
)	O
;	O
symbol_set_value_now	O
(	O
prologue_start	O
)	O
;	O
out_byte	O
(	O
DWARF2_LINE_MIN_INSN_LENGTH	O
)	O
;	O
out_byte	O
(	O
DWARF2_LINE_DEFAULT_IS_STMT	O
)	O
;	O
out_byte	O
(	O
DWARF2_LINE_BASE	O
)	O
;	O
out_byte	O
(	O
DWARF2_LINE_RANGE	O
)	O
;	O
out_byte	O
(	O
DWARF2_LINE_OPCODE_BASE	O
)	O
;	O
out_byte	O
(	O
0	int
)	O
;	O
out_byte	O
(	O
1	int
)	O
;	O
out_byte	O
(	O
1	int
)	O
;	O
out_byte	O
(	O
1	int
)	O
;	O
out_byte	O
(	O
1	int
)	O
;	O
out_byte	O
(	O
0	int
)	O
;	O
out_byte	O
(	O
0	int
)	O
;	O
out_byte	O
(	O
0	int
)	O
;	O
out_byte	O
(	O
1	int
)	O
;	O
out_byte	O
(	O
0	int
)	O
;	O
out_byte	O
(	O
0	int
)	O
;	O
out_byte	O
(	O
1	int
)	O
;	O
out_file_list	O
(	O
)	O
;	O
symbol_set_value_now	O
(	O
prologue_end	O
)	O
;	O
for	O
(	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
=	O
all_segs	O
;	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
;	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
=	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
if	O
(	O
SEG_NORMAL	O
(	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
->	O
seg	O
)	O
)	O
process_entries	O
(	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
->	O
seg	O
,	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
->	O
head	O
->	O
head	O
)	O
;	O
else	O
as_warn	O
(	O
"dwarf line number information for %s ignored"	*(char)
,	O
segment_name	O
(	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
->	O
seg	O
)	O
)	O
;	O
if	O
(	O
flag_dwarf_sections	O
)	O
subseg_set	O
(	O
subseg_get	O
(	O
".debug_line_end"	*(char)
,	O
FALSE	O
)	O
,	O
0	int
)	O
;	O
symbol_set_value_now	O
(	O
line_end	O
)	O
;	O
}	O
static	O
void	O
out_debug_ranges	O
(	O
segT	O
ranges_seg	O
)	O
{	O
unsigned	O
int	O
addr_size	O
=	O
sizeof_address	O
;	O
struct	O
line_seg	O
*	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
;	O
expressionS	O
exp	O
;	O
unsigned	O
int	O
i	*(struct)
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
exp	O
,	O
0	int
,	O
sizeof	O
exp	O
)	O
;	O
subseg_set	O
(	O
ranges_seg	O
,	O
0	int
)	O
;	O
for	O
(	O
i	*(struct)
=	O
0	int
;	O
i	*(struct)
<	O
addr_size	O
;	O
i	*(struct)
++	O
)	O
out_byte	O
(	O
0xff	int
)	O
;	O
for	O
(	O
i	*(struct)
=	O
0	int
;	O
i	*(struct)
<	O
addr_size	O
;	O
i	*(struct)
++	O
)	O
out_byte	O
(	O
0	int
)	O
;	O
for	O
(	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
=	O
all_segs	O
;	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
;	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
=	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
{	O
fragS	O
*	O
frag	O
;	O
symbolS	O
*	O
beg	O
,	O
*	O
end	*(*(char))
;	O
frag	O
=	O
first_frag_for_seg	O
(	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
->	O
seg	O
)	O
;	O
beg	O
=	O
symbol_temp_new	O
(	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
->	O
seg	O
,	O
0	int
,	O
frag	O
)	O
;	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
->	O
text_start	O
=	O
beg	O
;	O
frag	O
=	O
last_frag_for_seg	O
(	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
->	O
seg	O
)	O
;	O
end	*(*(char))
=	O
symbol_temp_new	O
(	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
->	O
seg	O
,	O
get_frag_fix	O
(	O
frag	O
,	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
->	O
seg	O
)	O
,	O
frag	O
)	O
;	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
->	O
text_end	O
=	O
end	*(*(char))
;	O
exp	O
.	O
X_op	O
=	O
O_symbol	O
;	O
exp	O
.	O
X_add_symbol	O
=	O
beg	O
;	O
exp	O
.	O
X_add_number	O
=	O
0	int
;	O
emit_expr	O
(	O
&	O
exp	O
,	O
addr_size	O
)	O
;	O
exp	O
.	O
X_op	O
=	O
O_symbol	O
;	O
exp	O
.	O
X_add_symbol	O
=	O
end	*(*(char))
;	O
exp	O
.	O
X_add_number	O
=	O
0	int
;	O
emit_expr	O
(	O
&	O
exp	O
,	O
addr_size	O
)	O
;	O
}	O
for	O
(	O
i	*(struct)
=	O
0	int
;	O
i	*(struct)
<	O
addr_size	O
;	O
i	*(struct)
++	O
)	O
out_byte	O
(	O
0	int
)	O
;	O
for	O
(	O
i	*(struct)
=	O
0	int
;	O
i	*(struct)
<	O
addr_size	O
;	O
i	*(struct)
++	O
)	O
out_byte	O
(	O
0	int
)	O
;	O
}	O
static	O
void	O
out_debug_aranges	O
(	O
segT	O
aranges_seg	O
,	O
segT	O
info_seg	O
)	O
{	O
unsigned	O
int	O
addr_size	O
=	O
sizeof_address	O
;	O
offsetT	O
size	int
;	O
struct	O
line_seg	O
*	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
;	O
expressionS	O
exp	O
;	O
symbolS	O
*	O
aranges_end	O
;	O
char	O
*	O
p	*(void)
;	O
int	O
sizeof_offset	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
exp	O
,	O
0	int
,	O
sizeof	O
exp	O
)	O
;	O
sizeof_offset	O
=	O
out_header	O
(	O
aranges_seg	O
,	O
&	O
exp	O
)	O
;	O
aranges_end	O
=	O
exp	O
.	O
X_add_symbol	O
;	O
size	int
=	O
-	O
exp	O
.	O
X_add_number	O
;	O
out_two	O
(	O
DWARF2_ARANGES_VERSION	O
)	O
;	O
size	int
+=	O
2	int
;	O
TC_DWARF2_EMIT_OFFSET	O
(	O
section_symbol	O
(	O
info_seg	O
)	O
,	O
sizeof_offset	O
)	O
;	O
size	int
+=	O
sizeof_offset	O
;	O
out_byte	O
(	O
addr_size	O
)	O
;	O
size	int
++	O
;	O
out_byte	O
(	O
0	int
)	O
;	O
size	int
++	O
;	O
while	O
(	O
(	O
size	int
++	O
%	O
(	O
2	int
*	O
addr_size	O
)	O
)	O
>	O
0	int
)	O
out_byte	O
(	O
0	int
)	O
;	O
for	O
(	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
=	O
all_segs	O
;	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
;	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
=	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
{	O
fragS	O
*	O
frag	O
;	O
symbolS	O
*	O
beg	O
,	O
*	O
end	*(*(char))
;	O
frag	O
=	O
first_frag_for_seg	O
(	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
->	O
seg	O
)	O
;	O
beg	O
=	O
symbol_temp_new	O
(	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
->	O
seg	O
,	O
0	int
,	O
frag	O
)	O
;	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
->	O
text_start	O
=	O
beg	O
;	O
frag	O
=	O
last_frag_for_seg	O
(	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
->	O
seg	O
)	O
;	O
end	*(*(char))
=	O
symbol_temp_new	O
(	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
->	O
seg	O
,	O
get_frag_fix	O
(	O
frag	O
,	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
->	O
seg	O
)	O
,	O
frag	O
)	O
;	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
->	O
text_end	O
=	O
end	*(*(char))
;	O
exp	O
.	O
X_op	O
=	O
O_symbol	O
;	O
exp	O
.	O
X_add_symbol	O
=	O
beg	O
;	O
exp	O
.	O
X_add_number	O
=	O
0	int
;	O
emit_expr	O
(	O
&	O
exp	O
,	O
addr_size	O
)	O
;	O
exp	O
.	O
X_op	O
=	O
O_subtract	O
;	O
exp	O
.	O
X_add_symbol	O
=	O
end	*(*(char))
;	O
exp	O
.	O
X_op_symbol	O
=	O
beg	O
;	O
exp	O
.	O
X_add_number	O
=	O
0	int
;	O
emit_expr	O
(	O
&	O
exp	O
,	O
addr_size	O
)	O
;	O
}	O
p	*(void)
=	O
frag_more	O
(	O
2	int
*	O
addr_size	O
)	O
;	O
md_number_to_chars	O
(	O
p	*(void)
,	O
0	int
,	O
addr_size	O
)	O
;	O
md_number_to_chars	O
(	O
p	*(void)
+	O
addr_size	O
,	O
0	int
,	O
addr_size	O
)	O
;	O
symbol_set_value_now	O
(	O
aranges_end	O
)	O
;	O
}	O
static	O
void	O
out_debug_abbrev	O
(	O
segT	O
abbrev_seg	O
,	O
segT	O
info_seg	O
ATTRIBUTE_UNUSED	O
,	O
segT	O
line_seg	O
ATTRIBUTE_UNUSED	O
)	O
{	O
subseg_set	O
(	O
abbrev_seg	O
,	O
0	int
)	O
;	O
out_uleb128	O
(	O
1	int
)	O
;	O
out_uleb128	O
(	O
DW_TAG_compile_unit	O
)	O
;	O
out_byte	O
(	O
DW_CHILDREN_no	O
)	O
;	O
if	O
(	O
DWARF2_FORMAT	O
(	O
line_seg	O
)	O
==	O
dwarf2_format_32bit	O
)	O
out_abbrev	O
(	O
DW_AT_stmt_list	O
,	O
DW_FORM_data4	O
)	O
;	O
else	O
out_abbrev	O
(	O
DW_AT_stmt_list	O
,	O
DW_FORM_data8	O
)	O
;	O
if	O
(	O
all_segs	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
==	O
NULL	O
)	O
{	O
out_abbrev	O
(	O
DW_AT_low_pc	O
,	O
DW_FORM_addr	O
)	O
;	O
if	O
(	O
DWARF2_VERSION	O
<	O
4	int
)	O
out_abbrev	O
(	O
DW_AT_high_pc	O
,	O
DW_FORM_addr	O
)	O
;	O
else	O
out_abbrev	O
(	O
DW_AT_high_pc	O
,	O
(	O
sizeof_address	O
==	O
4	int
?	O
DW_FORM_data4	O
:	O
DW_FORM_data8	O
)	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
DWARF2_FORMAT	O
(	O
info_seg	O
)	O
==	O
dwarf2_format_32bit	O
)	O
out_abbrev	O
(	O
DW_AT_ranges	O
,	O
DW_FORM_data4	O
)	O
;	O
else	O
out_abbrev	O
(	O
DW_AT_ranges	O
,	O
DW_FORM_data8	O
)	O
;	O
}	O
out_abbrev	O
(	O
DW_AT_name	O
,	O
DW_FORM_strp	O
)	O
;	O
out_abbrev	O
(	O
DW_AT_comp_dir	O
,	O
DW_FORM_strp	O
)	O
;	O
out_abbrev	O
(	O
DW_AT_producer	O
,	O
DW_FORM_strp	O
)	O
;	O
out_abbrev	O
(	O
DW_AT_language	O
,	O
DW_FORM_data2	O
)	O
;	O
out_abbrev	O
(	O
0	int
,	O
0	int
)	O
;	O
out_byte	O
(	O
0	int
)	O
;	O
}	O
static	O
void	O
out_debug_info	O
(	O
segT	O
info_seg	O
,	O
segT	O
abbrev_seg	O
,	O
segT	O
line_seg	O
,	O
segT	O
ranges_seg	O
,	O
symbolS	O
*	O
name_sym	O
,	O
symbolS	O
*	O
comp_dir_sym	O
,	O
symbolS	O
*	O
producer_sym	O
)	O
{	O
expressionS	O
exp	O
;	O
symbolS	O
*	O
info_end	O
;	O
int	O
sizeof_offset	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
exp	O
,	O
0	int
,	O
sizeof	O
exp	O
)	O
;	O
sizeof_offset	O
=	O
out_header	O
(	O
info_seg	O
,	O
&	O
exp	O
)	O
;	O
info_end	O
=	O
exp	O
.	O
X_add_symbol	O
;	O
out_two	O
(	O
DWARF2_VERSION	O
)	O
;	O
TC_DWARF2_EMIT_OFFSET	O
(	O
section_symbol	O
(	O
abbrev_seg	O
)	O
,	O
sizeof_offset	O
)	O
;	O
out_byte	O
(	O
sizeof_address	O
)	O
;	O
out_uleb128	O
(	O
1	int
)	O
;	O
TC_DWARF2_EMIT_OFFSET	O
(	O
section_symbol	O
(	O
line_seg	O
)	O
,	O
(	O
DWARF2_FORMAT	O
(	O
line_seg	O
)	O
==	O
dwarf2_format_32bit	O
?	O
4	int
:	O
8	int
)	O
)	O
;	O
if	O
(	O
all_segs	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
==	O
NULL	O
)	O
{	O
exp	O
.	O
X_op	O
=	O
O_symbol	O
;	O
exp	O
.	O
X_add_symbol	O
=	O
all_segs	O
->	O
text_start	O
;	O
exp	O
.	O
X_add_number	O
=	O
0	int
;	O
emit_expr	O
(	O
&	O
exp	O
,	O
sizeof_address	O
)	O
;	O
if	O
(	O
DWARF2_VERSION	O
<	O
4	int
)	O
exp	O
.	O
X_op	O
=	O
O_symbol	O
;	O
else	O
{	O
exp	O
.	O
X_op	O
=	O
O_subtract	O
;	O
exp	O
.	O
X_op_symbol	O
=	O
all_segs	O
->	O
text_start	O
;	O
}	O
exp	O
.	O
X_add_symbol	O
=	O
all_segs	O
->	O
text_end	O
;	O
exp	O
.	O
X_add_number	O
=	O
0	int
;	O
emit_expr	O
(	O
&	O
exp	O
,	O
sizeof_address	O
)	O
;	O
}	O
else	O
{	O
TC_DWARF2_EMIT_OFFSET	O
(	O
section_symbol	O
(	O
ranges_seg	O
)	O
,	O
sizeof_offset	O
)	O
;	O
}	O
TC_DWARF2_EMIT_OFFSET	O
(	O
name_sym	O
,	O
sizeof_offset	O
)	O
;	O
TC_DWARF2_EMIT_OFFSET	O
(	O
comp_dir_sym	O
,	O
sizeof_offset	O
)	O
;	O
TC_DWARF2_EMIT_OFFSET	O
(	O
producer_sym	O
,	O
sizeof_offset	O
)	O
;	O
out_two	O
(	O
DW_LANG_Mips_Assembler	O
)	O
;	O
symbol_set_value_now	O
(	O
info_end	O
)	O
;	O
}	O
static	O
void	O
out_debug_str	O
(	O
segT	O
str_seg	O
,	O
symbolS	O
*	O
*	O
name_sym	O
,	O
symbolS	O
*	O
*	O
comp_dir_sym	O
,	O
symbolS	O
*	O
*	O
producer_sym	O
)	O
{	O
char	O
producer	O
[	O
128	int
]	O
;	O
const	O
char	O
*	O
comp_dir	O
;	O
const	O
char	O
*	O
dirname	O
;	O
char	O
*	O
p	*(void)
;	O
int	O
len	long
;	O
subseg_set	O
(	O
str_seg	O
,	O
0	int
)	O
;	O
*	O
name_sym	O
=	O
symbol_temp_new_now_octets	O
(	O
)	O
;	O
if	O
(	O
files_in_use	O
==	O
0	int
)	O
abort	()->(void)
(	O
)	O
;	O
if	O
(	O
files	O
[	O
1	int
]	O
.	O
dir	*(char)
)	O
{	O
dirname	O
=	O
remap_debug_filename	O
(	O
dirs	O
[	O
files	O
[	O
1	int
]	O
.	O
dir	*(char)
]	O
)	O
;	O
len	long
=	O
strlen	(*(char))->(long)
(	O
dirname	O
)	O
;	O
p	*(void)
=	O
frag_more	O
(	O
len	long
+	O
1	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
p	*(void)
,	O
dirname	O
,	O
len	long
)	O
;	O
INSERT_DIR_SEPARATOR	O
(	O
p	*(void)
,	O
len	long
)	O
;	O
}	O
len	long
=	O
strlen	(*(char))->(long)
(	O
files	O
[	O
1	int
]	O
.	O
filename	*(char)
)	O
+	O
1	int
;	O
p	*(void)
=	O
frag_more	O
(	O
len	long
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
p	*(void)
,	O
files	O
[	O
1	int
]	O
.	O
filename	*(char)
,	O
len	long
)	O
;	O
*	O
comp_dir_sym	O
=	O
symbol_temp_new_now_octets	O
(	O
)	O
;	O
comp_dir	O
=	O
remap_debug_filename	O
(	O
getpwd	O
(	O
)	O
)	O
;	O
len	long
=	O
strlen	(*(char))->(long)
(	O
comp_dir	O
)	O
+	O
1	int
;	O
p	*(void)
=	O
frag_more	O
(	O
len	long
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
p	*(void)
,	O
comp_dir	O
,	O
len	long
)	O
;	O
*	O
producer_sym	O
=	O
symbol_temp_new_now_octets	O
(	O
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
producer	O
,	O
"GNU AS %s"	*(char)
,	O
VERSION	O
)	O
;	O
len	long
=	O
strlen	(*(char))->(long)
(	O
producer	O
)	O
+	O
1	int
;	O
p	*(void)
=	O
frag_more	O
(	O
len	long
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
p	*(void)
,	O
producer	O
,	O
len	long
)	O
;	O
}	O
void	O
dwarf2_init	O
(	O
void	O
)	O
{	O
last_seg_ptr	O
=	O
&	O
all_segs	O
;	O
if	O
(	O
flag_dwarf_cie_version	O
==	O
-	O
1	int
)	O
flag_dwarf_cie_version	O
=	O
1	int
;	O
}	O
void	O
dwarf2_finish	O
(	O
void	O
)	O
{	O
segT	O
line_seg	O
;	O
struct	O
line_seg	O
*	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
;	O
segT	O
info_seg	O
;	O
int	O
emit_other_sections	O
=	O
0	int
;	O
int	O
empty_debug_line	O
=	O
0	int
;	O
info_seg	O
=	O
bfd_get_section_by_name	(*(struct),*(char))->(*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))))
(	O
stdoutput	O
,	O
".debug_info"	*(char)
)	O
;	O
emit_other_sections	O
=	O
info_seg	O
==	O
NULL	O
||	O
!	O
seg_not_empty_p	O
(	O
info_seg	O
)	O
;	O
line_seg	O
=	O
bfd_get_section_by_name	(*(struct),*(char))->(*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))))
(	O
stdoutput	O
,	O
".debug_line"	*(char)
)	O
;	O
empty_debug_line	O
=	O
line_seg	O
==	O
NULL	O
||	O
!	O
seg_not_empty_p	O
(	O
line_seg	O
)	O
;	O
if	O
(	O
all_segs	O
&&	O
!	O
empty_debug_line	O
)	O
as_fatal	O
(	O
"duplicate .debug_line sections"	*(char)
)	O
;	O
if	O
(	O
(	O
!	O
all_segs	O
&&	O
emit_other_sections	O
)	O
||	O
(	O
!	O
emit_other_sections	O
&&	O
!	O
empty_debug_line	O
)	O
)	O
return	O
;	O
sizeof_address	O
=	O
DWARF2_ADDR_SIZE	O
(	O
stdoutput	O
)	O
;	O
line_seg	O
=	O
subseg_new	O
(	O
".debug_line"	*(char)
,	O
0	int
)	O
;	O
bfd_set_section_flags	(*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),int)->(int)
(	O
line_seg	O
,	O
SEC_READONLY	O
|	O
SEC_DEBUGGING	O
|	O
SEC_OCTETS	O
)	O
;	O
for	O
(	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
=	O
all_segs	O
;	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
;	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
=	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
{	O
struct	O
line_subseg	O
*	O
lss	O
=	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
->	O
head	O
;	O
struct	O
line_entry	O
*	O
*	O
ptail	O
=	O
lss	O
->	O
ptail	O
;	O
if	O
(	O
lss	O
->	O
head	O
&&	O
lss	O
->	O
head	O
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
view	O
)	O
set_or_check_view	O
(	O
lss	O
->	O
head	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
while	O
(	O
(	O
lss	O
=	O
lss	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
lss	O
->	O
head	O
&&	O
lss	O
->	O
head	O
->	O
loc	*(*(struct(*(*(struct`)),long,long,*(struct(int,int,int,int,int,enum(int,int,int,int),int,int,int,int,long,long,*`,*`)))))
.	O
view	O
)	O
set_or_check_view	O
(	O
lss	O
->	O
head	O
,	O
!	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
->	O
head	O
?	O
NULL	O
:	O
(	O
struct	O
line_entry	O
*	O
)	O
ptail	O
,	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
->	O
head	O
?	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
->	O
head	O
->	O
head	O
:	O
NULL	O
)	O
;	O
*	O
ptail	O
=	O
lss	O
->	O
head	O
;	O
ptail	O
=	O
lss	O
->	O
ptail	O
;	O
}	O
}	O
out_debug_line	O
(	O
line_seg	O
)	O
;	O
if	O
(	O
emit_other_sections	O
)	O
{	O
segT	O
abbrev_seg	O
;	O
segT	O
aranges_seg	O
;	O
segT	O
ranges_seg	O
;	O
segT	O
str_seg	O
;	O
symbolS	O
*	O
name_sym	O
,	O
*	O
comp_dir_sym	O
,	O
*	O
producer_sym	O
;	O
gas_assert	O
(	O
all_segs	O
)	O
;	O
info_seg	O
=	O
subseg_new	O
(	O
".debug_info"	*(char)
,	O
0	int
)	O
;	O
abbrev_seg	O
=	O
subseg_new	O
(	O
".debug_abbrev"	*(char)
,	O
0	int
)	O
;	O
aranges_seg	O
=	O
subseg_new	O
(	O
".debug_aranges"	*(char)
,	O
0	int
)	O
;	O
str_seg	O
=	O
subseg_new	O
(	O
".debug_str"	*(char)
,	O
0	int
)	O
;	O
bfd_set_section_flags	(*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),int)->(int)
(	O
info_seg	O
,	O
SEC_READONLY	O
|	O
SEC_DEBUGGING	O
|	O
SEC_OCTETS	O
)	O
;	O
bfd_set_section_flags	(*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),int)->(int)
(	O
abbrev_seg	O
,	O
SEC_READONLY	O
|	O
SEC_DEBUGGING	O
|	O
SEC_OCTETS	O
)	O
;	O
bfd_set_section_flags	(*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),int)->(int)
(	O
aranges_seg	O
,	O
SEC_READONLY	O
|	O
SEC_DEBUGGING	O
|	O
SEC_OCTETS	O
)	O
;	O
bfd_set_section_flags	(*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),int)->(int)
(	O
str_seg	O
,	O
SEC_READONLY	O
|	O
SEC_DEBUGGING	O
|	O
SEC_OCTETS	O
|	O
SEC_MERGE	O
|	O
SEC_STRINGS	O
)	O
;	O
str_seg	O
->	O
entsize	int
=	O
1	int
;	O
record_alignment	O
(	O
aranges_seg	O
,	O
ffs	(int)->(int)
(	O
2	int
*	O
sizeof_address	O
)	O
-	O
1	int
)	O
;	O
if	O
(	O
all_segs	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
==	O
NULL	O
)	O
ranges_seg	O
=	O
NULL	O
;	O
else	O
{	O
ranges_seg	O
=	O
subseg_new	O
(	O
".debug_ranges"	*(char)
,	O
0	int
)	O
;	O
bfd_set_section_flags	(*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),int)->(int)
(	O
ranges_seg	O
,	O
SEC_READONLY	O
|	O
SEC_DEBUGGING	O
|	O
SEC_OCTETS	O
)	O
;	O
record_alignment	O
(	O
ranges_seg	O
,	O
ffs	(int)->(int)
(	O
2	int
*	O
sizeof_address	O
)	O
-	O
1	int
)	O
;	O
out_debug_ranges	O
(	O
ranges_seg	O
)	O
;	O
}	O
out_debug_aranges	O
(	O
aranges_seg	O
,	O
info_seg	O
)	O
;	O
out_debug_abbrev	O
(	O
abbrev_seg	O
,	O
info_seg	O
,	O
line_seg	O
)	O
;	O
out_debug_str	O
(	O
str_seg	O
,	O
&	O
name_sym	O
,	O
&	O
comp_dir_sym	O
,	O
&	O
producer_sym	O
)	O
;	O
out_debug_info	O
(	O
info_seg	O
,	O
abbrev_seg	O
,	O
line_seg	O
,	O
ranges_seg	O
,	O
name_sym	O
,	O
comp_dir_sym	O
,	O
producer_sym	O
)	O
;	O
}	O
}	O
void	O
dwarf2dbg_final_check	O
(	O
void	O
)	O
{	O
while	O
(	O
view_assert_failed	O
)	O
{	O
expressionS	O
*	O
exp	O
;	O
symbolS	O
*	O
sym	*(struct)
;	O
offsetT	O
failed	O
;	O
gas_assert	O
(	O
!	O
symbol_resolved_p	O
(	O
view_assert_failed	O
)	O
)	O
;	O
exp	O
=	O
symbol_get_value_expression	O
(	O
view_assert_failed	O
)	O
;	O
sym	*(struct)
=	O
view_assert_failed	O
;	O
if	O
(	O
exp	O
->	O
X_op	O
==	O
O_add	O
&&	O
exp	O
->	O
X_add_number	O
==	O
0	int
&&	O
exp	O
->	O
X_unsigned	O
)	O
{	O
view_assert_failed	O
=	O
exp	O
->	O
X_add_symbol	O
;	O
sym	*(struct)
=	O
exp	O
->	O
X_op_symbol	O
;	O
}	O
else	O
view_assert_failed	O
=	O
NULL	O
;	O
failed	O
=	O
resolve_symbol_value	O
(	O
sym	*(struct)
)	O
;	O
if	O
(	O
!	O
symbol_resolved_p	O
(	O
sym	*(struct)
)	O
||	O
failed	O
)	O
{	O
as_bad	O
(	O
_	O
(	O
"view number mismatch"	*(char)
)	O
)	O
;	O
break	O
;	O
}	O
}	O
}	O
