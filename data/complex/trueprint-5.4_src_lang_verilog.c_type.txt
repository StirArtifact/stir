char	O
lang_verilog_defaults	array(char)
[	O
]	O
=	O
"-f --F --i"	*(char)
;	O
typedef	O
enum	O
{	O
IP_CODE	int
,	O
IP_COMMENT_START	int
,	O
IP_COMMENT	int
,	O
IP_COMMENT_LINE	int
,	O
IP_COMMENT_END	int
}	O
verilog_ip_states	enum(int,int,int,int,int)
;	O
stream_status	enum(int,int,int,int,int)
get_verilog_char	(*(char),*(enum(int,int,int,int)))->(enum(int,int,int,int,int))
(	O
char	O
*	O
input_char	*(char)
,	O
char_status	enum(int,int,int,int)
*	O
status	enum(int,int,int,int)
)	O
{	O
static	O
verilog_ip_states	enum(int,int,int,int,int)
state	*(int)
=	O
IP_CODE	int
;	O
static	O
verilog_ip_states	enum(int,int,int,int,int)
saved_state	enum(int,int,int,int,int)
;	O
stream_status	enum(int,int,int,int,int)
retval	enum(int,int,int,int,int)
;	O
static	O
long	O
start_char	long
,	O
end_char	long
;	O
static	O
long	O
fn_page_number	long
;	O
*	O
status	enum(int,int,int,int)
=	O
CHAR_NORMAL	int
;	O
if	O
(	O
restart_language	enum(int,int,int)
==	O
TRUE	int
)	O
{	O
state	*(int)
=	O
IP_CODE	int
;	O
saved_state	enum(int,int,int,int,int)
=	O
IP_CODE	int
;	O
start_char	long
=	O
0	int
;	O
end_char	long
=	O
0	int
;	O
fn_page_number	long
=	O
0	int
;	O
braces_depth	short
=	O
0	int
;	O
restart_language	enum(int,int,int)
=	O
FALSE	int
;	O
}	O
retval	enum(int,int,int,int,int)
=	O
getnextchar	(*(char))->(enum(int,int,int,int,int))
(	O
input_char	*(char)
)	O
;	O
switch	O
(	O
state	*(int)
)	O
{	O
case	O
IP_CODE	int
:	O
switch	O
(	O
*	O
input_char	*(char)
)	O
{	O
case	O
'/'	O
:	O
state	*(int)
=	O
IP_COMMENT_START	int
;	O
{	O
stream_status	enum(int,int,int,int,int)
s	enum(int,int,int,int,int)
;	O
char	O
c	char
;	O
s	enum(int,int,int,int,int)
=	O
getnextchar	(*(char))->(enum(int,int,int,int,int))
(	O
&	O
c	char
)	O
;	O
if	O
(	O
(	O
c	char
==	O
'*'	O
)	O
||	O
(	O
c	char
==	O
'/'	O
)	O
)	O
*	O
status	enum(int,int,int,int)
=	O
CHAR_ITALIC	int
;	O
ungetnextchar	(char,enum(int,int,int,int,int))->(void)
(	O
c	char
,	O
s	enum(int,int,int,int,int)
)	O
;	O
}	O
break	O
;	O
case	O
'{'	O
:	O
braces_depth	short
+=	O
1	int
;	O
break	O
;	O
case	O
'}'	O
:	O
braces_depth	short
-=	O
1	int
;	O
break	O
;	O
default	O
:	O
;	O
}	O
break	O
;	O
case	O
IP_COMMENT_START	int
:	O
switch	O
(	O
*	O
input_char	*(char)
)	O
{	O
case	O
'/'	O
:	O
state	*(int)
=	O
IP_COMMENT_LINE	int
;	O
*	O
status	enum(int,int,int,int)
=	O
CHAR_ITALIC	int
;	O
break	O
;	O
case	O
'*'	O
:	O
state	*(int)
=	O
IP_COMMENT	int
;	O
*	O
status	enum(int,int,int,int)
=	O
CHAR_ITALIC	int
;	O
break	O
;	O
case	O
'{'	O
:	O
state	*(int)
=	O
IP_CODE	int
;	O
braces_depth	short
+=	O
1	int
;	O
break	O
;	O
case	O
'}'	O
:	O
if	O
(	O
(	O
braces_depth	short
-=	O
1	int
)	O
==	O
0	int
)	O
retval	enum(int,int,int,int,int)
|=	O
STREAM_FUNCTION_END	int
;	O
break	O
;	O
default	O
:	O
state	*(int)
=	O
IP_CODE	int
;	O
break	O
;	O
}	O
break	O
;	O
case	O
IP_COMMENT	int
:	O
*	O
status	enum(int,int,int,int)
=	O
CHAR_ITALIC	int
;	O
switch	O
(	O
*	O
input_char	*(char)
)	O
{	O
case	O
'*'	O
:	O
state	*(int)
=	O
IP_COMMENT_END	int
;	O
break	O
;	O
default	O
:	O
;	O
}	O
break	O
;	O
case	O
IP_COMMENT_LINE	int
:	O
*	O
status	enum(int,int,int,int)
=	O
CHAR_ITALIC	int
;	O
switch	O
(	O
*	O
input_char	*(char)
)	O
{	O
case	O
'\n'	O
:	O
state	*(int)
=	O
IP_CODE	int
;	O
break	O
;	O
default	O
:	O
;	O
}	O
break	O
;	O
case	O
IP_COMMENT_END	int
:	O
*	O
status	enum(int,int,int,int)
=	O
CHAR_ITALIC	int
;	O
switch	O
(	O
*	O
input_char	*(char)
)	O
{	O
case	O
'/'	O
:	O
state	*(int)
=	O
IP_CODE	int
;	O
break	O
;	O
case	O
'*'	O
:	O
break	O
;	O
default	O
:	O
state	*(int)
=	O
IP_COMMENT	int
;	O
break	O
;	O
}	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
if	O
(	O
pass	short
==	O
1	int
)	O
*	O
status	enum(int,int,int,int)
=	O
get_function_name_posn	(long,enum(int,int,int,int))->(enum(int,int,int,int))
(	O
char_number	long
,	O
*	O
status	enum(int,int,int,int)
)	O
;	O
return	O
(	O
retval	enum(int,int,int,int,int)
)	O
;	O
}	O
