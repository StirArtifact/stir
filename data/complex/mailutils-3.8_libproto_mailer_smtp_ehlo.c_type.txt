static	O
int	O
capa_comp	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
item	*(void)
,	O
const	O
void	O
*	O
value	*(void)
)	O
{	O
const	O
char	O
*	O
capa	*(char)
=	O
item	*(void)
;	O
const	O
char	O
*	O
needle	*(char)
=	O
value	*(void)
;	O
for	O
(	O
;	O
*	O
needle	*(char)
;	O
capa	*(char)
++	O
,	O
needle	*(char)
++	O
)	O
{	O
if	O
(	O
!	O
*	O
capa	*(char)
)	O
return	O
1	int
;	O
if	O
(	O
mu_tolower	O
(	O
*	O
capa	*(char)
)	O
!=	O
mu_tolower	O
(	O
*	O
needle	*(char)
)	O
)	O
return	O
1	int
;	O
}	O
return	O
!	O
(	O
*	O
capa	*(char)
==	O
0	int
||	O
mu_isspace	O
(	O
*	O
capa	*(char)
)	O
)	O
;	O
}	O
int	O
mu_smtp_ehlo	(*(struct))->(int)
(	O
mu_smtp_t	*(struct)
smtp	*(struct)
)	O
{	O
int	O
status	int
;	O
if	O
(	O
!	O
smtp	*(struct)
)	O
return	O
EINVAL	int
;	O
if	O
(	O
MU_SMTP_FISSET	O
(	O
smtp	*(struct)
,	O
_MU_SMTP_ERR	int
)	O
)	O
return	O
MU_ERR_FAILURE	O
;	O
if	O
(	O
!	O
smtp	*(struct)
->	O
param	*(struct)
[	O
MU_SMTP_PARAM_DOMAIN	int
]	O
)	O
{	O
char	O
*	O
host	*(*(char))
;	O
char	O
*	O
p	*(char)
;	O
if	O
(	O
mu_get_host_name	(*(*(char)))->(int)
(	O
&	O
host	*(*(char))
)	O
==	O
0	int
)	O
{	O
if	O
(	O
host	*(*(char))
[	O
0	int
]	O
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
host	*(*(char))
)	O
;	O
host	*(*(char))
=	O
p	*(char)
=	O
NULL	O
;	O
}	O
else	O
{	O
p	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
host	*(*(char))
,	O
'.'	O
)	O
;	O
if	O
(	O
p	*(char)
)	O
p	*(char)
++	O
;	O
else	O
p	*(char)
=	O
host	*(*(char))
;	O
}	O
}	O
else	O
p	*(char)
=	O
NULL	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
{	O
struct	O
mu_sockaddr	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(short,array(char))),int,*(char))),*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(short,array(char))),int,*(char))),*(struct(short,array(char))),int,*(char))
*	O
addr	*(struct(short,array(char)))
;	O
status	int
=	O
mu_stream_ioctl	(*(struct),int,int,*(void))->(int)
(	O
smtp	*(struct)
->	O
carrier	*(struct)
,	O
MU_IOCTL_TCPSTREAM	int
,	O
MU_IOCTL_TCP_GETSOCKNAME	int
,	O
&	O
addr	*(struct(short,array(char)))
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
status	int
=	O
mu_sockaddr_format	enum(int,int)
(	O
addr	*(struct(short,array(char)))
,	O
&	O
host	*(*(char))
,	O
mu_sockaddr_format_ehlo	int
)	O
;	O
mu_sockaddr_free	(*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(short,array(char))),int,*(char))))->(void)
(	O
addr	*(struct(short,array(char)))
)	O
;	O
p	*(char)
=	O
host	*(*(char))
;	O
}	O
MU_SMTP_CHECK_ERROR	O
(	O
smtp	*(struct)
,	O
status	int
)	O
;	O
}	O
status	int
=	O
mu_smtp_set_param	(*(struct),int,*(char))->(int)
(	O
smtp	*(struct)
,	O
MU_SMTP_PARAM_DOMAIN	int
,	O
p	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
host	*(*(char))
)	O
;	O
MU_SMTP_CHECK_ERROR	O
(	O
smtp	*(struct)
,	O
status	int
)	O
;	O
}	O
status	int
=	O
mu_smtp_write	(*(struct),*(char))->(int)
(	O
smtp	*(struct)
,	O
"EHLO %s\r\n"	*(char)
,	O
smtp	*(struct)
->	O
param	*(struct)
[	O
MU_SMTP_PARAM_DOMAIN	int
]	O
)	O
;	O
MU_SMTP_CHECK_ERROR	O
(	O
smtp	*(struct)
,	O
status	int
)	O
;	O
status	int
=	O
mu_smtp_response	(*(struct))->(int)
(	O
smtp	*(struct)
)	O
;	O
MU_SMTP_CHECK_ERROR	O
(	O
smtp	*(struct)
,	O
status	int
)	O
;	O
if	O
(	O
smtp	*(struct)
->	O
replcode	array(char)
[	O
0	int
]	O
==	O
'2'	O
)	O
{	O
smtp	*(struct)
->	O
flags	int
|=	O
_MU_SMTP_ESMTP	int
;	O
smtp	*(struct)
->	O
capa	*(char)
=	O
smtp	*(struct)
->	O
mlrepl	*(struct)
;	O
smtp	*(struct)
->	O
mlrepl	*(struct)
=	O
NULL	O
;	O
mu_list_set_comparator	(*(struct),*((*(void),*(void))->(int)))->(*((*(void),*(void))->(int)))
(	O
smtp	*(struct)
->	O
capa	*(char)
,	O
capa_comp	(*(void),*(void))->(int)
)	O
;	O
}	O
else	O
if	O
(	O
smtp	*(struct)
->	O
replcode	array(char)
[	O
0	int
]	O
==	O
'4'	O
)	O
return	O
MU_ERR_REPLY	O
;	O
else	O
{	O
status	int
=	O
mu_smtp_write	(*(struct),*(char))->(int)
(	O
smtp	*(struct)
,	O
"HELO %s\r\n"	*(char)
,	O
smtp	*(struct)
->	O
param	*(struct)
[	O
MU_SMTP_PARAM_DOMAIN	int
]	O
)	O
;	O
MU_SMTP_CHECK_ERROR	O
(	O
smtp	*(struct)
,	O
status	int
)	O
;	O
status	int
=	O
mu_smtp_response	(*(struct))->(int)
(	O
smtp	*(struct)
)	O
;	O
MU_SMTP_CHECK_ERROR	O
(	O
smtp	*(struct)
,	O
status	int
)	O
;	O
smtp	*(struct)
->	O
flags	int
&=	O
~	O
_MU_SMTP_ESMTP	int
;	O
if	O
(	O
smtp	*(struct)
->	O
replcode	array(char)
[	O
0	int
]	O
!=	O
'2'	O
)	O
return	O
MU_ERR_REPLY	O
;	O
}	O
if	O
(	O
smtp	*(struct)
->	O
state	*(int)
==	O
MU_SMTP_EHLO	int
)	O
smtp	*(struct)
->	O
state	*(int)
=	O
MU_SMTP_MAIL	int
;	O
return	O
0	int
;	O
}	O
