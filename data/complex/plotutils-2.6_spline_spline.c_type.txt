enum	O
{	O
STATE_ZERO	int
,	O
STATE_ONE	int
,	O
STATE_TWO	int
,	O
STATE_THREE	int
}	O
;	O
enum	O
{	O
AUTO_NONE	int
,	O
AUTO_INCREMENT	int
,	O
AUTO_BY_DISTANCE	int
}	O
;	O
const	O
char	O
*	O
optstring	*(char)
=	O
"fpsAd:I:O:P:k:n:t:x:T:a::"	*(char)
;	O
struct	O
option	struct(*(char),int,*(int),int)
long_options	array(struct(*(char),int,*(int),int))
[	O
]	O
=	O
{	O
{	O
"no-of-intervals"	*(char)
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'n'	O
}	O
,	O
{	O
"periodic"	*(char)
,	O
ARG_NONE	int
,	O
NULL	O
,	O
'p'	O
}	O
,	O
{	O
"y-dimension"	*(char)
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'd'	O
}	O
,	O
{	O
"t-limits"	*(char)
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
't'	O
}	O
,	O
{	O
"t-limits"	*(char)
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'x'	O
}	O
,	O
{	O
"tension"	*(char)
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'T'	O
}	O
,	O
{	O
"boundary-condition"	*(char)
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'k'	O
}	O
,	O
{	O
"auto-abscissa"	*(char)
,	O
ARG_OPTIONAL	int
,	O
NULL	O
,	O
'a'	O
}	O
,	O
{	O
"auto-dist-abscissa"	*(char)
,	O
ARG_NONE	int
,	O
NULL	O
,	O
'A'	O
}	O
,	O
{	O
"filter"	*(char)
,	O
ARG_NONE	int
,	O
NULL	O
,	O
'f'	O
}	O
,	O
{	O
"precision"	*(char)
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'P'	O
}	O
,	O
{	O
"suppress-abscissa"	*(char)
,	O
ARG_NONE	int
,	O
NULL	O
,	O
's'	O
}	O
,	O
{	O
"input-type"	*(char)
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'I'	O
}	O
,	O
{	O
"output-type"	*(char)
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'O'	O
}	O
,	O
{	O
"version"	*(char)
,	O
ARG_NONE	int
,	O
NULL	O
,	O
'V'	O
<<	O
8	int
}	O
,	O
{	O
"help"	*(char)
,	O
ARG_NONE	int
,	O
NULL	O
,	O
'h'	O
<<	O
8	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
0	int
,	O
0	int
}	O
}	O
;	O
const	O
int	O
hidden_options	array(int)
[	O
]	O
=	O
{	O
(	O
int	O
)	O
'x'	O
,	O
0	int
}	O
;	O
typedef	O
enum	O
{	O
T_ASCII	int
,	O
T_SINGLE	int
,	O
T_DOUBLE	int
,	O
T_INTEGER	int
}	O
data_type	enum(int,int,int,int)
;	O
data_type	enum(int,int,int,int)
input_type	enum(int,int,int,int)
=	O
T_ASCII	int
;	O
data_type	enum(int,int,int,int)
output_type	enum(int,int,int,int)
=	O
T_ASCII	int
;	O
const	O
char	O
*	O
progname	*(char)
=	O
"spline"	*(char)
;	O
const	O
char	O
*	O
written	*(char)
=	O
"Written by Robert S. Maier and Rich Murphey."	*(char)
;	O
const	O
char	O
*	O
copyright	*(char)
=	O
"Copyright (C) 2009 Free Software Foundation, Inc."	*(char)
;	O
const	O
char	O
*	O
usage_appendage	*(char)
=	O
" [FILE]...\nWith no FILE, or when FILE is -, read standard input.\n"	*(char)
;	O
bool	enum(int,int)
do_bessel	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int,int,double,double,double,double,double,int,enum(int,int))->(enum(int,int))
(	O
FILE	struct
*	O
input	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
int	O
ydimension	int
,	O
int	O
auto_abscissa	int
,	O
double	O
auto_t	double
,	O
double	O
auto_delta	double
,	O
double	O
first_t	double
,	O
double	O
last_t	double
,	O
double	O
spacing_t	double
,	O
int	O
precision	int
,	O
bool	enum(int,int)
suppress_abscissa	enum(int,int)
)	O
;	O
bool	enum(int,int)
is_monotonic	(int,*(double))->(enum(int,int))
(	O
int	O
n	int
,	O
double	O
*	O
t	*(double)
)	O
;	O
bool	enum(int,int)
read_data	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(int),*(int),int,double,double,*(*(double)),int,*(*(double)),*(*(double)))->(enum(int,int))
(	O
FILE	struct
*	O
input	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
int	O
*	O
len	*(int)
,	O
int	O
*	O
used	*(int)
,	O
int	O
auto_abscissa	int
,	O
double	O
auto_t	double
,	O
double	O
auto_delta	double
,	O
double	O
*	O
*	O
t	*(double)
,	O
int	O
ydimension	int
,	O
double	O
*	O
*	O
y	*(*(double))
,	O
double	O
*	O
*	O
z	*(*(double))
)	O
;	O
bool	enum(int,int)
read_float	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(double))->(enum(int,int))
(	O
FILE	struct
*	O
input	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
double	O
*	O
dptr	*(double)
)	O
;	O
bool	enum(int,int)
skip_whitespace	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(enum(int,int))
(	O
FILE	struct
*	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
bool	enum(int,int)
write_point	(double,*(double),int,int,enum(int,int))->(enum(int,int))
(	O
double	O
t	*(double)
,	O
double	O
*	O
y	*(*(double))
,	O
int	O
ydimension	int
,	O
int	O
precision	int
,	O
bool	enum(int,int)
suppress_abscissa	enum(int,int)
)	O
;	O
double	O
interpolate	(int,*(double),*(double),*(double),double,double,enum(int,int))->(double)
(	O
int	O
n	int
,	O
double	O
*	O
t	*(double)
,	O
double	O
*	O
y	*(*(double))
,	O
double	O
*	O
z	*(*(double))
,	O
double	O
x	double
,	O
double	O
tension	double
,	O
bool	enum(int,int)
periodic	enum(int,int)
)	O
;	O
double	O
quotient_sin_func	(double,double)->(double)
(	O
double	O
x	double
,	O
double	O
y	*(*(double))
)	O
;	O
double	O
quotient_sinh_func	(double,double)->(double)
(	O
double	O
x	double
,	O
double	O
y	*(*(double))
)	O
;	O
double	O
sin_func	(double)->(double)
(	O
double	O
x	double
)	O
;	O
double	O
sinh_func	(double)->(double)
(	O
double	O
x	double
)	O
;	O
double	O
tan_func	(double)->(double)
(	O
double	O
x	double
)	O
;	O
double	O
tanh_func	(double)->(double)
(	O
double	O
x	double
)	O
;	O
int	O
read_point	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(double),*(double),int,*(enum(int,int)),int,*(double),double,*(double))->(int)
(	O
FILE	struct
*	O
input	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
double	O
*	O
t	*(double)
,	O
double	O
*	O
y	*(*(double))
,	O
int	O
ydimension	int
,	O
bool	enum(int,int)
*	O
first_point	*(enum(int,int))
,	O
int	O
auto_abscissa	int
,	O
double	O
*	O
auto_t	double
,	O
double	O
auto_delta	double
,	O
double	O
*	O
stored	*(double)
)	O
;	O
void	O
do_bessel_range	(double,double,*(double),*(double),*(double),*(double),double,double,double,int,int,enum(int,int),enum(int,int))->(void)
(	O
double	O
abscissa0	double
,	O
double	O
abscissa1	double
,	O
double	O
*	O
value0	*(double)
,	O
double	O
*	O
value1	*(double)
,	O
double	O
*	O
slope0	*(double)
,	O
double	O
*	O
slope1	*(double)
,	O
double	O
first_t	double
,	O
double	O
last_t	double
,	O
double	O
spacing_t	double
,	O
int	O
ydimension	int
,	O
int	O
precision	int
,	O
bool	enum(int,int)
endit	enum(int,int)
,	O
bool	enum(int,int)
suppress_abscissa	enum(int,int)
)	O
;	O
void	O
do_spline	(int,int,*(*(double)),int,*(*(double)),*(*(double)),double,enum(int,int),enum(int,int),double,int,double,double,double,int,enum(int,int),enum(int,int),enum(int,int),enum(int,int),enum(int,int))->(void)
(	O
int	O
used	*(int)
,	O
int	O
len	*(int)
,	O
double	O
*	O
*	O
t	*(double)
,	O
int	O
ydimension	int
,	O
double	O
*	O
*	O
y	*(*(double))
,	O
double	O
*	O
*	O
z	*(*(double))
,	O
double	O
tension	double
,	O
bool	enum(int,int)
periodic	enum(int,int)
,	O
bool	enum(int,int)
spec_boundary_condition	enum(int,int)
,	O
double	O
boundary_condition	double
,	O
int	O
precision	int
,	O
double	O
first_t	double
,	O
double	O
last_t	double
,	O
double	O
spacing_t	double
,	O
int	O
no_of_intervals	int
,	O
bool	enum(int,int)
spec_first_t	enum(int,int)
,	O
bool	enum(int,int)
spec_last_t	enum(int,int)
,	O
bool	enum(int,int)
spec_spacing_t	enum(int,int)
,	O
bool	enum(int,int)
spec_no_of_intervals	enum(int,int)
,	O
bool	enum(int,int)
suppress_abscissa	enum(int,int)
)	O
;	O
void	O
fit	(int,*(double),*(double),*(double),double,double,enum(int,int))->(void)
(	O
int	O
n	int
,	O
double	O
*	O
t	*(double)
,	O
double	O
*	O
y	*(*(double))
,	O
double	O
*	O
z	*(*(double))
,	O
double	O
k	double
,	O
double	O
tension	double
,	O
bool	enum(int,int)
periodic	enum(int,int)
)	O
;	O
void	O
maybe_emit_oob_warning	()->(void)
(	O
void	O
)	O
;	O
void	O
non_monotonic_error	()->(void)
(	O
void	O
)	O
;	O
void	O
output_dataset_separator	()->(void)
(	O
void	O
)	O
;	O
void	O
set_format_type	(*(char),*(enum(int,int,int,int)))->(void)
(	O
char	O
*	O
s	*(char)
,	O
data_type	enum(int,int,int,int)
*	O
typep	*(enum(int,int,int,int))
)	O
;	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	*(*(char))
[	O
]	O
)	O
{	O
int	O
option	struct(*(char),int,*(int),int)
;	O
int	O
opt_index	int
;	O
int	O
errcnt	int
=	O
0	int
;	O
bool	enum(int,int)
show_version	enum(int,int)
=	O
false	int
;	O
bool	enum(int,int)
show_usage	enum(int,int)
=	O
false	int
;	O
bool	enum(int,int)
dataset_follows	enum(int,int)
;	O
bool	enum(int,int)
filter	enum(int,int)
=	O
false	int
;	O
bool	enum(int,int)
periodic	enum(int,int)
=	O
false	int
;	O
bool	enum(int,int)
spec_boundary_condition	enum(int,int)
=	O
false	int
;	O
bool	enum(int,int)
spec_first_t	enum(int,int)
=	O
false	int
,	O
spec_last_t	enum(int,int)
=	O
false	int
,	O
spec_spacing_t	enum(int,int)
=	O
false	int
;	O
bool	enum(int,int)
spec_no_of_intervals	enum(int,int)
=	O
false	int
;	O
bool	enum(int,int)
suppress_abscissa	enum(int,int)
=	O
false	int
;	O
double	O
boundary_condition	double
=	O
1.0	int
;	O
double	O
delta_t	double
=	O
1.0	int
;	O
double	O
first_t	double
=	O
0.0	int
,	O
last_t	double
=	O
0.0	int
,	O
spacing_t	double
=	O
0.0	int
;	O
double	O
tension	double
=	O
0.0	int
;	O
double	O
t_start	double
=	O
0.0	int
;	O
int	O
auto_abscissa	int
=	O
AUTO_NONE	int
;	O
int	O
no_of_intervals	int
=	O
100	int
;	O
int	O
precision	int
=	O
6	int
;	O
int	O
ydimension	int
=	O
1	int
;	O
double	O
local_first_t	double
,	O
local_last_t	double
,	O
local_spacing_t	double
;	O
double	O
local_t_start	double
,	O
local_delta_t	double
;	O
int	O
local_precision	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
option	struct(*(char),int,*(int),int)
=	O
getopt_long	(int,*(*(char)),*(char),*(struct(*(char),int,*(int),int)),*(int))->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
optstring	*(char)
,	O
long_options	array(struct(*(char),int,*(int),int))
,	O
&	O
opt_index	int
)	O
;	O
if	O
(	O
option	struct(*(char),int,*(int),int)
==	O
0	int
)	O
option	struct(*(char),int,*(int),int)
=	O
long_options	array(struct(*(char),int,*(int),int))
[	O
opt_index	int
]	O
.	O
val	int
;	O
switch	O
(	O
option	struct(*(char),int,*(int),int)
)	O
{	O
case	O
'p'	O
:	O
periodic	enum(int,int)
=	O
true	int
;	O
break	O
;	O
case	O
'f'	O
:	O
filter	enum(int,int)
=	O
true	int
;	O
break	O
;	O
case	O
's'	O
:	O
suppress_abscissa	enum(int,int)
=	O
true	int
;	O
break	O
;	O
case	O
'A'	O
:	O
auto_abscissa	int
=	O
AUTO_BY_DISTANCE	int
;	O
t_start	double
=	O
0.0	int
;	O
break	O
;	O
case	O
'V'	O
<<	O
8	int
:	O
show_version	enum(int,int)
=	O
true	int
;	O
break	O
;	O
case	O
'h'	O
<<	O
8	int
:	O
show_usage	enum(int,int)
=	O
true	int
;	O
break	O
;	O
case	O
'I'	O
:	O
set_format_type	(*(char),*(enum(int,int,int,int)))->(void)
(	O
optarg	*(char)
,	O
&	O
input_type	enum(int,int,int,int)
)	O
;	O
break	O
;	O
case	O
'O'	O
:	O
set_format_type	(*(char),*(enum(int,int,int,int)))->(void)
(	O
optarg	*(char)
,	O
&	O
output_type	enum(int,int,int,int)
)	O
;	O
break	O
;	O
case	O
'd'	O
:	O
if	O
(	O
sscanf	(*(char),*(char))->(int)
(	O
optarg	*(char)
,	O
"%d"	*(char)
,	O
&	O
ydimension	int
)	O
<=	O
0	int
||	O
ydimension	int
<	O
1	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: error: the ordinate dimension `%s' is bad (it should be a positive integer)\n"	*(char)
,	O
progname	*(char)
,	O
optarg	*(char)
)	O
;	O
errcnt	int
++	O
;	O
}	O
break	O
;	O
case	O
'k'	O
:	O
if	O
(	O
sscanf	(*(char),*(char))->(int)
(	O
optarg	*(char)
,	O
"%lf"	*(char)
,	O
&	O
boundary_condition	double
)	O
<=	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: error: the boundary condition argument `%s' is bad\n"	*(char)
,	O
progname	*(char)
,	O
optarg	*(char)
)	O
;	O
errcnt	int
++	O
;	O
}	O
else	O
spec_boundary_condition	enum(int,int)
=	O
true	int
;	O
break	O
;	O
case	O
'T'	O
:	O
if	O
(	O
sscanf	(*(char),*(char))->(int)
(	O
optarg	*(char)
,	O
"%lf"	*(char)
,	O
&	O
tension	double
)	O
<=	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: error: the tension argument `%s' is bad\n"	*(char)
,	O
progname	*(char)
,	O
optarg	*(char)
)	O
;	O
errcnt	int
++	O
;	O
}	O
break	O
;	O
case	O
'n'	O
:	O
if	O
(	O
sscanf	(*(char),*(char))->(int)
(	O
optarg	*(char)
,	O
"%d"	*(char)
,	O
&	O
no_of_intervals	int
)	O
<=	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: error: the requested number of intervals `%s' is bad\n"	*(char)
,	O
progname	*(char)
,	O
optarg	*(char)
)	O
;	O
errcnt	int
++	O
;	O
}	O
else	O
spec_no_of_intervals	enum(int,int)
=	O
true	int
;	O
break	O
;	O
case	O
'P'	O
:	O
if	O
(	O
sscanf	(*(char),*(char))->(int)
(	O
optarg	*(char)
,	O
"%d"	*(char)
,	O
&	O
local_precision	int
)	O
<=	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: error: the requested precision `%s' is bad (it should be a positive integer)\n"	*(char)
,	O
progname	*(char)
,	O
optarg	*(char)
)	O
;	O
errcnt	int
++	O
;	O
}	O
else	O
{	O
if	O
(	O
local_precision	int
<=	O
0	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: the precision value `%s' is disregarded (it should be a positive integer)\n"	*(char)
,	O
progname	*(char)
,	O
optarg	*(char)
)	O
;	O
else	O
precision	int
=	O
local_precision	int
;	O
}	O
break	O
;	O
case	O
'a'	O
:	O
auto_abscissa	int
=	O
AUTO_INCREMENT	int
;	O
if	O
(	O
optind	int
>=	O
argc	int
)	O
break	O
;	O
if	O
(	O
sscanf	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
optind	int
]	O
,	O
"%lf"	*(char)
,	O
&	O
local_delta_t	double
)	O
<=	O
0	int
)	O
break	O
;	O
delta_t	double
=	O
local_delta_t	double
;	O
optind	int
++	O
;	O
if	O
(	O
optind	int
>=	O
argc	int
)	O
break	O
;	O
if	O
(	O
sscanf	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
optind	int
]	O
,	O
"%lf"	*(char)
,	O
&	O
local_t_start	double
)	O
<=	O
0	int
)	O
break	O
;	O
t_start	double
=	O
local_t_start	double
;	O
optind	int
++	O
;	O
break	O
;	O
case	O
't'	O
:	O
case	O
'x'	O
:	O
if	O
(	O
sscanf	(*(char),*(char))->(int)
(	O
optarg	*(char)
,	O
"%lf"	*(char)
,	O
&	O
local_first_t	double
)	O
<=	O
0	int
)	O
break	O
;	O
first_t	double
=	O
local_first_t	double
;	O
spec_first_t	enum(int,int)
=	O
true	int
;	O
if	O
(	O
optind	int
>=	O
argc	int
)	O
break	O
;	O
if	O
(	O
sscanf	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
optind	int
]	O
,	O
"%lf"	*(char)
,	O
&	O
local_last_t	double
)	O
<=	O
0	int
)	O
break	O
;	O
last_t	double
=	O
local_last_t	double
;	O
spec_last_t	enum(int,int)
=	O
true	int
;	O
optind	int
++	O
;	O
if	O
(	O
optind	int
>=	O
argc	int
)	O
break	O
;	O
if	O
(	O
sscanf	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
optind	int
]	O
,	O
"%lf"	*(char)
,	O
&	O
local_spacing_t	double
)	O
<=	O
0	int
)	O
break	O
;	O
spacing_t	double
=	O
local_spacing_t	double
;	O
spec_spacing_t	enum(int,int)
=	O
true	int
;	O
optind	int
++	O
;	O
break	O
;	O
default	O
:	O
errcnt	int
++	O
;	O
break	O
;	O
}	O
if	O
(	O
(	O
option	struct(*(char),int,*(int),int)
==	O
EOF	O
)	O
)	O
{	O
errcnt	int
--	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
errcnt	int
>	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Try `%s --help' for more information\n"	*(char)
,	O
progname	*(char)
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
if	O
(	O
show_version	enum(int,int)
)	O
{	O
display_version	(*(char),*(char),*(char))->(void)
(	O
progname	*(char)
,	O
written	*(char)
,	O
copyright	*(char)
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
if	O
(	O
show_usage	enum(int,int)
)	O
{	O
display_usage	(*(char),*(int),*(char),int)->(void)
(	O
progname	*(char)
,	O
hidden_options	array(int)
,	O
usage_appendage	*(char)
,	O
0	int
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
if	O
(	O
no_of_intervals	int
<	O
1	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: error: the abscissa range cannot be subdivided into %d intervals\n"	*(char)
,	O
progname	*(char)
,	O
no_of_intervals	int
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
if	O
(	O
periodic	enum(int,int)
)	O
{	O
if	O
(	O
spec_boundary_condition	enum(int,int)
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: the setting of a boundary condition is not supported for a periodic spline\n"	*(char)
,	O
progname	*(char)
)	O
;	O
boundary_condition	double
=	O
0.0	int
;	O
}	O
if	O
(	O
filter	enum(int,int)
)	O
{	O
if	O
(	O
!	O
spec_first_t	enum(int,int)
||	O
!	O
spec_last_t	enum(int,int)
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: error: acting as a filter, so the abscissa range should be specified with the -t option\n"	*(char)
,	O
progname	*(char)
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
if	O
(	O
!	O
spec_spacing_t	enum(int,int)
)	O
spacing_t	double
=	O
(	O
last_t	double
-	O
first_t	double
)	O
/	O
no_of_intervals	int
;	O
else	O
{	O
if	O
(	O
spec_no_of_intervals	enum(int,int)
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: the requested number of intervals is disregarded\n"	*(char)
,	O
progname	*(char)
)	O
;	O
if	O
(	O
(	O
last_t	double
-	O
first_t	double
)	O
*	O
spacing_t	double
<	O
0.0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: the requested spacing was of the wrong sign, so it has been corrected\n"	*(char)
,	O
progname	*(char)
)	O
;	O
spacing_t	double
=	O
-	O
spacing_t	double
;	O
}	O
}	O
if	O
(	O
spec_boundary_condition	enum(int,int)
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: acting as a filter, so the setting of a boundary condition is not supported\n"	*(char)
,	O
progname	*(char)
)	O
;	O
if	O
(	O
tension	double
!=	O
0.0	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: acting as a filter, so nonzero tension is not supported\n"	*(char)
,	O
progname	*(char)
)	O
;	O
if	O
(	O
periodic	enum(int,int)
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: acting as a filter, so periodicity is not supported\n"	*(char)
,	O
progname	*(char)
)	O
;	O
if	O
(	O
optind	int
<	O
argc	int
)	O
{	O
for	O
(	O
;	O
optind	int
<	O
argc	int
;	O
optind	int
++	O
)	O
{	O
FILE	struct
*	O
data_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
optind	int
]	O
,	O
"-"	*(char)
)	O
==	O
0	int
)	O
data_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
else	O
{	O
data_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
argv	*(*(char))
[	O
optind	int
]	O
,	O
"r"	*(char)
)	O
;	O
if	O
(	O
data_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
==	O
NULL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: %s: %s\n"	*(char)
,	O
progname	*(char)
,	O
argv	*(*(char))
[	O
optind	int
]	O
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
}	O
do	O
{	O
dataset_follows	enum(int,int)
=	O
do_bessel	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int,int,double,double,double,double,double,int,enum(int,int))->(enum(int,int))
(	O
data_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
ydimension	int
,	O
auto_abscissa	int
,	O
t_start	double
,	O
delta_t	double
,	O
first_t	double
,	O
last_t	double
,	O
spacing_t	double
,	O
precision	int
,	O
suppress_abscissa	enum(int,int)
)	O
;	O
if	O
(	O
dataset_follows	enum(int,int)
||	O
(	O
optind	int
+	O
1	int
!=	O
argc	int
)	O
)	O
output_dataset_separator	()->(void)
(	O
)	O
;	O
}	O
while	O
(	O
dataset_follows	enum(int,int)
)	O
;	O
if	O
(	O
data_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
!=	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
if	O
(	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
data_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
<	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: error: the input file `%s' could not be closed\n"	*(char)
,	O
progname	*(char)
,	O
argv	*(*(char))
[	O
optind	int
]	O
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
}	O
}	O
}	O
else	O
do	O
{	O
dataset_follows	enum(int,int)
=	O
do_bessel	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int,int,double,double,double,double,double,int,enum(int,int))->(enum(int,int))
(	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
ydimension	int
,	O
auto_abscissa	int
,	O
t_start	double
,	O
delta_t	double
,	O
first_t	double
,	O
last_t	double
,	O
spacing_t	double
,	O
precision	int
,	O
suppress_abscissa	enum(int,int)
)	O
;	O
if	O
(	O
dataset_follows	enum(int,int)
)	O
output_dataset_separator	()->(void)
(	O
)	O
;	O
}	O
while	O
(	O
dataset_follows	enum(int,int)
)	O
;	O
}	O
else	O
{	O
double	O
*	O
t	*(double)
,	O
*	O
*	O
y	*(*(double))
,	O
*	O
*	O
z	*(*(double))
;	O
int	O
i	int
,	O
len	*(int)
,	O
used	*(int)
;	O
if	O
(	O
optind	int
<	O
argc	int
)	O
{	O
for	O
(	O
;	O
optind	int
<	O
argc	int
;	O
optind	int
++	O
)	O
{	O
FILE	struct
*	O
data_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
optind	int
]	O
,	O
"-"	*(char)
)	O
==	O
0	int
)	O
data_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
else	O
{	O
data_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
argv	*(*(char))
[	O
optind	int
]	O
,	O
"r"	*(char)
)	O
;	O
if	O
(	O
data_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
==	O
NULL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: error: the file `%s' could not be opened\n"	*(char)
,	O
progname	*(char)
,	O
argv	*(*(char))
[	O
optind	int
]	O
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
}	O
do	O
{	O
len	*(int)
=	O
16	int
;	O
used	*(int)
=	O
-	O
1	int
;	O
t	*(double)
=	O
(	O
double	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
double	O
)	O
*	O
len	*(int)
)	O
;	O
y	*(*(double))
=	O
(	O
double	O
*	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
double	O
*	O
)	O
*	O
ydimension	int
)	O
;	O
z	*(*(double))
=	O
(	O
double	O
*	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
double	O
*	O
)	O
*	O
ydimension	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ydimension	int
;	O
i	int
++	O
)	O
{	O
y	*(*(double))
[	O
i	int
]	O
=	O
(	O
double	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
double	O
)	O
*	O
len	*(int)
)	O
;	O
z	*(*(double))
[	O
i	int
]	O
=	O
(	O
double	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
double	O
)	O
*	O
len	*(int)
)	O
;	O
}	O
dataset_follows	enum(int,int)
=	O
read_data	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(int),*(int),int,double,double,*(*(double)),int,*(*(double)),*(*(double)))->(enum(int,int))
(	O
data_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
&	O
len	*(int)
,	O
&	O
used	*(int)
,	O
auto_abscissa	int
,	O
t_start	double
,	O
delta_t	double
,	O
&	O
t	*(double)
,	O
ydimension	int
,	O
y	*(*(double))
,	O
z	*(*(double))
)	O
;	O
do_spline	(int,int,*(*(double)),int,*(*(double)),*(*(double)),double,enum(int,int),enum(int,int),double,int,double,double,double,int,enum(int,int),enum(int,int),enum(int,int),enum(int,int),enum(int,int))->(void)
(	O
used	*(int)
,	O
len	*(int)
,	O
&	O
t	*(double)
,	O
ydimension	int
,	O
y	*(*(double))
,	O
z	*(*(double))
,	O
tension	double
,	O
periodic	enum(int,int)
,	O
spec_boundary_condition	enum(int,int)
,	O
boundary_condition	double
,	O
precision	int
,	O
first_t	double
,	O
last_t	double
,	O
spacing_t	double
,	O
no_of_intervals	int
,	O
spec_first_t	enum(int,int)
,	O
spec_last_t	enum(int,int)
,	O
spec_spacing_t	enum(int,int)
,	O
spec_no_of_intervals	enum(int,int)
,	O
suppress_abscissa	enum(int,int)
)	O
;	O
if	O
(	O
dataset_follows	enum(int,int)
||	O
(	O
optind	int
+	O
1	int
!=	O
argc	int
)	O
)	O
output_dataset_separator	()->(void)
(	O
)	O
;	O
free	(*(void))->(void)
(	O
z	*(*(double))
)	O
;	O
free	(*(void))->(void)
(	O
y	*(*(double))
)	O
;	O
free	(*(void))->(void)
(	O
t	*(double)
)	O
;	O
}	O
while	O
(	O
dataset_follows	enum(int,int)
)	O
;	O
if	O
(	O
data_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
!=	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
if	O
(	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
data_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
<	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: error: the input file `%s' could not be closed\n"	*(char)
,	O
progname	*(char)
,	O
argv	*(*(char))
[	O
optind	int
]	O
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
}	O
}	O
}	O
else	O
do	O
{	O
len	*(int)
=	O
16	int
;	O
used	*(int)
=	O
-	O
1	int
;	O
t	*(double)
=	O
(	O
double	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
double	O
)	O
*	O
len	*(int)
)	O
;	O
y	*(*(double))
=	O
(	O
double	O
*	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
double	O
*	O
)	O
*	O
ydimension	int
)	O
;	O
z	*(*(double))
=	O
(	O
double	O
*	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
double	O
*	O
)	O
*	O
ydimension	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ydimension	int
;	O
i	int
++	O
)	O
{	O
y	*(*(double))
[	O
i	int
]	O
=	O
(	O
double	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
double	O
)	O
*	O
len	*(int)
)	O
;	O
z	*(*(double))
[	O
i	int
]	O
=	O
(	O
double	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
double	O
)	O
*	O
len	*(int)
)	O
;	O
}	O
dataset_follows	enum(int,int)
=	O
read_data	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(int),*(int),int,double,double,*(*(double)),int,*(*(double)),*(*(double)))->(enum(int,int))
(	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
&	O
len	*(int)
,	O
&	O
used	*(int)
,	O
auto_abscissa	int
,	O
t_start	double
,	O
delta_t	double
,	O
&	O
t	*(double)
,	O
ydimension	int
,	O
y	*(*(double))
,	O
z	*(*(double))
)	O
;	O
do_spline	(int,int,*(*(double)),int,*(*(double)),*(*(double)),double,enum(int,int),enum(int,int),double,int,double,double,double,int,enum(int,int),enum(int,int),enum(int,int),enum(int,int),enum(int,int))->(void)
(	O
used	*(int)
,	O
len	*(int)
,	O
&	O
t	*(double)
,	O
ydimension	int
,	O
y	*(*(double))
,	O
z	*(*(double))
,	O
tension	double
,	O
periodic	enum(int,int)
,	O
spec_boundary_condition	enum(int,int)
,	O
boundary_condition	double
,	O
precision	int
,	O
first_t	double
,	O
last_t	double
,	O
spacing_t	double
,	O
no_of_intervals	int
,	O
spec_first_t	enum(int,int)
,	O
spec_last_t	enum(int,int)
,	O
spec_spacing_t	enum(int,int)
,	O
spec_no_of_intervals	enum(int,int)
,	O
suppress_abscissa	enum(int,int)
)	O
;	O
if	O
(	O
dataset_follows	enum(int,int)
)	O
output_dataset_separator	()->(void)
(	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ydimension	int
;	O
i	int
++	O
)	O
{	O
free	(*(void))->(void)
(	O
z	*(*(double))
[	O
i	int
]	O
)	O
;	O
free	(*(void))->(void)
(	O
y	*(*(double))
[	O
i	int
]	O
)	O
;	O
}	O
free	(*(void))->(void)
(	O
z	*(*(double))
)	O
;	O
free	(*(void))->(void)
(	O
y	*(*(double))
)	O
;	O
free	(*(void))->(void)
(	O
t	*(double)
)	O
;	O
}	O
while	O
(	O
dataset_follows	enum(int,int)
)	O
;	O
}	O
return	O
EXIT_SUCCESS	int
;	O
}	O
void	O
set_format_type	(*(char),*(enum(int,int,int,int)))->(void)
(	O
char	O
*	O
s	*(char)
,	O
data_type	enum(int,int,int,int)
*	O
typep	*(enum(int,int,int,int))
)	O
{	O
switch	O
(	O
s	*(char)
[	O
0	int
]	O
)	O
{	O
case	O
'a'	O
:	O
case	O
'A'	O
:	O
*	O
typep	*(enum(int,int,int,int))
=	O
T_ASCII	int
;	O
break	O
;	O
case	O
'f'	O
:	O
case	O
'F'	O
:	O
*	O
typep	*(enum(int,int,int,int))
=	O
T_SINGLE	int
;	O
break	O
;	O
case	O
'd'	O
:	O
case	O
'D'	O
:	O
*	O
typep	*(enum(int,int,int,int))
=	O
T_DOUBLE	int
;	O
break	O
;	O
case	O
'i'	O
:	O
case	O
'I'	O
:	O
*	O
typep	*(enum(int,int,int,int))
=	O
T_INTEGER	int
;	O
break	O
;	O
default	O
:	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: error: the data format type `%s' is invalid\n"	*(char)
,	O
progname	*(char)
,	O
s	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
break	O
;	O
}	O
}	O
void	O
fit	(int,*(double),*(double),*(double),double,double,enum(int,int))->(void)
(	O
int	O
n	int
,	O
double	O
*	O
t	*(double)
,	O
double	O
*	O
y	*(*(double))
,	O
double	O
*	O
z	*(*(double))
,	O
double	O
k	double
,	O
double	O
tension	double
,	O
bool	enum(int,int)
periodic	enum(int,int)
)	O
{	O
double	O
*	O
h	*(double)
,	O
*	O
b	*(double)
,	O
*	O
u	*(double)
,	O
*	O
v	*(double)
,	O
*	O
alpha	*(double)
,	O
*	O
beta	*(double)
;	O
double	O
*	O
uu	*(double)
=	O
NULL	O
,	O
*	O
vv	*(double)
=	O
NULL	O
,	O
*	O
s	*(char)
=	O
NULL	O
;	O
int	O
i	int
;	O
if	O
(	O
n	int
==	O
1	int
)	O
{	O
z	*(*(double))
[	O
0	int
]	O
=	O
z	*(*(double))
[	O
1	int
]	O
=	O
0.0	int
;	O
return	O
;	O
}	O
h	*(double)
=	O
(	O
double	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
double	O
)	O
*	O
n	int
)	O
;	O
b	*(double)
=	O
(	O
double	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
double	O
)	O
*	O
n	int
)	O
;	O
u	*(double)
=	O
(	O
double	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
double	O
)	O
*	O
n	int
)	O
;	O
v	*(double)
=	O
(	O
double	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
double	O
)	O
*	O
n	int
)	O
;	O
alpha	*(double)
=	O
(	O
double	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
double	O
)	O
*	O
n	int
)	O
;	O
beta	*(double)
=	O
(	O
double	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
double	O
)	O
*	O
n	int
)	O
;	O
if	O
(	O
periodic	enum(int,int)
)	O
{	O
s	*(char)
=	O
(	O
double	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
double	O
)	O
*	O
n	int
)	O
;	O
uu	*(double)
=	O
(	O
double	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
double	O
)	O
*	O
n	int
)	O
;	O
vv	*(double)
=	O
(	O
double	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
double	O
)	O
*	O
n	int
)	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
n	int
-	O
1	int
;	O
++	O
i	int
)	O
{	O
h	*(double)
[	O
i	int
]	O
=	O
t	*(double)
[	O
i	int
+	O
1	int
]	O
-	O
t	*(double)
[	O
i	int
]	O
;	O
b	*(double)
[	O
i	int
]	O
=	O
6.0	int
*	O
(	O
y	*(*(double))
[	O
i	int
+	O
1	int
]	O
-	O
y	*(*(double))
[	O
i	int
]	O
)	O
/	O
h	*(double)
[	O
i	int
]	O
;	O
}	O
if	O
(	O
tension	double
<	O
0.0	int
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
n	int
-	O
1	int
;	O
++	O
i	int
)	O
if	O
(	O
sin	(double)->(double)
(	O
tension	double
*	O
h	*(double)
[	O
i	int
]	O
)	O
==	O
0.0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: error: the specified negative tension value is singular\n"	*(char)
,	O
progname	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
if	O
(	O
tension	double
==	O
0.0	int
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
n	int
-	O
1	int
;	O
++	O
i	int
)	O
{	O
alpha	*(double)
[	O
i	int
]	O
=	O
h	*(double)
[	O
i	int
]	O
;	O
beta	*(double)
[	O
i	int
]	O
=	O
2.0	int
*	O
h	*(double)
[	O
i	int
]	O
;	O
}	O
}	O
else	O
if	O
(	O
tension	double
>	O
0.0	int
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
n	int
-	O
1	int
;	O
++	O
i	int
)	O
{	O
double	O
x	double
=	O
tension	double
*	O
h	*(double)
[	O
i	int
]	O
;	O
double	O
xabs	double
=	O
(	O
x	double
<	O
0.0	int
?	O
-	O
x	double
:	O
x	double
)	O
;	O
if	O
(	O
xabs	double
<	O
TRIG_ARG_MIN	int
)	O
{	O
alpha	*(double)
[	O
i	int
]	O
=	O
h	*(double)
[	O
i	int
]	O
*	O
sinh_func	(double)->(double)
(	O
x	double
)	O
;	O
beta	*(double)
[	O
i	int
]	O
=	O
2.0	int
*	O
h	*(double)
[	O
i	int
]	O
*	O
tanh_func	(double)->(double)
(	O
x	double
)	O
;	O
}	O
else	O
if	O
(	O
xabs	double
>	O
TRIG_ARG_MAX	int
)	O
{	O
int	O
sign	int
=	O
(	O
x	double
<	O
0.0	int
?	O
-	O
1	int
:	O
1	int
)	O
;	O
alpha	*(double)
[	O
i	int
]	O
=	O
(	O
(	O
6.0	int
/	O
(	O
tension	double
*	O
tension	double
)	O
)	O
*	O
(	O
(	O
1.0	int
/	O
h	*(double)
[	O
i	int
]	O
)	O
-	O
tension	double
*	O
2	int
*	O
sign	int
*	O
exp	(double)->(double)
(	O
-	O
xabs	double
)	O
)	O
)	O
;	O
beta	*(double)
[	O
i	int
]	O
=	O
(	O
(	O
6.0	int
/	O
(	O
tension	double
*	O
tension	double
)	O
)	O
*	O
(	O
tension	double
-	O
(	O
1.0	int
/	O
h	*(double)
[	O
i	int
]	O
)	O
)	O
)	O
;	O
}	O
else	O
{	O
alpha	*(double)
[	O
i	int
]	O
=	O
(	O
(	O
6.0	int
/	O
(	O
tension	double
*	O
tension	double
)	O
)	O
*	O
(	O
(	O
1.0	int
/	O
h	*(double)
[	O
i	int
]	O
)	O
-	O
tension	double
/	O
sinh	(double)->(double)
(	O
x	double
)	O
)	O
)	O
;	O
beta	*(double)
[	O
i	int
]	O
=	O
(	O
(	O
6.0	int
/	O
(	O
tension	double
*	O
tension	double
)	O
)	O
*	O
(	O
tension	double
/	O
tanh	(double)->(double)
(	O
x	double
)	O
-	O
(	O
1.0	int
/	O
h	*(double)
[	O
i	int
]	O
)	O
)	O
)	O
;	O
}	O
}	O
}	O
else	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
n	int
-	O
1	int
;	O
++	O
i	int
)	O
{	O
double	O
x	double
=	O
tension	double
*	O
h	*(double)
[	O
i	int
]	O
;	O
double	O
xabs	double
=	O
(	O
x	double
<	O
0.0	int
?	O
-	O
x	double
:	O
x	double
)	O
;	O
if	O
(	O
xabs	double
<	O
TRIG_ARG_MIN	int
)	O
{	O
alpha	*(double)
[	O
i	int
]	O
=	O
h	*(double)
[	O
i	int
]	O
*	O
sin_func	(double)->(double)
(	O
x	double
)	O
;	O
beta	*(double)
[	O
i	int
]	O
=	O
2.0	int
*	O
h	*(double)
[	O
i	int
]	O
*	O
tan_func	(double)->(double)
(	O
x	double
)	O
;	O
}	O
else	O
{	O
alpha	*(double)
[	O
i	int
]	O
=	O
(	O
(	O
6.0	int
/	O
(	O
tension	double
*	O
tension	double
)	O
)	O
*	O
(	O
(	O
1.0	int
/	O
h	*(double)
[	O
i	int
]	O
)	O
-	O
tension	double
/	O
sin	(double)->(double)
(	O
x	double
)	O
)	O
)	O
;	O
beta	*(double)
[	O
i	int
]	O
=	O
(	O
(	O
6.0	int
/	O
(	O
tension	double
*	O
tension	double
)	O
)	O
*	O
(	O
tension	double
/	O
tan	(double)->(double)
(	O
x	double
)	O
-	O
(	O
1.0	int
/	O
h	*(double)
[	O
i	int
]	O
)	O
)	O
)	O
;	O
}	O
}	O
}	O
if	O
(	O
!	O
periodic	enum(int,int)
&&	O
n	int
==	O
2	int
)	O
u	*(double)
[	O
1	int
]	O
=	O
beta	*(double)
[	O
0	int
]	O
+	O
beta	*(double)
[	O
1	int
]	O
+	O
2	int
*	O
k	double
*	O
alpha	*(double)
[	O
0	int
]	O
;	O
else	O
u	*(double)
[	O
1	int
]	O
=	O
beta	*(double)
[	O
0	int
]	O
+	O
beta	*(double)
[	O
1	int
]	O
+	O
k	double
*	O
alpha	*(double)
[	O
0	int
]	O
;	O
v	*(double)
[	O
1	int
]	O
=	O
b	*(double)
[	O
1	int
]	O
-	O
b	*(double)
[	O
0	int
]	O
;	O
if	O
(	O
u	*(double)
[	O
1	int
]	O
==	O
0.0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: error: as posed, the problem of computing a spline is singular\n"	*(char)
,	O
progname	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
periodic	enum(int,int)
)	O
{	O
s	*(char)
[	O
1	int
]	O
=	O
alpha	*(double)
[	O
0	int
]	O
;	O
uu	*(double)
[	O
1	int
]	O
=	O
0.0	int
;	O
vv	*(double)
[	O
1	int
]	O
=	O
0.0	int
;	O
}	O
for	O
(	O
i	int
=	O
2	int
;	O
i	int
<=	O
n	int
-	O
1	int
;	O
++	O
i	int
)	O
{	O
u	*(double)
[	O
i	int
]	O
=	O
(	O
beta	*(double)
[	O
i	int
]	O
+	O
beta	*(double)
[	O
i	int
-	O
1	int
]	O
-	O
alpha	*(double)
[	O
i	int
-	O
1	int
]	O
*	O
alpha	*(double)
[	O
i	int
-	O
1	int
]	O
/	O
u	*(double)
[	O
i	int
-	O
1	int
]	O
+	O
(	O
i	int
==	O
n	int
-	O
1	int
?	O
k	double
*	O
alpha	*(double)
[	O
n	int
-	O
1	int
]	O
:	O
0.0	int
)	O
)	O
;	O
if	O
(	O
u	*(double)
[	O
i	int
]	O
==	O
0.0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: error: as posed, the problem of computing a spline is singular\n"	*(char)
,	O
progname	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
v	*(double)
[	O
i	int
]	O
=	O
b	*(double)
[	O
i	int
]	O
-	O
b	*(double)
[	O
i	int
-	O
1	int
]	O
-	O
alpha	*(double)
[	O
i	int
-	O
1	int
]	O
*	O
v	*(double)
[	O
i	int
-	O
1	int
]	O
/	O
u	*(double)
[	O
i	int
-	O
1	int
]	O
;	O
if	O
(	O
periodic	enum(int,int)
)	O
{	O
s	*(char)
[	O
i	int
]	O
=	O
-	O
s	*(char)
[	O
i	int
-	O
1	int
]	O
*	O
alpha	*(double)
[	O
i	int
-	O
1	int
]	O
/	O
u	*(double)
[	O
i	int
-	O
1	int
]	O
;	O
uu	*(double)
[	O
i	int
]	O
=	O
uu	*(double)
[	O
i	int
-	O
1	int
]	O
-	O
s	*(char)
[	O
i	int
-	O
1	int
]	O
*	O
s	*(char)
[	O
i	int
-	O
1	int
]	O
/	O
u	*(double)
[	O
i	int
-	O
1	int
]	O
;	O
vv	*(double)
[	O
i	int
]	O
=	O
vv	*(double)
[	O
i	int
-	O
1	int
]	O
-	O
v	*(double)
[	O
i	int
-	O
1	int
]	O
*	O
s	*(char)
[	O
i	int
-	O
1	int
]	O
/	O
u	*(double)
[	O
i	int
-	O
1	int
]	O
;	O
}	O
}	O
if	O
(	O
!	O
periodic	enum(int,int)
)	O
{	O
z	*(*(double))
[	O
n	int
]	O
=	O
0.0	int
;	O
for	O
(	O
i	int
=	O
n	int
-	O
1	int
;	O
i	int
>=	O
1	int
;	O
--	O
i	int
)	O
z	*(*(double))
[	O
i	int
]	O
=	O
(	O
v	*(double)
[	O
i	int
]	O
-	O
alpha	*(double)
[	O
i	int
]	O
*	O
z	*(*(double))
[	O
i	int
+	O
1	int
]	O
)	O
/	O
u	*(double)
[	O
i	int
]	O
;	O
z	*(*(double))
[	O
0	int
]	O
=	O
0.0	int
;	O
z	*(*(double))
[	O
0	int
]	O
=	O
k	double
*	O
z	*(*(double))
[	O
1	int
]	O
;	O
z	*(*(double))
[	O
n	int
]	O
=	O
k	double
*	O
z	*(*(double))
[	O
n	int
-	O
1	int
]	O
;	O
}	O
else	O
{	O
z	*(*(double))
[	O
n	int
-	O
1	int
]	O
=	O
(	O
v	*(double)
[	O
n	int
-	O
1	int
]	O
+	O
vv	*(double)
[	O
n	int
-	O
1	int
]	O
)	O
/	O
(	O
u	*(double)
[	O
n	int
-	O
1	int
]	O
+	O
uu	*(double)
[	O
n	int
-	O
1	int
]	O
+	O
2	int
*	O
s	*(char)
[	O
n	int
-	O
1	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
n	int
-	O
2	int
;	O
i	int
>=	O
1	int
;	O
--	O
i	int
)	O
z	*(*(double))
[	O
i	int
]	O
=	O
(	O
(	O
v	*(double)
[	O
i	int
]	O
-	O
alpha	*(double)
[	O
i	int
]	O
*	O
z	*(*(double))
[	O
i	int
+	O
1	int
]	O
)	O
-	O
s	*(char)
[	O
i	int
]	O
*	O
z	*(*(double))
[	O
n	int
-	O
1	int
]	O
)	O
/	O
u	*(double)
[	O
i	int
]	O
;	O
z	*(*(double))
[	O
0	int
]	O
=	O
z	*(*(double))
[	O
n	int
-	O
1	int
]	O
;	O
z	*(*(double))
[	O
n	int
]	O
=	O
z	*(*(double))
[	O
1	int
]	O
;	O
}	O
if	O
(	O
periodic	enum(int,int)
)	O
{	O
free	(*(void))->(void)
(	O
vv	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
uu	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	*(char)
)	O
;	O
}	O
free	(*(void))->(void)
(	O
beta	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
alpha	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
v	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
u	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
b	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
h	*(double)
)	O
;	O
}	O
double	O
interpolate	(int,*(double),*(double),*(double),double,double,enum(int,int))->(double)
(	O
int	O
n	int
,	O
double	O
*	O
t	*(double)
,	O
double	O
*	O
y	*(*(double))
,	O
double	O
*	O
z	*(*(double))
,	O
double	O
x	double
,	O
double	O
tension	double
,	O
bool	enum(int,int)
periodic	enum(int,int)
)	O
{	O
double	O
diff	double
,	O
updiff	double
,	O
reldiff	double
,	O
relupdiff	double
,	O
h	*(double)
;	O
double	O
value	double
;	O
int	O
is_ascending	int
=	O
(	O
t	*(double)
[	O
n	int
-	O
1	int
]	O
<	O
t	*(double)
[	O
n	int
]	O
)	O
;	O
int	O
i	int
=	O
0	int
,	O
k	double
;	O
if	O
(	O
periodic	enum(int,int)
&&	O
(	O
x	double
-	O
t	*(double)
[	O
0	int
]	O
)	O
*	O
(	O
x	double
-	O
t	*(double)
[	O
n	int
]	O
)	O
>	O
0.0	int
)	O
x	double
-=	O
(	O
(	O
int	O
)	O
(	O
floor	(double)->(double)
(	O
(	O
x	double
-	O
t	*(double)
[	O
0	int
]	O
)	O
/	O
(	O
t	*(double)
[	O
n	int
]	O
-	O
t	*(double)
[	O
0	int
]	O
)	O
)	O
)	O
*	O
(	O
t	*(double)
[	O
n	int
]	O
-	O
t	*(double)
[	O
0	int
]	O
)	O
)	O
;	O
for	O
(	O
k	double
=	O
n	int
-	O
i	int
;	O
k	double
>	O
1	int
;	O
)	O
{	O
if	O
(	O
is_ascending	int
?	O
x	double
>=	O
t	*(double)
[	O
i	int
+	O
(	O
k	double
>>	O
1	int
)	O
]	O
:	O
x	double
<=	O
t	*(double)
[	O
i	int
+	O
(	O
k	double
>>	O
1	int
)	O
]	O
)	O
{	O
i	int
=	O
i	int
+	O
(	O
k	double
>>	O
1	int
)	O
;	O
k	double
=	O
k	double
-	O
(	O
k	double
>>	O
1	int
)	O
;	O
}	O
else	O
k	double
=	O
k	double
>>	O
1	int
;	O
}	O
h	*(double)
=	O
t	*(double)
[	O
i	int
+	O
1	int
]	O
-	O
t	*(double)
[	O
i	int
]	O
;	O
diff	double
=	O
x	double
-	O
t	*(double)
[	O
i	int
]	O
;	O
updiff	double
=	O
t	*(double)
[	O
i	int
+	O
1	int
]	O
-	O
x	double
;	O
reldiff	double
=	O
diff	double
/	O
h	*(double)
;	O
relupdiff	double
=	O
updiff	double
/	O
h	*(double)
;	O
if	O
(	O
tension	double
==	O
0.0	int
)	O
value	double
=	O
y	*(*(double))
[	O
i	int
]	O
+	O
diff	double
*	O
(	O
(	O
y	*(*(double))
[	O
i	int
+	O
1	int
]	O
-	O
y	*(*(double))
[	O
i	int
]	O
)	O
/	O
h	*(double)
-	O
h	*(double)
*	O
(	O
z	*(*(double))
[	O
i	int
+	O
1	int
]	O
+	O
z	*(*(double))
[	O
i	int
]	O
*	O
2.0	int
)	O
/	O
6.0	int
+	O
diff	double
*	O
(	O
0.5	int
*	O
z	*(*(double))
[	O
i	int
]	O
+	O
diff	double
*	O
(	O
z	*(*(double))
[	O
i	int
+	O
1	int
]	O
-	O
z	*(*(double))
[	O
i	int
]	O
)	O
/	O
(	O
6.0	int
*	O
h	*(double)
)	O
)	O
)	O
;	O
else	O
if	O
(	O
tension	double
>	O
0.0	int
)	O
{	O
if	O
(	O
fabs	(double)->(double)
(	O
tension	double
*	O
h	*(double)
)	O
<	O
TRIG_ARG_MIN	int
)	O
value	double
=	O
(	O
y	*(*(double))
[	O
i	int
]	O
*	O
relupdiff	double
+	O
y	*(*(double))
[	O
i	int
+	O
1	int
]	O
*	O
reldiff	double
+	O
(	O
(	O
z	*(*(double))
[	O
i	int
]	O
*	O
h	*(double)
*	O
h	*(double)
/	O
6.0	int
)	O
*	O
quotient_sinh_func	(double,double)->(double)
(	O
relupdiff	double
,	O
tension	double
*	O
h	*(double)
)	O
)	O
+	O
(	O
(	O
z	*(*(double))
[	O
i	int
+	O
1	int
]	O
*	O
h	*(double)
*	O
h	*(double)
/	O
6.0	int
)	O
*	O
quotient_sinh_func	(double,double)->(double)
(	O
reldiff	double
,	O
tension	double
*	O
h	*(double)
)	O
)	O
)	O
;	O
else	O
if	O
(	O
fabs	(double)->(double)
(	O
tension	double
*	O
h	*(double)
)	O
>	O
TRIG_ARG_MAX	int
)	O
{	O
int	O
sign	int
=	O
(	O
h	*(double)
<	O
0.0	int
?	O
-	O
1	int
:	O
1	int
)	O
;	O
value	double
=	O
(	O
(	O
(	O
z	*(*(double))
[	O
i	int
]	O
*	O
(	O
exp	(double)->(double)
(	O
tension	double
*	O
updiff	double
-	O
sign	int
*	O
tension	double
*	O
h	*(double)
)	O
+	O
exp	(double)->(double)
(	O
-	O
tension	double
*	O
updiff	double
-	O
sign	int
*	O
tension	double
*	O
h	*(double)
)	O
)	O
+	O
z	*(*(double))
[	O
i	int
+	O
1	int
]	O
*	O
(	O
exp	(double)->(double)
(	O
tension	double
*	O
diff	double
-	O
sign	int
*	O
tension	double
*	O
h	*(double)
)	O
+	O
exp	(double)->(double)
(	O
-	O
tension	double
*	O
diff	double
-	O
sign	int
*	O
tension	double
*	O
h	*(double)
)	O
)	O
)	O
*	O
(	O
sign	int
/	O
(	O
tension	double
*	O
tension	double
)	O
)	O
)	O
+	O
(	O
y	*(*(double))
[	O
i	int
]	O
-	O
z	*(*(double))
[	O
i	int
]	O
/	O
(	O
tension	double
*	O
tension	double
)	O
)	O
*	O
(	O
updiff	double
/	O
h	*(double)
)	O
+	O
(	O
y	*(*(double))
[	O
i	int
+	O
1	int
]	O
-	O
z	*(*(double))
[	O
i	int
+	O
1	int
]	O
/	O
(	O
tension	double
*	O
tension	double
)	O
)	O
*	O
(	O
diff	double
/	O
h	*(double)
)	O
)	O
;	O
}	O
else	O
value	double
=	O
(	O
(	O
(	O
z	*(*(double))
[	O
i	int
]	O
*	O
sinh	(double)->(double)
(	O
tension	double
*	O
updiff	double
)	O
+	O
z	*(*(double))
[	O
i	int
+	O
1	int
]	O
*	O
sinh	(double)->(double)
(	O
tension	double
*	O
diff	double
)	O
)	O
/	O
(	O
tension	double
*	O
tension	double
*	O
sinh	(double)->(double)
(	O
tension	double
*	O
h	*(double)
)	O
)	O
)	O
+	O
(	O
y	*(*(double))
[	O
i	int
]	O
-	O
z	*(*(double))
[	O
i	int
]	O
/	O
(	O
tension	double
*	O
tension	double
)	O
)	O
*	O
(	O
updiff	double
/	O
h	*(double)
)	O
+	O
(	O
y	*(*(double))
[	O
i	int
+	O
1	int
]	O
-	O
z	*(*(double))
[	O
i	int
+	O
1	int
]	O
/	O
(	O
tension	double
*	O
tension	double
)	O
)	O
*	O
(	O
diff	double
/	O
h	*(double)
)	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
fabs	(double)->(double)
(	O
tension	double
*	O
h	*(double)
)	O
<	O
TRIG_ARG_MIN	int
)	O
value	double
=	O
(	O
y	*(*(double))
[	O
i	int
]	O
*	O
relupdiff	double
+	O
y	*(*(double))
[	O
i	int
+	O
1	int
]	O
*	O
reldiff	double
+	O
(	O
(	O
z	*(*(double))
[	O
i	int
]	O
*	O
h	*(double)
*	O
h	*(double)
/	O
6.0	int
)	O
*	O
quotient_sin_func	(double,double)->(double)
(	O
relupdiff	double
,	O
tension	double
*	O
h	*(double)
)	O
)	O
+	O
(	O
(	O
z	*(*(double))
[	O
i	int
+	O
1	int
]	O
*	O
h	*(double)
*	O
h	*(double)
/	O
6.0	int
)	O
*	O
quotient_sin_func	(double,double)->(double)
(	O
reldiff	double
,	O
tension	double
*	O
h	*(double)
)	O
)	O
)	O
;	O
else	O
value	double
=	O
(	O
(	O
(	O
z	*(*(double))
[	O
i	int
]	O
*	O
sin	(double)->(double)
(	O
tension	double
*	O
updiff	double
)	O
+	O
z	*(*(double))
[	O
i	int
+	O
1	int
]	O
*	O
sin	(double)->(double)
(	O
tension	double
*	O
diff	double
)	O
)	O
/	O
(	O
tension	double
*	O
tension	double
*	O
sin	(double)->(double)
(	O
tension	double
*	O
h	*(double)
)	O
)	O
)	O
+	O
(	O
y	*(*(double))
[	O
i	int
]	O
-	O
z	*(*(double))
[	O
i	int
]	O
/	O
(	O
tension	double
*	O
tension	double
)	O
)	O
*	O
(	O
updiff	double
/	O
h	*(double)
)	O
+	O
(	O
y	*(*(double))
[	O
i	int
+	O
1	int
]	O
-	O
z	*(*(double))
[	O
i	int
+	O
1	int
]	O
/	O
(	O
tension	double
*	O
tension	double
)	O
)	O
*	O
(	O
diff	double
/	O
h	*(double)
)	O
)	O
;	O
}	O
return	O
value	double
;	O
}	O
bool	enum(int,int)
is_monotonic	(int,*(double))->(enum(int,int))
(	O
int	O
n	int
,	O
double	O
*	O
t	*(double)
)	O
{	O
bool	enum(int,int)
is_ascending	int
;	O
if	O
(	O
t	*(double)
[	O
n	int
-	O
1	int
]	O
<	O
t	*(double)
[	O
n	int
]	O
)	O
is_ascending	int
=	O
true	int
;	O
else	O
if	O
(	O
t	*(double)
[	O
n	int
-	O
1	int
]	O
>	O
t	*(double)
[	O
n	int
]	O
)	O
is_ascending	int
=	O
false	int
;	O
else	O
return	O
false	int
;	O
while	O
(	O
n	int
>	O
0	int
)	O
{	O
n	int
--	O
;	O
if	O
(	O
is_ascending	int
==	O
true	int
?	O
t	*(double)
[	O
n	int
]	O
>=	O
t	*(double)
[	O
n	int
+	O
1	int
]	O
:	O
t	*(double)
[	O
n	int
]	O
<=	O
t	*(double)
[	O
n	int
+	O
1	int
]	O
)	O
return	O
false	int
;	O
}	O
;	O
return	O
true	int
;	O
}	O
bool	enum(int,int)
read_float	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(double))->(enum(int,int))
(	O
FILE	struct
*	O
input	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
double	O
*	O
dptr	*(double)
)	O
{	O
int	O
num_read	int
;	O
double	O
dval	double
;	O
float	O
fval	float
;	O
int	O
ival	int
;	O
switch	O
(	O
input_type	enum(int,int,int,int)
)	O
{	O
case	O
T_ASCII	int
:	O
default	O
:	O
num_read	int
=	O
fscanf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
input	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%lf"	*(char)
,	O
&	O
dval	double
)	O
;	O
break	O
;	O
case	O
T_SINGLE	int
:	O
num_read	int
=	O
fread	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
(	O
void	O
*	O
)	O
&	O
fval	float
,	O
sizeof	O
(	O
fval	float
)	O
,	O
1	int
,	O
input	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
dval	double
=	O
fval	float
;	O
break	O
;	O
case	O
T_DOUBLE	int
:	O
num_read	int
=	O
fread	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
(	O
void	O
*	O
)	O
&	O
dval	double
,	O
sizeof	O
(	O
dval	double
)	O
,	O
1	int
,	O
input	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
break	O
;	O
case	O
T_INTEGER	int
:	O
num_read	int
=	O
fread	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
(	O
void	O
*	O
)	O
&	O
ival	int
,	O
sizeof	O
(	O
ival	int
)	O
,	O
1	int
,	O
input	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
dval	double
=	O
ival	int
;	O
break	O
;	O
}	O
if	O
(	O
num_read	int
<=	O
0	int
)	O
return	O
false	int
;	O
if	O
(	O
dval	double
!=	O
dval	double
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: a NaN (not-a-number) was encountered in a binary input file (it is treated as EOF)\n"	*(char)
,	O
progname	*(char)
)	O
;	O
return	O
false	int
;	O
}	O
else	O
{	O
*	O
dptr	*(double)
=	O
dval	double
;	O
return	O
true	int
;	O
}	O
}	O
bool	enum(int,int)
write_point	(double,*(double),int,int,enum(int,int))->(enum(int,int))
(	O
double	O
t	*(double)
,	O
double	O
*	O
y	*(*(double))
,	O
int	O
ydimension	int
,	O
int	O
precision	int
,	O
bool	enum(int,int)
suppress_abscissa	enum(int,int)
)	O
{	O
int	O
i	int
,	O
num_written	int
=	O
0	int
;	O
float	O
ft	float
,	O
fy	float
;	O
int	O
it	int
,	O
iy	int
;	O
switch	O
(	O
output_type	enum(int,int,int,int)
)	O
{	O
case	O
T_ASCII	int
:	O
default	O
:	O
if	O
(	O
suppress_abscissa	enum(int,int)
==	O
false	int
)	O
num_written	int
+=	O
printf	(*(char))->(int)
(	O
"%.*g "	*(char)
,	O
precision	int
,	O
t	*(double)
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ydimension	int
-	O
1	int
;	O
i	int
++	O
)	O
num_written	int
+=	O
printf	(*(char))->(int)
(	O
"%.*g "	*(char)
,	O
precision	int
,	O
y	*(*(double))
[	O
i	int
]	O
)	O
;	O
num_written	int
+=	O
printf	(*(char))->(int)
(	O
"%.*g\n"	*(char)
,	O
precision	int
,	O
y	*(*(double))
[	O
ydimension	int
-	O
1	int
]	O
)	O
;	O
break	O
;	O
case	O
T_SINGLE	int
:	O
if	O
(	O
suppress_abscissa	enum(int,int)
==	O
false	int
)	O
{	O
ft	float
=	O
FROUND	O
(	O
t	*(double)
)	O
;	O
if	O
(	O
ft	float
==	O
FLT_MAX	O
||	O
ft	float
==	O
-	O
(	O
FLT_MAX	O
)	O
)	O
{	O
maybe_emit_oob_warning	()->(void)
(	O
)	O
;	O
if	O
(	O
ft	float
==	O
FLT_MAX	O
)	O
ft	float
*=	O
0.99999	int
;	O
}	O
num_written	int
+=	O
fwrite	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
(	O
void	O
*	O
)	O
&	O
ft	float
,	O
sizeof	O
(	O
ft	float
)	O
,	O
1	int
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ydimension	int
;	O
i	int
++	O
)	O
{	O
fy	float
=	O
y	*(*(double))
[	O
i	int
]	O
;	O
if	O
(	O
fy	float
==	O
FLT_MAX	O
||	O
fy	float
==	O
-	O
(	O
FLT_MAX	O
)	O
)	O
{	O
maybe_emit_oob_warning	()->(void)
(	O
)	O
;	O
if	O
(	O
fy	float
==	O
FLT_MAX	O
)	O
fy	float
*=	O
0.99999	int
;	O
}	O
num_written	int
+=	O
fwrite	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
(	O
void	O
*	O
)	O
&	O
fy	float
,	O
sizeof	O
(	O
fy	float
)	O
,	O
1	int
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
break	O
;	O
case	O
T_DOUBLE	int
:	O
if	O
(	O
suppress_abscissa	enum(int,int)
==	O
false	int
)	O
num_written	int
+=	O
fwrite	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
(	O
void	O
*	O
)	O
&	O
t	*(double)
,	O
sizeof	O
(	O
t	*(double)
)	O
,	O
1	int
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ydimension	int
;	O
i	int
++	O
)	O
num_written	int
+=	O
fwrite	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
(	O
void	O
*	O
)	O
&	O
(	O
y	*(*(double))
[	O
i	int
]	O
)	O
,	O
sizeof	O
(	O
double	O
)	O
,	O
1	int
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
break	O
;	O
case	O
T_INTEGER	int
:	O
if	O
(	O
suppress_abscissa	enum(int,int)
==	O
false	int
)	O
{	O
it	int
=	O
IROUND	O
(	O
t	*(double)
)	O
;	O
if	O
(	O
it	int
==	O
INT_MAX	O
||	O
it	int
==	O
-	O
(	O
INT_MAX	O
)	O
)	O
{	O
maybe_emit_oob_warning	()->(void)
(	O
)	O
;	O
if	O
(	O
it	int
==	O
INT_MAX	O
)	O
it	int
--	O
;	O
}	O
num_written	int
+=	O
fwrite	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
(	O
void	O
*	O
)	O
&	O
it	int
,	O
sizeof	O
(	O
it	int
)	O
,	O
1	int
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ydimension	int
;	O
i	int
++	O
)	O
{	O
iy	int
=	O
IROUND	O
(	O
y	*(*(double))
[	O
i	int
]	O
)	O
;	O
if	O
(	O
iy	int
==	O
INT_MAX	O
||	O
iy	int
==	O
-	O
(	O
INT_MAX	O
)	O
)	O
{	O
maybe_emit_oob_warning	()->(void)
(	O
)	O
;	O
if	O
(	O
iy	int
==	O
INT_MAX	O
)	O
iy	int
--	O
;	O
}	O
num_written	int
+=	O
fwrite	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
(	O
void	O
*	O
)	O
&	O
iy	int
,	O
sizeof	O
(	O
iy	int
)	O
,	O
1	int
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
break	O
;	O
}	O
return	O
(	O
num_written	int
>	O
0	int
?	O
true	int
:	O
false	int
)	O
;	O
}	O
int	O
read_point	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(double),*(double),int,*(enum(int,int)),int,*(double),double,*(double))->(int)
(	O
FILE	struct
*	O
input	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
double	O
*	O
t	*(double)
,	O
double	O
*	O
y	*(*(double))
,	O
int	O
ydimension	int
,	O
bool	enum(int,int)
*	O
first_point	*(enum(int,int))
,	O
int	O
auto_abscissa	int
,	O
double	O
*	O
auto_t	double
,	O
double	O
auto_delta	double
,	O
double	O
*	O
stored	*(double)
)	O
{	O
bool	enum(int,int)
success	enum(int,int)
;	O
int	O
i	int
,	O
items_read	int
,	O
lookahead	int
;	O
head	O
:	O
if	O
(	O
input_type	enum(int,int,int,int)
==	O
T_ASCII	int
)	O
{	O
bool	enum(int,int)
two_newlines	enum(int,int)
;	O
two_newlines	enum(int,int)
=	O
skip_whitespace	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(enum(int,int))
(	O
input	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
two_newlines	enum(int,int)
)	O
return	O
2	int
;	O
}	O
if	O
(	O
feof	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
input	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
return	O
1	int
;	O
if	O
(	O
input_type	enum(int,int,int,int)
==	O
T_ASCII	int
)	O
{	O
lookahead	int
=	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
input	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
ungetc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
lookahead	int
,	O
input	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
lookahead	int
==	O
(	O
int	O
)	O
'#'	O
)	O
{	O
char	O
c	char
;	O
do	O
{	O
items_read	int
=	O
fread	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
&	O
c	char
,	O
sizeof	O
(	O
c	char
)	O
,	O
1	int
,	O
input	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
items_read	int
<=	O
0	int
)	O
return	O
1	int
;	O
}	O
while	O
(	O
c	char
!=	O
'\n'	O
)	O
;	O
ungetc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
(	O
int	O
)	O
'\n'	O
,	O
input	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
goto	O
head	O
;	O
}	O
}	O
if	O
(	O
auto_abscissa	int
!=	O
AUTO_NONE	int
)	O
{	O
success	enum(int,int)
=	O
read_float	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(double))->(enum(int,int))
(	O
input	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
&	O
(	O
y	*(*(double))
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
success	enum(int,int)
)	O
return	O
1	int
;	O
if	O
(	O
(	O
input_type	enum(int,int,int,int)
==	O
T_DOUBLE	int
&&	O
y	*(*(double))
[	O
0	int
]	O
==	O
DBL_MAX	O
)	O
||	O
(	O
input_type	enum(int,int,int,int)
==	O
T_SINGLE	int
&&	O
y	*(*(double))
[	O
0	int
]	O
==	O
(	O
double	O
)	O
FLT_MAX	O
)	O
||	O
(	O
input_type	enum(int,int,int,int)
==	O
T_INTEGER	int
&&	O
y	*(*(double))
[	O
0	int
]	O
==	O
(	O
double	O
)	O
INT_MAX	O
)	O
)	O
return	O
2	int
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
ydimension	int
;	O
i	int
++	O
)	O
{	O
success	enum(int,int)
=	O
read_float	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(double))->(enum(int,int))
(	O
input	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
&	O
(	O
y	*(*(double))
[	O
i	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
success	enum(int,int)
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: an input file terminated prematurely\n"	*(char)
,	O
progname	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
}	O
if	O
(	O
auto_abscissa	int
==	O
AUTO_INCREMENT	int
)	O
{	O
*	O
t	*(double)
=	O
*	O
auto_t	double
;	O
*	O
auto_t	double
+=	O
auto_delta	double
;	O
}	O
else	O
{	O
if	O
(	O
*	O
first_point	*(enum(int,int))
==	O
true	int
)	O
{	O
*	O
t	*(double)
=	O
*	O
auto_t	double
;	O
*	O
first_point	*(enum(int,int))
=	O
false	int
;	O
}	O
else	O
{	O
double	O
distsq	double
=	O
0.0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ydimension	int
;	O
i	int
++	O
)	O
distsq	double
+=	O
(	O
y	*(*(double))
[	O
i	int
]	O
-	O
stored	*(double)
[	O
i	int
]	O
)	O
*	O
(	O
y	*(*(double))
[	O
i	int
]	O
-	O
stored	*(double)
[	O
i	int
]	O
)	O
;	O
*	O
auto_t	double
+=	O
sqrt	(double)->(double)
(	O
distsq	double
)	O
;	O
*	O
t	*(double)
=	O
*	O
auto_t	double
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ydimension	int
;	O
i	int
++	O
)	O
stored	*(double)
[	O
i	int
]	O
=	O
y	*(*(double))
[	O
i	int
]	O
;	O
}	O
return	O
0	int
;	O
}	O
else	O
{	O
success	enum(int,int)
=	O
read_float	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(double))->(enum(int,int))
(	O
input	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
t	*(double)
)	O
;	O
if	O
(	O
!	O
success	enum(int,int)
)	O
return	O
1	int
;	O
if	O
(	O
(	O
input_type	enum(int,int,int,int)
==	O
T_DOUBLE	int
&&	O
*	O
t	*(double)
==	O
DBL_MAX	O
)	O
||	O
(	O
input_type	enum(int,int,int,int)
==	O
T_SINGLE	int
&&	O
*	O
t	*(double)
==	O
(	O
double	O
)	O
FLT_MAX	O
)	O
||	O
(	O
input_type	enum(int,int,int,int)
==	O
T_INTEGER	int
&&	O
*	O
t	*(double)
==	O
(	O
double	O
)	O
INT_MAX	O
)	O
)	O
return	O
2	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ydimension	int
;	O
i	int
++	O
)	O
{	O
success	enum(int,int)
=	O
read_float	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(double))->(enum(int,int))
(	O
input	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
&	O
(	O
y	*(*(double))
[	O
i	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
success	enum(int,int)
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: an input file terminated prematurely\n"	*(char)
,	O
progname	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
}	O
bool	enum(int,int)
read_data	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(int),*(int),int,double,double,*(*(double)),int,*(*(double)),*(*(double)))->(enum(int,int))
(	O
FILE	struct
*	O
input	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
int	O
*	O
len	*(int)
,	O
int	O
*	O
used	*(int)
,	O
int	O
auto_abscissa	int
,	O
double	O
auto_t	double
,	O
double	O
auto_delta	double
,	O
double	O
*	O
*	O
t	*(double)
,	O
int	O
ydimension	int
,	O
double	O
*	O
*	O
y	*(*(double))
,	O
double	O
*	O
*	O
z	*(*(double))
)	O
{	O
bool	enum(int,int)
first	enum(int,int)
=	O
true	int
;	O
int	O
i	int
,	O
success	enum(int,int)
;	O
double	O
tt	double
,	O
*	O
yy	*(double)
,	O
*	O
stored	*(double)
;	O
yy	*(double)
=	O
(	O
double	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
double	O
)	O
*	O
ydimension	int
)	O
;	O
stored	*(double)
=	O
(	O
double	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
double	O
)	O
*	O
ydimension	int
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
(	O
++	O
*	O
used	*(int)
)	O
>=	O
*	O
len	*(int)
)	O
{	O
*	O
len	*(int)
*=	O
2	int
;	O
*	O
t	*(double)
=	O
(	O
double	O
*	O
)	O
xrealloc	(*(void),long)->(*(void))
(	O
*	O
t	*(double)
,	O
sizeof	O
(	O
double	O
)	O
*	O
*	O
len	*(int)
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ydimension	int
;	O
i	int
++	O
)	O
{	O
y	*(*(double))
[	O
i	int
]	O
=	O
(	O
double	O
*	O
)	O
xrealloc	(*(void),long)->(*(void))
(	O
y	*(*(double))
[	O
i	int
]	O
,	O
sizeof	O
(	O
double	O
)	O
*	O
*	O
len	*(int)
)	O
;	O
z	*(*(double))
[	O
i	int
]	O
=	O
(	O
double	O
*	O
)	O
xrealloc	(*(void),long)->(*(void))
(	O
z	*(*(double))
[	O
i	int
]	O
,	O
sizeof	O
(	O
double	O
)	O
*	O
*	O
len	*(int)
)	O
;	O
}	O
}	O
success	enum(int,int)
=	O
read_point	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(double),*(double),int,*(enum(int,int)),int,*(double),double,*(double))->(int)
(	O
input	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
&	O
tt	double
,	O
yy	*(double)
,	O
ydimension	int
,	O
&	O
first	enum(int,int)
,	O
auto_abscissa	int
,	O
&	O
auto_t	double
,	O
auto_delta	double
,	O
stored	*(double)
)	O
;	O
switch	O
(	O
success	enum(int,int)
)	O
{	O
case	O
0	int
:	O
(	O
*	O
t	*(double)
)	O
[	O
*	O
used	*(int)
]	O
=	O
tt	double
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ydimension	int
;	O
i	int
++	O
)	O
y	*(*(double))
[	O
i	int
]	O
[	O
*	O
used	*(int)
]	O
=	O
yy	*(double)
[	O
i	int
]	O
;	O
break	O
;	O
case	O
1	int
:	O
(	O
*	O
used	*(int)
)	O
--	O
;	O
free	(*(void))->(void)
(	O
stored	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
yy	*(double)
)	O
;	O
return	O
false	int
;	O
case	O
2	int
:	O
(	O
*	O
used	*(int)
)	O
--	O
;	O
free	(*(void))->(void)
(	O
stored	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
yy	*(double)
)	O
;	O
return	O
true	int
;	O
}	O
}	O
}	O
void	O
do_spline	(int,int,*(*(double)),int,*(*(double)),*(*(double)),double,enum(int,int),enum(int,int),double,int,double,double,double,int,enum(int,int),enum(int,int),enum(int,int),enum(int,int),enum(int,int))->(void)
(	O
int	O
used	*(int)
,	O
int	O
len	*(int)
,	O
double	O
*	O
*	O
t	*(double)
,	O
int	O
ydimension	int
,	O
double	O
*	O
*	O
y	*(*(double))
,	O
double	O
*	O
*	O
z	*(*(double))
,	O
double	O
tension	double
,	O
bool	enum(int,int)
periodic	enum(int,int)
,	O
bool	enum(int,int)
spec_boundary_condition	enum(int,int)
,	O
double	O
k	double
,	O
int	O
precision	int
,	O
double	O
first_t	double
,	O
double	O
last_t	double
,	O
double	O
spacing_t	double
,	O
int	O
no_of_intervals	int
,	O
bool	enum(int,int)
spec_first_t	enum(int,int)
,	O
bool	enum(int,int)
spec_last_t	enum(int,int)
,	O
bool	enum(int,int)
spec_spacing_t	enum(int,int)
,	O
bool	enum(int,int)
spec_no_of_intervals	enum(int,int)
,	O
bool	enum(int,int)
suppress_abscissa	enum(int,int)
)	O
{	O
int	O
range_count	int
=	O
0	int
;	O
int	O
lastval	int
=	O
0	int
;	O
int	O
i	int
;	O
if	O
(	O
used	*(int)
+	O
1	int
==	O
0	int
)	O
return	O
;	O
if	O
(	O
used	*(int)
+	O
1	int
==	O
1	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: a spline cannot be constructed from a single data point\n"	*(char)
,	O
progname	*(char)
)	O
;	O
return	O
;	O
}	O
if	O
(	O
!	O
periodic	enum(int,int)
&&	O
used	*(int)
+	O
1	int
<=	O
2	int
)	O
{	O
if	O
(	O
spec_boundary_condition	enum(int,int)
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: the specified boundary condition is ignored, as there are only 2 data points\n"	*(char)
,	O
progname	*(char)
)	O
;	O
k	double
=	O
0.0	int
;	O
}	O
if	O
(	O
!	O
is_monotonic	(int,*(double))->(enum(int,int))
(	O
used	*(int)
,	O
*	O
t	*(double)
)	O
)	O
non_monotonic_error	()->(void)
(	O
)	O
;	O
if	O
(	O
periodic	enum(int,int)
)	O
{	O
bool	enum(int,int)
print_warning	enum(int,int)
=	O
false	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ydimension	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
y	*(*(double))
[	O
i	int
]	O
[	O
used	*(int)
]	O
!=	O
y	*(*(double))
[	O
i	int
]	O
[	O
0	int
]	O
)	O
print_warning	enum(int,int)
=	O
true	int
;	O
y	*(*(double))
[	O
i	int
]	O
[	O
used	*(int)
]	O
=	O
y	*(*(double))
[	O
i	int
]	O
[	O
0	int
]	O
;	O
}	O
if	O
(	O
print_warning	enum(int,int)
==	O
true	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: the final y value is set equal to the initial value, to ensure periodicity\n"	*(char)
,	O
progname	*(char)
)	O
;	O
if	O
(	O
used	*(int)
+	O
1	int
>=	O
len	*(int)
)	O
{	O
len	*(int)
++	O
;	O
*	O
t	*(double)
=	O
(	O
double	O
*	O
)	O
xrealloc	(*(void),long)->(*(void))
(	O
*	O
t	*(double)
,	O
sizeof	O
(	O
double	O
)	O
*	O
len	*(int)
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ydimension	int
;	O
i	int
++	O
)	O
{	O
y	*(*(double))
[	O
i	int
]	O
=	O
(	O
double	O
*	O
)	O
xrealloc	(*(void),long)->(*(void))
(	O
y	*(*(double))
[	O
i	int
]	O
,	O
sizeof	O
(	O
double	O
)	O
*	O
len	*(int)
)	O
;	O
z	*(*(double))
[	O
i	int
]	O
=	O
(	O
double	O
*	O
)	O
xrealloc	(*(void),long)->(*(void))
(	O
z	*(*(double))
[	O
i	int
]	O
,	O
sizeof	O
(	O
double	O
)	O
*	O
len	*(int)
)	O
;	O
}	O
}	O
(	O
*	O
t	*(double)
)	O
[	O
used	*(int)
+	O
1	int
]	O
=	O
(	O
*	O
t	*(double)
)	O
[	O
used	*(int)
]	O
+	O
(	O
(	O
*	O
t	*(double)
)	O
[	O
1	int
]	O
-	O
(	O
*	O
t	*(double)
)	O
[	O
0	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ydimension	int
;	O
i	int
++	O
)	O
y	*(*(double))
[	O
i	int
]	O
[	O
used	*(int)
+	O
1	int
]	O
=	O
y	*(*(double))
[	O
i	int
]	O
[	O
1	int
]	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ydimension	int
;	O
i	int
++	O
)	O
fit	(int,*(double),*(double),*(double),double,double,enum(int,int))->(void)
(	O
used	*(int)
+	O
(	O
periodic	enum(int,int)
?	O
1	int
:	O
0	int
)	O
,	O
*	O
t	*(double)
,	O
y	*(*(double))
[	O
i	int
]	O
,	O
z	*(*(double))
[	O
i	int
]	O
,	O
k	double
,	O
tension	double
,	O
periodic	enum(int,int)
)	O
;	O
if	O
(	O
!	O
spec_first_t	enum(int,int)
)	O
first_t	double
=	O
(	O
*	O
t	*(double)
)	O
[	O
0	int
]	O
;	O
if	O
(	O
!	O
spec_last_t	enum(int,int)
)	O
last_t	double
=	O
(	O
*	O
t	*(double)
)	O
[	O
used	*(int)
]	O
;	O
if	O
(	O
!	O
spec_spacing_t	enum(int,int)
)	O
{	O
if	O
(	O
no_of_intervals	int
>	O
0	int
)	O
spacing_t	double
=	O
(	O
last_t	double
-	O
first_t	double
)	O
/	O
no_of_intervals	int
;	O
else	O
spacing_t	double
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
(	O
last_t	double
-	O
first_t	double
)	O
*	O
spacing_t	double
<	O
0.0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: the requested spacing is of the wrong sign, so it has been corrected\n"	*(char)
,	O
progname	*(char)
)	O
;	O
spacing_t	double
=	O
-	O
spacing_t	double
;	O
}	O
if	O
(	O
spec_no_of_intervals	enum(int,int)
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: the requested number of intervals is disregarded\n"	*(char)
,	O
progname	*(char)
)	O
;	O
no_of_intervals	int
=	O
(	O
int	O
)	O
(	O
fabs	(double)->(double)
(	O
(	O
last_t	double
-	O
first_t	double
)	O
/	O
spacing_t	double
)	O
+	O
FUZZ	int
)	O
;	O
}	O
if	O
(	O
last_t	double
==	O
(	O
*	O
t	*(double)
)	O
[	O
0	int
]	O
)	O
lastval	int
=	O
1	int
;	O
else	O
if	O
(	O
last_t	double
==	O
(	O
*	O
t	*(double)
)	O
[	O
used	*(int)
]	O
)	O
lastval	int
=	O
2	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
no_of_intervals	int
;	O
++	O
i	int
)	O
{	O
double	O
x	double
;	O
x	double
=	O
first_t	double
+	O
spacing_t	double
*	O
i	int
;	O
if	O
(	O
i	int
==	O
no_of_intervals	int
)	O
{	O
if	O
(	O
lastval	int
==	O
1	int
)	O
x	double
=	O
(	O
*	O
t	*(double)
)	O
[	O
0	int
]	O
;	O
else	O
if	O
(	O
lastval	int
==	O
2	int
)	O
x	double
=	O
(	O
*	O
t	*(double)
)	O
[	O
used	*(int)
]	O
;	O
}	O
if	O
(	O
periodic	enum(int,int)
||	O
(	O
x	double
-	O
(	O
*	O
t	*(double)
)	O
[	O
0	int
]	O
)	O
*	O
(	O
x	double
-	O
(	O
*	O
t	*(double)
)	O
[	O
used	*(int)
]	O
)	O
<=	O
0	int
)	O
{	O
int	O
j	int
;	O
double	O
*	O
yy	*(double)
;	O
yy	*(double)
=	O
(	O
double	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
double	O
)	O
*	O
ydimension	int
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
ydimension	int
;	O
j	int
++	O
)	O
yy	*(double)
[	O
j	int
]	O
=	O
interpolate	(int,*(double),*(double),*(double),double,double,enum(int,int))->(double)
(	O
used	*(int)
,	O
*	O
t	*(double)
,	O
y	*(*(double))
[	O
j	int
]	O
,	O
z	*(*(double))
[	O
j	int
]	O
,	O
x	double
,	O
tension	double
,	O
periodic	enum(int,int)
)	O
;	O
write_point	(double,*(double),int,int,enum(int,int))->(enum(int,int))
(	O
x	double
,	O
yy	*(double)
,	O
ydimension	int
,	O
precision	int
,	O
suppress_abscissa	enum(int,int)
)	O
;	O
free	(*(void))->(void)
(	O
yy	*(double)
)	O
;	O
}	O
else	O
range_count	int
++	O
;	O
}	O
switch	O
(	O
range_count	int
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
1	int
:	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: one requested point could not be computed (as it was out of the data range)\n"	*(char)
,	O
progname	*(char)
)	O
;	O
break	O
;	O
default	O
:	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: %d requested points could not be computed (as they were out of the data range)\n"	*(char)
,	O
progname	*(char)
,	O
range_count	int
)	O
;	O
break	O
;	O
}	O
}	O
bool	enum(int,int)
do_bessel	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int,int,double,double,double,double,double,int,enum(int,int))->(enum(int,int))
(	O
FILE	struct
*	O
input	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
int	O
ydimension	int
,	O
int	O
auto_abscissa	int
,	O
double	O
auto_t	double
,	O
double	O
auto_delta	double
,	O
double	O
first_t	double
,	O
double	O
last_t	double
,	O
double	O
spacing_t	double
,	O
int	O
precision	int
,	O
bool	enum(int,int)
suppress_abscissa	enum(int,int)
)	O
{	O
bool	enum(int,int)
first	enum(int,int)
=	O
true	int
;	O
double	O
t	*(double)
,	O
*	O
y	*(*(double))
,	O
*	O
s0	*(double)
,	O
*	O
s1	*(double)
,	O
*	O
s2	*(double)
,	O
*	O
stored	*(double)
;	O
double	O
tt	double
[	O
4	int
]	O
,	O
*	O
*	O
yy	*(double)
;	O
int	O
direction	int
=	O
(	O
last_t	double
>	O
first_t	double
?	O
1	int
:	O
-	O
1	int
)	O
;	O
int	O
state	*(int)
=	O
STATE_ZERO	int
;	O
int	O
i	int
,	O
success	enum(int,int)
;	O
y	*(*(double))
=	O
(	O
double	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
double	O
)	O
*	O
ydimension	int
)	O
;	O
s0	*(double)
=	O
(	O
double	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
double	O
)	O
*	O
ydimension	int
)	O
;	O
s1	*(double)
=	O
(	O
double	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
double	O
)	O
*	O
ydimension	int
)	O
;	O
s2	*(double)
=	O
(	O
double	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
double	O
)	O
*	O
ydimension	int
)	O
;	O
yy	*(double)
=	O
(	O
double	O
*	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
4	int
*	O
sizeof	O
(	O
double	O
*	O
)	O
)	O
;	O
stored	*(double)
=	O
(	O
double	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
double	O
)	O
*	O
ydimension	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4	int
;	O
i	int
++	O
)	O
yy	*(double)
[	O
i	int
]	O
=	O
(	O
double	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
ydimension	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
success	enum(int,int)
=	O
read_point	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(double),*(double),int,*(enum(int,int)),int,*(double),double,*(double))->(int)
(	O
input	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
&	O
t	*(double)
,	O
y	*(*(double))
,	O
ydimension	int
,	O
&	O
first	enum(int,int)
,	O
auto_abscissa	int
,	O
&	O
auto_t	double
,	O
auto_delta	double
,	O
stored	*(double)
)	O
;	O
if	O
(	O
success	enum(int,int)
==	O
0	int
)	O
{	O
switch	O
(	O
state	*(int)
)	O
{	O
case	O
STATE_ZERO	int
:	O
tt	double
[	O
0	int
]	O
=	O
t	*(double)
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ydimension	int
;	O
i	int
++	O
)	O
yy	*(double)
[	O
0	int
]	O
[	O
i	int
]	O
=	O
y	*(*(double))
[	O
i	int
]	O
;	O
state	*(int)
=	O
STATE_ONE	int
;	O
break	O
;	O
case	O
STATE_ONE	int
:	O
tt	double
[	O
1	int
]	O
=	O
t	*(double)
;	O
if	O
(	O
direction	int
*	O
(	O
tt	double
[	O
1	int
]	O
-	O
tt	double
[	O
0	int
]	O
)	O
<=	O
0	int
)	O
non_monotonic_error	()->(void)
(	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ydimension	int
;	O
i	int
++	O
)	O
yy	*(double)
[	O
1	int
]	O
[	O
i	int
]	O
=	O
y	*(*(double))
[	O
i	int
]	O
;	O
state	*(int)
=	O
STATE_TWO	int
;	O
break	O
;	O
case	O
STATE_TWO	int
:	O
tt	double
[	O
2	int
]	O
=	O
t	*(double)
;	O
if	O
(	O
direction	int
*	O
(	O
tt	double
[	O
2	int
]	O
-	O
tt	double
[	O
1	int
]	O
)	O
<=	O
0	int
)	O
non_monotonic_error	()->(void)
(	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ydimension	int
;	O
i	int
++	O
)	O
{	O
yy	*(double)
[	O
2	int
]	O
[	O
i	int
]	O
=	O
y	*(*(double))
[	O
i	int
]	O
;	O
s0	*(double)
[	O
i	int
]	O
=	O
(	O
(	O
(	O
tt	double
[	O
1	int
]	O
-	O
tt	double
[	O
0	int
]	O
)	O
*	O
(	O
(	O
yy	*(double)
[	O
0	int
]	O
[	O
i	int
]	O
-	O
yy	*(double)
[	O
2	int
]	O
[	O
i	int
]	O
)	O
/	O
(	O
tt	double
[	O
0	int
]	O
-	O
tt	double
[	O
2	int
]	O
)	O
)	O
+	O
(	O
tt	double
[	O
0	int
]	O
-	O
tt	double
[	O
2	int
]	O
)	O
*	O
(	O
(	O
yy	*(double)
[	O
1	int
]	O
[	O
i	int
]	O
-	O
yy	*(double)
[	O
0	int
]	O
[	O
i	int
]	O
)	O
/	O
(	O
tt	double
[	O
1	int
]	O
-	O
tt	double
[	O
0	int
]	O
)	O
)	O
)	O
/	O
(	O
tt	double
[	O
1	int
]	O
-	O
tt	double
[	O
2	int
]	O
)	O
)	O
;	O
s1	*(double)
[	O
i	int
]	O
=	O
(	O
(	O
(	O
tt	double
[	O
2	int
]	O
-	O
tt	double
[	O
1	int
]	O
)	O
*	O
(	O
(	O
yy	*(double)
[	O
1	int
]	O
[	O
i	int
]	O
-	O
yy	*(double)
[	O
0	int
]	O
[	O
i	int
]	O
)	O
/	O
(	O
tt	double
[	O
1	int
]	O
-	O
tt	double
[	O
0	int
]	O
)	O
)	O
+	O
(	O
tt	double
[	O
1	int
]	O
-	O
tt	double
[	O
0	int
]	O
)	O
*	O
(	O
(	O
yy	*(double)
[	O
2	int
]	O
[	O
i	int
]	O
-	O
yy	*(double)
[	O
1	int
]	O
[	O
i	int
]	O
)	O
/	O
(	O
tt	double
[	O
2	int
]	O
-	O
tt	double
[	O
1	int
]	O
)	O
)	O
)	O
/	O
(	O
tt	double
[	O
2	int
]	O
-	O
tt	double
[	O
0	int
]	O
)	O
)	O
;	O
}	O
do_bessel_range	(double,double,*(double),*(double),*(double),*(double),double,double,double,int,int,enum(int,int),enum(int,int))->(void)
(	O
tt	double
[	O
0	int
]	O
,	O
tt	double
[	O
1	int
]	O
,	O
yy	*(double)
[	O
0	int
]	O
,	O
yy	*(double)
[	O
1	int
]	O
,	O
s0	*(double)
,	O
s1	*(double)
,	O
first_t	double
,	O
last_t	double
,	O
spacing_t	double
,	O
ydimension	int
,	O
precision	int
,	O
false	int
,	O
suppress_abscissa	enum(int,int)
)	O
;	O
state	*(int)
=	O
STATE_THREE	int
;	O
break	O
;	O
case	O
STATE_THREE	int
:	O
tt	double
[	O
3	int
]	O
=	O
t	*(double)
;	O
if	O
(	O
direction	int
*	O
(	O
tt	double
[	O
3	int
]	O
-	O
tt	double
[	O
2	int
]	O
)	O
<=	O
0	int
)	O
non_monotonic_error	()->(void)
(	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ydimension	int
;	O
i	int
++	O
)	O
{	O
yy	*(double)
[	O
3	int
]	O
[	O
i	int
]	O
=	O
y	*(*(double))
[	O
i	int
]	O
;	O
s2	*(double)
[	O
i	int
]	O
=	O
(	O
(	O
(	O
tt	double
[	O
3	int
]	O
-	O
tt	double
[	O
2	int
]	O
)	O
*	O
(	O
(	O
yy	*(double)
[	O
2	int
]	O
[	O
i	int
]	O
-	O
yy	*(double)
[	O
1	int
]	O
[	O
i	int
]	O
)	O
/	O
(	O
tt	double
[	O
2	int
]	O
-	O
tt	double
[	O
1	int
]	O
)	O
)	O
+	O
(	O
tt	double
[	O
2	int
]	O
-	O
tt	double
[	O
1	int
]	O
)	O
*	O
(	O
(	O
yy	*(double)
[	O
3	int
]	O
[	O
i	int
]	O
-	O
yy	*(double)
[	O
2	int
]	O
[	O
i	int
]	O
)	O
/	O
(	O
tt	double
[	O
3	int
]	O
-	O
tt	double
[	O
2	int
]	O
)	O
)	O
)	O
/	O
(	O
tt	double
[	O
3	int
]	O
-	O
tt	double
[	O
1	int
]	O
)	O
)	O
;	O
}	O
do_bessel_range	(double,double,*(double),*(double),*(double),*(double),double,double,double,int,int,enum(int,int),enum(int,int))->(void)
(	O
tt	double
[	O
1	int
]	O
,	O
tt	double
[	O
2	int
]	O
,	O
yy	*(double)
[	O
1	int
]	O
,	O
yy	*(double)
[	O
2	int
]	O
,	O
s1	*(double)
,	O
s2	*(double)
,	O
first_t	double
,	O
last_t	double
,	O
spacing_t	double
,	O
ydimension	int
,	O
precision	int
,	O
false	int
,	O
suppress_abscissa	enum(int,int)
)	O
;	O
tt	double
[	O
0	int
]	O
=	O
tt	double
[	O
1	int
]	O
;	O
tt	double
[	O
1	int
]	O
=	O
tt	double
[	O
2	int
]	O
;	O
tt	double
[	O
2	int
]	O
=	O
tt	double
[	O
3	int
]	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ydimension	int
;	O
i	int
++	O
)	O
{	O
yy	*(double)
[	O
0	int
]	O
[	O
i	int
]	O
=	O
yy	*(double)
[	O
1	int
]	O
[	O
i	int
]	O
;	O
yy	*(double)
[	O
1	int
]	O
[	O
i	int
]	O
=	O
yy	*(double)
[	O
2	int
]	O
[	O
i	int
]	O
;	O
yy	*(double)
[	O
2	int
]	O
[	O
i	int
]	O
=	O
yy	*(double)
[	O
3	int
]	O
[	O
i	int
]	O
;	O
s1	*(double)
[	O
i	int
]	O
=	O
s2	*(double)
[	O
i	int
]	O
;	O
}	O
break	O
;	O
}	O
}	O
else	O
{	O
switch	O
(	O
state	*(int)
)	O
{	O
case	O
STATE_ZERO	int
:	O
break	O
;	O
case	O
STATE_ONE	int
:	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: a spline cannot be constructed from a single data point\n"	*(char)
,	O
progname	*(char)
)	O
;	O
break	O
;	O
case	O
STATE_TWO	int
:	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ydimension	int
;	O
i	int
++	O
)	O
s0	*(double)
[	O
i	int
]	O
=	O
s1	*(double)
[	O
i	int
]	O
=	O
(	O
yy	*(double)
[	O
1	int
]	O
[	O
i	int
]	O
-	O
yy	*(double)
[	O
0	int
]	O
[	O
i	int
]	O
)	O
/	O
(	O
tt	double
[	O
1	int
]	O
-	O
tt	double
[	O
0	int
]	O
)	O
;	O
do_bessel_range	(double,double,*(double),*(double),*(double),*(double),double,double,double,int,int,enum(int,int),enum(int,int))->(void)
(	O
tt	double
[	O
0	int
]	O
,	O
tt	double
[	O
1	int
]	O
,	O
yy	*(double)
[	O
0	int
]	O
,	O
yy	*(double)
[	O
1	int
]	O
,	O
s0	*(double)
,	O
s1	*(double)
,	O
first_t	double
,	O
last_t	double
,	O
spacing_t	double
,	O
ydimension	int
,	O
precision	int
,	O
true	int
,	O
suppress_abscissa	enum(int,int)
)	O
;	O
break	O
;	O
case	O
STATE_THREE	int
:	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ydimension	int
;	O
i	int
++	O
)	O
s2	*(double)
[	O
i	int
]	O
=	O
(	O
(	O
(	O
tt	double
[	O
0	int
]	O
-	O
tt	double
[	O
2	int
]	O
)	O
*	O
(	O
(	O
yy	*(double)
[	O
2	int
]	O
[	O
i	int
]	O
-	O
yy	*(double)
[	O
1	int
]	O
[	O
i	int
]	O
)	O
/	O
(	O
tt	double
[	O
2	int
]	O
-	O
tt	double
[	O
1	int
]	O
)	O
)	O
+	O
(	O
tt	double
[	O
2	int
]	O
-	O
tt	double
[	O
1	int
]	O
)	O
*	O
(	O
(	O
yy	*(double)
[	O
0	int
]	O
[	O
i	int
]	O
-	O
yy	*(double)
[	O
2	int
]	O
[	O
i	int
]	O
)	O
/	O
(	O
tt	double
[	O
0	int
]	O
-	O
tt	double
[	O
2	int
]	O
)	O
)	O
)	O
/	O
(	O
tt	double
[	O
0	int
]	O
-	O
tt	double
[	O
1	int
]	O
)	O
)	O
;	O
do_bessel_range	(double,double,*(double),*(double),*(double),*(double),double,double,double,int,int,enum(int,int),enum(int,int))->(void)
(	O
tt	double
[	O
1	int
]	O
,	O
tt	double
[	O
2	int
]	O
,	O
yy	*(double)
[	O
1	int
]	O
,	O
yy	*(double)
[	O
2	int
]	O
,	O
s1	*(double)
,	O
s2	*(double)
,	O
first_t	double
,	O
last_t	double
,	O
spacing_t	double
,	O
ydimension	int
,	O
precision	int
,	O
true	int
,	O
suppress_abscissa	enum(int,int)
)	O
;	O
break	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4	int
;	O
i	int
++	O
)	O
free	(*(void))->(void)
(	O
yy	*(double)
[	O
i	int
]	O
)	O
;	O
free	(*(void))->(void)
(	O
stored	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
yy	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s2	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s1	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s0	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
y	*(*(double))
)	O
;	O
return	O
(	O
success	enum(int,int)
==	O
2	int
?	O
true	int
:	O
false	int
)	O
;	O
}	O
}	O
}	O
void	O
non_monotonic_error	()->(void)
(	O
void	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: error: the abscissa values are not monotonic\n"	*(char)
,	O
progname	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
void	O
do_bessel_range	(double,double,*(double),*(double),*(double),*(double),double,double,double,int,int,enum(int,int),enum(int,int))->(void)
(	O
double	O
abscissa0	double
,	O
double	O
abscissa1	double
,	O
double	O
*	O
value0	*(double)
,	O
double	O
*	O
value1	*(double)
,	O
double	O
*	O
slope0	*(double)
,	O
double	O
*	O
slope1	*(double)
,	O
double	O
first_t	double
,	O
double	O
last_t	double
,	O
double	O
spacing_t	double
,	O
int	O
ydimension	int
,	O
int	O
precision	int
,	O
bool	enum(int,int)
endit	enum(int,int)
,	O
bool	enum(int,int)
suppress_abscissa	enum(int,int)
)	O
{	O
int	O
direction	int
=	O
(	O
(	O
last_t	double
>	O
first_t	double
)	O
?	O
1	int
:	O
-	O
1	int
)	O
;	O
int	O
i	int
,	O
j	int
;	O
int	O
imin1	int
=	O
(	O
int	O
)	O
(	O
(	O
abscissa0	double
-	O
first_t	double
)	O
/	O
spacing_t	double
-	O
1	int
)	O
;	O
int	O
imax1	int
=	O
(	O
int	O
)	O
(	O
(	O
abscissa1	double
-	O
first_t	double
)	O
/	O
spacing_t	double
+	O
1	int
)	O
;	O
int	O
imin2	int
=	O
0	int
;	O
int	O
imax2	int
=	O
(	O
int	O
)	O
(	O
(	O
last_t	double
-	O
first_t	double
)	O
/	O
spacing_t	double
+	O
1	int
)	O
;	O
int	O
imin	int
,	O
imax	int
;	O
imin	int
=	O
IMAX	O
(	O
imin1	int
,	O
imin2	int
)	O
;	O
imax	int
=	O
IMIN	O
(	O
imax1	int
,	O
imax2	int
)	O
;	O
for	O
(	O
i	int
=	O
imin	int
;	O
i	int
<=	O
imax	int
;	O
i	int
++	O
)	O
{	O
double	O
t	*(double)
;	O
t	*(double)
=	O
first_t	double
+	O
i	int
*	O
spacing_t	double
;	O
if	O
(	O
(	O
direction	int
*	O
t	*(double)
>=	O
direction	int
*	O
abscissa0	double
)	O
&&	O
(	O
direction	int
*	O
t	*(double)
>=	O
direction	int
*	O
first_t	double
)	O
&&	O
(	O
(	O
direction	int
*	O
t	*(double)
<	O
(	O
direction	int
*	O
(	O
abscissa1	double
+	O
(	O
endit	enum(int,int)
?	O
FUZZ	int
*	O
(	O
abscissa1	double
-	O
abscissa0	double
)	O
:	O
0.	int
)	O
)	O
)	O
)	O
)	O
&&	O
(	O
direction	int
*	O
t	*(double)
<=	O
(	O
direction	int
*	O
(	O
last_t	double
+	O
(	O
endit	enum(int,int)
?	O
FUZZ	int
*	O
(	O
last_t	double
-	O
first_t	double
)	O
:	O
0.	int
)	O
)	O
)	O
)	O
)	O
{	O
double	O
diff	double
=	O
t	*(double)
-	O
abscissa0	double
;	O
double	O
updiff	double
=	O
abscissa1	double
-	O
t	*(double)
;	O
double	O
h	*(double)
=	O
abscissa1	double
-	O
abscissa0	double
;	O
double	O
*	O
y	*(*(double))
;	O
bool	enum(int,int)
success	enum(int,int)
;	O
y	*(*(double))
=	O
(	O
double	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
double	O
)	O
*	O
ydimension	int
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
ydimension	int
;	O
j	int
++	O
)	O
{	O
y	*(*(double))
[	O
j	int
]	O
=	O
(	O
value1	*(double)
[	O
j	int
]	O
*	O
(	O
-	O
2.0	int
*	O
diff	double
*	O
diff	double
*	O
diff	double
/	O
(	O
h	*(double)
*	O
h	*(double)
*	O
h	*(double)
)	O
+	O
3.0	int
*	O
diff	double
*	O
diff	double
/	O
(	O
h	*(double)
*	O
h	*(double)
)	O
)	O
+	O
value0	*(double)
[	O
j	int
]	O
*	O
(	O
-	O
2.0	int
*	O
updiff	double
*	O
updiff	double
*	O
updiff	double
/	O
(	O
h	*(double)
*	O
h	*(double)
*	O
h	*(double)
)	O
+	O
3.0	int
*	O
updiff	double
*	O
updiff	double
/	O
(	O
h	*(double)
*	O
h	*(double)
)	O
)	O
)	O
+	O
(	O
(	O
slope1	*(double)
[	O
j	int
]	O
*	O
(	O
diff	double
*	O
diff	double
*	O
diff	double
/	O
(	O
h	*(double)
*	O
h	*(double)
)	O
-	O
diff	double
*	O
diff	double
/	O
h	*(double)
)	O
-	O
(	O
slope0	*(double)
[	O
j	int
]	O
*	O
(	O
updiff	double
*	O
updiff	double
*	O
updiff	double
/	O
(	O
h	*(double)
*	O
h	*(double)
)	O
-	O
updiff	double
*	O
updiff	double
/	O
h	*(double)
)	O
)	O
)	O
)	O
;	O
}	O
success	enum(int,int)
=	O
write_point	(double,*(double),int,int,enum(int,int))->(enum(int,int))
(	O
t	*(double)
,	O
y	*(*(double))
,	O
ydimension	int
,	O
precision	int
,	O
suppress_abscissa	enum(int,int)
)	O
;	O
if	O
(	O
!	O
success	enum(int,int)
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: error: standard output cannot be written to\n"	*(char)
,	O
progname	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
free	(*(void))->(void)
(	O
y	*(*(double))
)	O
;	O
}	O
}	O
}	O
void	O
output_dataset_separator	()->(void)
(	O
void	O
)	O
{	O
double	O
ddummy	double
;	O
float	O
fdummy	float
;	O
int	O
idummy	int
;	O
switch	O
(	O
output_type	enum(int,int,int,int)
)	O
{	O
case	O
T_ASCII	int
:	O
default	O
:	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
break	O
;	O
case	O
T_DOUBLE	int
:	O
ddummy	double
=	O
DBL_MAX	O
;	O
fwrite	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
(	O
void	O
*	O
)	O
&	O
ddummy	double
,	O
sizeof	O
(	O
ddummy	double
)	O
,	O
1	int
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
break	O
;	O
case	O
T_SINGLE	int
:	O
fdummy	float
=	O
FLT_MAX	O
;	O
fwrite	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
(	O
void	O
*	O
)	O
&	O
fdummy	float
,	O
sizeof	O
(	O
fdummy	float
)	O
,	O
1	int
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
break	O
;	O
case	O
T_INTEGER	int
:	O
idummy	int
=	O
INT_MAX	O
;	O
fwrite	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
(	O
void	O
*	O
)	O
&	O
idummy	int
,	O
sizeof	O
(	O
idummy	int
)	O
,	O
1	int
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
break	O
;	O
}	O
}	O
bool	enum(int,int)
skip_whitespace	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(enum(int,int))
(	O
FILE	struct
*	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
int	O
lookahead	int
;	O
int	O
nlcount	int
=	O
0	int
;	O
do	O
{	O
lookahead	int
=	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
lookahead	int
==	O
(	O
int	O
)	O
'\n'	O
)	O
nlcount	int
++	O
;	O
}	O
while	O
(	O
lookahead	int
!=	O
EOF	O
&&	O
isspace	(int)->(int)
(	O
(	O
unsigned	O
char	O
)	O
lookahead	int
)	O
&&	O
nlcount	int
<	O
2	int
)	O
;	O
if	O
(	O
lookahead	int
==	O
EOF	O
)	O
return	O
false	int
;	O
ungetc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
lookahead	int
,	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
return	O
(	O
nlcount	int
==	O
2	int
?	O
true	int
:	O
false	int
)	O
;	O
}	O
void	O
maybe_emit_oob_warning	()->(void)
(	O
void	O
)	O
{	O
static	O
bool	enum(int,int)
warning_written	enum(int,int)
=	O
false	int
;	O
if	O
(	O
!	O
warning_written	enum(int,int)
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: one or more out-of-bounds output values are approximated\n"	*(char)
,	O
progname	*(char)
)	O
;	O
warning_written	enum(int,int)
=	O
true	int
;	O
}	O
}	O
double	O
sinh_func	(double)->(double)
(	O
double	O
x	double
)	O
{	O
return	O
1.0	int
-	O
(	O
7.0	int
/	O
60.0	int
)	O
*	O
x	double
*	O
x	double
+	O
(	O
31.0	int
/	O
2520.0	int
)	O
*	O
x	double
*	O
x	double
*	O
x	double
*	O
x	double
;	O
}	O
double	O
tanh_func	(double)->(double)
(	O
double	O
x	double
)	O
{	O
return	O
1.0	int
-	O
(	O
1.0	int
/	O
15.0	int
)	O
*	O
x	double
*	O
x	double
+	O
(	O
2.0	int
/	O
315.0	int
)	O
*	O
x	double
*	O
x	double
*	O
x	double
*	O
x	double
;	O
}	O
double	O
sin_func	(double)->(double)
(	O
double	O
x	double
)	O
{	O
return	O
-	O
1.0	int
-	O
(	O
7.0	int
/	O
60.0	int
)	O
*	O
x	double
*	O
x	double
-	O
(	O
31.0	int
/	O
2520.0	int
)	O
*	O
x	double
*	O
x	double
*	O
x	double
*	O
x	double
;	O
}	O
double	O
tan_func	(double)->(double)
(	O
double	O
x	double
)	O
{	O
return	O
-	O
1.0	int
-	O
(	O
1.0	int
/	O
15.0	int
)	O
*	O
x	double
*	O
x	double
-	O
(	O
2.0	int
/	O
315.0	int
)	O
*	O
x	double
*	O
x	double
*	O
x	double
*	O
x	double
;	O
}	O
double	O
quotient_sinh_func	(double,double)->(double)
(	O
double	O
x	double
,	O
double	O
y	*(*(double))
)	O
{	O
return	O
(	O
(	O
x	double
*	O
x	double
*	O
x	double
-	O
x	double
)	O
+	O
(	O
x	double
*	O
x	double
*	O
x	double
*	O
x	double
*	O
x	double
/	O
20.0	int
-	O
x	double
*	O
x	double
*	O
x	double
/	O
6.0	int
+	O
7.0	int
*	O
x	double
/	O
60.0	int
)	O
*	O
(	O
y	*(*(double))
*	O
y	*(*(double))
)	O
+	O
(	O
x	double
*	O
x	double
*	O
x	double
*	O
x	double
*	O
x	double
*	O
x	double
*	O
x	double
/	O
840.0	int
-	O
x	double
*	O
x	double
*	O
x	double
*	O
x	double
*	O
x	double
/	O
120.0	int
+	O
7.0	int
*	O
x	double
*	O
x	double
*	O
x	double
/	O
360.0	int
-	O
31.0	int
*	O
x	double
/	O
2520.0	int
)	O
*	O
(	O
y	*(*(double))
*	O
y	*(*(double))
*	O
y	*(*(double))
*	O
y	*(*(double))
)	O
)	O
;	O
}	O
double	O
quotient_sin_func	(double,double)->(double)
(	O
double	O
x	double
,	O
double	O
y	*(*(double))
)	O
{	O
return	O
(	O
-	O
(	O
x	double
*	O
x	double
*	O
x	double
-	O
x	double
)	O
+	O
(	O
x	double
*	O
x	double
*	O
x	double
*	O
x	double
*	O
x	double
/	O
20.0	int
-	O
x	double
*	O
x	double
*	O
x	double
/	O
6.0	int
+	O
7.0	int
*	O
x	double
/	O
60.0	int
)	O
*	O
(	O
y	*(*(double))
*	O
y	*(*(double))
)	O
-	O
(	O
x	double
*	O
x	double
*	O
x	double
*	O
x	double
*	O
x	double
*	O
x	double
*	O
x	double
/	O
840.0	int
-	O
x	double
*	O
x	double
*	O
x	double
*	O
x	double
*	O
x	double
/	O
120.0	int
+	O
7.0	int
*	O
x	double
*	O
x	double
*	O
x	double
/	O
360.0	int
-	O
31.0	int
*	O
x	double
/	O
2520.0	int
)	O
*	O
(	O
y	*(*(double))
*	O
y	*(*(double))
*	O
y	*(*(double))
*	O
y	*(*(double))
)	O
)	O
;	O
}	O
