struct	O
line_list	struct(*(struct(*(struct(*(struct`),long,array(char))),long,array(char))),long,array(char))
{	O
struct	O
line_list	struct(*(struct(*(struct(*(struct`),long,array(char))),long,array(char))),long,array(char))
*	O
next	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
;	O
size_t	long
size	long
;	O
char	O
line	array(char)
[	O
1	int
]	O
;	O
}	O
;	O
struct	O
slist	*(struct)
{	O
struct	O
line_list	struct(*(struct(*(struct(*(struct`),long,array(char))),long,array(char))),long,array(char))
*	O
head	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
,	O
*	O
tail	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
;	O
size_t	long
size	long
;	O
}	O
;	O
struct	O
line_list	struct(*(struct(*(struct(*(struct`),long,array(char))),long,array(char))),long,array(char))
*	O
new_line_seg	(*(char),long)->(*(struct(*(struct(*`,long,array(char))),long,array(char))))
(	O
const	O
char	O
*	O
p	*(char)
,	O
size_t	long
len	long
)	O
{	O
struct	O
line_list	struct(*(struct(*(struct(*(struct`),long,array(char))),long,array(char))),long,array(char))
*	O
lp	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
=	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
lp	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
)	O
+	O
len	long
)	O
;	O
lp	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
->	O
next	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
=	O
NULL	O
;	O
if	O
(	O
p	*(char)
)	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
lp	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
->	O
line	array(char)
,	O
p	*(char)
,	O
len	long
)	O
;	O
lp	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
->	O
size	long
=	O
len	long
;	O
return	O
lp	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
;	O
}	O
void	O
slist_append	(*(struct),*(char),long)->(void)
(	O
slist_t	*(struct)
slist	*(struct)
,	O
const	O
char	O
*	O
p	*(char)
,	O
size_t	long
len	long
)	O
{	O
struct	O
line_list	struct(*(struct(*(struct(*(struct`),long,array(char))),long,array(char))),long,array(char))
*	O
lp	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
=	O
new_line_seg	(*(char),long)->(*(struct(*(struct(*`,long,array(char))),long,array(char))))
(	O
p	*(char)
,	O
len	long
)	O
;	O
LIST_APPEND	O
(	O
lp	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
,	O
slist	*(struct)
->	O
head	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
,	O
slist	*(struct)
->	O
tail	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
)	O
;	O
slist	*(struct)
->	O
size	long
+=	O
len	long
;	O
}	O
char	O
*	O
slist_alloc	(*(struct),long)->(*(char))
(	O
slist_t	*(struct)
slist	*(struct)
,	O
size_t	long
len	long
)	O
{	O
struct	O
line_list	struct(*(struct(*(struct(*(struct`),long,array(char))),long,array(char))),long,array(char))
*	O
lp	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
=	O
new_line_seg	(*(char),long)->(*(struct(*(struct(*`,long,array(char))),long,array(char))))
(	O
NULL	O
,	O
len	long
)	O
;	O
LIST_APPEND	O
(	O
lp	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
,	O
slist	*(struct)
->	O
head	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
,	O
slist	*(struct)
->	O
tail	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
)	O
;	O
slist	*(struct)
->	O
size	long
+=	O
len	long
;	O
return	O
lp	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
->	O
line	array(char)
;	O
}	O
char	O
*	O
slist_reduce	(*(struct),*(*(char)),*(long))->(*(char))
(	O
slist_t	*(struct)
slist	*(struct)
,	O
char	O
*	O
*	O
pbuf	*(*(char))
,	O
size_t	long
*	O
psize	*(long)
)	O
{	O
struct	O
line_list	struct(*(struct(*(struct(*(struct`),long,array(char))),long,array(char))),long,array(char))
*	O
lp	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
;	O
size_t	long
total	long
=	O
slist	*(struct)
->	O
size	long
+	O
1	int
;	O
size_t	long
dummy	long
;	O
char	O
*	O
s	long
;	O
if	O
(	O
!	O
psize	*(long)
)	O
{	O
dummy	long
=	O
0	int
;	O
psize	*(long)
=	O
&	O
dummy	long
;	O
*	O
pbuf	*(*(char))
=	O
NULL	O
;	O
}	O
if	O
(	O
*	O
psize	*(long)
<	O
total	long
)	O
{	O
if	O
(	O
!	O
*	O
pbuf	*(*(char))
)	O
*	O
pbuf	*(*(char))
=	O
xmalloc	(long)->(*(void))
(	O
total	long
)	O
;	O
else	O
*	O
pbuf	*(*(char))
=	O
xrealloc	(*(void),long)->(*(void))
(	O
*	O
pbuf	*(*(char))
,	O
total	long
)	O
;	O
*	O
psize	*(long)
=	O
total	long
;	O
}	O
s	long
=	O
*	O
pbuf	*(*(char))
;	O
for	O
(	O
lp	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
=	O
slist	*(struct)
->	O
head	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
;	O
lp	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
;	O
)	O
{	O
struct	O
line_list	struct(*(struct(*(struct(*(struct`),long,array(char))),long,array(char))),long,array(char))
*	O
next	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
=	O
lp	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
->	O
next	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
s	long
,	O
lp	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
->	O
line	array(char)
,	O
lp	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
->	O
size	long
)	O
;	O
s	long
+=	O
lp	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
->	O
size	long
;	O
free	(*(void))->(void)
(	O
lp	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
)	O
;	O
lp	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
=	O
next	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
;	O
}	O
*	O
s	long
++	O
=	O
0	int
;	O
slist	*(struct)
->	O
head	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
=	O
slist	*(struct)
->	O
tail	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
=	O
NULL	O
;	O
slist	*(struct)
->	O
size	long
=	O
0	int
;	O
return	O
*	O
pbuf	*(*(char))
;	O
}	O
slist_t	*(struct)
slist_create	()->(*(struct))
(	O
)	O
{	O
slist_t	*(struct)
p	*(char)
=	O
xzalloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
p	*(char)
)	O
)	O
;	O
return	O
p	*(char)
;	O
}	O
void	O
slist_free	(*(struct))->(void)
(	O
slist_t	*(struct)
slist	*(struct)
)	O
{	O
struct	O
line_list	struct(*(struct(*(struct(*(struct`),long,array(char))),long,array(char))),long,array(char))
*	O
lp	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
;	O
for	O
(	O
lp	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
=	O
slist	*(struct)
->	O
head	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
;	O
lp	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
;	O
)	O
{	O
struct	O
line_list	struct(*(struct(*(struct(*(struct`),long,array(char))),long,array(char))),long,array(char))
*	O
next	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
=	O
lp	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
->	O
next	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
;	O
free	(*(void))->(void)
(	O
lp	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
)	O
;	O
lp	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
=	O
next	*(struct(*(struct(*(struct`),long,array(char))),long,array(char)))
;	O
}	O
free	(*(void))->(void)
(	O
slist	*(struct)
)	O
;	O
}	O
