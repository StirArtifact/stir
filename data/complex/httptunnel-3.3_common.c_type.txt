void	O
log_exit	(int)->(void)
(	O
int	O
status	int
)	O
{	O
log_notice	(*(char))->(void)
(	O
"exit with status = %d"	*(char)
,	O
status	int
)	O
;	O
exit	(int)->(void)
(	O
status	int
)	O
;	O
}	O
void	O
log_notice	(*(char))->(void)
(	O
char	O
*	O
fmt0	*(char)
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
ap	array(struct(int,int,*(void),*(void)))
;	O
va_start	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
fmt0	*(char)
)	O
;	O
vsyslog	(int,*(char),array(struct(int,int,*(void),*(void))))->(void)
(	O
LOG_NOTICE	int
,	O
fmt0	*(char)
,	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
va_end	O
(	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
}	O
void	O
log_error	(*(char))->(void)
(	O
char	O
*	O
fmt0	*(char)
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
ap	array(struct(int,int,*(void),*(void)))
;	O
va_start	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
fmt0	*(char)
)	O
;	O
vsyslog	(int,*(char),array(struct(int,int,*(void),*(void))))->(void)
(	O
LOG_ERROR	O
,	O
fmt0	*(char)
,	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
va_end	O
(	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
}	O
int	O
server_socket	(struct(int),int,int)->(int)
(	O
struct	O
in_addr	struct(int)
addr	struct(int)
,	O
int	O
port	int
,	O
int	O
backlog	int
)	O
{	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
address	*(struct(short,short,struct(int),array(char)))
;	O
int	O
i	int
,	O
s	int
;	O
s	int
=	O
socket	(int,int,int)->(int)
(	O
PF_INET	int
,	O
SOCK_STREAM	int
,	O
0	int
)	O
;	O
if	O
(	O
s	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
i	int
=	O
1	int
;	O
if	O
(	O
setsockopt	(int,int,int,*(void),int)->(int)
(	O
s	int
,	O
SOL_SOCKET	int
,	O
SO_REUSEADDR	int
,	O
(	O
void	O
*	O
)	O
&	O
i	int
,	O
sizeof	O
i	int
)	O
==	O
-	O
1	int
)	O
{	O
log_error	(*(char))->(void)
(	O
"server_socket: setsockopt SO_REUSEADDR: %s"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
}	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
address	*(struct(short,short,struct(int),array(char)))
,	O
'\0'	O
,	O
sizeof	O
address	*(struct(short,short,struct(int),array(char)))
)	O
;	O
address	*(struct(short,short,struct(int),array(char)))
.	O
sin_family	short
=	O
PF_INET	int
;	O
address	*(struct(short,short,struct(int),array(char)))
.	O
sin_port	short
=	O
htons	(short)->(short)
(	O
(	O
short	O
)	O
port	int
)	O
;	O
address	*(struct(short,short,struct(int),array(char)))
.	O
sin_addr	struct(int)
=	O
addr	struct(int)
;	O
if	O
(	O
bind	(int,*(struct(short,array(char))),int)->(int)
(	O
s	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
address	*(struct(short,short,struct(int),array(char)))
,	O
sizeof	O
(	O
address	*(struct(short,short,struct(int),array(char)))
)	O
)	O
==	O
-	O
1	int
)	O
{	O
close	(int)->(int)
(	O
s	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
listen	(int,int)->(int)
(	O
s	int
,	O
(	O
unsigned	O
)	O
backlog	int
)	O
==	O
-	O
1	int
)	O
{	O
close	(int)->(int)
(	O
s	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
s	int
;	O
}	O
int	O
set_address	(*(struct(short,short,struct(int),array(char))),*(char),int)->(int)
(	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
*	O
address	*(struct(short,short,struct(int),array(char)))
,	O
const	O
char	O
*	O
host	*(char)
,	O
int	O
port	int
)	O
{	O
memset	(*(void),int,long)->(*(void))
(	O
address	*(struct(short,short,struct(int),array(char)))
,	O
'\0'	O
,	O
sizeof	O
*	O
address	*(struct(short,short,struct(int),array(char)))
)	O
;	O
address	*(struct(short,short,struct(int),array(char)))
->	O
sin_family	short
=	O
PF_INET	int
;	O
address	*(struct(short,short,struct(int),array(char)))
->	O
sin_port	short
=	O
htons	(short)->(short)
(	O
(	O
u_short	short
)	O
port	int
)	O
;	O
address	*(struct(short,short,struct(int),array(char)))
->	O
sin_addr	struct(int)
.	O
s_addr	int
=	O
inet_addr	(*(char))->(int)
(	O
host	*(char)
)	O
;	O
if	O
(	O
address	*(struct(short,short,struct(int),array(char)))
->	O
sin_addr	struct(int)
.	O
s_addr	int
==	O
INADDR_NONE	O
)	O
{	O
struct	O
hostent	struct(*(char),*(*(char)),int,int,*(*(char)))
*	O
ent	*(struct(*(char),*(*(char)),int,int,*(*(char))))
;	O
unsigned	O
int	O
ip	int
;	O
log_annoying	()->(void)
(	O
"set_address: gethostbyname (\"%s\")"	*(char)
,	O
host	*(char)
)	O
;	O
ent	*(struct(*(char),*(*(char)),int,int,*(*(char))))
=	O
gethostbyname	(*(char))->(*(struct(*(char),*(*(char)),int,int,*(*(char)))))
(	O
host	*(char)
)	O
;	O
log_annoying	()->(void)
(	O
"set_address: ent = %p"	*(char)
,	O
ent	*(struct(*(char),*(*(char)),int,int,*(*(char))))
)	O
;	O
if	O
(	O
ent	*(struct(*(char),*(*(char)),int,int,*(*(char))))
==	O
0	int
)	O
return	O
-	O
1	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
&	O
address	*(struct(short,short,struct(int),array(char)))
->	O
sin_addr	struct(int)
.	O
s_addr	int
,	O
ent	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_addr	O
,	O
(	O
unsigned	O
)	O
ent	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_length	int
)	O
;	O
ip	int
=	O
ntohl	(int)->(int)
(	O
address	*(struct(short,short,struct(int),array(char)))
->	O
sin_addr	struct(int)
.	O
s_addr	int
)	O
;	O
log_annoying	()->(void)
(	O
"set_address: host = %d.%d.%d.%d"	*(char)
,	O
ntohl	(int)->(int)
(	O
ip	int
)	O
>>	O
24	int
,	O
(	O
ntohl	(int)->(int)
(	O
ip	int
)	O
>>	O
16	int
)	O
&	O
0xff	int
,	O
(	O
ntohl	(int)->(int)
(	O
ip	int
)	O
>>	O
8	int
)	O
&	O
0xff	int
,	O
ntohl	(int)->(int)
(	O
ip	int
)	O
&	O
0xff	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
open_device	(*(char))->(int)
(	O
char	O
*	O
device	*(char)
)	O
{	O
struct	O
termios	struct(int,int,int,int,char,array(char),int,int)
t	struct(int,int,int,int,char,array(char),int,int)
;	O
int	O
fd	int
;	O
fd	int
=	O
open	(*(char),int)->(int)
(	O
device	*(char)
,	O
O_RDWR	int
|	O
O_NONBLOCK	int
)	O
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
tcgetattr	(int,*(struct(int,int,int,int,char,array(char),int,int)))->(int)
(	O
fd	int
,	O
&	O
t	struct(int,int,int,int,char,array(char),int,int)
)	O
==	O
-	O
1	int
)	O
{	O
if	O
(	O
errno	O
==	O
ENOTTY	int
||	O
errno	O
==	O
EINVAL	int
)	O
return	O
fd	int
;	O
else	O
return	O
-	O
1	int
;	O
}	O
t	struct(int,int,int,int,char,array(char),int,int)
.	O
c_iflag	int
=	O
0	int
;	O
t	struct(int,int,int,int,char,array(char),int,int)
.	O
c_oflag	int
=	O
0	int
;	O
t	struct(int,int,int,int,char,array(char),int,int)
.	O
c_lflag	int
=	O
0	int
;	O
if	O
(	O
tcsetattr	(int,int,*(struct(int,int,int,int,char,array(char),int,int)))->(int)
(	O
fd	int
,	O
TCSANOW	int
,	O
&	O
t	struct(int,int,int,int,char,array(char),int,int)
)	O
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
return	O
fd	int
;	O
}	O
int	O
handle_device_input	(*(struct),int,int)->(int)
(	O
Tunnel	struct
*	O
tunnel	*(struct)
,	O
int	O
fd	int
,	O
int	O
events	short
)	O
{	O
unsigned	O
char	O
buf	*(char)
[	O
10240	int
]	O
;	O
ssize_t	long
n	long
,	O
m	long
;	O
if	O
(	O
events	short
&	O
POLLIN	int
)	O
{	O
n	long
=	O
read	(int,*(void),long)->(long)
(	O
fd	int
,	O
buf	*(char)
,	O
sizeof	O
buf	*(char)
)	O
;	O
if	O
(	O
n	long
==	O
0	int
||	O
n	long
==	O
-	O
1	int
)	O
{	O
if	O
(	O
n	long
==	O
-	O
1	int
&&	O
errno	O
!=	O
EAGAIN	int
)	O
log_error	(*(char))->(void)
(	O
"handle_device_input: read() error: %s"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
return	O
n	long
;	O
}	O
m	long
=	O
tunnel_write	(*(struct),*(void),long)->(long)
(	O
tunnel	*(struct)
,	O
buf	*(char)
,	O
(	O
size_t	long
)	O
n	long
)	O
;	O
log_annoying	()->(void)
(	O
"tunnel_write (%p, %p, %d) = %d"	*(char)
,	O
tunnel	*(struct)
,	O
buf	*(char)
,	O
n	long
,	O
m	long
)	O
;	O
return	O
m	long
;	O
}	O
else	O
if	O
(	O
events	short
&	O
POLLHUP	int
)	O
{	O
log_error	(*(char))->(void)
(	O
"handle_device_input: POLLHUP"	*(char)
)	O
;	O
sleep	(int)->(int)
(	O
5	int
)	O
;	O
}	O
else	O
if	O
(	O
events	short
&	O
POLLERR	int
)	O
log_error	(*(char))->(void)
(	O
"handle_device_input: POLLERR"	*(char)
)	O
;	O
else	O
if	O
(	O
events	short
&	O
POLLNVAL	int
)	O
log_error	(*(char))->(void)
(	O
"handle_device_input: POLLINVAL"	*(char)
)	O
;	O
else	O
log_error	(*(char))->(void)
(	O
"handle_device_input: none of the above"	*(char)
)	O
;	O
errno	O
=	O
EIO	int
;	O
return	O
-	O
1	int
;	O
}	O
int	O
handle_tunnel_input	(*(struct),int,int)->(int)
(	O
Tunnel	struct
*	O
tunnel	*(struct)
,	O
int	O
fd	int
,	O
int	O
events	short
)	O
{	O
unsigned	O
char	O
buf	*(char)
[	O
10240	int
]	O
;	O
ssize_t	long
n	long
,	O
m	long
;	O
if	O
(	O
events	short
&	O
POLLIN	int
)	O
{	O
n	long
=	O
tunnel_read	(*(struct),*(void),long)->(long)
(	O
tunnel	*(struct)
,	O
buf	*(char)
,	O
sizeof	O
buf	*(char)
)	O
;	O
if	O
(	O
n	long
<=	O
0	int
)	O
{	O
log_annoying	()->(void)
(	O
"handle_tunnel_input: tunnel_read() = %d\n"	*(char)
,	O
n	long
)	O
;	O
if	O
(	O
n	long
==	O
-	O
1	int
&&	O
errno	O
!=	O
EAGAIN	int
)	O
log_error	(*(char))->(void)
(	O
"handle_tunnel_input: tunnel_read() error: %s"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
return	O
n	long
;	O
}	O
m	long
=	O
write_all	(int,*(void),long)->(long)
(	O
fd	int
?	O
fd	int
:	O
0	int
,	O
buf	*(char)
,	O
(	O
size_t	long
)	O
n	long
)	O
;	O
log_annoying	()->(void)
(	O
"write_all (%d, %p, %d) = %d"	*(char)
,	O
fd	int
?	O
fd	int
:	O
1	int
,	O
buf	*(char)
,	O
n	long
,	O
m	long
)	O
;	O
return	O
m	long
;	O
}	O
else	O
if	O
(	O
events	short
&	O
POLLHUP	int
)	O
log_error	(*(char))->(void)
(	O
"handle_device_input: POLLHUP"	*(char)
)	O
;	O
else	O
if	O
(	O
events	short
&	O
POLLERR	int
)	O
log_error	(*(char))->(void)
(	O
"handle_device_input: PULLERR"	*(char)
)	O
;	O
else	O
if	O
(	O
events	short
&	O
POLLNVAL	int
)	O
log_error	(*(char))->(void)
(	O
"handle_device_input: PULLINVAL"	*(char)
)	O
;	O
else	O
log_error	(*(char))->(void)
(	O
"handle_device_input: none of the above"	*(char)
)	O
;	O
errno	O
=	O
EIO	int
;	O
return	O
-	O
1	int
;	O
}	O
void	O
name_and_port	(*(char),*(*(char)),*(int))->(void)
(	O
const	O
char	O
*	O
nameport	*(char)
,	O
char	O
*	O
*	O
name	*(char)
,	O
int	O
*	O
port	int
)	O
{	O
char	O
*	O
p	*(char)
;	O
*	O
name	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
nameport	*(char)
)	O
;	O
if	O
(	O
*	O
name	*(char)
==	O
NULL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Out of memory\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
p	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
*	O
name	*(char)
,	O
':'	O
)	O
;	O
if	O
(	O
p	*(char)
!=	O
NULL	O
)	O
{	O
*	O
port	int
=	O
atoi	(*(char))->(int)
(	O
p	*(char)
+	O
1	int
)	O
;	O
*	O
p	*(char)
=	O
'\0'	O
;	O
}	O
}	O
int	O
atoi_with_postfix	(*(char))->(int)
(	O
const	O
char	O
*	O
s_	*(char)
)	O
{	O
char	O
*	O
s	int
=	O
strdup	(*(char))->(*(char))
(	O
s_	*(char)
)	O
;	O
int	O
n	long
=	O
strlen	(*(char))->(long)
(	O
s	int
)	O
;	O
int	O
factor	int
=	O
1	int
;	O
int	O
x	int
;	O
if	O
(	O
s	int
==	O
NULL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Out of memory\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
switch	O
(	O
s	int
[	O
n	long
-	O
1	int
]	O
)	O
{	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
break	O
;	O
case	O
'k'	O
:	O
case	O
'K'	O
:	O
factor	int
=	O
1024	int
;	O
break	O
;	O
case	O
'M'	O
:	O
factor	int
=	O
1024	int
*	O
1024	int
;	O
break	O
;	O
case	O
'G'	O
:	O
factor	int
=	O
1024	int
*	O
1024	int
*	O
1024	int
;	O
break	O
;	O
default	O
:	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Unknown postfix: %c\n"	*(char)
,	O
s	int
[	O
n	long
-	O
1	int
]	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
factor	int
!=	O
1	int
)	O
s	int
[	O
n	long
-	O
1	int
]	O
=	O
'\0'	O
;	O
x	int
=	O
factor	int
*	O
atoi	(*(char))->(int)
(	O
s	int
)	O
;	O
free	(*(void))->(void)
(	O
s	int
)	O
;	O
return	O
x	int
;	O
}	O
