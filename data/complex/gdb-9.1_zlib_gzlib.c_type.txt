local	O
void	O
gz_reset	(*(struct(struct(int,*(char),long),int,int,*(char),int,int,*(char),*(char),int,int,long,int,int,int,int,long,int,int,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct`),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long))))->(void)
OF	O
(	O
(	O
gz_statep	*(struct(struct(int,*(char),long),int,int,*(char),int,int,*(char),*(char),int,int,long,int,int,int,int,long,int,int,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))
)	O
)	O
;	O
local	O
gzFile	*(struct)
gz_open	(*(void),int,*(char))->(*(struct(int,*(char),long)))
OF	O
(	O
(	O
const	O
void	O
*	O
,	O
int	O
,	O
const	O
char	O
*	O
)	O
)	O
;	O
local	O
void	O
gz_reset	(*(struct(struct(int,*(char),long),int,int,*(char),int,int,*(char),*(char),int,int,long,int,int,int,int,long,int,int,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct`),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long))))->(void)
(	O
state	*(struct)
)	O
gz_statep	*(struct(struct(int,*(char),long),int,int,*(char),int,int,*(char),*(char),int,int,long,int,int,int,int,long,int,int,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))
state	*(struct)
;	O
{	O
state	*(struct)
->	O
x	struct(int,*(char),long)
.	O
have	int
=	O
0	int
;	O
if	O
(	O
state	*(struct)
->	O
mode	*(char)
==	O
GZ_READ	int
)	O
{	O
state	*(struct)
->	O
eof	int
=	O
0	int
;	O
state	*(struct)
->	O
past	int
=	O
0	int
;	O
state	*(struct)
->	O
how	int
=	O
LOOK	int
;	O
}	O
state	*(struct)
->	O
seek	int
=	O
0	int
;	O
gz_error	(*(struct(struct(int,*(char),long),int,int,*(char),int,int,*(char),*(char),int,int,long,int,int,int,int,long,int,int,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct`),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long))),int,*(char))->(void)
(	O
state	*(struct)
,	O
Z_OK	int
,	O
NULL	O
)	O
;	O
state	*(struct)
->	O
x	struct(int,*(char),long)
.	O
pos	long
=	O
0	int
;	O
state	*(struct)
->	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
.	O
avail_in	int
=	O
0	int
;	O
}	O
local	O
gzFile	*(struct)
gz_open	(*(void),int,*(char))->(*(struct(int,*(char),long)))
(	O
path	*(char)
,	O
fd	int
,	O
mode	*(char)
)	O
const	O
void	O
*	O
path	*(char)
;	O
int	O
fd	int
;	O
const	O
char	O
*	O
mode	*(char)
;	O
{	O
gz_statep	*(struct(struct(int,*(char),long),int,int,*(char),int,int,*(char),*(char),int,int,long,int,int,int,int,long,int,int,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))
state	*(struct)
;	O
z_size_t	long
len	int
;	O
int	O
oflag	int
;	O
int	O
cloexec	int
=	O
0	int
;	O
int	O
exclusive	int
=	O
0	int
;	O
if	O
(	O
path	*(char)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
state	*(struct)
=	O
(	O
gz_statep	*(struct(struct(int,*(char),long),int,int,*(char),int,int,*(char),*(char),int,int,long,int,int,int,int,long,int,int,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
gz_state	struct(struct(int,*(char),long),int,int,*(char),int,int,*(char),*(char),int,int,long,int,int,int,int,long,int,int,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
)	O
)	O
;	O
if	O
(	O
state	*(struct)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
state	*(struct)
->	O
size	int
=	O
0	int
;	O
state	*(struct)
->	O
want	int
=	O
GZBUFSIZE	int
;	O
state	*(struct)
->	O
msg	*(char)
=	O
NULL	O
;	O
state	*(struct)
->	O
mode	*(char)
=	O
GZ_NONE	int
;	O
state	*(struct)
->	O
level	int
=	O
Z_DEFAULT_COMPRESSION	O
;	O
state	*(struct)
->	O
strategy	int
=	O
Z_DEFAULT_STRATEGY	int
;	O
state	*(struct)
->	O
direct	int
=	O
0	int
;	O
while	O
(	O
*	O
mode	*(char)
)	O
{	O
if	O
(	O
*	O
mode	*(char)
>=	O
'0'	O
&&	O
*	O
mode	*(char)
<=	O
'9'	O
)	O
state	*(struct)
->	O
level	int
=	O
*	O
mode	*(char)
-	O
'0'	O
;	O
else	O
switch	O
(	O
*	O
mode	*(char)
)	O
{	O
case	O
'r'	O
:	O
state	*(struct)
->	O
mode	*(char)
=	O
GZ_READ	int
;	O
break	O
;	O
case	O
'w'	O
:	O
state	*(struct)
->	O
mode	*(char)
=	O
GZ_WRITE	int
;	O
break	O
;	O
case	O
'a'	O
:	O
state	*(struct)
->	O
mode	*(char)
=	O
GZ_APPEND	int
;	O
break	O
;	O
case	O
'+'	O
:	O
free	(*(void))->(void)
(	O
state	*(struct)
)	O
;	O
return	O
NULL	O
;	O
case	O
'b'	O
:	O
break	O
;	O
case	O
'e'	O
:	O
cloexec	int
=	O
1	int
;	O
break	O
;	O
case	O
'x'	O
:	O
exclusive	int
=	O
1	int
;	O
break	O
;	O
case	O
'f'	O
:	O
state	*(struct)
->	O
strategy	int
=	O
Z_FILTERED	int
;	O
break	O
;	O
case	O
'h'	O
:	O
state	*(struct)
->	O
strategy	int
=	O
Z_HUFFMAN_ONLY	int
;	O
break	O
;	O
case	O
'R'	O
:	O
state	*(struct)
->	O
strategy	int
=	O
Z_RLE	int
;	O
break	O
;	O
case	O
'F'	O
:	O
state	*(struct)
->	O
strategy	int
=	O
Z_FIXED	int
;	O
break	O
;	O
case	O
'T'	O
:	O
state	*(struct)
->	O
direct	int
=	O
1	int
;	O
break	O
;	O
default	O
:	O
;	O
}	O
mode	*(char)
++	O
;	O
}	O
if	O
(	O
state	*(struct)
->	O
mode	*(char)
==	O
GZ_NONE	int
)	O
{	O
free	(*(void))->(void)
(	O
state	*(struct)
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
state	*(struct)
->	O
mode	*(char)
==	O
GZ_READ	int
)	O
{	O
if	O
(	O
state	*(struct)
->	O
direct	int
)	O
{	O
free	(*(void))->(void)
(	O
state	*(struct)
)	O
;	O
return	O
NULL	O
;	O
}	O
state	*(struct)
->	O
direct	int
=	O
1	int
;	O
}	O
len	int
=	O
strlen	(*(char))->(long)
(	O
(	O
const	O
char	O
*	O
)	O
path	*(char)
)	O
;	O
state	*(struct)
->	O
path	*(char)
=	O
(	O
char	O
*	O
)	O
malloc	(long)->(*(void))
(	O
len	int
+	O
1	int
)	O
;	O
if	O
(	O
state	*(struct)
->	O
path	*(char)
==	O
NULL	O
)	O
{	O
free	(*(void))->(void)
(	O
state	*(struct)
)	O
;	O
return	O
NULL	O
;	O
}	O
(	O
void	O
)	O
snprintf	(*(char),long,*(char))->(int)
(	O
state	*(struct)
->	O
path	*(char)
,	O
len	int
+	O
1	int
,	O
"%s"	*(char)
,	O
(	O
const	O
char	O
*	O
)	O
path	*(char)
)	O
;	O
oflag	int
=	O
(	O
cloexec	int
?	O
O_CLOEXEC	O
:	O
0	int
)	O
|	O
(	O
state	*(struct)
->	O
mode	*(char)
==	O
GZ_READ	int
?	O
O_RDONLY	int
:	O
(	O
O_WRONLY	int
|	O
O_CREAT	int
|	O
(	O
exclusive	int
?	O
O_EXCL	int
:	O
0	int
)	O
|	O
(	O
state	*(struct)
->	O
mode	*(char)
==	O
GZ_WRITE	int
?	O
O_TRUNC	int
:	O
O_APPEND	int
)	O
)	O
)	O
;	O
state	*(struct)
->	O
fd	int
=	O
fd	int
>	O
-	O
1	int
?	O
fd	int
:	O
(	O
open	(*(char),int)->(int)
(	O
(	O
const	O
char	O
*	O
)	O
path	*(char)
,	O
oflag	int
,	O
0666	int
)	O
)	O
;	O
if	O
(	O
state	*(struct)
->	O
fd	int
==	O
-	O
1	int
)	O
{	O
free	(*(void))->(void)
(	O
state	*(struct)
->	O
path	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(struct)
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
state	*(struct)
->	O
mode	*(char)
==	O
GZ_APPEND	int
)	O
{	O
LSEEK	O
(	O
state	*(struct)
->	O
fd	int
,	O
0	int
,	O
SEEK_END	int
)	O
;	O
state	*(struct)
->	O
mode	*(char)
=	O
GZ_WRITE	int
;	O
}	O
if	O
(	O
state	*(struct)
->	O
mode	*(char)
==	O
GZ_READ	int
)	O
{	O
state	*(struct)
->	O
start	long
=	O
LSEEK	O
(	O
state	*(struct)
->	O
fd	int
,	O
0	int
,	O
SEEK_CUR	int
)	O
;	O
if	O
(	O
state	*(struct)
->	O
start	long
==	O
-	O
1	int
)	O
state	*(struct)
->	O
start	long
=	O
0	int
;	O
}	O
gz_reset	(*(struct(struct(int,*(char),long),int,int,*(char),int,int,*(char),*(char),int,int,long,int,int,int,int,long,int,int,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct`),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long))))->(void)
(	O
state	*(struct)
)	O
;	O
return	O
(	O
gzFile	*(struct)
)	O
state	*(struct)
;	O
}	O
gzFile	*(struct)
ZEXPORT	O
gzopen	(*(char),*(char))->(*(struct(int,*(char),long)))
(	O
path	*(char)
,	O
mode	*(char)
)	O
const	O
char	O
*	O
path	*(char)
;	O
const	O
char	O
*	O
mode	*(char)
;	O
{	O
return	O
gz_open	(*(void),int,*(char))->(*(struct(int,*(char),long)))
(	O
path	*(char)
,	O
-	O
1	int
,	O
mode	*(char)
)	O
;	O
}	O
gzFile	*(struct)
ZEXPORT	O
gzopen64	(*(char),*(char))->(*(struct(int,*(char),long)))
(	O
path	*(char)
,	O
mode	*(char)
)	O
const	O
char	O
*	O
path	*(char)
;	O
const	O
char	O
*	O
mode	*(char)
;	O
{	O
return	O
gz_open	(*(void),int,*(char))->(*(struct(int,*(char),long)))
(	O
path	*(char)
,	O
-	O
1	int
,	O
mode	*(char)
)	O
;	O
}	O
gzFile	*(struct)
ZEXPORT	O
gzdopen	(int,*(char))->(*(struct))
(	O
fd	int
,	O
mode	*(char)
)	O
int	O
fd	int
;	O
const	O
char	O
*	O
mode	*(char)
;	O
{	O
char	O
*	O
path	*(char)
;	O
gzFile	*(struct)
gz	*(struct(int,*(char),long))
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
||	O
(	O
path	*(char)
=	O
(	O
char	O
*	O
)	O
malloc	(long)->(*(void))
(	O
7	int
+	O
3	int
*	O
sizeof	O
(	O
int	O
)	O
)	O
)	O
==	O
NULL	O
)	O
return	O
NULL	O
;	O
(	O
void	O
)	O
snprintf	(*(char),long,*(char))->(int)
(	O
path	*(char)
,	O
7	int
+	O
3	int
*	O
sizeof	O
(	O
int	O
)	O
,	O
"<fd:%d>"	*(char)
,	O
fd	int
)	O
;	O
gz	*(struct(int,*(char),long))
=	O
gz_open	(*(void),int,*(char))->(*(struct(int,*(char),long)))
(	O
path	*(char)
,	O
fd	int
,	O
mode	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
path	*(char)
)	O
;	O
return	O
gz	*(struct(int,*(char),long))
;	O
}	O
int	O
ZEXPORT	O
gzbuffer	(*(struct),int)->(int)
(	O
file	*(struct)
,	O
size	int
)	O
gzFile	*(struct)
file	*(struct)
;	O
unsigned	O
size	int
;	O
{	O
gz_statep	*(struct(struct(int,*(char),long),int,int,*(char),int,int,*(char),*(char),int,int,long,int,int,int,int,long,int,int,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))
state	*(struct)
;	O
if	O
(	O
file	*(struct)
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
state	*(struct)
=	O
(	O
gz_statep	*(struct(struct(int,*(char),long),int,int,*(char),int,int,*(char),*(char),int,int,long,int,int,int,int,long,int,int,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))
)	O
file	*(struct)
;	O
if	O
(	O
state	*(struct)
->	O
mode	*(char)
!=	O
GZ_READ	int
&&	O
state	*(struct)
->	O
mode	*(char)
!=	O
GZ_WRITE	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
state	*(struct)
->	O
size	int
!=	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
size	int
<<	O
1	int
)	O
<	O
size	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
size	int
<	O
2	int
)	O
size	int
=	O
2	int
;	O
state	*(struct)
->	O
want	int
=	O
size	int
;	O
return	O
0	int
;	O
}	O
int	O
ZEXPORT	O
gzrewind	(*(struct))->(int)
(	O
file	*(struct)
)	O
gzFile	*(struct)
file	*(struct)
;	O
{	O
gz_statep	*(struct(struct(int,*(char),long),int,int,*(char),int,int,*(char),*(char),int,int,long,int,int,int,int,long,int,int,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))
state	*(struct)
;	O
if	O
(	O
file	*(struct)
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
state	*(struct)
=	O
(	O
gz_statep	*(struct(struct(int,*(char),long),int,int,*(char),int,int,*(char),*(char),int,int,long,int,int,int,int,long,int,int,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))
)	O
file	*(struct)
;	O
if	O
(	O
state	*(struct)
->	O
mode	*(char)
!=	O
GZ_READ	int
||	O
(	O
state	*(struct)
->	O
err	int
!=	O
Z_OK	int
&&	O
state	*(struct)
->	O
err	int
!=	O
Z_BUF_ERROR	O
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
LSEEK	O
(	O
state	*(struct)
->	O
fd	int
,	O
state	*(struct)
->	O
start	long
,	O
SEEK_SET	int
)	O
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
gz_reset	(*(struct(struct(int,*(char),long),int,int,*(char),int,int,*(char),*(char),int,int,long,int,int,int,int,long,int,int,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct`),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long))))->(void)
(	O
state	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
z_off64_t	O
ZEXPORT	O
gzseek64	(*(struct(int,*(char),long)),long,int)->(long)
(	O
file	*(struct)
,	O
offset	long
,	O
whence	int
)	O
gzFile	*(struct)
file	*(struct)
;	O
z_off64_t	O
offset	long
;	O
int	O
whence	int
;	O
{	O
unsigned	O
n	int
;	O
z_off64_t	O
ret	long
;	O
gz_statep	*(struct(struct(int,*(char),long),int,int,*(char),int,int,*(char),*(char),int,int,long,int,int,int,int,long,int,int,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))
state	*(struct)
;	O
if	O
(	O
file	*(struct)
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
state	*(struct)
=	O
(	O
gz_statep	*(struct(struct(int,*(char),long),int,int,*(char),int,int,*(char),*(char),int,int,long,int,int,int,int,long,int,int,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))
)	O
file	*(struct)
;	O
if	O
(	O
state	*(struct)
->	O
mode	*(char)
!=	O
GZ_READ	int
&&	O
state	*(struct)
->	O
mode	*(char)
!=	O
GZ_WRITE	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
state	*(struct)
->	O
err	int
!=	O
Z_OK	int
&&	O
state	*(struct)
->	O
err	int
!=	O
Z_BUF_ERROR	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
whence	int
!=	O
SEEK_SET	int
&&	O
whence	int
!=	O
SEEK_CUR	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
whence	int
==	O
SEEK_SET	int
)	O
offset	long
-=	O
state	*(struct)
->	O
x	struct(int,*(char),long)
.	O
pos	long
;	O
else	O
if	O
(	O
state	*(struct)
->	O
seek	int
)	O
offset	long
+=	O
state	*(struct)
->	O
skip	long
;	O
state	*(struct)
->	O
seek	int
=	O
0	int
;	O
if	O
(	O
state	*(struct)
->	O
mode	*(char)
==	O
GZ_READ	int
&&	O
state	*(struct)
->	O
how	int
==	O
COPY	int
&&	O
state	*(struct)
->	O
x	struct(int,*(char),long)
.	O
pos	long
+	O
offset	long
>=	O
0	int
)	O
{	O
ret	long
=	O
LSEEK	O
(	O
state	*(struct)
->	O
fd	int
,	O
offset	long
-	O
state	*(struct)
->	O
x	struct(int,*(char),long)
.	O
have	int
,	O
SEEK_CUR	int
)	O
;	O
if	O
(	O
ret	long
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
state	*(struct)
->	O
x	struct(int,*(char),long)
.	O
have	int
=	O
0	int
;	O
state	*(struct)
->	O
eof	int
=	O
0	int
;	O
state	*(struct)
->	O
past	int
=	O
0	int
;	O
state	*(struct)
->	O
seek	int
=	O
0	int
;	O
gz_error	(*(struct(struct(int,*(char),long),int,int,*(char),int,int,*(char),*(char),int,int,long,int,int,int,int,long,int,int,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct`),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long))),int,*(char))->(void)
(	O
state	*(struct)
,	O
Z_OK	int
,	O
NULL	O
)	O
;	O
state	*(struct)
->	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
.	O
avail_in	int
=	O
0	int
;	O
state	*(struct)
->	O
x	struct(int,*(char),long)
.	O
pos	long
+=	O
offset	long
;	O
return	O
state	*(struct)
->	O
x	struct(int,*(char),long)
.	O
pos	long
;	O
}	O
if	O
(	O
offset	long
<	O
0	int
)	O
{	O
if	O
(	O
state	*(struct)
->	O
mode	*(char)
!=	O
GZ_READ	int
)	O
return	O
-	O
1	int
;	O
offset	long
+=	O
state	*(struct)
->	O
x	struct(int,*(char),long)
.	O
pos	long
;	O
if	O
(	O
offset	long
<	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
gzrewind	(*(struct))->(int)
(	O
file	*(struct)
)	O
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
state	*(struct)
->	O
mode	*(char)
==	O
GZ_READ	int
)	O
{	O
n	int
=	O
GT_OFF	O
(	O
state	*(struct)
->	O
x	struct(int,*(char),long)
.	O
have	int
)	O
||	O
(	O
z_off64_t	O
)	O
state	*(struct)
->	O
x	struct(int,*(char),long)
.	O
have	int
>	O
offset	long
?	O
(	O
unsigned	O
)	O
offset	long
:	O
state	*(struct)
->	O
x	struct(int,*(char),long)
.	O
have	int
;	O
state	*(struct)
->	O
x	struct(int,*(char),long)
.	O
have	int
-=	O
n	int
;	O
state	*(struct)
->	O
x	struct(int,*(char),long)
.	O
next	*(char)
+=	O
n	int
;	O
state	*(struct)
->	O
x	struct(int,*(char),long)
.	O
pos	long
+=	O
n	int
;	O
offset	long
-=	O
n	int
;	O
}	O
if	O
(	O
offset	long
)	O
{	O
state	*(struct)
->	O
seek	int
=	O
1	int
;	O
state	*(struct)
->	O
skip	long
=	O
offset	long
;	O
}	O
return	O
state	*(struct)
->	O
x	struct(int,*(char),long)
.	O
pos	long
+	O
offset	long
;	O
}	O
z_off_t	O
ZEXPORT	O
gzseek	(*(struct(int,*(char),long)),long,int)->(long)
(	O
file	*(struct)
,	O
offset	long
,	O
whence	int
)	O
gzFile	*(struct)
file	*(struct)
;	O
z_off_t	O
offset	long
;	O
int	O
whence	int
;	O
{	O
z_off64_t	O
ret	long
;	O
ret	long
=	O
gzseek64	(*(struct(int,*(char),long)),long,int)->(long)
(	O
file	*(struct)
,	O
(	O
z_off64_t	O
)	O
offset	long
,	O
whence	int
)	O
;	O
return	O
ret	long
==	O
(	O
z_off_t	O
)	O
ret	long
?	O
(	O
z_off_t	O
)	O
ret	long
:	O
-	O
1	int
;	O
}	O
z_off64_t	O
ZEXPORT	O
gztell64	(*(struct(int,*(char),long)))->(long)
(	O
file	*(struct)
)	O
gzFile	*(struct)
file	*(struct)
;	O
{	O
gz_statep	*(struct(struct(int,*(char),long),int,int,*(char),int,int,*(char),*(char),int,int,long,int,int,int,int,long,int,int,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))
state	*(struct)
;	O
if	O
(	O
file	*(struct)
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
state	*(struct)
=	O
(	O
gz_statep	*(struct(struct(int,*(char),long),int,int,*(char),int,int,*(char),*(char),int,int,long,int,int,int,int,long,int,int,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))
)	O
file	*(struct)
;	O
if	O
(	O
state	*(struct)
->	O
mode	*(char)
!=	O
GZ_READ	int
&&	O
state	*(struct)
->	O
mode	*(char)
!=	O
GZ_WRITE	int
)	O
return	O
-	O
1	int
;	O
return	O
state	*(struct)
->	O
x	struct(int,*(char),long)
.	O
pos	long
+	O
(	O
state	*(struct)
->	O
seek	int
?	O
state	*(struct)
->	O
skip	long
:	O
0	int
)	O
;	O
}	O
z_off_t	O
ZEXPORT	O
gztell	(*(struct(int,*(char),long)))->(long)
(	O
file	*(struct)
)	O
gzFile	*(struct)
file	*(struct)
;	O
{	O
z_off64_t	O
ret	long
;	O
ret	long
=	O
gztell64	(*(struct(int,*(char),long)))->(long)
(	O
file	*(struct)
)	O
;	O
return	O
ret	long
==	O
(	O
z_off_t	O
)	O
ret	long
?	O
(	O
z_off_t	O
)	O
ret	long
:	O
-	O
1	int
;	O
}	O
z_off64_t	O
ZEXPORT	O
gzoffset64	(*(struct(int,*(char),long)))->(long)
(	O
file	*(struct)
)	O
gzFile	*(struct)
file	*(struct)
;	O
{	O
z_off64_t	O
offset	long
;	O
gz_statep	*(struct(struct(int,*(char),long),int,int,*(char),int,int,*(char),*(char),int,int,long,int,int,int,int,long,int,int,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))
state	*(struct)
;	O
if	O
(	O
file	*(struct)
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
state	*(struct)
=	O
(	O
gz_statep	*(struct(struct(int,*(char),long),int,int,*(char),int,int,*(char),*(char),int,int,long,int,int,int,int,long,int,int,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))
)	O
file	*(struct)
;	O
if	O
(	O
state	*(struct)
->	O
mode	*(char)
!=	O
GZ_READ	int
&&	O
state	*(struct)
->	O
mode	*(char)
!=	O
GZ_WRITE	int
)	O
return	O
-	O
1	int
;	O
offset	long
=	O
LSEEK	O
(	O
state	*(struct)
->	O
fd	int
,	O
0	int
,	O
SEEK_CUR	int
)	O
;	O
if	O
(	O
offset	long
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
state	*(struct)
->	O
mode	*(char)
==	O
GZ_READ	int
)	O
offset	long
-=	O
state	*(struct)
->	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
.	O
avail_in	int
;	O
return	O
offset	long
;	O
}	O
z_off_t	O
ZEXPORT	O
gzoffset	(*(struct(int,*(char),long)))->(long)
(	O
file	*(struct)
)	O
gzFile	*(struct)
file	*(struct)
;	O
{	O
z_off64_t	O
ret	long
;	O
ret	long
=	O
gzoffset64	(*(struct(int,*(char),long)))->(long)
(	O
file	*(struct)
)	O
;	O
return	O
ret	long
==	O
(	O
z_off_t	O
)	O
ret	long
?	O
(	O
z_off_t	O
)	O
ret	long
:	O
-	O
1	int
;	O
}	O
int	O
ZEXPORT	O
gzeof	(*(struct))->(int)
(	O
file	*(struct)
)	O
gzFile	*(struct)
file	*(struct)
;	O
{	O
gz_statep	*(struct(struct(int,*(char),long),int,int,*(char),int,int,*(char),*(char),int,int,long,int,int,int,int,long,int,int,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))
state	*(struct)
;	O
if	O
(	O
file	*(struct)
==	O
NULL	O
)	O
return	O
0	int
;	O
state	*(struct)
=	O
(	O
gz_statep	*(struct(struct(int,*(char),long),int,int,*(char),int,int,*(char),*(char),int,int,long,int,int,int,int,long,int,int,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))
)	O
file	*(struct)
;	O
if	O
(	O
state	*(struct)
->	O
mode	*(char)
!=	O
GZ_READ	int
&&	O
state	*(struct)
->	O
mode	*(char)
!=	O
GZ_WRITE	int
)	O
return	O
0	int
;	O
return	O
state	*(struct)
->	O
mode	*(char)
==	O
GZ_READ	int
?	O
state	*(struct)
->	O
past	int
:	O
0	int
;	O
}	O
const	O
char	O
*	O
ZEXPORT	O
gzerror	(*(struct),*(int))->(*(char))
(	O
file	*(struct)
,	O
errnum	*(int)
)	O
gzFile	*(struct)
file	*(struct)
;	O
int	O
*	O
errnum	*(int)
;	O
{	O
gz_statep	*(struct(struct(int,*(char),long),int,int,*(char),int,int,*(char),*(char),int,int,long,int,int,int,int,long,int,int,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))
state	*(struct)
;	O
if	O
(	O
file	*(struct)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
state	*(struct)
=	O
(	O
gz_statep	*(struct(struct(int,*(char),long),int,int,*(char),int,int,*(char),*(char),int,int,long,int,int,int,int,long,int,int,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))
)	O
file	*(struct)
;	O
if	O
(	O
state	*(struct)
->	O
mode	*(char)
!=	O
GZ_READ	int
&&	O
state	*(struct)
->	O
mode	*(char)
!=	O
GZ_WRITE	int
)	O
return	O
NULL	O
;	O
if	O
(	O
errnum	*(int)
!=	O
NULL	O
)	O
*	O
errnum	*(int)
=	O
state	*(struct)
->	O
err	int
;	O
return	O
state	*(struct)
->	O
err	int
==	O
Z_MEM_ERROR	O
?	O
"out of memory"	*(char)
:	O
(	O
state	*(struct)
->	O
msg	*(char)
==	O
NULL	O
?	O
""	*(char)
:	O
state	*(struct)
->	O
msg	*(char)
)	O
;	O
}	O
void	O
ZEXPORT	O
gzclearerr	(*(struct))->(void)
(	O
file	*(struct)
)	O
gzFile	*(struct)
file	*(struct)
;	O
{	O
gz_statep	*(struct(struct(int,*(char),long),int,int,*(char),int,int,*(char),*(char),int,int,long,int,int,int,int,long,int,int,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))
state	*(struct)
;	O
if	O
(	O
file	*(struct)
==	O
NULL	O
)	O
return	O
;	O
state	*(struct)
=	O
(	O
gz_statep	*(struct(struct(int,*(char),long),int,int,*(char),int,int,*(char),*(char),int,int,long,int,int,int,int,long,int,int,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))
)	O
file	*(struct)
;	O
if	O
(	O
state	*(struct)
->	O
mode	*(char)
!=	O
GZ_READ	int
&&	O
state	*(struct)
->	O
mode	*(char)
!=	O
GZ_WRITE	int
)	O
return	O
;	O
if	O
(	O
state	*(struct)
->	O
mode	*(char)
==	O
GZ_READ	int
)	O
{	O
state	*(struct)
->	O
eof	int
=	O
0	int
;	O
state	*(struct)
->	O
past	int
=	O
0	int
;	O
}	O
gz_error	(*(struct(struct(int,*(char),long),int,int,*(char),int,int,*(char),*(char),int,int,long,int,int,int,int,long,int,int,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct`),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long))),int,*(char))->(void)
(	O
state	*(struct)
,	O
Z_OK	int
,	O
NULL	O
)	O
;	O
}	O
void	O
ZLIB_INTERNAL	O
gz_error	(*(struct(struct(int,*(char),long),int,int,*(char),int,int,*(char),*(char),int,int,long,int,int,int,int,long,int,int,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct`),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long))),int,*(char))->(void)
(	O
state	*(struct)
,	O
err	int
,	O
msg	*(char)
)	O
gz_statep	*(struct(struct(int,*(char),long),int,int,*(char),int,int,*(char),*(char),int,int,long,int,int,int,int,long,int,int,*(char),struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))
state	*(struct)
;	O
int	O
err	int
;	O
const	O
char	O
*	O
msg	*(char)
;	O
{	O
if	O
(	O
state	*(struct)
->	O
msg	*(char)
!=	O
NULL	O
)	O
{	O
if	O
(	O
state	*(struct)
->	O
err	int
!=	O
Z_MEM_ERROR	O
)	O
free	(*(void))->(void)
(	O
state	*(struct)
->	O
msg	*(char)
)	O
;	O
state	*(struct)
->	O
msg	*(char)
=	O
NULL	O
;	O
}	O
if	O
(	O
err	int
!=	O
Z_OK	int
&&	O
err	int
!=	O
Z_BUF_ERROR	O
)	O
state	*(struct)
->	O
x	struct(int,*(char),long)
.	O
have	int
=	O
0	int
;	O
state	*(struct)
->	O
err	int
=	O
err	int
;	O
if	O
(	O
msg	*(char)
==	O
NULL	O
)	O
return	O
;	O
if	O
(	O
err	int
==	O
Z_MEM_ERROR	O
)	O
return	O
;	O
if	O
(	O
(	O
state	*(struct)
->	O
msg	*(char)
=	O
(	O
char	O
*	O
)	O
malloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
state	*(struct)
->	O
path	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
msg	*(char)
)	O
+	O
3	int
)	O
)	O
==	O
NULL	O
)	O
{	O
state	*(struct)
->	O
err	int
=	O
Z_MEM_ERROR	O
;	O
return	O
;	O
}	O
(	O
void	O
)	O
snprintf	(*(char),long,*(char))->(int)
(	O
state	*(struct)
->	O
msg	*(char)
,	O
strlen	(*(char))->(long)
(	O
state	*(struct)
->	O
path	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
msg	*(char)
)	O
+	O
3	int
,	O
"%s%s%s"	*(char)
,	O
state	*(struct)
->	O
path	*(char)
,	O
": "	*(char)
,	O
msg	*(char)
)	O
;	O
}	O
