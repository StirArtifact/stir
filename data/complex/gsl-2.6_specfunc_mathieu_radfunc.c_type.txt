int	O
gsl_sf_mathieu_Mc_e	(int,int,double,double,*(struct(double,double)))->(int)
(	O
int	O
kind	int
,	O
int	O
order	enum(int,int)
,	O
double	O
qq	double
,	O
double	O
zz	*(double)
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
int	O
even_odd	int
,	O
kk	int
,	O
status	int
;	O
double	O
maxerr	double
=	O
1e-14	int
,	O
amax	double
,	O
pi	double
=	O
M_PI	int
,	O
fn	double
,	O
factor	double
;	O
double	O
coeff	array(double)
[	O
GSL_SF_MATHIEU_COEFF	int
]	O
,	O
fc	double
;	O
double	O
j1c	double
,	O
z2c	double
,	O
j1pc	double
,	O
z2pc	double
;	O
double	O
u1	double
,	O
u2	double
;	O
gsl_sf_result	struct(double,double)
aa	*(double)
;	O
if	O
(	O
qq	double
<=	O
0.0	int
)	O
{	O
GSL_ERROR	O
(	O
"q must be greater than zero"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
if	O
(	O
kind	int
<	O
1	int
||	O
kind	int
>	O
2	int
)	O
{	O
GSL_ERROR	O
(	O
"kind must be 1 or 2"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
amax	double
=	O
0.0	int
;	O
fn	double
=	O
0.0	int
;	O
u1	double
=	O
sqrt	(double)->(double)
(	O
qq	double
)	O
*	O
exp	(double)->(double)
(	O
-	O
1.0	int
*	O
zz	*(double)
)	O
;	O
u2	double
=	O
sqrt	(double)->(double)
(	O
qq	double
)	O
*	O
exp	(double)->(double)
(	O
zz	*(double)
)	O
;	O
even_odd	int
=	O
0	int
;	O
if	O
(	O
order	enum(int,int)
%	O
2	int
!=	O
0	int
)	O
even_odd	int
=	O
1	int
;	O
status	int
=	O
gsl_sf_mathieu_a_e	(int,double,*(struct(double,double)))->(int)
(	O
order	enum(int,int)
,	O
qq	double
,	O
&	O
aa	*(double)
)	O
;	O
if	O
(	O
status	int
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
status	int
;	O
}	O
status	int
=	O
gsl_sf_mathieu_a_coeff	(int,double,double,array(double))->(int)
(	O
order	enum(int,int)
,	O
qq	double
,	O
aa	*(double)
.	O
val	double
,	O
coeff	array(double)
)	O
;	O
if	O
(	O
status	int
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
status	int
;	O
}	O
if	O
(	O
even_odd	int
==	O
0	int
)	O
{	O
for	O
(	O
kk	int
=	O
0	int
;	O
kk	int
<	O
GSL_SF_MATHIEU_COEFF	int
;	O
kk	int
++	O
)	O
{	O
amax	double
=	O
GSL_MAX	O
(	O
amax	double
,	O
fabs	(double)->(double)
(	O
coeff	array(double)
[	O
kk	int
]	O
)	O
)	O
;	O
if	O
(	O
fabs	(double)->(double)
(	O
coeff	array(double)
[	O
kk	int
]	O
)	O
/	O
amax	double
<	O
maxerr	double
)	O
break	O
;	O
j1c	double
=	O
gsl_sf_bessel_Jn	(int,double)->(double)
(	O
kk	int
,	O
u1	double
)	O
;	O
if	O
(	O
kind	int
==	O
1	int
)	O
{	O
z2c	double
=	O
gsl_sf_bessel_Jn	(int,double)->(double)
(	O
kk	int
,	O
u2	double
)	O
;	O
}	O
else	O
{	O
z2c	double
=	O
gsl_sf_bessel_Yn	(int,double)->(double)
(	O
kk	int
,	O
u2	double
)	O
;	O
}	O
fc	double
=	O
pow	(double,double)->(double)
(	O
-	O
1.0	int
,	O
0.5	int
*	O
order	enum(int,int)
+	O
kk	int
)	O
*	O
coeff	array(double)
[	O
kk	int
]	O
;	O
fn	double
+=	O
fc	double
*	O
j1c	double
*	O
z2c	double
;	O
}	O
fn	double
*=	O
sqrt	(double)->(double)
(	O
pi	double
/	O
2.0	int
)	O
/	O
coeff	array(double)
[	O
0	int
]	O
;	O
}	O
else	O
{	O
for	O
(	O
kk	int
=	O
0	int
;	O
kk	int
<	O
GSL_SF_MATHIEU_COEFF	int
;	O
kk	int
++	O
)	O
{	O
amax	double
=	O
GSL_MAX	O
(	O
amax	double
,	O
fabs	(double)->(double)
(	O
coeff	array(double)
[	O
kk	int
]	O
)	O
)	O
;	O
if	O
(	O
fabs	(double)->(double)
(	O
coeff	array(double)
[	O
kk	int
]	O
)	O
/	O
amax	double
<	O
maxerr	double
)	O
break	O
;	O
j1c	double
=	O
gsl_sf_bessel_Jn	(int,double)->(double)
(	O
kk	int
,	O
u1	double
)	O
;	O
j1pc	double
=	O
gsl_sf_bessel_Jn	(int,double)->(double)
(	O
kk	int
+	O
1	int
,	O
u1	double
)	O
;	O
if	O
(	O
kind	int
==	O
1	int
)	O
{	O
z2c	double
=	O
gsl_sf_bessel_Jn	(int,double)->(double)
(	O
kk	int
,	O
u2	double
)	O
;	O
z2pc	double
=	O
gsl_sf_bessel_Jn	(int,double)->(double)
(	O
kk	int
+	O
1	int
,	O
u2	double
)	O
;	O
}	O
else	O
{	O
z2c	double
=	O
gsl_sf_bessel_Yn	(int,double)->(double)
(	O
kk	int
,	O
u2	double
)	O
;	O
z2pc	double
=	O
gsl_sf_bessel_Yn	(int,double)->(double)
(	O
kk	int
+	O
1	int
,	O
u2	double
)	O
;	O
}	O
fc	double
=	O
pow	(double,double)->(double)
(	O
-	O
1.0	int
,	O
0.5	int
*	O
(	O
order	enum(int,int)
-	O
1	int
)	O
+	O
kk	int
)	O
*	O
coeff	array(double)
[	O
kk	int
]	O
;	O
fn	double
+=	O
fc	double
*	O
(	O
j1c	double
*	O
z2pc	double
+	O
j1pc	double
*	O
z2c	double
)	O
;	O
}	O
fn	double
*=	O
sqrt	(double)->(double)
(	O
pi	double
/	O
2.0	int
)	O
/	O
coeff	array(double)
[	O
0	int
]	O
;	O
}	O
result	*(struct(double,double))
->	O
val	double
=	O
fn	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
;	O
factor	double
=	O
fabs	(double)->(double)
(	O
fn	double
)	O
;	O
if	O
(	O
factor	double
>	O
1.0	int
)	O
result	*(struct(double,double))
->	O
err	double
*=	O
factor	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_sf_mathieu_Ms_e	(int,int,double,double,*(struct(double,double)))->(int)
(	O
int	O
kind	int
,	O
int	O
order	enum(int,int)
,	O
double	O
qq	double
,	O
double	O
zz	*(double)
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
int	O
even_odd	int
,	O
kk	int
,	O
status	int
;	O
double	O
maxerr	double
=	O
1e-14	int
,	O
amax	double
,	O
pi	double
=	O
M_PI	int
,	O
fn	double
,	O
factor	double
;	O
double	O
coeff	array(double)
[	O
GSL_SF_MATHIEU_COEFF	int
]	O
,	O
fc	double
;	O
double	O
j1c	double
,	O
z2c	double
,	O
j1mc	double
,	O
z2mc	double
,	O
j1pc	double
,	O
z2pc	double
;	O
double	O
u1	double
,	O
u2	double
;	O
gsl_sf_result	struct(double,double)
aa	*(double)
;	O
if	O
(	O
qq	double
<=	O
0.0	int
)	O
{	O
GSL_ERROR	O
(	O
"q must be greater than zero"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
if	O
(	O
kind	int
<	O
1	int
||	O
kind	int
>	O
2	int
)	O
{	O
GSL_ERROR	O
(	O
"kind must be 1 or 2"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
if	O
(	O
order	enum(int,int)
==	O
0	int
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
0.0	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
amax	double
=	O
0.0	int
;	O
fn	double
=	O
0.0	int
;	O
u1	double
=	O
sqrt	(double)->(double)
(	O
qq	double
)	O
*	O
exp	(double)->(double)
(	O
-	O
1.0	int
*	O
zz	*(double)
)	O
;	O
u2	double
=	O
sqrt	(double)->(double)
(	O
qq	double
)	O
*	O
exp	(double)->(double)
(	O
zz	*(double)
)	O
;	O
even_odd	int
=	O
0	int
;	O
if	O
(	O
order	enum(int,int)
%	O
2	int
!=	O
0	int
)	O
even_odd	int
=	O
1	int
;	O
status	int
=	O
gsl_sf_mathieu_b_e	(int,double,*(struct(double,double)))->(int)
(	O
order	enum(int,int)
,	O
qq	double
,	O
&	O
aa	*(double)
)	O
;	O
if	O
(	O
status	int
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
status	int
;	O
}	O
status	int
=	O
gsl_sf_mathieu_b_coeff	(int,double,double,array(double))->(int)
(	O
order	enum(int,int)
,	O
qq	double
,	O
aa	*(double)
.	O
val	double
,	O
coeff	array(double)
)	O
;	O
if	O
(	O
status	int
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
status	int
;	O
}	O
if	O
(	O
even_odd	int
==	O
0	int
)	O
{	O
for	O
(	O
kk	int
=	O
0	int
;	O
kk	int
<	O
GSL_SF_MATHIEU_COEFF	int
;	O
kk	int
++	O
)	O
{	O
amax	double
=	O
GSL_MAX	O
(	O
amax	double
,	O
fabs	(double)->(double)
(	O
coeff	array(double)
[	O
kk	int
]	O
)	O
)	O
;	O
if	O
(	O
fabs	(double)->(double)
(	O
coeff	array(double)
[	O
kk	int
]	O
)	O
/	O
amax	double
<	O
maxerr	double
)	O
break	O
;	O
j1mc	double
=	O
gsl_sf_bessel_Jn	(int,double)->(double)
(	O
kk	int
,	O
u1	double
)	O
;	O
j1pc	double
=	O
gsl_sf_bessel_Jn	(int,double)->(double)
(	O
kk	int
+	O
2	int
,	O
u1	double
)	O
;	O
if	O
(	O
kind	int
==	O
1	int
)	O
{	O
z2mc	double
=	O
gsl_sf_bessel_Jn	(int,double)->(double)
(	O
kk	int
,	O
u2	double
)	O
;	O
z2pc	double
=	O
gsl_sf_bessel_Jn	(int,double)->(double)
(	O
kk	int
+	O
2	int
,	O
u2	double
)	O
;	O
}	O
else	O
{	O
z2mc	double
=	O
gsl_sf_bessel_Yn	(int,double)->(double)
(	O
kk	int
,	O
u2	double
)	O
;	O
z2pc	double
=	O
gsl_sf_bessel_Yn	(int,double)->(double)
(	O
kk	int
+	O
2	int
,	O
u2	double
)	O
;	O
}	O
fc	double
=	O
pow	(double,double)->(double)
(	O
-	O
1.0	int
,	O
0.5	int
*	O
order	enum(int,int)
+	O
kk	int
+	O
1	int
)	O
*	O
coeff	array(double)
[	O
kk	int
]	O
;	O
fn	double
+=	O
fc	double
*	O
(	O
j1mc	double
*	O
z2pc	double
-	O
j1pc	double
*	O
z2mc	double
)	O
;	O
}	O
fn	double
*=	O
sqrt	(double)->(double)
(	O
pi	double
/	O
2.0	int
)	O
/	O
coeff	array(double)
[	O
0	int
]	O
;	O
}	O
else	O
{	O
for	O
(	O
kk	int
=	O
0	int
;	O
kk	int
<	O
GSL_SF_MATHIEU_COEFF	int
;	O
kk	int
++	O
)	O
{	O
amax	double
=	O
GSL_MAX	O
(	O
amax	double
,	O
fabs	(double)->(double)
(	O
coeff	array(double)
[	O
kk	int
]	O
)	O
)	O
;	O
if	O
(	O
fabs	(double)->(double)
(	O
coeff	array(double)
[	O
kk	int
]	O
)	O
/	O
amax	double
<	O
maxerr	double
)	O
break	O
;	O
j1c	double
=	O
gsl_sf_bessel_Jn	(int,double)->(double)
(	O
kk	int
,	O
u1	double
)	O
;	O
j1pc	double
=	O
gsl_sf_bessel_Jn	(int,double)->(double)
(	O
kk	int
+	O
1	int
,	O
u1	double
)	O
;	O
if	O
(	O
kind	int
==	O
1	int
)	O
{	O
z2c	double
=	O
gsl_sf_bessel_Jn	(int,double)->(double)
(	O
kk	int
,	O
u2	double
)	O
;	O
z2pc	double
=	O
gsl_sf_bessel_Jn	(int,double)->(double)
(	O
kk	int
+	O
1	int
,	O
u2	double
)	O
;	O
}	O
else	O
{	O
z2c	double
=	O
gsl_sf_bessel_Yn	(int,double)->(double)
(	O
kk	int
,	O
u2	double
)	O
;	O
z2pc	double
=	O
gsl_sf_bessel_Yn	(int,double)->(double)
(	O
kk	int
+	O
1	int
,	O
u2	double
)	O
;	O
}	O
fc	double
=	O
pow	(double,double)->(double)
(	O
-	O
1.0	int
,	O
0.5	int
*	O
(	O
order	enum(int,int)
-	O
1	int
)	O
+	O
kk	int
)	O
*	O
coeff	array(double)
[	O
kk	int
]	O
;	O
fn	double
+=	O
fc	double
*	O
(	O
j1c	double
*	O
z2pc	double
-	O
j1pc	double
*	O
z2c	double
)	O
;	O
}	O
fn	double
*=	O
sqrt	(double)->(double)
(	O
pi	double
/	O
2.0	int
)	O
/	O
coeff	array(double)
[	O
0	int
]	O
;	O
}	O
result	*(struct(double,double))
->	O
val	double
=	O
fn	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
;	O
factor	double
=	O
fabs	(double)->(double)
(	O
fn	double
)	O
;	O
if	O
(	O
factor	double
>	O
1.0	int
)	O
result	*(struct(double,double))
->	O
err	double
*=	O
factor	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_sf_mathieu_Mc_array	(int,int,int,double,double,*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,*`,*`,*`,*`)))),array(double))->(int)
(	O
int	O
kind	int
,	O
int	O
nmin	int
,	O
int	O
nmax	int
,	O
double	O
qq	double
,	O
double	O
zz	*(double)
,	O
gsl_sf_mathieu_workspace	struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(double),*(double),*(double),*(double))))
*	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
double	O
result_array	*(double)
[	O
]	O
)	O
{	O
int	O
even_odd	int
,	O
order	enum(int,int)
,	O
ii	int
,	O
kk	int
,	O
status	int
;	O
double	O
maxerr	double
=	O
1e-14	int
,	O
amax	double
,	O
pi	double
=	O
M_PI	int
,	O
fn	double
;	O
double	O
coeff	array(double)
[	O
GSL_SF_MATHIEU_COEFF	int
]	O
,	O
fc	double
;	O
double	O
j1c	double
,	O
z2c	double
,	O
j1pc	double
,	O
z2pc	double
;	O
double	O
u1	double
,	O
u2	double
;	O
double	O
*	O
aa	*(double)
=	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
aa	*(double)
;	O
for	O
(	O
ii	int
=	O
0	int
;	O
ii	int
<	O
nmax	int
-	O
nmin	int
+	O
1	int
;	O
ii	int
++	O
)	O
result_array	*(double)
[	O
ii	int
]	O
=	O
0.0	int
;	O
if	O
(	O
qq	double
<=	O
0.0	int
)	O
{	O
GSL_ERROR	O
(	O
"q must be greater than zero"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
if	O
(	O
kind	int
<	O
1	int
||	O
kind	int
>	O
2	int
)	O
{	O
GSL_ERROR	O
(	O
"kind must be 1 or 2"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
amax	double
=	O
0.0	int
;	O
u1	double
=	O
sqrt	(double)->(double)
(	O
qq	double
)	O
*	O
exp	(double)->(double)
(	O
-	O
1.0	int
*	O
zz	*(double)
)	O
;	O
u2	double
=	O
sqrt	(double)->(double)
(	O
qq	double
)	O
*	O
exp	(double)->(double)
(	O
zz	*(double)
)	O
;	O
gsl_sf_mathieu_a_array	(int,int,double,*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,*`,*`,*`,*`)))),array(double))->(int)
(	O
0	int
,	O
nmax	int
,	O
qq	double
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
aa	*(double)
)	O
;	O
for	O
(	O
ii	int
=	O
0	int
,	O
order	enum(int,int)
=	O
nmin	int
;	O
order	enum(int,int)
<=	O
nmax	int
;	O
ii	int
++	O
,	O
order	enum(int,int)
++	O
)	O
{	O
fn	double
=	O
0.0	int
;	O
even_odd	int
=	O
0	int
;	O
if	O
(	O
order	enum(int,int)
%	O
2	int
!=	O
0	int
)	O
even_odd	int
=	O
1	int
;	O
status	int
=	O
gsl_sf_mathieu_a_coeff	(int,double,double,array(double))->(int)
(	O
order	enum(int,int)
,	O
qq	double
,	O
aa	*(double)
[	O
order	enum(int,int)
]	O
,	O
coeff	array(double)
)	O
;	O
if	O
(	O
status	int
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
status	int
;	O
}	O
if	O
(	O
even_odd	int
==	O
0	int
)	O
{	O
for	O
(	O
kk	int
=	O
0	int
;	O
kk	int
<	O
GSL_SF_MATHIEU_COEFF	int
;	O
kk	int
++	O
)	O
{	O
amax	double
=	O
GSL_MAX	O
(	O
amax	double
,	O
fabs	(double)->(double)
(	O
coeff	array(double)
[	O
kk	int
]	O
)	O
)	O
;	O
if	O
(	O
fabs	(double)->(double)
(	O
coeff	array(double)
[	O
kk	int
]	O
)	O
/	O
amax	double
<	O
maxerr	double
)	O
break	O
;	O
j1c	double
=	O
gsl_sf_bessel_Jn	(int,double)->(double)
(	O
kk	int
,	O
u1	double
)	O
;	O
if	O
(	O
kind	int
==	O
1	int
)	O
{	O
z2c	double
=	O
gsl_sf_bessel_Jn	(int,double)->(double)
(	O
kk	int
,	O
u2	double
)	O
;	O
}	O
else	O
{	O
z2c	double
=	O
gsl_sf_bessel_Yn	(int,double)->(double)
(	O
kk	int
,	O
u2	double
)	O
;	O
}	O
fc	double
=	O
pow	(double,double)->(double)
(	O
-	O
1.0	int
,	O
0.5	int
*	O
order	enum(int,int)
+	O
kk	int
)	O
*	O
coeff	array(double)
[	O
kk	int
]	O
;	O
fn	double
+=	O
fc	double
*	O
j1c	double
*	O
z2c	double
;	O
}	O
fn	double
*=	O
sqrt	(double)->(double)
(	O
pi	double
/	O
2.0	int
)	O
/	O
coeff	array(double)
[	O
0	int
]	O
;	O
}	O
else	O
{	O
for	O
(	O
kk	int
=	O
0	int
;	O
kk	int
<	O
GSL_SF_MATHIEU_COEFF	int
;	O
kk	int
++	O
)	O
{	O
amax	double
=	O
GSL_MAX	O
(	O
amax	double
,	O
fabs	(double)->(double)
(	O
coeff	array(double)
[	O
kk	int
]	O
)	O
)	O
;	O
if	O
(	O
fabs	(double)->(double)
(	O
coeff	array(double)
[	O
kk	int
]	O
)	O
/	O
amax	double
<	O
maxerr	double
)	O
break	O
;	O
j1c	double
=	O
gsl_sf_bessel_Jn	(int,double)->(double)
(	O
kk	int
,	O
u1	double
)	O
;	O
j1pc	double
=	O
gsl_sf_bessel_Jn	(int,double)->(double)
(	O
kk	int
+	O
1	int
,	O
u1	double
)	O
;	O
if	O
(	O
kind	int
==	O
1	int
)	O
{	O
z2c	double
=	O
gsl_sf_bessel_Jn	(int,double)->(double)
(	O
kk	int
,	O
u2	double
)	O
;	O
z2pc	double
=	O
gsl_sf_bessel_Jn	(int,double)->(double)
(	O
kk	int
+	O
1	int
,	O
u2	double
)	O
;	O
}	O
else	O
{	O
z2c	double
=	O
gsl_sf_bessel_Yn	(int,double)->(double)
(	O
kk	int
,	O
u2	double
)	O
;	O
z2pc	double
=	O
gsl_sf_bessel_Yn	(int,double)->(double)
(	O
kk	int
+	O
1	int
,	O
u2	double
)	O
;	O
}	O
fc	double
=	O
pow	(double,double)->(double)
(	O
-	O
1.0	int
,	O
0.5	int
*	O
(	O
order	enum(int,int)
-	O
1	int
)	O
+	O
kk	int
)	O
*	O
coeff	array(double)
[	O
kk	int
]	O
;	O
fn	double
+=	O
fc	double
*	O
(	O
j1c	double
*	O
z2pc	double
+	O
j1pc	double
*	O
z2c	double
)	O
;	O
}	O
fn	double
*=	O
sqrt	(double)->(double)
(	O
pi	double
/	O
2.0	int
)	O
/	O
coeff	array(double)
[	O
0	int
]	O
;	O
}	O
result_array	*(double)
[	O
ii	int
]	O
=	O
fn	double
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_sf_mathieu_Ms_array	(int,int,int,double,double,*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,*`,*`,*`,*`)))),array(double))->(int)
(	O
int	O
kind	int
,	O
int	O
nmin	int
,	O
int	O
nmax	int
,	O
double	O
qq	double
,	O
double	O
zz	*(double)
,	O
gsl_sf_mathieu_workspace	struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(double),*(double),*(double),*(double))))
*	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
double	O
result_array	*(double)
[	O
]	O
)	O
{	O
int	O
even_odd	int
,	O
order	enum(int,int)
,	O
ii	int
,	O
kk	int
,	O
status	int
;	O
double	O
maxerr	double
=	O
1e-14	int
,	O
amax	double
,	O
pi	double
=	O
M_PI	int
,	O
fn	double
;	O
double	O
coeff	array(double)
[	O
GSL_SF_MATHIEU_COEFF	int
]	O
,	O
fc	double
;	O
double	O
j1c	double
,	O
z2c	double
,	O
j1mc	double
,	O
z2mc	double
,	O
j1pc	double
,	O
z2pc	double
;	O
double	O
u1	double
,	O
u2	double
;	O
double	O
*	O
bb	*(double)
=	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
bb	*(double)
;	O
for	O
(	O
ii	int
=	O
0	int
;	O
ii	int
<	O
nmax	int
-	O
nmin	int
+	O
1	int
;	O
ii	int
++	O
)	O
result_array	*(double)
[	O
ii	int
]	O
=	O
0.0	int
;	O
if	O
(	O
qq	double
<=	O
0.0	int
)	O
{	O
GSL_ERROR	O
(	O
"q must be greater than zero"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
if	O
(	O
kind	int
<	O
1	int
||	O
kind	int
>	O
2	int
)	O
{	O
GSL_ERROR	O
(	O
"kind must be 1 or 2"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
amax	double
=	O
0.0	int
;	O
u1	double
=	O
sqrt	(double)->(double)
(	O
qq	double
)	O
*	O
exp	(double)->(double)
(	O
-	O
1.0	int
*	O
zz	*(double)
)	O
;	O
u2	double
=	O
sqrt	(double)->(double)
(	O
qq	double
)	O
*	O
exp	(double)->(double)
(	O
zz	*(double)
)	O
;	O
gsl_sf_mathieu_b_array	(int,int,double,*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,*`,*`,*`,*`)))),array(double))->(int)
(	O
0	int
,	O
nmax	int
,	O
qq	double
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
bb	*(double)
)	O
;	O
for	O
(	O
ii	int
=	O
0	int
,	O
order	enum(int,int)
=	O
nmin	int
;	O
order	enum(int,int)
<=	O
nmax	int
;	O
ii	int
++	O
,	O
order	enum(int,int)
++	O
)	O
{	O
fn	double
=	O
0.0	int
;	O
even_odd	int
=	O
0	int
;	O
if	O
(	O
order	enum(int,int)
%	O
2	int
!=	O
0	int
)	O
even_odd	int
=	O
1	int
;	O
if	O
(	O
order	enum(int,int)
==	O
0	int
)	O
{	O
result_array	*(double)
[	O
ii	int
]	O
=	O
0.0	int
;	O
continue	O
;	O
}	O
status	int
=	O
gsl_sf_mathieu_b_coeff	(int,double,double,array(double))->(int)
(	O
order	enum(int,int)
,	O
qq	double
,	O
bb	*(double)
[	O
order	enum(int,int)
]	O
,	O
coeff	array(double)
)	O
;	O
if	O
(	O
status	int
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
status	int
;	O
}	O
if	O
(	O
even_odd	int
==	O
0	int
)	O
{	O
for	O
(	O
kk	int
=	O
0	int
;	O
kk	int
<	O
GSL_SF_MATHIEU_COEFF	int
;	O
kk	int
++	O
)	O
{	O
amax	double
=	O
GSL_MAX	O
(	O
amax	double
,	O
fabs	(double)->(double)
(	O
coeff	array(double)
[	O
kk	int
]	O
)	O
)	O
;	O
if	O
(	O
fabs	(double)->(double)
(	O
coeff	array(double)
[	O
kk	int
]	O
)	O
/	O
amax	double
<	O
maxerr	double
)	O
break	O
;	O
j1mc	double
=	O
gsl_sf_bessel_Jn	(int,double)->(double)
(	O
kk	int
,	O
u1	double
)	O
;	O
j1pc	double
=	O
gsl_sf_bessel_Jn	(int,double)->(double)
(	O
kk	int
+	O
2	int
,	O
u1	double
)	O
;	O
if	O
(	O
kind	int
==	O
1	int
)	O
{	O
z2mc	double
=	O
gsl_sf_bessel_Jn	(int,double)->(double)
(	O
kk	int
,	O
u2	double
)	O
;	O
z2pc	double
=	O
gsl_sf_bessel_Jn	(int,double)->(double)
(	O
kk	int
+	O
2	int
,	O
u2	double
)	O
;	O
}	O
else	O
{	O
z2mc	double
=	O
gsl_sf_bessel_Yn	(int,double)->(double)
(	O
kk	int
,	O
u2	double
)	O
;	O
z2pc	double
=	O
gsl_sf_bessel_Yn	(int,double)->(double)
(	O
kk	int
+	O
2	int
,	O
u2	double
)	O
;	O
}	O
fc	double
=	O
pow	(double,double)->(double)
(	O
-	O
1.0	int
,	O
0.5	int
*	O
order	enum(int,int)
+	O
kk	int
+	O
1	int
)	O
*	O
coeff	array(double)
[	O
kk	int
]	O
;	O
fn	double
+=	O
fc	double
*	O
(	O
j1mc	double
*	O
z2pc	double
-	O
j1pc	double
*	O
z2mc	double
)	O
;	O
}	O
fn	double
*=	O
sqrt	(double)->(double)
(	O
pi	double
/	O
2.0	int
)	O
/	O
coeff	array(double)
[	O
0	int
]	O
;	O
}	O
else	O
{	O
for	O
(	O
kk	int
=	O
0	int
;	O
kk	int
<	O
GSL_SF_MATHIEU_COEFF	int
;	O
kk	int
++	O
)	O
{	O
amax	double
=	O
GSL_MAX	O
(	O
amax	double
,	O
fabs	(double)->(double)
(	O
coeff	array(double)
[	O
kk	int
]	O
)	O
)	O
;	O
if	O
(	O
fabs	(double)->(double)
(	O
coeff	array(double)
[	O
kk	int
]	O
)	O
/	O
amax	double
<	O
maxerr	double
)	O
break	O
;	O
j1c	double
=	O
gsl_sf_bessel_Jn	(int,double)->(double)
(	O
kk	int
,	O
u1	double
)	O
;	O
j1pc	double
=	O
gsl_sf_bessel_Jn	(int,double)->(double)
(	O
kk	int
+	O
1	int
,	O
u1	double
)	O
;	O
if	O
(	O
kind	int
==	O
1	int
)	O
{	O
z2c	double
=	O
gsl_sf_bessel_Jn	(int,double)->(double)
(	O
kk	int
,	O
u2	double
)	O
;	O
z2pc	double
=	O
gsl_sf_bessel_Jn	(int,double)->(double)
(	O
kk	int
+	O
1	int
,	O
u2	double
)	O
;	O
}	O
else	O
{	O
z2c	double
=	O
gsl_sf_bessel_Yn	(int,double)->(double)
(	O
kk	int
,	O
u2	double
)	O
;	O
z2pc	double
=	O
gsl_sf_bessel_Yn	(int,double)->(double)
(	O
kk	int
+	O
1	int
,	O
u2	double
)	O
;	O
}	O
fc	double
=	O
pow	(double,double)->(double)
(	O
-	O
1.0	int
,	O
0.5	int
*	O
(	O
order	enum(int,int)
-	O
1	int
)	O
+	O
kk	int
)	O
*	O
coeff	array(double)
[	O
kk	int
]	O
;	O
fn	double
+=	O
fc	double
*	O
(	O
j1c	double
*	O
z2pc	double
-	O
j1pc	double
*	O
z2c	double
)	O
;	O
}	O
fn	double
*=	O
sqrt	(double)->(double)
(	O
pi	double
/	O
2.0	int
)	O
/	O
coeff	array(double)
[	O
0	int
]	O
;	O
}	O
result_array	*(double)
[	O
ii	int
]	O
=	O
fn	double
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
double	O
gsl_sf_mathieu_Mc	(int,int,double,double)->(double)
(	O
int	O
kind	int
,	O
int	O
order	enum(int,int)
,	O
double	O
qq	double
,	O
double	O
zz	*(double)
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_mathieu_Mc_e	(int,int,double,double,*(struct(double,double)))->(int)
(	O
kind	int
,	O
order	enum(int,int)
,	O
qq	double
,	O
zz	*(double)
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
double	O
gsl_sf_mathieu_Ms	(int,int,double,double)->(double)
(	O
int	O
kind	int
,	O
int	O
order	enum(int,int)
,	O
double	O
qq	double
,	O
double	O
zz	*(double)
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_mathieu_Ms_e	(int,int,double,double,*(struct(double,double)))->(int)
(	O
kind	int
,	O
order	enum(int,int)
,	O
qq	double
,	O
zz	*(double)
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
