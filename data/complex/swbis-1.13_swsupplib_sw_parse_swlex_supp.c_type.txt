extern	O
struct	O
swbis_keyword	struct(*(char),int)
sw_keywords	array(struct(*(char),int))
[	O
]	O
;	O
extern	O
int	O
swlex_inputfd	int
;	O
static	O
int	O
is_keyword	(*(char))->(int)
(	O
char	O
*	O
string	*(char)
)	O
;	O
int	O
fnmatch	(*(char),*(char),int)->(int)
(	O
const	O
char	O
*	O
,	O
const	O
char	O
*	O
,	O
int	O
flags	int
)	O
;	O
int	O
swlex_handle_keyword	(*(char),int,*(int))->(int)
(	O
char	O
*	O
string	*(char)
,	O
int	O
keycode	int
,	O
int	O
*	O
keytype	*(int)
)	O
{	O
int	O
lexuser_keyword_offset	int
=	O
-	O
1	int
;	O
struct	O
swbis_keyword	struct(*(char),int)
*	O
keyword_ptr	*(struct(*(char),int))
=	O
sw_keywords	array(struct(*(char),int))
;	O
char	O
*	O
object_keyword	*(char)
;	O
*	O
keytype	*(int)
=	O
-	O
1	int
;	O
lexuser_keyword_offset	int
=	O
is_keyword	(*(char))->(int)
(	O
string	*(char)
)	O
;	O
if	O
(	O
lexuser_keyword_offset	int
>=	O
0	int
)	O
{	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
"layout_version"	*(char)
,	O
(	O
(	O
keyword_ptr	*(struct(*(char),int))
+	O
lexuser_keyword_offset	int
)	O
->	O
name	*(char)
)	O
)	O
)	O
{	O
*	O
keytype	*(int)
=	O
SWLEX_KEYTYPE_ATTR	int
;	O
return	O
SW_AK_LAYOUT_VERSION	int
;	O
}	O
if	O
(	O
(	O
(	O
(	O
keyword_ptr	*(struct(*(char),int))
+	O
lexuser_keyword_offset	int
)	O
->	O
flag	int
)	O
!=	O
SWLEX_SW_ATTRIBUTE_KEYWORD	O
)	O
&&	O
(	O
(	O
(	O
keyword_ptr	*(struct(*(char),int))
+	O
lexuser_keyword_offset	int
)	O
->	O
flag	int
)	O
!=	O
SWLEX_SW_EXTENDED_KEYWORD	O
)	O
&&	O
(	O
(	O
(	O
keyword_ptr	*(struct(*(char),int))
+	O
lexuser_keyword_offset	int
)	O
->	O
flag	int
)	O
!=	O
SWLEX_SW_OBJECT_KEYWORD	O
)	O
&&	O
(	O
keycode	int
<	O
0	int
)	O
)	O
{	O
*	O
keytype	*(int)
=	O
SWLEX_KEYTYPE_AMBIG	int
;	O
}	O
if	O
(	O
(	O
(	O
keyword_ptr	*(struct(*(char),int))
+	O
lexuser_keyword_offset	int
)	O
->	O
flag	int
)	O
==	O
(	O
(	O
SWLEX_SW_ATTRIBUTE_KEYWORD	O
)	O
|	O
(	O
SWLEX_SW_EXTENDED_KEYWORD	O
)	O
)	O
)	O
{	O
*	O
keytype	*(int)
=	O
SWLEX_KEYTYPE_AMBIG_AE	int
;	O
}	O
if	O
(	O
(	O
(	O
keyword_ptr	*(struct(*(char),int))
+	O
lexuser_keyword_offset	int
)	O
->	O
flag	int
)	O
==	O
(	O
(	O
SWLEX_SW_OBJECT_KEYWORD	O
)	O
|	O
(	O
SWLEX_SW_ATTRIBUTE_KEYWORD	O
)	O
)	O
)	O
{	O
*	O
keytype	*(int)
=	O
SWLEX_KEYTYPE_AMBIG_OA	int
;	O
}	O
if	O
(	O
(	O
(	O
keyword_ptr	*(struct(*(char),int))
+	O
lexuser_keyword_offset	int
)	O
->	O
flag	int
)	O
==	O
(	O
(	O
SWLEX_SW_OBJECT_KEYWORD	O
)	O
|	O
(	O
SWLEX_SW_EXTENDED_KEYWORD	O
)	O
)	O
)	O
{	O
*	O
keytype	*(int)
=	O
SWLEX_KEYTYPE_AMBIG_OE	int
;	O
}	O
if	O
(	O
(	O
(	O
keyword_ptr	*(struct(*(char),int))
+	O
lexuser_keyword_offset	int
)	O
->	O
flag	int
)	O
&	O
SWLEX_SW_OBJECT_KEYWORD	O
)	O
{	O
object_keyword	*(char)
=	O
(	O
keyword_ptr	*(struct(*(char),int))
+	O
lexuser_keyword_offset	int
)	O
->	O
name	*(char)
;	O
if	O
(	O
(	O
*	O
keytype	*(int)
)	O
<	O
0	int
)	O
*	O
keytype	*(int)
=	O
SWLEX_KEYTYPE_OBJECT	int
;	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
"distribution"	*(char)
,	O
object_keyword	*(char)
)	O
)	O
{	O
return	O
SW_OK_DISTRIBUTION	int
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
"installed_software"	*(char)
,	O
object_keyword	*(char)
)	O
)	O
{	O
return	O
SW_OK_INSTALLED_SOFTWARE	int
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
"category"	*(char)
,	O
object_keyword	*(char)
)	O
)	O
{	O
return	O
SW_OK_CATEGORY	int
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
"bundle"	*(char)
,	O
object_keyword	*(char)
)	O
)	O
{	O
return	O
SW_OK_BUNDLE	int
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
"product"	*(char)
,	O
object_keyword	*(char)
)	O
)	O
{	O
return	O
SW_OK_PRODUCT	int
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
"subproduct"	*(char)
,	O
object_keyword	*(char)
)	O
)	O
{	O
return	O
SW_OK_SUBPRODUCT	int
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
"fileset"	*(char)
,	O
object_keyword	*(char)
)	O
)	O
{	O
return	O
SW_OK_FILESET	int
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
"control_file"	*(char)
,	O
object_keyword	*(char)
)	O
)	O
{	O
if	O
(	O
(	O
*	O
keytype	*(int)
)	O
<	O
0	int
)	O
*	O
keytype	*(int)
=	O
SWLEX_KEYTYPE_AMBIG	int
;	O
return	O
SW_OK_CONTROL_FILE	int
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
"file"	*(char)
,	O
object_keyword	*(char)
)	O
)	O
{	O
if	O
(	O
(	O
*	O
keytype	*(int)
)	O
<	O
0	int
)	O
*	O
keytype	*(int)
=	O
SWLEX_KEYTYPE_AMBIG	int
;	O
return	O
SW_OK_FILE	int
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
"vendor"	*(char)
,	O
object_keyword	*(char)
)	O
)	O
{	O
return	O
SW_OK_VENDOR	int
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
"media"	*(char)
,	O
object_keyword	*(char)
)	O
)	O
{	O
return	O
SW_OK_MEDIA	int
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
"host"	*(char)
,	O
object_keyword	*(char)
)	O
)	O
{	O
return	O
SW_OK_HOST	int
;	O
}	O
else	O
{	O
return	O
-	O
1	int
;	O
}	O
}	O
else	O
if	O
(	O
(	O
(	O
keyword_ptr	*(struct(*(char),int))
+	O
lexuser_keyword_offset	int
)	O
->	O
flag	int
)	O
&	O
SWLEX_RPM_ATTRIBUTE_KEYWORD	O
)	O
{	O
if	O
(	O
(	O
*	O
keytype	*(int)
)	O
<	O
0	int
)	O
{	O
*	O
keytype	*(int)
=	O
SWLEX_KEYTYPE_RPM	int
;	O
}	O
return	O
SW_RPM_KEYWORD	int
;	O
}	O
else	O
if	O
(	O
(	O
(	O
keyword_ptr	*(struct(*(char),int))
+	O
lexuser_keyword_offset	int
)	O
->	O
flag	int
)	O
==	O
SWLEX_SW_EXTENDED_KEYWORD	O
)	O
{	O
if	O
(	O
(	O
*	O
keytype	*(int)
)	O
<	O
0	int
)	O
{	O
*	O
keytype	*(int)
=	O
SWLEX_KEYTYPE_EXT	int
;	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"internal error in swlex_supp\n"	*(char)
)	O
;	O
}	O
return	O
SW_EXT_KEYWORD	int
;	O
}	O
else	O
{	O
if	O
(	O
(	O
*	O
keytype	*(int)
)	O
<	O
0	int
)	O
*	O
keytype	*(int)
=	O
SWLEX_KEYTYPE_ATTR	int
;	O
return	O
SW_ATTRIBUTE_KEYWORD	int
;	O
}	O
}	O
else	O
{	O
*	O
keytype	*(int)
=	O
SWLEX_KEYTYPE_ATTR	int
;	O
return	O
-	O
1	int
;	O
}	O
}	O
int	O
handle_termination	(char,*(struct(*(char),*(char),int,int,int,char,int)),*(char),*(char))->(int)
(	O
char	O
termch	char
,	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
strb	*(struct(*(char),*(char),int,int,int,char,int))
,	O
char	O
*	O
str	*(char)
,	O
char	O
*	O
loc	*(char)
)	O
{	O
int	O
len	int
,	O
i	int
=	O
0	int
,	O
j	int
=	O
0	int
;	O
char	O
*	O
p	*(char)
;	O
strob_catstr	(*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(*(char))
(	O
strb	*(struct(*(char),*(char),int,int,int,char,int))
,	O
str	*(char)
)	O
;	O
p	*(char)
=	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
strb	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
p	*(char)
)	O
;	O
if	O
(	O
len	int
==	O
1	int
)	O
return	O
1	int
;	O
if	O
(	O
termch	char
==	O
'\n'	O
&&	O
p	*(char)
[	O
len	int
-	O
1	int
]	O
==	O
'\n'	O
)	O
return	O
1	int
;	O
i	int
=	O
len	int
-	O
2	int
;	O
while	O
(	O
i	int
>=	O
0	int
&&	O
p	*(char)
[	O
i	int
]	O
==	O
'\\'	O
)	O
{	O
j	int
++	O
;	O
i	int
--	O
;	O
}	O
if	O
(	O
j	int
==	O
1	int
||	O
j	int
%	O
2	int
)	O
{	O
return	O
0	int
;	O
}	O
else	O
{	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
is_keyword	(*(char))->(int)
(	O
char	O
*	O
string	*(char)
)	O
{	O
struct	O
swbis_keyword	struct(*(char),int)
*	O
ptr	*(char)
=	O
sw_keywords	array(struct(*(char),int))
;	O
while	O
(	O
ptr	*(char)
->	O
name	*(char)
!=	O
NULL	O
)	O
{	O
if	O
(	O
strchr	(*(char),int)->(*(char))
(	O
string	*(char)
,	O
(	O
int	O
)	O
(	O
'.'	O
)	O
)	O
)	O
{	O
if	O
(	O
fnmatch	(*(char),*(char),int)->(int)
(	O
ptr	*(char)
->	O
name	*(char)
,	O
string	*(char)
,	O
0	int
)	O
==	O
0	int
)	O
{	O
return	O
(	O
int	O
)	O
(	O
ptr	*(char)
-	O
sw_keywords	array(struct(*(char),int))
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
ptr	*(char)
->	O
name	*(char)
,	O
string	*(char)
)	O
==	O
0	int
)	O
{	O
return	O
(	O
int	O
)	O
(	O
ptr	*(char)
-	O
sw_keywords	array(struct(*(char),int))
)	O
;	O
}	O
}	O
ptr	*(char)
++	O
;	O
}	O
return	O
-	O
1	int
;	O
}	O
int	O
keyword_check	(*(char))->(int)
(	O
char	O
*	O
string	*(char)
)	O
{	O
int	O
lexuser_keyword_offset	int
=	O
-	O
1	int
;	O
struct	O
swbis_keyword	struct(*(char),int)
*	O
keyword_ptr	*(struct(*(char),int))
=	O
sw_keywords	array(struct(*(char),int))
;	O
lexuser_keyword_offset	int
=	O
is_keyword	(*(char))->(int)
(	O
string	*(char)
)	O
;	O
if	O
(	O
lexuser_keyword_offset	int
>=	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
" * KEYWORD FOUND * %s\n"	*(char)
,	O
string	*(char)
)	O
;	O
if	O
(	O
(	O
(	O
keyword_ptr	*(struct(*(char),int))
+	O
lexuser_keyword_offset	int
)	O
->	O
flag	int
)	O
&	O
SWLEX_SW_ATTRIBUTE_KEYWORD	O
)	O
{	O
printf	(*(char))->(int)
(	O
"IS SW ATTRIBUTE KEYWORD"	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
(	O
(	O
keyword_ptr	*(struct(*(char),int))
+	O
lexuser_keyword_offset	int
)	O
->	O
flag	int
)	O
&	O
SWLEX_RPM_ATTRIBUTE_KEYWORD	O
)	O
{	O
printf	(*(char))->(int)
(	O
"IS RPM ATTRIBUTE KEYWORD"	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
(	O
(	O
keyword_ptr	*(struct(*(char),int))
+	O
lexuser_keyword_offset	int
)	O
->	O
flag	int
)	O
&	O
SWLEX_SW_OBJECT_KEYWORD	O
)	O
{	O
printf	(*(char))->(int)
(	O
"IS SW OBJECT KEYWORD"	*(char)
)	O
;	O
}	O
else	O
{	O
printf	(*(char))->(int)
(	O
"SYNTAX ERROR"	*(char)
)	O
;	O
}	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
" * KEYWORD _*NOT*_ FOUND * %s\n"	*(char)
,	O
string	*(char)
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
swlex_squash_trailing_white_space	(*(char))->(int)
(	O
char	O
*	O
s	*(struct(*(char),*(char),int,int,int,char,int))
)	O
{	O
int	O
i	int
;	O
i	int
=	O
strlen	(*(char))->(long)
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
)	O
-	O
1	int
;	O
while	O
(	O
i	int
>=	O
0	int
&&	O
isspace	(int)->(int)
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
[	O
i	int
]	O
)	O
)	O
s	*(struct(*(char),*(char),int,int,int,char,int))
[	O
i	int
--	O
]	O
=	O
'\0'	O
;	O
return	O
0	int
;	O
}	O
