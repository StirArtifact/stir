extern	O
int	O
jump_sline	int
;	O
extern	O
int	O
squished	int
;	O
extern	O
int	O
screen_trashed	int
;	O
extern	O
int	O
sc_width	int
,	O
sc_height	int
;	O
extern	O
int	O
show_attn	int
;	O
extern	O
int	O
top_scroll	int
;	O
public	O
void	O
jump_forw	()->(void)
(	O
)	O
{	O
POSITION	long
pos	long
;	O
POSITION	long
end_pos	long
;	O
if	O
(	O
ch_end_seek	()->(int)
(	O
)	O
)	O
{	O
error	(*(char),*(union(*(char),int,long)))->(void)
(	O
"Cannot seek to end of file"	*(char)
,	O
NULL_PARG	O
)	O
;	O
return	O
;	O
}	O
lastmark	()->(void)
(	O
)	O
;	O
pos_clear	()->(void)
(	O
)	O
;	O
end_pos	long
=	O
ch_tell	()->(long)
(	O
)	O
;	O
pos	long
=	O
back_line	(long)->(long)
(	O
end_pos	long
)	O
;	O
if	O
(	O
pos	long
==	O
NULL_POSITION	O
)	O
jump_loc	(long,int)->(void)
(	O
ch_zero	O
(	O
)	O
,	O
sc_height	int
-	O
1	int
)	O
;	O
else	O
{	O
jump_loc	(long,int)->(void)
(	O
pos	long
,	O
sc_height	int
-	O
1	int
)	O
;	O
if	O
(	O
position	(int)->(long)
(	O
sc_height	int
-	O
1	int
)	O
!=	O
end_pos	long
)	O
repaint	()->(void)
(	O
)	O
;	O
}	O
}	O
public	O
void	O
jump_forw_buffered	()->(void)
(	O
)	O
{	O
POSITION	long
end	long
;	O
if	O
(	O
ch_end_buffer_seek	()->(int)
(	O
)	O
)	O
{	O
error	(*(char),*(union(*(char),int,long)))->(void)
(	O
"Cannot seek to end of buffers"	*(char)
,	O
NULL_PARG	O
)	O
;	O
return	O
;	O
}	O
end	long
=	O
ch_tell	()->(long)
(	O
)	O
;	O
if	O
(	O
end	long
!=	O
NULL_POSITION	O
&&	O
end	long
>	O
0	int
)	O
jump_line_loc	(long,int)->(void)
(	O
end	long
-	O
1	int
,	O
sc_height	int
-	O
1	int
)	O
;	O
}	O
public	O
void	O
jump_back	(long)->(void)
(	O
linenum	long
)	O
LINENUM	long
linenum	long
;	O
{	O
POSITION	long
pos	long
;	O
PARG	union(*(char),int,long)
parg	union(*(char),int,long)
;	O
pos	long
=	O
find_pos	(long)->(long)
(	O
linenum	long
)	O
;	O
if	O
(	O
pos	long
!=	O
NULL_POSITION	O
&&	O
ch_seek	(long)->(int)
(	O
pos	long
)	O
==	O
0	int
)	O
{	O
if	O
(	O
show_attn	int
)	O
set_attnpos	(long)->(void)
(	O
pos	long
)	O
;	O
jump_loc	(long,int)->(void)
(	O
pos	long
,	O
jump_sline	int
)	O
;	O
}	O
else	O
if	O
(	O
linenum	long
<=	O
1	int
&&	O
ch_beg_seek	()->(int)
(	O
)	O
==	O
0	int
)	O
{	O
jump_loc	(long,int)->(void)
(	O
ch_tell	()->(long)
(	O
)	O
,	O
jump_sline	int
)	O
;	O
error	(*(char),*(union(*(char),int,long)))->(void)
(	O
"Cannot seek to beginning of file"	*(char)
,	O
NULL_PARG	O
)	O
;	O
}	O
else	O
{	O
parg	union(*(char),int,long)
.	O
p_linenum	long
=	O
linenum	long
;	O
error	(*(char),*(union(*(char),int,long)))->(void)
(	O
"Cannot seek to line number %n"	*(char)
,	O
&	O
parg	union(*(char),int,long)
)	O
;	O
}	O
}	O
public	O
void	O
repaint	()->(void)
(	O
)	O
{	O
struct	O
scrpos	struct(long,int)
scrpos	struct(long,int)
;	O
get_scrpos	(*(struct(long,int)),int)->(void)
(	O
&	O
scrpos	struct(long,int)
,	O
TOP	O
)	O
;	O
pos_clear	()->(void)
(	O
)	O
;	O
if	O
(	O
scrpos	struct(long,int)
.	O
pos	long
==	O
NULL_POSITION	O
)	O
jump_loc	(long,int)->(void)
(	O
ch_zero	O
(	O
)	O
,	O
1	int
)	O
;	O
else	O
jump_loc	(long,int)->(void)
(	O
scrpos	struct(long,int)
.	O
pos	long
,	O
scrpos	struct(long,int)
.	O
ln	int
)	O
;	O
}	O
public	O
void	O
jump_percent	(int,long)->(void)
(	O
percent	int
,	O
fraction	long
)	O
int	O
percent	int
;	O
long	O
fraction	long
;	O
{	O
POSITION	long
pos	long
,	O
len	int
;	O
if	O
(	O
(	O
len	int
=	O
ch_length	()->(long)
(	O
)	O
)	O
==	O
NULL_POSITION	O
)	O
{	O
ierror	(*(char),*(union(*(char),int,long)))->(void)
(	O
"Determining length of file"	*(char)
,	O
NULL_PARG	O
)	O
;	O
ch_end_seek	()->(int)
(	O
)	O
;	O
}	O
if	O
(	O
(	O
len	int
=	O
ch_length	()->(long)
(	O
)	O
)	O
==	O
NULL_POSITION	O
)	O
{	O
error	(*(char),*(union(*(char),int,long)))->(void)
(	O
"Don't know length of file"	*(char)
,	O
NULL_PARG	O
)	O
;	O
return	O
;	O
}	O
pos	long
=	O
percent_pos	(long,int,long)->(long)
(	O
len	int
,	O
percent	int
,	O
fraction	long
)	O
;	O
if	O
(	O
pos	long
>=	O
len	int
)	O
pos	long
=	O
len	int
-	O
1	int
;	O
jump_line_loc	(long,int)->(void)
(	O
pos	long
,	O
jump_sline	int
)	O
;	O
}	O
public	O
void	O
jump_line_loc	(long,int)->(void)
(	O
pos	long
,	O
sline	int
)	O
POSITION	long
pos	long
;	O
int	O
sline	int
;	O
{	O
int	O
c	int
;	O
if	O
(	O
ch_seek	(long)->(int)
(	O
pos	long
)	O
==	O
0	int
)	O
{	O
while	O
(	O
(	O
c	int
=	O
ch_back_get	()->(int)
(	O
)	O
)	O
!=	O
'\n'	O
&&	O
c	int
!=	O
EOI	O
)	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
(	O
void	O
)	O
ch_forw_get	()->(int)
(	O
)	O
;	O
pos	long
=	O
ch_tell	()->(long)
(	O
)	O
;	O
}	O
if	O
(	O
show_attn	int
)	O
set_attnpos	(long)->(void)
(	O
pos	long
)	O
;	O
jump_loc	(long,int)->(void)
(	O
pos	long
,	O
sline	int
)	O
;	O
}	O
public	O
void	O
jump_loc	(long,int)->(void)
(	O
pos	long
,	O
sline	int
)	O
POSITION	long
pos	long
;	O
int	O
sline	int
;	O
{	O
int	O
nline	int
;	O
int	O
sindex	int
;	O
POSITION	long
tpos	long
;	O
POSITION	long
bpos	long
;	O
sindex	int
=	O
sindex_from_sline	(int)->(int)
(	O
sline	int
)	O
;	O
if	O
(	O
(	O
nline	int
=	O
onscreen	(long)->(int)
(	O
pos	long
)	O
)	O
>=	O
0	int
)	O
{	O
nline	int
-=	O
sindex	int
;	O
if	O
(	O
nline	int
>	O
0	int
)	O
forw	(int,long,int,int,int)->(void)
(	O
nline	int
,	O
position	(int)->(long)
(	O
BOTTOM_PLUS_ONE	O
)	O
,	O
1	int
,	O
0	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
nline	int
<	O
0	int
)	O
back	(int,long,int,int)->(void)
(	O
-	O
nline	int
,	O
position	(int)->(long)
(	O
TOP	O
)	O
,	O
1	int
,	O
0	int
)	O
;	O
if	O
(	O
show_attn	int
)	O
repaint_hilite	(int)->(void)
(	O
1	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
ch_seek	(long)->(int)
(	O
pos	long
)	O
)	O
{	O
error	(*(char),*(union(*(char),int,long)))->(void)
(	O
"Cannot seek to that file position"	*(char)
,	O
NULL_PARG	O
)	O
;	O
return	O
;	O
}	O
tpos	long
=	O
position	(int)->(long)
(	O
TOP	O
)	O
;	O
bpos	long
=	O
position	(int)->(long)
(	O
BOTTOM_PLUS_ONE	O
)	O
;	O
if	O
(	O
tpos	long
==	O
NULL_POSITION	O
||	O
pos	long
>=	O
tpos	long
)	O
{	O
for	O
(	O
nline	int
=	O
0	int
;	O
nline	int
<	O
sindex	int
;	O
nline	int
++	O
)	O
{	O
if	O
(	O
bpos	long
!=	O
NULL_POSITION	O
&&	O
pos	long
<=	O
bpos	long
)	O
{	O
forw	(int,long,int,int,int)->(void)
(	O
sc_height	int
-	O
sindex	int
+	O
nline	int
-	O
1	int
,	O
bpos	long
,	O
1	int
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
show_attn	int
)	O
repaint_hilite	(int)->(void)
(	O
1	int
)	O
;	O
return	O
;	O
}	O
pos	long
=	O
back_line	(long)->(long)
(	O
pos	long
)	O
;	O
if	O
(	O
pos	long
==	O
NULL_POSITION	O
)	O
{	O
break	O
;	O
}	O
}	O
lastmark	()->(void)
(	O
)	O
;	O
squished	int
=	O
0	int
;	O
screen_trashed	int
=	O
0	int
;	O
forw	(int,long,int,int,int)->(void)
(	O
sc_height	int
-	O
1	int
,	O
pos	long
,	O
1	int
,	O
0	int
,	O
sindex	int
-	O
nline	int
)	O
;	O
}	O
else	O
{	O
for	O
(	O
nline	int
=	O
sindex	int
;	O
nline	int
<	O
sc_height	int
-	O
1	int
;	O
nline	int
++	O
)	O
{	O
pos	long
=	O
forw_line	(long)->(long)
(	O
pos	long
)	O
;	O
if	O
(	O
pos	long
==	O
NULL_POSITION	O
)	O
{	O
break	O
;	O
}	O
pos	long
=	O
next_unfiltered	(long)->(long)
(	O
pos	long
)	O
;	O
if	O
(	O
pos	long
>=	O
tpos	long
)	O
{	O
back	(int,long,int,int)->(void)
(	O
nline	int
+	O
1	int
,	O
tpos	long
,	O
1	int
,	O
0	int
)	O
;	O
if	O
(	O
show_attn	int
)	O
repaint_hilite	(int)->(void)
(	O
1	int
)	O
;	O
return	O
;	O
}	O
}	O
lastmark	()->(void)
(	O
)	O
;	O
if	O
(	O
!	O
top_scroll	int
)	O
clear	()->(void)
(	O
)	O
;	O
else	O
home	()->(void)
(	O
)	O
;	O
screen_trashed	int
=	O
0	int
;	O
add_back_pos	(long)->(void)
(	O
pos	long
)	O
;	O
back	(int,long,int,int)->(void)
(	O
sc_height	int
-	O
1	int
,	O
pos	long
,	O
1	int
,	O
0	int
)	O
;	O
}	O
}	O
