char	O
*	O
program_name	*(char)
;	O
int	O
debugging_enabled	int
=	O
0	int
;	O
long	O
time_warp_leniency	long
=	O
60	int
;	O
long	O
time_warp_suspicious	long
=	O
31536000	int
;	O
int	O
print_file_problems	int
=	O
0	int
;	O
int	O
print_year	int
=	O
0	int
;	O
int	O
print_seconds	int
=	O
0	int
;	O
time_t	long
last_time	long
=	O
0	int
;	O
char	O
*	O
last_event	*(char)
=	O
NULL	O
;	O
time_t	long
last_event_time	long
;	O
long	O
num_lines_to_print	long
=	O
-	O
1	int
;	O
int	O
truncate_ftp_entries	int
=	O
1	int
;	O
int	O
print_which_recs	int
=	O
0	int
;	O
int	O
print_name_len	int
=	O
my_min	O
(	O
NAME_LEN	O
,	O
8	int
)	O
;	O
int	O
print_tty_len	int
=	O
my_min	O
(	O
TTY_LEN	O
,	O
12	int
)	O
;	O
int	O
print_host_len	int
=	O
my_min	O
(	O
HOST_LEN	O
,	O
16	int
)	O
;	O
struct	O
hashtab	struct(long,long,long,*(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int))))),int)
*	O
names	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
=	O
NULL	O
;	O
struct	O
hashtab	struct(long,long,long,*(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int))))),int)
*	O
login_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
=	O
NULL	O
;	O
struct	O
login_data	struct(long,short)
{	O
time_t	long
time	struct(long,long)
;	O
short	O
fake_entry	short
;	O
}	O
;	O
void	O
log_everyone_in	(long)->(void)
(	O
time_t	long
)	O
;	O
void	O
update_system_time	(long)->(void)
(	O
time_t	long
)	O
;	O
void	O
log_out	(*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))),short)->(void)
(	O
struct	O
utmp	struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))
*	O
entry	*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char)))
,	O
short	O
fake_flag	short
)	O
;	O
void	O
log_in	(*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))))->(void)
(	O
struct	O
utmp	struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))
*	O
)	O
;	O
void	O
print_record	(*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))),long,*(char),*(char),*(char))->(void)
(	O
struct	O
utmp	struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))
*	O
,	O
time_t	long
logout_time	long
,	O
char	O
*	O
,	O
char	O
*	O
,	O
char	O
*	O
)	O
;	O
void	O
display_date	(long)->(void)
(	O
time_t	long
now	long
)	O
;	O
struct	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
sigact	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
RETSIGTYPE	void
handler	(int)->(void)
(	O
int	O
)	O
;	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array(*(char))
[	O
]	O
)	O
{	O
int	O
c	int
=	O
1	int
;	O
int	O
other_wtmp_file_specified	int
=	O
0	int
;	O
program_name	*(char)
=	O
argv	array(*(char))
[	O
0	int
]	O
;	O
utmp_init	(int)->(void)
(	O
1	int
)	O
;	O
for	O
(	O
;	O
c	int
<	O
argc	int
;	O
c	int
++	O
)	O
{	O
if	O
(	O
argv	array(*(char))
[	O
c	int
]	O
[	O
0	int
]	O
==	O
'-'	O
&&	O
isdigit	(int)->(int)
(	O
argv	array(*(char))
[	O
c	int
]	O
[	O
1	int
]	O
)	O
)	O
{	O
int	O
d	int
;	O
num_lines_to_print	long
=	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
argv	array(*(char))
[	O
c	int
]	O
+	O
1	int
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
10	int
)	O
;	O
if	O
(	O
num_lines_to_print	long
<	O
1	int
)	O
fatal	(*(char))->(void)
(	O
"number of lines to print must be positive and non-zero"	*(char)
)	O
;	O
for	O
(	O
d	int
=	O
c	int
;	O
d	int
;	O
d	int
--	O
)	O
argv	array(*(char))
[	O
d	int
]	O
=	O
argv	array(*(char))
[	O
d	int
-	O
1	int
]	O
;	O
argc	int
--	O
;	O
argv	array(*(char))
++	O
;	O
c	int
--	O
;	O
}	O
}	O
while	O
(	O
1	int
)	O
{	O
int	O
option_index	int
=	O
0	int
;	O
static	O
struct	O
option	struct(*(char),int,*(int),int)
long_options	array(struct(*(char),int,*(int),int))
[	O
]	O
=	O
{	O
{	O
"complain"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
1	int
}	O
,	O
{	O
"lines"	*(char)
,	O
required_argument	int
,	O
NULL	O
,	O
3	int
}	O
,	O
{	O
"debug"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
4	int
}	O
,	O
{	O
"tw-leniency"	*(char)
,	O
required_argument	int
,	O
NULL	O
,	O
5	int
}	O
,	O
{	O
"version"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
6	int
}	O
,	O
{	O
"help"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
7	int
}	O
,	O
{	O
"file"	*(char)
,	O
required_argument	int
,	O
NULL	O
,	O
8	int
}	O
,	O
{	O
"no-truncate-ftp-entries"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
9	int
}	O
,	O
{	O
"all-records"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
10	int
}	O
,	O
{	O
"print-year"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
12	int
}	O
,	O
{	O
"more-records"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
13	int
}	O
,	O
{	O
"tw-suspicious"	*(char)
,	O
required_argument	int
,	O
NULL	O
,	O
14	int
}	O
,	O
{	O
"print-seconds"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
15	int
}	O
,	O
{	O
"wide"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
16	int
}	O
,	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
}	O
}	O
;	O
c	int
=	O
getopt_long	(int,*(*(char)),*(char),*(struct(*(char),int,*(int),int)),*(int))->(int)
(	O
argc	int
,	O
argv	array(*(char))
,	O
"a"	*(char)
"f:n:s"	*(char)
"x"	*(char)
"wyV"	*(char)
,	O
long_options	array(struct(*(char),int,*(int),int))
,	O
&	O
option_index	int
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
1	int
:	O
print_file_problems	int
=	O
1	int
;	O
break	O
;	O
case	O
'n'	O
:	O
case	O
3	int
:	O
num_lines_to_print	long
=	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
optarg	*(char)
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
10	int
)	O
;	O
if	O
(	O
num_lines_to_print	long
<	O
1	int
)	O
fatal	(*(char))->(void)
(	O
"number of lines to print must be positive and non-zero"	*(char)
)	O
;	O
break	O
;	O
case	O
4	int
:	O
debugging_enabled	int
=	O
1	int
;	O
print_file_problems	int
=	O
1	int
;	O
break	O
;	O
case	O
5	int
:	O
time_warp_leniency	long
=	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
optarg	*(char)
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
10	int
)	O
;	O
if	O
(	O
time_warp_leniency	long
<	O
0	int
)	O
fatal	(*(char))->(void)
(	O
"time warp leniency value has to be non-negative"	*(char)
)	O
;	O
break	O
;	O
case	O
'V'	O
:	O
case	O
6	int
:	O
printf	(*(char))->(int)
(	O
"%s: GNU Accounting Utilities (release %s)\n"	*(char)
,	O
program_name	*(char)
,	O
VERSION_STRING	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
case	O
'f'	O
:	O
case	O
8	int
:	O
add_utmp_file	(*(char))->(void)
(	O
optarg	*(char)
)	O
;	O
other_wtmp_file_specified	int
=	O
1	int
;	O
break	O
;	O
case	O
9	int
:	O
truncate_ftp_entries	int
=	O
0	int
;	O
break	O
;	O
case	O
'a'	O
:	O
case	O
10	int
:	O
print_which_recs	int
=	O
2	int
;	O
break	O
;	O
case	O
'y'	O
:	O
case	O
12	int
:	O
print_year	int
=	O
1	int
;	O
break	O
;	O
case	O
'x'	O
:	O
case	O
13	int
:	O
print_which_recs	int
=	O
1	int
;	O
break	O
;	O
case	O
14	int
:	O
time_warp_suspicious	long
=	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
optarg	*(char)
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
10	int
)	O
;	O
if	O
(	O
time_warp_suspicious	long
<	O
0	int
)	O
fatal	(*(char))->(void)
(	O
"time warp suspicious value has to be non-negative"	*(char)
)	O
;	O
if	O
(	O
time_warp_suspicious	long
<=	O
time_warp_leniency	long
)	O
fatal	(*(char))->(void)
(	O
"time warp suspicious value has to greater than the time warp leniency value"	*(char)
)	O
;	O
break	O
;	O
case	O
's'	O
:	O
case	O
15	int
:	O
print_seconds	int
=	O
1	int
;	O
break	O
;	O
case	O
'w'	O
:	O
case	O
16	int
:	O
print_name_len	int
=	O
NAME_LEN	O
;	O
print_tty_len	int
=	O
TTY_LEN	O
;	O
print_host_len	int
=	O
HOST_LEN	O
;	O
break	O
;	O
case	O
'h'	O
:	O
case	O
7	int
:	O
default	O
:	O
give_usage	()->(void)
(	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
if	O
(	O
optind	int
<	O
argc	int
)	O
{	O
names	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
=	O
hashtab_init	(int)->(*(struct(long,long,long,*(*(struct`)),int)))
(	O
0	int
)	O
;	O
while	O
(	O
optind	int
<	O
argc	int
)	O
{	O
char	O
*	O
string	*(char)
;	O
hashtab_create	(*(struct(long,long,long,*(*(struct`)),int)),*(void),int)->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
names	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
argv	array(*(char))
[	O
optind	int
]	O
,	O
0	int
)	O
;	O
string	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
(	O
strlen	(*(char))->(long)
(	O
argv	array(*(char))
[	O
optind	int
]	O
)	O
+	O
4	int
)	O
*	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
string	*(char)
,	O
"tty%s"	*(char)
,	O
argv	array(*(char))
[	O
optind	int
]	O
)	O
;	O
hashtab_create	(*(struct(long,long,long,*(*(struct`)),int)),*(void),int)->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
names	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
string	*(char)
,	O
0	int
)	O
;	O
free	(*(void))->(void)
(	O
string	*(char)
)	O
;	O
optind	int
++	O
;	O
if	O
(	O
!	O
print_which_recs	int
)	O
print_which_recs	int
=	O
1	int
;	O
}	O
if	O
(	O
debugging_enabled	int
)	O
hashtab_dump_keys	(*(struct(long,long,long,*(*(struct`)),int)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
names	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
stddebug	O
)	O
;	O
}	O
if	O
(	O
!	O
other_wtmp_file_specified	int
)	O
add_utmp_file	(*(char))->(void)
(	O
WTMP_FILE_LOC	*(char)
)	O
;	O
login_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
=	O
hashtab_init	(int)->(*(struct(long,long,long,*(*(struct`)),int)))
(	O
0	int
)	O
;	O
parse_entries	()->(void)
(	O
)	O
;	O
(	O
void	O
)	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"\nwtmp begins "	*(char)
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
display_date	(long)->(void)
(	O
last_time	long
)	O
;	O
(	O
void	O
)	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'\n'	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
void	O
give_usage	()->(void)
(	O
void	O
)	O
{	O
(	O
void	O
)	O
printf	(*(char))->(int)
(	O
"                Usage: %s [-"	*(char)
"a"	*(char)
"hs"	*(char)
"x"	*(char)
"yV] [-<lines>] [-n <lines>] [-f <file>] [people] [ttys] ...\n                [--lines <num>] [--file <file>] [--complain] [--debug]\n                [--version] [--tw-leniency <value>] [--tw-suspicious <value>]\n                [--no-truncate-ftp-entries] [--print-year] [--print-seconds]\n                "	*(char)
"[--more-records] [--all-records] "	*(char)
"[--help]\n"	*(char)
,	O
program_name	*(char)
)	O
;	O
print_wtmp_file_location	()->(void)
(	O
)	O
;	O
}	O
void	O
update_system_time	(long)->(void)
(	O
time_t	long
the_time	long
)	O
{	O
struct	O
hashtab_order	struct(int,*(struct),*(struct))
ho	*(struct(int,*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
;	O
struct	O
hashtab_elem	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct))
*	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
;	O
for	O
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_first	(*(struct(long,long,long,*(*(struct`)),int)),*(struct(int,*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
login_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
&	O
ho	*(struct(int,*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
!=	O
NULL	O
;	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_next	(*(struct(int,*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
&	O
ho	*(struct(int,*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
)	O
{	O
struct	O
login_data	struct(long,short)
*	O
l	*(struct(long,short))
=	O
hashtab_get_value	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(void))
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
l	*(struct(long,short))
->	O
time	struct(long,long)
+=	O
the_time	long
;	O
}	O
}	O
void	O
log_everyone_in	(long)->(void)
(	O
time_t	long
the_time	long
)	O
{	O
struct	O
hashtab_order	struct(int,*(struct),*(struct))
ho	*(struct(int,*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
;	O
struct	O
hashtab_elem	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct))
*	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
;	O
for	O
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_first	(*(struct(long,long,long,*(*(struct`)),int)),*(struct(int,*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
login_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
&	O
ho	*(struct(int,*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
!=	O
NULL	O
;	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_next	(*(struct(int,*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
&	O
ho	*(struct(int,*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
)	O
{	O
struct	O
login_data	struct(long,short)
*	O
l	*(struct(long,short))
=	O
hashtab_get_value	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(void))
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
if	O
(	O
debugging_enabled	int
&&	O
(	O
!	O
l	*(struct(long,short))
->	O
fake_entry	short
)	O
)	O
{	O
struct	O
utmp	struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))
this	struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))
;	O
char	O
*	O
ttyname	*(char)
=	O
hashtab_get_key	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(void))
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
this	struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))
,	O
0	int
,	O
sizeof	O
(	O
this	struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))
)	O
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
this	struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))
.	O
ut_line	array(char)
,	O
ttyname	*(char)
,	O
TTY_LEN	O
)	O
;	O
this	struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))
.	O
ut_time	O
=	O
the_time	long
;	O
print_record	(*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))),long,*(char),*(char),*(char))->(void)
(	O
&	O
this	struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))
,	O
l	*(struct(long,short))
->	O
time	struct(long,long)
,	O
NULL	O
,	O
NULL	O
,	O
"unpaired"	*(char)
)	O
;	O
}	O
hashtab_delete	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(void)
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
}	O
}	O
void	O
log_out	(*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))),short)->(void)
(	O
struct	O
utmp	struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))
*	O
entry	*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char)))
,	O
short	O
fake_flag	short
)	O
{	O
struct	O
hashtab_elem	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct))
*	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
;	O
if	O
(	O
entry	*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char)))
->	O
ut_line	array(char)
[	O
0	int
]	O
==	O
'\0'	O
)	O
{	O
if	O
(	O
print_file_problems	int
)	O
{	O
utmp_print_file_and_line	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
stddebug	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stddebug	O
,	O
": problem: trying to hash rec with ut_line == NULL\n"	*(char)
)	O
;	O
}	O
return	O
;	O
}	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_find	(*(struct(long,long,long,*(*(struct`)),int)),*(void),int)->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
login_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
entry	*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char)))
->	O
ut_line	array(char)
,	O
(	O
unsigned	O
int	O
)	O
TTY_LEN	O
)	O
;	O
if	O
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
!=	O
NULL	O
)	O
{	O
struct	O
login_data	struct(long,short)
*	O
l	*(struct(long,short))
=	O
hashtab_get_value	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(void))
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
if	O
(	O
(	O
!	O
l	*(struct(long,short))
->	O
fake_entry	short
)	O
&&	O
print_file_problems	int
)	O
{	O
char	O
*	O
ttyname	*(char)
=	O
hashtab_get_key	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(void))
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
utmp_print_file_and_line	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
stddebug	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stddebug	O
,	O
": problem: duplicate record for line `%.*s'\n"	*(char)
,	O
TTY_LEN	O
,	O
ttyname	*(char)
)	O
;	O
}	O
l	*(struct(long,short))
->	O
time	struct(long,long)
=	O
entry	*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char)))
->	O
ut_time	O
;	O
l	*(struct(long,short))
->	O
fake_entry	short
=	O
fake_flag	short
;	O
return	O
;	O
}	O
else	O
{	O
struct	O
login_data	struct(long,short)
l	*(struct(long,short))
;	O
l	*(struct(long,short))
.	O
time	struct(long,long)
=	O
entry	*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char)))
->	O
ut_time	O
;	O
l	*(struct(long,short))
.	O
fake_entry	short
=	O
fake_flag	short
;	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_create	(*(struct(long,long,long,*(*(struct`)),int)),*(void),int)->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
login_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
entry	*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char)))
->	O
ut_line	array(char)
,	O
TTY_LEN	O
)	O
;	O
hashtab_set_value	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(void),int)->(void)
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
,	O
&	O
l	*(struct(long,short))
,	O
sizeof	O
(	O
l	*(struct(long,short))
)	O
)	O
;	O
}	O
}	O
void	O
log_in	(*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))))->(void)
(	O
struct	O
utmp	struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))
*	O
entry	*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char)))
)	O
{	O
struct	O
hashtab_elem	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct))
*	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
;	O
if	O
(	O
entry	*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char)))
->	O
ut_line	array(char)
[	O
0	int
]	O
==	O
'\0'	O
)	O
{	O
if	O
(	O
print_file_problems	int
)	O
{	O
utmp_print_file_and_line	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
stddebug	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stddebug	O
,	O
": problem: trying to hash rec with ut_line == NULL\n"	*(char)
)	O
;	O
}	O
return	O
;	O
}	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_find	(*(struct(long,long,long,*(*(struct`)),int)),*(void),int)->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
login_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
entry	*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char)))
->	O
ut_line	array(char)
,	O
(	O
unsigned	O
int	O
)	O
TTY_LEN	O
)	O
;	O
if	O
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
!=	O
NULL	O
)	O
{	O
struct	O
login_data	struct(long,short)
*	O
l	*(struct(long,short))
=	O
hashtab_get_value	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(void))
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
if	O
(	O
l	*(struct(long,short))
->	O
fake_entry	short
&&	O
print_file_problems	int
)	O
{	O
utmp_print_file_and_line	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
stddebug	O
)	O
;	O
(	O
void	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stddebug	O
,	O
": problem: missing logout record for `%.*s'\n"	*(char)
,	O
TTY_LEN	O
,	O
entry	*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char)))
->	O
ut_line	array(char)
)	O
;	O
}	O
print_record	(*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))),long,*(char),*(char),*(char))->(void)
(	O
entry	*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char)))
,	O
l	*(struct(long,short))
->	O
time	struct(long,long)
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
hashtab_delete	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(void)
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
}	O
else	O
{	O
print_record	(*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))),long,*(char),*(char),*(char))->(void)
(	O
entry	*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char)))
,	O
0	int
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
log_out	(*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))),short)->(void)
(	O
entry	*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char)))
,	O
TRUE	int
)	O
;	O
}	O
void	O
print_record	(*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))),long,*(char),*(char),*(char))->(void)
(	O
struct	O
utmp	struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))
*	O
login	(*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))))->(void)
,	O
time_t	long
logout_time	long
,	O
char	O
*	O
replacement_name	*(char)
,	O
char	O
*	O
replacement_tty	*(char)
,	O
char	O
*	O
special_message	*(char)
)	O
{	O
char	O
*	O
print_name	*(char)
;	O
char	O
*	O
print_tty	*(char)
;	O
char	O
sanitized_tty	array(char)
[	O
TTY_LEN	O
]	O
;	O
if	O
(	O
!	O
(	O
(	O
names	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
==	O
NULL	O
)	O
||	O
hashtab_find	(*(struct(long,long,long,*(*(struct`)),int)),*(void),int)->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
names	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
login	(*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))))->(void)
->	O
ut_name	O
,	O
(	O
unsigned	O
int	O
)	O
NAME_LEN	O
)	O
||	O
hashtab_find	(*(struct(long,long,long,*(*(struct`)),int)),*(void),int)->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
names	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
login	(*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))))->(void)
->	O
ut_line	array(char)
,	O
(	O
unsigned	O
int	O
)	O
TTY_LEN	O
)	O
)	O
)	O
return	O
;	O
if	O
(	O
replacement_tty	*(char)
)	O
print_tty	*(char)
=	O
replacement_tty	*(char)
;	O
else	O
if	O
(	O
truncate_ftp_entries	int
&&	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
login	(*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))))->(void)
->	O
ut_line	array(char)
,	O
"ftp"	*(char)
,	O
3	int
)	O
==	O
0	int
)	O
)	O
print_tty	*(char)
=	O
"ftp"	*(char)
;	O
else	O
print_tty	*(char)
=	O
login	(*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))))->(void)
->	O
ut_line	array(char)
;	O
print_name	*(char)
=	O
(	O
replacement_name	*(char)
?	O
replacement_name	*(char)
:	O
login	(*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))))->(void)
->	O
ut_name	O
)	O
;	O
{	O
int	O
i	int
=	O
0	int
;	O
for	O
(	O
;	O
(	O
print_tty	*(char)
[	O
i	int
]	O
!=	O
'\0'	O
)	O
&&	O
(	O
i	int
<	O
TTY_LEN	O
)	O
;	O
i	int
++	O
)	O
sanitized_tty	array(char)
[	O
i	int
]	O
=	O
(	O
isprint	(int)->(int)
(	O
print_tty	*(char)
[	O
i	int
]	O
)	O
&&	O
isascii	(int)->(int)
(	O
print_tty	*(char)
[	O
i	int
]	O
)	O
?	O
print_tty	*(char)
[	O
i	int
]	O
:	O
'?'	O
)	O
;	O
if	O
(	O
i	int
<	O
TTY_LEN	O
)	O
sanitized_tty	array(char)
[	O
i	int
]	O
=	O
'\0'	O
;	O
}	O
(	O
void	O
)	O
printf	(*(char))->(int)
(	O
"%-*.*s %-*.*s "	*(char)
,	O
print_name_len	int
,	O
print_name_len	int
,	O
print_name	*(char)
,	O
print_tty_len	int
,	O
print_tty_len	int
,	O
sanitized_tty	array(char)
)	O
;	O
(	O
void	O
)	O
printf	(*(char))->(int)
(	O
"%-*.*s "	*(char)
,	O
print_host_len	int
,	O
print_host_len	int
,	O
login	(*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))))->(void)
->	O
ut_host	array(char)
)	O
;	O
display_date	(long)->(void)
(	O
login	(*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))))->(void)
->	O
ut_time	O
)	O
;	O
if	O
(	O
special_message	*(char)
)	O
(	O
void	O
)	O
printf	(*(char))->(int)
(	O
"  %s\n"	*(char)
,	O
special_message	*(char)
)	O
;	O
else	O
{	O
char	O
temp_str	array(char)
[	O
16	int
]	O
;	O
int	O
days	int
,	O
hours	int
,	O
minutes	int
,	O
seconds	int
;	O
int	O
diff	int
,	O
use_last_event	int
=	O
0	int
;	O
if	O
(	O
logout_time	long
==	O
0	int
)	O
{	O
logout_time	long
=	O
last_event_time	long
;	O
use_last_event	int
=	O
1	int
;	O
}	O
diff	int
=	O
(	O
int	O
)	O
logout_time	long
-	O
login	(*(struct(short,int,array(char),array(char),array(char),array(char),struct(short,short),int,struct(int,int),array(int),array(char))))->(void)
->	O
ut_time	O
;	O
days	int
=	O
(	O
int	O
)	O
(	O
diff	int
/	O
86400	int
)	O
;	O
diff	int
-=	O
86400	int
*	O
days	int
;	O
hours	int
=	O
(	O
int	O
)	O
(	O
diff	int
/	O
3600	int
)	O
;	O
diff	int
-=	O
3600	int
*	O
hours	int
;	O
minutes	int
=	O
(	O
int	O
)	O
(	O
diff	int
/	O
60	int
)	O
;	O
diff	int
-=	O
60	int
*	O
minutes	int
;	O
seconds	int
=	O
diff	int
;	O
if	O
(	O
days	int
)	O
{	O
if	O
(	O
print_seconds	int
)	O
(	O
void	O
)	O
snprintf	(*(char),long,*(char))->(int)
(	O
temp_str	array(char)
,	O
sizeof	O
(	O
temp_str	array(char)
)	O
,	O
"(%d+%02d:%02d:%02d)"	*(char)
,	O
days	int
,	O
hours	int
,	O
minutes	int
,	O
seconds	int
)	O
;	O
else	O
(	O
void	O
)	O
snprintf	(*(char),long,*(char))->(int)
(	O
temp_str	array(char)
,	O
sizeof	O
(	O
temp_str	array(char)
)	O
,	O
"(%d+%02d:%02d)"	*(char)
,	O
days	int
,	O
hours	int
,	O
minutes	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
print_seconds	int
)	O
(	O
void	O
)	O
snprintf	(*(char),long,*(char))->(int)
(	O
temp_str	array(char)
,	O
sizeof	O
(	O
temp_str	array(char)
)	O
,	O
" (%02d:%02d:%02d)"	*(char)
,	O
hours	int
,	O
minutes	int
,	O
seconds	int
)	O
;	O
else	O
(	O
void	O
)	O
snprintf	(*(char),long,*(char))->(int)
(	O
temp_str	array(char)
,	O
sizeof	O
(	O
temp_str	array(char)
)	O
,	O
" (%02d:%02d)"	*(char)
,	O
hours	int
,	O
minutes	int
)	O
;	O
}	O
if	O
(	O
use_last_event	int
)	O
{	O
if	O
(	O
last_event	*(char)
==	O
NULL	O
)	O
(	O
void	O
)	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"  still logged in\n"	*(char)
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
else	O
(	O
void	O
)	O
printf	(*(char))->(int)
(	O
"- %-5.5s %s\n"	*(char)
,	O
last_event	*(char)
,	O
temp_str	array(char)
)	O
;	O
}	O
else	O
{	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
*	O
tmptr	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
;	O
time_t	long
temp_time	long
=	O
logout_time	long
;	O
tmptr	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
=	O
localtime	(*(long))->(*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))
(	O
&	O
temp_time	long
)	O
;	O
if	O
(	O
print_seconds	int
)	O
printf	(*(char))->(int)
(	O
"- %02d:%02d:%02d %s\n"	*(char)
,	O
tmptr	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_hour	int
,	O
tmptr	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_min	int
,	O
tmptr	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_sec	int
,	O
temp_str	array(char)
)	O
;	O
else	O
printf	(*(char))->(int)
(	O
"- %02d:%02d %s\n"	*(char)
,	O
tmptr	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_hour	int
,	O
tmptr	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_min	int
,	O
temp_str	array(char)
)	O
;	O
}	O
}	O
if	O
(	O
num_lines_to_print	long
>	O
-	O
1	int
)	O
{	O
num_lines_to_print	long
--	O
;	O
if	O
(	O
num_lines_to_print	long
==	O
0	int
)	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
}	O
RETSIGTYPE	void
handler	(int)->(void)
(	O
int	O
sig	int
)	O
{	O
(	O
void	O
)	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"\ninterrupted at "	*(char)
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
display_date	(long)->(void)
(	O
last_time	long
)	O
;	O
(	O
void	O
)	O
putchar	(int)->(int)
(	O
'\n'	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
void	O
display_date	(long)->(void)
(	O
time_t	long
now	long
)	O
{	O
char	O
*	O
ct	*(char)
=	O
ctime	(*(long))->(*(char))
(	O
&	O
now	long
)	O
;	O
printf	(*(char))->(int)
(	O
"%-10.10s "	*(char)
,	O
ct	*(char)
)	O
;	O
if	O
(	O
print_year	int
)	O
printf	(*(char))->(int)
(	O
"%-4.4s "	*(char)
,	O
ct	*(char)
+	O
20	int
)	O
;	O
if	O
(	O
print_seconds	int
)	O
printf	(*(char))->(int)
(	O
"%-8.8s "	*(char)
,	O
ct	*(char)
+	O
11	int
)	O
;	O
else	O
printf	(*(char))->(int)
(	O
"%-5.5s "	*(char)
,	O
ct	*(char)
+	O
11	int
)	O
;	O
}	O
