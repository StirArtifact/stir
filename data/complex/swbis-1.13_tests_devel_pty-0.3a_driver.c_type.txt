int	O
do_driver	(*(char),*(int),*(int))->(int)
(	O
char	O
*	O
driver	*(char)
,	O
int	O
*	O
ofd	*(int)
,	O
int	O
*	O
ifd	*(int)
)	O
{	O
pid_t	int
child	int
;	O
int	O
pipe0	array(int)
[	O
2	int
]	O
;	O
int	O
pipe1	array(int)
[	O
2	int
]	O
;	O
if	O
(	O
pipe	(array(int))->(int)
(	O
pipe0	array(int)
)	O
<	O
0	int
)	O
err_sys	(*(char))->(void)
(	O
"can't create stream pipe"	*(char)
)	O
;	O
if	O
(	O
pipe	(array(int))->(int)
(	O
pipe1	array(int)
)	O
<	O
0	int
)	O
err_sys	(*(char))->(void)
(	O
"can't create stream pipe"	*(char)
)	O
;	O
if	O
(	O
(	O
child	int
=	O
fork	()->(int)
(	O
)	O
)	O
<	O
0	int
)	O
err_sys	(*(char))->(void)
(	O
"fork error"	*(char)
)	O
;	O
else	O
if	O
(	O
child	int
==	O
0	int
)	O
{	O
close	(int)->(int)
(	O
pipe0	array(int)
[	O
1	int
]	O
)	O
;	O
close	(int)->(int)
(	O
pipe1	array(int)
[	O
0	int
]	O
)	O
;	O
if	O
(	O
dup2	(int,int)->(int)
(	O
pipe0	array(int)
[	O
0	int
]	O
,	O
STDIN_FILENO	int
)	O
!=	O
STDIN_FILENO	int
)	O
err_sys	(*(char))->(void)
(	O
"dup2 error to stdin"	*(char)
)	O
;	O
if	O
(	O
dup2	(int,int)->(int)
(	O
pipe1	array(int)
[	O
1	int
]	O
,	O
STDOUT_FILENO	int
)	O
!=	O
STDOUT_FILENO	int
)	O
err_sys	(*(char))->(void)
(	O
"dup2 error to stdout"	*(char)
)	O
;	O
close	(int)->(int)
(	O
pipe0	array(int)
[	O
0	int
]	O
)	O
;	O
close	(int)->(int)
(	O
pipe1	array(int)
[	O
1	int
]	O
)	O
;	O
execlp	(*(char),*(char))->(int)
(	O
driver	*(char)
,	O
driver	*(char)
,	O
(	O
char	O
*	O
)	O
0	int
)	O
;	O
err_sys	(*(char))->(void)
(	O
"execlp error for: %s"	*(char)
,	O
driver	*(char)
)	O
;	O
_exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
close	(int)->(int)
(	O
pipe0	array(int)
[	O
0	int
]	O
)	O
;	O
close	(int)->(int)
(	O
pipe1	array(int)
[	O
1	int
]	O
)	O
;	O
*	O
ifd	*(int)
=	O
pipe0	array(int)
[	O
1	int
]	O
;	O
*	O
ofd	*(int)
=	O
pipe1	array(int)
[	O
0	int
]	O
;	O
return	O
(	O
int	O
)	O
child	int
;	O
}	O
