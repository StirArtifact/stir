const	O
char	O
*	O
dico_markup_type	*(char)
=	O
"none"	*(char)
;	O
dico_list_t	*(struct)
dico_markup_list	*(struct)
;	O
static	O
int	O
cmp_markup_name	(*(void),*(void),*(void))->(int)
(	O
const	O
void	O
*	O
item	*(void)
,	O
const	O
void	O
*	O
data	*(void)
,	O
void	O
*	O
ignored	*(void)
)	O
{	O
return	O
strcasecmp	(*(char),*(char))->(int)
(	O
(	O
char	O
*	O
)	O
item	*(void)
,	O
(	O
char	O
*	O
)	O
data	*(void)
)	O
;	O
}	O
const	O
char	O
*	O
dico_markup_lookup	(*(char))->(*(char))
(	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
return	O
dico_list_locate	(*(struct),*(void))->(*(void))
(	O
dico_markup_list	*(struct)
,	O
(	O
void	O
*	O
)	O
name	*(char)
)	O
;	O
}	O
int	O
dico_markup_valid_name_p	(*(char))->(int)
(	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
for	O
(	O
;	O
*	O
name	*(char)
;	O
name	*(char)
++	O
)	O
if	O
(	O
!	O
(	O
isascii	(int)->(int)
(	O
*	O
name	*(char)
)	O
&&	O
(	O
isalnum	(int)->(int)
(	O
*	O
name	*(char)
)	O
||	O
*	O
name	*(char)
==	O
'_'	O
)	O
)	O
)	O
return	O
0	int
;	O
return	O
1	int
;	O
}	O
int	O
dico_markup_register	(*(char))->(int)
(	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
if	O
(	O
!	O
dico_markup_valid_name_p	(*(char))->(int)
(	O
name	*(char)
)	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
dico_markup_list	*(struct)
)	O
{	O
dico_markup_list	*(struct)
=	O
dico_list_create	()->(*(struct))
(	O
)	O
;	O
if	O
(	O
!	O
dico_markup_list	*(struct)
)	O
return	O
ENOMEM	int
;	O
dico_list_set_comparator	(*(struct),*((*(void),*(void),*(void))->(int)),*(void))->(int)
(	O
dico_markup_list	*(struct)
,	O
cmp_markup_name	(*(void),*(void),*(void))->(int)
,	O
NULL	O
)	O
;	O
}	O
if	O
(	O
!	O
dico_markup_lookup	(*(char))->(*(char))
(	O
name	*(char)
)	O
)	O
{	O
char	O
*	O
s	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
name	*(char)
)	O
;	O
if	O
(	O
!	O
s	*(char)
)	O
return	O
ENOMEM	int
;	O
return	O
dico_list_append	(*(struct),*(void))->(int)
(	O
dico_markup_list	*(struct)
,	O
s	*(char)
)	O
;	O
}	O
return	O
0	int
;	O
}	O
