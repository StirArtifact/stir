static	O
size_t	long
_GL_ATTRIBUTE_PURE	O
string_hash	(*(void))->(long)
(	O
const	O
void	O
*	O
x	*(void)
)	O
{	O
const	O
char	O
*	O
s	*(char)
=	O
(	O
const	O
char	O
*	O
)	O
x	*(void)
;	O
size_t	long
h	long
=	O
0	int
;	O
for	O
(	O
;	O
*	O
s	*(char)
;	O
s	*(char)
++	O
)	O
h	long
=	O
*	O
s	*(char)
+	O
(	O
(	O
h	long
<<	O
9	int
)	O
|	O
(	O
h	long
>>	O
(	O
SIZE_BITS	O
-	O
9	int
)	O
)	O
)	O
;	O
return	O
h	long
;	O
}	O
struct	O
struniq_hash_node	struct(*(struct(*(struct(*(struct`),array(char))),array(char))),array(char))
{	O
struct	O
struniq_hash_node	struct(*(struct(*(struct(*(struct`),array(char))),array(char))),array(char))
*	O
volatile	O
next	*(struct(*(struct(*(struct`),array(char))),array(char)))
;	O
char	O
contents	array(char)
[	O
FLEXIBLE_ARRAY_MEMBER	O
]	O
;	O
}	O
;	O
static	O
struct	O
struniq_hash_node	struct(*(struct(*(struct(*(struct`),array(char))),array(char))),array(char))
*	O
volatile	O
struniq_hash_table	array(*(struct(*(struct(*(struct`),array(char))),array(char))))
[	O
STRUNIQ_HASH_TABLE_SIZE	int
]	O
;	O
gl_lock_define_initialized	O
(	O
static	O
,	O
struniq_lock	O
)	O
static	O
const	O
char	O
*	O
struniq	(*(char))->(*(char))
(	O
const	O
char	O
*	O
string	*(char)
)	O
{	O
size_t	long
hashcode	long
=	O
string_hash	(*(void))->(long)
(	O
string	*(char)
)	O
;	O
size_t	long
slot	long
=	O
hashcode	long
%	O
STRUNIQ_HASH_TABLE_SIZE	int
;	O
size_t	long
size	long
;	O
struct	O
struniq_hash_node	struct(*(struct(*(struct(*(struct`),array(char))),array(char))),array(char))
*	O
new_node	*(struct(*(struct(*(struct`),array(char))),array(char)))
;	O
struct	O
struniq_hash_node	struct(*(struct(*(struct(*(struct`),array(char))),array(char))),array(char))
*	O
p	*(struct(*(struct(*(struct`),array(char))),array(char)))
;	O
for	O
(	O
p	*(struct(*(struct(*(struct`),array(char))),array(char)))
=	O
struniq_hash_table	array(*(struct(*(struct(*(struct`),array(char))),array(char))))
[	O
slot	long
]	O
;	O
p	*(struct(*(struct(*(struct`),array(char))),array(char)))
!=	O
NULL	O
;	O
p	*(struct(*(struct(*(struct`),array(char))),array(char)))
=	O
p	*(struct(*(struct(*(struct`),array(char))),array(char)))
->	O
next	*(struct(*(struct(*(struct`),array(char))),array(char)))
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
p	*(struct(*(struct(*(struct`),array(char))),array(char)))
->	O
contents	array(char)
,	O
string	*(char)
)	O
==	O
0	int
)	O
return	O
p	*(struct(*(struct(*(struct`),array(char))),array(char)))
->	O
contents	array(char)
;	O
size	long
=	O
strlen	(*(char))->(long)
(	O
string	*(char)
)	O
+	O
1	int
;	O
new_node	*(struct(*(struct(*(struct`),array(char))),array(char)))
=	O
(	O
struct	O
struniq_hash_node	struct(*(struct(*(struct(*(struct`),array(char))),array(char))),array(char))
*	O
)	O
malloc	(long)->(*(void))
(	O
FLEXSIZEOF	O
(	O
struct	O
struniq_hash_node	struct(*(struct(*(struct(*(struct`),array(char))),array(char))),array(char))
,	O
contents	array(char)
,	O
size	long
)	O
)	O
;	O
if	O
(	O
new_node	*(struct(*(struct(*(struct`),array(char))),array(char)))
==	O
NULL	O
)	O
return	O
"C"	*(char)
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
new_node	*(struct(*(struct(*(struct`),array(char))),array(char)))
->	O
contents	array(char)
,	O
string	*(char)
,	O
size	long
)	O
;	O
gl_lock_lock	O
(	O
struniq_lock	O
)	O
;	O
for	O
(	O
p	*(struct(*(struct(*(struct`),array(char))),array(char)))
=	O
struniq_hash_table	array(*(struct(*(struct(*(struct`),array(char))),array(char))))
[	O
slot	long
]	O
;	O
p	*(struct(*(struct(*(struct`),array(char))),array(char)))
!=	O
NULL	O
;	O
p	*(struct(*(struct(*(struct`),array(char))),array(char)))
=	O
p	*(struct(*(struct(*(struct`),array(char))),array(char)))
->	O
next	*(struct(*(struct(*(struct`),array(char))),array(char)))
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
p	*(struct(*(struct(*(struct`),array(char))),array(char)))
->	O
contents	array(char)
,	O
string	*(char)
)	O
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
new_node	*(struct(*(struct(*(struct`),array(char))),array(char)))
)	O
;	O
new_node	*(struct(*(struct(*(struct`),array(char))),array(char)))
=	O
p	*(struct(*(struct(*(struct`),array(char))),array(char)))
;	O
goto	O
done	O
;	O
}	O
new_node	*(struct(*(struct(*(struct`),array(char))),array(char)))
->	O
next	*(struct(*(struct(*(struct`),array(char))),array(char)))
=	O
struniq_hash_table	array(*(struct(*(struct(*(struct`),array(char))),array(char))))
[	O
slot	long
]	O
;	O
struniq_hash_table	array(*(struct(*(struct(*(struct`),array(char))),array(char))))
[	O
slot	long
]	O
=	O
new_node	*(struct(*(struct(*(struct`),array(char))),array(char)))
;	O
done	O
:	O
gl_lock_unlock	O
(	O
struniq_lock	O
)	O
;	O
return	O
new_node	*(struct(*(struct(*(struct`),array(char))),array(char)))
->	O
contents	array(char)
;	O
}	O
static	O
const	O
char	O
*	O
gl_locale_name_thread_unsafe	(int,*(char))->(*(char))
(	O
int	O
category	int
,	O
const	O
char	O
*	O
categoryname	*(char)
)	O
{	O
{	O
locale_t	*(struct(array(*(struct)),*(short),*(int),*(int),array(*(char))))
thread_locale	*(struct(array(*(struct)),*(short),*(int),*(int),array(*(char))))
=	O
uselocale	(*(struct(array(*(struct)),*(short),*(int),*(int),array(*(char)))))->(*(struct(array(*(struct)),*(short),*(int),*(int),array(*(char)))))
(	O
NULL	O
)	O
;	O
if	O
(	O
thread_locale	*(struct(array(*(struct)),*(short),*(int),*(int),array(*(char))))
!=	O
LC_GLOBAL_LOCALE	O
)	O
{	O
const	O
char	O
*	O
name	*(char)
=	O
nl_langinfo	(int)->(*(char))
(	O
_NL_ITEM	O
(	O
(	O
category	int
)	O
,	O
_NL_ITEM_INDEX	O
(	O
-	O
1	int
)	O
)	O
)	O
;	O
if	O
(	O
name	*(char)
[	O
0	int
]	O
==	O
'\0'	O
)	O
name	*(char)
=	O
thread_locale	*(struct(array(*(struct)),*(short),*(int),*(int),array(*(char))))
->	O
__names	array(*(char))
[	O
category	int
]	O
;	O
return	O
name	*(char)
;	O
}	O
}	O
return	O
NULL	O
;	O
}	O
const	O
char	O
*	O
gl_locale_name_thread	(int,*(char))->(*(char))
(	O
int	O
category	int
,	O
const	O
char	O
*	O
categoryname	*(char)
)	O
{	O
const	O
char	O
*	O
name	*(char)
=	O
gl_locale_name_thread_unsafe	(int,*(char))->(*(char))
(	O
category	int
,	O
categoryname	*(char)
)	O
;	O
if	O
(	O
name	*(char)
!=	O
NULL	O
)	O
return	O
struniq	(*(char))->(*(char))
(	O
name	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
const	O
char	O
*	O
gl_locale_name_posix	(int,*(char))->(*(char))
(	O
int	O
category	int
,	O
const	O
char	O
*	O
categoryname	*(char)
)	O
{	O
{	O
const	O
char	O
*	O
locname	*(char)
;	O
locname	*(char)
=	O
setlocale_null	(int)->(*(char))
(	O
category	int
)	O
;	O
return	O
locname	*(char)
;	O
}	O
}	O
const	O
char	O
*	O
gl_locale_name_environ	(int,*(char))->(*(char))
(	O
int	O
category	int
,	O
const	O
char	O
*	O
categoryname	*(char)
)	O
{	O
const	O
char	O
*	O
retval	*(char)
;	O
retval	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"LC_ALL"	*(char)
)	O
;	O
if	O
(	O
retval	*(char)
!=	O
NULL	O
&&	O
retval	*(char)
[	O
0	int
]	O
!=	O
'\0'	O
)	O
return	O
retval	*(char)
;	O
retval	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
categoryname	*(char)
)	O
;	O
if	O
(	O
retval	*(char)
!=	O
NULL	O
&&	O
retval	*(char)
[	O
0	int
]	O
!=	O
'\0'	O
)	O
return	O
retval	*(char)
;	O
retval	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"LANG"	*(char)
)	O
;	O
if	O
(	O
retval	*(char)
!=	O
NULL	O
&&	O
retval	*(char)
[	O
0	int
]	O
!=	O
'\0'	O
)	O
{	O
return	O
retval	*(char)
;	O
}	O
return	O
NULL	O
;	O
}	O
const	O
char	O
*	O
gl_locale_name_default	()->(*(char))
(	O
void	O
)	O
{	O
return	O
"C"	*(char)
;	O
}	O
const	O
char	O
*	O
gl_locale_name	(int,*(char))->(*(char))
(	O
int	O
category	int
,	O
const	O
char	O
*	O
categoryname	*(char)
)	O
{	O
const	O
char	O
*	O
retval	*(char)
;	O
retval	*(char)
=	O
gl_locale_name_thread	(int,*(char))->(*(char))
(	O
category	int
,	O
categoryname	*(char)
)	O
;	O
if	O
(	O
retval	*(char)
!=	O
NULL	O
)	O
return	O
retval	*(char)
;	O
retval	*(char)
=	O
gl_locale_name_posix	(int,*(char))->(*(char))
(	O
category	int
,	O
categoryname	*(char)
)	O
;	O
if	O
(	O
retval	*(char)
!=	O
NULL	O
)	O
return	O
retval	*(char)
;	O
return	O
gl_locale_name_default	()->(*(char))
(	O
)	O
;	O
}	O
