void	O
base16_decode_init	O
(	O
struct	O
base16_decode_ctx	struct(char,char)
*	O
ctx	*(void)
)	O
{	O
ctx	*(void)
->	O
word	char
=	O
ctx	*(void)
->	O
bits	char
=	O
0	int
;	O
}	O
enum	O
{	O
HEX_INVALID	int
=	O
-	O
1	int
,	O
HEX_SPACE	int
=	O
-	O
2	int
}	O
;	O
static	O
const	O
signed	O
char	O
hex_decode_table	array(char)
[	O
0x80	int
]	O
=	O
{	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
2	int
,	O
-	O
2	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
2	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
2	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
0	int
,	O
1	int
,	O
2	int
,	O
3	int
,	O
4	int
,	O
5	int
,	O
6	int
,	O
7	int
,	O
8	int
,	O
9	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
10	int
,	O
11	int
,	O
12	int
,	O
13	int
,	O
14	int
,	O
15	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
10	int
,	O
11	int
,	O
12	int
,	O
13	int
,	O
14	int
,	O
15	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
}	O
;	O
int	O
base16_decode_single	O
(	O
struct	O
base16_decode_ctx	struct(char,char)
*	O
ctx	*(void)
,	O
uint8_t	char
*	O
dst	*(char)
,	O
char	O
src	*(char)
)	O
{	O
unsigned	O
char	O
usrc	char
=	O
src	*(char)
;	O
int	O
digit	int
;	O
if	O
(	O
usrc	char
>=	O
0x80	int
)	O
return	O
-	O
1	int
;	O
digit	int
=	O
hex_decode_table	array(char)
[	O
usrc	char
]	O
;	O
switch	O
(	O
digit	int
)	O
{	O
case	O
-	O
1	int
:	O
return	O
-	O
1	int
;	O
case	O
-	O
2	int
:	O
return	O
0	int
;	O
default	O
:	O
assert	O
(	O
digit	int
>=	O
0	int
)	O
;	O
assert	O
(	O
digit	int
<	O
0x10	int
)	O
;	O
if	O
(	O
ctx	*(void)
->	O
bits	char
)	O
{	O
*	O
dst	*(char)
=	O
(	O
ctx	*(void)
->	O
word	char
<<	O
4	int
)	O
|	O
digit	int
;	O
ctx	*(void)
->	O
bits	char
=	O
0	int
;	O
return	O
1	int
;	O
}	O
else	O
{	O
ctx	*(void)
->	O
word	char
=	O
digit	int
;	O
ctx	*(void)
->	O
bits	char
=	O
4	int
;	O
return	O
0	int
;	O
}	O
}	O
}	O
int	O
base16_decode_update	O
(	O
struct	O
base16_decode_ctx	struct(char,char)
*	O
ctx	*(void)
,	O
size_t	long
*	O
dst_length	*(long)
,	O
uint8_t	char
*	O
dst	*(char)
,	O
size_t	long
src_length	long
,	O
const	O
char	O
*	O
src	*(char)
)	O
{	O
size_t	long
done	long
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
done	long
=	O
0	int
;	O
i	long
<	O
src_length	long
;	O
i	long
++	O
)	O
switch	O
(	O
base16_decode_single	O
(	O
ctx	*(void)
,	O
dst	*(char)
+	O
done	long
,	O
src	*(char)
[	O
i	long
]	O
)	O
)	O
{	O
case	O
-	O
1	int
:	O
return	O
0	int
;	O
case	O
1	int
:	O
done	long
++	O
;	O
case	O
0	int
:	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
assert	O
(	O
done	long
<=	O
BASE16_DECODE_LENGTH	O
(	O
src_length	long
)	O
)	O
;	O
*	O
dst_length	*(long)
=	O
done	long
;	O
return	O
1	int
;	O
}	O
int	O
base16_decode_final	O
(	O
struct	O
base16_decode_ctx	struct(char,char)
*	O
ctx	*(void)
)	O
{	O
return	O
ctx	*(void)
->	O
bits	char
==	O
0	int
;	O
}	O
