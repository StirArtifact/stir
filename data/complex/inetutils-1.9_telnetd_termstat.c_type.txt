int	O
def_tspeed	int
=	O
-	O
1	int
,	O
def_rspeed	int
=	O
-	O
1	int
;	O
int	O
def_row	int
=	O
0	int
,	O
def_col	int
=	O
0	int
;	O
static	O
int	O
_terminit	int
=	O
0	int
;	O
void	O
localstat	()->(void)
(	O
void	O
)	O
{	O
void	O
netflush	()->(void)
(	O
void	O
)	O
;	O
int	O
need_will_echo	int
=	O
0	int
;	O
if	O
(	O
tty_isbinaryin	()->(int)
(	O
)	O
)	O
{	O
if	O
(	O
his_want_state_is_wont	O
(	O
TELOPT_BINARY	int
)	O
)	O
send_do	(int,int)->(void)
(	O
TELOPT_BINARY	int
,	O
1	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
his_want_state_is_will	O
(	O
TELOPT_BINARY	int
)	O
)	O
send_dont	(int,int)->(void)
(	O
TELOPT_BINARY	int
,	O
1	int
)	O
;	O
}	O
if	O
(	O
tty_isbinaryout	()->(int)
(	O
)	O
)	O
{	O
if	O
(	O
my_want_state_is_wont	O
(	O
TELOPT_BINARY	int
)	O
)	O
send_will	(int,int)->(void)
(	O
TELOPT_BINARY	int
,	O
1	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
my_want_state_is_will	O
(	O
TELOPT_BINARY	int
)	O
)	O
send_wont	(int,int)->(void)
(	O
TELOPT_BINARY	int
,	O
1	int
)	O
;	O
}	O
flowstat	()->(void)
(	O
)	O
;	O
uselinemode	int
=	O
tty_linemode	()->(int)
(	O
)	O
;	O
if	O
(	O
alwayslinemode	int
&&	O
linemode	int
&&	O
!	O
uselinemode	int
)	O
{	O
uselinemode	int
=	O
1	int
;	O
tty_setlinemode	(int)->(void)
(	O
uselinemode	int
)	O
;	O
}	O
if	O
(	O
uselinemode	int
)	O
{	O
if	O
(	O
tty_isecho	()->(int)
(	O
)	O
)	O
send_wont	(int,int)->(void)
(	O
TELOPT_ECHO	int
,	O
1	int
)	O
;	O
else	O
need_will_echo	int
=	O
1	int
;	O
if	O
(	O
lmodetype	int
==	O
KLUDGE_OK	int
)	O
lmodetype	int
=	O
KLUDGE_LINEMODE	int
;	O
}	O
if	O
(	O
!	O
uselinemode	int
&&	O
linemode	int
)	O
{	O
if	O
(	O
lmodetype	int
==	O
REAL_LINEMODE	int
)	O
{	O
send_dont	(int,int)->(void)
(	O
TELOPT_LINEMODE	int
,	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
lmodetype	int
==	O
KLUDGE_LINEMODE	int
)	O
send_will	(int,int)->(void)
(	O
TELOPT_SGA	int
,	O
1	int
)	O
;	O
send_will	(int,int)->(void)
(	O
TELOPT_ECHO	int
,	O
1	int
)	O
;	O
linemode	int
=	O
uselinemode	int
;	O
goto	O
done	O
;	O
}	O
if	O
(	O
lmodetype	int
==	O
REAL_LINEMODE	int
)	O
{	O
useeditmode	int
=	O
0	int
;	O
if	O
(	O
tty_isediting	()->(int)
(	O
)	O
)	O
useeditmode	int
|=	O
MODE_EDIT	int
;	O
if	O
(	O
tty_istrapsig	()->(int)
(	O
)	O
)	O
useeditmode	int
|=	O
MODE_TRAPSIG	int
;	O
if	O
(	O
tty_issofttab	()->(int)
(	O
)	O
)	O
useeditmode	int
|=	O
MODE_SOFT_TAB	int
;	O
if	O
(	O
tty_islitecho	()->(int)
(	O
)	O
)	O
useeditmode	int
|=	O
MODE_LIT_ECHO	int
;	O
}	O
else	O
if	O
(	O
lmodetype	int
==	O
KLUDGE_LINEMODE	int
)	O
{	O
if	O
(	O
tty_isediting	()->(int)
(	O
)	O
&&	O
uselinemode	int
)	O
send_wont	(int,int)->(void)
(	O
TELOPT_SGA	int
,	O
1	int
)	O
;	O
else	O
send_will	(int,int)->(void)
(	O
TELOPT_SGA	int
,	O
1	int
)	O
;	O
}	O
if	O
(	O
uselinemode	int
&&	O
!	O
linemode	int
)	O
{	O
if	O
(	O
lmodetype	int
==	O
KLUDGE_LINEMODE	int
)	O
{	O
send_wont	(int,int)->(void)
(	O
TELOPT_SGA	int
,	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
lmodetype	int
==	O
REAL_LINEMODE	int
)	O
{	O
send_do	(int,int)->(void)
(	O
TELOPT_LINEMODE	int
,	O
1	int
)	O
;	O
net_output_data	(*(char))->(int)
(	O
"%c%c%c%c%c%c%c"	*(char)
,	O
IAC	int
,	O
SB	int
,	O
TELOPT_LINEMODE	int
,	O
LM_MODE	int
,	O
useeditmode	int
,	O
IAC	int
,	O
SE	int
)	O
;	O
editmode	int
=	O
useeditmode	int
;	O
}	O
linemode	int
=	O
uselinemode	int
;	O
goto	O
done	O
;	O
}	O
if	O
(	O
lmodetype	int
<	O
REAL_LINEMODE	int
)	O
goto	O
done	O
;	O
if	O
(	O
linemode	int
&&	O
his_state_is_will	O
(	O
TELOPT_LINEMODE	int
)	O
)	O
{	O
if	O
(	O
useeditmode	int
!=	O
editmode	int
)	O
{	O
net_output_data	(*(char))->(int)
(	O
"%c%c%c%c%c%c%c"	*(char)
,	O
IAC	int
,	O
SB	int
,	O
TELOPT_LINEMODE	int
,	O
LM_MODE	int
,	O
useeditmode	int
,	O
IAC	int
,	O
SE	int
)	O
;	O
editmode	int
=	O
useeditmode	int
;	O
}	O
start_slc	(int)->(void)
(	O
0	int
)	O
;	O
check_slc	()->(void)
(	O
)	O
;	O
end_slc	(*(*(char)))->(int)
(	O
0	int
)	O
;	O
}	O
done	O
:	O
if	O
(	O
need_will_echo	int
)	O
send_will	(int,int)->(void)
(	O
TELOPT_ECHO	int
,	O
1	int
)	O
;	O
if	O
(	O
_terminit	int
==	O
0	int
)	O
{	O
_terminit	int
=	O
1	int
;	O
defer_terminit	()->(void)
(	O
)	O
;	O
}	O
netflush	()->(void)
(	O
)	O
;	O
set_termbuf	()->(void)
(	O
)	O
;	O
return	O
;	O
}	O
void	O
flowstat	()->(void)
(	O
void	O
)	O
{	O
if	O
(	O
his_state_is_will	O
(	O
TELOPT_LFLOW	int
)	O
)	O
{	O
if	O
(	O
tty_flowmode	()->(int)
(	O
)	O
!=	O
flowmode	int
)	O
{	O
flowmode	int
=	O
tty_flowmode	()->(int)
(	O
)	O
;	O
net_output_data	(*(char))->(int)
(	O
"%c%c%c%c%c%c"	*(char)
,	O
IAC	int
,	O
SB	int
,	O
TELOPT_LFLOW	int
,	O
flowmode	int
?	O
LFLOW_ON	int
:	O
LFLOW_OFF	int
,	O
IAC	int
,	O
SE	int
)	O
;	O
}	O
if	O
(	O
tty_restartany	()->(int)
(	O
)	O
!=	O
restartany	int
)	O
{	O
restartany	int
=	O
tty_restartany	()->(int)
(	O
)	O
;	O
net_output_data	(*(char))->(int)
(	O
"%c%c%c%c%c%c"	*(char)
,	O
IAC	int
,	O
SB	int
,	O
TELOPT_LFLOW	int
,	O
restartany	int
?	O
LFLOW_RESTART_ANY	int
:	O
LFLOW_RESTART_XON	int
,	O
IAC	int
,	O
SE	int
)	O
;	O
}	O
}	O
}	O
void	O
clientstat	(int,int,int)->(void)
(	O
register	O
int	O
code	int
,	O
register	O
int	O
parm1	int
,	O
register	O
int	O
parm2	int
)	O
{	O
void	O
netflush	()->(void)
(	O
void	O
)	O
;	O
init_termbuf	()->(void)
(	O
)	O
;	O
switch	O
(	O
code	int
)	O
{	O
case	O
TELOPT_LINEMODE	int
:	O
uselinemode	int
=	O
(	O
parm1	int
==	O
WILL	int
)	O
;	O
if	O
(	O
uselinemode	int
!=	O
linemode	int
)	O
{	O
if	O
(	O
lmodetype	int
==	O
KLUDGE_LINEMODE	int
)	O
{	O
if	O
(	O
alwayslinemode	int
&&	O
tty_isediting	()->(int)
(	O
)	O
)	O
{	O
uselinemode	int
=	O
1	int
;	O
}	O
}	O
if	O
(	O
uselinemode	int
==	O
linemode	int
)	O
return	O
;	O
if	O
(	O
lmodetype	int
==	O
REAL_LINEMODE	int
&&	O
uselinemode	int
)	O
if	O
(	O
uselinemode	int
)	O
{	O
useeditmode	int
=	O
0	int
;	O
if	O
(	O
tty_isediting	()->(int)
(	O
)	O
)	O
useeditmode	int
|=	O
MODE_EDIT	int
;	O
if	O
(	O
tty_istrapsig	()->(int)
(	O
)	O
)	O
useeditmode	int
|=	O
MODE_TRAPSIG	int
;	O
if	O
(	O
tty_issofttab	()->(int)
(	O
)	O
)	O
useeditmode	int
|=	O
MODE_SOFT_TAB	int
;	O
if	O
(	O
tty_islitecho	()->(int)
(	O
)	O
)	O
useeditmode	int
|=	O
MODE_LIT_ECHO	int
;	O
net_output_data	(*(char))->(int)
(	O
"%c%c%c%c%c%c%c"	*(char)
,	O
IAC	int
,	O
SB	int
,	O
TELOPT_LINEMODE	int
,	O
LM_MODE	int
,	O
useeditmode	int
,	O
IAC	int
,	O
SE	int
)	O
;	O
editmode	int
=	O
useeditmode	int
;	O
}	O
tty_setlinemode	(int)->(void)
(	O
uselinemode	int
)	O
;	O
linemode	int
=	O
uselinemode	int
;	O
if	O
(	O
!	O
linemode	int
)	O
send_will	(int,int)->(void)
(	O
TELOPT_ECHO	int
,	O
1	int
)	O
;	O
}	O
break	O
;	O
case	O
LM_MODE	int
:	O
{	O
register	O
int	O
ack	int
,	O
changed	int
;	O
useeditmode	int
&=	O
MODE_MASK	int
;	O
ack	int
=	O
(	O
useeditmode	int
&	O
MODE_ACK	int
)	O
;	O
useeditmode	int
&=	O
~	O
MODE_ACK	int
;	O
if	O
(	O
(	O
changed	int
=	O
(	O
useeditmode	int
^	O
editmode	int
)	O
)	O
)	O
{	O
if	O
(	O
ack	int
)	O
localstat	()->(void)
(	O
)	O
;	O
if	O
(	O
changed	int
&	O
MODE_EDIT	int
)	O
tty_setedit	(int)->(void)
(	O
useeditmode	int
&	O
MODE_EDIT	int
)	O
;	O
if	O
(	O
changed	int
&	O
MODE_TRAPSIG	int
)	O
tty_setsig	(int)->(void)
(	O
useeditmode	int
&	O
MODE_TRAPSIG	int
)	O
;	O
if	O
(	O
changed	int
&	O
MODE_SOFT_TAB	int
)	O
tty_setsofttab	(int)->(void)
(	O
useeditmode	int
&	O
MODE_SOFT_TAB	int
)	O
;	O
if	O
(	O
changed	int
&	O
MODE_LIT_ECHO	int
)	O
tty_setlitecho	(int)->(void)
(	O
useeditmode	int
&	O
MODE_LIT_ECHO	int
)	O
;	O
set_termbuf	()->(void)
(	O
)	O
;	O
if	O
(	O
!	O
ack	int
)	O
{	O
net_output_data	(*(char))->(int)
(	O
"%c%c%c%c%c%c%c"	*(char)
,	O
IAC	int
,	O
SB	int
,	O
TELOPT_LINEMODE	int
,	O
LM_MODE	int
,	O
useeditmode	int
|	O
MODE_ACK	int
,	O
IAC	int
,	O
SE	int
)	O
;	O
}	O
editmode	int
=	O
useeditmode	int
;	O
}	O
break	O
;	O
}	O
case	O
TELOPT_NAWS	int
:	O
{	O
struct	O
winsize	struct(short,short,short,short)
ws	struct(short,short,short,short)
;	O
def_col	int
=	O
parm1	int
;	O
def_row	int
=	O
parm2	int
;	O
if	O
(	O
terminit	()->(int)
(	O
)	O
==	O
0	int
)	O
return	O
;	O
ws	struct(short,short,short,short)
.	O
ws_col	short
=	O
parm1	int
;	O
ws	struct(short,short,short,short)
.	O
ws_row	short
=	O
parm2	int
;	O
ioctl	(int,long)->(int)
(	O
pty	int
,	O
TIOCSWINSZ	int
,	O
(	O
char	O
*	O
)	O
&	O
ws	struct(short,short,short,short)
)	O
;	O
}	O
break	O
;	O
case	O
TELOPT_TSPEED	int
:	O
{	O
def_tspeed	int
=	O
parm1	int
;	O
def_rspeed	int
=	O
parm2	int
;	O
if	O
(	O
terminit	()->(int)
(	O
)	O
==	O
0	int
)	O
return	O
;	O
tty_rspeed	(int)->(void)
(	O
parm2	int
)	O
;	O
tty_tspeed	(int)->(void)
(	O
parm1	int
)	O
;	O
set_termbuf	()->(void)
(	O
)	O
;	O
break	O
;	O
}	O
default	O
:	O
break	O
;	O
}	O
netflush	()->(void)
(	O
)	O
;	O
}	O
void	O
defer_terminit	()->(void)
(	O
void	O
)	O
{	O
if	O
(	O
def_tspeed	int
!=	O
-	O
1	int
)	O
{	O
clientstat	(int,int,int)->(void)
(	O
TELOPT_TSPEED	int
,	O
def_tspeed	int
,	O
def_rspeed	int
)	O
;	O
def_tspeed	int
=	O
def_rspeed	int
=	O
0	int
;	O
}	O
if	O
(	O
def_col	int
||	O
def_row	int
)	O
{	O
struct	O
winsize	struct(short,short,short,short)
ws	struct(short,short,short,short)
;	O
memset	(*(void),int,long)->(*(void))
(	O
(	O
char	O
*	O
)	O
&	O
ws	struct(short,short,short,short)
,	O
0	int
,	O
sizeof	O
(	O
ws	struct(short,short,short,short)
)	O
)	O
;	O
ws	struct(short,short,short,short)
.	O
ws_col	short
=	O
def_col	int
;	O
ws	struct(short,short,short,short)
.	O
ws_row	short
=	O
def_row	int
;	O
ioctl	(int,long)->(int)
(	O
pty	int
,	O
TIOCSWINSZ	int
,	O
(	O
char	O
*	O
)	O
&	O
ws	struct(short,short,short,short)
)	O
;	O
}	O
deferslc	()->(void)
(	O
)	O
;	O
}	O
int	O
terminit	()->(int)
(	O
void	O
)	O
{	O
return	O
(	O
_terminit	int
)	O
;	O
}	O
