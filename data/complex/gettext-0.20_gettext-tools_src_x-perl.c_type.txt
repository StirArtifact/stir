static	O
bool	bool
extract_all	bool
=	O
false	int
;	O
static	O
hash_table	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct(*`,*`,array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*(void))),*((*(void),long)->(*(void)))),union(*((*(void))->(void)),*((*(void),*(void))->(void))),*(void),int,int,int))
keywords	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
;	O
static	O
bool	bool
default_keywords	bool
=	O
true	int
;	O
void	O
x_perl_extract_all	()->(void)
(	O
)	O
{	O
extract_all	bool
=	O
true	int
;	O
}	O
void	O
x_perl_keyword	(*(char))->(void)
(	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
if	O
(	O
name	*(char)
==	O
NULL	O
)	O
default_keywords	bool
=	O
false	int
;	O
else	O
{	O
const	O
char	O
*	O
end	*(char)
;	O
struct	O
callshape	struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))
shape	*(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
;	O
const	O
char	O
*	O
colon	*(char)
;	O
if	O
(	O
keywords	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
.	O
table	*(struct)
==	O
NULL	O
)	O
hash_init	(*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),long)->(int)
(	O
&	O
keywords	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
,	O
100	int
)	O
;	O
split_keywordspec	(*(char),*(*(char)),*(struct(int,int,int,bool,bool,int,struct(*(*`),long,long))))->(void)
(	O
name	*(char)
,	O
&	O
end	*(char)
,	O
&	O
shape	*(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
)	O
;	O
colon	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
name	*(char)
,	O
':'	O
)	O
;	O
if	O
(	O
colon	*(char)
==	O
NULL	O
||	O
colon	*(char)
>=	O
end	*(char)
)	O
insert_keyword_callshape	(*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),*(char),long,*(struct(int,int,int,bool,bool,int,struct(*(*`),long,long))))->(void)
(	O
&	O
keywords	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
,	O
name	*(char)
,	O
end	*(char)
-	O
name	*(char)
,	O
&	O
shape	*(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
)	O
;	O
}	O
}	O
static	O
void	O
init_keywords	()->(void)
(	O
)	O
{	O
if	O
(	O
default_keywords	bool
)	O
{	O
x_perl_keyword	(*(char))->(void)
(	O
"gettext"	*(char)
)	O
;	O
x_perl_keyword	(*(char))->(void)
(	O
"%gettext"	*(char)
)	O
;	O
x_perl_keyword	(*(char))->(void)
(	O
"$gettext"	*(char)
)	O
;	O
x_perl_keyword	(*(char))->(void)
(	O
"dgettext:2"	*(char)
)	O
;	O
x_perl_keyword	(*(char))->(void)
(	O
"dcgettext:2"	*(char)
)	O
;	O
x_perl_keyword	(*(char))->(void)
(	O
"ngettext:1,2"	*(char)
)	O
;	O
x_perl_keyword	(*(char))->(void)
(	O
"dngettext:2,3"	*(char)
)	O
;	O
x_perl_keyword	(*(char))->(void)
(	O
"dcngettext:2,3"	*(char)
)	O
;	O
x_perl_keyword	(*(char))->(void)
(	O
"gettext_noop"	*(char)
)	O
;	O
x_perl_keyword	(*(char))->(void)
(	O
"pgettext:1c,2"	*(char)
)	O
;	O
x_perl_keyword	(*(char))->(void)
(	O
"dpgettext:2c,3"	*(char)
)	O
;	O
x_perl_keyword	(*(char))->(void)
(	O
"dcpgettext:2c,3"	*(char)
)	O
;	O
x_perl_keyword	(*(char))->(void)
(	O
"npgettext:1c,2,3"	*(char)
)	O
;	O
x_perl_keyword	(*(char))->(void)
(	O
"dnpgettext:2c,3,4"	*(char)
)	O
;	O
x_perl_keyword	(*(char))->(void)
(	O
"dcnpgettext:2c,3,4"	*(char)
)	O
;	O
default_keywords	bool
=	O
false	int
;	O
}	O
}	O
void	O
init_flag_table_perl	()->(void)
(	O
)	O
{	O
xgettext_record_flag	(*(char))->(void)
(	O
"gettext:1:pass-perl-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"gettext:1:pass-perl-brace-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"%gettext:1:pass-perl-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"%gettext:1:pass-perl-brace-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"$gettext:1:pass-perl-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"$gettext:1:pass-perl-brace-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"dgettext:2:pass-perl-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"dgettext:2:pass-perl-brace-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"dcgettext:2:pass-perl-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"dcgettext:2:pass-perl-brace-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"ngettext:1:pass-perl-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"ngettext:2:pass-perl-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"ngettext:1:pass-perl-brace-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"ngettext:2:pass-perl-brace-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"dngettext:2:pass-perl-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"dngettext:3:pass-perl-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"dngettext:2:pass-perl-brace-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"dngettext:3:pass-perl-brace-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"dcngettext:2:pass-perl-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"dcngettext:3:pass-perl-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"dcngettext:2:pass-perl-brace-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"dcngettext:3:pass-perl-brace-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"gettext_noop:1:pass-perl-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"gettext_noop:1:pass-perl-brace-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"pgettext:2:pass-perl-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"pgettext:2:pass-perl-brace-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"dpgettext:3:pass-perl-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"dpgettext:3:pass-perl-brace-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"dcpgettext:3:pass-perl-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"dcpgettext:3:pass-perl-brace-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"npgettext:2:pass-perl-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"npgettext:3:pass-perl-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"npgettext:2:pass-perl-brace-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"npgettext:3:pass-perl-brace-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"dnpgettext:3:pass-perl-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"dnpgettext:4:pass-perl-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"dnpgettext:3:pass-perl-brace-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"dnpgettext:4:pass-perl-brace-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"dcnpgettext:3:pass-perl-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"dcnpgettext:4:pass-perl-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"dcnpgettext:3:pass-perl-brace-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"dcnpgettext:4:pass-perl-brace-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"printf:1:perl-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"sprintf:1:perl-format"	*(char)
)	O
;	O
}	O
static	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
static	O
char	O
*	O
linebuf	*(char)
;	O
static	O
int	O
linesize	int
;	O
static	O
int	O
linepos	int
;	O
static	O
size_t	long
linebuf_size	long
;	O
static	O
int	O
eaten_here	int
;	O
static	O
bool	bool
end_of_file	bool
;	O
static	O
int	O
phase1_getc	()->(int)
(	O
)	O
{	O
line_number	long
+=	O
eaten_here	int
;	O
eaten_here	int
=	O
0	int
;	O
if	O
(	O
end_of_file	bool
)	O
return	O
EOF	O
;	O
if	O
(	O
linepos	int
>=	O
linesize	int
)	O
{	O
linesize	int
=	O
getline	(*(*(char)),*(long),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
&	O
linebuf	*(char)
,	O
&	O
linebuf_size	long
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
linesize	int
<	O
0	int
)	O
{	O
if	O
(	O
ferror	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"error while reading \"%s\""	*(char)
)	O
,	O
real_file_name	*(char)
)	O
;	O
end_of_file	bool
=	O
true	int
;	O
return	O
EOF	O
;	O
}	O
linepos	int
=	O
0	int
;	O
++	O
line_number	long
;	O
if	O
(	O
linesize	int
>=	O
2	int
&&	O
linebuf	*(char)
[	O
linesize	int
-	O
1	int
]	O
==	O
'\n'	O
&&	O
linebuf	*(char)
[	O
linesize	int
-	O
2	int
]	O
==	O
'\r'	O
)	O
{	O
linebuf	*(char)
[	O
linesize	int
-	O
2	int
]	O
=	O
'\n'	O
;	O
linebuf	*(char)
[	O
linesize	int
-	O
1	int
]	O
=	O
'\0'	O
;	O
--	O
linesize	int
;	O
}	O
}	O
return	O
linebuf	*(char)
[	O
linepos	int
++	O
]	O
;	O
}	O
static	O
void	O
phase1_ungetc	(int)->(void)
(	O
int	O
c	int
)	O
{	O
if	O
(	O
c	int
!=	O
EOF	O
)	O
{	O
if	O
(	O
linepos	int
==	O
0	int
)	O
abort	()->(void)
(	O
)	O
;	O
--	O
linepos	int
;	O
}	O
}	O
static	O
char	O
*	O
get_here_document	(*(char))->(*(char))
(	O
const	O
char	O
*	O
delimiter	*(char)
)	O
{	O
static	O
char	O
*	O
buffer	*(char)
;	O
static	O
size_t	long
bufmax	long
=	O
0	int
;	O
size_t	long
bufpos	long
=	O
0	int
;	O
static	O
char	O
*	O
my_linebuf	*(char)
=	O
NULL	O
;	O
static	O
size_t	long
my_linebuf_size	long
=	O
0	int
;	O
if	O
(	O
bufmax	long
==	O
0	int
)	O
{	O
buffer	*(char)
=	O
XNMALLOC	O
(	O
1	int
,	O
char	O
)	O
;	O
buffer	*(char)
[	O
0	int
]	O
=	O
'\0'	O
;	O
bufmax	long
=	O
1	int
;	O
}	O
for	O
(	O
;	O
;	O
)	O
{	O
int	O
read_bytes	int
=	O
getline	(*(*(char)),*(long),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
&	O
my_linebuf	*(char)
,	O
&	O
my_linebuf_size	long
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
char	O
*	O
my_line_utf8	*(char)
;	O
bool	bool
chomp	bool
;	O
if	O
(	O
read_bytes	int
<	O
0	int
)	O
{	O
if	O
(	O
ferror	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
{	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"error while reading \"%s\""	*(char)
)	O
,	O
real_file_name	*(char)
)	O
;	O
}	O
else	O
{	O
error_with_progname	bool
=	O
false	int
;	O
error	(int,int,*(char))->(void)
(	O
EXIT_SUCCESS	int
,	O
0	int
,	O
_	O
(	O
"%s:%d: can't find string terminator \"%s\" anywhere before EOF"	*(char)
)	O
,	O
real_file_name	*(char)
,	O
line_number	long
,	O
delimiter	*(char)
)	O
;	O
error_with_progname	bool
=	O
true	int
;	O
break	O
;	O
}	O
}	O
++	O
eaten_here	int
;	O
my_line_utf8	*(char)
=	O
from_current_source_encoding	(*(char),enum(int,int,int,int,int,int),*(char),long)->(*(char))
(	O
my_linebuf	*(char)
,	O
lc_string	int
,	O
logical_file_name	*(char)
,	O
line_number	long
+	O
eaten_here	int
)	O
;	O
if	O
(	O
my_line_utf8	*(char)
!=	O
my_linebuf	*(char)
)	O
{	O
if	O
(	O
strlen	(*(char))->(long)
(	O
my_line_utf8	*(char)
)	O
>=	O
my_linebuf_size	long
)	O
{	O
my_linebuf_size	long
=	O
strlen	(*(char))->(long)
(	O
my_line_utf8	*(char)
)	O
+	O
1	int
;	O
my_linebuf	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
my_linebuf	*(char)
,	O
my_linebuf_size	long
)	O
;	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
my_linebuf	*(char)
,	O
my_line_utf8	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
my_line_utf8	*(char)
)	O
;	O
}	O
if	O
(	O
read_bytes	int
>=	O
2	int
&&	O
my_linebuf	*(char)
[	O
read_bytes	int
-	O
1	int
]	O
==	O
'\n'	O
&&	O
my_linebuf	*(char)
[	O
read_bytes	int
-	O
2	int
]	O
==	O
'\r'	O
)	O
{	O
my_linebuf	*(char)
[	O
read_bytes	int
-	O
2	int
]	O
=	O
'\n'	O
;	O
my_linebuf	*(char)
[	O
read_bytes	int
-	O
1	int
]	O
=	O
'\0'	O
;	O
--	O
read_bytes	int
;	O
}	O
chomp	bool
=	O
false	int
;	O
if	O
(	O
read_bytes	int
>=	O
1	int
&&	O
my_linebuf	*(char)
[	O
read_bytes	int
-	O
1	int
]	O
==	O
'\n'	O
)	O
{	O
chomp	bool
=	O
true	int
;	O
my_linebuf	*(char)
[	O
read_bytes	int
-	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
my_linebuf	*(char)
,	O
delimiter	*(char)
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
chomp	bool
)	O
my_linebuf	*(char)
[	O
read_bytes	int
-	O
1	int
]	O
=	O
'\n'	O
;	O
if	O
(	O
bufpos	long
+	O
read_bytes	int
>=	O
bufmax	long
)	O
{	O
do	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
while	O
(	O
bufpos	long
+	O
read_bytes	int
>=	O
bufmax	long
)	O
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
buffer	*(char)
+	O
bufpos	long
,	O
my_linebuf	*(char)
)	O
;	O
bufpos	long
+=	O
read_bytes	int
;	O
}	O
return	O
xstrdup	(*(char))->(*(char))
(	O
buffer	*(char)
)	O
;	O
}	O
static	O
void	O
skip_pod	()->(void)
(	O
)	O
{	O
line_number	long
+=	O
eaten_here	int
;	O
eaten_here	int
=	O
0	int
;	O
linepos	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
linesize	int
=	O
getline	(*(*(char)),*(long),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
&	O
linebuf	*(char)
,	O
&	O
linebuf_size	long
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
linesize	int
<	O
0	int
)	O
{	O
if	O
(	O
ferror	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"error while reading \"%s\""	*(char)
)	O
,	O
real_file_name	*(char)
)	O
;	O
return	O
;	O
}	O
++	O
line_number	long
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
"=cut"	*(char)
,	O
linebuf	*(char)
,	O
4	int
)	O
==	O
0	int
)	O
{	O
linepos	int
=	O
linesize	int
;	O
return	O
;	O
}	O
}	O
}	O
static	O
int	O
last_comment_line	int
;	O
static	O
int	O
last_non_comment_line	int
;	O
static	O
int	O
phase2_getc	()->(int)
(	O
)	O
{	O
static	O
char	O
*	O
buffer	*(char)
;	O
static	O
size_t	long
bufmax	long
;	O
size_t	long
buflen	long
;	O
int	O
lineno	int
;	O
int	O
c	int
;	O
char	O
*	O
utf8_string	*(char)
;	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'#'	O
)	O
{	O
buflen	long
=	O
0	int
;	O
lineno	int
=	O
line_number	long
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
if	O
(	O
c	int
!=	O
' '	O
&&	O
c	int
!=	O
'\t'	O
&&	O
c	int
!=	O
'\r'	O
&&	O
c	int
!=	O
'\f'	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
break	O
;	O
}	O
}	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
EOF	O
)	O
break	O
;	O
if	O
(	O
buflen	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
buffer	*(char)
[	O
buflen	long
++	O
]	O
=	O
c	int
;	O
}	O
if	O
(	O
buflen	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
buffer	*(char)
[	O
buflen	long
]	O
=	O
'\0'	O
;	O
utf8_string	*(char)
=	O
from_current_source_encoding	(*(char),enum(int,int,int,int,int,int),*(char),long)->(*(char))
(	O
buffer	*(char)
,	O
lc_comment	int
,	O
logical_file_name	*(char)
,	O
lineno	int
)	O
;	O
savable_comment_add	(*(char))->(void)
(	O
utf8_string	*(char)
)	O
;	O
last_comment_line	int
=	O
lineno	int
;	O
}	O
return	O
c	int
;	O
}	O
static	O
void	O
phase2_ungetc	(int)->(void)
(	O
int	O
c	int
)	O
{	O
if	O
(	O
c	int
!=	O
EOF	O
)	O
phase1_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
}	O
static	O
inline	O
bool	bool
is_whitespace	(int)->(bool)
(	O
int	O
c	int
)	O
{	O
return	O
(	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\r'	O
||	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
'\f'	O
)	O
;	O
}	O
enum	O
token_type_ty	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
{	O
token_type_eof	int
,	O
token_type_lparen	int
,	O
token_type_rparen	int
,	O
token_type_comma	int
,	O
token_type_fat_comma	int
,	O
token_type_dereference	int
,	O
token_type_semicolon	int
,	O
token_type_lbrace	int
,	O
token_type_rbrace	int
,	O
token_type_lbracket	int
,	O
token_type_rbracket	int
,	O
token_type_string	int
,	O
token_type_number	int
,	O
token_type_named_op	int
,	O
token_type_variable	int
,	O
token_type_object	int
,	O
token_type_symbol	int
,	O
token_type_regex_op	int
,	O
token_type_dot	int
,	O
token_type_other	int
,	O
token_type_keyword_symbol	int
}	O
;	O
typedef	O
enum	O
token_type_ty	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
token_type_ty	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
enum	O
string_type_ty	enum(int,int,int,int)
{	O
string_type_verbatim	int
,	O
string_type_q	int
,	O
string_type_qq	int
,	O
string_type_qr	int
}	O
;	O
enum	O
symbol_type_ty	enum(int,int,int)
{	O
symbol_type_none	int
,	O
symbol_type_sub	int
,	O
symbol_type_function	int
}	O
;	O
typedef	O
struct	O
token_ty	struct
token_ty	struct
;	O
struct	O
token_ty	struct
{	O
token_type_ty	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
type	char
;	O
token_type_ty	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
last_type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
int	O
sub_type	int
;	O
char	O
*	O
string	*(char)
;	O
refcounted_string_list_ty	struct
*	O
comment	*(struct(*(*(char)),long,long))
;	O
int	O
line_number	long
;	O
}	O
;	O
static	O
inline	O
void	O
free_token	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))->(void)
(	O
token_ty	struct
*	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
)	O
{	O
switch	O
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
)	O
{	O
case	O
token_type_named_op	int
:	O
case	O
token_type_string	int
:	O
case	O
token_type_symbol	int
:	O
case	O
token_type_variable	int
:	O
case	O
token_type_object	int
:	O
free	(*(void))->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
)	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
if	O
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
==	O
token_type_string	int
)	O
drop_reference	(*(struct(int,struct(*(*`),long,long))))->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
comment	*(struct(*(*(char)),long,long))
)	O
;	O
free	(*(void))->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
)	O
;	O
}	O
static	O
char	O
*	O
extract_quotelike_pass1	(int)->(*(char))
(	O
int	O
delim	*(char)
)	O
{	O
int	O
bufmax	long
=	O
10	int
;	O
char	O
*	O
buffer	*(char)
=	O
XNMALLOC	O
(	O
bufmax	long
,	O
char	O
)	O
;	O
int	O
bufpos	long
=	O
0	int
;	O
bool	bool
nested	bool
=	O
true	int
;	O
int	O
counter_delim	int
;	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
delim	*(char)
;	O
switch	O
(	O
delim	*(char)
)	O
{	O
case	O
'('	O
:	O
counter_delim	int
=	O
')'	O
;	O
break	O
;	O
case	O
'{'	O
:	O
counter_delim	int
=	O
'}'	O
;	O
break	O
;	O
case	O
'['	O
:	O
counter_delim	int
=	O
']'	O
;	O
break	O
;	O
case	O
'<'	O
:	O
counter_delim	int
=	O
'>'	O
;	O
break	O
;	O
default	O
:	O
nested	bool
=	O
false	int
;	O
counter_delim	int
=	O
delim	*(char)
;	O
break	O
;	O
}	O
for	O
(	O
;	O
;	O
)	O
{	O
int	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
bufpos	long
+	O
2	int
>	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
if	O
(	O
c	int
==	O
counter_delim	int
||	O
c	int
==	O
EOF	O
)	O
{	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
counter_delim	int
;	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
'\0'	O
;	O
return	O
buffer	*(char)
;	O
}	O
if	O
(	O
nested	bool
&&	O
c	int
==	O
delim	*(char)
)	O
{	O
char	O
*	O
inner	*(char)
=	O
extract_quotelike_pass1	(int)->(*(char))
(	O
delim	*(char)
)	O
;	O
size_t	long
len	long
=	O
strlen	(*(char))->(long)
(	O
inner	*(char)
)	O
;	O
if	O
(	O
bufpos	long
+	O
len	long
>=	O
bufmax	long
)	O
{	O
do	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
while	O
(	O
bufpos	long
+	O
len	long
>=	O
bufmax	long
)	O
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
buffer	*(char)
+	O
bufpos	long
,	O
inner	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
inner	*(char)
)	O
;	O
bufpos	long
+=	O
len	long
;	O
}	O
else	O
if	O
(	O
c	int
==	O
'\\'	O
)	O
{	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'\\'	O
)	O
{	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
'\\'	O
;	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
'\\'	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
delim	*(char)
||	O
c	int
==	O
counter_delim	int
)	O
{	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
c	int
;	O
}	O
else	O
{	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
'\\'	O
;	O
phase1_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
}	O
}	O
else	O
{	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
c	int
;	O
}	O
}	O
}	O
static	O
char	O
*	O
extract_quotelike_pass1_utf8	(int)->(*(char))
(	O
int	O
delim	*(char)
)	O
{	O
char	O
*	O
string	*(char)
=	O
extract_quotelike_pass1	(int)->(*(char))
(	O
delim	*(char)
)	O
;	O
char	O
*	O
utf8_string	*(char)
=	O
from_current_source_encoding	(*(char),enum(int,int,int,int,int,int),*(char),long)->(*(char))
(	O
string	*(char)
,	O
lc_string	int
,	O
logical_file_name	*(char)
,	O
line_number	long
)	O
;	O
if	O
(	O
utf8_string	*(char)
!=	O
string	*(char)
)	O
free	(*(void))->(void)
(	O
string	*(char)
)	O
;	O
return	O
utf8_string	*(char)
;	O
}	O
static	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
*	O
flag_context_list_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
;	O
static	O
void	O
interpolate_keywords	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char),int)->(void)
(	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
const	O
char	O
*	O
string	*(char)
,	O
int	O
lineno	int
)	O
;	O
static	O
token_ty	struct
*	O
x_perl_lex	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))))->(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))
(	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
)	O
;	O
static	O
void	O
x_perl_unlex	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))->(void)
(	O
token_ty	struct
*	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
)	O
;	O
static	O
bool	bool
extract_balanced	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),bool,bool,struct(int,int,int,int,int,int),struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct`)))),int,*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))->(bool)
(	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
token_type_ty	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
delim	*(char)
,	O
bool	bool
eat_delim	bool
,	O
bool	bool
comma_delim	bool
,	O
flag_context_ty	struct
outer_context	struct(int,int,int,int,int,int)
,	O
flag_context_list_iterator_ty	struct
context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
,	O
int	O
arg	int
,	O
struct	O
arglist_parser	struct(*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int)))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))
*	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
)	O
;	O
static	O
const	O
char	O
*	O
extract_hex	(*(char),long,*(int))->(*(char))
(	O
const	O
char	O
*	O
string	*(char)
,	O
size_t	long
len	long
,	O
unsigned	O
int	O
*	O
result	*(*(void))
)	O
{	O
size_t	long
i	long
;	O
*	O
result	*(*(void))
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
len	long
;	O
i	long
++	O
)	O
{	O
char	O
c	int
=	O
string	*(char)
[	O
i	long
]	O
;	O
int	O
number	int
;	O
if	O
(	O
c	int
>=	O
'A'	O
&&	O
c	int
<=	O
'F'	O
)	O
number	int
=	O
c	int
-	O
'A'	O
+	O
10	int
;	O
else	O
if	O
(	O
c	int
>=	O
'a'	O
&&	O
c	int
<=	O
'f'	O
)	O
number	int
=	O
c	int
-	O
'a'	O
+	O
10	int
;	O
else	O
if	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
)	O
number	int
=	O
c	int
-	O
'0'	O
;	O
else	O
break	O
;	O
*	O
result	*(*(void))
<<=	O
4	int
;	O
*	O
result	*(*(void))
|=	O
number	int
;	O
}	O
return	O
string	*(char)
+	O
i	long
;	O
}	O
static	O
const	O
char	O
*	O
extract_oct	(*(char),long,*(int))->(*(char))
(	O
const	O
char	O
*	O
string	*(char)
,	O
size_t	long
len	long
,	O
unsigned	O
int	O
*	O
result	*(*(void))
)	O
{	O
size_t	long
i	long
;	O
*	O
result	*(*(void))
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
len	long
;	O
i	long
++	O
)	O
{	O
char	O
c	int
=	O
string	*(char)
[	O
i	long
]	O
;	O
int	O
number	int
;	O
if	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'7'	O
)	O
number	int
=	O
c	int
-	O
'0'	O
;	O
else	O
break	O
;	O
*	O
result	*(*(void))
<<=	O
3	int
;	O
*	O
result	*(*(void))
|=	O
number	int
;	O
}	O
return	O
string	*(char)
+	O
i	long
;	O
}	O
static	O
void	O
extract_quotelike	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)),int)->(void)
(	O
token_ty	struct
*	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
,	O
int	O
delim	*(char)
)	O
{	O
char	O
*	O
string	*(char)
=	O
extract_quotelike_pass1_utf8	(int)->(*(char))
(	O
delim	*(char)
)	O
;	O
size_t	long
len	long
=	O
strlen	(*(char))->(long)
(	O
string	*(char)
)	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_string	int
;	O
if	O
(	O
!	O
(	O
len	long
>=	O
2	int
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
string	*(char)
[	O
len	long
-	O
1	int
]	O
=	O
'\0'	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
string	*(char)
+	O
1	int
)	O
;	O
free	(*(void))->(void)
(	O
string	*(char)
)	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
comment	*(struct(*(*(char)),long,long))
=	O
add_reference	(*(struct(int,struct(*(*`),long,long))))->(*(struct(int,struct(*(*`),long,long))))
(	O
savable_comment	*(struct(int,struct(*(*(char)),long,long)))
)	O
;	O
}	O
static	O
void	O
extract_triple_quotelike	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)),int,bool)->(void)
(	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
token_ty	struct
*	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
,	O
int	O
delim	*(char)
,	O
bool	bool
interpolate	bool
)	O
{	O
char	O
*	O
string	*(char)
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_regex_op	int
;	O
string	*(char)
=	O
extract_quotelike_pass1_utf8	(int)->(*(char))
(	O
delim	*(char)
)	O
;	O
if	O
(	O
interpolate	bool
)	O
interpolate_keywords	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char),int)->(void)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
string	*(char)
,	O
line_number	long
)	O
;	O
free	(*(void))->(void)
(	O
string	*(char)
)	O
;	O
if	O
(	O
delim	*(char)
==	O
'('	O
||	O
delim	*(char)
==	O
'<'	O
||	O
delim	*(char)
==	O
'{'	O
||	O
delim	*(char)
==	O
'['	O
)	O
{	O
delim	*(char)
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
while	O
(	O
is_whitespace	(int)->(bool)
(	O
delim	*(char)
)	O
)	O
{	O
delim	*(char)
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
}	O
}	O
string	*(char)
=	O
extract_quotelike_pass1_utf8	(int)->(*(char))
(	O
delim	*(char)
)	O
;	O
if	O
(	O
interpolate	bool
)	O
interpolate_keywords	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char),int)->(void)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
string	*(char)
,	O
line_number	long
)	O
;	O
free	(*(void))->(void)
(	O
string	*(char)
)	O
;	O
}	O
static	O
void	O
extract_quotelike_pass3	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)),int)->(void)
(	O
token_ty	struct
*	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
,	O
int	O
error_level	int
)	O
{	O
static	O
char	O
*	O
buffer	*(char)
;	O
static	O
int	O
bufmax	long
=	O
0	int
;	O
int	O
bufpos	long
=	O
0	int
;	O
const	O
char	O
*	O
crs	*(char)
;	O
bool	bool
uppercase	bool
;	O
bool	bool
lowercase	bool
;	O
bool	bool
quotemeta	bool
;	O
if	O
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
sub_type	int
==	O
string_type_verbatim	int
)	O
return	O
;	O
crs	*(char)
=	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
;	O
uppercase	bool
=	O
false	int
;	O
lowercase	bool
=	O
false	int
;	O
quotemeta	bool
=	O
false	int
;	O
while	O
(	O
*	O
crs	*(char)
)	O
{	O
bool	bool
backslashed	bool
;	O
if	O
(	O
bufpos	long
+	O
7	int
>	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
if	O
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
sub_type	int
==	O
string_type_q	int
)	O
{	O
switch	O
(	O
*	O
crs	*(char)
)	O
{	O
case	O
'\\'	O
:	O
if	O
(	O
crs	*(char)
[	O
1	int
]	O
==	O
'\\'	O
)	O
{	O
crs	*(char)
+=	O
2	int
;	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
'\\'	O
;	O
break	O
;	O
}	O
default	O
:	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
*	O
crs	*(char)
++	O
;	O
break	O
;	O
}	O
continue	O
;	O
}	O
if	O
(	O
*	O
crs	*(char)
==	O
'\\'	O
)	O
{	O
switch	O
(	O
crs	*(char)
[	O
1	int
]	O
)	O
{	O
case	O
't'	O
:	O
crs	*(char)
+=	O
2	int
;	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
'\t'	O
;	O
continue	O
;	O
case	O
'n'	O
:	O
crs	*(char)
+=	O
2	int
;	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
'\n'	O
;	O
continue	O
;	O
case	O
'r'	O
:	O
crs	*(char)
+=	O
2	int
;	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
'\r'	O
;	O
continue	O
;	O
case	O
'f'	O
:	O
crs	*(char)
+=	O
2	int
;	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
'\f'	O
;	O
continue	O
;	O
case	O
'b'	O
:	O
crs	*(char)
+=	O
2	int
;	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
'\b'	O
;	O
continue	O
;	O
case	O
'a'	O
:	O
crs	*(char)
+=	O
2	int
;	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
'\a'	O
;	O
continue	O
;	O
case	O
'e'	O
:	O
crs	*(char)
+=	O
2	int
;	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
0x1b	int
;	O
continue	O
;	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
{	O
unsigned	O
int	O
oct_number	int
;	O
int	O
length	long
;	O
crs	*(char)
=	O
extract_oct	(*(char),long,*(int))->(*(char))
(	O
crs	*(char)
+	O
1	int
,	O
3	int
,	O
&	O
oct_number	int
)	O
;	O
if	O
(	O
uppercase	bool
&&	O
oct_number	int
>=	O
'a'	O
&&	O
oct_number	int
<=	O
'z'	O
)	O
{	O
oct_number	int
=	O
oct_number	int
-	O
'a'	O
+	O
'A'	O
;	O
}	O
else	O
if	O
(	O
lowercase	bool
&&	O
oct_number	int
>=	O
'A'	O
&&	O
oct_number	int
<=	O
'Z'	O
)	O
{	O
oct_number	int
=	O
oct_number	int
-	O
'A'	O
+	O
'a'	O
;	O
}	O
length	long
=	O
u8_uctomb	(*(char),int,int)->(int)
(	O
(	O
unsigned	O
char	O
*	O
)	O
(	O
buffer	*(char)
+	O
bufpos	long
)	O
,	O
oct_number	int
,	O
2	int
)	O
;	O
if	O
(	O
length	long
>	O
0	int
)	O
bufpos	long
+=	O
length	long
;	O
}	O
continue	O
;	O
case	O
'x'	O
:	O
{	O
unsigned	O
int	O
hex_number	int
=	O
0	int
;	O
int	O
length	long
;	O
crs	*(char)
+=	O
2	int
;	O
if	O
(	O
*	O
crs	*(char)
==	O
'{'	O
)	O
{	O
const	O
char	O
*	O
end	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
crs	*(char)
,	O
'}'	O
)	O
;	O
if	O
(	O
end	*(char)
==	O
NULL	O
)	O
{	O
error_with_progname	bool
=	O
false	int
;	O
error	(int,int,*(char))->(void)
(	O
error_level	int
,	O
0	int
,	O
_	O
(	O
"%s:%d: missing right brace on \\x{HEXNUMBER}"	*(char)
)	O
,	O
real_file_name	*(char)
,	O
line_number	long
)	O
;	O
error_with_progname	bool
=	O
true	int
;	O
++	O
crs	*(char)
;	O
continue	O
;	O
}	O
else	O
{	O
++	O
crs	*(char)
;	O
(	O
void	O
)	O
extract_hex	(*(char),long,*(int))->(*(char))
(	O
crs	*(char)
,	O
end	*(char)
-	O
crs	*(char)
,	O
&	O
hex_number	int
)	O
;	O
crs	*(char)
=	O
end	*(char)
+	O
1	int
;	O
}	O
}	O
else	O
{	O
crs	*(char)
=	O
extract_hex	(*(char),long,*(int))->(*(char))
(	O
crs	*(char)
,	O
2	int
,	O
&	O
hex_number	int
)	O
;	O
}	O
if	O
(	O
uppercase	bool
&&	O
hex_number	int
>=	O
'a'	O
&&	O
hex_number	int
<=	O
'z'	O
)	O
{	O
hex_number	int
=	O
hex_number	int
-	O
'a'	O
+	O
'A'	O
;	O
}	O
else	O
if	O
(	O
lowercase	bool
&&	O
hex_number	int
>=	O
'A'	O
&&	O
hex_number	int
<=	O
'Z'	O
)	O
{	O
hex_number	int
=	O
hex_number	int
-	O
'A'	O
+	O
'a'	O
;	O
}	O
length	long
=	O
u8_uctomb	(*(char),int,int)->(int)
(	O
(	O
unsigned	O
char	O
*	O
)	O
(	O
buffer	*(char)
+	O
bufpos	long
)	O
,	O
hex_number	int
,	O
6	int
)	O
;	O
if	O
(	O
length	long
>	O
0	int
)	O
bufpos	long
+=	O
length	long
;	O
}	O
continue	O
;	O
case	O
'c'	O
:	O
crs	*(char)
+=	O
2	int
;	O
if	O
(	O
*	O
crs	*(char)
)	O
{	O
int	O
the_char	int
=	O
(	O
unsigned	O
char	O
)	O
*	O
crs	*(char)
;	O
if	O
(	O
the_char	int
>=	O
'a'	O
&&	O
the_char	int
<=	O
'z'	O
)	O
the_char	int
=	O
the_char	int
-	O
'a'	O
+	O
'A'	O
;	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
the_char	int
^	O
0x40	int
;	O
}	O
continue	O
;	O
case	O
'N'	O
:	O
crs	*(char)
+=	O
2	int
;	O
if	O
(	O
*	O
crs	*(char)
==	O
'{'	O
)	O
{	O
const	O
char	O
*	O
end	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
crs	*(char)
+	O
1	int
,	O
'}'	O
)	O
;	O
if	O
(	O
end	*(char)
!=	O
NULL	O
)	O
{	O
char	O
*	O
name	*(char)
;	O
unsigned	O
int	O
unicode	int
;	O
name	*(char)
=	O
XNMALLOC	O
(	O
end	*(char)
-	O
(	O
crs	*(char)
+	O
1	int
)	O
+	O
1	int
,	O
char	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
name	*(char)
,	O
crs	*(char)
+	O
1	int
,	O
end	*(char)
-	O
(	O
crs	*(char)
+	O
1	int
)	O
)	O
;	O
name	*(char)
[	O
end	*(char)
-	O
(	O
crs	*(char)
+	O
1	int
)	O
]	O
=	O
'\0'	O
;	O
unicode	int
=	O
unicode_name_character	(*(char))->(int)
(	O
name	*(char)
)	O
;	O
if	O
(	O
unicode	int
!=	O
UNINAME_INVALID	O
)	O
{	O
int	O
length	long
=	O
u8_uctomb	(*(char),int,int)->(int)
(	O
(	O
unsigned	O
char	O
*	O
)	O
(	O
buffer	*(char)
+	O
bufpos	long
)	O
,	O
unicode	int
,	O
6	int
)	O
;	O
if	O
(	O
length	long
>	O
0	int
)	O
bufpos	long
+=	O
length	long
;	O
}	O
free	(*(void))->(void)
(	O
name	*(char)
)	O
;	O
crs	*(char)
=	O
end	*(char)
+	O
1	int
;	O
}	O
}	O
continue	O
;	O
}	O
}	O
if	O
(	O
*	O
crs	*(char)
==	O
'\\'	O
)	O
{	O
++	O
crs	*(char)
;	O
switch	O
(	O
*	O
crs	*(char)
)	O
{	O
case	O
'E'	O
:	O
uppercase	bool
=	O
false	int
;	O
lowercase	bool
=	O
false	int
;	O
quotemeta	bool
=	O
false	int
;	O
++	O
crs	*(char)
;	O
continue	O
;	O
case	O
'L'	O
:	O
uppercase	bool
=	O
false	int
;	O
lowercase	bool
=	O
true	int
;	O
++	O
crs	*(char)
;	O
continue	O
;	O
case	O
'U'	O
:	O
uppercase	bool
=	O
true	int
;	O
lowercase	bool
=	O
false	int
;	O
++	O
crs	*(char)
;	O
continue	O
;	O
case	O
'Q'	O
:	O
quotemeta	bool
=	O
true	int
;	O
++	O
crs	*(char)
;	O
continue	O
;	O
case	O
'l'	O
:	O
++	O
crs	*(char)
;	O
if	O
(	O
*	O
crs	*(char)
>=	O
'A'	O
&&	O
*	O
crs	*(char)
<=	O
'Z'	O
)	O
{	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
*	O
crs	*(char)
-	O
'A'	O
+	O
'a'	O
;	O
}	O
else	O
if	O
(	O
(	O
unsigned	O
char	O
)	O
*	O
crs	*(char)
>=	O
0x80	int
)	O
{	O
error_with_progname	bool
=	O
false	int
;	O
error	(int,int,*(char))->(void)
(	O
error_level	int
,	O
0	int
,	O
_	O
(	O
"%s:%d: invalid interpolation (\"\\l\") of 8bit character \"%c\""	*(char)
)	O
,	O
real_file_name	*(char)
,	O
line_number	long
,	O
*	O
crs	*(char)
)	O
;	O
error_with_progname	bool
=	O
true	int
;	O
}	O
else	O
{	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
*	O
crs	*(char)
;	O
}	O
++	O
crs	*(char)
;	O
continue	O
;	O
case	O
'u'	O
:	O
++	O
crs	*(char)
;	O
if	O
(	O
*	O
crs	*(char)
>=	O
'a'	O
&&	O
*	O
crs	*(char)
<=	O
'z'	O
)	O
{	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
*	O
crs	*(char)
-	O
'a'	O
+	O
'A'	O
;	O
}	O
else	O
if	O
(	O
(	O
unsigned	O
char	O
)	O
*	O
crs	*(char)
>=	O
0x80	int
)	O
{	O
error_with_progname	bool
=	O
false	int
;	O
error	(int,int,*(char))->(void)
(	O
error_level	int
,	O
0	int
,	O
_	O
(	O
"%s:%d: invalid interpolation (\"\\u\") of 8bit character \"%c\""	*(char)
)	O
,	O
real_file_name	*(char)
,	O
line_number	long
,	O
*	O
crs	*(char)
)	O
;	O
error_with_progname	bool
=	O
true	int
;	O
}	O
else	O
{	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
*	O
crs	*(char)
;	O
}	O
++	O
crs	*(char)
;	O
continue	O
;	O
case	O
'\\'	O
:	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
*	O
crs	*(char)
;	O
++	O
crs	*(char)
;	O
continue	O
;	O
default	O
:	O
backslashed	bool
=	O
true	int
;	O
break	O
;	O
}	O
}	O
else	O
backslashed	bool
=	O
false	int
;	O
if	O
(	O
quotemeta	bool
&&	O
!	O
(	O
(	O
*	O
crs	*(char)
>=	O
'A'	O
&&	O
*	O
crs	*(char)
<=	O
'Z'	O
)	O
||	O
(	O
*	O
crs	*(char)
>=	O
'A'	O
&&	O
*	O
crs	*(char)
<=	O
'z'	O
)	O
||	O
(	O
*	O
crs	*(char)
>=	O
'0'	O
&&	O
*	O
crs	*(char)
<=	O
'9'	O
)	O
||	O
*	O
crs	*(char)
==	O
'_'	O
)	O
)	O
{	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
'\\'	O
;	O
backslashed	bool
=	O
true	int
;	O
}	O
if	O
(	O
!	O
backslashed	bool
&&	O
!	O
extract_all	bool
&&	O
(	O
*	O
crs	*(char)
==	O
'$'	O
||	O
*	O
crs	*(char)
==	O
'@'	O
)	O
)	O
{	O
error_with_progname	bool
=	O
false	int
;	O
error	(int,int,*(char))->(void)
(	O
error_level	int
,	O
0	int
,	O
_	O
(	O
"%s:%d: invalid variable interpolation at \"%c\""	*(char)
)	O
,	O
real_file_name	*(char)
,	O
line_number	long
,	O
*	O
crs	*(char)
)	O
;	O
error_with_progname	bool
=	O
true	int
;	O
++	O
crs	*(char)
;	O
}	O
else	O
if	O
(	O
lowercase	bool
)	O
{	O
if	O
(	O
*	O
crs	*(char)
>=	O
'A'	O
&&	O
*	O
crs	*(char)
<=	O
'Z'	O
)	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
*	O
crs	*(char)
-	O
'A'	O
+	O
'a'	O
;	O
else	O
if	O
(	O
(	O
unsigned	O
char	O
)	O
*	O
crs	*(char)
>=	O
0x80	int
)	O
{	O
error_with_progname	bool
=	O
false	int
;	O
error	(int,int,*(char))->(void)
(	O
error_level	int
,	O
0	int
,	O
_	O
(	O
"%s:%d: invalid interpolation (\"\\L\") of 8bit character \"%c\""	*(char)
)	O
,	O
real_file_name	*(char)
,	O
line_number	long
,	O
*	O
crs	*(char)
)	O
;	O
error_with_progname	bool
=	O
true	int
;	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
*	O
crs	*(char)
;	O
}	O
else	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
*	O
crs	*(char)
;	O
++	O
crs	*(char)
;	O
}	O
else	O
if	O
(	O
uppercase	bool
)	O
{	O
if	O
(	O
*	O
crs	*(char)
>=	O
'a'	O
&&	O
*	O
crs	*(char)
<=	O
'z'	O
)	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
*	O
crs	*(char)
-	O
'a'	O
+	O
'A'	O
;	O
else	O
if	O
(	O
(	O
unsigned	O
char	O
)	O
*	O
crs	*(char)
>=	O
0x80	int
)	O
{	O
error_with_progname	bool
=	O
false	int
;	O
error	(int,int,*(char))->(void)
(	O
error_level	int
,	O
0	int
,	O
_	O
(	O
"%s:%d: invalid interpolation (\"\\U\") of 8bit character \"%c\""	*(char)
)	O
,	O
real_file_name	*(char)
,	O
line_number	long
,	O
*	O
crs	*(char)
)	O
;	O
error_with_progname	bool
=	O
true	int
;	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
*	O
crs	*(char)
;	O
}	O
else	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
*	O
crs	*(char)
;	O
++	O
crs	*(char)
;	O
}	O
else	O
{	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
*	O
crs	*(char)
++	O
;	O
}	O
}	O
if	O
(	O
bufpos	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
'\0'	O
;	O
free	(*(void))->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
)	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
buffer	*(char)
)	O
;	O
}	O
static	O
void	O
extract_variable	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)),int)->(void)
(	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
token_ty	struct
*	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
,	O
int	O
first	*(struct)
)	O
{	O
static	O
char	O
*	O
buffer	*(char)
;	O
static	O
int	O
bufmax	long
=	O
0	int
;	O
int	O
bufpos	long
=	O
0	int
;	O
int	O
c	int
=	O
first	*(struct)
;	O
size_t	long
varbody_length	long
=	O
0	int
;	O
bool	bool
maybe_hash_deref	bool
=	O
false	int
;	O
bool	bool
maybe_hash_value	bool
=	O
false	int
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_variable	int
;	O
while	O
(	O
c	int
==	O
'$'	O
||	O
c	int
==	O
'*'	O
||	O
c	int
==	O
'#'	O
||	O
c	int
==	O
'@'	O
||	O
c	int
==	O
'%'	O
)	O
{	O
if	O
(	O
bufpos	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
c	int
;	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
}	O
if	O
(	O
c	int
==	O
EOF	O
)	O
{	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_eof	int
;	O
return	O
;	O
}	O
if	O
(	O
buffer	*(char)
[	O
0	int
]	O
==	O
'$'	O
)	O
{	O
if	O
(	O
bufpos	long
==	O
1	int
)	O
maybe_hash_value	bool
=	O
true	int
;	O
else	O
if	O
(	O
bufpos	long
==	O
2	int
&&	O
buffer	*(char)
[	O
1	int
]	O
==	O
'$'	O
)	O
{	O
if	O
(	O
!	O
(	O
c	int
==	O
'{'	O
||	O
(	O
c	int
>=	O
'A'	O
&&	O
c	int
<=	O
'Z'	O
)	O
||	O
(	O
c	int
>=	O
'a'	O
&&	O
c	int
<=	O
'z'	O
)	O
||	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
)	O
||	O
c	int
==	O
'_'	O
||	O
c	int
==	O
':'	O
||	O
c	int
==	O
'\''	O
||	O
c	int
>=	O
0x80	int
)	O
)	O
{	O
if	O
(	O
bufpos	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
'\0'	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
buffer	*(char)
)	O
;	O
phase1_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
return	O
;	O
}	O
maybe_hash_deref	bool
=	O
true	int
;	O
bufpos	long
=	O
1	int
;	O
}	O
}	O
if	O
(	O
bufpos	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
if	O
(	O
c	int
==	O
'{'	O
)	O
{	O
if	O
(	O
extract_balanced	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),bool,bool,struct(int,int,int,int,int,int),struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct`)))),int,*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))->(bool)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
token_type_rbrace	int
,	O
true	int
,	O
false	int
,	O
null_context	struct(int,int,int,int,int,int)
,	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
,	O
1	int
,	O
arglist_parser_alloc	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))))))->(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
NULL	O
)	O
)	O
)	O
{	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_eof	int
;	O
return	O
;	O
}	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
c	int
;	O
}	O
else	O
{	O
while	O
(	O
(	O
c	int
>=	O
'A'	O
&&	O
c	int
<=	O
'Z'	O
)	O
||	O
(	O
c	int
>=	O
'a'	O
&&	O
c	int
<=	O
'z'	O
)	O
||	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
)	O
||	O
c	int
==	O
'_'	O
||	O
c	int
==	O
':'	O
||	O
c	int
==	O
'\''	O
||	O
c	int
>=	O
0x80	int
)	O
{	O
++	O
varbody_length	long
;	O
if	O
(	O
bufpos	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
c	int
;	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
}	O
phase1_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
}	O
if	O
(	O
varbody_length	long
==	O
0	int
)	O
{	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
||	O
is_whitespace	(int)->(bool)
(	O
c	int
)	O
)	O
phase1_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
else	O
{	O
if	O
(	O
bufpos	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
c	int
;	O
}	O
}	O
if	O
(	O
bufpos	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
'\0'	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
buffer	*(char)
)	O
;	O
if	O
(	O
maybe_hash_deref	bool
||	O
maybe_hash_value	bool
)	O
{	O
bool	bool
is_dereference	bool
=	O
false	int
;	O
int	O
c	int
;	O
do	O
c	int
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
while	O
(	O
is_whitespace	(int)->(bool)
(	O
c	int
)	O
)	O
;	O
if	O
(	O
c	int
==	O
'-'	O
)	O
{	O
int	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
==	O
'>'	O
)	O
{	O
is_dereference	bool
=	O
true	int
;	O
do	O
c	int
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
while	O
(	O
is_whitespace	(int)->(bool)
(	O
c	int
)	O
)	O
;	O
}	O
else	O
if	O
(	O
c2	int
!=	O
'\n'	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
}	O
}	O
if	O
(	O
maybe_hash_value	bool
&&	O
is_dereference	bool
)	O
{	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_object	int
;	O
}	O
else	O
if	O
(	O
maybe_hash_value	bool
)	O
{	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
[	O
0	int
]	O
=	O
'%'	O
;	O
}	O
if	O
(	O
(	O
maybe_hash_value	bool
||	O
maybe_hash_deref	bool
)	O
&&	O
c	int
==	O
'{'	O
)	O
{	O
void	O
*	O
keyword_value	*(void)
;	O
if	O
(	O
hash_find_entry	(*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),*(void),long,*(*(void)))->(int)
(	O
&	O
keywords	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
,	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
,	O
strlen	(*(char))->(long)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
)	O
,	O
&	O
keyword_value	*(void)
)	O
==	O
0	int
)	O
{	O
struct	O
callshapes	struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))))
shapes	array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
;	O
shapes	array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
.	O
keyword	*(char)
=	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
;	O
shapes	array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
.	O
keyword_len	long
=	O
strlen	(*(char))->(long)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
)	O
;	O
shapes	array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
.	O
nshapes	long
=	O
1	int
;	O
shapes	array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
.	O
shapes	array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
[	O
0	int
]	O
.	O
argnum1	int
=	O
1	int
;	O
shapes	array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
.	O
shapes	array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
[	O
0	int
]	O
.	O
argnum2	int
=	O
0	int
;	O
shapes	array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
.	O
shapes	array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
[	O
0	int
]	O
.	O
argnumc	int
=	O
0	int
;	O
shapes	array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
.	O
shapes	array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
[	O
0	int
]	O
.	O
argnum1_glib_context	bool
=	O
false	int
;	O
shapes	array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
.	O
shapes	array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
[	O
0	int
]	O
.	O
argnum2_glib_context	bool
=	O
false	int
;	O
shapes	array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
.	O
shapes	array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
[	O
0	int
]	O
.	O
argtotal	int
=	O
0	int
;	O
string_list_init	(*(struct(*(*(char)),long,long)))->(void)
(	O
&	O
shapes	array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
.	O
shapes	array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
[	O
0	int
]	O
.	O
xcomments	struct(*(*(char)),long,long)
)	O
;	O
{	O
flag_context_list_iterator_ty	struct
context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
flag_context_list_iterator	(*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))->(struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct`)))))
(	O
flag_context_list_table_lookup	(*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),*(void),long)->(*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
(	O
flag_context_list_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
,	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
,	O
strlen	(*(char))->(long)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
)	O
)	O
)	O
;	O
token_ty	struct
*	O
t1	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
=	O
x_perl_lex	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))))->(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
)	O
;	O
if	O
(	O
t1	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
==	O
token_type_symbol	int
||	O
t1	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
==	O
token_type_named_op	int
)	O
{	O
token_ty	struct
*	O
t2	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
=	O
x_perl_lex	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))))->(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
)	O
;	O
if	O
(	O
t2	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
==	O
token_type_rbrace	int
)	O
{	O
flag_context_ty	struct
context	struct(int,int,int,int,int,int)
;	O
lex_pos_ty	struct
pos	struct(*(char),long)
;	O
context	struct(int,int,int,int,int,int)
=	O
inherited_context	(struct(int,int,int,int,int,int),struct(int,int,int,int,int,int))->(struct(int,int,int,int,int,int))
(	O
null_context	struct(int,int,int,int,int,int)
,	O
flag_context_list_iterator_advance	(*(struct(int,*(struct(int,struct`,*`)))))->(struct(int,int,int,int,int,int))
(	O
&	O
context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
)	O
)	O
;	O
pos	struct(*(char),long)
.	O
line_number	long
=	O
line_number	long
;	O
pos	struct(*(char),long)
.	O
file_name	*(char)
=	O
logical_file_name	*(char)
;	O
remember_a_message	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char),*(char),bool,struct(int,int,int,int,int,int),*(struct(*(char),long)),*(char),*(struct(int,struct(*(*`),long,long))),bool)->(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
NULL	O
,	O
xstrdup	(*(char))->(*(char))
(	O
t1	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
)	O
,	O
true	int
,	O
context	struct(int,int,int,int,int,int)
,	O
&	O
pos	struct(*(char),long)
,	O
NULL	O
,	O
savable_comment	*(struct(int,struct(*(*(char)),long,long)))
,	O
true	int
)	O
;	O
free_token	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))->(void)
(	O
t2	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
)	O
;	O
free_token	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))->(void)
(	O
t1	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
)	O
;	O
}	O
else	O
{	O
x_perl_unlex	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))->(void)
(	O
t2	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
)	O
;	O
}	O
}	O
else	O
{	O
x_perl_unlex	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))->(void)
(	O
t1	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
)	O
;	O
if	O
(	O
extract_balanced	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),bool,bool,struct(int,int,int,int,int,int),struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct`)))),int,*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))->(bool)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
token_type_rbrace	int
,	O
true	int
,	O
false	int
,	O
null_context	struct(int,int,int,int,int,int)
,	O
context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
,	O
1	int
,	O
arglist_parser_alloc	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))))))->(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
&	O
shapes	array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
)	O
)	O
)	O
return	O
;	O
}	O
}	O
}	O
else	O
{	O
phase2_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
}	O
}	O
else	O
{	O
phase2_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
}	O
}	O
for	O
(	O
;	O
;	O
)	O
{	O
int	O
c	int
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
int	O
c2	int
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
'{'	O
:	O
extract_balanced	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),bool,bool,struct(int,int,int,int,int,int),struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct`)))),int,*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))->(bool)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
token_type_rbrace	int
,	O
true	int
,	O
false	int
,	O
null_context	struct(int,int,int,int,int,int)
,	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
,	O
1	int
,	O
arglist_parser_alloc	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))))))->(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
NULL	O
)	O
)	O
;	O
break	O
;	O
case	O
'['	O
:	O
extract_balanced	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),bool,bool,struct(int,int,int,int,int,int),struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct`)))),int,*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))->(bool)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
token_type_rbracket	int
,	O
true	int
,	O
false	int
,	O
null_context	struct(int,int,int,int,int,int)
,	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
,	O
1	int
,	O
arglist_parser_alloc	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))))))->(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
NULL	O
)	O
)	O
;	O
break	O
;	O
case	O
'-'	O
:	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
==	O
'>'	O
)	O
{	O
break	O
;	O
}	O
else	O
if	O
(	O
c2	int
!=	O
'\n'	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
}	O
default	O
:	O
phase2_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
return	O
;	O
}	O
}	O
}	O
static	O
void	O
interpolate_keywords	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char),int)->(void)
(	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
const	O
char	O
*	O
string	*(char)
,	O
int	O
lineno	int
)	O
{	O
static	O
char	O
*	O
buffer	*(char)
;	O
static	O
int	O
bufmax	long
=	O
0	int
;	O
int	O
bufpos	long
=	O
0	int
;	O
flag_context_ty	struct
context	struct(int,int,int,int,int,int)
;	O
int	O
c	int
;	O
bool	bool
maybe_hash_deref	bool
=	O
false	int
;	O
enum	O
parser_state	enum(int,int,int,int,int,int,int,int,int,int,int)
{	O
initial	int
,	O
one_dollar	int
,	O
two_dollars	int
,	O
identifier	int
,	O
minus	int
,	O
wait_lbrace	int
,	O
wait_quote	int
,	O
dquote	int
,	O
squote	int
,	O
barekey	int
,	O
wait_rbrace	int
}	O
state	*(int)
;	O
token_ty	struct
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*(*`),long,long))),int)
;	O
lex_pos_ty	struct
pos	struct(*(char),long)
;	O
state	*(int)
=	O
initial	int
;	O
context	struct(int,int,int,int,int,int)
=	O
null_context	struct(int,int,int,int,int,int)
;	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*(*`),long,long))),int)
.	O
type	char
=	O
token_type_string	int
;	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*(*`),long,long))),int)
.	O
sub_type	int
=	O
string_type_qq	int
;	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*(*`),long,long))),int)
.	O
line_number	long
=	O
line_number	long
;	O
pos	struct(*(char),long)
.	O
file_name	*(char)
=	O
logical_file_name	*(char)
;	O
pos	struct(*(char),long)
.	O
line_number	long
=	O
lineno	int
;	O
while	O
(	O
(	O
c	int
=	O
(	O
unsigned	O
char	O
)	O
*	O
string	*(char)
++	O
)	O
!=	O
'\0'	O
)	O
{	O
void	O
*	O
keyword_value	*(void)
;	O
if	O
(	O
state	*(int)
==	O
initial	int
)	O
bufpos	long
=	O
0	int
;	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
lineno	int
++	O
;	O
if	O
(	O
bufpos	long
+	O
1	int
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
switch	O
(	O
state	*(int)
)	O
{	O
case	O
initial	int
:	O
switch	O
(	O
c	int
)	O
{	O
case	O
'\\'	O
:	O
c	int
=	O
(	O
unsigned	O
char	O
)	O
*	O
string	*(char)
++	O
;	O
if	O
(	O
c	int
==	O
'\0'	O
)	O
return	O
;	O
break	O
;	O
case	O
'$'	O
:	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
'$'	O
;	O
maybe_hash_deref	bool
=	O
false	int
;	O
state	*(int)
=	O
one_dollar	int
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
break	O
;	O
case	O
one_dollar	int
:	O
switch	O
(	O
c	int
)	O
{	O
case	O
'$'	O
:	O
maybe_hash_deref	bool
=	O
true	int
;	O
state	*(int)
=	O
two_dollars	int
;	O
break	O
;	O
default	O
:	O
if	O
(	O
c	int
==	O
'_'	O
||	O
c	int
==	O
':'	O
||	O
c	int
==	O
'\''	O
||	O
c	int
>=	O
0x80	int
||	O
(	O
c	int
>=	O
'A'	O
&&	O
c	int
<=	O
'Z'	O
)	O
||	O
(	O
c	int
>=	O
'a'	O
&&	O
c	int
<=	O
'z'	O
)	O
||	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
)	O
)	O
{	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
c	int
;	O
state	*(int)
=	O
identifier	int
;	O
}	O
else	O
state	*(int)
=	O
initial	int
;	O
break	O
;	O
}	O
break	O
;	O
case	O
two_dollars	int
:	O
if	O
(	O
c	int
==	O
'_'	O
||	O
c	int
==	O
':'	O
||	O
c	int
==	O
'\''	O
||	O
c	int
>=	O
0x80	int
||	O
(	O
c	int
>=	O
'A'	O
&&	O
c	int
<=	O
'Z'	O
)	O
||	O
(	O
c	int
>=	O
'a'	O
&&	O
c	int
<=	O
'z'	O
)	O
||	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
)	O
)	O
{	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
c	int
;	O
state	*(int)
=	O
identifier	int
;	O
}	O
else	O
state	*(int)
=	O
initial	int
;	O
break	O
;	O
case	O
identifier	int
:	O
switch	O
(	O
c	int
)	O
{	O
case	O
'-'	O
:	O
if	O
(	O
hash_find_entry	(*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),*(void),long,*(*(void)))->(int)
(	O
&	O
keywords	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
,	O
buffer	*(char)
,	O
bufpos	long
,	O
&	O
keyword_value	*(void)
)	O
==	O
0	int
)	O
{	O
flag_context_list_iterator_ty	struct
context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
flag_context_list_iterator	(*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))->(struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct`)))))
(	O
flag_context_list_table_lookup	(*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),*(void),long)->(*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
(	O
flag_context_list_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
,	O
buffer	*(char)
,	O
bufpos	long
)	O
)	O
;	O
context	struct(int,int,int,int,int,int)
=	O
inherited_context	(struct(int,int,int,int,int,int),struct(int,int,int,int,int,int))->(struct(int,int,int,int,int,int))
(	O
null_context	struct(int,int,int,int,int,int)
,	O
flag_context_list_iterator_advance	(*(struct(int,*(struct(int,struct`,*`)))))->(struct(int,int,int,int,int,int))
(	O
&	O
context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
)	O
)	O
;	O
state	*(int)
=	O
minus	int
;	O
}	O
else	O
state	*(int)
=	O
initial	int
;	O
break	O
;	O
case	O
'{'	O
:	O
if	O
(	O
!	O
maybe_hash_deref	bool
)	O
buffer	*(char)
[	O
0	int
]	O
=	O
'%'	O
;	O
if	O
(	O
hash_find_entry	(*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),*(void),long,*(*(void)))->(int)
(	O
&	O
keywords	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
,	O
buffer	*(char)
,	O
bufpos	long
,	O
&	O
keyword_value	*(void)
)	O
==	O
0	int
)	O
{	O
flag_context_list_iterator_ty	struct
context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
flag_context_list_iterator	(*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))->(struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct`)))))
(	O
flag_context_list_table_lookup	(*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),*(void),long)->(*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
(	O
flag_context_list_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
,	O
buffer	*(char)
,	O
bufpos	long
)	O
)	O
;	O
context	struct(int,int,int,int,int,int)
=	O
inherited_context	(struct(int,int,int,int,int,int),struct(int,int,int,int,int,int))->(struct(int,int,int,int,int,int))
(	O
null_context	struct(int,int,int,int,int,int)
,	O
flag_context_list_iterator_advance	(*(struct(int,*(struct(int,struct`,*`)))))->(struct(int,int,int,int,int,int))
(	O
&	O
context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
)	O
)	O
;	O
state	*(int)
=	O
wait_quote	int
;	O
}	O
else	O
state	*(int)
=	O
initial	int
;	O
break	O
;	O
default	O
:	O
if	O
(	O
c	int
==	O
'_'	O
||	O
c	int
==	O
':'	O
||	O
c	int
==	O
'\''	O
||	O
c	int
>=	O
0x80	int
||	O
(	O
c	int
>=	O
'A'	O
&&	O
c	int
<=	O
'Z'	O
)	O
||	O
(	O
c	int
>=	O
'a'	O
&&	O
c	int
<=	O
'z'	O
)	O
||	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
)	O
)	O
{	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
c	int
;	O
}	O
else	O
state	*(int)
=	O
initial	int
;	O
break	O
;	O
}	O
break	O
;	O
case	O
minus	int
:	O
switch	O
(	O
c	int
)	O
{	O
case	O
'>'	O
:	O
state	*(int)
=	O
wait_lbrace	int
;	O
break	O
;	O
default	O
:	O
context	struct(int,int,int,int,int,int)
=	O
null_context	struct(int,int,int,int,int,int)
;	O
state	*(int)
=	O
initial	int
;	O
break	O
;	O
}	O
break	O
;	O
case	O
wait_lbrace	int
:	O
switch	O
(	O
c	int
)	O
{	O
case	O
'{'	O
:	O
state	*(int)
=	O
wait_quote	int
;	O
break	O
;	O
default	O
:	O
context	struct(int,int,int,int,int,int)
=	O
null_context	struct(int,int,int,int,int,int)
;	O
state	*(int)
=	O
initial	int
;	O
break	O
;	O
}	O
break	O
;	O
case	O
wait_quote	int
:	O
switch	O
(	O
c	int
)	O
{	O
case_whitespace	O
:	O
break	O
;	O
case	O
'\''	O
:	O
pos	struct(*(char),long)
.	O
line_number	long
=	O
lineno	int
;	O
bufpos	long
=	O
0	int
;	O
state	*(int)
=	O
squote	int
;	O
break	O
;	O
case	O
'"'	O
:	O
pos	struct(*(char),long)
.	O
line_number	long
=	O
lineno	int
;	O
bufpos	long
=	O
0	int
;	O
state	*(int)
=	O
dquote	int
;	O
break	O
;	O
default	O
:	O
if	O
(	O
c	int
==	O
'_'	O
||	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
)	O
||	O
c	int
>=	O
0x80	int
||	O
(	O
c	int
>=	O
'A'	O
&&	O
c	int
<=	O
'Z'	O
)	O
||	O
(	O
c	int
>=	O
'a'	O
&&	O
c	int
<=	O
'z'	O
)	O
)	O
{	O
pos	struct(*(char),long)
.	O
line_number	long
=	O
lineno	int
;	O
bufpos	long
=	O
0	int
;	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
c	int
;	O
state	*(int)
=	O
barekey	int
;	O
}	O
else	O
{	O
context	struct(int,int,int,int,int,int)
=	O
null_context	struct(int,int,int,int,int,int)
;	O
state	*(int)
=	O
initial	int
;	O
}	O
break	O
;	O
}	O
break	O
;	O
case	O
dquote	int
:	O
switch	O
(	O
c	int
)	O
{	O
case	O
'"'	O
:	O
buffer	*(char)
[	O
bufpos	long
]	O
=	O
'\0'	O
;	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*(*`),long,long))),int)
.	O
string	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
buffer	*(char)
)	O
;	O
extract_quotelike_pass3	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)),int)->(void)
(	O
&	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*(*`),long,long))),int)
,	O
EXIT_FAILURE	int
)	O
;	O
if	O
(	O
!	O
(	O
strlen	(*(char))->(long)
(	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*(*`),long,long))),int)
.	O
string	*(char)
)	O
<=	O
bufpos	long
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
buffer	*(char)
,	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*(*`),long,long))),int)
.	O
string	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*(*`),long,long))),int)
.	O
string	*(char)
)	O
;	O
state	*(int)
=	O
wait_rbrace	int
;	O
break	O
;	O
case	O
'\\'	O
:	O
if	O
(	O
string	*(char)
[	O
0	int
]	O
==	O
'\"'	O
)	O
{	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
string	*(char)
++	O
[	O
0	int
]	O
;	O
}	O
else	O
if	O
(	O
string	*(char)
[	O
0	int
]	O
)	O
{	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
'\\'	O
;	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
string	*(char)
++	O
[	O
0	int
]	O
;	O
}	O
else	O
{	O
context	struct(int,int,int,int,int,int)
=	O
null_context	struct(int,int,int,int,int,int)
;	O
state	*(int)
=	O
initial	int
;	O
}	O
break	O
;	O
default	O
:	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
c	int
;	O
break	O
;	O
}	O
break	O
;	O
case	O
squote	int
:	O
switch	O
(	O
c	int
)	O
{	O
case	O
'\''	O
:	O
state	*(int)
=	O
wait_rbrace	int
;	O
break	O
;	O
case	O
'\\'	O
:	O
if	O
(	O
string	*(char)
[	O
0	int
]	O
==	O
'\''	O
)	O
{	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
string	*(char)
++	O
[	O
0	int
]	O
;	O
}	O
else	O
if	O
(	O
string	*(char)
[	O
0	int
]	O
)	O
{	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
'\\'	O
;	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
string	*(char)
++	O
[	O
0	int
]	O
;	O
}	O
else	O
{	O
context	struct(int,int,int,int,int,int)
=	O
null_context	struct(int,int,int,int,int,int)
;	O
state	*(int)
=	O
initial	int
;	O
}	O
break	O
;	O
default	O
:	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
c	int
;	O
break	O
;	O
}	O
break	O
;	O
case	O
barekey	int
:	O
if	O
(	O
c	int
==	O
'_'	O
||	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
)	O
||	O
c	int
>=	O
0x80	int
||	O
(	O
c	int
>=	O
'A'	O
&&	O
c	int
<=	O
'Z'	O
)	O
||	O
(	O
c	int
>=	O
'a'	O
&&	O
c	int
<=	O
'z'	O
)	O
)	O
{	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
c	int
;	O
break	O
;	O
}	O
else	O
if	O
(	O
is_whitespace	(int)->(bool)
(	O
c	int
)	O
)	O
{	O
state	*(int)
=	O
wait_rbrace	int
;	O
break	O
;	O
}	O
else	O
if	O
(	O
c	int
!=	O
'}'	O
)	O
{	O
context	struct(int,int,int,int,int,int)
=	O
null_context	struct(int,int,int,int,int,int)
;	O
state	*(int)
=	O
initial	int
;	O
break	O
;	O
}	O
case	O
wait_rbrace	int
:	O
switch	O
(	O
c	int
)	O
{	O
case_whitespace	O
:	O
break	O
;	O
case	O
'}'	O
:	O
buffer	*(char)
[	O
bufpos	long
]	O
=	O
'\0'	O
;	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*(*`),long,long))),int)
.	O
string	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
buffer	*(char)
)	O
;	O
extract_quotelike_pass3	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)),int)->(void)
(	O
&	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*(*`),long,long))),int)
,	O
EXIT_FAILURE	int
)	O
;	O
remember_a_message	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char),*(char),bool,struct(int,int,int,int,int,int),*(struct(*(char),long)),*(char),*(struct(int,struct(*(*`),long,long))),bool)->(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
NULL	O
,	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*(*`),long,long))),int)
.	O
string	*(char)
,	O
true	int
,	O
context	struct(int,int,int,int,int,int)
,	O
&	O
pos	struct(*(char),long)
,	O
NULL	O
,	O
savable_comment	*(struct(int,struct(*(*(char)),long,long)))
,	O
true	int
)	O
;	O
default	O
:	O
context	struct(int,int,int,int,int,int)
=	O
null_context	struct(int,int,int,int,int,int)
;	O
state	*(int)
=	O
initial	int
;	O
break	O
;	O
}	O
break	O
;	O
}	O
}	O
}	O
static	O
bool	bool
prefer_regexp_over_division	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(bool)
(	O
token_type_ty	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
type	char
)	O
{	O
bool	bool
retval	bool
=	O
true	int
;	O
switch	O
(	O
type	char
)	O
{	O
case	O
token_type_eof	int
:	O
retval	bool
=	O
true	int
;	O
break	O
;	O
case	O
token_type_lparen	int
:	O
retval	bool
=	O
true	int
;	O
break	O
;	O
case	O
token_type_rparen	int
:	O
retval	bool
=	O
false	int
;	O
break	O
;	O
case	O
token_type_comma	int
:	O
retval	bool
=	O
true	int
;	O
break	O
;	O
case	O
token_type_fat_comma	int
:	O
retval	bool
=	O
true	int
;	O
break	O
;	O
case	O
token_type_dereference	int
:	O
retval	bool
=	O
true	int
;	O
break	O
;	O
case	O
token_type_semicolon	int
:	O
retval	bool
=	O
true	int
;	O
break	O
;	O
case	O
token_type_lbrace	int
:	O
retval	bool
=	O
true	int
;	O
break	O
;	O
case	O
token_type_rbrace	int
:	O
retval	bool
=	O
false	int
;	O
break	O
;	O
case	O
token_type_lbracket	int
:	O
retval	bool
=	O
true	int
;	O
break	O
;	O
case	O
token_type_rbracket	int
:	O
retval	bool
=	O
false	int
;	O
break	O
;	O
case	O
token_type_string	int
:	O
retval	bool
=	O
false	int
;	O
break	O
;	O
case	O
token_type_number	int
:	O
retval	bool
=	O
false	int
;	O
break	O
;	O
case	O
token_type_named_op	int
:	O
retval	bool
=	O
true	int
;	O
break	O
;	O
case	O
token_type_variable	int
:	O
retval	bool
=	O
false	int
;	O
break	O
;	O
case	O
token_type_object	int
:	O
retval	bool
=	O
false	int
;	O
break	O
;	O
case	O
token_type_symbol	int
:	O
case	O
token_type_keyword_symbol	int
:	O
retval	bool
=	O
true	int
;	O
break	O
;	O
case	O
token_type_regex_op	int
:	O
retval	bool
=	O
false	int
;	O
break	O
;	O
case	O
token_type_dot	int
:	O
retval	bool
=	O
true	int
;	O
break	O
;	O
case	O
token_type_other	int
:	O
retval	bool
=	O
true	int
;	O
break	O
;	O
}	O
return	O
retval	bool
;	O
}	O
static	O
token_type_ty	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
last_token_type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
static	O
void	O
x_perl_prelex	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))->(void)
(	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
token_ty	struct
*	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
)	O
{	O
static	O
char	O
*	O
buffer	*(char)
;	O
static	O
int	O
bufmax	long
;	O
int	O
bufpos	long
;	O
int	O
c	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
line_number	long
=	O
line_number	long
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
last_type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
last_token_type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
EOF	O
:	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_eof	int
;	O
return	O
;	O
case	O
'\n'	O
:	O
if	O
(	O
last_non_comment_line	int
>	O
last_comment_line	int
)	O
savable_comment_reset	()->(void)
(	O
)	O
;	O
case	O
'\t'	O
:	O
case	O
' '	O
:	O
continue	O
;	O
case	O
'%'	O
:	O
case	O
'@'	O
:	O
case	O
'*'	O
:	O
case	O
'$'	O
:	O
if	O
(	O
!	O
extract_all	bool
)	O
{	O
extract_variable	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)),int)->(void)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
,	O
c	int
)	O
;	O
return	O
;	O
}	O
break	O
;	O
}	O
last_non_comment_line	int
=	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
line_number	long
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
'.'	O
:	O
{	O
int	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
if	O
(	O
c2	int
==	O
'.'	O
)	O
{	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_other	int
;	O
return	O
;	O
}	O
else	O
if	O
(	O
!	O
(	O
c2	int
>=	O
'0'	O
&&	O
c2	int
<=	O
'9'	O
)	O
)	O
{	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_dot	int
;	O
return	O
;	O
}	O
}	O
case	O
'A'	O
:	O
case	O
'B'	O
:	O
case	O
'C'	O
:	O
case	O
'D'	O
:	O
case	O
'E'	O
:	O
case	O
'F'	O
:	O
case	O
'G'	O
:	O
case	O
'H'	O
:	O
case	O
'I'	O
:	O
case	O
'J'	O
:	O
case	O
'K'	O
:	O
case	O
'L'	O
:	O
case	O
'M'	O
:	O
case	O
'N'	O
:	O
case	O
'O'	O
:	O
case	O
'P'	O
:	O
case	O
'Q'	O
:	O
case	O
'R'	O
:	O
case	O
'S'	O
:	O
case	O
'T'	O
:	O
case	O
'U'	O
:	O
case	O
'V'	O
:	O
case	O
'W'	O
:	O
case	O
'X'	O
:	O
case	O
'Y'	O
:	O
case	O
'Z'	O
:	O
case	O
'_'	O
:	O
case	O
'a'	O
:	O
case	O
'b'	O
:	O
case	O
'c'	O
:	O
case	O
'd'	O
:	O
case	O
'e'	O
:	O
case	O
'f'	O
:	O
case	O
'g'	O
:	O
case	O
'h'	O
:	O
case	O
'i'	O
:	O
case	O
'j'	O
:	O
case	O
'k'	O
:	O
case	O
'l'	O
:	O
case	O
'm'	O
:	O
case	O
'n'	O
:	O
case	O
'o'	O
:	O
case	O
'p'	O
:	O
case	O
'q'	O
:	O
case	O
'r'	O
:	O
case	O
's'	O
:	O
case	O
't'	O
:	O
case	O
'u'	O
:	O
case	O
'v'	O
:	O
case	O
'w'	O
:	O
case	O
'x'	O
:	O
case	O
'y'	O
:	O
case	O
'z'	O
:	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
bufpos	long
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
bufpos	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
c	int
;	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
'A'	O
:	O
case	O
'B'	O
:	O
case	O
'C'	O
:	O
case	O
'D'	O
:	O
case	O
'E'	O
:	O
case	O
'F'	O
:	O
case	O
'G'	O
:	O
case	O
'H'	O
:	O
case	O
'I'	O
:	O
case	O
'J'	O
:	O
case	O
'K'	O
:	O
case	O
'L'	O
:	O
case	O
'M'	O
:	O
case	O
'N'	O
:	O
case	O
'O'	O
:	O
case	O
'P'	O
:	O
case	O
'Q'	O
:	O
case	O
'R'	O
:	O
case	O
'S'	O
:	O
case	O
'T'	O
:	O
case	O
'U'	O
:	O
case	O
'V'	O
:	O
case	O
'W'	O
:	O
case	O
'X'	O
:	O
case	O
'Y'	O
:	O
case	O
'Z'	O
:	O
case	O
'_'	O
:	O
case	O
'a'	O
:	O
case	O
'b'	O
:	O
case	O
'c'	O
:	O
case	O
'd'	O
:	O
case	O
'e'	O
:	O
case	O
'f'	O
:	O
case	O
'g'	O
:	O
case	O
'h'	O
:	O
case	O
'i'	O
:	O
case	O
'j'	O
:	O
case	O
'k'	O
:	O
case	O
'l'	O
:	O
case	O
'm'	O
:	O
case	O
'n'	O
:	O
case	O
'o'	O
:	O
case	O
'p'	O
:	O
case	O
'q'	O
:	O
case	O
'r'	O
:	O
case	O
's'	O
:	O
case	O
't'	O
:	O
case	O
'u'	O
:	O
case	O
'v'	O
:	O
case	O
'w'	O
:	O
case	O
'x'	O
:	O
case	O
'y'	O
:	O
case	O
'z'	O
:	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
continue	O
;	O
default	O
:	O
phase1_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
break	O
;	O
}	O
break	O
;	O
}	O
if	O
(	O
bufpos	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
buffer	*(char)
[	O
bufpos	long
]	O
=	O
'\0'	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
buffer	*(char)
,	O
"__END__"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
buffer	*(char)
,	O
"__DATA__"	*(char)
)	O
==	O
0	int
)	O
{	O
end_of_file	bool
=	O
true	int
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_eof	int
;	O
return	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
buffer	*(char)
,	O
"and"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
buffer	*(char)
,	O
"cmp"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
buffer	*(char)
,	O
"eq"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
buffer	*(char)
,	O
"if"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
buffer	*(char)
,	O
"ge"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
buffer	*(char)
,	O
"gt"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
buffer	*(char)
,	O
"le"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
buffer	*(char)
,	O
"lt"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
buffer	*(char)
,	O
"ne"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
buffer	*(char)
,	O
"not"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
buffer	*(char)
,	O
"or"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
buffer	*(char)
,	O
"unless"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
buffer	*(char)
,	O
"while"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
buffer	*(char)
,	O
"xor"	*(char)
)	O
==	O
0	int
)	O
{	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_named_op	int
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
buffer	*(char)
)	O
;	O
return	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
buffer	*(char)
,	O
"s"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
buffer	*(char)
,	O
"y"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
buffer	*(char)
,	O
"tr"	*(char)
)	O
==	O
0	int
)	O
{	O
int	O
delim	*(char)
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
while	O
(	O
is_whitespace	(int)->(bool)
(	O
delim	*(char)
)	O
)	O
delim	*(char)
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
delim	*(char)
==	O
EOF	O
)	O
{	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_eof	int
;	O
return	O
;	O
}	O
if	O
(	O
(	O
delim	*(char)
>=	O
'0'	O
&&	O
delim	*(char)
<=	O
'9'	O
)	O
||	O
(	O
delim	*(char)
>=	O
'A'	O
&&	O
delim	*(char)
<=	O
'Z'	O
)	O
||	O
(	O
delim	*(char)
>=	O
'a'	O
&&	O
delim	*(char)
<=	O
'z'	O
)	O
)	O
{	O
phase2_ungetc	(int)->(void)
(	O
delim	*(char)
)	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_symbol	int
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
sub_type	int
=	O
symbol_type_none	int
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
buffer	*(char)
)	O
;	O
return	O
;	O
}	O
extract_triple_quotelike	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)),int,bool)->(void)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
,	O
delim	*(char)
,	O
buffer	*(char)
[	O
0	int
]	O
==	O
's'	O
&&	O
delim	*(char)
!=	O
'\''	O
)	O
;	O
do	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
while	O
(	O
c	int
>=	O
'a'	O
&&	O
c	int
<=	O
'z'	O
)	O
;	O
phase1_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
return	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
buffer	*(char)
,	O
"m"	*(char)
)	O
==	O
0	int
)	O
{	O
int	O
delim	*(char)
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
while	O
(	O
is_whitespace	(int)->(bool)
(	O
delim	*(char)
)	O
)	O
delim	*(char)
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
delim	*(char)
==	O
EOF	O
)	O
{	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_eof	int
;	O
return	O
;	O
}	O
if	O
(	O
(	O
delim	*(char)
>=	O
'0'	O
&&	O
delim	*(char)
<=	O
'9'	O
)	O
||	O
(	O
delim	*(char)
>=	O
'A'	O
&&	O
delim	*(char)
<=	O
'Z'	O
)	O
||	O
(	O
delim	*(char)
>=	O
'a'	O
&&	O
delim	*(char)
<=	O
'z'	O
)	O
)	O
{	O
phase2_ungetc	(int)->(void)
(	O
delim	*(char)
)	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_symbol	int
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
sub_type	int
=	O
symbol_type_none	int
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
buffer	*(char)
)	O
;	O
return	O
;	O
}	O
extract_quotelike	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)),int)->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
,	O
delim	*(char)
)	O
;	O
if	O
(	O
delim	*(char)
!=	O
'\''	O
)	O
interpolate_keywords	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char),int)->(void)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
,	O
line_number	long
)	O
;	O
free	(*(void))->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
)	O
;	O
drop_reference	(*(struct(int,struct(*(*`),long,long))))->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
comment	*(struct(*(*(char)),long,long))
)	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_regex_op	int
;	O
do	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
while	O
(	O
c	int
>=	O
'a'	O
&&	O
c	int
<=	O
'z'	O
)	O
;	O
phase1_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
return	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
buffer	*(char)
,	O
"qq"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
buffer	*(char)
,	O
"q"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
buffer	*(char)
,	O
"qx"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
buffer	*(char)
,	O
"qw"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
buffer	*(char)
,	O
"qr"	*(char)
)	O
==	O
0	int
)	O
{	O
int	O
delim	*(char)
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
while	O
(	O
is_whitespace	(int)->(bool)
(	O
delim	*(char)
)	O
)	O
delim	*(char)
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
delim	*(char)
==	O
EOF	O
)	O
{	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_eof	int
;	O
return	O
;	O
}	O
if	O
(	O
(	O
delim	*(char)
>=	O
'0'	O
&&	O
delim	*(char)
<=	O
'9'	O
)	O
||	O
(	O
delim	*(char)
>=	O
'A'	O
&&	O
delim	*(char)
<=	O
'Z'	O
)	O
||	O
(	O
delim	*(char)
>=	O
'a'	O
&&	O
delim	*(char)
<=	O
'z'	O
)	O
)	O
{	O
phase2_ungetc	(int)->(void)
(	O
delim	*(char)
)	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_symbol	int
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
sub_type	int
=	O
symbol_type_none	int
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
buffer	*(char)
)	O
;	O
return	O
;	O
}	O
extract_quotelike	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)),int)->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
,	O
delim	*(char)
)	O
;	O
switch	O
(	O
buffer	*(char)
[	O
1	int
]	O
)	O
{	O
case	O
'q'	O
:	O
case	O
'x'	O
:	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_string	int
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
sub_type	int
=	O
string_type_qq	int
;	O
interpolate_keywords	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char),int)->(void)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
,	O
line_number	long
)	O
;	O
break	O
;	O
case	O
'r'	O
:	O
drop_reference	(*(struct(int,struct(*(*`),long,long))))->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
comment	*(struct(*(*(char)),long,long))
)	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_regex_op	int
;	O
break	O
;	O
case	O
'w'	O
:	O
drop_reference	(*(struct(int,struct(*(*`),long,long))))->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
comment	*(struct(*(*(char)),long,long))
)	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_symbol	int
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
sub_type	int
=	O
symbol_type_none	int
;	O
break	O
;	O
case	O
'\0'	O
:	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_string	int
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
sub_type	int
=	O
string_type_q	int
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
return	O
;	O
}	O
else	O
if	O
(	O
(	O
buffer	*(char)
[	O
0	int
]	O
>=	O
'0'	O
&&	O
buffer	*(char)
[	O
0	int
]	O
<=	O
'9'	O
)	O
||	O
buffer	*(char)
[	O
0	int
]	O
==	O
'.'	O
)	O
{	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_number	int
;	O
return	O
;	O
}	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_symbol	int
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
sub_type	int
=	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
buffer	*(char)
,	O
"sub"	*(char)
)	O
==	O
0	int
?	O
symbol_type_sub	int
:	O
symbol_type_none	int
)	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
buffer	*(char)
)	O
;	O
return	O
;	O
case	O
'"'	O
:	O
extract_quotelike	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)),int)->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
,	O
c	int
)	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
sub_type	int
=	O
string_type_qq	int
;	O
interpolate_keywords	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char),int)->(void)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
,	O
line_number	long
)	O
;	O
return	O
;	O
case	O
'`'	O
:	O
extract_quotelike	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)),int)->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
,	O
c	int
)	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
sub_type	int
=	O
string_type_qq	int
;	O
interpolate_keywords	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char),int)->(void)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
,	O
line_number	long
)	O
;	O
return	O
;	O
case	O
'\''	O
:	O
extract_quotelike	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)),int)->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
,	O
c	int
)	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
sub_type	int
=	O
string_type_q	int
;	O
return	O
;	O
case	O
'('	O
:	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_lparen	int
;	O
return	O
;	O
case	O
')'	O
:	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_rparen	int
;	O
return	O
;	O
case	O
'{'	O
:	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_lbrace	int
;	O
return	O
;	O
case	O
'}'	O
:	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_rbrace	int
;	O
return	O
;	O
case	O
'['	O
:	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_lbracket	int
;	O
return	O
;	O
case	O
']'	O
:	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_rbracket	int
;	O
return	O
;	O
case	O
';'	O
:	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_semicolon	int
;	O
return	O
;	O
case	O
','	O
:	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_comma	int
;	O
return	O
;	O
case	O
'='	O
:	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'>'	O
)	O
{	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_fat_comma	int
;	O
return	O
;	O
}	O
else	O
if	O
(	O
linepos	int
==	O
2	int
&&	O
(	O
last_token_type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
token_type_semicolon	int
||	O
last_token_type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
token_type_rbrace	int
)	O
&&	O
(	O
(	O
c	int
>=	O
'A'	O
&&	O
c	int
<=	O
'Z'	O
)	O
||	O
(	O
c	int
>=	O
'a'	O
&&	O
c	int
<=	O
'z'	O
)	O
)	O
)	O
{	O
skip_pod	()->(void)
(	O
)	O
;	O
continue	O
;	O
}	O
phase1_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_other	int
;	O
return	O
;	O
case	O
'<'	O
:	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'<'	O
)	O
{	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'\''	O
)	O
{	O
char	O
*	O
string	*(char)
;	O
extract_quotelike	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)),int)->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
,	O
c	int
)	O
;	O
string	*(char)
=	O
get_here_document	(*(char))->(*(char))
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
)	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
=	O
string	*(char)
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_string	int
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
sub_type	int
=	O
string_type_verbatim	int
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
line_number	long
=	O
line_number	long
+	O
1	int
;	O
return	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
'"'	O
)	O
{	O
char	O
*	O
string	*(char)
;	O
extract_quotelike	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)),int)->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
,	O
c	int
)	O
;	O
string	*(char)
=	O
get_here_document	(*(char))->(*(char))
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
)	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
=	O
string	*(char)
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_string	int
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
sub_type	int
=	O
string_type_qq	int
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
line_number	long
=	O
line_number	long
+	O
1	int
;	O
interpolate_keywords	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char),int)->(void)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
,	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
line_number	long
)	O
;	O
return	O
;	O
}	O
else	O
if	O
(	O
(	O
c	int
>=	O
'A'	O
&&	O
c	int
<=	O
'Z'	O
)	O
||	O
(	O
c	int
>=	O
'a'	O
&&	O
c	int
<=	O
'z'	O
)	O
||	O
c	int
==	O
'_'	O
)	O
{	O
bufpos	long
=	O
0	int
;	O
while	O
(	O
(	O
c	int
>=	O
'A'	O
&&	O
c	int
<=	O
'Z'	O
)	O
||	O
(	O
c	int
>=	O
'a'	O
&&	O
c	int
<=	O
'z'	O
)	O
||	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
)	O
||	O
c	int
==	O
'_'	O
||	O
c	int
>=	O
0x80	int
)	O
{	O
if	O
(	O
bufpos	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
c	int
;	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
}	O
if	O
(	O
c	int
==	O
EOF	O
)	O
{	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_eof	int
;	O
return	O
;	O
}	O
else	O
{	O
char	O
*	O
string	*(char)
;	O
phase1_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
if	O
(	O
bufpos	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
buffer	*(char)
[	O
bufpos	long
++	O
]	O
=	O
'\0'	O
;	O
string	*(char)
=	O
get_here_document	(*(char))->(*(char))
(	O
buffer	*(char)
)	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
=	O
string	*(char)
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_string	int
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
sub_type	int
=	O
string_type_qq	int
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
comment	*(struct(*(*(char)),long,long))
=	O
add_reference	(*(struct(int,struct(*(*`),long,long))))->(*(struct(int,struct(*(*`),long,long))))
(	O
savable_comment	*(struct(int,struct(*(*(char)),long,long)))
)	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
line_number	long
=	O
line_number	long
+	O
1	int
;	O
interpolate_keywords	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char),int)->(void)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
,	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
line_number	long
)	O
;	O
return	O
;	O
}	O
}	O
else	O
{	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_other	int
;	O
return	O
;	O
}	O
}	O
else	O
{	O
phase1_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_other	int
;	O
}	O
return	O
;	O
case	O
'-'	O
:	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'>'	O
)	O
{	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_dereference	int
;	O
return	O
;	O
}	O
else	O
if	O
(	O
(	O
c	int
>=	O
'A'	O
&&	O
c	int
<=	O
'Z'	O
)	O
||	O
(	O
c	int
>=	O
'a'	O
&&	O
c	int
<=	O
'z'	O
)	O
)	O
{	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_other	int
;	O
return	O
;	O
}	O
phase1_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_other	int
;	O
return	O
;	O
case	O
'/'	O
:	O
case	O
'?'	O
:	O
if	O
(	O
prefer_regexp_over_division	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(bool)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
last_type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
)	O
{	O
extract_quotelike	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)),int)->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
,	O
c	int
)	O
;	O
interpolate_keywords	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char),int)->(void)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
,	O
line_number	long
)	O
;	O
free	(*(void))->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
)	O
;	O
drop_reference	(*(struct(int,struct(*(*`),long,long))))->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
comment	*(struct(*(*(char)),long,long))
)	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_regex_op	int
;	O
do	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
while	O
(	O
c	int
>=	O
'a'	O
&&	O
c	int
<=	O
'z'	O
)	O
;	O
phase1_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
c	int
==	O
'/'	O
)	O
{	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
'/'	O
)	O
phase1_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
}	O
default	O
:	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_other	int
;	O
return	O
;	O
}	O
}	O
}	O
typedef	O
struct	O
token_stack_ty	struct
token_stack_ty	struct
;	O
struct	O
token_stack_ty	struct
{	O
token_ty	struct
*	O
*	O
items	*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))
;	O
size_t	long
nitems	long
;	O
size_t	long
nitems_max	long
;	O
}	O
;	O
static	O
struct	O
token_stack_ty	struct
token_stack	struct(*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct`),int))),long,long)
;	O
static	O
inline	O
void	O
token_stack_push	(*(struct(*(*(struct`)),long,long)),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))->(void)
(	O
token_stack_ty	struct
*	O
stack	*(struct(*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,*`,int))),long,long))
,	O
token_ty	struct
*	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*(*`),long,long))),int)
)	O
{	O
if	O
(	O
stack	*(struct(*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,*`,int))),long,long))
->	O
nitems	long
>=	O
stack	*(struct(*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,*`,int))),long,long))
->	O
nitems_max	long
)	O
{	O
size_t	long
nbytes	long
;	O
stack	*(struct(*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,*`,int))),long,long))
->	O
nitems_max	long
=	O
2	int
*	O
stack	*(struct(*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,*`,int))),long,long))
->	O
nitems_max	long
+	O
4	int
;	O
nbytes	long
=	O
stack	*(struct(*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,*`,int))),long,long))
->	O
nitems_max	long
*	O
sizeof	O
(	O
token_ty	struct
*	O
)	O
;	O
stack	*(struct(*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,*`,int))),long,long))
->	O
items	*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))
=	O
xrealloc	(*(void),long)->(*(void))
(	O
stack	*(struct(*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,*`,int))),long,long))
->	O
items	*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))
,	O
nbytes	long
)	O
;	O
}	O
stack	*(struct(*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,*`,int))),long,long))
->	O
items	*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))
[	O
stack	*(struct(*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,*`,int))),long,long))
->	O
nitems	long
++	O
]	O
=	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*(*`),long,long))),int)
;	O
}	O
static	O
inline	O
token_ty	struct
*	O
token_stack_pop	(*(struct(*(*(struct`)),long,long)))->(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))
(	O
token_stack_ty	struct
*	O
stack	*(struct(*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,*`,int))),long,long))
)	O
{	O
if	O
(	O
stack	*(struct(*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,*`,int))),long,long))
->	O
nitems	long
>	O
0	int
)	O
return	O
stack	*(struct(*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,*`,int))),long,long))
->	O
items	*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))
[	O
--	O
(	O
stack	*(struct(*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,*`,int))),long,long))
->	O
nitems	long
)	O
]	O
;	O
else	O
return	O
NULL	O
;	O
}	O
static	O
inline	O
token_ty	struct
*	O
token_stack_peek	(*(struct(*(*(struct`)),long,long)))->(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))
(	O
const	O
token_stack_ty	struct
*	O
stack	*(struct(*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,*`,int))),long,long))
)	O
{	O
if	O
(	O
stack	*(struct(*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,*`,int))),long,long))
->	O
nitems	long
>	O
0	int
)	O
return	O
stack	*(struct(*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,*`,int))),long,long))
->	O
items	*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))
[	O
stack	*(struct(*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,*`,int))),long,long))
->	O
nitems	long
-	O
1	int
]	O
;	O
else	O
return	O
NULL	O
;	O
}	O
static	O
inline	O
void	O
token_stack_free	(*(struct(*(*(struct`)),long,long)))->(void)
(	O
token_stack_ty	struct
*	O
stack	*(struct(*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,*`,int))),long,long))
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
stack	*(struct(*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,*`,int))),long,long))
->	O
nitems	long
;	O
i	long
++	O
)	O
free_token	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))->(void)
(	O
stack	*(struct(*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,*`,int))),long,long))
->	O
items	*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))
[	O
i	long
]	O
)	O
;	O
free	(*(void))->(void)
(	O
stack	*(struct(*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,*`,int))),long,long))
->	O
items	*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))
)	O
;	O
}	O
static	O
token_ty	struct
*	O
x_perl_lex	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))))->(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))
(	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
)	O
{	O
token_ty	struct
*	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
=	O
token_stack_pop	(*(struct(*(*(struct`)),long,long)))->(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))
(	O
&	O
token_stack	struct(*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct`),int))),long,long)
)	O
;	O
if	O
(	O
!	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
)	O
{	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
=	O
XMALLOC	O
(	O
token_ty	struct
)	O
;	O
x_perl_prelex	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))->(void)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
)	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
last_type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
last_token_type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
last_token_type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
;	O
if	O
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
==	O
token_type_symbol	int
)	O
{	O
if	O
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
last_type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
token_type_dereference	int
)	O
{	O
last_token_type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
token_type_variable	int
;	O
}	O
else	O
if	O
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
last_type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
token_type_object	int
)	O
{	O
last_token_type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
token_type_variable	int
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
,	O
"wantarray"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
,	O
"fork"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
,	O
"getlogin"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
,	O
"getppid"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
,	O
"getpwent"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
,	O
"getgrent"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
,	O
"gethostent"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
,	O
"getnetent"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
,	O
"getprotoent"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
,	O
"getservent"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
,	O
"setpwent"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
,	O
"setgrent"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
,	O
"endpwent"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
,	O
"endgrent"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
,	O
"endhostent"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
,	O
"endnetent"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
,	O
"endprotoent"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
,	O
"endservent"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
,	O
"time"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
,	O
"times"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
,	O
"wait"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
,	O
"wantarray"	*(char)
)	O
==	O
0	int
)	O
{	O
last_token_type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
token_type_variable	int
;	O
}	O
}	O
}	O
if	O
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
==	O
token_type_symbol	int
||	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
==	O
token_type_named_op	int
)	O
{	O
token_ty	struct
*	O
next	*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct(int,int,int,int,int,int),*(struct`)))))
=	O
token_stack_peek	(*(struct(*(*(struct`)),long,long)))->(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))
(	O
&	O
token_stack	struct(*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct`),int))),long,long)
)	O
;	O
if	O
(	O
!	O
next	*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct(int,int,int,int,int,int),*(struct`)))))
)	O
{	O
next	*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct(int,int,int,int,int,int),*(struct`)))))
=	O
x_perl_lex	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))))->(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
)	O
;	O
x_perl_unlex	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))->(void)
(	O
next	*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct(int,int,int,int,int,int),*(struct`)))))
)	O
;	O
}	O
if	O
(	O
next	*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct(int,int,int,int,int,int),*(struct`)))))
->	O
type	char
==	O
token_type_fat_comma	int
)	O
{	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_string	int
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
sub_type	int
=	O
string_type_q	int
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
comment	*(struct(*(*(char)),long,long))
=	O
add_reference	(*(struct(int,struct(*(*`),long,long))))->(*(struct(int,struct(*(*`),long,long))))
(	O
savable_comment	*(struct(int,struct(*(*(char)),long,long)))
)	O
;	O
}	O
else	O
if	O
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
==	O
token_type_symbol	int
&&	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
sub_type	int
==	O
symbol_type_sub	int
&&	O
next	*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct(int,int,int,int,int,int),*(struct`)))))
->	O
type	char
==	O
token_type_symbol	int
)	O
{	O
next	*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct(int,int,int,int,int,int),*(struct`)))))
->	O
sub_type	int
=	O
symbol_type_function	int
;	O
}	O
else	O
if	O
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
==	O
token_type_symbol	int
&&	O
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
sub_type	int
==	O
symbol_type_sub	int
||	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
sub_type	int
==	O
symbol_type_function	int
)	O
&&	O
next	*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct(int,int,int,int,int,int),*(struct`)))))
->	O
type	char
==	O
token_type_lparen	int
)	O
{	O
int	O
c	int
;	O
do	O
{	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
}	O
while	O
(	O
c	int
!=	O
EOF	O
&&	O
c	int
!=	O
')'	O
)	O
;	O
phase1_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
}	O
}	O
return	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
;	O
}	O
static	O
void	O
x_perl_unlex	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))->(void)
(	O
token_ty	struct
*	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
)	O
{	O
token_stack_push	(*(struct(*(*(struct`)),long,long)),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))->(void)
(	O
&	O
token_stack	struct(*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct`),int))),long,long)
,	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
)	O
;	O
}	O
static	O
char	O
*	O
collect_message	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)),int)->(*(char))
(	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
token_ty	struct
*	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
,	O
int	O
error_level	int
)	O
{	O
char	O
*	O
string	*(char)
;	O
size_t	long
len	long
;	O
extract_quotelike_pass3	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)),int)->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
,	O
error_level	int
)	O
;	O
string	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
)	O
;	O
len	long
=	O
strlen	(*(char))->(long)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
)	O
+	O
1	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
int	O
c	int
;	O
do	O
c	int
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
while	O
(	O
is_whitespace	(int)->(bool)
(	O
c	int
)	O
)	O
;	O
if	O
(	O
c	int
!=	O
'.'	O
)	O
{	O
phase2_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
return	O
string	*(char)
;	O
}	O
do	O
c	int
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
while	O
(	O
is_whitespace	(int)->(bool)
(	O
c	int
)	O
)	O
;	O
phase2_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
if	O
(	O
c	int
==	O
'"'	O
||	O
c	int
==	O
'\''	O
||	O
c	int
==	O
'`'	O
||	O
(	O
(	O
c	int
==	O
'/'	O
||	O
c	int
==	O
'?'	O
)	O
&&	O
prefer_regexp_over_division	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(bool)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
last_type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
)	O
||	O
c	int
==	O
'q'	O
)	O
{	O
token_ty	struct
*	O
qstring	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
=	O
x_perl_lex	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))))->(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
)	O
;	O
if	O
(	O
qstring	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
!=	O
token_type_string	int
)	O
{	O
x_perl_unlex	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))->(void)
(	O
qstring	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
)	O
;	O
return	O
string	*(char)
;	O
}	O
extract_quotelike_pass3	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)),int)->(void)
(	O
qstring	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
,	O
error_level	int
)	O
;	O
len	long
+=	O
strlen	(*(char))->(long)
(	O
qstring	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
)	O
;	O
string	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
string	*(char)
,	O
len	long
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
qstring	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
)	O
;	O
free_token	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))->(void)
(	O
qstring	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
)	O
;	O
}	O
}	O
}	O
static	O
bool	bool
extract_balanced	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),bool,bool,struct(int,int,int,int,int,int),struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct`)))),int,*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))->(bool)
(	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
token_type_ty	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
delim	*(char)
,	O
bool	bool
eat_delim	bool
,	O
bool	bool
comma_delim	bool
,	O
flag_context_ty	struct
outer_context	struct(int,int,int,int,int,int)
,	O
flag_context_list_iterator_ty	struct
context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
,	O
int	O
arg	int
,	O
struct	O
arglist_parser	struct(*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int)))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))
*	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
)	O
{	O
bool	bool
next_is_argument	bool
=	O
false	int
;	O
const	O
struct	O
callshapes	struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))))
*	O
next_shapes	*(struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))))
=	O
NULL	O
;	O
struct	O
arglist_parser	struct(*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int)))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))
*	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
=	O
NULL	O
;	O
bool	bool
skip_until_comma	bool
=	O
false	int
;	O
flag_context_list_iterator_ty	struct
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
passthrough_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
flag_context_ty	struct
inner_context	struct(int,int,int,int,int,int)
=	O
inherited_context	(struct(int,int,int,int,int,int),struct(int,int,int,int,int,int))->(struct(int,int,int,int,int,int))
(	O
outer_context	struct(int,int,int,int,int,int)
,	O
flag_context_list_iterator_advance	(*(struct(int,*(struct(int,struct`,*`)))))->(struct(int,int,int,int,int,int))
(	O
&	O
context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
)	O
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
token_ty	struct
*	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
=	O
x_perl_lex	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))))->(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
)	O
;	O
if	O
(	O
delim	*(char)
==	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
)	O
{	O
arglist_parser_done	(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))),int)->(void)
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
,	O
arg	int
)	O
;	O
if	O
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
)	O
;	O
if	O
(	O
eat_delim	bool
)	O
free_token	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
)	O
;	O
else	O
x_perl_unlex	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
)	O
;	O
return	O
false	int
;	O
}	O
if	O
(	O
comma_delim	bool
&&	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
==	O
token_type_comma	int
)	O
{	O
arglist_parser_done	(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))),int)->(void)
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
,	O
arg	int
)	O
;	O
if	O
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
)	O
;	O
x_perl_unlex	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
)	O
;	O
return	O
false	int
;	O
}	O
if	O
(	O
next_is_argument	bool
&&	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
!=	O
token_type_lparen	int
)	O
{	O
bool	bool
next_comma_delim	bool
;	O
x_perl_unlex	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
)	O
;	O
if	O
(	O
next_shapes	*(struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))))
!=	O
NULL	O
)	O
{	O
size_t	long
i	long
;	O
next_comma_delim	bool
=	O
true	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
next_shapes	*(struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))))
->	O
nshapes	long
;	O
i	long
++	O
)	O
{	O
const	O
struct	O
callshape	struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))
*	O
shape	*(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
=	O
&	O
next_shapes	*(struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))))
->	O
shapes	array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
[	O
i	long
]	O
;	O
if	O
(	O
shape	*(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
->	O
argnum1	int
>	O
1	int
||	O
shape	*(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
->	O
argnum2	int
>	O
1	int
||	O
shape	*(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
->	O
argnumc	int
>	O
1	int
||	O
shape	*(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
->	O
argtotal	int
>	O
1	int
)	O
next_comma_delim	bool
=	O
false	int
;	O
}	O
}	O
else	O
next_comma_delim	bool
=	O
true	int
;	O
if	O
(	O
extract_balanced	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),bool,bool,struct(int,int,int,int,int,int),struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct`)))),int,*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))->(bool)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
delim	*(char)
,	O
false	int
,	O
next_comma_delim	bool
,	O
inner_context	struct(int,int,int,int,int,int)
,	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
,	O
1	int
,	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
)	O
)	O
{	O
arglist_parser_done	(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))),int)->(void)
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
,	O
arg	int
)	O
;	O
return	O
true	int
;	O
}	O
next_is_argument	bool
=	O
false	int
;	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
=	O
NULL	O
;	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
continue	O
;	O
}	O
switch	O
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
)	O
{	O
case	O
token_type_symbol	int
:	O
case	O
token_type_keyword_symbol	int
:	O
{	O
void	O
*	O
keyword_value	*(void)
;	O
if	O
(	O
hash_find_entry	(*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),*(void),long,*(*(void)))->(int)
(	O
&	O
keywords	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
,	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
,	O
strlen	(*(char))->(long)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
)	O
,	O
&	O
keyword_value	*(void)
)	O
==	O
0	int
)	O
{	O
const	O
struct	O
callshapes	struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))))
*	O
shapes	array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
=	O
(	O
const	O
struct	O
callshapes	struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))))
*	O
)	O
keyword_value	*(void)
;	O
next_shapes	*(struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))))
=	O
shapes	array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
;	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
=	O
arglist_parser_alloc	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))))))->(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
shapes	array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
)	O
;	O
}	O
else	O
{	O
next_shapes	*(struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))))
=	O
NULL	O
;	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
=	O
arglist_parser_alloc	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))))))->(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
NULL	O
)	O
;	O
}	O
}	O
next_is_argument	bool
=	O
true	int
;	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
flag_context_list_iterator	(*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))->(struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct`)))))
(	O
flag_context_list_table_lookup	(*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),*(void),long)->(*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
(	O
flag_context_list_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
,	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
,	O
strlen	(*(char))->(long)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
)	O
)	O
)	O
;	O
break	O
;	O
case	O
token_type_variable	int
:	O
next_is_argument	bool
=	O
false	int
;	O
if	O
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
)	O
;	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
=	O
NULL	O
;	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
break	O
;	O
case	O
token_type_object	int
:	O
next_is_argument	bool
=	O
false	int
;	O
if	O
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
)	O
;	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
=	O
NULL	O
;	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
break	O
;	O
case	O
token_type_lparen	int
:	O
if	O
(	O
next_is_argument	bool
)	O
{	O
if	O
(	O
extract_balanced	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),bool,bool,struct(int,int,int,int,int,int),struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct`)))),int,*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))->(bool)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
token_type_rparen	int
,	O
true	int
,	O
false	int
,	O
inner_context	struct(int,int,int,int,int,int)
,	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
,	O
1	int
,	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
)	O
)	O
{	O
arglist_parser_done	(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))),int)->(void)
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
,	O
arg	int
)	O
;	O
return	O
true	int
;	O
}	O
next_is_argument	bool
=	O
false	int
;	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
=	O
NULL	O
;	O
}	O
else	O
{	O
if	O
(	O
extract_balanced	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),bool,bool,struct(int,int,int,int,int,int),struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct`)))),int,*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))->(bool)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
token_type_rparen	int
,	O
true	int
,	O
false	int
,	O
inner_context	struct(int,int,int,int,int,int)
,	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
,	O
arg	int
,	O
arglist_parser_clone	(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))->(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
)	O
)	O
)	O
{	O
arglist_parser_done	(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))),int)->(void)
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
,	O
arg	int
)	O
;	O
if	O
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
)	O
;	O
free_token	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
)	O
;	O
return	O
true	int
;	O
}	O
next_is_argument	bool
=	O
false	int
;	O
if	O
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
)	O
;	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
=	O
NULL	O
;	O
}	O
skip_until_comma	bool
=	O
true	int
;	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
break	O
;	O
case	O
token_type_rparen	int
:	O
next_is_argument	bool
=	O
false	int
;	O
if	O
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
)	O
;	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
=	O
NULL	O
;	O
skip_until_comma	bool
=	O
true	int
;	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
break	O
;	O
case	O
token_type_comma	int
:	O
case	O
token_type_fat_comma	int
:	O
if	O
(	O
arglist_parser_decidedp	(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))),int)->(bool)
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
,	O
arg	int
)	O
)	O
{	O
arglist_parser_done	(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))),int)->(void)
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
,	O
arg	int
)	O
;	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
=	O
arglist_parser_alloc	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))))))->(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
NULL	O
)	O
;	O
arg	int
=	O
0	int
;	O
}	O
arg	int
++	O
;	O
inner_context	struct(int,int,int,int,int,int)
=	O
inherited_context	(struct(int,int,int,int,int,int),struct(int,int,int,int,int,int))->(struct(int,int,int,int,int,int))
(	O
outer_context	struct(int,int,int,int,int,int)
,	O
flag_context_list_iterator_advance	(*(struct(int,*(struct(int,struct`,*`)))))->(struct(int,int,int,int,int,int))
(	O
&	O
context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
)	O
)	O
;	O
next_is_argument	bool
=	O
false	int
;	O
if	O
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
)	O
;	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
=	O
NULL	O
;	O
skip_until_comma	bool
=	O
false	int
;	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
passthrough_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
break	O
;	O
case	O
token_type_string	int
:	O
if	O
(	O
extract_all	bool
)	O
{	O
char	O
*	O
string	*(char)
=	O
collect_message	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)),int)->(*(char))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
,	O
EXIT_SUCCESS	int
)	O
;	O
lex_pos_ty	struct
pos	struct(*(char),long)
;	O
pos	struct(*(char),long)
.	O
file_name	*(char)
=	O
logical_file_name	*(char)
;	O
pos	struct(*(char),long)
.	O
line_number	long
=	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
line_number	long
;	O
remember_a_message	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char),*(char),bool,struct(int,int,int,int,int,int),*(struct(*(char),long)),*(char),*(struct(int,struct(*(*`),long,long))),bool)->(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
NULL	O
,	O
string	*(char)
,	O
true	int
,	O
inner_context	struct(int,int,int,int,int,int)
,	O
&	O
pos	struct(*(char),long)
,	O
NULL	O
,	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
comment	*(struct(*(*(char)),long,long))
,	O
true	int
)	O
;	O
}	O
else	O
if	O
(	O
!	O
skip_until_comma	bool
)	O
{	O
bool	bool
must_collect	bool
=	O
false	int
;	O
{	O
size_t	long
nalternatives	long
=	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
->	O
nalternatives	long
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
nalternatives	long
;	O
i	long
++	O
)	O
{	O
struct	O
partial_call	struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct(char,long,array(char)))),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct(char,long,array(char)))),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*(char)),long,long))),bool,*(struct(*(*(struct(char,long,array(char)))),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))
*	O
cp	*(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*`,long,long))),bool,*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))
=	O
&	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
->	O
alternative	*(struct(*(char),long,*(char),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),*(char)))
[	O
i	long
]	O
;	O
if	O
(	O
arg	int
==	O
cp	*(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*`,long,long))),bool,*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))
->	O
argnumc	int
||	O
arg	int
==	O
cp	*(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*`,long,long))),bool,*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))
->	O
argnum1	int
||	O
arg	int
==	O
cp	*(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*`,long,long))),bool,*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))
->	O
argnum2	int
)	O
must_collect	bool
=	O
true	int
;	O
}	O
}	O
if	O
(	O
must_collect	bool
)	O
{	O
char	O
*	O
string	*(char)
=	O
collect_message	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)),int)->(*(char))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
,	O
EXIT_FAILURE	int
)	O
;	O
mixed_string_ty	struct
*	O
ms	*(struct(*(*(struct(char,long,array(char)))),long,enum(int,int,int,int,int,int),*(char),int))
=	O
mixed_string_alloc_utf8	(*(char),enum(int,int,int,int,int,int),*(char),int)->(*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)))
(	O
string	*(char)
,	O
lc_string	int
,	O
logical_file_name	*(char)
,	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
line_number	long
)	O
;	O
free	(*(void))->(void)
(	O
string	*(char)
)	O
;	O
arglist_parser_remember	(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))),int,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),*(char),long,*(struct(int,struct(*(*`),long,long))),bool)->(void)
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
,	O
arg	int
,	O
ms	*(struct(*(*(struct(char,long,array(char)))),long,enum(int,int,int,int,int,int),*(char),int))
,	O
inner_context	struct(int,int,int,int,int,int)
,	O
logical_file_name	*(char)
,	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
line_number	long
,	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
comment	*(struct(*(*(char)),long,long))
,	O
true	int
)	O
;	O
}	O
}	O
if	O
(	O
arglist_parser_decidedp	(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))),int)->(bool)
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
,	O
arg	int
)	O
)	O
{	O
arglist_parser_done	(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))),int)->(void)
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
,	O
arg	int
)	O
;	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
=	O
arglist_parser_alloc	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))))))->(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
NULL	O
)	O
;	O
}	O
next_is_argument	bool
=	O
false	int
;	O
if	O
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
)	O
;	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
=	O
NULL	O
;	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
break	O
;	O
case	O
token_type_number	int
:	O
next_is_argument	bool
=	O
false	int
;	O
if	O
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
)	O
;	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
=	O
NULL	O
;	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
break	O
;	O
case	O
token_type_eof	int
:	O
arglist_parser_done	(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))),int)->(void)
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
,	O
arg	int
)	O
;	O
if	O
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
)	O
;	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
=	O
NULL	O
;	O
free_token	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
)	O
;	O
return	O
true	int
;	O
case	O
token_type_lbrace	int
:	O
if	O
(	O
extract_balanced	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),bool,bool,struct(int,int,int,int,int,int),struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct`)))),int,*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))->(bool)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
token_type_rbrace	int
,	O
true	int
,	O
false	int
,	O
null_context	struct(int,int,int,int,int,int)
,	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
,	O
1	int
,	O
arglist_parser_alloc	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))))))->(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
NULL	O
)	O
)	O
)	O
{	O
arglist_parser_done	(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))),int)->(void)
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
,	O
arg	int
)	O
;	O
if	O
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
)	O
;	O
free_token	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
)	O
;	O
return	O
true	int
;	O
}	O
next_is_argument	bool
=	O
false	int
;	O
if	O
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
)	O
;	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
=	O
NULL	O
;	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
break	O
;	O
case	O
token_type_rbrace	int
:	O
next_is_argument	bool
=	O
false	int
;	O
if	O
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
)	O
;	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
=	O
NULL	O
;	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
break	O
;	O
case	O
token_type_lbracket	int
:	O
if	O
(	O
extract_balanced	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),bool,bool,struct(int,int,int,int,int,int),struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct`)))),int,*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))->(bool)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
token_type_rbracket	int
,	O
true	int
,	O
false	int
,	O
null_context	struct(int,int,int,int,int,int)
,	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
,	O
1	int
,	O
arglist_parser_alloc	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))))))->(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
NULL	O
)	O
)	O
)	O
{	O
arglist_parser_done	(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))),int)->(void)
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
,	O
arg	int
)	O
;	O
if	O
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
)	O
;	O
free_token	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
)	O
;	O
return	O
true	int
;	O
}	O
next_is_argument	bool
=	O
false	int
;	O
if	O
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
)	O
;	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
=	O
NULL	O
;	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
break	O
;	O
case	O
token_type_rbracket	int
:	O
next_is_argument	bool
=	O
false	int
;	O
if	O
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
)	O
;	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
=	O
NULL	O
;	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
break	O
;	O
case	O
token_type_semicolon	int
:	O
arglist_parser_done	(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))),int)->(void)
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
,	O
arg	int
)	O
;	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
=	O
arglist_parser_alloc	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))))))->(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
NULL	O
)	O
;	O
outer_context	struct(int,int,int,int,int,int)
=	O
null_context	struct(int,int,int,int,int,int)
;	O
context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
next_is_argument	bool
=	O
false	int
;	O
if	O
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
)	O
;	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
=	O
NULL	O
;	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
passthrough_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
inner_context	struct(int,int,int,int,int,int)
=	O
inherited_context	(struct(int,int,int,int,int,int),struct(int,int,int,int,int,int))->(struct(int,int,int,int,int,int))
(	O
outer_context	struct(int,int,int,int,int,int)
,	O
flag_context_list_iterator_advance	(*(struct(int,*(struct(int,struct`,*`)))))->(struct(int,int,int,int,int,int))
(	O
&	O
context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
)	O
)	O
;	O
break	O
;	O
case	O
token_type_dereference	int
:	O
next_is_argument	bool
=	O
false	int
;	O
if	O
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
)	O
;	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
=	O
NULL	O
;	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
break	O
;	O
case	O
token_type_dot	int
:	O
next_is_argument	bool
=	O
false	int
;	O
if	O
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
)	O
;	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
=	O
NULL	O
;	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
break	O
;	O
case	O
token_type_named_op	int
:	O
next_is_argument	bool
=	O
false	int
;	O
if	O
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
)	O
;	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
=	O
NULL	O
;	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
break	O
;	O
case	O
token_type_regex_op	int
:	O
next_is_argument	bool
=	O
false	int
;	O
if	O
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
)	O
;	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
=	O
NULL	O
;	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
break	O
;	O
case	O
token_type_other	int
:	O
next_is_argument	bool
=	O
false	int
;	O
if	O
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
)	O
;	O
next_argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
=	O
NULL	O
;	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
break	O
;	O
default	O
:	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s:%d: unknown token type %d\n"	*(char)
,	O
real_file_name	*(char)
,	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
line_number	long
,	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
)	O
;	O
abort	()->(void)
(	O
)	O
;	O
}	O
free_token	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct(*`,long,long))),int))
)	O
;	O
}	O
}	O
void	O
extract_perl	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),*(char),*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),*(struct(*(*(struct`)),long,long,bool,*(char))))->(void)
(	O
FILE	struct
*	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
const	O
char	O
*	O
real_filename	*(char)
,	O
const	O
char	O
*	O
logical_filename	*(char)
,	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
*	O
flag_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
,	O
msgdomain_list_ty	struct
*	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
)	O
{	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
=	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
->	O
item	*(*(char))
[	O
0	int
]	O
->	O
messages	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
;	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
real_file_name	*(char)
=	O
real_filename	*(char)
;	O
logical_file_name	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
logical_filename	*(char)
)	O
;	O
line_number	long
=	O
0	int
;	O
last_comment_line	int
=	O
-	O
1	int
;	O
last_non_comment_line	int
=	O
-	O
1	int
;	O
flag_context_list_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
=	O
flag_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
;	O
init_keywords	()->(void)
(	O
)	O
;	O
token_stack	struct(*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct`),int))),long,long)
.	O
items	*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct(int,struct`)),int)))
=	O
NULL	O
;	O
token_stack	struct(*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct`),int))),long,long)
.	O
nitems	long
=	O
0	int
;	O
token_stack	struct(*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct`),int))),long,long)
.	O
nitems_max	long
=	O
0	int
;	O
linesize	int
=	O
0	int
;	O
linepos	int
=	O
0	int
;	O
eaten_here	int
=	O
0	int
;	O
end_of_file	bool
=	O
false	int
;	O
last_token_type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
token_type_semicolon	int
;	O
while	O
(	O
!	O
extract_balanced	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),bool,bool,struct(int,int,int,int,int,int),struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct`)))),int,*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))->(bool)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
token_type_rbrace	int
,	O
true	int
,	O
false	int
,	O
null_context	struct(int,int,int,int,int,int)
,	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
,	O
1	int
,	O
arglist_parser_alloc	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))))))->(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
NULL	O
)	O
)	O
)	O
;	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
NULL	O
;	O
real_file_name	*(char)
=	O
NULL	O
;	O
free	(*(void))->(void)
(	O
logical_file_name	*(char)
)	O
;	O
logical_file_name	*(char)
=	O
NULL	O
;	O
line_number	long
=	O
0	int
;	O
last_token_type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
token_type_semicolon	int
;	O
token_stack_free	(*(struct(*(*(struct`)),long,long)))->(void)
(	O
&	O
token_stack	struct(*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(char),*(struct`),int))),long,long)
)	O
;	O
eaten_here	int
=	O
0	int
;	O
end_of_file	bool
=	O
true	int
;	O
}	O
