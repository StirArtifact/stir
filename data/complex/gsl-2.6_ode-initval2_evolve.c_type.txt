gsl_odeiv2_evolve	struct
*	O
gsl_odeiv2_evolve_alloc	(long)->(*(struct(long,*(double),*(double),*(double),*(double),double,long,long,*(struct))))
(	O
size_t	long
dim	long
)	O
{	O
gsl_odeiv2_evolve	struct
*	O
e	int
=	O
(	O
gsl_odeiv2_evolve	struct
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
gsl_odeiv2_evolve	struct
)	O
)	O
;	O
if	O
(	O
e	int
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for evolve struct"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
e	int
->	O
y0	(double)->(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
e	int
->	O
y0	(double)->(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
e	int
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for y0"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
e	int
->	O
yerr	array(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
e	int
->	O
yerr	array(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
e	int
->	O
y0	(double)->(double)
)	O
;	O
free	(*(void))->(void)
(	O
e	int
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for yerr"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
e	int
->	O
dydt_in	array(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
e	int
->	O
dydt_in	array(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
e	int
->	O
yerr	array(double)
)	O
;	O
free	(*(void))->(void)
(	O
e	int
->	O
y0	(double)->(double)
)	O
;	O
free	(*(void))->(void)
(	O
e	int
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for dydt_in"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
e	int
->	O
dydt_out	array(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
e	int
->	O
dydt_out	array(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
e	int
->	O
dydt_in	array(double)
)	O
;	O
free	(*(void))->(void)
(	O
e	int
->	O
yerr	array(double)
)	O
;	O
free	(*(void))->(void)
(	O
e	int
->	O
y0	(double)->(double)
)	O
;	O
free	(*(void))->(void)
(	O
e	int
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for dydt_out"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
e	int
->	O
dimension	long
=	O
dim	long
;	O
e	int
->	O
count	long
=	O
0	int
;	O
e	int
->	O
failed_steps	long
=	O
0	int
;	O
e	int
->	O
last_step	double
=	O
0.0	int
;	O
e	int
->	O
driver	*(struct)
=	O
NULL	O
;	O
return	O
e	int
;	O
}	O
int	O
gsl_odeiv2_evolve_reset	(*(struct(long,*(double),*(double),*(double),*(double),double,long,long,*(struct))))->(int)
(	O
gsl_odeiv2_evolve	struct
*	O
e	int
)	O
{	O
e	int
->	O
count	long
=	O
0	int
;	O
e	int
->	O
failed_steps	long
=	O
0	int
;	O
e	int
->	O
last_step	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
void	O
gsl_odeiv2_evolve_free	(*(struct(long,*(double),*(double),*(double),*(double),double,long,long,*(struct))))->(void)
(	O
gsl_odeiv2_evolve	struct
*	O
e	int
)	O
{	O
RETURN_IF_NULL	O
(	O
e	int
)	O
;	O
free	(*(void))->(void)
(	O
e	int
->	O
dydt_out	array(double)
)	O
;	O
free	(*(void))->(void)
(	O
e	int
->	O
dydt_in	array(double)
)	O
;	O
free	(*(void))->(void)
(	O
e	int
->	O
yerr	array(double)
)	O
;	O
free	(*(void))->(void)
(	O
e	int
->	O
y0	(double)->(double)
)	O
;	O
free	(*(void))->(void)
(	O
e	int
)	O
;	O
}	O
int	O
gsl_odeiv2_evolve_apply	(*(struct(long,*(double),*(double),*(double),*(double),double,long,long,*(struct))),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(void))),*(struct(*(struct(*`,int,int,*`,*`,*`,*`,*`,*`)),long,*(void))),*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))),*(double),double,*(double),array(double))->(int)
(	O
gsl_odeiv2_evolve	struct
*	O
e	int
,	O
gsl_odeiv2_control	struct
*	O
con	*(struct(*(struct(*(char),*(()->(*`)),*((*`,double,double,double,double)->(int)),*((*`,long,int,array(double),array(double),array(double),*`)->(int)),*((*`,double,double,double,long,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),*(void)))
,	O
gsl_odeiv2_step	struct
*	O
step	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
,	O
const	O
gsl_odeiv2_system	struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void))
*	O
dydt	array(double)
,	O
double	O
*	O
t	double
,	O
double	O
t1	double
,	O
double	O
*	O
h	double
,	O
double	O
y	double
[	O
]	O
)	O
{	O
const	O
double	O
t0	double
=	O
*	O
t	double
;	O
double	O
h0	double
=	O
*	O
h	double
;	O
int	O
step_status	int
;	O
int	O
final_step	int
=	O
0	int
;	O
double	O
dt	double
=	O
t1	double
-	O
t0	double
;	O
if	O
(	O
e	int
->	O
dimension	long
!=	O
step	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
->	O
dimension	long
)	O
{	O
GSL_ERROR	O
(	O
"step dimension must match evolution size"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
if	O
(	O
(	O
dt	double
<	O
0.0	int
&&	O
h0	double
>	O
0.0	int
)	O
||	O
(	O
dt	double
>	O
0.0	int
&&	O
h0	double
<	O
0.0	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"step direction must match interval direction"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
DBL_MEMCPY	O
(	O
e	int
->	O
y0	(double)->(double)
,	O
y	double
,	O
e	int
->	O
dimension	long
)	O
;	O
if	O
(	O
step	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
->	O
type	*(struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct`))->(int)),*((*(void),*(struct`))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void))))
->	O
can_use_dydt_in	int
)	O
{	O
if	O
(	O
e	int
->	O
count	long
==	O
0	int
)	O
{	O
int	O
status	int
=	O
GSL_ODEIV_FN_EVAL	O
(	O
dydt	array(double)
,	O
t0	double
,	O
y	double
,	O
e	int
->	O
dydt_in	array(double)
)	O
;	O
if	O
(	O
status	int
)	O
{	O
return	O
status	int
;	O
}	O
}	O
else	O
{	O
DBL_MEMCPY	O
(	O
e	int
->	O
dydt_in	array(double)
,	O
e	int
->	O
dydt_out	array(double)
,	O
e	int
->	O
dimension	long
)	O
;	O
}	O
}	O
try_step	O
:	O
if	O
(	O
(	O
dt	double
>=	O
0.0	int
&&	O
h0	double
>	O
dt	double
)	O
||	O
(	O
dt	double
<	O
0.0	int
&&	O
h0	double
<	O
dt	double
)	O
)	O
{	O
h0	double
=	O
dt	double
;	O
final_step	int
=	O
1	int
;	O
}	O
else	O
{	O
final_step	int
=	O
0	int
;	O
}	O
if	O
(	O
step	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
->	O
type	*(struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct`))->(int)),*((*(void),*(struct`))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void))))
->	O
can_use_dydt_in	int
)	O
{	O
step_status	int
=	O
gsl_odeiv2_step_apply	(*(struct(*(struct(*`,int,int,*`,*`,*`,*`,*`,*`)),long,*(void))),double,double,array(double),array(double),array(double),array(double),*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))))->(int)
(	O
step	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
,	O
t0	double
,	O
h0	double
,	O
y	double
,	O
e	int
->	O
yerr	array(double)
,	O
e	int
->	O
dydt_in	array(double)
,	O
e	int
->	O
dydt_out	array(double)
,	O
dydt	array(double)
)	O
;	O
}	O
else	O
{	O
step_status	int
=	O
gsl_odeiv2_step_apply	(*(struct(*(struct(*`,int,int,*`,*`,*`,*`,*`,*`)),long,*(void))),double,double,array(double),array(double),array(double),array(double),*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))))->(int)
(	O
step	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
,	O
t0	double
,	O
h0	double
,	O
y	double
,	O
e	int
->	O
yerr	array(double)
,	O
NULL	O
,	O
e	int
->	O
dydt_out	array(double)
,	O
dydt	array(double)
)	O
;	O
}	O
if	O
(	O
step_status	int
==	O
GSL_EFAULT	int
||	O
step_status	int
==	O
GSL_EBADFUNC	int
)	O
{	O
return	O
step_status	int
;	O
}	O
if	O
(	O
step_status	int
!=	O
GSL_SUCCESS	int
)	O
{	O
double	O
h_old	double
=	O
h0	double
;	O
h0	double
*=	O
0.5	int
;	O
{	O
double	O
t_curr	double
=	O
GSL_COERCE_DBL	O
(	O
*	O
t	double
)	O
;	O
double	O
t_next	double
=	O
GSL_COERCE_DBL	O
(	O
(	O
*	O
t	double
)	O
+	O
h0	double
)	O
;	O
if	O
(	O
fabs	(double)->(double)
(	O
h0	double
)	O
<	O
fabs	(double)->(double)
(	O
h_old	double
)	O
&&	O
t_next	double
!=	O
t_curr	double
)	O
{	O
DBL_MEMCPY	O
(	O
y	double
,	O
e	int
->	O
y0	(double)->(double)
,	O
dydt	array(double)
->	O
dimension	long
)	O
;	O
e	int
->	O
failed_steps	long
++	O
;	O
goto	O
try_step	O
;	O
}	O
else	O
{	O
*	O
h	double
=	O
h0	double
;	O
*	O
t	double
=	O
t0	double
;	O
return	O
step_status	int
;	O
}	O
}	O
}	O
e	int
->	O
count	long
++	O
;	O
e	int
->	O
last_step	double
=	O
h0	double
;	O
if	O
(	O
final_step	int
)	O
{	O
*	O
t	double
=	O
t1	double
;	O
}	O
else	O
{	O
*	O
t	double
=	O
t0	double
+	O
h0	double
;	O
}	O
if	O
(	O
con	*(struct(*(struct(*(char),*(()->(*`)),*((*`,double,double,double,double)->(int)),*((*`,long,int,array(double),array(double),array(double),*`)->(int)),*((*`,double,double,double,long,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),*(void)))
!=	O
NULL	O
)	O
{	O
double	O
h_old	double
=	O
h0	double
;	O
const	O
int	O
hadjust_status	int
=	O
gsl_odeiv2_control_hadjust	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(void))),*(struct(*(struct(*`,int,int,*`,*`,*`,*`,*`,*`)),long,*(void))),array(double),array(double),array(double),*(double))->(int)
(	O
con	*(struct(*(struct(*(char),*(()->(*`)),*((*`,double,double,double,double)->(int)),*((*`,long,int,array(double),array(double),array(double),*`)->(int)),*((*`,double,double,double,long,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),*(void)))
,	O
step	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
,	O
y	double
,	O
e	int
->	O
yerr	array(double)
,	O
e	int
->	O
dydt_out	array(double)
,	O
&	O
h0	double
)	O
;	O
if	O
(	O
hadjust_status	int
==	O
GSL_ODEIV_HADJ_DEC	O
)	O
{	O
double	O
t_curr	double
=	O
GSL_COERCE_DBL	O
(	O
*	O
t	double
)	O
;	O
double	O
t_next	double
=	O
GSL_COERCE_DBL	O
(	O
(	O
*	O
t	double
)	O
+	O
h0	double
)	O
;	O
if	O
(	O
fabs	(double)->(double)
(	O
h0	double
)	O
<	O
fabs	(double)->(double)
(	O
h_old	double
)	O
&&	O
t_next	double
!=	O
t_curr	double
)	O
{	O
DBL_MEMCPY	O
(	O
y	double
,	O
e	int
->	O
y0	(double)->(double)
,	O
dydt	array(double)
->	O
dimension	long
)	O
;	O
e	int
->	O
failed_steps	long
++	O
;	O
goto	O
try_step	O
;	O
}	O
else	O
{	O
*	O
h	double
=	O
h0	double
;	O
return	O
GSL_FAILURE	int
;	O
}	O
}	O
}	O
if	O
(	O
final_step	int
==	O
0	int
)	O
{	O
*	O
h	double
=	O
h0	double
;	O
}	O
return	O
step_status	int
;	O
}	O
int	O
gsl_odeiv2_evolve_apply_fixed_step	(*(struct(long,*(double),*(double),*(double),*(double),double,long,long,*(struct))),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(void))),*(struct(*(struct(*`,int,int,*`,*`,*`,*`,*`,*`)),long,*(void))),*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))),*(double),double,array(double))->(int)
(	O
gsl_odeiv2_evolve	struct
*	O
e	int
,	O
gsl_odeiv2_control	struct
*	O
con	*(struct(*(struct(*(char),*(()->(*`)),*((*`,double,double,double,double)->(int)),*((*`,long,int,array(double),array(double),array(double),*`)->(int)),*((*`,double,double,double,long,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),*(void)))
,	O
gsl_odeiv2_step	struct
*	O
step	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
,	O
const	O
gsl_odeiv2_system	struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void))
*	O
dydt	array(double)
,	O
double	O
*	O
t	double
,	O
const	O
double	O
h	double
,	O
double	O
y	double
[	O
]	O
)	O
{	O
const	O
double	O
t0	double
=	O
*	O
t	double
;	O
int	O
step_status	int
;	O
if	O
(	O
e	int
->	O
dimension	long
!=	O
step	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
->	O
dimension	long
)	O
{	O
GSL_ERROR	O
(	O
"step dimension must match evolution size"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
DBL_MEMCPY	O
(	O
e	int
->	O
y0	(double)->(double)
,	O
y	double
,	O
e	int
->	O
dimension	long
)	O
;	O
if	O
(	O
step	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
->	O
type	*(struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct`))->(int)),*((*(void),*(struct`))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void))))
->	O
can_use_dydt_in	int
)	O
{	O
int	O
status	int
=	O
GSL_ODEIV_FN_EVAL	O
(	O
dydt	array(double)
,	O
t0	double
,	O
y	double
,	O
e	int
->	O
dydt_in	array(double)
)	O
;	O
if	O
(	O
status	int
)	O
{	O
return	O
status	int
;	O
}	O
}	O
if	O
(	O
step	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
->	O
type	*(struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct`))->(int)),*((*(void),*(struct`))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void))))
->	O
can_use_dydt_in	int
)	O
{	O
step_status	int
=	O
gsl_odeiv2_step_apply	(*(struct(*(struct(*`,int,int,*`,*`,*`,*`,*`,*`)),long,*(void))),double,double,array(double),array(double),array(double),array(double),*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))))->(int)
(	O
step	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
,	O
t0	double
,	O
h	double
,	O
y	double
,	O
e	int
->	O
yerr	array(double)
,	O
e	int
->	O
dydt_in	array(double)
,	O
e	int
->	O
dydt_out	array(double)
,	O
dydt	array(double)
)	O
;	O
}	O
else	O
{	O
step_status	int
=	O
gsl_odeiv2_step_apply	(*(struct(*(struct(*`,int,int,*`,*`,*`,*`,*`,*`)),long,*(void))),double,double,array(double),array(double),array(double),array(double),*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))))->(int)
(	O
step	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
,	O
t0	double
,	O
h	double
,	O
y	double
,	O
e	int
->	O
yerr	array(double)
,	O
NULL	O
,	O
e	int
->	O
dydt_out	array(double)
,	O
dydt	array(double)
)	O
;	O
}	O
if	O
(	O
step_status	int
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
step_status	int
;	O
}	O
if	O
(	O
con	*(struct(*(struct(*(char),*(()->(*`)),*((*`,double,double,double,double)->(int)),*((*`,long,int,array(double),array(double),array(double),*`)->(int)),*((*`,double,double,double,long,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),*(void)))
!=	O
NULL	O
)	O
{	O
double	O
htemp	double
=	O
h	double
;	O
const	O
int	O
hadjust_status	int
=	O
gsl_odeiv2_control_hadjust	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(void))),*(struct(*(struct(*`,int,int,*`,*`,*`,*`,*`,*`)),long,*(void))),array(double),array(double),array(double),*(double))->(int)
(	O
con	*(struct(*(struct(*(char),*(()->(*`)),*((*`,double,double,double,double)->(int)),*((*`,long,int,array(double),array(double),array(double),*`)->(int)),*((*`,double,double,double,long,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),*(void)))
,	O
step	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
,	O
y	double
,	O
e	int
->	O
yerr	array(double)
,	O
e	int
->	O
dydt_out	array(double)
,	O
&	O
htemp	double
)	O
;	O
if	O
(	O
hadjust_status	int
==	O
GSL_ODEIV_HADJ_DEC	O
)	O
{	O
DBL_MEMCPY	O
(	O
y	double
,	O
e	int
->	O
y0	(double)->(double)
,	O
dydt	array(double)
->	O
dimension	long
)	O
;	O
e	int
->	O
failed_steps	long
++	O
;	O
return	O
GSL_FAILURE	int
;	O
}	O
}	O
e	int
->	O
count	long
++	O
;	O
e	int
->	O
last_step	double
=	O
h	double
;	O
*	O
t	double
=	O
t0	double
+	O
h	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_odeiv2_evolve_set_driver	(*(struct(long,*(double),*(double),*(double),*(double),double,long,long,*(struct))),*(struct))->(int)
(	O
gsl_odeiv2_evolve	struct
*	O
e	int
,	O
const	O
gsl_odeiv2_driver	struct
*	O
d	*(struct)
)	O
{	O
if	O
(	O
d	*(struct)
!=	O
NULL	O
)	O
{	O
e	int
->	O
driver	*(struct)
=	O
d	*(struct)
;	O
}	O
else	O
{	O
GSL_ERROR_NULL	O
(	O
"driver pointer is null"	*(char)
,	O
GSL_EFAULT	int
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
