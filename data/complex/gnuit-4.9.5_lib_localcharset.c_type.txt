static	O
const	O
char	O
*	O
volatile	O
charset_aliases	*(char)
;	O
static	O
const	O
char	O
*	O
get_charset_aliases	()->(*(char))
(	O
void	O
)	O
{	O
const	O
char	O
*	O
cp	*(char)
;	O
cp	*(char)
=	O
charset_aliases	*(char)
;	O
if	O
(	O
cp	*(char)
==	O
NULL	O
)	O
{	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
const	O
char	O
*	O
dir	*(char)
;	O
const	O
char	O
*	O
base	*(char)
=	O
"charset.alias"	*(char)
;	O
char	O
*	O
file_name	*(char)
;	O
dir	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"CHARSETALIASDIR"	*(char)
)	O
;	O
if	O
(	O
dir	*(char)
==	O
NULL	O
||	O
dir	*(char)
[	O
0	int
]	O
==	O
'\0'	O
)	O
dir	*(char)
=	O
relocate	O
(	O
LIBDIR	*(char)
)	O
;	O
{	O
size_t	long
dir_len	long
=	O
strlen	(*(char))->(long)
(	O
dir	*(char)
)	O
;	O
size_t	long
base_len	long
=	O
strlen	(*(char))->(long)
(	O
base	*(char)
)	O
;	O
int	O
add_slash	int
=	O
(	O
dir_len	long
>	O
0	int
&&	O
!	O
ISSLASH	O
(	O
dir	*(char)
[	O
dir_len	long
-	O
1	int
]	O
)	O
)	O
;	O
file_name	*(char)
=	O
(	O
char	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dir_len	long
+	O
add_slash	int
+	O
base_len	long
+	O
1	int
)	O
;	O
if	O
(	O
file_name	*(char)
!=	O
NULL	O
)	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
file_name	*(char)
,	O
dir	*(char)
,	O
dir_len	long
)	O
;	O
if	O
(	O
add_slash	int
)	O
file_name	*(char)
[	O
dir_len	long
]	O
=	O
DIRECTORY_SEPARATOR	char
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
file_name	*(char)
+	O
dir_len	long
+	O
add_slash	int
,	O
base	*(char)
,	O
base_len	long
+	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
file_name	*(char)
==	O
NULL	O
||	O
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
file_name	*(char)
,	O
"r"	*(char)
)	O
)	O
==	O
NULL	O
)	O
cp	*(char)
=	O
""	*(char)
;	O
else	O
{	O
char	O
*	O
res_ptr	*(char)
=	O
NULL	O
;	O
size_t	long
res_size	long
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
int	O
c	int
;	O
char	O
buf1	array(char)
[	O
50	int
+	O
1	int
]	O
;	O
char	O
buf2	array(char)
[	O
50	int
+	O
1	int
]	O
;	O
size_t	long
l1	long
,	O
l2	long
;	O
char	O
*	O
old_res_ptr	*(char)
;	O
c	int
=	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
)	O
continue	O
;	O
if	O
(	O
c	int
==	O
'#'	O
)	O
{	O
do	O
c	int
=	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
while	O
(	O
!	O
(	O
c	int
==	O
EOF	O
||	O
c	int
==	O
'\n'	O
)	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
continue	O
;	O
}	O
ungetc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
c	int
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
fscanf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%50s %50s"	*(char)
,	O
buf1	array(char)
,	O
buf2	array(char)
)	O
<	O
2	int
)	O
break	O
;	O
l1	long
=	O
strlen	(*(char))->(long)
(	O
buf1	array(char)
)	O
;	O
l2	long
=	O
strlen	(*(char))->(long)
(	O
buf2	array(char)
)	O
;	O
old_res_ptr	*(char)
=	O
res_ptr	*(char)
;	O
if	O
(	O
res_size	long
==	O
0	int
)	O
{	O
res_size	long
=	O
l1	long
+	O
1	int
+	O
l2	long
+	O
1	int
;	O
res_ptr	*(char)
=	O
(	O
char	O
*	O
)	O
malloc	(long)->(*(void))
(	O
res_size	long
+	O
1	int
)	O
;	O
}	O
else	O
{	O
res_size	long
+=	O
l1	long
+	O
1	int
+	O
l2	long
+	O
1	int
;	O
res_ptr	*(char)
=	O
(	O
char	O
*	O
)	O
realloc	(*(void),long)->(*(void))
(	O
res_ptr	*(char)
,	O
res_size	long
+	O
1	int
)	O
;	O
}	O
if	O
(	O
res_ptr	*(char)
==	O
NULL	O
)	O
{	O
res_size	long
=	O
0	int
;	O
if	O
(	O
old_res_ptr	*(char)
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
old_res_ptr	*(char)
)	O
;	O
break	O
;	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
res_ptr	*(char)
+	O
res_size	long
-	O
(	O
l2	long
+	O
1	int
)	O
-	O
(	O
l1	long
+	O
1	int
)	O
,	O
buf1	array(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
res_ptr	*(char)
+	O
res_size	long
-	O
(	O
l2	long
+	O
1	int
)	O
,	O
buf2	array(char)
)	O
;	O
}	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
res_size	long
==	O
0	int
)	O
cp	*(char)
=	O
""	*(char)
;	O
else	O
{	O
*	O
(	O
res_ptr	*(char)
+	O
res_size	long
)	O
=	O
'\0'	O
;	O
cp	*(char)
=	O
res_ptr	*(char)
;	O
}	O
}	O
if	O
(	O
file_name	*(char)
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
file_name	*(char)
)	O
;	O
charset_aliases	*(char)
=	O
cp	*(char)
;	O
}	O
return	O
cp	*(char)
;	O
}	O
const	O
char	O
*	O
locale_charset	()->(*(char))
(	O
void	O
)	O
{	O
const	O
char	O
*	O
codeset	*(char)
;	O
const	O
char	O
*	O
aliases	*(char)
;	O
codeset	*(char)
=	O
nl_langinfo	(int)->(*(char))
(	O
CODESET	int
)	O
;	O
if	O
(	O
codeset	*(char)
==	O
NULL	O
)	O
codeset	*(char)
=	O
""	*(char)
;	O
for	O
(	O
aliases	*(char)
=	O
get_charset_aliases	()->(*(char))
(	O
)	O
;	O
*	O
aliases	*(char)
!=	O
'\0'	O
;	O
aliases	*(char)
+=	O
strlen	(*(char))->(long)
(	O
aliases	*(char)
)	O
+	O
1	int
,	O
aliases	*(char)
+=	O
strlen	(*(char))->(long)
(	O
aliases	*(char)
)	O
+	O
1	int
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
codeset	*(char)
,	O
aliases	*(char)
)	O
==	O
0	int
||	O
(	O
aliases	*(char)
[	O
0	int
]	O
==	O
'*'	O
&&	O
aliases	*(char)
[	O
1	int
]	O
==	O
'\0'	O
)	O
)	O
{	O
codeset	*(char)
=	O
aliases	*(char)
+	O
strlen	(*(char))->(long)
(	O
aliases	*(char)
)	O
+	O
1	int
;	O
break	O
;	O
}	O
if	O
(	O
codeset	*(char)
[	O
0	int
]	O
==	O
'\0'	O
)	O
codeset	*(char)
=	O
"ASCII"	*(char)
;	O
return	O
codeset	*(char)
;	O
}	O
