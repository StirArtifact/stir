static	O
gdImagePtr	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
*	O
input_images	*(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)))
=	O
(	O
gdImagePtr	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
*	O
)	O
NULL	O
;	O
static	O
int	O
input_images_index	int
=	O
0	int
;	O
static	O
int	O
input_images_slots	int
=	O
0	int
;	O
static	O
char	O
*	O
rotated	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
static	O
int	O
aliased	int
=	O
0	int
;	O
static	O
int	O
retrans	int
=	O
0	int
;	O
static	O
void	O
cleanup	(*(char))->(void)
(	O
char	O
*	O
string	*(char)
)	O
;	O
static	O
int	O
parse_hex_pair	(*(char))->(int)
(	O
char	O
*	O
pair_start	*(char)
)	O
;	O
static	O
void	O
memory_error_and_abort	(*(char))->(void)
(	O
char	O
*	O
fname	*(char)
)	O
;	O
static	O
void	O
decode_args	(*(char),*(int),*(*(*(char))))->(void)
(	O
char	O
*	O
string	*(char)
,	O
int	O
*	O
argcp	*(int)
,	O
char	O
*	O
*	O
*	O
argvp	*(*(*(char)))
)	O
;	O
static	O
char	O
*	O
progname	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
static	O
int	O
called_from_web_server	int
=	O
0	int
;	O
static	O
void	O
*	O
xmalloc	(int)->(*(void))
(	O
unsigned	O
int	O
bytes	int
)	O
{	O
void	O
*	O
temp	*(void)
=	O
(	O
void	O
*	O
)	O
malloc	(long)->(*(void))
(	O
bytes	int
)	O
;	O
if	O
(	O
!	O
temp	*(void)
)	O
memory_error_and_abort	(*(char))->(void)
(	O
"xmalloc"	*(char)
)	O
;	O
return	O
(	O
temp	*(void)
)	O
;	O
}	O
static	O
void	O
*	O
xrealloc	(*(void),int)->(*(void))
(	O
void	O
*	O
pointer	*(void)
,	O
unsigned	O
int	O
bytes	int
)	O
{	O
void	O
*	O
temp	*(void)
;	O
if	O
(	O
!	O
pointer	*(void)
)	O
temp	*(void)
=	O
(	O
void	O
*	O
)	O
malloc	(long)->(*(void))
(	O
bytes	int
)	O
;	O
else	O
temp	*(void)
=	O
(	O
void	O
*	O
)	O
realloc	(*(void),long)->(*(void))
(	O
pointer	*(void)
,	O
bytes	int
)	O
;	O
if	O
(	O
!	O
temp	*(void)
)	O
memory_error_and_abort	(*(char))->(void)
(	O
"xrealloc"	*(char)
)	O
;	O
return	O
(	O
temp	*(void)
)	O
;	O
}	O
static	O
void	O
memory_error_and_abort	(*(char))->(void)
(	O
char	O
*	O
fname	*(char)
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: Out of virtual memory!\n"	*(char)
,	O
fname	*(char)
)	O
;	O
abort	()->(void)
(	O
)	O
;	O
}	O
static	O
void	O
usage	(int)->(void)
(	O
int	O
status	int
)	O
{	O
register	O
int	O
i	int
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Usage: %s [-r DEGREES] gif-file...\n"	*(char)
,	O
progname	*(char)
)	O
;	O
if	O
(	O
status	int
)	O
exit	(int)->(void)
(	O
status	int
)	O
;	O
}	O
static	O
void	O
file_error	(*(char))->(void)
(	O
char	O
*	O
filename	*(char)
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: %s: %s\n"	*(char)
,	O
progname	*(char)
,	O
filename	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
static	O
void	O
parse_program_arguments	(int,array(*(char)))->(void)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array(*(char))
[	O
]	O
)	O
{	O
register	O
int	O
arg_index	int
=	O
1	int
;	O
char	O
*	O
webargs	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"PATH_INFO"	*(char)
)	O
;	O
progname	*(char)
=	O
argv	array(*(char))
[	O
0	int
]	O
;	O
if	O
(	O
!	O
webargs	*(char)
||	O
!	O
*	O
webargs	*(char)
)	O
webargs	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"QUERY_STRING"	*(char)
)	O
;	O
if	O
(	O
webargs	*(char)
&&	O
*	O
webargs	*(char)
)	O
{	O
called_from_web_server	int
=	O
1	int
;	O
decode_args	(*(char),*(int),*(*(*(char))))->(void)
(	O
webargs	*(char)
,	O
&	O
argc	int
,	O
&	O
argv	array(*(char))
)	O
;	O
}	O
while	O
(	O
arg_index	int
<	O
argc	int
)	O
{	O
char	O
*	O
arg	*(char)
=	O
argv	array(*(char))
[	O
arg_index	int
++	O
]	O
;	O
char	O
*	O
next	*(char)
=	O
(	O
arg_index	int
<	O
argc	int
)	O
?	O
(	O
argv	array(*(char))
[	O
arg_index	int
]	O
)	O
:	O
(	O
char	O
*	O
)	O
NULL	O
;	O
if	O
(	O
strcasecmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"--help"	*(char)
)	O
==	O
0	int
)	O
{	O
usage	(int)->(void)
(	O
0	int
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"-r"	*(char)
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"--rotate"	*(char)
)	O
==	O
0	int
)	O
)	O
{	O
rotated	*(char)
=	O
argv	array(*(char))
[	O
arg_index	int
++	O
]	O
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"-a"	*(char)
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"--aliased"	*(char)
)	O
==	O
0	int
)	O
)	O
aliased	int
=	O
1	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"--retrans"	*(char)
)	O
==	O
0	int
)	O
retrans	int
=	O
1	int
;	O
else	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
arg	*(char)
,	O
"--"	*(char)
,	O
2	int
)	O
==	O
0	int
)	O
{	O
FILE	struct
*	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
arg	*(char)
,	O
"rb"	*(char)
)	O
;	O
if	O
(	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
!=	O
(	O
FILE	struct
*	O
)	O
NULL	O
)	O
{	O
gdImagePtr	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
=	O
gdImageCreateFromGif	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)))
(	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
!=	O
(	O
gdImagePtr	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
)	O
NULL	O
)	O
{	O
if	O
(	O
input_images_index	int
+	O
2	int
>	O
input_images_slots	int
)	O
input_images	*(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)))
=	O
(	O
gdImagePtr	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
*	O
)	O
xrealloc	(*(void),int)->(*(void))
(	O
input_images	*(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)))
,	O
(	O
input_images_slots	int
+=	O
20	int
)	O
*	O
sizeof	O
(	O
gdImagePtr	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
)	O
)	O
;	O
input_images	*(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)))
[	O
input_images_index	int
++	O
]	O
=	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
;	O
}	O
else	O
{	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
file_error	(*(char))->(void)
(	O
arg	*(char)
)	O
;	O
}	O
}	O
else	O
file_error	(*(char))->(void)
(	O
arg	*(char)
)	O
;	O
}	O
else	O
usage	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
static	O
void	O
gif_return	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)))->(void)
(	O
gdImagePtr	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
gif	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
)	O
{	O
FILE	struct
*	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
if	O
(	O
called_from_web_server	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Expires: Monday, 05-Feb-96 15:04:14 GMT\n"	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Content-Type: image/gif\n"	*(char)
)	O
;	O
}	O
gdImageGif	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
gif	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
static	O
void	O
cleanup	(*(char))->(void)
(	O
char	O
*	O
string	*(char)
)	O
{	O
register	O
int	O
i	int
,	O
j	int
,	O
len	int
;	O
char	O
*	O
dest	*(char)
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
string	*(char)
)	O
;	O
dest	*(char)
=	O
(	O
char	O
*	O
)	O
alloca	(long)->(*(void))
(	O
1	int
+	O
len	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
,	O
j	int
=	O
0	int
;	O
i	int
<	O
len	int
;	O
i	int
++	O
)	O
{	O
switch	O
(	O
string	*(char)
[	O
i	int
]	O
)	O
{	O
case	O
'%'	O
:	O
dest	*(char)
[	O
j	int
++	O
]	O
=	O
parse_hex_pair	(*(char))->(int)
(	O
string	*(char)
+	O
i	int
+	O
1	int
)	O
;	O
i	int
+=	O
2	int
;	O
break	O
;	O
case	O
'+'	O
:	O
dest	*(char)
[	O
j	int
++	O
]	O
=	O
' '	O
;	O
break	O
;	O
default	O
:	O
dest	*(char)
[	O
j	int
++	O
]	O
=	O
string	*(char)
[	O
i	int
]	O
;	O
}	O
}	O
dest	*(char)
[	O
j	int
]	O
=	O
'\0'	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
dest	*(char)
)	O
;	O
}	O
static	O
int	O
parse_hex_pair	(*(char))->(int)
(	O
char	O
*	O
pair_start	*(char)
)	O
{	O
int	O
value	int
=	O
0	int
;	O
int	O
char1	int
,	O
char2	int
;	O
char1	int
=	O
char2	int
=	O
0	int
;	O
char1	int
=	O
*	O
pair_start	*(char)
;	O
if	O
(	O
char1	int
)	O
char2	int
=	O
(	O
pair_start	*(char)
[	O
1	int
]	O
)	O
;	O
if	O
(	O
isupper	(int)->(int)
(	O
char1	int
)	O
)	O
char1	int
=	O
tolower	(int)->(int)
(	O
char1	int
)	O
;	O
if	O
(	O
isupper	(int)->(int)
(	O
char2	int
)	O
)	O
char2	int
=	O
tolower	(int)->(int)
(	O
char2	int
)	O
;	O
if	O
(	O
isdigit	(int)->(int)
(	O
char1	int
)	O
)	O
value	int
=	O
char1	int
-	O
'0'	O
;	O
else	O
if	O
(	O
(	O
char1	int
<=	O
'f'	O
)	O
&&	O
(	O
char1	int
>=	O
'a'	O
)	O
)	O
value	int
=	O
10	int
+	O
(	O
char1	int
-	O
'a'	O
)	O
;	O
if	O
(	O
isdigit	(int)->(int)
(	O
char2	int
)	O
)	O
value	int
=	O
(	O
value	int
*	O
16	int
)	O
+	O
(	O
char2	int
-	O
'0'	O
)	O
;	O
else	O
if	O
(	O
(	O
char2	int
<=	O
'f'	O
)	O
&&	O
(	O
char2	int
>=	O
'a'	O
)	O
)	O
value	int
=	O
(	O
value	int
*	O
16	int
)	O
+	O
(	O
10	int
+	O
(	O
char2	int
-	O
'a'	O
)	O
)	O
;	O
return	O
(	O
value	int
)	O
;	O
}	O
static	O
void	O
decode_args	(*(char),*(int),*(*(*(char))))->(void)
(	O
char	O
*	O
string	*(char)
,	O
int	O
*	O
argcp	*(int)
,	O
char	O
*	O
*	O
*	O
argvp	*(*(*(char)))
)	O
{	O
char	O
*	O
temp	*(void)
;	O
temp	*(void)
=	O
strchr	(*(char),int)->(*(char))
(	O
string	*(char)
,	O
'='	O
)	O
;	O
if	O
(	O
temp	*(void)
)	O
{	O
register	O
int	O
i	int
;	O
int	O
argc	int
=	O
*	O
argcp	*(int)
;	O
int	O
slots	int
=	O
argc	int
+	O
10	int
;	O
char	O
*	O
*	O
argv	array(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
xmalloc	(int)->(*(void))
(	O
slots	int
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
temp	*(void)
++	O
;	O
temp	*(void)
=	O
strdup	(*(char))->(*(char))
(	O
temp	*(void)
)	O
;	O
cleanup	(*(char))->(void)
(	O
temp	*(void)
)	O
;	O
i	int
=	O
0	int
;	O
while	O
(	O
temp	*(void)
[	O
i	int
]	O
)	O
{	O
int	O
start	int
=	O
i	int
;	O
char	O
*	O
arg	*(char)
;	O
while	O
(	O
temp	*(void)
[	O
i	int
]	O
!=	O
'\0'	O
&&	O
!	O
whitespace	O
(	O
temp	*(void)
[	O
i	int
]	O
)	O
)	O
i	int
++	O
;	O
arg	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(int)->(*(void))
(	O
1	int
+	O
(	O
i	int
-	O
start	int
)	O
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
arg	*(char)
,	O
temp	*(void)
+	O
start	int
,	O
(	O
i	int
-	O
start	int
)	O
)	O
;	O
arg	*(char)
[	O
i	int
-	O
start	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
argc	int
+	O
2	int
>	O
slots	int
)	O
argv	array(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
xrealloc	(*(void),int)->(*(void))
(	O
argv	array(*(char))
,	O
(	O
(	O
slots	int
+=	O
10	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
)	O
;	O
argv	array(*(char))
[	O
argc	int
++	O
]	O
=	O
arg	*(char)
;	O
argv	array(*(char))
[	O
argc	int
]	O
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
while	O
(	O
whitespace	O
(	O
temp	*(void)
[	O
i	int
]	O
)	O
)	O
i	int
++	O
;	O
}	O
*	O
argcp	*(int)
=	O
argc	int
;	O
*	O
argvp	*(*(*(char)))
=	O
argv	array(*(char))
;	O
}	O
}	O
static	O
gdImagePtr	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
rotate_image	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int)->(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)))
(	O
gdImagePtr	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
int	O
degrees	int
)	O
{	O
register	O
int	O
x	int
,	O
y	int
;	O
int	O
width	int
=	O
gdImageSX	O
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
)	O
;	O
int	O
height	int
=	O
gdImageSY	O
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
)	O
;	O
if	O
(	O
degrees	int
==	O
-	O
90	int
)	O
degrees	int
=	O
270	int
;	O
if	O
(	O
degrees	int
==	O
-	O
270	int
)	O
degrees	int
=	O
90	int
;	O
if	O
(	O
degrees	int
==	O
-	O
180	int
)	O
degrees	int
=	O
180	int
;	O
if	O
(	O
degrees	int
<	O
90	int
)	O
return	O
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
)	O
;	O
else	O
if	O
(	O
degrees	int
==	O
180	int
)	O
{	O
gdImagePtr	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
rotated	*(char)
=	O
gdImageCreate	(int,int)->(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)))
(	O
width	int
,	O
height	int
)	O
;	O
for	O
(	O
x	int
=	O
0	int
;	O
x	int
<	O
width	int
;	O
x	int
++	O
)	O
for	O
(	O
y	int
=	O
0	int
;	O
y	int
<	O
height	int
;	O
y	int
++	O
)	O
{	O
int	O
pixel	int
=	O
gdImageGetPixel	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int)->(int)
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
x	int
,	O
y	int
)	O
;	O
int	O
r	int
=	O
gdImageRed	O
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
pixel	int
)	O
;	O
int	O
g	int
=	O
gdImageGreen	O
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
pixel	int
)	O
;	O
int	O
b	int
=	O
gdImageBlue	O
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
pixel	int
)	O
;	O
int	O
newcol	int
;	O
newcol	int
=	O
gdImageColorExact	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int,int)->(int)
(	O
rotated	*(char)
,	O
r	int
,	O
g	int
,	O
b	int
)	O
;	O
if	O
(	O
newcol	int
<	O
0	int
)	O
newcol	int
=	O
gdImageColorAllocate	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int,int)->(int)
(	O
rotated	*(char)
,	O
r	int
,	O
g	int
,	O
b	int
)	O
;	O
gdImageSetPixel	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int,int)->(void)
(	O
rotated	*(char)
,	O
width	int
-	O
x	int
,	O
height	int
-	O
y	int
,	O
newcol	int
)	O
;	O
}	O
return	O
(	O
rotated	*(char)
)	O
;	O
}	O
else	O
{	O
gdImagePtr	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
rotated	*(char)
=	O
gdImageCreate	(int,int)->(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)))
(	O
height	int
,	O
width	int
)	O
;	O
for	O
(	O
x	int
=	O
0	int
;	O
x	int
<	O
width	int
;	O
x	int
++	O
)	O
for	O
(	O
y	int
=	O
0	int
;	O
y	int
<	O
height	int
;	O
y	int
++	O
)	O
{	O
int	O
pixel	int
=	O
gdImageGetPixel	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int)->(int)
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
x	int
,	O
y	int
)	O
;	O
int	O
r	int
=	O
gdImageRed	O
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
pixel	int
)	O
;	O
int	O
g	int
=	O
gdImageGreen	O
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
pixel	int
)	O
;	O
int	O
b	int
=	O
gdImageBlue	O
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
pixel	int
)	O
;	O
int	O
newcol	int
;	O
newcol	int
=	O
gdImageColorExact	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int,int)->(int)
(	O
rotated	*(char)
,	O
r	int
,	O
g	int
,	O
b	int
)	O
;	O
if	O
(	O
newcol	int
<	O
0	int
)	O
newcol	int
=	O
gdImageColorAllocate	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int,int)->(int)
(	O
rotated	*(char)
,	O
r	int
,	O
g	int
,	O
b	int
)	O
;	O
if	O
(	O
degrees	int
==	O
90	int
)	O
gdImageSetPixel	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int,int)->(void)
(	O
rotated	*(char)
,	O
height	int
-	O
y	int
,	O
x	int
,	O
newcol	int
)	O
;	O
else	O
gdImageSetPixel	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int,int)->(void)
(	O
rotated	*(char)
,	O
y	int
,	O
width	int
-	O
x	int
,	O
newcol	int
)	O
;	O
}	O
return	O
(	O
rotated	*(char)
)	O
;	O
}	O
}	O
typedef	O
struct	O
{	O
int	O
r	int
,	O
g	int
,	O
b	int
;	O
}	O
RGB	struct(int,int,int)
;	O
static	O
void	O
get_rgb	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,*(struct(int,int,int)))->(void)
(	O
gdImagePtr	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
int	O
pixel	int
,	O
RGB	struct(int,int,int)
*	O
rgb	*(struct(int,int,int))
)	O
{	O
rgb	*(struct(int,int,int))
->	O
r	int
=	O
gdImageRed	O
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
pixel	int
)	O
;	O
rgb	*(struct(int,int,int))
->	O
b	int
=	O
gdImageBlue	O
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
pixel	int
)	O
;	O
rgb	*(struct(int,int,int))
->	O
g	int
=	O
gdImageGreen	O
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
pixel	int
)	O
;	O
}	O
static	O
void	O
anti_alias	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int,*(int),*(int),*(int))->(void)
(	O
gdImagePtr	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
int	O
pixel_x	int
,	O
int	O
pixel_y	int
,	O
int	O
*	O
new_red	*(int)
,	O
int	O
*	O
new_green	*(int)
,	O
int	O
*	O
new_blue	*(int)
)	O
{	O
register	O
int	O
x	int
,	O
y	int
,	O
i	int
,	O
pixel	int
;	O
int	O
r	int
,	O
g	int
,	O
b	int
;	O
RGB	struct(int,int,int)
neighbors	array(struct(int,int,int))
[	O
10	int
]	O
;	O
int	O
trans_color	int
=	O
gdImageGetTransparent	O
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
)	O
;	O
int	O
base_pixel	int
=	O
gdImageGetPixel	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int)->(int)
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
pixel_x	int
,	O
pixel_y	int
)	O
;	O
i	int
=	O
0	int
;	O
for	O
(	O
y	int
=	O
pixel_y	int
-	O
1	int
;	O
y	int
<	O
pixel_y	int
+	O
2	int
;	O
y	int
++	O
)	O
for	O
(	O
x	int
=	O
pixel_x	int
-	O
1	int
;	O
x	int
<	O
pixel_x	int
+	O
2	int
;	O
x	int
++	O
)	O
{	O
pixel	int
=	O
gdImageGetPixel	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int)->(int)
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
x	int
,	O
y	int
)	O
;	O
get_rgb	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,*(struct(int,int,int)))->(void)
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
pixel	int
,	O
&	O
neighbors	array(struct(int,int,int))
[	O
i	int
]	O
)	O
;	O
i	int
++	O
;	O
}	O
r	int
=	O
g	int
=	O
b	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
9	int
;	O
i	int
++	O
)	O
{	O
r	int
+=	O
neighbors	array(struct(int,int,int))
[	O
i	int
]	O
.	O
r	int
;	O
g	int
+=	O
neighbors	array(struct(int,int,int))
[	O
i	int
]	O
.	O
g	int
;	O
b	int
+=	O
neighbors	array(struct(int,int,int))
[	O
i	int
]	O
.	O
b	int
;	O
}	O
r	int
=	O
r	int
/	O
9	int
;	O
g	int
=	O
g	int
/	O
9	int
;	O
b	int
=	O
b	int
/	O
9	int
;	O
*	O
new_red	*(int)
=	O
r	int
;	O
*	O
new_green	*(int)
=	O
g	int
;	O
*	O
new_blue	*(int)
=	O
b	int
;	O
}	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array(*(char))
[	O
]	O
)	O
{	O
parse_program_arguments	(int,array(*(char)))->(void)
(	O
argc	int
,	O
argv	array(*(char))
)	O
;	O
if	O
(	O
input_images_index	int
==	O
0	int
)	O
usage	(int)->(void)
(	O
1	int
)	O
;	O
else	O
{	O
register	O
int	O
i	int
;	O
gdImagePtr	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
base_image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
;	O
int	O
max_width	int
=	O
0	int
,	O
max_height	int
=	O
0	int
;	O
int	O
r	int
,	O
g	int
,	O
b	int
,	O
trans	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
input_images_index	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
gdImageSX	O
(	O
input_images	*(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)))
[	O
i	int
]	O
)	O
>	O
max_width	int
)	O
max_width	int
=	O
gdImageSX	O
(	O
input_images	*(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)))
[	O
i	int
]	O
)	O
;	O
if	O
(	O
gdImageSY	O
(	O
input_images	*(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)))
[	O
i	int
]	O
)	O
>	O
max_height	int
)	O
max_height	int
=	O
gdImageSY	O
(	O
input_images	*(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)))
[	O
i	int
]	O
)	O
;	O
}	O
base_image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
=	O
gdImageCreate	(int,int)->(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)))
(	O
max_width	int
,	O
max_height	int
)	O
;	O
r	int
=	O
254	int
,	O
g	int
=	O
254	int
,	O
b	int
=	O
254	int
;	O
trans	int
=	O
gdImageColorAllocate	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int,int)->(int)
(	O
base_image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
r	int
,	O
g	int
,	O
b	int
)	O
;	O
gdImageFilledRectangle	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int,int,int,int)->(void)
(	O
base_image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
0	int
,	O
0	int
,	O
max_width	int
,	O
max_height	int
,	O
trans	int
)	O
;	O
gdImageColorTransparent	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int)->(void)
(	O
base_image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
trans	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
input_images_index	int
;	O
i	int
++	O
)	O
{	O
gdImagePtr	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
=	O
input_images	*(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)))
[	O
i	int
]	O
;	O
register	O
int	O
start_x	int
,	O
start_y	int
;	O
register	O
int	O
x	int
,	O
y	int
;	O
int	O
xlimit	int
=	O
gdImageSX	O
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
)	O
;	O
int	O
ylimit	int
=	O
gdImageSY	O
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
)	O
;	O
start_x	int
=	O
(	O
max_width	int
-	O
gdImageSX	O
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
)	O
)	O
/	O
2	int
;	O
start_y	int
=	O
(	O
max_height	int
-	O
gdImageSY	O
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
)	O
)	O
/	O
2	int
;	O
for	O
(	O
y	int
=	O
0	int
;	O
y	int
<	O
ylimit	int
;	O
y	int
++	O
)	O
for	O
(	O
x	int
=	O
0	int
;	O
x	int
<	O
xlimit	int
;	O
x	int
++	O
)	O
{	O
int	O
pixel_color	int
=	O
gdImageGetPixel	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int)->(int)
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
x	int
,	O
y	int
)	O
;	O
int	O
base_color	int
=	O
gdImageColorExact	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int,int)->(int)
(	O
base_image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
gdImageRed	O
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
pixel_color	int
)	O
,	O
gdImageGreen	O
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
pixel_color	int
)	O
,	O
gdImageBlue	O
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
pixel_color	int
)	O
)	O
;	O
if	O
(	O
base_color	int
==	O
-	O
1	int
)	O
base_color	int
=	O
gdImageColorAllocate	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int,int)->(int)
(	O
base_image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
gdImageRed	O
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
pixel_color	int
)	O
,	O
gdImageGreen	O
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
pixel_color	int
)	O
,	O
gdImageBlue	O
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
pixel_color	int
)	O
)	O
;	O
if	O
(	O
base_color	int
!=	O
trans	int
)	O
gdImageSetPixel	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int,int)->(void)
(	O
base_image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
start_x	int
+	O
x	int
,	O
start_y	int
+	O
y	int
,	O
base_color	int
)	O
;	O
}	O
if	O
(	O
retrans	int
&&	O
i	int
)	O
{	O
int	O
ztrans	int
=	O
gdImageGetTransparent	O
(	O
input_images	*(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)))
[	O
0	int
]	O
)	O
;	O
for	O
(	O
y	int
=	O
0	int
;	O
y	int
<	O
max_height	int
;	O
y	int
++	O
)	O
for	O
(	O
x	int
=	O
0	int
;	O
x	int
<	O
max_width	int
;	O
x	int
++	O
)	O
{	O
int	O
pixel	int
=	O
gdImageGetPixel	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int)->(int)
(	O
input_images	*(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)))
[	O
0	int
]	O
,	O
x	int
,	O
y	int
)	O
;	O
if	O
(	O
pixel	int
==	O
ztrans	int
)	O
gdImageSetPixel	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int,int)->(void)
(	O
base_image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
x	int
,	O
y	int
,	O
trans	int
)	O
;	O
}	O
}	O
if	O
(	O
aliased	int
&&	O
i	int
)	O
{	O
gdImagePtr	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
aliased_image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
=	O
gdImageCreate	(int,int)->(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)))
(	O
max_width	int
,	O
max_height	int
)	O
;	O
gdImageCopy	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int,int,int,int,int)->(void)
(	O
aliased_image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
base_image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
max_width	int
,	O
max_height	int
)	O
;	O
gdImageColorTransparent	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int)->(void)
(	O
aliased_image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
0	int
)	O
;	O
for	O
(	O
y	int
=	O
1	int
;	O
y	int
<	O
(	O
ylimit	int
-	O
1	int
)	O
;	O
y	int
++	O
)	O
for	O
(	O
x	int
=	O
1	int
;	O
x	int
<	O
(	O
xlimit	int
-	O
1	int
)	O
;	O
x	int
++	O
)	O
{	O
int	O
t	int
=	O
gdImageGetPixel	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int)->(int)
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
x	int
,	O
y	int
)	O
;	O
int	O
r	int
=	O
gdImageRed	O
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
t	int
)	O
;	O
int	O
g	int
=	O
gdImageGreen	O
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
t	int
)	O
;	O
int	O
b	int
=	O
gdImageBlue	O
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
t	int
)	O
;	O
int	O
c	int
=	O
gdImageColorExact	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int,int)->(int)
(	O
base_image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
r	int
,	O
g	int
,	O
b	int
)	O
;	O
if	O
(	O
c	int
)	O
{	O
anti_alias	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int,*(int),*(int),*(int))->(void)
(	O
base_image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
start_x	int
+	O
x	int
,	O
start_y	int
+	O
y	int
,	O
&	O
r	int
,	O
&	O
g	int
,	O
&	O
b	int
)	O
;	O
c	int
=	O
gdImageColorExact	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int,int)->(int)
(	O
aliased_image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
r	int
,	O
g	int
,	O
b	int
)	O
;	O
if	O
(	O
c	int
==	O
-	O
1	int
)	O
c	int
=	O
gdImageColorAllocate	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int,int)->(int)
(	O
aliased_image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
r	int
,	O
g	int
,	O
b	int
)	O
;	O
gdImageSetPixel	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int,int)->(void)
(	O
aliased_image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
start_x	int
+	O
x	int
,	O
start_y	int
+	O
y	int
,	O
c	int
)	O
;	O
}	O
}	O
gdImageDestroy	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)))->(void)
(	O
base_image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
)	O
;	O
base_image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
=	O
aliased_image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
;	O
}	O
}	O
if	O
(	O
rotated	*(char)
)	O
base_image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
=	O
rotate_image	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int)->(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)))
(	O
base_image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
atoi	(*(char))->(int)
(	O
rotated	*(char)
)	O
)	O
;	O
gif_return	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)))->(void)
(	O
base_image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
