struct	O
limits_rec	O
{	O
unsigned	O
set	O
;	O
rlim_t	long
limit_as	O
;	O
rlim_t	long
limit_cpu	O
;	O
rlim_t	long
limit_data	O
;	O
rlim_t	long
limit_fsize	O
;	O
rlim_t	long
limit_nproc	O
;	O
rlim_t	long
limit_core	O
;	O
rlim_t	long
limit_memlock	O
;	O
rlim_t	long
limit_nofile	O
;	O
rlim_t	long
limit_rss	O
;	O
rlim_t	long
limit_stack	O
;	O
size_t	long
limit_logins	O
;	O
int	O
limit_prio	O
;	O
}	O
;	O
int	O
do_set_limit	O
(	O
int	O
rlimit	struct(long,long)
,	O
rlim_t	long
limit	O
)	O
{	O
struct	O
rlimit	struct(long,long)
rlim	O
;	O
debug	O
(	O
2	int
,	O
_	O
(	O
"Setting limit %d to %lu"	*(char)
)	O
,	O
rlimit	struct(long,long)
,	O
(	O
unsigned	O
long	O
)	O
limit	O
)	O
;	O
rlim	O
.	O
rlim_cur	long
=	O
limit	O
;	O
rlim	O
.	O
rlim_max	long
=	O
limit	O
;	O
if	O
(	O
setrlimit	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(struct(long,long)))->(int)
(	O
rlimit	struct(long,long)
,	O
&	O
rlim	O
)	O
)	O
{	O
logmsg	O
(	O
LOG_NOTICE	O
,	O
_	O
(	O
"error setting limit: %s"	*(char)
)	O
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
set_prio	O
(	O
int	O
prio	O
)	O
{	O
debug	O
(	O
2	int
,	O
_	O
(	O
"Setting priority to %d"	*(char)
)	O
,	O
prio	O
)	O
;	O
if	O
(	O
setpriority	(enum(int,int,int),int,int)->(int)
(	O
PRIO_PROCESS	int
,	O
0	int
,	O
prio	O
)	O
)	O
{	O
logmsg	O
(	O
LOG_NOTICE	O
,	O
_	O
(	O
"error setting priority: %s"	*(char)
)	O
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
check_logins	O
(	O
const	O
char	O
*	O
name	*(char)
,	O
size_t	long
limit	O
)	O
{	O
size_t	long
count	O
=	O
0	int
;	O
struct	O
rush_wtmp	struct(long,int,struct(long,long),struct(long,long),*(char),*(char),*(char))
*	O
wtmp	*(struct(long,int,struct(long,long),struct(long,long),*(char),*(char),*(char)))
=	O
0	int
;	O
int	O
status	int
;	O
if	O
(	O
limit	O
==	O
0	int
)	O
{	O
debug	O
(	O
2	int
,	O
_	O
(	O
"No logins allowed for `%s'"	*(char)
)	O
,	O
name	*(char)
)	O
;	O
logmsg	O
(	O
LOG_ERR	O
,	O
_	O
(	O
"No logins allowed for `%s'"	*(char)
)	O
,	O
name	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
debug	O
(	O
3	int
,	O
_	O
(	O
"counting logins for %s"	*(char)
)	O
,	O
name	*(char)
)	O
;	O
switch	O
(	O
rushdb_open	(*(char),int)->(enum(int,int,int))
(	O
RUSH_DB	O
,	O
0	int
)	O
)	O
{	O
case	O
rushdb_result_ok	int
:	O
break	O
;	O
case	O
rushdb_result_eof	int
:	O
debug	O
(	O
3	int
,	O
"%s"	*(char)
,	O
_	O
(	O
"acct database is empty"	*(char)
)	O
)	O
;	O
return	O
0	int
;	O
case	O
rushdb_result_fail	int
:	O
logmsg	O
(	O
LOG_ERR	O
,	O
_	O
(	O
"Cannot open database %s: %s"	*(char)
)	O
,	O
RUSH_DB	O
,	O
rushdb_error_string	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
while	O
(	O
rush_utmp_read	(int,*(int),*(*(struct(long,int,struct(long,long),struct(long,long),*(char),*(char),*(char)))))->(enum(int,int,int))
(	O
RUSH_STATUS_MAP_BIT	O
(	O
RUSH_STATUS_INUSE	O
)	O
,	O
&	O
status	int
,	O
&	O
wtmp	*(struct(long,int,struct(long,long),struct(long,long),*(char),*(char),*(char)))
)	O
==	O
0	int
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
wtmp	*(struct(long,int,struct(long,long),struct(long,long),*(char),*(char),*(char)))
->	O
user	*(char)
,	O
name	*(char)
)	O
==	O
0	int
)	O
{	O
if	O
(	O
++	O
count	O
>=	O
limit	O
)	O
break	O
;	O
}	O
free	(*(void))->(void)
(	O
wtmp	*(struct(long,int,struct(long,long),struct(long,long),*(char),*(char),*(char)))
)	O
;	O
wtmp	*(struct(long,int,struct(long,long),struct(long,long),*(char),*(char),*(char)))
=	O
NULL	O
;	O
}	O
free	(*(void))->(void)
(	O
wtmp	*(struct(long,int,struct(long,long),struct(long,long),*(char),*(char),*(char)))
)	O
;	O
rushdb_close	()->(int)
(	O
)	O
;	O
debug	O
(	O
3	int
,	O
_	O
(	O
"counted %zu/%zu logins for %s"	*(char)
)	O
,	O
count	O
,	O
limit	O
,	O
name	*(char)
)	O
;	O
if	O
(	O
count	O
>=	O
limit	O
)	O
{	O
debug	O
(	O
2	int
,	O
_	O
(	O
"Too many logins (max %zu) for %s"	*(char)
)	O
,	O
limit	O
,	O
name	*(char)
)	O
;	O
logmsg	O
(	O
LOG_ERR	O
,	O
_	O
(	O
"Too many logins (max %zu) for %s"	*(char)
)	O
,	O
limit	O
,	O
name	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
set_user_limits	O
(	O
const	O
char	O
*	O
name	*(char)
,	O
struct	O
limits_rec	O
*	O
lrec	O
)	O
{	O
int	O
rc	O
=	O
0	int
;	O
if	O
(	O
!	O
lrec	O
)	O
return	O
0	int
;	O
debug	O
(	O
2	int
,	O
_	O
(	O
"Setting limits for %s"	*(char)
)	O
,	O
name	*(char)
)	O
;	O
if	O
(	O
lrec	O
->	O
set	O
&	O
SET_LIMIT_AS	O
)	O
rc	O
|=	O
do_set_limit	O
(	O
RLIMIT_AS	int
,	O
lrec	O
->	O
limit_as	O
)	O
;	O
if	O
(	O
lrec	O
->	O
set	O
&	O
SET_LIMIT_CPU	O
)	O
rc	O
|=	O
do_set_limit	O
(	O
RLIMIT_CPU	int
,	O
lrec	O
->	O
limit_cpu	O
)	O
;	O
if	O
(	O
lrec	O
->	O
set	O
&	O
SET_LIMIT_DATA	O
)	O
rc	O
|=	O
do_set_limit	O
(	O
RLIMIT_DATA	int
,	O
lrec	O
->	O
limit_data	O
)	O
;	O
if	O
(	O
lrec	O
->	O
set	O
&	O
SET_LIMIT_FSIZE	O
)	O
rc	O
|=	O
do_set_limit	O
(	O
RLIMIT_FSIZE	int
,	O
lrec	O
->	O
limit_fsize	O
)	O
;	O
if	O
(	O
lrec	O
->	O
set	O
&	O
SET_LIMIT_NPROC	O
)	O
rc	O
|=	O
do_set_limit	O
(	O
RLIMIT_NPROC	O
,	O
lrec	O
->	O
limit_nproc	O
)	O
;	O
if	O
(	O
lrec	O
->	O
set	O
&	O
SET_LIMIT_CORE	O
)	O
rc	O
|=	O
do_set_limit	O
(	O
RLIMIT_CORE	int
,	O
lrec	O
->	O
limit_core	O
)	O
;	O
if	O
(	O
lrec	O
->	O
set	O
&	O
SET_LIMIT_MEMLOCK	O
)	O
rc	O
|=	O
do_set_limit	O
(	O
RLIMIT_MEMLOCK	O
,	O
lrec	O
->	O
limit_memlock	O
)	O
;	O
if	O
(	O
lrec	O
->	O
set	O
&	O
SET_LIMIT_NOFILE	O
)	O
rc	O
|=	O
do_set_limit	O
(	O
RLIMIT_NOFILE	int
,	O
lrec	O
->	O
limit_nofile	O
)	O
;	O
if	O
(	O
lrec	O
->	O
set	O
&	O
SET_LIMIT_RSS	O
)	O
rc	O
|=	O
do_set_limit	O
(	O
RLIMIT_RSS	O
,	O
lrec	O
->	O
limit_rss	O
)	O
;	O
if	O
(	O
lrec	O
->	O
set	O
&	O
SET_LIMIT_STACK	O
)	O
rc	O
|=	O
do_set_limit	O
(	O
RLIMIT_STACK	int
,	O
lrec	O
->	O
limit_stack	O
)	O
;	O
if	O
(	O
lrec	O
->	O
set	O
&	O
SET_LIMIT_LOGINS	O
)	O
rc	O
|=	O
check_logins	O
(	O
name	*(char)
,	O
lrec	O
->	O
limit_logins	O
)	O
;	O
if	O
(	O
lrec	O
->	O
set	O
&	O
SET_LIMIT_PRIO	O
)	O
rc	O
|=	O
set_prio	O
(	O
lrec	O
->	O
limit_prio	O
)	O
;	O
return	O
rc	O
;	O
}	O
int	O
getlimit	O
(	O
char	O
*	O
*	O
ptr	O
,	O
rlim_t	long
*	O
rlim	O
,	O
int	O
mul	O
)	O
{	O
unsigned	O
long	O
val	array(int)
;	O
val	array(int)
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
*	O
ptr	O
,	O
ptr	O
,	O
10	int
)	O
;	O
if	O
(	O
val	array(int)
==	O
0	int
)	O
return	O
1	int
;	O
*	O
rlim	O
=	O
val	array(int)
*	O
mul	O
;	O
return	O
0	int
;	O
}	O
limits_record_t	*(struct)
limits_record_create	O
(	O
void	O
)	O
{	O
struct	O
limits_rec	O
*	O
lrec	O
=	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
lrec	O
)	O
)	O
;	O
lrec	O
->	O
set	O
=	O
0	int
;	O
return	O
lrec	O
;	O
}	O
int	O
limits_record_add	O
(	O
limits_record_t	*(struct)
lrec	O
,	O
char	O
*	O
str	*(char)
,	O
char	O
*	O
*	O
endp	O
)	O
{	O
char	O
*	O
p	*(void)
;	O
switch	O
(	O
*	O
str	*(char)
++	O
)	O
{	O
case	O
'a'	O
:	O
case	O
'A'	O
:	O
if	O
(	O
getlimit	O
(	O
&	O
str	*(char)
,	O
&	O
lrec	O
->	O
limit_as	O
,	O
1024	int
)	O
)	O
{	O
*	O
endp	O
=	O
str	*(char)
;	O
return	O
lrec_badval	O
;	O
}	O
lrec	O
->	O
set	O
|=	O
SET_LIMIT_AS	O
;	O
break	O
;	O
case	O
't'	O
:	O
case	O
'T'	O
:	O
if	O
(	O
getlimit	O
(	O
&	O
str	*(char)
,	O
&	O
lrec	O
->	O
limit_cpu	O
,	O
60	int
)	O
)	O
{	O
*	O
endp	O
=	O
str	*(char)
;	O
return	O
lrec_badval	O
;	O
}	O
lrec	O
->	O
set	O
|=	O
SET_LIMIT_CPU	O
;	O
break	O
;	O
case	O
'd'	O
:	O
case	O
'D'	O
:	O
if	O
(	O
getlimit	O
(	O
&	O
str	*(char)
,	O
&	O
lrec	O
->	O
limit_data	O
,	O
1024	int
)	O
)	O
{	O
*	O
endp	O
=	O
str	*(char)
;	O
return	O
lrec_badval	O
;	O
}	O
lrec	O
->	O
set	O
|=	O
SET_LIMIT_DATA	O
;	O
break	O
;	O
case	O
'f'	O
:	O
case	O
'F'	O
:	O
if	O
(	O
getlimit	O
(	O
&	O
str	*(char)
,	O
&	O
lrec	O
->	O
limit_fsize	O
,	O
1024	int
)	O
)	O
{	O
*	O
endp	O
=	O
str	*(char)
;	O
return	O
lrec_badval	O
;	O
}	O
lrec	O
->	O
set	O
|=	O
SET_LIMIT_FSIZE	O
;	O
break	O
;	O
case	O
'u'	O
:	O
case	O
'U'	O
:	O
if	O
(	O
getlimit	O
(	O
&	O
str	*(char)
,	O
&	O
lrec	O
->	O
limit_nproc	O
,	O
1	int
)	O
)	O
{	O
*	O
endp	O
=	O
str	*(char)
;	O
return	O
lrec_badval	O
;	O
}	O
lrec	O
->	O
set	O
|=	O
SET_LIMIT_NPROC	O
;	O
break	O
;	O
case	O
'c'	O
:	O
case	O
'C'	O
:	O
if	O
(	O
getlimit	O
(	O
&	O
str	*(char)
,	O
&	O
lrec	O
->	O
limit_core	O
,	O
1024	int
)	O
)	O
{	O
*	O
endp	O
=	O
str	*(char)
;	O
return	O
lrec_badval	O
;	O
}	O
lrec	O
->	O
set	O
|=	O
SET_LIMIT_CORE	O
;	O
break	O
;	O
case	O
'm'	O
:	O
case	O
'M'	O
:	O
if	O
(	O
getlimit	O
(	O
&	O
str	*(char)
,	O
&	O
lrec	O
->	O
limit_memlock	O
,	O
1024	int
)	O
)	O
{	O
*	O
endp	O
=	O
str	*(char)
;	O
return	O
lrec_badval	O
;	O
}	O
lrec	O
->	O
set	O
|=	O
SET_LIMIT_MEMLOCK	O
;	O
break	O
;	O
case	O
'n'	O
:	O
case	O
'N'	O
:	O
if	O
(	O
getlimit	O
(	O
&	O
str	*(char)
,	O
&	O
lrec	O
->	O
limit_nofile	O
,	O
1	int
)	O
)	O
{	O
*	O
endp	O
=	O
str	*(char)
;	O
return	O
lrec_badval	O
;	O
}	O
lrec	O
->	O
set	O
|=	O
SET_LIMIT_NOFILE	O
;	O
break	O
;	O
case	O
'r'	O
:	O
case	O
'R'	O
:	O
if	O
(	O
getlimit	O
(	O
&	O
str	*(char)
,	O
&	O
lrec	O
->	O
limit_rss	O
,	O
1024	int
)	O
)	O
{	O
*	O
endp	O
=	O
str	*(char)
;	O
return	O
lrec_badval	O
;	O
}	O
lrec	O
->	O
set	O
|=	O
SET_LIMIT_RSS	O
;	O
break	O
;	O
case	O
's'	O
:	O
case	O
'S'	O
:	O
if	O
(	O
getlimit	O
(	O
&	O
str	*(char)
,	O
&	O
lrec	O
->	O
limit_stack	O
,	O
1024	int
)	O
)	O
{	O
*	O
endp	O
=	O
str	*(char)
;	O
return	O
lrec_badval	O
;	O
}	O
lrec	O
->	O
set	O
|=	O
SET_LIMIT_STACK	O
;	O
break	O
;	O
case	O
'l'	O
:	O
case	O
'L'	O
:	O
lrec	O
->	O
limit_logins	O
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
str	*(char)
,	O
&	O
p	*(void)
,	O
10	int
)	O
;	O
if	O
(	O
p	*(void)
==	O
str	*(char)
)	O
{	O
*	O
endp	O
=	O
p	*(void)
;	O
return	O
lrec_badval	O
;	O
}	O
lrec	O
->	O
set	O
|=	O
SET_LIMIT_LOGINS	O
;	O
break	O
;	O
case	O
'p'	O
:	O
case	O
'P'	O
:	O
lrec	O
->	O
limit_prio	O
=	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
str	*(char)
,	O
&	O
p	*(void)
,	O
10	int
)	O
;	O
if	O
(	O
p	*(void)
==	O
str	*(char)
)	O
{	O
*	O
endp	O
=	O
p	*(void)
;	O
return	O
lrec_badval	O
;	O
}	O
if	O
(	O
lrec	O
->	O
limit_prio	O
>	O
0	int
)	O
lrec	O
->	O
set	O
|=	O
SET_LIMIT_PRIO	O
;	O
break	O
;	O
default	O
:	O
*	O
endp	O
=	O
str	*(char)
-	O
1	int
;	O
return	O
lrec_error	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
parse_limits	O
(	O
limits_record_t	*(struct)
*	O
plrec	O
,	O
char	O
*	O
str	*(char)
,	O
char	O
*	O
*	O
endp	O
)	O
{	O
int	O
c	int
;	O
struct	O
limits_rec	O
*	O
lrec	O
=	O
limits_record_create	O
(	O
)	O
;	O
int	O
rc	O
;	O
while	O
(	O
(	O
c	int
=	O
*	O
str	*(char)
++	O
)	O
)	O
{	O
if	O
(	O
ISWS	O
(	O
c	int
)	O
)	O
continue	O
;	O
rc	O
=	O
limits_record_add	O
(	O
lrec	O
,	O
str	*(char)
,	O
endp	O
)	O
;	O
if	O
(	O
rc	O
)	O
{	O
free	(*(void))->(void)
(	O
lrec	O
)	O
;	O
return	O
rc	O
;	O
}	O
}	O
*	O
plrec	O
=	O
lrec	O
;	O
return	O
0	int
;	O
}	O
