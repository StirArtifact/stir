struct	O
binary_tree_entry	struct(int,int,int)
{	O
int	O
value	int
;	O
int	O
smaller	int
;	O
int	O
larger	int
;	O
}	O
;	O
int	O
binary_search_tree_array	(array(struct(int,int,int)),int,int)->(int)
(	O
struct	O
binary_tree_entry	struct(int,int,int)
array	array(struct(int,int,int))
[	O
]	O
,	O
int	O
n	int
,	O
int	O
key	int
)	O
{	O
int	O
i	int
=	O
n	int
/	O
2	int
;	O
array	array(struct(int,int,int))
[	O
n	int
]	O
.	O
value	int
=	O
key	int
;	O
for	O
(	O
;	O
;	O
)	O
if	O
(	O
key	int
>	O
array	array(struct(int,int,int))
[	O
i	int
]	O
.	O
value	int
)	O
i	int
=	O
array	array(struct(int,int,int))
[	O
i	int
]	O
.	O
larger	int
;	O
else	O
if	O
(	O
key	int
<	O
array	array(struct(int,int,int))
[	O
i	int
]	O
.	O
value	int
)	O
i	int
=	O
array	array(struct(int,int,int))
[	O
i	int
]	O
.	O
smaller	int
;	O
else	O
return	O
i	int
!=	O
n	int
?	O
i	int
:	O
-	O
1	int
;	O
}	O
int	O
init_binary_tree_array	(array(struct(int,int,int)),int,int,int)->(int)
(	O
struct	O
binary_tree_entry	struct(int,int,int)
array	array(struct(int,int,int))
[	O
]	O
,	O
int	O
n	int
,	O
int	O
min	int
,	O
int	O
max	int
)	O
{	O
if	O
(	O
min	int
<=	O
max	int
)	O
{	O
int	O
i	int
=	O
(	O
min	int
+	O
max	int
+	O
1	int
)	O
/	O
2	int
;	O
array	array(struct(int,int,int))
[	O
i	int
]	O
.	O
larger	int
=	O
init_binary_tree_array	(array(struct(int,int,int)),int,int,int)->(int)
(	O
array	array(struct(int,int,int))
,	O
n	int
,	O
i	int
+	O
1	int
,	O
max	int
)	O
;	O
array	array(struct(int,int,int))
[	O
i	int
]	O
.	O
smaller	int
=	O
init_binary_tree_array	(array(struct(int,int,int)),int,int,int)->(int)
(	O
array	array(struct(int,int,int))
,	O
n	int
,	O
min	int
,	O
i	int
-	O
1	int
)	O
;	O
return	O
i	int
;	O
}	O
else	O
return	O
n	int
;	O
}	O
static	O
void	O
usage	()->(void)
(	O
void	O
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"Usage: bin-ary-test <array-size>\n"	*(char)
"where <array-size> is the size of the array to test.\n"	*(char)
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
static	O
int	O
stoi	(*(char))->(int)
(	O
const	O
char	O
*	O
s	*(char)
)	O
{	O
long	O
x	long
=	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
s	*(char)
,	O
NULL	O
,	O
10	int
)	O
;	O
return	O
x	long
>=	O
INT_MIN	O
&&	O
x	long
<=	O
INT_MAX	O
?	O
x	long
:	O
0	int
;	O
}	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array(*(char))
[	O
]	O
)	O
{	O
struct	O
binary_tree_entry	struct(int,int,int)
*	O
array	array(struct(int,int,int))
;	O
int	O
n	int
,	O
i	int
;	O
if	O
(	O
argc	int
!=	O
2	int
)	O
usage	()->(void)
(	O
)	O
;	O
n	int
=	O
stoi	(*(char))->(int)
(	O
argv	array(*(char))
[	O
1	int
]	O
)	O
;	O
if	O
(	O
n	int
<	O
1	int
)	O
usage	()->(void)
(	O
)	O
;	O
array	array(struct(int,int,int))
=	O
malloc	(long)->(*(void))
(	O
(	O
n	int
+	O
1	int
)	O
*	O
sizeof	O
*	O
array	array(struct(int,int,int))
)	O
;	O
if	O
(	O
array	array(struct(int,int,int))
==	O
NULL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"out of memory\n"	*(char)
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
array	array(struct(int,int,int))
[	O
i	int
]	O
.	O
value	int
=	O
i	int
;	O
init_binary_tree_array	(array(struct(int,int,int)),int,int,int)->(int)
(	O
array	array(struct(int,int,int))
,	O
n	int
,	O
0	int
,	O
n	int
-	O
1	int
)	O
;	O
for	O
(	O
i	int
=	O
-	O
1	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
{	O
int	O
result	int
=	O
binary_search_tree_array	(array(struct(int,int,int)),int,int)->(int)
(	O
array	array(struct(int,int,int))
,	O
n	int
,	O
i	int
)	O
;	O
if	O
(	O
result	int
!=	O
i	int
)	O
printf	(*(char))->(int)
(	O
"Searching for %d: expected %d, but received %d\n"	*(char)
,	O
i	int
,	O
i	int
,	O
result	int
)	O
;	O
}	O
free	(*(void))->(void)
(	O
array	array(struct(int,int,int))
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
