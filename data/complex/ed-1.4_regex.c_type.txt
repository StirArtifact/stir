static	O
regex_t	struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
*	O
global_pat	*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
=	O
0	int
;	O
static	O
char	O
patlock	char
=	O
0	int
;	O
static	O
char	O
*	O
stbuf	*(char)
=	O
0	int
;	O
static	O
int	O
stbufsz	int
=	O
0	int
;	O
static	O
int	O
stlen	int
=	O
0	int
;	O
static	O
char	O
*	O
rbuf	*(char)
=	O
0	int
;	O
static	O
int	O
rbufsz	int
=	O
0	int
;	O
char	O
prev_pattern	()->(char)
(	O
void	O
)	O
{	O
return	O
global_pat	*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
!=	O
0	int
;	O
}	O
static	O
void	O
translit_text	(*(char),int,char,char)->(void)
(	O
char	O
*	O
s	*(char)
,	O
int	O
len	int
,	O
char	O
from	int
,	O
char	O
to	int
)	O
{	O
char	O
*	O
p	*(char)
=	O
s	*(char)
;	O
while	O
(	O
--	O
len	int
>	O
0	int
)	O
{	O
if	O
(	O
*	O
p	*(char)
==	O
from	int
)	O
*	O
p	*(char)
=	O
to	int
;	O
++	O
p	*(char)
;	O
}	O
}	O
static	O
void	O
newline_to_nul	(*(char),int)->(void)
(	O
char	O
*	O
s	*(char)
,	O
int	O
len	int
)	O
{	O
translit_text	(*(char),int,char,char)->(void)
(	O
s	*(char)
,	O
len	int
,	O
'\n'	O
,	O
'\0'	O
)	O
;	O
}	O
static	O
void	O
nul_to_newline	(*(char),int)->(void)
(	O
char	O
*	O
s	*(char)
,	O
int	O
len	int
)	O
{	O
translit_text	(*(char),int,char,char)->(void)
(	O
s	*(char)
,	O
len	int
,	O
'\0'	O
,	O
'\n'	O
)	O
;	O
}	O
static	O
const	O
char	O
*	O
parse_char_class	(*(char))->(*(char))
(	O
const	O
char	O
*	O
s	*(char)
)	O
{	O
char	O
c	char
,	O
d	char
;	O
if	O
(	O
*	O
s	*(char)
==	O
'^'	O
)	O
++	O
s	*(char)
;	O
if	O
(	O
*	O
s	*(char)
==	O
']'	O
)	O
++	O
s	*(char)
;	O
for	O
(	O
;	O
*	O
s	*(char)
!=	O
']'	O
&&	O
*	O
s	*(char)
!=	O
'\n'	O
;	O
++	O
s	*(char)
)	O
if	O
(	O
*	O
s	*(char)
==	O
'['	O
&&	O
(	O
(	O
d	char
=	O
s	*(char)
[	O
1	int
]	O
)	O
==	O
'.'	O
||	O
d	char
==	O
':'	O
||	O
d	char
==	O
'='	O
)	O
)	O
for	O
(	O
++	O
s	*(char)
,	O
c	char
=	O
*	O
++	O
s	*(char)
;	O
*	O
s	*(char)
!=	O
']'	O
||	O
c	char
!=	O
d	char
;	O
++	O
s	*(char)
)	O
if	O
(	O
(	O
c	char
=	O
*	O
s	*(char)
)	O
==	O
'\n'	O
)	O
return	O
0	int
;	O
return	O
(	O
(	O
*	O
s	*(char)
==	O
']'	O
)	O
?	O
s	*(char)
:	O
0	int
)	O
;	O
}	O
static	O
char	O
*	O
extract_pattern	(*(*(char)),int)->(*(char))
(	O
const	O
char	O
*	O
*	O
ibufpp	*(*(char))
,	O
const	O
int	O
delimiter	int
)	O
{	O
static	O
char	O
*	O
buf	*(*(char))
=	O
0	int
;	O
static	O
int	O
bufsz	int
=	O
0	int
;	O
const	O
char	O
*	O
nd	*(char)
=	O
*	O
ibufpp	*(*(char))
;	O
int	O
len	int
;	O
while	O
(	O
*	O
nd	*(char)
!=	O
delimiter	int
&&	O
*	O
nd	*(char)
!=	O
'\n'	O
)	O
{	O
if	O
(	O
*	O
nd	*(char)
==	O
'['	O
)	O
{	O
nd	*(char)
=	O
parse_char_class	(*(char))->(*(char))
(	O
++	O
nd	*(char)
)	O
;	O
if	O
(	O
!	O
nd	*(char)
)	O
{	O
set_error_msg	(*(char))->(void)
(	O
"Unbalanced brackets ([])"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
}	O
else	O
if	O
(	O
*	O
nd	*(char)
==	O
'\\'	O
&&	O
*	O
++	O
nd	*(char)
==	O
'\n'	O
)	O
{	O
set_error_msg	(*(char))->(void)
(	O
"Trailing backslash (\\)"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
++	O
nd	*(char)
;	O
}	O
len	int
=	O
nd	*(char)
-	O
*	O
ibufpp	*(*(char))
;	O
if	O
(	O
!	O
resize_buffer	(*(*(char)),*(int),int)->(char)
(	O
&	O
buf	*(*(char))
,	O
&	O
bufsz	int
,	O
len	int
+	O
1	int
)	O
)	O
return	O
0	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
buf	*(*(char))
,	O
*	O
ibufpp	*(*(char))
,	O
len	int
)	O
;	O
buf	*(*(char))
[	O
len	int
]	O
=	O
0	int
;	O
*	O
ibufpp	*(*(char))
=	O
nd	*(char)
;	O
if	O
(	O
isbinary	()->(char)
(	O
)	O
)	O
nul_to_newline	(*(char),int)->(void)
(	O
buf	*(*(char))
,	O
len	int
)	O
;	O
return	O
buf	*(*(char))
;	O
}	O
static	O
regex_t	struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
*	O
get_compiled_pattern	(*(*(char)))->(*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)))
(	O
const	O
char	O
*	O
*	O
ibufpp	*(*(char))
)	O
{	O
static	O
regex_t	struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
*	O
exp	*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
=	O
0	int
;	O
char	O
*	O
exps	*(char)
;	O
const	O
char	O
delimiter	int
=	O
*	O
*	O
ibufpp	*(*(char))
;	O
int	O
n	int
;	O
if	O
(	O
delimiter	int
==	O
' '	O
)	O
{	O
set_error_msg	(*(char))->(void)
(	O
"Invalid pattern delimiter"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
delimiter	int
==	O
'\n'	O
||	O
*	O
++	O
(	O
*	O
ibufpp	*(*(char))
)	O
==	O
'\n'	O
||	O
*	O
*	O
ibufpp	*(*(char))
==	O
delimiter	int
)	O
{	O
if	O
(	O
!	O
exp	*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
)	O
set_error_msg	(*(char))->(void)
(	O
"No previous pattern"	*(char)
)	O
;	O
return	O
exp	*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
;	O
}	O
if	O
(	O
!	O
(	O
exps	*(char)
=	O
extract_pattern	(*(*(char)),int)->(*(char))
(	O
ibufpp	*(*(char))
,	O
delimiter	int
)	O
)	O
)	O
return	O
0	int
;	O
if	O
(	O
exp	*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
&&	O
!	O
patlock	char
)	O
regfree	(*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)))->(void)
(	O
exp	*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
)	O
;	O
else	O
if	O
(	O
!	O
(	O
exp	*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
=	O
(	O
regex_t	struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
regex_t	struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
)	O
)	O
)	O
)	O
{	O
show_strerror	(*(char),int)->(void)
(	O
0	int
,	O
errno	O
)	O
;	O
set_error_msg	(*(char))->(void)
(	O
"Memory exhausted"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
patlock	char
=	O
0	int
;	O
n	int
=	O
regcomp	(*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)),*(char),int)->(int)
(	O
exp	*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
,	O
exps	*(char)
,	O
0	int
)	O
;	O
if	O
(	O
n	int
)	O
{	O
char	O
buf	*(*(char))
[	O
80	int
]	O
;	O
regerror	(int,*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)),*(char),long)->(long)
(	O
n	int
,	O
exp	*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
,	O
buf	*(*(char))
,	O
sizeof	O
(	O
buf	*(*(char))
)	O
)	O
;	O
set_error_msg	(*(char))->(void)
(	O
buf	*(*(char))
)	O
;	O
free	(*(void))->(void)
(	O
exp	*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
)	O
;	O
exp	*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
=	O
0	int
;	O
}	O
return	O
exp	*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
;	O
}	O
char	O
build_active_list	(*(*(char)),int,int,char)->(char)
(	O
const	O
char	O
*	O
*	O
ibufpp	*(*(char))
,	O
const	O
int	O
first_addr	int
,	O
const	O
int	O
second_addr	int
,	O
const	O
char	O
match	char
)	O
{	O
regex_t	struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
*	O
pat	*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
;	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
;	O
int	O
addr	int
;	O
const	O
char	O
delimiter	int
=	O
*	O
*	O
ibufpp	*(*(char))
;	O
if	O
(	O
delimiter	int
==	O
' '	O
||	O
delimiter	int
==	O
'\n'	O
)	O
{	O
set_error_msg	(*(char))->(void)
(	O
"Invalid pattern delimiter"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
!	O
(	O
pat	*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
=	O
get_compiled_pattern	(*(*(char)))->(*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)))
(	O
ibufpp	*(*(char))
)	O
)	O
)	O
return	O
0	int
;	O
if	O
(	O
*	O
*	O
ibufpp	*(*(char))
==	O
delimiter	int
)	O
++	O
(	O
*	O
ibufpp	*(*(char))
)	O
;	O
clear_active_list	()->(void)
(	O
)	O
;	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
search_line_node	(int)->(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
(	O
first_addr	int
)	O
;	O
for	O
(	O
addr	int
=	O
first_addr	int
;	O
addr	int
<=	O
second_addr	int
;	O
++	O
addr	int
,	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
q_forw	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
{	O
char	O
*	O
s	*(char)
=	O
get_sbuf_line	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(*(char))
(	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
;	O
if	O
(	O
!	O
s	*(char)
)	O
return	O
0	int
;	O
if	O
(	O
isbinary	()->(char)
(	O
)	O
)	O
nul_to_newline	(*(char),int)->(void)
(	O
s	*(char)
,	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
len	int
)	O
;	O
if	O
(	O
!	O
regexec	(*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)),*(char),long,array(struct(int,int)),int)->(int)
(	O
pat	*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
,	O
s	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
)	O
==	O
match	char
&&	O
!	O
set_active_node	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(char)
(	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
)	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
static	O
char	O
*	O
extract_subst_template	(*(*(char)),char)->(*(char))
(	O
const	O
char	O
*	O
*	O
ibufpp	*(*(char))
,	O
const	O
char	O
isglobal	char
)	O
{	O
int	O
i	*(int)
=	O
0	int
,	O
n	int
=	O
0	int
;	O
char	O
c	char
;	O
const	O
char	O
delimiter	int
=	O
*	O
*	O
ibufpp	*(*(char))
;	O
++	O
(	O
*	O
ibufpp	*(*(char))
)	O
;	O
if	O
(	O
*	O
*	O
ibufpp	*(*(char))
==	O
'%'	O
&&	O
(	O
*	O
ibufpp	*(*(char))
)	O
[	O
1	int
]	O
==	O
delimiter	int
)	O
{	O
++	O
(	O
*	O
ibufpp	*(*(char))
)	O
;	O
if	O
(	O
!	O
stbuf	*(char)
)	O
set_error_msg	(*(char))->(void)
(	O
"No previous substitution"	*(char)
)	O
;	O
return	O
stbuf	*(char)
;	O
}	O
while	O
(	O
*	O
*	O
ibufpp	*(*(char))
!=	O
delimiter	int
)	O
{	O
if	O
(	O
!	O
resize_buffer	(*(*(char)),*(int),int)->(char)
(	O
&	O
stbuf	*(char)
,	O
&	O
stbufsz	int
,	O
i	*(int)
+	O
2	int
)	O
)	O
return	O
0	int
;	O
c	char
=	O
stbuf	*(char)
[	O
i	*(int)
++	O
]	O
=	O
*	O
(	O
*	O
ibufpp	*(*(char))
)	O
++	O
;	O
if	O
(	O
c	char
==	O
'\n'	O
&&	O
*	O
*	O
ibufpp	*(*(char))
==	O
0	int
)	O
{	O
--	O
i	*(int)
,	O
--	O
(	O
*	O
ibufpp	*(*(char))
)	O
;	O
break	O
;	O
}	O
if	O
(	O
c	char
==	O
'\\'	O
&&	O
(	O
stbuf	*(char)
[	O
i	*(int)
++	O
]	O
=	O
*	O
(	O
*	O
ibufpp	*(*(char))
)	O
++	O
)	O
==	O
'\n'	O
&&	O
!	O
isglobal	char
)	O
{	O
while	O
(	O
(	O
*	O
ibufpp	*(*(char))
=	O
get_tty_line	(*(int))->(*(char))
(	O
&	O
n	int
)	O
)	O
&&	O
(	O
n	int
==	O
0	int
||	O
(	O
n	int
>	O
0	int
&&	O
(	O
*	O
ibufpp	*(*(char))
)	O
[	O
n	int
-	O
1	int
]	O
!=	O
'\n'	O
)	O
)	O
)	O
clearerr	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
!	O
(	O
*	O
ibufpp	*(*(char))
)	O
)	O
return	O
0	int
;	O
}	O
}	O
if	O
(	O
!	O
resize_buffer	(*(*(char)),*(int),int)->(char)
(	O
&	O
stbuf	*(char)
,	O
&	O
stbufsz	int
,	O
i	*(int)
+	O
1	int
)	O
)	O
return	O
0	int
;	O
stbuf	*(char)
[	O
stlen	int
=	O
i	*(int)
]	O
=	O
0	int
;	O
return	O
stbuf	*(char)
;	O
}	O
char	O
extract_subst_tail	(*(*(char)),*(int),*(int),char)->(char)
(	O
const	O
char	O
*	O
*	O
ibufpp	*(*(char))
,	O
int	O
*	O
gflagsp	*(int)
,	O
int	O
*	O
snump	*(int)
,	O
const	O
char	O
isglobal	char
)	O
{	O
const	O
char	O
delimiter	int
=	O
*	O
*	O
ibufpp	*(*(char))
;	O
*	O
gflagsp	*(int)
=	O
*	O
snump	*(int)
=	O
0	int
;	O
if	O
(	O
delimiter	int
==	O
'\n'	O
)	O
{	O
stlen	int
=	O
0	int
;	O
*	O
gflagsp	*(int)
=	O
GPR	int
;	O
return	O
1	int
;	O
}	O
if	O
(	O
!	O
extract_subst_template	(*(*(char)),char)->(*(char))
(	O
ibufpp	*(*(char))
,	O
isglobal	char
)	O
)	O
return	O
0	int
;	O
if	O
(	O
*	O
*	O
ibufpp	*(*(char))
==	O
'\n'	O
)	O
{	O
*	O
gflagsp	*(int)
=	O
GPR	int
;	O
return	O
1	int
;	O
}	O
if	O
(	O
*	O
*	O
ibufpp	*(*(char))
==	O
delimiter	int
)	O
++	O
(	O
*	O
ibufpp	*(*(char))
)	O
;	O
if	O
(	O
*	O
*	O
ibufpp	*(*(char))
>=	O
'1'	O
&&	O
*	O
*	O
ibufpp	*(*(char))
<=	O
'9'	O
)	O
return	O
parse_int	(*(int),*(char),*(*(char)))->(char)
(	O
snump	*(int)
,	O
*	O
ibufpp	*(*(char))
,	O
ibufpp	*(*(char))
)	O
;	O
if	O
(	O
*	O
*	O
ibufpp	*(*(char))
==	O
'g'	O
)	O
{	O
++	O
(	O
*	O
ibufpp	*(*(char))
)	O
;	O
*	O
gflagsp	*(int)
=	O
GSG	int
;	O
return	O
1	int
;	O
}	O
return	O
1	int
;	O
}	O
int	O
get_matching_node_addr	(*(*(char)),char)->(int)
(	O
const	O
char	O
*	O
*	O
ibufpp	*(*(char))
,	O
const	O
char	O
forward	char
)	O
{	O
regex_t	struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
*	O
pat	*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
=	O
get_compiled_pattern	(*(*(char)))->(*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)))
(	O
ibufpp	*(*(char))
)	O
;	O
int	O
addr	int
=	O
current_addr	()->(int)
(	O
)	O
;	O
if	O
(	O
!	O
pat	*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
)	O
return	O
-	O
1	int
;	O
do	O
{	O
addr	int
=	O
(	O
forward	char
?	O
inc_addr	(int)->(int)
(	O
addr	int
)	O
:	O
dec_addr	(int)->(int)
(	O
addr	int
)	O
)	O
;	O
if	O
(	O
addr	int
)	O
{	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
search_line_node	(int)->(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
(	O
addr	int
)	O
;	O
char	O
*	O
s	*(char)
=	O
get_sbuf_line	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(*(char))
(	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
;	O
if	O
(	O
!	O
s	*(char)
)	O
return	O
-	O
1	int
;	O
if	O
(	O
isbinary	()->(char)
(	O
)	O
)	O
nul_to_newline	(*(char),int)->(void)
(	O
s	*(char)
,	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
len	int
)	O
;	O
if	O
(	O
!	O
regexec	(*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)),*(char),long,array(struct(int,int)),int)->(int)
(	O
pat	*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
,	O
s	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
)	O
)	O
return	O
addr	int
;	O
}	O
}	O
while	O
(	O
addr	int
!=	O
current_addr	()->(int)
(	O
)	O
)	O
;	O
set_error_msg	(*(char))->(void)
(	O
"No match"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
char	O
new_compiled_pattern	(*(*(char)))->(char)
(	O
const	O
char	O
*	O
*	O
ibufpp	*(*(char))
)	O
{	O
regex_t	struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
*	O
tpat	*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
=	O
global_pat	*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
;	O
disable_interrupts	()->(void)
(	O
)	O
;	O
tpat	*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
=	O
get_compiled_pattern	(*(*(char)))->(*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)))
(	O
ibufpp	*(*(char))
)	O
;	O
if	O
(	O
!	O
tpat	*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
)	O
{	O
enable_interrupts	()->(void)
(	O
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
tpat	*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
!=	O
global_pat	*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
)	O
{	O
if	O
(	O
global_pat	*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
)	O
{	O
regfree	(*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)))->(void)
(	O
global_pat	*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
)	O
;	O
free	(*(void))->(void)
(	O
global_pat	*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
)	O
;	O
}	O
global_pat	*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
=	O
tpat	*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
;	O
patlock	char
=	O
1	int
;	O
}	O
enable_interrupts	()->(void)
(	O
)	O
;	O
return	O
1	int
;	O
}	O
static	O
int	O
apply_subst_template	(*(char),*(struct(int,int)),int,int)->(int)
(	O
const	O
char	O
*	O
boln	*(char)
,	O
const	O
regmatch_t	struct(int,int)
*	O
rm	*(struct(int,int))
,	O
int	O
off	int
,	O
const	O
int	O
re_nsub	long
)	O
{	O
const	O
char	O
*	O
sub	*(char)
=	O
stbuf	*(char)
;	O
for	O
(	O
;	O
sub	*(char)
-	O
stbuf	*(char)
<	O
stlen	int
;	O
++	O
sub	*(char)
)	O
{	O
int	O
n	int
;	O
if	O
(	O
*	O
sub	*(char)
==	O
'&'	O
)	O
{	O
int	O
j	int
=	O
rm	*(struct(int,int))
[	O
0	int
]	O
.	O
rm_so	int
;	O
int	O
k	int
=	O
rm	*(struct(int,int))
[	O
0	int
]	O
.	O
rm_eo	int
;	O
if	O
(	O
!	O
resize_buffer	(*(*(char)),*(int),int)->(char)
(	O
&	O
rbuf	*(char)
,	O
&	O
rbufsz	int
,	O
off	int
+	O
k	int
-	O
j	int
)	O
)	O
return	O
-	O
1	int
;	O
while	O
(	O
j	int
<	O
k	int
)	O
rbuf	*(char)
[	O
off	int
++	O
]	O
=	O
boln	*(char)
[	O
j	int
++	O
]	O
;	O
}	O
else	O
if	O
(	O
*	O
sub	*(char)
==	O
'\\'	O
&&	O
*	O
++	O
sub	*(char)
>=	O
'1'	O
&&	O
*	O
sub	*(char)
<=	O
'9'	O
&&	O
(	O
n	int
=	O
*	O
sub	*(char)
-	O
'0'	O
)	O
<=	O
re_nsub	long
)	O
{	O
int	O
j	int
=	O
rm	*(struct(int,int))
[	O
n	int
]	O
.	O
rm_so	int
;	O
int	O
k	int
=	O
rm	*(struct(int,int))
[	O
n	int
]	O
.	O
rm_eo	int
;	O
if	O
(	O
!	O
resize_buffer	(*(*(char)),*(int),int)->(char)
(	O
&	O
rbuf	*(char)
,	O
&	O
rbufsz	int
,	O
off	int
+	O
k	int
-	O
j	int
)	O
)	O
return	O
-	O
1	int
;	O
while	O
(	O
j	int
<	O
k	int
)	O
rbuf	*(char)
[	O
off	int
++	O
]	O
=	O
boln	*(char)
[	O
j	int
++	O
]	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
resize_buffer	(*(*(char)),*(int),int)->(char)
(	O
&	O
rbuf	*(char)
,	O
&	O
rbufsz	int
,	O
off	int
+	O
1	int
)	O
)	O
return	O
-	O
1	int
;	O
rbuf	*(char)
[	O
off	int
++	O
]	O
=	O
*	O
sub	*(char)
;	O
}	O
}	O
if	O
(	O
!	O
resize_buffer	(*(*(char)),*(int),int)->(char)
(	O
&	O
rbuf	*(char)
,	O
&	O
rbufsz	int
,	O
off	int
+	O
1	int
)	O
)	O
return	O
-	O
1	int
;	O
rbuf	*(char)
[	O
off	int
]	O
=	O
0	int
;	O
return	O
off	int
;	O
}	O
static	O
int	O
replace_matching_text	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),int,int)->(int)
(	O
const	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
,	O
const	O
int	O
gflags	int
,	O
const	O
int	O
snum	int
)	O
{	O
const	O
int	O
se_max	int
=	O
30	int
;	O
regmatch_t	struct(int,int)
rm	*(struct(int,int))
[	O
se_max	int
]	O
;	O
char	O
*	O
txt	*(char)
=	O
get_sbuf_line	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(*(char))
(	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
;	O
char	O
*	O
eot	*(char)
;	O
int	O
i	*(int)
=	O
0	int
,	O
off	int
=	O
0	int
;	O
char	O
changed	char
=	O
0	int
;	O
if	O
(	O
!	O
txt	*(char)
)	O
return	O
-	O
1	int
;	O
if	O
(	O
isbinary	()->(char)
(	O
)	O
)	O
nul_to_newline	(*(char),int)->(void)
(	O
txt	*(char)
,	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
len	int
)	O
;	O
eot	*(char)
=	O
txt	*(char)
+	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
len	int
;	O
if	O
(	O
!	O
regexec	(*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)),*(char),long,array(struct(int,int)),int)->(int)
(	O
global_pat	*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
,	O
txt	*(char)
,	O
se_max	int
,	O
rm	*(struct(int,int))
,	O
0	int
)	O
)	O
{	O
int	O
matchno	int
=	O
0	int
;	O
do	O
{	O
if	O
(	O
!	O
snum	int
||	O
snum	int
==	O
++	O
matchno	int
)	O
{	O
changed	char
=	O
1	int
;	O
i	*(int)
=	O
rm	*(struct(int,int))
[	O
0	int
]	O
.	O
rm_so	int
;	O
if	O
(	O
!	O
resize_buffer	(*(*(char)),*(int),int)->(char)
(	O
&	O
rbuf	*(char)
,	O
&	O
rbufsz	int
,	O
off	int
+	O
i	*(int)
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
isbinary	()->(char)
(	O
)	O
)	O
newline_to_nul	(*(char),int)->(void)
(	O
txt	*(char)
,	O
rm	*(struct(int,int))
[	O
0	int
]	O
.	O
rm_eo	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
rbuf	*(char)
+	O
off	int
,	O
txt	*(char)
,	O
i	*(int)
)	O
;	O
off	int
+=	O
i	*(int)
;	O
off	int
=	O
apply_subst_template	(*(char),*(struct(int,int)),int,int)->(int)
(	O
txt	*(char)
,	O
rm	*(struct(int,int))
,	O
off	int
,	O
global_pat	*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
->	O
re_nsub	long
)	O
;	O
if	O
(	O
off	int
<	O
0	int
)	O
return	O
-	O
1	int
;	O
}	O
else	O
{	O
i	*(int)
=	O
rm	*(struct(int,int))
[	O
0	int
]	O
.	O
rm_eo	int
;	O
if	O
(	O
!	O
resize_buffer	(*(*(char)),*(int),int)->(char)
(	O
&	O
rbuf	*(char)
,	O
&	O
rbufsz	int
,	O
off	int
+	O
i	*(int)
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
isbinary	()->(char)
(	O
)	O
)	O
newline_to_nul	(*(char),int)->(void)
(	O
txt	*(char)
,	O
i	*(int)
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
rbuf	*(char)
+	O
off	int
,	O
txt	*(char)
,	O
i	*(int)
)	O
;	O
off	int
+=	O
i	*(int)
;	O
}	O
txt	*(char)
+=	O
rm	*(struct(int,int))
[	O
0	int
]	O
.	O
rm_eo	int
;	O
}	O
while	O
(	O
*	O
txt	*(char)
&&	O
(	O
!	O
changed	char
||	O
(	O
(	O
gflags	int
&	O
GSG	int
)	O
&&	O
rm	*(struct(int,int))
[	O
0	int
]	O
.	O
rm_eo	int
)	O
)	O
&&	O
!	O
regexec	(*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)),*(char),long,array(struct(int,int)),int)->(int)
(	O
global_pat	*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
,	O
txt	*(char)
,	O
se_max	int
,	O
rm	*(struct(int,int))
,	O
REG_NOTBOL	int
)	O
)	O
;	O
i	*(int)
=	O
eot	*(char)
-	O
txt	*(char)
;	O
if	O
(	O
!	O
resize_buffer	(*(*(char)),*(int),int)->(char)
(	O
&	O
rbuf	*(char)
,	O
&	O
rbufsz	int
,	O
off	int
+	O
i	*(int)
+	O
2	int
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
i	*(int)
>	O
0	int
&&	O
!	O
rm	*(struct(int,int))
[	O
0	int
]	O
.	O
rm_eo	int
&&	O
(	O
gflags	int
&	O
GSG	int
)	O
)	O
{	O
set_error_msg	(*(char))->(void)
(	O
"Infinite substitution loop"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
isbinary	()->(char)
(	O
)	O
)	O
newline_to_nul	(*(char),int)->(void)
(	O
txt	*(char)
,	O
i	*(int)
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
rbuf	*(char)
+	O
off	int
,	O
txt	*(char)
,	O
i	*(int)
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
rbuf	*(char)
+	O
off	int
+	O
i	*(int)
,	O
"\n"	*(char)
,	O
2	int
)	O
;	O
}	O
return	O
(	O
changed	char
?	O
off	int
+	O
i	*(int)
+	O
1	int
:	O
0	int
)	O
;	O
}	O
char	O
search_and_replace	(int,int,int,int,char)->(char)
(	O
const	O
int	O
first_addr	int
,	O
const	O
int	O
second_addr	int
,	O
const	O
int	O
gflags	int
,	O
const	O
int	O
snum	int
,	O
const	O
char	O
isglobal	char
)	O
{	O
int	O
lc	int
;	O
char	O
match_found	char
=	O
0	int
;	O
set_current_addr	(int)->(void)
(	O
first_addr	int
-	O
1	int
)	O
;	O
for	O
(	O
lc	int
=	O
0	int
;	O
lc	int
<=	O
second_addr	int
-	O
first_addr	int
;	O
++	O
lc	int
)	O
{	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
search_line_node	(int)->(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
(	O
inc_current_addr	()->(int)
(	O
)	O
)	O
;	O
int	O
len	int
=	O
replace_matching_text	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),int,int)->(int)
(	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
,	O
gflags	int
,	O
snum	int
)	O
;	O
if	O
(	O
len	int
<	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
len	int
)	O
{	O
const	O
char	O
*	O
txt	*(char)
=	O
rbuf	*(char)
;	O
const	O
char	O
*	O
eot	*(char)
=	O
rbuf	*(char)
+	O
len	int
;	O
undo_t	struct(enum(int,int,int,int),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
*	O
up	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
=	O
0	int
;	O
disable_interrupts	()->(void)
(	O
)	O
;	O
if	O
(	O
!	O
delete_lines	(int,int,char)->(char)
(	O
current_addr	()->(int)
(	O
)	O
,	O
current_addr	()->(int)
(	O
)	O
,	O
isglobal	char
)	O
)	O
return	O
0	int
;	O
do	O
{	O
txt	*(char)
=	O
put_sbuf_line	(*(char),int)->(*(char))
(	O
txt	*(char)
,	O
current_addr	()->(int)
(	O
)	O
)	O
;	O
if	O
(	O
!	O
txt	*(char)
)	O
{	O
enable_interrupts	()->(void)
(	O
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
up	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
)	O
up	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
->	O
tail	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
search_line_node	(int)->(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
(	O
current_addr	()->(int)
(	O
)	O
)	O
;	O
else	O
if	O
(	O
!	O
(	O
up	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
=	O
push_undo_atom	(int,int,int)->(*(struct(enum(int,int,int,int),*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)))))
(	O
UADD	int
,	O
-	O
1	int
,	O
-	O
1	int
)	O
)	O
)	O
{	O
enable_interrupts	()->(void)
(	O
)	O
;	O
return	O
0	int
;	O
}	O
}	O
while	O
(	O
txt	*(char)
!=	O
eot	*(char)
)	O
;	O
enable_interrupts	()->(void)
(	O
)	O
;	O
match_found	char
=	O
1	int
;	O
}	O
}	O
if	O
(	O
!	O
match_found	char
&&	O
!	O
(	O
gflags	int
&	O
GLB	int
)	O
)	O
{	O
set_error_msg	(*(char))->(void)
(	O
"No match"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
