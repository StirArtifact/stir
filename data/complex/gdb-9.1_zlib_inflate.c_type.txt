local	O
int	O
inflateStateCheck	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))->(int)
OF	O
(	O
(	O
z_streamp	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
)	O
)	O
;	O
local	O
void	O
fixedtables	(*(struct(*(struct(*`,int,long,*`,int,long,*`,*`,*`,*`,*`,int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*`,int,int,*`,int,*`,int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)))->(void)
OF	O
(	O
(	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
state	*(struct)
)	O
)	O
;	O
local	O
int	O
updatewindow	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)),*(char),int)->(int)
OF	O
(	O
(	O
z_streamp	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
,	O
const	O
unsigned	O
char	O
FAR	O
*	O
end	*(char)
,	O
unsigned	O
copy	int
)	O
)	O
;	O
local	O
unsigned	O
syncsearch	(*(int),*(char),int)->(int)
OF	O
(	O
(	O
unsigned	O
FAR	O
*	O
have	int
,	O
const	O
unsigned	O
char	O
FAR	O
*	O
buf	*(void)
,	O
unsigned	O
len	int
)	O
)	O
;	O
local	O
int	O
inflateStateCheck	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
)	O
z_streamp	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
;	O
{	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
state	*(struct)
;	O
if	O
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
==	O
Z_NULL	int
||	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
zalloc	*((*(void),int,int)->(*(void)))
==	O
(	O
alloc_func	*((*(void),int,int)->(*(void)))
)	O
0	int
||	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
zfree	*((*(void),*(void))->(void))
==	O
(	O
free_func	*((*(void),*(void))->(void))
)	O
0	int
)	O
return	O
1	int
;	O
state	*(struct)
=	O
(	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
)	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
state	*(struct)
;	O
if	O
(	O
state	*(struct)
==	O
Z_NULL	int
||	O
state	*(struct)
->	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
!=	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
||	O
state	*(struct)
->	O
mode	*(char)
<	O
HEAD	int
||	O
state	*(struct)
->	O
mode	*(char)
>	O
SYNC	int
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
ZEXPORT	O
inflateResetKeep	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
)	O
z_streamp	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
;	O
{	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
state	*(struct)
;	O
if	O
(	O
inflateStateCheck	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
)	O
)	O
return	O
Z_STREAM_ERROR	O
;	O
state	*(struct)
=	O
(	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
)	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
state	*(struct)
;	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
total_in	long
=	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
total_out	long
=	O
state	*(struct)
->	O
total	long
=	O
0	int
;	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
msg	*(char)
=	O
Z_NULL	int
;	O
if	O
(	O
state	*(struct)
->	O
wrap	int
)	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
adler	long
=	O
state	*(struct)
->	O
wrap	int
&	O
1	int
;	O
state	*(struct)
->	O
mode	*(char)
=	O
HEAD	int
;	O
state	*(struct)
->	O
last	int
=	O
0	int
;	O
state	*(struct)
->	O
havedict	int
=	O
0	int
;	O
state	*(struct)
->	O
dmax	int
=	O
32768U	int
;	O
state	*(struct)
->	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
=	O
Z_NULL	int
;	O
state	*(struct)
->	O
hold	long
=	O
0	int
;	O
state	*(struct)
->	O
bits	*(int)
=	O
0	int
;	O
state	*(struct)
->	O
lencode	*(struct(char,char,short))
=	O
state	*(struct)
->	O
distcode	*(struct(char,char,short))
=	O
state	*(struct)
->	O
next	*(char)
=	O
state	*(struct)
->	O
codes	int
;	O
state	*(struct)
->	O
sane	int
=	O
1	int
;	O
state	*(struct)
->	O
back	int
=	O
-	O
1	int
;	O
Tracev	O
(	O
(	O
stderr	O
,	O
"inflate: reset\n"	*(char)
)	O
)	O
;	O
return	O
Z_OK	int
;	O
}	O
int	O
ZEXPORT	O
inflateReset	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
)	O
z_streamp	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
;	O
{	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
state	*(struct)
;	O
if	O
(	O
inflateStateCheck	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
)	O
)	O
return	O
Z_STREAM_ERROR	O
;	O
state	*(struct)
=	O
(	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
)	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
state	*(struct)
;	O
state	*(struct)
->	O
wsize	int
=	O
0	int
;	O
state	*(struct)
->	O
whave	int
=	O
0	int
;	O
state	*(struct)
->	O
wnext	int
=	O
0	int
;	O
return	O
inflateResetKeep	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
)	O
;	O
}	O
int	O
ZEXPORT	O
inflateReset2	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)),int)->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
,	O
windowBits	int
)	O
z_streamp	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
;	O
int	O
windowBits	int
;	O
{	O
int	O
wrap	int
;	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
state	*(struct)
;	O
if	O
(	O
inflateStateCheck	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
)	O
)	O
return	O
Z_STREAM_ERROR	O
;	O
state	*(struct)
=	O
(	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
)	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
state	*(struct)
;	O
if	O
(	O
windowBits	int
<	O
0	int
)	O
{	O
wrap	int
=	O
0	int
;	O
windowBits	int
=	O
-	O
windowBits	int
;	O
}	O
else	O
{	O
wrap	int
=	O
(	O
windowBits	int
>>	O
4	int
)	O
+	O
5	int
;	O
if	O
(	O
windowBits	int
<	O
48	int
)	O
windowBits	int
&=	O
15	int
;	O
}	O
if	O
(	O
windowBits	int
&&	O
(	O
windowBits	int
<	O
8	int
||	O
windowBits	int
>	O
15	int
)	O
)	O
return	O
Z_STREAM_ERROR	O
;	O
if	O
(	O
state	*(struct)
->	O
window	*(char)
!=	O
Z_NULL	int
&&	O
state	*(struct)
->	O
wbits	int
!=	O
(	O
unsigned	O
)	O
windowBits	int
)	O
{	O
ZFREE	O
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
,	O
state	*(struct)
->	O
window	*(char)
)	O
;	O
state	*(struct)
->	O
window	*(char)
=	O
Z_NULL	int
;	O
}	O
state	*(struct)
->	O
wrap	int
=	O
wrap	int
;	O
state	*(struct)
->	O
wbits	int
=	O
(	O
unsigned	O
)	O
windowBits	int
;	O
return	O
inflateReset	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
)	O
;	O
}	O
int	O
ZEXPORT	O
inflateInit2_	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)),int,*(char),int)->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
,	O
windowBits	int
,	O
version	*(char)
,	O
stream_size	int
)	O
z_streamp	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
;	O
int	O
windowBits	int
;	O
const	O
char	O
*	O
version	*(char)
;	O
int	O
stream_size	int
;	O
{	O
int	O
ret	int
;	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
state	*(struct)
;	O
if	O
(	O
version	*(char)
==	O
Z_NULL	int
||	O
version	*(char)
[	O
0	int
]	O
!=	O
ZLIB_VERSION	*(char)
[	O
0	int
]	O
||	O
stream_size	int
!=	O
(	O
int	O
)	O
(	O
sizeof	O
(	O
z_stream	struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)
)	O
)	O
)	O
return	O
Z_VERSION_ERROR	O
;	O
if	O
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
==	O
Z_NULL	int
)	O
return	O
Z_STREAM_ERROR	O
;	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
msg	*(char)
=	O
Z_NULL	int
;	O
if	O
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
zalloc	*((*(void),int,int)->(*(void)))
==	O
(	O
alloc_func	*((*(void),int,int)->(*(void)))
)	O
0	int
)	O
{	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
zalloc	*((*(void),int,int)->(*(void)))
=	O
zcalloc	(*(void),int,int)->(*(void))
;	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
opaque	*(void)
=	O
(	O
voidpf	*(void)
)	O
0	int
;	O
}	O
if	O
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
zfree	*((*(void),*(void))->(void))
==	O
(	O
free_func	*((*(void),*(void))->(void))
)	O
0	int
)	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
zfree	*((*(void),*(void))->(void))
=	O
zcfree	(*(void),*(void))->(void)
;	O
state	*(struct)
=	O
(	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
)	O
ZALLOC	O
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
,	O
1	int
,	O
sizeof	O
(	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
)	O
)	O
;	O
if	O
(	O
state	*(struct)
==	O
Z_NULL	int
)	O
return	O
Z_MEM_ERROR	O
;	O
Tracev	O
(	O
(	O
stderr	O
,	O
"inflate: allocated\n"	*(char)
)	O
)	O
;	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
state	*(struct)
=	O
(	O
struct	O
internal_state	O
FAR	O
*	O
)	O
state	*(struct)
;	O
state	*(struct)
->	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
=	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
;	O
state	*(struct)
->	O
window	*(char)
=	O
Z_NULL	int
;	O
state	*(struct)
->	O
mode	*(char)
=	O
HEAD	int
;	O
ret	int
=	O
inflateReset2	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)),int)->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
,	O
windowBits	int
)	O
;	O
if	O
(	O
ret	int
!=	O
Z_OK	int
)	O
{	O
ZFREE	O
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
,	O
state	*(struct)
)	O
;	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
state	*(struct)
=	O
Z_NULL	int
;	O
}	O
return	O
ret	int
;	O
}	O
int	O
ZEXPORT	O
inflateInit_	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)),*(char),int)->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
,	O
version	*(char)
,	O
stream_size	int
)	O
z_streamp	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
;	O
const	O
char	O
*	O
version	*(char)
;	O
int	O
stream_size	int
;	O
{	O
return	O
inflateInit2_	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)),int,*(char),int)->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
,	O
DEF_WBITS	O
,	O
version	*(char)
,	O
stream_size	int
)	O
;	O
}	O
int	O
ZEXPORT	O
inflatePrime	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)),int,int)->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
,	O
bits	*(int)
,	O
value	int
)	O
z_streamp	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
;	O
int	O
bits	*(int)
;	O
int	O
value	int
;	O
{	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
state	*(struct)
;	O
if	O
(	O
inflateStateCheck	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
)	O
)	O
return	O
Z_STREAM_ERROR	O
;	O
state	*(struct)
=	O
(	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
)	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
state	*(struct)
;	O
if	O
(	O
bits	*(int)
<	O
0	int
)	O
{	O
state	*(struct)
->	O
hold	long
=	O
0	int
;	O
state	*(struct)
->	O
bits	*(int)
=	O
0	int
;	O
return	O
Z_OK	int
;	O
}	O
if	O
(	O
bits	*(int)
>	O
16	int
||	O
state	*(struct)
->	O
bits	*(int)
+	O
(	O
uInt	int
)	O
bits	*(int)
>	O
32	int
)	O
return	O
Z_STREAM_ERROR	O
;	O
value	int
&=	O
(	O
1L	int
<<	O
bits	*(int)
)	O
-	O
1	int
;	O
state	*(struct)
->	O
hold	long
+=	O
(	O
unsigned	O
)	O
value	int
<<	O
state	*(struct)
->	O
bits	*(int)
;	O
state	*(struct)
->	O
bits	*(int)
+=	O
(	O
uInt	int
)	O
bits	*(int)
;	O
return	O
Z_OK	int
;	O
}	O
local	O
void	O
fixedtables	(*(struct(*(struct(*`,int,long,*`,int,long,*`,*`,*`,*`,*`,int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*`,int,int,*`,int,*`,int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)))->(void)
(	O
state	*(struct)
)	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
state	*(struct)
;	O
{	O
state	*(struct)
->	O
lencode	*(struct(char,char,short))
=	O
lenfix	array(struct(char,char,short))
;	O
state	*(struct)
->	O
lenbits	int
=	O
9	int
;	O
state	*(struct)
->	O
distcode	*(struct(char,char,short))
=	O
distfix	array(struct(char,char,short))
;	O
state	*(struct)
->	O
distbits	int
=	O
5	int
;	O
}	O
local	O
int	O
updatewindow	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)),*(char),int)->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
,	O
end	*(char)
,	O
copy	int
)	O
z_streamp	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
;	O
const	O
Bytef	char
*	O
end	*(char)
;	O
unsigned	O
copy	int
;	O
{	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
state	*(struct)
;	O
unsigned	O
dist	int
;	O
state	*(struct)
=	O
(	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
)	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
state	*(struct)
;	O
if	O
(	O
state	*(struct)
->	O
window	*(char)
==	O
Z_NULL	int
)	O
{	O
state	*(struct)
->	O
window	*(char)
=	O
(	O
unsigned	O
char	O
FAR	O
*	O
)	O
ZALLOC	O
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
,	O
1U	int
<<	O
state	*(struct)
->	O
wbits	int
,	O
sizeof	O
(	O
unsigned	O
char	O
)	O
)	O
;	O
if	O
(	O
state	*(struct)
->	O
window	*(char)
==	O
Z_NULL	int
)	O
return	O
1	int
;	O
}	O
if	O
(	O
state	*(struct)
->	O
wsize	int
==	O
0	int
)	O
{	O
state	*(struct)
->	O
wsize	int
=	O
1U	int
<<	O
state	*(struct)
->	O
wbits	int
;	O
state	*(struct)
->	O
wnext	int
=	O
0	int
;	O
state	*(struct)
->	O
whave	int
=	O
0	int
;	O
}	O
if	O
(	O
copy	int
>=	O
state	*(struct)
->	O
wsize	int
)	O
{	O
zmemcpy	O
(	O
state	*(struct)
->	O
window	*(char)
,	O
end	*(char)
-	O
state	*(struct)
->	O
wsize	int
,	O
state	*(struct)
->	O
wsize	int
)	O
;	O
state	*(struct)
->	O
wnext	int
=	O
0	int
;	O
state	*(struct)
->	O
whave	int
=	O
state	*(struct)
->	O
wsize	int
;	O
}	O
else	O
{	O
dist	int
=	O
state	*(struct)
->	O
wsize	int
-	O
state	*(struct)
->	O
wnext	int
;	O
if	O
(	O
dist	int
>	O
copy	int
)	O
dist	int
=	O
copy	int
;	O
zmemcpy	O
(	O
state	*(struct)
->	O
window	*(char)
+	O
state	*(struct)
->	O
wnext	int
,	O
end	*(char)
-	O
copy	int
,	O
dist	int
)	O
;	O
copy	int
-=	O
dist	int
;	O
if	O
(	O
copy	int
)	O
{	O
zmemcpy	O
(	O
state	*(struct)
->	O
window	*(char)
,	O
end	*(char)
-	O
copy	int
,	O
copy	int
)	O
;	O
state	*(struct)
->	O
wnext	int
=	O
copy	int
;	O
state	*(struct)
->	O
whave	int
=	O
state	*(struct)
->	O
wsize	int
;	O
}	O
else	O
{	O
state	*(struct)
->	O
wnext	int
+=	O
dist	int
;	O
if	O
(	O
state	*(struct)
->	O
wnext	int
==	O
state	*(struct)
->	O
wsize	int
)	O
state	*(struct)
->	O
wnext	int
=	O
0	int
;	O
if	O
(	O
state	*(struct)
->	O
whave	int
<	O
state	*(struct)
->	O
wsize	int
)	O
state	*(struct)
->	O
whave	int
+=	O
dist	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
ZEXPORT	O
inflate	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)),int)->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
,	O
flush	int
)	O
z_streamp	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
;	O
int	O
flush	int
;	O
{	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
state	*(struct)
;	O
z_const	O
unsigned	O
char	O
FAR	O
*	O
next	*(char)
;	O
unsigned	O
char	O
FAR	O
*	O
put	*(char)
;	O
unsigned	O
have	int
,	O
left	int
;	O
unsigned	O
long	O
hold	long
;	O
unsigned	O
bits	*(int)
;	O
unsigned	O
in	*((*(void),*(*(char)))->(int))
,	O
out	*((*(void),*(char),int)->(int))
;	O
unsigned	O
copy	int
;	O
unsigned	O
char	O
FAR	O
*	O
from	*(char)
;	O
code	struct(char,char,short)
here	struct(char,char,short)
;	O
code	struct(char,char,short)
last	int
;	O
unsigned	O
len	int
;	O
int	O
ret	int
;	O
unsigned	O
char	O
hbuf	array(char)
[	O
4	int
]	O
;	O
static	O
const	O
unsigned	O
short	O
order	array(short)
[	O
19	int
]	O
=	O
{	O
16	int
,	O
17	int
,	O
18	int
,	O
0	int
,	O
8	int
,	O
7	int
,	O
9	int
,	O
6	int
,	O
10	int
,	O
5	int
,	O
11	int
,	O
4	int
,	O
12	int
,	O
3	int
,	O
13	int
,	O
2	int
,	O
14	int
,	O
1	int
,	O
15	int
}	O
;	O
if	O
(	O
inflateStateCheck	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
)	O
||	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
next_out	*(char)
==	O
Z_NULL	int
||	O
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
next_in	*(char)
==	O
Z_NULL	int
&&	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
avail_in	int
!=	O
0	int
)	O
)	O
return	O
Z_STREAM_ERROR	O
;	O
state	*(struct)
=	O
(	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
)	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
state	*(struct)
;	O
if	O
(	O
state	*(struct)
->	O
mode	*(char)
==	O
TYPE	int
)	O
state	*(struct)
->	O
mode	*(char)
=	O
TYPEDO	int
;	O
LOAD	O
(	O
)	O
;	O
in	*((*(void),*(*(char)))->(int))
=	O
have	int
;	O
out	*((*(void),*(char),int)->(int))
=	O
left	int
;	O
ret	int
=	O
Z_OK	int
;	O
for	O
(	O
;	O
;	O
)	O
switch	O
(	O
state	*(struct)
->	O
mode	*(char)
)	O
{	O
case	O
HEAD	int
:	O
if	O
(	O
state	*(struct)
->	O
wrap	int
==	O
0	int
)	O
{	O
state	*(struct)
->	O
mode	*(char)
=	O
TYPEDO	int
;	O
break	O
;	O
}	O
NEEDBITS	O
(	O
16	int
)	O
;	O
if	O
(	O
(	O
state	*(struct)
->	O
wrap	int
&	O
2	int
)	O
&&	O
hold	long
==	O
0x8b1f	int
)	O
{	O
if	O
(	O
state	*(struct)
->	O
wbits	int
==	O
0	int
)	O
state	*(struct)
->	O
wbits	int
=	O
15	int
;	O
state	*(struct)
->	O
check	long
=	O
crc32	(long,*(char),int)->(long)
(	O
0L	int
,	O
Z_NULL	int
,	O
0	int
)	O
;	O
CRC2	O
(	O
state	*(struct)
->	O
check	long
,	O
hold	long
)	O
;	O
INITBITS	O
(	O
)	O
;	O
state	*(struct)
->	O
mode	*(char)
=	O
FLAGS	int
;	O
break	O
;	O
}	O
state	*(struct)
->	O
flags	int
=	O
0	int
;	O
if	O
(	O
state	*(struct)
->	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
!=	O
Z_NULL	int
)	O
state	*(struct)
->	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
->	O
done	int
=	O
-	O
1	int
;	O
if	O
(	O
!	O
(	O
state	*(struct)
->	O
wrap	int
&	O
1	int
)	O
||	O
(	O
(	O
BITS	O
(	O
8	int
)	O
<<	O
8	int
)	O
+	O
(	O
hold	long
>>	O
8	int
)	O
)	O
%	O
31	int
)	O
{	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
msg	*(char)
=	O
(	O
char	O
*	O
)	O
"incorrect header check"	*(char)
;	O
state	*(struct)
->	O
mode	*(char)
=	O
BAD	int
;	O
break	O
;	O
}	O
if	O
(	O
BITS	O
(	O
4	int
)	O
!=	O
Z_DEFLATED	int
)	O
{	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
msg	*(char)
=	O
(	O
char	O
*	O
)	O
"unknown compression method"	*(char)
;	O
state	*(struct)
->	O
mode	*(char)
=	O
BAD	int
;	O
break	O
;	O
}	O
DROPBITS	O
(	O
4	int
)	O
;	O
len	int
=	O
BITS	O
(	O
4	int
)	O
+	O
8	int
;	O
if	O
(	O
state	*(struct)
->	O
wbits	int
==	O
0	int
)	O
state	*(struct)
->	O
wbits	int
=	O
len	int
;	O
if	O
(	O
len	int
>	O
15	int
||	O
len	int
>	O
state	*(struct)
->	O
wbits	int
)	O
{	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
msg	*(char)
=	O
(	O
char	O
*	O
)	O
"invalid window size"	*(char)
;	O
state	*(struct)
->	O
mode	*(char)
=	O
BAD	int
;	O
break	O
;	O
}	O
state	*(struct)
->	O
dmax	int
=	O
1U	int
<<	O
len	int
;	O
Tracev	O
(	O
(	O
stderr	O
,	O
"inflate:   zlib header ok\n"	*(char)
)	O
)	O
;	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
adler	long
=	O
state	*(struct)
->	O
check	long
=	O
adler32	(long,*(char),int)->(long)
(	O
0L	int
,	O
Z_NULL	int
,	O
0	int
)	O
;	O
state	*(struct)
->	O
mode	*(char)
=	O
hold	long
&	O
0x200	int
?	O
DICTID	int
:	O
TYPE	int
;	O
INITBITS	O
(	O
)	O
;	O
break	O
;	O
case	O
FLAGS	int
:	O
NEEDBITS	O
(	O
16	int
)	O
;	O
state	*(struct)
->	O
flags	int
=	O
(	O
int	O
)	O
(	O
hold	long
)	O
;	O
if	O
(	O
(	O
state	*(struct)
->	O
flags	int
&	O
0xff	int
)	O
!=	O
Z_DEFLATED	int
)	O
{	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
msg	*(char)
=	O
(	O
char	O
*	O
)	O
"unknown compression method"	*(char)
;	O
state	*(struct)
->	O
mode	*(char)
=	O
BAD	int
;	O
break	O
;	O
}	O
if	O
(	O
state	*(struct)
->	O
flags	int
&	O
0xe000	int
)	O
{	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
msg	*(char)
=	O
(	O
char	O
*	O
)	O
"unknown header flags set"	*(char)
;	O
state	*(struct)
->	O
mode	*(char)
=	O
BAD	int
;	O
break	O
;	O
}	O
if	O
(	O
state	*(struct)
->	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
!=	O
Z_NULL	int
)	O
state	*(struct)
->	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
->	O
text	int
=	O
(	O
int	O
)	O
(	O
(	O
hold	long
>>	O
8	int
)	O
&	O
1	int
)	O
;	O
if	O
(	O
(	O
state	*(struct)
->	O
flags	int
&	O
0x0200	int
)	O
&&	O
(	O
state	*(struct)
->	O
wrap	int
&	O
4	int
)	O
)	O
CRC2	O
(	O
state	*(struct)
->	O
check	long
,	O
hold	long
)	O
;	O
INITBITS	O
(	O
)	O
;	O
state	*(struct)
->	O
mode	*(char)
=	O
TIME	int
;	O
case	O
TIME	int
:	O
NEEDBITS	O
(	O
32	int
)	O
;	O
if	O
(	O
state	*(struct)
->	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
!=	O
Z_NULL	int
)	O
state	*(struct)
->	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
->	O
time	long
=	O
hold	long
;	O
if	O
(	O
(	O
state	*(struct)
->	O
flags	int
&	O
0x0200	int
)	O
&&	O
(	O
state	*(struct)
->	O
wrap	int
&	O
4	int
)	O
)	O
CRC4	O
(	O
state	*(struct)
->	O
check	long
,	O
hold	long
)	O
;	O
INITBITS	O
(	O
)	O
;	O
state	*(struct)
->	O
mode	*(char)
=	O
OS	int
;	O
case	O
OS	int
:	O
NEEDBITS	O
(	O
16	int
)	O
;	O
if	O
(	O
state	*(struct)
->	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
!=	O
Z_NULL	int
)	O
{	O
state	*(struct)
->	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
->	O
xflags	int
=	O
(	O
int	O
)	O
(	O
hold	long
&	O
0xff	int
)	O
;	O
state	*(struct)
->	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
->	O
os	int
=	O
(	O
int	O
)	O
(	O
hold	long
>>	O
8	int
)	O
;	O
}	O
if	O
(	O
(	O
state	*(struct)
->	O
flags	int
&	O
0x0200	int
)	O
&&	O
(	O
state	*(struct)
->	O
wrap	int
&	O
4	int
)	O
)	O
CRC2	O
(	O
state	*(struct)
->	O
check	long
,	O
hold	long
)	O
;	O
INITBITS	O
(	O
)	O
;	O
state	*(struct)
->	O
mode	*(char)
=	O
EXLEN	int
;	O
case	O
EXLEN	int
:	O
if	O
(	O
state	*(struct)
->	O
flags	int
&	O
0x0400	int
)	O
{	O
NEEDBITS	O
(	O
16	int
)	O
;	O
state	*(struct)
->	O
length	int
=	O
(	O
unsigned	O
)	O
(	O
hold	long
)	O
;	O
if	O
(	O
state	*(struct)
->	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
!=	O
Z_NULL	int
)	O
state	*(struct)
->	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
->	O
extra_len	int
=	O
(	O
unsigned	O
)	O
hold	long
;	O
if	O
(	O
(	O
state	*(struct)
->	O
flags	int
&	O
0x0200	int
)	O
&&	O
(	O
state	*(struct)
->	O
wrap	int
&	O
4	int
)	O
)	O
CRC2	O
(	O
state	*(struct)
->	O
check	long
,	O
hold	long
)	O
;	O
INITBITS	O
(	O
)	O
;	O
}	O
else	O
if	O
(	O
state	*(struct)
->	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
!=	O
Z_NULL	int
)	O
state	*(struct)
->	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
->	O
extra	*(char)
=	O
Z_NULL	int
;	O
state	*(struct)
->	O
mode	*(char)
=	O
EXTRA	int
;	O
case	O
EXTRA	int
:	O
if	O
(	O
state	*(struct)
->	O
flags	int
&	O
0x0400	int
)	O
{	O
copy	int
=	O
state	*(struct)
->	O
length	int
;	O
if	O
(	O
copy	int
>	O
have	int
)	O
copy	int
=	O
have	int
;	O
if	O
(	O
copy	int
)	O
{	O
if	O
(	O
state	*(struct)
->	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
!=	O
Z_NULL	int
&&	O
state	*(struct)
->	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
->	O
extra	*(char)
!=	O
Z_NULL	int
)	O
{	O
len	int
=	O
state	*(struct)
->	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
->	O
extra_len	int
-	O
state	*(struct)
->	O
length	int
;	O
zmemcpy	O
(	O
state	*(struct)
->	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
->	O
extra	*(char)
+	O
len	int
,	O
next	*(char)
,	O
len	int
+	O
copy	int
>	O
state	*(struct)
->	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
->	O
extra_max	int
?	O
state	*(struct)
->	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
->	O
extra_max	int
-	O
len	int
:	O
copy	int
)	O
;	O
}	O
if	O
(	O
(	O
state	*(struct)
->	O
flags	int
&	O
0x0200	int
)	O
&&	O
(	O
state	*(struct)
->	O
wrap	int
&	O
4	int
)	O
)	O
state	*(struct)
->	O
check	long
=	O
crc32	(long,*(char),int)->(long)
(	O
state	*(struct)
->	O
check	long
,	O
next	*(char)
,	O
copy	int
)	O
;	O
have	int
-=	O
copy	int
;	O
next	*(char)
+=	O
copy	int
;	O
state	*(struct)
->	O
length	int
-=	O
copy	int
;	O
}	O
if	O
(	O
state	*(struct)
->	O
length	int
)	O
goto	O
inf_leave	O
;	O
}	O
state	*(struct)
->	O
length	int
=	O
0	int
;	O
state	*(struct)
->	O
mode	*(char)
=	O
NAME	int
;	O
case	O
NAME	int
:	O
if	O
(	O
state	*(struct)
->	O
flags	int
&	O
0x0800	int
)	O
{	O
if	O
(	O
have	int
==	O
0	int
)	O
goto	O
inf_leave	O
;	O
copy	int
=	O
0	int
;	O
do	O
{	O
len	int
=	O
(	O
unsigned	O
)	O
(	O
next	*(char)
[	O
copy	int
++	O
]	O
)	O
;	O
if	O
(	O
state	*(struct)
->	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
!=	O
Z_NULL	int
&&	O
state	*(struct)
->	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
->	O
name	*(char)
!=	O
Z_NULL	int
&&	O
state	*(struct)
->	O
length	int
<	O
state	*(struct)
->	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
->	O
name_max	int
)	O
state	*(struct)
->	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
->	O
name	*(char)
[	O
state	*(struct)
->	O
length	int
++	O
]	O
=	O
(	O
Bytef	char
)	O
len	int
;	O
}	O
while	O
(	O
len	int
&&	O
copy	int
<	O
have	int
)	O
;	O
if	O
(	O
(	O
state	*(struct)
->	O
flags	int
&	O
0x0200	int
)	O
&&	O
(	O
state	*(struct)
->	O
wrap	int
&	O
4	int
)	O
)	O
state	*(struct)
->	O
check	long
=	O
crc32	(long,*(char),int)->(long)
(	O
state	*(struct)
->	O
check	long
,	O
next	*(char)
,	O
copy	int
)	O
;	O
have	int
-=	O
copy	int
;	O
next	*(char)
+=	O
copy	int
;	O
if	O
(	O
len	int
)	O
goto	O
inf_leave	O
;	O
}	O
else	O
if	O
(	O
state	*(struct)
->	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
!=	O
Z_NULL	int
)	O
state	*(struct)
->	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
->	O
name	*(char)
=	O
Z_NULL	int
;	O
state	*(struct)
->	O
length	int
=	O
0	int
;	O
state	*(struct)
->	O
mode	*(char)
=	O
COMMENT	int
;	O
case	O
COMMENT	int
:	O
if	O
(	O
state	*(struct)
->	O
flags	int
&	O
0x1000	int
)	O
{	O
if	O
(	O
have	int
==	O
0	int
)	O
goto	O
inf_leave	O
;	O
copy	int
=	O
0	int
;	O
do	O
{	O
len	int
=	O
(	O
unsigned	O
)	O
(	O
next	*(char)
[	O
copy	int
++	O
]	O
)	O
;	O
if	O
(	O
state	*(struct)
->	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
!=	O
Z_NULL	int
&&	O
state	*(struct)
->	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
->	O
comment	*(char)
!=	O
Z_NULL	int
&&	O
state	*(struct)
->	O
length	int
<	O
state	*(struct)
->	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
->	O
comm_max	int
)	O
state	*(struct)
->	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
->	O
comment	*(char)
[	O
state	*(struct)
->	O
length	int
++	O
]	O
=	O
(	O
Bytef	char
)	O
len	int
;	O
}	O
while	O
(	O
len	int
&&	O
copy	int
<	O
have	int
)	O
;	O
if	O
(	O
(	O
state	*(struct)
->	O
flags	int
&	O
0x0200	int
)	O
&&	O
(	O
state	*(struct)
->	O
wrap	int
&	O
4	int
)	O
)	O
state	*(struct)
->	O
check	long
=	O
crc32	(long,*(char),int)->(long)
(	O
state	*(struct)
->	O
check	long
,	O
next	*(char)
,	O
copy	int
)	O
;	O
have	int
-=	O
copy	int
;	O
next	*(char)
+=	O
copy	int
;	O
if	O
(	O
len	int
)	O
goto	O
inf_leave	O
;	O
}	O
else	O
if	O
(	O
state	*(struct)
->	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
!=	O
Z_NULL	int
)	O
state	*(struct)
->	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
->	O
comment	*(char)
=	O
Z_NULL	int
;	O
state	*(struct)
->	O
mode	*(char)
=	O
HCRC	int
;	O
case	O
HCRC	int
:	O
if	O
(	O
state	*(struct)
->	O
flags	int
&	O
0x0200	int
)	O
{	O
NEEDBITS	O
(	O
16	int
)	O
;	O
if	O
(	O
(	O
state	*(struct)
->	O
wrap	int
&	O
4	int
)	O
&&	O
hold	long
!=	O
(	O
state	*(struct)
->	O
check	long
&	O
0xffff	int
)	O
)	O
{	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
msg	*(char)
=	O
(	O
char	O
*	O
)	O
"header crc mismatch"	*(char)
;	O
state	*(struct)
->	O
mode	*(char)
=	O
BAD	int
;	O
break	O
;	O
}	O
INITBITS	O
(	O
)	O
;	O
}	O
if	O
(	O
state	*(struct)
->	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
!=	O
Z_NULL	int
)	O
{	O
state	*(struct)
->	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
->	O
hcrc	int
=	O
(	O
int	O
)	O
(	O
(	O
state	*(struct)
->	O
flags	int
>>	O
9	int
)	O
&	O
1	int
)	O
;	O
state	*(struct)
->	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
->	O
done	int
=	O
1	int
;	O
}	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
adler	long
=	O
state	*(struct)
->	O
check	long
=	O
crc32	(long,*(char),int)->(long)
(	O
0L	int
,	O
Z_NULL	int
,	O
0	int
)	O
;	O
state	*(struct)
->	O
mode	*(char)
=	O
TYPE	int
;	O
break	O
;	O
case	O
DICTID	int
:	O
NEEDBITS	O
(	O
32	int
)	O
;	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
adler	long
=	O
state	*(struct)
->	O
check	long
=	O
ZSWAP32	O
(	O
hold	long
)	O
;	O
INITBITS	O
(	O
)	O
;	O
state	*(struct)
->	O
mode	*(char)
=	O
DICT	int
;	O
case	O
DICT	int
:	O
if	O
(	O
state	*(struct)
->	O
havedict	int
==	O
0	int
)	O
{	O
RESTORE	O
(	O
)	O
;	O
return	O
Z_NEED_DICT	int
;	O
}	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
adler	long
=	O
state	*(struct)
->	O
check	long
=	O
adler32	(long,*(char),int)->(long)
(	O
0L	int
,	O
Z_NULL	int
,	O
0	int
)	O
;	O
state	*(struct)
->	O
mode	*(char)
=	O
TYPE	int
;	O
case	O
TYPE	int
:	O
if	O
(	O
flush	int
==	O
Z_BLOCK	int
||	O
flush	int
==	O
Z_TREES	int
)	O
goto	O
inf_leave	O
;	O
case	O
TYPEDO	int
:	O
if	O
(	O
state	*(struct)
->	O
last	int
)	O
{	O
BYTEBITS	O
(	O
)	O
;	O
state	*(struct)
->	O
mode	*(char)
=	O
CHECK	int
;	O
break	O
;	O
}	O
NEEDBITS	O
(	O
3	int
)	O
;	O
state	*(struct)
->	O
last	int
=	O
BITS	O
(	O
1	int
)	O
;	O
DROPBITS	O
(	O
1	int
)	O
;	O
switch	O
(	O
BITS	O
(	O
2	int
)	O
)	O
{	O
case	O
0	int
:	O
Tracev	O
(	O
(	O
stderr	O
,	O
"inflate:     stored block%s\n"	*(char)
,	O
state	*(struct)
->	O
last	int
?	O
" (last)"	*(char)
:	O
""	*(char)
)	O
)	O
;	O
state	*(struct)
->	O
mode	*(char)
=	O
STORED	int
;	O
break	O
;	O
case	O
1	int
:	O
fixedtables	(*(struct(*(struct(*`,int,long,*`,int,long,*`,*`,*`,*`,*`,int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*`,int,int,*`,int,*`,int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)))->(void)
(	O
state	*(struct)
)	O
;	O
Tracev	O
(	O
(	O
stderr	O
,	O
"inflate:     fixed codes block%s\n"	*(char)
,	O
state	*(struct)
->	O
last	int
?	O
" (last)"	*(char)
:	O
""	*(char)
)	O
)	O
;	O
state	*(struct)
->	O
mode	*(char)
=	O
LEN_	int
;	O
if	O
(	O
flush	int
==	O
Z_TREES	int
)	O
{	O
DROPBITS	O
(	O
2	int
)	O
;	O
goto	O
inf_leave	O
;	O
}	O
break	O
;	O
case	O
2	int
:	O
Tracev	O
(	O
(	O
stderr	O
,	O
"inflate:     dynamic codes block%s\n"	*(char)
,	O
state	*(struct)
->	O
last	int
?	O
" (last)"	*(char)
:	O
""	*(char)
)	O
)	O
;	O
state	*(struct)
->	O
mode	*(char)
=	O
TABLE	int
;	O
break	O
;	O
case	O
3	int
:	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
msg	*(char)
=	O
(	O
char	O
*	O
)	O
"invalid block type"	*(char)
;	O
state	*(struct)
->	O
mode	*(char)
=	O
BAD	int
;	O
}	O
DROPBITS	O
(	O
2	int
)	O
;	O
break	O
;	O
case	O
STORED	int
:	O
BYTEBITS	O
(	O
)	O
;	O
NEEDBITS	O
(	O
32	int
)	O
;	O
if	O
(	O
(	O
hold	long
&	O
0xffff	int
)	O
!=	O
(	O
(	O
hold	long
>>	O
16	int
)	O
^	O
0xffff	int
)	O
)	O
{	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
msg	*(char)
=	O
(	O
char	O
*	O
)	O
"invalid stored block lengths"	*(char)
;	O
state	*(struct)
->	O
mode	*(char)
=	O
BAD	int
;	O
break	O
;	O
}	O
state	*(struct)
->	O
length	int
=	O
(	O
unsigned	O
)	O
hold	long
&	O
0xffff	int
;	O
Tracev	O
(	O
(	O
stderr	O
,	O
"inflate:       stored length %u\n"	*(char)
,	O
state	*(struct)
->	O
length	int
)	O
)	O
;	O
INITBITS	O
(	O
)	O
;	O
state	*(struct)
->	O
mode	*(char)
=	O
COPY_	int
;	O
if	O
(	O
flush	int
==	O
Z_TREES	int
)	O
goto	O
inf_leave	O
;	O
case	O
COPY_	int
:	O
state	*(struct)
->	O
mode	*(char)
=	O
COPY	int
;	O
case	O
COPY	int
:	O
copy	int
=	O
state	*(struct)
->	O
length	int
;	O
if	O
(	O
copy	int
)	O
{	O
if	O
(	O
copy	int
>	O
have	int
)	O
copy	int
=	O
have	int
;	O
if	O
(	O
copy	int
>	O
left	int
)	O
copy	int
=	O
left	int
;	O
if	O
(	O
copy	int
==	O
0	int
)	O
goto	O
inf_leave	O
;	O
zmemcpy	O
(	O
put	*(char)
,	O
next	*(char)
,	O
copy	int
)	O
;	O
have	int
-=	O
copy	int
;	O
next	*(char)
+=	O
copy	int
;	O
left	int
-=	O
copy	int
;	O
put	*(char)
+=	O
copy	int
;	O
state	*(struct)
->	O
length	int
-=	O
copy	int
;	O
break	O
;	O
}	O
Tracev	O
(	O
(	O
stderr	O
,	O
"inflate:       stored end\n"	*(char)
)	O
)	O
;	O
state	*(struct)
->	O
mode	*(char)
=	O
TYPE	int
;	O
break	O
;	O
case	O
TABLE	int
:	O
NEEDBITS	O
(	O
14	int
)	O
;	O
state	*(struct)
->	O
nlen	int
=	O
BITS	O
(	O
5	int
)	O
+	O
257	int
;	O
DROPBITS	O
(	O
5	int
)	O
;	O
state	*(struct)
->	O
ndist	int
=	O
BITS	O
(	O
5	int
)	O
+	O
1	int
;	O
DROPBITS	O
(	O
5	int
)	O
;	O
state	*(struct)
->	O
ncode	int
=	O
BITS	O
(	O
4	int
)	O
+	O
4	int
;	O
DROPBITS	O
(	O
4	int
)	O
;	O
if	O
(	O
state	*(struct)
->	O
nlen	int
>	O
286	int
||	O
state	*(struct)
->	O
ndist	int
>	O
30	int
)	O
{	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
msg	*(char)
=	O
(	O
char	O
*	O
)	O
"too many length or distance symbols"	*(char)
;	O
state	*(struct)
->	O
mode	*(char)
=	O
BAD	int
;	O
break	O
;	O
}	O
Tracev	O
(	O
(	O
stderr	O
,	O
"inflate:       table sizes ok\n"	*(char)
)	O
)	O
;	O
state	*(struct)
->	O
have	int
=	O
0	int
;	O
state	*(struct)
->	O
mode	*(char)
=	O
LENLENS	int
;	O
case	O
LENLENS	int
:	O
while	O
(	O
state	*(struct)
->	O
have	int
<	O
state	*(struct)
->	O
ncode	int
)	O
{	O
NEEDBITS	O
(	O
3	int
)	O
;	O
state	*(struct)
->	O
lens	*(short)
[	O
order	array(short)
[	O
state	*(struct)
->	O
have	int
++	O
]	O
]	O
=	O
(	O
unsigned	O
short	O
)	O
BITS	O
(	O
3	int
)	O
;	O
DROPBITS	O
(	O
3	int
)	O
;	O
}	O
while	O
(	O
state	*(struct)
->	O
have	int
<	O
19	int
)	O
state	*(struct)
->	O
lens	*(short)
[	O
order	array(short)
[	O
state	*(struct)
->	O
have	int
++	O
]	O
]	O
=	O
0	int
;	O
state	*(struct)
->	O
next	*(char)
=	O
state	*(struct)
->	O
codes	int
;	O
state	*(struct)
->	O
lencode	*(struct(char,char,short))
=	O
(	O
const	O
code	struct(char,char,short)
FAR	O
*	O
)	O
(	O
state	*(struct)
->	O
next	*(char)
)	O
;	O
state	*(struct)
->	O
lenbits	int
=	O
7	int
;	O
ret	int
=	O
inflate_table	(enum(int,int,int),*(short),int,*(*(struct(char,char,short))),*(int),*(short))->(int)
(	O
CODES	int
,	O
state	*(struct)
->	O
lens	*(short)
,	O
19	int
,	O
&	O
(	O
state	*(struct)
->	O
next	*(char)
)	O
,	O
&	O
(	O
state	*(struct)
->	O
lenbits	int
)	O
,	O
state	*(struct)
->	O
work	*(short)
)	O
;	O
if	O
(	O
ret	int
)	O
{	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
msg	*(char)
=	O
(	O
char	O
*	O
)	O
"invalid code lengths set"	*(char)
;	O
state	*(struct)
->	O
mode	*(char)
=	O
BAD	int
;	O
break	O
;	O
}	O
Tracev	O
(	O
(	O
stderr	O
,	O
"inflate:       code lengths ok\n"	*(char)
)	O
)	O
;	O
state	*(struct)
->	O
have	int
=	O
0	int
;	O
state	*(struct)
->	O
mode	*(char)
=	O
CODELENS	int
;	O
case	O
CODELENS	int
:	O
while	O
(	O
state	*(struct)
->	O
have	int
<	O
state	*(struct)
->	O
nlen	int
+	O
state	*(struct)
->	O
ndist	int
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
here	struct(char,char,short)
=	O
state	*(struct)
->	O
lencode	*(struct(char,char,short))
[	O
BITS	O
(	O
state	*(struct)
->	O
lenbits	int
)	O
]	O
;	O
if	O
(	O
(	O
unsigned	O
)	O
(	O
here	struct(char,char,short)
.	O
bits	*(int)
)	O
<=	O
bits	*(int)
)	O
break	O
;	O
PULLBYTE	O
(	O
)	O
;	O
}	O
if	O
(	O
here	struct(char,char,short)
.	O
val	short
<	O
16	int
)	O
{	O
DROPBITS	O
(	O
here	struct(char,char,short)
.	O
bits	*(int)
)	O
;	O
state	*(struct)
->	O
lens	*(short)
[	O
state	*(struct)
->	O
have	int
++	O
]	O
=	O
here	struct(char,char,short)
.	O
val	short
;	O
}	O
else	O
{	O
if	O
(	O
here	struct(char,char,short)
.	O
val	short
==	O
16	int
)	O
{	O
NEEDBITS	O
(	O
here	struct(char,char,short)
.	O
bits	*(int)
+	O
2	int
)	O
;	O
DROPBITS	O
(	O
here	struct(char,char,short)
.	O
bits	*(int)
)	O
;	O
if	O
(	O
state	*(struct)
->	O
have	int
==	O
0	int
)	O
{	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
msg	*(char)
=	O
(	O
char	O
*	O
)	O
"invalid bit length repeat"	*(char)
;	O
state	*(struct)
->	O
mode	*(char)
=	O
BAD	int
;	O
break	O
;	O
}	O
len	int
=	O
state	*(struct)
->	O
lens	*(short)
[	O
state	*(struct)
->	O
have	int
-	O
1	int
]	O
;	O
copy	int
=	O
3	int
+	O
BITS	O
(	O
2	int
)	O
;	O
DROPBITS	O
(	O
2	int
)	O
;	O
}	O
else	O
if	O
(	O
here	struct(char,char,short)
.	O
val	short
==	O
17	int
)	O
{	O
NEEDBITS	O
(	O
here	struct(char,char,short)
.	O
bits	*(int)
+	O
3	int
)	O
;	O
DROPBITS	O
(	O
here	struct(char,char,short)
.	O
bits	*(int)
)	O
;	O
len	int
=	O
0	int
;	O
copy	int
=	O
3	int
+	O
BITS	O
(	O
3	int
)	O
;	O
DROPBITS	O
(	O
3	int
)	O
;	O
}	O
else	O
{	O
NEEDBITS	O
(	O
here	struct(char,char,short)
.	O
bits	*(int)
+	O
7	int
)	O
;	O
DROPBITS	O
(	O
here	struct(char,char,short)
.	O
bits	*(int)
)	O
;	O
len	int
=	O
0	int
;	O
copy	int
=	O
11	int
+	O
BITS	O
(	O
7	int
)	O
;	O
DROPBITS	O
(	O
7	int
)	O
;	O
}	O
if	O
(	O
state	*(struct)
->	O
have	int
+	O
copy	int
>	O
state	*(struct)
->	O
nlen	int
+	O
state	*(struct)
->	O
ndist	int
)	O
{	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
msg	*(char)
=	O
(	O
char	O
*	O
)	O
"invalid bit length repeat"	*(char)
;	O
state	*(struct)
->	O
mode	*(char)
=	O
BAD	int
;	O
break	O
;	O
}	O
while	O
(	O
copy	int
--	O
)	O
state	*(struct)
->	O
lens	*(short)
[	O
state	*(struct)
->	O
have	int
++	O
]	O
=	O
(	O
unsigned	O
short	O
)	O
len	int
;	O
}	O
}	O
if	O
(	O
state	*(struct)
->	O
mode	*(char)
==	O
BAD	int
)	O
break	O
;	O
if	O
(	O
state	*(struct)
->	O
lens	*(short)
[	O
256	int
]	O
==	O
0	int
)	O
{	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
msg	*(char)
=	O
(	O
char	O
*	O
)	O
"invalid code -- missing end-of-block"	*(char)
;	O
state	*(struct)
->	O
mode	*(char)
=	O
BAD	int
;	O
break	O
;	O
}	O
state	*(struct)
->	O
next	*(char)
=	O
state	*(struct)
->	O
codes	int
;	O
state	*(struct)
->	O
lencode	*(struct(char,char,short))
=	O
(	O
const	O
code	struct(char,char,short)
FAR	O
*	O
)	O
(	O
state	*(struct)
->	O
next	*(char)
)	O
;	O
state	*(struct)
->	O
lenbits	int
=	O
9	int
;	O
ret	int
=	O
inflate_table	(enum(int,int,int),*(short),int,*(*(struct(char,char,short))),*(int),*(short))->(int)
(	O
LENS	int
,	O
state	*(struct)
->	O
lens	*(short)
,	O
state	*(struct)
->	O
nlen	int
,	O
&	O
(	O
state	*(struct)
->	O
next	*(char)
)	O
,	O
&	O
(	O
state	*(struct)
->	O
lenbits	int
)	O
,	O
state	*(struct)
->	O
work	*(short)
)	O
;	O
if	O
(	O
ret	int
)	O
{	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
msg	*(char)
=	O
(	O
char	O
*	O
)	O
"invalid literal/lengths set"	*(char)
;	O
state	*(struct)
->	O
mode	*(char)
=	O
BAD	int
;	O
break	O
;	O
}	O
state	*(struct)
->	O
distcode	*(struct(char,char,short))
=	O
(	O
const	O
code	struct(char,char,short)
FAR	O
*	O
)	O
(	O
state	*(struct)
->	O
next	*(char)
)	O
;	O
state	*(struct)
->	O
distbits	int
=	O
6	int
;	O
ret	int
=	O
inflate_table	(enum(int,int,int),*(short),int,*(*(struct(char,char,short))),*(int),*(short))->(int)
(	O
DISTS	int
,	O
state	*(struct)
->	O
lens	*(short)
+	O
state	*(struct)
->	O
nlen	int
,	O
state	*(struct)
->	O
ndist	int
,	O
&	O
(	O
state	*(struct)
->	O
next	*(char)
)	O
,	O
&	O
(	O
state	*(struct)
->	O
distbits	int
)	O
,	O
state	*(struct)
->	O
work	*(short)
)	O
;	O
if	O
(	O
ret	int
)	O
{	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
msg	*(char)
=	O
(	O
char	O
*	O
)	O
"invalid distances set"	*(char)
;	O
state	*(struct)
->	O
mode	*(char)
=	O
BAD	int
;	O
break	O
;	O
}	O
Tracev	O
(	O
(	O
stderr	O
,	O
"inflate:       codes ok\n"	*(char)
)	O
)	O
;	O
state	*(struct)
->	O
mode	*(char)
=	O
LEN_	int
;	O
if	O
(	O
flush	int
==	O
Z_TREES	int
)	O
goto	O
inf_leave	O
;	O
case	O
LEN_	int
:	O
state	*(struct)
->	O
mode	*(char)
=	O
LEN	int
;	O
case	O
LEN	int
:	O
if	O
(	O
have	int
>=	O
6	int
&&	O
left	int
>=	O
258	int
)	O
{	O
RESTORE	O
(	O
)	O
;	O
inflate_fast	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)),int)->(void)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
,	O
out	*((*(void),*(char),int)->(int))
)	O
;	O
LOAD	O
(	O
)	O
;	O
if	O
(	O
state	*(struct)
->	O
mode	*(char)
==	O
TYPE	int
)	O
state	*(struct)
->	O
back	int
=	O
-	O
1	int
;	O
break	O
;	O
}	O
state	*(struct)
->	O
back	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
here	struct(char,char,short)
=	O
state	*(struct)
->	O
lencode	*(struct(char,char,short))
[	O
BITS	O
(	O
state	*(struct)
->	O
lenbits	int
)	O
]	O
;	O
if	O
(	O
(	O
unsigned	O
)	O
(	O
here	struct(char,char,short)
.	O
bits	*(int)
)	O
<=	O
bits	*(int)
)	O
break	O
;	O
PULLBYTE	O
(	O
)	O
;	O
}	O
if	O
(	O
here	struct(char,char,short)
.	O
op	char
&&	O
(	O
here	struct(char,char,short)
.	O
op	char
&	O
0xf0	int
)	O
==	O
0	int
)	O
{	O
last	int
=	O
here	struct(char,char,short)
;	O
for	O
(	O
;	O
;	O
)	O
{	O
here	struct(char,char,short)
=	O
state	*(struct)
->	O
lencode	*(struct(char,char,short))
[	O
last	int
.	O
val	short
+	O
(	O
BITS	O
(	O
last	int
.	O
bits	*(int)
+	O
last	int
.	O
op	char
)	O
>>	O
last	int
.	O
bits	*(int)
)	O
]	O
;	O
if	O
(	O
(	O
unsigned	O
)	O
(	O
last	int
.	O
bits	*(int)
+	O
here	struct(char,char,short)
.	O
bits	*(int)
)	O
<=	O
bits	*(int)
)	O
break	O
;	O
PULLBYTE	O
(	O
)	O
;	O
}	O
DROPBITS	O
(	O
last	int
.	O
bits	*(int)
)	O
;	O
state	*(struct)
->	O
back	int
+=	O
last	int
.	O
bits	*(int)
;	O
}	O
DROPBITS	O
(	O
here	struct(char,char,short)
.	O
bits	*(int)
)	O
;	O
state	*(struct)
->	O
back	int
+=	O
here	struct(char,char,short)
.	O
bits	*(int)
;	O
state	*(struct)
->	O
length	int
=	O
(	O
unsigned	O
)	O
here	struct(char,char,short)
.	O
val	short
;	O
if	O
(	O
(	O
int	O
)	O
(	O
here	struct(char,char,short)
.	O
op	char
)	O
==	O
0	int
)	O
{	O
Tracevv	O
(	O
(	O
stderr	O
,	O
here	struct(char,char,short)
.	O
val	short
>=	O
0x20	int
&&	O
here	struct(char,char,short)
.	O
val	short
<	O
0x7f	int
?	O
"inflate:         literal '%c'\n"	*(char)
:	O
"inflate:         literal 0x%02x\n"	*(char)
,	O
here	struct(char,char,short)
.	O
val	short
)	O
)	O
;	O
state	*(struct)
->	O
mode	*(char)
=	O
LIT	int
;	O
break	O
;	O
}	O
if	O
(	O
here	struct(char,char,short)
.	O
op	char
&	O
32	int
)	O
{	O
Tracevv	O
(	O
(	O
stderr	O
,	O
"inflate:         end of block\n"	*(char)
)	O
)	O
;	O
state	*(struct)
->	O
back	int
=	O
-	O
1	int
;	O
state	*(struct)
->	O
mode	*(char)
=	O
TYPE	int
;	O
break	O
;	O
}	O
if	O
(	O
here	struct(char,char,short)
.	O
op	char
&	O
64	int
)	O
{	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
msg	*(char)
=	O
(	O
char	O
*	O
)	O
"invalid literal/length code"	*(char)
;	O
state	*(struct)
->	O
mode	*(char)
=	O
BAD	int
;	O
break	O
;	O
}	O
state	*(struct)
->	O
extra	*(char)
=	O
(	O
unsigned	O
)	O
(	O
here	struct(char,char,short)
.	O
op	char
)	O
&	O
15	int
;	O
state	*(struct)
->	O
mode	*(char)
=	O
LENEXT	int
;	O
case	O
LENEXT	int
:	O
if	O
(	O
state	*(struct)
->	O
extra	*(char)
)	O
{	O
NEEDBITS	O
(	O
state	*(struct)
->	O
extra	*(char)
)	O
;	O
state	*(struct)
->	O
length	int
+=	O
BITS	O
(	O
state	*(struct)
->	O
extra	*(char)
)	O
;	O
DROPBITS	O
(	O
state	*(struct)
->	O
extra	*(char)
)	O
;	O
state	*(struct)
->	O
back	int
+=	O
state	*(struct)
->	O
extra	*(char)
;	O
}	O
Tracevv	O
(	O
(	O
stderr	O
,	O
"inflate:         length %u\n"	*(char)
,	O
state	*(struct)
->	O
length	int
)	O
)	O
;	O
state	*(struct)
->	O
was	int
=	O
state	*(struct)
->	O
length	int
;	O
state	*(struct)
->	O
mode	*(char)
=	O
DIST	int
;	O
case	O
DIST	int
:	O
for	O
(	O
;	O
;	O
)	O
{	O
here	struct(char,char,short)
=	O
state	*(struct)
->	O
distcode	*(struct(char,char,short))
[	O
BITS	O
(	O
state	*(struct)
->	O
distbits	int
)	O
]	O
;	O
if	O
(	O
(	O
unsigned	O
)	O
(	O
here	struct(char,char,short)
.	O
bits	*(int)
)	O
<=	O
bits	*(int)
)	O
break	O
;	O
PULLBYTE	O
(	O
)	O
;	O
}	O
if	O
(	O
(	O
here	struct(char,char,short)
.	O
op	char
&	O
0xf0	int
)	O
==	O
0	int
)	O
{	O
last	int
=	O
here	struct(char,char,short)
;	O
for	O
(	O
;	O
;	O
)	O
{	O
here	struct(char,char,short)
=	O
state	*(struct)
->	O
distcode	*(struct(char,char,short))
[	O
last	int
.	O
val	short
+	O
(	O
BITS	O
(	O
last	int
.	O
bits	*(int)
+	O
last	int
.	O
op	char
)	O
>>	O
last	int
.	O
bits	*(int)
)	O
]	O
;	O
if	O
(	O
(	O
unsigned	O
)	O
(	O
last	int
.	O
bits	*(int)
+	O
here	struct(char,char,short)
.	O
bits	*(int)
)	O
<=	O
bits	*(int)
)	O
break	O
;	O
PULLBYTE	O
(	O
)	O
;	O
}	O
DROPBITS	O
(	O
last	int
.	O
bits	*(int)
)	O
;	O
state	*(struct)
->	O
back	int
+=	O
last	int
.	O
bits	*(int)
;	O
}	O
DROPBITS	O
(	O
here	struct(char,char,short)
.	O
bits	*(int)
)	O
;	O
state	*(struct)
->	O
back	int
+=	O
here	struct(char,char,short)
.	O
bits	*(int)
;	O
if	O
(	O
here	struct(char,char,short)
.	O
op	char
&	O
64	int
)	O
{	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
msg	*(char)
=	O
(	O
char	O
*	O
)	O
"invalid distance code"	*(char)
;	O
state	*(struct)
->	O
mode	*(char)
=	O
BAD	int
;	O
break	O
;	O
}	O
state	*(struct)
->	O
offset	int
=	O
(	O
unsigned	O
)	O
here	struct(char,char,short)
.	O
val	short
;	O
state	*(struct)
->	O
extra	*(char)
=	O
(	O
unsigned	O
)	O
(	O
here	struct(char,char,short)
.	O
op	char
)	O
&	O
15	int
;	O
state	*(struct)
->	O
mode	*(char)
=	O
DISTEXT	int
;	O
case	O
DISTEXT	int
:	O
if	O
(	O
state	*(struct)
->	O
extra	*(char)
)	O
{	O
NEEDBITS	O
(	O
state	*(struct)
->	O
extra	*(char)
)	O
;	O
state	*(struct)
->	O
offset	int
+=	O
BITS	O
(	O
state	*(struct)
->	O
extra	*(char)
)	O
;	O
DROPBITS	O
(	O
state	*(struct)
->	O
extra	*(char)
)	O
;	O
state	*(struct)
->	O
back	int
+=	O
state	*(struct)
->	O
extra	*(char)
;	O
}	O
Tracevv	O
(	O
(	O
stderr	O
,	O
"inflate:         distance %u\n"	*(char)
,	O
state	*(struct)
->	O
offset	int
)	O
)	O
;	O
state	*(struct)
->	O
mode	*(char)
=	O
MATCH	int
;	O
case	O
MATCH	int
:	O
if	O
(	O
left	int
==	O
0	int
)	O
goto	O
inf_leave	O
;	O
copy	int
=	O
out	*((*(void),*(char),int)->(int))
-	O
left	int
;	O
if	O
(	O
state	*(struct)
->	O
offset	int
>	O
copy	int
)	O
{	O
copy	int
=	O
state	*(struct)
->	O
offset	int
-	O
copy	int
;	O
if	O
(	O
copy	int
>	O
state	*(struct)
->	O
whave	int
)	O
{	O
if	O
(	O
state	*(struct)
->	O
sane	int
)	O
{	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
msg	*(char)
=	O
(	O
char	O
*	O
)	O
"invalid distance too far back"	*(char)
;	O
state	*(struct)
->	O
mode	*(char)
=	O
BAD	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
copy	int
>	O
state	*(struct)
->	O
wnext	int
)	O
{	O
copy	int
-=	O
state	*(struct)
->	O
wnext	int
;	O
from	*(char)
=	O
state	*(struct)
->	O
window	*(char)
+	O
(	O
state	*(struct)
->	O
wsize	int
-	O
copy	int
)	O
;	O
}	O
else	O
from	*(char)
=	O
state	*(struct)
->	O
window	*(char)
+	O
(	O
state	*(struct)
->	O
wnext	int
-	O
copy	int
)	O
;	O
if	O
(	O
copy	int
>	O
state	*(struct)
->	O
length	int
)	O
copy	int
=	O
state	*(struct)
->	O
length	int
;	O
}	O
else	O
{	O
from	*(char)
=	O
put	*(char)
-	O
state	*(struct)
->	O
offset	int
;	O
copy	int
=	O
state	*(struct)
->	O
length	int
;	O
}	O
if	O
(	O
copy	int
>	O
left	int
)	O
copy	int
=	O
left	int
;	O
left	int
-=	O
copy	int
;	O
state	*(struct)
->	O
length	int
-=	O
copy	int
;	O
do	O
{	O
*	O
put	*(char)
++	O
=	O
*	O
from	*(char)
++	O
;	O
}	O
while	O
(	O
--	O
copy	int
)	O
;	O
if	O
(	O
state	*(struct)
->	O
length	int
==	O
0	int
)	O
state	*(struct)
->	O
mode	*(char)
=	O
LEN	int
;	O
break	O
;	O
case	O
LIT	int
:	O
if	O
(	O
left	int
==	O
0	int
)	O
goto	O
inf_leave	O
;	O
*	O
put	*(char)
++	O
=	O
(	O
unsigned	O
char	O
)	O
(	O
state	*(struct)
->	O
length	int
)	O
;	O
left	int
--	O
;	O
state	*(struct)
->	O
mode	*(char)
=	O
LEN	int
;	O
break	O
;	O
case	O
CHECK	int
:	O
if	O
(	O
state	*(struct)
->	O
wrap	int
)	O
{	O
NEEDBITS	O
(	O
32	int
)	O
;	O
out	*((*(void),*(char),int)->(int))
-=	O
left	int
;	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
total_out	long
+=	O
out	*((*(void),*(char),int)->(int))
;	O
state	*(struct)
->	O
total	long
+=	O
out	*((*(void),*(char),int)->(int))
;	O
if	O
(	O
(	O
state	*(struct)
->	O
wrap	int
&	O
4	int
)	O
&&	O
out	*((*(void),*(char),int)->(int))
)	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
adler	long
=	O
state	*(struct)
->	O
check	long
=	O
UPDATE	O
(	O
state	*(struct)
->	O
check	long
,	O
put	*(char)
-	O
out	*((*(void),*(char),int)->(int))
,	O
out	*((*(void),*(char),int)->(int))
)	O
;	O
out	*((*(void),*(char),int)->(int))
=	O
left	int
;	O
if	O
(	O
(	O
state	*(struct)
->	O
wrap	int
&	O
4	int
)	O
&&	O
(	O
state	*(struct)
->	O
flags	int
?	O
hold	long
:	O
ZSWAP32	O
(	O
hold	long
)	O
)	O
!=	O
state	*(struct)
->	O
check	long
)	O
{	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
msg	*(char)
=	O
(	O
char	O
*	O
)	O
"incorrect data check"	*(char)
;	O
state	*(struct)
->	O
mode	*(char)
=	O
BAD	int
;	O
break	O
;	O
}	O
INITBITS	O
(	O
)	O
;	O
Tracev	O
(	O
(	O
stderr	O
,	O
"inflate:   check matches trailer\n"	*(char)
)	O
)	O
;	O
}	O
state	*(struct)
->	O
mode	*(char)
=	O
LENGTH	int
;	O
case	O
LENGTH	int
:	O
if	O
(	O
state	*(struct)
->	O
wrap	int
&&	O
state	*(struct)
->	O
flags	int
)	O
{	O
NEEDBITS	O
(	O
32	int
)	O
;	O
if	O
(	O
hold	long
!=	O
(	O
state	*(struct)
->	O
total	long
&	O
0xffffffffUL	int
)	O
)	O
{	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
msg	*(char)
=	O
(	O
char	O
*	O
)	O
"incorrect length check"	*(char)
;	O
state	*(struct)
->	O
mode	*(char)
=	O
BAD	int
;	O
break	O
;	O
}	O
INITBITS	O
(	O
)	O
;	O
Tracev	O
(	O
(	O
stderr	O
,	O
"inflate:   length matches trailer\n"	*(char)
)	O
)	O
;	O
}	O
state	*(struct)
->	O
mode	*(char)
=	O
DONE	int
;	O
case	O
DONE	int
:	O
ret	int
=	O
Z_STREAM_END	int
;	O
goto	O
inf_leave	O
;	O
case	O
BAD	int
:	O
ret	int
=	O
Z_DATA_ERROR	O
;	O
goto	O
inf_leave	O
;	O
case	O
MEM	int
:	O
return	O
Z_MEM_ERROR	O
;	O
case	O
SYNC	int
:	O
default	O
:	O
return	O
Z_STREAM_ERROR	O
;	O
}	O
inf_leave	O
:	O
RESTORE	O
(	O
)	O
;	O
if	O
(	O
state	*(struct)
->	O
wsize	int
||	O
(	O
out	*((*(void),*(char),int)->(int))
!=	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
avail_out	int
&&	O
state	*(struct)
->	O
mode	*(char)
<	O
BAD	int
&&	O
(	O
state	*(struct)
->	O
mode	*(char)
<	O
CHECK	int
||	O
flush	int
!=	O
Z_FINISH	int
)	O
)	O
)	O
if	O
(	O
updatewindow	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)),*(char),int)->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
,	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
next_out	*(char)
,	O
out	*((*(void),*(char),int)->(int))
-	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
avail_out	int
)	O
)	O
{	O
state	*(struct)
->	O
mode	*(char)
=	O
MEM	int
;	O
return	O
Z_MEM_ERROR	O
;	O
}	O
in	*((*(void),*(*(char)))->(int))
-=	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
avail_in	int
;	O
out	*((*(void),*(char),int)->(int))
-=	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
avail_out	int
;	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
total_in	long
+=	O
in	*((*(void),*(*(char)))->(int))
;	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
total_out	long
+=	O
out	*((*(void),*(char),int)->(int))
;	O
state	*(struct)
->	O
total	long
+=	O
out	*((*(void),*(char),int)->(int))
;	O
if	O
(	O
(	O
state	*(struct)
->	O
wrap	int
&	O
4	int
)	O
&&	O
out	*((*(void),*(char),int)->(int))
)	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
adler	long
=	O
state	*(struct)
->	O
check	long
=	O
UPDATE	O
(	O
state	*(struct)
->	O
check	long
,	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
next_out	*(char)
-	O
out	*((*(void),*(char),int)->(int))
,	O
out	*((*(void),*(char),int)->(int))
)	O
;	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
data_type	int
=	O
(	O
int	O
)	O
state	*(struct)
->	O
bits	*(int)
+	O
(	O
state	*(struct)
->	O
last	int
?	O
64	int
:	O
0	int
)	O
+	O
(	O
state	*(struct)
->	O
mode	*(char)
==	O
TYPE	int
?	O
128	int
:	O
0	int
)	O
+	O
(	O
state	*(struct)
->	O
mode	*(char)
==	O
LEN_	int
||	O
state	*(struct)
->	O
mode	*(char)
==	O
COPY_	int
?	O
256	int
:	O
0	int
)	O
;	O
if	O
(	O
(	O
(	O
in	*((*(void),*(*(char)))->(int))
==	O
0	int
&&	O
out	*((*(void),*(char),int)->(int))
==	O
0	int
)	O
||	O
flush	int
==	O
Z_FINISH	int
)	O
&&	O
ret	int
==	O
Z_OK	int
)	O
ret	int
=	O
Z_BUF_ERROR	O
;	O
return	O
ret	int
;	O
}	O
int	O
ZEXPORT	O
inflateEnd	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
)	O
z_streamp	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
;	O
{	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
state	*(struct)
;	O
if	O
(	O
inflateStateCheck	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
)	O
)	O
return	O
Z_STREAM_ERROR	O
;	O
state	*(struct)
=	O
(	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
)	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
state	*(struct)
;	O
if	O
(	O
state	*(struct)
->	O
window	*(char)
!=	O
Z_NULL	int
)	O
ZFREE	O
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
,	O
state	*(struct)
->	O
window	*(char)
)	O
;	O
ZFREE	O
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
,	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
state	*(struct)
)	O
;	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
state	*(struct)
=	O
Z_NULL	int
;	O
Tracev	O
(	O
(	O
stderr	O
,	O
"inflate: end\n"	*(char)
)	O
)	O
;	O
return	O
Z_OK	int
;	O
}	O
int	O
ZEXPORT	O
inflateGetDictionary	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)),*(char),*(int))->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
,	O
dictionary	*(char)
,	O
dictLength	int
)	O
z_streamp	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
;	O
Bytef	char
*	O
dictionary	*(char)
;	O
uInt	int
*	O
dictLength	int
;	O
{	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
state	*(struct)
;	O
if	O
(	O
inflateStateCheck	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
)	O
)	O
return	O
Z_STREAM_ERROR	O
;	O
state	*(struct)
=	O
(	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
)	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
state	*(struct)
;	O
if	O
(	O
state	*(struct)
->	O
whave	int
&&	O
dictionary	*(char)
!=	O
Z_NULL	int
)	O
{	O
zmemcpy	O
(	O
dictionary	*(char)
,	O
state	*(struct)
->	O
window	*(char)
+	O
state	*(struct)
->	O
wnext	int
,	O
state	*(struct)
->	O
whave	int
-	O
state	*(struct)
->	O
wnext	int
)	O
;	O
zmemcpy	O
(	O
dictionary	*(char)
+	O
state	*(struct)
->	O
whave	int
-	O
state	*(struct)
->	O
wnext	int
,	O
state	*(struct)
->	O
window	*(char)
,	O
state	*(struct)
->	O
wnext	int
)	O
;	O
}	O
if	O
(	O
dictLength	int
!=	O
Z_NULL	int
)	O
*	O
dictLength	int
=	O
state	*(struct)
->	O
whave	int
;	O
return	O
Z_OK	int
;	O
}	O
int	O
ZEXPORT	O
inflateSetDictionary	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)),*(char),int)->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
,	O
dictionary	*(char)
,	O
dictLength	int
)	O
z_streamp	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
;	O
const	O
Bytef	char
*	O
dictionary	*(char)
;	O
uInt	int
dictLength	int
;	O
{	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
state	*(struct)
;	O
unsigned	O
long	O
dictid	long
;	O
int	O
ret	int
;	O
if	O
(	O
inflateStateCheck	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
)	O
)	O
return	O
Z_STREAM_ERROR	O
;	O
state	*(struct)
=	O
(	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
)	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
state	*(struct)
;	O
if	O
(	O
state	*(struct)
->	O
wrap	int
!=	O
0	int
&&	O
state	*(struct)
->	O
mode	*(char)
!=	O
DICT	int
)	O
return	O
Z_STREAM_ERROR	O
;	O
if	O
(	O
state	*(struct)
->	O
mode	*(char)
==	O
DICT	int
)	O
{	O
dictid	long
=	O
adler32	(long,*(char),int)->(long)
(	O
0L	int
,	O
Z_NULL	int
,	O
0	int
)	O
;	O
dictid	long
=	O
adler32	(long,*(char),int)->(long)
(	O
dictid	long
,	O
dictionary	*(char)
,	O
dictLength	int
)	O
;	O
if	O
(	O
dictid	long
!=	O
state	*(struct)
->	O
check	long
)	O
return	O
Z_DATA_ERROR	O
;	O
}	O
ret	int
=	O
updatewindow	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)),*(char),int)->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
,	O
dictionary	*(char)
+	O
dictLength	int
,	O
dictLength	int
)	O
;	O
if	O
(	O
ret	int
)	O
{	O
state	*(struct)
->	O
mode	*(char)
=	O
MEM	int
;	O
return	O
Z_MEM_ERROR	O
;	O
}	O
state	*(struct)
->	O
havedict	int
=	O
1	int
;	O
Tracev	O
(	O
(	O
stderr	O
,	O
"inflate:   dictionary set\n"	*(char)
)	O
)	O
;	O
return	O
Z_OK	int
;	O
}	O
int	O
ZEXPORT	O
inflateGetHeader	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)),*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)))->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
,	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
)	O
z_streamp	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
;	O
gz_headerp	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
;	O
{	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
state	*(struct)
;	O
if	O
(	O
inflateStateCheck	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
)	O
)	O
return	O
Z_STREAM_ERROR	O
;	O
state	*(struct)
=	O
(	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
)	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
state	*(struct)
;	O
if	O
(	O
(	O
state	*(struct)
->	O
wrap	int
&	O
2	int
)	O
==	O
0	int
)	O
return	O
Z_STREAM_ERROR	O
;	O
state	*(struct)
->	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
=	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
;	O
head	*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int))
->	O
done	int
=	O
0	int
;	O
return	O
Z_OK	int
;	O
}	O
local	O
unsigned	O
syncsearch	(*(int),*(char),int)->(int)
(	O
have	int
,	O
buf	*(void)
,	O
len	int
)	O
unsigned	O
FAR	O
*	O
have	int
;	O
const	O
unsigned	O
char	O
FAR	O
*	O
buf	*(void)
;	O
unsigned	O
len	int
;	O
{	O
unsigned	O
got	int
;	O
unsigned	O
next	*(char)
;	O
got	int
=	O
*	O
have	int
;	O
next	*(char)
=	O
0	int
;	O
while	O
(	O
next	*(char)
<	O
len	int
&&	O
got	int
<	O
4	int
)	O
{	O
if	O
(	O
(	O
int	O
)	O
(	O
buf	*(void)
[	O
next	*(char)
]	O
)	O
==	O
(	O
got	int
<	O
2	int
?	O
0	int
:	O
0xff	int
)	O
)	O
got	int
++	O
;	O
else	O
if	O
(	O
buf	*(void)
[	O
next	*(char)
]	O
)	O
got	int
=	O
0	int
;	O
else	O
got	int
=	O
4	int
-	O
got	int
;	O
next	*(char)
++	O
;	O
}	O
*	O
have	int
=	O
got	int
;	O
return	O
next	*(char)
;	O
}	O
int	O
ZEXPORT	O
inflateSync	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
)	O
z_streamp	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
;	O
{	O
unsigned	O
len	int
;	O
unsigned	O
long	O
in	*((*(void),*(*(char)))->(int))
,	O
out	*((*(void),*(char),int)->(int))
;	O
unsigned	O
char	O
buf	*(void)
[	O
4	int
]	O
;	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
state	*(struct)
;	O
if	O
(	O
inflateStateCheck	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
)	O
)	O
return	O
Z_STREAM_ERROR	O
;	O
state	*(struct)
=	O
(	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
)	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
state	*(struct)
;	O
if	O
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
avail_in	int
==	O
0	int
&&	O
state	*(struct)
->	O
bits	*(int)
<	O
8	int
)	O
return	O
Z_BUF_ERROR	O
;	O
if	O
(	O
state	*(struct)
->	O
mode	*(char)
!=	O
SYNC	int
)	O
{	O
state	*(struct)
->	O
mode	*(char)
=	O
SYNC	int
;	O
state	*(struct)
->	O
hold	long
<<=	O
state	*(struct)
->	O
bits	*(int)
&	O
7	int
;	O
state	*(struct)
->	O
bits	*(int)
-=	O
state	*(struct)
->	O
bits	*(int)
&	O
7	int
;	O
len	int
=	O
0	int
;	O
while	O
(	O
state	*(struct)
->	O
bits	*(int)
>=	O
8	int
)	O
{	O
buf	*(void)
[	O
len	int
++	O
]	O
=	O
(	O
unsigned	O
char	O
)	O
(	O
state	*(struct)
->	O
hold	long
)	O
;	O
state	*(struct)
->	O
hold	long
>>=	O
8	int
;	O
state	*(struct)
->	O
bits	*(int)
-=	O
8	int
;	O
}	O
state	*(struct)
->	O
have	int
=	O
0	int
;	O
syncsearch	(*(int),*(char),int)->(int)
(	O
&	O
(	O
state	*(struct)
->	O
have	int
)	O
,	O
buf	*(void)
,	O
len	int
)	O
;	O
}	O
len	int
=	O
syncsearch	(*(int),*(char),int)->(int)
(	O
&	O
(	O
state	*(struct)
->	O
have	int
)	O
,	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
next_in	*(char)
,	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
avail_in	int
)	O
;	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
avail_in	int
-=	O
len	int
;	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
next_in	*(char)
+=	O
len	int
;	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
total_in	long
+=	O
len	int
;	O
if	O
(	O
state	*(struct)
->	O
have	int
!=	O
4	int
)	O
return	O
Z_DATA_ERROR	O
;	O
in	*((*(void),*(*(char)))->(int))
=	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
total_in	long
;	O
out	*((*(void),*(char),int)->(int))
=	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
total_out	long
;	O
inflateReset	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
)	O
;	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
total_in	long
=	O
in	*((*(void),*(*(char)))->(int))
;	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
total_out	long
=	O
out	*((*(void),*(char),int)->(int))
;	O
state	*(struct)
->	O
mode	*(char)
=	O
TYPE	int
;	O
return	O
Z_OK	int
;	O
}	O
int	O
ZEXPORT	O
inflateSyncPoint	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
)	O
z_streamp	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
;	O
{	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
state	*(struct)
;	O
if	O
(	O
inflateStateCheck	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
)	O
)	O
return	O
Z_STREAM_ERROR	O
;	O
state	*(struct)
=	O
(	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
)	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
state	*(struct)
;	O
return	O
state	*(struct)
->	O
mode	*(char)
==	O
STORED	int
&&	O
state	*(struct)
->	O
bits	*(int)
==	O
0	int
;	O
}	O
int	O
ZEXPORT	O
inflateCopy	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)),*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))->(int)
(	O
dest	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
,	O
source	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
)	O
z_streamp	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
dest	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
;	O
z_streamp	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
source	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
;	O
{	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
state	*(struct)
;	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
copy	int
;	O
unsigned	O
char	O
FAR	O
*	O
window	*(char)
;	O
unsigned	O
wsize	int
;	O
if	O
(	O
inflateStateCheck	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))->(int)
(	O
source	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
)	O
||	O
dest	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
==	O
Z_NULL	int
)	O
return	O
Z_STREAM_ERROR	O
;	O
state	*(struct)
=	O
(	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
)	O
source	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
state	*(struct)
;	O
copy	int
=	O
(	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
)	O
ZALLOC	O
(	O
source	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
,	O
1	int
,	O
sizeof	O
(	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
)	O
)	O
;	O
if	O
(	O
copy	int
==	O
Z_NULL	int
)	O
return	O
Z_MEM_ERROR	O
;	O
window	*(char)
=	O
Z_NULL	int
;	O
if	O
(	O
state	*(struct)
->	O
window	*(char)
!=	O
Z_NULL	int
)	O
{	O
window	*(char)
=	O
(	O
unsigned	O
char	O
FAR	O
*	O
)	O
ZALLOC	O
(	O
source	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
,	O
1U	int
<<	O
state	*(struct)
->	O
wbits	int
,	O
sizeof	O
(	O
unsigned	O
char	O
)	O
)	O
;	O
if	O
(	O
window	*(char)
==	O
Z_NULL	int
)	O
{	O
ZFREE	O
(	O
source	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
,	O
copy	int
)	O
;	O
return	O
Z_MEM_ERROR	O
;	O
}	O
}	O
zmemcpy	O
(	O
(	O
voidpf	*(void)
)	O
dest	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
,	O
(	O
voidpf	*(void)
)	O
source	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
,	O
sizeof	O
(	O
z_stream	struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)
)	O
)	O
;	O
zmemcpy	O
(	O
(	O
voidpf	*(void)
)	O
copy	int
,	O
(	O
voidpf	*(void)
)	O
state	*(struct)
,	O
sizeof	O
(	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
)	O
)	O
;	O
copy	int
->	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
=	O
dest	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
;	O
if	O
(	O
state	*(struct)
->	O
lencode	*(struct(char,char,short))
>=	O
state	*(struct)
->	O
codes	int
&&	O
state	*(struct)
->	O
lencode	*(struct(char,char,short))
<=	O
state	*(struct)
->	O
codes	int
+	O
ENOUGH	O
-	O
1	int
)	O
{	O
copy	int
->	O
lencode	*(struct(char,char,short))
=	O
copy	int
->	O
codes	int
+	O
(	O
state	*(struct)
->	O
lencode	*(struct(char,char,short))
-	O
state	*(struct)
->	O
codes	int
)	O
;	O
copy	int
->	O
distcode	*(struct(char,char,short))
=	O
copy	int
->	O
codes	int
+	O
(	O
state	*(struct)
->	O
distcode	*(struct(char,char,short))
-	O
state	*(struct)
->	O
codes	int
)	O
;	O
}	O
copy	int
->	O
next	*(char)
=	O
copy	int
->	O
codes	int
+	O
(	O
state	*(struct)
->	O
next	*(char)
-	O
state	*(struct)
->	O
codes	int
)	O
;	O
if	O
(	O
window	*(char)
!=	O
Z_NULL	int
)	O
{	O
wsize	int
=	O
1U	int
<<	O
state	*(struct)
->	O
wbits	int
;	O
zmemcpy	O
(	O
window	*(char)
,	O
state	*(struct)
->	O
window	*(char)
,	O
wsize	int
)	O
;	O
}	O
copy	int
->	O
window	*(char)
=	O
window	*(char)
;	O
dest	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
state	*(struct)
=	O
(	O
struct	O
internal_state	O
FAR	O
*	O
)	O
copy	int
;	O
return	O
Z_OK	int
;	O
}	O
int	O
ZEXPORT	O
inflateUndermine	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)),int)->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
,	O
subvert	int
)	O
z_streamp	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
;	O
int	O
subvert	int
;	O
{	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
state	*(struct)
;	O
if	O
(	O
inflateStateCheck	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
)	O
)	O
return	O
Z_STREAM_ERROR	O
;	O
state	*(struct)
=	O
(	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
)	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
state	*(struct)
;	O
(	O
void	O
)	O
subvert	int
;	O
state	*(struct)
->	O
sane	int
=	O
1	int
;	O
return	O
Z_DATA_ERROR	O
;	O
}	O
int	O
ZEXPORT	O
inflateValidate	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)),int)->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
,	O
check	long
)	O
z_streamp	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
;	O
int	O
check	long
;	O
{	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
state	*(struct)
;	O
if	O
(	O
inflateStateCheck	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
)	O
)	O
return	O
Z_STREAM_ERROR	O
;	O
state	*(struct)
=	O
(	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
)	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
state	*(struct)
;	O
if	O
(	O
check	long
)	O
state	*(struct)
->	O
wrap	int
|=	O
4	int
;	O
else	O
state	*(struct)
->	O
wrap	int
&=	O
~	O
4	int
;	O
return	O
Z_OK	int
;	O
}	O
long	O
ZEXPORT	O
inflateMark	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))->(long)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
)	O
z_streamp	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
;	O
{	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
state	*(struct)
;	O
if	O
(	O
inflateStateCheck	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
)	O
)	O
return	O
-	O
(	O
1L	int
<<	O
16	int
)	O
;	O
state	*(struct)
=	O
(	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
)	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
state	*(struct)
;	O
return	O
(	O
long	O
)	O
(	O
(	O
(	O
unsigned	O
long	O
)	O
(	O
(	O
long	O
)	O
state	*(struct)
->	O
back	int
)	O
)	O
<<	O
16	int
)	O
+	O
(	O
state	*(struct)
->	O
mode	*(char)
==	O
COPY	int
?	O
state	*(struct)
->	O
length	int
:	O
(	O
state	*(struct)
->	O
mode	*(char)
==	O
MATCH	int
?	O
state	*(struct)
->	O
was	int
-	O
state	*(struct)
->	O
length	int
:	O
0	int
)	O
)	O
;	O
}	O
unsigned	O
long	O
ZEXPORT	O
inflateCodesUsed	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))->(long)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
)	O
z_streamp	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
;	O
{	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
state	*(struct)
;	O
if	O
(	O
inflateStateCheck	(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*`,int,int)->(*`)),*((*`,*`)->(void)),*(void),int,long,long)))->(int)
(	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
)	O
)	O
return	O
(	O
unsigned	O
long	O
)	O
-	O
1	int
;	O
state	*(struct)
=	O
(	O
struct	O
inflate_state	struct(*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,long,long,*(struct(int,long,int,int,*(char),int,int,*(char),int,*(char),int,int,int)),int,int,int,int,*(char),long,int,int,int,int,*(struct(char,char,short)),*(struct(char,char,short)),int,int,int,int,int,int,*(struct(char,char,short)),array(short),array(short),array(struct(char,char,short)),int,int,int)
FAR	O
*	O
)	O
strm	*(struct(*(char),int,long,*(char),int,long,*(char),*(struct),*((*(void),int,int)->(*(void))),*((*(void),*(void))->(void)),*(void),int,long,long))
->	O
state	*(struct)
;	O
return	O
(	O
unsigned	O
long	O
)	O
(	O
state	*(struct)
->	O
next	*(char)
-	O
state	*(struct)
->	O
codes	int
)	O
;	O
}	O
