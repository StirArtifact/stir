enum	O
format_arg_type	O
{	O
FAT_NONE	O
=	O
0	int
,	O
FAT_INTEGER	O
=	O
1	int
,	O
FAT_DOUBLE	O
=	O
2	int
,	O
FAT_CHAR	O
=	O
3	int
,	O
FAT_STRING	O
=	O
4	int
,	O
FAT_SCALAR_VECTOR	O
=	O
5	int
,	O
FAT_POINTER	O
=	O
6	int
,	O
FAT_COUNT_POINTER	O
=	O
7	int
,	O
FAT_UNSIGNED	O
=	O
1	int
<<	O
3	int
,	O
FAT_SIZE_SHORT	O
=	O
1	int
<<	O
4	int
,	O
FAT_SIZE_V	O
=	O
2	int
<<	O
4	int
,	O
FAT_SIZE_PTR	O
=	O
3	int
<<	O
4	int
,	O
FAT_SIZE_LONG	O
=	O
4	int
<<	O
4	int
,	O
FAT_SIZE_LONGLONG	O
=	O
5	int
<<	O
4	int
,	O
FAT_SIZE_MASK	O
=	O
(	O
FAT_SIZE_SHORT	O
|	O
FAT_SIZE_V	O
|	O
FAT_SIZE_PTR	O
|	O
FAT_SIZE_LONG	O
|	O
FAT_SIZE_LONGLONG	O
)	O
}	O
;	O
typedef	O
enum	O
format_arg_type	O
format_arg_type_t	O
;	O
struct	O
numbered_arg	O
{	O
unsigned	O
int	O
number	O
;	O
format_arg_type_t	O
type	O
;	O
}	O
;	O
struct	O
spec	O
{	O
unsigned	O
int	O
directives	O
;	O
unsigned	O
int	O
numbered_arg_count	O
;	O
unsigned	O
int	O
allocated	O
;	O
struct	O
numbered_arg	O
*	O
numbered	O
;	O
}	O
;	O
static	O
int	O
numbered_arg_compare	O
(	O
const	O
void	O
*	O
p1	O
,	O
const	O
void	O
*	O
p2	O
)	O
{	O
unsigned	O
int	O
n1	O
=	O
(	O
(	O
const	O
struct	O
numbered_arg	O
*	O
)	O
p1	O
)	O
->	O
number	O
;	O
unsigned	O
int	O
n2	O
=	O
(	O
(	O
const	O
struct	O
numbered_arg	O
*	O
)	O
p2	O
)	O
->	O
number	O
;	O
return	O
(	O
n1	O
>	O
n2	O
?	O
1	int
:	O
n1	O
<	O
n2	O
?	O
-	O
1	int
:	O
0	int
)	O
;	O
}	O
static	O
void	O
*	O
format_parse	O
(	O
const	O
char	O
*	O
format	O
,	O
bool	bool
translated	O
,	O
char	O
*	O
fdi	O
,	O
char	O
*	O
*	O
invalid_reason	O
)	O
{	O
const	O
char	O
*	O
const	O
format_start	O
=	O
format	O
;	O
unsigned	O
int	O
directives	O
;	O
unsigned	O
int	O
numbered_arg_count	O
;	O
unsigned	O
int	O
allocated	O
;	O
struct	O
numbered_arg	O
*	O
numbered	O
;	O
unsigned	O
int	O
unnumbered_arg_count	O
;	O
struct	O
spec	O
*	O
result	*(*(void))
;	O
directives	O
=	O
0	int
;	O
numbered_arg_count	O
=	O
0	int
;	O
unnumbered_arg_count	O
=	O
0	int
;	O
allocated	O
=	O
0	int
;	O
numbered	O
=	O
NULL	O
;	O
for	O
(	O
;	O
*	O
format	O
!=	O
'\0'	O
;	O
)	O
if	O
(	O
*	O
format	O
++	O
==	O
'%'	O
)	O
{	O
unsigned	O
int	O
number	O
=	O
0	int
;	O
bool	bool
vectorize	O
=	O
false	O
;	O
format_arg_type_t	O
type	O
;	O
format_arg_type_t	O
size	long
;	O
FDI_SET	O
(	O
format	O
-	O
1	int
,	O
FMTDIR_START	O
)	O
;	O
directives	O
++	O
;	O
if	O
(	O
isnonzerodigit	O
(	O
*	O
format	O
)	O
)	O
{	O
const	O
char	O
*	O
f	O
=	O
format	O
;	O
unsigned	O
int	O
m	O
=	O
0	int
;	O
do	O
{	O
m	O
=	O
10	int
*	O
m	O
+	O
(	O
*	O
f	O
-	O
'0'	O
)	O
;	O
f	O
++	O
;	O
}	O
while	O
(	O
isdigit	O
(	O
*	O
f	O
)	O
)	O
;	O
if	O
(	O
*	O
f	O
==	O
'$'	O
)	O
{	O
number	O
=	O
m	O
;	O
format	O
=	O
++	O
f	O
;	O
}	O
}	O
while	O
(	O
*	O
format	O
==	O
' '	O
||	O
*	O
format	O
==	O
'+'	O
||	O
*	O
format	O
==	O
'-'	O
||	O
*	O
format	O
==	O
'#'	O
||	O
*	O
format	O
==	O
'0'	O
)	O
format	O
++	O
;	O
if	O
(	O
*	O
format	O
==	O
'v'	O
)	O
{	O
format	O
++	O
;	O
vectorize	O
=	O
true	O
;	O
}	O
else	O
if	O
(	O
*	O
format	O
==	O
'*'	O
)	O
{	O
const	O
char	O
*	O
f	O
=	O
format	O
;	O
f	O
++	O
;	O
if	O
(	O
*	O
f	O
==	O
'v'	O
)	O
{	O
format	O
=	O
++	O
f	O
;	O
vectorize	O
=	O
true	O
;	O
if	O
(	O
allocated	O
==	O
numbered_arg_count	O
)	O
{	O
allocated	O
=	O
2	int
*	O
allocated	O
+	O
1	int
;	O
numbered	O
=	O
(	O
struct	O
numbered_arg	O
*	O
)	O
xrealloc	O
(	O
numbered	O
,	O
allocated	O
*	O
sizeof	O
(	O
struct	O
numbered_arg	O
)	O
)	O
;	O
}	O
numbered	O
[	O
numbered_arg_count	O
]	O
.	O
number	O
=	O
++	O
unnumbered_arg_count	O
;	O
numbered	O
[	O
numbered_arg_count	O
]	O
.	O
type	O
=	O
FAT_SCALAR_VECTOR	O
;	O
numbered_arg_count	O
++	O
;	O
}	O
else	O
if	O
(	O
isnonzerodigit	O
(	O
*	O
f	O
)	O
)	O
{	O
unsigned	O
int	O
m	O
=	O
0	int
;	O
do	O
{	O
m	O
=	O
10	int
*	O
m	O
+	O
(	O
*	O
f	O
-	O
'0'	O
)	O
;	O
f	O
++	O
;	O
}	O
while	O
(	O
isdigit	O
(	O
*	O
f	O
)	O
)	O
;	O
if	O
(	O
*	O
f	O
==	O
'$'	O
)	O
{	O
f	O
++	O
;	O
if	O
(	O
*	O
f	O
==	O
'v'	O
)	O
{	O
unsigned	O
int	O
vector_number	O
=	O
m	O
;	O
format	O
=	O
++	O
f	O
;	O
vectorize	O
=	O
true	O
;	O
if	O
(	O
allocated	O
==	O
numbered_arg_count	O
)	O
{	O
allocated	O
=	O
2	int
*	O
allocated	O
+	O
1	int
;	O
numbered	O
=	O
(	O
struct	O
numbered_arg	O
*	O
)	O
xrealloc	O
(	O
numbered	O
,	O
allocated	O
*	O
sizeof	O
(	O
struct	O
numbered_arg	O
)	O
)	O
;	O
}	O
numbered	O
[	O
numbered_arg_count	O
]	O
.	O
number	O
=	O
vector_number	O
;	O
numbered	O
[	O
numbered_arg_count	O
]	O
.	O
type	O
=	O
FAT_SCALAR_VECTOR	O
;	O
numbered_arg_count	O
++	O
;	O
}	O
}	O
}	O
}	O
if	O
(	O
vectorize	O
)	O
{	O
if	O
(	O
allocated	O
==	O
numbered_arg_count	O
)	O
{	O
allocated	O
=	O
2	int
*	O
allocated	O
+	O
1	int
;	O
numbered	O
=	O
(	O
struct	O
numbered_arg	O
*	O
)	O
xrealloc	O
(	O
numbered	O
,	O
allocated	O
*	O
sizeof	O
(	O
struct	O
numbered_arg	O
)	O
)	O
;	O
}	O
numbered	O
[	O
numbered_arg_count	O
]	O
.	O
number	O
=	O
(	O
number	O
?	O
number	O
:	O
++	O
unnumbered_arg_count	O
)	O
;	O
numbered	O
[	O
numbered_arg_count	O
]	O
.	O
type	O
=	O
FAT_SCALAR_VECTOR	O
;	O
numbered_arg_count	O
++	O
;	O
}	O
if	O
(	O
*	O
format	O
==	O
'*'	O
)	O
{	O
unsigned	O
int	O
width_number	O
=	O
0	int
;	O
format	O
++	O
;	O
if	O
(	O
isnonzerodigit	O
(	O
*	O
format	O
)	O
)	O
{	O
const	O
char	O
*	O
f	O
=	O
format	O
;	O
unsigned	O
int	O
m	O
=	O
0	int
;	O
do	O
{	O
m	O
=	O
10	int
*	O
m	O
+	O
(	O
*	O
f	O
-	O
'0'	O
)	O
;	O
f	O
++	O
;	O
}	O
while	O
(	O
isdigit	O
(	O
*	O
f	O
)	O
)	O
;	O
if	O
(	O
*	O
f	O
==	O
'$'	O
)	O
{	O
width_number	O
=	O
m	O
;	O
format	O
=	O
++	O
f	O
;	O
}	O
}	O
if	O
(	O
allocated	O
==	O
numbered_arg_count	O
)	O
{	O
allocated	O
=	O
2	int
*	O
allocated	O
+	O
1	int
;	O
numbered	O
=	O
(	O
struct	O
numbered_arg	O
*	O
)	O
xrealloc	O
(	O
numbered	O
,	O
allocated	O
*	O
sizeof	O
(	O
struct	O
numbered_arg	O
)	O
)	O
;	O
}	O
numbered	O
[	O
numbered_arg_count	O
]	O
.	O
number	O
=	O
(	O
width_number	O
?	O
width_number	O
:	O
++	O
unnumbered_arg_count	O
)	O
;	O
numbered	O
[	O
numbered_arg_count	O
]	O
.	O
type	O
=	O
FAT_INTEGER	O
;	O
numbered_arg_count	O
++	O
;	O
}	O
else	O
if	O
(	O
isnonzerodigit	O
(	O
*	O
format	O
)	O
)	O
{	O
do	O
format	O
++	O
;	O
while	O
(	O
isdigit	O
(	O
*	O
format	O
)	O
)	O
;	O
}	O
if	O
(	O
*	O
format	O
==	O
'.'	O
)	O
{	O
format	O
++	O
;	O
if	O
(	O
*	O
format	O
==	O
'*'	O
)	O
{	O
unsigned	O
int	O
precision_number	O
=	O
0	int
;	O
format	O
++	O
;	O
if	O
(	O
isnonzerodigit	O
(	O
*	O
format	O
)	O
)	O
{	O
const	O
char	O
*	O
f	O
=	O
format	O
;	O
unsigned	O
int	O
m	O
=	O
0	int
;	O
do	O
{	O
m	O
=	O
10	int
*	O
m	O
+	O
(	O
*	O
f	O
-	O
'0'	O
)	O
;	O
f	O
++	O
;	O
}	O
while	O
(	O
isdigit	O
(	O
*	O
f	O
)	O
)	O
;	O
if	O
(	O
*	O
f	O
==	O
'$'	O
)	O
{	O
precision_number	O
=	O
m	O
;	O
format	O
=	O
++	O
f	O
;	O
}	O
}	O
if	O
(	O
allocated	O
==	O
numbered_arg_count	O
)	O
{	O
allocated	O
=	O
2	int
*	O
allocated	O
+	O
1	int
;	O
numbered	O
=	O
(	O
struct	O
numbered_arg	O
*	O
)	O
xrealloc	O
(	O
numbered	O
,	O
allocated	O
*	O
sizeof	O
(	O
struct	O
numbered_arg	O
)	O
)	O
;	O
}	O
numbered	O
[	O
numbered_arg_count	O
]	O
.	O
number	O
=	O
(	O
precision_number	O
?	O
precision_number	O
:	O
++	O
unnumbered_arg_count	O
)	O
;	O
numbered	O
[	O
numbered_arg_count	O
]	O
.	O
type	O
=	O
FAT_INTEGER	O
;	O
numbered_arg_count	O
++	O
;	O
}	O
else	O
{	O
while	O
(	O
isdigit	O
(	O
*	O
format	O
)	O
)	O
format	O
++	O
;	O
}	O
}	O
size	long
=	O
0	int
;	O
if	O
(	O
*	O
format	O
==	O
'h'	O
)	O
{	O
size	long
=	O
FAT_SIZE_SHORT	O
;	O
format	O
++	O
;	O
}	O
else	O
if	O
(	O
*	O
format	O
==	O
'l'	O
)	O
{	O
if	O
(	O
format	O
[	O
1	int
]	O
==	O
'l'	O
)	O
{	O
size	long
=	O
FAT_SIZE_LONGLONG	O
;	O
format	O
+=	O
2	int
;	O
}	O
else	O
{	O
size	long
=	O
FAT_SIZE_LONG	O
;	O
format	O
++	O
;	O
}	O
}	O
else	O
if	O
(	O
*	O
format	O
==	O
'L'	O
||	O
*	O
format	O
==	O
'q'	O
)	O
{	O
size	long
=	O
FAT_SIZE_LONGLONG	O
;	O
format	O
++	O
;	O
}	O
else	O
if	O
(	O
*	O
format	O
==	O
'V'	O
)	O
{	O
size	long
=	O
FAT_SIZE_V	O
;	O
format	O
++	O
;	O
}	O
else	O
if	O
(	O
*	O
format	O
==	O
'I'	O
)	O
{	O
if	O
(	O
format	O
[	O
1	int
]	O
==	O
'6'	O
&&	O
format	O
[	O
2	int
]	O
==	O
'4'	O
)	O
{	O
size	long
=	O
FAT_SIZE_LONGLONG	O
;	O
format	O
+=	O
3	int
;	O
}	O
else	O
if	O
(	O
format	O
[	O
1	int
]	O
==	O
'3'	O
&&	O
format	O
[	O
2	int
]	O
==	O
'2'	O
)	O
{	O
size	long
=	O
0	int
;	O
format	O
+=	O
3	int
;	O
}	O
else	O
{	O
size	long
=	O
FAT_SIZE_PTR	O
;	O
format	O
++	O
;	O
}	O
}	O
switch	O
(	O
*	O
format	O
)	O
{	O
case	O
'%'	O
:	O
type	O
=	O
FAT_NONE	O
;	O
break	O
;	O
case	O
'c'	O
:	O
type	O
=	O
FAT_CHAR	O
;	O
break	O
;	O
case	O
's'	O
:	O
type	O
=	O
FAT_STRING	O
;	O
break	O
;	O
case	O
'_'	O
:	O
type	O
=	O
FAT_SCALAR_VECTOR	O
;	O
break	O
;	O
case	O
'D'	O
:	O
type	O
=	O
FAT_INTEGER	O
|	O
FAT_SIZE_V	O
;	O
break	O
;	O
case	O
'i'	O
:	O
case	O
'd'	O
:	O
type	O
=	O
FAT_INTEGER	O
|	O
size	long
;	O
break	O
;	O
case	O
'U'	O
:	O
case	O
'O'	O
:	O
type	O
=	O
FAT_INTEGER	O
|	O
FAT_UNSIGNED	O
|	O
FAT_SIZE_V	O
;	O
break	O
;	O
case	O
'u'	O
:	O
case	O
'b'	O
:	O
case	O
'o'	O
:	O
case	O
'x'	O
:	O
case	O
'X'	O
:	O
type	O
=	O
FAT_INTEGER	O
|	O
FAT_UNSIGNED	O
|	O
size	long
;	O
break	O
;	O
case	O
'e'	O
:	O
case	O
'E'	O
:	O
case	O
'f'	O
:	O
case	O
'F'	O
:	O
case	O
'g'	O
:	O
case	O
'G'	O
:	O
if	O
(	O
size	long
==	O
FAT_SIZE_SHORT	O
||	O
size	long
==	O
FAT_SIZE_LONG	O
)	O
{	O
*	O
invalid_reason	O
=	O
xasprintf	O
(	O
_	O
(	O
"In the directive number %u, the size specifier is incompatible with the conversion specifier '%c'."	*(char)
)	O
,	O
directives	O
,	O
*	O
format	O
)	O
;	O
FDI_SET	O
(	O
format	O
,	O
FMTDIR_ERROR	O
)	O
;	O
goto	O
bad_format	O
;	O
}	O
type	O
=	O
FAT_DOUBLE	O
|	O
size	long
;	O
break	O
;	O
case	O
'p'	O
:	O
type	O
=	O
FAT_POINTER	O
;	O
break	O
;	O
case	O
'n'	O
:	O
type	O
=	O
FAT_COUNT_POINTER	O
|	O
size	long
;	O
break	O
;	O
default	O
:	O
if	O
(	O
*	O
format	O
==	O
'\0'	O
)	O
{	O
*	O
invalid_reason	O
=	O
INVALID_UNTERMINATED_DIRECTIVE	O
(	O
)	O
;	O
FDI_SET	O
(	O
format	O
-	O
1	int
,	O
FMTDIR_ERROR	O
)	O
;	O
}	O
else	O
{	O
*	O
invalid_reason	O
=	O
INVALID_CONVERSION_SPECIFIER	O
(	O
directives	O
,	O
*	O
format	O
)	O
;	O
FDI_SET	O
(	O
format	O
,	O
FMTDIR_ERROR	O
)	O
;	O
}	O
goto	O
bad_format	O
;	O
}	O
if	O
(	O
type	O
!=	O
FAT_NONE	O
&&	O
!	O
vectorize	O
)	O
{	O
if	O
(	O
allocated	O
==	O
numbered_arg_count	O
)	O
{	O
allocated	O
=	O
2	int
*	O
allocated	O
+	O
1	int
;	O
numbered	O
=	O
(	O
struct	O
numbered_arg	O
*	O
)	O
xrealloc	O
(	O
numbered	O
,	O
allocated	O
*	O
sizeof	O
(	O
struct	O
numbered_arg	O
)	O
)	O
;	O
}	O
numbered	O
[	O
numbered_arg_count	O
]	O
.	O
number	O
=	O
(	O
number	O
?	O
number	O
:	O
++	O
unnumbered_arg_count	O
)	O
;	O
numbered	O
[	O
numbered_arg_count	O
]	O
.	O
type	O
=	O
type	O
;	O
numbered_arg_count	O
++	O
;	O
}	O
FDI_SET	O
(	O
format	O
,	O
FMTDIR_END	O
)	O
;	O
format	O
++	O
;	O
}	O
if	O
(	O
numbered_arg_count	O
>	O
1	int
)	O
{	O
unsigned	O
int	O
i	long
,	O
j	O
;	O
bool	bool
err	O
;	O
qsort	(*(void),long,long,*((*(void),*(void))->(int)))->(void)
(	O
numbered	O
,	O
numbered_arg_count	O
,	O
sizeof	O
(	O
struct	O
numbered_arg	O
)	O
,	O
numbered_arg_compare	O
)	O
;	O
err	O
=	O
false	O
;	O
for	O
(	O
i	long
=	O
j	O
=	O
0	int
;	O
i	long
<	O
numbered_arg_count	O
;	O
i	long
++	O
)	O
if	O
(	O
j	O
>	O
0	int
&&	O
numbered	O
[	O
i	long
]	O
.	O
number	O
==	O
numbered	O
[	O
j	O
-	O
1	int
]	O
.	O
number	O
)	O
{	O
format_arg_type_t	O
type1	O
=	O
numbered	O
[	O
i	long
]	O
.	O
type	O
;	O
format_arg_type_t	O
type2	O
=	O
numbered	O
[	O
j	O
-	O
1	int
]	O
.	O
type	O
;	O
format_arg_type_t	O
type_both	O
;	O
if	O
(	O
type1	O
==	O
type2	O
)	O
type_both	O
=	O
type1	O
;	O
else	O
{	O
type_both	O
=	O
FAT_NONE	O
;	O
if	O
(	O
!	O
err	O
)	O
*	O
invalid_reason	O
=	O
INVALID_INCOMPATIBLE_ARG_TYPES	O
(	O
numbered	O
[	O
i	long
]	O
.	O
number	O
)	O
;	O
err	O
=	O
true	O
;	O
}	O
numbered	O
[	O
j	O
-	O
1	int
]	O
.	O
type	O
=	O
type_both	O
;	O
}	O
else	O
{	O
if	O
(	O
j	O
<	O
i	long
)	O
{	O
numbered	O
[	O
j	O
]	O
.	O
number	O
=	O
numbered	O
[	O
i	long
]	O
.	O
number	O
;	O
numbered	O
[	O
j	O
]	O
.	O
type	O
=	O
numbered	O
[	O
i	long
]	O
.	O
type	O
;	O
}	O
j	O
++	O
;	O
}	O
numbered_arg_count	O
=	O
j	O
;	O
if	O
(	O
err	O
)	O
goto	O
bad_format	O
;	O
}	O
result	*(*(void))
=	O
XMALLOC	O
(	O
struct	O
spec	O
)	O
;	O
result	*(*(void))
->	O
directives	O
=	O
directives	O
;	O
result	*(*(void))
->	O
numbered_arg_count	O
=	O
numbered_arg_count	O
;	O
result	*(*(void))
->	O
allocated	O
=	O
allocated	O
;	O
result	*(*(void))
->	O
numbered	O
=	O
numbered	O
;	O
return	O
result	*(*(void))
;	O
bad_format	O
:	O
if	O
(	O
numbered	O
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
numbered	O
)	O
;	O
return	O
NULL	O
;	O
}	O
static	O
void	O
format_free	O
(	O
void	O
*	O
descr	O
)	O
{	O
struct	O
spec	O
*	O
spec	O
=	O
(	O
struct	O
spec	O
*	O
)	O
descr	O
;	O
if	O
(	O
spec	O
->	O
numbered	O
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
spec	O
->	O
numbered	O
)	O
;	O
free	(*(void))->(void)
(	O
spec	O
)	O
;	O
}	O
static	O
int	O
format_get_number_of_directives	O
(	O
void	O
*	O
descr	O
)	O
{	O
struct	O
spec	O
*	O
spec	O
=	O
(	O
struct	O
spec	O
*	O
)	O
descr	O
;	O
return	O
spec	O
->	O
directives	O
;	O
}	O
static	O
bool	bool
format_check	O
(	O
void	O
*	O
msgid_descr	O
,	O
void	O
*	O
msgstr_descr	O
,	O
bool	bool
equality	O
,	O
formatstring_error_logger_t	O
error_logger	O
,	O
const	O
char	O
*	O
pretty_msgid	O
,	O
const	O
char	O
*	O
pretty_msgstr	O
)	O
{	O
struct	O
spec	O
*	O
spec1	O
=	O
(	O
struct	O
spec	O
*	O
)	O
msgid_descr	O
;	O
struct	O
spec	O
*	O
spec2	O
=	O
(	O
struct	O
spec	O
*	O
)	O
msgstr_descr	O
;	O
bool	bool
err	O
=	O
false	O
;	O
if	O
(	O
spec1	O
->	O
numbered_arg_count	O
+	O
spec2	O
->	O
numbered_arg_count	O
>	O
0	int
)	O
{	O
unsigned	O
int	O
i	long
,	O
j	O
;	O
unsigned	O
int	O
n1	O
=	O
spec1	O
->	O
numbered_arg_count	O
;	O
unsigned	O
int	O
n2	O
=	O
spec2	O
->	O
numbered_arg_count	O
;	O
for	O
(	O
i	long
=	O
0	int
,	O
j	O
=	O
0	int
;	O
i	long
<	O
n1	O
||	O
j	O
<	O
n2	O
;	O
)	O
{	O
int	O
cmp	O
=	O
(	O
i	long
>=	O
n1	O
?	O
1	int
:	O
j	O
>=	O
n2	O
?	O
-	O
1	int
:	O
spec1	O
->	O
numbered	O
[	O
i	long
]	O
.	O
number	O
>	O
spec2	O
->	O
numbered	O
[	O
j	O
]	O
.	O
number	O
?	O
1	int
:	O
spec1	O
->	O
numbered	O
[	O
i	long
]	O
.	O
number	O
<	O
spec2	O
->	O
numbered	O
[	O
j	O
]	O
.	O
number	O
?	O
-	O
1	int
:	O
0	int
)	O
;	O
if	O
(	O
cmp	O
>	O
0	int
)	O
{	O
if	O
(	O
error_logger	O
)	O
error_logger	O
(	O
_	O
(	O
"a format specification for argument %u, as in '%s', doesn't exist in '%s'"	*(char)
)	O
,	O
spec2	O
->	O
numbered	O
[	O
j	O
]	O
.	O
number	O
,	O
pretty_msgstr	O
,	O
pretty_msgid	O
)	O
;	O
err	O
=	O
true	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
cmp	O
<	O
0	int
)	O
{	O
if	O
(	O
equality	O
)	O
{	O
if	O
(	O
error_logger	O
)	O
error_logger	O
(	O
_	O
(	O
"a format specification for argument %u doesn't exist in '%s'"	*(char)
)	O
,	O
spec1	O
->	O
numbered	O
[	O
i	long
]	O
.	O
number	O
,	O
pretty_msgstr	O
)	O
;	O
err	O
=	O
true	O
;	O
break	O
;	O
}	O
else	O
i	long
++	O
;	O
}	O
else	O
j	O
++	O
,	O
i	long
++	O
;	O
}	O
if	O
(	O
!	O
err	O
)	O
for	O
(	O
i	long
=	O
0	int
,	O
j	O
=	O
0	int
;	O
j	O
<	O
n2	O
;	O
)	O
{	O
if	O
(	O
spec1	O
->	O
numbered	O
[	O
i	long
]	O
.	O
number	O
==	O
spec2	O
->	O
numbered	O
[	O
j	O
]	O
.	O
number	O
)	O
{	O
if	O
(	O
spec1	O
->	O
numbered	O
[	O
i	long
]	O
.	O
type	O
!=	O
spec2	O
->	O
numbered	O
[	O
j	O
]	O
.	O
type	O
)	O
{	O
if	O
(	O
error_logger	O
)	O
error_logger	O
(	O
_	O
(	O
"format specifications in '%s' and '%s' for argument %u are not the same"	*(char)
)	O
,	O
pretty_msgid	O
,	O
pretty_msgstr	O
,	O
spec2	O
->	O
numbered	O
[	O
j	O
]	O
.	O
number	O
)	O
;	O
err	O
=	O
true	O
;	O
break	O
;	O
}	O
j	O
++	O
,	O
i	long
++	O
;	O
}	O
else	O
i	long
++	O
;	O
}	O
}	O
return	O
err	O
;	O
}	O
struct	O
formatstring_parser	O
formatstring_perl	O
=	O
{	O
format_parse	O
,	O
format_free	O
,	O
format_get_number_of_directives	O
,	O
NULL	O
,	O
format_check	O
}	O
;	O
