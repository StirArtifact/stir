;	O
struct	O
val_ctr	struct(*(struct),long,long)
{	O
mu_header_t	*(struct)
hdr	*(struct)
;	O
size_t	long
limit	long
;	O
size_t	long
count	long
;	O
}	O
;	O
static	O
int	O
_count_items	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
)	O
{	O
char	O
*	O
name	*(char)
=	O
item	*(void)
;	O
struct	O
val_ctr	struct(*(struct),long,long)
*	O
vp	*(struct(*(struct),long,long))
=	O
data	*(void)
;	O
char	O
*	O
val	*(char)
;	O
mu_address_t	*(struct)
addr	int
;	O
size_t	long
count	long
=	O
0	int
;	O
if	O
(	O
mu_header_aget_value	O
(	O
vp	*(struct(*(struct),long,long))
->	O
hdr	*(struct)
,	O
name	*(char)
,	O
&	O
val	*(char)
)	O
)	O
return	O
0	int
;	O
if	O
(	O
mu_address_create	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(char))->(int)
(	O
&	O
addr	int
,	O
val	*(char)
)	O
==	O
0	int
)	O
{	O
mu_address_get_count	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(long))->(int)
(	O
addr	int
,	O
&	O
count	long
)	O
;	O
mu_address_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(void)
(	O
&	O
addr	int
)	O
;	O
vp	*(struct(*(struct),long,long))
->	O
count	long
+=	O
count	long
;	O
}	O
free	(*(void))->(void)
(	O
val	*(char)
)	O
;	O
return	O
vp	*(struct(*(struct),long,long))
->	O
count	long
>=	O
vp	*(struct(*(struct),long,long))
->	O
limit	long
;	O
}	O
static	O
int	O
numaddr_test	(*(struct))->(int)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
)	O
{	O
mu_sieve_value_t	struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long)))
*	O
h	*(struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long))))
;	O
struct	O
val_ctr	struct(*(struct),long,long)
vc	struct(*(struct),long,long)
;	O
int	O
rc	int
;	O
h	*(struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long))))
=	O
mu_sieve_get_arg_untyped	(*(struct),long)->(*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))))
(	O
mach	*(struct)
,	O
0	int
)	O
;	O
mu_sieve_get_arg	(*(struct),long,enum(int,int,int,int,int),*(void))->(void)
(	O
mach	*(struct)
,	O
1	int
,	O
SVT_NUMBER	int
,	O
&	O
vc	struct(*(struct),long,long)
.	O
limit	long
)	O
;	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
mu_sieve_get_message	(*(struct))->(*(struct))
(	O
mach	*(struct)
)	O
,	O
&	O
vc	struct(*(struct),long,long)
.	O
hdr	*(struct)
)	O
;	O
vc	struct(*(struct),long,long)
.	O
count	long
=	O
0	int
;	O
rc	int
=	O
mu_sieve_vlist_do	(*(struct),*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))),*((*(void),*(void))->(int)),*(void))->(int)
(	O
mach	*(struct)
,	O
h	*(struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long))))
,	O
_count_items	(*(void),*(void))->(int)
,	O
&	O
vc	struct(*(struct),long,long)
)	O
;	O
if	O
(	O
mu_sieve_get_tag	(*(struct),*(char),enum(int,int,int,int,int),*(void))->(int)
(	O
mach	*(struct)
,	O
"under"	*(char)
,	O
SVT_VOID	int
,	O
NULL	O
)	O
)	O
rc	int
=	O
!	O
rc	int
;	O
return	O
rc	int
;	O
}	O
static	O
mu_sieve_data_type	enum(int,int,int,int,int)
numaddr_req_args	array(enum(int,int,int,int,int))
[	O
]	O
=	O
{	O
SVT_STRING_LIST	int
,	O
SVT_NUMBER	int
,	O
SVT_VOID	int
}	O
;	O
static	O
mu_sieve_tag_def_t	struct(*(char),enum(int,int,int,int,int))
numaddr_tags	array(struct(*(char),enum(int,int,int,int,int)))
[	O
]	O
=	O
{	O
{	O
"over"	*(char)
,	O
SVT_VOID	int
}	O
,	O
{	O
"under"	*(char)
,	O
SVT_VOID	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
mu_sieve_tag_group_t	struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct))->(int)))
numaddr_tag_groups	array(struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct))->(int))))
[	O
]	O
=	O
{	O
{	O
numaddr_tags	array(struct(*(char),enum(int,int,int,int,int)))
,	O
NULL	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
int	O
SIEVE_EXPORT	O
(	O
numaddr	O
,	O
init	O
)	O
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
)	O
{	O
mu_sieve_register_test	(*(struct),*(char),*((*(struct))->(int)),*(enum(int,int,int,int,int)),*(struct(*(struct(*`,enum(int,int,int,int,int))),*((*`)->(int)))),int)->(void)
(	O
mach	*(struct)
,	O
"numaddr"	*(char)
,	O
numaddr_test	(*(struct))->(int)
,	O
numaddr_req_args	array(enum(int,int,int,int,int))
,	O
numaddr_tag_groups	array(struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct))->(int))))
,	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
