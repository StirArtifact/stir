struct	O
mailbox_iterator	struct(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int)))),long,int)
{	O
mu_mailbox_t	*(struct)
mbx	*(struct)
;	O
size_t	long
idx	long
;	O
int	O
backwards	int
;	O
}	O
;	O
static	O
int	O
mbx_first	(*(void))->(int)
(	O
void	O
*	O
owner	*(void)
)	O
{	O
struct	O
mailbox_iterator	struct(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int)))),long,int)
*	O
itr	*(struct)
=	O
owner	*(void)
;	O
if	O
(	O
itr	*(struct)
->	O
backwards	int
)	O
return	O
mu_mailbox_messages_count	(*(struct),*(long))->(int)
(	O
itr	*(struct)
->	O
mbx	*(struct)
,	O
&	O
itr	*(struct)
->	O
idx	long
)	O
;	O
else	O
itr	*(struct)
->	O
idx	long
=	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
mbx_next	(*(void))->(int)
(	O
void	O
*	O
owner	*(void)
)	O
{	O
struct	O
mailbox_iterator	struct(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int)))),long,int)
*	O
itr	*(struct)
=	O
owner	*(void)
;	O
if	O
(	O
itr	*(struct)
->	O
backwards	int
)	O
{	O
if	O
(	O
itr	*(struct)
->	O
idx	long
)	O
--	O
itr	*(struct)
->	O
idx	long
;	O
}	O
else	O
itr	*(struct)
->	O
idx	long
++	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
mbx_getitem	(*(void),*(*(void)),*(*(void)))->(int)
(	O
void	O
*	O
owner	*(void)
,	O
void	O
*	O
*	O
pret	*(*(void))
,	O
const	O
void	O
*	O
*	O
pkey	*(*(void))
)	O
{	O
struct	O
mailbox_iterator	struct(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int)))),long,int)
*	O
itr	*(struct)
=	O
owner	*(void)
;	O
size_t	long
count	long
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_mailbox_messages_count	(*(struct),*(long))->(int)
(	O
itr	*(struct)
->	O
mbx	*(struct)
,	O
&	O
count	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
itr	*(struct)
->	O
idx	long
>	O
count	long
)	O
return	O
MU_ERR_NOENT	O
;	O
rc	int
=	O
mu_mailbox_get_message	(*(struct),long,*(*(struct)))->(int)
(	O
itr	*(struct)
->	O
mbx	*(struct)
,	O
itr	*(struct)
->	O
idx	long
,	O
(	O
mu_message_t	*(struct)
*	O
)	O
pret	*(*(void))
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
&&	O
pkey	*(*(void))
)	O
*	O
pkey	*(*(void))
=	O
NULL	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
mbx_finished_p	(*(void))->(int)
(	O
void	O
*	O
owner	*(void)
)	O
{	O
struct	O
mailbox_iterator	struct(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int)))),long,int)
*	O
itr	*(struct)
=	O
owner	*(void)
;	O
if	O
(	O
itr	*(struct)
->	O
backwards	int
)	O
return	O
itr	*(struct)
->	O
idx	long
==	O
0	int
;	O
else	O
{	O
size_t	long
count	long
;	O
if	O
(	O
mu_mailbox_messages_count	(*(struct),*(long))->(int)
(	O
itr	*(struct)
->	O
mbx	*(struct)
,	O
&	O
count	long
)	O
)	O
return	O
1	int
;	O
return	O
itr	*(struct)
->	O
idx	long
>	O
count	long
;	O
}	O
}	O
static	O
int	O
mbx_destroy	(*(struct),*(void))->(int)
(	O
mu_iterator_t	*(struct)
iterator	*(struct)
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
mailbox_iterator	struct(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int)))),long,int)
*	O
itr	*(struct)
=	O
data	*(void)
;	O
mu_iterator_detach	(*(*(struct)),*(struct))->(int)
(	O
&	O
itr	*(struct)
->	O
mbx	*(struct)
->	O
iterator	*(struct)
,	O
iterator	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
data	*(void)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
mbx_delitem	(*(void),*(void))->(int)
(	O
void	O
*	O
owner	*(void)
,	O
void	O
*	O
item	*(void)
)	O
{	O
void	O
*	O
ptr	*(*(void))
;	O
if	O
(	O
mbx_getitem	(*(void),*(*(void)),*(*(void)))->(int)
(	O
owner	*(void)
,	O
&	O
ptr	*(*(void))
,	O
NULL	O
)	O
)	O
return	O
0	int
;	O
return	O
ptr	*(*(void))
==	O
item	*(void)
?	O
MU_ITR_DELITEM_NEXT	int
:	O
MU_ITR_DELITEM_NOTHING	int
;	O
}	O
static	O
int	O
mbx_data_dup	(*(*(void)),*(void))->(int)
(	O
void	O
*	O
*	O
ptr	*(*(void))
,	O
void	O
*	O
owner	*(void)
)	O
{	O
struct	O
mailbox_iterator	struct(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int)))),long,int)
*	O
itr	*(struct)
=	O
owner	*(void)
;	O
*	O
ptr	*(*(void))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
mailbox_iterator	struct(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int)))),long,int)
)	O
)	O
;	O
if	O
(	O
*	O
ptr	*(*(void))
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
*	O
ptr	*(*(void))
,	O
owner	*(void)
,	O
sizeof	O
(	O
struct	O
mailbox_iterator	struct(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int)))),long,int)
)	O
)	O
;	O
mu_iterator_attach	(*(*(struct)),*(struct))->(int)
(	O
&	O
itr	*(struct)
->	O
mbx	*(struct)
->	O
iterator	*(struct)
,	O
*	O
ptr	*(*(void))
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
mbx_itrctl	(*(void),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int)
(	O
void	O
*	O
owner	*(void)
,	O
enum	O
mu_itrctl_req	enum(int,int,int,int,int,int,int,int,int,int)
req	enum(int,int,int,int,int,int,int,int,int,int)
,	O
void	O
*	O
arg	*(char)
)	O
{	O
int	O
rc	int
;	O
struct	O
mailbox_iterator	struct(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int)))),long,int)
*	O
itr	*(struct)
=	O
owner	*(void)
;	O
mu_message_t	*(struct)
msg	*(struct)
;	O
mu_attribute_t	*(struct)
attr	*(struct)
;	O
if	O
(	O
itr	*(struct)
->	O
idx	long
==	O
0	int
)	O
return	O
MU_ERR_NOENT	O
;	O
switch	O
(	O
req	enum(int,int,int,int,int,int,int,int,int,int)
)	O
{	O
case	O
mu_itrctl_tell	int
:	O
*	O
(	O
size_t	long
*	O
)	O
arg	*(char)
=	O
itr	*(struct)
->	O
idx	long
;	O
break	O
;	O
case	O
mu_itrctl_delete	int
:	O
rc	int
=	O
mu_mailbox_get_message	(*(struct),long,*(*(struct)))->(int)
(	O
itr	*(struct)
->	O
mbx	*(struct)
,	O
itr	*(struct)
->	O
idx	long
,	O
&	O
msg	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_message_get_attribute	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
attr	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_attribute_set_deleted	(*(struct))->(int)
(	O
attr	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
break	O
;	O
case	O
mu_itrctl_qry_direction	int
:	O
if	O
(	O
!	O
arg	*(char)
)	O
return	O
EINVAL	int
;	O
else	O
*	O
(	O
int	O
*	O
)	O
arg	*(char)
=	O
itr	*(struct)
->	O
backwards	int
;	O
break	O
;	O
case	O
mu_itrctl_set_direction	int
:	O
if	O
(	O
!	O
arg	*(char)
)	O
return	O
EINVAL	int
;	O
else	O
itr	*(struct)
->	O
backwards	int
=	O
!	O
!	O
*	O
(	O
int	O
*	O
)	O
arg	*(char)
;	O
break	O
;	O
case	O
mu_itrctl_count	int
:	O
if	O
(	O
!	O
arg	*(char)
)	O
return	O
EINVAL	int
;	O
return	O
mu_mailbox_messages_count	(*(struct),*(long))->(int)
(	O
itr	*(struct)
->	O
mbx	*(struct)
,	O
arg	*(char)
)	O
;	O
default	O
:	O
return	O
ENOSYS	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
mu_mailbox_get_iterator	(*(struct),*(*(struct)))->(int)
(	O
mu_mailbox_t	*(struct)
mbx	*(struct)
,	O
mu_iterator_t	*(struct)
*	O
piterator	*(*(struct))
)	O
{	O
mu_iterator_t	*(struct)
iterator	*(struct)
;	O
int	O
status	int
;	O
struct	O
mailbox_iterator	struct(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int)))),long,int)
*	O
itr	*(struct)
;	O
if	O
(	O
!	O
mbx	*(struct)
)	O
return	O
EINVAL	int
;	O
itr	*(struct)
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
*	O
itr	*(struct)
)	O
;	O
if	O
(	O
!	O
itr	*(struct)
)	O
return	O
ENOMEM	int
;	O
itr	*(struct)
->	O
mbx	*(struct)
=	O
mbx	*(struct)
;	O
itr	*(struct)
->	O
idx	long
=	O
1	int
;	O
itr	*(struct)
->	O
backwards	int
=	O
0	int
;	O
status	int
=	O
mu_iterator_create	(*(*(struct)),*(void))->(int)
(	O
&	O
iterator	*(struct)
,	O
itr	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
{	O
free	(*(void))->(void)
(	O
itr	*(struct)
)	O
;	O
return	O
status	int
;	O
}	O
mu_iterator_set_first	(*(struct),*((*(void))->(int)))->(int)
(	O
iterator	*(struct)
,	O
mbx_first	(*(void))->(int)
)	O
;	O
mu_iterator_set_next	(*(struct),*((*(void))->(int)))->(int)
(	O
iterator	*(struct)
,	O
mbx_next	(*(void))->(int)
)	O
;	O
mu_iterator_set_getitem	(*(struct),*((*(void),*(*(void)),*(*(void)))->(int)))->(int)
(	O
iterator	*(struct)
,	O
mbx_getitem	(*(void),*(*(void)),*(*(void)))->(int)
)	O
;	O
mu_iterator_set_finished_p	(*(struct),*((*(void))->(int)))->(int)
(	O
iterator	*(struct)
,	O
mbx_finished_p	(*(void))->(int)
)	O
;	O
mu_iterator_set_delitem	(*(struct),*((*(void),*(void))->(int)))->(int)
(	O
iterator	*(struct)
,	O
mbx_delitem	(*(void),*(void))->(int)
)	O
;	O
mu_iterator_set_destroy	(*(struct),*((*(struct),*(void))->(int)))->(int)
(	O
iterator	*(struct)
,	O
mbx_destroy	(*(struct),*(void))->(int)
)	O
;	O
mu_iterator_set_dup	(*(struct),*((*(*(void)),*(void))->(int)))->(int)
(	O
iterator	*(struct)
,	O
mbx_data_dup	(*(*(void)),*(void))->(int)
)	O
;	O
mu_iterator_set_itrctl	(*(struct),*((*(void),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int)))->(int)
(	O
iterator	*(struct)
,	O
mbx_itrctl	(*(void),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int)
)	O
;	O
mu_iterator_attach	(*(*(struct)),*(struct))->(int)
(	O
&	O
mbx	*(struct)
->	O
iterator	*(struct)
,	O
iterator	*(struct)
)	O
;	O
*	O
piterator	*(*(struct))
=	O
iterator	*(struct)
;	O
return	O
0	int
;	O
}	O
