int	O
gsl_ran_wishart	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_rng	struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void))
*	O
r	*(struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void)))
,	O
const	O
double	O
df	*(double)
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
result	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
if	O
(	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"L should be a square matrix"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
result	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
result	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"result should be a square matrix"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"work should be a square matrix"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
result	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"incompatible dimensions of result matrix"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"incompatible dimensions of work matrix"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
df	*(double)
<=	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
-	O
1	int
)	O
{	O
GSL_ERROR	O
(	O
"incompatible degrees of freedom"	*(char)
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
{	O
size_t	long
d	long
=	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
,	O
i	long
,	O
j	long
;	O
gsl_matrix_set_zero	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
d	long
;	O
++	O
i	long
)	O
{	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
i	long
,	O
sqrt	(double)->(double)
(	O
gsl_ran_chisq	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),double)->(double)
(	O
r	*(struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void)))
,	O
df	*(double)
-	O
i	long
)	O
)	O
)	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
i	long
;	O
++	O
j	long
)	O
{	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
j	long
,	O
gsl_ran_ugaussian	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))))->(double)
(	O
r	*(struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void)))
)	O
)	O
;	O
}	O
}	O
gsl_blas_dtrmm	(enum(int,int),enum(int,int),enum(int,int,int),enum(int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLeft	int
,	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
1.0	int
,	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_blas_dsyrk	(enum(int,int),enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
1.0	int
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0.0	int
,	O
result	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
d	long
;	O
++	O
i	long
)	O
{	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
i	long
;	O
++	O
j	long
)	O
{	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
result	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
j	long
,	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
result	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
j	long
,	O
i	long
)	O
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_ran_wishart_log_pdf	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
X	*(float)
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
L_X	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
double	O
df	*(double)
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
double	O
*	O
result	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
if	O
(	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"L should be a square matrix"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
X	*(float)
->	O
size1	long
!=	O
X	*(float)
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"X should be a square matrix"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
L_X	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
L_X	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"L_X should be a square matrix"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
X	*(float)
->	O
size1	long
!=	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"incompatible dimensions of X matrix"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
L_X	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"incompatible dimensions of L_X matrix"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
df	*(double)
<=	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
-	O
1	int
)	O
{	O
GSL_ERROR	O
(	O
"incompatible degrees of freedom"	*(char)
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
{	O
size_t	long
d	long
=	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
,	O
i	long
;	O
int	O
status	int
;	O
double	O
log_mv_Ga	double
,	O
log_det_V	double
,	O
log_det_X	double
,	O
tr_Vinv_X	double
;	O
log_mv_Ga	double
=	O
d	long
*	O
(	O
d	long
-	O
1	int
)	O
*	O
0.25	int
*	O
log	(double)->(double)
(	O
M_PI	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
d	long
;	O
++	O
i	long
)	O
{	O
log_mv_Ga	double
+=	O
gsl_sf_lngamma	(double)->(double)
(	O
(	O
df	*(double)
-	O
i	long
+	O
1	int
)	O
*	O
0.5	int
)	O
;	O
}	O
log_det_V	double
=	O
log	(double)->(double)
(	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
)	O
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
d	long
;	O
++	O
i	long
)	O
{	O
log_det_V	double
+=	O
log	(double)->(double)
(	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
i	long
)	O
)	O
;	O
}	O
log_det_V	double
=	O
2	int
*	O
log_det_V	double
;	O
log_det_X	double
=	O
log	(double)->(double)
(	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
L_X	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
)	O
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
d	long
;	O
++	O
i	long
)	O
{	O
log_det_X	double
+=	O
log	(double)->(double)
(	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
L_X	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
i	long
)	O
)	O
;	O
}	O
log_det_X	double
=	O
2	int
*	O
log_det_X	double
;	O
status	int
=	O
gsl_linalg_cholesky_solve_mat	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
X	*(float)
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
tr_Vinv_X	double
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
d	long
;	O
++	O
i	long
)	O
{	O
tr_Vinv_X	double
+=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
i	long
)	O
;	O
}	O
*	O
result	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
-	O
(	O
0.5	int
*	O
df	*(double)
*	O
d	long
)	O
*	O
log	(double)->(double)
(	O
2.0	int
)	O
-	O
(	O
0.5	int
*	O
df	*(double)
)	O
*	O
log_det_V	double
-	O
log_mv_Ga	double
+	O
0.5	int
*	O
(	O
df	*(double)
-	O
d	long
-	O
1	int
)	O
*	O
log_det_X	double
-	O
0.5	int
*	O
tr_Vinv_X	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_ran_wishart_pdf	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
X	*(float)
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
L_X	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
double	O
df	*(double)
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
double	O
*	O
result	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
double	O
logpdf	double
;	O
int	O
status	int
=	O
gsl_ran_wishart_log_pdf	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
X	*(float)
,	O
L_X	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
df	*(double)
,	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
&	O
logpdf	double
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
status	int
==	O
GSL_SUCCESS	int
)	O
*	O
result	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
exp	(double)->(double)
(	O
logpdf	double
)	O
;	O
return	O
status	int
;	O
}	O
