void	O
mpn_hgcd_matrix_init	O
(	O
struct	O
hgcd_matrix	struct(long,long,array(array(*(long))))
*	O
M	*(struct(long,long,array(array(*(long)))))
,	O
mp_size_t	long
n	long
,	O
mp_ptr	*(long)
p	*(char)
)	O
{	O
mp_size_t	long
s	array(char)
=	O
(	O
n	long
+	O
1	int
)	O
/	O
2	int
+	O
1	int
;	O
M	*(struct(long,long,array(array(*(long)))))
->	O
alloc	long
=	O
s	array(char)
;	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
=	O
1	int
;	O
MPN_ZERO	O
(	O
p	*(char)
,	O
4	int
*	O
s	array(char)
)	O
;	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
0	int
]	O
=	O
p	*(char)
;	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
1	int
]	O
=	O
p	*(char)
+	O
s	array(char)
;	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
0	int
]	O
=	O
p	*(char)
+	O
2	int
*	O
s	array(char)
;	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
1	int
]	O
=	O
p	*(char)
+	O
3	int
*	O
s	array(char)
;	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
0	int
]	O
[	O
0	int
]	O
=	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
1	int
]	O
[	O
0	int
]	O
=	O
1	int
;	O
}	O
void	O
mpn_hgcd_matrix_update_q	O
(	O
struct	O
hgcd_matrix	struct(long,long,array(array(*(long))))
*	O
M	*(struct(long,long,array(array(*(long)))))
,	O
mp_srcptr	*(long)
qp	*(long)
,	O
mp_size_t	long
qn	long
,	O
unsigned	O
col	int
,	O
mp_ptr	*(long)
tp	*(long)
)	O
{	O
ASSERT	O
(	O
col	int
<	O
2	int
)	O
;	O
if	O
(	O
qn	long
==	O
1	int
)	O
{	O
mp_limb_t	long
q	int
=	O
qp	*(long)
[	O
0	int
]	O
;	O
mp_limb_t	long
c0	long
,	O
c1	long
;	O
c0	long
=	O
mpn_addmul_1	O
(	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
col	int
]	O
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
1	int
-	O
col	int
]	O
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
,	O
q	int
)	O
;	O
c1	long
=	O
mpn_addmul_1	O
(	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
col	int
]	O
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
1	int
-	O
col	int
]	O
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
,	O
q	int
)	O
;	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
col	int
]	O
[	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
]	O
=	O
c0	long
;	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
col	int
]	O
[	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
]	O
=	O
c1	long
;	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
+=	O
(	O
c0	long
|	O
c1	long
)	O
!=	O
0	int
;	O
}	O
else	O
{	O
unsigned	O
row	int
;	O
mp_limb_t	long
c	array(long)
[	O
2	int
]	O
;	O
mp_size_t	long
n	long
;	O
for	O
(	O
n	long
=	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
;	O
n	long
+	O
qn	long
>	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
;	O
n	long
--	O
)	O
{	O
ASSERT	O
(	O
n	long
>	O
0	int
)	O
;	O
if	O
(	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
1	int
-	O
col	int
]	O
[	O
n	long
-	O
1	int
]	O
>	O
0	int
||	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
1	int
-	O
col	int
]	O
[	O
n	long
-	O
1	int
]	O
>	O
0	int
)	O
break	O
;	O
}	O
ASSERT	O
(	O
qn	long
+	O
n	long
<=	O
M	*(struct(long,long,array(array(*(long)))))
->	O
alloc	long
)	O
;	O
for	O
(	O
row	int
=	O
0	int
;	O
row	int
<	O
2	int
;	O
row	int
++	O
)	O
{	O
if	O
(	O
qn	long
<=	O
n	long
)	O
mpn_mul	O
(	O
tp	*(long)
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
row	int
]	O
[	O
1	int
-	O
col	int
]	O
,	O
n	long
,	O
qp	*(long)
,	O
qn	long
)	O
;	O
else	O
mpn_mul	O
(	O
tp	*(long)
,	O
qp	*(long)
,	O
qn	long
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
row	int
]	O
[	O
1	int
-	O
col	int
]	O
,	O
n	long
)	O
;	O
ASSERT	O
(	O
n	long
+	O
qn	long
>=	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
)	O
;	O
c	array(long)
[	O
row	int
]	O
=	O
mpn_add	O
(	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
row	int
]	O
[	O
col	int
]	O
,	O
tp	*(long)
,	O
n	long
+	O
qn	long
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
row	int
]	O
[	O
col	int
]	O
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
)	O
;	O
}	O
n	long
+=	O
qn	long
;	O
if	O
(	O
c	array(long)
[	O
0	int
]	O
|	O
c	array(long)
[	O
1	int
]	O
)	O
{	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
col	int
]	O
[	O
n	long
]	O
=	O
c	array(long)
[	O
0	int
]	O
;	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
col	int
]	O
[	O
n	long
]	O
=	O
c	array(long)
[	O
1	int
]	O
;	O
n	long
++	O
;	O
}	O
else	O
{	O
n	long
-=	O
(	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
col	int
]	O
[	O
n	long
-	O
1	int
]	O
|	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
col	int
]	O
[	O
n	long
-	O
1	int
]	O
)	O
==	O
0	int
;	O
ASSERT	O
(	O
n	long
>=	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
)	O
;	O
}	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
=	O
n	long
;	O
}	O
ASSERT	O
(	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
<	O
M	*(struct(long,long,array(array(*(long)))))
->	O
alloc	long
)	O
;	O
}	O
void	O
mpn_hgcd_matrix_mul_1	O
(	O
struct	O
hgcd_matrix	struct(long,long,array(array(*(long))))
*	O
M	*(struct(long,long,array(array(*(long)))))
,	O
const	O
struct	O
hgcd_matrix1	struct(array(array(long)))
*	O
M1	*(struct(array(array(long))))
,	O
mp_ptr	*(long)
tp	*(long)
)	O
{	O
mp_size_t	long
n0	long
,	O
n1	long
;	O
MPN_COPY	O
(	O
tp	*(long)
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
0	int
]	O
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
)	O
;	O
n0	long
=	O
mpn_hgcd_mul_matrix1_vector	O
(	O
M1	*(struct(array(array(long))))
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
0	int
]	O
,	O
tp	*(long)
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
1	int
]	O
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
)	O
;	O
MPN_COPY	O
(	O
tp	*(long)
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
0	int
]	O
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
)	O
;	O
n1	long
=	O
mpn_hgcd_mul_matrix1_vector	O
(	O
M1	*(struct(array(array(long))))
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
0	int
]	O
,	O
tp	*(long)
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
1	int
]	O
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
)	O
;	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
=	O
MAX	O
(	O
n0	long
,	O
n1	long
)	O
;	O
ASSERT	O
(	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
<	O
M	*(struct(long,long,array(array(*(long)))))
->	O
alloc	long
)	O
;	O
}	O
void	O
mpn_hgcd_matrix_mul	O
(	O
struct	O
hgcd_matrix	struct(long,long,array(array(*(long))))
*	O
M	*(struct(long,long,array(array(*(long)))))
,	O
const	O
struct	O
hgcd_matrix	struct(long,long,array(array(*(long))))
*	O
M1	*(struct(array(array(long))))
,	O
mp_ptr	*(long)
tp	*(long)
)	O
{	O
mp_size_t	long
n	long
;	O
ASSERT	O
(	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
+	O
M1	*(struct(array(array(long))))
->	O
n	long
<	O
M	*(struct(long,long,array(array(*(long)))))
->	O
alloc	long
)	O
;	O
ASSERT	O
(	O
(	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
0	int
]	O
[	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
-	O
1	int
]	O
|	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
1	int
]	O
[	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
-	O
1	int
]	O
|	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
0	int
]	O
[	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
-	O
1	int
]	O
|	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
1	int
]	O
[	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
-	O
1	int
]	O
)	O
>	O
0	int
)	O
;	O
ASSERT	O
(	O
(	O
M1	*(struct(array(array(long))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
0	int
]	O
[	O
M1	*(struct(array(array(long))))
->	O
n	long
-	O
1	int
]	O
|	O
M1	*(struct(array(array(long))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
1	int
]	O
[	O
M1	*(struct(array(array(long))))
->	O
n	long
-	O
1	int
]	O
|	O
M1	*(struct(array(array(long))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
0	int
]	O
[	O
M1	*(struct(array(array(long))))
->	O
n	long
-	O
1	int
]	O
|	O
M1	*(struct(array(array(long))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
1	int
]	O
[	O
M1	*(struct(array(array(long))))
->	O
n	long
-	O
1	int
]	O
)	O
>	O
0	int
)	O
;	O
mpn_matrix22_mul	O
(	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
0	int
]	O
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
1	int
]	O
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
0	int
]	O
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
1	int
]	O
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
,	O
M1	*(struct(array(array(long))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
0	int
]	O
,	O
M1	*(struct(array(array(long))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
1	int
]	O
,	O
M1	*(struct(array(array(long))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
0	int
]	O
,	O
M1	*(struct(array(array(long))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
1	int
]	O
,	O
M1	*(struct(array(array(long))))
->	O
n	long
,	O
tp	*(long)
)	O
;	O
n	long
=	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
+	O
M1	*(struct(array(array(long))))
->	O
n	long
;	O
n	long
-=	O
(	O
(	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
0	int
]	O
[	O
n	long
]	O
|	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
1	int
]	O
[	O
n	long
]	O
|	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
0	int
]	O
[	O
n	long
]	O
|	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
1	int
]	O
[	O
n	long
]	O
)	O
==	O
0	int
)	O
;	O
n	long
-=	O
(	O
(	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
0	int
]	O
[	O
n	long
]	O
|	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
1	int
]	O
[	O
n	long
]	O
|	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
0	int
]	O
[	O
n	long
]	O
|	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
1	int
]	O
[	O
n	long
]	O
)	O
==	O
0	int
)	O
;	O
n	long
-=	O
(	O
(	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
0	int
]	O
[	O
n	long
]	O
|	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
1	int
]	O
[	O
n	long
]	O
|	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
0	int
]	O
[	O
n	long
]	O
|	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
1	int
]	O
[	O
n	long
]	O
)	O
==	O
0	int
)	O
;	O
ASSERT	O
(	O
(	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
0	int
]	O
[	O
n	long
]	O
|	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
1	int
]	O
[	O
n	long
]	O
|	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
0	int
]	O
[	O
n	long
]	O
|	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
1	int
]	O
[	O
n	long
]	O
)	O
>	O
0	int
)	O
;	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
=	O
n	long
+	O
1	int
;	O
}	O
mp_size_t	long
mpn_hgcd_matrix_adjust	O
(	O
const	O
struct	O
hgcd_matrix	struct(long,long,array(array(*(long))))
*	O
M	*(struct(long,long,array(array(*(long)))))
,	O
mp_size_t	long
n	long
,	O
mp_ptr	*(long)
ap	*(long)
,	O
mp_ptr	*(long)
bp	*(long)
,	O
mp_size_t	long
p	*(char)
,	O
mp_ptr	*(long)
tp	*(long)
)	O
{	O
mp_ptr	*(long)
t0	*(long)
=	O
tp	*(long)
;	O
mp_ptr	*(long)
t1	*(long)
=	O
tp	*(long)
+	O
p	*(char)
+	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
;	O
mp_limb_t	long
ah	long
,	O
bh	long
;	O
mp_limb_t	long
cy	long
;	O
ASSERT	O
(	O
p	*(char)
+	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
<	O
n	long
)	O
;	O
if	O
(	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
>=	O
p	*(char)
)	O
{	O
mpn_mul	O
(	O
t0	*(long)
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
1	int
]	O
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
,	O
ap	*(long)
,	O
p	*(char)
)	O
;	O
mpn_mul	O
(	O
t1	*(long)
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
0	int
]	O
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
,	O
ap	*(long)
,	O
p	*(char)
)	O
;	O
}	O
else	O
{	O
mpn_mul	O
(	O
t0	*(long)
,	O
ap	*(long)
,	O
p	*(char)
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
1	int
]	O
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
)	O
;	O
mpn_mul	O
(	O
t1	*(long)
,	O
ap	*(long)
,	O
p	*(char)
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
1	int
]	O
[	O
0	int
]	O
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
)	O
;	O
}	O
MPN_COPY	O
(	O
ap	*(long)
,	O
t0	*(long)
,	O
p	*(char)
)	O
;	O
ah	long
=	O
mpn_add	O
(	O
ap	*(long)
+	O
p	*(char)
,	O
ap	*(long)
+	O
p	*(char)
,	O
n	long
-	O
p	*(char)
,	O
t0	*(long)
+	O
p	*(char)
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
)	O
;	O
if	O
(	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
>=	O
p	*(char)
)	O
mpn_mul	O
(	O
t0	*(long)
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
1	int
]	O
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
,	O
bp	*(long)
,	O
p	*(char)
)	O
;	O
else	O
mpn_mul	O
(	O
t0	*(long)
,	O
bp	*(long)
,	O
p	*(char)
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
1	int
]	O
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
)	O
;	O
cy	long
=	O
mpn_sub	O
(	O
ap	*(long)
,	O
ap	*(long)
,	O
n	long
,	O
t0	*(long)
,	O
p	*(char)
+	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
)	O
;	O
ASSERT	O
(	O
cy	long
<=	O
ah	long
)	O
;	O
ah	long
-=	O
cy	long
;	O
if	O
(	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
>=	O
p	*(char)
)	O
mpn_mul	O
(	O
t0	*(long)
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
0	int
]	O
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
,	O
bp	*(long)
,	O
p	*(char)
)	O
;	O
else	O
mpn_mul	O
(	O
t0	*(long)
,	O
bp	*(long)
,	O
p	*(char)
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
p	*(char)
[	O
0	int
]	O
[	O
0	int
]	O
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
)	O
;	O
MPN_COPY	O
(	O
bp	*(long)
,	O
t0	*(long)
,	O
p	*(char)
)	O
;	O
bh	long
=	O
mpn_add	O
(	O
bp	*(long)
+	O
p	*(char)
,	O
bp	*(long)
+	O
p	*(char)
,	O
n	long
-	O
p	*(char)
,	O
t0	*(long)
+	O
p	*(char)
,	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
)	O
;	O
cy	long
=	O
mpn_sub	O
(	O
bp	*(long)
,	O
bp	*(long)
,	O
n	long
,	O
t1	*(long)
,	O
p	*(char)
+	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
)	O
;	O
ASSERT	O
(	O
cy	long
<=	O
bh	long
)	O
;	O
bh	long
-=	O
cy	long
;	O
if	O
(	O
ah	long
>	O
0	int
||	O
bh	long
>	O
0	int
)	O
{	O
ap	*(long)
[	O
n	long
]	O
=	O
ah	long
;	O
bp	*(long)
[	O
n	long
]	O
=	O
bh	long
;	O
n	long
++	O
;	O
}	O
else	O
{	O
if	O
(	O
ap	*(long)
[	O
n	long
-	O
1	int
]	O
==	O
0	int
&&	O
bp	*(long)
[	O
n	long
-	O
1	int
]	O
==	O
0	int
)	O
n	long
--	O
;	O
}	O
ASSERT	O
(	O
ap	*(long)
[	O
n	long
-	O
1	int
]	O
>	O
0	int
||	O
bp	*(long)
[	O
n	long
-	O
1	int
]	O
>	O
0	int
)	O
;	O
return	O
n	long
;	O
}	O
