typedef	O
unsigned	O
int	O
index_ty	int
;	O
typedef	O
index_ty	int
*	O
index_list_ty	*(int)
;	O
static	O
inline	O
index_list_ty	*(int)
new_index	(int)->(*(int))
(	O
index_ty	int
idx	int
)	O
{	O
index_ty	int
*	O
list	*(int)
=	O
XNMALLOC	O
(	O
2	int
+	O
1	int
,	O
index_ty	int
)	O
;	O
list	*(int)
[	O
IL_ALLOCATED	int
]	O
=	O
1	int
;	O
list	*(int)
[	O
IL_LENGTH	int
]	O
=	O
1	int
;	O
list	*(int)
[	O
2	int
]	O
=	O
idx	int
;	O
return	O
list	*(int)
;	O
}	O
static	O
inline	O
index_list_ty	*(int)
addlast_index	(*(int),int)->(*(int))
(	O
index_list_ty	*(int)
list	*(int)
,	O
index_ty	int
idx	int
)	O
{	O
index_list_ty	*(int)
result	*(*(void))
;	O
size_t	long
length	long
=	O
list	*(int)
[	O
IL_LENGTH	int
]	O
;	O
if	O
(	O
length	long
>	O
0	int
&&	O
list	*(int)
[	O
2	int
+	O
(	O
length	long
-	O
1	int
)	O
]	O
==	O
idx	int
)	O
return	O
NULL	O
;	O
result	*(*(void))
=	O
NULL	O
;	O
if	O
(	O
length	long
==	O
list	*(int)
[	O
IL_ALLOCATED	int
]	O
)	O
{	O
size_t	long
new_allocated	long
=	O
2	int
*	O
length	long
-	O
(	O
length	long
>>	O
6	int
)	O
;	O
list	*(int)
=	O
(	O
index_ty	int
*	O
)	O
xrealloc	(*(void),long)->(*(void))
(	O
list	*(int)
,	O
(	O
2	int
+	O
new_allocated	long
)	O
*	O
sizeof	O
(	O
index_ty	int
)	O
)	O
;	O
list	*(int)
[	O
IL_ALLOCATED	int
]	O
=	O
new_allocated	long
;	O
result	*(*(void))
=	O
list	*(int)
;	O
}	O
list	*(int)
[	O
2	int
+	O
length	long
]	O
=	O
idx	int
;	O
list	*(int)
[	O
IL_LENGTH	int
]	O
=	O
length	long
+	O
1	int
;	O
return	O
result	*(*(void))
;	O
}	O
static	O
inline	O
index_list_ty	*(int)
add_index	(*(int),int)->(*(int))
(	O
index_list_ty	*(int)
list	*(int)
,	O
index_ty	int
idx	int
)	O
{	O
index_list_ty	*(int)
result	*(*(void))
;	O
size_t	long
length	long
=	O
list	*(int)
[	O
IL_LENGTH	int
]	O
;	O
size_t	long
lo	long
=	O
0	int
;	O
size_t	long
hi	long
=	O
length	long
;	O
while	O
(	O
lo	long
<	O
hi	long
)	O
{	O
size_t	long
mid	long
=	O
(	O
lo	long
+	O
hi	long
)	O
/	O
2	int
;	O
index_ty	int
val	int
=	O
list	*(int)
[	O
2	int
+	O
mid	long
]	O
;	O
if	O
(	O
val	int
<	O
idx	int
)	O
lo	long
=	O
mid	long
+	O
1	int
;	O
else	O
if	O
(	O
val	int
>	O
idx	int
)	O
hi	long
=	O
mid	long
;	O
else	O
return	O
NULL	O
;	O
}	O
result	*(*(void))
=	O
NULL	O
;	O
if	O
(	O
length	long
==	O
list	*(int)
[	O
IL_ALLOCATED	int
]	O
)	O
{	O
size_t	long
new_allocated	long
=	O
2	int
*	O
length	long
-	O
(	O
length	long
>>	O
6	int
)	O
;	O
list	*(int)
=	O
(	O
index_ty	int
*	O
)	O
xrealloc	(*(void),long)->(*(void))
(	O
list	*(int)
,	O
(	O
2	int
+	O
new_allocated	long
)	O
*	O
sizeof	O
(	O
index_ty	int
)	O
)	O
;	O
list	*(int)
[	O
IL_ALLOCATED	int
]	O
=	O
new_allocated	long
;	O
result	*(*(void))
=	O
list	*(int)
;	O
}	O
list	*(int)
[	O
IL_LENGTH	int
]	O
=	O
length	long
+	O
1	int
;	O
for	O
(	O
;	O
length	long
>	O
hi	long
;	O
length	long
--	O
)	O
list	*(int)
[	O
2	int
+	O
length	long
]	O
=	O
list	*(int)
[	O
1	int
+	O
length	long
]	O
;	O
list	*(int)
[	O
2	int
+	O
length	long
]	O
=	O
idx	int
;	O
return	O
result	*(*(void))
;	O
}	O
struct	O
message_fuzzy_index_ty	struct
{	O
message_ty	struct
*	O
*	O
messages	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
;	O
character_iterator_t	*((*(char))->(long))
iterator	*((*(char))->(long))
;	O
hash_table	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct(*`,*`,array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*(void))),*((*(void),long)->(*(void)))),union(*((*(void))->(void)),*((*(void),*(void))->(void))),*(void),int,int,int))
gram4	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
;	O
size_t	long
firstfew	long
;	O
message_list_ty	struct
*	O
*	O
short_messages	*(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))))
;	O
}	O
;	O
message_fuzzy_index_ty	struct
*	O
message_fuzzy_index_alloc	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char))->(*(struct))
(	O
const	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
const	O
char	O
*	O
canon_charset	*(char)
)	O
{	O
message_fuzzy_index_ty	struct
*	O
findex	*(struct)
=	O
XMALLOC	O
(	O
message_fuzzy_index_ty	struct
)	O
;	O
size_t	long
count	long
=	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
nitems	long
;	O
size_t	long
j	long
;	O
size_t	long
l	long
;	O
findex	*(struct)
->	O
messages	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
=	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
;	O
findex	*(struct)
->	O
iterator	*((*(char))->(long))
=	O
po_charset_character_iterator	(*(char))->(*((*(char))->(long)))
(	O
canon_charset	*(char)
)	O
;	O
if	O
(	O
hash_init	(*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),long)->(int)
(	O
&	O
findex	*(struct)
->	O
gram4	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
,	O
10	int
*	O
count	long
)	O
<	O
0	int
)	O
xalloc_die	()->(void)
(	O
)	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
count	long
;	O
j	long
++	O
)	O
{	O
message_ty	struct
*	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
=	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
[	O
j	long
]	O
;	O
if	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr	*(char)
!=	O
NULL	O
&&	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr	*(char)
[	O
0	int
]	O
!=	O
'\0'	O
)	O
{	O
const	O
char	O
*	O
str	*(char)
=	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgid	*(char)
;	O
const	O
char	O
*	O
p0	*(char)
=	O
str	*(char)
;	O
if	O
(	O
*	O
p0	*(char)
!=	O
'\0'	O
)	O
{	O
const	O
char	O
*	O
p1	*(char)
=	O
p0	*(char)
+	O
findex	*(struct)
->	O
iterator	*((*(char))->(long))
(	O
p0	*(char)
)	O
;	O
if	O
(	O
*	O
p1	*(char)
!=	O
'\0'	O
)	O
{	O
const	O
char	O
*	O
p2	*(char)
=	O
p1	*(char)
+	O
findex	*(struct)
->	O
iterator	*((*(char))->(long))
(	O
p1	*(char)
)	O
;	O
if	O
(	O
*	O
p2	*(char)
!=	O
'\0'	O
)	O
{	O
const	O
char	O
*	O
p3	*(char)
=	O
p2	*(char)
+	O
findex	*(struct)
->	O
iterator	*((*(char))->(long))
(	O
p2	*(char)
)	O
;	O
if	O
(	O
*	O
p3	*(char)
!=	O
'\0'	O
)	O
{	O
const	O
char	O
*	O
p4	*(char)
=	O
p3	*(char)
+	O
findex	*(struct)
->	O
iterator	*((*(char))->(long))
(	O
p3	*(char)
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
void	O
*	O
found	*(void)
;	O
if	O
(	O
hash_find_entry	(*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),*(void),long,*(*(void)))->(int)
(	O
&	O
findex	*(struct)
->	O
gram4	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
,	O
p0	*(char)
,	O
p4	*(char)
-	O
p0	*(char)
,	O
&	O
found	*(void)
)	O
==	O
0	int
)	O
{	O
index_list_ty	*(int)
list	*(int)
=	O
(	O
index_list_ty	*(int)
)	O
found	*(void)
;	O
list	*(int)
=	O
addlast_index	(*(int),int)->(*(int))
(	O
list	*(int)
,	O
j	long
)	O
;	O
if	O
(	O
list	*(int)
!=	O
NULL	O
)	O
hash_set_value	(*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),*(void),long,*(void))->(int)
(	O
&	O
findex	*(struct)
->	O
gram4	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
,	O
p0	*(char)
,	O
p4	*(char)
-	O
p0	*(char)
,	O
list	*(int)
)	O
;	O
}	O
else	O
hash_insert_entry	(*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),*(void),long,*(void))->(*(void))
(	O
&	O
findex	*(struct)
->	O
gram4	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
,	O
p0	*(char)
,	O
p4	*(char)
-	O
p0	*(char)
,	O
new_index	(int)->(*(int))
(	O
j	long
)	O
)	O
;	O
if	O
(	O
*	O
p4	*(char)
==	O
'\0'	O
)	O
break	O
;	O
p0	*(char)
=	O
p1	*(char)
;	O
p1	*(char)
=	O
p2	*(char)
;	O
p2	*(char)
=	O
p3	*(char)
;	O
p3	*(char)
=	O
p4	*(char)
;	O
p4	*(char)
=	O
p4	*(char)
+	O
findex	*(struct)
->	O
iterator	*((*(char))->(long))
(	O
p4	*(char)
)	O
;	O
}	O
}	O
}	O
}	O
}	O
}	O
}	O
{	O
void	O
*	O
iter	*(void)
;	O
const	O
void	O
*	O
key	*(void)
;	O
size_t	long
keylen	long
;	O
void	O
*	O
*	O
valuep	*(*(void))
;	O
iter	*(void)
=	O
NULL	O
;	O
while	O
(	O
hash_iterate_modify	(*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),*(*(void)),*(*(void)),*(long),*(*(*(void))))->(int)
(	O
&	O
findex	*(struct)
->	O
gram4	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
,	O
&	O
iter	*(void)
,	O
&	O
key	*(void)
,	O
&	O
keylen	long
,	O
&	O
valuep	*(*(void))
)	O
==	O
0	int
)	O
{	O
index_list_ty	*(int)
list	*(int)
=	O
(	O
index_list_ty	*(int)
)	O
*	O
valuep	*(*(void))
;	O
index_ty	int
length	long
=	O
list	*(int)
[	O
IL_LENGTH	int
]	O
;	O
if	O
(	O
length	long
<	O
list	*(int)
[	O
IL_ALLOCATED	int
]	O
)	O
{	O
list	*(int)
[	O
IL_ALLOCATED	int
]	O
=	O
length	long
;	O
*	O
valuep	*(*(void))
=	O
xrealloc	(*(void),long)->(*(void))
(	O
list	*(int)
,	O
(	O
2	int
+	O
length	long
)	O
*	O
sizeof	O
(	O
index_ty	int
)	O
)	O
;	O
}	O
}	O
}	O
findex	*(struct)
->	O
firstfew	long
=	O
(	O
int	O
)	O
sqrt	(double)->(double)
(	O
(	O
double	O
)	O
count	long
)	O
;	O
if	O
(	O
findex	*(struct)
->	O
firstfew	long
<	O
10	int
)	O
findex	*(struct)
->	O
firstfew	long
=	O
10	int
;	O
findex	*(struct)
->	O
short_messages	*(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))))
=	O
XNMALLOC	O
(	O
SHORT_MSG_MAX	O
+	O
1	int
,	O
message_list_ty	struct
*	O
)	O
;	O
for	O
(	O
l	long
=	O
0	int
;	O
l	long
<=	O
SHORT_MSG_MAX	O
;	O
l	long
++	O
)	O
findex	*(struct)
->	O
short_messages	*(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))))
[	O
l	long
]	O
=	O
message_list_alloc	(bool)->(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))))
(	O
false	int
)	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
count	long
;	O
j	long
++	O
)	O
{	O
message_ty	struct
*	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
=	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
[	O
j	long
]	O
;	O
if	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr	*(char)
!=	O
NULL	O
&&	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr	*(char)
[	O
0	int
]	O
!=	O
'\0'	O
)	O
{	O
const	O
char	O
*	O
str	*(char)
=	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgid	*(char)
;	O
size_t	long
len	long
=	O
strlen	(*(char))->(long)
(	O
str	*(char)
)	O
;	O
if	O
(	O
len	long
<=	O
SHORT_MSG_MAX	O
)	O
message_list_append	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))->(void)
(	O
findex	*(struct)
->	O
short_messages	*(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))))
[	O
len	long
]	O
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
)	O
;	O
}	O
}	O
for	O
(	O
l	long
=	O
0	int
;	O
l	long
<=	O
SHORT_MSG_MAX	O
;	O
l	long
++	O
)	O
{	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
=	O
findex	*(struct)
->	O
short_messages	*(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))))
[	O
l	long
]	O
;	O
if	O
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
nitems	long
<	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
nitems_max	long
)	O
{	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
nitems_max	long
=	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
nitems	long
;	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
=	O
(	O
message_ty	struct
*	O
*	O
)	O
xrealloc	(*(void),long)->(*(void))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
,	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
nitems_max	long
*	O
sizeof	O
(	O
message_ty	struct
*	O
)	O
)	O
;	O
}	O
}	O
return	O
findex	*(struct)
;	O
}	O
struct	O
mult_index	struct(int,int)
{	O
index_ty	int
index	(*(char),int)->(*(char))
;	O
unsigned	O
int	O
count	long
;	O
}	O
;	O
struct	O
mult_index_list	struct(*(struct(int,int)),long,long,*(struct(int,int)),long)
{	O
struct	O
mult_index	struct(int,int)
*	O
item	*(*(char))
;	O
size_t	long
nitems	long
;	O
size_t	long
nitems_max	long
;	O
struct	O
mult_index	struct(int,int)
*	O
item2	*(struct(int,int))
;	O
size_t	long
nitems2_max	long
;	O
}	O
;	O
static	O
inline	O
void	O
mult_index_list_init	(*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long)))->(void)
(	O
struct	O
mult_index_list	struct(*(struct(int,int)),long,long,*(struct(int,int)),long)
*	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
)	O
{	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
->	O
nitems	long
=	O
0	int
;	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
->	O
nitems_max	long
=	O
0	int
;	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
->	O
item	*(*(char))
=	O
NULL	O
;	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
->	O
nitems2_max	long
=	O
0	int
;	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
->	O
item2	*(struct(int,int))
=	O
NULL	O
;	O
}	O
static	O
inline	O
void	O
mult_index_list_accumulate	(*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long)),*(int))->(void)
(	O
struct	O
mult_index_list	struct(*(struct(int,int)),long,long,*(struct(int,int)),long)
*	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
,	O
index_list_ty	*(int)
list	*(int)
)	O
{	O
size_t	long
len1	long
=	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
->	O
nitems	long
;	O
size_t	long
len2	long
=	O
list	*(int)
[	O
IL_LENGTH	int
]	O
;	O
size_t	long
need	long
=	O
len1	long
+	O
len2	long
;	O
struct	O
mult_index	struct(int,int)
*	O
ptr1	*(struct(int,int))
;	O
struct	O
mult_index	struct(int,int)
*	O
ptr1_end	*(struct(int,int))
;	O
index_ty	int
*	O
ptr2	*(int)
;	O
index_ty	int
*	O
ptr2_end	*(int)
;	O
struct	O
mult_index	struct(int,int)
*	O
destptr	*(struct(int,int))
;	O
if	O
(	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
->	O
nitems2_max	long
<	O
need	long
)	O
{	O
size_t	long
new_max	long
=	O
2	int
*	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
->	O
nitems2_max	long
+	O
1	int
;	O
if	O
(	O
new_max	long
<	O
need	long
)	O
new_max	long
=	O
need	long
;	O
if	O
(	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
->	O
item2	*(struct(int,int))
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
->	O
item2	*(struct(int,int))
)	O
;	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
->	O
item2	*(struct(int,int))
=	O
XNMALLOC	O
(	O
new_max	long
,	O
struct	O
mult_index	struct(int,int)
)	O
;	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
->	O
nitems2_max	long
=	O
new_max	long
;	O
}	O
ptr1	*(struct(int,int))
=	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
->	O
item	*(*(char))
;	O
ptr1_end	*(struct(int,int))
=	O
ptr1	*(struct(int,int))
+	O
len1	long
;	O
ptr2	*(int)
=	O
list	*(int)
+	O
2	int
;	O
ptr2_end	*(int)
=	O
ptr2	*(int)
+	O
len2	long
;	O
destptr	*(struct(int,int))
=	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
->	O
item2	*(struct(int,int))
;	O
while	O
(	O
ptr1	*(struct(int,int))
<	O
ptr1_end	*(struct(int,int))
&&	O
ptr2	*(int)
<	O
ptr2_end	*(int)
)	O
{	O
if	O
(	O
ptr1	*(struct(int,int))
->	O
index	(*(char),int)->(*(char))
<	O
*	O
ptr2	*(int)
)	O
{	O
*	O
destptr	*(struct(int,int))
=	O
*	O
ptr1	*(struct(int,int))
;	O
ptr1	*(struct(int,int))
++	O
;	O
}	O
else	O
if	O
(	O
ptr1	*(struct(int,int))
->	O
index	(*(char),int)->(*(char))
>	O
*	O
ptr2	*(int)
)	O
{	O
destptr	*(struct(int,int))
->	O
index	(*(char),int)->(*(char))
=	O
*	O
ptr2	*(int)
;	O
destptr	*(struct(int,int))
->	O
count	long
=	O
1	int
;	O
ptr2	*(int)
++	O
;	O
}	O
else	O
{	O
destptr	*(struct(int,int))
->	O
index	(*(char),int)->(*(char))
=	O
ptr1	*(struct(int,int))
->	O
index	(*(char),int)->(*(char))
;	O
destptr	*(struct(int,int))
->	O
count	long
=	O
ptr1	*(struct(int,int))
->	O
count	long
+	O
1	int
;	O
ptr1	*(struct(int,int))
++	O
;	O
ptr2	*(int)
++	O
;	O
}	O
destptr	*(struct(int,int))
++	O
;	O
}	O
while	O
(	O
ptr1	*(struct(int,int))
<	O
ptr1_end	*(struct(int,int))
)	O
{	O
*	O
destptr	*(struct(int,int))
=	O
*	O
ptr1	*(struct(int,int))
;	O
ptr1	*(struct(int,int))
++	O
;	O
destptr	*(struct(int,int))
++	O
;	O
}	O
while	O
(	O
ptr2	*(int)
<	O
ptr2_end	*(int)
)	O
{	O
destptr	*(struct(int,int))
->	O
index	(*(char),int)->(*(char))
=	O
*	O
ptr2	*(int)
;	O
destptr	*(struct(int,int))
->	O
count	long
=	O
1	int
;	O
ptr2	*(int)
++	O
;	O
destptr	*(struct(int,int))
++	O
;	O
}	O
{	O
struct	O
mult_index	struct(int,int)
*	O
dest	*(struct(int,int))
=	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
->	O
item2	*(struct(int,int))
;	O
size_t	long
dest_max	long
=	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
->	O
nitems2_max	long
;	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
->	O
item2	*(struct(int,int))
=	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
->	O
item	*(*(char))
;	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
->	O
nitems2_max	long
=	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
->	O
nitems_max	long
;	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
->	O
item	*(*(char))
=	O
dest	*(struct(int,int))
;	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
->	O
nitems	long
=	O
destptr	*(struct(int,int))
-	O
dest	*(struct(int,int))
;	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
->	O
nitems_max	long
=	O
dest_max	long
;	O
}	O
}	O
static	O
int	O
mult_index_compare	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
p1	*(char)
,	O
const	O
void	O
*	O
p2	*(char)
)	O
{	O
const	O
struct	O
mult_index	struct(int,int)
*	O
ptr1	*(struct(int,int))
=	O
(	O
const	O
struct	O
mult_index	struct(int,int)
*	O
)	O
p1	*(char)
;	O
const	O
struct	O
mult_index	struct(int,int)
*	O
ptr2	*(int)
=	O
(	O
const	O
struct	O
mult_index	struct(int,int)
*	O
)	O
p2	*(char)
;	O
if	O
(	O
ptr1	*(struct(int,int))
->	O
count	long
<	O
ptr2	*(int)
->	O
count	long
)	O
return	O
1	int
;	O
if	O
(	O
ptr1	*(struct(int,int))
->	O
count	long
>	O
ptr2	*(int)
->	O
count	long
)	O
return	O
-	O
1	int
;	O
if	O
(	O
ptr1	*(struct(int,int))
->	O
index	(*(char),int)->(*(char))
>	O
ptr2	*(int)
->	O
index	(*(char),int)->(*(char))
)	O
return	O
1	int
;	O
if	O
(	O
ptr1	*(struct(int,int))
->	O
index	(*(char),int)->(*(char))
<	O
ptr2	*(int)
->	O
index	(*(char),int)->(*(char))
)	O
return	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
inline	O
void	O
mult_index_list_sort	(*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long)))->(void)
(	O
struct	O
mult_index_list	struct(*(struct(int,int)),long,long,*(struct(int,int)),long)
*	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
)	O
{	O
if	O
(	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
->	O
nitems	long
>	O
1	int
)	O
qsort	(*(void),long,long,*((*(void),*(void))->(int)))->(void)
(	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
->	O
item	*(*(char))
,	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
->	O
nitems	long
,	O
sizeof	O
(	O
struct	O
mult_index	struct(int,int)
)	O
,	O
mult_index_compare	(*(void),*(void))->(int)
)	O
;	O
}	O
static	O
inline	O
void	O
mult_index_list_free	(*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long)))->(void)
(	O
struct	O
mult_index_list	struct(*(struct(int,int)),long,long,*(struct(int,int)),long)
*	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
)	O
{	O
if	O
(	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
->	O
item	*(*(char))
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
->	O
item	*(*(char))
)	O
;	O
if	O
(	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
->	O
item2	*(struct(int,int))
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
->	O
item2	*(struct(int,int))
)	O
;	O
}	O
message_ty	struct
*	O
message_fuzzy_index_search	(*(struct),*(char),*(char),double,bool)->(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))
(	O
message_fuzzy_index_ty	struct
*	O
findex	*(struct)
,	O
const	O
char	O
*	O
msgctxt	*(char)
,	O
const	O
char	O
*	O
msgid	*(char)
,	O
double	O
lower_bound	double
,	O
bool	bool
heuristic	bool
)	O
{	O
const	O
char	O
*	O
str	*(char)
=	O
msgid	*(char)
;	O
const	O
char	O
*	O
p0	*(char)
=	O
str	*(char)
;	O
if	O
(	O
*	O
p0	*(char)
!=	O
'\0'	O
)	O
{	O
const	O
char	O
*	O
p1	*(char)
=	O
p0	*(char)
+	O
findex	*(struct)
->	O
iterator	*((*(char))->(long))
(	O
p0	*(char)
)	O
;	O
if	O
(	O
*	O
p1	*(char)
!=	O
'\0'	O
)	O
{	O
const	O
char	O
*	O
p2	*(char)
=	O
p1	*(char)
+	O
findex	*(struct)
->	O
iterator	*((*(char))->(long))
(	O
p1	*(char)
)	O
;	O
if	O
(	O
*	O
p2	*(char)
!=	O
'\0'	O
)	O
{	O
const	O
char	O
*	O
p3	*(char)
=	O
p2	*(char)
+	O
findex	*(struct)
->	O
iterator	*((*(char))->(long))
(	O
p2	*(char)
)	O
;	O
if	O
(	O
*	O
p3	*(char)
!=	O
'\0'	O
)	O
{	O
const	O
char	O
*	O
p4	*(char)
=	O
p3	*(char)
+	O
findex	*(struct)
->	O
iterator	*((*(char))->(long))
(	O
p3	*(char)
)	O
;	O
struct	O
mult_index_list	struct(*(struct(int,int)),long,long,*(struct(int,int)),long)
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
;	O
mult_index_list_init	(*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long)))->(void)
(	O
&	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
void	O
*	O
found	*(void)
;	O
if	O
(	O
hash_find_entry	(*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),*(void),long,*(*(void)))->(int)
(	O
&	O
findex	*(struct)
->	O
gram4	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
,	O
p0	*(char)
,	O
p4	*(char)
-	O
p0	*(char)
,	O
&	O
found	*(void)
)	O
==	O
0	int
)	O
{	O
index_list_ty	*(int)
list	*(int)
=	O
(	O
index_list_ty	*(int)
)	O
found	*(void)
;	O
mult_index_list_accumulate	(*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long)),*(int))->(void)
(	O
&	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
,	O
list	*(int)
)	O
;	O
}	O
if	O
(	O
*	O
p4	*(char)
==	O
'\0'	O
)	O
break	O
;	O
p0	*(char)
=	O
p1	*(char)
;	O
p1	*(char)
=	O
p2	*(char)
;	O
p2	*(char)
=	O
p3	*(char)
;	O
p3	*(char)
=	O
p4	*(char)
;	O
p4	*(char)
=	O
p4	*(char)
+	O
findex	*(struct)
->	O
iterator	*((*(char))->(long))
(	O
p4	*(char)
)	O
;	O
}	O
mult_index_list_sort	(*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long)))->(void)
(	O
&	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
)	O
;	O
{	O
size_t	long
count	long
;	O
struct	O
mult_index	struct(int,int)
*	O
ptr	*(*(void))
;	O
message_ty	struct
*	O
best_mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
;	O
double	O
best_weight	double
;	O
count	long
=	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
.	O
nitems	long
;	O
if	O
(	O
heuristic	bool
)	O
{	O
if	O
(	O
count	long
>	O
findex	*(struct)
->	O
firstfew	long
)	O
count	long
=	O
findex	*(struct)
->	O
firstfew	long
;	O
}	O
best_weight	double
=	O
lower_bound	double
;	O
best_mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
=	O
NULL	O
;	O
for	O
(	O
ptr	*(*(void))
=	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
.	O
item	*(*(char))
;	O
count	long
>	O
0	int
;	O
ptr	*(*(void))
++	O
,	O
count	long
--	O
)	O
{	O
message_ty	struct
*	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
=	O
findex	*(struct)
->	O
messages	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
[	O
ptr	*(*(void))
->	O
index	(*(char),int)->(*(char))
]	O
;	O
double	O
weight	double
=	O
fuzzy_search_goal_function	(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))),*(char),*(char),double)->(double)
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
msgctxt	*(char)
,	O
msgid	*(char)
,	O
best_weight	double
)	O
;	O
if	O
(	O
weight	double
>	O
best_weight	double
)	O
{	O
best_weight	double
=	O
weight	double
;	O
best_mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
=	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
;	O
}	O
}	O
mult_index_list_free	(*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long)))->(void)
(	O
&	O
accu	*(struct(*(struct(int,int)),long,long,*(struct(int,int)),long))
)	O
;	O
return	O
best_mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
;	O
}	O
}	O
}	O
}	O
}	O
{	O
size_t	long
l	long
=	O
strlen	(*(char))->(long)
(	O
str	*(char)
)	O
;	O
size_t	long
lmin	long
,	O
lmax	long
;	O
message_ty	struct
*	O
best_mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
;	O
double	O
best_weight	double
;	O
if	O
(	O
!	O
(	O
l	long
<=	O
SHORT_STRING_MAX_BYTES	O
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
lmin	long
=	O
(	O
int	O
)	O
ceil	(double)->(double)
(	O
l	long
/	O
(	O
2	int
/	O
FUZZY_THRESHOLD	int
-	O
1	int
)	O
)	O
;	O
lmax	long
=	O
(	O
int	O
)	O
(	O
l	long
*	O
(	O
2	int
/	O
FUZZY_THRESHOLD	int
-	O
1	int
)	O
)	O
;	O
if	O
(	O
!	O
(	O
lmax	long
<=	O
SHORT_MSG_MAX	O
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
best_weight	double
=	O
lower_bound	double
;	O
best_mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
=	O
NULL	O
;	O
for	O
(	O
l	long
=	O
lmin	long
;	O
l	long
<=	O
lmax	long
;	O
l	long
++	O
)	O
{	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
=	O
findex	*(struct)
->	O
short_messages	*(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))))
[	O
l	long
]	O
;	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
nitems	long
;	O
j	long
++	O
)	O
{	O
message_ty	struct
*	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
=	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
[	O
j	long
]	O
;	O
double	O
weight	double
=	O
fuzzy_search_goal_function	(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))),*(char),*(char),double)->(double)
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
msgctxt	*(char)
,	O
msgid	*(char)
,	O
best_weight	double
)	O
;	O
if	O
(	O
weight	double
>	O
best_weight	double
)	O
{	O
best_weight	double
=	O
weight	double
;	O
best_mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
=	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
;	O
}	O
}	O
}	O
return	O
best_mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
;	O
}	O
}	O
void	O
message_fuzzy_index_free	(*(struct))->(void)
(	O
message_fuzzy_index_ty	struct
*	O
findex	*(struct)
)	O
{	O
size_t	long
l	long
;	O
void	O
*	O
iter	*(void)
;	O
const	O
void	O
*	O
key	*(void)
;	O
size_t	long
keylen	long
;	O
void	O
*	O
data	*(void)
;	O
for	O
(	O
l	long
=	O
0	int
;	O
l	long
<=	O
SHORT_MSG_MAX	O
;	O
l	long
++	O
)	O
message_list_free	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),int)->(void)
(	O
findex	*(struct)
->	O
short_messages	*(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))))
[	O
l	long
]	O
,	O
1	int
)	O
;	O
free	(*(void))->(void)
(	O
findex	*(struct)
->	O
short_messages	*(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))))
)	O
;	O
iter	*(void)
=	O
NULL	O
;	O
while	O
(	O
hash_iterate	(*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),*(*(void)),*(*(void)),*(long),*(*(void)))->(int)
(	O
&	O
findex	*(struct)
->	O
gram4	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
,	O
&	O
iter	*(void)
,	O
&	O
key	*(void)
,	O
&	O
keylen	long
,	O
&	O
data	*(void)
)	O
==	O
0	int
)	O
free	(*(void))->(void)
(	O
(	O
index_list_ty	*(int)
*	O
)	O
data	*(void)
)	O
;	O
hash_destroy	(*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))->(int)
(	O
&	O
findex	*(struct)
->	O
gram4	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
)	O
;	O
free	(*(void))->(void)
(	O
findex	*(struct)
)	O
;	O
}	O
