void	O
die	(int,*(char))->(void)
(	O
int	O
code	int
,	O
const	O
char	O
*	O
fmt	*(char)
,	O
...	O
)	O
;	O
int	O
doit	(int,*(struct(short,short,struct(int),array(char))))->(int)
(	O
int	O
f	int
,	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
*	O
fromp	*(struct(short,short,struct(int),array(char)))
)	O
;	O
const	O
char	O
doc	*(char)
[	O
]	O
=	O
"remote execution daemon"	*(char)
;	O
static	O
struct	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
=	O
{	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
doc	*(char)
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
}	O
;	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
from	struct(short,short,struct(int),array(char))
;	O
socklen_t	int
fromlen	int
;	O
int	O
sockfd	int
=	O
STDIN_FILENO	int
;	O
int	O
index	(*(char),int)->(*(char))
;	O
set_program_name	(*(char))->(void)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
iu_argp_init	O
(	O
"rexecd"	*(char)
,	O
default_program_authors	array(*(char))
)	O
;	O
argp_parse	(*(struct(*(struct(*`,int,*`,int,*`,int)),*((int,*`,*`)->(int)),*(char),*(char),*(struct(*`,int,*`,int)),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,*(int),*(void))->(int)
(	O
&	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
,	O
argc	int
,	O
argv	*(*(char))
,	O
0	int
,	O
&	O
index	(*(char),int)->(*(char))
,	O
NULL	O
)	O
;	O
if	O
(	O
argc	int
>	O
index	(*(char),int)->(*(char))
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"surplus arguments"	*(char)
)	O
;	O
fromlen	int
=	O
sizeof	O
(	O
from	struct(short,short,struct(int),array(char))
)	O
;	O
if	O
(	O
getpeername	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),*(int))->(int)
(	O
sockfd	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
from	struct(short,short,struct(int),array(char))
,	O
&	O
fromlen	int
)	O
<	O
0	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"getpeername"	*(char)
)	O
;	O
doit	(int,*(struct(short,short,struct(int),array(char))))->(int)
(	O
sockfd	int
,	O
&	O
from	struct(short,short,struct(int),array(char))
)	O
;	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
char	O
username	array(char)
[	O
20	int
]	O
=	O
"USER="	*(char)
;	O
char	O
logname	array(char)
[	O
23	int
]	O
=	O
"LOGNAME="	*(char)
;	O
char	O
homedir	array(char)
[	O
64	int
]	O
=	O
"HOME="	*(char)
;	O
char	O
shell	array(char)
[	O
64	int
]	O
=	O
"SHELL="	*(char)
;	O
char	O
path	array(char)
[	O
sizeof	O
(	O
PATH_DEFPATH	O
)	O
+	O
sizeof	O
(	O
"PATH="	*(char)
)	O
]	O
=	O
"PATH="	*(char)
;	O
char	O
*	O
envinit	array(*(char))
[	O
]	O
=	O
{	O
homedir	array(char)
,	O
shell	array(char)
,	O
path	array(char)
,	O
username	array(char)
,	O
logname	array(char)
,	O
0	int
}	O
;	O
extern	O
char	O
*	O
*	O
environ	*(*(char))
;	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
a_sin	struct(short,short,struct(int),array(char))
=	O
{	O
AF_INET	O
}	O
;	O
char	O
*	O
getstr	(*(char))->(*(char))
(	O
const	O
char	O
*	O
)	O
;	O
static	O
char	O
*	O
get_user_password	(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))->(*(char))
(	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
)	O
{	O
char	O
*	O
pw_text	*(char)
=	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_passwd	*(char)
;	O
struct	O
spwd	struct(*(char),*(char),long,long,long,long,long,long,long)
*	O
spwd	struct(*(char),*(char),long,long,long,long,long,long,long)
=	O
getspnam	(*(char))->(*(struct(*(char),*(char),long,long,long,long,long,long,long)))
(	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
)	O
;	O
if	O
(	O
spwd	struct(*(char),*(char),long,long,long,long,long,long,long)
)	O
pw_text	*(char)
=	O
spwd	struct(*(char),*(char),long,long,long,long,long,long,long)
->	O
sp_pwdp	*(char)
;	O
return	O
pw_text	*(char)
;	O
}	O
int	O
doit	(int,*(struct(short,short,struct(int),array(char))))->(int)
(	O
int	O
f	int
,	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
*	O
fromp	*(struct(short,short,struct(int),array(char)))
)	O
{	O
char	O
*	O
cmdbuf	*(char)
,	O
*	O
cp	*(char)
,	O
*	O
namep	*(char)
;	O
char	O
*	O
user	*(char)
,	O
*	O
pass	*(char)
,	O
*	O
pw_password	*(char)
;	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
;	O
int	O
s	int
;	O
unsigned	O
short	O
port	short
;	O
int	O
pv	array(int)
[	O
2	int
]	O
,	O
pid	int
,	O
cc	int
;	O
fd_set	struct(array(long))
readfrom	struct(array(long))
,	O
ready	struct(array(long))
;	O
char	O
buf	array(char)
[	O
BUFSIZ	int
]	O
,	O
sig	char
;	O
int	O
one	int
=	O
1	int
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGINT	int
,	O
SIG_DFL	O
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGQUIT	int
,	O
SIG_DFL	O
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGTERM	int
,	O
SIG_DFL	O
)	O
;	O
if	O
(	O
f	int
!=	O
STDIN_FILENO	int
)	O
{	O
dup2	(int,int)->(int)
(	O
f	int
,	O
STDIN_FILENO	int
)	O
;	O
dup2	(int,int)->(int)
(	O
f	int
,	O
STDOUT_FILENO	int
)	O
;	O
dup2	(int,int)->(int)
(	O
f	int
,	O
STDERR_FILENO	int
)	O
;	O
}	O
alarm	(int)->(int)
(	O
60	int
)	O
;	O
port	short
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
char	O
c	char
;	O
if	O
(	O
read	*((*(void),*(char),long)->(long))
(	O
f	int
,	O
&	O
c	char
,	O
1	int
)	O
!=	O
1	int
)	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
if	O
(	O
c	char
==	O
0	int
)	O
break	O
;	O
port	short
=	O
port	short
*	O
10	int
+	O
c	char
-	O
'0'	O
;	O
}	O
alarm	(int)->(int)
(	O
0	int
)	O
;	O
if	O
(	O
port	short
!=	O
0	int
)	O
{	O
s	int
=	O
socket	(int,int,int)->(int)
(	O
AF_INET	O
,	O
SOCK_STREAM	int
,	O
0	int
)	O
;	O
if	O
(	O
s	int
<	O
0	int
)	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
if	O
(	O
bind	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(int)
(	O
s	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
a_sin	struct(short,short,struct(int),array(char))
,	O
sizeof	O
(	O
a_sin	struct(short,short,struct(int),array(char))
)	O
)	O
<	O
0	int
)	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
alarm	(int)->(int)
(	O
60	int
)	O
;	O
fromp	*(struct(short,short,struct(int),array(char)))
->	O
sin_port	short
=	O
htons	(short)->(short)
(	O
port	short
)	O
;	O
if	O
(	O
connect	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(int)
(	O
s	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
fromp	*(struct(short,short,struct(int),array(char)))
,	O
sizeof	O
(	O
*	O
fromp	*(struct(short,short,struct(int),array(char)))
)	O
)	O
<	O
0	int
)	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
alarm	(int)->(int)
(	O
0	int
)	O
;	O
}	O
user	*(char)
=	O
getstr	(*(char))->(*(char))
(	O
"username"	*(char)
)	O
;	O
pass	*(char)
=	O
getstr	(*(char))->(*(char))
(	O
"password"	*(char)
)	O
;	O
cmdbuf	*(char)
=	O
getstr	(*(char))->(*(char))
(	O
"command"	*(char)
)	O
;	O
setpwent	()->(void)
(	O
)	O
;	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
getpwnam	(*(char))->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
user	*(char)
)	O
;	O
if	O
(	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
==	O
NULL	O
)	O
die	(int,*(char))->(void)
(	O
1	int
,	O
"Login incorrect."	*(char)
)	O
;	O
endpwent	()->(void)
(	O
)	O
;	O
pw_password	*(char)
=	O
get_user_password	(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))->(*(char))
(	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
)	O
;	O
if	O
(	O
*	O
pw_password	*(char)
!=	O
'\0'	O
)	O
{	O
namep	*(char)
=	O
crypt	(*(char),*(char))->(*(char))
(	O
pass	*(char)
,	O
pw_password	*(char)
)	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
namep	*(char)
,	O
pw_password	*(char)
)	O
)	O
die	(int,*(char))->(void)
(	O
1	int
,	O
"Password incorrect."	*(char)
)	O
;	O
}	O
write	*((*(void),*(char),long)->(long))
(	O
STDERR_FILENO	int
,	O
"\0"	*(char)
,	O
1	int
)	O
;	O
if	O
(	O
port	short
)	O
{	O
pipe	(array(int))->(int)
(	O
pv	array(int)
)	O
;	O
pid	int
=	O
fork	()->(int)
(	O
)	O
;	O
if	O
(	O
pid	int
==	O
-	O
1	int
)	O
die	(int,*(char))->(void)
(	O
1	int
,	O
"Try again."	*(char)
)	O
;	O
if	O
(	O
pid	int
)	O
{	O
close	*((*(void))->(int))
(	O
STDIN_FILENO	int
)	O
;	O
close	*((*(void))->(int))
(	O
STDOUT_FILENO	int
)	O
;	O
close	*((*(void))->(int))
(	O
STDERR_FILENO	int
)	O
;	O
close	*((*(void))->(int))
(	O
f	int
)	O
;	O
close	*((*(void))->(int))
(	O
pv	array(int)
[	O
1	int
]	O
)	O
;	O
FD_ZERO	O
(	O
&	O
readfrom	struct(array(long))
)	O
;	O
FD_SET	O
(	O
s	int
,	O
&	O
readfrom	struct(array(long))
)	O
;	O
FD_SET	O
(	O
pv	array(int)
[	O
0	int
]	O
,	O
&	O
readfrom	struct(array(long))
)	O
;	O
ioctl	(int,long)->(int)
(	O
pv	array(int)
[	O
1	int
]	O
,	O
FIONBIO	int
,	O
(	O
char	O
*	O
)	O
&	O
one	int
)	O
;	O
do	O
{	O
int	O
maxfd	int
=	O
s	int
;	O
ready	struct(array(long))
=	O
readfrom	struct(array(long))
;	O
if	O
(	O
pv	array(int)
[	O
0	int
]	O
>	O
maxfd	int
)	O
maxfd	int
=	O
pv	array(int)
[	O
0	int
]	O
;	O
select	(int,*(struct(array(long))),*(struct(array(long))),*(struct(array(long))),*(struct(long,long)))->(int)
(	O
maxfd	int
+	O
1	int
,	O
(	O
fd_set	struct(array(long))
*	O
)	O
&	O
ready	struct(array(long))
,	O
(	O
fd_set	struct(array(long))
*	O
)	O
NULL	O
,	O
(	O
fd_set	struct(array(long))
*	O
)	O
NULL	O
,	O
(	O
struct	O
timeval	struct(long,long)
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
FD_ISSET	O
(	O
s	int
,	O
&	O
ready	struct(array(long))
)	O
)	O
{	O
if	O
(	O
read	*((*(void),*(char),long)->(long))
(	O
s	int
,	O
&	O
sig	char
,	O
1	int
)	O
<=	O
0	int
)	O
FD_CLR	O
(	O
s	int
,	O
&	O
readfrom	struct(array(long))
)	O
;	O
else	O
killpg	(int,int)->(int)
(	O
pid	int
,	O
sig	char
)	O
;	O
}	O
if	O
(	O
FD_ISSET	O
(	O
pv	array(int)
[	O
0	int
]	O
,	O
&	O
ready	struct(array(long))
)	O
)	O
{	O
cc	int
=	O
read	*((*(void),*(char),long)->(long))
(	O
pv	array(int)
[	O
0	int
]	O
,	O
buf	array(char)
,	O
sizeof	O
(	O
buf	array(char)
)	O
)	O
;	O
if	O
(	O
cc	int
<=	O
0	int
)	O
{	O
shutdown	(int,int)->(int)
(	O
s	int
,	O
1	int
+	O
1	int
)	O
;	O
FD_CLR	O
(	O
pv	array(int)
[	O
0	int
]	O
,	O
&	O
readfrom	struct(array(long))
)	O
;	O
}	O
else	O
write	*((*(void),*(char),long)->(long))
(	O
s	int
,	O
buf	array(char)
,	O
cc	int
)	O
;	O
}	O
}	O
while	O
(	O
FD_ISSET	O
(	O
pv	array(int)
[	O
0	int
]	O
,	O
&	O
readfrom	struct(array(long))
)	O
||	O
FD_ISSET	O
(	O
s	int
,	O
&	O
readfrom	struct(array(long))
)	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
setpgid	(int,int)->(int)
(	O
0	int
,	O
getpid	()->(int)
(	O
)	O
)	O
;	O
close	*((*(void))->(int))
(	O
s	int
)	O
;	O
close	*((*(void))->(int))
(	O
pv	array(int)
[	O
0	int
]	O
)	O
;	O
dup2	(int,int)->(int)
(	O
pv	array(int)
[	O
1	int
]	O
,	O
STDERR_FILENO	int
)	O
;	O
}	O
if	O
(	O
*	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_shell	*(char)
==	O
'\0'	O
)	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_shell	*(char)
=	O
PATH_BSHELL	O
;	O
if	O
(	O
f	int
>	O
2	int
)	O
close	*((*(void))->(int))
(	O
f	int
)	O
;	O
if	O
(	O
setegid	(int)->(int)
(	O
(	O
gid_t	int
)	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_gid	int
)	O
<	O
0	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"failed to set additional groups"	*(char)
)	O
;	O
if	O
(	O
setgid	(int)->(int)
(	O
(	O
gid_t	int
)	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_gid	int
)	O
<	O
0	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"failed to set group-ID"	*(char)
)	O
;	O
if	O
(	O
initgroups	(*(char),int)->(int)
(	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
,	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_gid	int
)	O
<	O
0	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"failed to initialize the supplementary group access list"	*(char)
)	O
;	O
if	O
(	O
setuid	(int)->(int)
(	O
(	O
uid_t	int
)	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_uid	int
)	O
<	O
0	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"failed to set user-ID"	*(char)
)	O
;	O
if	O
(	O
chdir	(*(char))->(int)
(	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_dir	*(char)
)	O
<	O
0	int
)	O
die	(int,*(char))->(void)
(	O
1	int
,	O
"No remote directory."	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
path	array(char)
,	O
PATH_DEFPATH	O
)	O
;	O
environ	*(*(char))
=	O
envinit	array(*(char))
;	O
strncat	(*(char),*(char),long)->(*(char))
(	O
homedir	array(char)
,	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_dir	*(char)
,	O
sizeof	O
(	O
homedir	array(char)
)	O
-	O
6	int
)	O
;	O
strncat	(*(char),*(char),long)->(*(char))
(	O
shell	array(char)
,	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_shell	*(char)
,	O
sizeof	O
(	O
shell	array(char)
)	O
-	O
7	int
)	O
;	O
strncat	(*(char),*(char),long)->(*(char))
(	O
username	array(char)
,	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
,	O
sizeof	O
(	O
username	array(char)
)	O
-	O
6	int
)	O
;	O
cp	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_shell	*(char)
,	O
'/'	O
)	O
;	O
if	O
(	O
cp	*(char)
)	O
cp	*(char)
++	O
;	O
else	O
cp	*(char)
=	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_shell	*(char)
;	O
execl	(*(char),*(char))->(int)
(	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_shell	*(char)
,	O
cp	*(char)
,	O
"-c"	*(char)
,	O
cmdbuf	*(char)
,	O
NULL	O
)	O
;	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"executing %s"	*(char)
,	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_shell	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
void	O
die	(int,*(char))->(void)
(	O
int	O
code	int
,	O
const	O
char	O
*	O
fmt	*(char)
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
ap	array(struct(int,int,*(void),*(void)))
;	O
char	O
buf	array(char)
[	O
BUFSIZ	int
]	O
;	O
int	O
n	int
;	O
va_start	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
fmt	*(char)
)	O
;	O
buf	array(char)
[	O
0	int
]	O
=	O
1	int
;	O
n	int
=	O
snprintf	(*(char),long,*(char))->(int)
(	O
buf	array(char)
+	O
1	int
,	O
sizeof	O
buf	array(char)
-	O
1	int
,	O
fmt	*(char)
,	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
va_end	O
(	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
if	O
(	O
n	int
>	O
sizeof	O
buf	array(char)
-	O
1	int
)	O
n	int
=	O
sizeof	O
buf	array(char)
-	O
1	int
;	O
buf	array(char)
[	O
n	int
]	O
=	O
'\n'	O
;	O
write	*((*(void),*(char),long)->(long))
(	O
STDERR_FILENO	int
,	O
buf	array(char)
,	O
n	int
)	O
;	O
}	O
char	O
*	O
getstr	(*(char))->(*(char))
(	O
const	O
char	O
*	O
err	long
)	O
{	O
size_t	long
buf_len	long
=	O
100	int
;	O
char	O
*	O
buf	array(char)
=	O
malloc	(long)->(*(void))
(	O
buf_len	long
)	O
,	O
*	O
end	*(char)
=	O
buf	array(char)
;	O
if	O
(	O
!	O
buf	array(char)
)	O
die	(int,*(char))->(void)
(	O
1	int
,	O
"Out of space reading %s"	*(char)
,	O
err	long
)	O
;	O
do	O
{	O
int	O
rd	int
=	O
read	*((*(void),*(char),long)->(long))
(	O
STDIN_FILENO	int
,	O
end	*(char)
,	O
1	int
)	O
;	O
if	O
(	O
rd	int
<=	O
0	int
)	O
{	O
if	O
(	O
rd	int
==	O
0	int
)	O
die	(int,*(char))->(void)
(	O
1	int
,	O
"EOF reading %s"	*(char)
,	O
err	long
)	O
;	O
else	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"%s"	*(char)
,	O
err	long
)	O
;	O
}	O
end	*(char)
+=	O
rd	int
;	O
if	O
(	O
(	O
buf	array(char)
+	O
buf_len	long
-	O
end	*(char)
)	O
<	O
(	O
buf_len	long
>>	O
3	int
)	O
)	O
{	O
size_t	long
end_offs	long
=	O
end	*(char)
-	O
buf	array(char)
;	O
buf_len	long
+=	O
buf_len	long
;	O
buf	array(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
buf	array(char)
,	O
buf_len	long
)	O
;	O
if	O
(	O
!	O
buf	array(char)
)	O
die	(int,*(char))->(void)
(	O
1	int
,	O
"Out of space reading %s"	*(char)
,	O
err	long
)	O
;	O
end	*(char)
=	O
buf	array(char)
+	O
end_offs	long
;	O
}	O
}	O
while	O
(	O
*	O
(	O
end	*(char)
-	O
1	int
)	O
)	O
;	O
return	O
buf	array(char)
;	O
}	O
