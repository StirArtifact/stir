static	O
int	O
g_active_flag	int
=	O
1	int
;	O
static	O
int	O
g_did_get_command	int
=	O
0	int
;	O
static	O
int	O
is_posix_shell_command	(*(char))->(int)
(	O
char	O
*	O
s	*(struct(*(char),*(char),int,int,int,char,int))
)	O
{	O
int	O
retval	int
=	O
0	int
;	O
if	O
(	O
strstr	(*(char),*(char))->(*(char))
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
,	O
"getconf"	*(char)
)	O
&&	O
strstr	(*(char),*(char))->(*(char))
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
,	O
"PATH"	*(char)
)	O
)	O
{	O
char	O
*	O
sp	*(struct(int,int,int,int,*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(char),*(char),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),int,int,int))
=	O
strdup	(*(char))->(*(char))
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
char	O
*	O
p	*(char)
=	O
sp	*(struct(int,int,int,int,*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(char),*(char),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),int,int,int))
;	O
return	O
1	int
;	O
while	O
(	O
p	*(char)
&&	O
*	O
p	*(char)
)	O
{	O
if	O
(	O
*	O
p	*(char)
==	O
'\\'	O
)	O
memmove	(*(void),*(void),long)->(*(void))
(	O
p	*(char)
,	O
p	*(char)
+	O
1	int
,	O
strlen	(*(char))->(long)
(	O
p	*(char)
+	O
1	int
)	O
+	O
1	int
)	O
;	O
else	O
p	*(char)
++	O
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
sp	*(struct(int,int,int,int,*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(char),*(char),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),int,int,int))
,	O
SWSSH_POSIX_SHELL_COMMAND	*(char)
)	O
==	O
0	int
)	O
{	O
if	O
(	O
g_did_get_command	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"internal error in swssh\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
2	int
)	O
;	O
}	O
g_did_get_command	int
=	O
g_active_flag	int
;	O
retval	int
=	O
1	int
;	O
}	O
else	O
{	O
retval	int
=	O
0	int
;	O
}	O
free	(*(void))->(void)
(	O
sp	*(struct(int,int,int,int,*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(char),*(char),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(struct(*(char),*(char),int,int,int,char,int)),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),int,int,int))
)	O
;	O
}	O
else	O
{	O
retval	int
=	O
0	int
;	O
}	O
return	O
retval	int
;	O
}	O
static	O
int	O
bail_on_taint	(*(char))->(int)
(	O
char	O
*	O
s	*(struct(*(char),*(char),int,int,int,char,int))
)	O
{	O
if	O
(	O
swlib_is_sh_tainted_string	(*(char))->(int)
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"arg contains shell meta characters [%s]\n"	*(char)
,	O
s	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
exit	(int)->(void)
(	O
2	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
char	O
*	O
*	O
safe_shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
SHCMD	struct(*(char),*(char),*(struct(*(*(char)),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int)
*	O
cmd	int
,	O
char	O
*	O
s	*(struct(*(char),*(char),int,int,int,char,int))
)	O
{	O
if	O
(	O
!	O
cmd	int
)	O
return	O
NULL	O
;	O
if	O
(	O
is_posix_shell_command	(*(char))->(int)
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
)	O
==	O
0	int
)	O
{	O
bail_on_taint	(*(char))->(int)
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
}	O
return	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
,	O
s	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
}	O
static	O
void	O
clean_leading_comm_at_sign	(*(*(char)))->(void)
(	O
char	O
*	O
*	O
ptar	*(*(char))
)	O
{	O
if	O
(	O
*	O
ptar	*(*(char))
==	O
NULL	O
)	O
return	O
;	O
if	O
(	O
(	O
*	O
*	O
ptar	*(*(char))
)	O
==	O
'@'	O
)	O
(	O
*	O
ptar	*(*(char))
)	O
++	O
;	O
while	O
(	O
(	O
*	O
*	O
ptar	*(*(char))
)	O
==	O
'\x20'	O
)	O
(	O
*	O
ptar	*(*(char))
)	O
++	O
;	O
}	O
static	O
int	O
cat_escapes	(*(struct(*(char),*(char),int,int,int,char,int)),int)->(int)
(	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
command	*(struct(*(char),*(char),int,int,int,char,int))
,	O
int	O
nhops	int
)	O
{	O
int	O
nbackslashes	int
=	O
0	int
;	O
if	O
(	O
nhops	int
==	O
0	int
)	O
{	O
nbackslashes	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
nhops	int
==	O
1	int
)	O
{	O
nbackslashes	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
nhops	int
==	O
2	int
)	O
{	O
nbackslashes	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
nhops	int
==	O
3	int
)	O
{	O
nbackslashes	int
=	O
3	int
;	O
}	O
else	O
if	O
(	O
nhops	int
==	O
4	int
)	O
{	O
nbackslashes	int
=	O
7	int
;	O
}	O
else	O
{	O
return	O
-	O
1	int
;	O
}	O
{	O
int	O
i	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
nbackslashes	int
;	O
i	int
++	O
)	O
{	O
strob_strcat	(*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(*(char))
(	O
command	*(struct(*(char),*(char),int,int,int,char,int))
,	O
"\\"	*(char)
)	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
form_intermediate_msg	(*(struct(*(char),*(char),int,int,int,char,int)),*(char),int)->(int)
(	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
command	*(struct(*(char),*(char),int,int,int,char,int))
,	O
char	O
*	O
host	*(char)
,	O
int	O
nhops	int
)	O
{	O
strob_sprintf	(*(struct(*(char),*(char),int,int,int,char,int)),int,*(char))->(int)
(	O
command	*(struct(*(char),*(char),int,int,int,char,int))
,	O
0	int
,	O
"echo 10%d Intermediate Host:%s:"	*(char)
SWSSH_TRACK_PID	*(char)
";"	*(char)
,	O
nhops	int
,	O
host	*(char)
)	O
;	O
swssh_protect_shell_metacharacters	(*(struct(*(char),*(char),int,int,int,char,int)),int,*(char))->(int)
(	O
command	*(struct(*(char),*(char),int,int,int,char,int))
,	O
nhops	int
,	O
SWBIS_TAINTED_CHARS	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
add_host_kill	(int,*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char),int)->(void)
(	O
int	O
doimsg	int
,	O
SHCMD	struct(*(char),*(char),*(struct(*(*(char)),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int)
*	O
cmd	int
,	O
char	O
*	O
host	*(char)
,	O
int	O
cmdcount	int
)	O
{	O
char	O
*	O
s	*(struct(*(char),*(char),int,int,int,char,int))
;	O
char	O
*	O
tok	*(char)
;	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
t	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
;	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
;	O
if	O
(	O
!	O
doimsg	int
)	O
return	O
;	O
t	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
=	O
strob_open	(long)->(*(struct(*(char),*(char),int,int,int,char,int)))
(	O
10	int
)	O
;	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strob_open	(long)->(*(struct(*(char),*(char),int,int,int,char,int)))
(	O
10	int
)	O
;	O
strob_sprintf	(*(struct(*(char),*(char),int,int,int,char,int)),int,*(char))->(int)
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
,	O
0	int
,	O
"kill "	*(char)
SWC_KILL_PID_MARK	*(char)
" ;"	*(char)
,	O
cmdcount	int
,	O
host	*(char)
)	O
;	O
swssh_protect_shell_metacharacters	(*(struct(*(char),*(char),int,int,int,char,int)),int,*(char))->(int)
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
,	O
cmdcount	int
,	O
SWBIS_TAINTED_CHARS	*(char)
)	O
;	O
strob_strcpy	(*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(*(char))
(	O
t	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
,	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
)	O
)	O
;	O
s	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
t	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
;	O
while	O
(	O
(	O
tok	*(char)
=	O
strob_strstrtok	(*(struct(*(char),*(char),int,int,int,char,int)),*(char),*(char))->(*(char))
(	O
t	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
,	O
s	*(struct(*(char),*(char),int,int,int,char,int))
,	O
" "	*(char)
)	O
)	O
)	O
{	O
s	*(struct(*(char),*(char),int,int,int,char,int))
=	O
NULL	O
;	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
,	O
tok	*(char)
)	O
;	O
}	O
strob_close	(*(struct(*(char),*(char),int,int,int,char,int)))->(int)
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
strob_close	(*(struct(*(char),*(char),int,int,int,char,int)))->(int)
(	O
t	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
;	O
}	O
static	O
void	O
add_host_message	(int,*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char),int)->(void)
(	O
int	O
doimsg	int
,	O
SHCMD	struct(*(char),*(char),*(struct(*(*(char)),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int)
*	O
cmd	int
,	O
char	O
*	O
host	*(char)
,	O
int	O
cmdcount	int
)	O
{	O
char	O
*	O
s	*(struct(*(char),*(char),int,int,int,char,int))
;	O
char	O
*	O
tok	*(char)
;	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
t	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
;	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
;	O
if	O
(	O
!	O
doimsg	int
)	O
return	O
;	O
t	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
=	O
strob_open	(long)->(*(struct(*(char),*(char),int,int,int,char,int)))
(	O
10	int
)	O
;	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strob_open	(long)->(*(struct(*(char),*(char),int,int,int,char,int)))
(	O
10	int
)	O
;	O
form_intermediate_msg	(*(struct(*(char),*(char),int,int,int,char,int)),*(char),int)->(int)
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
,	O
host	*(char)
,	O
cmdcount	int
)	O
;	O
strob_strcpy	(*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(*(char))
(	O
t	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
,	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
)	O
)	O
;	O
s	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
t	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
;	O
while	O
(	O
(	O
tok	*(char)
=	O
strob_strstrtok	(*(struct(*(char),*(char),int,int,int,char,int)),*(char),*(char))->(*(char))
(	O
t	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
,	O
s	*(struct(*(char),*(char),int,int,int,char,int))
,	O
" "	*(char)
)	O
)	O
)	O
{	O
s	*(struct(*(char),*(char),int,int,int,char,int))
=	O
NULL	O
;	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
,	O
tok	*(char)
)	O
;	O
}	O
strob_close	(*(struct(*(char),*(char),int,int,int,char,int)))->(int)
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
strob_close	(*(struct(*(char),*(char),int,int,int,char,int)))->(int)
(	O
t	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
;	O
}	O
static	O
void	O
parse_host_port	(*(char),*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)))->(void)
(	O
char	O
*	O
host	*(char)
,	O
SHCMD	struct(*(char),*(char),*(struct(*(*(char)),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int)
*	O
cmd	int
,	O
SHCMD	struct(*(char),*(char),*(struct(*(*(char)),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int)
*	O
kmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
)	O
{	O
char	O
*	O
u	*(char)
;	O
char	O
*	O
s	*(struct(*(char),*(char),int,int,int,char,int))
;	O
if	O
(	O
(	O
u	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
host	*(char)
,	O
'_'	O
)	O
)	O
==	O
NULL	O
)	O
{	O
safe_shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
kmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
host	*(char)
)	O
;	O
safe_shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
,	O
host	*(char)
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
s	*(struct(*(char),*(char),int,int,int,char,int))
=	O
u	*(char)
;	O
s	*(struct(*(char),*(char),int,int,int,char,int))
++	O
;	O
swlib_atoi	(*(char),*(int))->(int)
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
,	O
&	O
status	int
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
*	O
u	*(char)
=	O
'\0'	O
;	O
safe_shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
kmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
"-p"	*(char)
)	O
;	O
safe_shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
,	O
"-p"	*(char)
)	O
;	O
safe_shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
kmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
s	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
safe_shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
,	O
s	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
safe_shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
kmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
host	*(char)
)	O
;	O
safe_shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
,	O
host	*(char)
)	O
;	O
*	O
u	*(char)
=	O
'_'	O
;	O
}	O
else	O
{	O
safe_shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
kmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
host	*(char)
)	O
;	O
safe_shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
,	O
host	*(char)
)	O
;	O
}	O
}	O
}	O
void	O
swssh_deactivate_sanity_check	()->(void)
(	O
void	O
)	O
{	O
g_active_flag	int
=	O
0	int
;	O
}	O
void	O
swssh_reset_module	()->(void)
(	O
void	O
)	O
{	O
g_did_get_command	int
=	O
0	int
;	O
}	O
char	O
*	O
swssh_landing_command	(*(char),int)->(*(char))
(	O
char	O
*	O
shellname	*(char)
,	O
int	O
opt_no_getconf	int
)	O
{	O
if	O
(	O
shellname	*(char)
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
shellname	*(char)
,	O
"bash"	*(char)
)	O
==	O
0	int
)	O
{	O
return	O
SWSSH_BASH_SHELL_COMMAND	*(char)
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
shellname	*(char)
,	O
SH_A_sh	*(char)
)	O
==	O
0	int
)	O
{	O
return	O
SWSSH_SH_SHELL_COMMAND	*(char)
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
shellname	*(char)
,	O
SH_A_ash	*(char)
)	O
==	O
0	int
)	O
{	O
return	O
SWSSH_ASH_SHELL_COMMAND	*(char)
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
shellname	*(char)
,	O
SH_A_ksh	*(char)
)	O
==	O
0	int
)	O
{	O
return	O
SWSSH_KSH_SHELL_COMMAND	*(char)
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
shellname	*(char)
,	O
SH_A_mksh	*(char)
)	O
==	O
0	int
)	O
{	O
return	O
SWSSH_MKSH_SHELL_COMMAND	*(char)
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
shellname	*(char)
,	O
SH_A_dash	*(char)
)	O
==	O
0	int
)	O
{	O
return	O
SWSSH_DASH_SHELL_COMMAND	*(char)
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
shellname	*(char)
,	O
"posix"	*(char)
)	O
==	O
0	int
)	O
{	O
return	O
SWSSH_POSIX_SHELL_COMMAND	*(char)
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
shellname	*(char)
,	O
"detect"	*(char)
)	O
==	O
0	int
)	O
{	O
return	O
SWSSH_SYSTEM_SHELL_COMMAND	*(char)
;	O
}	O
else	O
{	O
return	O
SWSSH_SYSTEM_SHELL_COMMAND	*(char)
;	O
}	O
}	O
else	O
{	O
if	O
(	O
opt_no_getconf	int
==	O
0	int
)	O
return	O
SWSSH_POSIX_SHELL_COMMAND	*(char)
;	O
else	O
return	O
SWSSH_SYSTEM_SHELL_COMMAND	*(char)
;	O
}	O
}	O
int	O
swssh_protect_shell_metacharacters	(*(struct(*(char),*(char),int,int,int,char,int)),int,*(char))->(int)
(	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
command	*(struct(*(char),*(char),int,int,int,char,int))
,	O
int	O
nhops	int
,	O
char	O
*	O
taints	*(char)
)	O
{	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strob_open	(long)->(*(struct(*(char),*(char),int,int,int,char,int)))
(	O
1	int
)	O
;	O
char	O
ns	array(char)
[	O
2	int
]	O
;	O
char	O
*	O
s	*(struct(*(char),*(char),int,int,int,char,int))
;	O
strob_strcpy	(*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(*(char))
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
,	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
command	*(struct(*(char),*(char),int,int,int,char,int))
)	O
)	O
;	O
s	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
strob_strcpy	(*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(*(char))
(	O
command	*(struct(*(char),*(char),int,int,int,char,int))
,	O
""	*(char)
)	O
;	O
ns	array(char)
[	O
1	int
]	O
=	O
'\0'	O
;	O
while	O
(	O
*	O
s	*(struct(*(char),*(char),int,int,int,char,int))
)	O
{	O
if	O
(	O
strchr	(*(char),int)->(*(char))
(	O
taints	*(char)
,	O
(	O
int	O
)	O
(	O
*	O
s	*(struct(*(char),*(char),int,int,int,char,int))
)	O
)	O
)	O
{	O
cat_escapes	(*(struct(*(char),*(char),int,int,int,char,int)),int)->(int)
(	O
command	*(struct(*(char),*(char),int,int,int,char,int))
,	O
nhops	int
)	O
;	O
}	O
ns	array(char)
[	O
0	int
]	O
=	O
*	O
s	*(struct(*(char),*(char),int,int,int,char,int))
;	O
strob_strcat	(*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(*(char))
(	O
command	*(struct(*(char),*(char),int,int,int,char,int))
,	O
ns	array(char)
)	O
;	O
s	*(struct(*(char),*(char),int,int,int,char,int))
++	O
;	O
}	O
strob_close	(*(struct(*(char),*(char),int,int,int,char,int)))->(int)
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
return	O
0	int
;	O
}	O
int	O
swssh_determine_target_path	(*(char),*(*(char)))->(int)
(	O
char	O
*	O
target	*(char)
,	O
char	O
*	O
*	O
path	*(char)
)	O
{	O
char	O
*	O
ds	*(char)
;	O
char	O
*	O
p	*(char)
;	O
if	O
(	O
*	O
target	*(char)
==	O
':'	O
||	O
*	O
target	*(char)
==	O
'/'	O
||	O
*	O
target	*(char)
==	O
'.'	O
||	O
*	O
target	*(char)
==	O
'-'	O
)	O
{	O
*	O
path	*(char)
=	O
target	*(char)
;	O
target	*(char)
=	O
target	*(char)
+	O
strlen	(*(char))->(long)
(	O
*	O
path	*(char)
)	O
;	O
}	O
else	O
{	O
ds	*(char)
=	O
target	*(char)
;	O
p	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
ds	*(char)
,	O
':'	O
)	O
;	O
if	O
(	O
p	*(char)
)	O
{	O
(	O
*	O
path	*(char)
)	O
=	O
++	O
p	*(char)
;	O
}	O
else	O
if	O
(	O
!	O
p	*(char)
)	O
{	O
if	O
(	O
ds	*(char)
&&	O
(	O
*	O
ds	*(char)
==	O
'/'	O
||	O
*	O
ds	*(char)
==	O
'.'	O
||	O
*	O
ds	*(char)
==	O
'-'	O
)	O
)	O
{	O
*	O
path	*(char)
=	O
ds	*(char)
;	O
}	O
}	O
else	O
{	O
;	O
}	O
if	O
(	O
*	O
path	*(char)
)	O
{	O
*	O
path	*(char)
=	O
target	*(char)
+	O
strlen	(*(char))->(long)
(	O
target	*(char)
)	O
;	O
if	O
(	O
strstr	(*(char),*(char))->(*(char))
(	O
*	O
path	*(char)
,	O
TARGET_DELIM	*(char)
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"target path not at terminal host\n"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
{	O
return	O
-	O
1	int
;	O
}	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
swssh_parse_target	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char),*(char),*(char),*(*(char)),*(*(char)),*(char),int,*(char),int)->(int)
(	O
SHCMD	struct(*(char),*(char),*(struct(*(*(char)),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int)
*	O
cmd	int
,	O
SHCMD	struct(*(char),*(char),*(struct(*(*(char)),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int)
*	O
kmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
char	O
*	O
target	*(char)
,	O
char	O
*	O
ssh_command	*(char)
,	O
char	O
*	O
fp_remote_ssh_command	*(char)
,	O
char	O
*	O
*	O
path	*(char)
,	O
char	O
*	O
*	O
terminal_host	*(*(char))
,	O
char	O
*	O
tty_option	*(char)
,	O
int	O
do_imsg	int
,	O
char	O
*	O
sshoption	*(char)
,	O
int	O
do_forward_auth_agent	int
)	O
{	O
int	O
cmdcount	int
=	O
0	int
;	O
int	O
icmdcount	int
=	O
0	int
;	O
int	O
is_multihop	int
=	O
0	int
;	O
int	O
nhops	int
;	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strob_open	(long)->(*(struct(*(char),*(char),int,int,int,char,int)))
(	O
10	int
)	O
;	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
tmp2	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strob_open	(long)->(*(struct(*(char),*(char),int,int,int,char,int)))
(	O
10	int
)	O
;	O
char	O
*	O
remote_ssh_command	*(char)
;	O
char	O
*	O
p	*(char)
;	O
char	O
*	O
s	*(struct(*(char),*(char),int,int,int,char,int))
;	O
char	O
*	O
commat	*(char)
;	O
char	O
*	O
user	*(char)
;	O
char	O
*	O
host	*(char)
;	O
char	O
*	O
parent_host	*(char)
=	O
NULL	O
;	O
char	O
*	O
tok	*(char)
;	O
char	O
*	O
is_ssh	*(char)
;	O
clean_leading_comm_at_sign	(*(*(char)))->(void)
(	O
&	O
target	*(char)
)	O
;	O
*	O
terminal_host	*(*(char))
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
*	O
path	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
if	O
(	O
ssh_command	*(char)
==	O
NULL	O
)	O
ssh_command	*(char)
=	O
"ssh"	*(char)
;	O
is_ssh	*(char)
=	O
strstr	(*(char),*(char))->(*(char))
(	O
ssh_command	*(char)
,	O
"ssh"	*(char)
)	O
;	O
strob_strcpy	(*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(*(char))
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
,	O
fp_remote_ssh_command	*(char)
)	O
;	O
s	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strstr	(*(char),*(char))->(*(char))
(	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
)	O
,	O
"//"	*(char)
)	O
;	O
if	O
(	O
0	int
&&	O
s	*(struct(*(char),*(char),int,int,int,char,int))
==	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
)	O
)	O
{	O
;	O
}	O
else	O
{	O
swlib_basename	(*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(*(char))
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
,	O
fp_remote_ssh_command	*(char)
)	O
;	O
}	O
remote_ssh_command	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
)	O
)	O
;	O
{	O
char	O
*	O
ds	*(char)
;	O
if	O
(	O
*	O
target	*(char)
==	O
':'	O
||	O
*	O
target	*(char)
==	O
'/'	O
||	O
*	O
target	*(char)
==	O
'.'	O
||	O
*	O
target	*(char)
==	O
'-'	O
)	O
{	O
*	O
path	*(char)
=	O
target	*(char)
;	O
target	*(char)
=	O
target	*(char)
+	O
strlen	(*(char))->(long)
(	O
*	O
path	*(char)
)	O
;	O
}	O
else	O
{	O
ds	*(char)
=	O
target	*(char)
;	O
p	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
ds	*(char)
,	O
':'	O
)	O
;	O
if	O
(	O
p	*(char)
)	O
{	O
(	O
*	O
path	*(char)
)	O
=	O
++	O
p	*(char)
;	O
}	O
else	O
if	O
(	O
!	O
p	*(char)
)	O
{	O
if	O
(	O
ds	*(char)
&&	O
(	O
*	O
ds	*(char)
==	O
'/'	O
||	O
*	O
ds	*(char)
==	O
'.'	O
||	O
*	O
ds	*(char)
==	O
'-'	O
)	O
)	O
{	O
*	O
path	*(char)
=	O
ds	*(char)
;	O
}	O
}	O
else	O
{	O
;	O
}	O
if	O
(	O
*	O
path	*(char)
)	O
{	O
if	O
(	O
strstr	(*(char),*(char))->(*(char))
(	O
*	O
path	*(char)
,	O
TARGET_DELIM	*(char)
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"target path not at terminal host\n"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
}	O
}	O
strob_strcpy	(*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(*(char))
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
,	O
target	*(char)
)	O
;	O
s	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
nhops	int
=	O
0	int
;	O
while	O
(	O
(	O
tok	*(char)
=	O
strob_strstrtok	(*(struct(*(char),*(char),int,int,int,char,int)),*(char),*(char))->(*(char))
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
,	O
s	*(struct(*(char),*(char),int,int,int,char,int))
,	O
TARGET_DELIM	*(char)
)	O
)	O
)	O
{	O
nhops	int
++	O
;	O
s	*(struct(*(char),*(char),int,int,int,char,int))
=	O
NULL	O
;	O
}	O
if	O
(	O
nhops	int
>	O
1	int
)	O
{	O
is_multihop	int
=	O
1	int
;	O
}	O
strob_strcpy	(*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(*(char))
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
,	O
target	*(char)
)	O
;	O
s	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
while	O
(	O
(	O
tok	*(char)
=	O
strob_strstrtok	(*(struct(*(char),*(char),int,int,int,char,int)),*(char),*(char))->(*(char))
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
,	O
s	*(struct(*(char),*(char),int,int,int,char,int))
,	O
TARGET_DELIM	*(char)
)	O
)	O
)	O
{	O
user	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
host	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
*	O
terminal_host	*(*(char))
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
s	*(struct(*(char),*(char),int,int,int,char,int))
=	O
NULL	O
;	O
commat	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
tok	*(char)
,	O
'@'	O
)	O
;	O
if	O
(	O
commat	*(char)
)	O
{	O
user	*(char)
=	O
tok	*(char)
;	O
host	*(char)
=	O
commat	*(char)
+	O
1	int
;	O
*	O
commat	*(char)
=	O
'\0'	O
;	O
}	O
else	O
{	O
host	*(char)
=	O
tok	*(char)
;	O
}	O
if	O
(	O
strchr	(*(char),int)->(*(char))
(	O
host	*(char)
,	O
(	O
int	O
)	O
':'	O
)	O
)	O
{	O
*	O
strchr	(*(char),int)->(*(char))
(	O
host	*(char)
,	O
(	O
int	O
)	O
':'	O
)	O
=	O
'\0'	O
;	O
}	O
if	O
(	O
strlen	(*(char))->(long)
(	O
host	*(char)
)	O
)	O
{	O
*	O
terminal_host	*(*(char))
=	O
strdup	(*(char))->(*(char))
(	O
host	*(char)
)	O
;	O
if	O
(	O
cmdcount	int
==	O
0	int
)	O
{	O
safe_shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
kmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
ssh_command	*(char)
)	O
;	O
safe_shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
,	O
ssh_command	*(char)
)	O
;	O
}	O
else	O
{	O
add_host_message	(int,*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char),int)->(void)
(	O
do_imsg	int
,	O
cmd	int
,	O
parent_host	*(char)
,	O
cmdcount	int
)	O
;	O
add_host_kill	(int,*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char),int)->(void)
(	O
do_imsg	int
,	O
kmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
parent_host	*(char)
,	O
cmdcount	int
)	O
;	O
safe_shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
kmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
remote_ssh_command	*(char)
)	O
;	O
safe_shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
,	O
remote_ssh_command	*(char)
)	O
;	O
}	O
parent_host	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
host	*(char)
)	O
;	O
if	O
(	O
is_ssh	*(char)
)	O
{	O
if	O
(	O
tty_option	*(char)
)	O
{	O
safe_shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
,	O
tty_option	*(char)
)	O
;	O
safe_shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
,	O
tty_option	*(char)
)	O
;	O
safe_shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
kmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
tty_option	*(char)
)	O
;	O
safe_shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
kmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
tty_option	*(char)
)	O
;	O
}	O
if	O
(	O
is_multihop	int
)	O
{	O
if	O
(	O
do_forward_auth_agent	int
)	O
{	O
if	O
(	O
cmdcount	int
+	O
1	int
<	O
nhops	int
)	O
{	O
safe_shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
,	O
"-A"	*(char)
)	O
;	O
safe_shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
kmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
"-A"	*(char)
)	O
;	O
}	O
else	O
{	O
;	O
}	O
}	O
}	O
if	O
(	O
sshoption	*(char)
&&	O
strlen	(*(char))->(long)
(	O
sshoption	*(char)
)	O
)	O
{	O
strob_strcpy	(*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(*(char))
(	O
tmp2	*(struct(*(char),*(char),int,int,int,char,int))
,	O
"-"	*(char)
)	O
;	O
strob_strcat	(*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(*(char))
(	O
tmp2	*(struct(*(char),*(char),int,int,int,char,int))
,	O
sshoption	*(char)
)	O
;	O
safe_shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
kmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
tmp2	*(struct(*(char),*(char),int,int,int,char,int))
)	O
)	O
;	O
safe_shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
,	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
tmp2	*(struct(*(char),*(char),int,int,int,char,int))
)	O
)	O
;	O
}	O
}	O
cmdcount	int
++	O
;	O
}	O
else	O
if	O
(	O
strlen	(*(char))->(long)
(	O
host	*(char)
)	O
==	O
0	int
&&	O
icmdcount	int
==	O
0	int
)	O
{	O
safe_shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
,	O
"/bin/sh"	*(char)
)	O
;	O
}	O
else	O
{	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
user	*(char)
)	O
{	O
safe_shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
,	O
"-l"	*(char)
)	O
;	O
safe_shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
,	O
user	*(char)
)	O
;	O
safe_shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
kmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
"-l"	*(char)
)	O
;	O
safe_shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
kmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
user	*(char)
)	O
;	O
}	O
if	O
(	O
strlen	(*(char))->(long)
(	O
host	*(char)
)	O
)	O
{	O
parse_host_port	(*(char),*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)))->(void)
(	O
host	*(char)
,	O
cmd	int
,	O
kmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
)	O
;	O
}	O
else	O
if	O
(	O
strlen	(*(char))->(long)
(	O
host	*(char)
)	O
==	O
0	int
&&	O
icmdcount	int
==	O
0	int
)	O
{	O
safe_shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
,	O
"-c"	*(char)
)	O
;	O
}	O
icmdcount	int
++	O
;	O
}	O
if	O
(	O
icmdcount	int
==	O
0	int
)	O
{	O
safe_shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
,	O
"/bin/sh"	*(char)
)	O
;	O
safe_shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
,	O
"-c"	*(char)
)	O
;	O
}	O
free	(*(void))->(void)
(	O
remote_ssh_command	*(char)
)	O
;	O
strob_close	(*(struct(*(char),*(char),int,int,int,char,int)))->(int)
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
strob_close	(*(struct(*(char),*(char),int,int,int,char,int)))->(int)
(	O
tmp2	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
return	O
cmdcount	int
;	O
}	O
int	O
swssh_assemble_ssh_cmd	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),int)->(int)
(	O
SHCMD	struct(*(char),*(char),*(struct(*(*(char)),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int)
*	O
shcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
STRAR	struct(int,int,*(struct(*(*(char)),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
cmdlist	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
STRAR	struct(int,int,*(struct(*(*(char)),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
delimlist	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
int	O
nhops	int
)	O
{	O
char	O
*	O
cmd1	*(char)
;	O
int	O
i	int
=	O
0	int
;	O
g_did_get_command	int
=	O
0	int
;	O
while	O
(	O
(	O
cmd1	*(char)
=	O
strar_get	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),int)->(*(char))
(	O
cmdlist	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
i	int
)	O
)	O
)	O
{	O
safe_shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
shcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
cmd1	*(char)
)	O
;	O
i	int
++	O
;	O
}	O
return	O
0	int
;	O
}	O
