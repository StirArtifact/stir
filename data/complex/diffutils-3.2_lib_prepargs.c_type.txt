static	O
int	O
prepend_args	(*(char),*(char),*(*(char)))->(int)
(	O
char	O
const	O
*	O
options	*(char)
,	O
char	O
*	O
buf	*(char)
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
char	O
const	O
*	O
o	*(char)
=	O
options	*(char)
;	O
char	O
*	O
b	*(char)
=	O
buf	*(char)
;	O
int	O
n	long
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
while	O
(	O
ISSPACE	O
(	O
(	O
unsigned	O
char	O
)	O
*	O
o	*(char)
)	O
)	O
o	*(char)
++	O
;	O
if	O
(	O
!	O
*	O
o	*(char)
)	O
return	O
n	long
;	O
if	O
(	O
argv	*(*(char))
)	O
argv	*(*(char))
[	O
n	long
]	O
=	O
b	*(char)
;	O
n	long
++	O
;	O
do	O
if	O
(	O
(	O
*	O
b	*(char)
++	O
=	O
*	O
o	*(char)
++	O
)	O
==	O
'\\'	O
&&	O
*	O
o	*(char)
)	O
b	*(char)
[	O
-	O
1	int
]	O
=	O
*	O
o	*(char)
++	O
;	O
while	O
(	O
*	O
o	*(char)
&&	O
!	O
ISSPACE	O
(	O
(	O
unsigned	O
char	O
)	O
*	O
o	*(char)
)	O
)	O
;	O
*	O
b	*(char)
++	O
=	O
'\0'	O
;	O
}	O
}	O
void	O
prepend_default_options	(*(char),*(int),*(*(*(char))))->(void)
(	O
char	O
const	O
*	O
options	*(char)
,	O
int	O
*	O
pargc	*(int)
,	O
char	O
*	O
*	O
*	O
pargv	*(*(*(char)))
)	O
{	O
if	O
(	O
options	*(char)
)	O
{	O
char	O
*	O
buf	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
options	*(char)
)	O
+	O
1	int
)	O
;	O
int	O
prepended	int
=	O
prepend_args	(*(char),*(char),*(*(char)))->(int)
(	O
options	*(char)
,	O
buf	*(char)
,	O
(	O
char	O
*	O
*	O
)	O
0	int
)	O
;	O
int	O
argc	int
=	O
*	O
pargc	*(int)
;	O
char	O
*	O
const	O
*	O
argv	*(*(char))
=	O
*	O
pargv	*(*(*(char)))
;	O
char	O
*	O
*	O
pp	*(*(char))
=	O
xmalloc	(long)->(*(void))
(	O
(	O
prepended	int
+	O
argc	int
+	O
1	int
)	O
*	O
sizeof	O
*	O
pp	*(*(char))
)	O
;	O
*	O
pargc	*(int)
=	O
prepended	int
+	O
argc	int
;	O
*	O
pargv	*(*(*(char)))
=	O
pp	*(*(char))
;	O
*	O
pp	*(*(char))
++	O
=	O
*	O
argv	*(*(char))
++	O
;	O
pp	*(*(char))
+=	O
prepend_args	(*(char),*(char),*(*(char)))->(int)
(	O
options	*(char)
,	O
buf	*(char)
,	O
pp	*(*(char))
)	O
;	O
while	O
(	O
(	O
*	O
pp	*(*(char))
++	O
=	O
*	O
argv	*(*(char))
++	O
)	O
)	O
continue	O
;	O
}	O
}	O
