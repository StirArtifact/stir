static	O
double	O
zeta_xlt1_data	array(double)
[	O
14	int
]	O
=	O
{	O
1.48018677156931561235192914649	int
,	O
0.25012062539889426471999938167	int
,	O
0.00991137502135360774243761467	int
,	O
-	O
0.00012084759656676410329833091	int
,	O
-	O
4.7585866367662556504652535281e-06	int
,	O
2.2229946694466391855561441361e-07	int
,	O
-	O
2.2237496498030257121309056582e-09	int
,	O
-	O
1.0173226513229028319420799028e-10	int
,	O
4.3756643450424558284466248449e-12	int
,	O
-	O
6.2229632593100551465504090814e-14	int
,	O
-	O
6.6116201003272207115277520305e-16	int
,	O
4.9477279533373912324518463830e-17	int
,	O
-	O
1.0429819093456189719660003522e-18	int
,	O
6.9925216166580021051464412040e-21	int
,	O
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
zeta_xlt1_cs	struct(*(double),int,double,double,int)
=	O
{	O
zeta_xlt1_data	array(double)
,	O
13	int
,	O
-	O
1	int
,	O
1	int
,	O
8	int
}	O
;	O
static	O
double	O
zeta_xgt1_data	array(double)
[	O
30	int
]	O
=	O
{	O
19.3918515726724119415911269006	int
,	O
9.1525329692510756181581271500	int
,	O
0.2427897658867379985365270155	int
,	O
-	O
0.1339000688262027338316641329	int
,	O
0.0577827064065028595578410202	int
,	O
-	O
0.0187625983754002298566409700	int
,	O
0.0039403014258320354840823803	int
,	O
-	O
0.0000581508273158127963598882	int
,	O
-	O
0.0003756148907214820704594549	int
,	O
0.0001892530548109214349092999	int
,	O
-	O
0.0000549032199695513496115090	int
,	O
8.7086484008939038610413331863e-6	int
,	O
6.4609477924811889068410083425e-7	int
,	O
-	O
9.6749773915059089205835337136e-7	int
,	O
3.6585400766767257736982342461e-7	int
,	O
-	O
8.4592516427275164351876072573e-8	int
,	O
9.9956786144497936572288988883e-9	int
,	O
1.4260036420951118112457144842e-9	int
,	O
-	O
1.1761968823382879195380320948e-9	int
,	O
3.7114575899785204664648987295e-10	int
,	O
-	O
7.4756855194210961661210215325e-11	int
,	O
7.8536934209183700456512982968e-12	int
,	O
9.9827182259685539619810406271e-13	int
,	O
-	O
7.5276687030192221587850302453e-13	int
,	O
2.1955026393964279988917878654e-13	int
,	O
-	O
4.1934859852834647427576319246e-14	int
,	O
4.6341149635933550715779074274e-15	int
,	O
2.3742488509048340106830309402e-16	int
,	O
-	O
2.7276516388124786119323824391e-16	int
,	O
7.8473570134636044722154797225e-17	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
zeta_xgt1_cs	struct(*(double),int,double,double,int)
=	O
{	O
zeta_xgt1_data	array(double)
,	O
29	int
,	O
-	O
1	int
,	O
1	int
,	O
17	int
}	O
;	O
static	O
double	O
zetam1_inter_data	array(double)
[	O
24	int
]	O
=	O
{	O
-	O
21.7509435653088483422022339374	int
,	O
-	O
5.63036877698121782876372020472	int
,	O
0.0528041358684229425504861579635	int
,	O
-	O
0.0156381809179670789342700883562	int
,	O
0.00408218474372355881195080781927	int
,	O
-	O
0.0010264867349474874045036628282	int
,	O
0.000260469880409886900143834962387	int
,	O
-	O
0.0000676175847209968878098566819447	int
,	O
0.0000179284472587833525426660171124	int
,	O
-	O
4.83238651318556188834107605116e-6	int
,	O
1.31913788964999288471371329447e-6	int
,	O
-	O
3.63760500656329972578222188542e-7	int
,	O
1.01146847513194744989748396574e-7	int
,	O
-	O
2.83215225141806501619105289509e-8	int
,	O
7.97733710252021423361012829496e-9	int
,	O
-	O
2.25850168553956886676250696891e-9	int
,	O
6.42269392950164306086395744145e-10	int
,	O
-	O
1.83363861846127284505060843614e-10	int
,	O
5.25309763895283179960368072104e-11	int
,	O
-	O
1.50958687042589821074710575446e-11	int
,	O
4.34997545516049244697776942981e-12	int
,	O
-	O
1.25597782748190416118082322061e-12	int
,	O
3.61280740072222650030134104162e-13	int
,	O
-	O
9.66437239205745207188920348801e-14	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
zetam1_inter_cs	struct(*(double),int,double,double,int)
=	O
{	O
zetam1_inter_data	array(double)
,	O
22	int
,	O
-	O
1	int
,	O
1	int
,	O
12	int
}	O
;	O
inline	O
static	O
int	O
riemann_zeta_sgt0	(double,*(struct(double,double)))->(int)
(	O
double	O
s	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
if	O
(	O
s	double
<	O
1.0	int
)	O
{	O
gsl_sf_result	struct(double,double)
c	*(double)
;	O
cheb_eval_e	(*(struct(*(double),int,double,double,int)),double,*(struct(double,double)))->(int)
(	O
&	O
zeta_xlt1_cs	struct(*(double),int,double,double,int)
,	O
2.0	int
*	O
s	double
-	O
1.0	int
,	O
&	O
c	*(double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
c	*(double)
.	O
val	double
/	O
(	O
s	double
-	O
1.0	int
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
c	*(double)
.	O
err	double
/	O
fabs	(double)->(double)
(	O
s	double
-	O
1.0	int
)	O
+	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
s	double
<=	O
20.0	int
)	O
{	O
double	O
x	double
=	O
(	O
2.0	int
*	O
s	double
-	O
21.0	int
)	O
/	O
19.0	int
;	O
gsl_sf_result	struct(double,double)
c	*(double)
;	O
cheb_eval_e	(*(struct(*(double),int,double,double,int)),double,*(struct(double,double)))->(int)
(	O
&	O
zeta_xgt1_cs	struct(*(double),int,double,double,int)
,	O
x	double
,	O
&	O
c	*(double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
c	*(double)
.	O
val	double
/	O
(	O
s	double
-	O
1.0	int
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
c	*(double)
.	O
err	double
/	O
(	O
s	double
-	O
1.0	int
)	O
+	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
double	O
f2	double
=	O
1.0	int
-	O
pow	(double,double)->(double)
(	O
2.0	int
,	O
-	O
s	double
)	O
;	O
double	O
f3	double
=	O
1.0	int
-	O
pow	(double,double)->(double)
(	O
3.0	int
,	O
-	O
s	double
)	O
;	O
double	O
f5	double
=	O
1.0	int
-	O
pow	(double,double)->(double)
(	O
5.0	int
,	O
-	O
s	double
)	O
;	O
double	O
f7	double
=	O
1.0	int
-	O
pow	(double,double)->(double)
(	O
7.0	int
,	O
-	O
s	double
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
1.0	int
/	O
(	O
f2	double
*	O
f3	double
*	O
f5	double
*	O
f7	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
3.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
inline	O
static	O
int	O
riemann_zeta1ms_slt0	(double,*(struct(double,double)))->(int)
(	O
double	O
s	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
if	O
(	O
s	double
>	O
-	O
19.0	int
)	O
{	O
double	O
x	double
=	O
(	O
-	O
19	int
-	O
2.0	int
*	O
s	double
)	O
/	O
19.0	int
;	O
gsl_sf_result	struct(double,double)
c	*(double)
;	O
cheb_eval_e	(*(struct(*(double),int,double,double,int)),double,*(struct(double,double)))->(int)
(	O
&	O
zeta_xgt1_cs	struct(*(double),int,double,double,int)
,	O
x	double
,	O
&	O
c	*(double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
c	*(double)
.	O
val	double
/	O
(	O
-	O
s	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
c	*(double)
.	O
err	double
/	O
(	O
-	O
s	double
)	O
+	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
double	O
f2	double
=	O
1.0	int
-	O
pow	(double,double)->(double)
(	O
2.0	int
,	O
-	O
(	O
1.0	int
-	O
s	double
)	O
)	O
;	O
double	O
f3	double
=	O
1.0	int
-	O
pow	(double,double)->(double)
(	O
3.0	int
,	O
-	O
(	O
1.0	int
-	O
s	double
)	O
)	O
;	O
double	O
f5	double
=	O
1.0	int
-	O
pow	(double,double)->(double)
(	O
5.0	int
,	O
-	O
(	O
1.0	int
-	O
s	double
)	O
)	O
;	O
double	O
f7	double
=	O
1.0	int
-	O
pow	(double,double)->(double)
(	O
7.0	int
,	O
-	O
(	O
1.0	int
-	O
s	double
)	O
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
1.0	int
/	O
(	O
f2	double
*	O
f3	double
*	O
f5	double
*	O
f7	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
3.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
riemann_zeta_minus_1_intermediate_s	(double,*(struct(double,double)))->(int)
(	O
double	O
s	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
double	O
t	double
=	O
(	O
s	double
-	O
10.0	int
)	O
/	O
5.0	int
;	O
gsl_sf_result	struct(double,double)
c	*(double)
;	O
cheb_eval_e	(*(struct(*(double),int,double,double,int)),double,*(struct(double,double)))->(int)
(	O
&	O
zetam1_inter_cs	struct(*(double),int,double,double,int)
,	O
t	double
,	O
&	O
c	*(double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
exp	(double)->(double)
(	O
c	*(double)
.	O
val	double
)	O
+	O
pow	(double,double)->(double)
(	O
2.0	int
,	O
-	O
s	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
(	O
c	*(double)
.	O
err	double
+	O
2.0	int
*	O
GSL_DBL_EPSILON	int
)	O
*	O
result	*(struct(double,double))
->	O
val	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
riemann_zeta_minus1_large_s	(double,*(struct(double,double)))->(int)
(	O
double	O
s	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
double	O
a	double
=	O
pow	(double,double)->(double)
(	O
2.0	int
,	O
-	O
s	double
)	O
;	O
double	O
b	double
=	O
pow	(double,double)->(double)
(	O
3.0	int
,	O
-	O
s	double
)	O
;	O
double	O
c	*(double)
=	O
pow	(double,double)->(double)
(	O
5.0	int
,	O
-	O
s	double
)	O
;	O
double	O
d	double
=	O
pow	(double,double)->(double)
(	O
7.0	int
,	O
-	O
s	double
)	O
;	O
double	O
e	int
=	O
pow	(double,double)->(double)
(	O
11.0	int
,	O
-	O
s	double
)	O
;	O
double	O
f	*(double)
=	O
pow	(double,double)->(double)
(	O
13.0	int
,	O
-	O
s	double
)	O
;	O
double	O
t1	double
=	O
a	double
+	O
b	double
+	O
c	*(double)
+	O
d	double
+	O
e	int
+	O
f	*(double)
;	O
double	O
t2	double
=	O
a	double
*	O
(	O
b	double
+	O
c	*(double)
+	O
d	double
+	O
e	int
+	O
f	*(double)
)	O
+	O
b	double
*	O
(	O
c	*(double)
+	O
d	double
+	O
e	int
+	O
f	*(double)
)	O
+	O
c	*(double)
*	O
(	O
d	double
+	O
e	int
+	O
f	*(double)
)	O
+	O
d	double
*	O
(	O
e	int
+	O
f	*(double)
)	O
+	O
e	int
*	O
f	*(double)
;	O
double	O
numt	double
=	O
t1	double
-	O
t2	double
;	O
double	O
zeta	double
=	O
1.0	int
/	O
(	O
(	O
1.0	int
-	O
a	double
)	O
*	O
(	O
1.0	int
-	O
b	double
)	O
*	O
(	O
1.0	int
-	O
c	*(double)
)	O
*	O
(	O
1.0	int
-	O
d	double
)	O
*	O
(	O
1.0	int
-	O
e	int
)	O
*	O
(	O
1.0	int
-	O
f	*(double)
)	O
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
numt	double
*	O
zeta	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
(	O
15.0	int
/	O
s	double
+	O
1.0	int
)	O
*	O
6.0	int
*	O
GSL_DBL_EPSILON	int
*	O
result	*(struct(double,double))
->	O
val	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
double	O
zetam1_pos_int_table	array(double)
[	O
ZETA_POS_TABLE_NMAX	int
+	O
1	int
]	O
=	O
{	O
-	O
1.5	int
,	O
0.0	int
,	O
0.644934066848226436472415166646	int
,	O
0.202056903159594285399738161511	int
,	O
0.082323233711138191516003696541	int
,	O
0.036927755143369926331365486457	int
,	O
0.017343061984449139714517929790	int
,	O
0.008349277381922826839797549849	int
,	O
0.004077356197944339378685238508	int
,	O
0.002008392826082214417852769232	int
,	O
0.000994575127818085337145958900	int
,	O
0.000494188604119464558702282526	int
,	O
0.000246086553308048298637998047	int
,	O
0.000122713347578489146751836526	int
,	O
0.000061248135058704829258545105	int
,	O
0.000030588236307020493551728510	int
,	O
0.000015282259408651871732571487	int
,	O
7.6371976378997622736002935630e-6	int
,	O
3.8172932649998398564616446219e-6	int
,	O
1.9082127165539389256569577951e-6	int
,	O
9.5396203387279611315203868344e-7	int
,	O
4.7693298678780646311671960437e-7	int
,	O
2.3845050272773299000364818675e-7	int
,	O
1.1921992596531107306778871888e-7	int
,	O
5.9608189051259479612440207935e-8	int
,	O
2.9803503514652280186063705069e-8	int
,	O
1.4901554828365041234658506630e-8	int
,	O
7.4507117898354294919810041706e-9	int
,	O
3.7253340247884570548192040184e-9	int
,	O
1.8626597235130490064039099454e-9	int
,	O
9.3132743241966818287176473502e-10	int
,	O
4.6566290650337840729892332512e-10	int
,	O
2.3283118336765054920014559759e-10	int
,	O
1.1641550172700519775929738354e-10	int
,	O
5.8207720879027008892436859891e-11	int
,	O
2.9103850444970996869294252278e-11	int
,	O
1.4551921891041984235929632245e-11	int
,	O
7.2759598350574810145208690123e-12	int
,	O
3.6379795473786511902372363558e-12	int
,	O
1.8189896503070659475848321007e-12	int
,	O
9.0949478402638892825331183869e-13	int
,	O
4.5474737830421540267991120294e-13	int
,	O
2.2737368458246525152268215779e-13	int
,	O
1.1368684076802278493491048380e-13	int
,	O
5.6843419876275856092771829675e-14	int
,	O
2.8421709768893018554550737049e-14	int
,	O
1.4210854828031606769834307141e-14	int
,	O
7.1054273952108527128773544799e-15	int
,	O
3.5527136913371136732984695340e-15	int
,	O
1.7763568435791203274733490144e-15	int
,	O
8.8817842109308159030960913863e-16	int
,	O
4.4408921031438133641977709402e-16	int
,	O
2.2204460507980419839993200942e-16	int
,	O
1.1102230251410661337205445699e-16	int
,	O
5.5511151248454812437237365905e-17	int
,	O
2.7755575621361241725816324538e-17	int
,	O
1.3877787809725232762839094906e-17	int
,	O
6.9388939045441536974460853262e-18	int
,	O
3.4694469521659226247442714961e-18	int
,	O
1.7347234760475765720489729699e-18	int
,	O
8.6736173801199337283420550673e-19	int
,	O
4.3368086900206504874970235659e-19	int
,	O
2.1684043449972197850139101683e-19	int
,	O
1.0842021724942414063012711165e-19	int
,	O
5.4210108624566454109187004043e-20	int
,	O
2.7105054312234688319546213119e-20	int
,	O
1.3552527156101164581485233996e-20	int
,	O
6.7762635780451890979952987415e-21	int
,	O
3.3881317890207968180857031004e-21	int
,	O
1.6940658945097991654064927471e-21	int
,	O
8.4703294725469983482469926091e-22	int
,	O
4.2351647362728333478622704833e-22	int
,	O
2.1175823681361947318442094398e-22	int
,	O
1.0587911840680233852265001539e-22	int
,	O
5.2939559203398703238139123029e-23	int
,	O
2.6469779601698529611341166842e-23	int
,	O
1.3234889800848990803094510250e-23	int
,	O
6.6174449004244040673552453323e-24	int
,	O
3.3087224502121715889469563843e-24	int
,	O
1.6543612251060756462299236771e-24	int
,	O
8.2718061255303444036711056167e-25	int
,	O
4.1359030627651609260093824555e-25	int
,	O
2.0679515313825767043959679193e-25	int
,	O
1.0339757656912870993284095591e-25	int
,	O
5.1698788284564313204101332166e-26	int
,	O
2.5849394142282142681277617708e-26	int
,	O
1.2924697071141066700381126118e-26	int
,	O
6.4623485355705318034380021611e-27	int
,	O
3.2311742677852653861348141180e-27	int
,	O
1.6155871338926325212060114057e-27	int
,	O
8.0779356694631620331587381863e-28	int
,	O
4.0389678347315808256222628129e-28	int
,	O
2.0194839173657903491587626465e-28	int
,	O
1.0097419586828951533619250700e-28	int
,	O
5.0487097934144756960847711725e-29	int
,	O
2.5243548967072378244674341938e-29	int
,	O
1.2621774483536189043753999660e-29	int
,	O
6.3108872417680944956826093943e-30	int
,	O
3.1554436208840472391098412184e-30	int
,	O
1.5777218104420236166444327830e-30	int
,	O
7.8886090522101180735205378276e-31	int
}	O
;	O
static	O
double	O
zeta_neg_int_table	array(double)
[	O
ZETA_NEG_TABLE_SIZE	int
]	O
=	O
{	O
-	O
0.083333333333333333333333333333	int
,	O
0.008333333333333333333333333333	int
,	O
-	O
0.003968253968253968253968253968	int
,	O
0.004166666666666666666666666667	int
,	O
-	O
0.007575757575757575757575757576	int
,	O
0.021092796092796092796092796093	int
,	O
-	O
0.083333333333333333333333333333	int
,	O
0.44325980392156862745098039216	int
,	O
-	O
3.05395433027011974380395433027	int
,	O
26.4562121212121212121212121212	int
,	O
-	O
281.460144927536231884057971014	int
,	O
3607.5105463980463980463980464	int
,	O
-	O
54827.583333333333333333333333	int
,	O
974936.82385057471264367816092	int
,	O
-	O
2.0052695796688078946143462272e+07	int
,	O
4.7238486772162990196078431373e+08	int
,	O
-	O
1.2635724795916666666666666667e+10	int
,	O
3.8087931125245368811553022079e+11	int
,	O
-	O
1.2850850499305083333333333333e+13	int
,	O
4.8241448354850170371581670362e+14	int
,	O
-	O
2.0040310656516252738108421663e+16	int
,	O
9.1677436031953307756992753623e+17	int
,	O
-	O
4.5979888343656503490437943262e+19	int
,	O
2.5180471921451095697089023320e+21	int
,	O
-	O
1.5001733492153928733711440151e+23	int
,	O
9.6899578874635940656497942895e+24	int
,	O
-	O
6.7645882379292820990945242302e+26	int
,	O
5.0890659468662289689766332916e+28	int
,	O
-	O
4.1147288792557978697665486068e+30	int
,	O
3.5666582095375556109684574609e+32	int
,	O
-	O
3.3066089876577576725680214670e+34	int
,	O
3.2715634236478716264211227016e+36	int
,	O
-	O
3.4473782558278053878256455080e+38	int
,	O
3.8614279832705258893092720200e+40	int
,	O
-	O
4.5892974432454332168863989006e+42	int
,	O
5.7775386342770431824884825688e+44	int
,	O
-	O
7.6919858759507135167410075972e+46	int
,	O
1.0813635449971654696354033351e+49	int
,	O
-	O
1.6029364522008965406067102346e+51	int
,	O
2.5019479041560462843656661499e+53	int
,	O
-	O
4.1067052335810212479752045004e+55	int
,	O
7.0798774408494580617452972433e+57	int
,	O
-	O
1.2804546887939508790190849756e+60	int
,	O
2.4267340392333524078020892067e+62	int
,	O
-	O
4.8143218874045769355129570066e+64	int
,	O
9.9875574175727530680652777408e+66	int
,	O
-	O
2.1645634868435185631335136160e+69	int
,	O
4.8962327039620553206849224516e+71	int
,	O
-	O
1.1549023923963519663954271692e+74	int
,	O
2.8382249570693706959264156336e+76	int
}	O
;	O
static	O
double	O
hzeta_c	array(double)
[	O
15	int
]	O
=	O
{	O
1.00000000000000000000000000000	int
,	O
0.083333333333333333333333333333	int
,	O
-	O
0.00138888888888888888888888888889	int
,	O
0.000033068783068783068783068783069	int
,	O
-	O
8.2671957671957671957671957672e-07	int
,	O
2.0876756987868098979210090321e-08	int
,	O
-	O
5.2841901386874931848476822022e-10	int
,	O
1.3382536530684678832826980975e-11	int
,	O
-	O
3.3896802963225828668301953912e-13	int
,	O
8.5860620562778445641359054504e-15	int
,	O
-	O
2.1748686985580618730415164239e-16	int
,	O
5.5090028283602295152026526089e-18	int
,	O
-	O
1.3954464685812523340707686264e-19	int
,	O
3.5347070396294674716932299778e-21	int
,	O
-	O
8.9535174270375468504026113181e-23	int
}	O
;	O
static	O
double	O
eta_pos_int_table	array(double)
[	O
ETA_POS_TABLE_NMAX	int
+	O
1	int
]	O
=	O
{	O
0.50000000000000000000000000000	int
,	O
M_LN2	int
,	O
0.82246703342411321823620758332	int
,	O
0.90154267736969571404980362113	int
,	O
0.94703282949724591757650323447	int
,	O
0.97211977044690930593565514355	int
,	O
0.98555109129743510409843924448	int
,	O
0.99259381992283028267042571313	int
,	O
0.99623300185264789922728926008	int
,	O
0.99809429754160533076778303185	int
,	O
0.99903950759827156563922184570	int
,	O
0.99951714349806075414409417483	int
,	O
0.99975768514385819085317967871	int
,	O
0.99987854276326511549217499282	int
,	O
0.99993917034597971817095419226	int
,	O
0.99996955121309923808263293263	int
,	O
0.99998476421490610644168277496	int
,	O
0.99999237829204101197693787224	int
,	O
0.99999618786961011347968922641	int
,	O
0.99999809350817167510685649297	int
,	O
0.99999904661158152211505084256	int
,	O
0.99999952325821554281631666433	int
,	O
0.99999976161323082254789720494	int
,	O
0.99999988080131843950322382485	int
,	O
0.99999994039889239462836140314	int
,	O
0.99999997019885696283441513311	int
,	O
0.99999998509923199656878766181	int
,	O
0.99999999254955048496351585274	int
,	O
0.99999999627475340010872752767	int
,	O
0.99999999813736941811218674656	int
,	O
0.99999999906868228145397862728	int
,	O
0.99999999953434033145421751469	int
,	O
0.99999999976716989595149082282	int
,	O
0.99999999988358485804603047265	int
,	O
0.99999999994179239904531592388	int
,	O
0.99999999997089618952980952258	int
,	O
0.99999999998544809143388476396	int
,	O
0.99999999999272404460658475006	int
,	O
0.99999999999636202193316875550	int
,	O
0.99999999999818101084320873555	int
,	O
0.99999999999909050538047887809	int
,	O
0.99999999999954525267653087357	int
,	O
0.99999999999977262633369589773	int
,	O
0.99999999999988631316532476488	int
,	O
0.99999999999994315658215465336	int
,	O
0.99999999999997157829090808339	int
,	O
0.99999999999998578914539762720	int
,	O
0.99999999999999289457268000875	int
,	O
0.99999999999999644728633373609	int
,	O
0.99999999999999822364316477861	int
,	O
0.99999999999999911182158169283	int
,	O
0.99999999999999955591079061426	int
,	O
0.99999999999999977795539522974	int
,	O
0.99999999999999988897769758908	int
,	O
0.99999999999999994448884878594	int
,	O
0.99999999999999997224442439010	int
,	O
0.99999999999999998612221219410	int
,	O
0.99999999999999999306110609673	int
,	O
0.99999999999999999653055304826	int
,	O
0.99999999999999999826527652409	int
,	O
0.99999999999999999913263826204	int
,	O
0.99999999999999999956631913101	int
,	O
0.99999999999999999978315956551	int
,	O
0.99999999999999999989157978275	int
,	O
0.99999999999999999994578989138	int
,	O
0.99999999999999999997289494569	int
,	O
0.99999999999999999998644747284	int
,	O
0.99999999999999999999322373642	int
,	O
0.99999999999999999999661186821	int
,	O
0.99999999999999999999830593411	int
,	O
0.99999999999999999999915296705	int
,	O
0.99999999999999999999957648353	int
,	O
0.99999999999999999999978824176	int
,	O
0.99999999999999999999989412088	int
,	O
0.99999999999999999999994706044	int
,	O
0.99999999999999999999997353022	int
,	O
0.99999999999999999999998676511	int
,	O
0.99999999999999999999999338256	int
,	O
0.99999999999999999999999669128	int
,	O
0.99999999999999999999999834564	int
,	O
0.99999999999999999999999917282	int
,	O
0.99999999999999999999999958641	int
,	O
0.99999999999999999999999979320	int
,	O
0.99999999999999999999999989660	int
,	O
0.99999999999999999999999994830	int
,	O
0.99999999999999999999999997415	int
,	O
0.99999999999999999999999998708	int
,	O
0.99999999999999999999999999354	int
,	O
0.99999999999999999999999999677	int
,	O
0.99999999999999999999999999838	int
,	O
0.99999999999999999999999999919	int
,	O
0.99999999999999999999999999960	int
,	O
0.99999999999999999999999999980	int
,	O
0.99999999999999999999999999990	int
,	O
0.99999999999999999999999999995	int
,	O
0.99999999999999999999999999997	int
,	O
0.99999999999999999999999999999	int
,	O
0.99999999999999999999999999999	int
,	O
1.00000000000000000000000000000	int
,	O
1.00000000000000000000000000000	int
,	O
1.00000000000000000000000000000	int
,	O
}	O
;	O
static	O
double	O
eta_neg_int_table	array(double)
[	O
ETA_NEG_TABLE_SIZE	int
]	O
=	O
{	O
0.25000000000000000000000000000	int
,	O
-	O
0.12500000000000000000000000000	int
,	O
0.25000000000000000000000000000	int
,	O
-	O
1.06250000000000000000000000000	int
,	O
7.75000000000000000000000000000	int
,	O
-	O
86.3750000000000000000000000000	int
,	O
1365.25000000000000000000000000	int
,	O
-	O
29049.0312500000000000000000000	int
,	O
800572.750000000000000000000000	int
,	O
-	O
2.7741322625000000000000000000e+7	int
,	O
1.1805291302500000000000000000e+9	int
,	O
-	O
6.0523980051687500000000000000e+10	int
,	O
3.6794167785377500000000000000e+12	int
,	O
-	O
2.6170760990658387500000000000e+14	int
,	O
2.1531418140800295250000000000e+16	int
,	O
-	O
2.0288775575173015930156250000e+18	int
,	O
2.1708009902623770590275000000e+20	int
,	O
-	O
2.6173826968455814932120125000e+22	int
,	O
3.5324148876863877826668602500e+24	int
,	O
-	O
5.3042033406864906641493838981e+26	int
,	O
8.8138218364311576767253114668e+28	int
,	O
-	O
1.6128065107490778547354654864e+31	int
,	O
3.2355470001722734208527794569e+33	int
,	O
-	O
7.0876727476537493198506645215e+35	int
,	O
1.6890450341293965779175629389e+38	int
,	O
-	O
4.3639690731216831157655651358e+40	int
,	O
1.2185998827061261322605065672e+43	int
,	O
-	O
3.6670584803153006180101262324e+45	int
,	O
1.1859898526302099104271449748e+48	int
,	O
-	O
4.1120769493584015047981746438e+50	int
,	O
1.5249042436787620309090168687e+53	int
,	O
-	O
6.0349693196941307074572991901e+55	int
,	O
2.5437161764210695823197691519e+58	int
,	O
-	O
1.1396923802632287851130360170e+61	int
,	O
5.4180861064753979196802726455e+63	int
,	O
-	O
2.7283654799994373847287197104e+66	int
,	O
1.4529750514918543238511171663e+69	int
,	O
-	O
8.1705519371067450079777183386e+71	int
,	O
4.8445781606678367790247757259e+74	int
,	O
-	O
3.0246694206649519336179448018e+77	int
,	O
1.9858807961690493054169047970e+80	int
,	O
-	O
1.3694474620720086994386818232e+83	int
,	O
9.9070382984295807826303785989e+85	int
,	O
-	O
7.5103780796592645925968460677e+88	int
,	O
5.9598418264260880840077992227e+91	int
,	O
-	O
4.9455988887500020399263196307e+94	int
,	O
4.2873596927020241277675775935e+97	int
,	O
-	O
3.8791952037716162900707994047e+100	int
,	O
3.6600317773156342245401829308e+103	int
,	O
-	O
3.5978775704117283875784869570e+106	int
}	O
;	O
int	O
gsl_sf_hzeta_e	(double,double,*(struct(double,double)))->(int)
(	O
const	O
double	O
s	double
,	O
const	O
double	O
q	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
if	O
(	O
s	double
<=	O
1.0	int
||	O
q	double
<=	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
{	O
const	O
double	O
max_bits	double
=	O
54.0	int
;	O
const	O
double	O
ln_term0	double
=	O
-	O
s	double
*	O
log	(double)->(double)
(	O
q	double
)	O
;	O
if	O
(	O
ln_term0	double
<	O
GSL_LOG_DBL_MIN	O
+	O
1.0	int
)	O
{	O
UNDERFLOW_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
ln_term0	double
>	O
GSL_LOG_DBL_MAX	int
-	O
1.0	int
)	O
{	O
OVERFLOW_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
(	O
s	double
>	O
max_bits	double
&&	O
q	double
<	O
1.0	int
)	O
||	O
(	O
s	double
>	O
0.5	int
*	O
max_bits	double
&&	O
q	double
<	O
0.25	int
)	O
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
pow	(double,double)->(double)
(	O
q	double
,	O
-	O
s	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
s	double
>	O
0.5	int
*	O
max_bits	double
&&	O
q	double
<	O
1.0	int
)	O
{	O
const	O
double	O
p1	double
=	O
pow	(double,double)->(double)
(	O
q	double
,	O
-	O
s	double
)	O
;	O
const	O
double	O
p2	double
=	O
pow	(double,double)->(double)
(	O
q	double
/	O
(	O
1.0	int
+	O
q	double
)	O
,	O
s	double
)	O
;	O
const	O
double	O
p3	double
=	O
pow	(double,double)->(double)
(	O
q	double
/	O
(	O
2.0	int
+	O
q	double
)	O
,	O
s	double
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
p1	double
*	O
(	O
1.0	int
+	O
p2	double
+	O
p3	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
(	O
0.5	int
*	O
s	double
+	O
2.0	int
)	O
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
const	O
int	O
jmax	int
=	O
12	int
;	O
const	O
int	O
kmax	int
=	O
10	int
;	O
int	O
j	int
,	O
k	int
;	O
const	O
double	O
pmax	double
=	O
pow	(double,double)->(double)
(	O
kmax	int
+	O
q	double
,	O
-	O
s	double
)	O
;	O
double	O
scp	double
=	O
s	double
;	O
double	O
pcp	double
=	O
pmax	double
/	O
(	O
kmax	int
+	O
q	double
)	O
;	O
double	O
ans	double
=	O
pmax	double
*	O
(	O
(	O
kmax	int
+	O
q	double
)	O
/	O
(	O
s	double
-	O
1.0	int
)	O
+	O
0.5	int
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
kmax	int
;	O
k	int
++	O
)	O
{	O
ans	double
+=	O
pow	(double,double)->(double)
(	O
k	int
+	O
q	double
,	O
-	O
s	double
)	O
;	O
}	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<=	O
jmax	int
;	O
j	int
++	O
)	O
{	O
double	O
delta	double
=	O
hzeta_c	array(double)
[	O
j	int
+	O
1	int
]	O
*	O
scp	double
*	O
pcp	double
;	O
ans	double
+=	O
delta	double
;	O
if	O
(	O
fabs	(double)->(double)
(	O
delta	double
/	O
ans	double
)	O
<	O
0.5	int
*	O
GSL_DBL_EPSILON	int
)	O
break	O
;	O
scp	double
*=	O
(	O
s	double
+	O
2	int
*	O
j	int
+	O
1	int
)	O
*	O
(	O
s	double
+	O
2	int
*	O
j	int
+	O
2	int
)	O
;	O
pcp	double
/=	O
(	O
kmax	int
+	O
q	double
)	O
*	O
(	O
kmax	int
+	O
q	double
)	O
;	O
}	O
result	*(struct(double,double))
->	O
val	double
=	O
ans	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
(	O
jmax	int
+	O
1.0	int
)	O
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
ans	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
}	O
int	O
gsl_sf_zeta_e	(double,*(struct(double,double)))->(int)
(	O
const	O
double	O
s	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
if	O
(	O
s	double
==	O
1.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
s	double
>=	O
0.0	int
)	O
{	O
return	O
riemann_zeta_sgt0	(double,*(struct(double,double)))->(int)
(	O
s	double
,	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
{	O
gsl_sf_result	struct(double,double)
zeta_one_minus_s	struct(double,double)
;	O
const	O
int	O
stat_zoms	int
=	O
riemann_zeta1ms_slt0	(double,*(struct(double,double)))->(int)
(	O
s	double
,	O
&	O
zeta_one_minus_s	struct(double,double)
)	O
;	O
const	O
double	O
sin_term	double
=	O
(	O
fmod	(double,double)->(double)
(	O
s	double
,	O
2.0	int
)	O
==	O
0.0	int
)	O
?	O
0.0	int
:	O
sin	(double)->(double)
(	O
0.5	int
*	O
M_PI	int
*	O
fmod	(double,double)->(double)
(	O
s	double
,	O
4.0	int
)	O
)	O
/	O
M_PI	int
;	O
if	O
(	O
sin_term	double
==	O
0.0	int
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
0.0	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
s	double
>	O
-	O
170	int
)	O
{	O
const	O
double	O
twopi_pow	array(double)
[	O
18	int
]	O
=	O
{	O
1.0	int
,	O
9.589560061550901348e+007	int
,	O
9.195966217409212684e+015	int
,	O
8.818527036583869903e+023	int
,	O
8.456579467173150313e+031	int
,	O
8.109487671573504384e+039	int
,	O
7.776641909496069036e+047	int
,	O
7.457457466828644277e+055	int
,	O
7.151373628461452286e+063	int
,	O
6.857852693272229709e+071	int
,	O
6.576379029540265771e+079	int
,	O
6.306458169130020789e+087	int
,	O
6.047615938853066678e+095	int
,	O
5.799397627482402614e+103	int
,	O
5.561367186955830005e+111	int
,	O
5.333106466365131227e+119	int
,	O
5.114214477385391780e+127	int
,	O
4.904306689854036836e+135	int
}	O
;	O
const	O
int	O
n	int
=	O
floor	(double)->(double)
(	O
(	O
-	O
s	double
)	O
/	O
10.0	int
)	O
;	O
const	O
double	O
fs	double
=	O
s	double
+	O
10.0	int
*	O
n	int
;	O
const	O
double	O
p	double
=	O
pow	(double,double)->(double)
(	O
2.0	int
*	O
M_PI	int
,	O
fs	double
)	O
/	O
twopi_pow	array(double)
[	O
n	int
]	O
;	O
gsl_sf_result	struct(double,double)
g	struct(double,double)
;	O
const	O
int	O
stat_g	int
=	O
gsl_sf_gamma_e	(double,*(struct(double,double)))->(int)
(	O
1.0	int
-	O
s	double
,	O
&	O
g	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
p	double
*	O
g	struct(double,double)
.	O
val	double
*	O
sin_term	double
*	O
zeta_one_minus_s	struct(double,double)
.	O
val	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
fabs	(double)->(double)
(	O
p	double
*	O
g	struct(double,double)
.	O
val	double
*	O
sin_term	double
)	O
*	O
zeta_one_minus_s	struct(double,double)
.	O
err	double
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
fabs	(double)->(double)
(	O
p	double
*	O
sin_term	double
*	O
zeta_one_minus_s	struct(double,double)
.	O
val	double
)	O
*	O
g	struct(double,double)
.	O
err	double
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	(double)->(double)
(	O
s	double
)	O
+	O
2.0	int
)	O
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_g	int
,	O
stat_zoms	int
)	O
;	O
}	O
else	O
{	O
OVERFLOW_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
}	O
}	O
int	O
gsl_sf_zeta_int_e	(int,*(struct(double,double)))->(int)
(	O
const	O
int	O
n	int
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
if	O
(	O
n	int
<	O
0	int
)	O
{	O
if	O
(	O
!	O
GSL_IS_ODD	O
(	O
n	int
)	O
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
0.0	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
n	int
>	O
-	O
ZETA_NEG_TABLE_NMAX	int
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
zeta_neg_int_table	array(double)
[	O
-	O
(	O
n	int
+	O
1	int
)	O
/	O
2	int
]	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
return	O
gsl_sf_zeta_e	(double,*(struct(double,double)))->(int)
(	O
(	O
double	O
)	O
n	int
,	O
result	*(struct(double,double))
)	O
;	O
}	O
}	O
else	O
if	O
(	O
n	int
==	O
1	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
n	int
<=	O
ZETA_POS_TABLE_NMAX	int
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
1.0	int
+	O
zetam1_pos_int_table	array(double)
[	O
n	int
]	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
1.0	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
GSL_DBL_EPSILON	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_zetam1_e	(double,*(struct(double,double)))->(int)
(	O
const	O
double	O
s	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
if	O
(	O
s	double
<=	O
5.0	int
)	O
{	O
int	O
stat	int
=	O
gsl_sf_zeta_e	(double,*(struct(double,double)))->(int)
(	O
s	double
,	O
result	*(struct(double,double))
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
result	*(struct(double,double))
->	O
val	double
-	O
1.0	int
;	O
return	O
stat	int
;	O
}	O
else	O
if	O
(	O
s	double
<	O
15.0	int
)	O
{	O
return	O
riemann_zeta_minus_1_intermediate_s	(double,*(struct(double,double)))->(int)
(	O
s	double
,	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
{	O
return	O
riemann_zeta_minus1_large_s	(double,*(struct(double,double)))->(int)
(	O
s	double
,	O
result	*(struct(double,double))
)	O
;	O
}	O
}	O
int	O
gsl_sf_zetam1_int_e	(int,*(struct(double,double)))->(int)
(	O
const	O
int	O
n	int
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
if	O
(	O
n	int
<	O
0	int
)	O
{	O
if	O
(	O
!	O
GSL_IS_ODD	O
(	O
n	int
)	O
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
-	O
1.0	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
n	int
>	O
-	O
ZETA_NEG_TABLE_NMAX	int
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
zeta_neg_int_table	array(double)
[	O
-	O
(	O
n	int
+	O
1	int
)	O
/	O
2	int
]	O
-	O
1.0	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
return	O
gsl_sf_zeta_e	(double,*(struct(double,double)))->(int)
(	O
(	O
double	O
)	O
n	int
,	O
result	*(struct(double,double))
)	O
;	O
}	O
}	O
else	O
if	O
(	O
n	int
==	O
1	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
n	int
<=	O
ZETA_POS_TABLE_NMAX	int
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
zetam1_pos_int_table	array(double)
[	O
n	int
]	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
return	O
gsl_sf_zetam1_e	(double,*(struct(double,double)))->(int)
(	O
n	int
,	O
result	*(struct(double,double))
)	O
;	O
}	O
}	O
int	O
gsl_sf_eta_int_e	(int,*(struct(double,double)))->(int)
(	O
int	O
n	int
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
if	O
(	O
n	int
>	O
ETA_POS_TABLE_NMAX	int
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
1.0	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
GSL_DBL_EPSILON	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
n	int
>=	O
0	int
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
eta_pos_int_table	array(double)
[	O
n	int
]	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
if	O
(	O
!	O
GSL_IS_ODD	O
(	O
n	int
)	O
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
0.0	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
n	int
>	O
-	O
ETA_NEG_TABLE_NMAX	int
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
eta_neg_int_table	array(double)
[	O
-	O
(	O
n	int
+	O
1	int
)	O
/	O
2	int
]	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
gsl_sf_result	struct(double,double)
z	double
;	O
gsl_sf_result	struct(double,double)
p	double
;	O
int	O
stat_z	int
=	O
gsl_sf_zeta_int_e	(int,*(struct(double,double)))->(int)
(	O
n	int
,	O
&	O
z	double
)	O
;	O
int	O
stat_p	int
=	O
gsl_sf_exp_e	(double,*(struct(double,double)))->(int)
(	O
(	O
1.0	int
-	O
n	int
)	O
*	O
M_LN2	int
,	O
&	O
p	double
)	O
;	O
int	O
stat_m	int
=	O
gsl_sf_multiply_e	(double,double,*(struct(double,double)))->(int)
(	O
-	O
p	double
.	O
val	double
,	O
z	double
.	O
val	double
,	O
result	*(struct(double,double))
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
fabs	(double)->(double)
(	O
p	double
.	O
err	double
*	O
(	O
M_LN2	int
*	O
(	O
1.0	int
-	O
n	int
)	O
)	O
*	O
z	double
.	O
val	double
)	O
+	O
z	double
.	O
err	double
*	O
fabs	(double)->(double)
(	O
p	double
.	O
val	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_3	O
(	O
stat_m	int
,	O
stat_p	int
,	O
stat_z	int
)	O
;	O
}	O
}	O
}	O
int	O
gsl_sf_eta_e	(double,*(struct(double,double)))->(int)
(	O
const	O
double	O
s	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
if	O
(	O
s	double
>	O
100.0	int
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
1.0	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
GSL_DBL_EPSILON	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
fabs	(double)->(double)
(	O
s	double
-	O
1.0	int
)	O
<	O
10.0	int
*	O
GSL_ROOT5_DBL_EPSILON	int
)	O
{	O
double	O
del	double
=	O
s	double
-	O
1.0	int
;	O
double	O
c0	double
=	O
M_LN2	int
;	O
double	O
c1	double
=	O
M_LN2	int
*	O
(	O
M_EULER	int
-	O
0.5	int
*	O
M_LN2	int
)	O
;	O
double	O
c2	double
=	O
-	O
0.0326862962794492996	int
;	O
double	O
c3	double
=	O
0.0015689917054155150	int
;	O
double	O
c4	double
=	O
0.00074987242112047532	int
;	O
result	*(struct(double,double))
->	O
val	double
=	O
c0	double
+	O
del	double
*	O
(	O
c1	double
+	O
del	double
*	O
(	O
c2	double
+	O
del	double
*	O
(	O
c3	double
+	O
del	double
*	O
c4	double
)	O
)	O
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
gsl_sf_result	struct(double,double)
z	double
;	O
gsl_sf_result	struct(double,double)
p	double
;	O
int	O
stat_z	int
=	O
gsl_sf_zeta_e	(double,*(struct(double,double)))->(int)
(	O
s	double
,	O
&	O
z	double
)	O
;	O
int	O
stat_p	int
=	O
gsl_sf_exp_e	(double,*(struct(double,double)))->(int)
(	O
(	O
1.0	int
-	O
s	double
)	O
*	O
M_LN2	int
,	O
&	O
p	double
)	O
;	O
int	O
stat_m	int
=	O
gsl_sf_multiply_e	(double,double,*(struct(double,double)))->(int)
(	O
1.0	int
-	O
p	double
.	O
val	double
,	O
z	double
.	O
val	double
,	O
result	*(struct(double,double))
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
fabs	(double)->(double)
(	O
p	double
.	O
err	double
*	O
(	O
M_LN2	int
*	O
(	O
1.0	int
-	O
s	double
)	O
)	O
*	O
z	double
.	O
val	double
)	O
+	O
z	double
.	O
err	double
*	O
fabs	(double)->(double)
(	O
p	double
.	O
val	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_3	O
(	O
stat_m	int
,	O
stat_p	int
,	O
stat_z	int
)	O
;	O
}	O
}	O
double	O
gsl_sf_zeta	(double)->(double)
(	O
const	O
double	O
s	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_zeta_e	(double,*(struct(double,double)))->(int)
(	O
s	double
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
double	O
gsl_sf_hzeta	(double,double)->(double)
(	O
const	O
double	O
s	double
,	O
const	O
double	O
a	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_hzeta_e	(double,double,*(struct(double,double)))->(int)
(	O
s	double
,	O
a	double
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
double	O
gsl_sf_zeta_int	(int)->(double)
(	O
const	O
int	O
s	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_zeta_int_e	(int,*(struct(double,double)))->(int)
(	O
s	double
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
double	O
gsl_sf_zetam1	(double)->(double)
(	O
const	O
double	O
s	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_zetam1_e	(double,*(struct(double,double)))->(int)
(	O
s	double
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
double	O
gsl_sf_zetam1_int	(int)->(double)
(	O
const	O
int	O
s	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_zetam1_int_e	(int,*(struct(double,double)))->(int)
(	O
s	double
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
double	O
gsl_sf_eta_int	(int)->(double)
(	O
const	O
int	O
s	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_eta_int_e	(int,*(struct(double,double)))->(int)
(	O
s	double
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
double	O
gsl_sf_eta	(double)->(double)
(	O
const	O
double	O
s	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_eta_e	(double,*(struct(double,double)))->(int)
(	O
s	double
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
