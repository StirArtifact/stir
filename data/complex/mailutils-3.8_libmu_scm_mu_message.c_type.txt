static	O
scm_t_bits	O
message_tag	int
;	O
struct	O
mu_message	struct(*(struct),int)
{	O
mu_message_t	*(struct)
msg	*(struct)
;	O
SCM	(*(int))->((*(void),*(struct))->(int))
mbox	*(struct)
;	O
}	O
;	O
static	O
size_t	long
mu_scm_message_free	(int)->(long)
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
message_smob	int
)	O
{	O
struct	O
mu_message	struct(*(struct),int)
*	O
mum	*(struct(*(struct),int))
=	O
(	O
struct	O
mu_message	struct(*(struct),int)
*	O
)	O
SCM_CDR	()->(int)
(	O
message_smob	int
)	O
;	O
if	O
(	O
mum	*(struct(*(struct),int))
->	O
mbox	*(struct)
==	O
NULL	O
)	O
mu_message_destroy	(*(*(struct)),*(void))->(void)
(	O
&	O
mum	*(struct(*(struct),int))
->	O
msg	*(struct)
,	O
mu_message_get_owner	(*(struct))->(*(void))
(	O
mum	*(struct(*(struct),int))
->	O
msg	*(struct)
)	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
char	O
*	O
_get_envelope_sender	(*(struct))->(*(char))
(	O
mu_envelope_t	*(struct)
env	*(struct)
)	O
{	O
mu_address_t	*(struct)
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
const	O
char	O
*	O
buffer	*(char)
;	O
char	O
*	O
ptr	*(*(char))
=	O
NULL	O
;	O
if	O
(	O
mu_envelope_sget_sender	(*(struct),*(*(char)))->(int)
(	O
env	*(struct)
,	O
&	O
buffer	*(char)
)	O
||	O
mu_address_create	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(char))->(int)
(	O
&	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
buffer	*(char)
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
mu_address_aget_email	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),long,*(*(char)))->(int)
(	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
1	int
,	O
&	O
ptr	*(*(char))
)	O
)	O
{	O
mu_address_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(void)
(	O
&	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
return	O
NULL	O
;	O
}	O
mu_address_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(void)
(	O
&	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
return	O
ptr	*(*(char))
;	O
}	O
static	O
int	O
mu_scm_message_print	(int,int,*(int))->(int)
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
message_smob	int
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
port	int
,	O
scm_print_state	O
*	O
pstate	*(int)
)	O
{	O
struct	O
mu_message	struct(*(struct),int)
*	O
mum	*(struct(*(struct),int))
=	O
(	O
struct	O
mu_message	struct(*(struct),int)
*	O
)	O
SCM_CDR	()->(int)
(	O
message_smob	int
)	O
;	O
mu_envelope_t	*(struct)
env	*(struct)
=	O
NULL	O
;	O
const	O
char	O
*	O
buffer	*(char)
;	O
size_t	long
m_size	long
=	O
0	int
,	O
m_lines	long
=	O
0	int
;	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
;	O
struct	O
mu_timezone	struct(int,*(char))
tz	*(struct(int,*(char)))
;	O
char	O
datebuf	array(char)
[	O
sizeof	O
(	O
"Mon Jan 01 00:00"	*(char)
)	O
]	O
;	O
mu_message_get_envelope	(*(struct),*(*(struct)))->(int)
(	O
mum	*(struct(*(struct),int))
->	O
msg	*(struct)
,	O
&	O
env	*(struct)
)	O
;	O
scm_puts	()->(int)
(	O
"#<message "	*(char)
,	O
port	int
)	O
;	O
if	O
(	O
message_smob	int
==	O
SCM_BOOL_F	O
)	O
{	O
scm_puts	()->(int)
(	O
"#f"	*(char)
,	O
port	int
)	O
;	O
}	O
else	O
{	O
char	O
*	O
p	*(char)
;	O
char	O
const	O
*	O
s	*(char)
;	O
mu_attribute_t	*(struct)
attr	*(struct)
;	O
p	*(char)
=	O
_get_envelope_sender	(*(struct))->(*(char))
(	O
env	*(struct)
)	O
;	O
scm_puts	()->(int)
(	O
"\""	*(char)
,	O
port	int
)	O
;	O
if	O
(	O
p	*(char)
)	O
{	O
scm_puts	()->(int)
(	O
p	*(char)
,	O
port	int
)	O
;	O
free	(*(void))->(void)
(	O
p	*(char)
)	O
;	O
}	O
else	O
scm_puts	()->(int)
(	O
"UNKNOWN"	*(char)
,	O
port	int
)	O
;	O
if	O
(	O
mu_envelope_sget_date	(*(struct),*(*(char)))->(int)
(	O
env	*(struct)
,	O
&	O
s	*(char)
)	O
==	O
0	int
&&	O
mu_scan_datetime	(*(char),*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))),*(struct(int,*(char))),*(*(char)))->(int)
(	O
s	*(char)
,	O
MU_DATETIME_FROM	*(char)
,	O
&	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
,	O
&	O
tz	*(struct(int,*(char)))
,	O
NULL	O
)	O
==	O
0	int
)	O
{	O
strftime	(*(char),long,*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(long)
(	O
datebuf	array(char)
,	O
sizeof	O
(	O
datebuf	array(char)
)	O
,	O
"%a %b %e %H:%M"	*(char)
,	O
&	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
)	O
;	O
buffer	*(char)
=	O
datebuf	array(char)
;	O
}	O
else	O
buffer	*(char)
=	O
"UNKNOWN"	*(char)
;	O
scm_puts	()->(int)
(	O
"\" \""	*(char)
,	O
port	int
)	O
;	O
scm_puts	()->(int)
(	O
buffer	*(char)
,	O
port	int
)	O
;	O
scm_puts	()->(int)
(	O
"\" "	*(char)
,	O
port	int
)	O
;	O
mu_message_size	(*(struct),*(long))->(int)
(	O
mum	*(struct(*(struct),int))
->	O
msg	*(struct)
,	O
&	O
m_size	long
)	O
;	O
mu_message_lines	(*(struct),*(long))->(int)
(	O
mum	*(struct(*(struct),int))
->	O
msg	*(struct)
,	O
&	O
m_lines	long
)	O
;	O
scm_intprint	()->(int)
(	O
m_lines	long
,	O
10	int
,	O
port	int
)	O
;	O
scm_putc	()->(int)
(	O
' '	O
,	O
port	int
)	O
;	O
scm_intprint	()->(int)
(	O
m_size	long
,	O
10	int
,	O
port	int
)	O
;	O
if	O
(	O
mu_message_get_attribute	(*(struct),*(*(struct)))->(int)
(	O
mum	*(struct(*(struct),int))
->	O
msg	*(struct)
,	O
&	O
attr	*(struct)
)	O
==	O
0	int
)	O
{	O
char	O
abuf	array(char)
[	O
MU_STATUS_BUF_SIZE	O
]	O
;	O
if	O
(	O
mu_attribute_to_string	(*(struct),*(char),long,*(long))->(int)
(	O
attr	*(struct)
,	O
abuf	array(char)
,	O
sizeof	O
(	O
abuf	array(char)
)	O
,	O
NULL	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
abuf	array(char)
[	O
0	int
]	O
)	O
{	O
scm_putc	()->(int)
(	O
' '	O
,	O
port	int
)	O
;	O
scm_puts	()->(int)
(	O
abuf	array(char)
,	O
port	int
)	O
;	O
}	O
}	O
else	O
scm_puts	()->(int)
(	O
" E"	*(char)
,	O
port	int
)	O
;	O
}	O
}	O
scm_puts	()->(int)
(	O
">"	*(char)
,	O
port	int
)	O
;	O
return	O
1	int
;	O
}	O
SCM	(*(int))->((*(void),*(struct))->(int))
mu_scm_message_create	(int,*(struct))->(int)
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
owner	*(void)
,	O
mu_message_t	*(struct)
msg	*(struct)
)	O
{	O
struct	O
mu_message	struct(*(struct),int)
*	O
mum	*(struct(*(struct),int))
;	O
mum	*(struct(*(struct),int))
=	O
scm_gc_malloc	()->(int)
(	O
sizeof	O
(	O
struct	O
mu_message	struct(*(struct),int)
)	O
,	O
"message"	*(char)
)	O
;	O
mum	*(struct(*(struct),int))
->	O
msg	*(struct)
=	O
msg	*(struct)
;	O
mum	*(struct(*(struct),int))
->	O
mbox	*(struct)
=	O
owner	*(void)
;	O
SCM_RETURN_NEWSMOB	()->(int)
(	O
message_tag	int
,	O
mum	*(struct(*(struct),int))
)	O
;	O
}	O
void	O
mu_scm_message_add_owner	(int,int)->(void)
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
MESG	int
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
owner	*(void)
)	O
{	O
struct	O
mu_message	struct(*(struct),int)
*	O
mum	*(struct(*(struct),int))
=	O
(	O
struct	O
mu_message	struct(*(struct),int)
*	O
)	O
SCM_CDR	()->(int)
(	O
MESG	int
)	O
;	O
SCM	(*(int))->((*(void),*(struct))->(int))
cell	O
;	O
if	O
(	O
mum	*(struct(*(struct),int))
->	O
mbox	*(struct)
==	O
NULL	O
)	O
mum	*(struct(*(struct),int))
->	O
mbox	*(struct)
=	O
scm_cons	()->(int)
(	O
owner	*(void)
,	O
SCM_EOL	O
)	O
;	O
else	O
{	O
cell	O
=	O
scm_cons	()->(int)
(	O
owner	*(void)
,	O
mum	*(struct(*(struct),int))
->	O
mbox	*(struct)
)	O
;	O
mum	*(struct(*(struct),int))
->	O
mbox	*(struct)
=	O
cell	O
;	O
}	O
}	O
mu_message_t	*(struct)
mu_scm_message_get	(int)->(*(struct))
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
MESG	int
)	O
{	O
struct	O
mu_message	struct(*(struct),int)
*	O
mum	*(struct(*(struct),int))
=	O
(	O
struct	O
mu_message	struct(*(struct),int)
*	O
)	O
SCM_CDR	()->(int)
(	O
MESG	int
)	O
;	O
return	O
mum	*(struct(*(struct),int))
->	O
msg	*(struct)
;	O
}	O
int	O
mu_scm_is_message	(int)->(int)
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
scm	int
)	O
{	O
return	O
SCM_NIMP	()->(int)
(	O
scm	int
)	O
&&	O
(	O
long	O
)	O
SCM_CAR	()->(int)
(	O
scm	int
)	O
==	O
message_tag	int
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_message_p	O
,	O
"mu-message?"	*(char)
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
scm	int
)	O
,	O
"Return @code{true} if @var{scm} is a Mailutils message.\n"	*(char)
)	O
{	O
return	O
scm_from_bool	()->(int)
(	O
mu_scm_is_message	(int)->(int)
(	O
scm	int
)	O
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_message_create	O
,	O
"mu-message-create"	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
(	O
)	O
,	O
"Creates an empty message.\n"	*(char)
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
;	O
mu_message_create	(*(*(struct)),*(void))->(int)
(	O
&	O
msg	*(struct)
,	O
NULL	O
)	O
;	O
return	O
mu_scm_message_create	(int,*(struct))->(int)
(	O
SCM_BOOL_F	O
,	O
msg	*(struct)
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_message_copy	O
,	O
"mu-message-copy"	*(char)
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mesg	int
)	O
,	O
"Creates a copy of the message @var{mesg}.\n"	*(char)
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
,	O
newmsg	*(*(struct))
;	O
mu_stream_t	*(struct)
in	*(struct)
=	O
NULL	O
,	O
out	*(struct)
=	O
NULL	O
;	O
int	O
status	int
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_message	(int)->(int)
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	*(struct)
=	O
mu_scm_message_get	(int)->(*(struct))
(	O
mesg	int
)	O
;	O
status	int
=	O
mu_message_get_streamref	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
in	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get input stream from message ~A"	*(char)
,	O
scm_list_1	()->(int)
(	O
mesg	int
)	O
)	O
;	O
status	int
=	O
mu_message_create	(*(*(struct)),*(void))->(int)
(	O
&	O
newmsg	*(*(struct))
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot create message"	*(char)
,	O
SCM_BOOL_F	O
)	O
;	O
status	int
=	O
mu_message_get_streamref	(*(struct),*(*(struct)))->(int)
(	O
newmsg	*(*(struct))
,	O
&	O
out	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_message_destroy	(*(*(struct)),*(void))->(void)
(	O
&	O
newmsg	*(*(struct))
,	O
NULL	O
)	O
;	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get output stream"	*(char)
,	O
SCM_BOOL_F	O
)	O
;	O
}	O
status	int
=	O
mu_stream_copy	(*(struct),*(struct),long,*(long))->(int)
(	O
out	*(struct)
,	O
in	*(struct)
,	O
0	int
,	O
NULL	O
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
in	*(struct)
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
out	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_message_destroy	(*(*(struct)),*(void))->(void)
(	O
&	O
newmsg	*(*(struct))
,	O
NULL	O
)	O
;	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Error writing to stream"	*(char)
,	O
SCM_BOOL_F	O
)	O
;	O
}	O
return	O
mu_scm_message_create	(int,*(struct))->(int)
(	O
SCM_BOOL_F	O
,	O
newmsg	*(*(struct))
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_message_destroy	O
,	O
"mu-message-destroy"	*(char)
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mesg	int
)	O
,	O
"Destroys the message @var{mesg}."	*(char)
)	O
{	O
struct	O
mu_message	struct(*(struct),int)
*	O
mum	*(struct(*(struct),int))
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_message	(int)->(int)
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
mum	*(struct(*(struct),int))
=	O
(	O
struct	O
mu_message	struct(*(struct),int)
*	O
)	O
SCM_CDR	()->(int)
(	O
mesg	int
)	O
;	O
mu_message_destroy	(*(*(struct)),*(void))->(void)
(	O
&	O
mum	*(struct(*(struct),int))
->	O
msg	*(struct)
,	O
mu_message_get_owner	(*(struct))->(*(void))
(	O
mum	*(struct(*(struct),int))
->	O
msg	*(struct)
)	O
)	O
;	O
return	O
SCM_UNSPECIFIED	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_message_set_header	O
,	O
"mu-message-set-header"	*(char)
,	O
3	int
,	O
1	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mesg	int
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
header	*(struct)
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
value	*(char)
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
replace	O
)	O
,	O
"Sets header @var{header} of the message @var{mesg} to new @var{value}.\n"	*(char)
"If @var{header} is already present in the message, its value\n"	*(char)
"is replaced with the suplied one iff the optional @var{replace} is\n"	*(char)
"@code{#t}. Otherwise, a new header is created and appended."	*(char)
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
;	O
mu_header_t	*(struct)
hdr	*(struct)
;	O
int	O
repl	int
=	O
0	int
;	O
int	O
status	int
;	O
char	O
*	O
hdr_c	*(char)
,	O
*	O
val_c	*(char)
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_message	(int)->(int)
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	*(struct)
=	O
mu_scm_message_get	(int)->(*(struct))
(	O
mesg	int
)	O
;	O
SCM_ASSERT	()->(int)
(	O
scm_is_string	()->(int)
(	O
header	*(struct)
)	O
,	O
header	*(struct)
,	O
SCM_ARG2	O
,	O
FUNC_NAME	O
)	O
;	O
if	O
(	O
scm_is_bool	()->(int)
(	O
value	*(char)
)	O
)	O
return	O
SCM_UNSPECIFIED	O
;	O
SCM_ASSERT	()->(int)
(	O
scm_is_string	()->(int)
(	O
value	*(char)
)	O
,	O
value	*(char)
,	O
SCM_ARG3	O
,	O
FUNC_NAME	O
)	O
;	O
if	O
(	O
!	O
SCM_UNBNDP	()->(int)
(	O
replace	O
)	O
)	O
{	O
repl	int
=	O
replace	O
==	O
SCM_BOOL_T	O
;	O
}	O
status	int
=	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
hdr	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get message headers"	*(char)
,	O
SCM_BOOL_F	O
)	O
;	O
hdr_c	*(char)
=	O
scm_to_locale_string	()->(int)
(	O
header	*(struct)
)	O
;	O
val_c	*(char)
=	O
scm_to_locale_string	()->(int)
(	O
value	*(char)
)	O
;	O
if	O
(	O
repl	int
)	O
status	int
=	O
mu_header_set_value	(*(struct),*(char),*(char),int)->(int)
(	O
hdr	*(struct)
,	O
hdr_c	*(char)
,	O
val_c	*(char)
,	O
repl	int
)	O
;	O
else	O
status	int
=	O
mu_header_append	(*(struct),*(char),*(char))->(int)
(	O
hdr	*(struct)
,	O
hdr_c	*(char)
,	O
val_c	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
hdr_c	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
val_c	*(char)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot set header \"~A: ~A\" in message ~A"	*(char)
,	O
scm_list_3	()->(int)
(	O
header	*(struct)
,	O
value	*(char)
,	O
mesg	int
)	O
)	O
;	O
return	O
SCM_UNSPECIFIED	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_message_get_size	O
,	O
"mu-message-get-size"	*(char)
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mesg	int
)	O
,	O
"Returns size of the message @var{mesg}.\n"	*(char)
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
;	O
size_t	long
size	*(long)
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_message	(int)->(int)
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	*(struct)
=	O
mu_scm_message_get	(int)->(*(struct))
(	O
mesg	int
)	O
;	O
mu_message_size	(*(struct),*(long))->(int)
(	O
msg	*(struct)
,	O
&	O
size	*(long)
)	O
;	O
return	O
scm_from_size_t	()->(int)
(	O
size	*(long)
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_message_get_lines	O
,	O
"mu-message-get-lines"	*(char)
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mesg	int
)	O
,	O
"Returns number of lines in the message @var{msg}.\n"	*(char)
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
;	O
size_t	long
lines	long
;	O
int	O
status	int
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_message	(int)->(int)
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	*(struct)
=	O
mu_scm_message_get	(int)->(*(struct))
(	O
mesg	int
)	O
;	O
status	int
=	O
mu_message_lines	(*(struct),*(long))->(int)
(	O
msg	*(struct)
,	O
&	O
lines	long
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get number of lines in message ~A"	*(char)
,	O
scm_list_1	()->(int)
(	O
mesg	int
)	O
)	O
;	O
return	O
scm_from_size_t	()->(int)
(	O
lines	long
)	O
;	O
}	O
static	O
SCM	(*(int))->((*(void),*(struct))->(int))
filltime	(*(struct(int,int,int,int,int,int,int,int,int,long,*(char))),int,*(char))->(int)
(	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
*	O
bd_time	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
,	O
int	O
zoff	int
,	O
const	O
char	O
*	O
zname	*(char)
)	O
{	O
SCM	(*(int))->((*(void),*(struct))->(int))
result	*(*(char))
=	O
scm_c_make_vector	O
(	O
11	int
,	O
SCM_UNDEFINED	O
)	O
;	O
SCM_SIMPLE_VECTOR_SET	()->(int)
(	O
result	*(*(char))
,	O
0	int
,	O
scm_from_int	()->(int)
(	O
bd_time	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_sec	int
)	O
)	O
;	O
SCM_SIMPLE_VECTOR_SET	()->(int)
(	O
result	*(*(char))
,	O
1	int
,	O
scm_from_int	()->(int)
(	O
bd_time	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_min	int
)	O
)	O
;	O
SCM_SIMPLE_VECTOR_SET	()->(int)
(	O
result	*(*(char))
,	O
2	int
,	O
scm_from_int	()->(int)
(	O
bd_time	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_hour	int
)	O
)	O
;	O
SCM_SIMPLE_VECTOR_SET	()->(int)
(	O
result	*(*(char))
,	O
3	int
,	O
scm_from_int	()->(int)
(	O
bd_time	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_mday	int
)	O
)	O
;	O
SCM_SIMPLE_VECTOR_SET	()->(int)
(	O
result	*(*(char))
,	O
4	int
,	O
scm_from_int	()->(int)
(	O
bd_time	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_mon	int
)	O
)	O
;	O
SCM_SIMPLE_VECTOR_SET	()->(int)
(	O
result	*(*(char))
,	O
5	int
,	O
scm_from_int	()->(int)
(	O
bd_time	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_year	int
)	O
)	O
;	O
SCM_SIMPLE_VECTOR_SET	()->(int)
(	O
result	*(*(char))
,	O
6	int
,	O
scm_from_int	()->(int)
(	O
bd_time	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_wday	int
)	O
)	O
;	O
SCM_SIMPLE_VECTOR_SET	()->(int)
(	O
result	*(*(char))
,	O
7	int
,	O
scm_from_int	()->(int)
(	O
bd_time	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_yday	int
)	O
)	O
;	O
SCM_SIMPLE_VECTOR_SET	()->(int)
(	O
result	*(*(char))
,	O
8	int
,	O
scm_from_int	()->(int)
(	O
bd_time	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_isdst	int
)	O
)	O
;	O
SCM_SIMPLE_VECTOR_SET	()->(int)
(	O
result	*(*(char))
,	O
9	int
,	O
scm_from_int	()->(int)
(	O
zoff	int
)	O
)	O
;	O
SCM_SIMPLE_VECTOR_SET	()->(int)
(	O
result	*(*(char))
,	O
10	int
,	O
(	O
zname	*(char)
?	O
scm_from_locale_string	()->(int)
(	O
zname	*(char)
)	O
:	O
SCM_BOOL_F	O
)	O
)	O
;	O
return	O
result	*(*(char))
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_message_get_envelope	O
,	O
"mu-message-get-envelope"	*(char)
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mesg	int
)	O
,	O
"Returns envelope of the message @var{mesg}.\n"	*(char)
"The value returned is the envelope line without the \"From \" prefix.\n"	*(char)
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
;	O
mu_envelope_t	*(struct)
env	*(struct)
=	O
NULL	O
;	O
int	O
status	int
;	O
const	O
char	O
*	O
sender	*(struct)
;	O
const	O
char	O
*	O
date	struct(int,int,int,int,int,int,int,int,int,long,*(char))
;	O
size_t	long
dlen	long
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_message	(int)->(int)
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	*(struct)
=	O
mu_scm_message_get	(int)->(*(struct))
(	O
mesg	int
)	O
;	O
status	int
=	O
mu_message_get_envelope	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
env	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"cannot get envelope"	*(char)
,	O
scm_list_1	()->(int)
(	O
mesg	int
)	O
)	O
;	O
status	int
=	O
mu_envelope_sget_sender	(*(struct),*(*(char)))->(int)
(	O
env	*(struct)
,	O
&	O
sender	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"cannot get envelope sender"	*(char)
,	O
scm_list_1	()->(int)
(	O
mesg	int
)	O
)	O
;	O
status	int
=	O
mu_envelope_sget_date	(*(struct),*(*(char)))->(int)
(	O
env	*(struct)
,	O
&	O
date	struct(int,int,int,int,int,int,int,int,int,long,*(char))
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"cannot get envelope date"	*(char)
,	O
scm_list_1	()->(int)
(	O
mesg	int
)	O
)	O
;	O
dlen	long
=	O
strlen	(*(char))->(long)
(	O
date	struct(int,int,int,int,int,int,int,int,int,long,*(char))
)	O
;	O
if	O
(	O
date	struct(int,int,int,int,int,int,int,int,int,long,*(char))
[	O
dlen	long
-	O
1	int
]	O
==	O
'\n'	O
)	O
dlen	long
--	O
;	O
return	O
scm_string_append	()->(int)
(	O
scm_list_3	()->(int)
(	O
scm_from_locale_string	()->(int)
(	O
sender	*(struct)
)	O
,	O
scm_from_locale_string	()->(int)
(	O
" "	*(char)
)	O
,	O
scm_from_locale_stringn	()->(int)
(	O
date	struct(int,int,int,int,int,int,int,int,int,long,*(char))
,	O
dlen	long
)	O
)	O
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_message_get_envelope_date	O
,	O
"mu-message-get-envelope-date"	*(char)
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mesg	int
)	O
,	O
"Returns envelope date of the message @var{mesg}.\n"	*(char)
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
;	O
mu_envelope_t	*(struct)
env	*(struct)
=	O
NULL	O
;	O
int	O
status	int
;	O
const	O
char	O
*	O
sdate	*(char)
;	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
;	O
struct	O
mu_timezone	struct(int,*(char))
tz	*(struct(int,*(char)))
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_message	(int)->(int)
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	*(struct)
=	O
mu_scm_message_get	(int)->(*(struct))
(	O
mesg	int
)	O
;	O
status	int
=	O
mu_message_get_envelope	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
env	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"cannot get envelope"	*(char)
,	O
scm_list_1	()->(int)
(	O
mesg	int
)	O
)	O
;	O
status	int
=	O
mu_envelope_sget_date	(*(struct),*(*(char)))->(int)
(	O
env	*(struct)
,	O
&	O
sdate	*(char)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"cannot get envelope date"	*(char)
,	O
scm_list_1	()->(int)
(	O
mesg	int
)	O
)	O
;	O
status	int
=	O
mu_scan_datetime	(*(char),*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))),*(struct(int,*(char))),*(*(char)))->(int)
(	O
sdate	*(char)
,	O
MU_DATETIME_FROM	*(char)
,	O
&	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
,	O
&	O
tz	*(struct(int,*(char)))
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"invalid envelope date"	*(char)
,	O
scm_list_1	()->(int)
(	O
scm_from_locale_string	()->(int)
(	O
sdate	*(char)
)	O
)	O
)	O
;	O
return	O
filltime	(*(struct(int,int,int,int,int,int,int,int,int,long,*(char))),int,*(char))->(int)
(	O
&	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
,	O
tz	*(struct(int,*(char)))
.	O
utc_offset	int
,	O
tz	*(struct(int,*(char)))
.	O
tz_name	*(char)
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_message_get_sender	O
,	O
"mu-message-get-sender"	*(char)
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mesg	int
)	O
,	O
"Returns email address of the sender of the message @var{mesg}.\n"	*(char)
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
;	O
mu_envelope_t	*(struct)
env	*(struct)
=	O
NULL	O
;	O
int	O
status	int
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_message	(int)->(int)
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	*(struct)
=	O
mu_scm_message_get	(int)->(*(struct))
(	O
mesg	int
)	O
;	O
status	int
=	O
mu_message_get_envelope	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
env	*(struct)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
char	O
*	O
p	*(char)
=	O
_get_envelope_sender	(*(struct))->(*(char))
(	O
env	*(struct)
)	O
;	O
if	O
(	O
p	*(char)
)	O
{	O
SCM	(*(int))->((*(void),*(struct))->(int))
ret	*(*(struct))
=	O
scm_from_locale_string	()->(int)
(	O
p	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
p	*(char)
)	O
;	O
return	O
ret	*(*(struct))
;	O
}	O
}	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get envelope of message ~A"	*(char)
,	O
scm_list_1	()->(int)
(	O
mesg	int
)	O
)	O
;	O
return	O
SCM_UNDEFINED	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_message_get_header	O
,	O
"mu-message-get-header"	*(char)
,	O
2	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mesg	int
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
header	*(struct)
)	O
,	O
"Returns value of the header @var{header} from the message @var{mesg}.\n"	*(char)
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
;	O
mu_header_t	*(struct)
hdr	*(struct)
;	O
char	O
*	O
value	*(char)
=	O
NULL	O
;	O
char	O
*	O
header_string	*(char)
;	O
SCM	(*(int))->((*(void),*(struct))->(int))
ret	*(*(struct))
;	O
int	O
status	int
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_message	(int)->(int)
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	*(struct)
=	O
mu_scm_message_get	(int)->(*(struct))
(	O
mesg	int
)	O
;	O
SCM_ASSERT	()->(int)
(	O
scm_is_string	()->(int)
(	O
header	*(struct)
)	O
,	O
header	*(struct)
,	O
SCM_ARG2	O
,	O
FUNC_NAME	O
)	O
;	O
status	int
=	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
hdr	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get message headers"	*(char)
,	O
SCM_BOOL_F	O
)	O
;	O
header_string	*(char)
=	O
scm_to_locale_string	()->(int)
(	O
header	*(struct)
)	O
;	O
status	int
=	O
mu_header_aget_value	O
(	O
hdr	*(struct)
,	O
header_string	*(char)
,	O
&	O
value	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
header_string	*(char)
)	O
;	O
switch	O
(	O
status	int
)	O
{	O
case	O
0	int
:	O
ret	*(*(struct))
=	O
scm_from_locale_string	()->(int)
(	O
value	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
value	*(char)
)	O
;	O
break	O
;	O
case	O
MU_ERR_NOENT	O
:	O
ret	*(*(struct))
=	O
SCM_BOOL_F	O
;	O
break	O
;	O
default	O
:	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get header ~A from message ~A"	*(char)
,	O
scm_list_2	()->(int)
(	O
header	*(struct)
,	O
mesg	int
)	O
)	O
;	O
}	O
return	O
ret	*(*(struct))
;	O
}	O
static	O
int	O
string_is_member	(*(char),int)->(int)
(	O
char	O
const	O
*	O
needle	*(char)
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
array	int
)	O
{	O
int	O
found	int
=	O
0	int
;	O
while	O
(	O
!	O
(	O
found	int
||	O
scm_is_null	()->(int)
(	O
array	int
)	O
)	O
)	O
{	O
SCM	(*(int))->((*(void),*(struct))->(int))
car	O
=	O
scm_car	O
(	O
array	int
)	O
;	O
if	O
(	O
scm_is_string	()->(int)
(	O
car	O
)	O
)	O
{	O
char	O
*	O
s	*(char)
=	O
scm_to_locale_string	()->(int)
(	O
car	O
)	O
;	O
found	int
=	O
mu_c_strcasecmp	(*(char),*(char))->(int)
(	O
needle	*(char)
,	O
s	*(char)
)	O
==	O
0	int
;	O
free	(*(void))->(void)
(	O
s	*(char)
)	O
;	O
}	O
array	int
=	O
scm_cdr	()->(int)
(	O
array	int
)	O
;	O
}	O
return	O
found	int
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_message_get_header_fields	O
,	O
"mu-message-get-header-fields"	*(char)
,	O
1	int
,	O
1	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mesg	int
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
headers	O
)	O
,	O
"Returns list of headers in the message @var{mesg}. optional argument\n"	*(char)
"@var{headers} gives a list of header names to restrict return value to.\n"	*(char)
)	O
{	O
size_t	long
i	long
,	O
nfields	long
=	O
0	int
;	O
mu_message_t	*(struct)
msg	*(struct)
;	O
mu_header_t	*(struct)
hdr	*(struct)
=	O
NULL	O
;	O
SCM	(*(int))->((*(void),*(struct))->(int))
scm_first	O
=	O
SCM_EOL	O
,	O
scm_last	O
=	O
SCM_EOL	O
;	O
int	O
status	int
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_message	(int)->(int)
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	*(struct)
=	O
mu_scm_message_get	(int)->(*(struct))
(	O
mesg	int
)	O
;	O
if	O
(	O
SCM_UNBNDP	()->(int)
(	O
headers	O
)	O
)	O
headers	O
=	O
SCM_EOL	O
;	O
else	O
SCM_ASSERT	()->(int)
(	O
scm_is_pair	()->(int)
(	O
headers	O
)	O
,	O
headers	O
,	O
SCM_ARG2	O
,	O
FUNC_NAME	O
)	O
;	O
status	int
=	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
hdr	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get message headers"	*(char)
,	O
SCM_BOOL_F	O
)	O
;	O
status	int
=	O
mu_header_get_field_count	(*(struct),*(long))->(int)
(	O
hdr	*(struct)
,	O
&	O
nfields	long
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get header field count"	*(char)
,	O
SCM_BOOL_F	O
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
nfields	long
;	O
i	long
++	O
)	O
{	O
SCM	(*(int))->((*(void),*(struct))->(int))
scm_name	O
,	O
scm_value	O
,	O
scm_new	O
;	O
char	O
*	O
name	*(char)
,	O
*	O
value	*(char)
;	O
status	int
=	O
mu_header_aget_field_name	(*(struct),long,*(*(char)))->(int)
(	O
hdr	*(struct)
,	O
i	long
,	O
&	O
name	*(char)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get header field ~A, message ~A"	*(char)
,	O
scm_list_2	()->(int)
(	O
scm_from_size_t	()->(int)
(	O
i	long
)	O
,	O
mesg	int
)	O
)	O
;	O
if	O
(	O
!	O
scm_is_null	()->(int)
(	O
headers	O
)	O
&&	O
!	O
string_is_member	(*(char),int)->(int)
(	O
name	*(char)
,	O
headers	O
)	O
)	O
continue	O
;	O
status	int
=	O
mu_header_aget_field_value	(*(struct),long,*(*(char)))->(int)
(	O
hdr	*(struct)
,	O
i	long
,	O
&	O
value	*(char)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get header value ~A, message ~A"	*(char)
,	O
scm_list_2	()->(int)
(	O
scm_from_size_t	()->(int)
(	O
i	long
)	O
,	O
mesg	int
)	O
)	O
;	O
scm_name	O
=	O
scm_from_locale_string	()->(int)
(	O
name	*(char)
)	O
;	O
scm_value	O
=	O
scm_from_locale_string	()->(int)
(	O
value	*(char)
)	O
;	O
scm_new	O
=	O
scm_cons	()->(int)
(	O
scm_cons	()->(int)
(	O
scm_name	O
,	O
scm_value	O
)	O
,	O
SCM_EOL	O
)	O
;	O
if	O
(	O
scm_is_null	()->(int)
(	O
scm_first	O
)	O
)	O
scm_first	O
=	O
scm_last	O
=	O
scm_new	O
;	O
else	O
{	O
SCM_SETCDR	()->(int)
(	O
scm_last	O
,	O
scm_new	O
)	O
;	O
scm_last	O
=	O
scm_new	O
;	O
}	O
}	O
return	O
scm_first	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_message_set_header_fields	O
,	O
"mu-message-set-header-fields"	*(char)
,	O
2	int
,	O
1	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mesg	int
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
list	*(struct)
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
replace	O
)	O
,	O
"Set headers in the message @var{mesg} to those listed in @var{list},\n"	*(char)
"which is a list of conses @code{(cons @var{header} @var{value})}.\n\n"	*(char)
"Optional parameter @var{replace} specifies whether new header\n"	*(char)
"values should replace the headers already present in the\n"	*(char)
"message."	*(char)
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
;	O
mu_header_t	*(struct)
hdr	*(struct)
;	O
int	O
repl	int
=	O
0	int
;	O
int	O
status	int
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_message	(int)->(int)
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	*(struct)
=	O
mu_scm_message_get	(int)->(*(struct))
(	O
mesg	int
)	O
;	O
SCM_ASSERT	()->(int)
(	O
scm_is_null	()->(int)
(	O
list	*(struct)
)	O
||	O
scm_is_pair	()->(int)
(	O
list	*(struct)
)	O
,	O
list	*(struct)
,	O
SCM_ARG2	O
,	O
FUNC_NAME	O
)	O
;	O
if	O
(	O
!	O
SCM_UNBNDP	()->(int)
(	O
replace	O
)	O
)	O
{	O
SCM_ASSERT	()->(int)
(	O
scm_is_bool	()->(int)
(	O
replace	O
)	O
,	O
replace	O
,	O
SCM_ARG3	O
,	O
FUNC_NAME	O
)	O
;	O
repl	int
=	O
replace	O
==	O
SCM_BOOL_T	O
;	O
}	O
status	int
=	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
hdr	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get message headers"	*(char)
,	O
SCM_BOOL_F	O
)	O
;	O
for	O
(	O
;	O
!	O
scm_is_null	()->(int)
(	O
list	*(struct)
)	O
;	O
list	*(struct)
=	O
SCM_CDR	()->(int)
(	O
list	*(struct)
)	O
)	O
{	O
SCM	(*(int))->((*(void),*(struct))->(int))
cell	O
=	O
SCM_CAR	()->(int)
(	O
list	*(struct)
)	O
;	O
SCM	(*(int))->((*(void),*(struct))->(int))
car	O
,	O
cdr	O
;	O
char	O
*	O
hdr_c	*(char)
,	O
*	O
val_c	*(char)
;	O
SCM_ASSERT	()->(int)
(	O
scm_is_pair	()->(int)
(	O
cell	O
)	O
,	O
cell	O
,	O
SCM_ARGn	O
,	O
FUNC_NAME	O
)	O
;	O
car	O
=	O
SCM_CAR	()->(int)
(	O
cell	O
)	O
;	O
cdr	O
=	O
SCM_CDR	()->(int)
(	O
cell	O
)	O
;	O
SCM_ASSERT	()->(int)
(	O
scm_is_string	()->(int)
(	O
car	O
)	O
,	O
car	O
,	O
SCM_ARGn	O
,	O
FUNC_NAME	O
)	O
;	O
SCM_ASSERT	()->(int)
(	O
scm_is_string	()->(int)
(	O
cdr	O
)	O
,	O
cdr	O
,	O
SCM_ARGn	O
,	O
FUNC_NAME	O
)	O
;	O
hdr_c	*(char)
=	O
scm_to_locale_string	()->(int)
(	O
car	O
)	O
;	O
val_c	*(char)
=	O
scm_to_locale_string	()->(int)
(	O
cdr	O
)	O
;	O
if	O
(	O
repl	int
)	O
status	int
=	O
mu_header_set_value	(*(struct),*(char),*(char),int)->(int)
(	O
hdr	*(struct)
,	O
hdr_c	*(char)
,	O
val_c	*(char)
,	O
repl	int
)	O
;	O
else	O
status	int
=	O
mu_header_append	(*(struct),*(char),*(char))->(int)
(	O
hdr	*(struct)
,	O
hdr_c	*(char)
,	O
val_c	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
hdr_c	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
val_c	*(char)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot set header value: message ~A, header ~A, value ~A"	*(char)
,	O
scm_list_3	()->(int)
(	O
mesg	int
,	O
car	O
,	O
cdr	O
)	O
)	O
;	O
}	O
return	O
SCM_UNSPECIFIED	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_message_delete	O
,	O
"mu-message-delete"	*(char)
,	O
1	int
,	O
1	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mesg	int
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
flag	int
)	O
,	O
"Mark message @var{mesg} as deleted. Optional argument @var{flag} allows to\n"	*(char)
"toggle the deletion mark. The message is deleted if it is @code{#t} and\n"	*(char)
"undeleted if it is @code{#f}."	*(char)
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
;	O
mu_attribute_t	*(struct)
attr	*(struct)
;	O
int	O
delete	int
=	O
1	int
;	O
int	O
status	int
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_message	(int)->(int)
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	*(struct)
=	O
mu_scm_message_get	(int)->(*(struct))
(	O
mesg	int
)	O
;	O
if	O
(	O
!	O
SCM_UNBNDP	()->(int)
(	O
flag	int
)	O
)	O
{	O
SCM_ASSERT	()->(int)
(	O
scm_is_bool	()->(int)
(	O
flag	int
)	O
,	O
flag	int
,	O
SCM_ARG2	O
,	O
FUNC_NAME	O
)	O
;	O
delete	int
=	O
flag	int
==	O
SCM_BOOL_T	O
;	O
}	O
status	int
=	O
mu_message_get_attribute	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
attr	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get message attribute"	*(char)
,	O
SCM_BOOL_F	O
)	O
;	O
if	O
(	O
delete	int
)	O
status	int
=	O
mu_attribute_set_deleted	(*(struct))->(int)
(	O
attr	*(struct)
)	O
;	O
else	O
status	int
=	O
mu_attribute_unset_deleted	(*(struct))->(int)
(	O
attr	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Error setting message attribute"	*(char)
,	O
SCM_BOOL_F	O
)	O
;	O
return	O
SCM_UNSPECIFIED	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_message_get_flag	O
,	O
"mu-message-get-flag"	*(char)
,	O
2	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mesg	int
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
flag	int
)	O
,	O
"Return the value of the attribute @var{flag} of the message @var{mesg}."	*(char)
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
;	O
mu_attribute_t	*(struct)
attr	*(struct)
;	O
int	O
ret	*(*(struct))
=	O
0	int
;	O
int	O
status	int
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_message	(int)->(int)
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	*(struct)
=	O
mu_scm_message_get	(int)->(*(struct))
(	O
mesg	int
)	O
;	O
SCM_ASSERT	()->(int)
(	O
scm_is_integer	()->(int)
(	O
flag	int
)	O
,	O
flag	int
,	O
SCM_ARG2	O
,	O
FUNC_NAME	O
)	O
;	O
status	int
=	O
mu_message_get_attribute	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
attr	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get message attribute"	*(char)
,	O
SCM_BOOL_F	O
)	O
;	O
switch	O
(	O
scm_to_int	()->(int)
(	O
flag	int
)	O
)	O
{	O
case	O
MU_ATTRIBUTE_ANSWERED	int
:	O
ret	*(*(struct))
=	O
mu_attribute_is_answered	(*(struct))->(int)
(	O
attr	*(struct)
)	O
;	O
break	O
;	O
case	O
MU_ATTRIBUTE_FLAGGED	int
:	O
ret	*(*(struct))
=	O
mu_attribute_is_flagged	(*(struct))->(int)
(	O
attr	*(struct)
)	O
;	O
break	O
;	O
case	O
MU_ATTRIBUTE_DELETED	int
:	O
ret	*(*(struct))
=	O
mu_attribute_is_deleted	(*(struct))->(int)
(	O
attr	*(struct)
)	O
;	O
break	O
;	O
case	O
MU_ATTRIBUTE_DRAFT	int
:	O
ret	*(*(struct))
=	O
mu_attribute_is_draft	(*(struct))->(int)
(	O
attr	*(struct)
)	O
;	O
break	O
;	O
case	O
MU_ATTRIBUTE_SEEN	int
:	O
ret	*(*(struct))
=	O
mu_attribute_is_seen	(*(struct))->(int)
(	O
attr	*(struct)
)	O
;	O
break	O
;	O
case	O
MU_ATTRIBUTE_READ	int
:	O
ret	*(*(struct))
=	O
mu_attribute_is_read	(*(struct))->(int)
(	O
attr	*(struct)
)	O
;	O
break	O
;	O
case	O
MU_ATTRIBUTE_MODIFIED	int
:	O
ret	*(*(struct))
=	O
mu_attribute_is_modified	(*(struct))->(int)
(	O
attr	*(struct)
)	O
;	O
break	O
;	O
case	O
MU_ATTRIBUTE_RECENT	int
:	O
ret	*(*(struct))
=	O
mu_attribute_is_recent	(*(struct))->(int)
(	O
attr	*(struct)
)	O
;	O
break	O
;	O
default	O
:	O
mu_attribute_get_flags	(*(struct),*(int))->(int)
(	O
attr	*(struct)
,	O
&	O
ret	*(*(struct))
)	O
;	O
ret	*(*(struct))
&=	O
scm_to_int	()->(int)
(	O
flag	int
)	O
;	O
}	O
return	O
ret	*(*(struct))
?	O
SCM_BOOL_T	O
:	O
SCM_BOOL_F	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_message_set_flag	O
,	O
"mu-message-set-flag"	*(char)
,	O
2	int
,	O
1	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mesg	int
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
flag	int
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
value	*(char)
)	O
,	O
"Set the attribute @var{flag} in message @var{mesg}. If optional @var{value}\n"	*(char)
"is @samp{#f}, the attribute is unset.\n"	*(char)
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
;	O
mu_attribute_t	*(struct)
attr	*(struct)
;	O
int	O
val	array(int)
=	O
1	int
;	O
int	O
status	int
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_message	(int)->(int)
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	*(struct)
=	O
mu_scm_message_get	(int)->(*(struct))
(	O
mesg	int
)	O
;	O
SCM_ASSERT	()->(int)
(	O
scm_is_integer	()->(int)
(	O
flag	int
)	O
,	O
flag	int
,	O
SCM_ARG2	O
,	O
FUNC_NAME	O
)	O
;	O
if	O
(	O
!	O
SCM_UNBNDP	()->(int)
(	O
value	*(char)
)	O
)	O
{	O
SCM_ASSERT	()->(int)
(	O
scm_is_bool	()->(int)
(	O
value	*(char)
)	O
,	O
value	*(char)
,	O
SCM_ARG3	O
,	O
FUNC_NAME	O
)	O
;	O
val	array(int)
=	O
value	*(char)
==	O
SCM_BOOL_T	O
;	O
}	O
status	int
=	O
mu_message_get_attribute	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
attr	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get message attribute"	*(char)
,	O
SCM_BOOL_F	O
)	O
;	O
status	int
=	O
0	int
;	O
switch	O
(	O
scm_to_int	()->(int)
(	O
flag	int
)	O
)	O
{	O
case	O
MU_ATTRIBUTE_ANSWERED	int
:	O
if	O
(	O
val	array(int)
)	O
status	int
=	O
mu_attribute_set_answered	(*(struct))->(int)
(	O
attr	*(struct)
)	O
;	O
else	O
status	int
=	O
mu_attribute_unset_answered	(*(struct))->(int)
(	O
attr	*(struct)
)	O
;	O
break	O
;	O
case	O
MU_ATTRIBUTE_FLAGGED	int
:	O
if	O
(	O
val	array(int)
)	O
status	int
=	O
mu_attribute_set_flagged	(*(struct))->(int)
(	O
attr	*(struct)
)	O
;	O
else	O
status	int
=	O
mu_attribute_unset_flagged	(*(struct))->(int)
(	O
attr	*(struct)
)	O
;	O
break	O
;	O
case	O
MU_ATTRIBUTE_DELETED	int
:	O
if	O
(	O
val	array(int)
)	O
status	int
=	O
mu_attribute_set_deleted	(*(struct))->(int)
(	O
attr	*(struct)
)	O
;	O
else	O
status	int
=	O
mu_attribute_unset_deleted	(*(struct))->(int)
(	O
attr	*(struct)
)	O
;	O
break	O
;	O
case	O
MU_ATTRIBUTE_DRAFT	int
:	O
if	O
(	O
val	array(int)
)	O
status	int
=	O
mu_attribute_set_draft	(*(struct))->(int)
(	O
attr	*(struct)
)	O
;	O
else	O
status	int
=	O
mu_attribute_unset_draft	(*(struct))->(int)
(	O
attr	*(struct)
)	O
;	O
break	O
;	O
case	O
MU_ATTRIBUTE_SEEN	int
:	O
if	O
(	O
val	array(int)
)	O
status	int
=	O
mu_attribute_set_seen	(*(struct))->(int)
(	O
attr	*(struct)
)	O
;	O
else	O
status	int
=	O
mu_attribute_unset_seen	(*(struct))->(int)
(	O
attr	*(struct)
)	O
;	O
break	O
;	O
case	O
MU_ATTRIBUTE_READ	int
:	O
if	O
(	O
val	array(int)
)	O
status	int
=	O
mu_attribute_set_read	(*(struct))->(int)
(	O
attr	*(struct)
)	O
;	O
else	O
status	int
=	O
mu_attribute_unset_read	(*(struct))->(int)
(	O
attr	*(struct)
)	O
;	O
break	O
;	O
case	O
MU_ATTRIBUTE_MODIFIED	int
:	O
if	O
(	O
val	array(int)
)	O
status	int
=	O
mu_attribute_set_modified	(*(struct))->(int)
(	O
attr	*(struct)
)	O
;	O
else	O
status	int
=	O
mu_attribute_clear_modified	(*(struct))->(int)
(	O
attr	*(struct)
)	O
;	O
break	O
;	O
case	O
MU_ATTRIBUTE_RECENT	int
:	O
if	O
(	O
val	array(int)
)	O
status	int
=	O
mu_attribute_set_recent	(*(struct))->(int)
(	O
attr	*(struct)
)	O
;	O
else	O
status	int
=	O
mu_attribute_unset_recent	(*(struct))->(int)
(	O
attr	*(struct)
)	O
;	O
break	O
;	O
default	O
:	O
if	O
(	O
val	array(int)
)	O
status	int
=	O
mu_attribute_set_flags	(*(struct),int)->(int)
(	O
attr	*(struct)
,	O
scm_to_int	()->(int)
(	O
flag	int
)	O
)	O
;	O
}	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Error setting message attribute"	*(char)
,	O
SCM_BOOL_F	O
)	O
;	O
return	O
SCM_UNSPECIFIED	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_message_get_user_flag	O
,	O
"mu-message-get-user-flag"	*(char)
,	O
2	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mesg	int
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
flag	int
)	O
,	O
"Return value of the user-defined attribute @var{flag} from the message @var{mesg}."	*(char)
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
;	O
mu_attribute_t	*(struct)
attr	*(struct)
;	O
int	O
status	int
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_message	(int)->(int)
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	*(struct)
=	O
mu_scm_message_get	(int)->(*(struct))
(	O
mesg	int
)	O
;	O
SCM_ASSERT	()->(int)
(	O
scm_is_integer	()->(int)
(	O
flag	int
)	O
,	O
flag	int
,	O
SCM_ARG2	O
,	O
FUNC_NAME	O
)	O
;	O
status	int
=	O
mu_message_get_attribute	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
attr	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get message attribute"	*(char)
,	O
SCM_BOOL_F	O
)	O
;	O
return	O
mu_attribute_is_userflag	(*(struct),int)->(int)
(	O
attr	*(struct)
,	O
scm_to_int	()->(int)
(	O
flag	int
)	O
)	O
?	O
SCM_BOOL_T	O
:	O
SCM_BOOL_F	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_message_set_user_flag	O
,	O
"mu-message-set-user-flag"	*(char)
,	O
2	int
,	O
1	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mesg	int
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
flag	int
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
value	*(char)
)	O
,	O
"Set user-defined attribute @var{flag} in the message @var{mesg}.\n"	*(char)
"If optional argumen @var{value} is @samp{#f}, the attribute is unset."	*(char)
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
;	O
mu_attribute_t	*(struct)
attr	*(struct)
;	O
int	O
set	int
=	O
1	int
;	O
int	O
status	int
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_message	(int)->(int)
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	*(struct)
=	O
mu_scm_message_get	(int)->(*(struct))
(	O
mesg	int
)	O
;	O
SCM_ASSERT	()->(int)
(	O
scm_is_integer	()->(int)
(	O
flag	int
)	O
,	O
flag	int
,	O
SCM_ARG2	O
,	O
FUNC_NAME	O
)	O
;	O
if	O
(	O
!	O
SCM_UNBNDP	()->(int)
(	O
value	*(char)
)	O
)	O
{	O
SCM_ASSERT	()->(int)
(	O
scm_is_bool	()->(int)
(	O
value	*(char)
)	O
,	O
value	*(char)
,	O
SCM_ARG3	O
,	O
FUNC_NAME	O
)	O
;	O
set	int
=	O
value	*(char)
==	O
SCM_BOOL_T	O
;	O
}	O
status	int
=	O
mu_message_get_attribute	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
attr	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get message attribute"	*(char)
,	O
SCM_BOOL_F	O
)	O
;	O
if	O
(	O
set	int
)	O
mu_attribute_set_userflag	(*(struct),int)->(int)
(	O
attr	*(struct)
,	O
scm_to_int	()->(int)
(	O
flag	int
)	O
)	O
;	O
else	O
mu_attribute_unset_userflag	(*(struct),int)->(int)
(	O
attr	*(struct)
,	O
scm_to_int	()->(int)
(	O
flag	int
)	O
)	O
;	O
return	O
SCM_UNSPECIFIED	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_message_get_port	O
,	O
"mu-message-get-port"	*(char)
,	O
2	int
,	O
1	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mesg	int
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
mode	int
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
full	O
)	O
,	O
"@anchor{mu-message-get-port}\n"	*(char)
"Returns a port associated with the message @var{mesg}. The @var{mode} is a\n"	*(char)
"string defining operation mode of the stream. It may contain any of the\n"	*(char)
"two characters: @samp{r} for reading, @samp{w} for writing.\n"	*(char)
"If optional boolean argument @var{full} is @samp{#t} then the returned port\n"	*(char)
"will allow access to any part of the message (including headers). Otherwise\n"	*(char)
"the port accesses only the message body (the default).\n"	*(char)
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
;	O
mu_stream_t	*(struct)
stream	*(struct)
=	O
NULL	O
;	O
int	O
status	int
;	O
char	O
*	O
str	*(struct)
;	O
SCM	(*(int))->((*(void),*(struct))->(int))
ret	*(*(struct))
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_message	(int)->(int)
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
SCM_ASSERT	()->(int)
(	O
scm_is_string	()->(int)
(	O
mode	int
)	O
,	O
mode	int
,	O
SCM_ARG2	O
,	O
FUNC_NAME	O
)	O
;	O
msg	*(struct)
=	O
mu_scm_message_get	(int)->(*(struct))
(	O
mesg	int
)	O
;	O
if	O
(	O
!	O
SCM_UNBNDP	()->(int)
(	O
full	O
)	O
)	O
{	O
SCM_ASSERT	()->(int)
(	O
scm_is_bool	()->(int)
(	O
full	O
)	O
,	O
full	O
,	O
SCM_ARG3	O
,	O
FUNC_NAME	O
)	O
;	O
if	O
(	O
full	O
==	O
SCM_BOOL_T	O
)	O
{	O
status	int
=	O
mu_message_get_streamref	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
stream	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get message stream"	*(char)
,	O
SCM_BOOL_F	O
)	O
;	O
}	O
}	O
if	O
(	O
!	O
stream	*(struct)
)	O
{	O
mu_body_t	*(struct)
body	*(struct)
=	O
NULL	O
;	O
status	int
=	O
mu_message_get_body	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
body	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get message body"	*(char)
,	O
SCM_BOOL_F	O
)	O
;	O
status	int
=	O
mu_body_get_streamref	(*(struct),*(*(struct)))->(int)
(	O
body	*(struct)
,	O
&	O
stream	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get message body stream"	*(char)
,	O
SCM_BOOL_F	O
)	O
;	O
}	O
str	*(struct)
=	O
scm_to_locale_string	()->(int)
(	O
mode	int
)	O
;	O
ret	*(*(struct))
=	O
mu_port_make_from_stream	(*(struct),long)->(int)
(	O
stream	*(struct)
,	O
scm_mode_bits	()->(int)
(	O
str	*(struct)
)	O
)	O
;	O
free	(*(void))->(void)
(	O
str	*(struct)
)	O
;	O
return	O
ret	*(*(struct))
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_message_get_body	O
,	O
"mu-message-get-body"	*(char)
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mesg	int
)	O
,	O
"Returns message body for the message @var{mesg}."	*(char)
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
;	O
mu_body_t	*(struct)
body	*(struct)
=	O
NULL	O
;	O
int	O
status	int
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_message	(int)->(int)
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	*(struct)
=	O
mu_scm_message_get	(int)->(*(struct))
(	O
mesg	int
)	O
;	O
status	int
=	O
mu_message_get_body	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
body	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get message body"	*(char)
,	O
SCM_BOOL_F	O
)	O
;	O
return	O
mu_scm_body_create	(int,*(struct))->(int)
(	O
mesg	int
,	O
body	*(struct)
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_message_multipart_p	O
,	O
"mu-message-multipart?"	*(char)
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mesg	int
)	O
,	O
"Returns @code{#t} if @var{mesg} is a multipart @acronym{MIME} message."	*(char)
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
;	O
int	O
ismime	int
=	O
0	int
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_message	(int)->(int)
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	*(struct)
=	O
mu_scm_message_get	(int)->(*(struct))
(	O
mesg	int
)	O
;	O
mu_message_is_multipart	(*(struct),*(int))->(int)
(	O
msg	*(struct)
,	O
&	O
ismime	int
)	O
;	O
return	O
ismime	int
?	O
SCM_BOOL_T	O
:	O
SCM_BOOL_F	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_message_get_num_parts	O
,	O
"mu-message-get-num-parts"	*(char)
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mesg	int
)	O
,	O
"Returns number of parts in a multipart @acronym{MIME} message @var{mesg}.\n"	*(char)
"Returns @code{#f} if the argument is not a multipart message."	*(char)
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
;	O
int	O
ismime	int
=	O
0	int
;	O
size_t	long
nparts	*(long)
=	O
0	int
;	O
int	O
status	int
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_message	(int)->(int)
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	*(struct)
=	O
mu_scm_message_get	(int)->(*(struct))
(	O
mesg	int
)	O
;	O
mu_message_is_multipart	(*(struct),*(int))->(int)
(	O
msg	*(struct)
,	O
&	O
ismime	int
)	O
;	O
if	O
(	O
!	O
ismime	int
)	O
return	O
SCM_BOOL_F	O
;	O
status	int
=	O
mu_message_get_num_parts	(*(struct),*(long))->(int)
(	O
msg	*(struct)
,	O
&	O
nparts	*(long)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get number of parts in the message ~A"	*(char)
,	O
scm_list_1	()->(int)
(	O
mesg	int
)	O
)	O
;	O
return	O
scm_from_size_t	()->(int)
(	O
nparts	*(long)
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_message_get_part	O
,	O
"mu-message-get-part"	*(char)
,	O
2	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mesg	int
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
part	long
)	O
,	O
"Returns part #@var{part} of a multipart @acronym{MIME} message @var{mesg}."	*(char)
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
,	O
submsg	*(struct)
;	O
int	O
ismime	int
=	O
0	int
;	O
int	O
status	int
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_message	(int)->(int)
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
SCM_ASSERT	()->(int)
(	O
scm_is_integer	()->(int)
(	O
part	long
)	O
,	O
part	long
,	O
SCM_ARG2	O
,	O
FUNC_NAME	O
)	O
;	O
msg	*(struct)
=	O
mu_scm_message_get	(int)->(*(struct))
(	O
mesg	int
)	O
;	O
mu_message_is_multipart	(*(struct),*(int))->(int)
(	O
msg	*(struct)
,	O
&	O
ismime	int
)	O
;	O
if	O
(	O
!	O
ismime	int
)	O
return	O
SCM_BOOL_F	O
;	O
status	int
=	O
mu_message_get_part	(*(struct),long,*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
scm_to_size_t	()->(int)
(	O
part	long
)	O
,	O
&	O
submsg	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get number of part ~A from the message ~A"	*(char)
,	O
scm_list_2	()->(int)
(	O
part	long
,	O
mesg	int
)	O
)	O
;	O
return	O
mu_scm_message_create	(int,*(struct))->(int)
(	O
mesg	int
,	O
submsg	*(struct)
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_message_send	O
,	O
"mu-message-send"	*(char)
,	O
1	int
,	O
3	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mesg	int
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
mailer	*(struct)
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
from	*(struct)
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
to	*(struct)
)	O
,	O
"Sends message @var{mesg}. Optional @var{mailer} overrides default mailer\n"	*(char)
"settings. Optional @var{from} and @var{to} give sender and receiver\n"	*(char)
"addresses, respectively.\n"	*(char)
)	O
{	O
char	O
*	O
mailer_name	*(char)
;	O
mu_address_t	*(struct)
from_addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
NULL	O
;	O
mu_address_t	*(struct)
to_addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
NULL	O
;	O
mu_mailer_t	*(struct)
mailer_c	*(struct)
=	O
NULL	O
;	O
mu_message_t	*(struct)
msg	*(struct)
;	O
int	O
status	int
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_message	(int)->(int)
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	*(struct)
=	O
mu_scm_message_get	(int)->(*(struct))
(	O
mesg	int
)	O
;	O
if	O
(	O
!	O
SCM_UNBNDP	()->(int)
(	O
mailer	*(struct)
)	O
&&	O
mailer	*(struct)
!=	O
SCM_BOOL_F	O
)	O
{	O
SCM_ASSERT	()->(int)
(	O
scm_is_string	()->(int)
(	O
mailer	*(struct)
)	O
,	O
mailer	*(struct)
,	O
SCM_ARG2	O
,	O
FUNC_NAME	O
)	O
;	O
mailer_name	*(char)
=	O
scm_to_locale_string	()->(int)
(	O
mailer	*(struct)
)	O
;	O
}	O
else	O
{	O
SCM	(*(int))->((*(void),*(struct))->(int))
val	array(int)
=	O
MU_SCM_SYMBOL_VALUE	O
(	O
"mu-mailer"	*(char)
)	O
;	O
mailer_name	*(char)
=	O
scm_to_locale_string	()->(int)
(	O
val	array(int)
)	O
;	O
}	O
if	O
(	O
!	O
SCM_UNBNDP	()->(int)
(	O
from	*(struct)
)	O
&&	O
from	*(struct)
!=	O
SCM_BOOL_F	O
)	O
{	O
char	O
*	O
s	*(char)
;	O
int	O
rc	int
;	O
SCM_ASSERT	()->(int)
(	O
scm_is_string	()->(int)
(	O
from	*(struct)
)	O
,	O
from	*(struct)
,	O
SCM_ARG3	O
,	O
FUNC_NAME	O
)	O
;	O
s	*(char)
=	O
scm_to_locale_string	()->(int)
(	O
from	*(struct)
)	O
;	O
rc	int
=	O
mu_address_create	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(char))->(int)
(	O
&	O
from_addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
s	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
s	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
rc	int
,	O
"cannot create address"	*(char)
,	O
scm_list_1	()->(int)
(	O
from	*(struct)
)	O
)	O
;	O
}	O
if	O
(	O
!	O
SCM_UNBNDP	()->(int)
(	O
to	*(struct)
)	O
&&	O
to	*(struct)
!=	O
SCM_BOOL_F	O
)	O
{	O
char	O
*	O
s	*(char)
;	O
int	O
rc	int
;	O
SCM_ASSERT	()->(int)
(	O
scm_is_string	()->(int)
(	O
to	*(struct)
)	O
,	O
to	*(struct)
,	O
SCM_ARG4	O
,	O
FUNC_NAME	O
)	O
;	O
s	*(char)
=	O
scm_to_locale_string	()->(int)
(	O
to	*(struct)
)	O
;	O
rc	int
=	O
mu_address_create	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(char))->(int)
(	O
&	O
to_addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
s	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
s	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
rc	int
,	O
"cannot create address"	*(char)
,	O
scm_list_1	()->(int)
(	O
to	*(struct)
)	O
)	O
;	O
}	O
status	int
=	O
mu_mailer_create	(*(*(struct)),*(char))->(int)
(	O
&	O
mailer_c	*(struct)
,	O
mailer_name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
mailer_name	*(char)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot create mailer"	*(char)
,	O
SCM_BOOL_F	O
)	O
;	O
if	O
(	O
scm_to_int	()->(int)
(	O
MU_SCM_SYMBOL_VALUE	O
(	O
"mu-debug"	*(char)
)	O
)	O
)	O
{	O
mu_debug_set_category_level	(int,int)->(int)
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_LEVEL_UPTO	O
(	O
MU_DEBUG_PROT	int
)	O
)	O
;	O
}	O
status	int
=	O
mu_mailer_open	(*(struct),int)->(int)
(	O
mailer_c	*(struct)
,	O
MU_STREAM_RDWR	O
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
status	int
=	O
mu_mailer_send_message	(*(struct),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
mailer_c	*(struct)
,	O
msg	*(struct)
,	O
from_addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
to_addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot send message"	*(char)
,	O
SCM_BOOL_F	O
)	O
;	O
mu_mailer_close	(*(struct))->(int)
(	O
mailer_c	*(struct)
)	O
;	O
}	O
else	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot open mailer"	*(char)
,	O
SCM_BOOL_F	O
)	O
;	O
mu_mailer_destroy	(*(*(struct)))->(void)
(	O
&	O
mailer_c	*(struct)
)	O
;	O
return	O
status	int
==	O
0	int
?	O
SCM_BOOL_T	O
:	O
SCM_BOOL_F	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_message_get_uid	O
,	O
"mu-message-get-uid"	*(char)
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mesg	int
)	O
,	O
"Returns UID of the message @var{mesg}\n"	*(char)
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
;	O
int	O
status	int
;	O
size_t	long
uid	int
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_message	(int)->(int)
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	*(struct)
=	O
mu_scm_message_get	(int)->(*(struct))
(	O
mesg	int
)	O
;	O
status	int
=	O
mu_message_get_uid	(*(struct),*(long))->(int)
(	O
msg	*(struct)
,	O
&	O
uid	int
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get message uid"	*(char)
,	O
SCM_BOOL_F	O
)	O
;	O
return	O
scm_from_size_t	()->(int)
(	O
uid	int
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_message_from_port	O
,	O
"mu-message-from-port"	*(char)
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
port	int
)	O
,	O
"Reads one message from @var{port} and returns it.\n"	*(char)
)	O
{	O
mu_stream_t	*(struct)
str	*(struct)
;	O
int	O
rc	int
;	O
mu_message_t	*(struct)
msg	*(struct)
;	O
SCM_ASSERT	()->(int)
(	O
SCM_PORTP	()->(int)
(	O
port	int
)	O
,	O
port	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
rc	int
=	O
mu_scm_port_stream_create	(*(*(struct)),int)->(int)
(	O
&	O
str	*(struct)
,	O
port	int
)	O
;	O
if	O
(	O
rc	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
rc	int
,	O
"Cannot create mu_stream_t from ~A"	*(char)
,	O
scm_list_1	()->(int)
(	O
port	int
)	O
)	O
;	O
rc	int
=	O
mu_stream_to_message	(*(struct),*(*(struct)))->(int)
(	O
str	*(struct)
,	O
&	O
msg	*(struct)
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
str	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
rc	int
,	O
"Failed to get message from ~A"	*(char)
,	O
scm_list_1	()->(int)
(	O
port	int
)	O
)	O
;	O
return	O
mu_scm_message_create	(int,*(struct))->(int)
(	O
NULL	O
,	O
msg	*(struct)
)	O
;	O
}	O
void	O
mu_scm_message_init	()->(void)
(	O
)	O
{	O
message_tag	int
=	O
scm_make_smob_type	()->(int)
(	O
"message"	*(char)
,	O
sizeof	O
(	O
struct	O
mu_message	struct(*(struct),int)
)	O
)	O
;	O
scm_set_smob_free	()->(int)
(	O
message_tag	int
,	O
mu_scm_message_free	(int)->(long)
)	O
;	O
scm_set_smob_print	()->(int)
(	O
message_tag	int
,	O
mu_scm_message_print	(int,int,*(int))->(int)
)	O
;	O
}	O
