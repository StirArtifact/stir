int	O
gsl_sf_bessel_Jn_e	(int,double,*(struct(double,double)))->(int)
(	O
int	O
n	int
,	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
int	O
sign	int
=	O
1	int
;	O
if	O
(	O
n	int
<	O
0	int
)	O
{	O
n	int
=	O
-	O
n	int
;	O
if	O
(	O
GSL_IS_ODD	O
(	O
n	int
)	O
)	O
sign	int
=	O
-	O
sign	int
;	O
}	O
if	O
(	O
x	double
<	O
0.0	int
)	O
{	O
x	double
=	O
-	O
x	double
;	O
if	O
(	O
GSL_IS_ODD	O
(	O
n	int
)	O
)	O
sign	int
=	O
-	O
sign	int
;	O
}	O
if	O
(	O
n	int
==	O
0	int
)	O
{	O
gsl_sf_result	struct(double,double)
b0	struct(double,double)
;	O
int	O
stat_J0	int
=	O
gsl_sf_bessel_J0_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
b0	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
sign	int
*	O
b0	struct(double,double)
.	O
val	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
b0	struct(double,double)
.	O
err	double
;	O
return	O
stat_J0	int
;	O
}	O
else	O
if	O
(	O
n	int
==	O
1	int
)	O
{	O
gsl_sf_result	struct(double,double)
b1	struct(double,double)
;	O
int	O
stat_J1	int
=	O
gsl_sf_bessel_J1_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
b1	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
sign	int
*	O
b1	struct(double,double)
.	O
val	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
b1	struct(double,double)
.	O
err	double
;	O
return	O
stat_J1	int
;	O
}	O
else	O
{	O
if	O
(	O
x	double
==	O
0.0	int
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
0.0	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
*	O
x	double
<	O
10.0	int
*	O
(	O
n	int
+	O
1.0	int
)	O
*	O
GSL_ROOT5_DBL_EPSILON	int
)	O
{	O
gsl_sf_result	struct(double,double)
b	double
;	O
int	O
status	int
=	O
gsl_sf_bessel_IJ_taylor_e	(double,double,int,int,double,*(struct(double,double)))->(int)
(	O
(	O
double	O
)	O
n	int
,	O
x	double
,	O
-	O
1	int
,	O
50	int
,	O
GSL_DBL_EPSILON	int
,	O
&	O
b	double
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
sign	int
*	O
b	double
.	O
val	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
b	double
.	O
err	double
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
status	int
;	O
}	O
else	O
if	O
(	O
GSL_ROOT4_DBL_EPSILON	int
*	O
x	double
>	O
(	O
n	int
*	O
n	int
+	O
1.0	int
)	O
)	O
{	O
int	O
status	int
=	O
gsl_sf_bessel_Jnu_asympx_e	(double,double,*(struct(double,double)))->(int)
(	O
(	O
double	O
)	O
n	int
,	O
x	double
,	O
result	*(struct(double,double))
)	O
;	O
result	*(struct(double,double))
->	O
val	double
*=	O
sign	int
;	O
return	O
status	int
;	O
}	O
else	O
if	O
(	O
n	int
>	O
50	int
)	O
{	O
int	O
status	int
=	O
gsl_sf_bessel_Jnu_asymp_Olver_e	(double,double,*(struct(double,double)))->(int)
(	O
(	O
double	O
)	O
n	int
,	O
x	double
,	O
result	*(struct(double,double))
)	O
;	O
result	*(struct(double,double))
->	O
val	double
*=	O
sign	int
;	O
return	O
status	int
;	O
}	O
else	O
if	O
(	O
x	double
>	O
1000.0	int
)	O
{	O
int	O
status	int
=	O
gsl_sf_bessel_Jnu_asympx_e	(double,double,*(struct(double,double)))->(int)
(	O
(	O
double	O
)	O
n	int
,	O
x	double
,	O
result	*(struct(double,double))
)	O
;	O
result	*(struct(double,double))
->	O
val	double
*=	O
sign	int
;	O
return	O
status	int
;	O
}	O
else	O
{	O
double	O
ans	double
;	O
double	O
err	double
;	O
double	O
ratio	*(double)
;	O
double	O
sgn	*(double)
;	O
int	O
stat_b	int
;	O
int	O
stat_CF1	int
=	O
gsl_sf_bessel_J_CF1	(double,double,*(double),*(double))->(int)
(	O
(	O
double	O
)	O
n	int
,	O
x	double
,	O
&	O
ratio	*(double)
,	O
&	O
sgn	*(double)
)	O
;	O
double	O
Jkp1	double
=	O
GSL_SQRT_DBL_MIN	int
*	O
ratio	*(double)
;	O
double	O
Jk	double
=	O
GSL_SQRT_DBL_MIN	int
;	O
double	O
Jkm1	double
;	O
int	O
k	int
;	O
for	O
(	O
k	int
=	O
n	int
;	O
k	int
>	O
0	int
;	O
k	int
--	O
)	O
{	O
Jkm1	double
=	O
2.0	int
*	O
k	int
/	O
x	double
*	O
Jk	double
-	O
Jkp1	double
;	O
Jkp1	double
=	O
Jk	double
;	O
Jk	double
=	O
Jkm1	double
;	O
}	O
if	O
(	O
fabs	(double)->(double)
(	O
Jkp1	double
)	O
>	O
fabs	(double)->(double)
(	O
Jk	double
)	O
)	O
{	O
gsl_sf_result	struct(double,double)
b1	struct(double,double)
;	O
stat_b	int
=	O
gsl_sf_bessel_J1_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
b1	struct(double,double)
)	O
;	O
ans	double
=	O
b1	struct(double,double)
.	O
val	double
/	O
Jkp1	double
*	O
GSL_SQRT_DBL_MIN	int
;	O
err	double
=	O
b1	struct(double,double)
.	O
err	double
/	O
Jkp1	double
*	O
GSL_SQRT_DBL_MIN	int
;	O
}	O
else	O
{	O
gsl_sf_result	struct(double,double)
b0	struct(double,double)
;	O
stat_b	int
=	O
gsl_sf_bessel_J0_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
b0	struct(double,double)
)	O
;	O
ans	double
=	O
b0	struct(double,double)
.	O
val	double
/	O
Jk	double
*	O
GSL_SQRT_DBL_MIN	int
;	O
err	double
=	O
b0	struct(double,double)
.	O
err	double
/	O
Jk	double
*	O
GSL_SQRT_DBL_MIN	int
;	O
}	O
result	*(struct(double,double))
->	O
val	double
=	O
sign	int
*	O
ans	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
fabs	(double)->(double)
(	O
err	double
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_CF1	int
,	O
stat_b	int
)	O
;	O
}	O
}	O
}	O
int	O
gsl_sf_bessel_Jn_array	(int,int,double,*(double))->(int)
(	O
int	O
nmin	int
,	O
int	O
nmax	int
,	O
double	O
x	double
,	O
double	O
*	O
result_array	*(double)
)	O
{	O
if	O
(	O
nmin	int
<	O
0	int
||	O
nmax	int
<	O
nmin	int
)	O
{	O
int	O
n	int
;	O
for	O
(	O
n	int
=	O
nmax	int
;	O
n	int
>=	O
nmin	int
;	O
n	int
--	O
)	O
{	O
result_array	*(double)
[	O
n	int
-	O
nmin	int
]	O
=	O
0.0	int
;	O
}	O
GSL_ERROR	O
(	O
"domain error"	*(char)
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
if	O
(	O
x	double
==	O
0.0	int
)	O
{	O
int	O
n	int
;	O
for	O
(	O
n	int
=	O
nmax	int
;	O
n	int
>=	O
nmin	int
;	O
n	int
--	O
)	O
{	O
result_array	*(double)
[	O
n	int
-	O
nmin	int
]	O
=	O
0.0	int
;	O
}	O
if	O
(	O
nmin	int
==	O
0	int
)	O
result_array	*(double)
[	O
0	int
]	O
=	O
1.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
gsl_sf_result	struct(double,double)
r_Jnp1	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
r_Jn	struct(double,double)
;	O
int	O
stat_np1	int
=	O
gsl_sf_bessel_Jn_e	(int,double,*(struct(double,double)))->(int)
(	O
nmax	int
+	O
1	int
,	O
x	double
,	O
&	O
r_Jnp1	struct(double,double)
)	O
;	O
int	O
stat_n	int
=	O
gsl_sf_bessel_Jn_e	(int,double,*(struct(double,double)))->(int)
(	O
nmax	int
,	O
x	double
,	O
&	O
r_Jn	struct(double,double)
)	O
;	O
int	O
stat	int
=	O
GSL_ERROR_SELECT_2	O
(	O
stat_np1	int
,	O
stat_n	int
)	O
;	O
double	O
Jnp1	double
=	O
r_Jnp1	struct(double,double)
.	O
val	double
;	O
double	O
Jn	double
=	O
r_Jn	struct(double,double)
.	O
val	double
;	O
double	O
Jnm1	double
;	O
int	O
n	int
;	O
if	O
(	O
stat	int
==	O
GSL_SUCCESS	int
)	O
{	O
for	O
(	O
n	int
=	O
nmax	int
;	O
n	int
>=	O
nmin	int
;	O
n	int
--	O
)	O
{	O
result_array	*(double)
[	O
n	int
-	O
nmin	int
]	O
=	O
Jn	double
;	O
Jnm1	double
=	O
-	O
Jnp1	double
+	O
2.0	int
*	O
n	int
/	O
x	double
*	O
Jn	double
;	O
Jnp1	double
=	O
Jn	double
;	O
Jn	double
=	O
Jnm1	double
;	O
}	O
}	O
else	O
{	O
for	O
(	O
n	int
=	O
nmax	int
;	O
n	int
>=	O
nmin	int
;	O
n	int
--	O
)	O
{	O
result_array	*(double)
[	O
n	int
-	O
nmin	int
]	O
=	O
0.0	int
;	O
}	O
}	O
return	O
stat	int
;	O
}	O
}	O
double	O
gsl_sf_bessel_Jn	(int,double)->(double)
(	O
const	O
int	O
n	int
,	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_bessel_Jn_e	(int,double,*(struct(double,double)))->(int)
(	O
n	int
,	O
x	double
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
