extern	O
void	O
VComputeObjectExtent	(*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct`)),*(short))))->(void)
(	O
)	O
;	O
static	O
VPoint	struct(double,double,double)
scale	int
=	O
{	O
1.0	int
,	O
1.0	int
,	O
1.0	int
}	O
;	O
void	O
VSetReadObjectScale	(*(struct(double,double,double)))->(void)
(	O
VPoint	struct(double,double,double)
*	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
)	O
{	O
scale	int
=	O
*	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
;	O
}	O
typedef	O
enum	O
{	O
Nil	int
,	O
EndOfFile	int
,	O
TOKEN_RGB_VALUE	int
,	O
TOKEN_LPAREN	int
,	O
TOKEN_RPAREN	int
,	O
TOKEN_COMMA	int
,	O
TOKEN_STRING	int
,	O
TOKEN_CLIP	int
,	O
TOKEN_DOUBLE	int
,	O
TOKEN_LONG	int
,	O
}	O
field_id	enum(int,int,int,int,int,int,int,int,int,int)
;	O
static	O
field_id	enum(int,int,int,int,int,int,int,int,int,int)
NextToken	()->(enum(int,int,int,int,int,int,int,int,int,int))
(	O
)	O
;	O
struct	O
keyword_info	struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))
{	O
char	O
*	O
word	*(char)
;	O
field_id	enum(int,int,int,int,int,int,int,int,int,int)
id	enum(int,int,int,int,int,int,int,int,int,int)
;	O
}	O
;	O
static	O
struct	O
keyword_info	struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))
keywords	array(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int)))
[	O
]	O
=	O
{	O
{	O
"clip"	*(char)
,	O
TOKEN_CLIP	int
}	O
,	O
{	O
(	O
char	O
*	O
)	O
NULL	O
,	O
Nil	int
}	O
,	O
}	O
;	O
static	O
char	O
token	array(char)
[	O
256	int
]	O
;	O
static	O
int	O
token_length	int
=	O
0	int
;	O
typedef	O
union	O
{	O
struct	O
keyword_info	struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))
*	O
kw	*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int)))
;	O
double	O
double_value	double
;	O
char	O
*	O
string_value	*(char)
;	O
long	O
long_value	long
;	O
VPoint	struct(double,double,double)
point	*(struct(double,double,double))
;	O
VPolygon	struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),double)
*	O
poly	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
;	O
}	O
lex_val	union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))
;	O
static	O
lex_val	union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))
lex_value	union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))
;	O
struct	O
lex_record	struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),int,int,int,int,array(union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))))
{	O
char	O
*	O
name	*(char)
;	O
FILE	struct
*	O
f	struct(*((*(struct),*(struct(*`,long,int,long,long,long,int,int)),int,int,int,*(char),int,int,int,int)->(*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)))),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)))->(int)),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)),int,int)->(long)),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)),int,int,long)->(int)),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)),int,int,int,int)->(*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)))),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)),long)->(int)))
;	O
int	O
lineno	int
;	O
int	O
lookahead_valid	int
;	O
int	O
lookahead	int
;	O
int	O
stack_top	int
;	O
lex_val	union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))
value_stack	array(union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double))))
[	O
4	int
]	O
;	O
}	O
;	O
static	O
void	O
ParseError	(*(struct(*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,int,int,array(union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))))),*(char))->(void)
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
,	O
s	double
)	O
struct	O
lex_record	struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),int,int,int,int,array(union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))))
*	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
;	O
char	O
*	O
s	double
;	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"error in file %s (line %d):\n\t%s\n"	*(char)
,	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
name	*(char)
,	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
lineno	int
,	O
s	double
)	O
;	O
}	O
static	O
void	O
Resync	(*(struct(*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,int,int,array(union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))))),int)->(void)
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
,	O
token	array(char)
)	O
struct	O
lex_record	struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),int,int,int,int,array(union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))))
*	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
;	O
field_id	enum(int,int,int,int,int,int,int,int,int,int)
token	array(char)
;	O
{	O
field_id	enum(int,int,int,int,int,int,int,int,int,int)
t	enum(int,int,int,int,int,int,int,int,int,int)
;	O
int	O
c	*(struct(long,short,short,short,char,char))
;	O
if	O
(	O
token	array(char)
==	O
Nil	int
)	O
{	O
while	O
(	O
(	O
c	*(struct(long,short,short,short,char,char))
=	O
input	O
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
)	O
)	O
!=	O
EOF	O
)	O
{	O
if	O
(	O
c	*(struct(long,short,short,short,char,char))
==	O
'\n'	O
)	O
break	O
;	O
}	O
}	O
else	O
{	O
while	O
(	O
(	O
t	enum(int,int,int,int,int,int,int,int,int,int)
=	O
NextToken	()->(enum(int,int,int,int,int,int,int,int,int,int))
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
)	O
)	O
!=	O
EndOfFile	int
)	O
{	O
if	O
(	O
t	enum(int,int,int,int,int,int,int,int,int,int)
==	O
token	array(char)
)	O
break	O
;	O
}	O
}	O
}	O
static	O
field_id	enum(int,int,int,int,int,int,int,int,int,int)
NextTokenx	(*(struct(*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,int,int,array(union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))))))->(enum(int,int,int,int,int,int,int,int,int,int))
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
)	O
struct	O
lex_record	struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),int,int,int,int,array(union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))))
*	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
;	O
{	O
register	O
int	O
c	*(struct(long,short,short,short,char,char))
,	O
state	int
=	O
STATE_INITIAL	int
,	O
seen_dot	int
=	O
0	int
;	O
register	O
struct	O
keyword_info	struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))
*	O
q	*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int)))
;	O
token_length	int
=	O
0	int
;	O
while	O
(	O
(	O
c	*(struct(long,short,short,short,char,char))
=	O
input	O
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
)	O
)	O
!=	O
EOF	O
)	O
{	O
switch	O
(	O
state	int
)	O
{	O
case	O
STATE_INITIAL	int
:	O
if	O
(	O
isalpha	(int)->(int)
(	O
c	*(struct(long,short,short,short,char,char))
)	O
)	O
{	O
token	array(char)
[	O
token_length	int
++	O
]	O
=	O
c	*(struct(long,short,short,short,char,char))
;	O
state	int
=	O
STATE_WORD	int
;	O
}	O
else	O
if	O
(	O
isspace	(int)->(int)
(	O
c	*(struct(long,short,short,short,char,char))
)	O
)	O
{	O
continue	O
;	O
}	O
else	O
if	O
(	O
isdigit	(int)->(int)
(	O
c	*(struct(long,short,short,short,char,char))
)	O
||	O
c	*(struct(long,short,short,short,char,char))
==	O
'-'	O
||	O
c	*(struct(long,short,short,short,char,char))
==	O
'+'	O
||	O
c	*(struct(long,short,short,short,char,char))
==	O
'.'	O
)	O
{	O
if	O
(	O
c	*(struct(long,short,short,short,char,char))
==	O
'.'	O
)	O
seen_dot	int
=	O
1	int
;	O
token	array(char)
[	O
token_length	int
++	O
]	O
=	O
c	*(struct(long,short,short,short,char,char))
;	O
state	int
=	O
STATE_NUMBER	int
;	O
}	O
else	O
if	O
(	O
c	*(struct(long,short,short,short,char,char))
==	O
'"'	O
)	O
{	O
state	int
=	O
STATE_STRING	int
;	O
}	O
else	O
if	O
(	O
c	*(struct(long,short,short,short,char,char))
==	O
'#'	O
)	O
{	O
token	array(char)
[	O
token_length	int
++	O
]	O
=	O
c	*(struct(long,short,short,short,char,char))
;	O
state	int
=	O
STATE_RGB	int
;	O
}	O
else	O
{	O
token	array(char)
[	O
0	int
]	O
=	O
c	*(struct(long,short,short,short,char,char))
;	O
token	array(char)
[	O
1	int
]	O
=	O
'\0'	O
;	O
switch	O
(	O
c	*(struct(long,short,short,short,char,char))
)	O
{	O
case	O
','	O
:	O
return	O
TOKEN_COMMA	int
;	O
case	O
'('	O
:	O
return	O
TOKEN_LPAREN	int
;	O
case	O
')'	O
:	O
return	O
TOKEN_RPAREN	int
;	O
default	O
:	O
ParseError	(*(struct(*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,int,int,array(union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))))),*(char))->(void)
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
,	O
"invalid character"	*(char)
)	O
;	O
state	int
=	O
STATE_INITIAL	int
;	O
}	O
}	O
break	O
;	O
case	O
STATE_WORD	int
:	O
case	O
STATE_NUMBER	int
:	O
if	O
(	O
isspace	(int)->(int)
(	O
c	*(struct(long,short,short,short,char,char))
)	O
||	O
c	*(struct(long,short,short,short,char,char))
==	O
','	O
||	O
c	*(struct(long,short,short,short,char,char))
==	O
'('	O
||	O
c	*(struct(long,short,short,short,char,char))
==	O
')'	O
)	O
{	O
token	array(char)
[	O
token_length	int
]	O
=	O
'\0'	O
;	O
unput	O
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
,	O
c	*(struct(long,short,short,short,char,char))
)	O
;	O
if	O
(	O
state	int
==	O
STATE_WORD	int
)	O
{	O
for	O
(	O
q	*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int)))
=	O
keywords	array(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int)))
;	O
q	*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int)))
->	O
word	*(char)
;	O
++	O
q	*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int)))
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
q	*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int)))
->	O
word	*(char)
,	O
token	array(char)
)	O
==	O
0	int
)	O
{	O
lex_value	union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))
.	O
kw	*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int)))
=	O
q	*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int)))
;	O
return	O
q	*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int)))
->	O
id	enum(int,int,int,int,int,int,int,int,int,int)
;	O
}	O
}	O
return	O
TOKEN_STRING	int
;	O
}	O
else	O
{	O
if	O
(	O
seen_dot	int
)	O
{	O
lex_value	union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))
.	O
double_value	double
=	O
atof	(*(char))->(double)
(	O
token	array(char)
)	O
;	O
return	O
TOKEN_DOUBLE	int
;	O
}	O
else	O
{	O
lex_value	union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))
.	O
long_value	long
=	O
atoi	(*(char))->(int)
(	O
token	array(char)
)	O
;	O
return	O
TOKEN_LONG	int
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
c	*(struct(long,short,short,short,char,char))
==	O
'.'	O
||	O
c	*(struct(long,short,short,short,char,char))
==	O
'e'	O
||	O
c	*(struct(long,short,short,short,char,char))
==	O
'E'	O
)	O
{	O
seen_dot	int
=	O
1	int
;	O
}	O
token	array(char)
[	O
token_length	int
++	O
]	O
=	O
c	*(struct(long,short,short,short,char,char))
;	O
}	O
break	O
;	O
case	O
STATE_STRING	int
:	O
switch	O
(	O
c	*(struct(long,short,short,short,char,char))
)	O
{	O
case	O
'"'	O
:	O
token	array(char)
[	O
token_length	int
]	O
=	O
'\0'	O
;	O
return	O
TOKEN_STRING	int
;	O
case	O
'\n'	O
:	O
ParseError	(*(struct(*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,int,int,array(union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))))),*(char))->(void)
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
,	O
"strings cannot span a line"	*(char)
)	O
;	O
unput	O
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
,	O
c	*(struct(long,short,short,short,char,char))
)	O
;	O
state	int
=	O
STATE_INITIAL	int
;	O
break	O
;	O
case	O
'\\'	O
:	O
switch	O
(	O
c	*(struct(long,short,short,short,char,char))
=	O
input	O
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
)	O
)	O
{	O
case	O
EOF	O
:	O
ParseError	(*(struct(*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,int,int,array(union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))))),*(char))->(void)
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
,	O
"Premature End-of-file"	*(char)
)	O
;	O
break	O
;	O
case	O
'n'	O
:	O
token	array(char)
[	O
token_length	int
++	O
]	O
=	O
'\n'	O
;	O
break	O
;	O
case	O
't'	O
:	O
token	array(char)
[	O
token_length	int
++	O
]	O
=	O
'\t'	O
;	O
break	O
;	O
default	O
:	O
token	array(char)
[	O
token_length	int
++	O
]	O
=	O
c	*(struct(long,short,short,short,char,char))
;	O
break	O
;	O
}	O
default	O
:	O
token	array(char)
[	O
token_length	int
++	O
]	O
=	O
c	*(struct(long,short,short,short,char,char))
;	O
break	O
;	O
}	O
break	O
;	O
case	O
STATE_RGB	int
:	O
while	O
(	O
isxdigit	(int)->(int)
(	O
c	*(struct(long,short,short,short,char,char))
)	O
)	O
{	O
token	array(char)
[	O
token_length	int
++	O
]	O
=	O
c	*(struct(long,short,short,short,char,char))
;	O
c	*(struct(long,short,short,short,char,char))
=	O
input	O
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
)	O
;	O
}	O
unput	O
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
,	O
c	*(struct(long,short,short,short,char,char))
)	O
;	O
token	array(char)
[	O
token_length	int
]	O
=	O
'\0'	O
;	O
state	int
=	O
STATE_INITIAL	int
;	O
return	O
TOKEN_RGB_VALUE	int
;	O
break	O
;	O
}	O
}	O
return	O
EndOfFile	int
;	O
}	O
static	O
field_id	enum(int,int,int,int,int,int,int,int,int,int)
NextToken	()->(enum(int,int,int,int,int,int,int,int,int,int))
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
)	O
struct	O
lex_record	struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),int,int,int,int,array(union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))))
*	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
;	O
{	O
field_id	enum(int,int,int,int,int,int,int,int,int,int)
t	enum(int,int,int,int,int,int,int,int,int,int)
;	O
t	enum(int,int,int,int,int,int,int,int,int,int)
=	O
NextTokenx	(*(struct(*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,int,int,array(union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))))))->(enum(int,int,int,int,int,int,int,int,int,int))
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
)	O
;	O
return	O
t	enum(int,int,int,int,int,int,int,int,int,int)
;	O
}	O
static	O
int	O
ParseColorInfo	(*(struct(*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,int,int,array(union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))))),int)->(int)
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
,	O
flag	int
)	O
struct	O
lex_record	struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),int,int,int,int,array(union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))))
*	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
;	O
int	O
flag	int
;	O
{	O
field_id	enum(int,int,int,int,int,int,int,int,int,int)
t	enum(int,int,int,int,int,int,int,int,int,int)
;	O
static	O
VPolygon	struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),double)
template	struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),double)
;	O
int	O
count	int
=	O
0	int
,	O
done	int
=	O
0	int
;	O
template	struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),double)
.	O
color	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
=	O
template	struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),double)
.	O
backColor	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
=	O
(	O
VColor	struct(*(char),short,short,*(struct(*(char),short,short,*(struct(*`,short,short,*`)))))
*	O
)	O
NULL	O
;	O
template	struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),double)
.	O
flags	short
=	O
0	int
;	O
template	struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),double)
.	O
assignedDepth	short
=	O
-	O
1	int
;	O
t	enum(int,int,int,int,int,int,int,int,int,int)
=	O
NextToken	()->(enum(int,int,int,int,int,int,int,int,int,int))
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
)	O
;	O
if	O
(	O
t	enum(int,int,int,int,int,int,int,int,int,int)
==	O
TOKEN_RGB_VALUE	int
||	O
t	enum(int,int,int,int,int,int,int,int,int,int)
==	O
TOKEN_STRING	int
)	O
{	O
template	struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),double)
.	O
color	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
=	O
VAllocDepthCueuedColor	(*(char),int)->(*(struct(*(char),short,short,*(struct(*`,short,short,*`)))))
(	O
token	array(char)
,	O
flag	int
)	O
;	O
}	O
else	O
if	O
(	O
t	enum(int,int,int,int,int,int,int,int,int,int)
==	O
TOKEN_LPAREN	int
)	O
{	O
template	struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),double)
.	O
flags	short
=	O
0	int
;	O
while	O
(	O
!	O
done	int
)	O
{	O
t	enum(int,int,int,int,int,int,int,int,int,int)
=	O
NextToken	()->(enum(int,int,int,int,int,int,int,int,int,int))
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
)	O
;	O
switch	O
(	O
t	enum(int,int,int,int,int,int,int,int,int,int)
)	O
{	O
case	O
TOKEN_RGB_VALUE	int
:	O
case	O
TOKEN_STRING	int
:	O
if	O
(	O
count	int
++	O
==	O
0	int
)	O
{	O
template	struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),double)
.	O
color	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
=	O
VAllocDepthCueuedColor	(*(char),int)->(*(struct(*(char),short,short,*(struct(*`,short,short,*`)))))
(	O
token	array(char)
,	O
flag	int
)	O
;	O
}	O
else	O
{	O
template	struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),double)
.	O
backColor	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
=	O
VAllocDepthCueuedColor	(*(char),int)->(*(struct(*(char),short,short,*(struct(*`,short,short,*`)))))
(	O
token	array(char)
,	O
flag	int
)	O
;	O
}	O
break	O
;	O
case	O
TOKEN_COMMA	int
:	O
break	O
;	O
case	O
TOKEN_CLIP	int
:	O
template	struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),double)
.	O
flags	short
|=	O
PolyClipBackface	int
;	O
break	O
;	O
case	O
TOKEN_RPAREN	int
:	O
done	int
=	O
1	int
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
}	O
else	O
{	O
Resync	(*(struct(*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,int,int,array(union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))))),int)->(void)
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
,	O
Nil	int
)	O
;	O
return	O
1	int
;	O
}	O
push_value	O
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
,	O
poly	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
,	O
&	O
template	struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),double)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
ParseVertex	(*(struct(*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,int,int,array(union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))))))->(int)
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
)	O
struct	O
lex_record	struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),int,int,int,int,array(union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))))
*	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
;	O
{	O
field_id	enum(int,int,int,int,int,int,int,int,int,int)
t	enum(int,int,int,int,int,int,int,int,int,int)
;	O
VPoint	struct(double,double,double)
pt	*(struct(double,double,double))
;	O
if	O
(	O
NextToken	()->(enum(int,int,int,int,int,int,int,int,int,int))
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
)	O
!=	O
TOKEN_LONG	int
)	O
{	O
}	O
t	enum(int,int,int,int,int,int,int,int,int,int)
=	O
NextToken	()->(enum(int,int,int,int,int,int,int,int,int,int))
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
)	O
;	O
if	O
(	O
t	enum(int,int,int,int,int,int,int,int,int,int)
==	O
TOKEN_DOUBLE	int
)	O
{	O
pt	*(struct(double,double,double))
.	O
x	double
=	O
lex_value	union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))
.	O
double_value	double
;	O
}	O
else	O
if	O
(	O
t	enum(int,int,int,int,int,int,int,int,int,int)
==	O
TOKEN_LONG	int
)	O
{	O
pt	*(struct(double,double,double))
.	O
x	double
=	O
lex_value	union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))
.	O
long_value	long
;	O
}	O
else	O
{	O
return	O
1	int
;	O
}	O
t	enum(int,int,int,int,int,int,int,int,int,int)
=	O
NextToken	()->(enum(int,int,int,int,int,int,int,int,int,int))
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
)	O
;	O
if	O
(	O
t	enum(int,int,int,int,int,int,int,int,int,int)
==	O
TOKEN_DOUBLE	int
)	O
{	O
pt	*(struct(double,double,double))
.	O
y	double
=	O
lex_value	union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))
.	O
double_value	double
;	O
}	O
else	O
if	O
(	O
t	enum(int,int,int,int,int,int,int,int,int,int)
==	O
TOKEN_LONG	int
)	O
{	O
pt	*(struct(double,double,double))
.	O
y	double
=	O
lex_value	union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))
.	O
long_value	long
;	O
}	O
else	O
{	O
return	O
1	int
;	O
}	O
t	enum(int,int,int,int,int,int,int,int,int,int)
=	O
NextToken	()->(enum(int,int,int,int,int,int,int,int,int,int))
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
)	O
;	O
if	O
(	O
t	enum(int,int,int,int,int,int,int,int,int,int)
==	O
TOKEN_DOUBLE	int
)	O
{	O
pt	*(struct(double,double,double))
.	O
z	double
=	O
lex_value	union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))
.	O
double_value	double
;	O
}	O
else	O
if	O
(	O
t	enum(int,int,int,int,int,int,int,int,int,int)
==	O
TOKEN_LONG	int
)	O
{	O
pt	*(struct(double,double,double))
.	O
z	double
=	O
lex_value	union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))
.	O
long_value	long
;	O
}	O
else	O
{	O
return	O
1	int
;	O
}	O
push_value	O
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
,	O
point	*(struct(double,double,double))
,	O
pt	*(struct(double,double,double))
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
ParsePolygon	(*(struct(*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,int,int,array(union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))))),*(struct(double,double,double)),*(struct(double,double,double)),int)->(int)
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
,	O
tmp	struct(double,double,double)
,	O
pts	*(struct(double,double,double))
,	O
flag	int
)	O
struct	O
lex_record	struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),int,int,int,int,array(union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))))
*	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
;	O
VPoint	struct(double,double,double)
*	O
tmp	struct(double,double,double)
;	O
VPoint	struct(double,double,double)
*	O
pts	*(struct(double,double,double))
;	O
int	O
flag	int
;	O
{	O
int	O
num_points	int
,	O
i	int
,	O
id	enum(int,int,int,int,int,int,int,int,int,int)
;	O
VPolygon	struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),double)
template	struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),double)
;	O
if	O
(	O
ParseColorInfo	(*(struct(*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,int,int,array(union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))))),int)->(int)
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
,	O
flag	int
)	O
!=	O
0	int
)	O
{	O
ParseError	(*(struct(*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,int,int,array(union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))))),*(char))->(void)
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
,	O
"invalid color specification"	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
template	struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),double)
=	O
*	O
(	O
pop_value	O
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
,	O
poly	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
)	O
)	O
;	O
if	O
(	O
NextToken	()->(enum(int,int,int,int,int,int,int,int,int,int))
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
)	O
!=	O
TOKEN_LONG	int
)	O
{	O
ParseError	(*(struct(*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,int,int,array(union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))))),*(char))->(void)
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
,	O
"invalid polygon vertex count"	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
num_points	int
=	O
lex_value	union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))
.	O
long_value	long
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
num_points	int
;	O
++	O
i	int
)	O
{	O
if	O
(	O
NextToken	()->(enum(int,int,int,int,int,int,int,int,int,int))
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
)	O
!=	O
TOKEN_LONG	int
)	O
{	O
ParseError	(*(struct(*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,int,int,array(union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))))),*(char))->(void)
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
,	O
"invalid polygon vertex"	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
id	enum(int,int,int,int,int,int,int,int,int,int)
=	O
lex_value	union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))
.	O
long_value	long
;	O
pts	*(struct(double,double,double))
[	O
i	int
]	O
=	O
tmp	struct(double,double,double)
[	O
id	enum(int,int,int,int,int,int,int,int,int,int)
-	O
1	int
]	O
;	O
}	O
push_value	O
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
,	O
poly	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
,	O
VCreatePolygonFromTemplate	(int,*(struct(double,double,double)),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))->(*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))
(	O
num_points	int
,	O
pts	*(struct(double,double,double))
,	O
&	O
template	struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),double)
)	O
)	O
;	O
return	O
0	int
;	O
}	O
VObject	struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct(double,double,double),*(struct`),*(struct`),*(struct`),double))),*(short))
*	O
VReadObject	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct`)),*(short))))
(	O
f	struct(*((*(struct),*(struct(*`,long,int,long,long,long,int,int)),int,int,int,*(char),int,int,int,int)->(*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)))),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)))->(int)),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)),int,int)->(long)),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)),int,int,long)->(int)),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)),int,int,int,int)->(*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)))),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)),long)->(int)))
)	O
FILE	struct
*	O
f	struct(*((*(struct),*(struct(*`,long,int,long,long,long,int,int)),int,int,int,*(char),int,int,int,int)->(*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)))),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)))->(int)),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)),int,int)->(long)),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)),int,int,long)->(int)),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)),int,int,int,int)->(*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)))),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)),long)->(int)))
;	O
{	O
return	O
VReadDepthCueuedObject	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)->(*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct`)),*(short))))
(	O
f	struct(*((*(struct),*(struct(*`,long,int,long,long,long,int,int)),int,int,int,*(char),int,int,int,int)->(*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)))),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)))->(int)),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)),int,int)->(long)),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)),int,int,long)->(int)),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)),int,int,int,int)->(*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)))),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)),long)->(int)))
,	O
0	int
)	O
;	O
}	O
VObject	struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct(double,double,double),*(struct`),*(struct`),*(struct`),double))),*(short))
*	O
VReadDepthCueuedObject	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)->(*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct`)),*(short))))
(	O
f	struct(*((*(struct),*(struct(*`,long,int,long,long,long,int,int)),int,int,int,*(char),int,int,int,int)->(*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)))),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)))->(int)),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)),int,int)->(long)),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)),int,int,long)->(int)),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)),int,int,int,int)->(*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)))),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)),long)->(int)))
,	O
flag	int
)	O
FILE	struct
*	O
f	struct(*((*(struct),*(struct(*`,long,int,long,long,long,int,int)),int,int,int,*(char),int,int,int,int)->(*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)))),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)))->(int)),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)),int,int)->(long)),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)),int,int,long)->(int)),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)),int,int,int,int)->(*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)))),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)),long)->(int)))
;	O
int	O
flag	int
;	O
{	O
char	O
*	O
name	*(char)
;	O
int	O
num_points	int
,	O
num_polys	int
,	O
i	int
;	O
VPoint	struct(double,double,double)
*	O
tmp_points	*(struct(double,double,double))
,	O
*	O
tmp_points1	*(struct(double,double,double))
;	O
VPolygon	struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),double)
*	O
*	O
polygons	*(*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))
;	O
VObject	struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct(double,double,double),*(struct`),*(struct`),*(struct`),double))),*(short))
*	O
object	*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct`,*`,*`,*`,double))),*(short)))
;	O
struct	O
lex_record	struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),int,int,int,int,array(union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))))
lr	struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int,int,int,int,array(union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))))
,	O
*	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
;	O
char	O
line	array(char)
[	O
256	int
]	O
;	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
=	O
&	O
lr	struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int,int,int,int,array(union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))))
;	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
f	struct(*((*(struct),*(struct(*`,long,int,long,long,long,int,int)),int,int,int,*(char),int,int,int,int)->(*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)))),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)))->(int)),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)),int,int)->(long)),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)),int,int,long)->(int)),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)),int,int,int,int)->(*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)))),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)),long)->(int)))
=	O
f	struct(*((*(struct),*(struct(*`,long,int,long,long,long,int,int)),int,int,int,*(char),int,int,int,int)->(*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)))),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)))->(int)),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)),int,int)->(long)),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)),int,int,long)->(int)),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)),int,int,int,int)->(*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)))),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)),long)->(int)))
;	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
lineno	int
=	O
1	int
;	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
lookahead_valid	int
=	O
0	int
;	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
stack_top	int
=	O
0	int
;	O
fgets	(*(char),int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(char))
(	O
line	array(char)
,	O
sizeof	O
(	O
line	array(char)
)	O
,	O
f	struct(*((*(struct),*(struct(*`,long,int,long,long,long,int,int)),int,int,int,*(char),int,int,int,int)->(*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)))),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)))->(int)),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)),int,int)->(long)),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)),int,int,long)->(int)),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)),int,int,int,int)->(*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)))),*((*(struct(int,int,int,int,*`,int,int,int,int,int,int,int,long,long,long,*`,struct`)),long)->(int)))
)	O
;	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
lineno	int
=	O
2	int
;	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
name	*(char)
=	O
line	array(char)
;	O
name	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
line	array(char)
)	O
;	O
if	O
(	O
NextToken	()->(enum(int,int,int,int,int,int,int,int,int,int))
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
)	O
!=	O
TOKEN_LONG	int
)	O
{	O
return	O
(	O
VObject	struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct(double,double,double),*(struct`),*(struct`),*(struct`),double))),*(short))
*	O
)	O
NULL	O
;	O
}	O
num_points	int
=	O
lex_value	union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))
.	O
long_value	long
;	O
if	O
(	O
NextToken	()->(enum(int,int,int,int,int,int,int,int,int,int))
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
)	O
!=	O
TOKEN_LONG	int
)	O
{	O
return	O
(	O
VObject	struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct(double,double,double),*(struct`),*(struct`),*(struct`),double))),*(short))
*	O
)	O
NULL	O
;	O
}	O
num_polys	int
=	O
lex_value	union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))
.	O
long_value	long
;	O
tmp_points	*(struct(double,double,double))
=	O
(	O
VPoint	struct(double,double,double)
*	O
)	O
Vmalloc	(int)->(*(char))
(	O
num_points	int
*	O
2	int
*	O
sizeof	O
(	O
VPoint	struct(double,double,double)
)	O
)	O
;	O
tmp_points1	*(struct(double,double,double))
=	O
&	O
tmp_points	*(struct(double,double,double))
[	O
num_points	int
]	O
;	O
polygons	*(*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))
=	O
(	O
VPolygon	struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),double)
*	O
*	O
)	O
Vmalloc	(int)->(*(char))
(	O
num_polys	int
*	O
sizeof	O
(	O
VPolygon	struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),double)
*	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
num_points	int
;	O
++	O
i	int
)	O
{	O
if	O
(	O
ParseVertex	(*(struct(*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,int,int,array(union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))))))->(int)
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
)	O
!=	O
0	int
)	O
{	O
return	O
(	O
VObject	struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct(double,double,double),*(struct`),*(struct`),*(struct`),double))),*(short))
*	O
)	O
NULL	O
;	O
}	O
tmp_points	*(struct(double,double,double))
[	O
i	int
]	O
=	O
pop_value	O
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
,	O
point	*(struct(double,double,double))
)	O
;	O
tmp_points	*(struct(double,double,double))
[	O
i	int
]	O
.	O
x	double
*=	O
scale	int
.	O
x	double
;	O
tmp_points	*(struct(double,double,double))
[	O
i	int
]	O
.	O
y	double
*=	O
scale	int
.	O
y	double
;	O
tmp_points	*(struct(double,double,double))
[	O
i	int
]	O
.	O
z	double
*=	O
scale	int
.	O
z	double
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
num_polys	int
;	O
++	O
i	int
)	O
{	O
if	O
(	O
ParsePolygon	(*(struct(*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,int,int,array(union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))))),*(struct(double,double,double)),*(struct(double,double,double)),int)->(int)
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
,	O
tmp_points	*(struct(double,double,double))
,	O
tmp_points1	*(struct(double,double,double))
,	O
flag	int
)	O
!=	O
0	int
)	O
{	O
ParseError	(*(struct(*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,int,int,array(union(*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int))),double,*(char),long,struct(double,double,double),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))))),*(char))->(void)
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
,	O
"invalid polygon specification"	*(char)
)	O
;	O
return	O
(	O
VObject	struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct(double,double,double),*(struct`),*(struct`),*(struct`),double))),*(short))
*	O
)	O
NULL	O
;	O
}	O
polygons	*(*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))
[	O
i	int
]	O
=	O
pop_value	O
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
,	O
poly	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
)	O
;	O
}	O
object	*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct`,*`,*`,*`,double))),*(short)))
=	O
(	O
VObject	struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct(double,double,double),*(struct`),*(struct`),*(struct`),double))),*(short))
*	O
)	O
Vmalloc	(int)->(*(char))
(	O
sizeof	O
(	O
VObject	struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct(double,double,double),*(struct`),*(struct`),*(struct`),double))),*(short))
)	O
)	O
;	O
object	*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct`,*`,*`,*`,double))),*(short)))
->	O
name	*(char)
=	O
name	*(char)
;	O
object	*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct`,*`,*`,*`,double))),*(short)))
->	O
numPolys	int
=	O
num_polys	int
;	O
object	*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct`,*`,*`,*`,double))),*(short)))
->	O
polygon	*(*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))
=	O
polygons	*(*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))
;	O
object	*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct`,*`,*`,*`,double))),*(short)))
->	O
order	*(short)
=	O
(	O
unsigned	O
short	O
*	O
)	O
NULL	O
;	O
VComputeObjectExtent	(*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct`)),*(short))))->(void)
(	O
object	*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct`,*`,*`,*`,double))),*(short)))
)	O
;	O
if	O
(	O
VObjectNeedsOrdering	(*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct`)),*(short))))->(int)
(	O
object	*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct`,*`,*`,*`,double))),*(short)))
)	O
)	O
{	O
VComputePolygonOrdering	(*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct`)),*(short))))->(void)
(	O
object	*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct`,*`,*`,*`,double))),*(short)))
)	O
;	O
}	O
free	(*(void))->(void)
(	O
(	O
char	O
*	O
)	O
tmp_points	*(struct(double,double,double))
)	O
;	O
return	O
object	*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct`,*`,*`,*`,double))),*(short)))
;	O
}	O
