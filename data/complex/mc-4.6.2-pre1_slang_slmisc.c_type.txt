char	O
*	O
SLmake_string	(*(char))->(*(char))
(	O
char	O
*	O
str	*(char)
)	O
{	O
return	O
SLmake_nstring	(*(char),int)->(*(char))
(	O
str	*(char)
,	O
strlen	(*(char))->(long)
(	O
str	*(char)
)	O
)	O
;	O
}	O
char	O
*	O
SLmake_nstring	(*(char),int)->(*(char))
(	O
char	O
*	O
str	*(char)
,	O
unsigned	O
int	O
n	int
)	O
{	O
char	O
*	O
ptr	*(*(void))
;	O
if	O
(	O
NULL	O
==	O
(	O
ptr	*(*(void))
=	O
SLmalloc	O
(	O
n	int
+	O
1	int
)	O
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
SLMEMCPY	O
(	O
ptr	*(*(void))
,	O
str	*(char)
,	O
n	int
)	O
;	O
ptr	*(*(void))
[	O
n	int
]	O
=	O
0	int
;	O
return	O
(	O
ptr	*(*(void))
)	O
;	O
}	O
char	O
*	O
_pSLexpand_escaped_char	(*(char),*(int),*(int))->(*(char))
(	O
char	O
*	O
p	*(char)
,	O
SLwchar_Type	int
*	O
ch	int
,	O
int	O
*	O
isunicodep	*(int)
)	O
{	O
int	O
i	array(int)
=	O
0	int
;	O
SLwchar_Type	int
max	*(char)
=	O
0	int
;	O
SLwchar_Type	int
num	int
,	O
base	int
=	O
0	int
;	O
SLwchar_Type	int
ch1	int
;	O
int	O
isunicode	int
;	O
int	O
needs_brace	int
;	O
ch1	int
=	O
*	O
p	*(char)
++	O
;	O
isunicode	int
=	O
0	int
;	O
needs_brace	int
=	O
0	int
;	O
switch	O
(	O
ch1	int
)	O
{	O
default	O
:	O
num	int
=	O
ch1	int
;	O
break	O
;	O
case	O
'n'	O
:	O
num	int
=	O
'\n'	O
;	O
break	O
;	O
case	O
't'	O
:	O
num	int
=	O
'\t'	O
;	O
break	O
;	O
case	O
'v'	O
:	O
num	int
=	O
'\v'	O
;	O
break	O
;	O
case	O
'b'	O
:	O
num	int
=	O
'\b'	O
;	O
break	O
;	O
case	O
'r'	O
:	O
num	int
=	O
'\r'	O
;	O
break	O
;	O
case	O
'f'	O
:	O
num	int
=	O
'\f'	O
;	O
break	O
;	O
case	O
'E'	O
:	O
case	O
'e'	O
:	O
num	int
=	O
27	int
;	O
break	O
;	O
case	O
'a'	O
:	O
num	int
=	O
7	int
;	O
break	O
;	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
max	*(char)
=	O
'7'	O
;	O
base	int
=	O
8	int
;	O
i	array(int)
=	O
2	int
;	O
num	int
=	O
ch1	int
-	O
'0'	O
;	O
break	O
;	O
case	O
'd'	O
:	O
base	int
=	O
10	int
;	O
i	array(int)
=	O
3	int
;	O
max	*(char)
=	O
'9'	O
;	O
num	int
=	O
0	int
;	O
break	O
;	O
case	O
'u'	O
:	O
isunicode	int
=	O
1	int
;	O
case	O
'x'	O
:	O
base	int
=	O
16	int
;	O
max	*(char)
=	O
'9'	O
;	O
i	array(int)
=	O
2	int
;	O
num	int
=	O
0	int
;	O
if	O
(	O
*	O
p	*(char)
==	O
'{'	O
)	O
{	O
p	*(char)
++	O
;	O
i	array(int)
=	O
0	int
;	O
while	O
(	O
p	*(char)
[	O
i	array(int)
]	O
&&	O
(	O
p	*(char)
[	O
i	array(int)
]	O
!=	O
'}'	O
)	O
)	O
i	array(int)
++	O
;	O
if	O
(	O
p	*(char)
[	O
i	array(int)
]	O
!=	O
'}'	O
)	O
{	O
SLang_verror	(int,*(char))->(void)
(	O
SL_SYNTAX_ERROR	O
,	O
"Escaped character missing closing }."	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
isunicode	int
==	O
0	int
)	O
isunicode	int
=	O
_pSLinterp_UTF8_Mode	int
||	O
(	O
i	array(int)
>	O
2	int
)	O
;	O
needs_brace	int
=	O
1	int
;	O
}	O
break	O
;	O
}	O
while	O
(	O
i	array(int)
)	O
{	O
ch1	int
=	O
*	O
p	*(char)
;	O
i	array(int)
--	O
;	O
if	O
(	O
(	O
ch1	int
<=	O
max	*(char)
)	O
&&	O
(	O
ch1	int
>=	O
'0'	O
)	O
)	O
{	O
num	int
=	O
base	int
*	O
num	int
+	O
(	O
ch1	int
-	O
'0'	O
)	O
;	O
}	O
else	O
if	O
(	O
base	int
==	O
16	int
)	O
{	O
ch1	int
|=	O
0x20	int
;	O
if	O
(	O
(	O
ch1	int
<	O
'a'	O
)	O
||	O
(	O
(	O
ch1	int
>	O
'f'	O
)	O
)	O
)	O
break	O
;	O
num	int
=	O
base	int
*	O
num	int
+	O
10	int
+	O
(	O
ch1	int
-	O
'a'	O
)	O
;	O
}	O
else	O
break	O
;	O
p	*(char)
++	O
;	O
}	O
if	O
(	O
needs_brace	int
)	O
{	O
if	O
(	O
*	O
p	*(char)
!=	O
'}'	O
)	O
{	O
SLang_verror	(int,*(char))->(void)
(	O
SL_SYNTAX_ERROR	O
,	O
"Malformed escaped character."	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
p	*(char)
++	O
;	O
}	O
if	O
(	O
isunicodep	*(int)
!=	O
NULL	O
)	O
*	O
isunicodep	*(int)
=	O
isunicode	int
;	O
*	O
ch	int
=	O
num	int
;	O
return	O
p	*(char)
;	O
}	O
