int	O
expand_undefined	O
;	O
static	O
inline	O
int	O
d2n	O
(	O
int	O
d	O
)	O
{	O
static	O
char	O
dig	O
[	O
]	O
=	O
"0123456789"	*(char)
;	O
return	O
strchr	(*(char),int)->(*(char))
(	O
dig	O
,	O
d	O
)	O
-	O
dig	O
;	O
}	O
static	O
int	O
refno	O
(	O
char	O
const	O
*	O
input	O
,	O
int	O
*	O
len	long
)	O
{	O
if	O
(	O
c_isdigit	(int)->(bool)
(	O
input	O
[	O
1	int
]	O
)	O
)	O
{	O
*	O
len	long
=	O
2	int
;	O
return	O
d2n	O
(	O
input	O
[	O
1	int
]	O
)	O
;	O
}	O
else	O
if	O
(	O
input	O
[	O
1	int
]	O
==	O
'{'	O
)	O
{	O
char	O
const	O
*	O
p	*(void)
=	O
input	O
+	O
1	int
;	O
int	O
n	long
=	O
0	int
;	O
while	O
(	O
*	O
++	O
p	*(void)
&&	O
c_isdigit	(int)->(bool)
(	O
*	O
p	*(void)
)	O
)	O
n	long
=	O
n	long
*	O
10	int
+	O
d2n	O
(	O
*	O
p	*(void)
)	O
;	O
if	O
(	O
*	O
p	*(void)
==	O
'}'	O
&&	O
p	*(void)
>	O
&	O
input	O
[	O
1	int
]	O
)	O
{	O
*	O
len	long
=	O
p	*(void)
-	O
input	O
+	O
1	int
;	O
return	O
n	long
;	O
}	O
}	O
return	O
-	O
1	int
;	O
}	O
static	O
char	O
*	O
expandref	O
(	O
char	O
const	O
*	O
input	O
,	O
struct	O
rush_backref	O
*	O
backref	O
,	O
char	O
*	O
pfx	O
)	O
{	O
char	O
*	O
output	O
;	O
size_t	long
output_len	O
=	O
strlen	(*(char))->(long)
(	O
input	O
)	O
+	O
1	int
;	O
size_t	long
istart	O
=	O
0	int
,	O
ostart	O
=	O
0	int
;	O
output	O
=	O
xmalloc	(long)->(*(void))
(	O
output_len	O
)	O
;	O
while	O
(	O
input	O
[	O
istart	O
]	O
)	O
{	O
size_t	long
len	long
=	O
strcspn	(*(char),*(char))->(long)
(	O
input	O
+	O
istart	O
,	O
pfx	O
)	O
;	O
int	O
n	long
,	O
i	O
;	O
while	O
(	O
ostart	O
+	O
len	long
>=	O
output_len	O
)	O
output	O
=	O
x2realloc	(*(void),*(long))->(*(void))
(	O
output	O
,	O
&	O
output_len	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
output	O
+	O
ostart	O
,	O
input	O
+	O
istart	O
,	O
len	long
)	O
;	O
ostart	O
+=	O
len	long
;	O
istart	O
+=	O
len	long
;	O
if	O
(	O
!	O
input	O
[	O
istart	O
]	O
)	O
break	O
;	O
else	O
if	O
(	O
istart	O
>	O
1	int
&&	O
input	O
[	O
istart	O
-	O
1	int
]	O
==	O
'\\'	O
)	O
{	O
output	O
[	O
ostart	O
-	O
1	int
]	O
=	O
input	O
[	O
istart	O
]	O
;	O
istart	O
++	O
;	O
}	O
else	O
if	O
(	O
(	O
n	long
=	O
refno	O
(	O
input	O
+	O
istart	O
,	O
&	O
i	O
)	O
)	O
>=	O
0	int
&&	O
n	long
<	O
backref	O
->	O
nmatch	O
)	O
{	O
len	long
=	O
backref	O
->	O
match	O
[	O
n	long
]	O
.	O
rm_eo	long
-	O
backref	O
->	O
match	O
[	O
n	long
]	O
.	O
rm_so	long
;	O
while	O
(	O
ostart	O
+	O
len	long
>=	O
output_len	O
)	O
output	O
=	O
x2realloc	(*(void),*(long))->(*(void))
(	O
output	O
,	O
&	O
output_len	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
output	O
+	O
ostart	O
,	O
backref	O
->	O
subject	O
+	O
backref	O
->	O
match	O
[	O
n	long
]	O
.	O
rm_so	long
,	O
len	long
)	O
;	O
ostart	O
+=	O
len	long
;	O
istart	O
+=	O
i	O
;	O
}	O
else	O
{	O
if	O
(	O
ostart	O
+	O
2	int
>=	O
output_len	O
)	O
output	O
=	O
x2realloc	(*(void),*(long))->(*(void))
(	O
output	O
,	O
&	O
output_len	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
output	O
+	O
ostart	O
,	O
input	O
+	O
istart	O
,	O
2	int
)	O
;	O
ostart	O
+=	O
2	int
;	O
istart	O
+=	O
2	int
;	O
}	O
}	O
output	O
[	O
ostart	O
]	O
=	O
0	int
;	O
return	O
xrealloc	(*(void),long)->(*(void))
(	O
output	O
,	O
ostart	O
+	O
1	int
)	O
;	O
}	O
static	O
const	O
char	O
*	O
var_uid	O
(	O
struct	O
rush_request	O
*	O
req	O
)	O
{	O
static	O
char	O
buf	O
[	O
INT_BUFSIZE_BOUND	O
(	O
uintmax_t	long
)	O
]	O
;	O
return	O
umaxtostr	(long,*(char))->(*(char))
(	O
req	O
->	O
pw	O
->	O
pw_uid	int
,	O
buf	O
)	O
;	O
}	O
static	O
const	O
char	O
*	O
var_user	O
(	O
struct	O
rush_request	O
*	O
req	O
)	O
{	O
return	O
req	O
->	O
pw	O
->	O
pw_name	*(char)
;	O
}	O
static	O
const	O
char	O
*	O
var_gid	O
(	O
struct	O
rush_request	O
*	O
req	O
)	O
{	O
static	O
char	O
buf	O
[	O
INT_BUFSIZE_BOUND	O
(	O
uintmax_t	long
)	O
]	O
;	O
return	O
umaxtostr	(long,*(char))->(*(char))
(	O
req	O
->	O
pw	O
->	O
pw_gid	int
,	O
buf	O
)	O
;	O
}	O
static	O
const	O
char	O
*	O
var_group	O
(	O
struct	O
rush_request	O
*	O
req	O
)	O
{	O
struct	O
group	struct(*(char),*(char),int,*(*(char)))
*	O
grp	O
=	O
getgrgid	(int)->(*(struct(*(char),*(char),int,*(*(char)))))
(	O
req	O
->	O
pw	O
->	O
pw_gid	int
)	O
;	O
return	O
grp	O
?	O
grp	O
->	O
gr_name	*(char)
:	O
var_gid	O
(	O
req	O
)	O
;	O
}	O
static	O
const	O
char	O
*	O
var_home	O
(	O
struct	O
rush_request	O
*	O
req	O
)	O
{	O
return	O
req	O
->	O
pw	O
->	O
pw_dir	*(char)
;	O
}	O
static	O
const	O
char	O
*	O
var_gecos	O
(	O
struct	O
rush_request	O
*	O
req	O
)	O
{	O
return	O
req	O
->	O
pw	O
->	O
pw_gecos	*(char)
;	O
}	O
static	O
const	O
char	O
*	O
var_program	O
(	O
struct	O
rush_request	O
*	O
req	O
)	O
{	O
return	O
PROGFILE	O
(	O
req	O
)	O
;	O
}	O
static	O
const	O
char	O
*	O
var_command	O
(	O
struct	O
rush_request	O
*	O
req	O
)	O
{	O
return	O
req	O
->	O
cmdline	O
;	O
}	O
struct	O
vardef	O
{	O
char	O
*	O
name	*(char)
;	O
const	O
char	O
*	O
(	O
*	O
expand	O
)	O
(	O
struct	O
rush_request	O
*	O
)	O
;	O
enum	O
transform_target_type	enum(int,int,int,int,int,int)
target	struct(enum(int,int,int,int,int,int),union(*(char),struct(int,int)))
;	O
}	O
;	O
static	O
struct	O
vardef	O
request_vars	O
[	O
]	O
=	O
{	O
{	O
"user"	*(char)
,	O
var_user	O
,	O
target_readonly	int
}	O
,	O
{	O
"group"	*(char)
,	O
var_group	O
,	O
target_readonly	int
}	O
,	O
{	O
"uid"	*(char)
,	O
var_uid	O
,	O
target_readonly	int
}	O
,	O
{	O
"gid"	*(char)
,	O
var_gid	O
,	O
target_readonly	int
}	O
,	O
{	O
"home"	*(char)
,	O
var_home	O
,	O
target_readonly	int
}	O
,	O
{	O
"gecos"	*(char)
,	O
var_gecos	O
,	O
target_readonly	int
}	O
,	O
{	O
"program"	*(char)
,	O
var_program	O
,	O
target_program	int
}	O
,	O
{	O
"command"	*(char)
,	O
var_command	O
,	O
target_command	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
struct	O
vardef	O
const	O
*	O
find_request_var	O
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
struct	O
vardef	O
*	O
vd	O
;	O
for	O
(	O
vd	O
=	O
request_vars	O
;	O
vd	O
->	O
name	*(char)
;	O
vd	O
++	O
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
vd	O
->	O
name	*(char)
,	O
name	*(char)
)	O
==	O
0	int
)	O
return	O
vd	O
;	O
}	O
return	O
NULL	O
;	O
}	O
enum	O
transform_target_type	enum(int,int,int,int,int,int)
rush_variable_target	O
(	O
char	O
const	O
*	O
varname	O
)	O
{	O
struct	O
vardef	O
const	O
*	O
vd	O
=	O
find_request_var	O
(	O
varname	O
)	O
;	O
return	O
vd	O
?	O
vd	O
->	O
target	struct(enum(int,int,int,int,int,int),union(*(char),struct(int,int)))
:	O
target_var	int
;	O
}	O
static	O
char	O
*	O
*	O
find_user_varptr	O
(	O
struct	O
rush_request	O
*	O
req	O
,	O
char	O
const	O
*	O
var	*(char)
,	O
size_t	long
len	long
)	O
{	O
size_t	long
i	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
req	O
->	O
var_count	O
;	O
i	O
+=	O
2	int
)	O
if	O
(	O
strlen	(*(char))->(long)
(	O
req	O
->	O
var_kv	O
[	O
i	O
]	O
)	O
==	O
len	long
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
req	O
->	O
var_kv	O
[	O
i	O
]	O
,	O
var	*(char)
,	O
len	long
)	O
==	O
0	int
)	O
return	O
&	O
req	O
->	O
var_kv	O
[	O
i	O
+	O
1	int
]	O
;	O
return	O
NULL	O
;	O
}	O
char	O
*	O
*	O
rush_getvarptr	O
(	O
struct	O
rush_request	O
*	O
req	O
,	O
char	O
const	O
*	O
varname	O
)	O
{	O
if	O
(	O
req	O
->	O
var_kv	O
)	O
{	O
char	O
*	O
*	O
ret	*(*(char))
=	O
find_user_varptr	O
(	O
req	O
,	O
varname	O
,	O
strlen	(*(char))->(long)
(	O
varname	O
)	O
)	O
;	O
if	O
(	O
ret	*(*(char))
)	O
return	O
ret	*(*(char))
;	O
}	O
while	O
(	O
req	O
->	O
var_count	O
+	O
3	int
>=	O
req	O
->	O
var_max	O
)	O
req	O
->	O
var_kv	O
=	O
x2nrealloc	(*(void),*(long),long)->(*(void))
(	O
req	O
->	O
var_kv	O
,	O
&	O
req	O
->	O
var_max	O
,	O
sizeof	O
(	O
req	O
->	O
var_kv	O
[	O
0	int
]	O
)	O
)	O
;	O
req	O
->	O
var_kv	O
[	O
req	O
->	O
var_count	O
++	O
]	O
=	O
xstrdup	(*(char))->(*(char))
(	O
varname	O
)	O
;	O
req	O
->	O
var_kv	O
[	O
req	O
->	O
var_count	O
++	O
]	O
=	O
NULL	O
;	O
req	O
->	O
var_kv	O
[	O
req	O
->	O
var_count	O
]	O
=	O
NULL	O
;	O
return	O
&	O
req	O
->	O
var_kv	O
[	O
req	O
->	O
var_count	O
-	O
1	int
]	O
;	O
}	O
void	O
rush_request_delvar	O
(	O
struct	O
rush_request	O
*	O
req	O
,	O
char	O
const	O
*	O
varname	O
)	O
{	O
size_t	long
i	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
req	O
->	O
var_count	O
;	O
i	O
+=	O
2	int
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
req	O
->	O
var_kv	O
[	O
i	O
]	O
,	O
varname	O
)	O
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
req	O
->	O
var_kv	O
[	O
i	O
]	O
)	O
;	O
free	(*(void))->(void)
(	O
req	O
->	O
var_kv	O
[	O
i	O
+	O
1	int
]	O
)	O
;	O
memmove	(*(void),*(void),long)->(*(void))
(	O
req	O
->	O
var_kv	O
+	O
i	O
,	O
req	O
->	O
var_kv	O
+	O
i	O
+	O
2	int
,	O
(	O
req	O
->	O
var_count	O
-	O
(	O
i	O
+	O
2	int
)	O
+	O
1	int
)	O
*	O
sizeof	O
req	O
->	O
var_kv	O
[	O
0	int
]	O
)	O
;	O
req	O
->	O
var_count	O
-=	O
2	int
;	O
break	O
;	O
}	O
}	O
}	O
static	O
int	O
getvar	O
(	O
char	O
*	O
*	O
ret	*(*(char))
,	O
const	O
char	O
*	O
var	*(char)
,	O
size_t	long
len	long
,	O
void	O
*	O
clos	*(void)
)	O
{	O
struct	O
rush_request	O
*	O
req	O
=	O
clos	*(void)
;	O
const	O
char	O
*	O
s	long
=	O
NULL	O
;	O
char	O
*	O
p	*(void)
;	O
struct	O
vardef	O
*	O
vd	O
;	O
for	O
(	O
vd	O
=	O
request_vars	O
;	O
vd	O
->	O
name	*(char)
;	O
vd	O
++	O
)	O
{	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
vd	O
->	O
name	*(char)
,	O
var	*(char)
,	O
len	long
)	O
==	O
0	int
)	O
{	O
s	long
=	O
vd	O
->	O
expand	O
(	O
clos	*(void)
)	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
!	O
s	long
&&	O
req	O
->	O
var_kv	O
)	O
{	O
char	O
*	O
*	O
ptr	O
=	O
find_user_varptr	O
(	O
req	O
,	O
var	*(char)
,	O
len	long
)	O
;	O
if	O
(	O
ptr	O
)	O
s	long
=	O
*	O
ptr	O
;	O
}	O
if	O
(	O
!	O
s	long
)	O
return	O
WRDSE_UNDEF	O
;	O
p	*(void)
=	O
strdup	(*(char))->(*(char))
(	O
s	long
)	O
;	O
if	O
(	O
!	O
p	*(void)
)	O
return	O
WRDSE_NOSPACE	O
;	O
*	O
ret	*(*(char))
=	O
p	*(void)
;	O
return	O
WRDSE_OK	O
;	O
}	O
void	O
rush_ws_error	O
(	O
const	O
char	O
*	O
fmt	*(char)
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
ap	O
;	O
va_start	O
(	O
ap	O
,	O
fmt	*(char)
)	O
;	O
vlogmsg	O
(	O
LOG_ERR	O
,	O
fmt	*(char)
,	O
ap	O
)	O
;	O
va_end	O
(	O
ap	O
)	O
;	O
}	O
char	O
*	O
rush_expand_string	O
(	O
const	O
char	O
*	O
string	O
,	O
struct	O
rush_request	O
*	O
req	O
)	O
{	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
;	O
int	O
wsflags	O
=	O
WRDSF_NOSPLIT	O
|	O
WRDSF_NOCMD	O
|	O
(	O
expand_undefined	O
?	O
0	int
:	O
WRDSF_UNDEF	O
)	O
|	O
WRDSF_ENV	O
|	O
WRDSF_GETVAR	O
|	O
WRDSF_CLOSURE	O
|	O
WRDSF_ERROR	O
|	O
WRDSF_OPTIONS	O
;	O
char	O
*	O
result	O
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_getvar	*((*(*(char)),*(char),long,*(void))->(int))
=	O
getvar	O
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_closure	*(void)
=	O
req	O
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_paramv	*(*(char))
=	O
(	O
char	O
const	O
*	O
*	O
)	O
req	O
->	O
argv	*(*(char))
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_paramc	long
=	O
req	O
->	O
argc	int
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_error	*((*(char))->(void))
=	O
rush_ws_error	O
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_options	int
=	O
WRDSO_BSKEEP_QUOTE	O
|	O
WRDSO_NOCMDSPLIT	O
|	O
WRDSO_PARAMV	O
|	O
WRDSO_PARAM_NEGIDX	O
|	O
WRDSO_GETVARPREF	O
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_env	*(*(char))
=	O
(	O
char	O
const	O
*	O
*	O
)	O
req	O
->	O
env	O
;	O
result	O
=	O
expandref	O
(	O
string	O
,	O
&	O
req	O
->	O
backref	O
[	O
req	O
->	O
backref_cur	O
]	O
,	O
"%"	*(char)
)	O
;	O
switch	O
(	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
(	O
result	O
,	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
wsflags	O
)	O
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
WRDSE_UNDEF	O
:	O
die	O
(	O
config_error	int
,	O
&	O
req	O
->	O
i18n	O
,	O
"%s: %s"	*(char)
,	O
wordsplit_strerror	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(*(char))
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
,	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_errctx	*(char)
)	O
;	O
break	O
;	O
default	O
:	O
die	O
(	O
system_error	int
,	O
&	O
req	O
->	O
i18n	O
,	O
"%s"	*(char)
,	O
wordsplit_strerror	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(*(char))
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
)	O
;	O
}	O
free	(*(void))->(void)
(	O
result	O
)	O
;	O
result	O
=	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordv	*(*(char))
[	O
0	int
]	O
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordv	*(*(char))
[	O
0	int
]	O
=	O
NULL	O
;	O
if	O
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_envbuf	*(*(char))
)	O
{	O
size_t	long
i	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
req	O
->	O
env_count	O
;	O
i	O
++	O
)	O
free	(*(void))->(void)
(	O
req	O
->	O
env	O
[	O
i	O
]	O
)	O
;	O
req	O
->	O
env_count	O
=	O
0	int
;	O
if	O
(	O
req	O
->	O
env_max	O
<	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_envidx	long
+	O
1	int
)	O
{	O
req	O
->	O
env	O
=	O
xrealloc	(*(void),long)->(*(void))
(	O
req	O
->	O
env	O
,	O
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_envidx	long
+	O
1	int
)	O
*	O
sizeof	O
(	O
req	O
->	O
env	O
[	O
0	int
]	O
)	O
)	O
;	O
req	O
->	O
env_max	O
=	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_envidx	long
+	O
1	int
;	O
}	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_envidx	long
;	O
i	O
++	O
)	O
{	O
size_t	long
len	long
=	O
strcspn	(*(char),*(char))->(long)
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_envbuf	*(*(char))
[	O
i	O
]	O
,	O
"="	*(char)
)	O
;	O
char	O
*	O
*	O
ptr	O
=	O
find_user_varptr	O
(	O
req	O
,	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_envbuf	*(*(char))
[	O
i	O
]	O
,	O
len	long
)	O
;	O
if	O
(	O
ptr	O
)	O
{	O
free	(*(void))->(void)
(	O
*	O
ptr	O
)	O
;	O
*	O
ptr	O
=	O
xstrdup	(*(char))->(*(char))
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_envbuf	*(*(char))
[	O
i	O
]	O
+	O
len	long
+	O
1	int
)	O
;	O
free	(*(void))->(void)
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_envbuf	*(*(char))
[	O
i	O
]	O
)	O
;	O
}	O
else	O
{	O
req	O
->	O
env	O
[	O
req	O
->	O
env_count	O
++	O
]	O
=	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_envbuf	*(*(char))
[	O
i	O
]	O
;	O
}	O
}	O
req	O
->	O
env	O
[	O
req	O
->	O
env_count	O
]	O
=	O
NULL	O
;	O
free	(*(void))->(void)
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_envbuf	*(*(char))
)	O
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_envbuf	*(*(char))
=	O
NULL	O
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_envidx	long
=	O
0	int
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_envsiz	long
=	O
0	int
;	O
}	O
wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
return	O
result	O
;	O
}	O
char	O
*	O
map_string	O
(	O
struct	O
rush_map	struct(*(char),*(char),*(char),int,int,*(char))
*	O
map	struct(*(char),*(char),*(char),int,int,*(char))
,	O
struct	O
rush_request	O
*	O
req	O
)	O
{	O
char	O
*	O
file	*(char)
;	O
FILE	struct
*	O
fp	O
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
st	O
;	O
char	O
*	O
buf	O
=	O
NULL	O
;	O
size_t	long
size	long
=	O
0	int
;	O
size_t	long
line	O
=	O
0	int
;	O
char	O
*	O
key	*(char)
;	O
char	O
*	O
ret	*(*(char))
=	O
NULL	O
;	O
file	*(char)
=	O
expand_tilde	O
(	O
map	struct(*(char),*(char),*(char),int,int,*(char))
->	O
file	*(char)
,	O
req	O
->	O
pw	O
->	O
pw_dir	*(char)
)	O
;	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
file	*(char)
,	O
&	O
st	O
)	O
)	O
{	O
die	O
(	O
system_error	int
,	O
&	O
req	O
->	O
i18n	O
,	O
_	O
(	O
"cannot stat file %s: %s"	*(char)
)	O
,	O
file	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
}	O
if	O
(	O
check_config_permissions	O
(	O
file	*(char)
,	O
&	O
st	O
)	O
)	O
die	O
(	O
config_error	int
,	O
&	O
req	O
->	O
i18n	O
,	O
_	O
(	O
"%s: file is not safe"	*(char)
)	O
,	O
file	*(char)
)	O
;	O
fp	O
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
file	*(char)
,	O
"r"	*(char)
)	O
;	O
if	O
(	O
!	O
fp	O
)	O
die	O
(	O
system_error	int
,	O
&	O
req	O
->	O
i18n	O
,	O
_	O
(	O
"%s: cannot open map file"	*(char)
)	O
,	O
file	*(char)
)	O
;	O
key	*(char)
=	O
rush_expand_string	O
(	O
map	struct(*(char),*(char),*(char),int,int,*(char))
->	O
key	*(char)
,	O
req	O
)	O
;	O
while	O
(	O
getline	(*(*(char)),*(long),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
&	O
buf	O
,	O
&	O
size	long
,	O
fp	O
)	O
!=	O
-	O
1	int
)	O
{	O
size_t	long
len	long
;	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
;	O
line	O
++	O
;	O
len	long
=	O
strlen	(*(char))->(long)
(	O
buf	O
)	O
;	O
while	O
(	O
len	long
>	O
0	int
&&	O
buf	O
[	O
len	long
-	O
1	int
]	O
==	O
'\n'	O
)	O
buf	O
[	O
--	O
len	long
]	O
=	O
0	int
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_delim	*(char)
=	O
map	struct(*(char),*(char),*(char),int,int,*(char))
->	O
delim	*(char)
;	O
if	O
(	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
(	O
buf	O
,	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
WRDSF_NOVAR	O
|	O
WRDSF_NOCMD	O
|	O
WRDSF_DELIM	O
)	O
)	O
die	O
(	O
system_error	int
,	O
&	O
req	O
->	O
i18n	O
,	O
_	O
(	O
"%s:%lu: failed to parse line: %s"	*(char)
)	O
,	O
file	*(char)
,	O
(	O
unsigned	O
long	O
)	O
line	O
,	O
wordsplit_strerror	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(*(char))
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
)	O
;	O
if	O
(	O
map	struct(*(char),*(char),*(char),int,int,*(char))
->	O
key_field	int
<=	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordc	long
&&	O
map	struct(*(char),*(char),*(char),int,int,*(char))
->	O
val_field	int
<=	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordc	long
&&	O
strcmp	(*(char),*(char))->(int)
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordv	*(*(char))
[	O
map	struct(*(char),*(char),*(char),int,int,*(char))
->	O
key_field	int
-	O
1	int
]	O
,	O
key	*(char)
)	O
==	O
0	int
)	O
ret	*(*(char))
=	O
xstrdup	(*(char))->(*(char))
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordv	*(*(char))
[	O
map	struct(*(char),*(char),*(char),int,int,*(char))
->	O
val_field	int
-	O
1	int
]	O
)	O
;	O
wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
if	O
(	O
ret	*(*(char))
)	O
break	O
;	O
}	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	O
)	O
;	O
free	(*(void))->(void)
(	O
key	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
file	*(char)
)	O
;	O
if	O
(	O
!	O
ret	*(*(char))
&&	O
map	struct(*(char),*(char),*(char),int,int,*(char))
->	O
defval	*(char)
)	O
ret	*(*(char))
=	O
xstrdup	(*(char))->(*(char))
(	O
map	struct(*(char),*(char),*(char),int,int,*(char))
->	O
defval	*(char)
)	O
;	O
return	O
ret	*(*(char))
;	O
}	O
