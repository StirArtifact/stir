struct	O
netnode	struct(*(struct),*(void),*(char),long,*(struct))
{	O
const	O
struct	O
procfs_node_ops	O
*	O
ops	*(struct)
;	O
void	O
*	O
hook	*(void)
;	O
char	O
*	O
contents	*(char)
;	O
ssize_t	long
contents_len	long
;	O
struct	O
node	O
*	O
parent	*(struct)
;	O
}	O
;	O
void	O
procfs_cleanup_contents_with_free	(*(void),*(char),long)->(void)
(	O
void	O
*	O
hook	*(void)
,	O
char	O
*	O
cont	*(char)
,	O
ssize_t	long
len	long
)	O
{	O
free	(*(void))->(void)
(	O
cont	*(char)
)	O
;	O
}	O
void	O
procfs_cleanup_contents_with_vm_deallocate	(*(void),*(char),long)->(void)
(	O
void	O
*	O
hook	*(void)
,	O
char	O
*	O
cont	*(char)
,	O
ssize_t	long
len	long
)	O
{	O
vm_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
(	O
vm_address_t	O
)	O
cont	*(char)
,	O
(	O
vm_size_t	O
)	O
len	long
)	O
;	O
}	O
struct	O
node	O
*	O
procfs_make_node	(*(struct),*(void))->(*(struct))
(	O
const	O
struct	O
procfs_node_ops	O
*	O
ops	*(struct)
,	O
void	O
*	O
hook	*(void)
)	O
{	O
struct	O
netnode	struct(*(struct),*(void),*(char),long,*(struct))
*	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
;	O
struct	O
node	O
*	O
np	*(struct)
;	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
*	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
)	O
;	O
if	O
(	O
!	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
)	O
goto	O
fail	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
,	O
0	int
,	O
sizeof	O
*	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
)	O
;	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
->	O
ops	*(struct)
=	O
ops	*(struct)
;	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
->	O
hook	*(void)
=	O
hook	*(void)
;	O
np	*(struct)
=	O
netfs_make_node	()->(int)
(	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
)	O
;	O
if	O
(	O
!	O
np	*(struct)
)	O
goto	O
fail	O
;	O
np	*(struct)
->	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
=	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
np	*(struct)
->	O
nn_stat	O
,	O
0	int
,	O
sizeof	O
np	*(struct)
->	O
nn_stat	O
)	O
;	O
np	*(struct)
->	O
nn_translated	O
=	O
0	int
;	O
if	O
(	O
np	*(struct)
->	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
->	O
ops	*(struct)
->	O
lookup	O
)	O
np	*(struct)
->	O
nn_stat	O
.	O
st_mode	int
=	O
S_IFDIR	O
|	O
0555	int
;	O
else	O
np	*(struct)
->	O
nn_stat	O
.	O
st_mode	int
=	O
S_IFREG	O
|	O
0444	int
;	O
np	*(struct)
->	O
nn_stat	O
.	O
st_uid	int
=	O
getuid	()->(int)
(	O
)	O
;	O
np	*(struct)
->	O
nn_stat	O
.	O
st_gid	int
=	O
getgid	()->(int)
(	O
)	O
;	O
return	O
np	*(struct)
;	O
fail	O
:	O
if	O
(	O
ops	*(struct)
->	O
cleanup	O
)	O
ops	*(struct)
->	O
cleanup	O
(	O
hook	*(void)
)	O
;	O
free	(*(void))->(void)
(	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
)	O
;	O
return	O
NULL	O
;	O
}	O
void	O
procfs_node_chown	(*(struct),int)->(void)
(	O
struct	O
node	O
*	O
np	*(struct)
,	O
uid_t	int
owner	int
)	O
{	O
np	*(struct)
->	O
nn_stat	O
.	O
st_uid	int
=	O
owner	int
;	O
}	O
void	O
procfs_node_chmod	(*(struct),int)->(void)
(	O
struct	O
node	O
*	O
np	*(struct)
,	O
mode_t	int
mode	int
)	O
{	O
np	*(struct)
->	O
nn_stat	O
.	O
st_mode	int
=	O
(	O
np	*(struct)
->	O
nn_stat	O
.	O
st_mode	int
&	O
~	O
ALLPERMS	O
)	O
|	O
mode	int
;	O
np	*(struct)
->	O
nn_translated	O
=	O
np	*(struct)
->	O
nn_stat	O
.	O
st_mode	int
;	O
}	O
void	O
procfs_node_chtype	(*(struct),int)->(void)
(	O
struct	O
node	O
*	O
np	*(struct)
,	O
mode_t	int
type	enum(int,int,int,int)
)	O
{	O
np	*(struct)
->	O
nn_stat	O
.	O
st_mode	int
=	O
(	O
np	*(struct)
->	O
nn_stat	O
.	O
st_mode	int
&	O
~	O
S_IFMT	O
)	O
|	O
type	enum(int,int,int,int)
;	O
np	*(struct)
->	O
nn_translated	O
=	O
np	*(struct)
->	O
nn_stat	O
.	O
st_mode	int
;	O
if	O
(	O
type	enum(int,int,int,int)
==	O
S_IFLNK	O
)	O
procfs_node_chmod	(*(struct),int)->(void)
(	O
np	*(struct)
,	O
0777	int
)	O
;	O
}	O
ino64_t	long
procfs_make_ino	(*(struct),*(char))->(long)
(	O
struct	O
node	O
*	O
np	*(struct)
,	O
const	O
char	O
*	O
filename	*(char)
)	O
{	O
unsigned	O
short	O
x	array(short)
[	O
3	int
]	O
;	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
filename	*(char)
,	O
"."	*(char)
)	O
)	O
return	O
np	*(struct)
->	O
nn_stat	O
.	O
st_ino	long
;	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
filename	*(char)
,	O
".."	*(char)
)	O
)	O
return	O
np	*(struct)
->	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
->	O
parent	*(struct)
?	O
np	*(struct)
->	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
->	O
parent	*(struct)
->	O
nn_stat	O
.	O
st_ino	long
:	O
2	int
;	O
assert	()->(int)
(	O
sizeof	O
np	*(struct)
->	O
nn_stat	O
.	O
st_ino	long
>	O
sizeof	O
x	array(short)
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
x	array(short)
,	O
&	O
np	*(struct)
->	O
nn_stat	O
.	O
st_ino	long
,	O
sizeof	O
x	array(short)
)	O
;	O
while	O
(	O
*	O
filename	*(char)
)	O
{	O
x	array(short)
[	O
0	int
]	O
^=	O
*	O
(	O
filename	*(char)
++	O
)	O
;	O
jrand48	(array(short))->(long)
(	O
x	array(short)
)	O
;	O
}	O
return	O
(	O
unsigned	O
long	O
)	O
jrand48	(array(short))->(long)
(	O
x	array(short)
)	O
;	O
}	O
error_t	O
procfs_get_contents	(*(struct),*(*(char)),*(long))->(int)
(	O
struct	O
node	O
*	O
np	*(struct)
,	O
char	O
*	O
*	O
data	*(*(char))
,	O
ssize_t	long
*	O
data_len	*(long)
)	O
{	O
if	O
(	O
!	O
np	*(struct)
->	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
->	O
contents	*(char)
&&	O
np	*(struct)
->	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
->	O
ops	*(struct)
->	O
get_contents	O
)	O
{	O
char	O
*	O
contents	*(char)
;	O
ssize_t	long
contents_len	long
;	O
error_t	O
err	O
;	O
contents_len	long
=	O
-	O
1	int
;	O
err	O
=	O
np	*(struct)
->	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
->	O
ops	*(struct)
->	O
get_contents	O
(	O
np	*(struct)
->	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
->	O
hook	*(void)
,	O
&	O
contents	*(char)
,	O
&	O
contents_len	long
)	O
;	O
if	O
(	O
err	O
)	O
return	O
err	O
;	O
if	O
(	O
contents_len	long
<	O
0	int
)	O
return	O
ENOMEM	O
;	O
np	*(struct)
->	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
->	O
contents	*(char)
=	O
contents	*(char)
;	O
np	*(struct)
->	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
->	O
contents_len	long
=	O
contents_len	long
;	O
}	O
*	O
data	*(*(char))
=	O
np	*(struct)
->	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
->	O
contents	*(char)
;	O
*	O
data_len	*(long)
=	O
np	*(struct)
->	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
->	O
contents_len	long
;	O
return	O
0	int
;	O
}	O
void	O
procfs_refresh	(*(struct))->(void)
(	O
struct	O
node	O
*	O
np	*(struct)
)	O
{	O
if	O
(	O
np	*(struct)
->	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
->	O
contents	*(char)
&&	O
np	*(struct)
->	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
->	O
ops	*(struct)
->	O
cleanup_contents	O
)	O
np	*(struct)
->	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
->	O
ops	*(struct)
->	O
cleanup_contents	O
(	O
np	*(struct)
->	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
->	O
hook	*(void)
,	O
np	*(struct)
->	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
->	O
contents	*(char)
,	O
np	*(struct)
->	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
->	O
contents_len	long
)	O
;	O
np	*(struct)
->	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
->	O
contents	*(char)
=	O
NULL	O
;	O
}	O
error_t	O
procfs_lookup	(*(struct),*(char),*(*(struct)))->(int)
(	O
struct	O
node	O
*	O
np	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
,	O
struct	O
node	O
*	O
*	O
npp	*(*(struct))
)	O
{	O
error_t	O
err	O
=	O
ENOENT	O
;	O
if	O
(	O
err	O
&&	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
"."	*(char)
)	O
)	O
{	O
netfs_nref	()->(int)
(	O
*	O
npp	*(*(struct))
=	O
np	*(struct)
)	O
;	O
err	O
=	O
0	int
;	O
}	O
if	O
(	O
err	O
&&	O
np	*(struct)
->	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
->	O
parent	*(struct)
&&	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
".."	*(char)
)	O
)	O
{	O
netfs_nref	()->(int)
(	O
*	O
npp	*(*(struct))
=	O
np	*(struct)
->	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
->	O
parent	*(struct)
)	O
;	O
err	O
=	O
0	int
;	O
}	O
if	O
(	O
err	O
&&	O
np	*(struct)
->	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
->	O
ops	*(struct)
->	O
lookup	O
)	O
{	O
err	O
=	O
np	*(struct)
->	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
->	O
ops	*(struct)
->	O
lookup	O
(	O
np	*(struct)
->	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
->	O
hook	*(void)
,	O
name	*(char)
,	O
npp	*(*(struct))
)	O
;	O
if	O
(	O
!	O
err	O
)	O
{	O
(	O
*	O
npp	*(*(struct))
)	O
->	O
nn_stat	O
.	O
st_ino	long
=	O
procfs_make_ino	(*(struct),*(char))->(long)
(	O
np	*(struct)
,	O
name	*(char)
)	O
;	O
netfs_nref	()->(int)
(	O
(	O
*	O
npp	*(*(struct))
)	O
->	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
->	O
parent	*(struct)
=	O
np	*(struct)
)	O
;	O
}	O
}	O
return	O
err	O
;	O
}	O
void	O
procfs_cleanup	(*(struct))->(void)
(	O
struct	O
node	O
*	O
np	*(struct)
)	O
{	O
procfs_refresh	(*(struct))->(void)
(	O
np	*(struct)
)	O
;	O
if	O
(	O
np	*(struct)
->	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
->	O
ops	*(struct)
->	O
cleanup	O
)	O
np	*(struct)
->	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
->	O
ops	*(struct)
->	O
cleanup	O
(	O
np	*(struct)
->	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
->	O
hook	*(void)
)	O
;	O
if	O
(	O
np	*(struct)
->	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
->	O
parent	*(struct)
)	O
netfs_nrele	()->(int)
(	O
np	*(struct)
->	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
->	O
parent	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
np	*(struct)
->	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
)	O
;	O
}	O
error_t	O
procfs_get_translator	(*(struct),*(*(char)),*(long))->(int)
(	O
struct	O
node	O
*	O
np	*(struct)
,	O
char	O
*	O
*	O
argz	*(*(char))
,	O
size_t	long
*	O
argz_len	*(long)
)	O
{	O
if	O
(	O
np	*(struct)
->	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
->	O
ops	*(struct)
->	O
get_translator	O
)	O
return	O
np	*(struct)
->	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
->	O
ops	*(struct)
->	O
get_translator	O
(	O
np	*(struct)
->	O
nn	*(struct(*(struct),*(void),*(char),long,*(struct)))
->	O
hook	*(void)
,	O
argz	*(*(char))
,	O
argz_len	*(long)
)	O
;	O
*	O
argz	*(*(char))
=	O
NULL	O
;	O
*	O
argz_len	*(long)
=	O
0	int
;	O
return	O
0	int
;	O
}	O
