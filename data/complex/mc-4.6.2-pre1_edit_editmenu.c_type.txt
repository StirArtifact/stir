static	O
void	O
menu_cmd	(int)->(void)
(	O
int	O
command	*(char)
)	O
{	O
edit_execute_key_command	(*(struct),int,int)->(void)
(	O
wedit	*(struct)
,	O
command	*(char)
,	O
-	O
1	int
)	O
;	O
edit_update_screen	(*(struct))->(void)
(	O
wedit	*(struct)
)	O
;	O
}	O
static	O
void	O
menu_key	(int)->(void)
(	O
int	O
i	array(int)
)	O
{	O
send_message	(*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))
(	O
(	O
Widget	struct
*	O
)	O
wedit	*(struct)
,	O
WIDGET_KEY	int
,	O
i	array(int)
)	O
;	O
}	O
static	O
void	O
edit_about_cmd	()->(void)
(	O
void	O
)	O
{	O
query_dialog	(*(char),*(char),int,int)->(int)
(	O
_	O
(	O
" About "	*(char)
)	O
,	O
_	O
(	O
"\n                Cooledit  v3.11.5\n\n"	*(char)
" Copyright (C) 1996 the Free Software Foundation\n\n"	*(char)
"       A user friendly text editor written\n"	*(char)
"           for the Midnight Commander.\n"	*(char)
)	O
,	O
D_NORMAL	int
,	O
1	int
,	O
_	O
(	O
"&OK"	*(char)
)	O
)	O
;	O
}	O
static	O
void	O
menu_mail_cmd	()->(void)
(	O
void	O
)	O
{	O
menu_cmd	(int)->(void)
(	O
CK_Mail	int
)	O
;	O
}	O
static	O
void	O
menu_load_cmd	()->(void)
(	O
void	O
)	O
{	O
menu_cmd	(int)->(void)
(	O
CK_Load	int
)	O
;	O
}	O
static	O
void	O
menu_new_cmd	()->(void)
(	O
void	O
)	O
{	O
menu_cmd	(int)->(void)
(	O
CK_New	int
)	O
;	O
}	O
static	O
void	O
menu_save_cmd	()->(void)
(	O
void	O
)	O
{	O
menu_cmd	(int)->(void)
(	O
CK_Save	int
)	O
;	O
}	O
static	O
void	O
menu_save_as_cmd	()->(void)
(	O
void	O
)	O
{	O
menu_cmd	(int)->(void)
(	O
CK_Save_As	int
)	O
;	O
}	O
static	O
void	O
menu_insert_file_cmd	()->(void)
(	O
void	O
)	O
{	O
menu_cmd	(int)->(void)
(	O
CK_Insert_File	int
)	O
;	O
}	O
static	O
void	O
menu_quit_cmd	()->(void)
(	O
void	O
)	O
{	O
menu_cmd	(int)->(void)
(	O
CK_Exit	int
)	O
;	O
}	O
static	O
void	O
menu_mark_cmd	()->(void)
(	O
void	O
)	O
{	O
menu_cmd	(int)->(void)
(	O
CK_Mark	int
)	O
;	O
}	O
static	O
void	O
menu_markcol_cmd	()->(void)
(	O
void	O
)	O
{	O
menu_cmd	(int)->(void)
(	O
CK_Column_Mark	int
)	O
;	O
}	O
static	O
void	O
menu_ins_cmd	()->(void)
(	O
void	O
)	O
{	O
menu_cmd	(int)->(void)
(	O
CK_Toggle_Insert	int
)	O
;	O
}	O
static	O
void	O
menu_copy_cmd	()->(void)
(	O
void	O
)	O
{	O
menu_cmd	(int)->(void)
(	O
CK_Copy	int
)	O
;	O
}	O
static	O
void	O
menu_move_cmd	()->(void)
(	O
void	O
)	O
{	O
menu_cmd	(int)->(void)
(	O
CK_Move	int
)	O
;	O
}	O
static	O
void	O
menu_delete_cmd	()->(void)
(	O
void	O
)	O
{	O
menu_cmd	(int)->(void)
(	O
CK_Remove	int
)	O
;	O
}	O
static	O
void	O
menu_cut_cmd	()->(void)
(	O
void	O
)	O
{	O
menu_cmd	(int)->(void)
(	O
CK_Save_Block	int
)	O
;	O
}	O
static	O
void	O
menu_search_cmd	()->(void)
(	O
void	O
)	O
{	O
menu_cmd	(int)->(void)
(	O
CK_Find	int
)	O
;	O
}	O
static	O
void	O
menu_search_again_cmd	()->(void)
(	O
void	O
)	O
{	O
menu_cmd	(int)->(void)
(	O
CK_Find_Again	int
)	O
;	O
}	O
static	O
void	O
menu_replace_cmd	()->(void)
(	O
void	O
)	O
{	O
menu_cmd	(int)->(void)
(	O
CK_Replace	int
)	O
;	O
}	O
static	O
void	O
menu_begin_record_cmd	()->(void)
(	O
void	O
)	O
{	O
menu_cmd	(int)->(void)
(	O
CK_Begin_Record_Macro	int
)	O
;	O
}	O
static	O
void	O
menu_end_record_cmd	()->(void)
(	O
void	O
)	O
{	O
menu_cmd	(int)->(void)
(	O
CK_End_Record_Macro	int
)	O
;	O
}	O
static	O
void	O
menu_exec_macro_cmd	()->(void)
(	O
void	O
)	O
{	O
menu_key	(int)->(void)
(	O
XCTRL	O
(	O
'a'	O
)	O
)	O
;	O
}	O
static	O
void	O
menu_exec_macro_delete_cmd	()->(void)
(	O
void	O
)	O
{	O
menu_cmd	(int)->(void)
(	O
CK_Delete_Macro	int
)	O
;	O
}	O
static	O
void	O
menu_c_form_cmd	()->(void)
(	O
void	O
)	O
{	O
menu_key	(int)->(void)
(	O
KEY_F	O
(	O
19	int
)	O
)	O
;	O
}	O
static	O
void	O
menu_ispell_cmd	()->(void)
(	O
void	O
)	O
{	O
menu_cmd	(int)->(void)
(	O
CK_Pipe_Block	O
(	O
1	int
)	O
)	O
;	O
}	O
static	O
void	O
menu_sort_cmd	()->(void)
(	O
void	O
)	O
{	O
menu_cmd	(int)->(void)
(	O
CK_Sort	int
)	O
;	O
}	O
static	O
void	O
menu_ext_cmd	()->(void)
(	O
void	O
)	O
{	O
menu_cmd	(int)->(void)
(	O
CK_ExtCmd	int
)	O
;	O
}	O
static	O
void	O
menu_date_cmd	()->(void)
(	O
void	O
)	O
{	O
menu_cmd	(int)->(void)
(	O
CK_Date	int
)	O
;	O
}	O
static	O
void	O
menu_undo_cmd	()->(void)
(	O
void	O
)	O
{	O
menu_cmd	(int)->(void)
(	O
CK_Undo	int
)	O
;	O
}	O
static	O
void	O
menu_beginning_cmd	()->(void)
(	O
void	O
)	O
{	O
menu_cmd	(int)->(void)
(	O
CK_Beginning_Of_Text	int
)	O
;	O
}	O
static	O
void	O
menu_end_cmd	()->(void)
(	O
void	O
)	O
{	O
menu_cmd	(int)->(void)
(	O
CK_End_Of_Text	int
)	O
;	O
}	O
static	O
void	O
menu_refresh_cmd	()->(void)
(	O
void	O
)	O
{	O
menu_cmd	(int)->(void)
(	O
CK_Refresh	int
)	O
;	O
}	O
static	O
void	O
menu_goto_line	()->(void)
(	O
void	O
)	O
{	O
menu_cmd	(int)->(void)
(	O
CK_Goto	int
)	O
;	O
}	O
static	O
void	O
menu_goto_bracket	()->(void)
(	O
void	O
)	O
{	O
menu_cmd	(int)->(void)
(	O
CK_Match_Bracket	int
)	O
;	O
}	O
static	O
void	O
menu_lit_cmd	()->(void)
(	O
void	O
)	O
{	O
menu_key	(int)->(void)
(	O
XCTRL	O
(	O
'q'	O
)	O
)	O
;	O
}	O
static	O
void	O
menu_format_paragraph	()->(void)
(	O
void	O
)	O
{	O
menu_cmd	(int)->(void)
(	O
CK_Paragraph_Format	int
)	O
;	O
}	O
static	O
void	O
menu_options	()->(void)
(	O
void	O
)	O
{	O
edit_options_dialog	()->(void)
(	O
)	O
;	O
}	O
static	O
void	O
menu_syntax	()->(void)
(	O
void	O
)	O
{	O
edit_syntax_dialog	()->(void)
(	O
)	O
;	O
}	O
static	O
void	O
menu_user_menu_cmd	()->(void)
(	O
void	O
)	O
{	O
menu_key	(int)->(void)
(	O
KEY_F	O
(	O
11	int
)	O
)	O
;	O
}	O
static	O
menu_entry	struct(char,*(char),int,*(()->(void)))
FileMenu	array(struct(char,*(char),int,*(()->(void))))
[	O
]	O
=	O
{	O
{	O
' '	O
,	O
N_	O
(	O
"&Open file..."	*(char)
)	O
,	O
'O'	O
,	O
menu_load_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&New              C-n"	*(char)
)	O
,	O
'N'	O
,	O
menu_new_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Save              F2"	*(char)
)	O
,	O
'S'	O
,	O
menu_save_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Save &as...       F12"	*(char)
)	O
,	O
'A'	O
,	O
menu_save_as_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Insert file...   F15"	*(char)
)	O
,	O
'I'	O
,	O
menu_insert_file_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Copy to &file...  C-f"	*(char)
)	O
,	O
'F'	O
,	O
menu_cut_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&User menu...     F11"	*(char)
)	O
,	O
'U'	O
,	O
menu_user_menu_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"A&bout...            "	*(char)
)	O
,	O
'B'	O
,	O
edit_about_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Quit             F10"	*(char)
)	O
,	O
'Q'	O
,	O
menu_quit_cmd	()->(void)
}	O
}	O
;	O
static	O
menu_entry	struct(char,*(char),int,*(()->(void)))
FileMenuEmacs	array(struct(char,*(char),int,*(()->(void))))
[	O
]	O
=	O
{	O
{	O
' '	O
,	O
N_	O
(	O
"&Open file..."	*(char)
)	O
,	O
'O'	O
,	O
menu_load_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&New            C-x k"	*(char)
)	O
,	O
'N'	O
,	O
menu_new_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Save              F2"	*(char)
)	O
,	O
'S'	O
,	O
menu_save_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Save &as...       F12"	*(char)
)	O
,	O
'A'	O
,	O
menu_save_as_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Insert file...   F15"	*(char)
)	O
,	O
'I'	O
,	O
menu_insert_file_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Copy to &file...     "	*(char)
)	O
,	O
'F'	O
,	O
menu_cut_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&User menu...     F11"	*(char)
)	O
,	O
'U'	O
,	O
menu_user_menu_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"A&bout...            "	*(char)
)	O
,	O
'B'	O
,	O
edit_about_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Quit             F10"	*(char)
)	O
,	O
'Q'	O
,	O
menu_quit_cmd	()->(void)
}	O
}	O
;	O
static	O
menu_entry	struct(char,*(char),int,*(()->(void)))
EditMenu	array(struct(char,*(char),int,*(()->(void))))
[	O
]	O
=	O
{	O
{	O
' '	O
,	O
N_	O
(	O
"&Toggle Mark       F3"	*(char)
)	O
,	O
'T'	O
,	O
menu_mark_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Mark Columns    S-F3"	*(char)
)	O
,	O
'T'	O
,	O
menu_markcol_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Toggle &ins/overw Ins"	*(char)
)	O
,	O
'I'	O
,	O
menu_ins_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Copy              F5"	*(char)
)	O
,	O
'C'	O
,	O
menu_copy_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Move              F6"	*(char)
)	O
,	O
'M'	O
,	O
menu_move_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Delete            F8"	*(char)
)	O
,	O
'D'	O
,	O
menu_delete_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Undo             C-u"	*(char)
)	O
,	O
'U'	O
,	O
menu_undo_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Beginning     C-PgUp"	*(char)
)	O
,	O
'B'	O
,	O
menu_beginning_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&End           C-PgDn"	*(char)
)	O
,	O
'E'	O
,	O
menu_end_cmd	()->(void)
}	O
}	O
;	O
static	O
menu_entry	struct(char,*(char),int,*(()->(void)))
SearReplMenu	array(struct(char,*(char),int,*(()->(void))))
[	O
]	O
=	O
{	O
{	O
' '	O
,	O
N_	O
(	O
"&Search...         F7"	*(char)
)	O
,	O
'S'	O
,	O
menu_search_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Search &again     F17"	*(char)
)	O
,	O
'A'	O
,	O
menu_search_again_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Replace...        F4"	*(char)
)	O
,	O
'R'	O
,	O
menu_replace_cmd	()->(void)
}	O
}	O
;	O
static	O
menu_entry	struct(char,*(char),int,*(()->(void)))
CmdMenu	array(struct(char,*(char),int,*(()->(void))))
[	O
]	O
=	O
{	O
{	O
' '	O
,	O
N_	O
(	O
"&Go to line...            M-l"	*(char)
)	O
,	O
'G'	O
,	O
menu_goto_line	()->(void)
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Go to matching &bracket   M-b"	*(char)
)	O
,	O
'B'	O
,	O
menu_goto_bracket	()->(void)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Insert &literal...       C-q"	*(char)
)	O
,	O
'L'	O
,	O
menu_lit_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Refresh screen          C-l"	*(char)
)	O
,	O
'R'	O
,	O
menu_refresh_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Start record macro      C-r"	*(char)
)	O
,	O
'S'	O
,	O
menu_begin_record_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Finish record macro...  C-r"	*(char)
)	O
,	O
'F'	O
,	O
menu_end_record_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Execute macro...   C-a, KEY"	*(char)
)	O
,	O
'E'	O
,	O
menu_exec_macro_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Delete macr&o...            "	*(char)
)	O
,	O
'O'	O
,	O
menu_exec_macro_delete_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Insert &date/time           "	*(char)
)	O
,	O
'D'	O
,	O
menu_date_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Format p&aragraph        M-p"	*(char)
)	O
,	O
'A'	O
,	O
menu_format_paragraph	()->(void)
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"'ispell' s&pell check    C-p"	*(char)
)	O
,	O
'P'	O
,	O
menu_ispell_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Sor&t...                 M-t"	*(char)
)	O
,	O
'T'	O
,	O
menu_sort_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Paste o&utput of...      M-u"	*(char)
)	O
,	O
'U'	O
,	O
menu_ext_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"E&xternal Formatter      F19"	*(char)
)	O
,	O
'C'	O
,	O
menu_c_form_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Mail...                    "	*(char)
)	O
,	O
'M'	O
,	O
menu_mail_cmd	()->(void)
}	O
}	O
;	O
static	O
menu_entry	struct(char,*(char),int,*(()->(void)))
CmdMenuEmacs	array(struct(char,*(char),int,*(()->(void))))
[	O
]	O
=	O
{	O
{	O
' '	O
,	O
N_	O
(	O
"&Go to line...            M-l"	*(char)
)	O
,	O
'G'	O
,	O
menu_goto_line	()->(void)
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Go to matching &bracket   M-b"	*(char)
)	O
,	O
'B'	O
,	O
menu_goto_bracket	()->(void)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Insert &literal...       C-q"	*(char)
)	O
,	O
'L'	O
,	O
menu_lit_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Refresh screen          C-l"	*(char)
)	O
,	O
'R'	O
,	O
menu_refresh_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Start record macro      C-r"	*(char)
)	O
,	O
'S'	O
,	O
menu_begin_record_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Finish record macro...  C-r"	*(char)
)	O
,	O
'F'	O
,	O
menu_end_record_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Execute macro... C-x e, KEY"	*(char)
)	O
,	O
'E'	O
,	O
menu_exec_macro_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Delete macr&o...            "	*(char)
)	O
,	O
'o'	O
,	O
menu_exec_macro_delete_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Insert &date/time           "	*(char)
)	O
,	O
'D'	O
,	O
menu_date_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Format p&aragraph        M-p"	*(char)
)	O
,	O
'a'	O
,	O
menu_format_paragraph	()->(void)
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"'ispell' s&pell check    M-$"	*(char)
)	O
,	O
'P'	O
,	O
menu_ispell_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Sor&t...                 M-t"	*(char)
)	O
,	O
'T'	O
,	O
menu_sort_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Paste o&utput of...      M-u"	*(char)
)	O
,	O
'U'	O
,	O
menu_ext_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"E&xternal Formatter      F19"	*(char)
)	O
,	O
'C'	O
,	O
menu_c_form_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Mail...                    "	*(char)
)	O
,	O
'M'	O
,	O
menu_mail_cmd	()->(void)
}	O
}	O
;	O
static	O
menu_entry	struct(char,*(char),int,*(()->(void)))
OptMenu	array(struct(char,*(char),int,*(()->(void))))
[	O
]	O
=	O
{	O
{	O
' '	O
,	O
N_	O
(	O
"&General...  "	*(char)
)	O
,	O
'G'	O
,	O
menu_options	()->(void)
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Save mode..."	*(char)
)	O
,	O
'S'	O
,	O
menu_save_mode_cmd	()->(void)
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Learn &Keys..."	*(char)
)	O
,	O
'K'	O
,	O
learn_keys	()->(void)
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Syntax &Highlighting..."	*(char)
)	O
,	O
'H'	O
,	O
menu_syntax	()->(void)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Save setu&p..."	*(char)
)	O
,	O
'p'	O
,	O
save_setup_cmd	()->(void)
}	O
}	O
;	O
static	O
void	O
edit_init_menu_normal	(array(*(struct(*(char),int,int,int,int,*(struct(char,*(char),int,*(()->(void)))),int,*(char)))))->(void)
(	O
struct	O
Menu	struct(*(char),int,int,int,int,*(struct(char,*(char),int,*(()->(void)))),int,*(char))
*	O
EditMenuBar	array(*(struct(*(char),int,int,int,int,*(struct(char,*(char),int,*(()->(void)))),int,*(char))))
[	O
]	O
)	O
{	O
EditMenuBar	array(*(struct(*(char),int,int,int,int,*(struct(char,*(char),int,*(()->(void)))),int,*(char))))
[	O
0	int
]	O
=	O
create_menu	(*(char),*(struct(char,*(char),int,*(()->(void)))),int,*(char))->(*(struct(*(char),int,int,int,int,*(struct(char,*`,int,*`)),int,*(char))))
(	O
_	O
(	O
" File "	*(char)
)	O
,	O
FileMenu	array(struct(char,*(char),int,*(()->(void))))
,	O
menu_entries	O
(	O
FileMenu	array(struct(char,*(char),int,*(()->(void))))
)	O
,	O
"[Internal File Editor]"	*(char)
)	O
;	O
EditMenuBar	array(*(struct(*(char),int,int,int,int,*(struct(char,*(char),int,*(()->(void)))),int,*(char))))
[	O
1	int
]	O
=	O
create_menu	(*(char),*(struct(char,*(char),int,*(()->(void)))),int,*(char))->(*(struct(*(char),int,int,int,int,*(struct(char,*`,int,*`)),int,*(char))))
(	O
_	O
(	O
" Edit "	*(char)
)	O
,	O
EditMenu	array(struct(char,*(char),int,*(()->(void))))
,	O
menu_entries	O
(	O
EditMenu	array(struct(char,*(char),int,*(()->(void))))
)	O
,	O
"[Internal File Editor]"	*(char)
)	O
;	O
EditMenuBar	array(*(struct(*(char),int,int,int,int,*(struct(char,*(char),int,*(()->(void)))),int,*(char))))
[	O
2	int
]	O
=	O
create_menu	(*(char),*(struct(char,*(char),int,*(()->(void)))),int,*(char))->(*(struct(*(char),int,int,int,int,*(struct(char,*`,int,*`)),int,*(char))))
(	O
_	O
(	O
" Sear/Repl "	*(char)
)	O
,	O
SearReplMenu	array(struct(char,*(char),int,*(()->(void))))
,	O
menu_entries	O
(	O
SearReplMenu	array(struct(char,*(char),int,*(()->(void))))
)	O
,	O
"[Internal File Editor]"	*(char)
)	O
;	O
EditMenuBar	array(*(struct(*(char),int,int,int,int,*(struct(char,*(char),int,*(()->(void)))),int,*(char))))
[	O
3	int
]	O
=	O
create_menu	(*(char),*(struct(char,*(char),int,*(()->(void)))),int,*(char))->(*(struct(*(char),int,int,int,int,*(struct(char,*`,int,*`)),int,*(char))))
(	O
_	O
(	O
" Command "	*(char)
)	O
,	O
CmdMenu	array(struct(char,*(char),int,*(()->(void))))
,	O
menu_entries	O
(	O
CmdMenu	array(struct(char,*(char),int,*(()->(void))))
)	O
,	O
"[Internal File Editor]"	*(char)
)	O
;	O
EditMenuBar	array(*(struct(*(char),int,int,int,int,*(struct(char,*(char),int,*(()->(void)))),int,*(char))))
[	O
4	int
]	O
=	O
create_menu	(*(char),*(struct(char,*(char),int,*(()->(void)))),int,*(char))->(*(struct(*(char),int,int,int,int,*(struct(char,*`,int,*`)),int,*(char))))
(	O
_	O
(	O
" Options "	*(char)
)	O
,	O
OptMenu	array(struct(char,*(char),int,*(()->(void))))
,	O
menu_entries	O
(	O
OptMenu	array(struct(char,*(char),int,*(()->(void))))
)	O
,	O
"[Internal File Editor]"	*(char)
)	O
;	O
}	O
static	O
void	O
edit_init_menu_emacs	(array(*(struct(*(char),int,int,int,int,*(struct(char,*(char),int,*(()->(void)))),int,*(char)))))->(void)
(	O
struct	O
Menu	struct(*(char),int,int,int,int,*(struct(char,*(char),int,*(()->(void)))),int,*(char))
*	O
EditMenuBar	array(*(struct(*(char),int,int,int,int,*(struct(char,*(char),int,*(()->(void)))),int,*(char))))
[	O
]	O
)	O
{	O
EditMenuBar	array(*(struct(*(char),int,int,int,int,*(struct(char,*(char),int,*(()->(void)))),int,*(char))))
[	O
0	int
]	O
=	O
create_menu	(*(char),*(struct(char,*(char),int,*(()->(void)))),int,*(char))->(*(struct(*(char),int,int,int,int,*(struct(char,*`,int,*`)),int,*(char))))
(	O
_	O
(	O
" File "	*(char)
)	O
,	O
FileMenuEmacs	array(struct(char,*(char),int,*(()->(void))))
,	O
menu_entries	O
(	O
FileMenuEmacs	array(struct(char,*(char),int,*(()->(void))))
)	O
,	O
"[Internal File Editor]"	*(char)
)	O
;	O
EditMenuBar	array(*(struct(*(char),int,int,int,int,*(struct(char,*(char),int,*(()->(void)))),int,*(char))))
[	O
1	int
]	O
=	O
create_menu	(*(char),*(struct(char,*(char),int,*(()->(void)))),int,*(char))->(*(struct(*(char),int,int,int,int,*(struct(char,*`,int,*`)),int,*(char))))
(	O
_	O
(	O
" Edit "	*(char)
)	O
,	O
EditMenuEmacs	O
,	O
menu_entries	O
(	O
EditMenuEmacs	O
)	O
,	O
"[Internal File Editor]"	*(char)
)	O
;	O
EditMenuBar	array(*(struct(*(char),int,int,int,int,*(struct(char,*(char),int,*(()->(void)))),int,*(char))))
[	O
2	int
]	O
=	O
create_menu	(*(char),*(struct(char,*(char),int,*(()->(void)))),int,*(char))->(*(struct(*(char),int,int,int,int,*(struct(char,*`,int,*`)),int,*(char))))
(	O
_	O
(	O
" Sear/Repl "	*(char)
)	O
,	O
SearReplMenuEmacs	O
,	O
menu_entries	O
(	O
SearReplMenuEmacs	O
)	O
,	O
"[Internal File Editor]"	*(char)
)	O
;	O
EditMenuBar	array(*(struct(*(char),int,int,int,int,*(struct(char,*(char),int,*(()->(void)))),int,*(char))))
[	O
3	int
]	O
=	O
create_menu	(*(char),*(struct(char,*(char),int,*(()->(void)))),int,*(char))->(*(struct(*(char),int,int,int,int,*(struct(char,*`,int,*`)),int,*(char))))
(	O
_	O
(	O
" Command "	*(char)
)	O
,	O
CmdMenuEmacs	array(struct(char,*(char),int,*(()->(void))))
,	O
menu_entries	O
(	O
CmdMenuEmacs	array(struct(char,*(char),int,*(()->(void))))
)	O
,	O
"[Internal File Editor]"	*(char)
)	O
;	O
EditMenuBar	array(*(struct(*(char),int,int,int,int,*(struct(char,*(char),int,*(()->(void)))),int,*(char))))
[	O
4	int
]	O
=	O
create_menu	(*(char),*(struct(char,*(char),int,*(()->(void)))),int,*(char))->(*(struct(*(char),int,int,int,int,*(struct(char,*`,int,*`)),int,*(char))))
(	O
_	O
(	O
" Options "	*(char)
)	O
,	O
OptMenuEmacs	O
,	O
menu_entries	O
(	O
OptMenuEmacs	O
)	O
,	O
"[Internal File Editor]"	*(char)
)	O
;	O
}	O
struct	O
WMenu	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*((*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))))),int,int,*(*(struct(*(char),int,int,int,int,*(struct(char,*`,int,*`)),int,*(char)))),int,int,int,int,int)
*	O
edit_init_menu	()->(*(struct))
(	O
void	O
)	O
{	O
struct	O
Menu	struct(*(char),int,int,int,int,*(struct(char,*(char),int,*(()->(void)))),int,*(char))
*	O
*	O
EditMenuBar	array(*(struct(*(char),int,int,int,int,*(struct(char,*(char),int,*(()->(void)))),int,*(char))))
=	O
g_new	O
(	O
struct	O
Menu	struct(*(char),int,int,int,int,*(struct(char,*(char),int,*(()->(void)))),int,*(char))
*	O
,	O
N_menus	int
)	O
;	O
switch	O
(	O
edit_key_emulation	int
)	O
{	O
default	O
:	O
case	O
EDIT_KEY_EMULATION_NORMAL	int
:	O
edit_init_menu_normal	(array(*(struct(*(char),int,int,int,int,*(struct(char,*(char),int,*(()->(void)))),int,*(char)))))->(void)
(	O
EditMenuBar	array(*(struct(*(char),int,int,int,int,*(struct(char,*(char),int,*(()->(void)))),int,*(char))))
)	O
;	O
break	O
;	O
case	O
EDIT_KEY_EMULATION_EMACS	int
:	O
edit_init_menu_emacs	(array(*(struct(*(char),int,int,int,int,*(struct(char,*(char),int,*(()->(void)))),int,*(char)))))->(void)
(	O
EditMenuBar	array(*(struct(*(char),int,int,int,int,*(struct(char,*(char),int,*(()->(void)))),int,*(char))))
)	O
;	O
break	O
;	O
}	O
return	O
menubar_new	(int,int,int,array(*(struct(*(char),int,int,int,int,*(struct(char,*(char),int,*(()->(void)))),int,*(char)))),int)->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(*(struct`)),int,int,int,int,int)))
(	O
0	int
,	O
0	int
,	O
COLS	O
,	O
EditMenuBar	array(*(struct(*(char),int,int,int,int,*(struct(char,*(char),int,*(()->(void)))),int,*(char))))
,	O
N_menus	int
)	O
;	O
}	O
void	O
edit_done_menu	(*(struct))->(void)
(	O
struct	O
WMenu	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*((*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))))),int,int,*(*(struct(*(char),int,int,int,int,*(struct(char,*`,int,*`)),int,*(char)))),int,int,int,int,int)
*	O
wmenu	*(struct)
)	O
{	O
int	O
i	array(int)
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
i	array(int)
<	O
N_menus	int
;	O
i	array(int)
++	O
)	O
destroy_menu	(*(struct(*(char),int,int,int,int,*(struct(char,*`,int,*`)),int,*(char))))->(void)
(	O
wmenu	*(struct)
->	O
menu	*(*(struct(*(char),int,int,int,int,*(struct(char,*`,int,*`)),int,*(char))))
[	O
i	array(int)
]	O
)	O
;	O
g_free	(*(void))->(void)
(	O
wmenu	*(struct)
->	O
menu	*(*(struct(*(char),int,int,int,int,*(struct(char,*`,int,*`)),int,*(char))))
)	O
;	O
}	O
void	O
edit_reload_menu	()->(void)
(	O
void	O
)	O
{	O
struct	O
WMenu	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*((*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))))),int,int,*(*(struct(*(char),int,int,int,int,*(struct(char,*`,int,*`)),int,*(char)))),int,int,int,int,int)
*	O
new_edit_menubar	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,*(*(struct(*`,int,int,int,int,*`,int,*`))),int,int,int,int,int))
;	O
new_edit_menubar	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,*(*(struct(*`,int,int,int,int,*`,int,*`))),int,int,int,int,int))
=	O
edit_init_menu	()->(*(struct))
(	O
)	O
;	O
dlg_replace_widget	(*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
&	O
edit_menubar	*(struct)
->	O
widget	*(struct)
,	O
&	O
new_edit_menubar	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,*(*(struct(*`,int,int,int,int,*`,int,*`))),int,int,int,int,int))
->	O
widget	*(struct)
)	O
;	O
edit_done_menu	(*(struct))->(void)
(	O
edit_menubar	*(struct)
)	O
;	O
edit_menubar	*(struct)
=	O
new_edit_menubar	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,*(*(struct(*`,int,int,int,int,*`,int,*`))),int,int,int,int,int))
;	O
}	O
static	O
void	O
edit_drop_menu_cmd	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))),int)->(void)
(	O
WEdit	struct
*	O
e	*(struct)
,	O
int	O
which	int
)	O
{	O
if	O
(	O
edit_menubar	*(struct)
->	O
active	int
)	O
return	O
;	O
edit_menubar	*(struct)
->	O
active	int
=	O
1	int
;	O
edit_menubar	*(struct)
->	O
dropped	int
=	O
drop_menus	int
;	O
if	O
(	O
which	int
>=	O
0	int
)	O
{	O
edit_menubar	*(struct)
->	O
selected	int
=	O
which	int
;	O
}	O
edit_menubar	*(struct)
->	O
previous_widget	int
=	O
e	*(struct)
->	O
widget	*(struct)
.	O
parent	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
->	O
current	long
->	O
dlg_id	int
;	O
dlg_select_widget	(*(void))->(void)
(	O
edit_menubar	*(struct)
)	O
;	O
}	O
void	O
edit_menu_cmd	(*(struct))->(void)
(	O
WEdit	struct
*	O
e	*(struct)
)	O
{	O
edit_drop_menu_cmd	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))),int)->(void)
(	O
e	*(struct)
,	O
-	O
1	int
)	O
;	O
}	O
int	O
edit_drop_hotkey_menu	(*(struct),int)->(int)
(	O
WEdit	struct
*	O
e	*(struct)
,	O
int	O
key	*(void)
)	O
{	O
int	O
m	int
=	O
0	int
;	O
switch	O
(	O
key	*(void)
)	O
{	O
case	O
ALT	O
(	O
'f'	O
)	O
:	O
if	O
(	O
edit_key_emulation	int
==	O
EDIT_KEY_EMULATION_EMACS	int
)	O
return	O
0	int
;	O
m	int
=	O
0	int
;	O
break	O
;	O
case	O
ALT	O
(	O
'e'	O
)	O
:	O
m	int
=	O
1	int
;	O
break	O
;	O
case	O
ALT	O
(	O
's'	O
)	O
:	O
m	int
=	O
2	int
;	O
break	O
;	O
case	O
ALT	O
(	O
'c'	O
)	O
:	O
m	int
=	O
3	int
;	O
break	O
;	O
case	O
ALT	O
(	O
'o'	O
)	O
:	O
m	int
=	O
4	int
;	O
break	O
;	O
default	O
:	O
return	O
0	int
;	O
}	O
edit_drop_menu_cmd	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,*(char),*(char),long,long,array(*(char)),array(*(char)),long,int,long,long,long,long,long,long,long,int,int,int,int,int,int,int,int,long,long,long,long,long,long,int,int,long,int,array(int),array(long),*(struct(int,int,*`,*`)),long,*(long),long,long,long,int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,*(struct),*(*(struct`)),long,struct(short,char,char,char,char),*(char),*(struct),int,int,array(struct(short,short)),*(struct(long,long)),*(struct(long,long)),int,array(*(char)))),int)->(void)
(	O
e	*(struct)
,	O
m	int
)	O
;	O
return	O
1	int
;	O
}	O
