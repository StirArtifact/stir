int	O
grad_resolve_hostnames	int
=	O
1	int
;	O
static	O
int	O
good_ipaddr	(*(char))->(int)
(	O
const	O
char	O
*	O
addr	int
)	O
{	O
int	O
dot_count	int
;	O
int	O
digit_count	int
;	O
dot_count	int
=	O
0	int
;	O
digit_count	int
=	O
0	int
;	O
while	O
(	O
*	O
addr	int
!=	O
0	int
&&	O
*	O
addr	int
!=	O
' '	O
)	O
{	O
if	O
(	O
*	O
addr	int
==	O
'.'	O
)	O
{	O
if	O
(	O
++	O
dot_count	int
>	O
3	int
)	O
break	O
;	O
digit_count	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
!	O
(	O
isdigit	(int)->(int)
(	O
*	O
addr	int
)	O
&&	O
++	O
digit_count	int
<=	O
3	int
)	O
)	O
{	O
return	O
-	O
1	int
;	O
}	O
addr	int
++	O
;	O
}	O
return	O
(	O
dot_count	int
!=	O
3	int
)	O
;	O
}	O
char	O
*	O
grad_ip_gethostname	(int,*(char),long)->(*(char))
(	O
grad_uint32_t	int
ipaddr	int
,	O
char	O
*	O
namebuf	*(char)
,	O
size_t	long
size	int
)	O
{	O
struct	O
hostent	struct(*(char),*(*(char)),int,int,*(*(char)))
*	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
,	O
hent	struct(*(char),*(*(char)),int,int,*(*(char)))
;	O
char	O
buffer	*(char)
[	O
512	int
]	O
;	O
grad_uint32_t	int
n_ipaddr	int
;	O
int	O
h_err	int
,	O
len	int
;	O
n_ipaddr	int
=	O
htonl	(int)->(int)
(	O
ipaddr	int
)	O
;	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
=	O
(	O
struct	O
hostent	struct(*(char),*(*(char)),int,int,*(*(char)))
*	O
)	O
NULL	O
;	O
if	O
(	O
grad_resolve_hostnames	int
)	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
=	O
grad_gethostbyaddr_r	(*(char),int,int,*(struct(*(char),*(*(char)),int,int,*(*(char)))),*(char),int,*(int))->(*(struct(*(char),*(*(char)),int,int,*(*(char)))))
(	O
(	O
char	O
*	O
)	O
&	O
n_ipaddr	int
,	O
sizeof	O
(	O
struct	O
in_addr	struct(int)
)	O
,	O
AF_INET	O
,	O
&	O
hent	struct(*(char),*(*(char)),int,int,*(*(char)))
,	O
buffer	*(char)
,	O
sizeof	O
buffer	*(char)
,	O
&	O
h_err	int
)	O
;	O
if	O
(	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
==	O
(	O
struct	O
hostent	struct(*(char),*(*(char)),int,int,*(*(char)))
*	O
)	O
NULL	O
)	O
return	O
grad_ip_iptostr	(int,*(char))->(*(char))
(	O
ipaddr	int
,	O
namebuf	*(char)
)	O
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
(	O
char	O
*	O
)	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_name	*(char)
)	O
;	O
if	O
(	O
len	int
>	O
size	int
)	O
len	int
=	O
size	int
-	O
1	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
namebuf	*(char)
,	O
(	O
char	O
*	O
)	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_name	*(char)
,	O
len	int
)	O
;	O
namebuf	*(char)
[	O
len	int
]	O
=	O
0	int
;	O
return	O
namebuf	*(char)
;	O
}	O
grad_uint32_t	int
grad_ip_gethostaddr	(*(char))->(int)
(	O
const	O
char	O
*	O
host	int
)	O
{	O
struct	O
hostent	struct(*(char),*(*(char)),int,int,*(*(char)))
*	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
,	O
hent	struct(*(char),*(*(char)),int,int,*(*(char)))
;	O
char	O
buffer	*(char)
[	O
512	int
]	O
;	O
int	O
h_err	int
;	O
if	O
(	O
good_ipaddr	(*(char))->(int)
(	O
host	int
)	O
==	O
0	int
)	O
{	O
return	O
grad_ip_strtoip	(*(char))->(int)
(	O
host	int
)	O
;	O
}	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
=	O
grad_gethostbyname_r	(*(char),*(struct(*(char),*(*(char)),int,int,*(*(char)))),*(char),int,*(int))->(*(struct(*(char),*(*(char)),int,int,*(*(char)))))
(	O
host	int
,	O
&	O
hent	struct(*(char),*(*(char)),int,int,*(*(char)))
,	O
buffer	*(char)
,	O
sizeof	O
(	O
buffer	*(char)
)	O
,	O
&	O
h_err	int
)	O
;	O
if	O
(	O
!	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
)	O
return	O
0	int
;	O
return	O
ntohl	(int)->(int)
(	O
*	O
(	O
grad_uint32_t	int
*	O
)	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_addr	O
)	O
;	O
}	O
char	O
*	O
grad_ip_iptostr	(int,*(char))->(*(char))
(	O
grad_uint32_t	int
ipaddr	int
,	O
char	O
*	O
bufp	*(char)
)	O
{	O
static	O
char	O
buffer	*(char)
[	O
GRAD_IPV4_STRING_LENGTH	int
]	O
;	O
if	O
(	O
!	O
bufp	*(char)
)	O
bufp	*(char)
=	O
buffer	*(char)
;	O
sprintf	(*(char),*(char))->(int)
(	O
bufp	*(char)
,	O
"%u.%u.%u.%u"	*(char)
,	O
(	O
u_int	int
)	O
(	O
(	O
ipaddr	int
>>	O
24	int
)	O
&	O
0xff	int
)	O
,	O
(	O
u_int	int
)	O
(	O
(	O
ipaddr	int
>>	O
16	int
)	O
&	O
0xff	int
)	O
,	O
(	O
u_int	int
)	O
(	O
(	O
ipaddr	int
>>	O
8	int
)	O
&	O
0xff	int
)	O
,	O
(	O
u_int	int
)	O
(	O
ipaddr	int
&	O
0xff	int
)	O
)	O
;	O
return	O
bufp	*(char)
;	O
}	O
grad_uint32_t	int
grad_ip_strtoip	(*(char))->(int)
(	O
const	O
char	O
*	O
ip_str	*(char)
)	O
{	O
struct	O
in_addr	struct(int)
in	struct(int)
;	O
if	O
(	O
inet_aton	(*(char),*(struct(int)))->(int)
(	O
ip_str	*(char)
,	O
&	O
in	struct(int)
)	O
)	O
return	O
ntohl	(int)->(int)
(	O
in	struct(int)
.	O
s_addr	int
)	O
;	O
return	O
0	int
;	O
}	O
int	O
grad_ip_getnetaddr	(*(char),*(struct(int,int)))->(int)
(	O
const	O
char	O
*	O
str	*(char)
,	O
grad_netdef_t	struct
*	O
netdef	struct(int,int)
)	O
{	O
char	O
*	O
p	*(struct)
=	O
strchr	(*(char),int)->(*(char))
(	O
str	*(char)
,	O
'/'	O
)	O
;	O
if	O
(	O
!	O
p	*(struct)
)	O
{	O
netdef	struct(int,int)
->	O
netmask	int
=	O
0xfffffffful	int
;	O
netdef	struct(int,int)
->	O
ipaddr	int
=	O
grad_ip_gethostaddr	(*(char))->(int)
(	O
str	*(char)
)	O
;	O
}	O
else	O
{	O
char	O
buf	*(char)
[	O
GRAD_IPV4_STRING_LENGTH	int
]	O
;	O
size_t	long
len	int
=	O
p	*(struct)
-	O
str	*(char)
;	O
if	O
(	O
len	int
>=	O
GRAD_IPV4_STRING_LENGTH	int
)	O
return	O
1	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
buf	*(char)
,	O
str	*(char)
,	O
len	int
)	O
;	O
buf	*(char)
[	O
len	int
]	O
=	O
0	int
;	O
netdef	struct(int,int)
->	O
ipaddr	int
=	O
grad_ip_strtoip	(*(char))->(int)
(	O
buf	*(char)
)	O
;	O
if	O
(	O
good_ipaddr	(*(char))->(int)
(	O
p	*(struct)
+	O
1	int
)	O
==	O
0	int
)	O
netdef	struct(int,int)
->	O
netmask	int
=	O
grad_ip_strtoip	(*(char))->(int)
(	O
p	*(struct)
+	O
1	int
)	O
;	O
else	O
{	O
char	O
*	O
endp	*(*(char))
;	O
grad_uint32_t	int
n	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
p	*(struct)
+	O
1	int
,	O
&	O
endp	*(*(char))
,	O
0	int
)	O
;	O
if	O
(	O
*	O
endp	*(*(char))
||	O
n	long
>	O
32	int
)	O
return	O
1	int
;	O
n	long
=	O
32	int
-	O
n	long
;	O
if	O
(	O
n	long
==	O
32	int
)	O
netdef	struct(int,int)
->	O
netmask	int
=	O
0	int
;	O
else	O
netdef	struct(int,int)
->	O
netmask	int
=	O
(	O
0xfffffffful	int
>>	O
n	long
)	O
<<	O
n	long
;	O
}	O
netdef	struct(int,int)
->	O
ipaddr	int
&=	O
netdef	struct(int,int)
->	O
netmask	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
grad_ip_in_net_p	(*(struct(int,int)),int)->(int)
(	O
const	O
grad_netdef_t	struct
*	O
netdef	struct(int,int)
,	O
grad_uint32_t	int
ipaddr	int
)	O
{	O
return	O
netdef	struct(int,int)
->	O
ipaddr	int
==	O
(	O
ipaddr	int
&	O
netdef	struct(int,int)
->	O
netmask	int
)	O
;	O
}	O
