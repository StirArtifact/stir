static	O
bool	bool
quiet	O
;	O
static	O
int	O
verbosity_level	O
;	O
static	O
int	O
force_po	O
;	O
static	O
bool	bool
multi_domain_mode	O
=	O
false	O
;	O
static	O
bool	bool
for_msgfmt	O
=	O
false	O
;	O
static	O
bool	bool
use_fuzzy_matching	O
=	O
true	O
;	O
static	O
bool	bool
keep_previous	O
=	O
false	O
;	O
static	O
const	O
char	O
*	O
catalogname	O
=	O
NULL	O
;	O
static	O
message_list_list_ty	struct
*	O
compendiums	O
;	O
static	O
string_list_ty	struct
*	O
compendium_filenames	O
;	O
static	O
bool	bool
update_mode	O
=	O
false	O
;	O
static	O
const	O
char	O
*	O
version_control_string	O
;	O
static	O
const	O
char	O
*	O
backup_suffix_string	O
;	O
static	O
const	O
struct	O
option	struct(*(char),int,*(int),int)
long_options	O
[	O
]	O
=	O
{	O
{	O
"add-location"	*(char)
,	O
optional_argument	O
,	O
NULL	O
,	O
'n'	O
}	O
,	O
{	O
"backup"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
1	int
}	O
,	O
{	O
"color"	*(char)
,	O
optional_argument	O
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
9	int
}	O
,	O
{	O
"compendium"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
'C'	O
}	O
,	O
{	O
"directory"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
'D'	O
}	O
,	O
{	O
"escape"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
'E'	O
}	O
,	O
{	O
"for-msgfmt"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
12	int
}	O
,	O
{	O
"force-po"	*(char)
,	O
no_argument	O
,	O
&	O
force_po	O
,	O
1	int
}	O
,	O
{	O
"help"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
'h'	O
}	O
,	O
{	O
"indent"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
'i'	O
}	O
,	O
{	O
"lang"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
8	int
}	O
,	O
{	O
"multi-domain"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
'm'	O
}	O
,	O
{	O
"no-escape"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
'e'	O
}	O
,	O
{	O
"no-fuzzy-matching"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
'N'	O
}	O
,	O
{	O
"no-location"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
11	int
}	O
,	O
{	O
"no-wrap"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
4	int
}	O
,	O
{	O
"output-file"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
'o'	O
}	O
,	O
{	O
"previous"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
7	int
}	O
,	O
{	O
"properties-input"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
'P'	O
}	O
,	O
{	O
"properties-output"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
'p'	O
}	O
,	O
{	O
"quiet"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
'q'	O
}	O
,	O
{	O
"sort-by-file"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
'F'	O
}	O
,	O
{	O
"sort-output"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
's'	O
}	O
,	O
{	O
"silent"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
'q'	O
}	O
,	O
{	O
"strict"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
2	int
}	O
,	O
{	O
"stringtable-input"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
5	int
}	O
,	O
{	O
"stringtable-output"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
6	int
}	O
,	O
{	O
"style"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
10	int
}	O
,	O
{	O
"suffix"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
3	int
}	O
,	O
{	O
"update"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
'U'	O
}	O
,	O
{	O
"verbose"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
'v'	O
}	O
,	O
{	O
"version"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
'V'	O
}	O
,	O
{	O
"width"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
'w'	O
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
struct	O
statistics	O
{	O
size_t	long
merged	O
;	O
size_t	long
fuzzied	O
;	O
size_t	long
missing	O
;	O
size_t	long
obsolete	bool
;	O
}	O
;	O
static	O
void	O
usage	O
(	O
int	O
status	O
)	O
__attribute__	O
(	O
(	O
noreturn	O
)	O
)	O
;	O
static	O
void	O
compendium	O
(	O
const	O
char	O
*	O
filename	*(char)
)	O
;	O
static	O
void	O
msgdomain_list_stablesort_by_obsolete	O
(	O
msgdomain_list_ty	struct
*	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
)	O
;	O
static	O
msgdomain_list_ty	struct
*	O
merge	O
(	O
const	O
char	O
*	O
fn1	O
,	O
const	O
char	O
*	O
fn2	O
,	O
catalog_input_format_ty	*(struct(*((*(struct`),*(struct`),*(char),*(char))->(void)),bool))
input_syntax	*(struct(*((*(struct`),*(struct`),*(char),*(char))->(void)),bool))
,	O
msgdomain_list_ty	struct
*	O
*	O
defp	O
)	O
;	O
int	O
main	O
(	O
int	O
argc	O
,	O
char	O
*	O
*	O
argv	O
)	O
{	O
int	O
opt	O
;	O
bool	bool
do_help	O
;	O
bool	bool
do_version	O
;	O
char	O
*	O
output_file	O
;	O
char	O
*	O
color	int
;	O
msgdomain_list_ty	struct
*	O
def	O
;	O
msgdomain_list_ty	struct
*	O
result	*(*(void))
;	O
catalog_input_format_ty	*(struct(*((*(struct`),*(struct`),*(char),*(char))->(void)),bool))
input_syntax	*(struct(*((*(struct`),*(struct`),*(char),*(char))->(void)),bool))
=	O
&	O
input_format_po	struct(*((*(struct(*`)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),*(char))->(void)),bool)
;	O
catalog_output_format_ty	*(struct(*((*(struct`),*(struct`),long,bool)->(void)),bool,bool,bool,bool,bool,bool,bool,bool))
output_syntax	*(struct(*((*(struct`),*(struct`),long,bool)->(void)),bool,bool,bool,bool,bool,bool,bool,bool))
=	O
&	O
output_format_po	struct(*((*(struct(*`,long,long,bool,*`)),*(struct),long,bool)->(void)),bool,bool,bool,bool,bool,bool,bool,bool)
;	O
bool	bool
sort_by_filepos	O
=	O
false	O
;	O
bool	bool
sort_by_msgid	O
=	O
false	O
;	O
set_program_name	(*(char))->(void)
(	O
argv	O
[	O
0	int
]	O
)	O
;	O
error_print_progname	*(()->(void))
=	O
maybe_print_progname	()->(void)
;	O
verbosity_level	O
=	O
0	int
;	O
quiet	O
=	O
false	O
;	O
gram_max_allowed_errors	int
=	O
UINT_MAX	O
;	O
setlocale	(int,*(char))->(*(char))
(	O
LC_ALL	O
,	O
""	*(char)
)	O
;	O
bindtextdomain	O
(	O
PACKAGE	O
,	O
relocate	O
(	O
LOCALEDIR	O
)	O
)	O
;	O
bindtextdomain	O
(	O
"bison-runtime"	*(char)
,	O
relocate	O
(	O
BISON_LOCALEDIR	O
)	O
)	O
;	O
textdomain	O
(	O
PACKAGE	O
)	O
;	O
atexit	(*(()->(void)))->(int)
(	O
close_stdout	()->(void)
)	O
;	O
do_help	O
=	O
false	O
;	O
do_version	O
=	O
false	O
;	O
output_file	O
=	O
NULL	O
;	O
color	int
=	O
NULL	O
;	O
while	O
(	O
(	O
opt	O
=	O
getopt_long	(int,*(*(char)),*(char),*(struct(*(char),int,*(int),int)),*(int))->(int)
(	O
argc	O
,	O
argv	O
,	O
"C:D:eEFhimn:No:pPqsUvVw:"	*(char)
,	O
long_options	O
,	O
NULL	O
)	O
)	O
!=	O
EOF	O
)	O
switch	O
(	O
opt	O
)	O
{	O
case	O
'\0'	O
:	O
break	O
;	O
case	O
'C'	O
:	O
compendium	O
(	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
'D'	O
:	O
dir_list_append	(*(char))->(void)
(	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
'e'	O
:	O
message_print_style_escape	(bool)->(void)
(	O
false	O
)	O
;	O
break	O
;	O
case	O
'E'	O
:	O
message_print_style_escape	(bool)->(void)
(	O
true	O
)	O
;	O
break	O
;	O
case	O
'F'	O
:	O
sort_by_filepos	O
=	O
true	O
;	O
break	O
;	O
case	O
'h'	O
:	O
do_help	O
=	O
true	O
;	O
break	O
;	O
case	O
'i'	O
:	O
message_print_style_indent	()->(void)
(	O
)	O
;	O
break	O
;	O
case	O
'm'	O
:	O
multi_domain_mode	O
=	O
true	O
;	O
break	O
;	O
case	O
'n'	O
:	O
if	O
(	O
handle_filepos_comment_option	(*(char))->(bool)
(	O
optarg	*(char)
)	O
)	O
usage	O
(	O
EXIT_FAILURE	int
)	O
;	O
break	O
;	O
case	O
'N'	O
:	O
use_fuzzy_matching	O
=	O
false	O
;	O
break	O
;	O
case	O
'o'	O
:	O
output_file	O
=	O
optarg	*(char)
;	O
break	O
;	O
case	O
'p'	O
:	O
output_syntax	*(struct(*((*(struct`),*(struct`),long,bool)->(void)),bool,bool,bool,bool,bool,bool,bool,bool))
=	O
&	O
output_format_properties	struct(*((*(struct(*`,long,long,bool,*`)),*(struct),long,bool)->(void)),bool,bool,bool,bool,bool,bool,bool,bool)
;	O
break	O
;	O
case	O
'P'	O
:	O
input_syntax	*(struct(*((*(struct`),*(struct`),*(char),*(char))->(void)),bool))
=	O
&	O
input_format_properties	struct(*((*(struct(*`)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),*(char))->(void)),bool)
;	O
break	O
;	O
case	O
'q'	O
:	O
quiet	O
=	O
true	O
;	O
break	O
;	O
case	O
's'	O
:	O
sort_by_msgid	O
=	O
true	O
;	O
break	O
;	O
case	O
'U'	O
:	O
update_mode	O
=	O
true	O
;	O
break	O
;	O
case	O
'v'	O
:	O
++	O
verbosity_level	O
;	O
break	O
;	O
case	O
'V'	O
:	O
do_version	O
=	O
true	O
;	O
break	O
;	O
case	O
'w'	O
:	O
{	O
int	O
value	O
;	O
char	O
*	O
endp	O
;	O
value	O
=	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
optarg	*(char)
,	O
&	O
endp	O
,	O
10	int
)	O
;	O
if	O
(	O
endp	O
!=	O
optarg	*(char)
)	O
message_page_width_set	(long)->(void)
(	O
value	O
)	O
;	O
}	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
1	int
:	O
version_control_string	O
=	O
optarg	*(char)
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
2	int
:	O
message_print_style_uniforum	()->(void)
(	O
)	O
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
3	int
:	O
backup_suffix_string	O
=	O
optarg	*(char)
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
4	int
:	O
message_page_width_ignore	()->(void)
(	O
)	O
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
5	int
:	O
input_syntax	*(struct(*((*(struct`),*(struct`),*(char),*(char))->(void)),bool))
=	O
&	O
input_format_stringtable	struct(*((*(struct(*`)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),*(char))->(void)),bool)
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
6	int
:	O
output_syntax	*(struct(*((*(struct`),*(struct`),long,bool)->(void)),bool,bool,bool,bool,bool,bool,bool,bool))
=	O
&	O
output_format_stringtable	struct(*((*(struct(*`,long,long,bool,*`)),*(struct),long,bool)->(void)),bool,bool,bool,bool,bool,bool,bool,bool)
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
7	int
:	O
keep_previous	O
=	O
true	O
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
8	int
:	O
catalogname	O
=	O
optarg	*(char)
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
9	int
:	O
if	O
(	O
handle_color_option	(*(char))->(bool)
(	O
optarg	*(char)
)	O
||	O
color_test_mode	bool
)	O
usage	O
(	O
EXIT_FAILURE	int
)	O
;	O
color	int
=	O
optarg	*(char)
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
10	int
:	O
handle_style_option	(*(char))->(void)
(	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
11	int
:	O
message_print_style_filepos	(enum(int,int,int))->(void)
(	O
filepos_comment_none	int
)	O
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
12	int
:	O
for_msgfmt	O
=	O
true	O
;	O
break	O
;	O
default	O
:	O
usage	O
(	O
EXIT_FAILURE	int
)	O
;	O
break	O
;	O
}	O
if	O
(	O
do_version	O
)	O
{	O
printf	(*(char))->(int)
(	O
"%s (GNU %s) %s\n"	*(char)
,	O
basename	(*(char))->(*(char))
(	O
program_name	*(char)
)	O
,	O
PACKAGE	O
,	O
VERSION	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Copyright (C) %s Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n"	*(char)
)	O
,	O
"1995-2019"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Written by %s.\n"	*(char)
)	O
,	O
proper_name	O
(	O
"Peter Miller"	*(char)
)	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	O
)	O
;	O
}	O
if	O
(	O
do_help	O
)	O
usage	O
(	O
EXIT_SUCCESS	O
)	O
;	O
if	O
(	O
optind	int
>=	O
argc	O
)	O
{	O
error	(int,int,*(char))->(void)
(	O
EXIT_SUCCESS	O
,	O
0	int
,	O
_	O
(	O
"no input files given"	*(char)
)	O
)	O
;	O
usage	O
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
optind	int
+	O
2	int
!=	O
argc	O
)	O
{	O
error	(int,int,*(char))->(void)
(	O
EXIT_SUCCESS	O
,	O
0	int
,	O
_	O
(	O
"exactly 2 input files required"	*(char)
)	O
)	O
;	O
usage	O
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
update_mode	O
)	O
{	O
if	O
(	O
output_file	O
!=	O
NULL	O
)	O
{	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"%s and %s are mutually exclusive"	*(char)
)	O
,	O
"--update"	*(char)
,	O
"--output-file"	*(char)
)	O
;	O
}	O
if	O
(	O
for_msgfmt	O
)	O
{	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"%s and %s are mutually exclusive"	*(char)
)	O
,	O
"--update"	*(char)
,	O
"--for-msgfmt"	*(char)
)	O
;	O
}	O
if	O
(	O
color	int
!=	O
NULL	O
)	O
{	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"%s and %s are mutually exclusive"	*(char)
)	O
,	O
"--update"	*(char)
,	O
"--color"	*(char)
)	O
;	O
}	O
if	O
(	O
style_file_name	*(char)
!=	O
NULL	O
)	O
{	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"%s and %s are mutually exclusive"	*(char)
)	O
,	O
"--update"	*(char)
,	O
"--style"	*(char)
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
version_control_string	O
!=	O
NULL	O
)	O
{	O
error	(int,int,*(char))->(void)
(	O
EXIT_SUCCESS	O
,	O
0	int
,	O
_	O
(	O
"%s is only valid with %s"	*(char)
)	O
,	O
"--backup"	*(char)
,	O
"--update"	*(char)
)	O
;	O
usage	O
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
backup_suffix_string	O
!=	O
NULL	O
)	O
{	O
error	(int,int,*(char))->(void)
(	O
EXIT_SUCCESS	O
,	O
0	int
,	O
_	O
(	O
"%s is only valid with %s"	*(char)
)	O
,	O
"--suffix"	*(char)
,	O
"--update"	*(char)
)	O
;	O
usage	O
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
if	O
(	O
sort_by_msgid	O
&&	O
sort_by_filepos	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"%s and %s are mutually exclusive"	*(char)
)	O
,	O
"--sort-output"	*(char)
,	O
"--sort-by-file"	*(char)
)	O
;	O
if	O
(	O
update_mode	O
&&	O
input_syntax	*(struct(*((*(struct`),*(struct`),*(char),*(char))->(void)),bool))
==	O
&	O
input_format_properties	struct(*((*(struct(*`)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),*(char))->(void)),bool)
)	O
output_syntax	*(struct(*((*(struct`),*(struct`),long,bool)->(void)),bool,bool,bool,bool,bool,bool,bool,bool))
=	O
&	O
output_format_properties	struct(*((*(struct(*`,long,long,bool,*`)),*(struct),long,bool)->(void)),bool,bool,bool,bool,bool,bool,bool,bool)
;	O
if	O
(	O
update_mode	O
&&	O
input_syntax	*(struct(*((*(struct`),*(struct`),*(char),*(char))->(void)),bool))
==	O
&	O
input_format_stringtable	struct(*((*(struct(*`)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),*(char))->(void)),bool)
)	O
output_syntax	*(struct(*((*(struct`),*(struct`),long,bool)->(void)),bool,bool,bool,bool,bool,bool,bool,bool))
=	O
&	O
output_format_stringtable	struct(*((*(struct(*`,long,long,bool,*`)),*(struct),long,bool)->(void)),bool,bool,bool,bool,bool,bool,bool,bool)
;	O
if	O
(	O
for_msgfmt	O
)	O
{	O
use_fuzzy_matching	O
=	O
false	O
;	O
quiet	O
=	O
true	O
;	O
message_print_style_comment	(bool)->(void)
(	O
false	O
)	O
;	O
message_print_style_filepos	(enum(int,int,int))->(void)
(	O
filepos_comment_none	int
)	O
;	O
}	O
openmp_init	()->(void)
(	O
)	O
;	O
result	*(*(void))
=	O
merge	O
(	O
argv	O
[	O
optind	int
]	O
,	O
argv	O
[	O
optind	int
+	O
1	int
]	O
,	O
input_syntax	*(struct(*((*(struct`),*(struct`),*(char),*(char))->(void)),bool))
,	O
&	O
def	O
)	O
;	O
if	O
(	O
sort_by_filepos	O
)	O
msgdomain_list_sort_by_filepos	(*(struct(*(*(struct`)),long,long,bool,*(char))))->(void)
(	O
result	*(*(void))
)	O
;	O
else	O
if	O
(	O
sort_by_msgid	O
)	O
msgdomain_list_sort_by_msgid	(*(struct(*(*(struct`)),long,long,bool,*(char))))->(void)
(	O
result	*(*(void))
)	O
;	O
if	O
(	O
update_mode	O
)	O
{	O
if	O
(	O
output_syntax	*(struct(*((*(struct`),*(struct`),long,bool)->(void)),bool,bool,bool,bool,bool,bool,bool,bool))
->	O
sorts_obsoletes_to_end	bool
)	O
msgdomain_list_stablesort_by_obsolete	O
(	O
result	*(*(void))
)	O
;	O
if	O
(	O
!	O
msgdomain_list_equal	O
(	O
def	O
,	O
result	*(*(void))
,	O
true	O
)	O
)	O
{	O
enum	O
backup_type	O
backup_type	O
;	O
char	O
*	O
backup_file	O
;	O
output_file	O
=	O
argv	O
[	O
optind	int
]	O
;	O
if	O
(	O
backup_suffix_string	O
==	O
NULL	O
)	O
{	O
backup_suffix_string	O
=	O
getenv	(*(char))->(*(char))
(	O
"SIMPLE_BACKUP_SUFFIX"	*(char)
)	O
;	O
if	O
(	O
backup_suffix_string	O
!=	O
NULL	O
&&	O
backup_suffix_string	O
[	O
0	int
]	O
==	O
'\0'	O
)	O
backup_suffix_string	O
=	O
NULL	O
;	O
}	O
if	O
(	O
backup_suffix_string	O
!=	O
NULL	O
)	O
simple_backup_suffix	O
=	O
backup_suffix_string	O
;	O
backup_type	O
=	O
xget_version	O
(	O
_	O
(	O
"backup type"	*(char)
)	O
,	O
version_control_string	O
)	O
;	O
if	O
(	O
backup_type	O
!=	O
none	O
)	O
{	O
backup_file	O
=	O
find_backup_file_name	O
(	O
output_file	O
,	O
backup_type	O
)	O
;	O
copy_file_preserving	O
(	O
output_file	O
,	O
backup_file	O
)	O
;	O
}	O
msgdomain_list_print	(*(struct(*(*(struct`)),long,long,bool,*(char))),*(char),*(struct(*((*`,*`,long,bool)->(void)),bool,bool,bool,bool,bool,bool,bool,bool)),bool,bool)->(void)
(	O
result	*(*(void))
,	O
output_file	O
,	O
output_syntax	*(struct(*((*(struct`),*(struct`),long,bool)->(void)),bool,bool,bool,bool,bool,bool,bool,bool))
,	O
true	O
,	O
false	O
)	O
;	O
}	O
}	O
else	O
{	O
msgdomain_list_print	(*(struct(*(*(struct`)),long,long,bool,*(char))),*(char),*(struct(*((*`,*`,long,bool)->(void)),bool,bool,bool,bool,bool,bool,bool,bool)),bool,bool)->(void)
(	O
result	*(*(void))
,	O
output_file	O
,	O
output_syntax	*(struct(*((*(struct`),*(struct`),long,bool)->(void)),bool,bool,bool,bool,bool,bool,bool,bool))
,	O
force_po	O
,	O
false	O
)	O
;	O
}	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	O
)	O
;	O
}	O
static	O
void	O
usage	O
(	O
int	O
status	O
)	O
{	O
if	O
(	O
status	O
!=	O
EXIT_SUCCESS	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"Try '%s --help' for more information.\n"	*(char)
)	O
,	O
program_name	*(char)
)	O
;	O
else	O
{	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Usage: %s [OPTION] def.po ref.pot\n"	*(char)
)	O
,	O
program_name	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Merges two Uniforum style .po files together.  The def.po file is an\nexisting PO file with translations which will be taken over to the newly\ncreated file as long as they still match; comments will be preserved,\nbut extracted comments and file positions will be discarded.  The ref.pot\nfile is the last created PO file with up-to-date source references but\nold translations, or a PO Template file (generally created by xgettext);\nany translations or comments in the file will be discarded, however dot\ncomments and file positions will be preserved.  Where an exact match\ncannot be found, fuzzy matching is used to produce better results.\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Mandatory arguments to long options are mandatory for short options too.\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Input file location:\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  def.po                      translations referring to old sources\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  ref.pot                     references to new sources\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -D, --directory=DIRECTORY   add DIRECTORY to list for input files search\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -C, --compendium=FILE       additional library of message translations,\n                              may be specified more than once\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Operation mode:\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -U, --update                update def.po,\n                              do nothing if def.po already up to date\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Output file location:\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -o, --output-file=FILE      write output to specified file\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"The results are written to standard output if no output file is specified\nor if it is -.\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Output file location in update mode:\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"The result is written back to def.po.\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --backup=CONTROL        make a backup of def.po\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --suffix=SUFFIX         override the usual backup suffix\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"The version control method may be selected via the --backup option or through\nthe VERSION_CONTROL environment variable.  Here are the values:\n  none, off       never make backups (even if --backup is given)\n  numbered, t     make numbered backups\n  existing, nil   numbered if numbered backups exist, simple otherwise\n  simple, never   always make simple backups\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"The backup suffix is '~', unless set with --suffix or the SIMPLE_BACKUP_SUFFIX\nenvironment variable.\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Operation modifiers:\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -m, --multi-domain          apply ref.pot to each of the domains in def.po\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --for-msgfmt            produce output for '%s', not for a translator\n"	*(char)
)	O
,	O
"msgfmt"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -N, --no-fuzzy-matching     do not use fuzzy matching\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --previous              keep previous msgids of translated messages\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Input file syntax:\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -P, --properties-input      input files are in Java .properties syntax\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --stringtable-input     input files are in NeXTstep/GNUstep .strings\n                              syntax\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Output details:\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --lang=CATALOGNAME      set 'Language' field in the header entry\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --color                 use colors and other text attributes always\n      --color=WHEN            use colors and other text attributes if WHEN.\n                              WHEN may be 'always', 'never', 'auto', or 'html'.\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --style=STYLEFILE       specify CSS style rule file for --color\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -e, --no-escape             do not use C escapes in output (default)\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -E, --escape                use C escapes in output, no extended chars\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --force-po              write PO file even if empty\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -i, --indent                indented output style\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --no-location           suppress '#: filename:line' lines\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -n, --add-location          preserve '#: filename:line' lines (default)\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --strict                strict Uniforum output style\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -p, --properties-output     write out a Java .properties file\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --stringtable-output    write out a NeXTstep/GNUstep .strings file\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -w, --width=NUMBER          set output page width\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --no-wrap               do not break long message lines, longer than\n                              the output page width, into several lines\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -s, --sort-output           generate sorted output\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -F, --sort-by-file          sort output by file location\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Informative output:\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -h, --help                  display this help and exit\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -V, --version               output version information and exit\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -v, --verbose               increase verbosity level\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -q, --quiet, --silent       suppress progress indicators\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
_	O
(	O
"Report bugs to <bug-gnu-gettext@gnu.org>.\n"	*(char)
)	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
exit	(int)->(void)
(	O
status	O
)	O
;	O
}	O
static	O
void	O
compendium	O
(	O
const	O
char	O
*	O
filename	*(char)
)	O
{	O
msgdomain_list_ty	struct
*	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
;	O
size_t	long
k	O
;	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
=	O
read_catalog_file	(*(char),*(struct(*((*`,*`,*`,*`)->(void)),bool)))->(*(struct(*(*(struct`)),long,long,bool,*(char))))
(	O
filename	*(char)
,	O
&	O
input_format_po	struct(*((*(struct(*`)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),*(char))->(void)),bool)
)	O
;	O
if	O
(	O
compendiums	O
==	O
NULL	O
)	O
{	O
compendiums	O
=	O
message_list_list_alloc	()->(*(struct(*(*(struct`)),long,long)))
(	O
)	O
;	O
compendium_filenames	O
=	O
string_list_alloc	()->(*(struct(*(*(char)),long,long)))
(	O
)	O
;	O
}	O
for	O
(	O
k	O
=	O
0	int
;	O
k	O
<	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
->	O
nitems	long
;	O
k	O
++	O
)	O
{	O
message_list_list_append	(*(struct(*(*(struct`)),long,long)),*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))))->(void)
(	O
compendiums	O
,	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
->	O
item	*(*(char))
[	O
k	O
]	O
->	O
messages	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
)	O
;	O
string_list_append	(*(struct(*(*(char)),long,long)),*(char))->(void)
(	O
compendium_filenames	O
,	O
filename	*(char)
)	O
;	O
}	O
}	O
static	O
void	O
msgdomain_list_stablesort_by_obsolete	O
(	O
msgdomain_list_ty	struct
*	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
)	O
{	O
size_t	long
k	O
;	O
for	O
(	O
k	O
=	O
0	int
;	O
k	O
<	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
->	O
nitems	long
;	O
k	O
++	O
)	O
{	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
=	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
->	O
item	*(*(char))
[	O
k	O
]	O
->	O
messages	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
;	O
if	O
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
nitems	long
>	O
0	int
)	O
{	O
message_ty	struct
*	O
*	O
l1	O
=	O
XNMALLOC	O
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
nitems	long
,	O
message_ty	struct
*	O
)	O
;	O
size_t	long
n1	O
;	O
message_ty	struct
*	O
*	O
l2	O
=	O
XNMALLOC	O
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
nitems	long
,	O
message_ty	struct
*	O
)	O
;	O
size_t	long
n2	O
;	O
size_t	long
j	O
;	O
n1	O
=	O
0	int
;	O
n2	O
=	O
0	int
;	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
nitems	long
;	O
j	O
++	O
)	O
{	O
message_ty	struct
*	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
=	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
[	O
j	O
]	O
;	O
if	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
obsolete	bool
)	O
l2	O
[	O
n2	O
++	O
]	O
=	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
;	O
else	O
l1	O
[	O
n1	O
++	O
]	O
=	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
;	O
}	O
if	O
(	O
n1	O
>	O
0	int
&&	O
n2	O
>	O
0	int
)	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
,	O
l1	O
,	O
n1	O
*	O
sizeof	O
(	O
message_ty	struct
*	O
)	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
+	O
n1	O
,	O
l2	O
,	O
n2	O
*	O
sizeof	O
(	O
message_ty	struct
*	O
)	O
)	O
;	O
}	O
free	(*(void))->(void)
(	O
l2	O
)	O
;	O
free	(*(void))->(void)
(	O
l1	O
)	O
;	O
}	O
}	O
}	O
typedef	O
struct	O
definitions_ty	O
definitions_ty	O
;	O
struct	O
definitions_ty	O
{	O
message_list_list_ty	struct
*	O
lists	O
;	O
message_fuzzy_index_ty	O
*	O
curr_findex	O
;	O
gl_lock_define	O
(	O
,	O
curr_findex_init_lock	O
)	O
message_fuzzy_index_ty	O
*	O
comp_findex	O
;	O
gl_lock_define	O
(	O
,	O
comp_findex_init_lock	O
)	O
const	O
char	O
*	O
canon_charset	O
;	O
}	O
;	O
static	O
inline	O
void	O
definitions_init	O
(	O
definitions_ty	O
*	O
definitions	O
,	O
const	O
char	O
*	O
canon_charset	O
)	O
{	O
definitions	O
->	O
lists	O
=	O
message_list_list_alloc	()->(*(struct(*(*(struct`)),long,long)))
(	O
)	O
;	O
message_list_list_append	(*(struct(*(*(struct`)),long,long)),*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))))->(void)
(	O
definitions	O
->	O
lists	O
,	O
NULL	O
)	O
;	O
if	O
(	O
compendiums	O
!=	O
NULL	O
)	O
message_list_list_append_list	(*(struct(*(*(struct`)),long,long)),*(struct(*(*(struct`)),long,long)))->(void)
(	O
definitions	O
->	O
lists	O
,	O
compendiums	O
)	O
;	O
definitions	O
->	O
curr_findex	O
=	O
NULL	O
;	O
gl_lock_init	O
(	O
definitions	O
->	O
curr_findex_init_lock	O
)	O
;	O
definitions	O
->	O
comp_findex	O
=	O
NULL	O
;	O
gl_lock_init	O
(	O
definitions	O
->	O
comp_findex_init_lock	O
)	O
;	O
definitions	O
->	O
canon_charset	O
=	O
canon_charset	O
;	O
}	O
static	O
inline	O
message_list_ty	struct
*	O
definitions_current_list	O
(	O
const	O
definitions_ty	O
*	O
definitions	O
)	O
{	O
return	O
definitions	O
->	O
lists	O
->	O
item	*(*(char))
[	O
0	int
]	O
;	O
}	O
static	O
inline	O
void	O
definitions_set_current_list	O
(	O
definitions_ty	O
*	O
definitions	O
,	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
)	O
{	O
definitions	O
->	O
lists	O
->	O
item	*(*(char))
[	O
0	int
]	O
=	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
;	O
if	O
(	O
definitions	O
->	O
curr_findex	O
!=	O
NULL	O
)	O
{	O
message_fuzzy_index_free	O
(	O
definitions	O
->	O
curr_findex	O
)	O
;	O
definitions	O
->	O
curr_findex	O
=	O
NULL	O
;	O
}	O
}	O
static	O
inline	O
void	O
definitions_init_curr_findex	O
(	O
definitions_ty	O
*	O
definitions	O
)	O
{	O
gl_lock_lock	O
(	O
definitions	O
->	O
curr_findex_init_lock	O
)	O
;	O
if	O
(	O
definitions	O
->	O
curr_findex	O
==	O
NULL	O
)	O
definitions	O
->	O
curr_findex	O
=	O
message_fuzzy_index_alloc	O
(	O
definitions_current_list	O
(	O
definitions	O
)	O
,	O
definitions	O
->	O
canon_charset	O
)	O
;	O
gl_lock_unlock	O
(	O
definitions	O
->	O
curr_findex_init_lock	O
)	O
;	O
}	O
static	O
inline	O
void	O
definitions_init_comp_findex	O
(	O
definitions_ty	O
*	O
definitions	O
)	O
{	O
gl_lock_lock	O
(	O
definitions	O
->	O
comp_findex_init_lock	O
)	O
;	O
if	O
(	O
definitions	O
->	O
comp_findex	O
==	O
NULL	O
)	O
{	O
message_list_ty	struct
*	O
all_compendium	O
;	O
size_t	long
i	long
;	O
all_compendium	O
=	O
message_list_alloc	(bool)->(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))))
(	O
false	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
compendiums	O
->	O
nitems	long
;	O
i	long
++	O
)	O
{	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
=	O
compendiums	O
->	O
item	*(*(char))
[	O
i	long
]	O
;	O
size_t	long
j	O
;	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
nitems	long
;	O
j	O
++	O
)	O
message_list_append	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))->(void)
(	O
all_compendium	O
,	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
[	O
j	O
]	O
)	O
;	O
}	O
definitions	O
->	O
comp_findex	O
=	O
message_fuzzy_index_alloc	O
(	O
all_compendium	O
,	O
definitions	O
->	O
canon_charset	O
)	O
;	O
}	O
gl_lock_unlock	O
(	O
definitions	O
->	O
comp_findex_init_lock	O
)	O
;	O
}	O
static	O
inline	O
message_ty	struct
*	O
definitions_search	O
(	O
const	O
definitions_ty	O
*	O
definitions	O
,	O
const	O
char	O
*	O
msgctxt	*(char)
,	O
const	O
char	O
*	O
msgid	*(char)
)	O
{	O
return	O
message_list_list_search	(*(struct(*(*(struct`)),long,long)),*(char),*(char))->(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))
(	O
definitions	O
->	O
lists	O
,	O
msgctxt	*(char)
,	O
msgid	*(char)
)	O
;	O
}	O
static	O
inline	O
message_ty	struct
*	O
definitions_search_fuzzy	O
(	O
definitions_ty	O
*	O
definitions	O
,	O
const	O
char	O
*	O
msgctxt	*(char)
,	O
const	O
char	O
*	O
msgid	*(char)
)	O
{	O
message_ty	struct
*	O
mp1	O
;	O
if	O
(	O
false	O
)	O
{	O
mp1	O
=	O
message_list_search_fuzzy	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char),*(char))->(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))
(	O
definitions_current_list	O
(	O
definitions	O
)	O
,	O
msgctxt	*(char)
,	O
msgid	*(char)
)	O
;	O
}	O
else	O
{	O
if	O
(	O
definitions	O
->	O
curr_findex	O
==	O
NULL	O
)	O
definitions_init_curr_findex	O
(	O
definitions	O
)	O
;	O
mp1	O
=	O
message_fuzzy_index_search	O
(	O
definitions	O
->	O
curr_findex	O
,	O
msgctxt	*(char)
,	O
msgid	*(char)
,	O
FUZZY_THRESHOLD	O
,	O
false	O
)	O
;	O
}	O
if	O
(	O
compendiums	O
!=	O
NULL	O
)	O
{	O
double	O
lower_bound_for_mp2	O
;	O
message_ty	struct
*	O
mp2	O
;	O
lower_bound_for_mp2	O
=	O
(	O
mp1	O
!=	O
NULL	O
?	O
fuzzy_search_goal_function	(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))),*(char),*(char),double)->(double)
(	O
mp1	O
,	O
msgctxt	*(char)
,	O
msgid	*(char)
,	O
0.0	int
)	O
:	O
FUZZY_THRESHOLD	O
)	O
;	O
if	O
(	O
!	O
(	O
lower_bound_for_mp2	O
>=	O
FUZZY_THRESHOLD	O
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
if	O
(	O
definitions	O
->	O
comp_findex	O
==	O
NULL	O
)	O
definitions_init_comp_findex	O
(	O
definitions	O
)	O
;	O
mp2	O
=	O
message_fuzzy_index_search	O
(	O
definitions	O
->	O
comp_findex	O
,	O
msgctxt	*(char)
,	O
msgid	*(char)
,	O
lower_bound_for_mp2	O
,	O
true	O
)	O
;	O
if	O
(	O
mp1	O
==	O
NULL	O
||	O
(	O
mp2	O
!=	O
NULL	O
&&	O
(	O
fuzzy_search_goal_function	(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))),*(char),*(char),double)->(double)
(	O
mp2	O
,	O
msgctxt	*(char)
,	O
msgid	*(char)
,	O
lower_bound_for_mp2	O
)	O
>	O
lower_bound_for_mp2	O
)	O
)	O
)	O
mp1	O
=	O
mp2	O
;	O
}	O
return	O
mp1	O
;	O
}	O
static	O
inline	O
void	O
definitions_destroy	O
(	O
definitions_ty	O
*	O
definitions	O
)	O
{	O
message_list_list_free	(*(struct(*(*(struct`)),long,long)),int)->(void)
(	O
definitions	O
->	O
lists	O
,	O
2	int
)	O
;	O
if	O
(	O
definitions	O
->	O
curr_findex	O
!=	O
NULL	O
)	O
message_fuzzy_index_free	O
(	O
definitions	O
->	O
curr_findex	O
)	O
;	O
if	O
(	O
definitions	O
->	O
comp_findex	O
!=	O
NULL	O
)	O
message_fuzzy_index_free	O
(	O
definitions	O
->	O
comp_findex	O
)	O
;	O
}	O
static	O
void	O
silent_error_logger	O
(	O
const	O
char	O
*	O
format	O
,	O
...	O
)	O
__attribute__	O
(	O
(	O
__format__	O
(	O
__printf__	O
,	O
1	int
,	O
2	int
)	O
)	O
)	O
;	O
static	O
void	O
silent_error_logger	O
(	O
const	O
char	O
*	O
format	O
,	O
...	O
)	O
{	O
}	O
static	O
void	O
silent_xerror	O
(	O
int	O
severity	O
,	O
const	O
struct	O
message_ty	struct
*	O
message	*(char)
,	O
const	O
char	O
*	O
filename	*(char)
,	O
size_t	long
lineno	O
,	O
size_t	long
column	O
,	O
int	O
multiline_p	O
,	O
const	O
char	O
*	O
message_text	O
)	O
{	O
}	O
static	O
message_ty	struct
*	O
message_merge	O
(	O
message_ty	struct
*	O
def	O
,	O
message_ty	struct
*	O
ref	O
,	O
bool	bool
force_fuzzy	bool
,	O
const	O
struct	O
plural_distribution	O
*	O
distribution	O
)	O
{	O
const	O
char	O
*	O
msgstr	*(char)
;	O
size_t	long
msgstr_len	long
;	O
const	O
char	O
*	O
prev_msgctxt	*(char)
;	O
const	O
char	O
*	O
prev_msgid	*(char)
;	O
const	O
char	O
*	O
prev_msgid_plural	*(char)
;	O
message_ty	struct
*	O
result	*(*(void))
;	O
size_t	long
j	O
,	O
i	long
;	O
if	O
(	O
is_header	O
(	O
ref	O
)	O
)	O
{	O
static	O
const	O
struct	O
{	O
const	O
char	O
*	O
name	*(char)
;	O
size_t	long
len	long
;	O
}	O
known_fields	O
[	O
]	O
=	O
{	O
{	O
"Project-Id-Version:"	*(char)
,	O
sizeof	O
(	O
"Project-Id-Version:"	*(char)
)	O
-	O
1	int
}	O
,	O
{	O
"Report-Msgid-Bugs-To:"	*(char)
,	O
sizeof	O
(	O
"Report-Msgid-Bugs-To:"	*(char)
)	O
-	O
1	int
}	O
,	O
{	O
"POT-Creation-Date:"	*(char)
,	O
sizeof	O
(	O
"POT-Creation-Date:"	*(char)
)	O
-	O
1	int
}	O
,	O
{	O
"PO-Revision-Date:"	*(char)
,	O
sizeof	O
(	O
"PO-Revision-Date:"	*(char)
)	O
-	O
1	int
}	O
,	O
{	O
"Last-Translator:"	*(char)
,	O
sizeof	O
(	O
"Last-Translator:"	*(char)
)	O
-	O
1	int
}	O
,	O
{	O
"Language-Team:"	*(char)
,	O
sizeof	O
(	O
"Language-Team:"	*(char)
)	O
-	O
1	int
}	O
,	O
{	O
"Language:"	*(char)
,	O
sizeof	O
(	O
"Language:"	*(char)
)	O
-	O
1	int
}	O
,	O
{	O
"MIME-Version:"	*(char)
,	O
sizeof	O
(	O
"MIME-Version:"	*(char)
)	O
-	O
1	int
}	O
,	O
{	O
"Content-Type:"	*(char)
,	O
sizeof	O
(	O
"Content-Type:"	*(char)
)	O
-	O
1	int
}	O
,	O
{	O
"Content-Transfer-Encoding:"	*(char)
,	O
sizeof	O
(	O
"Content-Transfer-Encoding:"	*(char)
)	O
-	O
1	int
}	O
}	O
;	O
struct	O
{	O
const	O
char	O
*	O
string	*(char)
;	O
size_t	long
len	long
;	O
}	O
header_fields	O
[	O
UNKNOWN	O
+	O
1	int
]	O
;	O
struct	O
obstack	struct(long,*(struct(*(char),*(struct(*(char),*(struct`),array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*(void))),*((*(void),long)->(*(void)))),union(*((*(void))->(void)),*((*(void),*(void))->(void))),*(void),int,int,int)
pool	O
;	O
const	O
char	O
*	O
cp	O
;	O
char	O
*	O
newp	O
;	O
size_t	long
len	long
,	O
cnt	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
header_fields	O
,	O
'\0'	O
,	O
sizeof	O
(	O
header_fields	O
)	O
)	O
;	O
obstack_init	O
(	O
&	O
pool	O
)	O
;	O
cp	O
=	O
def	O
->	O
msgstr	*(char)
;	O
while	O
(	O
*	O
cp	O
!=	O
'\0'	O
)	O
{	O
const	O
char	O
*	O
endp	O
=	O
strchr	(*(char),int)->(*(char))
(	O
cp	O
,	O
'\n'	O
)	O
;	O
int	O
terminated	O
=	O
endp	O
!=	O
NULL	O
;	O
if	O
(	O
!	O
terminated	O
)	O
{	O
char	O
*	O
copy	O
;	O
endp	O
=	O
strchr	(*(char),int)->(*(char))
(	O
cp	O
,	O
'\0'	O
)	O
;	O
len	long
=	O
endp	O
-	O
cp	O
+	O
1	int
;	O
copy	O
=	O
(	O
char	O
*	O
)	O
obstack_alloc	O
(	O
&	O
pool	O
,	O
len	long
+	O
1	int
)	O
;	O
stpcpy	(*(char),*(char))->(*(char))
(	O
stpcpy	(*(char),*(char))->(*(char))
(	O
copy	O
,	O
cp	O
)	O
,	O
"\n"	*(char)
)	O
;	O
cp	O
=	O
copy	O
;	O
}	O
else	O
{	O
len	long
=	O
(	O
endp	O
-	O
cp	O
)	O
+	O
1	int
;	O
++	O
endp	O
;	O
}	O
for	O
(	O
cnt	O
=	O
0	int
;	O
cnt	O
<	O
sizeof	O
(	O
known_fields	O
)	O
/	O
sizeof	O
(	O
known_fields	O
[	O
0	int
]	O
)	O
;	O
++	O
cnt	O
)	O
if	O
(	O
c_strncasecmp	O
(	O
cp	O
,	O
known_fields	O
[	O
cnt	O
]	O
.	O
name	*(char)
,	O
known_fields	O
[	O
cnt	O
]	O
.	O
len	long
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
cnt	O
<	O
sizeof	O
(	O
known_fields	O
)	O
/	O
sizeof	O
(	O
known_fields	O
[	O
0	int
]	O
)	O
)	O
{	O
header_fields	O
[	O
cnt	O
]	O
.	O
string	*(char)
=	O
&	O
cp	O
[	O
known_fields	O
[	O
cnt	O
]	O
.	O
len	long
]	O
;	O
header_fields	O
[	O
cnt	O
]	O
.	O
len	long
=	O
len	long
-	O
known_fields	O
[	O
cnt	O
]	O
.	O
len	long
;	O
}	O
else	O
{	O
char	O
*	O
extended	O
=	O
(	O
char	O
*	O
)	O
obstack_alloc	O
(	O
&	O
pool	O
,	O
header_fields	O
[	O
UNKNOWN	O
]	O
.	O
len	long
+	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
header_fields	O
[	O
UNKNOWN	O
]	O
.	O
string	*(char)
)	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
extended	O
,	O
header_fields	O
[	O
UNKNOWN	O
]	O
.	O
string	*(char)
,	O
header_fields	O
[	O
UNKNOWN	O
]	O
.	O
len	long
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
&	O
extended	O
[	O
header_fields	O
[	O
UNKNOWN	O
]	O
.	O
len	long
]	O
,	O
cp	O
,	O
len	long
)	O
;	O
extended	O
[	O
header_fields	O
[	O
UNKNOWN	O
]	O
.	O
len	long
+	O
len	long
]	O
=	O
'\0'	O
;	O
header_fields	O
[	O
UNKNOWN	O
]	O
.	O
string	*(char)
=	O
extended	O
;	O
header_fields	O
[	O
UNKNOWN	O
]	O
.	O
len	long
+=	O
len	long
;	O
}	O
cp	O
=	O
endp	O
;	O
}	O
if	O
(	O
catalogname	O
!=	O
NULL	O
)	O
{	O
size_t	long
len	long
=	O
strlen	(*(char))->(long)
(	O
catalogname	O
)	O
;	O
char	O
*	O
copy	O
=	O
(	O
char	O
*	O
)	O
obstack_alloc	O
(	O
&	O
pool	O
,	O
1	int
+	O
len	long
+	O
1	int
+	O
1	int
)	O
;	O
stpcpy	(*(char),*(char))->(*(char))
(	O
stpcpy	(*(char),*(char))->(*(char))
(	O
stpcpy	(*(char),*(char))->(*(char))
(	O
copy	O
,	O
" "	*(char)
)	O
,	O
catalogname	O
)	O
,	O
"\n"	*(char)
)	O
;	O
header_fields	O
[	O
LANGUAGE	O
]	O
.	O
string	*(char)
=	O
copy	O
;	O
header_fields	O
[	O
LANGUAGE	O
]	O
.	O
len	long
=	O
strlen	(*(char))->(long)
(	O
header_fields	O
[	O
LANGUAGE	O
]	O
.	O
string	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
header_fields	O
[	O
LANGUAGE	O
]	O
.	O
string	*(char)
==	O
NULL	O
)	O
{	O
const	O
char	O
*	O
language_team_ptr	O
=	O
header_fields	O
[	O
LANGUAGE_TEAM	O
]	O
.	O
string	*(char)
;	O
if	O
(	O
language_team_ptr	O
!=	O
NULL	O
)	O
{	O
size_t	long
language_team_len	O
=	O
header_fields	O
[	O
LANGUAGE_TEAM	O
]	O
.	O
len	long
;	O
while	O
(	O
language_team_len	O
>	O
0	int
&&	O
(	O
*	O
language_team_ptr	O
==	O
' '	O
||	O
*	O
language_team_ptr	O
==	O
'\t'	O
)	O
)	O
{	O
language_team_ptr	O
++	O
;	O
language_team_len	O
--	O
;	O
}	O
while	O
(	O
language_team_len	O
>	O
0	int
&&	O
(	O
language_team_ptr	O
[	O
language_team_len	O
-	O
1	int
]	O
==	O
' '	O
||	O
language_team_ptr	O
[	O
language_team_len	O
-	O
1	int
]	O
==	O
'\t'	O
)	O
)	O
language_team_len	O
--	O
;	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
language_team_len	O
;	O
i	long
>	O
0	int
;	O
i	long
--	O
)	O
if	O
(	O
language_team_ptr	O
[	O
i	long
-	O
1	int
]	O
==	O
' '	O
||	O
language_team_ptr	O
[	O
i	long
-	O
1	int
]	O
==	O
'\t'	O
)	O
break	O
;	O
if	O
(	O
i	long
<	O
language_team_len	O
&&	O
(	O
language_team_ptr	O
[	O
i	long
]	O
==	O
'<'	O
||	O
language_team_ptr	O
[	O
language_team_len	O
-	O
1	int
]	O
==	O
'>'	O
||	O
memchr	(*(void),int,long)->(*(void))
(	O
language_team_ptr	O
,	O
'@'	O
,	O
language_team_len	O
)	O
!=	O
NULL	O
||	O
memchr	(*(void),int,long)->(*(void))
(	O
language_team_ptr	O
,	O
'/'	O
,	O
language_team_len	O
)	O
!=	O
NULL	O
)	O
)	O
{	O
while	O
(	O
i	long
>	O
0	int
&&	O
(	O
language_team_ptr	O
[	O
i	long
-	O
1	int
]	O
==	O
' '	O
||	O
language_team_ptr	O
[	O
i	long
-	O
1	int
]	O
==	O
'\t'	O
)	O
)	O
i	long
--	O
;	O
language_team_len	O
=	O
i	long
;	O
}	O
}	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
language_variant_table_size	O
;	O
i	long
++	O
)	O
if	O
(	O
strlen	(*(char))->(long)
(	O
language_variant_table	O
[	O
i	long
]	O
.	O
english	O
)	O
==	O
language_team_len	O
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
language_variant_table	O
[	O
i	long
]	O
.	O
english	O
,	O
language_team_ptr	O
,	O
language_team_len	O
)	O
==	O
0	int
)	O
{	O
header_fields	O
[	O
LANGUAGE	O
]	O
.	O
string	*(char)
=	O
language_variant_table	O
[	O
i	long
]	O
.	O
code	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
header_fields	O
[	O
LANGUAGE	O
]	O
.	O
string	*(char)
==	O
NULL	O
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
language_table_size	O
;	O
i	long
++	O
)	O
if	O
(	O
strlen	(*(char))->(long)
(	O
language_table	O
[	O
i	long
]	O
.	O
english	O
)	O
==	O
language_team_len	O
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
language_table	O
[	O
i	long
]	O
.	O
english	O
,	O
language_team_ptr	O
,	O
language_team_len	O
)	O
==	O
0	int
)	O
{	O
header_fields	O
[	O
LANGUAGE	O
]	O
.	O
string	*(char)
=	O
language_table	O
[	O
i	long
]	O
.	O
code	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
header_fields	O
[	O
LANGUAGE	O
]	O
.	O
string	*(char)
!=	O
NULL	O
)	O
{	O
const	O
char	O
*	O
str	O
=	O
header_fields	O
[	O
LANGUAGE	O
]	O
.	O
string	*(char)
;	O
size_t	long
len	long
=	O
strlen	(*(char))->(long)
(	O
str	O
)	O
;	O
char	O
*	O
copy	O
=	O
(	O
char	O
*	O
)	O
obstack_alloc	O
(	O
&	O
pool	O
,	O
1	int
+	O
len	long
+	O
1	int
+	O
1	int
)	O
;	O
stpcpy	(*(char),*(char))->(*(char))
(	O
stpcpy	(*(char),*(char))->(*(char))
(	O
stpcpy	(*(char),*(char))->(*(char))
(	O
copy	O
,	O
" "	*(char)
)	O
,	O
str	O
)	O
,	O
"\n"	*(char)
)	O
;	O
header_fields	O
[	O
LANGUAGE	O
]	O
.	O
string	*(char)
=	O
copy	O
;	O
}	O
else	O
header_fields	O
[	O
LANGUAGE	O
]	O
.	O
string	*(char)
=	O
" \n"	*(char)
;	O
header_fields	O
[	O
LANGUAGE	O
]	O
.	O
len	long
=	O
strlen	(*(char))->(long)
(	O
header_fields	O
[	O
LANGUAGE	O
]	O
.	O
string	*(char)
)	O
;	O
}	O
}	O
{	O
const	O
char	O
*	O
msgid_bugs_ptr	O
;	O
msgid_bugs_ptr	O
=	O
c_strstr	O
(	O
ref	O
->	O
msgstr	*(char)
,	O
"Report-Msgid-Bugs-To:"	*(char)
)	O
;	O
if	O
(	O
msgid_bugs_ptr	O
!=	O
NULL	O
)	O
{	O
size_t	long
msgid_bugs_len	O
;	O
const	O
char	O
*	O
endp	O
;	O
msgid_bugs_ptr	O
+=	O
sizeof	O
(	O
"Report-Msgid-Bugs-To:"	*(char)
)	O
-	O
1	int
;	O
endp	O
=	O
strchr	(*(char),int)->(*(char))
(	O
msgid_bugs_ptr	O
,	O
'\n'	O
)	O
;	O
if	O
(	O
endp	O
==	O
NULL	O
)	O
{	O
char	O
*	O
extended	O
;	O
endp	O
=	O
strchr	(*(char),int)->(*(char))
(	O
msgid_bugs_ptr	O
,	O
'\0'	O
)	O
;	O
msgid_bugs_len	O
=	O
(	O
endp	O
-	O
msgid_bugs_ptr	O
)	O
+	O
1	int
;	O
extended	O
=	O
(	O
char	O
*	O
)	O
obstack_alloc	O
(	O
&	O
pool	O
,	O
msgid_bugs_len	O
+	O
1	int
)	O
;	O
stpcpy	(*(char),*(char))->(*(char))
(	O
stpcpy	(*(char),*(char))->(*(char))
(	O
extended	O
,	O
msgid_bugs_ptr	O
)	O
,	O
"\n"	*(char)
)	O
;	O
msgid_bugs_ptr	O
=	O
extended	O
;	O
}	O
else	O
msgid_bugs_len	O
=	O
(	O
endp	O
-	O
msgid_bugs_ptr	O
)	O
+	O
1	int
;	O
header_fields	O
[	O
REPORT_MSGID_BUGS_TO	O
]	O
.	O
string	*(char)
=	O
msgid_bugs_ptr	O
;	O
header_fields	O
[	O
REPORT_MSGID_BUGS_TO	O
]	O
.	O
len	long
=	O
msgid_bugs_len	O
;	O
}	O
}	O
{	O
const	O
char	O
*	O
pot_date_ptr	O
;	O
pot_date_ptr	O
=	O
c_strstr	O
(	O
ref	O
->	O
msgstr	*(char)
,	O
"POT-Creation-Date:"	*(char)
)	O
;	O
if	O
(	O
pot_date_ptr	O
!=	O
NULL	O
)	O
{	O
size_t	long
pot_date_len	O
;	O
const	O
char	O
*	O
endp	O
;	O
pot_date_ptr	O
+=	O
sizeof	O
(	O
"POT-Creation-Date:"	*(char)
)	O
-	O
1	int
;	O
endp	O
=	O
strchr	(*(char),int)->(*(char))
(	O
pot_date_ptr	O
,	O
'\n'	O
)	O
;	O
if	O
(	O
endp	O
==	O
NULL	O
)	O
{	O
char	O
*	O
extended	O
;	O
endp	O
=	O
strchr	(*(char),int)->(*(char))
(	O
pot_date_ptr	O
,	O
'\0'	O
)	O
;	O
pot_date_len	O
=	O
(	O
endp	O
-	O
pot_date_ptr	O
)	O
+	O
1	int
;	O
extended	O
=	O
(	O
char	O
*	O
)	O
obstack_alloc	O
(	O
&	O
pool	O
,	O
pot_date_len	O
+	O
1	int
)	O
;	O
stpcpy	(*(char),*(char))->(*(char))
(	O
stpcpy	(*(char),*(char))->(*(char))
(	O
extended	O
,	O
pot_date_ptr	O
)	O
,	O
"\n"	*(char)
)	O
;	O
pot_date_ptr	O
=	O
extended	O
;	O
}	O
else	O
pot_date_len	O
=	O
(	O
endp	O
-	O
pot_date_ptr	O
)	O
+	O
1	int
;	O
header_fields	O
[	O
POT_CREATION_DATE	O
]	O
.	O
string	*(char)
=	O
pot_date_ptr	O
;	O
header_fields	O
[	O
POT_CREATION_DATE	O
]	O
.	O
len	long
=	O
pot_date_len	O
;	O
}	O
}	O
len	long
=	O
0	int
;	O
for	O
(	O
cnt	O
=	O
0	int
;	O
cnt	O
<	O
UNKNOWN	O
;	O
++	O
cnt	O
)	O
if	O
(	O
header_fields	O
[	O
cnt	O
]	O
.	O
string	*(char)
!=	O
NULL	O
)	O
len	long
+=	O
known_fields	O
[	O
cnt	O
]	O
.	O
len	long
+	O
header_fields	O
[	O
cnt	O
]	O
.	O
len	long
;	O
len	long
+=	O
header_fields	O
[	O
UNKNOWN	O
]	O
.	O
len	long
;	O
cp	O
=	O
newp	O
=	O
XNMALLOC	O
(	O
len	long
+	O
1	int
,	O
char	O
)	O
;	O
newp	O
[	O
len	long
]	O
=	O
'\0'	O
;	O
IF_FILLED	O
(	O
PROJECT_ID	O
)	O
;	O
IF_FILLED	O
(	O
REPORT_MSGID_BUGS_TO	O
)	O
;	O
IF_FILLED	O
(	O
POT_CREATION_DATE	O
)	O
;	O
IF_FILLED	O
(	O
PO_REVISION_DATE	O
)	O
;	O
IF_FILLED	O
(	O
LAST_TRANSLATOR	O
)	O
;	O
IF_FILLED	O
(	O
LANGUAGE_TEAM	O
)	O
;	O
IF_FILLED	O
(	O
LANGUAGE	O
)	O
;	O
IF_FILLED	O
(	O
MIME_VERSION	O
)	O
;	O
IF_FILLED	O
(	O
CONTENT_TYPE	O
)	O
;	O
IF_FILLED	O
(	O
CONTENT_TRANSFER	O
)	O
;	O
if	O
(	O
header_fields	O
[	O
UNKNOWN	O
]	O
.	O
string	*(char)
!=	O
NULL	O
)	O
stpcpy	(*(char),*(char))->(*(char))
(	O
newp	O
,	O
header_fields	O
[	O
UNKNOWN	O
]	O
.	O
string	*(char)
)	O
;	O
obstack_free	O
(	O
&	O
pool	O
,	O
NULL	O
)	O
;	O
msgstr	*(char)
=	O
cp	O
;	O
msgstr_len	long
=	O
strlen	(*(char))->(long)
(	O
cp	O
)	O
+	O
1	int
;	O
prev_msgctxt	*(char)
=	O
NULL	O
;	O
prev_msgid	*(char)
=	O
NULL	O
;	O
prev_msgid_plural	*(char)
=	O
NULL	O
;	O
}	O
else	O
{	O
msgstr	*(char)
=	O
def	O
->	O
msgstr	*(char)
;	O
msgstr_len	long
=	O
def	O
->	O
msgstr_len	long
;	O
if	O
(	O
def	O
->	O
is_fuzzy	bool
)	O
{	O
prev_msgctxt	*(char)
=	O
def	O
->	O
prev_msgctxt	*(char)
;	O
prev_msgid	*(char)
=	O
def	O
->	O
prev_msgid	*(char)
;	O
prev_msgid_plural	*(char)
=	O
def	O
->	O
prev_msgid_plural	*(char)
;	O
}	O
else	O
{	O
prev_msgctxt	*(char)
=	O
def	O
->	O
msgctxt	*(char)
;	O
prev_msgid	*(char)
=	O
def	O
->	O
msgid	*(char)
;	O
prev_msgid_plural	*(char)
=	O
def	O
->	O
msgid_plural	*(char)
;	O
}	O
}	O
result	*(*(void))
=	O
message_alloc	(*(char),*(char),*(char),*(char),long,*(struct(*(char),long)))->(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))
(	O
ref	O
->	O
msgctxt	*(char)
!=	O
NULL	O
?	O
xstrdup	O
(	O
ref	O
->	O
msgctxt	*(char)
)	O
:	O
NULL	O
,	O
xstrdup	O
(	O
ref	O
->	O
msgid	*(char)
)	O
,	O
ref	O
->	O
msgid_plural	*(char)
,	O
msgstr	*(char)
,	O
msgstr_len	long
,	O
&	O
def	O
->	O
pos	struct(*(char),long)
)	O
;	O
if	O
(	O
def	O
->	O
comment	*(struct(*(*(char)),long,long))
)	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
def	O
->	O
comment	*(struct(*(*(char)),long,long))
->	O
nitems	long
;	O
++	O
j	O
)	O
message_comment_append	(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))),*(char))->(void)
(	O
result	*(*(void))
,	O
def	O
->	O
comment	*(struct(*(*(char)),long,long))
->	O
item	*(*(char))
[	O
j	O
]	O
)	O
;	O
if	O
(	O
ref	O
->	O
comment_dot	*(struct(*(*(char)),long,long))
)	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
ref	O
->	O
comment_dot	*(struct(*(*(char)),long,long))
->	O
nitems	long
;	O
++	O
j	O
)	O
message_comment_dot_append	(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))),*(char))->(void)
(	O
result	*(*(void))
,	O
ref	O
->	O
comment_dot	*(struct(*(*(char)),long,long))
->	O
item	*(*(char))
[	O
j	O
]	O
)	O
;	O
result	*(*(void))
->	O
is_fuzzy	bool
=	O
def	O
->	O
is_fuzzy	bool
|	O
force_fuzzy	bool
;	O
if	O
(	O
!	O
result	*(*(void))
->	O
is_fuzzy	bool
&&	O
(	O
ref	O
->	O
msgid_plural	*(char)
!=	O
NULL	O
?	O
def	O
->	O
msgid_plural	*(char)
==	O
NULL	O
||	O
strcmp	(*(char),*(char))->(int)
(	O
ref	O
->	O
msgid_plural	*(char)
,	O
def	O
->	O
msgid_plural	*(char)
)	O
!=	O
0	int
:	O
def	O
->	O
msgid_plural	*(char)
!=	O
NULL	O
)	O
)	O
result	*(*(void))
->	O
is_fuzzy	bool
=	O
true	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NFORMATS	int
;	O
i	long
++	O
)	O
{	O
result	*(*(void))
->	O
is_format	enum(int,int,int,int,int,int)
[	O
i	long
]	O
=	O
ref	O
->	O
is_format	enum(int,int,int,int,int,int)
[	O
i	long
]	O
;	O
if	O
(	O
!	O
result	*(*(void))
->	O
is_fuzzy	bool
&&	O
possible_format_p	(enum(int,int,int,int,int,int))->(bool)
(	O
ref	O
->	O
is_format	enum(int,int,int,int,int,int)
[	O
i	long
]	O
)	O
&&	O
!	O
possible_format_p	(enum(int,int,int,int,int,int))->(bool)
(	O
def	O
->	O
is_format	enum(int,int,int,int,int,int)
[	O
i	long
]	O
)	O
&&	O
check_msgid_msgstr_format_i	O
(	O
ref	O
->	O
msgid	*(char)
,	O
ref	O
->	O
msgid_plural	*(char)
,	O
msgstr	*(char)
,	O
msgstr_len	long
,	O
i	long
,	O
ref	O
->	O
range	struct(int,int)
,	O
distribution	O
,	O
silent_error_logger	O
)	O
>	O
0	int
)	O
result	*(*(void))
->	O
is_fuzzy	bool
=	O
true	O
;	O
}	O
result	*(*(void))
->	O
range	struct(int,int)
=	O
ref	O
->	O
range	struct(int,int)
;	O
if	O
(	O
!	O
result	*(*(void))
->	O
is_fuzzy	bool
&&	O
has_range_p	O
(	O
def	O
->	O
range	struct(int,int)
)	O
&&	O
!	O
(	O
has_range_p	O
(	O
ref	O
->	O
range	struct(int,int)
)	O
&&	O
ref	O
->	O
range	struct(int,int)
.	O
min	int
>=	O
def	O
->	O
range	struct(int,int)
.	O
min	int
&&	O
ref	O
->	O
range	struct(int,int)
.	O
max	int
<=	O
def	O
->	O
range	struct(int,int)
.	O
max	int
)	O
)	O
result	*(*(void))
->	O
is_fuzzy	bool
=	O
true	O
;	O
result	*(*(void))
->	O
do_wrap	enum(int,int,int,int,int,int)
=	O
ref	O
->	O
do_wrap	enum(int,int,int,int,int,int)
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NSYNTAXCHECKS	int
;	O
i	long
++	O
)	O
result	*(*(void))
->	O
do_syntax_check	array(enum(int,int,int,int,int,int))
[	O
i	long
]	O
=	O
ref	O
->	O
do_syntax_check	array(enum(int,int,int,int,int,int))
[	O
i	long
]	O
;	O
if	O
(	O
keep_previous	O
)	O
{	O
result	*(*(void))
->	O
prev_msgctxt	*(char)
=	O
prev_msgctxt	*(char)
;	O
result	*(*(void))
->	O
prev_msgid	*(char)
=	O
prev_msgid	*(char)
;	O
result	*(*(void))
->	O
prev_msgid_plural	*(char)
=	O
prev_msgid_plural	*(char)
;	O
}	O
result	*(*(void))
->	O
obsolete	bool
=	O
ref	O
->	O
obsolete	bool
;	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
ref	O
->	O
filepos_count	long
;	O
++	O
j	O
)	O
{	O
lex_pos_ty	struct
*	O
pp	*(struct(*(char),long))
=	O
&	O
ref	O
->	O
filepos	*(struct(*(char),long))
[	O
j	O
]	O
;	O
message_comment_filepos	(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))),*(char),long)->(void)
(	O
result	*(*(void))
,	O
pp	*(struct(*(char),long))
->	O
file_name	*(char)
,	O
pp	*(struct(*(char),long))
->	O
line_number	long
)	O
;	O
}	O
if	O
(	O
ref	O
->	O
msgid_plural	*(char)
!=	O
NULL	O
)	O
{	O
if	O
(	O
def	O
->	O
msgid_plural	*(char)
==	O
NULL	O
)	O
result	*(*(void))
->	O
used	int
=	O
1	int
;	O
}	O
else	O
{	O
if	O
(	O
def	O
->	O
msgid_plural	*(char)
!=	O
NULL	O
)	O
result	*(*(void))
->	O
used	int
=	O
2	int
;	O
}	O
return	O
result	*(*(void))
;	O
}	O
static	O
void	O
match_domain	O
(	O
const	O
char	O
*	O
fn1	O
,	O
const	O
char	O
*	O
fn2	O
,	O
definitions_ty	O
*	O
definitions	O
,	O
message_list_ty	struct
*	O
refmlp	O
,	O
message_list_ty	struct
*	O
resultmlp	O
,	O
struct	O
statistics	O
*	O
stats	O
,	O
unsigned	O
int	O
*	O
processed	O
)	O
{	O
message_ty	struct
*	O
header_entry	O
;	O
unsigned	O
long	O
int	O
nplurals	O
;	O
const	O
struct	O
expression	O
*	O
plural_expr	O
;	O
char	O
*	O
untranslated_plural_msgstr	O
;	O
struct	O
plural_distribution	O
distribution	O
;	O
struct	O
search_result	O
{	O
message_ty	struct
*	O
found	O
;	O
bool	bool
fuzzy	O
;	O
}	O
*	O
search_results	O
;	O
size_t	long
j	O
;	O
header_entry	O
=	O
message_list_search	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char),*(char))->(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))
(	O
definitions_current_list	O
(	O
definitions	O
)	O
,	O
NULL	O
,	O
""	*(char)
)	O
;	O
extract_plural_expression	O
(	O
header_entry	O
?	O
header_entry	O
->	O
msgstr	*(char)
:	O
NULL	O
,	O
&	O
plural_expr	O
,	O
&	O
nplurals	O
)	O
;	O
untranslated_plural_msgstr	O
=	O
XNMALLOC	O
(	O
nplurals	O
,	O
char	O
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
untranslated_plural_msgstr	O
,	O
'\0'	O
,	O
nplurals	O
)	O
;	O
{	O
void	O
(	O
*	O
old_po_xerror	O
)	O
(	O
int	O
,	O
const	O
struct	O
message_ty	struct
*	O
,	O
const	O
char	O
*	O
,	O
size_t	long
,	O
size_t	long
,	O
int	O
,	O
const	O
char	O
*	O
)	O
=	O
po_xerror	O
;	O
po_xerror	O
=	O
silent_xerror	O
;	O
if	O
(	O
check_plural_eval	O
(	O
plural_expr	O
,	O
nplurals	O
,	O
header_entry	O
,	O
&	O
distribution	O
)	O
>	O
0	int
)	O
{	O
distribution	O
.	O
expr	O
=	O
NULL	O
;	O
distribution	O
.	O
often	O
=	O
NULL	O
;	O
distribution	O
.	O
often_length	O
=	O
0	int
;	O
distribution	O
.	O
histogram	O
=	O
NULL	O
;	O
}	O
po_xerror	O
=	O
old_po_xerror	O
;	O
}	O
search_results	O
=	O
XNMALLOC	O
(	O
refmlp	O
->	O
nitems	long
,	O
struct	O
search_result	O
)	O
;	O
{	O
long	O
int	O
nn	O
=	O
refmlp	O
->	O
nitems	long
;	O
long	O
int	O
jj	O
;	O
for	O
(	O
jj	O
=	O
0	int
;	O
jj	O
<	O
nn	O
;	O
jj	O
++	O
)	O
{	O
message_ty	struct
*	O
refmsg	O
=	O
refmlp	O
->	O
item	*(*(char))
[	O
jj	O
]	O
;	O
message_ty	struct
*	O
defmsg	O
;	O
if	O
(	O
!	O
quiet	O
&&	O
verbosity_level	O
<=	O
1	int
&&	O
*	O
processed	O
%	O
DOT_FREQUENCY	O
==	O
0	int
)	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'.'	O
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
(	O
*	O
processed	O
)	O
++	O
;	O
defmsg	O
=	O
definitions_search	O
(	O
definitions	O
,	O
refmsg	O
->	O
msgctxt	*(char)
,	O
refmsg	O
->	O
msgid	*(char)
)	O
;	O
if	O
(	O
defmsg	O
!=	O
NULL	O
)	O
{	O
search_results	O
[	O
jj	O
]	O
.	O
found	O
=	O
defmsg	O
;	O
search_results	O
[	O
jj	O
]	O
.	O
fuzzy	O
=	O
false	O
;	O
}	O
else	O
if	O
(	O
!	O
is_header	O
(	O
refmsg	O
)	O
&&	O
use_fuzzy_matching	O
&&	O
(	O
(	O
defmsg	O
=	O
definitions_search_fuzzy	O
(	O
definitions	O
,	O
refmsg	O
->	O
msgctxt	*(char)
,	O
refmsg	O
->	O
msgid	*(char)
)	O
)	O
!=	O
NULL	O
)	O
)	O
{	O
search_results	O
[	O
jj	O
]	O
.	O
found	O
=	O
defmsg	O
;	O
search_results	O
[	O
jj	O
]	O
.	O
fuzzy	O
=	O
true	O
;	O
}	O
else	O
search_results	O
[	O
jj	O
]	O
.	O
found	O
=	O
NULL	O
;	O
}	O
}	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
refmlp	O
->	O
nitems	long
;	O
j	O
++	O
)	O
{	O
message_ty	struct
*	O
refmsg	O
=	O
refmlp	O
->	O
item	*(*(char))
[	O
j	O
]	O
;	O
if	O
(	O
search_results	O
[	O
j	O
]	O
.	O
found	O
!=	O
NULL	O
&&	O
!	O
search_results	O
[	O
j	O
]	O
.	O
fuzzy	O
)	O
{	O
message_ty	struct
*	O
defmsg	O
=	O
search_results	O
[	O
j	O
]	O
.	O
found	O
;	O
message_ty	struct
*	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
=	O
message_merge	O
(	O
defmsg	O
,	O
refmsg	O
,	O
false	O
,	O
&	O
distribution	O
)	O
;	O
if	O
(	O
!	O
(	O
for_msgfmt	O
&&	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr	*(char)
[	O
0	int
]	O
==	O
'\0'	O
||	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_fuzzy	bool
&&	O
!	O
is_header	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
)	O
)	O
)	O
)	O
)	O
{	O
message_list_append	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))->(void)
(	O
resultmlp	O
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
)	O
;	O
defmsg	O
->	O
used	int
=	O
1	int
;	O
}	O
stats	O
->	O
merged	O
++	O
;	O
}	O
else	O
if	O
(	O
!	O
is_header	O
(	O
refmsg	O
)	O
)	O
{	O
if	O
(	O
search_results	O
[	O
j	O
]	O
.	O
found	O
!=	O
NULL	O
&&	O
search_results	O
[	O
j	O
]	O
.	O
fuzzy	O
)	O
{	O
message_ty	struct
*	O
defmsg	O
=	O
search_results	O
[	O
j	O
]	O
.	O
found	O
;	O
message_ty	struct
*	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
;	O
if	O
(	O
verbosity_level	O
>	O
1	int
)	O
{	O
po_gram_error_at_line	(*(struct(*(char),long)),*(char))->(void)
(	O
&	O
refmsg	O
->	O
pos	struct(*(char),long)
,	O
_	O
(	O
"this message is used but not defined..."	*(char)
)	O
)	O
;	O
error_message_count	int
--	O
;	O
po_gram_error_at_line	(*(struct(*(char),long)),*(char))->(void)
(	O
&	O
defmsg	O
->	O
pos	struct(*(char),long)
,	O
_	O
(	O
"...but this definition is similar"	*(char)
)	O
)	O
;	O
}	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
=	O
message_merge	O
(	O
defmsg	O
,	O
refmsg	O
,	O
true	O
,	O
&	O
distribution	O
)	O
;	O
message_list_append	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))->(void)
(	O
resultmlp	O
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
)	O
;	O
defmsg	O
->	O
used	int
=	O
1	int
;	O
stats	O
->	O
fuzzied	O
++	O
;	O
if	O
(	O
!	O
quiet	O
&&	O
verbosity_level	O
<=	O
1	int
)	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'.'	O
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
else	O
{	O
message_ty	struct
*	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
;	O
bool	bool
is_untranslated	O
;	O
const	O
char	O
*	O
p	*(void)
;	O
const	O
char	O
*	O
pend	O
;	O
if	O
(	O
verbosity_level	O
>	O
1	int
)	O
po_gram_error_at_line	(*(struct(*(char),long)),*(char))->(void)
(	O
&	O
refmsg	O
->	O
pos	struct(*(char),long)
,	O
_	O
(	O
"this message is used but not defined in %s"	*(char)
)	O
,	O
fn1	O
)	O
;	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
=	O
message_copy	(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))->(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))
(	O
refmsg	O
)	O
;	O
is_untranslated	O
=	O
true	O
;	O
for	O
(	O
p	*(void)
=	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr	*(char)
,	O
pend	O
=	O
p	*(void)
+	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr_len	long
;	O
p	*(void)
<	O
pend	O
;	O
p	*(void)
++	O
)	O
if	O
(	O
*	O
p	*(void)
!=	O
'\0'	O
)	O
{	O
is_untranslated	O
=	O
false	O
;	O
break	O
;	O
}	O
if	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgid_plural	*(char)
!=	O
NULL	O
&&	O
is_untranslated	O
)	O
{	O
if	O
(	O
nplurals	O
>	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr_len	long
)	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr	*(char)
=	O
untranslated_plural_msgstr	O
;	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr_len	long
=	O
nplurals	O
;	O
}	O
if	O
(	O
!	O
(	O
for_msgfmt	O
&&	O
(	O
is_untranslated	O
||	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_fuzzy	bool
)	O
)	O
)	O
{	O
message_list_append	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))->(void)
(	O
resultmlp	O
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
)	O
;	O
}	O
stats	O
->	O
missing	O
++	O
;	O
}	O
}	O
}	O
free	(*(void))->(void)
(	O
search_results	O
)	O
;	O
{	O
int	O
problematic	O
=	O
0	int
;	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
resultmlp	O
->	O
nitems	long
;	O
j	O
++	O
)	O
problematic	O
|=	O
resultmlp	O
->	O
item	*(*(char))
[	O
j	O
]	O
->	O
used	int
;	O
if	O
(	O
problematic	O
)	O
{	O
unsigned	O
long	O
int	O
nplurals	O
=	O
0	int
;	O
if	O
(	O
problematic	O
&	O
1	int
)	O
{	O
message_ty	struct
*	O
header_entry	O
=	O
message_list_search	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char),*(char))->(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))
(	O
resultmlp	O
,	O
NULL	O
,	O
""	*(char)
)	O
;	O
nplurals	O
=	O
get_plural_count	O
(	O
header_entry	O
?	O
header_entry	O
->	O
msgstr	*(char)
:	O
NULL	O
)	O
;	O
}	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
resultmlp	O
->	O
nitems	long
;	O
j	O
++	O
)	O
{	O
message_ty	struct
*	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
=	O
resultmlp	O
->	O
item	*(*(char))
[	O
j	O
]	O
;	O
if	O
(	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
used	int
&	O
1	int
)	O
&&	O
(	O
nplurals	O
>	O
0	int
)	O
)	O
{	O
size_t	long
new_msgstr_len	O
;	O
char	O
*	O
new_msgstr	O
;	O
char	O
*	O
p	*(void)
;	O
unsigned	O
long	O
i	long
;	O
if	O
(	O
verbosity_level	O
>	O
1	int
)	O
po_gram_error_at_line	(*(struct(*(char),long)),*(char))->(void)
(	O
&	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
pos	struct(*(char),long)
,	O
_	O
(	O
"this message should define plural forms"	*(char)
)	O
)	O
;	O
new_msgstr_len	O
=	O
nplurals	O
*	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr_len	long
;	O
new_msgstr	O
=	O
XNMALLOC	O
(	O
new_msgstr_len	O
,	O
char	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
,	O
p	*(void)
=	O
new_msgstr	O
;	O
i	long
<	O
nplurals	O
;	O
i	long
++	O
)	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
p	*(void)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr	*(char)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr_len	long
)	O
;	O
p	*(void)
+=	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr_len	long
;	O
}	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr	*(char)
=	O
new_msgstr	O
;	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr_len	long
=	O
new_msgstr_len	O
;	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_fuzzy	bool
=	O
true	O
;	O
}	O
if	O
(	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
used	int
&	O
2	int
)	O
&&	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr_len	long
>	O
strlen	(*(char))->(long)
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr	*(char)
)	O
+	O
1	int
)	O
)	O
{	O
if	O
(	O
verbosity_level	O
>	O
1	int
)	O
po_gram_error_at_line	(*(struct(*(char),long)),*(char))->(void)
(	O
&	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
pos	struct(*(char),long)
,	O
_	O
(	O
"this message should not define plural forms"	*(char)
)	O
)	O
;	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr_len	long
=	O
strlen	(*(char))->(long)
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr	*(char)
)	O
+	O
1	int
;	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_fuzzy	bool
=	O
true	O
;	O
}	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
used	int
=	O
0	int
;	O
}	O
}	O
}	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
resultmlp	O
->	O
nitems	long
;	O
j	O
++	O
)	O
{	O
message_ty	struct
*	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
=	O
resultmlp	O
->	O
item	*(*(char))
[	O
j	O
]	O
;	O
if	O
(	O
!	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_fuzzy	bool
||	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr	*(char)
[	O
0	int
]	O
==	O
'\0'	O
)	O
{	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
prev_msgctxt	*(char)
=	O
NULL	O
;	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
prev_msgid	*(char)
=	O
NULL	O
;	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
prev_msgid_plural	*(char)
=	O
NULL	O
;	O
}	O
}	O
}	O
static	O
msgdomain_list_ty	struct
*	O
merge	O
(	O
const	O
char	O
*	O
fn1	O
,	O
const	O
char	O
*	O
fn2	O
,	O
catalog_input_format_ty	*(struct(*((*(struct`),*(struct`),*(char),*(char))->(void)),bool))
input_syntax	*(struct(*((*(struct`),*(struct`),*(char),*(char))->(void)),bool))
,	O
msgdomain_list_ty	struct
*	O
*	O
defp	O
)	O
{	O
msgdomain_list_ty	struct
*	O
def	O
;	O
msgdomain_list_ty	struct
*	O
ref	O
;	O
size_t	long
j	O
,	O
k	O
;	O
unsigned	O
int	O
processed	O
;	O
struct	O
statistics	O
stats	O
;	O
msgdomain_list_ty	struct
*	O
result	*(*(void))
;	O
const	O
char	O
*	O
def_canon_charset	O
;	O
definitions_ty	O
definitions	O
;	O
message_list_ty	struct
*	O
empty_list	O
;	O
stats	O
.	O
merged	O
=	O
stats	O
.	O
fuzzied	O
=	O
stats	O
.	O
missing	O
=	O
stats	O
.	O
obsolete	bool
=	O
0	int
;	O
def	O
=	O
read_catalog_file	(*(char),*(struct(*((*`,*`,*`,*`)->(void)),bool)))->(*(struct(*(*(struct`)),long,long,bool,*(char))))
(	O
fn1	O
,	O
input_syntax	*(struct(*((*(struct`),*(struct`),*(char),*(char))->(void)),bool))
)	O
;	O
ref	O
=	O
read_catalog_file	(*(char),*(struct(*((*`,*`,*`,*`)->(void)),bool)))->(*(struct(*(*(struct`)),long,long,bool,*(char))))
(	O
fn2	O
,	O
input_syntax	*(struct(*((*(struct`),*(struct`),*(char),*(char))->(void)),bool))
)	O
;	O
for	O
(	O
k	O
=	O
0	int
;	O
k	O
<	O
ref	O
->	O
nitems	long
;	O
k	O
++	O
)	O
if	O
(	O
message_list_search	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char),*(char))->(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))
(	O
ref	O
->	O
item	*(*(char))
[	O
k	O
]	O
->	O
messages	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
NULL	O
,	O
""	*(char)
)	O
==	O
NULL	O
)	O
{	O
static	O
lex_pos_ty	struct
pos	struct(*(char),long)
=	O
{	O
__FILE__	O
,	O
__LINE__	O
}	O
;	O
message_ty	struct
*	O
refheader	O
=	O
message_alloc	(*(char),*(char),*(char),*(char),long,*(struct(*(char),long)))->(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))
(	O
NULL	O
,	O
""	*(char)
,	O
NULL	O
,	O
""	*(char)
,	O
1	int
,	O
&	O
pos	struct(*(char),long)
)	O
;	O
message_list_prepend	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))->(void)
(	O
ref	O
->	O
item	*(*(char))
[	O
k	O
]	O
->	O
messages	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
refheader	O
)	O
;	O
}	O
{	O
bool	bool
was_utf8	O
=	O
false	O
;	O
for	O
(	O
k	O
=	O
0	int
;	O
k	O
<	O
ref	O
->	O
nitems	long
;	O
k	O
++	O
)	O
{	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
=	O
ref	O
->	O
item	*(*(char))
[	O
k	O
]	O
->	O
messages	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
;	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
nitems	long
;	O
j	O
++	O
)	O
if	O
(	O
is_header	O
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
[	O
j	O
]	O
)	O
&&	O
!	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
[	O
j	O
]	O
->	O
obsolete	bool
)	O
{	O
const	O
char	O
*	O
header	O
=	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
[	O
j	O
]	O
->	O
msgstr	*(char)
;	O
if	O
(	O
header	O
!=	O
NULL	O
)	O
{	O
const	O
char	O
*	O
charsetstr	O
=	O
c_strstr	O
(	O
header	O
,	O
"charset="	*(char)
)	O
;	O
if	O
(	O
charsetstr	O
!=	O
NULL	O
)	O
{	O
size_t	long
len	long
;	O
charsetstr	O
+=	O
strlen	(*(char))->(long)
(	O
"charset="	*(char)
)	O
;	O
len	long
=	O
strcspn	(*(char),*(char))->(long)
(	O
charsetstr	O
,	O
" \t\n"	*(char)
)	O
;	O
if	O
(	O
len	long
==	O
strlen	(*(char))->(long)
(	O
"UTF-8"	*(char)
)	O
&&	O
c_strncasecmp	O
(	O
charsetstr	O
,	O
"UTF-8"	*(char)
,	O
len	long
)	O
==	O
0	int
)	O
was_utf8	O
=	O
true	O
;	O
}	O
}	O
}	O
}	O
if	O
(	O
was_utf8	O
)	O
{	O
def	O
=	O
iconv_msgdomain_list	O
(	O
def	O
,	O
"UTF-8"	*(char)
,	O
true	O
,	O
fn1	O
)	O
;	O
if	O
(	O
compendiums	O
!=	O
NULL	O
)	O
for	O
(	O
k	O
=	O
0	int
;	O
k	O
<	O
compendiums	O
->	O
nitems	long
;	O
k	O
++	O
)	O
iconv_message_list	O
(	O
compendiums	O
->	O
item	*(*(char))
[	O
k	O
]	O
,	O
NULL	O
,	O
po_charset_utf8	O
,	O
compendium_filenames	O
->	O
item	*(*(char))
[	O
k	O
]	O
)	O
;	O
}	O
else	O
if	O
(	O
compendiums	O
!=	O
NULL	O
&&	O
compendiums	O
->	O
nitems	long
>	O
0	int
)	O
{	O
bool	bool
conversion_done	O
=	O
false	O
;	O
{	O
char	O
*	O
charset	O
=	O
NULL	O
;	O
for	O
(	O
k	O
=	O
0	int
;	O
k	O
<	O
def	O
->	O
nitems	long
;	O
k	O
++	O
)	O
{	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
=	O
def	O
->	O
item	*(*(char))
[	O
k	O
]	O
->	O
messages	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
;	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
nitems	long
;	O
j	O
++	O
)	O
if	O
(	O
is_header	O
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
[	O
j	O
]	O
)	O
&&	O
!	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
[	O
j	O
]	O
->	O
obsolete	bool
)	O
{	O
const	O
char	O
*	O
header	O
=	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
[	O
j	O
]	O
->	O
msgstr	*(char)
;	O
if	O
(	O
header	O
!=	O
NULL	O
)	O
{	O
const	O
char	O
*	O
charsetstr	O
=	O
c_strstr	O
(	O
header	O
,	O
"charset="	*(char)
)	O
;	O
if	O
(	O
charsetstr	O
!=	O
NULL	O
)	O
{	O
size_t	long
len	long
;	O
charsetstr	O
+=	O
strlen	(*(char))->(long)
(	O
"charset="	*(char)
)	O
;	O
len	long
=	O
strcspn	(*(char),*(char))->(long)
(	O
charsetstr	O
,	O
" \t\n"	*(char)
)	O
;	O
charset	O
=	O
(	O
char	O
*	O
)	O
xmalloca	O
(	O
len	long
+	O
1	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
charset	O
,	O
charsetstr	O
,	O
len	long
)	O
;	O
charset	O
[	O
len	long
]	O
=	O
'\0'	O
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
charset	O
!=	O
NULL	O
)	O
break	O
;	O
}	O
if	O
(	O
charset	O
!=	O
NULL	O
)	O
{	O
const	O
char	O
*	O
canon_charset	O
=	O
po_charset_canonicalize	O
(	O
charset	O
)	O
;	O
if	O
(	O
canon_charset	O
!=	O
NULL	O
)	O
{	O
bool	bool
all_compendiums_iconvable	O
=	O
true	O
;	O
if	O
(	O
compendiums	O
!=	O
NULL	O
)	O
for	O
(	O
k	O
=	O
0	int
;	O
k	O
<	O
compendiums	O
->	O
nitems	long
;	O
k	O
++	O
)	O
if	O
(	O
!	O
is_message_list_iconvable	O
(	O
compendiums	O
->	O
item	*(*(char))
[	O
k	O
]	O
,	O
NULL	O
,	O
canon_charset	O
)	O
)	O
{	O
all_compendiums_iconvable	O
=	O
false	O
;	O
break	O
;	O
}	O
if	O
(	O
all_compendiums_iconvable	O
)	O
{	O
if	O
(	O
compendiums	O
!=	O
NULL	O
)	O
for	O
(	O
k	O
=	O
0	int
;	O
k	O
<	O
compendiums	O
->	O
nitems	long
;	O
k	O
++	O
)	O
iconv_message_list	O
(	O
compendiums	O
->	O
item	*(*(char))
[	O
k	O
]	O
,	O
NULL	O
,	O
canon_charset	O
,	O
compendium_filenames	O
->	O
item	*(*(char))
[	O
k	O
]	O
)	O
;	O
conversion_done	O
=	O
true	O
;	O
}	O
}	O
freea	O
(	O
charset	O
)	O
;	O
}	O
}	O
if	O
(	O
!	O
conversion_done	O
)	O
{	O
if	O
(	O
def	O
->	O
nitems	long
==	O
0	int
||	O
(	O
def	O
->	O
nitems	long
==	O
1	int
&&	O
def	O
->	O
item	*(*(char))
[	O
0	int
]	O
->	O
messages	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
nitems	long
==	O
0	int
)	O
)	O
{	O
const	O
char	O
*	O
common_canon_charset	O
=	O
NULL	O
;	O
for	O
(	O
k	O
=	O
0	int
;	O
k	O
<	O
compendiums	O
->	O
nitems	long
;	O
k	O
++	O
)	O
{	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
=	O
compendiums	O
->	O
item	*(*(char))
[	O
k	O
]	O
;	O
char	O
*	O
charset	O
=	O
NULL	O
;	O
const	O
char	O
*	O
canon_charset	O
=	O
NULL	O
;	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
nitems	long
;	O
j	O
++	O
)	O
if	O
(	O
is_header	O
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
[	O
j	O
]	O
)	O
&&	O
!	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
[	O
j	O
]	O
->	O
obsolete	bool
)	O
{	O
const	O
char	O
*	O
header	O
=	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
[	O
j	O
]	O
->	O
msgstr	*(char)
;	O
if	O
(	O
header	O
!=	O
NULL	O
)	O
{	O
const	O
char	O
*	O
charsetstr	O
=	O
c_strstr	O
(	O
header	O
,	O
"charset="	*(char)
)	O
;	O
if	O
(	O
charsetstr	O
!=	O
NULL	O
)	O
{	O
size_t	long
len	long
;	O
charsetstr	O
+=	O
strlen	(*(char))->(long)
(	O
"charset="	*(char)
)	O
;	O
len	long
=	O
strcspn	(*(char),*(char))->(long)
(	O
charsetstr	O
,	O
" \t\n"	*(char)
)	O
;	O
charset	O
=	O
(	O
char	O
*	O
)	O
xmalloca	O
(	O
len	long
+	O
1	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
charset	O
,	O
charsetstr	O
,	O
len	long
)	O
;	O
charset	O
[	O
len	long
]	O
=	O
'\0'	O
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
charset	O
!=	O
NULL	O
)	O
{	O
canon_charset	O
=	O
po_charset_canonicalize	O
(	O
charset	O
)	O
;	O
freea	O
(	O
charset	O
)	O
;	O
}	O
if	O
(	O
canon_charset	O
==	O
NULL	O
||	O
(	O
common_canon_charset	O
!=	O
NULL	O
&&	O
canon_charset	O
!=	O
common_canon_charset	O
)	O
)	O
{	O
common_canon_charset	O
=	O
NULL	O
;	O
break	O
;	O
}	O
common_canon_charset	O
=	O
canon_charset	O
;	O
}	O
if	O
(	O
common_canon_charset	O
!=	O
NULL	O
)	O
conversion_done	O
=	O
true	O
;	O
}	O
if	O
(	O
!	O
conversion_done	O
)	O
{	O
def	O
=	O
iconv_msgdomain_list	O
(	O
def	O
,	O
"UTF-8"	*(char)
,	O
true	O
,	O
fn1	O
)	O
;	O
if	O
(	O
compendiums	O
!=	O
NULL	O
)	O
for	O
(	O
k	O
=	O
0	int
;	O
k	O
<	O
compendiums	O
->	O
nitems	long
;	O
k	O
++	O
)	O
iconv_message_list	O
(	O
compendiums	O
->	O
item	*(*(char))
[	O
k	O
]	O
,	O
NULL	O
,	O
po_charset_utf8	O
,	O
compendium_filenames	O
->	O
item	*(*(char))
[	O
k	O
]	O
)	O
;	O
}	O
}	O
}	O
}	O
if	O
(	O
use_fuzzy_matching	O
)	O
{	O
def_canon_charset	O
=	O
def	O
->	O
encoding	*(char)
;	O
if	O
(	O
def_canon_charset	O
==	O
NULL	O
)	O
{	O
char	O
*	O
charset	O
=	O
NULL	O
;	O
for	O
(	O
k	O
=	O
0	int
;	O
k	O
<	O
def	O
->	O
nitems	long
;	O
k	O
++	O
)	O
{	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
=	O
def	O
->	O
item	*(*(char))
[	O
k	O
]	O
->	O
messages	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
;	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
nitems	long
;	O
j	O
++	O
)	O
if	O
(	O
is_header	O
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
[	O
j	O
]	O
)	O
&&	O
!	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
[	O
j	O
]	O
->	O
obsolete	bool
)	O
{	O
const	O
char	O
*	O
header	O
=	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
[	O
j	O
]	O
->	O
msgstr	*(char)
;	O
if	O
(	O
header	O
!=	O
NULL	O
)	O
{	O
const	O
char	O
*	O
charsetstr	O
=	O
c_strstr	O
(	O
header	O
,	O
"charset="	*(char)
)	O
;	O
if	O
(	O
charsetstr	O
!=	O
NULL	O
)	O
{	O
size_t	long
len	long
;	O
charsetstr	O
+=	O
strlen	(*(char))->(long)
(	O
"charset="	*(char)
)	O
;	O
len	long
=	O
strcspn	(*(char),*(char))->(long)
(	O
charsetstr	O
,	O
" \t\n"	*(char)
)	O
;	O
charset	O
=	O
(	O
char	O
*	O
)	O
xmalloca	O
(	O
len	long
+	O
1	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
charset	O
,	O
charsetstr	O
,	O
len	long
)	O
;	O
charset	O
[	O
len	long
]	O
=	O
'\0'	O
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
charset	O
!=	O
NULL	O
)	O
break	O
;	O
}	O
if	O
(	O
charset	O
!=	O
NULL	O
)	O
def_canon_charset	O
=	O
po_charset_canonicalize	O
(	O
charset	O
)	O
;	O
if	O
(	O
def_canon_charset	O
==	O
NULL	O
)	O
def_canon_charset	O
=	O
po_charset_ascii	O
;	O
}	O
}	O
else	O
def_canon_charset	O
=	O
NULL	O
;	O
definitions_init	O
(	O
&	O
definitions	O
,	O
def_canon_charset	O
)	O
;	O
empty_list	O
=	O
message_list_alloc	(bool)->(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))))
(	O
false	O
)	O
;	O
result	*(*(void))
=	O
msgdomain_list_alloc	(bool)->(*(struct(*(*(struct`)),long,long,bool,*(char))))
(	O
false	O
)	O
;	O
processed	O
=	O
0	int
;	O
if	O
(	O
!	O
multi_domain_mode	O
)	O
for	O
(	O
k	O
=	O
0	int
;	O
k	O
<	O
ref	O
->	O
nitems	long
;	O
k	O
++	O
)	O
{	O
const	O
char	O
*	O
domain	*(char)
=	O
ref	O
->	O
item	*(*(char))
[	O
k	O
]	O
->	O
domain	*(char)
;	O
message_list_ty	struct
*	O
refmlp	O
=	O
ref	O
->	O
item	*(*(char))
[	O
k	O
]	O
->	O
messages	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
;	O
message_list_ty	struct
*	O
resultmlp	O
=	O
msgdomain_list_sublist	(*(struct(*(*(struct`)),long,long,bool,*(char))),*(char),bool)->(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))))
(	O
result	*(*(void))
,	O
domain	*(char)
,	O
true	O
)	O
;	O
message_list_ty	struct
*	O
defmlp	O
;	O
defmlp	O
=	O
msgdomain_list_sublist	(*(struct(*(*(struct`)),long,long,bool,*(char))),*(char),bool)->(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))))
(	O
def	O
,	O
domain	*(char)
,	O
false	O
)	O
;	O
if	O
(	O
defmlp	O
==	O
NULL	O
)	O
defmlp	O
=	O
empty_list	O
;	O
definitions_set_current_list	O
(	O
&	O
definitions	O
,	O
defmlp	O
)	O
;	O
match_domain	O
(	O
fn1	O
,	O
fn2	O
,	O
&	O
definitions	O
,	O
refmlp	O
,	O
resultmlp	O
,	O
&	O
stats	O
,	O
&	O
processed	O
)	O
;	O
}	O
else	O
{	O
message_list_ty	struct
*	O
refmlp	O
=	O
ref	O
->	O
item	*(*(char))
[	O
0	int
]	O
->	O
messages	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
;	O
for	O
(	O
k	O
=	O
0	int
;	O
k	O
<	O
def	O
->	O
nitems	long
;	O
k	O
++	O
)	O
{	O
const	O
char	O
*	O
domain	*(char)
=	O
def	O
->	O
item	*(*(char))
[	O
k	O
]	O
->	O
domain	*(char)
;	O
message_list_ty	struct
*	O
defmlp	O
=	O
def	O
->	O
item	*(*(char))
[	O
k	O
]	O
->	O
messages	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
;	O
if	O
(	O
k	O
>	O
0	int
||	O
defmlp	O
->	O
nitems	long
>	O
0	int
)	O
{	O
message_list_ty	struct
*	O
resultmlp	O
=	O
msgdomain_list_sublist	(*(struct(*(*(struct`)),long,long,bool,*(char))),*(char),bool)->(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))))
(	O
result	*(*(void))
,	O
domain	*(char)
,	O
true	O
)	O
;	O
definitions_set_current_list	O
(	O
&	O
definitions	O
,	O
defmlp	O
)	O
;	O
match_domain	O
(	O
fn1	O
,	O
fn2	O
,	O
&	O
definitions	O
,	O
refmlp	O
,	O
resultmlp	O
,	O
&	O
stats	O
,	O
&	O
processed	O
)	O
;	O
}	O
}	O
}	O
definitions_destroy	O
(	O
&	O
definitions	O
)	O
;	O
if	O
(	O
!	O
for_msgfmt	O
)	O
{	O
for	O
(	O
k	O
=	O
0	int
;	O
k	O
<	O
def	O
->	O
nitems	long
;	O
++	O
k	O
)	O
{	O
const	O
char	O
*	O
domain	*(char)
=	O
def	O
->	O
item	*(*(char))
[	O
k	O
]	O
->	O
domain	*(char)
;	O
message_list_ty	struct
*	O
defmlp	O
=	O
def	O
->	O
item	*(*(char))
[	O
k	O
]	O
->	O
messages	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
;	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
defmlp	O
->	O
nitems	long
;	O
j	O
++	O
)	O
{	O
message_ty	struct
*	O
defmsg	O
=	O
defmlp	O
->	O
item	*(*(char))
[	O
j	O
]	O
;	O
if	O
(	O
!	O
defmsg	O
->	O
used	int
)	O
{	O
message_ty	struct
*	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
;	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
=	O
message_copy	(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))->(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))
(	O
defmsg	O
)	O
;	O
if	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
comment_dot	*(struct(*(*(char)),long,long))
!=	O
NULL	O
)	O
{	O
string_list_free	(*(struct(*(*(char)),long,long)))->(void)
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
comment_dot	*(struct(*(*(char)),long,long))
)	O
;	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
comment_dot	*(struct(*(*(char)),long,long))
=	O
NULL	O
;	O
}	O
if	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
filepos	*(struct(*(char),long))
!=	O
NULL	O
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
filepos_count	long
;	O
i	long
++	O
)	O
free	(*(void))->(void)
(	O
(	O
char	O
*	O
)	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
filepos	*(struct(*(char),long))
[	O
i	long
]	O
.	O
file_name	*(char)
)	O
;	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
filepos_count	long
=	O
0	int
;	O
free	(*(void))->(void)
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
filepos	*(struct(*(char),long))
)	O
;	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
filepos	*(struct(*(char),long))
=	O
NULL	O
;	O
}	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
obsolete	bool
=	O
true	O
;	O
message_list_append	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))->(void)
(	O
msgdomain_list_sublist	(*(struct(*(*(struct`)),long,long,bool,*(char))),*(char),bool)->(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))))
(	O
result	*(*(void))
,	O
domain	*(char)
,	O
true	O
)	O
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
)	O
;	O
stats	O
.	O
obsolete	bool
++	O
;	O
}	O
}	O
}	O
}	O
if	O
(	O
def	O
->	O
encoding	*(char)
==	O
ref	O
->	O
encoding	*(char)
)	O
result	*(*(void))
->	O
encoding	*(char)
=	O
def	O
->	O
encoding	*(char)
;	O
if	O
(	O
verbosity_level	O
>	O
0	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"%sRead %ld old + %ld reference, merged %ld, fuzzied %ld, missing %ld, obsolete %ld.\n"	*(char)
)	O
,	O
!	O
quiet	O
&&	O
verbosity_level	O
<=	O
1	int
?	O
"\n"	*(char)
:	O
""	*(char)
,	O
(	O
long	O
)	O
def	O
->	O
nitems	long
,	O
(	O
long	O
)	O
ref	O
->	O
nitems	long
,	O
(	O
long	O
)	O
stats	O
.	O
merged	O
,	O
(	O
long	O
)	O
stats	O
.	O
fuzzied	O
,	O
(	O
long	O
)	O
stats	O
.	O
missing	O
,	O
(	O
long	O
)	O
stats	O
.	O
obsolete	bool
)	O
;	O
else	O
if	O
(	O
!	O
quiet	O
)	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
_	O
(	O
" done.\n"	*(char)
)	O
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
*	O
defp	O
=	O
def	O
;	O
return	O
result	*(*(void))
;	O
}	O
