struct	O
mu_kwd	struct(*(char),int)
mu_imap_response_codes	array(struct(*(char),int))
[	O
]	O
=	O
{	O
{	O
"ALERT"	*(char)
,	O
MU_IMAP_RESPONSE_ALERT	int
}	O
,	O
{	O
"BADCHARSET"	*(char)
,	O
MU_IMAP_RESPONSE_BADCHARSET	int
}	O
,	O
{	O
"CAPABILITY"	*(char)
,	O
MU_IMAP_RESPONSE_CAPABILITY	int
}	O
,	O
{	O
"PARSE"	*(char)
,	O
MU_IMAP_RESPONSE_PARSE	int
}	O
,	O
{	O
"PERMANENTFLAGS"	*(char)
,	O
MU_IMAP_RESPONSE_PERMANENTFLAGS	int
}	O
,	O
{	O
"READ-ONLY"	*(char)
,	O
MU_IMAP_RESPONSE_READ_ONLY	int
}	O
,	O
{	O
"READ-WRITE"	*(char)
,	O
MU_IMAP_RESPONSE_READ_WRITE	int
}	O
,	O
{	O
"TRYCREATE"	*(char)
,	O
MU_IMAP_RESPONSE_TRYCREATE	int
}	O
,	O
{	O
"UIDNEXT"	*(char)
,	O
MU_IMAP_RESPONSE_UIDNEXT	int
}	O
,	O
{	O
"UIDVALIDITY"	*(char)
,	O
MU_IMAP_RESPONSE_UIDVALIDITY	int
}	O
,	O
{	O
"UNSEEN"	*(char)
,	O
MU_IMAP_RESPONSE_UNSEEN	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
int	O
parse_response_code	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct))->(int)
(	O
mu_imap_t	*(struct)
imap	*(struct)
,	O
mu_list_t	*(struct)
resp	*(struct)
)	O
{	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
arg	*(char)
;	O
int	O
rcode	int
=	O
-	O
1	int
;	O
arg	*(char)
=	O
_mu_imap_list_at	(*(struct),int)->(*(struct(enum(int,int),union(*(struct`),*(char)))))
(	O
resp	*(struct)
,	O
1	int
)	O
;	O
if	O
(	O
!	O
arg	*(char)
)	O
return	O
-	O
1	int
;	O
if	O
(	O
_mu_imap_list_element_is_string	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(char))->(int)
(	O
arg	*(char)
,	O
"["	*(char)
)	O
)	O
{	O
arg	*(char)
=	O
_mu_imap_list_at	(*(struct),int)->(*(struct(enum(int,int),union(*(struct`),*(char)))))
(	O
resp	*(struct)
,	O
2	int
)	O
;	O
if	O
(	O
!	O
arg	*(char)
||	O
arg	*(char)
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
mu_kwd_xlat_name	(*(struct(*(char),int)),*(char),*(int))->(int)
(	O
mu_imap_response_codes	array(struct(*(char),int))
,	O
arg	*(char)
->	O
v	union(*(struct),*(char))
.	O
string	*(char)
,	O
&	O
rcode	int
)	O
)	O
return	O
-	O
1	int
;	O
arg	*(char)
=	O
_mu_imap_list_at	(*(struct),int)->(*(struct(enum(int,int),union(*(struct`),*(char)))))
(	O
resp	*(struct)
,	O
4	int
)	O
;	O
if	O
(	O
!	O
arg	*(char)
||	O
!	O
_mu_imap_list_element_is_string	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(char))->(int)
(	O
arg	*(char)
,	O
"]"	*(char)
)	O
)	O
return	O
-	O
1	int
;	O
}	O
return	O
rcode	int
;	O
}	O
static	O
void	O
ok_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)
(	O
mu_imap_t	*(struct)
imap	*(struct)
,	O
mu_list_t	*(struct)
resp	*(struct)
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
arg	*(char)
;	O
int	O
rcode	int
;	O
size_t	long
n	long
=	O
0	int
;	O
char	O
*	O
p	*(char)
;	O
rcode	int
=	O
parse_response_code	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct))->(int)
(	O
imap	*(struct)
,	O
resp	*(struct)
)	O
;	O
switch	O
(	O
rcode	int
)	O
{	O
case	O
MU_IMAP_RESPONSE_PERMANENTFLAGS	int
:	O
arg	*(char)
=	O
_mu_imap_list_at	(*(struct),int)->(*(struct(enum(int,int),union(*(struct`),*(char)))))
(	O
resp	*(struct)
,	O
3	int
)	O
;	O
if	O
(	O
!	O
arg	*(char)
||	O
_mu_imap_collect_flags	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(int))->(int)
(	O
arg	*(char)
,	O
&	O
imap	*(struct)
->	O
mbox_stat	struct(int,int,int,long,long,long,long,long)
.	O
permanent_flags	int
)	O
)	O
break	O
;	O
imap	*(struct)
->	O
mbox_stat	struct(int,int,int,long,long,long,long,long)
.	O
flags	int
|=	O
MU_IMAP_STAT_PERMANENT_FLAGS	int
;	O
mu_imap_callback	(*(struct),int,long,*(void))->(void)
(	O
imap	*(struct)
,	O
MU_IMAP_CB_PERMANENT_FLAGS	int
,	O
0	int
,	O
&	O
imap	*(struct)
->	O
mbox_stat	struct(int,int,int,long,long,long,long,long)
)	O
;	O
return	O
;	O
case	O
MU_IMAP_RESPONSE_UIDNEXT	int
:	O
arg	*(char)
=	O
_mu_imap_list_at	(*(struct),int)->(*(struct(enum(int,int),union(*(struct`),*(char)))))
(	O
resp	*(struct)
,	O
3	int
)	O
;	O
if	O
(	O
!	O
arg	*(char)
||	O
arg	*(char)
->	O
type	int
!=	O
imap_eltype_string	int
)	O
break	O
;	O
n	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
arg	*(char)
->	O
v	union(*(struct),*(char))
.	O
string	*(char)
,	O
&	O
p	*(char)
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	*(char)
==	O
0	int
)	O
{	O
imap	*(struct)
->	O
mbox_stat	struct(int,int,int,long,long,long,long,long)
.	O
uidnext	long
=	O
n	long
;	O
imap	*(struct)
->	O
mbox_stat	struct(int,int,int,long,long,long,long,long)
.	O
flags	int
|=	O
MU_IMAP_STAT_UIDNEXT	int
;	O
mu_imap_callback	(*(struct),int,long,*(void))->(void)
(	O
imap	*(struct)
,	O
MU_IMAP_CB_UIDNEXT	int
,	O
0	int
,	O
&	O
imap	*(struct)
->	O
mbox_stat	struct(int,int,int,long,long,long,long,long)
)	O
;	O
}	O
return	O
;	O
case	O
MU_IMAP_RESPONSE_UIDVALIDITY	int
:	O
arg	*(char)
=	O
_mu_imap_list_at	(*(struct),int)->(*(struct(enum(int,int),union(*(struct`),*(char)))))
(	O
resp	*(struct)
,	O
3	int
)	O
;	O
if	O
(	O
!	O
arg	*(char)
||	O
arg	*(char)
->	O
type	int
!=	O
imap_eltype_string	int
)	O
break	O
;	O
n	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
arg	*(char)
->	O
v	union(*(struct),*(char))
.	O
string	*(char)
,	O
&	O
p	*(char)
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	*(char)
==	O
0	int
)	O
{	O
imap	*(struct)
->	O
mbox_stat	struct(int,int,int,long,long,long,long,long)
.	O
uidvalidity	long
=	O
n	long
;	O
imap	*(struct)
->	O
mbox_stat	struct(int,int,int,long,long,long,long,long)
.	O
flags	int
|=	O
MU_IMAP_STAT_UIDVALIDITY	int
;	O
mu_imap_callback	(*(struct),int,long,*(void))->(void)
(	O
imap	*(struct)
,	O
MU_IMAP_CB_UIDVALIDITY	int
,	O
0	int
,	O
&	O
imap	*(struct)
->	O
mbox_stat	struct(int,int,int,long,long,long,long,long)
)	O
;	O
}	O
return	O
;	O
case	O
MU_IMAP_RESPONSE_UNSEEN	int
:	O
arg	*(char)
=	O
_mu_imap_list_at	(*(struct),int)->(*(struct(enum(int,int),union(*(struct`),*(char)))))
(	O
resp	*(struct)
,	O
3	int
)	O
;	O
if	O
(	O
!	O
arg	*(char)
||	O
arg	*(char)
->	O
type	int
!=	O
imap_eltype_string	int
)	O
break	O
;	O
n	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
arg	*(char)
->	O
v	union(*(struct),*(char))
.	O
string	*(char)
,	O
&	O
p	*(char)
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	*(char)
==	O
0	int
)	O
{	O
imap	*(struct)
->	O
mbox_stat	struct(int,int,int,long,long,long,long,long)
.	O
first_unseen	long
=	O
n	long
;	O
imap	*(struct)
->	O
mbox_stat	struct(int,int,int,long,long,long,long,long)
.	O
flags	int
|=	O
MU_IMAP_STAT_FIRST_UNSEEN	int
;	O
mu_imap_callback	(*(struct),int,long,*(void))->(void)
(	O
imap	*(struct)
,	O
MU_IMAP_CB_FIRST_UNSEEN	int
,	O
0	int
,	O
&	O
imap	*(struct)
->	O
mbox_stat	struct(int,int,int,long,long,long,long,long)
)	O
;	O
}	O
return	O
;	O
}	O
if	O
(	O
mu_list_tail	(*(struct),*(*(void)))->(int)
(	O
resp	*(struct)
,	O
(	O
void	O
*	O
)	O
&	O
arg	*(char)
)	O
||	O
arg	*(char)
->	O
type	int
!=	O
imap_eltype_string	int
)	O
arg	*(char)
=	O
NULL	O
;	O
mu_imap_callback	(*(struct),int,long,*(void))->(void)
(	O
imap	*(struct)
,	O
MU_IMAP_CB_OK	int
,	O
rcode	int
,	O
arg	*(char)
?	O
arg	*(char)
->	O
v	union(*(struct),*(char))
.	O
string	*(char)
:	O
NULL	O
)	O
;	O
if	O
(	O
imap	*(struct)
->	O
client_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
MU_IMAP_CLIENT_GREETINGS	int
)	O
{	O
imap	*(struct)
->	O
client_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
MU_IMAP_CLIENT_READY	int
;	O
imap	*(struct)
->	O
session_state	enum(int,int,int,int)
=	O
MU_IMAP_SESSION_NONAUTH	int
;	O
}	O
}	O
static	O
void	O
default_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),int,*(struct),*(void))->(void)
(	O
mu_imap_t	*(struct)
imap	*(struct)
,	O
int	O
code	int
,	O
mu_list_t	*(struct)
resp	*(struct)
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
arg	*(char)
;	O
if	O
(	O
mu_list_tail	(*(struct),*(*(void)))->(int)
(	O
resp	*(struct)
,	O
(	O
void	O
*	O
)	O
&	O
arg	*(char)
)	O
||	O
arg	*(char)
->	O
type	int
!=	O
imap_eltype_string	int
)	O
arg	*(char)
=	O
NULL	O
;	O
mu_imap_callback	(*(struct),int,long,*(void))->(void)
(	O
imap	*(struct)
,	O
code	int
,	O
parse_response_code	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct))->(int)
(	O
imap	*(struct)
,	O
resp	*(struct)
)	O
,	O
arg	*(char)
?	O
arg	*(char)
->	O
v	union(*(struct),*(char))
.	O
string	*(char)
:	O
NULL	O
)	O
;	O
}	O
static	O
void	O
no_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)
(	O
mu_imap_t	*(struct)
imap	*(struct)
,	O
mu_list_t	*(struct)
resp	*(struct)
,	O
void	O
*	O
data	*(void)
)	O
{	O
default_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),int,*(struct),*(void))->(void)
(	O
imap	*(struct)
,	O
MU_IMAP_CB_NO	int
,	O
resp	*(struct)
,	O
data	*(void)
)	O
;	O
if	O
(	O
imap	*(struct)
->	O
client_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
MU_IMAP_CLIENT_GREETINGS	int
)	O
imap	*(struct)
->	O
client_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
MU_IMAP_CLIENT_ERROR	int
;	O
}	O
static	O
void	O
bad_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)
(	O
mu_imap_t	*(struct)
imap	*(struct)
,	O
mu_list_t	*(struct)
resp	*(struct)
,	O
void	O
*	O
data	*(void)
)	O
{	O
default_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),int,*(struct),*(void))->(void)
(	O
imap	*(struct)
,	O
MU_IMAP_CB_BAD	int
,	O
resp	*(struct)
,	O
data	*(void)
)	O
;	O
if	O
(	O
imap	*(struct)
->	O
client_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
MU_IMAP_CLIENT_GREETINGS	int
)	O
imap	*(struct)
->	O
client_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
MU_IMAP_CLIENT_ERROR	int
;	O
}	O
static	O
void	O
bye_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)
(	O
mu_imap_t	*(struct)
imap	*(struct)
,	O
mu_list_t	*(struct)
resp	*(struct)
,	O
void	O
*	O
data	*(void)
)	O
{	O
default_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),int,*(struct),*(void))->(void)
(	O
imap	*(struct)
,	O
MU_IMAP_CB_BYE	int
,	O
resp	*(struct)
,	O
data	*(void)
)	O
;	O
imap	*(struct)
->	O
client_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
MU_IMAP_CLIENT_CLOSING	int
;	O
}	O
static	O
void	O
preauth_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)
(	O
mu_imap_t	*(struct)
imap	*(struct)
,	O
mu_list_t	*(struct)
resp	*(struct)
,	O
void	O
*	O
data	*(void)
)	O
{	O
if	O
(	O
imap	*(struct)
->	O
client_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
MU_IMAP_CLIENT_GREETINGS	int
)	O
{	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
arg	*(char)
;	O
if	O
(	O
mu_list_tail	(*(struct),*(*(void)))->(int)
(	O
resp	*(struct)
,	O
(	O
void	O
*	O
)	O
&	O
arg	*(char)
)	O
||	O
arg	*(char)
->	O
type	int
!=	O
imap_eltype_string	int
)	O
arg	*(char)
=	O
NULL	O
;	O
mu_imap_callback	(*(struct),int,long,*(void))->(void)
(	O
imap	*(struct)
,	O
MU_IMAP_CB_PREAUTH	int
,	O
parse_response_code	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct))->(int)
(	O
imap	*(struct)
,	O
resp	*(struct)
)	O
,	O
arg	*(char)
?	O
arg	*(char)
->	O
v	union(*(struct),*(char))
.	O
string	*(char)
:	O
NULL	O
)	O
;	O
imap	*(struct)
->	O
client_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
MU_IMAP_CLIENT_READY	int
;	O
imap	*(struct)
->	O
session_state	enum(int,int,int,int)
=	O
MU_IMAP_SESSION_AUTH	int
;	O
}	O
else	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"ignoring unexpected PREAUTH response"	*(char)
)	O
)	O
;	O
}	O
struct	O
response_closure	struct(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*((*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct`),*(struct`),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),*(void))
{	O
mu_imap_t	*(struct)
imap	*(struct)
;	O
mu_imap_response_action_t	*((*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct`),*(struct`),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void))
fun	*((*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct`),*(struct`),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void))
;	O
void	O
*	O
data	*(void)
;	O
}	O
;	O
struct	O
resptab	struct(*(char),*((*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct`),*(struct`),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),int)
{	O
char	O
*	O
name	*(char)
;	O
mu_imap_response_action_t	*((*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct`),*(struct`),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void))
action	*((*(void),int,long,*(void))->(void))
;	O
int	O
code	int
;	O
}	O
;	O
static	O
struct	O
resptab	struct(*(char),*((*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct`),*(struct`),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),int)
resptab	struct(*(char),*((*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct`),*(struct`),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),int)
[	O
]	O
=	O
{	O
{	O
"OK"	*(char)
,	O
ok_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)
}	O
,	O
{	O
"NO"	*(char)
,	O
no_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)
}	O
,	O
{	O
"BAD"	*(char)
,	O
bad_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)
}	O
,	O
{	O
"PREAUTH"	*(char)
,	O
preauth_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)
}	O
,	O
{	O
"BYE"	*(char)
,	O
bye_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
int	O
_std_unsolicited_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),long,*(struct))->(int)
(	O
mu_imap_t	*(struct)
imap	*(struct)
,	O
size_t	long
count	long
,	O
mu_list_t	*(struct)
resp	*(struct)
)	O
{	O
struct	O
resptab	struct(*(char),*((*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct`),*(struct`),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),int)
*	O
rp	*(struct(*(char),*((*(struct`),*(struct`),*(void))->(void)),int))
;	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
arg	*(char)
=	O
_mu_imap_list_at	(*(struct),int)->(*(struct(enum(int,int),union(*(struct`),*(char)))))
(	O
resp	*(struct)
,	O
0	int
)	O
;	O
if	O
(	O
!	O
arg	*(char)
)	O
return	O
1	int
;	O
if	O
(	O
arg	*(char)
->	O
type	int
==	O
imap_eltype_string	int
)	O
for	O
(	O
rp	*(struct(*(char),*((*(struct`),*(struct`),*(void))->(void)),int))
=	O
resptab	struct(*(char),*((*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct`),*(struct`),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),int)
;	O
rp	*(struct(*(char),*((*(struct`),*(struct`),*(void))->(void)),int))
->	O
name	*(char)
;	O
rp	*(struct(*(char),*((*(struct`),*(struct`),*(void))->(void)),int))
++	O
)	O
{	O
if	O
(	O
mu_c_strcasecmp	(*(char),*(char))->(int)
(	O
rp	*(struct(*(char),*((*(struct`),*(struct`),*(void))->(void)),int))
->	O
name	*(char)
,	O
arg	*(char)
->	O
v	union(*(struct),*(char))
.	O
string	*(char)
)	O
==	O
0	int
)	O
{	O
if	O
(	O
!	O
rp	*(struct(*(char),*((*(struct`),*(struct`),*(void))->(void)),int))
->	O
action	*((*(void),int,long,*(void))->(void))
)	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE9	int
,	O
(	O
"%s:%d: ignoring %s response"	*(char)
,	O
__FILE__	O
,	O
__LINE__	O
,	O
rp	*(struct(*(char),*((*(struct`),*(struct`),*(void))->(void)),int))
->	O
name	*(char)
)	O
)	O
;	O
else	O
rp	*(struct(*(char),*((*(struct`),*(struct`),*(void))->(void)),int))
->	O
action	*((*(void),int,long,*(void))->(void))
(	O
imap	*(struct)
,	O
resp	*(struct)
,	O
NULL	O
)	O
;	O
return	O
0	int
;	O
}	O
}	O
return	O
1	int
;	O
}	O
static	O
int	O
_process_unsolicited_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct))->(int)
(	O
mu_imap_t	*(struct)
imap	*(struct)
,	O
mu_list_t	*(struct)
resp	*(struct)
)	O
{	O
size_t	long
count	long
;	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
arg	*(char)
;	O
if	O
(	O
mu_list_count	(*(struct),*(long))->(int)
(	O
resp	*(struct)
,	O
&	O
count	long
)	O
)	O
return	O
1	int
;	O
if	O
(	O
_std_unsolicited_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),long,*(struct))->(int)
(	O
imap	*(struct)
,	O
count	long
,	O
resp	*(struct)
)	O
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
count	long
==	O
2	int
)	O
{	O
size_t	long
n	long
;	O
char	O
*	O
p	*(char)
;	O
arg	*(char)
=	O
_mu_imap_list_at	(*(struct),int)->(*(struct(enum(int,int),union(*(struct`),*(char)))))
(	O
resp	*(struct)
,	O
1	int
)	O
;	O
if	O
(	O
!	O
arg	*(char)
)	O
return	O
1	int
;	O
if	O
(	O
_mu_imap_list_element_is_string	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(char))->(int)
(	O
arg	*(char)
,	O
"EXISTS"	*(char)
)	O
)	O
{	O
arg	*(char)
=	O
_mu_imap_list_at	(*(struct),int)->(*(struct(enum(int,int),union(*(struct`),*(char)))))
(	O
resp	*(struct)
,	O
0	int
)	O
;	O
if	O
(	O
!	O
arg	*(char)
)	O
return	O
1	int
;	O
n	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
arg	*(char)
->	O
v	union(*(struct),*(char))
.	O
string	*(char)
,	O
&	O
p	*(char)
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	*(char)
)	O
return	O
1	int
;	O
imap	*(struct)
->	O
mbox_stat	struct(int,int,int,long,long,long,long,long)
.	O
message_count	long
=	O
n	long
;	O
imap	*(struct)
->	O
mbox_stat	struct(int,int,int,long,long,long,long,long)
.	O
flags	int
|=	O
MU_IMAP_STAT_MESSAGE_COUNT	int
;	O
mu_imap_callback	(*(struct),int,long,*(void))->(void)
(	O
imap	*(struct)
,	O
MU_IMAP_CB_MESSAGE_COUNT	int
,	O
0	int
,	O
&	O
imap	*(struct)
->	O
mbox_stat	struct(int,int,int,long,long,long,long,long)
)	O
;	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
_mu_imap_list_element_is_string	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(char))->(int)
(	O
arg	*(char)
,	O
"RECENT"	*(char)
)	O
)	O
{	O
arg	*(char)
=	O
_mu_imap_list_at	(*(struct),int)->(*(struct(enum(int,int),union(*(struct`),*(char)))))
(	O
resp	*(struct)
,	O
0	int
)	O
;	O
if	O
(	O
!	O
arg	*(char)
)	O
return	O
1	int
;	O
n	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
arg	*(char)
->	O
v	union(*(struct),*(char))
.	O
string	*(char)
,	O
&	O
p	*(char)
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	*(char)
)	O
return	O
1	int
;	O
imap	*(struct)
->	O
mbox_stat	struct(int,int,int,long,long,long,long,long)
.	O
recent_count	long
=	O
n	long
;	O
imap	*(struct)
->	O
mbox_stat	struct(int,int,int,long,long,long,long,long)
.	O
flags	int
|=	O
MU_IMAP_STAT_RECENT_COUNT	int
;	O
mu_imap_callback	(*(struct),int,long,*(void))->(void)
(	O
imap	*(struct)
,	O
MU_IMAP_CB_RECENT_COUNT	int
,	O
0	int
,	O
&	O
imap	*(struct)
->	O
mbox_stat	struct(int,int,int,long,long,long,long,long)
)	O
;	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
_mu_imap_list_element_is_string	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(char))->(int)
(	O
arg	*(char)
,	O
"EXPUNGE"	*(char)
)	O
)	O
{	O
arg	*(char)
=	O
_mu_imap_list_at	(*(struct),int)->(*(struct(enum(int,int),union(*(struct`),*(char)))))
(	O
resp	*(struct)
,	O
0	int
)	O
;	O
if	O
(	O
!	O
arg	*(char)
)	O
return	O
1	int
;	O
n	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
arg	*(char)
->	O
v	union(*(struct),*(char))
.	O
string	*(char)
,	O
&	O
p	*(char)
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	*(char)
)	O
return	O
1	int
;	O
if	O
(	O
(	O
imap	*(struct)
->	O
mbox_stat	struct(int,int,int,long,long,long,long,long)
.	O
flags	int
&	O
MU_IMAP_STAT_MESSAGE_COUNT	int
)	O
&&	O
imap	*(struct)
->	O
mbox_stat	struct(int,int,int,long,long,long,long,long)
.	O
message_count	long
>	O
0	int
)	O
imap	*(struct)
->	O
mbox_stat	struct(int,int,int,long,long,long,long,long)
.	O
message_count	long
--	O
;	O
imap	*(struct)
->	O
mbox_stat	struct(int,int,int,long,long,long,long,long)
.	O
flags	int
&=	O
~	O
MU_IMAP_STAT_RECENT_COUNT	int
;	O
mu_imap_callback	(*(struct),int,long,*(void))->(void)
(	O
imap	*(struct)
,	O
MU_IMAP_CB_EXPUNGE	int
,	O
n	long
,	O
&	O
imap	*(struct)
->	O
mbox_stat	struct(int,int,int,long,long,long,long,long)
)	O
;	O
return	O
0	int
;	O
}	O
}	O
else	O
if	O
(	O
count	long
==	O
3	int
&&	O
_mu_imap_list_nth_element_is_string	(*(struct),long,*(char))->(int)
(	O
resp	*(struct)
,	O
1	int
,	O
"FETCH"	*(char)
)	O
)	O
{	O
size_t	long
msgno	long
;	O
arg	*(char)
=	O
_mu_imap_list_at	(*(struct),int)->(*(struct(enum(int,int),union(*(struct`),*(char)))))
(	O
resp	*(struct)
,	O
0	int
)	O
;	O
if	O
(	O
arg	*(char)
&&	O
arg	*(char)
->	O
type	int
==	O
imap_eltype_string	int
)	O
{	O
char	O
*	O
p	*(char)
;	O
msgno	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
arg	*(char)
->	O
v	union(*(struct),*(char))
.	O
string	*(char)
,	O
&	O
p	*(char)
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	*(char)
)	O
return	O
1	int
;	O
arg	*(char)
=	O
_mu_imap_list_at	(*(struct),int)->(*(struct(enum(int,int),union(*(struct`),*(char)))))
(	O
resp	*(struct)
,	O
2	int
)	O
;	O
if	O
(	O
arg	*(char)
->	O
type	int
==	O
imap_eltype_list	int
)	O
{	O
mu_list_t	*(struct)
list	*(struct)
;	O
if	O
(	O
_mu_imap_parse_fetch_response	(*(struct),*(*(struct)))->(int)
(	O
arg	*(char)
->	O
v	union(*(struct),*(char))
.	O
list	*(struct)
,	O
&	O
list	*(struct)
)	O
==	O
0	int
)	O
{	O
mu_imap_callback	(*(struct),int,long,*(void))->(void)
(	O
imap	*(struct)
,	O
MU_IMAP_CB_FETCH	int
,	O
msgno	long
,	O
list	*(struct)
)	O
;	O
mu_list_destroy	(*(*(struct)))->(void)
(	O
&	O
list	*(struct)
)	O
;	O
}	O
return	O
0	int
;	O
}	O
}	O
}	O
return	O
1	int
;	O
}	O
int	O
_mu_imap_process_untagged_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),*(void))->(int)
(	O
mu_imap_t	*(struct)
imap	*(struct)
,	O
mu_list_t	*(struct)
list	*(struct)
,	O
mu_imap_response_action_t	*((*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct`),*(struct`),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void))
fun	*((*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct`),*(struct`),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void))
,	O
void	O
*	O
data	*(void)
)	O
{	O
if	O
(	O
_process_unsolicited_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct))->(int)
(	O
imap	*(struct)
,	O
list	*(struct)
)	O
)	O
{	O
if	O
(	O
fun	*((*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct`),*(struct`),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void))
)	O
fun	*((*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct`),*(struct`),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void))
(	O
imap	*(struct)
,	O
list	*(struct)
,	O
data	*(void)
)	O
;	O
else	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE9	int
,	O
(	O
"ignoring unrecognized response"	*(char)
)	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
default_tagged_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),int,*(struct),*(void))->(void)
(	O
mu_imap_t	*(struct)
imap	*(struct)
,	O
int	O
code	int
,	O
mu_list_t	*(struct)
resp	*(struct)
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
arg	*(char)
;	O
if	O
(	O
mu_list_tail	(*(struct),*(*(void)))->(int)
(	O
resp	*(struct)
,	O
(	O
void	O
*	O
)	O
&	O
arg	*(char)
)	O
==	O
0	int
&&	O
arg	*(char)
->	O
type	int
==	O
imap_eltype_string	int
)	O
_mu_imap_seterrstrz	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(char))->(int)
(	O
imap	*(struct)
,	O
arg	*(char)
->	O
v	union(*(struct),*(char))
.	O
string	*(char)
)	O
;	O
imap	*(struct)
->	O
response_code	int
=	O
parse_response_code	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct))->(int)
(	O
imap	*(struct)
,	O
resp	*(struct)
)	O
;	O
mu_imap_callback	(*(struct),int,long,*(void))->(void)
(	O
imap	*(struct)
,	O
code	int
,	O
imap	*(struct)
->	O
response_code	int
,	O
arg	*(char)
?	O
arg	*(char)
->	O
v	union(*(struct),*(char))
.	O
string	*(char)
:	O
NULL	O
)	O
;	O
}	O
static	O
void	O
ok_tagged_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)
(	O
mu_imap_t	*(struct)
imap	*(struct)
,	O
mu_list_t	*(struct)
resp	*(struct)
,	O
void	O
*	O
data	*(void)
)	O
{	O
default_tagged_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),int,*(struct),*(void))->(void)
(	O
imap	*(struct)
,	O
MU_IMAP_CB_TAGGED_OK	int
,	O
resp	*(struct)
,	O
data	*(void)
)	O
;	O
}	O
static	O
void	O
no_tagged_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)
(	O
mu_imap_t	*(struct)
imap	*(struct)
,	O
mu_list_t	*(struct)
resp	*(struct)
,	O
void	O
*	O
data	*(void)
)	O
{	O
default_tagged_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),int,*(struct),*(void))->(void)
(	O
imap	*(struct)
,	O
MU_IMAP_CB_TAGGED_NO	int
,	O
resp	*(struct)
,	O
data	*(void)
)	O
;	O
}	O
static	O
void	O
bad_tagged_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)
(	O
mu_imap_t	*(struct)
imap	*(struct)
,	O
mu_list_t	*(struct)
resp	*(struct)
,	O
void	O
*	O
data	*(void)
)	O
{	O
default_tagged_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),int,*(struct),*(void))->(void)
(	O
imap	*(struct)
,	O
MU_IMAP_CB_TAGGED_BAD	int
,	O
resp	*(struct)
,	O
data	*(void)
)	O
;	O
}	O
static	O
struct	O
resptab	struct(*(char),*((*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct`),*(struct`),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),int)
tagged_resptab	array(struct(*(char),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),int))
[	O
]	O
=	O
{	O
{	O
"OK"	*(char)
,	O
ok_tagged_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)
,	O
MU_IMAP_OK	int
}	O
,	O
{	O
"NO"	*(char)
,	O
no_tagged_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)
,	O
MU_IMAP_NO	int
}	O
,	O
{	O
"BAD"	*(char)
,	O
bad_tagged_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)
,	O
MU_IMAP_BAD	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
int	O
_std_tagged_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),long,*(struct))->(int)
(	O
mu_imap_t	*(struct)
imap	*(struct)
,	O
size_t	long
count	long
,	O
mu_list_t	*(struct)
resp	*(struct)
)	O
{	O
struct	O
resptab	struct(*(char),*((*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct`),*(struct`),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),int)
*	O
rp	*(struct(*(char),*((*(struct`),*(struct`),*(void))->(void)),int))
;	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
arg	*(char)
=	O
_mu_imap_list_at	(*(struct),int)->(*(struct(enum(int,int),union(*(struct`),*(char)))))
(	O
resp	*(struct)
,	O
0	int
)	O
;	O
if	O
(	O
!	O
arg	*(char)
)	O
return	O
1	int
;	O
if	O
(	O
arg	*(char)
->	O
type	int
==	O
imap_eltype_string	int
)	O
for	O
(	O
rp	*(struct(*(char),*((*(struct`),*(struct`),*(void))->(void)),int))
=	O
tagged_resptab	array(struct(*(char),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),int))
;	O
rp	*(struct(*(char),*((*(struct`),*(struct`),*(void))->(void)),int))
->	O
name	*(char)
;	O
rp	*(struct(*(char),*((*(struct`),*(struct`),*(void))->(void)),int))
++	O
)	O
{	O
if	O
(	O
mu_c_strcasecmp	(*(char),*(char))->(int)
(	O
rp	*(struct(*(char),*((*(struct`),*(struct`),*(void))->(void)),int))
->	O
name	*(char)
,	O
arg	*(char)
->	O
v	union(*(struct),*(char))
.	O
string	*(char)
)	O
==	O
0	int
)	O
{	O
imap	*(struct)
->	O
response	enum(int,int,int)
=	O
rp	*(struct(*(char),*((*(struct`),*(struct`),*(void))->(void)),int))
->	O
code	int
;	O
rp	*(struct(*(char),*((*(struct`),*(struct`),*(void))->(void)),int))
->	O
action	*((*(void),int,long,*(void))->(void))
(	O
imap	*(struct)
,	O
resp	*(struct)
,	O
NULL	O
)	O
;	O
return	O
0	int
;	O
}	O
}	O
return	O
1	int
;	O
}	O
int	O
_mu_imap_process_tagged_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct))->(int)
(	O
mu_imap_t	*(struct)
imap	*(struct)
,	O
mu_list_t	*(struct)
resp	*(struct)
)	O
{	O
size_t	long
count	long
;	O
if	O
(	O
mu_list_count	(*(struct),*(long))->(int)
(	O
resp	*(struct)
,	O
&	O
count	long
)	O
)	O
return	O
1	int
;	O
return	O
_std_tagged_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),long,*(struct))->(int)
(	O
imap	*(struct)
,	O
count	long
,	O
resp	*(struct)
)	O
;	O
}	O
