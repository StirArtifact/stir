void	O
exit_failurefully	()->(void)
(	O
void	O
)	O
{	O
_Exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
void	O
exit_diff_trouble	()->(void)
(	O
void	O
)	O
{	O
_Exit	(int)->(void)
(	O
DIFF_TROUBLE	int
)	O
;	O
}	O
void	O
gnurcs_init	(*(struct(*(char),*(char),*(char),*(()->(void)))))->(void)
(	O
struct	O
program	struct(*(char),*(char),*(char),*(()->(void)))
const	O
*	O
program	struct(*(char),*(char),*(char),*(()->(void)))
)	O
{	O
program_name	*(char)
=	O
(	O
char	O
*	O
)	O
program	struct(*(char),*(char),*(char),*(()->(void)))
->	O
name	*(char)
;	O
PLEXUS	O
=	O
make_space	(array(char))->(*(struct(*(char),*(struct),*(void),long)))
(	O
"plexus"	*(char)
)	O
;	O
SINGLE	O
=	O
make_space	(array(char))->(*(struct(*(char),*(struct),*(void),long)))
(	O
"single"	*(char)
)	O
;	O
top	struct(*(struct(*(char),*(char),*(char),*(()->(void)))),struct(*(char),bool,bool,bool,bool,bool,bool,bool,int,bool,int,int,bool,bool,bool,int,*(char),struct(bool,long),*(char),long,bool,bool,*(char),long,*(struct(*(char),enum(int,int,int))),*(struct),*(struct),*(struct)),struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),struct(bool,*(char),*(char),*(char),*(char),*(char))),struct(*(char),int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct))),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),struct(*(char),long)),struct(*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),bool))
=	O
ZLLOC	O
(	O
1	int
,	O
struct	O
top	struct(*(struct(*(char),*(char),*(char),*(()->(void)))),struct(*(char),bool,bool,bool,bool,bool,bool,bool,int,bool,int,int,bool,bool,bool,int,*(char),struct(bool,long),*(char),long,bool,bool,*(char),long,*(struct(*(char),enum(int,int,int))),*(struct),*(struct),*(struct)),struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),struct(bool,*(char),*(char),*(char),*(char),*(char))),struct(*(char),int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct))),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),struct(*(char),long)),struct(*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),bool))
)	O
;	O
unbuffer_standard_error	()->(void)
(	O
)	O
;	O
top	struct(*(struct(*(char),*(char),*(char),*(()->(void)))),struct(*(char),bool,bool,bool,bool,bool,bool,bool,int,bool,int,int,bool,bool,bool,int,*(char),struct(bool,long),*(char),long,bool,bool,*(char),long,*(struct(*(char),enum(int,int,int))),*(struct),*(struct),*(struct)),struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),struct(bool,*(char),*(char),*(char),*(char),*(char))),struct(*(char),int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct))),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),struct(*(char),long)),struct(*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),bool))
->	O
program	struct(*(char),*(char),*(char),*(()->(void)))
=	O
program	struct(*(char),*(char),*(char),*(()->(void)))
;	O
ISR_SCRATCH	O
=	O
isr_init	(*(bool))->(*(struct))
(	O
&	O
BE	O
(	O
quiet	bool
)	O
)	O
;	O
init_ephemstuff	()->(void)
(	O
)	O
;	O
BE	O
(	O
maketimestuff	*(struct)
)	O
=	O
ZLLOC	O
(	O
1	int
,	O
struct	O
maketimestuff	*(struct)
)	O
;	O
if	O
(	O
PROB	O
(	O
time	struct(long,long)
(	O
&	O
BE	O
(	O
now	long
)	O
)	O
)	O
)	O
fatal_sys	(*(char))->(void)
(	O
"time"	*(char)
)	O
;	O
{	O
char	O
*	O
v	*(char)
;	O
long	O
lim	long
;	O
BE	O
(	O
mem_limit	long
)	O
=	O
(	O
(	O
(	O
v	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"RCS_MEM_LIMIT"	*(char)
)	O
)	O
&&	O
v	*(char)
[	O
0	int
]	O
)	O
?	O
v	*(char)
:	O
NULL	O
)	O
?	O
(	O
0	int
>	O
(	O
lim	long
=	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
v	*(char)
,	O
NULL	O
,	O
10	int
)	O
)	O
?	O
0	int
:	O
lim	long
)	O
:	O
256	int
;	O
}	O
}	O
void	O
gnurcs_goodbye	()->(void)
(	O
void	O
)	O
{	O
top	struct(*(struct(*(char),*(char),*(char),*(()->(void)))),struct(*(char),bool,bool,bool,bool,bool,bool,bool,int,bool,int,int,bool,bool,bool,int,*(char),struct(bool,long),*(char),long,bool,bool,*(char),long,*(struct(*(char),enum(int,int,int))),*(struct),*(struct),*(struct)),struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),struct(bool,*(char),*(char),*(char),*(char),*(char))),struct(*(char),int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct))),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),struct(*(char),long)),struct(*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),bool))
=	O
NULL	O
;	O
close_space	(*(struct(*(char),*(struct),*(void),long)))->(void)
(	O
SINGLE	O
)	O
;	O
SINGLE	O
=	O
NULL	O
;	O
close_space	(*(struct(*(char),*(struct),*(void),long)))->(void)
(	O
PLEXUS	O
)	O
;	O
PLEXUS	O
=	O
NULL	O
;	O
}	O
void	O
bad_option	(*(char))->(void)
(	O
char	O
const	O
*	O
option	*(char)
)	O
{	O
PERR	O
(	O
"unknown option: %s"	*(char)
,	O
option	*(char)
)	O
;	O
}	O
void	O
redefined	(int)->(void)
(	O
int	O
c	int
)	O
{	O
PWARN	O
(	O
"redefinition of -%c option"	*(char)
,	O
c	int
)	O
;	O
}	O
struct	O
cbuf	struct(*(char),long)
minus_p	(*(char),*(char))->(struct(*(char),long))
(	O
char	O
const	O
*	O
xrev	*(char)
,	O
char	O
const	O
*	O
rev	*(char)
)	O
{	O
struct	O
cbuf	struct(*(char),long)
rv	struct(*(char),long)
;	O
diagnose	(*(char))->(void)
(	O
"retrieving revision %s"	*(char)
,	O
xrev	*(char)
)	O
;	O
accf	(*(struct(*(char),*(struct),*(void),long)),*(char))->(void)
(	O
SINGLE	O
,	O
"-p%s"	*(char)
,	O
rev	*(char)
)	O
;	O
rv	struct(*(char),long)
.	O
string	*(char)
=	O
finish_string	(*(struct(*(char),*(struct),*(void),long)),*(long))->(*(char))
(	O
SINGLE	O
,	O
&	O
rv	struct(*(char),long)
.	O
size	long
)	O
;	O
return	O
rv	struct(*(char),long)
;	O
}	O
void	O
parse_revpairs	(char,*(char),*((*(char),*(char),bool)->(void)))->(void)
(	O
char	O
option	*(char)
,	O
char	O
*	O
arg	*(char)
,	O
void	O
(	O
*	O
put	*((*(char),*(char),bool)->(void))
)	O
(	O
char	O
const	O
*	O
b	*(char)
,	O
char	O
const	O
*	O
e	*(char)
,	O
bool	bool
sawsep	bool
)	O
)	O
{	O
register	O
char	O
c	int
;	O
int	O
separator	int
=	O
strchr	(*(char),int)->(*(char))
(	O
arg	*(char)
,	O
':'	O
)	O
?	O
':'	O
:	O
'-'	O
;	O
char	O
const	O
*	O
b	*(char)
=	O
NULL	O
,	O
*	O
e	*(char)
=	O
NULL	O
;	O
c	int
=	O
*	O
arg	*(char)
;	O
if	O
(	O
'-'	O
==	O
separator	int
&&	O
strchr	(*(char),int)->(*(char))
(	O
arg	*(char)
,	O
'-'	O
)	O
&&	O
VERSION	O
(	O
5	int
)	O
<=	O
BE	O
(	O
version	int
)	O
)	O
PWARN	O
(	O
"`-' is obsolete in `-%c%s'; use `:' instead"	*(char)
,	O
option	*(char)
,	O
arg	*(char)
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
SKIPWS	O
(	O
)	O
;	O
b	*(char)
=	O
arg	*(char)
;	O
TRUNDLE	O
(	O
)	O
;	O
SKIPWS	O
(	O
)	O
;	O
if	O
(	O
c	int
==	O
separator	int
)	O
{	O
while	O
(	O
(	O
c	int
=	O
*	O
++	O
arg	*(char)
)	O
==	O
' '	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\n'	O
)	O
continue	O
;	O
e	*(char)
=	O
arg	*(char)
;	O
TRUNDLE	O
(	O
)	O
;	O
put	*((*(char),*(char),bool)->(void))
(	O
b	*(char)
,	O
e	*(char)
,	O
true	int
)	O
;	O
SKIPWS	O
(	O
)	O
;	O
}	O
else	O
put	*((*(char),*(char),bool)->(void))
(	O
b	*(char)
,	O
e	*(char)
,	O
false	int
)	O
;	O
if	O
(	O
!	O
c	int
)	O
break	O
;	O
else	O
if	O
(	O
c	int
==	O
','	O
||	O
c	int
==	O
';'	O
)	O
c	int
=	O
*	O
++	O
arg	*(char)
;	O
else	O
PERR	O
(	O
"missing `,' near `%c%s'"	*(char)
,	O
c	int
,	O
arg	*(char)
+	O
1	int
)	O
;	O
}	O
}	O
void	O
set_empty_log_message	(*(struct(*(char),long)))->(void)
(	O
struct	O
cbuf	struct(*(char),long)
*	O
cb	*(struct(*(char),long))
)	O
{	O
cb	*(struct(*(char),long))
->	O
string	*(char)
=	O
EMPTYLOG	*(char)
;	O
cb	*(struct(*(char),long))
->	O
size	long
=	O
sizeof	O
(	O
EMPTYLOG	*(char)
)	O
-	O
1	int
;	O
}	O
void	O
ffree	()->(void)
(	O
void	O
)	O
{	O
forget	(*(struct(*(char),*(struct),*(void),long)))->(void)
(	O
SINGLE	O
)	O
;	O
}	O
char	O
*	O
str_save	(*(char))->(*(char))
(	O
char	O
const	O
*	O
s	*(char)
)	O
{	O
return	O
intern	(*(struct(*(char),*(struct),*(void),long)),*(char),long)->(*(char))
(	O
PLEXUS	O
,	O
s	*(char)
,	O
strlen	(*(char))->(long)
(	O
s	*(char)
)	O
)	O
;	O
}	O
char	O
*	O
cgetenv	(*(char))->(*(char))
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
register	O
char	O
*	O
p	*(char)
;	O
return	O
(	O
p	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
name	*(char)
)	O
)	O
?	O
str_save	(*(char))->(*(char))
(	O
p	*(char)
)	O
:	O
p	*(char)
;	O
}	O
void	O
awrite	(*(char),long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
char	O
const	O
*	O
buf	*(char)
,	O
size_t	long
chars	long
,	O
FILE	struct
*	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
while	O
(	O
SSIZE_MAX	O
<	O
chars	long
)	O
{	O
if	O
(	O
fwrite	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
buf	*(char)
,	O
sizeof	O
(	O
*	O
buf	*(char)
)	O
,	O
SSIZE_MAX	O
,	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
!=	O
SSIZE_MAX	O
)	O
Oerror	()->(void)
(	O
)	O
;	O
buf	*(char)
+=	O
SSIZE_MAX	O
;	O
chars	long
-=	O
SSIZE_MAX	O
;	O
}	O
if	O
(	O
fwrite	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
buf	*(char)
,	O
sizeof	O
(	O
*	O
buf	*(char)
)	O
,	O
chars	long
,	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
!=	O
chars	long
)	O
Oerror	()->(void)
(	O
)	O
;	O
}	O
static	O
int	O
movefd	(int,int)->(int)
(	O
int	O
old	int
,	O
int	O
new	int
)	O
{	O
if	O
(	O
PROB	O
(	O
old	int
)	O
||	O
old	int
==	O
new	int
)	O
return	O
old	int
;	O
new	int
=	O
fcntl	(int,int)->(int)
(	O
old	int
,	O
F_DUPFD	int
,	O
new	int
)	O
;	O
return	O
!	O
PROB	O
(	O
close	*((*(void))->(int))
(	O
old	int
)	O
)	O
?	O
new	int
:	O
-	O
1	int
;	O
}	O
static	O
int	O
fdreopen	(int,*(char),int)->(int)
(	O
int	O
fd	int
,	O
char	O
const	O
*	O
file	*(char)
,	O
int	O
flags	int
)	O
{	O
int	O
newfd	int
;	O
close	*((*(void))->(int))
(	O
fd	int
)	O
;	O
newfd	int
=	O
open	*((*(struct(*((*`)->(*`)),bool,struct(*`,long),*(struct`),struct(*`,long),*(struct`),int)))->(*(struct)))
(	O
file	*(char)
,	O
flags	int
,	O
S_IRUSR	O
|	O
S_IWUSR	O
)	O
;	O
return	O
movefd	(int,int)->(int)
(	O
newfd	int
,	O
fd	int
)	O
;	O
}	O
int	O
runv	(int,*(char),*(*(char)))->(int)
(	O
int	O
infd	int
,	O
char	O
const	O
*	O
outname	*(char)
,	O
char	O
const	O
*	O
*	O
args	*(*(char))
)	O
{	O
int	O
wstatus	int
;	O
if	O
(	O
!	O
BE	O
(	O
fixed_SIGCHLD	bool
)	O
)	O
{	O
BE	O
(	O
fixed_SIGCHLD	bool
)	O
=	O
true	int
;	O
maybe_reset_sigchld	()->(void)
(	O
)	O
;	O
}	O
oflush	()->(void)
(	O
)	O
;	O
{	O
pid_t	int
pid	int
;	O
if	O
(	O
!	O
(	O
pid	int
=	O
vfork	()->(int)
(	O
)	O
)	O
)	O
{	O
char	O
const	O
*	O
notfound	*(char)
;	O
if	O
(	O
infd	int
!=	O
-	O
1	int
&&	O
STDIN_FILENO	int
!=	O
infd	int
&&	O
STDIN_FILENO	int
!=	O
(	O
close	*((*(void))->(int))
(	O
STDIN_FILENO	int
)	O
,	O
fcntl	(int,int)->(int)
(	O
infd	int
,	O
F_DUPFD	int
,	O
STDIN_FILENO	int
)	O
)	O
)	O
{	O
complain	(*(char))->(void)
(	O
"%s: I/O redirection failed\n"	*(char)
,	O
args	*(*(char))
[	O
1	int
]	O
)	O
;	O
exit_diff_trouble	()->(void)
(	O
)	O
;	O
}	O
if	O
(	O
outname	*(char)
)	O
if	O
(	O
PROB	O
(	O
fdreopen	(int,*(char),int)->(int)
(	O
STDOUT_FILENO	int
,	O
outname	*(char)
,	O
O_CREAT	int
|	O
O_TRUNC	int
|	O
O_WRONLY	int
)	O
)	O
)	O
{	O
complain	(*(char))->(void)
(	O
"%s: %s: cannot create\n"	*(char)
,	O
args	*(*(char))
[	O
1	int
]	O
,	O
outname	*(char)
)	O
;	O
exit_diff_trouble	()->(void)
(	O
)	O
;	O
}	O
EXECV	O
(	O
args	*(*(char))
[	O
1	int
]	O
,	O
(	O
char	O
*	O
*	O
)	O
(	O
args	*(*(char))
+	O
1	int
)	O
)	O
;	O
notfound	*(char)
=	O
args	*(*(char))
[	O
1	int
]	O
;	O
if	O
(	O
errno	O
==	O
ENOEXEC	int
)	O
{	O
args	*(*(char))
[	O
0	int
]	O
=	O
notfound	*(char)
=	O
RCS_SHELL	*(char)
;	O
EXECV	O
(	O
args	*(*(char))
[	O
0	int
]	O
,	O
(	O
char	O
*	O
*	O
)	O
args	*(*(char))
)	O
;	O
}	O
complain	(*(char))->(void)
(	O
"%s: not found\n"	*(char)
,	O
notfound	*(char)
)	O
;	O
exit_diff_trouble	()->(void)
(	O
)	O
;	O
}	O
if	O
(	O
PROB	O
(	O
pid	int
)	O
)	O
fatal_sys	(*(char))->(void)
(	O
"fork"	*(char)
)	O
;	O
if	O
(	O
PROB	O
(	O
waitpid	(int,*(int),int)->(int)
(	O
pid	int
,	O
&	O
wstatus	int
,	O
0	int
)	O
)	O
)	O
fatal_sys	(*(char))->(void)
(	O
"waitpid"	*(char)
)	O
;	O
}	O
if	O
(	O
!	O
WIFEXITED	O
(	O
wstatus	int
)	O
)	O
{	O
if	O
(	O
WIFSIGNALED	O
(	O
wstatus	int
)	O
)	O
{	O
complain_signal	(*(char),int)->(void)
(	O
args	*(*(char))
[	O
1	int
]	O
,	O
WTERMSIG	O
(	O
wstatus	int
)	O
)	O
;	O
PFATAL	O
(	O
"%s got a fatal signal"	*(char)
,	O
args	*(*(char))
[	O
1	int
]	O
)	O
;	O
}	O
PFATAL	O
(	O
"%s failed for unknown reason"	*(char)
,	O
args	*(*(char))
[	O
1	int
]	O
)	O
;	O
}	O
return	O
WEXITSTATUS	O
(	O
wstatus	int
)	O
;	O
}	O
int	O
run	(int,*(char))->(int)
(	O
int	O
infd	int
,	O
char	O
const	O
*	O
outname	*(char)
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
ap	array(struct(int,int,*(void),*(void)))
;	O
char	O
const	O
*	O
rgargs	array(*(char))
[	O
CARGSMAX	int
]	O
;	O
register	O
int	O
i	int
;	O
va_start	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
outname	*(char)
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
(	O
rgargs	array(*(char))
[	O
i	int
++	O
]	O
=	O
va_arg	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
char	O
const	O
*	O
)	O
)	O
;	O
)	O
if	O
(	O
CARGSMAX	int
<=	O
i	int
)	O
PFATAL	O
(	O
"too many command arguments"	*(char)
)	O
;	O
va_end	O
(	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
return	O
runv	(int,*(char),*(*(char)))->(int)
(	O
infd	int
,	O
outname	*(char)
,	O
rgargs	array(*(char))
)	O
;	O
}	O
void	O
setRCSversion	(*(char))->(void)
(	O
char	O
const	O
*	O
str	*(char)
)	O
{	O
register	O
char	O
const	O
*	O
s	*(char)
=	O
str	*(char)
+	O
2	int
;	O
if	O
(	O
*	O
s	*(char)
)	O
{	O
int	O
v	*(char)
=	O
VERSION_DEFAULT	O
;	O
if	O
(	O
BE	O
(	O
version_set	bool
)	O
)	O
redefined	(int)->(void)
(	O
'V'	O
)	O
;	O
BE	O
(	O
version_set	bool
)	O
=	O
true	int
;	O
v	*(char)
=	O
0	int
;	O
while	O
(	O
isdigit	(int)->(int)
(	O
*	O
s	*(char)
)	O
)	O
v	*(char)
=	O
10	int
*	O
v	*(char)
+	O
*	O
s	*(char)
++	O
-	O
'0'	O
;	O
if	O
(	O
*	O
s	*(char)
)	O
PERR	O
(	O
"%s isn't a number"	*(char)
,	O
str	*(char)
)	O
;	O
else	O
if	O
(	O
v	*(char)
<	O
VERSION_min	int
||	O
VERSION_max	int
<	O
v	*(char)
)	O
PERR	O
(	O
"%s out of range %d..%d"	*(char)
,	O
str	*(char)
,	O
VERSION_min	int
,	O
VERSION_max	int
)	O
;	O
BE	O
(	O
version	int
)	O
=	O
VERSION	O
(	O
v	*(char)
)	O
;	O
}	O
else	O
{	O
display_version	(*(struct(*(char),*(char),*(char),*(()->(void)))))->(void)
(	O
top	struct(*(struct(*(char),*(char),*(char),*(()->(void)))),struct(*(char),bool,bool,bool,bool,bool,bool,bool,int,bool,int,int,bool,bool,bool,int,*(char),struct(bool,long),*(char),long,bool,bool,*(char),long,*(struct(*(char),enum(int,int,int))),*(struct),*(struct),*(struct)),struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),struct(bool,*(char),*(char),*(char),*(char),*(char))),struct(*(char),int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct))),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),struct(*(char),long)),struct(*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),bool))
->	O
program	struct(*(char),*(char),*(char),*(()->(void)))
)	O
;	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
}	O
int	O
getRCSINIT	(int,*(*(char)),*(*(*(char))))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
char	O
*	O
*	O
*	O
newargv	*(*(*(char)))
)	O
{	O
register	O
char	O
*	O
p	*(char)
,	O
*	O
q	*(char)
,	O
*	O
*	O
pp	*(*(char))
;	O
size_t	long
n	int
;	O
if	O
(	O
!	O
(	O
q	*(char)
=	O
cgetenv	(*(char))->(*(char))
(	O
"RCSINIT"	*(char)
)	O
)	O
)	O
*	O
newargv	*(*(*(char)))
=	O
argv	*(*(char))
;	O
else	O
{	O
n	int
=	O
argc	int
+	O
2	int
;	O
for	O
(	O
p	*(char)
=	O
q	*(char)
;	O
;	O
)	O
{	O
switch	O
(	O
*	O
p	*(char)
++	O
)	O
{	O
default	O
:	O
continue	O
;	O
case	O
' '	O
:	O
case	O
'\b'	O
:	O
case	O
'\f'	O
:	O
case	O
'\n'	O
:	O
case	O
'\r'	O
:	O
case	O
'\t'	O
:	O
case	O
'\v'	O
:	O
n	int
++	O
;	O
continue	O
;	O
case	O
'\0'	O
:	O
break	O
;	O
}	O
break	O
;	O
}	O
*	O
newargv	*(*(*(char)))
=	O
pp	*(*(char))
=	O
pointer_array	(*(struct(*(char),*(struct),*(void),long)),long)->(*(void))
(	O
PLEXUS	O
,	O
n	int
)	O
;	O
*	O
pp	*(*(char))
++	O
=	O
*	O
argv	*(*(char))
++	O
;	O
for	O
(	O
p	*(char)
=	O
q	*(char)
;	O
;	O
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
switch	O
(	O
*	O
q	*(char)
)	O
{	O
case	O
'\0'	O
:	O
goto	O
copyrest	O
;	O
case	O
' '	O
:	O
case	O
'\b'	O
:	O
case	O
'\f'	O
:	O
case	O
'\n'	O
:	O
case	O
'\r'	O
:	O
case	O
'\t'	O
:	O
case	O
'\v'	O
:	O
q	*(char)
++	O
;	O
continue	O
;	O
}	O
break	O
;	O
}	O
*	O
pp	*(*(char))
++	O
=	O
p	*(char)
;	O
++	O
argc	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
switch	O
(	O
(	O
*	O
p	*(char)
++	O
=	O
*	O
q	*(char)
++	O
)	O
)	O
{	O
case	O
'\0'	O
:	O
goto	O
copyrest	O
;	O
case	O
'\\'	O
:	O
if	O
(	O
!	O
*	O
q	*(char)
)	O
goto	O
copyrest	O
;	O
p	*(char)
[	O
-	O
1	int
]	O
=	O
*	O
q	*(char)
++	O
;	O
continue	O
;	O
default	O
:	O
continue	O
;	O
case	O
' '	O
:	O
case	O
'\b'	O
:	O
case	O
'\f'	O
:	O
case	O
'\n'	O
:	O
case	O
'\r'	O
:	O
case	O
'\t'	O
:	O
case	O
'\v'	O
:	O
break	O
;	O
}	O
break	O
;	O
}	O
p	*(char)
[	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
copyrest	O
:	O
while	O
(	O
(	O
*	O
pp	*(*(char))
++	O
=	O
*	O
argv	*(*(char))
++	O
)	O
)	O
continue	O
;	O
}	O
return	O
argc	int
;	O
}	O
