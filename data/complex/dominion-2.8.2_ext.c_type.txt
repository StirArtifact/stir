Suser	struct(int,*(struct(int,array(char),array(char),array(char),struct(int,int),struct(array(char),char,int,int,int,int,int,int,int,int,int,int,int,int),char,int,int,int,int,int,int,int,int,int,int,int,int,int,int,array(char),int,int,int,int,int,int,int,int,int,*(struct(array(char),array(char),int,int,int,int,int,int,long,struct`,int,int,int,int,int,struct`,*`)),*(struct(struct`,*`)),int,int,int,int,int,struct(short,short,short,int),*(struct(int,int,*`)),*(struct(int,int,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,int,int,int,int)))),struct(int,int),struct(int,int),char,int,int,int,int,*(*(int)),*(*(struct(int,int,int))),int,array(array(char)),int,int,int,int,int,int,*(struct(array(char),*(struct(array(char),*`)))),*(struct(array(char),int,int,*(struct(array(char),int,int,*`)))),*(struct(int,array(char),int,int,*(*(char)),*(struct(int,array(char),int,int,*`,*`)))),*(struct(array(char),int,*(struct(array(char),int,*`)))),int,int,int,int,int)
user	struct(int,*(struct(int,array(char),array(char),array(char),struct(int,int),struct(array(char),char,int,int,int,int,int,int,int,int,int,int,int,int),char,int,int,int,int,int,int,int,int,int,int,int,int,int,int,array(char),int,int,int,int,int,int,int,int,int,*(struct(array(char),array(char),int,int,int,int,int,int,long,struct`,int,int,int,int,int,struct`,*`)),*(struct(struct`,*`)),int,int,int,int,int,struct(short,short,short,int),*(struct(int,int,*`)),*(struct(int,int,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,int,int,int,int)))),struct(int,int),struct(int,int),char,int,int,int,int,*(*(int)),*(*(struct(int,int,int))),int,array(array(char)),int,int,int,int,int,int,*(struct(array(char),*(struct(array(char),*`)))),*(struct(array(char),int,int,*(struct(array(char),int,int,*`)))),*(struct(int,array(char),int,int,*(*(char)),*(struct(int,array(char),int,int,*`,*`)))),*(struct(array(char),int,*(struct(array(char),int,*`)))),int,int,int,int,int)
;	O
Sworld	struct(struct(int,int,double,double,double),int,int,int,*(*(struct(struct(int,int),short,short,short,short,short,short,short,short,short,short,int,long,*(char),*(struct`)))),int,*(struct(int,array(char),array(char),array(char),struct(int,int),struct(array(char),char,int,int,int,int,int,int,int,int,int,int,int,int),char,int,int,int,int,int,int,int,int,int,int,int,int,int,int,array(char),int,int,int,int,int,int,int,int,int,*(struct(array(char),array(char),int,int,int,int,int,int,long,struct`,int,int,int,int,int,struct`,*`)),*(struct(struct`,*`)),int,int,int,int,int,struct(short,short,short,int),*(struct(int,int,*`)),*(struct(int,int,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,int,int,int,int)))))
world	struct(struct(int,int,double,double,double),int,int,int,*(*(struct(struct(int,int),short,short,short,short,short,short,short,short,short,short,int,long,*(char),*(struct`)))),int,*(struct(int,array(char),array(char),array(char),struct(int,int),struct(array(char),char,int,int,int,int,int,int,int,int,int,int,int,int),char,int,int,int,int,int,int,int,int,int,int,int,int,int,int,array(char),int,int,int,int,int,int,int,int,int,*(struct(array(char),array(char),int,int,int,int,int,int,long,struct`,int,int,int,int,int,struct`,*`)),*(struct(struct`,*`)),int,int,int,int,int,struct(short,short,short,int),*(struct(int,int,*`)),*(struct(int,int,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,int,int,int,int)))))
;	O
int	O
compressed_world	int
=	O
0	int
;	O
int	O
slow_flag	int
=	O
0	int
;	O
int	O
timeout_secs	int
=	O
0	int
;	O
struct	O
race_list	struct(struct(array(char),char,int,int,int,int,int,int,int,int,int,int,int,int),*(struct(struct(array(char),char,int,int,int,int,int,int,int,int,int,int,int,int),*(struct(struct(array(char),char,int,int,int,int,int,int,int,int,int,int,int,int),*(struct`))))))
*	O
races	*(struct(struct(array(char),char,int,int,int,int,int,int,int,int,int,int,int,int),*(struct(struct(array(char),char,int,int,int,int,int,int,int,int,int,int,int,int),*(struct`)))))
;	O
int	O
total_army_types	int
;	O
struct	O
army_type	struct(array(char),char,float,int,int,int,int,int,int,int,int,int,array(char))
*	O
army_types	*(struct(array(char),char,float,int,int,int,int,int,int,int,int,int,array(char)))
;	O
struct	O
spirit_type	struct(array(char),char,int,float,int,int,int,int,int)
*	O
spirit_types	*(struct(array(char),char,int,float,int,int,int,int,int))
;	O
Sh_spell	struct(int,array(char),int,int,*(*(char)),*(struct(int,array(char),int,int,*(*(char)),*(struct(int,array(char),int,int,*`,*`)))))
*	O
hanging_spells	*(struct(int,array(char),int,int,*(*(char)),*(struct(int,array(char),int,int,*(*`),*(struct`)))))
;	O
char	O
libdir	array(char)
[	O
200	int
]	O
;	O
char	O
*	O
current_dir	*(char)
;	O
int	O
ruid	int
,	O
euid	int
;	O
char	O
help_tag	array(char)
[	O
EXECLEN	int
]	O
;	O
int	O
is_in_diplo	int
=	O
0	int
;	O
int	O
(	O
*	O
wrapx	*((int,int)->(int))
)	O
(	O
)	O
;	O
int	O
(	O
*	O
wrapy	*((int,int)->(int))
)	O
(	O
)	O
;	O
int	O
(	O
*	O
keymap	array(*(()->(int)))
[	O
128	int
]	O
)	O
(	O
)	O
;	O
int	O
debug	int
=	O
0	int
;	O
struct	O
s_desig_map	struct(char,*(char),int,int,int,int)
desig_map	array(struct(char,*(char),int,int,int,int))
[	O
]	O
=	O
{	O
{	O
'x'	O
,	O
"none"	*(char)
,	O
1000	int
,	O
30	int
,	O
0	int
,	O
7	int
}	O
,	O
{	O
'f'	O
,	O
"farm"	*(char)
,	O
5000	int
,	O
100	int
,	O
10	int
,	O
500	int
}	O
,	O
{	O
'm'	O
,	O
"mtl. mine"	*(char)
,	O
10000	int
,	O
100	int
,	O
10	int
,	O
800	int
}	O
,	O
{	O
'j'	O
,	O
"jwl. mine"	*(char)
,	O
10000	int
,	O
100	int
,	O
10	int
,	O
800	int
}	O
,	O
{	O
'c'	O
,	O
"city"	*(char)
,	O
30000	int
,	O
200	int
,	O
300	int
,	O
5000	int
}	O
,	O
{	O
'C'	O
,	O
"capital"	*(char)
,	O
50000	int
,	O
300	int
,	O
300	int
,	O
7000	int
}	O
,	O
{	O
'u'	O
,	O
"university"	*(char)
,	O
10000	int
,	O
30	int
,	O
200	int
,	O
1000	int
}	O
,	O
{	O
'+'	O
,	O
"temple"	*(char)
,	O
5000	int
,	O
0	int
,	O
200	int
,	O
1000	int
}	O
,	O
{	O
'T'	O
,	O
"town"	*(char)
,	O
10000	int
,	O
150	int
,	O
10	int
,	O
300	int
}	O
,	O
{	O
'!'	O
,	O
"fort"	*(char)
,	O
10000	int
,	O
50	int
,	O
10	int
,	O
200	int
}	O
,	O
{	O
'h'	O
,	O
"hospital"	*(char)
,	O
10000	int
,	O
100	int
,	O
10	int
,	O
300	int
}	O
}	O
;	O
struct	O
s_altitude_map	struct(char,*(char),int)
altitude_map	array(struct(char,*(char),int))
[	O
]	O
=	O
{	O
{	O
'v'	O
,	O
"Trench"	*(char)
,	O
TRENCH	O
}	O
,	O
{	O
'-'	O
,	O
"Ocean Plain"	*(char)
,	O
OCEAN_PLAINS	O
}	O
,	O
{	O
'^'	O
,	O
"Sea Mountain"	*(char)
,	O
SEA_MOUNT	O
}	O
,	O
{	O
'+'	O
,	O
"Cont. Shelf"	*(char)
,	O
CONT_SHELF	O
}	O
,	O
{	O
'#'	O
,	O
"Shallows"	*(char)
,	O
SHALLOWS	O
}	O
,	O
{	O
'~'	O
,	O
"Sea Level"	*(char)
,	O
SEA_LEVEL	int
}	O
,	O
{	O
'.'	O
,	O
"Lowlands"	*(char)
,	O
LOWLANDS	int
}	O
,	O
{	O
'-'	O
,	O
"Plains"	*(char)
,	O
PLAINS	int
}	O
,	O
{	O
'%'	O
,	O
"Hills"	*(char)
,	O
HILLS	int
}	O
,	O
{	O
'='	O
,	O
"Plateau"	*(char)
,	O
PLATEAU	int
}	O
,	O
{	O
'^'	O
,	O
"Mountains"	*(char)
,	O
MOUNTAINS	int
}	O
,	O
{	O
'+'	O
,	O
"Mountain Peak"	*(char)
,	O
MOUNTAIN_PEAK	int
}	O
}	O
;	O
struct	O
item_map	struct(char,*(char))
terrains	array(struct(char,*(char)))
[	O
]	O
=	O
{	O
{	O
'O'	O
,	O
"Ocean"	*(char)
}	O
,	O
{	O
'B'	O
,	O
"Bay"	*(char)
}	O
,	O
{	O
'R'	O
,	O
"Reef"	*(char)
}	O
,	O
{	O
'L'	O
,	O
"Lake"	*(char)
}	O
,	O
{	O
'R'	O
,	O
"River"	*(char)
}	O
,	O
{	O
'#'	O
,	O
"Ice"	*(char)
}	O
,	O
{	O
'b'	O
,	O
"Barren"	*(char)
}	O
,	O
{	O
's'	O
,	O
"Swamped"	*(char)
}	O
,	O
{	O
'g'	O
,	O
"Grassy"	*(char)
}	O
,	O
{	O
'B'	O
,	O
"Brush"	*(char)
}	O
,	O
{	O
'f'	O
,	O
"Forested"	*(char)
}	O
,	O
{	O
'j'	O
,	O
"Jungle"	*(char)
}	O
}	O
;	O
struct	O
item_map	struct(char,*(char))
climates	array(struct(char,*(char)))
[	O
]	O
=	O
{	O
{	O
'D'	O
,	O
"Desert"	*(char)
}	O
,	O
{	O
'd'	O
,	O
"Semiarid"	*(char)
}	O
,	O
{	O
'h'	O
,	O
"Humid Subtropical"	*(char)
}	O
,	O
{	O
't'	O
,	O
"Tropical Wet and Dry"	*(char)
}	O
,	O
{	O
'T'	O
,	O
"Rainy Tropical"	*(char)
}	O
,	O
{	O
's'	O
,	O
"Dry Summer Subtropical"	*(char)
}	O
,	O
{	O
'm'	O
,	O
"Mid-latitude Marine"	*(char)
}	O
,	O
{	O
'w'	O
,	O
"Humid Continental Warm"	*(char)
}	O
,	O
{	O
'c'	O
,	O
"Humid Continental Cool"	*(char)
}	O
,	O
{	O
'a'	O
,	O
"Subarctic"	*(char)
}	O
,	O
{	O
'A'	O
,	O
"Polar"	*(char)
}	O
}	O
;	O
char	O
*	O
dip_status	array(*(char))
[	O
]	O
=	O
{	O
" SELF"	*(char)
,	O
" UNMET"	*(char)
,	O
"JIHAD"	*(char)
,	O
"WAR"	*(char)
,	O
"HOSTILE"	*(char)
,	O
"UNRECOGNIZED"	*(char)
,	O
"NEUTRAL"	*(char)
,	O
"RECOGNIZED"	*(char)
,	O
"FRIENDLY"	*(char)
,	O
"ALLIED"	*(char)
,	O
"TREATY"	*(char)
}	O
;	O
struct	O
item_map	struct(char,*(char))
tradeitems	array(struct(char,*(char)))
[	O
]	O
=	O
{	O
{	O
'g'	O
,	O
"GOLD"	*(char)
}	O
,	O
{	O
'm'	O
,	O
"METAL"	*(char)
}	O
,	O
{	O
'j'	O
,	O
"JEWELS"	*(char)
}	O
,	O
{	O
'f'	O
,	O
"FOOD"	*(char)
}	O
,	O
{	O
'e'	O
,	O
"END"	*(char)
}	O
}	O
;	O
struct	O
army_flags	struct(char,array(char))
army_flags	struct(char,array(char))
[	O
]	O
=	O
{	O
{	O
'F'	O
,	O
"This army flies"	*(char)
}	O
,	O
{	O
'H'	O
,	O
"This army is hidden"	*(char)
}	O
,	O
{	O
'V'	O
,	O
"This army will possess the dead"	*(char)
}	O
,	O
{	O
'T'	O
,	O
"This army is in transport"	*(char)
}	O
,	O
{	O
'^'	O
,	O
"This army throws missiles"	*(char)
}	O
,	O
{	O
'W'	O
,	O
"This army travels in water"	*(char)
}	O
,	O
{	O
'f'	O
,	O
"This army is front line"	*(char)
}	O
,	O
{	O
'k'	O
,	O
"This army is kamikaze"	*(char)
}	O
,	O
{	O
'm'	O
,	O
"This army is a machine"	*(char)
}	O
,	O
{	O
'd'	O
,	O
"This army can disguise itself"	*(char)
}	O
,	O
{	O
'w'	O
,	O
"This army can cast spells"	*(char)
}	O
,	O
{	O
's'	O
,	O
"This army can do sorcery"	*(char)
}	O
,	O
{	O
'c'	O
,	O
"This army can carry cargo"	*(char)
}	O
,	O
{	O
'U'	O
,	O
"This army burrows underground"	*(char)
}	O
,	O
{	O
'L'	O
,	O
"This army travels on land"	*(char)
}	O
,	O
{	O
'I'	O
,	O
""	*(char)
}	O
,	O
{	O
'u'	O
,	O
"This army is uncontrolled"	*(char)
}	O
,	O
{	O
'R'	O
,	O
"This army is race-specific"	*(char)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
}	O
,	O
{	O
' '	O
,	O
""	*(char)
}	O
}	O
;	O
char	O
*	O
update_time	*(char)
;	O
char	O
*	O
civ_move	array(*(char))
[	O
]	O
=	O
{	O
"None"	*(char)
,	O
"Restricted"	*(char)
,	O
"Free"	*(char)
}	O
;	O
Sh_spell	struct(int,array(char),int,int,*(*(char)),*(struct(int,array(char),int,int,*(*(char)),*(struct(int,array(char),int,int,*`,*`)))))
*	O
dead_spells	*(struct(int,array(char),int,int,*(*(char)),*(struct(int,array(char),int,int,*(*`),*(struct`)))))
=	O
NULL	O
;	O
Sdiplo	struct(int,int,int)
*	O
*	O
initial_diplo	*(*(struct(int,int,int)))
;	O
