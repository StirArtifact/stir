int	O
fifo_init	(*(struct(*(char),long,long,long)))->(int)
(	O
fifo	struct(*(char),long,long,long)
*	O
f	*(struct(*(char),long,long,long))
)	O
{	O
f	*(struct(*(char),long,long,long))
->	O
buffer	*(char)
=	O
NULL	O
;	O
f	*(struct(*(char),long,long,long))
->	O
size	long
=	O
0	int
;	O
f	*(struct(*(char),long,long,long))
->	O
rpnt	long
=	O
0	int
;	O
f	*(struct(*(char),long,long,long))
->	O
wrts	long
=	O
0	int
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
fifo_free	(*(struct(*(char),long,long,long)))->(int)
(	O
fifo	struct(*(char),long,long,long)
*	O
f	*(struct(*(char),long,long,long))
)	O
{	O
if	O
(	O
f	*(struct(*(char),long,long,long))
->	O
buffer	*(char)
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
f	*(struct(*(char),long,long,long))
->	O
buffer	*(char)
)	O
;	O
fifo_init	(*(struct(*(char),long,long,long)))->(int)
(	O
f	*(struct(*(char),long,long,long))
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
fifo_write	(*(struct(*(char),long,long,long)),*(void),long)->(int)
(	O
fifo	struct(*(char),long,long,long)
*	O
f	*(struct(*(char),long,long,long))
,	O
void	O
*	O
vbuffer	*(void)
,	O
size_t	long
size	long
)	O
{	O
unsigned	O
char	O
*	O
buffer	*(char)
=	O
(	O
unsigned	O
char	O
*	O
)	O
vbuffer	*(void)
;	O
size_t	long
msize	long
,	O
wpnt	long
,	O
osize	long
;	O
if	O
(	O
size	long
>	O
f	*(struct(*(char),long,long,long))
->	O
size	long
-	O
f	*(struct(*(char),long,long,long))
->	O
wrts	long
)	O
{	O
osize	long
=	O
f	*(struct(*(char),long,long,long))
->	O
size	long
;	O
f	*(struct(*(char),long,long,long))
->	O
size	long
=	O
f	*(struct(*(char),long,long,long))
->	O
wrts	long
+	O
size	long
+	O
FIFO_FRAGSIZE	int
-	O
1	int
;	O
f	*(struct(*(char),long,long,long))
->	O
size	long
=	O
FIFO_FRAGSIZE	int
*	O
(	O
f	*(struct(*(char),long,long,long))
->	O
size	long
/	O
FIFO_FRAGSIZE	int
)	O
;	O
f	*(struct(*(char),long,long,long))
->	O
buffer	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
f	*(struct(*(char),long,long,long))
->	O
buffer	*(char)
,	O
f	*(struct(*(char),long,long,long))
->	O
size	long
)	O
;	O
realloc_check	O
(	O
f	*(struct(*(char),long,long,long))
->	O
buffer	*(char)
,	O
f	*(struct(*(char),long,long,long))
->	O
size	long
)	O
;	O
if	O
(	O
f	*(struct(*(char),long,long,long))
->	O
rpnt	long
+	O
f	*(struct(*(char),long,long,long))
->	O
wrts	long
>	O
osize	long
)	O
{	O
memmove	(*(void),*(void),long)->(*(void))
(	O
f	*(struct(*(char),long,long,long))
->	O
buffer	*(char)
+	O
f	*(struct(*(char),long,long,long))
->	O
rpnt	long
+	O
(	O
f	*(struct(*(char),long,long,long))
->	O
size	long
-	O
osize	long
)	O
,	O
f	*(struct(*(char),long,long,long))
->	O
buffer	*(char)
+	O
f	*(struct(*(char),long,long,long))
->	O
rpnt	long
,	O
osize	long
-	O
f	*(struct(*(char),long,long,long))
->	O
rpnt	long
)	O
;	O
f	*(struct(*(char),long,long,long))
->	O
rpnt	long
+=	O
(	O
f	*(struct(*(char),long,long,long))
->	O
size	long
-	O
osize	long
)	O
;	O
}	O
}	O
while	O
(	O
size	long
>	O
0	int
)	O
{	O
wpnt	long
=	O
f	*(struct(*(char),long,long,long))
->	O
rpnt	long
+	O
f	*(struct(*(char),long,long,long))
->	O
wrts	long
;	O
if	O
(	O
wpnt	long
>=	O
f	*(struct(*(char),long,long,long))
->	O
size	long
)	O
wpnt	long
-=	O
f	*(struct(*(char),long,long,long))
->	O
size	long
;	O
msize	long
=	O
f	*(struct(*(char),long,long,long))
->	O
size	long
-	O
wpnt	long
;	O
if	O
(	O
size	long
<	O
msize	long
)	O
msize	long
=	O
size	long
;	O
if	O
(	O
buffer	*(char)
!=	O
NULL	O
)	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
f	*(struct(*(char),long,long,long))
->	O
buffer	*(char)
+	O
wpnt	long
,	O
buffer	*(char)
,	O
msize	long
)	O
;	O
buffer	*(char)
+=	O
msize	long
;	O
}	O
f	*(struct(*(char),long,long,long))
->	O
wrts	long
+=	O
msize	long
;	O
size	long
-=	O
msize	long
;	O
}	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
size_t	long
fifo_available	(*(struct(*(char),long,long,long)))->(long)
(	O
fifo	struct(*(char),long,long,long)
*	O
f	*(struct(*(char),long,long,long))
)	O
{	O
return	O
(	O
f	*(struct(*(char),long,long,long))
->	O
wrts	long
)	O
;	O
}	O
size_t	long
fifo_read	(*(struct(*(char),long,long,long)),*(void),long)->(long)
(	O
fifo	struct(*(char),long,long,long)
*	O
f	*(struct(*(char),long,long,long))
,	O
void	O
*	O
vbuffer	*(void)
,	O
size_t	long
size	long
)	O
{	O
unsigned	O
char	O
*	O
buffer	*(char)
=	O
(	O
unsigned	O
char	O
*	O
)	O
vbuffer	*(void)
;	O
size_t	long
rsize	long
,	O
rsize0	long
,	O
msize	long
;	O
if	O
(	O
size	long
<	O
f	*(struct(*(char),long,long,long))
->	O
wrts	long
)	O
rsize	long
=	O
size	long
;	O
else	O
rsize	long
=	O
f	*(struct(*(char),long,long,long))
->	O
wrts	long
;	O
rsize0	long
=	O
rsize	long
;	O
while	O
(	O
rsize	long
>	O
0	int
)	O
{	O
msize	long
=	O
f	*(struct(*(char),long,long,long))
->	O
size	long
-	O
f	*(struct(*(char),long,long,long))
->	O
rpnt	long
;	O
if	O
(	O
rsize	long
<	O
msize	long
)	O
msize	long
=	O
rsize	long
;	O
if	O
(	O
buffer	*(char)
!=	O
NULL	O
)	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
f	*(struct(*(char),long,long,long))
->	O
buffer	*(char)
+	O
f	*(struct(*(char),long,long,long))
->	O
rpnt	long
,	O
msize	long
)	O
;	O
buffer	*(char)
+=	O
msize	long
;	O
}	O
f	*(struct(*(char),long,long,long))
->	O
rpnt	long
+=	O
msize	long
;	O
f	*(struct(*(char),long,long,long))
->	O
wrts	long
-=	O
msize	long
;	O
if	O
(	O
f	*(struct(*(char),long,long,long))
->	O
rpnt	long
>=	O
f	*(struct(*(char),long,long,long))
->	O
size	long
)	O
f	*(struct(*(char),long,long,long))
->	O
rpnt	long
=	O
0	int
;	O
rsize	long
-=	O
msize	long
;	O
}	O
return	O
(	O
rsize0	long
)	O
;	O
}	O
size_t	long
fifo_skip	(*(struct(*(char),long,long,long)),long)->(long)
(	O
fifo	struct(*(char),long,long,long)
*	O
f	*(struct(*(char),long,long,long))
,	O
size_t	long
size	long
)	O
{	O
return	O
(	O
fifo_read	(*(struct(*(char),long,long,long)),*(void),long)->(long)
(	O
f	*(struct(*(char),long,long,long))
,	O
NULL	O
,	O
size	long
)	O
)	O
;	O
}	O
size_t	long
fifo_peek	(*(struct(*(char),long,long,long)),*(void),long)->(long)
(	O
fifo	struct(*(char),long,long,long)
*	O
f	*(struct(*(char),long,long,long))
,	O
void	O
*	O
vbuffer	*(void)
,	O
size_t	long
size	long
)	O
{	O
size_t	long
rpnt	long
,	O
wrts	long
,	O
ret	long
;	O
rpnt	long
=	O
f	*(struct(*(char),long,long,long))
->	O
rpnt	long
;	O
wrts	long
=	O
f	*(struct(*(char),long,long,long))
->	O
wrts	long
;	O
ret	long
=	O
fifo_read	(*(struct(*(char),long,long,long)),*(void),long)->(long)
(	O
f	*(struct(*(char),long,long,long))
,	O
vbuffer	*(void)
,	O
size	long
)	O
;	O
f	*(struct(*(char),long,long,long))
->	O
rpnt	long
=	O
rpnt	long
;	O
f	*(struct(*(char),long,long,long))
->	O
wrts	long
=	O
wrts	long
;	O
return	O
(	O
ret	long
)	O
;	O
}	O
size_t	long
fifo_flush	(*(struct(*(char),long,long,long)),*(void))->(long)
(	O
fifo	struct(*(char),long,long,long)
*	O
f	*(struct(*(char),long,long,long))
,	O
void	O
*	O
vbuffer	*(void)
)	O
{	O
size_t	long
size	long
;	O
size	long
=	O
fifo_available	(*(struct(*(char),long,long,long)))->(long)
(	O
f	*(struct(*(char),long,long,long))
)	O
;	O
if	O
(	O
size	long
>	O
0	int
)	O
fifo_read	(*(struct(*(char),long,long,long)),*(void),long)->(long)
(	O
f	*(struct(*(char),long,long,long))
,	O
vbuffer	*(void)
,	O
size	long
)	O
;	O
return	O
(	O
size	long
)	O
;	O
}	O
