int	O
mu_envelope_create	(*(*(struct)),*(void))->(int)
(	O
mu_envelope_t	*(struct)
*	O
penvelope	*(*(struct(*(void),*(char),*(char),*((*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)))))
,	O
void	O
*	O
owner	*(void)
)	O
{	O
mu_envelope_t	*(struct)
envelope	*(struct)
;	O
if	O
(	O
penvelope	*(*(struct(*(void),*(char),*(char),*((*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)))))
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
envelope	*(struct)
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
envelope	*(struct)
)	O
)	O
;	O
if	O
(	O
envelope	*(struct)
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
envelope	*(struct)
->	O
owner	*(void)
=	O
owner	*(void)
;	O
*	O
penvelope	*(*(struct(*(void),*(char),*(char),*((*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)))))
=	O
envelope	*(struct)
;	O
return	O
0	int
;	O
}	O
void	O
mu_envelope_destroy	(*(*(struct)),*(void))->(void)
(	O
mu_envelope_t	*(struct)
*	O
penvelope	*(*(struct(*(void),*(char),*(char),*((*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)))))
,	O
void	O
*	O
owner	*(void)
)	O
{	O
if	O
(	O
penvelope	*(*(struct(*(void),*(char),*(char),*((*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)))))
&&	O
*	O
penvelope	*(*(struct(*(void),*(char),*(char),*((*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)))))
)	O
{	O
mu_envelope_t	*(struct)
envelope	*(struct)
=	O
*	O
penvelope	*(*(struct(*(void),*(char),*(char),*((*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)))))
;	O
if	O
(	O
envelope	*(struct)
->	O
owner	*(void)
==	O
owner	*(void)
)	O
{	O
if	O
(	O
envelope	*(struct)
->	O
_destroy	*((*(struct))->(int))
)	O
envelope	*(struct)
->	O
_destroy	*((*(struct))->(int))
(	O
envelope	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
envelope	*(struct)
->	O
date	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
envelope	*(struct)
->	O
sender	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
envelope	*(struct)
)	O
;	O
}	O
*	O
penvelope	*(*(struct(*(void),*(char),*(char),*((*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)))))
=	O
NULL	O
;	O
}	O
}	O
void	O
*	O
mu_envelope_get_owner	(*(struct))->(*(void))
(	O
mu_envelope_t	*(struct)
envelope	*(struct)
)	O
{	O
return	O
(	O
envelope	*(struct)
)	O
?	O
envelope	*(struct)
->	O
owner	*(void)
:	O
NULL	O
;	O
}	O
int	O
mu_envelope_set_sender	(*(struct),*((*(struct),*(char),long,*(long))->(int)),*(void))->(int)
(	O
mu_envelope_t	*(struct)
envelope	*(struct)
,	O
int	O
(	O
*	O
_sender	*((*(struct),*(char),long,*(long))->(int))
)	O
(	O
mu_envelope_t	*(struct)
,	O
char	O
*	O
,	O
size_t	long
,	O
size_t	long
*	O
)	O
,	O
void	O
*	O
owner	*(void)
)	O
{	O
if	O
(	O
envelope	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
envelope	*(struct)
->	O
owner	*(void)
!=	O
owner	*(void)
)	O
return	O
EACCES	int
;	O
envelope	*(struct)
->	O
_get_sender	*((*(struct(*(void),*(char),*(char),*((*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)))),*(char),long,*(long))->(int))
=	O
_sender	*((*(struct),*(char),long,*(long))->(int))
;	O
return	O
0	int
;	O
}	O
int	O
mu_envelope_set_date	(*(struct),*((*(struct),*(char),long,*(long))->(int)),*(void))->(int)
(	O
mu_envelope_t	*(struct)
envelope	*(struct)
,	O
int	O
(	O
*	O
_date	*((*(struct),*(char),long,*(long))->(int))
)	O
(	O
mu_envelope_t	*(struct)
,	O
char	O
*	O
,	O
size_t	long
,	O
size_t	long
*	O
)	O
,	O
void	O
*	O
owner	*(void)
)	O
{	O
if	O
(	O
envelope	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
envelope	*(struct)
->	O
owner	*(void)
!=	O
owner	*(void)
)	O
return	O
EACCES	int
;	O
envelope	*(struct)
->	O
_get_date	*((*(struct(*(void),*(char),*(char),*((*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)))),*(char),long,*(long))->(int))
=	O
_date	*((*(struct),*(char),long,*(long))->(int))
;	O
return	O
0	int
;	O
}	O
int	O
mu_envelope_set_destroy	(*(struct),*((*(struct))->(int)),*(void))->(int)
(	O
mu_envelope_t	*(struct)
envelope	*(struct)
,	O
int	O
(	O
*	O
_destroy	*((*(struct))->(int))
)	O
(	O
mu_envelope_t	*(struct)
)	O
,	O
void	O
*	O
owner	*(void)
)	O
{	O
if	O
(	O
envelope	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
envelope	*(struct)
->	O
owner	*(void)
!=	O
owner	*(void)
)	O
return	O
EACCES	int
;	O
envelope	*(struct)
->	O
_destroy	*((*(struct))->(int))
=	O
_destroy	*((*(struct))->(int))
;	O
return	O
0	int
;	O
}	O
DECL_ACCESSORS	O
(	O
sender	*(char)
)	O
DECL_ACCESSORS	O
(	O
date	*(char)
)	O
