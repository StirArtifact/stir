extern	O
char	O
*	O
*	O
environ	*(*(char))
;	O
static	O
int	O
find_env_pos	(*(*(char)),*(char),*(long),*(long))->(int)
(	O
char	O
*	O
*	O
env	*(*(char))
,	O
char	O
*	O
name	*(char)
,	O
size_t	long
*	O
idx	*(long)
,	O
size_t	long
*	O
valoff	*(long)
)	O
{	O
size_t	long
nlen	long
=	O
strcspn	(*(char),*(char))->(long)
(	O
name	*(char)
,	O
"+="	*(char)
)	O
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
env	*(*(char))
[	O
i	long
]	O
;	O
i	long
++	O
)	O
{	O
size_t	long
elen	long
=	O
strcspn	(*(char),*(char))->(long)
(	O
env	*(*(char))
[	O
i	long
]	O
,	O
"="	*(char)
)	O
;	O
if	O
(	O
elen	long
==	O
nlen	long
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
name	*(char)
,	O
env	*(*(char))
[	O
i	long
]	O
,	O
nlen	long
)	O
==	O
0	int
)	O
{	O
if	O
(	O
idx	*(long)
)	O
*	O
idx	*(long)
=	O
i	long
;	O
if	O
(	O
valoff	*(long)
)	O
*	O
valoff	*(long)
=	O
elen	long
+	O
1	int
;	O
return	O
0	int
;	O
}	O
}	O
return	O
-	O
1	int
;	O
}	O
static	O
char	O
*	O
find_env_ptr	(*(*(char)),*(char),int)->(*(char))
(	O
char	O
*	O
*	O
env	*(*(char))
,	O
char	O
*	O
name	*(char)
,	O
int	O
val	int
)	O
{	O
size_t	long
i	long
,	O
j	long
;	O
if	O
(	O
find_env_pos	(*(*(char)),*(char),*(long),*(long))->(int)
(	O
env	*(*(char))
,	O
name	*(char)
,	O
&	O
i	long
,	O
&	O
j	long
)	O
)	O
return	O
NULL	O
;	O
return	O
val	int
?	O
env	*(*(char))
[	O
i	long
]	O
+	O
j	long
:	O
env	*(*(char))
[	O
i	long
]	O
;	O
}	O
static	O
int	O
var_is_unset	(*(*(char)),*(char))->(int)
(	O
char	O
*	O
*	O
env	*(*(char))
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
int	O
i	long
;	O
int	O
nlen	long
=	O
strcspn	(*(char),*(char))->(long)
(	O
name	*(char)
,	O
"="	*(char)
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
env	*(*(char))
[	O
i	long
]	O
;	O
i	long
++	O
)	O
{	O
if	O
(	O
env	*(*(char))
[	O
i	long
]	O
[	O
0	int
]	O
==	O
'-'	O
)	O
{	O
size_t	long
elen	long
=	O
strcspn	(*(char),*(char))->(long)
(	O
env	*(*(char))
[	O
i	long
]	O
+	O
1	int
,	O
"="	*(char)
)	O
;	O
if	O
(	O
elen	long
==	O
nlen	long
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
name	*(char)
,	O
env	*(*(char))
[	O
i	long
]	O
+	O
1	int
,	O
nlen	long
)	O
==	O
0	int
)	O
{	O
if	O
(	O
env	*(*(char))
[	O
i	long
]	O
[	O
nlen	long
+	O
1	int
]	O
)	O
return	O
strcmp	(*(char),*(char))->(int)
(	O
name	*(char)
+	O
nlen	long
,	O
env	*(*(char))
[	O
i	long
]	O
+	O
1	int
+	O
nlen	long
)	O
==	O
0	int
;	O
else	O
return	O
1	int
;	O
}	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
char	O
*	O
env_concat	(*(char),long,*(char),*(char))->(*(char))
(	O
const	O
char	O
*	O
name	*(char)
,	O
size_t	long
namelen	long
,	O
const	O
char	O
*	O
a	*(char)
,	O
const	O
char	O
*	O
b	*(char)
)	O
{	O
char	O
*	O
res	*(char)
;	O
size_t	long
len	long
;	O
if	O
(	O
a	*(char)
&&	O
b	*(char)
)	O
{	O
res	*(char)
=	O
emalloc	(long)->(*(void))
(	O
namelen	long
+	O
1	int
+	O
strlen	(*(char))->(long)
(	O
a	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
b	*(char)
)	O
+	O
1	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
res	*(char)
+	O
namelen	long
+	O
1	int
,	O
a	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
res	*(char)
+	O
namelen	long
+	O
1	int
,	O
b	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
a	*(char)
)	O
{	O
len	long
=	O
strlen	(*(char))->(long)
(	O
a	*(char)
)	O
;	O
if	O
(	O
ispunct	(int)->(int)
(	O
a	*(char)
[	O
len	long
-	O
1	int
]	O
)	O
)	O
len	long
--	O
;	O
res	*(char)
=	O
emalloc	(long)->(*(void))
(	O
namelen	long
+	O
1	int
+	O
len	long
+	O
1	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
res	*(char)
+	O
namelen	long
+	O
1	int
,	O
a	*(char)
,	O
len	long
)	O
;	O
res	*(char)
[	O
namelen	long
+	O
1	int
+	O
len	long
]	O
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
ispunct	(int)->(int)
(	O
b	*(char)
[	O
0	int
]	O
)	O
)	O
b	*(char)
++	O
;	O
len	long
=	O
strlen	(*(char))->(long)
(	O
b	*(char)
)	O
;	O
res	*(char)
=	O
emalloc	(long)->(*(void))
(	O
namelen	long
+	O
1	int
+	O
len	long
+	O
1	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
res	*(char)
+	O
namelen	long
+	O
1	int
,	O
b	*(char)
)	O
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
res	*(char)
,	O
name	*(char)
,	O
namelen	long
)	O
;	O
res	*(char)
[	O
namelen	long
]	O
=	O
'='	O
;	O
return	O
res	*(char)
;	O
}	O
static	O
char	O
*	O
defenv	array(*(char))
[	O
]	O
=	O
{	O
"DIREVENT_SYSEV_CODE=${sysev_code}"	*(char)
,	O
"DIREVENT_SYSEV_NAME=${sysev_name}"	*(char)
,	O
"DIREVENT_GENEV_CODE=${genev_code}"	*(char)
,	O
"DIREVENT_GENEV_NAME=${genev_name}"	*(char)
,	O
"DIREVENT_FILE=${file}"	*(char)
,	O
NULL	O
}	O
;	O
char	O
*	O
*	O
environ_setup	(*(*(char)),*(*(char)))->(*(*(char)))
(	O
char	O
*	O
*	O
hint	*(*(char))
,	O
char	O
*	O
*	O
kve	*(*(char))
)	O
{	O
char	O
*	O
empty	array(*(char))
[	O
1	int
]	O
=	O
{	O
NULL	O
}	O
;	O
char	O
*	O
*	O
old_env	*(*(char))
=	O
environ	*(*(char))
;	O
char	O
*	O
*	O
new_env	*(*(char))
;	O
char	O
*	O
*	O
addenv	*(*(char))
=	O
defenv	array(*(char))
;	O
char	O
*	O
var	*(char)
;	O
size_t	long
count	long
,	O
i	long
,	O
j	long
,	O
n	long
;	O
struct	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
;	O
int	O
wsflags	int
=	O
WRDSF_NOCMD	int
|	O
WRDSF_QUOTE	O
|	O
WRDSF_NOSPLIT	int
|	O
WRDSF_ENV	int
|	O
WRDSF_ENV_KV	int
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_env	*(*(char))
=	O
(	O
const	O
char	O
*	O
*	O
)	O
kve	*(*(char))
;	O
if	O
(	O
!	O
hint	*(*(char))
)	O
hint	*(*(char))
=	O
empty	array(*(char))
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
hint	*(*(char))
[	O
0	int
]	O
,	O
"-"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
hint	*(*(char))
[	O
0	int
]	O
,	O
"--"	*(char)
)	O
==	O
0	int
)	O
{	O
old_env	*(*(char))
=	O
NULL	O
;	O
if	O
(	O
hint	*(*(char))
[	O
0	int
]	O
[	O
1	int
]	O
==	O
'-'	O
)	O
addenv	*(*(char))
=	O
empty	array(*(char))
;	O
hint	*(*(char))
++	O
;	O
}	O
count	long
=	O
0	int
;	O
if	O
(	O
old_env	*(*(char))
)	O
for	O
(	O
i	long
=	O
0	int
;	O
old_env	*(*(char))
[	O
i	long
]	O
;	O
i	long
++	O
)	O
count	long
++	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
addenv	*(*(char))
[	O
i	long
]	O
;	O
i	long
++	O
)	O
count	long
++	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
hint	*(*(char))
[	O
i	long
]	O
;	O
i	long
++	O
)	O
count	long
++	O
;	O
if	O
(	O
self_test_pid	int
)	O
count	long
++	O
;	O
new_env	*(*(char))
=	O
ecalloc	(long,long)->(*(void))
(	O
count	long
+	O
1	int
,	O
sizeof	O
new_env	*(*(char))
[	O
0	int
]	O
)	O
;	O
n	long
=	O
0	int
;	O
if	O
(	O
old_env	*(*(char))
)	O
for	O
(	O
i	long
=	O
0	int
;	O
old_env	*(*(char))
[	O
i	long
]	O
;	O
i	long
++	O
)	O
{	O
if	O
(	O
!	O
var_is_unset	(*(*(char)),*(char))->(int)
(	O
hint	*(*(char))
,	O
old_env	*(*(char))
[	O
i	long
]	O
)	O
)	O
new_env	*(*(char))
[	O
n	long
++	O
]	O
=	O
old_env	*(*(char))
[	O
i	long
]	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
addenv	*(*(char))
[	O
i	long
]	O
;	O
i	long
++	O
)	O
if	O
(	O
!	O
var_is_unset	(*(*(char)),*(char))->(int)
(	O
hint	*(*(char))
,	O
addenv	*(*(char))
[	O
i	long
]	O
)	O
)	O
{	O
if	O
(	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
(	O
addenv	*(*(char))
[	O
i	long
]	O
,	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
wsflags	int
)	O
)	O
{	O
diag	(int,*(char))->(void)
(	O
LOG_CRIT	int
,	O
"wordsplit: %s"	*(char)
,	O
wordsplit_strerror	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(*(char))
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
)	O
;	O
_exit	(int)->(void)
(	O
127	int
)	O
;	O
}	O
wsflags	int
|=	O
WRDSF_REUSE	int
;	O
new_env	*(*(char))
[	O
n	long
++	O
]	O
=	O
estrdup	(*(char))->(*(char))
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordv	*(*(char))
[	O
0	int
]	O
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
hint	*(*(char))
[	O
i	long
]	O
;	O
i	long
++	O
)	O
{	O
char	O
*	O
p	*(struct(int,*(char),int,*(int),long,int,*(*(char))))
;	O
if	O
(	O
hint	*(*(char))
[	O
i	long
]	O
[	O
0	int
]	O
==	O
'-'	O
)	O
{	O
continue	O
;	O
}	O
if	O
(	O
wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
(	O
hint	*(*(char))
[	O
i	long
]	O
,	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
wsflags	int
)	O
)	O
{	O
diag	(int,*(char))->(void)
(	O
LOG_CRIT	int
,	O
"wordsplit: %s"	*(char)
,	O
wordsplit_strerror	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(*(char))
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
)	O
;	O
_exit	(int)->(void)
(	O
127	int
)	O
;	O
}	O
wsflags	int
|=	O
WRDSF_REUSE	int
;	O
var	*(char)
=	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordv	*(*(char))
[	O
0	int
]	O
;	O
if	O
(	O
find_env_pos	(*(*(char)),*(char),*(long),*(long))->(int)
(	O
new_env	*(*(char))
,	O
hint	*(*(char))
[	O
i	long
]	O
,	O
&	O
j	long
,	O
NULL	O
)	O
)	O
j	long
=	O
n	long
;	O
if	O
(	O
(	O
p	*(struct(int,*(char),int,*(int),long,int,*(*(char))))
=	O
strchr	(*(char),int)->(*(char))
(	O
var	*(char)
,	O
'='	O
)	O
)	O
)	O
{	O
if	O
(	O
p	*(struct(int,*(char),int,*(int),long,int,*(*(char))))
==	O
var	*(char)
)	O
continue	O
;	O
if	O
(	O
p	*(struct(int,*(char),int,*(int),long,int,*(*(char))))
[	O
-	O
1	int
]	O
==	O
'+'	O
)	O
new_env	*(*(char))
[	O
j	long
]	O
=	O
env_concat	(*(char),long,*(char),*(char))->(*(char))
(	O
var	*(char)
,	O
p	*(struct(int,*(char),int,*(int),long,int,*(*(char))))
-	O
var	*(char)
-	O
1	int
,	O
find_env_ptr	(*(*(char)),*(char),int)->(*(char))
(	O
environ	*(*(char))
,	O
var	*(char)
,	O
1	int
)	O
,	O
p	*(struct(int,*(char),int,*(int),long,int,*(*(char))))
+	O
1	int
)	O
;	O
else	O
if	O
(	O
p	*(struct(int,*(char),int,*(int),long,int,*(*(char))))
[	O
1	int
]	O
==	O
'+'	O
)	O
new_env	*(*(char))
[	O
j	long
]	O
=	O
env_concat	(*(char),long,*(char),*(char))->(*(char))
(	O
var	*(char)
,	O
p	*(struct(int,*(char),int,*(int),long,int,*(*(char))))
-	O
var	*(char)
,	O
p	*(struct(int,*(char),int,*(int),long,int,*(*(char))))
+	O
2	int
,	O
find_env_ptr	(*(*(char)),*(char),int)->(*(char))
(	O
environ	*(*(char))
,	O
var	*(char)
,	O
1	int
)	O
)	O
;	O
else	O
new_env	*(*(char))
[	O
j	long
]	O
=	O
estrdup	(*(char))->(*(char))
(	O
var	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
(	O
p	*(struct(int,*(char),int,*(int),long,int,*(*(char))))
=	O
find_env_ptr	(*(*(char)),*(char),int)->(*(char))
(	O
environ	*(*(char))
,	O
hint	*(*(char))
[	O
i	long
]	O
,	O
0	int
)	O
)	O
)	O
new_env	*(*(char))
[	O
j	long
]	O
=	O
p	*(struct(int,*(char),int,*(int),long,int,*(*(char))))
;	O
else	O
continue	O
;	O
if	O
(	O
j	long
==	O
n	long
)	O
++	O
n	long
;	O
}	O
if	O
(	O
self_test_pid	int
)	O
{	O
char	O
buf	array(char)
[	O
512	int
]	O
;	O
snprintf	(*(char),long,*(char))->(int)
(	O
buf	array(char)
,	O
sizeof	O
buf	array(char)
,	O
"DIREVENT_SELF_TEST_PID=%lu"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
self_test_pid	int
)	O
;	O
new_env	*(*(char))
[	O
n	long
++	O
]	O
=	O
estrdup	(*(char))->(*(char))
(	O
buf	array(char)
)	O
;	O
;	O
}	O
new_env	*(*(char))
[	O
n	long
]	O
=	O
NULL	O
;	O
if	O
(	O
wsflags	int
&	O
WRDSF_REUSE	int
)	O
wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
return	O
new_env	*(*(char))
;	O
}	O
