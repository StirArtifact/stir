static	O
int	O
fixed_compute	(double,double,double,double,*(struct(long,*(double),*(double),*(double),*(double),*(struct(*`,*`)))))->(int)
(	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
,	O
const	O
double	O
alpha	double
,	O
const	O
double	O
beta	double
,	O
gsl_integration_fixed_workspace	struct(long,*(double),*(double),*(double),*(double),*(struct(*((long,*`)->(int)),*((long,*`,*`,*`)->(int)))))
*	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
)	O
;	O
static	O
int	O
imtqlx	(int,array(double),array(double),array(double))->(int)
(	O
const	O
int	O
n	int
,	O
double	O
d	array(double)
[	O
]	O
,	O
double	O
e	int
[	O
]	O
,	O
double	O
z	double
[	O
]	O
)	O
;	O
gsl_integration_fixed_workspace	struct(long,*(double),*(double),*(double),*(double),*(struct(*((long,*`)->(int)),*((long,*`,*`,*`)->(int)))))
*	O
gsl_integration_fixed_alloc	(*(struct(*((long,*`)->(int)),*((long,*`,*`,*`)->(int)))),long,double,double,double,double)->(*(struct(long,*(double),*(double),*(double),*(double),*(struct(*`,*`)))))
(	O
const	O
gsl_integration_fixed_type	struct(*((long,*(struct(double,double,double,double,double,double,double,double,double)))->(int)),*((long,*(double),*(double),*(struct(double,double,double,double,double,double,double,double,double)))->(int)))
*	O
type	*(struct(*((long,*(struct`))->(int)),*((long,*(double),*(double),*(struct`))->(int))))
,	O
const	O
size_t	long
n	int
,	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
,	O
const	O
double	O
alpha	double
,	O
const	O
double	O
beta	double
)	O
{	O
int	O
status	int
;	O
gsl_integration_fixed_workspace	struct(long,*(double),*(double),*(double),*(double),*(struct(*((long,*`)->(int)),*((long,*`,*`,*`)->(int)))))
*	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
;	O
if	O
(	O
n	int
<	O
1	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"workspace size n must be at least 1"	*(char)
,	O
GSL_EDOM	int
,	O
0	int
)	O
;	O
}	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
gsl_integration_fixed_workspace	struct(long,*(double),*(double),*(double),*(double),*(struct(*((long,*`)->(int)),*((long,*`,*`,*`)->(int)))))
)	O
)	O
;	O
if	O
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
==	O
NULL	O
)	O
{	O
GSL_ERROR_VAL	O
(	O
"unable to allocate workspace"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
weights	*(double)
=	O
malloc	(long)->(*(void))
(	O
n	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
weights	*(double)
==	O
NULL	O
)	O
{	O
gsl_integration_fixed_free	(*(struct(long,*(double),*(double),*(double),*(double),*(struct(*`,*`)))))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
)	O
;	O
GSL_ERROR_VAL	O
(	O
"unable to allocate weights"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
x	double
=	O
malloc	(long)->(*(void))
(	O
n	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
x	double
==	O
NULL	O
)	O
{	O
gsl_integration_fixed_free	(*(struct(long,*(double),*(double),*(double),*(double),*(struct(*`,*`)))))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
)	O
;	O
GSL_ERROR_VAL	O
(	O
"unable to allocate x"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
diag	*(double)
=	O
malloc	(long)->(*(void))
(	O
n	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
diag	*(double)
==	O
NULL	O
)	O
{	O
gsl_integration_fixed_free	(*(struct(long,*(double),*(double),*(double),*(double),*(struct(*`,*`)))))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
)	O
;	O
GSL_ERROR_VAL	O
(	O
"unable to allocate diag"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
subdiag	*(double)
=	O
malloc	(long)->(*(void))
(	O
n	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
subdiag	*(double)
==	O
NULL	O
)	O
{	O
gsl_integration_fixed_free	(*(struct(long,*(double),*(double),*(double),*(double),*(struct(*`,*`)))))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
)	O
;	O
GSL_ERROR_VAL	O
(	O
"unable to allocate subdiag"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
n	int
=	O
n	int
;	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
type	*(struct(*((long,*(struct`))->(int)),*((long,*(double),*(double),*(struct`))->(int))))
=	O
type	*(struct(*((long,*(struct`))->(int)),*((long,*(double),*(double),*(struct`))->(int))))
;	O
status	int
=	O
fixed_compute	(double,double,double,double,*(struct(long,*(double),*(double),*(double),*(double),*(struct(*`,*`)))))->(int)
(	O
a	double
,	O
b	double
,	O
alpha	double
,	O
beta	double
,	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
)	O
;	O
if	O
(	O
status	int
)	O
{	O
gsl_integration_fixed_free	(*(struct(long,*(double),*(double),*(double),*(double),*(struct(*`,*`)))))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
)	O
;	O
GSL_ERROR_VAL	O
(	O
"error in integration parameters"	*(char)
,	O
GSL_EDOM	int
,	O
0	int
)	O
;	O
}	O
return	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
;	O
}	O
void	O
gsl_integration_fixed_free	(*(struct(long,*(double),*(double),*(double),*(double),*(struct(*`,*`)))))->(void)
(	O
gsl_integration_fixed_workspace	struct(long,*(double),*(double),*(double),*(double),*(struct(*((long,*`)->(int)),*((long,*`,*`,*`)->(int)))))
*	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
)	O
{	O
if	O
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
weights	*(double)
)	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
weights	*(double)
)	O
;	O
if	O
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
x	double
)	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
x	double
)	O
;	O
if	O
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
diag	*(double)
)	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
diag	*(double)
)	O
;	O
if	O
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
subdiag	*(double)
)	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
subdiag	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
)	O
;	O
}	O
size_t	long
gsl_integration_fixed_n	(*(struct(long,*(double),*(double),*(double),*(double),*(struct(*`,*`)))))->(long)
(	O
const	O
gsl_integration_fixed_workspace	struct(long,*(double),*(double),*(double),*(double),*(struct(*((long,*`)->(int)),*((long,*`,*`,*`)->(int)))))
*	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
)	O
{	O
return	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
n	int
;	O
}	O
double	O
*	O
gsl_integration_fixed_nodes	(*(struct(long,*(double),*(double),*(double),*(double),*(struct(*`,*`)))))->(*(double))
(	O
const	O
gsl_integration_fixed_workspace	struct(long,*(double),*(double),*(double),*(double),*(struct(*((long,*`)->(int)),*((long,*`,*`,*`)->(int)))))
*	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
)	O
{	O
return	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
x	double
;	O
}	O
double	O
*	O
gsl_integration_fixed_weights	(*(struct(long,*(double),*(double),*(double),*(double),*(struct(*`,*`)))))->(*(double))
(	O
const	O
gsl_integration_fixed_workspace	struct(long,*(double),*(double),*(double),*(double),*(struct(*((long,*`)->(int)),*((long,*`,*`,*`)->(int)))))
*	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
)	O
{	O
return	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
weights	*(double)
;	O
}	O
int	O
gsl_integration_fixed	(*(struct(*((double,*`)->(double)),*(void))),*(double),*(struct(long,*(double),*(double),*(double),*(double),*(struct(*`,*`)))))->(int)
(	O
const	O
gsl_function	struct(*((double,*(void))->(double)),*(void))
*	O
func	*(struct(*((double,*(void))->(double)),*(void)))
,	O
double	O
*	O
result	*(double)
,	O
const	O
gsl_integration_fixed_workspace	struct(long,*(double),*(double),*(double),*(double),*(struct(*((long,*`)->(int)),*((long,*`,*`,*`)->(int)))))
*	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
)	O
{	O
const	O
size_t	long
n	int
=	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
n	int
;	O
size_t	long
i	long
;	O
double	O
sum	double
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
++	O
i	long
)	O
{	O
double	O
fi	double
=	O
GSL_FN_EVAL	O
(	O
func	*(struct(*((double,*(void))->(double)),*(void)))
,	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
x	double
[	O
i	long
]	O
)	O
;	O
sum	double
+=	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
weights	*(double)
[	O
i	long
]	O
*	O
fi	double
;	O
}	O
*	O
result	*(double)
=	O
sum	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
fixed_compute	(double,double,double,double,*(struct(long,*(double),*(double),*(double),*(double),*(struct(*`,*`)))))->(int)
(	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
,	O
const	O
double	O
alpha	double
,	O
const	O
double	O
beta	double
,	O
gsl_integration_fixed_workspace	struct(long,*(double),*(double),*(double),*(double),*(struct(*((long,*`)->(int)),*((long,*`,*`,*`)->(int)))))
*	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
)	O
{	O
int	O
s	int
;	O
const	O
size_t	long
n	int
=	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
n	int
;	O
gsl_integration_fixed_params	struct(double,double,double,double,double,double,double,double,double)
params	*(void)
;	O
size_t	long
i	long
;	O
params	*(void)
.	O
a	double
=	O
a	double
;	O
params	*(void)
.	O
b	double
=	O
b	double
;	O
params	*(void)
.	O
alpha	double
=	O
alpha	double
;	O
params	*(void)
.	O
beta	double
=	O
beta	double
;	O
s	int
=	O
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
type	*(struct(*((long,*(struct`))->(int)),*((long,*(double),*(double),*(struct`))->(int))))
->	O
check	*((long,*(struct(double,double,double,double,double,double,double,double,double)))->(int))
)	O
(	O
n	int
,	O
&	O
params	*(void)
)	O
;	O
if	O
(	O
s	int
)	O
return	O
s	int
;	O
s	int
=	O
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
type	*(struct(*((long,*(struct`))->(int)),*((long,*(double),*(double),*(struct`))->(int))))
->	O
init	*((long,*(double),*(double),*(struct(double,double,double,double,double,double,double,double,double)))->(int))
)	O
(	O
n	int
,	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
diag	*(double)
,	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
subdiag	*(double)
,	O
&	O
params	*(void)
)	O
;	O
if	O
(	O
s	int
)	O
return	O
s	int
;	O
if	O
(	O
params	*(void)
.	O
zemu	double
<=	O
0.0	int
)	O
{	O
GSL_ERROR	O
(	O
"zeroth moment must be positive"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
x	double
[	O
i	long
]	O
=	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
diag	*(double)
[	O
i	long
]	O
;	O
}	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
weights	*(double)
[	O
0	int
]	O
=	O
sqrt	(double)->(double)
(	O
params	*(void)
.	O
zemu	double
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
weights	*(double)
[	O
i	long
]	O
=	O
0.0	int
;	O
}	O
s	int
=	O
imtqlx	(int,array(double),array(double),array(double))->(int)
(	O
n	int
,	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
x	double
,	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
subdiag	*(double)
,	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
weights	*(double)
)	O
;	O
if	O
(	O
s	int
)	O
return	O
s	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
weights	*(double)
[	O
i	long
]	O
=	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
weights	*(double)
[	O
i	long
]	O
*	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
weights	*(double)
[	O
i	long
]	O
;	O
}	O
{	O
double	O
p	double
=	O
pow	(double,double)->(double)
(	O
params	*(void)
.	O
slp	double
,	O
params	*(void)
.	O
al	double
+	O
params	*(void)
.	O
be	double
+	O
1.0	int
)	O
;	O
size_t	long
k	long
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
n	int
;	O
k	long
++	O
)	O
{	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
x	double
[	O
k	long
]	O
=	O
params	*(void)
.	O
shft	double
+	O
params	*(void)
.	O
slp	double
*	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
x	double
[	O
k	long
]	O
;	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
weights	*(double)
[	O
k	long
]	O
=	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
weights	*(double)
[	O
k	long
]	O
*	O
p	double
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
imtqlx	(int,array(double),array(double),array(double))->(int)
(	O
const	O
int	O
n	int
,	O
double	O
d	array(double)
[	O
]	O
,	O
double	O
e	int
[	O
]	O
,	O
double	O
z	double
[	O
]	O
)	O
{	O
double	O
b	double
;	O
double	O
c	double
;	O
double	O
f	*(double)
;	O
double	O
g	double
;	O
int	O
i	long
;	O
int	O
ii	int
;	O
int	O
itn	int
=	O
30	int
;	O
int	O
j	int
;	O
int	O
k	long
;	O
int	O
l	int
;	O
int	O
m	int
;	O
int	O
mml	int
;	O
double	O
p	double
;	O
double	O
r	double
;	O
double	O
s	int
;	O
if	O
(	O
n	int
==	O
1	int
)	O
{	O
return	O
GSL_SUCCESS	int
;	O
}	O
e	int
[	O
n	int
-	O
1	int
]	O
=	O
0.0	int
;	O
for	O
(	O
l	int
=	O
1	int
;	O
l	int
<=	O
n	int
;	O
l	int
++	O
)	O
{	O
j	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
for	O
(	O
m	int
=	O
l	int
;	O
m	int
<=	O
n	int
;	O
m	int
++	O
)	O
{	O
if	O
(	O
m	int
==	O
n	int
)	O
{	O
break	O
;	O
}	O
if	O
(	O
fabs	(double)->(double)
(	O
e	int
[	O
m	int
-	O
1	int
]	O
)	O
<=	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	(double)->(double)
(	O
d	array(double)
[	O
m	int
-	O
1	int
]	O
)	O
+	O
fabs	(double)->(double)
(	O
d	array(double)
[	O
m	int
]	O
)	O
)	O
)	O
{	O
break	O
;	O
}	O
}	O
p	double
=	O
d	array(double)
[	O
l	int
-	O
1	int
]	O
;	O
if	O
(	O
m	int
==	O
l	int
)	O
{	O
break	O
;	O
}	O
if	O
(	O
itn	int
<=	O
j	int
)	O
{	O
return	O
GSL_EMAXITER	int
;	O
}	O
j	int
=	O
j	int
+	O
1	int
;	O
g	double
=	O
(	O
d	array(double)
[	O
l	int
]	O
-	O
p	double
)	O
/	O
(	O
2.0	int
*	O
e	int
[	O
l	int
-	O
1	int
]	O
)	O
;	O
r	double
=	O
sqrt	(double)->(double)
(	O
g	double
*	O
g	double
+	O
1.0	int
)	O
;	O
g	double
=	O
d	array(double)
[	O
m	int
-	O
1	int
]	O
-	O
p	double
+	O
e	int
[	O
l	int
-	O
1	int
]	O
/	O
(	O
g	double
+	O
fabs	(double)->(double)
(	O
r	double
)	O
*	O
GSL_SIGN	O
(	O
g	double
)	O
)	O
;	O
s	int
=	O
1.0	int
;	O
c	double
=	O
1.0	int
;	O
p	double
=	O
0.0	int
;	O
mml	int
=	O
m	int
-	O
l	int
;	O
for	O
(	O
ii	int
=	O
1	int
;	O
ii	int
<=	O
mml	int
;	O
ii	int
++	O
)	O
{	O
i	long
=	O
m	int
-	O
ii	int
;	O
f	*(double)
=	O
s	int
*	O
e	int
[	O
i	long
-	O
1	int
]	O
;	O
b	double
=	O
c	double
*	O
e	int
[	O
i	long
-	O
1	int
]	O
;	O
if	O
(	O
fabs	(double)->(double)
(	O
g	double
)	O
<=	O
fabs	(double)->(double)
(	O
f	*(double)
)	O
)	O
{	O
c	double
=	O
g	double
/	O
f	*(double)
;	O
r	double
=	O
sqrt	(double)->(double)
(	O
c	double
*	O
c	double
+	O
1.0	int
)	O
;	O
e	int
[	O
i	long
]	O
=	O
f	*(double)
*	O
r	double
;	O
s	int
=	O
1.0	int
/	O
r	double
;	O
c	double
=	O
c	double
*	O
s	int
;	O
}	O
else	O
{	O
s	int
=	O
f	*(double)
/	O
g	double
;	O
r	double
=	O
sqrt	(double)->(double)
(	O
s	int
*	O
s	int
+	O
1.0	int
)	O
;	O
e	int
[	O
i	long
]	O
=	O
g	double
*	O
r	double
;	O
c	double
=	O
1.0	int
/	O
r	double
;	O
s	int
=	O
s	int
*	O
c	double
;	O
}	O
g	double
=	O
d	array(double)
[	O
i	long
]	O
-	O
p	double
;	O
r	double
=	O
(	O
d	array(double)
[	O
i	long
-	O
1	int
]	O
-	O
g	double
)	O
*	O
s	int
+	O
2.0	int
*	O
c	double
*	O
b	double
;	O
p	double
=	O
s	int
*	O
r	double
;	O
d	array(double)
[	O
i	long
]	O
=	O
g	double
+	O
p	double
;	O
g	double
=	O
c	double
*	O
r	double
-	O
b	double
;	O
f	*(double)
=	O
z	double
[	O
i	long
]	O
;	O
z	double
[	O
i	long
]	O
=	O
s	int
*	O
z	double
[	O
i	long
-	O
1	int
]	O
+	O
c	double
*	O
f	*(double)
;	O
z	double
[	O
i	long
-	O
1	int
]	O
=	O
c	double
*	O
z	double
[	O
i	long
-	O
1	int
]	O
-	O
s	int
*	O
f	*(double)
;	O
}	O
d	array(double)
[	O
l	int
-	O
1	int
]	O
=	O
d	array(double)
[	O
l	int
-	O
1	int
]	O
-	O
p	double
;	O
e	int
[	O
l	int
-	O
1	int
]	O
=	O
g	double
;	O
e	int
[	O
m	int
-	O
1	int
]	O
=	O
0.0	int
;	O
}	O
}	O
for	O
(	O
ii	int
=	O
2	int
;	O
ii	int
<=	O
m	int
;	O
ii	int
++	O
)	O
{	O
i	long
=	O
ii	int
-	O
1	int
;	O
k	long
=	O
i	long
;	O
p	double
=	O
d	array(double)
[	O
i	long
-	O
1	int
]	O
;	O
for	O
(	O
j	int
=	O
ii	int
;	O
j	int
<=	O
n	int
;	O
j	int
++	O
)	O
{	O
if	O
(	O
d	array(double)
[	O
j	int
-	O
1	int
]	O
<	O
p	double
)	O
{	O
k	long
=	O
j	int
;	O
p	double
=	O
d	array(double)
[	O
j	int
-	O
1	int
]	O
;	O
}	O
}	O
if	O
(	O
k	long
!=	O
i	long
)	O
{	O
d	array(double)
[	O
k	long
-	O
1	int
]	O
=	O
d	array(double)
[	O
i	long
-	O
1	int
]	O
;	O
d	array(double)
[	O
i	long
-	O
1	int
]	O
=	O
p	double
;	O
p	double
=	O
z	double
[	O
i	long
-	O
1	int
]	O
;	O
z	double
[	O
i	long
-	O
1	int
]	O
=	O
z	double
[	O
k	long
-	O
1	int
]	O
;	O
z	double
[	O
k	long
-	O
1	int
]	O
=	O
p	double
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
