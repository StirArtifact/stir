char	O
*	O
td	(*(char),*(*(char)))->(*(char))
(	O
char	O
*	O
q	*(char)
,	O
char	O
*	O
*	O
data	*(*(char))
)	O
{	O
char	O
*	O
p	*(*(void))
;	O
int	O
len	int
;	O
p	*(*(void))
=	O
strstr	(*(char),*(char))->(*(char))
(	O
q	*(char)
,	O
"<td"	*(char)
)	O
;	O
if	O
(	O
p	*(*(void))
==	O
NULL	O
)	O
return	O
NULL	O
;	O
q	*(char)
=	O
strstr	(*(char),*(char))->(*(char))
(	O
p	*(*(void))
,	O
">"	*(char)
)	O
+	O
1	int
;	O
if	O
(	O
q	*(char)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
p	*(*(void))
=	O
strstr	(*(char),*(char))->(*(char))
(	O
q	*(char)
,	O
"</td>"	*(char)
)	O
;	O
if	O
(	O
p	*(*(void))
==	O
NULL	O
)	O
return	O
NULL	O
;	O
len	int
=	O
p	*(*(void))
-	O
q	*(char)
;	O
*	O
data	*(*(char))
=	O
xmalloc	(long)->(*(void))
(	O
len	int
+	O
1	int
)	O
;	O
memmove	(*(void),*(void),long)->(*(void))
(	O
*	O
data	*(*(char))
,	O
q	*(char)
,	O
len	int
)	O
;	O
(	O
*	O
data	*(*(char))
)	O
[	O
len	int
]	O
=	O
'\x0'	O
;	O
q	*(char)
=	O
p	*(*(void))
+	O
strlen	(*(char))->(long)
(	O
"</td>"	*(char)
)	O
;	O
return	O
q	*(char)
;	O
}	O
void	O
fetchproxylist	(*(char))->(void)
(	O
char	O
*	O
proxyknife_in	*(char)
)	O
{	O
int	O
ret	int
;	O
int	O
sockfd	int
;	O
int	O
n	long
,	O
numbytes	int
,	O
total	int
;	O
char	O
*	O
host	*(char)
,	O
*	O
path	*(char)
,	O
*	O
buf	*(char)
;	O
char	O
*	O
p	*(*(void))
,	O
*	O
q	*(char)
;	O
char	O
*	O
data	*(*(char))
;	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
addr	*(struct(short,array(char)))
;	O
char	O
*	O
url	*(char)
;	O
char	O
*	O
proxylist	*(char)
;	O
struct	O
hostent	struct(*(char),*(*(char)),int,int,*(*(char)))
*	O
h	*(struct(*(char),*(*(char)),int,int,*(*(char))))
;	O
url	*(char)
=	O
proxyknife_in	*(char)
;	O
p	*(*(void))
=	O
strchr	(*(char),int)->(*(char))
(	O
url	*(char)
,	O
'/'	O
)	O
;	O
if	O
(	O
p	*(*(void))
==	O
NULL	O
)	O
{	O
n	long
=	O
strlen	(*(char))->(long)
(	O
url	*(char)
)	O
;	O
host	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
n	long
+	O
1	int
)	O
;	O
memmove	(*(void),*(void),long)->(*(void))
(	O
host	*(char)
,	O
url	*(char)
,	O
n	long
)	O
;	O
host	*(char)
[	O
n	long
]	O
=	O
'\x0'	O
;	O
path	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
2	int
)	O
;	O
path	*(char)
[	O
0	int
]	O
=	O
'/'	O
;	O
path	*(char)
[	O
1	int
]	O
=	O
'\x0'	O
;	O
}	O
else	O
{	O
n	long
=	O
p	*(*(void))
-	O
url	*(char)
;	O
host	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
n	long
+	O
1	int
)	O
;	O
memmove	(*(void),*(void),long)->(*(void))
(	O
host	*(char)
,	O
url	*(char)
,	O
n	long
)	O
;	O
host	*(char)
[	O
n	long
]	O
=	O
'\x0'	O
;	O
n	long
=	O
strlen	(*(char))->(long)
(	O
p	*(*(void))
)	O
;	O
path	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
n	long
+	O
1	int
)	O
;	O
memmove	(*(void),*(void),long)->(*(void))
(	O
path	*(char)
,	O
p	*(*(void))
,	O
n	long
)	O
;	O
path	*(char)
[	O
n	long
]	O
=	O
'\x0'	O
;	O
}	O
if	O
(	O
debug	int
)	O
printf	(*(char))->(int)
(	O
"Connect to host %s to fetch %s\n"	*(char)
,	O
host	*(char)
,	O
path	*(char)
)	O
;	O
sockfd	int
=	O
socket	(int,int,int)->(int)
(	O
AF_INET	O
,	O
SOCK_STREAM	int
,	O
0	int
)	O
;	O
if	O
(	O
sockfd	int
==	O
-	O
1	int
)	O
{	O
perror	(*(char))->(void)
(	O
"socket"	*(char)
)	O
;	O
xexit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
MY_CONNECT	(int,*(char),*(char))->(void)
(	O
sockfd	int
,	O
host	*(char)
,	O
"80"	*(char)
)	O
;	O
n	long
=	O
strlen	(*(char))->(long)
(	O
"GET "	*(char)
" HTTP/1.0"	*(char)
"\r\n"	*(char)
"Host: "	*(char)
"\r\n"	*(char)
"\r\n"	*(char)
)	O
;	O
n	long
+=	O
strlen	(*(char))->(long)
(	O
path	*(char)
)	O
;	O
n	long
+=	O
strlen	(*(char))->(long)
(	O
host	*(char)
)	O
;	O
buf	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
n	long
+	O
1	int
)	O
;	O
snprintf	(*(char),long,*(char))->(int)
(	O
buf	*(char)
,	O
n	long
+	O
1	int
,	O
"GET %s HTTP/1.0\r\nHost: %s\r\n\r\n"	*(char)
,	O
path	*(char)
,	O
host	*(char)
)	O
;	O
if	O
(	O
write	*((*(void),*(char),long)->(long))
(	O
sockfd	int
,	O
buf	*(char)
,	O
n	long
)	O
!=	O
n	long
)	O
{	O
perror	(*(char))->(void)
(	O
__FILE__	O
"write"	*(char)
)	O
;	O
xexit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
xfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
*	O
)	O
&	O
buf	*(char)
)	O
;	O
xfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
*	O
)	O
&	O
host	*(char)
)	O
;	O
xfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
*	O
)	O
&	O
path	*(char)
)	O
;	O
n	long
=	O
1024	int
;	O
buf	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
n	long
)	O
;	O
total	int
=	O
0	int
;	O
do	O
{	O
numbytes	int
=	O
read	*((*(void),*(char),long)->(long))
(	O
sockfd	int
,	O
buf	*(char)
+	O
total	int
,	O
n	long
)	O
;	O
if	O
(	O
numbytes	int
>	O
0	int
)	O
total	int
+=	O
numbytes	int
;	O
else	O
break	O
;	O
buf	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buf	*(char)
,	O
total	int
+	O
n	long
)	O
;	O
}	O
while	O
(	O
1	int
)	O
;	O
if	O
(	O
numbytes	int
<	O
0	int
)	O
{	O
if	O
(	O
debug	int
)	O
{	O
perror	(*(char))->(void)
(	O
"read"	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
__FILE__	O
": fetchproxylist: error above!\n"	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
total	int
==	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
__FILE__	O
": fetchproxylist: No response!\n"	*(char)
)	O
;	O
xexit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
buf	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buf	*(char)
,	O
total	int
)	O
;	O
if	O
(	O
debug	int
)	O
{	O
write	*((*(void),*(char),long)->(long))
(	O
1	int
,	O
buf	*(char)
,	O
total	int
)	O
;	O
write	*((*(void),*(char),long)->(long))
(	O
1	int
,	O
"\n"	*(char)
,	O
1	int
)	O
;	O
}	O
q	*(char)
=	O
buf	*(char)
;	O
proxylist	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
2	int
)	O
;	O
total	int
=	O
0	int
;	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
proxyknife_in	*(char)
,	O
PROXYKNIFE_DEFAULT_LISTSITE	*(char)
,	O
strlen	(*(char))->(long)
(	O
PROXYKNIFE_DEFAULT_LISTSITE	*(char)
)	O
)	O
)	O
{	O
q	*(char)
=	O
strstr	(*(char),*(char))->(*(char))
(	O
q	*(char)
,	O
"<pre>"	*(char)
)	O
;	O
if	O
(	O
q	*(char)
==	O
NULL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
__FILE__	O
": fetchproxylist: no <pre> on "	*(char)
PROXYKNIFE_DEFAULT_LISTSITE	*(char)
)	O
;	O
xexit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
q	*(char)
+=	O
strlen	(*(char))->(long)
(	O
"<pre>"	*(char)
)	O
;	O
p	*(*(void))
=	O
strstr	(*(char),*(char))->(*(char))
(	O
q	*(char)
,	O
"</pre>"	*(char)
)	O
;	O
if	O
(	O
p	*(*(void))
==	O
NULL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
__FILE__	O
": fetchproxylist: no </pre> after </pre> on "	*(char)
PROXYKNIFE_DEFAULT_LISTSITE	*(char)
)	O
;	O
xexit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
total	int
=	O
p	*(*(void))
-	O
q	*(char)
;	O
proxylist	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
proxylist	*(char)
,	O
total	int
)	O
;	O
memmove	(*(void),*(void),long)->(*(void))
(	O
proxylist	*(char)
,	O
q	*(char)
,	O
total	int
)	O
;	O
}	O
else	O
{	O
while	O
(	O
1	int
)	O
{	O
q	*(char)
=	O
td	(*(char),*(*(char)))->(*(char))
(	O
q	*(char)
,	O
&	O
data	*(*(char))
)	O
;	O
if	O
(	O
q	*(char)
==	O
NULL	O
)	O
break	O
;	O
p	*(*(void))
=	O
strstr	(*(char),*(char))->(*(char))
(	O
data	*(*(char))
,	O
"&nbsp;"	*(char)
)	O
;	O
xfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
*	O
)	O
&	O
data	*(*(char))
)	O
;	O
if	O
(	O
p	*(*(void))
!=	O
NULL	O
)	O
{	O
q	*(char)
=	O
td	(*(char),*(*(char)))->(*(char))
(	O
q	*(char)
,	O
&	O
data	*(*(char))
)	O
;	O
if	O
(	O
q	*(char)
==	O
NULL	O
)	O
break	O
;	O
else	O
{	O
if	O
(	O
debug	int
)	O
printf	(*(char))->(int)
(	O
"Host: %s\n"	*(char)
,	O
data	*(*(char))
)	O
;	O
n	long
=	O
strlen	(*(char))->(long)
(	O
data	*(*(char))
)	O
;	O
proxylist	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
proxylist	*(char)
,	O
total	int
+	O
n	long
)	O
;	O
if	O
(	O
proxylist	*(char)
==	O
NULL	O
)	O
{	O
perror	(*(char))->(void)
(	O
"proxylist ralloc"	*(char)
)	O
;	O
xexit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
memmove	(*(void),*(void),long)->(*(void))
(	O
proxylist	*(char)
+	O
total	int
,	O
data	*(*(char))
,	O
n	long
)	O
;	O
total	int
+=	O
n	long
;	O
xfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
*	O
)	O
&	O
data	*(*(char))
)	O
;	O
}	O
q	*(char)
=	O
td	(*(char),*(*(char)))->(*(char))
(	O
q	*(char)
,	O
&	O
data	*(*(char))
)	O
;	O
if	O
(	O
q	*(char)
==	O
NULL	O
)	O
break	O
;	O
else	O
{	O
if	O
(	O
debug	int
)	O
printf	(*(char))->(int)
(	O
"Port: %s\n"	*(char)
,	O
data	*(*(char))
)	O
;	O
n	long
=	O
strlen	(*(char))->(long)
(	O
data	*(*(char))
)	O
;	O
proxylist	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
proxylist	*(char)
,	O
total	int
+	O
n	long
+	O
1	int
+	O
1	int
)	O
;	O
proxylist	*(char)
[	O
total	int
]	O
=	O
':'	O
;	O
total	int
++	O
;	O
memmove	(*(void),*(void),long)->(*(void))
(	O
proxylist	*(char)
+	O
total	int
,	O
data	*(*(char))
,	O
n	long
)	O
;	O
total	int
+=	O
n	long
;	O
proxylist	*(char)
[	O
total	int
]	O
=	O
'\n'	O
;	O
total	int
++	O
;	O
xfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
*	O
)	O
&	O
data	*(*(char))
)	O
;	O
}	O
q	*(char)
=	O
td	(*(char),*(*(char)))->(*(char))
(	O
q	*(char)
,	O
&	O
data	*(*(char))
)	O
;	O
if	O
(	O
q	*(char)
==	O
NULL	O
)	O
break	O
;	O
else	O
{	O
if	O
(	O
debug	int
)	O
printf	(*(char))->(int)
(	O
"Timeout: %s\n"	*(char)
,	O
data	*(*(char))
)	O
;	O
xfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
*	O
)	O
&	O
data	*(*(char))
)	O
;	O
}	O
}	O
}	O
}	O
xfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
*	O
)	O
&	O
buf	*(char)
)	O
;	O
if	O
(	O
total	int
==	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
__FILE__	O
": fetchproxylist: No list found,dump:\n"	*(char)
)	O
;	O
if	O
(	O
proxylist	*(char)
)	O
xfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
*	O
)	O
&	O
proxylist	*(char)
)	O
;	O
xexit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
proxyknife_in_buffer	*(char)
=	O
proxylist	*(char)
;	O
proxyknife_in_buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
proxyknife_in_buffer	*(char)
,	O
total	int
+	O
1	int
)	O
;	O
proxyknife_in_buffer	*(char)
[	O
total	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
debug	int
)	O
{	O
printf	(*(char))->(int)
(	O
"OK!Get proxylist in %d bytes from %s\n"	*(char)
,	O
total	int
,	O
proxyknife_in	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
proxyknife_in_buffer	*(char)
)	O
;	O
}	O
}	O
char	O
*	O
sgetaline	(*(char),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(*(char))
(	O
char	O
*	O
s	*(*(char))
,	O
struct	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
*	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
{	O
int	O
len	int
;	O
char	O
*	O
p	*(*(void))
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
s	*(*(char))
)	O
;	O
p	*(*(void))
=	O
strchr	(*(char),int)->(*(char))
(	O
s	*(*(char))
,	O
'\n'	O
)	O
;	O
if	O
(	O
p	*(*(void))
==	O
NULL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
__FILE__	O
": sgetaline: End of buffer\n"	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
p	*(*(void))
++	O
;	O
len	int
=	O
p	*(*(void))
-	O
s	*(*(char))
;	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
line	*(char)
=	O
pmalloc	(long,*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(*(void))
(	O
len	int
+	O
1	int
,	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
;	O
if	O
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
line	*(char)
==	O
NULL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
__FILE__	O
": sgetaline:memory error"	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
memmove	(*(void),*(void),long)->(*(void))
(	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
line	*(char)
,	O
s	*(*(char))
,	O
len	int
)	O
;	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
->	O
line	*(char)
[	O
len	int
]	O
=	O
'\x0'	O
;	O
return	O
p	*(*(void))
;	O
}	O
