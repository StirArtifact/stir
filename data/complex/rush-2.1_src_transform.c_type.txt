enum	O
transform_type	O
{	O
transform_first	O
,	O
transform_global	O
}	O
;	O
enum	O
replace_segm_type	O
{	O
segm_literal	O
,	O
segm_backref	O
,	O
segm_case_ctl	O
}	O
;	O
enum	O
case_ctl_type	O
{	O
ctl_stop	O
,	O
ctl_upcase_next	O
,	O
ctl_locase_next	O
,	O
ctl_upcase	O
,	O
ctl_locase	O
}	O
;	O
struct	O
replace_segm	O
{	O
struct	O
replace_segm	O
*	O
next	*(struct(*(struct(*(struct`),enum(int,int,int,int),struct(enum(int,int,int,int,int,int),union`),union(struct`,struct`,int,struct`))),enum(int,int,int,int),struct(enum(int,int,int,int,int,int),union(*(char),struct(int,int))),union(struct(*(char),*(struct`)),struct(*(char),*(char),*(char),int,int,*(char)),int,struct(*(char),*(char)))))
;	O
enum	O
replace_segm_type	O
type	enum(int,int,int,int)
;	O
union	O
{	O
struct	O
{	O
char	O
*	O
ptr	O
;	O
size_t	long
size	long
;	O
}	O
literal	O
;	O
size_t	long
ref	O
;	O
enum	O
case_ctl_type	O
ctl	O
;	O
}	O
v	union(*(char),struct(int,int))
;	O
}	O
;	O
struct	O
transform	O
{	O
struct	O
transform	O
*	O
next	*(struct(*(struct(*(struct`),enum(int,int,int,int),struct(enum(int,int,int,int,int,int),union`),union(struct`,struct`,int,struct`))),enum(int,int,int,int),struct(enum(int,int,int,int,int,int),union(*(char),struct(int,int))),union(struct(*(char),*(struct`)),struct(*(char),*(char),*(char),int,int,*(char)),int,struct(*(char),*(char)))))
;	O
enum	O
transform_type	O
transform_type	O
;	O
unsigned	O
match_number	O
;	O
regex_t	struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
regex	O
;	O
struct	O
replace_segm	O
*	O
repl_head	O
,	O
*	O
repl_tail	O
;	O
size_t	long
segm_count	O
;	O
}	O
;	O
struct	O
transform_list	O
{	O
struct	O
transform	O
*	O
head	O
,	O
*	O
tail	O
;	O
}	O
;	O
static	O
struct	O
transform	O
*	O
new_transform	O
(	O
struct	O
transform_list	O
*	O
tlist	O
)	O
{	O
struct	O
transform	O
*	O
p	*(void)
=	O
xzalloc	(long)->(*(void))
(	O
sizeof	O
*	O
p	*(void)
)	O
;	O
if	O
(	O
tlist	O
->	O
tail	O
)	O
tlist	O
->	O
tail	O
->	O
next	*(struct(*(struct(*(struct`),enum(int,int,int,int),struct(enum(int,int,int,int,int,int),union`),union(struct`,struct`,int,struct`))),enum(int,int,int,int),struct(enum(int,int,int,int,int,int),union(*(char),struct(int,int))),union(struct(*(char),*(struct`)),struct(*(char),*(char),*(char),int,int,*(char)),int,struct(*(char),*(char)))))
=	O
p	*(void)
;	O
else	O
tlist	O
->	O
head	O
=	O
p	*(void)
;	O
tlist	O
->	O
tail	O
=	O
p	*(void)
;	O
return	O
p	*(void)
;	O
}	O
static	O
struct	O
replace_segm	O
*	O
add_segment	O
(	O
struct	O
transform	O
*	O
tf	O
)	O
{	O
struct	O
replace_segm	O
*	O
segm	O
=	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
*	O
segm	O
)	O
;	O
segm	O
->	O
next	*(struct(*(struct(*(struct`),enum(int,int,int,int),struct(enum(int,int,int,int,int,int),union`),union(struct`,struct`,int,struct`))),enum(int,int,int,int),struct(enum(int,int,int,int,int,int),union(*(char),struct(int,int))),union(struct(*(char),*(struct`)),struct(*(char),*(char),*(char),int,int,*(char)),int,struct(*(char),*(char)))))
=	O
NULL	O
;	O
if	O
(	O
tf	O
->	O
repl_tail	O
)	O
tf	O
->	O
repl_tail	O
->	O
next	*(struct(*(struct(*(struct`),enum(int,int,int,int),struct(enum(int,int,int,int,int,int),union`),union(struct`,struct`,int,struct`))),enum(int,int,int,int),struct(enum(int,int,int,int,int,int),union(*(char),struct(int,int))),union(struct(*(char),*(struct`)),struct(*(char),*(char),*(char),int,int,*(char)),int,struct(*(char),*(char)))))
=	O
segm	O
;	O
else	O
tf	O
->	O
repl_head	O
=	O
segm	O
;	O
tf	O
->	O
repl_tail	O
=	O
segm	O
;	O
tf	O
->	O
segm_count	O
++	O
;	O
return	O
segm	O
;	O
}	O
static	O
void	O
add_literal_segment	O
(	O
struct	O
transform	O
*	O
tf	O
,	O
char	O
*	O
str	*(char)
,	O
char	O
*	O
end	*(long)
)	O
{	O
size_t	long
len	long
=	O
end	*(long)
-	O
str	*(char)
;	O
if	O
(	O
len	long
)	O
{	O
struct	O
replace_segm	O
*	O
segm	O
=	O
add_segment	O
(	O
tf	O
)	O
;	O
segm	O
->	O
type	enum(int,int,int,int)
=	O
segm_literal	O
;	O
segm	O
->	O
v	union(*(char),struct(int,int))
.	O
literal	O
.	O
ptr	O
=	O
xmalloc	(long)->(*(void))
(	O
len	long
+	O
1	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
segm	O
->	O
v	union(*(char),struct(int,int))
.	O
literal	O
.	O
ptr	O
,	O
str	*(char)
,	O
len	long
)	O
;	O
segm	O
->	O
v	union(*(char),struct(int,int))
.	O
literal	O
.	O
ptr	O
[	O
len	long
]	O
=	O
0	int
;	O
segm	O
->	O
v	union(*(char),struct(int,int))
.	O
literal	O
.	O
size	long
=	O
len	long
;	O
}	O
}	O
static	O
void	O
add_char_segment	O
(	O
struct	O
transform	O
*	O
tf	O
,	O
int	O
chr	O
)	O
{	O
struct	O
replace_segm	O
*	O
segm	O
=	O
add_segment	O
(	O
tf	O
)	O
;	O
segm	O
->	O
type	enum(int,int,int,int)
=	O
segm_literal	O
;	O
segm	O
->	O
v	union(*(char),struct(int,int))
.	O
literal	O
.	O
ptr	O
=	O
xmalloc	(long)->(*(void))
(	O
2	int
)	O
;	O
segm	O
->	O
v	union(*(char),struct(int,int))
.	O
literal	O
.	O
ptr	O
[	O
0	int
]	O
=	O
chr	O
;	O
segm	O
->	O
v	union(*(char),struct(int,int))
.	O
literal	O
.	O
ptr	O
[	O
1	int
]	O
=	O
0	int
;	O
segm	O
->	O
v	union(*(char),struct(int,int))
.	O
literal	O
.	O
size	long
=	O
1	int
;	O
}	O
static	O
void	O
add_backref_segment	O
(	O
struct	O
transform	O
*	O
tf	O
,	O
size_t	long
ref	O
)	O
{	O
struct	O
replace_segm	O
*	O
segm	O
=	O
add_segment	O
(	O
tf	O
)	O
;	O
segm	O
->	O
type	enum(int,int,int,int)
=	O
segm_backref	O
;	O
segm	O
->	O
v	union(*(char),struct(int,int))
.	O
ref	O
=	O
ref	O
;	O
}	O
static	O
void	O
add_case_ctl_segment	O
(	O
struct	O
transform	O
*	O
tf	O
,	O
enum	O
case_ctl_type	O
ctl	O
)	O
{	O
struct	O
replace_segm	O
*	O
segm	O
=	O
add_segment	O
(	O
tf	O
)	O
;	O
segm	O
->	O
type	enum(int,int,int,int)
=	O
segm_case_ctl	O
;	O
segm	O
->	O
v	union(*(char),struct(int,int))
.	O
ctl	O
=	O
ctl	O
;	O
}	O
static	O
const	O
char	O
*	O
parse_transform_expr	O
(	O
struct	O
transform_list	O
*	O
tlist	O
,	O
const	O
char	O
*	O
expr	*(char)
,	O
int	O
cflags	O
,	O
struct	O
cfloc	O
*	O
loc	O
)	O
{	O
int	O
delim	*(char)
;	O
int	O
i	O
,	O
j	O
,	O
rc	O
;	O
char	O
*	O
str	*(char)
,	O
*	O
beg	O
,	O
*	O
cur	O
;	O
const	O
char	O
*	O
p	*(void)
;	O
struct	O
transform	O
*	O
tf	O
=	O
new_transform	O
(	O
tlist	O
)	O
;	O
if	O
(	O
expr	*(char)
[	O
0	int
]	O
!=	O
's'	O
)	O
die_usage	O
(	O
loc	O
,	O
"%s"	*(char)
,	O
_	O
(	O
"Transform expression must start with 's' followed by a punctuation character"	*(char)
)	O
)	O
;	O
delim	*(char)
=	O
expr	*(char)
[	O
1	int
]	O
;	O
for	O
(	O
i	O
=	O
2	int
;	O
expr	*(char)
[	O
i	O
]	O
&&	O
expr	*(char)
[	O
i	O
]	O
!=	O
delim	*(char)
;	O
i	O
++	O
)	O
if	O
(	O
expr	*(char)
[	O
i	O
]	O
==	O
'\\'	O
&&	O
expr	*(char)
[	O
i	O
+	O
1	int
]	O
)	O
i	O
++	O
;	O
if	O
(	O
expr	*(char)
[	O
i	O
]	O
!=	O
delim	*(char)
)	O
die_usage	O
(	O
loc	O
,	O
_	O
(	O
"Missing 2nd delimiter in position %d of expression %s"	*(char)
)	O
,	O
i	O
,	O
expr	*(char)
)	O
;	O
for	O
(	O
j	O
=	O
i	O
+	O
1	int
;	O
expr	*(char)
[	O
j	O
]	O
&&	O
expr	*(char)
[	O
j	O
]	O
!=	O
delim	*(char)
;	O
j	O
++	O
)	O
if	O
(	O
expr	*(char)
[	O
j	O
]	O
==	O
'\\'	O
&&	O
expr	*(char)
[	O
j	O
+	O
1	int
]	O
)	O
j	O
++	O
;	O
if	O
(	O
expr	*(char)
[	O
j	O
]	O
!=	O
delim	*(char)
)	O
die_usage	O
(	O
loc	O
,	O
_	O
(	O
"Missing trailing delimiter in position %d of expression %s"	*(char)
)	O
,	O
j	O
,	O
expr	*(char)
)	O
;	O
tf	O
->	O
transform_type	O
=	O
transform_first	O
;	O
for	O
(	O
p	*(void)
=	O
expr	*(char)
+	O
j	O
+	O
1	int
;	O
*	O
p	*(void)
&&	O
*	O
p	*(void)
!=	O
';'	O
;	O
p	*(void)
++	O
)	O
switch	O
(	O
*	O
p	*(void)
)	O
{	O
case	O
'g'	O
:	O
tf	O
->	O
transform_type	O
=	O
transform_global	O
;	O
break	O
;	O
case	O
'i'	O
:	O
cflags	O
|=	O
REG_ICASE	O
;	O
break	O
;	O
case	O
'x'	O
:	O
cflags	O
|=	O
REG_EXTENDED	O
;	O
break	O
;	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
tf	O
->	O
match_number	O
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
p	*(void)
,	O
(	O
char	O
*	O
*	O
)	O
&	O
p	*(void)
,	O
0	int
)	O
;	O
p	*(void)
--	O
;	O
break	O
;	O
default	O
:	O
die_usage	O
(	O
loc	O
,	O
_	O
(	O
"Unknown flag in transform expression: %c"	*(char)
)	O
,	O
*	O
p	*(void)
)	O
;	O
}	O
if	O
(	O
*	O
p	*(void)
==	O
';'	O
)	O
p	*(void)
++	O
;	O
str	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
i	O
-	O
1	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
str	*(char)
,	O
expr	*(char)
+	O
2	int
,	O
i	O
-	O
2	int
)	O
;	O
str	*(char)
[	O
i	O
-	O
2	int
]	O
=	O
0	int
;	O
rc	O
=	O
regcomp	O
(	O
&	O
tf	O
->	O
regex	O
,	O
str	*(char)
,	O
cflags	O
)	O
;	O
if	O
(	O
rc	O
)	O
{	O
char	O
errbuf	O
[	O
512	int
]	O
;	O
regerror	O
(	O
rc	O
,	O
&	O
tf	O
->	O
regex	O
,	O
errbuf	O
,	O
sizeof	O
(	O
errbuf	O
)	O
)	O
;	O
die_usage	O
(	O
loc	O
,	O
_	O
(	O
"Invalid transform expression: %s"	*(char)
)	O
,	O
errbuf	O
)	O
;	O
}	O
if	O
(	O
str	*(char)
[	O
0	int
]	O
==	O
'^'	O
||	O
str	*(char)
[	O
strlen	(*(char))->(long)
(	O
str	*(char)
)	O
-	O
1	int
]	O
==	O
'$'	O
)	O
tf	O
->	O
transform_type	O
=	O
transform_first	O
;	O
free	(*(void))->(void)
(	O
str	*(char)
)	O
;	O
i	O
++	O
;	O
str	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
j	O
-	O
i	O
+	O
1	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
str	*(char)
,	O
expr	*(char)
+	O
i	O
,	O
j	O
-	O
i	O
)	O
;	O
str	*(char)
[	O
j	O
-	O
i	O
]	O
=	O
0	int
;	O
for	O
(	O
cur	O
=	O
beg	O
=	O
str	*(char)
;	O
*	O
cur	O
;	O
)	O
{	O
if	O
(	O
*	O
cur	O
==	O
'\\'	O
)	O
{	O
size_t	long
n	long
;	O
add_literal_segment	O
(	O
tf	O
,	O
beg	O
,	O
cur	O
)	O
;	O
switch	O
(	O
*	O
++	O
cur	O
)	O
{	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
n	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
cur	O
,	O
&	O
cur	O
,	O
10	int
)	O
;	O
if	O
(	O
n	long
>	O
tf	O
->	O
regex	O
.	O
re_nsub	long
)	O
die_usage	O
(	O
loc	O
,	O
_	O
(	O
"Invalid transform replacement: "	*(char)
"back reference out of range"	*(char)
)	O
)	O
;	O
add_backref_segment	O
(	O
tf	O
,	O
n	long
)	O
;	O
break	O
;	O
case	O
'\\'	O
:	O
add_char_segment	O
(	O
tf	O
,	O
'\\'	O
)	O
;	O
cur	O
++	O
;	O
break	O
;	O
case	O
'a'	O
:	O
add_char_segment	O
(	O
tf	O
,	O
'\a'	O
)	O
;	O
cur	O
++	O
;	O
break	O
;	O
case	O
'b'	O
:	O
add_char_segment	O
(	O
tf	O
,	O
'\b'	O
)	O
;	O
cur	O
++	O
;	O
break	O
;	O
case	O
'f'	O
:	O
add_char_segment	O
(	O
tf	O
,	O
'\f'	O
)	O
;	O
cur	O
++	O
;	O
break	O
;	O
case	O
'n'	O
:	O
add_char_segment	O
(	O
tf	O
,	O
'\n'	O
)	O
;	O
cur	O
++	O
;	O
break	O
;	O
case	O
'r'	O
:	O
add_char_segment	O
(	O
tf	O
,	O
'\r'	O
)	O
;	O
cur	O
++	O
;	O
break	O
;	O
case	O
't'	O
:	O
add_char_segment	O
(	O
tf	O
,	O
'\t'	O
)	O
;	O
cur	O
++	O
;	O
break	O
;	O
case	O
'v'	O
:	O
add_char_segment	O
(	O
tf	O
,	O
'\v'	O
)	O
;	O
cur	O
++	O
;	O
break	O
;	O
case	O
'&'	O
:	O
add_char_segment	O
(	O
tf	O
,	O
'&'	O
)	O
;	O
cur	O
++	O
;	O
break	O
;	O
case	O
'L'	O
:	O
add_case_ctl_segment	O
(	O
tf	O
,	O
ctl_locase	O
)	O
;	O
cur	O
++	O
;	O
break	O
;	O
case	O
'l'	O
:	O
add_case_ctl_segment	O
(	O
tf	O
,	O
ctl_locase_next	O
)	O
;	O
cur	O
++	O
;	O
break	O
;	O
case	O
'U'	O
:	O
add_case_ctl_segment	O
(	O
tf	O
,	O
ctl_upcase	O
)	O
;	O
cur	O
++	O
;	O
break	O
;	O
case	O
'u'	O
:	O
add_case_ctl_segment	O
(	O
tf	O
,	O
ctl_upcase_next	O
)	O
;	O
cur	O
++	O
;	O
break	O
;	O
case	O
'E'	O
:	O
add_case_ctl_segment	O
(	O
tf	O
,	O
ctl_stop	O
)	O
;	O
cur	O
++	O
;	O
break	O
;	O
default	O
:	O
{	O
char	O
buf	O
[	O
2	int
]	O
;	O
buf	O
[	O
0	int
]	O
=	O
'\\'	O
;	O
buf	O
[	O
1	int
]	O
=	O
*	O
cur	O
;	O
add_literal_segment	O
(	O
tf	O
,	O
buf	O
,	O
buf	O
+	O
2	int
)	O
;	O
}	O
cur	O
++	O
;	O
break	O
;	O
}	O
beg	O
=	O
cur	O
;	O
}	O
else	O
if	O
(	O
*	O
cur	O
==	O
'&'	O
)	O
{	O
add_literal_segment	O
(	O
tf	O
,	O
beg	O
,	O
cur	O
)	O
;	O
add_backref_segment	O
(	O
tf	O
,	O
0	int
)	O
;	O
beg	O
=	O
++	O
cur	O
;	O
}	O
else	O
cur	O
++	O
;	O
}	O
add_literal_segment	O
(	O
tf	O
,	O
beg	O
,	O
cur	O
)	O
;	O
return	O
p	*(void)
;	O
}	O
transform_t	*(struct)
compile_transform_expr	O
(	O
const	O
char	O
*	O
expr	*(char)
,	O
int	O
cflags	O
,	O
struct	O
cfloc	O
*	O
loc	O
)	O
{	O
struct	O
transform_list	O
tlist	O
=	O
{	O
NULL	O
,	O
NULL	O
}	O
;	O
while	O
(	O
*	O
expr	*(char)
)	O
expr	*(char)
=	O
parse_transform_expr	O
(	O
&	O
tlist	O
,	O
expr	*(char)
,	O
cflags	O
,	O
loc	O
)	O
;	O
return	O
tlist	O
.	O
head	O
;	O
}	O
static	O
const	O
char	O
*	O
run_case_conv	O
(	O
enum	O
case_ctl_type	O
case_ctl	O
,	O
const	O
char	O
*	O
ptr	O
,	O
size_t	long
size	long
)	O
{	O
static	O
char	O
*	O
case_ctl_buffer	O
;	O
static	O
size_t	long
case_ctl_bufsize	O
;	O
char	O
*	O
p	*(void)
;	O
if	O
(	O
case_ctl_bufsize	O
<	O
size	long
)	O
{	O
case_ctl_bufsize	O
=	O
size	long
;	O
case_ctl_buffer	O
=	O
xrealloc	(*(void),long)->(*(void))
(	O
case_ctl_buffer	O
,	O
case_ctl_bufsize	O
)	O
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
case_ctl_buffer	O
,	O
ptr	O
,	O
size	long
)	O
;	O
switch	O
(	O
case_ctl	O
)	O
{	O
case	O
ctl_upcase_next	O
:	O
case_ctl_buffer	O
[	O
0	int
]	O
=	O
c_toupper	(int)->(int)
(	O
case_ctl_buffer	O
[	O
0	int
]	O
)	O
;	O
break	O
;	O
case	O
ctl_locase_next	O
:	O
case_ctl_buffer	O
[	O
0	int
]	O
=	O
c_tolower	(int)->(int)
(	O
case_ctl_buffer	O
[	O
0	int
]	O
)	O
;	O
break	O
;	O
case	O
ctl_upcase	O
:	O
for	O
(	O
p	*(void)
=	O
case_ctl_buffer	O
;	O
p	*(void)
<	O
case_ctl_buffer	O
+	O
size	long
;	O
p	*(void)
++	O
)	O
*	O
p	*(void)
=	O
c_toupper	(int)->(int)
(	O
*	O
p	*(void)
)	O
;	O
break	O
;	O
case	O
ctl_locase	O
:	O
for	O
(	O
p	*(void)
=	O
case_ctl_buffer	O
;	O
p	*(void)
<	O
case_ctl_buffer	O
+	O
size	long
;	O
p	*(void)
++	O
)	O
*	O
p	*(void)
=	O
c_tolower	(int)->(int)
(	O
*	O
p	*(void)
)	O
;	O
break	O
;	O
case	O
ctl_stop	O
:	O
break	O
;	O
}	O
return	O
case_ctl_buffer	O
;	O
}	O
void	O
_single_transform_name_to_slist	O
(	O
struct	O
transform	O
*	O
tf	O
,	O
slist_t	*(struct)
slist	*(struct)
,	O
const	O
char	O
*	O
input	O
)	O
{	O
regmatch_t	struct(long,long)
*	O
rmp	O
;	O
int	O
rc	O
;	O
size_t	long
nmatches	O
=	O
0	int
;	O
enum	O
case_ctl_type	O
case_ctl	O
=	O
ctl_stop	O
,	O
save_ctl	O
=	O
ctl_stop	O
;	O
rmp	O
=	O
xmalloc	(long)->(*(void))
(	O
(	O
tf	O
->	O
regex	O
.	O
re_nsub	long
+	O
1	int
)	O
*	O
sizeof	O
(	O
*	O
rmp	O
)	O
)	O
;	O
while	O
(	O
*	O
input	O
)	O
{	O
size_t	long
disp	O
;	O
const	O
char	O
*	O
ptr	O
;	O
rc	O
=	O
regexec	O
(	O
&	O
tf	O
->	O
regex	O
,	O
input	O
,	O
tf	O
->	O
regex	O
.	O
re_nsub	long
+	O
1	int
,	O
rmp	O
,	O
0	int
)	O
;	O
if	O
(	O
rc	O
==	O
0	int
)	O
{	O
struct	O
replace_segm	O
*	O
segm	O
;	O
disp	O
=	O
rmp	O
[	O
0	int
]	O
.	O
rm_eo	long
;	O
if	O
(	O
rmp	O
[	O
0	int
]	O
.	O
rm_so	long
)	O
slist_append	(*(struct),*(char),long)->(void)
(	O
slist	*(struct)
,	O
input	O
,	O
rmp	O
[	O
0	int
]	O
.	O
rm_so	long
)	O
;	O
nmatches	O
++	O
;	O
if	O
(	O
tf	O
->	O
match_number	O
&&	O
nmatches	O
<	O
tf	O
->	O
match_number	O
)	O
{	O
slist_append	(*(struct),*(char),long)->(void)
(	O
slist	*(struct)
,	O
input	O
,	O
disp	O
)	O
;	O
input	O
+=	O
disp	O
;	O
continue	O
;	O
}	O
for	O
(	O
segm	O
=	O
tf	O
->	O
repl_head	O
;	O
segm	O
;	O
segm	O
=	O
segm	O
->	O
next	*(struct(*(struct(*(struct`),enum(int,int,int,int),struct(enum(int,int,int,int,int,int),union`),union(struct`,struct`,int,struct`))),enum(int,int,int,int),struct(enum(int,int,int,int,int,int),union(*(char),struct(int,int))),union(struct(*(char),*(struct`)),struct(*(char),*(char),*(char),int,int,*(char)),int,struct(*(char),*(char)))))
)	O
{	O
switch	O
(	O
segm	O
->	O
type	enum(int,int,int,int)
)	O
{	O
case	O
segm_literal	O
:	O
if	O
(	O
case_ctl	O
==	O
ctl_stop	O
)	O
ptr	O
=	O
segm	O
->	O
v	union(*(char),struct(int,int))
.	O
literal	O
.	O
ptr	O
;	O
else	O
{	O
ptr	O
=	O
run_case_conv	O
(	O
case_ctl	O
,	O
segm	O
->	O
v	union(*(char),struct(int,int))
.	O
literal	O
.	O
ptr	O
,	O
segm	O
->	O
v	union(*(char),struct(int,int))
.	O
literal	O
.	O
size	long
)	O
;	O
CASE_CTL_RESET	O
(	O
)	O
;	O
}	O
slist_append	(*(struct),*(char),long)->(void)
(	O
slist	*(struct)
,	O
ptr	O
,	O
segm	O
->	O
v	union(*(char),struct(int,int))
.	O
literal	O
.	O
size	long
)	O
;	O
break	O
;	O
case	O
segm_backref	O
:	O
if	O
(	O
rmp	O
[	O
segm	O
->	O
v	union(*(char),struct(int,int))
.	O
ref	O
]	O
.	O
rm_so	long
!=	O
-	O
1	int
&&	O
rmp	O
[	O
segm	O
->	O
v	union(*(char),struct(int,int))
.	O
ref	O
]	O
.	O
rm_eo	long
!=	O
-	O
1	int
)	O
{	O
size_t	long
size	long
=	O
rmp	O
[	O
segm	O
->	O
v	union(*(char),struct(int,int))
.	O
ref	O
]	O
.	O
rm_eo	long
-	O
rmp	O
[	O
segm	O
->	O
v	union(*(char),struct(int,int))
.	O
ref	O
]	O
.	O
rm_so	long
;	O
ptr	O
=	O
input	O
+	O
rmp	O
[	O
segm	O
->	O
v	union(*(char),struct(int,int))
.	O
ref	O
]	O
.	O
rm_so	long
;	O
if	O
(	O
case_ctl	O
!=	O
ctl_stop	O
)	O
{	O
ptr	O
=	O
run_case_conv	O
(	O
case_ctl	O
,	O
ptr	O
,	O
size	long
)	O
;	O
CASE_CTL_RESET	O
(	O
)	O
;	O
}	O
slist_append	(*(struct),*(char),long)->(void)
(	O
slist	*(struct)
,	O
ptr	O
,	O
size	long
)	O
;	O
}	O
break	O
;	O
case	O
segm_case_ctl	O
:	O
switch	O
(	O
segm	O
->	O
v	union(*(char),struct(int,int))
.	O
ctl	O
)	O
{	O
case	O
ctl_upcase_next	O
:	O
case	O
ctl_locase_next	O
:	O
switch	O
(	O
save_ctl	O
)	O
{	O
case	O
ctl_stop	O
:	O
case	O
ctl_upcase	O
:	O
case	O
ctl_locase	O
:	O
save_ctl	O
=	O
case_ctl	O
;	O
default	O
:	O
break	O
;	O
}	O
case	O
ctl_upcase	O
:	O
case	O
ctl_locase	O
:	O
case	O
ctl_stop	O
:	O
case_ctl	O
=	O
segm	O
->	O
v	union(*(char),struct(int,int))
.	O
ctl	O
;	O
}	O
}	O
}	O
}	O
else	O
{	O
disp	O
=	O
strlen	(*(char))->(long)
(	O
input	O
)	O
;	O
slist_append	(*(struct),*(char),long)->(void)
(	O
slist	*(struct)
,	O
input	O
,	O
disp	O
)	O
;	O
}	O
input	O
+=	O
disp	O
;	O
if	O
(	O
tf	O
->	O
transform_type	O
==	O
transform_first	O
)	O
{	O
slist_append	(*(struct),*(char),long)->(void)
(	O
slist	*(struct)
,	O
input	O
,	O
strlen	(*(char))->(long)
(	O
input	O
)	O
)	O
;	O
break	O
;	O
}	O
}	O
free	(*(void))->(void)
(	O
rmp	O
)	O
;	O
}	O
char	O
*	O
transform_string	O
(	O
transform_t	*(struct)
tf	O
,	O
const	O
char	O
*	O
input	O
)	O
{	O
if	O
(	O
tf	O
)	O
{	O
slist_t	*(struct)
slist	*(struct)
=	O
slist_create	()->(*(struct))
(	O
)	O
;	O
char	O
*	O
buf	O
=	O
NULL	O
;	O
size_t	long
size	long
=	O
0	int
;	O
for	O
(	O
;	O
tf	O
;	O
tf	O
=	O
tf	O
->	O
next	*(struct(*(struct(*(struct`),enum(int,int,int,int),struct(enum(int,int,int,int,int,int),union`),union(struct`,struct`,int,struct`))),enum(int,int,int,int),struct(enum(int,int,int,int,int,int),union(*(char),struct(int,int))),union(struct(*(char),*(struct`)),struct(*(char),*(char),*(char),int,int,*(char)),int,struct(*(char),*(char)))))
)	O
{	O
_single_transform_name_to_slist	O
(	O
tf	O
,	O
slist	*(struct)
,	O
input	O
)	O
;	O
input	O
=	O
slist_reduce	(*(struct),*(*(char)),*(long))->(*(char))
(	O
slist	*(struct)
,	O
&	O
buf	O
,	O
&	O
size	long
)	O
;	O
}	O
slist_free	(*(struct))->(void)
(	O
slist	*(struct)
)	O
;	O
}	O
return	O
xstrdup	(*(char))->(*(char))
(	O
input	O
)	O
;	O
}	O
