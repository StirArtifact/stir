int	O
mu_imap_gencom	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct(int,*(char),int,int,*(*(char)),*(char),*(struct),*((*`)->(void)),*((*`,*`,*`)->(void)),*(void))))->(int)
(	O
mu_imap_t	*(struct)
imap	*(struct)
,	O
struct	O
imap_command	struct(int,*(char),int,int,*(*(char)),*(char),*(struct),*((*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct`),*(struct`),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(void)),*((*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct`),*(struct`),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),*(void))
*	O
cmd	int
)	O
{	O
int	O
status	int
;	O
if	O
(	O
imap	*(struct)
==	O
NULL	O
||	O
!	O
cmd	int
||	O
cmd	int
->	O
argc	int
<	O
1	int
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
imap	*(struct)
->	O
io	*(struct)
)	O
return	O
MU_ERR_NO_TRANSPORT	O
;	O
if	O
(	O
imap	*(struct)
->	O
session_state	enum(int,int,int,int)
<	O
cmd	int
->	O
session_state	enum(int,int,int,int)
)	O
return	O
MU_ERR_SEQ	O
;	O
if	O
(	O
cmd	int
->	O
capa	*(struct)
)	O
{	O
status	int
=	O
mu_imap_capability_test	(*(struct),*(char),*(*(char)))->(int)
(	O
imap	*(struct)
,	O
cmd	int
->	O
capa	*(struct)
,	O
NULL	O
)	O
;	O
switch	O
(	O
status	int
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
MU_ERR_NOENT	O
:	O
return	O
ENOSYS	int
;	O
default	O
:	O
return	O
status	int
;	O
}	O
}	O
if	O
(	O
imap	*(struct)
->	O
client_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
MU_IMAP_CLIENT_READY	int
)	O
{	O
status	int
=	O
_mu_imap_tag_next	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(int)
(	O
imap	*(struct)
)	O
;	O
MU_IMAP_CHECK_EAGAIN	O
(	O
imap	*(struct)
,	O
status	int
)	O
;	O
status	int
=	O
mu_imapio_send_command_v	(*(struct),*(char),*(struct),int,*(*(char)),*(char))->(int)
(	O
imap	*(struct)
->	O
io	*(struct)
,	O
imap	*(struct)
->	O
tag_str	*(char)
,	O
cmd	int
->	O
msgset	*(struct)
,	O
cmd	int
->	O
argc	int
,	O
cmd	int
->	O
argv	*(*(char))
,	O
cmd	int
->	O
extra	*(char)
)	O
;	O
MU_IMAP_CHECK_ERROR	O
(	O
imap	*(struct)
,	O
status	int
)	O
;	O
MU_IMAP_FCLR	O
(	O
imap	*(struct)
,	O
MU_IMAP_RESP	int
)	O
;	O
imap	*(struct)
->	O
client_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
cmd	int
->	O
rx_state	int
;	O
}	O
if	O
(	O
imap	*(struct)
->	O
client_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
cmd	int
->	O
rx_state	int
)	O
{	O
status	int
=	O
_mu_imap_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),*(void))->(int)
(	O
imap	*(struct)
,	O
cmd	int
->	O
untagged_handler	*((*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct`),*(struct`),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void))
,	O
cmd	int
->	O
untagged_handler_data	*(void)
)	O
;	O
MU_IMAP_CHECK_EAGAIN	O
(	O
imap	*(struct)
,	O
status	int
)	O
;	O
if	O
(	O
cmd	int
->	O
tagged_handler	*((*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct`),*(struct`),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(void))
)	O
cmd	int
->	O
tagged_handler	*((*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct`),*(struct`),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(void))
(	O
imap	*(struct)
)	O
;	O
switch	O
(	O
imap	*(struct)
->	O
response	enum(int,int,int)
)	O
{	O
case	O
MU_IMAP_OK	int
:	O
status	int
=	O
0	int
;	O
break	O
;	O
case	O
MU_IMAP_NO	int
:	O
status	int
=	O
MU_ERR_FAILURE	O
;	O
break	O
;	O
case	O
MU_IMAP_BAD	int
:	O
status	int
=	O
MU_ERR_BADREPLY	O
;	O
break	O
;	O
}	O
imap	*(struct)
->	O
client_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
MU_IMAP_CLIENT_READY	int
;	O
}	O
else	O
status	int
=	O
EINPROGRESS	int
;	O
return	O
status	int
;	O
}	O
