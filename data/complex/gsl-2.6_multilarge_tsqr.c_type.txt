typedef	O
struct	O
{	O
size_t	long
p	int
;	O
int	O
nblocks	int
;	O
double	O
rnorm	*(double)
;	O
int	O
svd	int
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
R	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
QTb	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
work3	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_multifit_linear_workspace	struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)
*	O
multifit_workspace_p	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
;	O
}	O
tsqr_state_t	struct(long,int,double,int,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))
;	O
static	O
void	O
*	O
tsqr_alloc	(long)->(*(void))
(	O
const	O
size_t	long
p	int
)	O
;	O
static	O
void	O
tsqr_free	(*(void))->(void)
(	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
int	O
tsqr_reset	(*(void))->(int)
(	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
int	O
tsqr_accumulate	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
b	double
,	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
int	O
tsqr_solve	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),*(void))->(int)
(	O
const	O
double	O
lambda	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
double	O
*	O
rnorm	*(double)
,	O
double	O
*	O
snorm	*(double)
,	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
int	O
tsqr_rcond	(*(double),*(void))->(int)
(	O
double	O
*	O
rcond	*(double)
,	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
int	O
tsqr_lcurve	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))->(int)
(	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
reg_param	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
rho	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
eta	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
int	O
tsqr_svd	(*(struct(long,int,double,int,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,long,*`,*`,*`,*`,*`,*`,*`,double)))))->(int)
(	O
tsqr_state_t	struct(long,int,double,int,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))
*	O
state	*(int)
)	O
;	O
static	O
void	O
*	O
tsqr_alloc	(long)->(*(void))
(	O
const	O
size_t	long
p	int
)	O
{	O
tsqr_state_t	struct(long,int,double,int,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))
*	O
state	*(int)
;	O
if	O
(	O
p	int
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"p must be a positive integer"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
state	*(int)
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
tsqr_state_t	struct(long,int,double,int,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))
)	O
)	O
;	O
if	O
(	O
!	O
state	*(int)
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate tsqr state"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
p	int
=	O
p	int
;	O
state	*(int)
->	O
nblocks	int
=	O
0	int
;	O
state	*(int)
->	O
rnorm	*(double)
=	O
0.0	int
;	O
state	*(int)
->	O
R	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_alloc	(long,long)->(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
,	O
p	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
R	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
tsqr_free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate R matrix"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
QTb	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
QTb	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
tsqr_free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate QTb vector"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_alloc	(long,long)->(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
,	O
p	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
tsqr_free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate T matrix"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
tsqr_free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate workspace vector"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
work3	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
3	int
*	O
p	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
work3	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
tsqr_free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate work3 vector"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
multifit_workspace_p	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
=	O
gsl_multifit_linear_alloc	(long,long)->(*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))
(	O
p	int
,	O
p	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
multifit_workspace_p	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
==	O
NULL	O
)	O
{	O
tsqr_free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate multifit workspace"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
return	O
state	*(int)
;	O
}	O
static	O
void	O
tsqr_free	(*(void))->(void)
(	O
void	O
*	O
vstate	*(void)
)	O
{	O
tsqr_state_t	struct(long,int,double,int,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))
*	O
state	*(int)
=	O
(	O
tsqr_state_t	struct(long,int,double,int,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))
*	O
)	O
vstate	*(void)
;	O
if	O
(	O
state	*(int)
->	O
R	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
R	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
QTb	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
QTb	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
work3	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
work3	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
multifit_workspace_p	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
)	O
gsl_multifit_linear_free	(*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))->(void)
(	O
state	*(int)
->	O
multifit_workspace_p	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
}	O
static	O
int	O
tsqr_reset	(*(void))->(int)
(	O
void	O
*	O
vstate	*(void)
)	O
{	O
tsqr_state_t	struct(long,int,double,int,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))
*	O
state	*(int)
=	O
(	O
tsqr_state_t	struct(long,int,double,int,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))
*	O
)	O
vstate	*(void)
;	O
gsl_matrix_set_zero	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
R	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_set_zero	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
QTb	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
state	*(int)
->	O
nblocks	int
=	O
0	int
;	O
state	*(int)
->	O
rnorm	*(double)
=	O
0.0	int
;	O
state	*(int)
->	O
svd	int
=	O
0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
tsqr_accumulate	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
b	double
,	O
void	O
*	O
vstate	*(void)
)	O
{	O
tsqr_state_t	struct(long,int,double,int,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))
*	O
state	*(int)
=	O
(	O
tsqr_state_t	struct(long,int,double,int,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))
*	O
)	O
vstate	*(void)
;	O
const	O
size_t	long
n	int
=	O
A	*(float)
->	O
size1	long
;	O
const	O
size_t	long
p	int
=	O
A	*(float)
->	O
size2	long
;	O
if	O
(	O
p	int
!=	O
state	*(int)
->	O
p	int
)	O
{	O
GSL_ERROR	O
(	O
"columns of A do not match workspace"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
n	int
!=	O
b	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"A and b have different numbers of rows"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
state	*(int)
->	O
nblocks	int
==	O
0	int
&&	O
n	int
<	O
p	int
)	O
{	O
GSL_ERROR	O
(	O
"n must be >= p"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
state	*(int)
->	O
nblocks	int
==	O
0	int
)	O
{	O
int	O
status	int
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
R	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
0	int
,	O
0	int
,	O
p	int
,	O
p	int
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
QTb	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
state	*(int)
->	O
QTb	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
p	int
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
b1	*(float)
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
b	double
,	O
0	int
,	O
p	int
)	O
;	O
status	int
=	O
gsl_linalg_QR_decomp_r	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
A	*(float)
,	O
state	*(int)
->	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
gsl_matrix_tricpy	(enum(int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasUpper	int
,	O
CblasNonUnit	int
,	O
state	*(int)
->	O
R	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
&	O
R	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_linalg_QR_QTvec_r	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
A	*(float)
,	O
state	*(int)
->	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
b	double
,	O
state	*(int)
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
QTb	*(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
b1	*(float)
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
n	int
>	O
p	int
)	O
{	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
b2	float
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
b	double
,	O
p	int
,	O
n	int
-	O
p	int
)	O
;	O
state	*(int)
->	O
rnorm	*(double)
=	O
gsl_blas_dnrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
&	O
b2	float
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
else	O
state	*(int)
->	O
rnorm	*(double)
=	O
0.0	int
;	O
state	*(int)
->	O
nblocks	int
=	O
1	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
int	O
status	int
;	O
status	int
=	O
gsl_linalg_QR_TR_decomp	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
->	O
R	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
A	*(float)
,	O
state	*(int)
->	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
QTb	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_blas_dgemv	(enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasTrans	int
,	O
1.0	int
,	O
A	*(float)
,	O
b	double
,	O
1.0	int
,	O
state	*(int)
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_blas_dtrmv	(enum(int,int),enum(int,int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasUpper	int
,	O
CblasTrans	int
,	O
CblasNonUnit	int
,	O
state	*(int)
->	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_sub	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
->	O
QTb	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_blas_dgemv	(enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasNoTrans	int
,	O
-	O
1.0	int
,	O
A	*(float)
,	O
state	*(int)
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
1.0	int
,	O
b	double
)	O
;	O
state	*(int)
->	O
rnorm	*(double)
=	O
gsl_hypot	(double,double)->(double)
(	O
state	*(int)
->	O
rnorm	*(double)
,	O
gsl_blas_dnrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
b	double
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
tsqr_solve	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),*(void))->(int)
(	O
const	O
double	O
lambda	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
double	O
*	O
rnorm	*(double)
,	O
double	O
*	O
snorm	*(double)
,	O
void	O
*	O
vstate	*(void)
)	O
{	O
tsqr_state_t	struct(long,int,double,int,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))
*	O
state	*(int)
=	O
(	O
tsqr_state_t	struct(long,int,double,int,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))
*	O
)	O
vstate	*(void)
;	O
if	O
(	O
x	double
->	O
size	long
!=	O
state	*(int)
->	O
p	int
)	O
{	O
GSL_ERROR	O
(	O
"solution vector does not match workspace"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
lambda	double
<	O
0.0	int
)	O
{	O
GSL_ERROR	O
(	O
"regularization parameter should be non-negative"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
lambda	double
==	O
0.0	int
)	O
{	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
x	double
,	O
state	*(int)
->	O
QTb	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_blas_dtrsv	(enum(int,int),enum(int,int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
state	*(int)
->	O
R	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
x	double
)	O
;	O
*	O
rnorm	*(double)
=	O
state	*(int)
->	O
rnorm	*(double)
;	O
*	O
snorm	*(double)
=	O
gsl_blas_dnrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
x	double
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
if	O
(	O
state	*(int)
->	O
svd	int
==	O
0	int
)	O
{	O
status	int
=	O
tsqr_svd	(*(struct(long,int,double,int,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,long,*`,*`,*`,*`,*`,*`,*`,double)))))->(int)
(	O
state	*(int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
}	O
status	int
=	O
gsl_multifit_linear_solve	(double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))->(int)
(	O
lambda	double
,	O
state	*(int)
->	O
R	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
QTb	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
x	double
,	O
rnorm	*(double)
,	O
snorm	*(double)
,	O
state	*(int)
->	O
multifit_workspace_p	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
*	O
rnorm	*(double)
=	O
gsl_hypot	(double,double)->(double)
(	O
*	O
rnorm	*(double)
,	O
state	*(int)
->	O
rnorm	*(double)
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
tsqr_lcurve	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))->(int)
(	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
reg_param	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
rho	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
eta	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
void	O
*	O
vstate	*(void)
)	O
{	O
tsqr_state_t	struct(long,int,double,int,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))
*	O
state	*(int)
=	O
(	O
tsqr_state_t	struct(long,int,double,int,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))
*	O
)	O
vstate	*(void)
;	O
int	O
status	int
;	O
size_t	long
i	long
;	O
if	O
(	O
state	*(int)
->	O
svd	int
==	O
0	int
)	O
{	O
status	int
=	O
tsqr_svd	(*(struct(long,int,double,int,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,long,*`,*`,*`,*`,*`,*`,*`,double)))))->(int)
(	O
state	*(int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
}	O
status	int
=	O
gsl_multifit_linear_lcurve	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))->(int)
(	O
state	*(int)
->	O
QTb	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
reg_param	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
rho	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
eta	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
multifit_workspace_p	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rho	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
;	O
++	O
i	long
)	O
{	O
double	O
*	O
rhoi	*(double)
=	O
gsl_vector_ptr	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(*(double))
(	O
rho	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
*	O
rhoi	*(double)
=	O
gsl_hypot	(double,double)->(double)
(	O
*	O
rhoi	*(double)
,	O
state	*(int)
->	O
rnorm	*(double)
)	O
;	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
tsqr_rcond	(*(double),*(void))->(int)
(	O
double	O
*	O
rcond	*(double)
,	O
void	O
*	O
vstate	*(void)
)	O
{	O
tsqr_state_t	struct(long,int,double,int,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))
*	O
state	*(int)
=	O
(	O
tsqr_state_t	struct(long,int,double,int,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))
*	O
)	O
vstate	*(void)
;	O
return	O
gsl_linalg_tri_rcond	(enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasUpper	int
,	O
state	*(int)
->	O
R	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
rcond	*(double)
,	O
state	*(int)
->	O
work3	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
static	O
int	O
tsqr_svd	(*(struct(long,int,double,int,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,long,*`,*`,*`,*`,*`,*`,*`,double)))))->(int)
(	O
tsqr_state_t	struct(long,int,double,int,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))
*	O
state	*(int)
)	O
{	O
int	O
status	int
;	O
status	int
=	O
gsl_multifit_linear_svd	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))->(int)
(	O
state	*(int)
->	O
R	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
multifit_workspace_p	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
)	O
;	O
if	O
(	O
status	int
)	O
{	O
GSL_ERROR	O
(	O
"error computing SVD of R"	*(char)
,	O
status	int
)	O
;	O
}	O
state	*(int)
->	O
svd	int
=	O
1	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
const	O
gsl_multilarge_linear_type	struct(*(char),*((long)->(*(void))),*((*(void))->(int)),*((*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(void))->(int)),*((double,*(struct(long,long,*`,*`,int)),*(double),*(double),*(void))->(int)),*((*(double),*(void))->(int)),*((*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(void))->(int)),*((*(void))->(void)))
tsqr_type	struct(*(char),*((long)->(*(void))),*((*(void))->(int)),*((*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(void))->(int)),*((double,*(struct(long,long,*`,*`,int)),*(double),*(double),*(void))->(int)),*((*(double),*(void))->(int)),*((*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(void))->(int)),*((*(void))->(void)))
=	O
{	O
"tsqr"	*(char)
,	O
tsqr_alloc	(long)->(*(void))
,	O
tsqr_reset	(*(void))->(int)
,	O
tsqr_accumulate	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))->(int)
,	O
tsqr_solve	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),*(void))->(int)
,	O
tsqr_rcond	(*(double),*(void))->(int)
,	O
tsqr_lcurve	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))->(int)
,	O
tsqr_free	(*(void))->(void)
}	O
;	O
const	O
gsl_multilarge_linear_type	struct(*(char),*((long)->(*(void))),*((*(void))->(int)),*((*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(void))->(int)),*((double,*(struct(long,long,*`,*`,int)),*(double),*(double),*(void))->(int)),*((*(double),*(void))->(int)),*((*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(void))->(int)),*((*(void))->(void)))
*	O
gsl_multilarge_linear_tsqr	*(struct(*(char),*((long)->(*(void))),*((*(void))->(int)),*((*(struct`),*(struct`),*(void))->(int)),*((double,*(struct`),*(double),*(double),*(void))->(int)),*((*(double),*(void))->(int)),*((*(struct`),*(struct`),*(struct`),*(void))->(int)),*((*(void))->(void))))
=	O
&	O
tsqr_type	struct(*(char),*((long)->(*(void))),*((*(void))->(int)),*((*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(void))->(int)),*((double,*(struct(long,long,*`,*`,int)),*(double),*(double),*(void))->(int)),*((*(double),*(void))->(int)),*((*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(void))->(int)),*((*(void))->(void)))
;	O
