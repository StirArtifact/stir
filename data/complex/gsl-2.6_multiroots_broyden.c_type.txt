typedef	O
struct	O
{	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_permutation	struct(long,*(long))
*	O
permutation	*(struct(long,*(long)))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
y	double
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
p	int
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
fnew	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
double	O
phi	double
;	O
}	O
broyden_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)
;	O
static	O
int	O
broyden_alloc	(*(void),long)->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
size_t	long
n	int
)	O
;	O
static	O
int	O
broyden_set	(*(void),*(struct(*((*`,*`,*`)->(int)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
gsl_multiroot_function	struct(*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(int)),long,*(void))
*	O
function	*((double,*(void))->(double))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f	*(double)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
static	O
int	O
broyden_iterate	(*(void),*(struct(*((*`,*`,*`)->(int)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
gsl_multiroot_function	struct(*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(int)),long,*(void))
*	O
function	*((double,*(void))->(double))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f	*(double)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
static	O
void	O
broyden_free	(*(void))->(void)
(	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
int	O
broyden_alloc	(*(void),long)->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
size_t	long
n	int
)	O
{	O
broyden_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)
*	O
state	*(int)
=	O
(	O
broyden_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)
*	O
)	O
vstate	*(void)
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
*	O
y	double
,	O
*	O
fnew	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
*	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
*	O
p	int
;	O
gsl_permutation	struct(long,*(long))
*	O
perm	*(struct(long,*(long)))
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
,	O
*	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_calloc	(long,long)->(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
,	O
n	int
)	O
;	O
if	O
(	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
==	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"failed to allocate space for lu"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
;	O
perm	*(struct(long,*(long)))
=	O
gsl_permutation_calloc	(long)->(*(struct(long,*(long))))
(	O
n	int
)	O
;	O
if	O
(	O
perm	*(struct(long,*(long)))
==	O
0	int
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for permutation"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
permutation	*(struct(long,*(long)))
=	O
perm	*(struct(long,*(long)))
;	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_calloc	(long,long)->(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
,	O
n	int
)	O
;	O
if	O
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
gsl_permutation_free	(*(struct(long,*(long))))->(void)
(	O
perm	*(struct(long,*(long)))
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for d"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_vector_calloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
==	O
0	int
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_permutation_free	(*(struct(long,*(long))))->(void)
(	O
perm	*(struct(long,*(long)))
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for v"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_vector_calloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
==	O
0	int
)	O
{	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_permutation_free	(*(struct(long,*(long))))->(void)
(	O
perm	*(struct(long,*(long)))
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for w"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
y	double
=	O
gsl_vector_calloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
y	double
==	O
0	int
)	O
{	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_permutation_free	(*(struct(long,*(long))))->(void)
(	O
perm	*(struct(long,*(long)))
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for y"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
y	double
=	O
y	double
;	O
fnew	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_calloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
fnew	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
y	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_permutation_free	(*(struct(long,*(long))))->(void)
(	O
perm	*(struct(long,*(long)))
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for fnew"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
fnew	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
fnew	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_calloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
fnew	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
y	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_permutation_free	(*(struct(long,*(long))))->(void)
(	O
perm	*(struct(long,*(long)))
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for x_trial"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
p	int
=	O
gsl_vector_calloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
p	int
==	O
0	int
)	O
{	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
fnew	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
y	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_permutation_free	(*(struct(long,*(long))))->(void)
(	O
perm	*(struct(long,*(long)))
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for p"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
p	int
=	O
p	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
broyden_set	(*(void),*(struct(*((*`,*`,*`)->(int)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
gsl_multiroot_function	struct(*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(int)),long,*(void))
*	O
function	*((double,*(void))->(double))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f	*(double)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
broyden_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)
*	O
state	*(int)
=	O
(	O
broyden_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)
*	O
)	O
vstate	*(void)
;	O
size_t	long
i	long
,	O
j	long
,	O
n	int
=	O
function	*((double,*(void))->(double))
->	O
n	int
;	O
int	O
signum	*(int)
=	O
0	int
;	O
GSL_MULTIROOT_FN_EVAL	O
(	O
function	*((double,*(void))->(double))
,	O
x	double
,	O
f	*(double)
)	O
;	O
gsl_multiroot_fdjacobian	(*(struct(*((*`,*`,*`)->(int)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
function	*((double,*(void))->(double))
,	O
x	double
,	O
f	*(double)
,	O
GSL_SQRT_DBL_EPSILON	int
,	O
state	*(int)
->	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_linalg_LU_decomp	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),*(int))->(int)
(	O
state	*(int)
->	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
permutation	*(struct(long,*(long)))
,	O
&	O
signum	*(int)
)	O
;	O
gsl_linalg_LU_invert	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
->	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
permutation	*(struct(long,*(long)))
,	O
state	*(int)
->	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
n	int
;	O
j	long
++	O
)	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
state	*(int)
->	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
j	long
,	O
-	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
state	*(int)
->	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
j	long
)	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
0.0	int
)	O
;	O
}	O
state	*(int)
->	O
phi	double
=	O
enorm	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
f	*(double)
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
broyden_iterate	(*(void),*(struct(*((*`,*`,*`)->(int)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
gsl_multiroot_function	struct(*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(int)),long,*(void))
*	O
function	*((double,*(void))->(double))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f	*(double)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
broyden_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)
*	O
state	*(int)
=	O
(	O
broyden_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)
*	O
)	O
vstate	*(void)
;	O
double	O
phi0	double
,	O
phi1	double
,	O
t	double
,	O
lambda	double
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
state	*(int)
->	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
p	int
=	O
state	*(int)
->	O
p	int
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
y	double
=	O
state	*(int)
->	O
y	double
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
state	*(int)
->	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
state	*(int)
->	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
fnew	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
state	*(int)
->	O
fnew	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
state	*(int)
->	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
state	*(int)
->	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_permutation	struct(long,*(long))
*	O
perm	*(struct(long,*(long)))
=	O
state	*(int)
->	O
permutation	*(struct(long,*(long)))
;	O
size_t	long
i	long
,	O
j	long
,	O
iter	long
;	O
size_t	long
n	int
=	O
function	*((double,*(void))->(double))
->	O
n	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
double	O
sum	double
=	O
0	int
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
n	int
;	O
j	long
++	O
)	O
{	O
sum	double
+=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
j	long
)	O
*	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
f	*(double)
,	O
j	long
)	O
;	O
}	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
p	int
,	O
i	long
,	O
sum	double
)	O
;	O
}	O
t	double
=	O
1	int
;	O
iter	long
=	O
0	int
;	O
phi0	double
=	O
state	*(int)
->	O
phi	double
;	O
new_step	O
:	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
double	O
pi	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
p	int
,	O
i	long
)	O
;	O
double	O
xi	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
x	double
,	O
i	long
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
xi	double
+	O
t	double
*	O
pi	double
)	O
;	O
}	O
{	O
int	O
status	int
=	O
GSL_MULTIROOT_FN_EVAL	O
(	O
function	*((double,*(void))->(double))
,	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
fnew	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
status	int
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
GSL_EBADFUNC	int
;	O
}	O
}	O
phi1	double
=	O
enorm	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
fnew	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
iter	long
++	O
;	O
if	O
(	O
phi1	double
>	O
phi0	double
&&	O
iter	long
<	O
10	int
&&	O
t	double
>	O
0.1	int
)	O
{	O
double	O
theta	double
=	O
phi1	double
/	O
phi0	double
;	O
t	double
*=	O
(	O
sqrt	(double)->(double)
(	O
1.0	int
+	O
6.0	int
*	O
theta	double
)	O
-	O
1.0	int
)	O
/	O
(	O
3.0	int
*	O
theta	double
)	O
;	O
goto	O
new_step	O
;	O
}	O
if	O
(	O
phi1	double
>	O
phi0	double
)	O
{	O
int	O
signum	*(int)
=	O
0	int
;	O
gsl_multiroot_fdjacobian	(*(struct(*((*`,*`,*`)->(int)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
function	*((double,*(void))->(double))
,	O
x	double
,	O
f	*(double)
,	O
GSL_SQRT_DBL_EPSILON	int
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
n	int
;	O
j	long
++	O
)	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
j	long
,	O
-	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
j	long
)	O
)	O
;	O
gsl_linalg_LU_decomp	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),*(int))->(int)
(	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
perm	*(struct(long,*(long)))
,	O
&	O
signum	*(int)
)	O
;	O
gsl_linalg_LU_invert	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
perm	*(struct(long,*(long)))
,	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_linalg_LU_solve	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
perm	*(struct(long,*(long)))
,	O
f	*(double)
,	O
p	int
)	O
;	O
t	double
=	O
1	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
double	O
pi	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
p	int
,	O
i	long
)	O
;	O
double	O
xi	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
x	double
,	O
i	long
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
xi	double
+	O
t	double
*	O
pi	double
)	O
;	O
}	O
{	O
int	O
status	int
=	O
GSL_MULTIROOT_FN_EVAL	O
(	O
function	*((double,*(void))->(double))
,	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
fnew	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
status	int
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
GSL_EBADFUNC	int
;	O
}	O
}	O
phi1	double
=	O
enorm	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
fnew	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
double	O
yi	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
fnew	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
-	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
f	*(double)
,	O
i	long
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
y	double
,	O
i	long
,	O
yi	double
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
double	O
sum	double
=	O
0	int
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
n	int
;	O
j	long
++	O
)	O
{	O
sum	double
+=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
j	long
)	O
*	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
y	double
,	O
j	long
)	O
;	O
}	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
i	long
,	O
sum	double
)	O
;	O
}	O
lambda	double
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
lambda	double
+=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
p	int
,	O
i	long
)	O
*	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
i	long
)	O
;	O
}	O
if	O
(	O
lambda	double
==	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"approximation to Jacobian has collapsed"	*(char)
,	O
GSL_EZERODIV	int
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
double	O
vi	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
i	long
)	O
+	O
t	double
*	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
p	int
,	O
i	long
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
i	long
,	O
vi	double
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
double	O
sum	double
=	O
0	int
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
n	int
;	O
j	long
++	O
)	O
{	O
sum	double
+=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
j	long
,	O
i	long
)	O
*	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
p	int
,	O
j	long
)	O
;	O
}	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
i	long
,	O
sum	double
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
double	O
vi	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
i	long
)	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
n	int
;	O
j	long
++	O
)	O
{	O
double	O
wj	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
j	long
)	O
;	O
double	O
Hij	double
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
j	long
)	O
-	O
vi	double
*	O
wj	double
/	O
lambda	double
;	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
j	long
,	O
Hij	double
)	O
;	O
}	O
}	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
f	*(double)
,	O
fnew	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
x	double
,	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
double	O
pi	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
p	int
,	O
i	long
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
t	double
*	O
pi	double
)	O
;	O
}	O
state	*(int)
->	O
phi	double
=	O
phi1	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
void	O
broyden_free	(*(void))->(void)
(	O
void	O
*	O
vstate	*(void)
)	O
{	O
broyden_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)
*	O
state	*(int)
=	O
(	O
broyden_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)
*	O
)	O
vstate	*(void)
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_permutation_free	(*(struct(long,*(long))))->(void)
(	O
state	*(int)
->	O
permutation	*(struct(long,*(long)))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
y	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
p	int
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
fnew	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
static	O
const	O
gsl_multiroot_fsolver_type	struct(*(char),long,*((*(void),long)->(int)),*((*(void),*(struct(*`,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(*`,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void))->(void)))
broyden_type	struct(*(char),long,*((*(void),long)->(int)),*((*(void),*(struct(*`,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(*`,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void))->(void)))
=	O
{	O
"broyden"	*(char)
,	O
sizeof	O
(	O
broyden_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)
)	O
,	O
&	O
broyden_alloc	(*(void),long)->(int)
,	O
&	O
broyden_set	(*(void),*(struct(*((*`,*`,*`)->(int)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
,	O
&	O
broyden_iterate	(*(void),*(struct(*((*`,*`,*`)->(int)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
,	O
&	O
broyden_free	(*(void))->(void)
}	O
;	O
const	O
gsl_multiroot_fsolver_type	struct(*(char),long,*((*(void),long)->(int)),*((*(void),*(struct(*`,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(*`,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void))->(void)))
*	O
gsl_multiroot_fsolver_broyden	*(struct(*(char),long,*((*(void),long)->(int)),*((*(void),*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(void),*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(void))->(void))))
=	O
&	O
broyden_type	struct(*(char),long,*((*(void),long)->(int)),*((*(void),*(struct(*`,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(*`,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void))->(void)))
;	O
