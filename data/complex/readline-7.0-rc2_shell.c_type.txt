char	O
*	O
sh_single_quote	(*(char))->(*(char))
(	O
string	*(char)
)	O
char	O
*	O
string	*(char)
;	O
{	O
register	O
int	O
c	int
;	O
char	O
*	O
result	*(char)
,	O
*	O
r	*(char)
,	O
*	O
s	*(char)
;	O
result	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
3	int
+	O
(	O
4	int
*	O
strlen	(*(char))->(long)
(	O
string	*(char)
)	O
)	O
)	O
;	O
r	*(char)
=	O
result	*(char)
;	O
*	O
r	*(char)
++	O
=	O
'\''	O
;	O
for	O
(	O
s	*(char)
=	O
string	*(char)
;	O
s	*(char)
&&	O
(	O
c	int
=	O
*	O
s	*(char)
)	O
;	O
s	*(char)
++	O
)	O
{	O
*	O
r	*(char)
++	O
=	O
c	int
;	O
if	O
(	O
c	int
==	O
'\''	O
)	O
{	O
*	O
r	*(char)
++	O
=	O
'\\'	O
;	O
*	O
r	*(char)
++	O
=	O
'\''	O
;	O
*	O
r	*(char)
++	O
=	O
'\''	O
;	O
}	O
}	O
*	O
r	*(char)
++	O
=	O
'\''	O
;	O
*	O
r	*(char)
=	O
'\0'	O
;	O
return	O
(	O
result	*(char)
)	O
;	O
}	O
static	O
char	O
setenv_buf	array(char)
[	O
INT_STRLEN_BOUND	O
(	O
int	O
)	O
+	O
1	int
]	O
;	O
static	O
char	O
putenv_buf1	array(char)
[	O
INT_STRLEN_BOUND	O
(	O
int	O
)	O
+	O
6	int
+	O
1	int
]	O
;	O
static	O
char	O
putenv_buf2	array(char)
[	O
INT_STRLEN_BOUND	O
(	O
int	O
)	O
+	O
8	int
+	O
1	int
]	O
;	O
void	O
sh_set_lines_and_columns	(int,int)->(void)
(	O
lines	int
,	O
cols	int
)	O
int	O
lines	int
,	O
cols	int
;	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
setenv_buf	array(char)
,	O
"%d"	*(char)
,	O
lines	int
)	O
;	O
setenv	(*(char),*(char),int)->(int)
(	O
"LINES"	*(char)
,	O
setenv_buf	array(char)
,	O
1	int
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
setenv_buf	array(char)
,	O
"%d"	*(char)
,	O
cols	int
)	O
;	O
setenv	(*(char),*(char),int)->(int)
(	O
"COLUMNS"	*(char)
,	O
setenv_buf	array(char)
,	O
1	int
)	O
;	O
}	O
char	O
*	O
sh_get_env_value	(*(char))->(*(char))
(	O
varname	*(char)
)	O
const	O
char	O
*	O
varname	*(char)
;	O
{	O
return	O
(	O
(	O
char	O
*	O
)	O
getenv	(*(char))->(*(char))
(	O
varname	*(char)
)	O
)	O
;	O
}	O
char	O
*	O
sh_get_home_dir	()->(*(char))
(	O
)	O
{	O
static	O
char	O
*	O
home_dir	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
entry	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
;	O
if	O
(	O
home_dir	*(char)
)	O
return	O
(	O
home_dir	*(char)
)	O
;	O
home_dir	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
entry	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
getpwuid	(int)->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
getuid	()->(int)
(	O
)	O
)	O
;	O
if	O
(	O
entry	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
)	O
home_dir	*(char)
=	O
savestring	O
(	O
entry	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_dir	*(char)
)	O
;	O
endpwent	()->(void)
(	O
)	O
;	O
return	O
(	O
home_dir	*(char)
)	O
;	O
}	O
int	O
sh_unset_nodelay_mode	(int)->(int)
(	O
fd	int
)	O
int	O
fd	int
;	O
{	O
int	O
flags	int
,	O
bflags	int
;	O
if	O
(	O
(	O
flags	int
=	O
fcntl	(int,int)->(int)
(	O
fd	int
,	O
F_GETFL	int
,	O
0	int
)	O
)	O
<	O
0	int
)	O
return	O
-	O
1	int
;	O
bflags	int
=	O
0	int
;	O
bflags	int
|=	O
O_NONBLOCK	int
;	O
bflags	int
|=	O
O_NDELAY	O
;	O
if	O
(	O
flags	int
&	O
bflags	int
)	O
{	O
flags	int
&=	O
~	O
bflags	int
;	O
return	O
(	O
fcntl	(int,int)->(int)
(	O
fd	int
,	O
F_SETFL	int
,	O
flags	int
)	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
