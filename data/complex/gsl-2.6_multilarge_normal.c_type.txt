typedef	O
struct	O
{	O
size_t	long
p	int
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
ATA	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
ATb	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
double	O
normb	double
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
work_ATA	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
work3p	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
D	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
c	*(float)
;	O
int	O
eigen	int
;	O
double	O
eval_min	double
;	O
double	O
eval_max	double
;	O
gsl_eigen_symm_workspace	struct(long,*(double),*(double))
*	O
eigen_p	*(struct(long,*(double),*(double)))
;	O
}	O
normal_state_t	struct(long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),int,double,double,*(struct(long,*(double),*(double))))
;	O
static	O
void	O
*	O
normal_alloc	(long)->(*(void))
(	O
const	O
size_t	long
p	int
)	O
;	O
static	O
void	O
normal_free	(*(void))->(void)
(	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
int	O
normal_reset	(*(void))->(int)
(	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
int	O
normal_accumulate	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
b	double
,	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
int	O
normal_solve	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),*(void))->(int)
(	O
const	O
double	O
lambda	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
double	O
*	O
rnorm	*(double)
,	O
double	O
*	O
snorm	*(double)
,	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
int	O
normal_rcond	(*(double),*(void))->(int)
(	O
double	O
*	O
rcond	*(double)
,	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
int	O
normal_lcurve	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))->(int)
(	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
reg_param	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
rho	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
eta	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
int	O
normal_solve_system	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),int,double,double,*(struct(long,*`,*`)))))->(int)
(	O
const	O
double	O
lambda	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
normal_state_t	struct(long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),int,double,double,*(struct(long,*(double),*(double))))
*	O
state	*(int)
)	O
;	O
static	O
int	O
normal_solve_cholesky	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),int,double,double,*(struct(long,*`,*`)))))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
ATA	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
ATb	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
normal_state_t	struct(long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),int,double,double,*(struct(long,*(double),*(double))))
*	O
state	*(int)
)	O
;	O
static	O
int	O
normal_calc_norms	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),*(struct(long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),int,double,double,*(struct(long,*`,*`)))))->(int)
(	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
double	O
*	O
rnorm	*(double)
,	O
double	O
*	O
snorm	*(double)
,	O
normal_state_t	struct(long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),int,double,double,*(struct(long,*(double),*(double))))
*	O
state	*(int)
)	O
;	O
static	O
int	O
normal_eigen	(*(struct(long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),int,double,double,*(struct(long,*`,*`)))))->(int)
(	O
normal_state_t	struct(long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),int,double,double,*(struct(long,*(double),*(double))))
*	O
state	*(int)
)	O
;	O
static	O
void	O
*	O
normal_alloc	(long)->(*(void))
(	O
const	O
size_t	long
p	int
)	O
{	O
normal_state_t	struct(long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),int,double,double,*(struct(long,*(double),*(double))))
*	O
state	*(int)
;	O
if	O
(	O
p	int
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"p must be a positive integer"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
state	*(int)
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
normal_state_t	struct(long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),int,double,double,*(struct(long,*(double),*(double))))
)	O
)	O
;	O
if	O
(	O
!	O
state	*(int)
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate normal state"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
p	int
=	O
p	int
;	O
state	*(int)
->	O
ATA	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_alloc	(long,long)->(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
,	O
p	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
ATA	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
normal_free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate ATA matrix"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
work_ATA	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_alloc	(long,long)->(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
,	O
p	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
work_ATA	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
normal_free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate temporary ATA matrix"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
ATb	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
ATb	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
normal_free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate ATb vector"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
D	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
D	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
normal_free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate D vector"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
normal_free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate temporary ATb vector"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
work3p	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
3	int
*	O
p	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
work3p	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
normal_free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate work3p"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
c	*(float)
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
c	*(float)
==	O
NULL	O
)	O
{	O
normal_free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate c vector"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
eigen_p	*(struct(long,*(double),*(double)))
=	O
gsl_eigen_symm_alloc	(long)->(*(struct(long,*(double),*(double))))
(	O
p	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
eigen_p	*(struct(long,*(double),*(double)))
==	O
NULL	O
)	O
{	O
normal_free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate eigen workspace"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
normal_reset	(*(void))->(int)
(	O
state	*(int)
)	O
;	O
return	O
state	*(int)
;	O
}	O
static	O
void	O
normal_free	(*(void))->(void)
(	O
void	O
*	O
vstate	*(void)
)	O
{	O
normal_state_t	struct(long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),int,double,double,*(struct(long,*(double),*(double))))
*	O
state	*(int)
=	O
(	O
normal_state_t	struct(long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),int,double,double,*(struct(long,*(double),*(double))))
*	O
)	O
vstate	*(void)
;	O
if	O
(	O
state	*(int)
->	O
ATA	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
ATA	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
work_ATA	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
work_ATA	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
ATb	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
ATb	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
D	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
D	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
work3p	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
work3p	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
c	*(float)
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
c	*(float)
)	O
;	O
if	O
(	O
state	*(int)
->	O
eigen_p	*(struct(long,*(double),*(double)))
)	O
gsl_eigen_symm_free	(*(struct(long,*(double),*(double))))->(void)
(	O
state	*(int)
->	O
eigen_p	*(struct(long,*(double),*(double)))
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
}	O
static	O
int	O
normal_reset	(*(void))->(int)
(	O
void	O
*	O
vstate	*(void)
)	O
{	O
normal_state_t	struct(long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),int,double,double,*(struct(long,*(double),*(double))))
*	O
state	*(int)
=	O
(	O
normal_state_t	struct(long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),int,double,double,*(struct(long,*(double),*(double))))
*	O
)	O
vstate	*(void)
;	O
gsl_matrix_set_zero	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
ATA	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_set_zero	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
ATb	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
state	*(int)
->	O
normb	double
=	O
0.0	int
;	O
state	*(int)
->	O
eigen	int
=	O
0	int
;	O
state	*(int)
->	O
eval_min	double
=	O
0.0	int
;	O
state	*(int)
->	O
eval_max	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
normal_accumulate	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
b	double
,	O
void	O
*	O
vstate	*(void)
)	O
{	O
normal_state_t	struct(long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),int,double,double,*(struct(long,*(double),*(double))))
*	O
state	*(int)
=	O
(	O
normal_state_t	struct(long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),int,double,double,*(struct(long,*(double),*(double))))
*	O
)	O
vstate	*(void)
;	O
const	O
size_t	long
n	int
=	O
A	*(float)
->	O
size1	long
;	O
if	O
(	O
A	*(float)
->	O
size2	long
!=	O
state	*(int)
->	O
p	int
)	O
{	O
GSL_ERROR	O
(	O
"columns of A do not match workspace"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
n	int
!=	O
b	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"A and b have different numbers of rows"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
s	*(float)
;	O
s	*(float)
=	O
gsl_blas_dsyrk	(enum(int,int),enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLower	int
,	O
CblasTrans	int
,	O
1.0	int
,	O
A	*(float)
,	O
1.0	int
,	O
state	*(int)
->	O
ATA	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
s	*(float)
)	O
return	O
s	*(float)
;	O
s	*(float)
=	O
gsl_blas_dgemv	(enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasTrans	int
,	O
1.0	int
,	O
A	*(float)
,	O
b	double
,	O
1.0	int
,	O
state	*(int)
->	O
ATb	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
s	*(float)
)	O
return	O
s	*(float)
;	O
state	*(int)
->	O
normb	double
=	O
gsl_hypot	(double,double)->(double)
(	O
state	*(int)
->	O
normb	double
,	O
gsl_blas_dnrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
b	double
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
normal_solve	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),*(void))->(int)
(	O
const	O
double	O
lambda	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
double	O
*	O
rnorm	*(double)
,	O
double	O
*	O
snorm	*(double)
,	O
void	O
*	O
vstate	*(void)
)	O
{	O
normal_state_t	struct(long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),int,double,double,*(struct(long,*(double),*(double))))
*	O
state	*(int)
=	O
(	O
normal_state_t	struct(long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),int,double,double,*(struct(long,*(double),*(double))))
*	O
)	O
vstate	*(void)
;	O
if	O
(	O
x	double
->	O
size	long
!=	O
state	*(int)
->	O
p	int
)	O
{	O
GSL_ERROR	O
(	O
"solution vector does not match workspace"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
status	int
=	O
normal_solve_system	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),int,double,double,*(struct(long,*`,*`)))))->(int)
(	O
lambda	double
,	O
x	double
,	O
state	*(int)
)	O
;	O
if	O
(	O
status	int
)	O
{	O
GSL_ERROR	O
(	O
"failed to solve normal equations"	*(char)
,	O
status	int
)	O
;	O
}	O
normal_calc_norms	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),*(struct(long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),int,double,double,*(struct(long,*`,*`)))))->(int)
(	O
x	double
,	O
rnorm	*(double)
,	O
snorm	*(double)
,	O
state	*(int)
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
normal_rcond	(*(double),*(void))->(int)
(	O
double	O
*	O
rcond	*(double)
,	O
void	O
*	O
vstate	*(void)
)	O
{	O
normal_state_t	struct(long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),int,double,double,*(struct(long,*(double),*(double))))
*	O
state	*(int)
=	O
(	O
normal_state_t	struct(long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),int,double,double,*(struct(long,*(double),*(double))))
*	O
)	O
vstate	*(void)
;	O
int	O
status	int
=	O
GSL_SUCCESS	int
;	O
double	O
rcond_ATA	double
;	O
status	int
=	O
gsl_linalg_cholesky_rcond	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
->	O
work_ATA	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
&	O
rcond_ATA	double
,	O
state	*(int)
->	O
work3p	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
status	int
==	O
GSL_SUCCESS	int
)	O
*	O
rcond	*(double)
=	O
sqrt	(double)->(double)
(	O
rcond_ATA	double
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
normal_lcurve	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))->(int)
(	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
reg_param	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
rho	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
eta	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
void	O
*	O
vstate	*(void)
)	O
{	O
normal_state_t	struct(long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),int,double,double,*(struct(long,*(double),*(double))))
*	O
state	*(int)
=	O
(	O
normal_state_t	struct(long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),int,double,double,*(struct(long,*(double),*(double))))
*	O
)	O
vstate	*(void)
;	O
int	O
status	int
;	O
double	O
smin	double
,	O
smax	double
;	O
size_t	long
i	long
;	O
if	O
(	O
state	*(int)
->	O
eigen	int
==	O
0	int
)	O
{	O
status	int
=	O
normal_eigen	(*(struct(long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),int,double,double,*(struct(long,*`,*`)))))->(int)
(	O
state	*(int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
}	O
if	O
(	O
state	*(int)
->	O
eval_max	double
<	O
0.0	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix is not positive definite"	*(char)
,	O
GSL_EDOM	int
)	O
;	O
}	O
smax	double
=	O
sqrt	(double)->(double)
(	O
state	*(int)
->	O
eval_max	double
)	O
;	O
if	O
(	O
state	*(int)
->	O
eval_min	double
>	O
0.0	int
)	O
smin	double
=	O
sqrt	(double)->(double)
(	O
state	*(int)
->	O
eval_min	double
)	O
;	O
else	O
smin	double
=	O
0.0	int
;	O
gsl_multifit_linear_lreg	(double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
smin	double
,	O
smax	double
,	O
reg_param	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
reg_param	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
;	O
++	O
i	long
)	O
{	O
double	O
lambda	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
reg_param	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
double	O
rnorm	*(double)
,	O
snorm	*(double)
;	O
status	int
=	O
normal_solve_system	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),int,double,double,*(struct(long,*`,*`)))))->(int)
(	O
lambda	double
,	O
state	*(int)
->	O
c	*(float)
,	O
state	*(int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
normal_calc_norms	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),*(struct(long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),int,double,double,*(struct(long,*`,*`)))))->(int)
(	O
state	*(int)
->	O
c	*(float)
,	O
&	O
rnorm	*(double)
,	O
&	O
snorm	*(double)
,	O
state	*(int)
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
rho	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
rnorm	*(double)
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
eta	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
snorm	*(double)
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
normal_solve_system	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),int,double,double,*(struct(long,*`,*`)))))->(int)
(	O
const	O
double	O
lambda	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
normal_state_t	struct(long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),int,double,double,*(struct(long,*(double),*(double))))
*	O
state	*(int)
)	O
{	O
int	O
status	int
;	O
const	O
double	O
lambda_sq	double
=	O
lambda	double
*	O
lambda	double
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
d	*(double)
=	O
gsl_matrix_diagonal	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
state	*(int)
->	O
work_ATA	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_matrix_tricpy	(enum(int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLower	int
,	O
CblasNonUnit	int
,	O
state	*(int)
->	O
work_ATA	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
ATA	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_add_constant	(*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(int)
(	O
&	O
d	*(double)
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
lambda_sq	double
)	O
;	O
status	int
=	O
normal_solve_cholesky	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),int,double,double,*(struct(long,*`,*`)))))->(int)
(	O
state	*(int)
->	O
work_ATA	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
ATb	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
x	double
,	O
state	*(int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
status	int
;	O
}	O
static	O
int	O
normal_solve_cholesky	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),int,double,double,*(struct(long,*`,*`)))))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
ATA	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
ATb	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
normal_state_t	struct(long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),int,double,double,*(struct(long,*(double),*(double))))
*	O
state	*(int)
)	O
{	O
int	O
status	int
;	O
status	int
=	O
gsl_linalg_cholesky_decomp2	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
ATA	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
D	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
gsl_linalg_cholesky_solve2	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
ATA	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
D	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
ATb	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
x	double
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
normal_calc_norms	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),*(struct(long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),int,double,double,*(struct(long,*`,*`)))))->(int)
(	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
double	O
*	O
rnorm	*(double)
,	O
double	O
*	O
snorm	*(double)
,	O
normal_state_t	struct(long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),int,double,double,*(struct(long,*(double),*(double))))
*	O
state	*(int)
)	O
{	O
double	O
r2	double
;	O
*	O
snorm	*(double)
=	O
gsl_blas_dnrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
x	double
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
ATb	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_blas_dsymv	(enum(int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLower	int
,	O
1.0	int
,	O
state	*(int)
->	O
ATA	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
x	double
,	O
-	O
2.0	int
,	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_blas_ddot	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double))->(int)
(	O
x	double
,	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
&	O
r2	double
)	O
;	O
r2	double
+=	O
state	*(int)
->	O
normb	double
*	O
state	*(int)
->	O
normb	double
;	O
*	O
rnorm	*(double)
=	O
sqrt	(double)->(double)
(	O
r2	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
normal_eigen	(*(struct(long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),int,double,double,*(struct(long,*`,*`)))))->(int)
(	O
normal_state_t	struct(long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),int,double,double,*(struct(long,*(double),*(double))))
*	O
state	*(int)
)	O
{	O
int	O
status	int
;	O
gsl_matrix_tricpy	(enum(int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLower	int
,	O
CblasNonUnit	int
,	O
state	*(int)
->	O
work_ATA	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
ATA	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
status	int
=	O
gsl_eigen_symm	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(double),*(double))))->(int)
(	O
state	*(int)
->	O
work_ATA	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
eigen_p	*(struct(long,*(double),*(double)))
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
gsl_vector_minmax	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(double))->(void)
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
&	O
state	*(int)
->	O
eval_min	double
,	O
&	O
state	*(int)
->	O
eval_max	double
)	O
;	O
state	*(int)
->	O
eigen	int
=	O
1	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
const	O
gsl_multilarge_linear_type	struct(*(char),*((long)->(*(void))),*((*(void))->(int)),*((*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(void))->(int)),*((double,*(struct(long,long,*`,*`,int)),*(double),*(double),*(void))->(int)),*((*(double),*(void))->(int)),*((*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(void))->(int)),*((*(void))->(void)))
normal_type	struct(*(char),*((long)->(*(void))),*((*(void))->(int)),*((*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(void))->(int)),*((double,*(struct(long,long,*`,*`,int)),*(double),*(double),*(void))->(int)),*((*(double),*(void))->(int)),*((*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(void))->(int)),*((*(void))->(void)))
=	O
{	O
"normal"	*(char)
,	O
normal_alloc	(long)->(*(void))
,	O
normal_reset	(*(void))->(int)
,	O
normal_accumulate	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))->(int)
,	O
normal_solve	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),*(void))->(int)
,	O
normal_rcond	(*(double),*(void))->(int)
,	O
normal_lcurve	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))->(int)
,	O
normal_free	(*(void))->(void)
}	O
;	O
const	O
gsl_multilarge_linear_type	struct(*(char),*((long)->(*(void))),*((*(void))->(int)),*((*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(void))->(int)),*((double,*(struct(long,long,*`,*`,int)),*(double),*(double),*(void))->(int)),*((*(double),*(void))->(int)),*((*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(void))->(int)),*((*(void))->(void)))
*	O
gsl_multilarge_linear_normal	*(struct(*(char),*((long)->(*(void))),*((*(void))->(int)),*((*(struct`),*(struct`),*(void))->(int)),*((double,*(struct`),*(double),*(double),*(void))->(int)),*((*(double),*(void))->(int)),*((*(struct`),*(struct`),*(struct`),*(void))->(int)),*((*(void))->(void))))
=	O
&	O
normal_type	struct(*(char),*((long)->(*(void))),*((*(void))->(int)),*((*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(void))->(int)),*((double,*(struct(long,long,*`,*`,int)),*(double),*(double),*(void))->(int)),*((*(double),*(void))->(int)),*((*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(void))->(int)),*((*(void))->(void)))
;	O
