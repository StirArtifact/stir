bfd_boolean	int
validate_build_id_style	O
(	O
const	O
char	O
*	O
style	O
)	O
{	O
if	O
(	O
(	O
streq	O
(	O
style	O
,	O
"md5"	*(char)
)	O
)	O
||	O
(	O
streq	O
(	O
style	O
,	O
"sha1"	*(char)
)	O
)	O
||	O
(	O
streq	O
(	O
style	O
,	O
"uuid"	*(char)
)	O
)	O
||	O
(	O
strneq	O
(	O
style	O
,	O
"0x"	*(char)
,	O
2	int
)	O
)	O
)	O
return	O
TRUE	int
;	O
return	O
FALSE	O
;	O
}	O
bfd_size_type	long
compute_build_id_size	O
(	O
const	O
char	O
*	O
style	O
)	O
{	O
if	O
(	O
streq	O
(	O
style	O
,	O
"md5"	*(char)
)	O
||	O
streq	O
(	O
style	O
,	O
"uuid"	*(char)
)	O
)	O
return	O
128	int
/	O
8	int
;	O
if	O
(	O
streq	O
(	O
style	O
,	O
"sha1"	*(char)
)	O
)	O
return	O
160	int
/	O
8	int
;	O
if	O
(	O
strneq	O
(	O
style	O
,	O
"0x"	*(char)
,	O
2	int
)	O
)	O
{	O
bfd_size_type	long
size	int
=	O
0	int
;	O
const	O
char	O
*	O
id	int
=	O
style	O
+	O
2	int
;	O
do	O
{	O
if	O
(	O
ISXDIGIT	O
(	O
id	int
[	O
0	int
]	O
)	O
&&	O
ISXDIGIT	O
(	O
id	int
[	O
1	int
]	O
)	O
)	O
{	O
++	O
size	int
;	O
id	int
+=	O
2	int
;	O
}	O
else	O
if	O
(	O
*	O
id	int
==	O
'-'	O
||	O
*	O
id	int
==	O
':'	O
)	O
++	O
id	int
;	O
else	O
{	O
size	int
=	O
0	int
;	O
break	O
;	O
}	O
}	O
while	O
(	O
*	O
id	int
!=	O
'\0'	O
)	O
;	O
return	O
size	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
unsigned	O
char	O
read_hex	O
(	O
const	O
char	O
xdigit	O
)	O
{	O
if	O
(	O
ISDIGIT	O
(	O
xdigit	O
)	O
)	O
return	O
xdigit	O
-	O
'0'	O
;	O
if	O
(	O
ISUPPER	O
(	O
xdigit	O
)	O
)	O
return	O
xdigit	O
-	O
'A'	O
+	O
0xa	int
;	O
if	O
(	O
ISLOWER	O
(	O
xdigit	O
)	O
)	O
return	O
xdigit	O
-	O
'a'	O
+	O
0xa	int
;	O
abort	()->(void)
(	O
)	O
;	O
return	O
0	int
;	O
}	O
bfd_boolean	int
generate_build_id	O
(	O
bfd	struct
*	O
abfd	*(struct)
,	O
const	O
char	O
*	O
style	O
,	O
checksum_fn	O
checksum_contents	O
,	O
unsigned	O
char	O
*	O
id_bits	O
,	O
int	O
size	int
ATTRIBUTE_UNUSED	O
)	O
{	O
if	O
(	O
streq	O
(	O
style	O
,	O
"md5"	*(char)
)	O
)	O
{	O
struct	O
md5_ctx	O
ctx	O
;	O
md5_init_ctx	O
(	O
&	O
ctx	O
)	O
;	O
if	O
(	O
!	O
(	O
*	O
checksum_contents	O
)	O
(	O
abfd	*(struct)
,	O
(	O
sum_fn	O
)	O
&	O
md5_process_bytes	O
,	O
&	O
ctx	O
)	O
)	O
return	O
FALSE	O
;	O
md5_finish_ctx	O
(	O
&	O
ctx	O
,	O
id_bits	O
)	O
;	O
}	O
else	O
if	O
(	O
streq	O
(	O
style	O
,	O
"sha1"	*(char)
)	O
)	O
{	O
struct	O
sha1_ctx	O
ctx	O
;	O
sha1_init_ctx	O
(	O
&	O
ctx	O
)	O
;	O
if	O
(	O
!	O
(	O
*	O
checksum_contents	O
)	O
(	O
abfd	*(struct)
,	O
(	O
sum_fn	O
)	O
&	O
sha1_process_bytes	O
,	O
&	O
ctx	O
)	O
)	O
return	O
FALSE	O
;	O
sha1_finish_ctx	O
(	O
&	O
ctx	O
,	O
id_bits	O
)	O
;	O
}	O
else	O
if	O
(	O
streq	O
(	O
style	O
,	O
"uuid"	*(char)
)	O
)	O
{	O
int	O
n	O
;	O
int	O
fd	int
=	O
open	(*(char),int)->(int)
(	O
"/dev/urandom"	*(char)
,	O
O_RDONLY	O
)	O
;	O
if	O
(	O
fd	int
<	O
0	int
)	O
return	O
FALSE	O
;	O
n	O
=	O
read	*((*(void),*(char),long)->(long))
(	O
fd	int
,	O
id_bits	O
,	O
size	int
)	O
;	O
close	*((*(void))->(int))
(	O
fd	int
)	O
;	O
if	O
(	O
n	O
<	O
size	int
)	O
return	O
FALSE	O
;	O
}	O
else	O
if	O
(	O
strneq	O
(	O
style	O
,	O
"0x"	*(char)
,	O
2	int
)	O
)	O
{	O
const	O
char	O
*	O
id	int
=	O
style	O
+	O
2	int
;	O
size_t	long
n	O
=	O
0	int
;	O
do	O
{	O
if	O
(	O
ISXDIGIT	O
(	O
id	int
[	O
0	int
]	O
)	O
&&	O
ISXDIGIT	O
(	O
id	int
[	O
1	int
]	O
)	O
)	O
{	O
id_bits	O
[	O
n	O
]	O
=	O
read_hex	O
(	O
*	O
id	int
++	O
)	O
<<	O
4	int
;	O
id_bits	O
[	O
n	O
++	O
]	O
|=	O
read_hex	O
(	O
*	O
id	int
++	O
)	O
;	O
}	O
else	O
if	O
(	O
*	O
id	int
==	O
'-'	O
||	O
*	O
id	int
==	O
':'	O
)	O
++	O
id	int
;	O
else	O
abort	()->(void)
(	O
)	O
;	O
}	O
while	O
(	O
*	O
id	int
!=	O
'\0'	O
)	O
;	O
}	O
else	O
abort	()->(void)
(	O
)	O
;	O
return	O
TRUE	int
;	O
}	O
