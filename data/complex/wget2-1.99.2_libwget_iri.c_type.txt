static	O
const	O
char	O
*	O
default_page	*(char)
=	O
"index.html"	*(char)
;	O
static	O
size_t	long
default_page_length	long
=	O
10	int
;	O
static	O
struct	O
iri_scheme	struct(short,array(char))
{	O
uint16_t	short
port	short
;	O
const	O
char	O
name	*(char)
[	O
6	int
]	O
;	O
}	O
schemes	array(struct(short,array(char)))
[	O
]	O
=	O
{	O
[	O
WGET_IRI_SCHEME_HTTP	int
]	O
=	O
{	O
80	int
,	O
"http"	*(char)
}	O
,	O
[	O
WGET_IRI_SCHEME_HTTPS	int
]	O
=	O
{	O
443	int
,	O
"https"	*(char)
}	O
,	O
}	O
;	O
const	O
char	O
*	O
wget_iri_scheme_get_name	(enum(int,int))->(*(char))
(	O
wget_iri_scheme	enum(int,int)
scheme	enum(int,int)
)	O
{	O
if	O
(	O
(	O
unsigned	O
)	O
scheme	enum(int,int)
<	O
countof	O
(	O
schemes	array(struct(short,array(char)))
)	O
)	O
return	O
schemes	array(struct(short,array(char)))
[	O
scheme	enum(int,int)
]	O
.	O
name	*(char)
;	O
return	O
NULL	O
;	O
}	O
bool	bool
wget_iri_supported	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))->(bool)
(	O
const	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
{	O
return	O
(	O
unsigned	O
)	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
scheme	enum(int,int)
<	O
countof	O
(	O
schemes	array(struct(short,array(char)))
)	O
;	O
}	O
static	O
const	O
unsigned	O
char	O
iri_ctype	array(char)
[	O
256	int
]	O
=	O
{	O
[	O
':'	O
]	O
=	O
IRI_CTYPE_GENDELIM	O
,	O
[	O
'/'	O
]	O
=	O
IRI_CTYPE_GENDELIM	O
,	O
[	O
'?'	O
]	O
=	O
IRI_CTYPE_GENDELIM	O
,	O
[	O
'#'	O
]	O
=	O
IRI_CTYPE_GENDELIM	O
,	O
[	O
'['	O
]	O
=	O
IRI_CTYPE_GENDELIM	O
,	O
[	O
']'	O
]	O
=	O
IRI_CTYPE_GENDELIM	O
,	O
[	O
'@'	O
]	O
=	O
IRI_CTYPE_GENDELIM	O
,	O
[	O
'!'	O
]	O
=	O
IRI_CTYPE_SUBDELIM	O
,	O
[	O
'$'	O
]	O
=	O
IRI_CTYPE_SUBDELIM	O
,	O
[	O
'&'	O
]	O
=	O
IRI_CTYPE_SUBDELIM	O
,	O
[	O
'\''	O
]	O
=	O
IRI_CTYPE_SUBDELIM	O
,	O
[	O
'('	O
]	O
=	O
IRI_CTYPE_SUBDELIM	O
,	O
[	O
')'	O
]	O
=	O
IRI_CTYPE_SUBDELIM	O
,	O
[	O
'*'	O
]	O
=	O
IRI_CTYPE_SUBDELIM	O
,	O
[	O
'+'	O
]	O
=	O
IRI_CTYPE_SUBDELIM	O
,	O
[	O
','	O
]	O
=	O
IRI_CTYPE_SUBDELIM	O
,	O
[	O
';'	O
]	O
=	O
IRI_CTYPE_SUBDELIM	O
,	O
[	O
'='	O
]	O
=	O
IRI_CTYPE_SUBDELIM	O
,	O
[	O
'-'	O
]	O
=	O
IRI_CTYPE_UNRESERVED	O
,	O
[	O
'.'	O
]	O
=	O
IRI_CTYPE_UNRESERVED	O
,	O
[	O
'_'	O
]	O
=	O
IRI_CTYPE_UNRESERVED	O
,	O
[	O
'~'	O
]	O
=	O
IRI_CTYPE_UNRESERVED	O
}	O
;	O
bool	bool
wget_iri_isgendelim	(char)->(bool)
(	O
char	O
c	int
)	O
{	O
return	O
_iri_isgendelim	O
(	O
c	int
)	O
;	O
}	O
bool	bool
wget_iri_issubdelim	(char)->(bool)
(	O
char	O
c	int
)	O
{	O
return	O
_iri_issubdelim	O
(	O
c	int
)	O
;	O
}	O
bool	bool
wget_iri_isreserved	(char)->(bool)
(	O
char	O
c	int
)	O
{	O
return	O
wget_iri_isgendelim	(char)->(bool)
(	O
c	int
)	O
||	O
wget_iri_issubdelim	(char)->(bool)
(	O
c	int
)	O
;	O
}	O
bool	bool
wget_iri_isunreserved	(char)->(bool)
(	O
char	O
c	int
)	O
{	O
return	O
c	int
>	O
32	int
&&	O
c	int
<	O
127	int
&&	O
(	O
c_isalnum	(int)->(bool)
(	O
c	int
)	O
||	O
_iri_isunreserved	O
(	O
c	int
)	O
)	O
;	O
}	O
bool	bool
wget_iri_isunreserved_path	(char)->(bool)
(	O
char	O
c	int
)	O
{	O
return	O
c	int
>	O
32	int
&&	O
c	int
<	O
127	int
&&	O
(	O
c_isalnum	(int)->(bool)
(	O
c	int
)	O
||	O
_iri_isunreserved	O
(	O
c	int
)	O
||	O
c	int
==	O
'/'	O
)	O
;	O
}	O
static	O
unsigned	O
char	O
WGET_GCC_CONST	O
_unhex	(char)->(char)
(	O
unsigned	O
char	O
c	int
)	O
{	O
return	O
c	int
<=	O
'9'	O
?	O
c	int
-	O
'0'	O
:	O
(	O
c	int
<=	O
'F'	O
?	O
c	int
-	O
'A'	O
+	O
10	int
:	O
c	int
-	O
'a'	O
+	O
10	int
)	O
;	O
}	O
static	O
char	O
*	O
_iri_unescape_inline	(*(char),int)->(*(char))
(	O
char	O
*	O
src	*(char)
,	O
int	O
ctype	int
)	O
{	O
char	O
*	O
ret	*(char)
=	O
NULL	O
;	O
unsigned	O
char	O
*	O
s	*(char)
=	O
(	O
unsigned	O
char	O
*	O
)	O
src	*(char)
;	O
unsigned	O
char	O
*	O
d	*(char)
=	O
s	*(char)
;	O
while	O
(	O
*	O
s	*(char)
)	O
{	O
if	O
(	O
*	O
s	*(char)
==	O
'%'	O
)	O
{	O
if	O
(	O
c_isxdigit	(int)->(bool)
(	O
s	*(char)
[	O
1	int
]	O
)	O
&&	O
c_isxdigit	(int)->(bool)
(	O
s	*(char)
[	O
2	int
]	O
)	O
)	O
{	O
unsigned	O
char	O
c	int
=	O
(	O
unsigned	O
char	O
)	O
(	O
_unhex	(char)->(char)
(	O
s	*(char)
[	O
1	int
]	O
)	O
<<	O
4	int
)	O
|	O
_unhex	(char)->(char)
(	O
s	*(char)
[	O
2	int
]	O
)	O
;	O
if	O
(	O
!	O
ctype	int
||	O
(	O
!	O
(	O
iri_ctype	array(char)
[	O
(	O
unsigned	O
char	O
)	O
(	O
c	int
)	O
]	O
&	O
ctype	int
)	O
&&	O
c	int
!=	O
'%'	O
)	O
)	O
{	O
*	O
d	*(char)
++	O
=	O
c	int
;	O
s	*(char)
+=	O
3	int
;	O
ret	*(char)
=	O
src	*(char)
;	O
continue	O
;	O
}	O
}	O
}	O
else	O
if	O
(	O
*	O
s	*(char)
==	O
'&'	O
)	O
{	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
(	O
char	O
*	O
)	O
s	*(char)
+	O
1	int
,	O
"amp;"	*(char)
,	O
4	int
)	O
)	O
{	O
*	O
d	*(char)
++	O
=	O
'&'	O
;	O
s	*(char)
+=	O
5	int
;	O
ret	*(char)
=	O
src	*(char)
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
(	O
char	O
*	O
)	O
s	*(char)
+	O
1	int
,	O
"gt;"	*(char)
,	O
3	int
)	O
)	O
{	O
*	O
d	*(char)
++	O
=	O
'>'	O
;	O
s	*(char)
+=	O
4	int
;	O
ret	*(char)
=	O
src	*(char)
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
(	O
char	O
*	O
)	O
s	*(char)
+	O
1	int
,	O
"lt;"	*(char)
,	O
3	int
)	O
)	O
{	O
*	O
d	*(char)
++	O
=	O
'<'	O
;	O
s	*(char)
+=	O
4	int
;	O
ret	*(char)
=	O
src	*(char)
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
(	O
char	O
*	O
)	O
s	*(char)
+	O
1	int
,	O
"quot;"	*(char)
,	O
5	int
)	O
)	O
{	O
*	O
d	*(char)
++	O
=	O
'\"'	O
;	O
s	*(char)
+=	O
6	int
;	O
ret	*(char)
=	O
src	*(char)
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
(	O
char	O
*	O
)	O
s	*(char)
+	O
1	int
,	O
"apos;"	*(char)
,	O
5	int
)	O
)	O
{	O
*	O
d	*(char)
++	O
=	O
'\''	O
;	O
s	*(char)
+=	O
6	int
;	O
ret	*(char)
=	O
src	*(char)
;	O
continue	O
;	O
}	O
}	O
else	O
if	O
(	O
*	O
s	*(char)
==	O
'#'	O
)	O
{	O
uint32_t	int
value	*(void)
=	O
0	int
;	O
if	O
(	O
s	*(char)
[	O
1	int
]	O
==	O
'x'	O
)	O
{	O
unsigned	O
char	O
*	O
p	*(char)
=	O
s	*(char)
+	O
2	int
;	O
while	O
(	O
c_isxdigit	(int)->(bool)
(	O
*	O
p	*(char)
)	O
)	O
{	O
value	*(void)
=	O
(	O
value	*(void)
<<	O
4	int
)	O
|	O
_unhex	(char)->(char)
(	O
*	O
p	*(char)
)	O
;	O
p	*(char)
++	O
;	O
}	O
if	O
(	O
*	O
p	*(char)
==	O
';'	O
)	O
{	O
if	O
(	O
value	*(void)
>	O
0	int
&&	O
value	*(void)
<	O
128	int
)	O
{	O
*	O
d	*(char)
++	O
=	O
(	O
unsigned	O
char	O
)	O
value	*(void)
;	O
s	*(char)
=	O
p	*(char)
+	O
1	int
;	O
continue	O
;	O
}	O
}	O
}	O
else	O
{	O
unsigned	O
char	O
*	O
p	*(char)
=	O
s	*(char)
+	O
1	int
;	O
while	O
(	O
c_isdigit	(int)->(bool)
(	O
*	O
p	*(char)
)	O
&&	O
value	*(void)
<=	O
0x10FFFF	int
)	O
{	O
value	*(void)
=	O
value	*(void)
*	O
10	int
+	O
(	O
*	O
p	*(char)
-	O
'0'	O
)	O
;	O
p	*(char)
++	O
;	O
}	O
if	O
(	O
*	O
p	*(char)
==	O
';'	O
)	O
{	O
if	O
(	O
value	*(void)
>	O
0	int
&&	O
value	*(void)
<	O
128	int
)	O
{	O
*	O
d	*(char)
++	O
=	O
(	O
unsigned	O
char	O
)	O
value	*(void)
;	O
s	*(char)
=	O
p	*(char)
+	O
1	int
;	O
continue	O
;	O
}	O
}	O
}	O
}	O
*	O
d	*(char)
++	O
=	O
*	O
s	*(char)
++	O
;	O
}	O
*	O
d	*(char)
=	O
0	int
;	O
return	O
ret	*(char)
;	O
}	O
char	O
*	O
wget_iri_unescape_inline	(*(char))->(*(char))
(	O
char	O
*	O
src	*(char)
)	O
{	O
return	O
_iri_unescape_inline	(*(char),int)->(*(char))
(	O
src	*(char)
,	O
0	int
)	O
;	O
}	O
char	O
*	O
wget_iri_unescape_url_inline	(*(char))->(*(char))
(	O
char	O
*	O
src	*(char)
)	O
{	O
return	O
_iri_unescape_inline	(*(char),int)->(*(char))
(	O
src	*(char)
,	O
IRI_CTYPE_GENDELIM	O
)	O
;	O
}	O
void	O
wget_iri_free_content	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))->(void)
(	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
{	O
if	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
{	O
if	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
uri_allocated	bool
)	O
xfree	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
uri	*(char)
)	O
;	O
if	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
host_allocated	bool
)	O
xfree	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
host	*(char)
)	O
;	O
if	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
path_allocated	bool
)	O
xfree	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
path	*(char)
)	O
;	O
if	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
query_allocated	bool
)	O
xfree	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
query	*(char)
)	O
;	O
if	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
fragment_allocated	bool
)	O
xfree	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
fragment	*(char)
)	O
;	O
xfree	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
connection_part	*(char)
)	O
;	O
}	O
}	O
void	O
wget_iri_free	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))))->(void)
(	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
*	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
{	O
if	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
&&	O
*	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
{	O
wget_iri_free_content	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))->(void)
(	O
*	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
;	O
xfree	O
(	O
*	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
;	O
}	O
}	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
wget_iri_parse	(*(char),*(char))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
(	O
const	O
char	O
*	O
url	*(char)
,	O
const	O
char	O
*	O
encoding	*(char)
)	O
{	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
;	O
char	O
*	O
p	*(char)
,	O
*	O
s	*(char)
,	O
*	O
authority	*(char)
,	O
c	int
;	O
size_t	long
slen	long
,	O
extra	long
;	O
int	O
have_scheme	int
;	O
if	O
(	O
!	O
url	*(char)
)	O
return	O
NULL	O
;	O
while	O
(	O
c_isspace	(int)->(bool)
(	O
*	O
url	*(char)
)	O
)	O
url	*(char)
++	O
;	O
if	O
(	O
!	O
*	O
url	*(char)
)	O
return	O
NULL	O
;	O
if	O
(	O
c_isalpha	(int)->(bool)
(	O
*	O
url	*(char)
)	O
)	O
{	O
const	O
char	O
*	O
x	*(char)
;	O
have_scheme	int
=	O
1	int
;	O
for	O
(	O
x	*(char)
=	O
url	*(char)
;	O
*	O
x	*(char)
&&	O
_iri_isscheme	O
(	O
*	O
x	*(char)
)	O
;	O
x	*(char)
++	O
)	O
;	O
if	O
(	O
*	O
x	*(char)
!=	O
':'	O
||	O
c_isdigit	(int)->(bool)
(	O
x	*(char)
[	O
1	int
]	O
)	O
)	O
have_scheme	int
=	O
0	int
;	O
}	O
else	O
have_scheme	int
=	O
0	int
;	O
slen	long
=	O
strlen	(*(char))->(long)
(	O
url	*(char)
)	O
;	O
extra	long
=	O
have_scheme	int
?	O
0	int
:	O
sizeof	O
(	O
"http://"	*(char)
)	O
-	O
1	int
;	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
=	O
wget_malloc	(long)->(*(void))
(	O
sizeof	O
(	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
)	O
+	O
(	O
slen	long
+	O
extra	long
+	O
1	int
)	O
*	O
2	int
)	O
;	O
if	O
(	O
!	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
return	O
NULL	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
,	O
0	int
,	O
sizeof	O
(	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
)	O
)	O
;	O
if	O
(	O
have_scheme	int
)	O
{	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
msize	long
=	O
slen	long
+	O
1	int
;	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
uri	*(char)
=	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
(	O
(	O
char	O
*	O
)	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
+	O
sizeof	O
(	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
)	O
,	O
url	*(char)
,	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
msize	long
)	O
;	O
p	*(char)
=	O
s	*(char)
=	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
(	O
char	O
*	O
)	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
uri	*(char)
+	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
msize	long
,	O
url	*(char)
,	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
msize	long
)	O
;	O
s	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
s	*(char)
,	O
':'	O
)	O
;	O
*	O
s	*(char)
++	O
=	O
0	int
;	O
wget_iri_unescape_inline	(*(char))->(*(char))
(	O
p	*(char)
)	O
;	O
wget_strtolower	(*(char))->(*(char))
(	O
p	*(char)
)	O
;	O
bool	bool
found	bool
=	O
false	int
;	O
for	O
(	O
unsigned	O
it	int
=	O
0	int
;	O
it	int
<	O
countof	O
(	O
schemes	array(struct(short,array(char)))
)	O
;	O
it	int
++	O
)	O
{	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
schemes	array(struct(short,array(char)))
[	O
it	int
]	O
.	O
name	*(char)
,	O
p	*(char)
)	O
)	O
{	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
scheme	enum(int,int)
=	O
it	int
;	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
port	short
=	O
schemes	array(struct(short,array(char)))
[	O
it	int
]	O
.	O
port	short
;	O
found	bool
=	O
true	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
!	O
found	bool
)	O
{	O
debug_printf	O
(	O
"Unsupported scheme in '%s'\n"	*(char)
,	O
url	*(char)
)	O
;	O
wget_iri_free	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))))->(void)
(	O
&	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
else	O
{	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
uri	*(char)
=	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
(	O
(	O
char	O
*	O
)	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
+	O
sizeof	O
(	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
)	O
,	O
"http://"	*(char)
,	O
extra	long
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
(	O
(	O
char	O
*	O
)	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
+	O
sizeof	O
(	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
)	O
+	O
extra	long
,	O
url	*(char)
,	O
slen	long
+	O
1	int
)	O
;	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
msize	long
=	O
slen	long
+	O
1	int
+	O
extra	long
;	O
s	*(char)
=	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
(	O
char	O
*	O
)	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
uri	*(char)
+	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
msize	long
,	O
"http://"	*(char)
,	O
extra	long
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
(	O
char	O
*	O
)	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
uri	*(char)
+	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
msize	long
+	O
extra	long
,	O
url	*(char)
,	O
slen	long
+	O
1	int
)	O
;	O
s	*(char)
[	O
extra	long
-	O
3	int
]	O
=	O
0	int
;	O
s	*(char)
+=	O
extra	long
;	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
scheme	enum(int,int)
=	O
WGET_IRI_SCHEME_HTTP	int
;	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
port	short
=	O
schemes	array(struct(short,array(char)))
[	O
WGET_IRI_SCHEME_HTTP	int
]	O
.	O
port	short
;	O
}	O
while	O
(	O
*	O
s	*(char)
==	O
'/'	O
)	O
s	*(char)
++	O
;	O
authority	*(char)
=	O
s	*(char)
;	O
while	O
(	O
*	O
s	*(char)
&&	O
*	O
s	*(char)
!=	O
'/'	O
&&	O
*	O
s	*(char)
!=	O
'?'	O
&&	O
*	O
s	*(char)
!=	O
'#'	O
)	O
s	*(char)
++	O
;	O
c	int
=	O
*	O
s	*(char)
;	O
if	O
(	O
c	int
)	O
*	O
s	*(char)
++	O
=	O
0	int
;	O
wget_iri_unescape_inline	(*(char))->(*(char))
(	O
authority	*(char)
)	O
;	O
if	O
(	O
c	int
==	O
'/'	O
)	O
{	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
path	*(char)
=	O
s	*(char)
;	O
while	O
(	O
*	O
s	*(char)
&&	O
*	O
s	*(char)
!=	O
'?'	O
&&	O
*	O
s	*(char)
!=	O
'#'	O
)	O
s	*(char)
++	O
;	O
c	int
=	O
*	O
s	*(char)
;	O
if	O
(	O
c	int
)	O
*	O
s	*(char)
++	O
=	O
0	int
;	O
wget_iri_unescape_inline	(*(char))->(*(char))
(	O
(	O
char	O
*	O
)	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
path	*(char)
)	O
;	O
}	O
if	O
(	O
c	int
==	O
'?'	O
)	O
{	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
query	*(char)
=	O
s	*(char)
;	O
while	O
(	O
*	O
s	*(char)
&&	O
*	O
s	*(char)
!=	O
'#'	O
)	O
{	O
if	O
(	O
*	O
s	*(char)
==	O
'+'	O
)	O
*	O
s	*(char)
=	O
' '	O
;	O
s	*(char)
++	O
;	O
}	O
c	int
=	O
*	O
s	*(char)
;	O
if	O
(	O
c	int
)	O
*	O
s	*(char)
++	O
=	O
0	int
;	O
}	O
if	O
(	O
c	int
==	O
'#'	O
)	O
{	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
fragment	*(char)
=	O
s	*(char)
;	O
s	*(char)
+=	O
strlen	(*(char))->(long)
(	O
s	*(char)
)	O
;	O
wget_iri_unescape_inline	(*(char))->(*(char))
(	O
(	O
char	O
*	O
)	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
fragment	*(char)
)	O
;	O
}	O
if	O
(	O
*	O
s	*(char)
)	O
{	O
debug_printf	O
(	O
"unparsed rest '%s'\n"	*(char)
,	O
s	*(char)
)	O
;	O
}	O
if	O
(	O
*	O
authority	*(char)
)	O
{	O
s	*(char)
=	O
authority	*(char)
;	O
p	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
authority	*(char)
,	O
'@'	O
)	O
;	O
if	O
(	O
p	*(char)
)	O
{	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
userinfo	*(char)
=	O
s	*(char)
;	O
*	O
p	*(char)
=	O
0	int
;	O
if	O
(	O
(	O
s	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
s	*(char)
,	O
':'	O
)	O
)	O
)	O
{	O
*	O
s	*(char)
=	O
0	int
;	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
password	*(char)
=	O
s	*(char)
+	O
1	int
;	O
}	O
s	*(char)
=	O
p	*(char)
+	O
1	int
;	O
}	O
if	O
(	O
*	O
s	*(char)
==	O
'['	O
)	O
{	O
p	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
s	*(char)
,	O
']'	O
)	O
;	O
if	O
(	O
p	*(char)
)	O
{	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
host	*(char)
=	O
s	*(char)
+	O
1	int
;	O
*	O
p	*(char)
=	O
0	int
;	O
s	*(char)
=	O
p	*(char)
+	O
1	int
;	O
}	O
else	O
{	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
host	*(char)
=	O
s	*(char)
+	O
1	int
;	O
s	*(char)
+=	O
strlen	(*(char))->(long)
(	O
s	*(char)
)	O
;	O
}	O
}	O
else	O
{	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
host	*(char)
=	O
s	*(char)
;	O
while	O
(	O
*	O
s	*(char)
&&	O
*	O
s	*(char)
!=	O
':'	O
)	O
s	*(char)
++	O
;	O
}	O
if	O
(	O
*	O
s	*(char)
==	O
':'	O
)	O
{	O
if	O
(	O
c_isdigit	(int)->(bool)
(	O
s	*(char)
[	O
1	int
]	O
)	O
)	O
{	O
int	O
port	short
=	O
atoi	(*(char))->(int)
(	O
s	*(char)
+	O
1	int
)	O
;	O
if	O
(	O
port	short
>	O
0	int
&&	O
port	short
<	O
65536	int
)	O
{	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
port	short
=	O
(	O
uint16_t	short
)	O
port	short
;	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
port_given	bool
=	O
true	int
;	O
}	O
}	O
}	O
*	O
s	*(char)
=	O
0	int
;	O
}	O
if	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
host	*(char)
)	O
{	O
wget_strtolower	(*(char))->(*(char))
(	O
(	O
char	O
*	O
)	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
host	*(char)
)	O
;	O
if	O
(	O
wget_str_needs_encoding	(*(char))->(int)
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
host	*(char)
)	O
)	O
{	O
if	O
(	O
(	O
s	*(char)
=	O
wget_str_to_utf8	(*(char),*(char))->(*(char))
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
host	*(char)
,	O
encoding	*(char)
)	O
)	O
)	O
{	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
host	*(char)
=	O
s	*(char)
;	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
host_allocated	bool
=	O
true	int
;	O
}	O
}	O
if	O
(	O
(	O
p	*(char)
=	O
(	O
char	O
*	O
)	O
wget_str_to_ascii	(*(char))->(*(char))
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
host	*(char)
)	O
)	O
!=	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
host	*(char)
)	O
{	O
if	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
host_allocated	bool
)	O
xfree	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
host	*(char)
)	O
;	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
host	*(char)
=	O
p	*(char)
;	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
host_allocated	bool
=	O
true	int
;	O
}	O
if	O
(	O
wget_ip_is_family	(*(char),int)->(bool)
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
host	*(char)
,	O
WGET_NET_FAMILY_IPV4	int
)	O
||	O
wget_ip_is_family	(*(char),int)->(bool)
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
host	*(char)
,	O
WGET_NET_FAMILY_IPV6	int
)	O
)	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
is_ip_address	bool
=	O
true	int
;	O
}	O
if	O
(	O
!	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
host	*(char)
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Missing host/domain in URI '%s'\n"	*(char)
)	O
,	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
uri	*(char)
)	O
;	O
wget_iri_free	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))))->(void)
(	O
&	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
path	*(char)
&&	O
wget_str_needs_encoding	(*(char))->(int)
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
path	*(char)
)	O
)	O
{	O
if	O
(	O
(	O
s	*(char)
=	O
wget_str_to_utf8	(*(char),*(char))->(*(char))
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
path	*(char)
,	O
encoding	*(char)
)	O
)	O
)	O
{	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
path	*(char)
=	O
s	*(char)
;	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
path_allocated	bool
=	O
true	int
;	O
}	O
}	O
if	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
query	*(char)
&&	O
wget_str_needs_encoding	(*(char))->(int)
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
query	*(char)
)	O
)	O
{	O
if	O
(	O
(	O
s	*(char)
=	O
wget_str_to_utf8	(*(char),*(char))->(*(char))
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
query	*(char)
,	O
encoding	*(char)
)	O
)	O
)	O
{	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
query	*(char)
=	O
s	*(char)
;	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
query_allocated	bool
=	O
true	int
;	O
}	O
}	O
if	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
fragment	*(char)
&&	O
wget_str_needs_encoding	(*(char))->(int)
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
fragment	*(char)
)	O
)	O
{	O
if	O
(	O
(	O
s	*(char)
=	O
wget_str_to_utf8	(*(char),*(char))->(*(char))
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
fragment	*(char)
,	O
encoding	*(char)
)	O
)	O
)	O
{	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
fragment	*(char)
=	O
s	*(char)
;	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
fragment_allocated	bool
=	O
true	int
;	O
}	O
}	O
return	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
;	O
}	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
wget_iri_clone	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
(	O
const	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
{	O
if	O
(	O
!	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
||	O
!	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
uri	*(char)
)	O
return	O
NULL	O
;	O
size_t	long
slen	long
=	O
strlen	(*(char))->(long)
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
uri	*(char)
)	O
;	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
clone	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
=	O
wget_malloc	(long)->(*(void))
(	O
sizeof	O
(	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
)	O
+	O
(	O
slen	long
+	O
1	int
)	O
+	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
msize	long
)	O
;	O
if	O
(	O
!	O
clone	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
)	O
return	O
NULL	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
clone	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
,	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
,	O
sizeof	O
(	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
)	O
)	O
;	O
clone	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
->	O
uri	*(char)
=	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
(	O
(	O
char	O
*	O
)	O
clone	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
)	O
+	O
sizeof	O
(	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
)	O
,	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
uri	*(char)
,	O
slen	long
+	O
1	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
(	O
char	O
*	O
)	O
clone	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
->	O
uri	*(char)
+	O
slen	long
+	O
1	int
,	O
(	O
char	O
*	O
)	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
uri	*(char)
+	O
slen	long
+	O
1	int
,	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
msize	long
)	O
;	O
clone	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
->	O
uri_allocated	bool
=	O
0	int
;	O
clone	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
->	O
connection_part	*(char)
=	O
wget_strdup	(*(char))->(*(char))
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
connection_part	*(char)
)	O
;	O
if	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
host_allocated	bool
)	O
clone	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
->	O
host	*(char)
=	O
wget_strdup	(*(char))->(*(char))
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
host	*(char)
)	O
;	O
else	O
clone	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
->	O
host	*(char)
=	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
host	*(char)
?	O
(	O
char	O
*	O
)	O
clone	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
+	O
(	O
size_t	long
)	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
host	*(char)
-	O
(	O
const	O
char	O
*	O
)	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
:	O
NULL	O
;	O
clone	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
->	O
display	*(char)
=	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
display	*(char)
?	O
(	O
char	O
*	O
)	O
clone	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
+	O
(	O
size_t	long
)	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
display	*(char)
-	O
(	O
const	O
char	O
*	O
)	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
:	O
NULL	O
;	O
clone	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
->	O
userinfo	*(char)
=	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
userinfo	*(char)
?	O
(	O
char	O
*	O
)	O
clone	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
+	O
(	O
size_t	long
)	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
userinfo	*(char)
-	O
(	O
const	O
char	O
*	O
)	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
:	O
NULL	O
;	O
clone	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
->	O
password	*(char)
=	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
password	*(char)
?	O
(	O
char	O
*	O
)	O
clone	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
+	O
(	O
size_t	long
)	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
password	*(char)
-	O
(	O
const	O
char	O
*	O
)	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
:	O
NULL	O
;	O
if	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
path_allocated	bool
)	O
clone	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
->	O
path	*(char)
=	O
wget_strdup	(*(char))->(*(char))
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
path	*(char)
)	O
;	O
else	O
clone	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
->	O
path	*(char)
=	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
path	*(char)
?	O
(	O
char	O
*	O
)	O
clone	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
+	O
(	O
size_t	long
)	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
path	*(char)
-	O
(	O
const	O
char	O
*	O
)	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
:	O
NULL	O
;	O
if	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
query_allocated	bool
)	O
clone	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
->	O
query	*(char)
=	O
wget_strdup	(*(char))->(*(char))
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
query	*(char)
)	O
;	O
else	O
clone	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
->	O
query	*(char)
=	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
query	*(char)
?	O
(	O
char	O
*	O
)	O
clone	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
+	O
(	O
size_t	long
)	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
query	*(char)
-	O
(	O
const	O
char	O
*	O
)	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
:	O
NULL	O
;	O
if	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
fragment_allocated	bool
)	O
clone	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
->	O
fragment	*(char)
=	O
wget_strdup	(*(char))->(*(char))
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
fragment	*(char)
)	O
;	O
else	O
clone	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
->	O
fragment	*(char)
=	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
fragment	*(char)
?	O
(	O
char	O
*	O
)	O
clone	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
+	O
(	O
size_t	long
)	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
fragment	*(char)
-	O
(	O
const	O
char	O
*	O
)	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
:	O
NULL	O
;	O
return	O
clone	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
;	O
}	O
const	O
char	O
*	O
wget_iri_get_connection_part	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))->(*(char))
(	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
{	O
if	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
{	O
if	O
(	O
!	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
connection_part	*(char)
)	O
{	O
if	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
port_given	bool
)	O
{	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
connection_part	*(char)
=	O
wget_aprintf	(*(char))->(*(char))
(	O
"%s://%s:%hu"	*(char)
,	O
schemes	array(struct(short,array(char)))
[	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
scheme	enum(int,int)
]	O
.	O
name	*(char)
,	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
host	*(char)
,	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
port	short
)	O
;	O
}	O
else	O
{	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
connection_part	*(char)
=	O
wget_aprintf	(*(char))->(*(char))
(	O
"%s://%s"	*(char)
,	O
schemes	array(struct(short,array(char)))
[	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
scheme	enum(int,int)
]	O
.	O
name	*(char)
,	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
host	*(char)
)	O
;	O
}	O
}	O
return	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
connection_part	*(char)
;	O
}	O
return	O
NULL	O
;	O
}	O
static	O
size_t	long
WGET_GCC_NONNULL_ALL	O
_normalize_path	(*(char))->(long)
(	O
char	O
*	O
path	*(char)
)	O
{	O
char	O
*	O
p1	*(char)
=	O
path	*(char)
,	O
*	O
p2	*(char)
=	O
path	*(char)
;	O
debug_printf	O
(	O
"path %s ->\n"	*(char)
,	O
path	*(char)
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
*	O
p2	*(char)
==	O
'/'	O
)	O
p2	*(char)
++	O
;	O
else	O
if	O
(	O
*	O
p2	*(char)
==	O
'.'	O
)	O
{	O
if	O
(	O
p2	*(char)
[	O
1	int
]	O
==	O
'/'	O
)	O
p2	*(char)
+=	O
2	int
;	O
else	O
if	O
(	O
p2	*(char)
[	O
1	int
]	O
==	O
'.'	O
)	O
{	O
if	O
(	O
p2	*(char)
[	O
2	int
]	O
==	O
'/'	O
)	O
p2	*(char)
+=	O
3	int
;	O
else	O
if	O
(	O
!	O
p2	*(char)
[	O
2	int
]	O
)	O
p2	*(char)
+=	O
2	int
;	O
else	O
break	O
;	O
}	O
else	O
if	O
(	O
!	O
p2	*(char)
[	O
1	int
]	O
)	O
p2	*(char)
++	O
;	O
else	O
break	O
;	O
}	O
else	O
break	O
;	O
}	O
while	O
(	O
*	O
p2	*(char)
&&	O
*	O
p2	*(char)
!=	O
'?'	O
&&	O
*	O
p2	*(char)
!=	O
'#'	O
)	O
{	O
if	O
(	O
*	O
p2	*(char)
==	O
'/'	O
)	O
{	O
if	O
(	O
p2	*(char)
[	O
1	int
]	O
==	O
'.'	O
)	O
{	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
p2	*(char)
,	O
"/../"	*(char)
,	O
4	int
)	O
)	O
{	O
p2	*(char)
+=	O
3	int
;	O
while	O
(	O
p1	*(char)
>	O
path	*(char)
&&	O
*	O
--	O
p1	*(char)
!=	O
'/'	O
)	O
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
p2	*(char)
,	O
"/.."	*(char)
)	O
)	O
{	O
p2	*(char)
+=	O
3	int
;	O
while	O
(	O
p1	*(char)
>	O
path	*(char)
&&	O
*	O
--	O
p1	*(char)
!=	O
'/'	O
)	O
;	O
if	O
(	O
p1	*(char)
>	O
path	*(char)
)	O
*	O
p1	*(char)
++	O
=	O
'/'	O
;	O
}	O
else	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
p2	*(char)
,	O
"/./"	*(char)
,	O
3	int
)	O
)	O
{	O
p2	*(char)
+=	O
2	int
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
p2	*(char)
,	O
"/."	*(char)
)	O
)	O
{	O
p2	*(char)
+=	O
2	int
;	O
if	O
(	O
p1	*(char)
>	O
path	*(char)
)	O
*	O
p1	*(char)
++	O
=	O
'/'	O
;	O
}	O
else	O
*	O
p1	*(char)
++	O
=	O
*	O
p2	*(char)
++	O
;	O
}	O
else	O
if	O
(	O
p1	*(char)
==	O
path	*(char)
)	O
p2	*(char)
++	O
;	O
else	O
if	O
(	O
p2	*(char)
[	O
1	int
]	O
==	O
'/'	O
)	O
p2	*(char)
++	O
;	O
else	O
*	O
p1	*(char)
++	O
=	O
*	O
p2	*(char)
++	O
;	O
}	O
else	O
*	O
p1	*(char)
++	O
=	O
*	O
p2	*(char)
++	O
;	O
}	O
if	O
(	O
p1	*(char)
!=	O
p2	*(char)
)	O
{	O
while	O
(	O
*	O
p2	*(char)
)	O
*	O
p1	*(char)
++	O
=	O
*	O
p2	*(char)
++	O
;	O
*	O
p1	*(char)
=	O
0	int
;	O
}	O
else	O
{	O
p1	*(char)
+=	O
strlen	(*(char))->(long)
(	O
p1	*(char)
)	O
;	O
}	O
debug_printf	O
(	O
"     %s\n"	*(char)
,	O
path	*(char)
)	O
;	O
return	O
p1	*(char)
-	O
path	*(char)
;	O
}	O
const	O
char	O
*	O
wget_iri_relative_to_abs	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(char),long,*(struct(*(char),long,long,bool,bool,bool)))->(*(char))
(	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
,	O
const	O
char	O
*	O
val	*(char)
,	O
size_t	long
len	long
,	O
wget_buffer	struct(*(char),long,long,bool,bool,bool)
*	O
buf	*(char)
)	O
{	O
debug_printf	O
(	O
"*url = %.*s\n"	*(char)
,	O
(	O
int	O
)	O
len	long
,	O
val	*(char)
)	O
;	O
if	O
(	O
len	long
==	O
(	O
size_t	long
)	O
-	O
1	int
)	O
len	long
=	O
strlen	(*(char))->(long)
(	O
val	*(char)
)	O
;	O
if	O
(	O
*	O
val	*(char)
==	O
'/'	O
)	O
{	O
if	O
(	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
)	O
{	O
char	O
path	*(char)
[	O
len	long
+	O
1	int
]	O
;	O
wget_strscpy	(*(char),*(char),long)->(long)
(	O
path	*(char)
,	O
val	*(char)
,	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
len	long
>=	O
2	int
&&	O
val	*(char)
[	O
1	int
]	O
==	O
'/'	O
)	O
{	O
char	O
*	O
p	*(char)
;	O
if	O
(	O
(	O
p	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
path	*(char)
+	O
2	int
,	O
'/'	O
)	O
)	O
)	O
_normalize_path	(*(char))->(long)
(	O
p	*(char)
+	O
1	int
)	O
;	O
wget_buffer_strcpy	(*(struct(*(char),long,long,bool,bool,bool)),*(char))->(long)
(	O
buf	*(char)
,	O
schemes	array(struct(short,array(char)))
[	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
->	O
scheme	enum(int,int)
]	O
.	O
name	*(char)
)	O
;	O
wget_buffer_strcat	(*(struct(*(char),long,long,bool,bool,bool)),*(char))->(long)
(	O
buf	*(char)
,	O
":"	*(char)
)	O
;	O
wget_buffer_strcat	(*(struct(*(char),long,long,bool,bool,bool)),*(char))->(long)
(	O
buf	*(char)
,	O
path	*(char)
)	O
;	O
debug_printf	O
(	O
"*1 %s\n"	*(char)
,	O
buf	*(char)
->	O
data	*(void)
)	O
;	O
}	O
else	O
{	O
_normalize_path	(*(char))->(long)
(	O
path	*(char)
)	O
;	O
wget_buffer_strcpy	(*(struct(*(char),long,long,bool,bool,bool)),*(char))->(long)
(	O
buf	*(char)
,	O
wget_iri_get_connection_part	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))->(*(char))
(	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
)	O
)	O
;	O
wget_buffer_strcat	(*(struct(*(char),long,long,bool,bool,bool)),*(char))->(long)
(	O
buf	*(char)
,	O
"/"	*(char)
)	O
;	O
wget_buffer_strcat	(*(struct(*(char),long,long,bool,bool,bool)),*(char))->(long)
(	O
buf	*(char)
,	O
path	*(char)
)	O
;	O
debug_printf	O
(	O
"*2 %s\n"	*(char)
,	O
buf	*(char)
->	O
data	*(void)
)	O
;	O
}	O
}	O
else	O
{	O
return	O
NULL	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
memchr	(*(void),int,long)->(*(void))
(	O
val	*(char)
,	O
':'	O
,	O
len	long
)	O
)	O
{	O
if	O
(	O
buf	*(char)
)	O
{	O
wget_buffer_memcpy	(*(struct(*(char),long,long,bool,bool,bool)),*(void),long)->(long)
(	O
buf	*(char)
,	O
val	*(char)
,	O
len	long
)	O
;	O
debug_printf	O
(	O
"*3 %s\n"	*(char)
,	O
buf	*(char)
->	O
data	*(void)
)	O
;	O
}	O
else	O
{	O
debug_printf	O
(	O
"*3 %s\n"	*(char)
,	O
val	*(char)
)	O
;	O
return	O
val	*(char)
;	O
}	O
}	O
else	O
if	O
(	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
)	O
{	O
const	O
char	O
*	O
lastsep	*(char)
=	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
->	O
path	*(char)
?	O
strrchr	(*(char),int)->(*(char))
(	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
->	O
path	*(char)
,	O
'/'	O
)	O
:	O
NULL	O
;	O
wget_buffer_strcpy	(*(struct(*(char),long,long,bool,bool,bool)),*(char))->(long)
(	O
buf	*(char)
,	O
wget_iri_get_connection_part	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))->(*(char))
(	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
)	O
)	O
;	O
wget_buffer_strcat	(*(struct(*(char),long,long,bool,bool,bool)),*(char))->(long)
(	O
buf	*(char)
,	O
"/"	*(char)
)	O
;	O
size_t	long
tmp_len	long
=	O
buf	*(char)
->	O
length	long
;	O
if	O
(	O
lastsep	*(char)
)	O
wget_buffer_memcat	(*(struct(*(char),long,long,bool,bool,bool)),*(void),long)->(long)
(	O
buf	*(char)
,	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
->	O
path	*(char)
,	O
lastsep	*(char)
-	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
->	O
path	*(char)
+	O
1	int
)	O
;	O
if	O
(	O
len	long
)	O
wget_buffer_memcat	(*(struct(*(char),long,long,bool,bool,bool)),*(void),long)->(long)
(	O
buf	*(char)
,	O
val	*(char)
,	O
len	long
)	O
;	O
buf	*(char)
->	O
length	long
=	O
_normalize_path	(*(char))->(long)
(	O
buf	*(char)
->	O
data	*(void)
+	O
tmp_len	long
)	O
+	O
tmp_len	long
;	O
debug_printf	O
(	O
"*4 %s %zu\n"	*(char)
,	O
buf	*(char)
->	O
data	*(void)
,	O
buf	*(char)
->	O
length	long
)	O
;	O
}	O
else	O
if	O
(	O
val	*(char)
[	O
len	long
]	O
==	O
0	int
)	O
{	O
return	O
val	*(char)
;	O
}	O
else	O
{	O
return	O
NULL	O
;	O
}	O
}	O
return	O
likely	O
(	O
buf	*(char)
)	O
?	O
buf	*(char)
->	O
data	*(void)
:	O
NULL	O
;	O
}	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
wget_iri_parse_base	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(char),*(char))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
(	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
,	O
const	O
char	O
*	O
url	*(char)
,	O
const	O
char	O
*	O
encoding	*(char)
)	O
{	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
;	O
if	O
(	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
)	O
{	O
wget_buffer	struct(*(char),long,long,bool,bool,bool)
buf	*(char)
;	O
char	O
sbuf	array(char)
[	O
256	int
]	O
;	O
wget_buffer_init	(*(struct(*(char),long,long,bool,bool,bool)),*(char),long)->(int)
(	O
&	O
buf	*(char)
,	O
sbuf	array(char)
,	O
sizeof	O
(	O
sbuf	array(char)
)	O
)	O
;	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
=	O
wget_iri_parse	(*(char),*(char))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
(	O
wget_iri_relative_to_abs	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(char),long,*(struct(*(char),long,long,bool,bool,bool)))->(*(char))
(	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
,	O
url	*(char)
,	O
-	O
1	int
,	O
&	O
buf	*(char)
)	O
,	O
encoding	*(char)
)	O
;	O
wget_buffer_deinit	(*(struct(*(char),long,long,bool,bool,bool)))->(void)
(	O
&	O
buf	*(char)
)	O
;	O
}	O
else	O
{	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
=	O
wget_iri_parse	(*(char),*(char))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
(	O
wget_iri_relative_to_abs	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(char),long,*(struct(*(char),long,long,bool,bool,bool)))->(*(char))
(	O
NULL	O
,	O
url	*(char)
,	O
-	O
1	int
,	O
NULL	O
)	O
,	O
encoding	*(char)
)	O
;	O
}	O
return	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
;	O
}	O
int	O
wget_iri_compare	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))->(int)
(	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
iri1	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
,	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
iri2	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
)	O
{	O
int	O
n	long
;	O
if	O
(	O
!	O
iri1	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
)	O
{	O
if	O
(	O
!	O
iri2	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
)	O
return	O
0	int
;	O
else	O
return	O
-	O
1	int
;	O
}	O
else	O
if	O
(	O
!	O
iri2	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
)	O
return	O
1	int
;	O
if	O
(	O
(	O
n	long
=	O
wget_strcasecmp	(*(char),*(char))->(int)
(	O
iri1	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
->	O
path	*(char)
,	O
iri2	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
->	O
path	*(char)
)	O
)	O
)	O
return	O
n	long
;	O
if	O
(	O
(	O
n	long
=	O
wget_strcasecmp	(*(char),*(char))->(int)
(	O
iri1	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
->	O
query	*(char)
,	O
iri2	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
->	O
query	*(char)
)	O
)	O
)	O
return	O
n	long
;	O
if	O
(	O
iri1	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
->	O
scheme	enum(int,int)
!=	O
iri2	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
->	O
scheme	enum(int,int)
)	O
return	O
iri1	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
->	O
scheme	enum(int,int)
<	O
iri2	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
->	O
scheme	enum(int,int)
?	O
-	O
1	int
:	O
1	int
;	O
if	O
(	O
(	O
n	long
=	O
iri1	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
->	O
port	short
-	O
iri2	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
->	O
port	short
)	O
)	O
return	O
n	long
;	O
if	O
(	O
(	O
n	long
=	O
strcmp	(*(char),*(char))->(int)
(	O
iri1	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
->	O
host	*(char)
,	O
iri2	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
->	O
host	*(char)
)	O
)	O
)	O
return	O
n	long
;	O
return	O
0	int
;	O
}	O
const	O
char	O
*	O
wget_iri_escape	(*(char),*(struct(*(char),long,long,bool,bool,bool)))->(*(char))
(	O
const	O
char	O
*	O
src	*(char)
,	O
wget_buffer	struct(*(char),long,long,bool,bool,bool)
*	O
buf	*(char)
)	O
{	O
const	O
char	O
*	O
begin	*(char)
;	O
if	O
(	O
!	O
src	*(char)
)	O
return	O
buf	*(char)
->	O
data	*(void)
;	O
for	O
(	O
begin	*(char)
=	O
src	*(char)
;	O
*	O
src	*(char)
;	O
src	*(char)
++	O
)	O
{	O
if	O
(	O
!	O
wget_iri_isunreserved	(char)->(bool)
(	O
*	O
src	*(char)
)	O
)	O
{	O
if	O
(	O
begin	*(char)
!=	O
src	*(char)
)	O
wget_buffer_memcat	(*(struct(*(char),long,long,bool,bool,bool)),*(void),long)->(long)
(	O
buf	*(char)
,	O
begin	*(char)
,	O
src	*(char)
-	O
begin	*(char)
)	O
;	O
begin	*(char)
=	O
src	*(char)
+	O
1	int
;	O
wget_buffer_printf_append	(*(struct(*(char),long,long,bool,bool,bool)),*(char))->(long)
(	O
buf	*(char)
,	O
"%%%02X"	*(char)
,	O
(	O
unsigned	O
char	O
)	O
*	O
src	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
begin	*(char)
!=	O
src	*(char)
)	O
wget_buffer_memcat	(*(struct(*(char),long,long,bool,bool,bool)),*(void),long)->(long)
(	O
buf	*(char)
,	O
begin	*(char)
,	O
src	*(char)
-	O
begin	*(char)
)	O
;	O
return	O
buf	*(char)
->	O
data	*(void)
;	O
}	O
const	O
char	O
*	O
wget_iri_escape_path	(*(char),*(struct(*(char),long,long,bool,bool,bool)))->(*(char))
(	O
const	O
char	O
*	O
src	*(char)
,	O
wget_buffer	struct(*(char),long,long,bool,bool,bool)
*	O
buf	*(char)
)	O
{	O
const	O
char	O
*	O
begin	*(char)
;	O
for	O
(	O
begin	*(char)
=	O
src	*(char)
;	O
*	O
src	*(char)
;	O
src	*(char)
++	O
)	O
{	O
if	O
(	O
!	O
wget_iri_isunreserved_path	(char)->(bool)
(	O
*	O
src	*(char)
)	O
)	O
{	O
if	O
(	O
begin	*(char)
!=	O
src	*(char)
)	O
wget_buffer_memcat	(*(struct(*(char),long,long,bool,bool,bool)),*(void),long)->(long)
(	O
buf	*(char)
,	O
begin	*(char)
,	O
src	*(char)
-	O
begin	*(char)
)	O
;	O
begin	*(char)
=	O
src	*(char)
+	O
1	int
;	O
wget_buffer_printf_append	(*(struct(*(char),long,long,bool,bool,bool)),*(char))->(long)
(	O
buf	*(char)
,	O
"%%%02X"	*(char)
,	O
(	O
unsigned	O
char	O
)	O
*	O
src	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
begin	*(char)
!=	O
src	*(char)
)	O
wget_buffer_memcat	(*(struct(*(char),long,long,bool,bool,bool)),*(void),long)->(long)
(	O
buf	*(char)
,	O
begin	*(char)
,	O
src	*(char)
-	O
begin	*(char)
)	O
;	O
return	O
buf	*(char)
->	O
data	*(void)
;	O
}	O
const	O
char	O
*	O
wget_iri_escape_query	(*(char),*(struct(*(char),long,long,bool,bool,bool)))->(*(char))
(	O
const	O
char	O
*	O
src	*(char)
,	O
wget_buffer	struct(*(char),long,long,bool,bool,bool)
*	O
buf	*(char)
)	O
{	O
const	O
char	O
*	O
begin	*(char)
;	O
for	O
(	O
begin	*(char)
=	O
src	*(char)
;	O
*	O
src	*(char)
;	O
src	*(char)
++	O
)	O
{	O
if	O
(	O
!	O
wget_iri_isunreserved	(char)->(bool)
(	O
*	O
src	*(char)
)	O
&&	O
*	O
src	*(char)
!=	O
'='	O
&&	O
*	O
src	*(char)
!=	O
'&'	O
)	O
{	O
if	O
(	O
begin	*(char)
!=	O
src	*(char)
)	O
wget_buffer_memcat	(*(struct(*(char),long,long,bool,bool,bool)),*(void),long)->(long)
(	O
buf	*(char)
,	O
begin	*(char)
,	O
src	*(char)
-	O
begin	*(char)
)	O
;	O
begin	*(char)
=	O
src	*(char)
+	O
1	int
;	O
if	O
(	O
*	O
src	*(char)
==	O
' '	O
)	O
wget_buffer_memcat	(*(struct(*(char),long,long,bool,bool,bool)),*(void),long)->(long)
(	O
buf	*(char)
,	O
"+"	*(char)
,	O
1	int
)	O
;	O
else	O
wget_buffer_printf_append	(*(struct(*(char),long,long,bool,bool,bool)),*(char))->(long)
(	O
buf	*(char)
,	O
"%%%02X"	*(char)
,	O
(	O
unsigned	O
char	O
)	O
*	O
src	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
begin	*(char)
!=	O
src	*(char)
)	O
wget_buffer_memcat	(*(struct(*(char),long,long,bool,bool,bool)),*(void),long)->(long)
(	O
buf	*(char)
,	O
begin	*(char)
,	O
src	*(char)
-	O
begin	*(char)
)	O
;	O
return	O
buf	*(char)
->	O
data	*(void)
;	O
}	O
const	O
char	O
*	O
wget_iri_get_escaped_host	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),long,long,bool,bool,bool)))->(*(char))
(	O
const	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
,	O
wget_buffer	struct(*(char),long,long,bool,bool,bool)
*	O
buf	*(char)
)	O
{	O
return	O
wget_iri_escape	(*(char),*(struct(*(char),long,long,bool,bool,bool)))->(*(char))
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
host	*(char)
,	O
buf	*(char)
)	O
;	O
}	O
const	O
char	O
*	O
wget_iri_get_escaped_resource	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),long,long,bool,bool,bool)))->(*(char))
(	O
const	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
,	O
wget_buffer	struct(*(char),long,long,bool,bool,bool)
*	O
buf	*(char)
)	O
{	O
if	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
path	*(char)
)	O
wget_iri_escape_path	(*(char),*(struct(*(char),long,long,bool,bool,bool)))->(*(char))
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
path	*(char)
,	O
buf	*(char)
)	O
;	O
if	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
query	*(char)
)	O
{	O
wget_buffer_memcat	(*(struct(*(char),long,long,bool,bool,bool)),*(void),long)->(long)
(	O
buf	*(char)
,	O
"?"	*(char)
,	O
1	int
)	O
;	O
for	O
(	O
const	O
char	O
*	O
p	*(char)
=	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
query	*(char)
;	O
*	O
p	*(char)
;	O
p	*(char)
++	O
)	O
if	O
(	O
*	O
p	*(char)
==	O
' '	O
)	O
wget_buffer_memcat	(*(struct(*(char),long,long,bool,bool,bool)),*(void),long)->(long)
(	O
buf	*(char)
,	O
"%20"	*(char)
,	O
3	int
)	O
;	O
else	O
wget_buffer_memcat	(*(struct(*(char),long,long,bool,bool,bool)),*(void),long)->(long)
(	O
buf	*(char)
,	O
p	*(char)
,	O
1	int
)	O
;	O
}	O
return	O
buf	*(char)
->	O
data	*(void)
;	O
}	O
char	O
*	O
wget_iri_get_path	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),long,long,bool,bool,bool)),*(char))->(*(char))
(	O
const	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
,	O
wget_buffer	struct(*(char),long,long,bool,bool,bool)
*	O
buf	*(char)
,	O
const	O
char	O
*	O
encoding	*(char)
)	O
{	O
if	O
(	O
buf	*(char)
->	O
length	long
!=	O
0	int
&&	O
buf	*(char)
->	O
data	*(void)
[	O
buf	*(char)
->	O
length	long
-	O
1	int
]	O
!=	O
'/'	O
)	O
wget_buffer_memcat	(*(struct(*(char),long,long,bool,bool,bool)),*(void),long)->(long)
(	O
buf	*(char)
,	O
"/"	*(char)
,	O
1	int
)	O
;	O
if	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
path	*(char)
)	O
{	O
if	O
(	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
encoding	*(char)
,	O
"utf-8"	*(char)
)	O
)	O
{	O
char	O
*	O
fname	*(char)
;	O
if	O
(	O
(	O
fname	*(char)
=	O
wget_utf8_to_str	(*(char),*(char))->(*(char))
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
path	*(char)
,	O
encoding	*(char)
)	O
)	O
)	O
{	O
wget_buffer_strcat	(*(struct(*(char),long,long,bool,bool,bool)),*(char))->(long)
(	O
buf	*(char)
,	O
fname	*(char)
)	O
;	O
xfree	O
(	O
fname	*(char)
)	O
;	O
}	O
else	O
{	O
wget_buffer_strcat	(*(struct(*(char),long,long,bool,bool,bool)),*(char))->(long)
(	O
buf	*(char)
,	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
path	*(char)
)	O
;	O
}	O
}	O
else	O
{	O
wget_buffer_strcat	(*(struct(*(char),long,long,bool,bool,bool)),*(char))->(long)
(	O
buf	*(char)
,	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
path	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
(	O
buf	*(char)
->	O
length	long
==	O
0	int
||	O
buf	*(char)
->	O
data	*(void)
[	O
buf	*(char)
->	O
length	long
-	O
1	int
]	O
==	O
'/'	O
)	O
&&	O
default_page	*(char)
)	O
wget_buffer_memcat	(*(struct(*(char),long,long,bool,bool,bool)),*(void),long)->(long)
(	O
buf	*(char)
,	O
default_page	*(char)
,	O
default_page_length	long
)	O
;	O
return	O
buf	*(char)
->	O
data	*(void)
;	O
}	O
char	O
*	O
wget_iri_get_query_as_filename	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),long,long,bool,bool,bool)),*(char))->(*(char))
(	O
const	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
,	O
wget_buffer	struct(*(char),long,long,bool,bool,bool)
*	O
buf	*(char)
,	O
const	O
char	O
*	O
encoding	*(char)
)	O
{	O
if	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
query	*(char)
)	O
{	O
const	O
char	O
*	O
query	*(char)
;	O
int	O
allocated	int
=	O
0	int
;	O
wget_buffer_memcat	(*(struct(*(char),long,long,bool,bool,bool)),*(void),long)->(long)
(	O
buf	*(char)
,	O
"?"	*(char)
,	O
1	int
)	O
;	O
if	O
(	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
encoding	*(char)
,	O
"utf-8"	*(char)
)	O
)	O
{	O
if	O
(	O
(	O
query	*(char)
=	O
wget_utf8_to_str	(*(char),*(char))->(*(char))
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
query	*(char)
,	O
encoding	*(char)
)	O
)	O
)	O
allocated	int
=	O
1	int
;	O
else	O
query	*(char)
=	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
query	*(char)
;	O
}	O
else	O
{	O
query	*(char)
=	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
query	*(char)
;	O
}	O
int	O
slashes	int
=	O
0	int
;	O
const	O
char	O
*	O
src	*(char)
=	O
query	*(char)
;	O
while	O
(	O
(	O
src	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
src	*(char)
,	O
'/'	O
)	O
)	O
)	O
{	O
slashes	int
++	O
;	O
src	*(char)
++	O
;	O
}	O
if	O
(	O
slashes	int
)	O
{	O
const	O
char	O
*	O
begin	*(char)
;	O
for	O
(	O
src	*(char)
=	O
begin	*(char)
=	O
query	*(char)
;	O
*	O
src	*(char)
;	O
src	*(char)
++	O
)	O
{	O
if	O
(	O
*	O
src	*(char)
==	O
'/'	O
)	O
{	O
if	O
(	O
begin	*(char)
!=	O
src	*(char)
)	O
wget_buffer_memcat	(*(struct(*(char),long,long,bool,bool,bool)),*(void),long)->(long)
(	O
buf	*(char)
,	O
begin	*(char)
,	O
src	*(char)
-	O
begin	*(char)
)	O
;	O
begin	*(char)
=	O
src	*(char)
+	O
1	int
;	O
wget_buffer_memcat	(*(struct(*(char),long,long,bool,bool,bool)),*(void),long)->(long)
(	O
buf	*(char)
,	O
"%2F"	*(char)
,	O
3	int
)	O
;	O
}	O
}	O
if	O
(	O
begin	*(char)
!=	O
src	*(char)
)	O
wget_buffer_memcat	(*(struct(*(char),long,long,bool,bool,bool)),*(void),long)->(long)
(	O
buf	*(char)
,	O
begin	*(char)
,	O
src	*(char)
-	O
begin	*(char)
)	O
;	O
}	O
else	O
{	O
wget_buffer_strcat	(*(struct(*(char),long,long,bool,bool,bool)),*(char))->(long)
(	O
buf	*(char)
,	O
query	*(char)
)	O
;	O
}	O
if	O
(	O
allocated	int
)	O
xfree	O
(	O
query	*(char)
)	O
;	O
}	O
return	O
buf	*(char)
->	O
data	*(void)
;	O
}	O
char	O
*	O
wget_iri_get_filename	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),long,long,bool,bool,bool)),*(char))->(*(char))
(	O
const	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
,	O
wget_buffer	struct(*(char),long,long,bool,bool,bool)
*	O
buf	*(char)
,	O
const	O
char	O
*	O
encoding	*(char)
)	O
{	O
if	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
path	*(char)
)	O
{	O
char	O
*	O
fname	*(char)
;	O
if	O
(	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
encoding	*(char)
,	O
"utf-8"	*(char)
)	O
)	O
{	O
char	O
*	O
p	*(char)
;	O
if	O
(	O
(	O
p	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
path	*(char)
,	O
'/'	O
)	O
)	O
)	O
{	O
if	O
(	O
!	O
(	O
fname	*(char)
=	O
wget_utf8_to_str	(*(char),*(char))->(*(char))
(	O
p	*(char)
+	O
1	int
,	O
encoding	*(char)
)	O
)	O
)	O
wget_buffer_strcat	(*(struct(*(char),long,long,bool,bool,bool)),*(char))->(long)
(	O
buf	*(char)
,	O
p	*(char)
+	O
1	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
(	O
fname	*(char)
=	O
wget_utf8_to_str	(*(char),*(char))->(*(char))
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
path	*(char)
,	O
encoding	*(char)
)	O
)	O
)	O
wget_buffer_strcat	(*(struct(*(char),long,long,bool,bool,bool)),*(char))->(long)
(	O
buf	*(char)
,	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
path	*(char)
)	O
;	O
}	O
if	O
(	O
fname	*(char)
)	O
{	O
wget_buffer_strcat	(*(struct(*(char),long,long,bool,bool,bool)),*(char))->(long)
(	O
buf	*(char)
,	O
fname	*(char)
)	O
;	O
xfree	O
(	O
fname	*(char)
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
(	O
fname	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
path	*(char)
,	O
'/'	O
)	O
)	O
)	O
wget_buffer_strcat	(*(struct(*(char),long,long,bool,bool,bool)),*(char))->(long)
(	O
buf	*(char)
,	O
fname	*(char)
+	O
1	int
)	O
;	O
else	O
wget_buffer_strcat	(*(struct(*(char),long,long,bool,bool,bool)),*(char))->(long)
(	O
buf	*(char)
,	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
path	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
(	O
buf	*(char)
->	O
length	long
==	O
0	int
||	O
buf	*(char)
->	O
data	*(void)
[	O
buf	*(char)
->	O
length	long
-	O
1	int
]	O
==	O
'/'	O
)	O
&&	O
default_page	*(char)
)	O
wget_buffer_memcat	(*(struct(*(char),long,long,bool,bool,bool)),*(void),long)->(long)
(	O
buf	*(char)
,	O
default_page	*(char)
,	O
default_page_length	long
)	O
;	O
return	O
wget_iri_get_query_as_filename	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),long,long,bool,bool,bool)),*(char))->(*(char))
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
,	O
buf	*(char)
,	O
encoding	*(char)
)	O
;	O
}	O
void	O
wget_iri_set_defaultpage	(*(char))->(void)
(	O
const	O
char	O
*	O
page	*(char)
)	O
{	O
default_page	*(char)
=	O
page	*(char)
;	O
default_page_length	long
=	O
default_page	*(char)
?	O
strlen	(*(char))->(long)
(	O
default_page	*(char)
)	O
:	O
0	int
;	O
}	O
int	O
wget_iri_set_defaultport	(enum(int,int),short)->(int)
(	O
wget_iri_scheme	enum(int,int)
scheme	enum(int,int)
,	O
uint16_t	short
port	short
)	O
{	O
if	O
(	O
(	O
unsigned	O
)	O
scheme	enum(int,int)
<	O
countof	O
(	O
schemes	array(struct(short,array(char)))
)	O
)	O
{	O
schemes	array(struct(short,array(char)))
[	O
scheme	enum(int,int)
]	O
.	O
port	short
=	O
port	short
;	O
return	O
0	int
;	O
}	O
return	O
-	O
1	int
;	O
}	O
wget_iri_scheme	enum(int,int)
wget_iri_set_scheme	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),enum(int,int))->(enum(int,int))
(	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
,	O
wget_iri_scheme	enum(int,int)
scheme	enum(int,int)
)	O
{	O
wget_iri_scheme	enum(int,int)
old_scheme	enum(int,int)
=	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
scheme	enum(int,int)
;	O
if	O
(	O
(	O
unsigned	O
)	O
scheme	enum(int,int)
<	O
countof	O
(	O
schemes	array(struct(short,array(char)))
)	O
&&	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
scheme	enum(int,int)
!=	O
scheme	enum(int,int)
)	O
{	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
scheme	enum(int,int)
=	O
scheme	enum(int,int)
;	O
if	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
port	short
==	O
schemes	array(struct(short,array(char)))
[	O
old_scheme	enum(int,int)
]	O
.	O
port	short
)	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
port	short
=	O
schemes	array(struct(short,array(char)))
[	O
scheme	enum(int,int)
]	O
.	O
port	short
;	O
size_t	long
old_scheme_len	long
=	O
strlen	(*(char))->(long)
(	O
schemes	array(struct(short,array(char)))
[	O
old_scheme	enum(int,int)
]	O
.	O
name	*(char)
)	O
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
uri	*(char)
,	O
schemes	array(struct(short,array(char)))
[	O
old_scheme	enum(int,int)
]	O
.	O
name	*(char)
,	O
old_scheme_len	long
)	O
==	O
0	int
&&	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
uri	*(char)
[	O
old_scheme_len	long
]	O
==	O
':'	O
)	O
{	O
char	O
*	O
new_uri	*(char)
=	O
wget_aprintf	(*(char))->(*(char))
(	O
"%s%s"	*(char)
,	O
schemes	array(struct(short,array(char)))
[	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
scheme	enum(int,int)
]	O
.	O
name	*(char)
,	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
uri	*(char)
+	O
old_scheme_len	long
)	O
;	O
if	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
uri_allocated	bool
)	O
xfree	O
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
uri	*(char)
)	O
;	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
uri	*(char)
=	O
new_uri	*(char)
;	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
uri_allocated	bool
=	O
true	int
;	O
}	O
}	O
return	O
old_scheme	enum(int,int)
;	O
}	O
