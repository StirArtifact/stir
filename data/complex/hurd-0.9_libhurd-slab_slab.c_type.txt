static	O
int	O
__hurd_slab_nr_pages	int
;	O
union	O
hurd_bufctl	union(*(union(*(union(*(union`),*(struct`))),*(struct))),*(struct))
{	O
union	O
hurd_bufctl	union(*(union(*(union(*(union`),*(struct`))),*(struct))),*(struct))
*	O
next	*(union(*(union(*(union`),*(struct`))),*(struct)))
;	O
struct	O
hurd_slab	struct(*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`))))),*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`))))),int,*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`))))))
*	O
slab	*(struct)
;	O
}	O
;	O
struct	O
hurd_slab	struct(*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`))))),*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`))))),int,*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`))))))
{	O
struct	O
hurd_slab	struct(*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`))))),*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`))))),int,*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`))))))
*	O
next	*(union(*(union(*(union`),*(struct`))),*(struct)))
;	O
struct	O
hurd_slab	struct(*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`))))),*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`))))),int,*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`))))))
*	O
prev	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
;	O
int	O
refcount	int
;	O
union	O
hurd_bufctl	union(*(union(*(union(*(union`),*(struct`))),*(struct))),*(struct))
*	O
free_list	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
;	O
}	O
;	O
static	O
error_t	int
allocate_buffer	*((*(void),long,*(*(void)))->(int))
(	O
struct	O
hurd_slab_space	struct(bool,union(struct(int,int,int,int,int,short,short,struct(*(struct(*`,*`)),*(struct(*`,*`)))),array(char),long),long,long,long,*((*(void),long,*(*(void)))->(int)),*((*(void),*(void),long)->(int)),*((*(void),*(void))->(int)),*((*(void),*(void))->(void)),*(void),*(struct),*(struct),*(struct),int,long)
*	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
,	O
size_t	long
size	long
,	O
void	O
*	O
*	O
ptr	*(*(void))
)	O
{	O
if	O
(	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
allocate_buffer	*((*(void),long,*(*(void)))->(int))
)	O
return	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
allocate_buffer	*((*(void),long,*(*(void)))->(int))
(	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
hook	*(void)
,	O
size	long
,	O
ptr	*(*(void))
)	O
;	O
else	O
{	O
*	O
ptr	*(*(void))
=	O
mmap	(*(void),long,int,int,int,long)->(*(void))
(	O
NULL	O
,	O
size	long
,	O
PROT_READ	int
|	O
PROT_WRITE	int
,	O
MAP_PRIVATE	int
|	O
MAP_ANONYMOUS	int
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
*	O
ptr	*(*(void))
==	O
MAP_FAILED	O
)	O
return	O
errno	O
;	O
else	O
return	O
0	int
;	O
}	O
}	O
static	O
error_t	int
deallocate_buffer	*((*(void),*(void),long)->(int))
(	O
struct	O
hurd_slab_space	struct(bool,union(struct(int,int,int,int,int,short,short,struct(*(struct(*`,*`)),*(struct(*`,*`)))),array(char),long),long,long,long,*((*(void),long,*(*(void)))->(int)),*((*(void),*(void),long)->(int)),*((*(void),*(void))->(int)),*((*(void),*(void))->(void)),*(void),*(struct),*(struct),*(struct),int,long)
*	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
,	O
void	O
*	O
buffer	*(void)
,	O
size_t	long
size	long
)	O
{	O
if	O
(	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
deallocate_buffer	*((*(void),*(void),long)->(int))
)	O
return	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
deallocate_buffer	*((*(void),*(void),long)->(int))
(	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
hook	*(void)
,	O
buffer	*(void)
,	O
size	long
)	O
;	O
else	O
{	O
if	O
(	O
munmap	(*(void),long)->(int)
(	O
buffer	*(void)
,	O
size	long
)	O
==	O
-	O
1	int
)	O
return	O
errno	O
;	O
else	O
return	O
0	int
;	O
}	O
}	O
static	O
void	O
insert_slab	(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct(*`,*`,int,*`)),*(struct(*`,*`,int,*`)),*(struct(*`,*`,int,*`)),int,long)),*(struct(*(struct(*`,*`,int,*`)),*(struct(*`,*`,int,*`)),int,*(union(*`,*`)))))->(void)
(	O
struct	O
hurd_slab_space	struct(bool,union(struct(int,int,int,int,int,short,short,struct(*(struct(*`,*`)),*(struct(*`,*`)))),array(char),long),long,long,long,*((*(void),long,*(*(void)))->(int)),*((*(void),*(void),long)->(int)),*((*(void),*(void))->(int)),*((*(void),*(void))->(void)),*(void),*(struct),*(struct),*(struct),int,long)
*	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
,	O
struct	O
hurd_slab	struct(*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`))))),*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`))))),int,*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`))))))
*	O
slab	*(struct)
)	O
{	O
assert	O
(	O
slab	*(struct)
->	O
refcount	int
==	O
0	int
)	O
;	O
if	O
(	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
slab_first	*(struct)
==	O
0	int
)	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
slab_first	*(struct)
=	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
slab_last	*(struct)
=	O
slab	*(struct)
;	O
else	O
{	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
slab_last	*(struct)
->	O
next	*(union(*(union(*(union`),*(struct`))),*(struct)))
=	O
slab	*(struct)
;	O
slab	*(struct)
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
=	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
slab_last	*(struct)
;	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
slab_last	*(struct)
=	O
slab	*(struct)
;	O
}	O
}	O
static	O
void	O
remove_slab	(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct(*`,*`,int,*`)),*(struct(*`,*`,int,*`)),*(struct(*`,*`,int,*`)),int,long)),*(struct(*(struct(*`,*`,int,*`)),*(struct(*`,*`,int,*`)),int,*(union(*`,*`)))))->(void)
(	O
struct	O
hurd_slab_space	struct(bool,union(struct(int,int,int,int,int,short,short,struct(*(struct(*`,*`)),*(struct(*`,*`)))),array(char),long),long,long,long,*((*(void),long,*(*(void)))->(int)),*((*(void),*(void),long)->(int)),*((*(void),*(void))->(int)),*((*(void),*(void))->(void)),*(void),*(struct),*(struct),*(struct),int,long)
*	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
,	O
struct	O
hurd_slab	struct(*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`))))),*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`))))),int,*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`))))))
*	O
slab	*(struct)
)	O
{	O
if	O
(	O
slab	*(struct)
!=	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
slab_first	*(struct)
&&	O
slab	*(struct)
!=	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
slab_last	*(struct)
)	O
{	O
slab	*(struct)
->	O
next	*(union(*(union(*(union`),*(struct`))),*(struct)))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
=	O
slab	*(struct)
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
;	O
slab	*(struct)
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
->	O
next	*(union(*(union(*(union`),*(struct`))),*(struct)))
=	O
slab	*(struct)
->	O
next	*(union(*(union(*(union`),*(struct`))),*(struct)))
;	O
return	O
;	O
}	O
if	O
(	O
slab	*(struct)
==	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
slab_first	*(struct)
)	O
{	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
slab_first	*(struct)
=	O
slab	*(struct)
->	O
next	*(union(*(union(*(union`),*(struct`))),*(struct)))
;	O
if	O
(	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
slab_first	*(struct)
)	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
slab_first	*(struct)
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
=	O
NULL	O
;	O
}	O
if	O
(	O
slab	*(struct)
==	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
slab_last	*(struct)
)	O
{	O
if	O
(	O
slab	*(struct)
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
)	O
slab	*(struct)
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
->	O
next	*(union(*(union(*(union`),*(struct`))),*(struct)))
=	O
NULL	O
;	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
slab_last	*(struct)
=	O
slab	*(struct)
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
;	O
}	O
}	O
static	O
error_t	int
reap	(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct(*`,*`,int,*`)),*(struct(*`,*`,int,*`)),*(struct(*`,*`,int,*`)),int,long)))->(int)
(	O
struct	O
hurd_slab_space	struct(bool,union(struct(int,int,int,int,int,short,short,struct(*(struct(*`,*`)),*(struct(*`,*`)))),array(char),long),long,long,long,*((*(void),long,*(*(void)))->(int)),*((*(void),*(void),long)->(int)),*((*(void),*(void))->(int)),*((*(void),*(void))->(void)),*(void),*(struct),*(struct),*(struct),int,long)
*	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
)	O
{	O
struct	O
hurd_slab	struct(*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`))))),*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`))))),int,*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`))))))
*	O
s	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
,	O
*	O
next	*(union(*(union(*(union`),*(struct`))),*(struct)))
,	O
*	O
new_first	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
;	O
error_t	int
err	int
=	O
0	int
;	O
for	O
(	O
s	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
=	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
slab_first	*(struct)
;	O
s	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
;	O
s	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
=	O
next	*(union(*(union(*(union`),*(struct`))),*(struct)))
)	O
{	O
next	*(union(*(union(*(union`),*(struct`))),*(struct)))
=	O
s	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
->	O
next	*(union(*(union(*(union`),*(struct`))),*(struct)))
;	O
if	O
(	O
!	O
s	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
->	O
refcount	int
)	O
{	O
remove_slab	(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct(*`,*`,int,*`)),*(struct(*`,*`,int,*`)),*(struct(*`,*`,int,*`)),int,long)),*(struct(*(struct(*`,*`,int,*`)),*(struct(*`,*`,int,*`)),int,*(union(*`,*`)))))->(void)
(	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
,	O
s	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
)	O
;	O
if	O
(	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
destructor	*((*(void),*(void))->(void))
)	O
{	O
union	O
hurd_bufctl	union(*(union(*(union(*(union`),*(struct`))),*(struct))),*(struct))
*	O
bufctl	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
;	O
for	O
(	O
bufctl	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
=	O
s	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
->	O
free_list	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
;	O
bufctl	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
;	O
bufctl	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
=	O
bufctl	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
->	O
next	*(union(*(union(*(union`),*(struct`))),*(struct)))
)	O
{	O
void	O
*	O
buffer	*(void)
=	O
(	O
(	O
(	O
void	O
*	O
)	O
bufctl	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
)	O
-	O
(	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
size	long
-	O
sizeof	O
*	O
bufctl	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
)	O
)	O
;	O
(	O
*	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
destructor	*((*(void),*(void))->(void))
)	O
(	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
hook	*(void)
,	O
buffer	*(void)
)	O
;	O
}	O
}	O
err	int
=	O
deallocate_buffer	*((*(void),*(void),long)->(int))
(	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
,	O
(	O
void	O
*	O
)	O
(	O
(	O
(	O
uintptr_t	long
)	O
s	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
)	O
+	O
sizeof	O
(	O
struct	O
hurd_slab	struct(*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`))))),*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`))))),int,*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`))))))
)	O
-	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
slab_size	long
)	O
,	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
slab_size	long
)	O
;	O
if	O
(	O
err	int
)	O
break	O
;	O
__hurd_slab_nr_pages	int
--	O
;	O
}	O
}	O
new_first	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
=	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
slab_first	*(struct)
;	O
while	O
(	O
new_first	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
)	O
{	O
if	O
(	O
new_first	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
->	O
refcount	int
!=	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
full_refcount	int
)	O
break	O
;	O
new_first	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
=	O
new_first	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
->	O
next	*(union(*(union(*(union`),*(struct`))),*(struct)))
;	O
}	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
first_free	*(struct)
=	O
new_first	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
;	O
return	O
err	int
;	O
}	O
static	O
void	O
init_space	(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct(*`,*`,int,*`)),*(struct(*`,*`,int,*`)),*(struct(*`,*`,int,*`)),int,long)))->(void)
(	O
hurd_slab_space_t	*(struct)
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
)	O
{	O
size_t	long
size	long
=	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
requested_size	long
+	O
sizeof	O
(	O
union	O
hurd_bufctl	union(*(union(*(union(*(union`),*(struct`))),*(struct))),*(struct))
)	O
;	O
size_t	long
alignment	long
=	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
requested_align	long
;	O
size	long
=	O
(	O
size	long
+	O
alignment	long
-	O
1	int
)	O
&	O
~	O
(	O
alignment	long
-	O
1	int
)	O
;	O
assert	O
(	O
size	long
<=	O
(	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
slab_size	long
-	O
sizeof	O
(	O
struct	O
hurd_slab	struct(*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`))))),*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`))))),int,*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`))))))
)	O
-	O
sizeof	O
(	O
union	O
hurd_bufctl	union(*(union(*(union(*(union`),*(struct`))),*(struct))),*(struct))
)	O
)	O
)	O
;	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
size	long
=	O
size	long
;	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
full_refcount	int
=	O
(	O
(	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
slab_size	long
-	O
sizeof	O
(	O
struct	O
hurd_slab	struct(*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`))))),*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`))))),int,*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`))))))
)	O
)	O
/	O
size	long
)	O
;	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
initialized	bool
=	O
true	int
;	O
}	O
static	O
error_t	int
grow	(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct(*`,*`,int,*`)),*(struct(*`,*`,int,*`)),*(struct(*`,*`,int,*`)),int,long)))->(int)
(	O
struct	O
hurd_slab_space	struct(bool,union(struct(int,int,int,int,int,short,short,struct(*(struct(*`,*`)),*(struct(*`,*`)))),array(char),long),long,long,long,*((*(void),long,*(*(void)))->(int)),*((*(void),*(void),long)->(int)),*((*(void),*(void))->(int)),*((*(void),*(void))->(void)),*(void),*(struct),*(struct),*(struct),int,long)
*	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
)	O
{	O
error_t	int
err	int
;	O
struct	O
hurd_slab	struct(*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`))))),*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`))))),int,*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`))))))
*	O
new_slab	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
;	O
union	O
hurd_bufctl	union(*(union(*(union(*(union`),*(struct`))),*(struct))),*(struct))
*	O
bufctl	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
;	O
int	O
nr_objs	int
,	O
i	int
;	O
void	O
*	O
p	*(void)
;	O
if	O
(	O
!	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
initialized	bool
)	O
init_space	(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct(*`,*`,int,*`)),*(struct(*`,*`,int,*`)),*(struct(*`,*`,int,*`)),int,long)))->(void)
(	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
)	O
;	O
err	int
=	O
allocate_buffer	*((*(void),long,*(*(void)))->(int))
(	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
,	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
slab_size	long
,	O
&	O
p	*(void)
)	O
;	O
if	O
(	O
err	int
)	O
return	O
err	int
;	O
__hurd_slab_nr_pages	int
++	O
;	O
new_slab	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
=	O
(	O
p	*(void)
+	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
slab_size	long
-	O
sizeof	O
(	O
struct	O
hurd_slab	struct(*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`))))),*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`))))),int,*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`))))))
)	O
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
new_slab	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
,	O
0	int
,	O
sizeof	O
(	O
*	O
new_slab	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
)	O
)	O
;	O
nr_objs	int
=	O
(	O
(	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
slab_size	long
-	O
sizeof	O
(	O
struct	O
hurd_slab	struct(*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`))))),*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`))))),int,*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`))))))
)	O
)	O
/	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
size	long
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
nr_objs	int
;	O
i	int
++	O
,	O
p	*(void)
+=	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
size	long
)	O
{	O
if	O
(	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
constructor	*((*(void),*(void))->(int))
)	O
{	O
error_t	int
err	int
=	O
(	O
*	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
constructor	*((*(void),*(void))->(int))
)	O
(	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
hook	*(void)
,	O
p	*(void)
)	O
;	O
if	O
(	O
err	int
)	O
{	O
for	O
(	O
bufctl	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
=	O
new_slab	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
->	O
free_list	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
;	O
bufctl	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
;	O
bufctl	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
=	O
bufctl	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
->	O
next	*(union(*(union(*(union`),*(struct`))),*(struct)))
)	O
{	O
void	O
*	O
buffer	*(void)
=	O
(	O
(	O
(	O
void	O
*	O
)	O
bufctl	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
)	O
-	O
(	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
size	long
-	O
sizeof	O
*	O
bufctl	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
)	O
)	O
;	O
(	O
*	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
destructor	*((*(void),*(void))->(void))
)	O
(	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
hook	*(void)
,	O
buffer	*(void)
)	O
;	O
}	O
deallocate_buffer	*((*(void),*(void),long)->(int))
(	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
,	O
p	*(void)
,	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
slab_size	long
)	O
;	O
return	O
err	int
;	O
}	O
}	O
bufctl	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
=	O
(	O
p	*(void)
+	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
size	long
-	O
sizeof	O
*	O
bufctl	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
)	O
;	O
bufctl	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
->	O
next	*(union(*(union(*(union`),*(struct`))),*(struct)))
=	O
new_slab	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
->	O
free_list	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
;	O
new_slab	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
->	O
free_list	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
=	O
bufctl	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
;	O
}	O
insert_slab	(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct(*`,*`,int,*`)),*(struct(*`,*`,int,*`)),*(struct(*`,*`,int,*`)),int,long)),*(struct(*(struct(*`,*`,int,*`)),*(struct(*`,*`,int,*`)),int,*(union(*`,*`)))))->(void)
(	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
,	O
new_slab	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
)	O
;	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
first_free	*(struct)
=	O
new_slab	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
;	O
return	O
0	int
;	O
}	O
error_t	int
hurd_slab_init	(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)),long,long,*((*(void),long,*(*(void)))->(int)),*((*(void),*(void),long)->(int)),*((*(void),*(void))->(int)),*((*(void),*(void))->(void)),*(void))->(int)
(	O
hurd_slab_space_t	*(struct)
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
,	O
size_t	long
size	long
,	O
size_t	long
alignment	long
,	O
hurd_slab_allocate_buffer_t	*((*(void),long,*(*(void)))->(int))
allocate_buffer	*((*(void),long,*(*(void)))->(int))
,	O
hurd_slab_deallocate_buffer_t	*((*(void),*(void),long)->(int))
deallocate_buffer	*((*(void),*(void),long)->(int))
,	O
hurd_slab_constructor_t	*((*(void),*(void))->(int))
constructor	*((*(void),*(void))->(int))
,	O
hurd_slab_destructor_t	*((*(void),*(void))->(void))
destructor	*((*(void),*(void))->(void))
,	O
void	O
*	O
hook	*(void)
)	O
{	O
error_t	int
err	int
;	O
memset	(*(void),int,long)->(*(void))
(	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
,	O
0	int
,	O
sizeof	O
(	O
struct	O
hurd_slab_space	struct(bool,union(struct(int,int,int,int,int,short,short,struct(*(struct(*`,*`)),*(struct(*`,*`)))),array(char),long),long,long,long,*((*(void),long,*(*(void)))->(int)),*((*(void),*(void),long)->(int)),*((*(void),*(void))->(int)),*((*(void),*(void))->(void)),*(void),*(struct),*(struct),*(struct),int,long)
)	O
)	O
;	O
if	O
(	O
!	O
alignment	long
)	O
alignment	long
=	O
__alignof__	O
(	O
void	O
*	O
)	O
;	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
requested_size	long
=	O
size	long
;	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
requested_align	long
=	O
alignment	long
;	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
slab_size	long
=	O
getpagesize	()->(int)
(	O
)	O
*	O
SLAB_PAGES	int
;	O
size	long
=	O
size	long
+	O
sizeof	O
(	O
union	O
hurd_bufctl	union(*(union(*(union(*(union`),*(struct`))),*(struct))),*(struct))
)	O
;	O
size	long
=	O
(	O
size	long
+	O
alignment	long
-	O
1	int
)	O
&	O
~	O
(	O
alignment	long
-	O
1	int
)	O
;	O
if	O
(	O
size	long
>	O
(	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
slab_size	long
-	O
sizeof	O
(	O
struct	O
hurd_slab	struct(*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`))))),*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`))))),int,*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`))))))
)	O
-	O
sizeof	O
(	O
union	O
hurd_bufctl	union(*(union(*(union(*(union`),*(struct`))),*(struct))),*(struct))
)	O
)	O
)	O
return	O
EINVAL	int
;	O
err	int
=	O
pthread_mutex_init	(*(union(struct(int,int,int,int,int,short,short,struct(*`,*`)),array(char),long)),*(union(array(char),int)))->(int)
(	O
&	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
lock	union(struct(int,int,int,int,int,short,short,struct(*(struct(*`,*`)),*(struct(*`,*`)))),array(char),long)
,	O
NULL	O
)	O
;	O
if	O
(	O
err	int
)	O
return	O
err	int
;	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
allocate_buffer	*((*(void),long,*(*(void)))->(int))
=	O
allocate_buffer	*((*(void),long,*(*(void)))->(int))
;	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
deallocate_buffer	*((*(void),*(void),long)->(int))
=	O
deallocate_buffer	*((*(void),*(void),long)->(int))
;	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
constructor	*((*(void),*(void))->(int))
=	O
constructor	*((*(void),*(void))->(int))
;	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
destructor	*((*(void),*(void))->(void))
=	O
destructor	*((*(void),*(void))->(void))
;	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
hook	*(void)
=	O
hook	*(void)
;	O
return	O
0	int
;	O
}	O
error_t	int
hurd_slab_create	(long,long,*((*(void),long,*(*(void)))->(int)),*((*(void),*(void),long)->(int)),*((*(void),*(void))->(int)),*((*(void),*(void))->(void)),*(void),*(*(struct(bool,union(struct`,array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct`),*(struct`),*(struct`),int,long))))->(int)
(	O
size_t	long
size	long
,	O
size_t	long
alignment	long
,	O
hurd_slab_allocate_buffer_t	*((*(void),long,*(*(void)))->(int))
allocate_buffer	*((*(void),long,*(*(void)))->(int))
,	O
hurd_slab_deallocate_buffer_t	*((*(void),*(void),long)->(int))
deallocate_buffer	*((*(void),*(void),long)->(int))
,	O
hurd_slab_constructor_t	*((*(void),*(void))->(int))
constructor	*((*(void),*(void))->(int))
,	O
hurd_slab_destructor_t	*((*(void),*(void))->(void))
destructor	*((*(void),*(void))->(void))
,	O
void	O
*	O
hook	*(void)
,	O
hurd_slab_space_t	*(struct)
*	O
r_space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct(*`,*`,int,*`)),*(struct(*`,*`,int,*`)),*(struct(*`,*`,int,*`)),int,long)))
)	O
{	O
hurd_slab_space_t	*(struct)
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
;	O
error_t	int
err	int
;	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
hurd_slab_space	struct(bool,union(struct(int,int,int,int,int,short,short,struct(*(struct(*`,*`)),*(struct(*`,*`)))),array(char),long),long,long,long,*((*(void),long,*(*(void)))->(int)),*((*(void),*(void),long)->(int)),*((*(void),*(void))->(int)),*((*(void),*(void))->(void)),*(void),*(struct),*(struct),*(struct),int,long)
)	O
)	O
;	O
if	O
(	O
!	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
)	O
return	O
ENOMEM	int
;	O
err	int
=	O
hurd_slab_init	(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)),long,long,*((*(void),long,*(*(void)))->(int)),*((*(void),*(void),long)->(int)),*((*(void),*(void))->(int)),*((*(void),*(void))->(void)),*(void))->(int)
(	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
,	O
size	long
,	O
alignment	long
,	O
allocate_buffer	*((*(void),long,*(*(void)))->(int))
,	O
deallocate_buffer	*((*(void),*(void),long)->(int))
,	O
constructor	*((*(void),*(void))->(int))
,	O
destructor	*((*(void),*(void))->(void))
,	O
hook	*(void)
)	O
;	O
if	O
(	O
err	int
)	O
{	O
free	(*(void))->(void)
(	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
)	O
;	O
return	O
err	int
;	O
}	O
*	O
r_space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct(*`,*`,int,*`)),*(struct(*`,*`,int,*`)),*(struct(*`,*`,int,*`)),int,long)))
=	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
;	O
return	O
0	int
;	O
}	O
error_t	int
hurd_slab_destroy	(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))->(int)
(	O
hurd_slab_space_t	*(struct)
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
)	O
{	O
error_t	int
err	int
;	O
pthread_mutex_lock	(*(union(struct(int,int,int,int,int,short,short,struct(*`,*`)),array(char),long)))->(int)
(	O
&	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
lock	union(struct(int,int,int,int,int,short,short,struct(*(struct(*`,*`)),*(struct(*`,*`)))),array(char),long)
)	O
;	O
err	int
=	O
reap	(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct(*`,*`,int,*`)),*(struct(*`,*`,int,*`)),*(struct(*`,*`,int,*`)),int,long)))->(int)
(	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
)	O
;	O
if	O
(	O
err	int
)	O
{	O
pthread_mutex_unlock	(*(union(struct(int,int,int,int,int,short,short,struct(*`,*`)),array(char),long)))->(int)
(	O
&	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
lock	union(struct(int,int,int,int,int,short,short,struct(*(struct(*`,*`)),*(struct(*`,*`)))),array(char),long)
)	O
;	O
return	O
err	int
;	O
}	O
if	O
(	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
slab_first	*(struct)
)	O
{	O
pthread_mutex_unlock	(*(union(struct(int,int,int,int,int,short,short,struct(*`,*`)),array(char),long)))->(int)
(	O
&	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
lock	union(struct(int,int,int,int,int,short,short,struct(*(struct(*`,*`)),*(struct(*`,*`)))),array(char),long)
)	O
;	O
return	O
EBUSY	int
;	O
}	O
return	O
0	int
;	O
}	O
error_t	int
hurd_slab_free	(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))->(int)
(	O
hurd_slab_space_t	*(struct)
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
)	O
{	O
error_t	int
err	int
=	O
hurd_slab_destroy	(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))->(int)
(	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
)	O
;	O
if	O
(	O
err	int
)	O
return	O
err	int
;	O
free	(*(void))->(void)
(	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
)	O
;	O
return	O
0	int
;	O
}	O
error_t	int
hurd_slab_alloc	(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)),*(*(void)))->(int)
(	O
hurd_slab_space_t	*(struct)
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
,	O
void	O
*	O
*	O
buffer	*(void)
)	O
{	O
error_t	int
err	int
;	O
union	O
hurd_bufctl	union(*(union(*(union(*(union`),*(struct`))),*(struct))),*(struct))
*	O
bufctl	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
;	O
pthread_mutex_lock	(*(union(struct(int,int,int,int,int,short,short,struct(*`,*`)),array(char),long)))->(int)
(	O
&	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
lock	union(struct(int,int,int,int,int,short,short,struct(*(struct(*`,*`)),*(struct(*`,*`)))),array(char),long)
)	O
;	O
if	O
(	O
!	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
first_free	*(struct)
)	O
{	O
err	int
=	O
grow	(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct(*`,*`,int,*`)),*(struct(*`,*`,int,*`)),*(struct(*`,*`,int,*`)),int,long)))->(int)
(	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
)	O
;	O
if	O
(	O
err	int
)	O
{	O
pthread_mutex_unlock	(*(union(struct(int,int,int,int,int,short,short,struct(*`,*`)),array(char),long)))->(int)
(	O
&	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
lock	union(struct(int,int,int,int,int,short,short,struct(*(struct(*`,*`)),*(struct(*`,*`)))),array(char),long)
)	O
;	O
return	O
err	int
;	O
}	O
}	O
bufctl	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
=	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
first_free	*(struct)
->	O
free_list	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
;	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
first_free	*(struct)
->	O
free_list	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
=	O
bufctl	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
->	O
next	*(union(*(union(*(union`),*(struct`))),*(struct)))
;	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
first_free	*(struct)
->	O
refcount	int
++	O
;	O
bufctl	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
->	O
slab	*(struct)
=	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
first_free	*(struct)
;	O
if	O
(	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
first_free	*(struct)
->	O
refcount	int
==	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
full_refcount	int
)	O
{	O
struct	O
hurd_slab	struct(*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`))))),*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`))))),int,*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`))))))
*	O
new_first	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
=	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
slab_first	*(struct)
;	O
while	O
(	O
new_first	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
)	O
{	O
if	O
(	O
new_first	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
->	O
refcount	int
!=	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
full_refcount	int
)	O
break	O
;	O
new_first	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
=	O
new_first	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
->	O
next	*(union(*(union(*(union`),*(struct`))),*(struct)))
;	O
}	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
first_free	*(struct)
=	O
new_first	*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`)))))
;	O
}	O
*	O
buffer	*(void)
=	O
(	O
(	O
void	O
*	O
)	O
bufctl	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
)	O
-	O
(	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
size	long
-	O
sizeof	O
*	O
bufctl	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
)	O
;	O
pthread_mutex_unlock	(*(union(struct(int,int,int,int,int,short,short,struct(*`,*`)),array(char),long)))->(int)
(	O
&	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
lock	union(struct(int,int,int,int,int,short,short,struct(*(struct(*`,*`)),*(struct(*`,*`)))),array(char),long)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
inline	O
void	O
put_on_slab_list	(*(struct(*(struct(*`,*`,int,*`)),*(struct(*`,*`,int,*`)),int,*(union(*`,*`)))),*(union(*(union(*`,*`)),*(struct(*`,*`,int,*`)))))->(void)
(	O
struct	O
hurd_slab	struct(*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`))))),*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`))))),int,*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`))))))
*	O
slab	*(struct)
,	O
union	O
hurd_bufctl	union(*(union(*(union(*(union`),*(struct`))),*(struct))),*(struct))
*	O
bufctl	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
)	O
{	O
bufctl	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
->	O
next	*(union(*(union(*(union`),*(struct`))),*(struct)))
=	O
slab	*(struct)
->	O
free_list	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
;	O
slab	*(struct)
->	O
free_list	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
=	O
bufctl	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
;	O
slab	*(struct)
->	O
refcount	int
--	O
;	O
assert	O
(	O
slab	*(struct)
->	O
refcount	int
>=	O
0	int
)	O
;	O
}	O
void	O
hurd_slab_dealloc	(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)),*(void))->(void)
(	O
hurd_slab_space_t	*(struct)
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
,	O
void	O
*	O
buffer	*(void)
)	O
{	O
struct	O
hurd_slab	struct(*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`))))),*(struct(*(struct(*(struct`),*(struct`),int,*(union`))),*(struct(*(struct`),*(struct`),int,*(union`))),int,*(union(*(union`),*(struct`))))),int,*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`))))))
*	O
slab	*(struct)
;	O
union	O
hurd_bufctl	union(*(union(*(union(*(union`),*(struct`))),*(struct))),*(struct))
*	O
bufctl	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
;	O
assert	O
(	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
initialized	bool
)	O
;	O
pthread_mutex_lock	(*(union(struct(int,int,int,int,int,short,short,struct(*`,*`)),array(char),long)))->(int)
(	O
&	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
lock	union(struct(int,int,int,int,int,short,short,struct(*(struct(*`,*`)),*(struct(*`,*`)))),array(char),long)
)	O
;	O
bufctl	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
=	O
(	O
buffer	*(void)
+	O
(	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
size	long
-	O
sizeof	O
*	O
bufctl	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
)	O
)	O
;	O
put_on_slab_list	(*(struct(*(struct(*`,*`,int,*`)),*(struct(*`,*`,int,*`)),int,*(union(*`,*`)))),*(union(*(union(*`,*`)),*(struct(*`,*`,int,*`)))))->(void)
(	O
slab	*(struct)
=	O
bufctl	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
->	O
slab	*(struct)
,	O
bufctl	*(union(*(union(*(union`),*(struct`))),*(struct(*(struct`),*(struct`),int,*(union`)))))
)	O
;	O
if	O
(	O
!	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
first_free	*(struct)
||	O
slab	*(struct)
->	O
refcount	int
<	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
first_free	*(struct)
->	O
refcount	int
)	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
first_free	*(struct)
=	O
slab	*(struct)
;	O
pthread_mutex_unlock	(*(union(struct(int,int,int,int,int,short,short,struct(*`,*`)),array(char),long)))->(int)
(	O
&	O
space	*(*(struct(bool,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),long,long,long,*((*`,long,*`)->(int)),*((*`,*`,long)->(int)),*((*`,*`)->(int)),*((*`,*`)->(void)),*(void),*(struct),*(struct),*(struct),int,long)))
->	O
lock	union(struct(int,int,int,int,int,short,short,struct(*(struct(*`,*`)),*(struct(*`,*`)))),array(char),long)
)	O
;	O
}	O
