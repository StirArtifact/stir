static	O
double	O
g1_dat	array(double)
[	O
14	int
]	O
=	O
{	O
-	O
1.14516408366268311786898152867	int
,	O
0.00636085311347084238122955495	int
,	O
0.00186245193007206848934643657	int
,	O
0.000152833085873453507081227824	int
,	O
0.000017017464011802038795324732	int
,	O
-	O
6.4597502923347254354668326451e-07	int
,	O
-	O
5.1819848432519380894104312968e-08	int
,	O
4.5189092894858183051123180797e-10	int
,	O
3.2433227371020873043666259180e-11	int
,	O
6.8309434024947522875432400828e-13	int
,	O
2.8353502755172101513119628130e-14	int
,	O
-	O
7.9883905769323592875638087541e-16	int
,	O
-	O
3.3726677300771949833341213457e-17	int
,	O
-	O
3.6586334809210520744054437104e-20	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
g1_cs	struct(*(double),int,double,double,int)
=	O
{	O
g1_dat	array(double)
,	O
13	int
,	O
-	O
1	int
,	O
1	int
,	O
7	int
}	O
;	O
static	O
double	O
g2_dat	array(double)
[	O
15	int
]	O
=	O
{	O
1.882645524949671835019616975350	int
,	O
-	O
0.077490658396167518329547945212	int
,	O
-	O
0.018256714847324929419579340950	int
,	O
0.0006338030209074895795923971731	int
,	O
0.0000762290543508729021194461175	int
,	O
-	O
9.5501647561720443519853993526e-07	int
,	O
-	O
8.8927268107886351912431512955e-08	int
,	O
-	O
1.9521334772319613740511880132e-09	int
,	O
-	O
9.4003052735885162111769579771e-11	int
,	O
4.6875133849532393179290879101e-12	int
,	O
2.2658535746925759582447545145e-13	int
,	O
-	O
1.1725509698488015111878735251e-15	int
,	O
-	O
7.0441338200245222530843155877e-17	int
,	O
-	O
2.4377878310107693650659740228e-18	int
,	O
-	O
7.5225243218253901727164675011e-20	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
g2_cs	struct(*(double),int,double,double,int)
=	O
{	O
g2_dat	array(double)
,	O
14	int
,	O
-	O
1	int
,	O
1	int
,	O
8	int
}	O
;	O
static	O
int	O
gsl_sf_temme_gamma	(double,*(double),*(double),*(double),*(double))->(int)
(	O
const	O
double	O
nu	double
,	O
double	O
*	O
g_1pnu	*(double)
,	O
double	O
*	O
g_1mnu	*(double)
,	O
double	O
*	O
g1	*(double)
,	O
double	O
*	O
g2	*(double)
)	O
{	O
const	O
double	O
anu	double
=	O
fabs	(double)->(double)
(	O
nu	double
)	O
;	O
const	O
double	O
x	double
=	O
4.0	int
*	O
anu	double
-	O
1.0	int
;	O
gsl_sf_result	struct(double,double)
r_g1	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
r_g2	struct(double,double)
;	O
cheb_eval_e	(*(struct(*(double),int,double,double,int)),double,*(struct(double,double)))->(int)
(	O
&	O
g1_cs	struct(*(double),int,double,double,int)
,	O
x	double
,	O
&	O
r_g1	struct(double,double)
)	O
;	O
cheb_eval_e	(*(struct(*(double),int,double,double,int)),double,*(struct(double,double)))->(int)
(	O
&	O
g2_cs	struct(*(double),int,double,double,int)
,	O
x	double
,	O
&	O
r_g2	struct(double,double)
)	O
;	O
*	O
g1	*(double)
=	O
r_g1	struct(double,double)
.	O
val	double
;	O
*	O
g2	*(double)
=	O
r_g2	struct(double,double)
.	O
val	double
;	O
*	O
g_1mnu	*(double)
=	O
1.0	int
/	O
(	O
r_g2	struct(double,double)
.	O
val	double
+	O
nu	double
*	O
r_g1	struct(double,double)
.	O
val	double
)	O
;	O
*	O
g_1pnu	*(double)
=	O
1.0	int
/	O
(	O
r_g2	struct(double,double)
.	O
val	double
-	O
nu	double
*	O
r_g1	struct(double,double)
.	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_sf_bessel_Y_temme	(double,double,*(struct(double,double)),*(struct(double,double)))->(int)
(	O
const	O
double	O
nu	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
Ynu	*(struct(double,double))
,	O
gsl_sf_result	struct(double,double)
*	O
Ynup1	*(struct(double,double))
)	O
{	O
const	O
int	O
max_iter	int
=	O
15000	int
;	O
const	O
double	O
half_x	double
=	O
0.5	int
*	O
x	double
;	O
const	O
double	O
ln_half_x	double
=	O
log	(double)->(double)
(	O
half_x	double
)	O
;	O
const	O
double	O
half_x_nu	double
=	O
exp	(double)->(double)
(	O
nu	double
*	O
ln_half_x	double
)	O
;	O
const	O
double	O
pi_nu	double
=	O
M_PI	int
*	O
nu	double
;	O
const	O
double	O
alpha	double
=	O
pi_nu	double
/	O
2.0	int
;	O
const	O
double	O
sigma	double
=	O
-	O
nu	double
*	O
ln_half_x	double
;	O
const	O
double	O
sinrat	double
=	O
(	O
fabs	(double)->(double)
(	O
pi_nu	double
)	O
<	O
GSL_DBL_EPSILON	int
?	O
1.0	int
:	O
pi_nu	double
/	O
sin	(double)->(double)
(	O
pi_nu	double
)	O
)	O
;	O
const	O
double	O
sinhrat	double
=	O
(	O
fabs	(double)->(double)
(	O
sigma	double
)	O
<	O
GSL_DBL_EPSILON	int
?	O
1.0	int
:	O
sinh	(double)->(double)
(	O
sigma	double
)	O
/	O
sigma	double
)	O
;	O
const	O
double	O
sinhalf	double
=	O
(	O
fabs	(double)->(double)
(	O
alpha	double
)	O
<	O
GSL_DBL_EPSILON	int
?	O
1.0	int
:	O
sin	(double)->(double)
(	O
alpha	double
)	O
/	O
alpha	double
)	O
;	O
const	O
double	O
sin_sqr	double
=	O
nu	double
*	O
M_PI	int
*	O
M_PI	int
*	O
0.5	int
*	O
sinhalf	double
*	O
sinhalf	double
;	O
double	O
sum0	double
,	O
sum1	double
;	O
double	O
fk	double
,	O
pk	double
,	O
qk	double
,	O
hk	double
,	O
ck	double
;	O
int	O
k	int
=	O
0	int
;	O
int	O
stat_iter	int
;	O
double	O
g_1pnu	*(double)
,	O
g_1mnu	*(double)
,	O
g1	*(double)
,	O
g2	*(double)
;	O
int	O
stat_g	int
=	O
gsl_sf_temme_gamma	(double,*(double),*(double),*(double),*(double))->(int)
(	O
nu	double
,	O
&	O
g_1pnu	*(double)
,	O
&	O
g_1mnu	*(double)
,	O
&	O
g1	*(double)
,	O
&	O
g2	*(double)
)	O
;	O
fk	double
=	O
2.0	int
/	O
M_PI	int
*	O
sinrat	double
*	O
(	O
cosh	(double)->(double)
(	O
sigma	double
)	O
*	O
g1	*(double)
-	O
sinhrat	double
*	O
ln_half_x	double
*	O
g2	*(double)
)	O
;	O
pk	double
=	O
1.0	int
/	O
M_PI	int
/	O
half_x_nu	double
*	O
g_1pnu	*(double)
;	O
qk	double
=	O
1.0	int
/	O
M_PI	int
*	O
half_x_nu	double
*	O
g_1mnu	*(double)
;	O
hk	double
=	O
pk	double
;	O
ck	double
=	O
1.0	int
;	O
sum0	double
=	O
fk	double
+	O
sin_sqr	double
*	O
qk	double
;	O
sum1	double
=	O
pk	double
;	O
while	O
(	O
k	int
<	O
max_iter	int
)	O
{	O
double	O
del0	double
;	O
double	O
del1	double
;	O
double	O
gk	double
;	O
k	int
++	O
;	O
fk	double
=	O
(	O
k	int
*	O
fk	double
+	O
pk	double
+	O
qk	double
)	O
/	O
(	O
k	int
*	O
k	int
-	O
nu	double
*	O
nu	double
)	O
;	O
ck	double
*=	O
-	O
half_x	double
*	O
half_x	double
/	O
k	int
;	O
pk	double
/=	O
(	O
k	int
-	O
nu	double
)	O
;	O
qk	double
/=	O
(	O
k	int
+	O
nu	double
)	O
;	O
gk	double
=	O
fk	double
+	O
sin_sqr	double
*	O
qk	double
;	O
hk	double
=	O
-	O
k	int
*	O
gk	double
+	O
pk	double
;	O
del0	double
=	O
ck	double
*	O
gk	double
;	O
del1	double
=	O
ck	double
*	O
hk	double
;	O
sum0	double
+=	O
del0	double
;	O
sum1	double
+=	O
del1	double
;	O
if	O
(	O
fabs	(double)->(double)
(	O
del0	double
)	O
<	O
0.5	int
*	O
(	O
1.0	int
+	O
fabs	(double)->(double)
(	O
sum0	double
)	O
)	O
*	O
GSL_DBL_EPSILON	int
)	O
break	O
;	O
}	O
Ynu	*(struct(double,double))
->	O
val	double
=	O
-	O
sum0	double
;	O
Ynu	*(struct(double,double))
->	O
err	double
=	O
(	O
2.0	int
+	O
0.5	int
*	O
k	int
)	O
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
Ynu	*(struct(double,double))
->	O
val	double
)	O
;	O
Ynup1	*(struct(double,double))
->	O
val	double
=	O
-	O
sum1	double
*	O
2.0	int
/	O
x	double
;	O
Ynup1	*(struct(double,double))
->	O
err	double
=	O
(	O
2.0	int
+	O
0.5	int
*	O
k	int
)	O
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
Ynup1	*(struct(double,double))
->	O
val	double
)	O
;	O
stat_iter	int
=	O
(	O
k	int
>=	O
max_iter	int
?	O
GSL_EMAXITER	int
:	O
GSL_SUCCESS	int
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_iter	int
,	O
stat_g	int
)	O
;	O
}	O
int	O
gsl_sf_bessel_K_scaled_temme	(double,double,*(double),*(double),*(double))->(int)
(	O
const	O
double	O
nu	double
,	O
const	O
double	O
x	double
,	O
double	O
*	O
K_nu	*(double)
,	O
double	O
*	O
K_nup1	*(double)
,	O
double	O
*	O
Kp_nu	*(double)
)	O
{	O
const	O
int	O
max_iter	int
=	O
15000	int
;	O
const	O
double	O
half_x	double
=	O
0.5	int
*	O
x	double
;	O
const	O
double	O
ln_half_x	double
=	O
log	(double)->(double)
(	O
half_x	double
)	O
;	O
const	O
double	O
half_x_nu	double
=	O
exp	(double)->(double)
(	O
nu	double
*	O
ln_half_x	double
)	O
;	O
const	O
double	O
pi_nu	double
=	O
M_PI	int
*	O
nu	double
;	O
const	O
double	O
sigma	double
=	O
-	O
nu	double
*	O
ln_half_x	double
;	O
const	O
double	O
sinrat	double
=	O
(	O
fabs	(double)->(double)
(	O
pi_nu	double
)	O
<	O
GSL_DBL_EPSILON	int
?	O
1.0	int
:	O
pi_nu	double
/	O
sin	(double)->(double)
(	O
pi_nu	double
)	O
)	O
;	O
const	O
double	O
sinhrat	double
=	O
(	O
fabs	(double)->(double)
(	O
sigma	double
)	O
<	O
GSL_DBL_EPSILON	int
?	O
1.0	int
:	O
sinh	(double)->(double)
(	O
sigma	double
)	O
/	O
sigma	double
)	O
;	O
const	O
double	O
ex	double
=	O
exp	(double)->(double)
(	O
x	double
)	O
;	O
double	O
sum0	double
,	O
sum1	double
;	O
double	O
fk	double
,	O
pk	double
,	O
qk	double
,	O
hk	double
,	O
ck	double
;	O
int	O
k	int
=	O
0	int
;	O
int	O
stat_iter	int
;	O
double	O
g_1pnu	*(double)
,	O
g_1mnu	*(double)
,	O
g1	*(double)
,	O
g2	*(double)
;	O
int	O
stat_g	int
=	O
gsl_sf_temme_gamma	(double,*(double),*(double),*(double),*(double))->(int)
(	O
nu	double
,	O
&	O
g_1pnu	*(double)
,	O
&	O
g_1mnu	*(double)
,	O
&	O
g1	*(double)
,	O
&	O
g2	*(double)
)	O
;	O
fk	double
=	O
sinrat	double
*	O
(	O
cosh	(double)->(double)
(	O
sigma	double
)	O
*	O
g1	*(double)
-	O
sinhrat	double
*	O
ln_half_x	double
*	O
g2	*(double)
)	O
;	O
pk	double
=	O
0.5	int
/	O
half_x_nu	double
*	O
g_1pnu	*(double)
;	O
qk	double
=	O
0.5	int
*	O
half_x_nu	double
*	O
g_1mnu	*(double)
;	O
hk	double
=	O
pk	double
;	O
ck	double
=	O
1.0	int
;	O
sum0	double
=	O
fk	double
;	O
sum1	double
=	O
hk	double
;	O
while	O
(	O
k	int
<	O
max_iter	int
)	O
{	O
double	O
del0	double
;	O
double	O
del1	double
;	O
k	int
++	O
;	O
fk	double
=	O
(	O
k	int
*	O
fk	double
+	O
pk	double
+	O
qk	double
)	O
/	O
(	O
k	int
*	O
k	int
-	O
nu	double
*	O
nu	double
)	O
;	O
ck	double
*=	O
half_x	double
*	O
half_x	double
/	O
k	int
;	O
pk	double
/=	O
(	O
k	int
-	O
nu	double
)	O
;	O
qk	double
/=	O
(	O
k	int
+	O
nu	double
)	O
;	O
hk	double
=	O
-	O
k	int
*	O
fk	double
+	O
pk	double
;	O
del0	double
=	O
ck	double
*	O
fk	double
;	O
del1	double
=	O
ck	double
*	O
hk	double
;	O
sum0	double
+=	O
del0	double
;	O
sum1	double
+=	O
del1	double
;	O
if	O
(	O
fabs	(double)->(double)
(	O
del0	double
)	O
<	O
0.5	int
*	O
fabs	(double)->(double)
(	O
sum0	double
)	O
*	O
GSL_DBL_EPSILON	int
)	O
break	O
;	O
}	O
*	O
K_nu	*(double)
=	O
sum0	double
*	O
ex	double
;	O
*	O
K_nup1	*(double)
=	O
sum1	double
*	O
2.0	int
/	O
x	double
*	O
ex	double
;	O
*	O
Kp_nu	*(double)
=	O
-	O
*	O
K_nup1	*(double)
+	O
nu	double
/	O
x	double
*	O
*	O
K_nu	*(double)
;	O
stat_iter	int
=	O
(	O
k	int
==	O
max_iter	int
?	O
GSL_EMAXITER	int
:	O
GSL_SUCCESS	int
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_iter	int
,	O
stat_g	int
)	O
;	O
}	O
