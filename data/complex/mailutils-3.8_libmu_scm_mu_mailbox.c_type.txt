static	O
scm_t_bits	O
mailbox_tag	int
;	O
struct	O
mu_mailbox	struct(*(struct),*(struct),int)
{	O
mu_mailbox_t	*(struct)
mbox	*(struct)
;	O
mu_iterator_t	*(struct)
itr	*(struct)
;	O
int	O
noclose	int
;	O
}	O
;	O
static	O
size_t	long
mu_scm_mailbox_free	(int)->(long)
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mailbox_smob	int
)	O
{	O
struct	O
mu_mailbox	struct(*(struct),*(struct),int)
*	O
mum	*(struct(*(struct),*(struct),int))
=	O
(	O
struct	O
mu_mailbox	struct(*(struct),*(struct),int)
*	O
)	O
SCM_CDR	()->(int)
(	O
mailbox_smob	int
)	O
;	O
mu_iterator_destroy	()->(int)
(	O
&	O
mum	*(struct(*(struct),*(struct),int))
->	O
itr	*(struct)
)	O
;	O
if	O
(	O
!	O
mum	*(struct(*(struct),*(struct),int))
->	O
noclose	int
)	O
{	O
mu_mailbox_close	(*(struct))->(int)
(	O
mum	*(struct(*(struct),*(struct),int))
->	O
mbox	*(struct)
)	O
;	O
mu_mailbox_destroy	(*(*(struct)))->(void)
(	O
&	O
mum	*(struct(*(struct),*(struct),int))
->	O
mbox	*(struct)
)	O
;	O
}	O
return	O
sizeof	O
0	int
;	O
}	O
static	O
int	O
mu_scm_mailbox_print	(int,int,*(int))->(int)
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mailbox_smob	int
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
port	int
,	O
scm_print_state	O
*	O
pstate	*(int)
)	O
{	O
struct	O
mu_mailbox	struct(*(struct),*(struct),int)
*	O
mum	*(struct(*(struct),*(struct),int))
=	O
(	O
struct	O
mu_mailbox	struct(*(struct),*(struct),int)
*	O
)	O
SCM_CDR	()->(int)
(	O
mailbox_smob	int
)	O
;	O
size_t	long
count	*(long)
=	O
0	int
;	O
mu_url_t	*(struct)
url	*(struct)
=	O
NULL	O
;	O
mu_mailbox_get_url	(*(struct),*(*(struct)))->(int)
(	O
mum	*(struct(*(struct),*(struct),int))
->	O
mbox	*(struct)
,	O
&	O
url	*(struct)
)	O
;	O
scm_puts	()->(int)
(	O
"#<mailbox "	*(char)
,	O
port	int
)	O
;	O
if	O
(	O
mailbox_smob	int
==	O
SCM_BOOL_F	O
)	O
{	O
scm_puts	()->(int)
(	O
"#f"	*(char)
,	O
port	int
)	O
;	O
}	O
else	O
{	O
const	O
char	O
*	O
p	*(char)
=	O
mu_url_to_string	(*(struct))->(*(char))
(	O
url	*(struct)
)	O
;	O
if	O
(	O
p	*(char)
)	O
{	O
mu_mailbox_messages_count	(*(struct),*(long))->(int)
(	O
mum	*(struct(*(struct),*(struct),int))
->	O
mbox	*(struct)
,	O
&	O
count	*(long)
)	O
;	O
scm_puts	()->(int)
(	O
p	*(char)
,	O
port	int
)	O
;	O
scm_puts	()->(int)
(	O
" ("	*(char)
,	O
port	int
)	O
;	O
scm_intprint	()->(int)
(	O
count	*(long)
,	O
10	int
,	O
port	int
)	O
;	O
scm_putc	()->(int)
(	O
')'	O
,	O
port	int
)	O
;	O
}	O
else	O
scm_puts	()->(int)
(	O
"uninitialized"	*(char)
,	O
port	int
)	O
;	O
}	O
scm_puts	()->(int)
(	O
">"	*(char)
,	O
port	int
)	O
;	O
return	O
1	int
;	O
}	O
SCM	(*(int))->((*(void),*(struct))->(int))
mu_scm_mailbox_create0	(*(struct),int)->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
int	O
noclose	int
)	O
{	O
struct	O
mu_mailbox	struct(*(struct),*(struct),int)
*	O
mum	*(struct(*(struct),*(struct),int))
;	O
mum	*(struct(*(struct),*(struct),int))
=	O
scm_gc_malloc	()->(int)
(	O
sizeof	O
(	O
struct	O
mu_mailbox	struct(*(struct),*(struct),int)
)	O
,	O
"mailbox"	*(char)
)	O
;	O
mum	*(struct(*(struct),*(struct),int))
->	O
mbox	*(struct)
=	O
mbox	*(struct)
;	O
mum	*(struct(*(struct),*(struct),int))
->	O
itr	*(struct)
=	O
NULL	O
;	O
mum	*(struct(*(struct),*(struct),int))
->	O
noclose	int
=	O
noclose	int
;	O
SCM_RETURN_NEWSMOB	()->(int)
(	O
mailbox_tag	int
,	O
mum	*(struct(*(struct),*(struct),int))
)	O
;	O
}	O
SCM	(*(int))->((*(void),*(struct))->(int))
mu_scm_mailbox_create	(*(struct))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
)	O
{	O
return	O
mu_scm_mailbox_create0	(*(struct),int)->(int)
(	O
mbox	*(struct)
,	O
0	int
)	O
;	O
}	O
int	O
mu_scm_is_mailbox	(int)->(int)
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
scm	int
)	O
{	O
return	O
SCM_NIMP	()->(int)
(	O
scm	int
)	O
&&	O
(	O
long	O
)	O
SCM_CAR	()->(int)
(	O
scm	int
)	O
==	O
mailbox_tag	int
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_mailbox_p	O
,	O
"mu-mailbox?"	*(char)
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
scm	int
)	O
,	O
"Return @code{true} if @var{scm} is a Mailutils mailbox.\n"	*(char)
)	O
{	O
return	O
scm_from_bool	()->(int)
(	O
mu_scm_is_mailbox	(int)->(int)
(	O
scm	int
)	O
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_user_mailbox_url	O
,	O
"mu-user-mailbox-url"	*(char)
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
user	*(char)
)	O
,	O
"Return URL of the default mailbox for user @var{user}."	*(char)
)	O
{	O
int	O
rc	int
;	O
char	O
*	O
p	*(char)
,	O
*	O
str	*(struct)
;	O
SCM	(*(int))->((*(void),*(struct))->(int))
ret	*(*(struct))
;	O
SCM_ASSERT	()->(int)
(	O
scm_is_string	()->(int)
(	O
user	*(char)
)	O
,	O
user	*(char)
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
str	*(struct)
=	O
scm_to_locale_string	()->(int)
(	O
user	*(char)
)	O
;	O
rc	int
=	O
mu_construct_user_mailbox_url	(*(*(char)),*(char))->(int)
(	O
&	O
p	*(char)
,	O
str	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
str	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
rc	int
,	O
"Cannot construct mailbox URL for ~A"	*(char)
,	O
scm_list_1	()->(int)
(	O
user	*(char)
)	O
)	O
;	O
ret	*(*(struct))
=	O
scm_from_locale_string	()->(int)
(	O
p	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
p	*(char)
)	O
;	O
return	O
ret	*(*(struct))
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_folder_directory	O
,	O
"mu-folder-directory"	*(char)
,	O
0	int
,	O
1	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
url	*(struct)
)	O
,	O
"If @var{url} is given, sets it as a name of the user's folder directory.\n"	*(char)
"Returns the current value of the folder directory."	*(char)
)	O
{	O
if	O
(	O
!	O
SCM_UNBNDP	()->(int)
(	O
url	*(struct)
)	O
)	O
{	O
char	O
*	O
s	*(char)
;	O
SCM_ASSERT	()->(int)
(	O
scm_is_string	()->(int)
(	O
url	*(struct)
)	O
,	O
url	*(struct)
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
s	*(char)
=	O
scm_to_locale_string	()->(int)
(	O
url	*(struct)
)	O
;	O
mu_set_folder_directory	(*(char))->(int)
(	O
s	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
s	*(char)
)	O
;	O
}	O
return	O
scm_from_locale_string	()->(int)
(	O
mu_folder_directory	()->(*(char))
(	O
)	O
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_mailbox_open	O
,	O
"mu-mailbox-open"	*(char)
,	O
2	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
url	*(struct)
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
mode	int
)	O
,	O
"Opens the mailbox specified by @var{url}. The @var{mode} argument defines\n"	*(char)
"access mode for the mailbox. It is a string, consisting of one or more of the\n"	*(char)
"following characters:\n"	*(char)
"\n"	*(char)
"@multitable @columnfractions 0.20 0.70\n"	*(char)
"@headitem @var{mode} @tab Meaning\n"	*(char)
"@item r @tab Open for reading.\n"	*(char)
"@item w @tab Open for writing.\n"	*(char)
"@item a @tab Open for appending to the end of the mailbox.\n"	*(char)
"@item c @tab Create the mailbox if it does not exist.\n"	*(char)
"@end multitable\n"	*(char)
)	O
{	O
mu_mailbox_t	*(struct)
mbox	*(struct)
=	O
NULL	O
;	O
char	O
*	O
mode_str	*(char)
;	O
int	O
mode_bits	int
=	O
0	int
;	O
int	O
status	int
;	O
SCM	(*(int))->((*(void),*(struct))->(int))
ret	*(*(struct))
;	O
SCM_ASSERT	()->(int)
(	O
scm_is_bool	()->(int)
(	O
url	*(struct)
)	O
||	O
scm_is_string	()->(int)
(	O
url	*(struct)
)	O
,	O
url	*(struct)
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
SCM_ASSERT	()->(int)
(	O
scm_is_string	()->(int)
(	O
mode	int
)	O
,	O
mode	int
,	O
SCM_ARG2	O
,	O
FUNC_NAME	O
)	O
;	O
scm_dynwind_begin	()->(int)
(	O
0	int
)	O
;	O
mode_str	*(char)
=	O
scm_to_locale_string	()->(int)
(	O
mode	int
)	O
;	O
scm_dynwind_free	()->(int)
(	O
mode_str	*(char)
)	O
;	O
for	O
(	O
;	O
*	O
mode_str	*(char)
;	O
mode_str	*(char)
++	O
)	O
switch	O
(	O
*	O
mode_str	*(char)
)	O
{	O
case	O
'r'	O
:	O
mode_bits	int
|=	O
MU_STREAM_READ	int
;	O
break	O
;	O
case	O
'w'	O
:	O
mode_bits	int
|=	O
MU_STREAM_WRITE	int
;	O
break	O
;	O
case	O
'a'	O
:	O
mode_bits	int
|=	O
MU_STREAM_APPEND	int
;	O
break	O
;	O
case	O
'c'	O
:	O
mode_bits	int
|=	O
MU_STREAM_CREAT	int
;	O
break	O
;	O
}	O
if	O
(	O
mode_bits	int
&	O
MU_STREAM_READ	int
&&	O
mode_bits	int
&	O
MU_STREAM_WRITE	int
)	O
mode_bits	int
=	O
(	O
mode_bits	int
&	O
~	O
(	O
MU_STREAM_READ	int
|	O
MU_STREAM_WRITE	int
)	O
)	O
|	O
MU_STREAM_RDWR	O
;	O
if	O
(	O
scm_is_bool	()->(int)
(	O
url	*(struct)
)	O
)	O
{	O
if	O
(	O
url	*(struct)
==	O
SCM_BOOL_F	O
)	O
mode_str	*(char)
=	O
NULL	O
;	O
else	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
EINVAL	int
,	O
"value #t for URL is reserved for future use"	*(char)
,	O
scm_list_1	()->(int)
(	O
url	*(struct)
)	O
)	O
;	O
}	O
else	O
{	O
mode_str	*(char)
=	O
scm_to_locale_string	()->(int)
(	O
url	*(struct)
)	O
;	O
scm_dynwind_free	()->(int)
(	O
mode_str	*(char)
)	O
;	O
}	O
status	int
=	O
mu_mailbox_create_default	(*(*(struct)),*(char))->(int)
(	O
&	O
mbox	*(struct)
,	O
mode_str	*(char)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot create default mailbox ~A"	*(char)
,	O
scm_list_1	()->(int)
(	O
url	*(struct)
)	O
)	O
;	O
status	int
=	O
mu_mailbox_open	(*(struct),int)->(int)
(	O
mbox	*(struct)
,	O
mode_bits	int
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_mailbox_destroy	(*(*(struct)))->(void)
(	O
&	O
mbox	*(struct)
)	O
;	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot open default mailbox ~A"	*(char)
,	O
scm_list_1	()->(int)
(	O
url	*(struct)
)	O
)	O
;	O
}	O
ret	*(*(struct))
=	O
mu_scm_mailbox_create	(*(struct))->(int)
(	O
mbox	*(struct)
)	O
;	O
scm_dynwind_end	()->(int)
(	O
)	O
;	O
return	O
ret	*(*(struct))
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_mailbox_close	O
,	O
"mu-mailbox-close"	*(char)
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mbox	*(struct)
)	O
,	O
"Closes mailbox @var{mbox}."	*(char)
)	O
{	O
struct	O
mu_mailbox	struct(*(struct),*(struct),int)
*	O
mum	*(struct(*(struct),*(struct),int))
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_mailbox	(int)->(int)
(	O
mbox	*(struct)
)	O
,	O
mbox	*(struct)
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
mum	*(struct(*(struct),*(struct),int))
=	O
(	O
struct	O
mu_mailbox	struct(*(struct),*(struct),int)
*	O
)	O
SCM_CDR	()->(int)
(	O
mbox	*(struct)
)	O
;	O
mu_mailbox_close	(*(struct))->(int)
(	O
mum	*(struct(*(struct),*(struct),int))
->	O
mbox	*(struct)
)	O
;	O
mu_mailbox_destroy	(*(*(struct)))->(void)
(	O
&	O
mum	*(struct(*(struct),*(struct),int))
->	O
mbox	*(struct)
)	O
;	O
return	O
SCM_UNSPECIFIED	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_mailbox_get_url	O
,	O
"mu-mailbox-get-url"	*(char)
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mbox	*(struct)
)	O
,	O
"Returns URL of the mailbox @var{MBOX}."	*(char)
)	O
{	O
struct	O
mu_mailbox	struct(*(struct),*(struct),int)
*	O
mum	*(struct(*(struct),*(struct),int))
;	O
mu_url_t	*(struct)
url	*(struct)
;	O
int	O
status	int
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_mailbox	(int)->(int)
(	O
mbox	*(struct)
)	O
,	O
mbox	*(struct)
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
mum	*(struct(*(struct),*(struct),int))
=	O
(	O
struct	O
mu_mailbox	struct(*(struct),*(struct),int)
*	O
)	O
SCM_CDR	()->(int)
(	O
mbox	*(struct)
)	O
;	O
status	int
=	O
mu_mailbox_get_url	(*(struct),*(*(struct)))->(int)
(	O
mum	*(struct(*(struct),*(struct),int))
->	O
mbox	*(struct)
,	O
&	O
url	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get mailbox url"	*(char)
,	O
SCM_BOOL_F	O
)	O
;	O
return	O
scm_from_locale_string	()->(int)
(	O
mu_url_to_string	(*(struct))->(*(char))
(	O
url	*(struct)
)	O
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_mailbox_get_message	O
,	O
"mu-mailbox-get-message"	*(char)
,	O
2	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mbox	*(struct)
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
msgno	long
)	O
,	O
"Retrieve from message #@var{msgno} from the mailbox @var{mbox}."	*(char)
)	O
{	O
size_t	long
n	int
;	O
struct	O
mu_mailbox	struct(*(struct),*(struct),int)
*	O
mum	*(struct(*(struct),*(struct),int))
;	O
mu_message_t	*(struct)
msg	*(struct)
;	O
int	O
status	int
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_mailbox	(int)->(int)
(	O
mbox	*(struct)
)	O
,	O
mbox	*(struct)
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
SCM_ASSERT	()->(int)
(	O
scm_is_integer	()->(int)
(	O
msgno	long
)	O
,	O
msgno	long
,	O
SCM_ARG2	O
,	O
FUNC_NAME	O
)	O
;	O
mum	*(struct(*(struct),*(struct),int))
=	O
(	O
struct	O
mu_mailbox	struct(*(struct),*(struct),int)
*	O
)	O
SCM_CDR	()->(int)
(	O
mbox	*(struct)
)	O
;	O
n	int
=	O
scm_to_size_t	()->(int)
(	O
msgno	long
)	O
;	O
status	int
=	O
mu_mailbox_get_message	(*(struct),long,*(*(struct)))->(int)
(	O
mum	*(struct(*(struct),*(struct),int))
->	O
mbox	*(struct)
,	O
n	int
,	O
&	O
msg	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get message ~A from mailbox ~A"	*(char)
,	O
scm_list_2	()->(int)
(	O
msgno	long
,	O
mbox	*(struct)
)	O
)	O
;	O
return	O
mu_scm_message_create	(int,*(struct))->(int)
(	O
mbox	*(struct)
,	O
msg	*(struct)
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_mailbox_messages_count	O
,	O
"mu-mailbox-messages-count"	*(char)
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mbox	*(struct)
)	O
,	O
"Returns number of messages in the mailbox @var{mbox}."	*(char)
)	O
{	O
struct	O
mu_mailbox	struct(*(struct),*(struct),int)
*	O
mum	*(struct(*(struct),*(struct),int))
;	O
size_t	long
nmesg	long
;	O
int	O
status	int
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_mailbox	(int)->(int)
(	O
mbox	*(struct)
)	O
,	O
mbox	*(struct)
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
mum	*(struct(*(struct),*(struct),int))
=	O
(	O
struct	O
mu_mailbox	struct(*(struct),*(struct),int)
*	O
)	O
SCM_CDR	()->(int)
(	O
mbox	*(struct)
)	O
;	O
status	int
=	O
mu_mailbox_messages_count	(*(struct),*(long))->(int)
(	O
mum	*(struct(*(struct),*(struct),int))
->	O
mbox	*(struct)
,	O
&	O
nmesg	long
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot count messages in mailbox ~A"	*(char)
,	O
scm_list_1	()->(int)
(	O
mbox	*(struct)
)	O
)	O
;	O
return	O
scm_from_size_t	()->(int)
(	O
nmesg	long
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_mailbox_expunge	O
,	O
"mu-mailbox-expunge"	*(char)
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mbox	*(struct)
)	O
,	O
"Expunges deleted messages from the mailbox @var{mbox}."	*(char)
)	O
{	O
struct	O
mu_mailbox	struct(*(struct),*(struct),int)
*	O
mum	*(struct(*(struct),*(struct),int))
;	O
int	O
status	int
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_mailbox	(int)->(int)
(	O
mbox	*(struct)
)	O
,	O
mbox	*(struct)
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
mum	*(struct(*(struct),*(struct),int))
=	O
(	O
struct	O
mu_mailbox	struct(*(struct),*(struct),int)
*	O
)	O
SCM_CDR	()->(int)
(	O
mbox	*(struct)
)	O
;	O
status	int
=	O
mu_mailbox_expunge	(*(struct))->(int)
(	O
mum	*(struct(*(struct),*(struct),int))
->	O
mbox	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot expunge messages in mailbox ~A"	*(char)
,	O
scm_list_1	()->(int)
(	O
mbox	*(struct)
)	O
)	O
;	O
return	O
SCM_BOOL_T	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_mailbox_sync	O
,	O
"mu-mailbox-sync"	*(char)
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mbox	*(struct)
)	O
,	O
"Synchronize changes to @var{mbox} with its storage."	*(char)
)	O
{	O
struct	O
mu_mailbox	struct(*(struct),*(struct),int)
*	O
mum	*(struct(*(struct),*(struct),int))
;	O
int	O
status	int
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_mailbox	(int)->(int)
(	O
mbox	*(struct)
)	O
,	O
mbox	*(struct)
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
mum	*(struct(*(struct),*(struct),int))
=	O
(	O
struct	O
mu_mailbox	struct(*(struct),*(struct),int)
*	O
)	O
SCM_CDR	()->(int)
(	O
mbox	*(struct)
)	O
;	O
status	int
=	O
mu_mailbox_sync	(*(struct))->(int)
(	O
mum	*(struct(*(struct),*(struct),int))
->	O
mbox	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Sync failed for mailbox ~A"	*(char)
,	O
scm_list_1	()->(int)
(	O
mbox	*(struct)
)	O
)	O
;	O
return	O
SCM_BOOL_T	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_mailbox_flush	O
,	O
"mu-mailbox-flush"	*(char)
,	O
1	int
,	O
1	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mbox	*(struct)
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
expunge	int
)	O
,	O
"Mark all messages in @var{mbox} as seen and synchronize all changes with "	*(char)
"its storage.  If @var{expunge} is @samp{#t}, expunge deleted messages "	*(char)
"as well."	*(char)
)	O
{	O
struct	O
mu_mailbox	struct(*(struct),*(struct),int)
*	O
mum	*(struct(*(struct),*(struct),int))
;	O
int	O
status	int
,	O
do_expunge	int
=	O
0	int
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_mailbox	(int)->(int)
(	O
mbox	*(struct)
)	O
,	O
mbox	*(struct)
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
mum	*(struct(*(struct),*(struct),int))
=	O
(	O
struct	O
mu_mailbox	struct(*(struct),*(struct),int)
*	O
)	O
SCM_CDR	()->(int)
(	O
mbox	*(struct)
)	O
;	O
if	O
(	O
!	O
SCM_UNBNDP	()->(int)
(	O
expunge	int
)	O
)	O
{	O
SCM_ASSERT	()->(int)
(	O
scm_is_bool	()->(int)
(	O
expunge	int
)	O
,	O
expunge	int
,	O
SCM_ARG2	O
,	O
FUNC_NAME	O
)	O
;	O
do_expunge	int
=	O
expunge	int
==	O
SCM_BOOL_T	O
;	O
}	O
status	int
=	O
mu_mailbox_flush	(*(struct),int)->(int)
(	O
mum	*(struct(*(struct),*(struct),int))
->	O
mbox	*(struct)
,	O
do_expunge	int
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Flush failed for mailbox ~A"	*(char)
,	O
scm_list_1	()->(int)
(	O
mbox	*(struct)
)	O
)	O
;	O
return	O
SCM_BOOL_T	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_mailbox_append_message	O
,	O
"mu-mailbox-append-message"	*(char)
,	O
2	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mbox	*(struct)
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
mesg	int
)	O
,	O
"Appends message @var{mesg} to the mailbox @var{mbox}."	*(char)
)	O
{	O
struct	O
mu_mailbox	struct(*(struct),*(struct),int)
*	O
mum	*(struct(*(struct),*(struct),int))
;	O
mu_message_t	*(struct)
msg	*(struct)
;	O
int	O
status	int
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_mailbox	(int)->(int)
(	O
mbox	*(struct)
)	O
,	O
mbox	*(struct)
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_message	(int)->(int)
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG2	O
,	O
FUNC_NAME	O
)	O
;	O
mum	*(struct(*(struct),*(struct),int))
=	O
(	O
struct	O
mu_mailbox	struct(*(struct),*(struct),int)
*	O
)	O
SCM_CDR	()->(int)
(	O
mbox	*(struct)
)	O
;	O
msg	*(struct)
=	O
mu_scm_message_get	(int)->(*(struct))
(	O
mesg	int
)	O
;	O
status	int
=	O
mu_mailbox_append_message	(*(struct),*(struct))->(int)
(	O
mum	*(struct(*(struct),*(struct),int))
->	O
mbox	*(struct)
,	O
msg	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot append message ~A to mailbox ~A"	*(char)
,	O
scm_list_2	()->(int)
(	O
mesg	int
,	O
mbox	*(struct)
)	O
)	O
;	O
return	O
SCM_BOOL_T	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_mailbox_first_message	O
,	O
"mu-mailbox-first-message"	*(char)
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mbox	*(struct)
)	O
,	O
"Returns first message from the mailbox @var{mbox}."	*(char)
)	O
{	O
struct	O
mu_mailbox	struct(*(struct),*(struct),int)
*	O
mum	*(struct(*(struct),*(struct),int))
;	O
int	O
status	int
;	O
mu_message_t	*(struct)
msg	*(struct)
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_mailbox	(int)->(int)
(	O
mbox	*(struct)
)	O
,	O
mbox	*(struct)
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
mum	*(struct(*(struct),*(struct),int))
=	O
(	O
struct	O
mu_mailbox	struct(*(struct),*(struct),int)
*	O
)	O
SCM_CDR	()->(int)
(	O
mbox	*(struct)
)	O
;	O
if	O
(	O
!	O
mum	*(struct(*(struct),*(struct),int))
->	O
itr	*(struct)
)	O
{	O
status	int
=	O
mu_mailbox_get_iterator	(*(struct),*(*(struct)))->(int)
(	O
mum	*(struct(*(struct),*(struct),int))
->	O
mbox	*(struct)
,	O
&	O
mum	*(struct(*(struct),*(struct),int))
->	O
itr	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"~A: cannot create iterator: ~A"	*(char)
,	O
scm_list_2	()->(int)
(	O
mbox	*(struct)
,	O
scm_from_locale_string	()->(int)
(	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
)	O
)	O
;	O
}	O
ITROP	O
(	O
mu_iterator_first	()->(int)
(	O
mum	*(struct(*(struct),*(struct),int))
->	O
itr	*(struct)
)	O
,	O
"moving to the first message"	*(char)
)	O
;	O
ITROP	O
(	O
mu_iterator_current	()->(int)
(	O
mum	*(struct(*(struct),*(struct),int))
->	O
itr	*(struct)
,	O
(	O
void	O
*	O
*	O
)	O
&	O
msg	*(struct)
)	O
,	O
"getting current message"	*(char)
)	O
;	O
return	O
mu_scm_message_create	(int,*(struct))->(int)
(	O
mbox	*(struct)
,	O
msg	*(struct)
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_mailbox_next_message	O
,	O
"mu-mailbox-next-message"	*(char)
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mbox	*(struct)
)	O
,	O
"Returns next message from the mailbox @var{mbox}."	*(char)
)	O
{	O
struct	O
mu_mailbox	struct(*(struct),*(struct),int)
*	O
mum	*(struct(*(struct),*(struct),int))
;	O
int	O
status	int
;	O
mu_message_t	*(struct)
msg	*(struct)
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_mailbox	(int)->(int)
(	O
mbox	*(struct)
)	O
,	O
mbox	*(struct)
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
mum	*(struct(*(struct),*(struct),int))
=	O
(	O
struct	O
mu_mailbox	struct(*(struct),*(struct),int)
*	O
)	O
SCM_CDR	()->(int)
(	O
mbox	*(struct)
)	O
;	O
if	O
(	O
!	O
mum	*(struct(*(struct),*(struct),int))
->	O
itr	*(struct)
)	O
{	O
status	int
=	O
mu_mailbox_get_iterator	(*(struct),*(*(struct)))->(int)
(	O
mum	*(struct(*(struct),*(struct),int))
->	O
mbox	*(struct)
,	O
&	O
mum	*(struct(*(struct),*(struct),int))
->	O
itr	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"~A: cannot create iterator: ~A"	*(char)
,	O
scm_list_2	()->(int)
(	O
mbox	*(struct)
,	O
scm_from_locale_string	()->(int)
(	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
)	O
)	O
;	O
ITROP	O
(	O
mu_iterator_first	()->(int)
(	O
mum	*(struct(*(struct),*(struct),int))
->	O
itr	*(struct)
)	O
,	O
"moving to the first message"	*(char)
)	O
;	O
}	O
else	O
ITROP	O
(	O
mu_iterator_next	()->(int)
(	O
mum	*(struct(*(struct),*(struct),int))
->	O
itr	*(struct)
)	O
,	O
"advancing iterator"	*(char)
)	O
;	O
ITROP	O
(	O
mu_iterator_current	()->(int)
(	O
mum	*(struct(*(struct),*(struct),int))
->	O
itr	*(struct)
,	O
(	O
void	O
*	O
*	O
)	O
&	O
msg	*(struct)
)	O
,	O
"getting current message"	*(char)
)	O
;	O
return	O
mu_scm_message_create	(int,*(struct))->(int)
(	O
mbox	*(struct)
,	O
msg	*(struct)
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_mailbox_more_messages_p	O
,	O
"mu-mailbox-more-messages?"	*(char)
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mbox	*(struct)
)	O
,	O
"Returns @samp{#t} if there are more messages in the mailbox @var{mbox}\n"	*(char)
"ahead of current iterator position.  Usually this function is used after\n"	*(char)
"a call to @samp{mu-mailbox-first-message} or @samp{mu-mailbox-next-message}.\n"	*(char)
"If not, it initializes the iterator and points it to the first message in"	*(char)
"the mailbox."	*(char)
)	O
{	O
struct	O
mu_mailbox	struct(*(struct),*(struct),int)
*	O
mum	*(struct(*(struct),*(struct),int))
;	O
int	O
status	int
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_mailbox	(int)->(int)
(	O
mbox	*(struct)
)	O
,	O
mbox	*(struct)
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
mum	*(struct(*(struct),*(struct),int))
=	O
(	O
struct	O
mu_mailbox	struct(*(struct),*(struct),int)
*	O
)	O
SCM_CDR	()->(int)
(	O
mbox	*(struct)
)	O
;	O
if	O
(	O
!	O
mum	*(struct(*(struct),*(struct),int))
->	O
itr	*(struct)
)	O
{	O
status	int
=	O
mu_mailbox_get_iterator	(*(struct),*(*(struct)))->(int)
(	O
mum	*(struct(*(struct),*(struct),int))
->	O
mbox	*(struct)
,	O
&	O
mum	*(struct(*(struct),*(struct),int))
->	O
itr	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"~A: cannot create iterator: ~A"	*(char)
,	O
scm_list_2	()->(int)
(	O
mbox	*(struct)
,	O
scm_from_locale_string	()->(int)
(	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
)	O
)	O
;	O
status	int
=	O
mu_iterator_first	()->(int)
(	O
mum	*(struct(*(struct),*(struct),int))
->	O
itr	*(struct)
)	O
;	O
if	O
(	O
status	int
==	O
MU_ERR_NOENT	O
)	O
return	O
SCM_BOOL_F	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"~A: cannot set iterator to the first message: ~A"	*(char)
,	O
scm_list_2	()->(int)
(	O
mbox	*(struct)
,	O
scm_from_locale_string	()->(int)
(	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
)	O
)	O
;	O
}	O
return	O
scm_from_bool	()->(int)
(	O
!	O
mu_iterator_is_done	()->(int)
(	O
mum	*(struct(*(struct),*(struct),int))
->	O
itr	*(struct)
)	O
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_mailbox_get_size	O
,	O
"mu-mailbox-get-size"	*(char)
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
mbox	*(struct)
)	O
,	O
"Return size of the mailbox @var{mbox}."	*(char)
)	O
{	O
struct	O
mu_mailbox	struct(*(struct),*(struct),int)
*	O
mum	*(struct(*(struct),*(struct),int))
;	O
int	O
status	int
;	O
mu_off_t	long
size	*(long)
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_mailbox	(int)->(int)
(	O
mbox	*(struct)
)	O
,	O
mbox	*(struct)
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
mum	*(struct(*(struct),*(struct),int))
=	O
(	O
struct	O
mu_mailbox	struct(*(struct),*(struct),int)
*	O
)	O
SCM_CDR	()->(int)
(	O
mbox	*(struct)
)	O
;	O
status	int
=	O
mu_mailbox_get_size	(*(struct),*(long))->(int)
(	O
mum	*(struct(*(struct),*(struct),int))
->	O
mbox	*(struct)
,	O
&	O
size	*(long)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"~A: cannot determine mailbox size: ~A"	*(char)
,	O
scm_list_2	()->(int)
(	O
mbox	*(struct)
,	O
scm_from_locale_string	()->(int)
(	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
)	O
)	O
;	O
return	O
scm_from_uintmax	()->(int)
(	O
size	*(long)
)	O
;	O
}	O
void	O
mu_scm_mailbox_init	()->(void)
(	O
)	O
{	O
mailbox_tag	int
=	O
scm_make_smob_type	()->(int)
(	O
"mailbox"	*(char)
,	O
sizeof	O
(	O
struct	O
mu_mailbox	struct(*(struct),*(struct),int)
)	O
)	O
;	O
scm_set_smob_free	()->(int)
(	O
mailbox_tag	int
,	O
mu_scm_mailbox_free	(int)->(long)
)	O
;	O
scm_set_smob_print	()->(int)
(	O
mailbox_tag	int
,	O
mu_scm_mailbox_print	(int,int,*(int))->(int)
)	O
;	O
}	O
