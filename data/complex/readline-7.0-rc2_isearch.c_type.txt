char	O
*	O
_rl_isearch_terminators	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
_rl_search_cxt	struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char))
*	O
_rl_iscxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
=	O
0	int
;	O
extern	O
HIST_ENTRY	struct(*(char),*(char),*(void))
*	O
_rl_saved_line_for_history	*(struct(*(char),*(char),*(void)))
;	O
static	O
int	O
rl_search_history	(int,int)->(int)
PARAMS	O
(	O
(	O
int	O
,	O
int	O
)	O
)	O
;	O
static	O
_rl_search_cxt	struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char))
*	O
_rl_isearch_init	(int)->(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))))
PARAMS	O
(	O
(	O
int	O
)	O
)	O
;	O
static	O
void	O
_rl_isearch_fini	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))))->(void)
PARAMS	O
(	O
(	O
_rl_search_cxt	struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char))
*	O
)	O
)	O
;	O
static	O
char	O
*	O
last_isearch_string	*(char)
;	O
static	O
int	O
last_isearch_string_len	int
;	O
static	O
char	O
*	O
const	O
default_isearch_terminators	*(char)
=	O
"\033\012"	*(char)
;	O
_rl_search_cxt	struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char))
*	O
_rl_scxt_alloc	(int,int)->(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))))
(	O
type	char
,	O
flags	int
)	O
int	O
type	char
,	O
flags	int
;	O
{	O
_rl_search_cxt	struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char))
*	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
=	O
(	O
_rl_search_cxt	struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char))
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
_rl_search_cxt	struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char))
)	O
)	O
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
type	char
=	O
type	char
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sflags	int
=	O
flags	int
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string	*(char)
=	O
0	int
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_size	int
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_index	int
=	O
0	int
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lines	*(*(char))
=	O
0	int
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
allocated_line	*(char)
=	O
0	int
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
hlen	int
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
hindex	int
=	O
0	int
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
save_point	int
=	O
rl_point	int
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
save_mark	int
=	O
rl_mark	int
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
save_line	int
=	O
where_history	()->(int)
(	O
)	O
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
last_found_line	int
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
save_line	int
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
prev_line_found	*(char)
=	O
0	int
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
save_undo_list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
=	O
0	int
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
keymap	*(struct(char,*((int,int)->(int))))
=	O
_rl_keymap	*(struct(char,*((int,int)->(int))))
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
okeymap	*(struct(char,*((int,int)->(int))))
=	O
_rl_keymap	*(struct(char,*((int,int)->(int))))
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
history_pos	int
=	O
0	int
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
direction	int
=	O
0	int
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
prevc	int
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lastc	int
=	O
0	int
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sline	*(char)
=	O
0	int
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sline_len	int
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sline_index	int
=	O
0	int
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_terminators	*(char)
=	O
0	int
;	O
return	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
;	O
}	O
void	O
_rl_scxt_dispose	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))),int)->(void)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
,	O
flags	int
)	O
_rl_search_cxt	struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char))
*	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
;	O
int	O
flags	int
;	O
{	O
FREE	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string	*(char)
)	O
;	O
FREE	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
allocated_line	*(char)
)	O
;	O
FREE	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lines	*(*(char))
)	O
;	O
xfree	(*(void))->(void)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
)	O
;	O
}	O
int	O
rl_reverse_search_history	(int,int)->(int)
(	O
sign	int
,	O
key	int
)	O
int	O
sign	int
,	O
key	int
;	O
{	O
return	O
(	O
rl_search_history	(int,int)->(int)
(	O
-	O
sign	int
,	O
key	int
)	O
)	O
;	O
}	O
int	O
rl_forward_search_history	(int,int)->(int)
(	O
sign	int
,	O
key	int
)	O
int	O
sign	int
,	O
key	int
;	O
{	O
return	O
(	O
rl_search_history	(int,int)->(int)
(	O
sign	int
,	O
key	int
)	O
)	O
;	O
}	O
static	O
void	O
rl_display_search	(*(char),int,int)->(void)
(	O
search_string	*(char)
,	O
flags	int
,	O
where	int
)	O
char	O
*	O
search_string	*(char)
;	O
int	O
flags	int
,	O
where	int
;	O
{	O
char	O
*	O
message	*(char)
;	O
int	O
msglen	int
,	O
searchlen	int
;	O
searchlen	int
=	O
(	O
search_string	*(char)
&&	O
*	O
search_string	*(char)
)	O
?	O
strlen	(*(char))->(long)
(	O
search_string	*(char)
)	O
:	O
0	int
;	O
message	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
searchlen	int
+	O
64	int
)	O
;	O
msglen	int
=	O
0	int
;	O
message	*(char)
[	O
msglen	int
++	O
]	O
=	O
'('	O
;	O
if	O
(	O
flags	int
&	O
SF_FAILED	int
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
message	*(char)
+	O
msglen	int
,	O
"failed "	*(char)
)	O
;	O
msglen	int
+=	O
7	int
;	O
}	O
if	O
(	O
flags	int
&	O
SF_REVERSE	int
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
message	*(char)
+	O
msglen	int
,	O
"reverse-"	*(char)
)	O
;	O
msglen	int
+=	O
8	int
;	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
message	*(char)
+	O
msglen	int
,	O
"i-search)`"	*(char)
)	O
;	O
msglen	int
+=	O
10	int
;	O
if	O
(	O
search_string	*(char)
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
message	*(char)
+	O
msglen	int
,	O
search_string	*(char)
)	O
;	O
msglen	int
+=	O
searchlen	int
;	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
message	*(char)
+	O
msglen	int
,	O
"': "	*(char)
)	O
;	O
rl_message	(*(char))->(int)
(	O
"%s"	*(char)
,	O
message	*(char)
)	O
;	O
xfree	(*(void))->(void)
(	O
message	*(char)
)	O
;	O
(	O
*	O
rl_redisplay_function	*(()->(void))
)	O
(	O
)	O
;	O
}	O
static	O
_rl_search_cxt	struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char))
*	O
_rl_isearch_init	(int)->(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))))
(	O
direction	int
)	O
int	O
direction	int
;	O
{	O
_rl_search_cxt	struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char))
*	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
;	O
register	O
int	O
i	int
;	O
HIST_ENTRY	struct(*(char),*(char),*(void))
*	O
*	O
hlist	*(*(struct(*(char),*(char),*(void))))
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
=	O
_rl_scxt_alloc	(int,int)->(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))))
(	O
RL_SEARCH_ISEARCH	int
,	O
0	int
)	O
;	O
if	O
(	O
direction	int
<	O
0	int
)	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sflags	int
|=	O
SF_REVERSE	int
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_terminators	*(char)
=	O
_rl_isearch_terminators	*(char)
?	O
_rl_isearch_terminators	*(char)
:	O
default_isearch_terminators	*(char)
;	O
hlist	*(*(struct(*(char),*(char),*(void))))
=	O
history_list	()->(*(*(struct(*(char),*(char),*(void)))))
(	O
)	O
;	O
rl_maybe_replace_line	()->(int)
(	O
)	O
;	O
i	int
=	O
0	int
;	O
if	O
(	O
hlist	*(*(struct(*(char),*(char),*(void))))
)	O
for	O
(	O
i	int
=	O
0	int
;	O
hlist	*(*(struct(*(char),*(char),*(void))))
[	O
i	int
]	O
;	O
i	int
++	O
)	O
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lines	*(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
(	O
1	int
+	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
hlen	int
=	O
i	int
)	O
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
hlen	int
;	O
i	int
++	O
)	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lines	*(*(char))
[	O
i	int
]	O
=	O
hlist	*(*(struct(*(char),*(char),*(void))))
[	O
i	int
]	O
->	O
line	*(char)
;	O
if	O
(	O
_rl_saved_line_for_history	*(struct(*(char),*(char),*(void)))
)	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lines	*(*(char))
[	O
i	int
]	O
=	O
_rl_saved_line_for_history	*(struct(*(char),*(char),*(void)))
->	O
line	*(char)
;	O
else	O
{	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
allocated_line	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
1	int
+	O
strlen	(*(char))->(long)
(	O
rl_line_buffer	*(char)
)	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
allocated_line	*(char)
,	O
&	O
rl_line_buffer	*(char)
[	O
0	int
]	O
)	O
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lines	*(*(char))
[	O
i	int
]	O
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
allocated_line	*(char)
;	O
}	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
hlen	int
++	O
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
history_pos	int
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
save_line	int
;	O
rl_save_prompt	()->(void)
(	O
)	O
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_size	int
=	O
128	int
)	O
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string	*(char)
[	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_index	int
=	O
0	int
]	O
=	O
'\0'	O
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
direction	int
=	O
(	O
direction	int
>=	O
0	int
)	O
?	O
1	int
:	O
-	O
1	int
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sline	*(char)
=	O
rl_line_buffer	*(char)
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sline_len	int
=	O
strlen	(*(char))->(long)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sline	*(char)
)	O
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sline_index	int
=	O
rl_point	int
;	O
_rl_iscxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
;	O
return	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
;	O
}	O
static	O
void	O
_rl_isearch_fini	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))))->(void)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
)	O
_rl_search_cxt	struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char))
*	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
;	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
rl_line_buffer	*(char)
,	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lines	*(*(char))
[	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
save_line	int
]	O
)	O
;	O
rl_restore_prompt	()->(void)
(	O
)	O
;	O
FREE	O
(	O
last_isearch_string	*(char)
)	O
;	O
last_isearch_string	*(char)
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string	*(char)
;	O
last_isearch_string_len	int
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_index	int
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string	*(char)
=	O
0	int
;	O
if	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
last_found_line	int
<	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
save_line	int
)	O
rl_get_previous_history	(int,int)->(int)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
save_line	int
-	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
last_found_line	int
,	O
0	int
)	O
;	O
else	O
rl_get_next_history	(int,int)->(int)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
last_found_line	int
-	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
save_line	int
,	O
0	int
)	O
;	O
if	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sline_index	int
<	O
0	int
)	O
{	O
if	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
last_found_line	int
==	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
save_line	int
)	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sline_index	int
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
save_point	int
;	O
else	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sline_index	int
=	O
strlen	(*(char))->(long)
(	O
rl_line_buffer	*(char)
)	O
;	O
rl_mark	int
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
save_mark	int
;	O
}	O
rl_point	int
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sline_index	int
;	O
rl_clear_message	()->(int)
(	O
)	O
;	O
}	O
int	O
_rl_search_getchar	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))))->(int)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
)	O
_rl_search_cxt	struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char))
*	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
;	O
{	O
int	O
c	int
;	O
RL_SETSTATE	O
(	O
RL_STATE_MOREINPUT	int
)	O
;	O
c	int
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lastc	int
=	O
rl_read_key	()->(int)
(	O
)	O
;	O
RL_UNSETSTATE	O
(	O
RL_STATE_MOREINPUT	int
)	O
;	O
if	O
(	O
MB_CUR_MAX	O
>	O
1	int
&&	O
rl_byte_oriented	int
==	O
0	int
)	O
c	int
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lastc	int
=	O
_rl_read_mbstring	(int,*(char),int)->(int)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lastc	int
,	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
mb	array(char)
,	O
MB_LEN_MAX	int
)	O
;	O
RL_CHECK_SIGNALS	O
(	O
)	O
;	O
return	O
c	int
;	O
}	O
int	O
_rl_isearch_dispatch	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))),int)->(int)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
,	O
c	int
)	O
_rl_search_cxt	struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char))
*	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
;	O
int	O
c	int
;	O
{	O
int	O
n	int
,	O
wstart	int
,	O
wlen	int
,	O
limit	int
,	O
cval	int
;	O
rl_command_func_t	(int,int)->(int)
*	O
f	*((int,int)->(int))
;	O
f	*((int,int)->(int))
=	O
(	O
rl_command_func_t	(int,int)->(int)
*	O
)	O
NULL	O
;	O
if	O
(	O
c	int
<	O
0	int
)	O
{	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sflags	int
|=	O
SF_FAILED	int
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
history_pos	int
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
last_found_line	int
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
c	int
>=	O
0	int
&&	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
keymap	*(struct(char,*((int,int)->(int))))
[	O
c	int
]	O
.	O
type	char
==	O
ISKMAP	int
&&	O
strchr	(*(char),int)->(*(char))
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_terminators	*(char)
,	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lastc	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
_rl_keyseq_timeout	int
>	O
0	int
&&	O
RL_ISSTATE	O
(	O
RL_STATE_CALLBACK	int
)	O
==	O
0	int
&&	O
RL_ISSTATE	O
(	O
RL_STATE_INPUTPENDING	int
)	O
==	O
0	int
&&	O
_rl_pushed_input_available	()->(int)
(	O
)	O
==	O
0	int
&&	O
(	O
(	O
Keymap	*(struct(char,*((int,int)->(int))))
)	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
keymap	*(struct(char,*((int,int)->(int))))
[	O
c	int
]	O
.	O
function	*((int,int)->(int))
)	O
)	O
[	O
ANYOTHERKEY	O
]	O
.	O
function	*((int,int)->(int))
&&	O
_rl_input_queued	(int)->(int)
(	O
_rl_keyseq_timeout	int
*	O
1000	int
)	O
==	O
0	int
)	O
goto	O
add_character	O
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
okeymap	*(struct(char,*((int,int)->(int))))
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
keymap	*(struct(char,*((int,int)->(int))))
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
keymap	*(struct(char,*((int,int)->(int))))
=	O
FUNCTION_TO_KEYMAP	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
keymap	*(struct(char,*((int,int)->(int))))
,	O
c	int
)	O
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sflags	int
|=	O
SF_CHGKMAP	int
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
prevc	int
=	O
c	int
;	O
if	O
(	O
MB_CUR_MAX	O
>	O
1	int
&&	O
rl_byte_oriented	int
==	O
0	int
)	O
{	O
if	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
mb	array(char)
[	O
1	int
]	O
==	O
0	int
)	O
{	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
pmb	array(char)
[	O
0	int
]	O
=	O
c	int
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
pmb	array(char)
[	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
else	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
pmb	array(char)
,	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
mb	array(char)
,	O
sizeof	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
pmb	array(char)
)	O
)	O
;	O
}	O
return	O
1	int
;	O
}	O
add_character	O
:	O
if	O
(	O
c	int
>=	O
0	int
&&	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
keymap	*(struct(char,*((int,int)->(int))))
[	O
c	int
]	O
.	O
type	char
==	O
ISFUNC	int
)	O
{	O
f	*((int,int)->(int))
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
keymap	*(struct(char,*((int,int)->(int))))
[	O
c	int
]	O
.	O
function	*((int,int)->(int))
;	O
if	O
(	O
f	*((int,int)->(int))
==	O
rl_reverse_search_history	(int,int)->(int)
)	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lastc	int
=	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sflags	int
&	O
SF_REVERSE	int
)	O
?	O
-	O
1	int
:	O
-	O
2	int
;	O
else	O
if	O
(	O
f	*((int,int)->(int))
==	O
rl_forward_search_history	(int,int)->(int)
)	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lastc	int
=	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sflags	int
&	O
SF_REVERSE	int
)	O
?	O
-	O
2	int
:	O
-	O
1	int
;	O
else	O
if	O
(	O
f	*((int,int)->(int))
==	O
rl_rubout	(int,int)->(int)
)	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lastc	int
=	O
-	O
3	int
;	O
else	O
if	O
(	O
c	int
==	O
CTRL	O
(	O
'G'	O
)	O
||	O
f	*((int,int)->(int))
==	O
rl_abort	(int,int)->(int)
)	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lastc	int
=	O
-	O
4	int
;	O
else	O
if	O
(	O
c	int
==	O
CTRL	O
(	O
'W'	O
)	O
||	O
f	*((int,int)->(int))
==	O
rl_unix_word_rubout	(int,int)->(int)
)	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lastc	int
=	O
-	O
5	int
;	O
else	O
if	O
(	O
c	int
==	O
CTRL	O
(	O
'Y'	O
)	O
||	O
f	*((int,int)->(int))
==	O
rl_yank	(int,int)->(int)
)	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lastc	int
=	O
-	O
6	int
;	O
}	O
if	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sflags	int
&	O
SF_CHGKMAP	int
)	O
{	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
keymap	*(struct(char,*((int,int)->(int))))
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
okeymap	*(struct(char,*((int,int)->(int))))
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sflags	int
&=	O
~	O
SF_CHGKMAP	int
;	O
if	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lastc	int
>	O
0	int
&&	O
ENDSRCH_CHAR	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
prevc	int
)	O
)	O
{	O
rl_stuff_char	(int)->(int)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lastc	int
)	O
;	O
rl_execute_next	(int)->(int)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
prevc	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lastc	int
>	O
0	int
&&	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
prevc	int
>	O
0	int
&&	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
keymap	*(struct(char,*((int,int)->(int))))
[	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
prevc	int
]	O
.	O
type	char
==	O
ISKMAP	int
&&	O
(	O
f	*((int,int)->(int))
==	O
0	int
||	O
f	*((int,int)->(int))
==	O
rl_insert	(int,int)->(int)
)	O
)	O
{	O
rl_execute_next	(int)->(int)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lastc	int
)	O
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lastc	int
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
prevc	int
;	O
if	O
(	O
MB_CUR_MAX	O
>	O
1	int
&&	O
rl_byte_oriented	int
==	O
0	int
)	O
{	O
if	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
pmb	array(char)
[	O
1	int
]	O
==	O
0	int
)	O
{	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
mb	array(char)
[	O
0	int
]	O
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lastc	int
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
mb	array(char)
[	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
else	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
mb	array(char)
,	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
pmb	array(char)
,	O
sizeof	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
mb	array(char)
)	O
)	O
;	O
}	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
prevc	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lastc	int
>	O
0	int
&&	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
prevc	int
>	O
0	int
&&	O
f	*((int,int)->(int))
&&	O
f	*((int,int)->(int))
!=	O
rl_insert	(int,int)->(int)
)	O
{	O
rl_stuff_char	(int)->(int)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lastc	int
)	O
;	O
rl_execute_next	(int)->(int)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
prevc	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
}	O
if	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lastc	int
>	O
0	int
&&	O
strchr	(*(char),int)->(*(char))
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_terminators	*(char)
,	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lastc	int
)	O
)	O
{	O
if	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lastc	int
==	O
ESC	O
&&	O
(	O
_rl_pushed_input_available	()->(int)
(	O
)	O
||	O
_rl_input_available	()->(int)
(	O
)	O
)	O
)	O
rl_execute_next	(int)->(int)
(	O
ESC	O
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
if	O
(	O
MB_CUR_MAX	O
>	O
1	int
&&	O
rl_byte_oriented	int
==	O
0	int
)	O
{	O
if	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lastc	int
>=	O
0	int
&&	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
mb	array(char)
[	O
0	int
]	O
&&	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
mb	array(char)
[	O
1	int
]	O
==	O
'\0'	O
)	O
&&	O
ENDSRCH_CHAR	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lastc	int
)	O
)	O
{	O
rl_execute_next	(int)->(int)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lastc	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lastc	int
>=	O
0	int
&&	O
ENDSRCH_CHAR	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lastc	int
)	O
)	O
{	O
rl_execute_next	(int)->(int)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lastc	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
switch	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lastc	int
)	O
{	O
case	O
-	O
1	int
:	O
if	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_index	int
==	O
0	int
)	O
{	O
if	O
(	O
last_isearch_string	*(char)
)	O
{	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_size	int
=	O
64	int
+	O
last_isearch_string_len	int
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string	*(char)
=	O
(	O
char	O
*	O
)	O
xrealloc	(*(void),long)->(*(void))
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string	*(char)
,	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_size	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string	*(char)
,	O
last_isearch_string	*(char)
)	O
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_index	int
=	O
last_isearch_string_len	int
;	O
rl_display_search	(*(char),int,int)->(void)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string	*(char)
,	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sflags	int
,	O
-	O
1	int
)	O
;	O
break	O
;	O
}	O
return	O
(	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sflags	int
&	O
SF_REVERSE	int
)	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sline_index	int
--	O
;	O
else	O
if	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sline_index	int
!=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sline_len	int
)	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sline_index	int
++	O
;	O
else	O
rl_ding	()->(int)
(	O
)	O
;	O
break	O
;	O
case	O
-	O
2	int
:	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
direction	int
=	O
-	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
direction	int
;	O
if	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
direction	int
<	O
0	int
)	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sflags	int
|=	O
SF_REVERSE	int
;	O
else	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sflags	int
&=	O
~	O
SF_REVERSE	int
;	O
break	O
;	O
case	O
-	O
3	int
:	O
if	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_index	int
==	O
0	int
)	O
rl_ding	()->(int)
(	O
)	O
;	O
else	O
if	O
(	O
MB_CUR_MAX	O
==	O
1	int
||	O
rl_byte_oriented	int
)	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string	*(char)
[	O
--	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_index	int
]	O
=	O
'\0'	O
;	O
else	O
{	O
wstart	int
=	O
_rl_find_prev_mbchar	(*(char),int,int)->(int)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string	*(char)
,	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_index	int
,	O
MB_FIND_NONZERO	int
)	O
;	O
if	O
(	O
wstart	int
>=	O
0	int
)	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string	*(char)
[	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_index	int
=	O
wstart	int
]	O
=	O
'\0'	O
;	O
else	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string	*(char)
[	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_index	int
=	O
0	int
]	O
=	O
'\0'	O
;	O
}	O
if	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_index	int
==	O
0	int
)	O
rl_ding	()->(int)
(	O
)	O
;	O
break	O
;	O
case	O
-	O
4	int
:	O
rl_replace_line	(*(char),int)->(void)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lines	*(*(char))
[	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
save_line	int
]	O
,	O
0	int
)	O
;	O
rl_point	int
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
save_point	int
;	O
rl_mark	int
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
save_mark	int
;	O
rl_restore_prompt	()->(void)
(	O
)	O
;	O
rl_clear_message	()->(int)
(	O
)	O
;	O
return	O
-	O
1	int
;	O
case	O
-	O
5	int
:	O
wstart	int
=	O
rl_point	int
+	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_index	int
;	O
if	O
(	O
wstart	int
>=	O
rl_end	int
)	O
{	O
rl_ding	()->(int)
(	O
)	O
;	O
break	O
;	O
}	O
cval	int
=	O
_rl_char_value	(*(char),int)->(int)
(	O
rl_line_buffer	*(char)
,	O
wstart	int
)	O
;	O
if	O
(	O
_rl_walphabetic	(int)->(int)
(	O
cval	int
)	O
==	O
0	int
)	O
{	O
rl_ding	()->(int)
(	O
)	O
;	O
break	O
;	O
}	O
n	int
=	O
MB_NEXTCHAR	O
(	O
rl_line_buffer	*(char)
,	O
wstart	int
,	O
1	int
,	O
MB_FIND_NONZERO	int
)	O
;	O
;	O
while	O
(	O
n	int
<	O
rl_end	int
)	O
{	O
cval	int
=	O
_rl_char_value	(*(char),int)->(int)
(	O
rl_line_buffer	*(char)
,	O
n	int
)	O
;	O
if	O
(	O
_rl_walphabetic	(int)->(int)
(	O
cval	int
)	O
==	O
0	int
)	O
break	O
;	O
n	int
=	O
MB_NEXTCHAR	O
(	O
rl_line_buffer	*(char)
,	O
n	int
,	O
1	int
,	O
MB_FIND_NONZERO	int
)	O
;	O
;	O
}	O
wlen	int
=	O
n	int
-	O
wstart	int
+	O
1	int
;	O
if	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_index	int
+	O
wlen	int
+	O
1	int
>=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_size	int
)	O
{	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_size	int
+=	O
wlen	int
+	O
1	int
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string	*(char)
=	O
(	O
char	O
*	O
)	O
xrealloc	(*(void),long)->(*(void))
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string	*(char)
,	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_size	int
)	O
;	O
}	O
for	O
(	O
;	O
wstart	int
<	O
n	int
;	O
wstart	int
++	O
)	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string	*(char)
[	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_index	int
++	O
]	O
=	O
rl_line_buffer	*(char)
[	O
wstart	int
]	O
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string	*(char)
[	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_index	int
]	O
=	O
'\0'	O
;	O
break	O
;	O
case	O
-	O
6	int
:	O
wstart	int
=	O
rl_point	int
+	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_index	int
;	O
if	O
(	O
wstart	int
>=	O
rl_end	int
)	O
{	O
rl_ding	()->(int)
(	O
)	O
;	O
break	O
;	O
}	O
n	int
=	O
rl_end	int
-	O
wstart	int
+	O
1	int
;	O
if	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_index	int
+	O
n	int
+	O
1	int
>=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_size	int
)	O
{	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_size	int
+=	O
n	int
+	O
1	int
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string	*(char)
=	O
(	O
char	O
*	O
)	O
xrealloc	(*(void),long)->(*(void))
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string	*(char)
,	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_size	int
)	O
;	O
}	O
for	O
(	O
n	int
=	O
wstart	int
;	O
n	int
<	O
rl_end	int
;	O
n	int
++	O
)	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string	*(char)
[	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_index	int
++	O
]	O
=	O
rl_line_buffer	*(char)
[	O
n	int
]	O
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string	*(char)
[	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_index	int
]	O
=	O
'\0'	O
;	O
break	O
;	O
default	O
:	O
if	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_index	int
+	O
2	int
>=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_size	int
)	O
{	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_size	int
+=	O
128	int
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string	*(char)
=	O
(	O
char	O
*	O
)	O
xrealloc	(*(void),long)->(*(void))
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string	*(char)
,	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_size	int
)	O
;	O
}	O
if	O
(	O
MB_CUR_MAX	O
>	O
1	int
&&	O
rl_byte_oriented	int
==	O
0	int
)	O
{	O
int	O
j	int
,	O
l	int
;	O
if	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
mb	array(char)
[	O
0	int
]	O
==	O
0	int
||	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
mb	array(char)
[	O
1	int
]	O
==	O
0	int
)	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string	*(char)
[	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_index	int
++	O
]	O
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
mb	array(char)
[	O
0	int
]	O
;	O
else	O
for	O
(	O
j	int
=	O
0	int
,	O
l	int
=	O
RL_STRLEN	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
mb	array(char)
)	O
;	O
j	int
<	O
l	int
;	O
)	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string	*(char)
[	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_index	int
++	O
]	O
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
mb	array(char)
[	O
j	int
++	O
]	O
;	O
}	O
else	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string	*(char)
[	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_index	int
++	O
]	O
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lastc	int
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string	*(char)
[	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_index	int
]	O
=	O
'\0'	O
;	O
break	O
;	O
}	O
for	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sflags	int
&=	O
~	O
(	O
SF_FOUND	int
|	O
SF_FAILED	int
)	O
;	O
;	O
)	O
{	O
if	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_index	int
==	O
0	int
)	O
{	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sflags	int
|=	O
SF_FAILED	int
;	O
break	O
;	O
}	O
limit	int
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sline_len	int
-	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_index	int
+	O
1	int
;	O
while	O
(	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sflags	int
&	O
SF_REVERSE	int
)	O
?	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sline_index	int
>=	O
0	int
)	O
:	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sline_index	int
<	O
limit	int
)	O
)	O
{	O
if	O
(	O
STREQN	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string	*(char)
,	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sline	*(char)
+	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sline_index	int
,	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_index	int
)	O
)	O
{	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sflags	int
|=	O
SF_FOUND	int
;	O
break	O
;	O
}	O
else	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sline_index	int
+=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
direction	int
;	O
}	O
if	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sflags	int
&	O
SF_FOUND	int
)	O
break	O
;	O
do	O
{	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
history_pos	int
+=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
direction	int
;	O
if	O
(	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sflags	int
&	O
SF_REVERSE	int
)	O
?	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
history_pos	int
<	O
0	int
)	O
:	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
history_pos	int
==	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
hlen	int
)	O
)	O
{	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sflags	int
|=	O
SF_FAILED	int
;	O
break	O
;	O
}	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sline	*(char)
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lines	*(*(char))
[	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
history_pos	int
]	O
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sline_len	int
=	O
strlen	(*(char))->(long)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sline	*(char)
)	O
;	O
}	O
while	O
(	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
prev_line_found	*(char)
&&	O
STREQ	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
prev_line_found	*(char)
,	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lines	*(*(char))
[	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
history_pos	int
]	O
)	O
)	O
||	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_index	int
>	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sline_len	int
)	O
)	O
;	O
if	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sflags	int
&	O
SF_FAILED	int
)	O
break	O
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sline_index	int
=	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sflags	int
&	O
SF_REVERSE	int
)	O
?	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sline_len	int
-	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string_index	int
:	O
0	int
;	O
}	O
if	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sflags	int
&	O
SF_FAILED	int
)	O
{	O
rl_ding	()->(int)
(	O
)	O
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
history_pos	int
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
last_found_line	int
;	O
rl_display_search	(*(char),int,int)->(void)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string	*(char)
,	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sflags	int
,	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
history_pos	int
==	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
save_line	int
)	O
?	O
-	O
1	int
:	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
history_pos	int
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sflags	int
&	O
SF_FOUND	int
)	O
{	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
prev_line_found	*(char)
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lines	*(*(char))
[	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
history_pos	int
]	O
;	O
rl_replace_line	(*(char),int)->(void)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lines	*(*(char))
[	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
history_pos	int
]	O
,	O
0	int
)	O
;	O
rl_point	int
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sline_index	int
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
last_found_line	int
=	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
history_pos	int
;	O
rl_display_search	(*(char),int,int)->(void)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string	*(char)
,	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sflags	int
,	O
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
history_pos	int
==	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
save_line	int
)	O
?	O
-	O
1	int
:	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
history_pos	int
)	O
;	O
}	O
return	O
1	int
;	O
}	O
int	O
_rl_isearch_cleanup	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))),int)->(int)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
,	O
r	int
)	O
_rl_search_cxt	struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char))
*	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
;	O
int	O
r	int
;	O
{	O
if	O
(	O
r	int
>=	O
0	int
)	O
_rl_isearch_fini	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))))->(void)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
)	O
;	O
_rl_scxt_dispose	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))),int)->(void)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
,	O
0	int
)	O
;	O
_rl_iscxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
=	O
0	int
;	O
RL_UNSETSTATE	O
(	O
RL_STATE_ISEARCH	int
)	O
;	O
return	O
(	O
r	int
!=	O
0	int
)	O
;	O
}	O
static	O
int	O
rl_search_history	(int,int)->(int)
(	O
direction	int
,	O
invoking_key	int
)	O
int	O
direction	int
,	O
invoking_key	int
;	O
{	O
_rl_search_cxt	struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char))
*	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
;	O
int	O
c	int
,	O
r	int
;	O
RL_SETSTATE	O
(	O
RL_STATE_ISEARCH	int
)	O
;	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
=	O
_rl_isearch_init	(int)->(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))))
(	O
direction	int
)	O
;	O
rl_display_search	(*(char),int,int)->(void)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
search_string	*(char)
,	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
sflags	int
,	O
-	O
1	int
)	O
;	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_CALLBACK	int
)	O
)	O
return	O
(	O
0	int
)	O
;	O
r	int
=	O
-	O
1	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
_rl_search_getchar	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))))->(int)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
)	O
;	O
r	int
=	O
_rl_isearch_dispatch	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))),int)->(int)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
,	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lastc	int
)	O
;	O
if	O
(	O
r	int
<=	O
0	int
)	O
break	O
;	O
}	O
return	O
(	O
_rl_isearch_cleanup	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))),int)->(int)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
,	O
r	int
)	O
)	O
;	O
}	O
int	O
_rl_isearch_callback	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))))->(int)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
)	O
_rl_search_cxt	struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char))
*	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
;	O
{	O
int	O
c	int
,	O
r	int
;	O
c	int
=	O
_rl_search_getchar	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))))->(int)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
)	O
;	O
r	int
=	O
_rl_isearch_dispatch	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))),int)->(int)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
,	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
->	O
lastc	int
)	O
;	O
return	O
(	O
r	int
<=	O
0	int
)	O
?	O
_rl_isearch_cleanup	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,array(char),array(char),*(char),int,int,*(char))),int)->(int)
(	O
cxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,array(char),array(char),*(char),int,int,*(char)))
,	O
r	int
)	O
:	O
0	int
;	O
}	O
