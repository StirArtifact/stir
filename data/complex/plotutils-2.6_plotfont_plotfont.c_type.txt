const	O
char	O
*	O
progname	*(char)
=	O
"plotfont"	*(char)
;	O
const	O
char	O
*	O
written	*(char)
=	O
"Written by Robert S. Maier."	*(char)
;	O
const	O
char	O
*	O
copyright	*(char)
=	O
"Copyright (C) 2009 Free Software Foundation, Inc."	*(char)
;	O
const	O
char	O
*	O
usage_appendage	*(char)
=	O
" FONT...\n"	*(char)
;	O
enum	O
radix	enum(int,int,int)
{	O
DECIMAL	int
,	O
OCTAL	int
,	O
HEXADECIMAL	int
}	O
;	O
const	O
char	O
*	O
optstring	*(char)
=	O
"12oxOj:J:F:T:"	*(char)
;	O
struct	O
option	struct(*(char),int,*(int),int)
long_options	array(struct(*(char),int,*(int),int))
[	O
]	O
=	O
{	O
{	O
"output-format"	*(char)
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'T'	O
}	O
,	O
{	O
"display-type"	*(char)
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'T'	O
<<	O
8	int
}	O
,	O
{	O
"box"	*(char)
,	O
ARG_NONE	int
,	O
NULL	O
,	O
'b'	O
<<	O
8	int
}	O
,	O
{	O
"octal"	*(char)
,	O
ARG_NONE	int
,	O
NULL	O
,	O
'o'	O
}	O
,	O
{	O
"hexadecimal"	*(char)
,	O
ARG_NONE	int
,	O
NULL	O
,	O
'x'	O
}	O
,	O
{	O
"jis-page"	*(char)
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'J'	O
}	O
,	O
{	O
"jis-row"	*(char)
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'j'	O
}	O
,	O
{	O
"lower-half"	*(char)
,	O
ARG_NONE	int
,	O
NULL	O
,	O
'1'	O
}	O
,	O
{	O
"upper-half"	*(char)
,	O
ARG_NONE	int
,	O
NULL	O
,	O
'2'	O
}	O
,	O
{	O
"font-name"	*(char)
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'F'	O
}	O
,	O
{	O
"numbering-font-name"	*(char)
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'N'	O
<<	O
8	int
}	O
,	O
{	O
"title-font-name"	*(char)
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'Z'	O
<<	O
8	int
}	O
,	O
{	O
"pen-color"	*(char)
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'C'	O
<<	O
8	int
}	O
,	O
{	O
"bg-color"	*(char)
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'q'	O
<<	O
8	int
}	O
,	O
{	O
"bitmap-size"	*(char)
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'B'	O
<<	O
8	int
}	O
,	O
{	O
"emulate-color"	*(char)
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'e'	O
<<	O
8	int
}	O
,	O
{	O
"page-size"	*(char)
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'P'	O
<<	O
8	int
}	O
,	O
{	O
"rotation"	*(char)
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'r'	O
<<	O
8	int
}	O
,	O
{	O
"portable-output"	*(char)
,	O
ARG_NONE	int
,	O
NULL	O
,	O
'O'	O
}	O
,	O
{	O
"help-fonts"	*(char)
,	O
ARG_NONE	int
,	O
NULL	O
,	O
'f'	O
<<	O
8	int
}	O
,	O
{	O
"list-fonts"	*(char)
,	O
ARG_NONE	int
,	O
NULL	O
,	O
'l'	O
<<	O
8	int
}	O
,	O
{	O
"version"	*(char)
,	O
ARG_NONE	int
,	O
NULL	O
,	O
'V'	O
<<	O
8	int
}	O
,	O
{	O
"help"	*(char)
,	O
ARG_NONE	int
,	O
NULL	O
,	O
'h'	O
<<	O
8	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
const	O
int	O
hidden_options	array(int)
[	O
]	O
=	O
{	O
(	O
int	O
)	O
'J'	O
,	O
(	O
int	O
)	O
'F'	O
,	O
(	O
int	O
)	O
(	O
'T'	O
<<	O
8	int
)	O
,	O
0	int
}	O
;	O
bool	enum(int,int)
do_font	(*(struct),*(char),enum(int,int),*(char),*(char),*(char),enum(int,int),enum(int,int,int),int,enum(int,int))->(enum(int,int))
(	O
plPlotter	struct
*	O
plotter	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
,	O
bool	enum(int,int)
upper_half	enum(int,int)
,	O
char	O
*	O
pen_color_name	*(char)
,	O
char	O
*	O
numbering_font_name	*(char)
,	O
char	O
*	O
title_font_name	*(char)
,	O
bool	enum(int,int)
bearings	enum(int,int)
,	O
enum	O
radix	enum(int,int,int)
base	enum(int,int,int)
,	O
int	O
jis_page	int
,	O
bool	enum(int,int)
do_jis_page	enum(int,int)
)	O
;	O
void	O
write_three_bytes	(int,*(char),int)->(void)
(	O
int	O
charnum	int
,	O
char	O
*	O
numbuf	*(char)
,	O
int	O
radix	enum(int,int,int)
)	O
;	O
void	O
write_two_bytes	(int,*(char),int)->(void)
(	O
int	O
charnum	int
,	O
char	O
*	O
numbuf	*(char)
,	O
int	O
radix	enum(int,int,int)
)	O
;	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	*(*(char))
[	O
]	O
)	O
{	O
plPlotter	struct
*	O
plotter	*(struct)
;	O
plPlotterParams	struct
*	O
plotter_params	*(struct)
;	O
bool	enum(int,int)
bearings	enum(int,int)
=	O
false	int
;	O
bool	enum(int,int)
do_jis_page	enum(int,int)
=	O
false	int
;	O
bool	enum(int,int)
do_list_fonts	enum(int,int)
=	O
false	int
;	O
bool	enum(int,int)
show_fonts	enum(int,int)
=	O
false	int
;	O
bool	enum(int,int)
show_usage	enum(int,int)
=	O
false	int
;	O
bool	enum(int,int)
show_version	enum(int,int)
=	O
false	int
;	O
bool	enum(int,int)
upper_half	enum(int,int)
=	O
false	int
;	O
char	O
*	O
output_format	*(char)
=	O
(	O
char	O
*	O
)	O
"meta"	*(char)
;	O
char	O
*	O
numbering_font_name	*(char)
=	O
NULL	O
;	O
char	O
*	O
option_font_name	*(char)
=	O
NULL	O
;	O
char	O
*	O
pen_color	*(char)
=	O
NULL	O
;	O
char	O
*	O
title_font_name	*(char)
=	O
NULL	O
;	O
enum	O
radix	enum(int,int,int)
base	enum(int,int,int)
=	O
DECIMAL	int
;	O
int	O
errcnt	int
=	O
0	int
;	O
int	O
jis_page	int
=	O
33	int
;	O
int	O
opt_index	int
;	O
int	O
option	struct(*(char),int,*(int),int)
;	O
int	O
retval	int
;	O
plotter_params	*(struct)
=	O
pl_newplparams	()->(*(struct))
(	O
)	O
;	O
while	O
(	O
(	O
option	struct(*(char),int,*(int),int)
=	O
getopt_long	(int,*(*(char)),*(char),*(struct(*(char),int,*(int),int)),*(int))->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
optstring	*(char)
,	O
long_options	array(struct(*(char),int,*(int),int))
,	O
&	O
opt_index	int
)	O
)	O
!=	O
EOF	O
)	O
{	O
if	O
(	O
option	struct(*(char),int,*(int),int)
==	O
0	int
)	O
option	struct(*(char),int,*(int),int)
=	O
long_options	array(struct(*(char),int,*(int),int))
[	O
opt_index	int
]	O
.	O
val	int
;	O
switch	O
(	O
option	struct(*(char),int,*(int),int)
)	O
{	O
case	O
'T'	O
:	O
case	O
'T'	O
<<	O
8	int
:	O
output_format	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
optarg	*(char)
)	O
+	O
1	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
output_format	*(char)
,	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
'O'	O
:	O
pl_setplparam	(*(struct),*(char),*(void))->(int)
(	O
plotter_params	*(struct)
,	O
"META_PORTABLE"	*(char)
,	O
(	O
char	O
*	O
)	O
"yes"	*(char)
)	O
;	O
break	O
;	O
case	O
'1'	O
:	O
upper_half	enum(int,int)
=	O
false	int
;	O
break	O
;	O
case	O
'2'	O
:	O
upper_half	enum(int,int)
=	O
true	int
;	O
break	O
;	O
case	O
'o'	O
:	O
base	enum(int,int,int)
=	O
OCTAL	int
;	O
break	O
;	O
case	O
'x'	O
:	O
base	enum(int,int,int)
=	O
HEXADECIMAL	int
;	O
break	O
;	O
case	O
'F'	O
:	O
option_font_name	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
optarg	*(char)
)	O
+	O
1	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
option_font_name	*(char)
,	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
'e'	O
<<	O
8	int
:	O
pl_setplparam	(*(struct),*(char),*(void))->(int)
(	O
plotter_params	*(struct)
,	O
"EMULATE_COLOR"	*(char)
,	O
(	O
char	O
*	O
)	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
'N'	O
<<	O
8	int
:	O
numbering_font_name	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
'Z'	O
<<	O
8	int
:	O
title_font_name	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
'C'	O
<<	O
8	int
:	O
pen_color	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
optarg	*(char)
)	O
+	O
1	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
pen_color	*(char)
,	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
'q'	O
<<	O
8	int
:	O
pl_setplparam	(*(struct),*(char),*(void))->(int)
(	O
plotter_params	*(struct)
,	O
"BG_COLOR"	*(char)
,	O
(	O
void	O
*	O
)	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
'B'	O
<<	O
8	int
:	O
pl_setplparam	(*(struct),*(char),*(void))->(int)
(	O
plotter_params	*(struct)
,	O
"BITMAPSIZE"	*(char)
,	O
(	O
void	O
*	O
)	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
'P'	O
<<	O
8	int
:	O
pl_setplparam	(*(struct),*(char),*(void))->(int)
(	O
plotter_params	*(struct)
,	O
"PAGESIZE"	*(char)
,	O
(	O
void	O
*	O
)	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
'r'	O
<<	O
8	int
:	O
pl_setplparam	(*(struct),*(char),*(void))->(int)
(	O
plotter_params	*(struct)
,	O
"ROTATION"	*(char)
,	O
(	O
void	O
*	O
)	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
'b'	O
<<	O
8	int
:	O
bearings	enum(int,int)
=	O
true	int
;	O
break	O
;	O
case	O
'V'	O
<<	O
8	int
:	O
show_version	enum(int,int)
=	O
true	int
;	O
break	O
;	O
case	O
'f'	O
<<	O
8	int
:	O
show_fonts	enum(int,int)
=	O
true	int
;	O
break	O
;	O
case	O
'l'	O
<<	O
8	int
:	O
do_list_fonts	enum(int,int)
=	O
true	int
;	O
break	O
;	O
case	O
'J'	O
:	O
if	O
(	O
sscanf	(*(char),*(char))->(int)
(	O
optarg	*(char)
,	O
"%d"	*(char)
,	O
&	O
jis_page	int
)	O
<=	O
0	int
||	O
(	O
jis_page	int
<	O
33	int
)	O
||	O
(	O
jis_page	int
>	O
126	int
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: the JIS page number is bad (it should be in the range 33..126)\n"	*(char)
,	O
progname	*(char)
)	O
;	O
errcnt	int
++	O
;	O
}	O
else	O
do_jis_page	enum(int,int)
=	O
true	int
;	O
break	O
;	O
case	O
'j'	O
:	O
if	O
(	O
sscanf	(*(char),*(char))->(int)
(	O
optarg	*(char)
,	O
"%d"	*(char)
,	O
&	O
jis_page	int
)	O
<=	O
0	int
||	O
(	O
jis_page	int
<	O
1	int
)	O
||	O
(	O
jis_page	int
>	O
94	int
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: the JIS row number is bad (it should be in the range 1..94)\n"	*(char)
,	O
progname	*(char)
)	O
;	O
errcnt	int
++	O
;	O
}	O
else	O
{	O
jis_page	int
+=	O
32	int
;	O
do_jis_page	enum(int,int)
=	O
true	int
;	O
}	O
break	O
;	O
case	O
'h'	O
<<	O
8	int
:	O
show_usage	enum(int,int)
=	O
true	int
;	O
break	O
;	O
default	O
:	O
errcnt	int
++	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
errcnt	int
>	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Try `%s --help' for more information\n"	*(char)
,	O
progname	*(char)
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
if	O
(	O
show_version	enum(int,int)
)	O
{	O
display_version	(*(char),*(char),*(char))->(void)
(	O
progname	*(char)
,	O
written	*(char)
,	O
copyright	*(char)
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
if	O
(	O
do_list_fonts	enum(int,int)
)	O
{	O
int	O
success	int
;	O
success	int
=	O
list_fonts	(*(char),*(char))->(int)
(	O
output_format	*(char)
,	O
progname	*(char)
)	O
;	O
if	O
(	O
success	int
)	O
return	O
EXIT_SUCCESS	int
;	O
else	O
return	O
EXIT_FAILURE	int
;	O
}	O
if	O
(	O
show_fonts	enum(int,int)
)	O
{	O
int	O
success	int
;	O
success	int
=	O
display_fonts	(*(char),*(char))->(int)
(	O
output_format	*(char)
,	O
progname	*(char)
)	O
;	O
if	O
(	O
success	int
)	O
return	O
EXIT_SUCCESS	int
;	O
else	O
return	O
EXIT_FAILURE	int
;	O
}	O
if	O
(	O
show_usage	enum(int,int)
)	O
{	O
display_usage	(*(char),*(int),*(char),int)->(void)
(	O
progname	*(char)
,	O
hidden_options	array(int)
,	O
usage_appendage	*(char)
,	O
2	int
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
if	O
(	O
option_font_name	*(char)
==	O
NULL	O
&&	O
optind	int
>=	O
argc	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: no font or fonts are specified\n"	*(char)
,	O
progname	*(char)
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
if	O
(	O
do_jis_page	enum(int,int)
)	O
{	O
if	O
(	O
(	O
!	O
(	O
(	O
option_font_name	*(char)
==	O
NULL	O
&&	O
optind	int
==	O
argc	int
-	O
1	int
)	O
||	O
(	O
option_font_name	*(char)
&&	O
optind	int
>=	O
argc	int
)	O
)	O
)	O
||	O
(	O
option_font_name	*(char)
&&	O
strcasecmp	(*(char),*(char))->(int)
(	O
option_font_name	*(char)
,	O
"HersheyEUC"	*(char)
)	O
!=	O
0	int
)	O
||	O
(	O
!	O
option_font_name	*(char)
&&	O
strcasecmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
optind	int
]	O
,	O
"HersheyEUC"	*(char)
)	O
!=	O
0	int
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: a JIS page can only be specified for the HersheyEUC font\n"	*(char)
,	O
progname	*(char)
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
}	O
if	O
(	O
(	O
plotter	*(struct)
=	O
pl_newpl_r	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct))->(*(struct))
(	O
output_format	*(char)
,	O
NULL	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
plotter_params	*(struct)
)	O
)	O
==	O
NULL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: error: the plot device could not be created\n"	*(char)
,	O
progname	*(char)
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
if	O
(	O
option_font_name	*(char)
)	O
{	O
if	O
(	O
do_font	(*(struct),*(char),enum(int,int),*(char),*(char),*(char),enum(int,int),enum(int,int,int),int,enum(int,int))->(enum(int,int))
(	O
plotter	*(struct)
,	O
option_font_name	*(char)
,	O
upper_half	enum(int,int)
,	O
pen_color	*(char)
,	O
numbering_font_name	*(char)
,	O
title_font_name	*(char)
,	O
bearings	enum(int,int)
,	O
base	enum(int,int,int)
,	O
jis_page	int
,	O
do_jis_page	enum(int,int)
)	O
==	O
false	int
)	O
return	O
EXIT_FAILURE	int
;	O
}	O
if	O
(	O
optind	int
<	O
argc	int
)	O
{	O
for	O
(	O
;	O
optind	int
<	O
argc	int
;	O
optind	int
++	O
)	O
{	O
char	O
*	O
font_name	*(char)
;	O
font_name	*(char)
=	O
argv	*(*(char))
[	O
optind	int
]	O
;	O
if	O
(	O
do_font	(*(struct),*(char),enum(int,int),*(char),*(char),*(char),enum(int,int),enum(int,int,int),int,enum(int,int))->(enum(int,int))
(	O
plotter	*(struct)
,	O
font_name	*(char)
,	O
upper_half	enum(int,int)
,	O
pen_color	*(char)
,	O
numbering_font_name	*(char)
,	O
title_font_name	*(char)
,	O
bearings	enum(int,int)
,	O
base	enum(int,int,int)
,	O
jis_page	int
,	O
do_jis_page	enum(int,int)
)	O
==	O
false	int
)	O
return	O
EXIT_FAILURE	int
;	O
}	O
}	O
retval	int
=	O
EXIT_SUCCESS	int
;	O
if	O
(	O
pl_deletepl_r	(*(struct))->(int)
(	O
plotter	*(struct)
)	O
<	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: error: the plot device could not be deleted\n"	*(char)
,	O
progname	*(char)
)	O
;	O
retval	int
=	O
EXIT_FAILURE	int
;	O
}	O
pl_deleteplparams	(*(struct))->(int)
(	O
plotter_params	*(struct)
)	O
;	O
return	O
retval	int
;	O
}	O
bool	enum(int,int)
do_font	(*(struct),*(char),enum(int,int),*(char),*(char),*(char),enum(int,int),enum(int,int,int),int,enum(int,int))->(enum(int,int))
(	O
plPlotter	struct
*	O
plotter	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
,	O
bool	enum(int,int)
upper_half	enum(int,int)
,	O
char	O
*	O
pen_color_name	*(char)
,	O
char	O
*	O
numbering_font_name	*(char)
,	O
char	O
*	O
title_font_name	*(char)
,	O
bool	enum(int,int)
bearings	enum(int,int)
,	O
enum	O
radix	enum(int,int,int)
base	enum(int,int,int)
,	O
int	O
jis_page	int
,	O
bool	enum(int,int)
do_jis_page	enum(int,int)
)	O
{	O
char	O
buf	array(char)
[	O
16	int
]	O
;	O
char	O
numbuf	*(char)
[	O
16	int
]	O
;	O
char	O
suffixbuf	array(char)
[	O
16	int
]	O
;	O
char	O
*	O
titlebuf	*(char)
;	O
const	O
char	O
*	O
suffix	*(char)
;	O
double	O
title_width	double
;	O
int	O
i	int
,	O
j	int
,	O
bottom_octet	int
,	O
top_octet	int
;	O
if	O
(	O
do_jis_page	enum(int,int)
)	O
{	O
switch	O
(	O
base	enum(int,int,int)
)	O
{	O
case	O
DECIMAL	int
:	O
default	O
:	O
sprintf	(*(char),*(char))->(int)
(	O
suffixbuf	array(char)
,	O
" (row %d)"	*(char)
,	O
jis_page	int
-	O
32	int
)	O
;	O
break	O
;	O
case	O
OCTAL	int
:	O
sprintf	(*(char),*(char))->(int)
(	O
suffixbuf	array(char)
,	O
" (row 0%o)"	*(char)
,	O
jis_page	int
-	O
32	int
)	O
;	O
break	O
;	O
case	O
HEXADECIMAL	int
:	O
sprintf	(*(char),*(char))->(int)
(	O
suffixbuf	array(char)
,	O
" (row 0x%X)"	*(char)
,	O
jis_page	int
-	O
32	int
)	O
;	O
break	O
;	O
}	O
suffix	*(char)
=	O
suffixbuf	array(char)
;	O
}	O
else	O
suffix	*(char)
=	O
upper_half	enum(int,int)
?	O
" (upper half)"	*(char)
:	O
" (lower half)"	*(char)
;	O
titlebuf	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
name	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
suffix	*(char)
)	O
+	O
1	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
titlebuf	*(char)
,	O
name	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
titlebuf	*(char)
,	O
suffix	*(char)
)	O
;	O
if	O
(	O
pl_openpl_r	(*(struct))->(int)
(	O
plotter	*(struct)
)	O
<	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: error: the plot device could not be opened\n"	*(char)
,	O
progname	*(char)
)	O
;	O
return	O
false	int
;	O
}	O
pl_fspace_r	(*(struct),double,double,double,double)->(int)
(	O
plotter	*(struct)
,	O
0.0	int
,	O
0.0	int
,	O
(	O
double	O
)	O
SIZE	int
,	O
(	O
double	O
)	O
SIZE	int
)	O
;	O
pl_erase_r	(*(struct))->(int)
(	O
plotter	*(struct)
)	O
;	O
if	O
(	O
pen_color_name	*(char)
)	O
pl_pencolorname_r	(*(struct),*(char))->(int)
(	O
plotter	*(struct)
,	O
pen_color_name	*(char)
)	O
;	O
pl_fmove_r	(*(struct),double,double)->(int)
(	O
plotter	*(struct)
,	O
0.5	int
*	O
SIZE	int
,	O
0.5	int
*	O
(	O
SIZE	int
+	O
TOP	O
)	O
)	O
;	O
if	O
(	O
title_font_name	*(char)
)	O
pl_fontname_r	(*(struct),*(char))->(int)
(	O
plotter	*(struct)
,	O
title_font_name	*(char)
)	O
;	O
else	O
pl_fontname_r	(*(struct),*(char))->(int)
(	O
plotter	*(struct)
,	O
name	*(char)
)	O
;	O
pl_ffontsize_r	(*(struct),double)->(double)
(	O
plotter	*(struct)
,	O
(	O
double	O
)	O
(	O
TITLE_FONT_SIZE	int
)	O
)	O
;	O
title_width	double
=	O
pl_flabelwidth_r	(*(struct),*(char))->(double)
(	O
plotter	*(struct)
,	O
titlebuf	*(char)
)	O
;	O
if	O
(	O
title_width	double
>	O
MAX_TITLE_LENGTH	int
)	O
pl_ffontsize_r	(*(struct),double)->(double)
(	O
plotter	*(struct)
,	O
(	O
double	O
)	O
(	O
TITLE_FONT_SIZE	int
)	O
*	O
(	O
MAX_TITLE_LENGTH	int
/	O
title_width	double
)	O
)	O
;	O
pl_alabel_r	(*(struct),int,int,*(char))->(int)
(	O
plotter	*(struct)
,	O
'c'	O
,	O
'c'	O
,	O
titlebuf	*(char)
)	O
;	O
if	O
(	O
do_jis_page	enum(int,int)
)	O
bottom_octet	int
=	O
4	int
;	O
else	O
{	O
if	O
(	O
upper_half	enum(int,int)
)	O
bottom_octet	int
=	O
20	int
;	O
else	O
bottom_octet	int
=	O
4	int
;	O
}	O
top_octet	int
=	O
bottom_octet	int
+	O
NUM_ROWS	int
-	O
1	int
;	O
pl_linemod_r	(*(struct),*(char))->(int)
(	O
plotter	*(struct)
,	O
"solid"	*(char)
)	O
;	O
pl_fbox_r	(*(struct),double,double,double,double)->(int)
(	O
plotter	*(struct)
,	O
LEFT	O
,	O
BOTTOM	O
,	O
RIGHT	O
,	O
TOP	O
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
7	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
i	int
%	O
2	int
)	O
pl_fline_r	(*(struct),double,double,double,double)->(int)
(	O
plotter	*(struct)
,	O
LINE_HOFFSET	O
+	O
i	int
*	O
HSPACING	int
,	O
BOTTOM	O
,	O
LINE_HOFFSET	O
+	O
i	int
*	O
HSPACING	int
,	O
TOP	O
)	O
;	O
else	O
pl_fline_r	(*(struct),double,double,double,double)->(int)
(	O
plotter	*(struct)
,	O
LINE_HOFFSET	O
+	O
i	int
*	O
HSPACING	int
,	O
TOP	O
,	O
LINE_HOFFSET	O
+	O
i	int
*	O
HSPACING	int
,	O
BOTTOM	O
)	O
;	O
}	O
for	O
(	O
j	int
=	O
1	int
;	O
j	int
<=	O
11	int
;	O
j	int
++	O
)	O
{	O
if	O
(	O
j	int
%	O
2	int
)	O
pl_fline_r	(*(struct),double,double,double,double)->(int)
(	O
plotter	*(struct)
,	O
RIGHT	O
,	O
TOP	O
-	O
j	int
*	O
VSPACING	int
,	O
LEFT	O
,	O
TOP	O
-	O
j	int
*	O
VSPACING	int
)	O
;	O
else	O
pl_fline_r	(*(struct),double,double,double,double)->(int)
(	O
plotter	*(struct)
,	O
LEFT	O
,	O
TOP	O
-	O
j	int
*	O
VSPACING	int
,	O
RIGHT	O
,	O
TOP	O
-	O
j	int
*	O
VSPACING	int
)	O
;	O
}	O
if	O
(	O
numbering_font_name	*(char)
)	O
pl_fontname_r	(*(struct),*(char))->(int)
(	O
plotter	*(struct)
,	O
numbering_font_name	*(char)
)	O
;	O
else	O
pl_fontname_r	(*(struct),*(char))->(int)
(	O
plotter	*(struct)
,	O
""	*(char)
)	O
;	O
pl_ffontsize_r	(*(struct),double)->(double)
(	O
plotter	*(struct)
,	O
(	O
double	O
)	O
(	O
NUMBERING_FONT_SIZE	int
)	O
)	O
;	O
if	O
(	O
bearings	enum(int,int)
)	O
pl_linemod_r	(*(struct),*(char))->(int)
(	O
plotter	*(struct)
,	O
"dotted"	*(char)
)	O
;	O
for	O
(	O
i	int
=	O
bottom_octet	int
;	O
i	int
<=	O
top_octet	int
;	O
i	int
++	O
)	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
8	int
;	O
j	int
++	O
)	O
{	O
int	O
row	int
,	O
column	int
,	O
charnum	int
;	O
row	int
=	O
i	int
-	O
bottom_octet	int
;	O
column	int
=	O
j	int
;	O
charnum	int
=	O
(	O
unsigned	O
char	O
)	O
(	O
8	int
*	O
i	int
+	O
j	int
)	O
;	O
if	O
(	O
charnum	int
==	O
127	int
)	O
continue	O
;	O
if	O
(	O
do_jis_page	enum(int,int)
&&	O
charnum	int
==	O
32	int
)	O
continue	O
;	O
switch	O
(	O
base	enum(int,int,int)
)	O
{	O
case	O
HEXADECIMAL	int
:	O
write_two_bytes	(int,*(char),int)->(void)
(	O
charnum	int
-	O
(	O
do_jis_page	enum(int,int)
?	O
32	int
:	O
0	int
)	O
,	O
numbuf	*(char)
,	O
16	int
)	O
;	O
break	O
;	O
case	O
DECIMAL	int
:	O
default	O
:	O
write_three_bytes	(int,*(char),int)->(void)
(	O
charnum	int
-	O
(	O
do_jis_page	enum(int,int)
?	O
32	int
:	O
0	int
)	O
,	O
numbuf	*(char)
,	O
10	int
)	O
;	O
break	O
;	O
case	O
OCTAL	int
:	O
write_three_bytes	(int,*(char),int)->(void)
(	O
charnum	int
-	O
(	O
do_jis_page	enum(int,int)
?	O
32	int
:	O
0	int
)	O
,	O
numbuf	*(char)
,	O
8	int
)	O
;	O
break	O
;	O
}	O
pl_fmove_r	(*(struct),double,double)->(int)
(	O
plotter	*(struct)
,	O
(	O
double	O
)	O
(	O
LINE_HOFFSET	O
+	O
HSPACING	int
*	O
(	O
column	int
+	O
1	int
-	O
N_X_SHIFT	int
)	O
)	O
,	O
(	O
double	O
)	O
(	O
SIZE	int
-	O
(	O
LINE_VOFFSET	int
+	O
VSPACING	int
*	O
(	O
row	int
+	O
1	int
-	O
N_Y_SHIFT	int
)	O
)	O
)	O
)	O
;	O
pl_alabel_r	(*(struct),int,int,*(char))->(int)
(	O
plotter	*(struct)
,	O
'r'	O
,	O
'x'	O
,	O
numbuf	*(char)
)	O
;	O
}	O
pl_fontname_r	(*(struct),*(char))->(int)
(	O
plotter	*(struct)
,	O
name	*(char)
)	O
;	O
pl_ffontsize_r	(*(struct),double)->(double)
(	O
plotter	*(struct)
,	O
(	O
double	O
)	O
(	O
FONT_SIZE	int
)	O
)	O
;	O
for	O
(	O
i	int
=	O
bottom_octet	int
;	O
i	int
<=	O
top_octet	int
;	O
i	int
++	O
)	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
8	int
;	O
j	int
++	O
)	O
{	O
int	O
row	int
,	O
column	int
,	O
charnum	int
;	O
row	int
=	O
i	int
-	O
bottom_octet	int
;	O
column	int
=	O
j	int
;	O
charnum	int
=	O
(	O
unsigned	O
char	O
)	O
(	O
8	int
*	O
i	int
+	O
j	int
)	O
;	O
if	O
(	O
charnum	int
==	O
127	int
)	O
continue	O
;	O
if	O
(	O
do_jis_page	enum(int,int)
&&	O
charnum	int
==	O
32	int
)	O
continue	O
;	O
if	O
(	O
!	O
do_jis_page	enum(int,int)
)	O
{	O
buf	array(char)
[	O
0	int
]	O
=	O
charnum	int
;	O
buf	array(char)
[	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
else	O
{	O
buf	array(char)
[	O
0	int
]	O
=	O
jis_page	int
+	O
0x80	int
;	O
buf	array(char)
[	O
1	int
]	O
=	O
charnum	int
+	O
0x80	int
;	O
buf	array(char)
[	O
2	int
]	O
=	O
'\0'	O
;	O
}	O
pl_fmove_r	(*(struct),double,double)->(int)
(	O
plotter	*(struct)
,	O
(	O
double	O
)	O
(	O
LINE_HOFFSET	O
+	O
HSPACING	int
*	O
(	O
column	int
+	O
0.5	int
)	O
)	O
,	O
(	O
double	O
)	O
(	O
SIZE	int
-	O
(	O
LINE_VOFFSET	int
+	O
VSPACING	int
*	O
(	O
row	int
+	O
0.5	int
)	O
)	O
)	O
)	O
;	O
pl_alabel_r	(*(struct),int,int,*(char))->(int)
(	O
plotter	*(struct)
,	O
'c'	O
,	O
'c'	O
,	O
(	O
char	O
*	O
)	O
buf	array(char)
)	O
;	O
if	O
(	O
bearings	enum(int,int)
)	O
{	O
double	O
halfwidth	double
;	O
halfwidth	double
=	O
0.5	int
*	O
pl_flabelwidth_r	(*(struct),*(char))->(double)
(	O
plotter	*(struct)
,	O
(	O
char	O
*	O
)	O
buf	array(char)
)	O
;	O
if	O
(	O
halfwidth	double
==	O
0.0	int
)	O
pl_fline_r	(*(struct),double,double,double,double)->(int)
(	O
plotter	*(struct)
,	O
(	O
double	O
)	O
(	O
CHAR_HOFFSET	O
+	O
HSPACING	int
*	O
column	int
)	O
,	O
(	O
double	O
)	O
(	O
SIZE	int
-	O
(	O
CHAR_VOFFSET	O
+	O
VSPACING	int
*	O
(	O
row	int
-	O
0.5	int
)	O
)	O
)	O
,	O
(	O
double	O
)	O
(	O
CHAR_HOFFSET	O
+	O
HSPACING	int
*	O
column	int
)	O
,	O
(	O
double	O
)	O
(	O
SIZE	int
-	O
(	O
CHAR_VOFFSET	O
+	O
VSPACING	int
*	O
(	O
row	int
+	O
0.5	int
)	O
)	O
)	O
)	O
;	O
else	O
{	O
pl_fline_r	(*(struct),double,double,double,double)->(int)
(	O
plotter	*(struct)
,	O
(	O
double	O
)	O
(	O
CHAR_HOFFSET	O
+	O
HSPACING	int
*	O
column	int
-	O
halfwidth	double
)	O
,	O
(	O
double	O
)	O
(	O
SIZE	int
-	O
(	O
CHAR_VOFFSET	O
+	O
VSPACING	int
*	O
(	O
row	int
-	O
0.5	int
)	O
)	O
)	O
,	O
(	O
double	O
)	O
(	O
CHAR_HOFFSET	O
+	O
HSPACING	int
*	O
column	int
-	O
halfwidth	double
)	O
,	O
(	O
double	O
)	O
(	O
SIZE	int
-	O
(	O
CHAR_VOFFSET	O
+	O
VSPACING	int
*	O
(	O
row	int
+	O
0.5	int
)	O
)	O
)	O
)	O
;	O
pl_fline_r	(*(struct),double,double,double,double)->(int)
(	O
plotter	*(struct)
,	O
(	O
double	O
)	O
(	O
CHAR_HOFFSET	O
+	O
HSPACING	int
*	O
column	int
+	O
halfwidth	double
)	O
,	O
(	O
double	O
)	O
(	O
SIZE	int
-	O
(	O
CHAR_VOFFSET	O
+	O
VSPACING	int
*	O
(	O
row	int
-	O
0.5	int
)	O
)	O
)	O
,	O
(	O
double	O
)	O
(	O
CHAR_HOFFSET	O
+	O
HSPACING	int
*	O
column	int
+	O
halfwidth	double
)	O
,	O
(	O
double	O
)	O
(	O
SIZE	int
-	O
(	O
CHAR_VOFFSET	O
+	O
VSPACING	int
*	O
(	O
row	int
+	O
0.5	int
)	O
)	O
)	O
)	O
;	O
}	O
}	O
}	O
if	O
(	O
pl_closepl_r	(*(struct))->(int)
(	O
plotter	*(struct)
)	O
<	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: error: the plot device could not be closed\n"	*(char)
,	O
progname	*(char)
)	O
;	O
return	O
false	int
;	O
}	O
return	O
true	int
;	O
}	O
void	O
write_three_bytes	(int,*(char),int)->(void)
(	O
int	O
charnum	int
,	O
char	O
*	O
numbuf	*(char)
,	O
int	O
radix	enum(int,int,int)
)	O
{	O
int	O
i	int
;	O
numbuf	*(char)
[	O
0	int
]	O
=	O
charnum	int
/	O
(	O
radix	enum(int,int,int)
*	O
radix	enum(int,int,int)
)	O
;	O
numbuf	*(char)
[	O
1	int
]	O
=	O
(	O
charnum	int
-	O
(	O
radix	enum(int,int,int)
*	O
radix	enum(int,int,int)
)	O
*	O
(	O
charnum	int
/	O
(	O
radix	enum(int,int,int)
*	O
radix	enum(int,int,int)
)	O
)	O
)	O
/	O
radix	enum(int,int,int)
;	O
numbuf	*(char)
[	O
2	int
]	O
=	O
charnum	int
%	O
radix	enum(int,int,int)
;	O
numbuf	*(char)
[	O
3	int
]	O
=	O
'\0'	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
2	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
numbuf	*(char)
[	O
i	int
]	O
>=	O
10	int
)	O
numbuf	*(char)
[	O
i	int
]	O
+=	O
(	O
'A'	O
-	O
10	int
)	O
;	O
else	O
numbuf	*(char)
[	O
i	int
]	O
+=	O
'0'	O
;	O
}	O
if	O
(	O
numbuf	*(char)
[	O
0	int
]	O
==	O
'0'	O
)	O
{	O
numbuf	*(char)
[	O
0	int
]	O
=	O
' '	O
;	O
if	O
(	O
numbuf	*(char)
[	O
1	int
]	O
==	O
'0'	O
)	O
numbuf	*(char)
[	O
1	int
]	O
=	O
' '	O
;	O
}	O
}	O
void	O
write_two_bytes	(int,*(char),int)->(void)
(	O
int	O
charnum	int
,	O
char	O
*	O
numbuf	*(char)
,	O
int	O
radix	enum(int,int,int)
)	O
{	O
int	O
i	int
;	O
numbuf	*(char)
[	O
0	int
]	O
=	O
charnum	int
/	O
radix	enum(int,int,int)
;	O
numbuf	*(char)
[	O
1	int
]	O
=	O
charnum	int
%	O
radix	enum(int,int,int)
;	O
numbuf	*(char)
[	O
2	int
]	O
=	O
'\0'	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
1	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
numbuf	*(char)
[	O
i	int
]	O
>=	O
10	int
)	O
numbuf	*(char)
[	O
i	int
]	O
+=	O
(	O
'A'	O
-	O
10	int
)	O
;	O
else	O
numbuf	*(char)
[	O
i	int
]	O
+=	O
'0'	O
;	O
}	O
}	O
