unsigned	O
long	O
int	O
gmp_nextprime	O
(	O
gmp_primesieve_t	struct(long,long,long,array(char))
*	O
ps	*(struct(long,long,long,array(char)))
)	O
{	O
unsigned	O
long	O
p	*(char)
,	O
d	long
,	O
pi	long
;	O
unsigned	O
char	O
*	O
sp	*(char)
;	O
static	O
unsigned	O
char	O
addtab	array(char)
[	O
]	O
=	O
{	O
2	int
,	O
4	int
,	O
2	int
,	O
4	int
,	O
6	int
,	O
2	int
,	O
6	int
,	O
4	int
,	O
2	int
,	O
4	int
,	O
6	int
,	O
6	int
,	O
2	int
,	O
6	int
,	O
4	int
,	O
2	int
,	O
6	int
,	O
4	int
,	O
6	int
,	O
8	int
,	O
4	int
,	O
2	int
,	O
4	int
,	O
2	int
,	O
4	int
,	O
8	int
,	O
6	int
,	O
4	int
,	O
6	int
,	O
2	int
,	O
4	int
,	O
6	int
,	O
2	int
,	O
6	int
,	O
6	int
,	O
4	int
,	O
2	int
,	O
4	int
,	O
6	int
,	O
2	int
,	O
6	int
,	O
4	int
,	O
2	int
,	O
4	int
,	O
2	int
,	O
10	int
,	O
2	int
,	O
10	int
}	O
;	O
unsigned	O
char	O
*	O
addp	*(char)
=	O
addtab	array(char)
;	O
unsigned	O
long	O
ai	long
;	O
d	long
=	O
ps	*(struct(long,long,long,array(char)))
->	O
d	long
;	O
sp	*(char)
=	O
ps	*(struct(long,long,long,array(char)))
->	O
s	array(char)
+	O
d	long
;	O
while	O
(	O
*	O
sp	*(char)
!=	O
0	int
)	O
sp	*(char)
++	O
;	O
if	O
(	O
sp	*(char)
!=	O
ps	*(struct(long,long,long,array(char)))
->	O
s	array(char)
+	O
SIEVESIZE	int
)	O
{	O
d	long
=	O
sp	*(char)
-	O
ps	*(struct(long,long,long,array(char)))
->	O
s	array(char)
;	O
ps	*(struct(long,long,long,array(char)))
->	O
d	long
=	O
d	long
+	O
1	int
;	O
return	O
ps	*(struct(long,long,long,array(char)))
->	O
s0	long
+	O
2	int
*	O
d	long
;	O
}	O
if	O
(	O
ps	*(struct(long,long,long,array(char)))
->	O
s0	long
<	O
3	int
)	O
{	O
ps	*(struct(long,long,long,array(char)))
->	O
s0	long
=	O
3	int
-	O
2	int
*	O
SIEVESIZE	int
;	O
return	O
2	int
;	O
}	O
memset	(*(void),int,long)->(*(void))
(	O
ps	*(struct(long,long,long,array(char)))
->	O
s	array(char)
,	O
0	int
,	O
SIEVESIZE	int
)	O
;	O
ps	*(struct(long,long,long,array(char)))
->	O
s0	long
+=	O
2	int
*	O
SIEVESIZE	int
;	O
while	O
(	O
(	O
ps	*(struct(long,long,long,array(char)))
->	O
sqrt_s0	long
+	O
1	int
)	O
*	O
(	O
ps	*(struct(long,long,long,array(char)))
->	O
sqrt_s0	long
+	O
1	int
)	O
<=	O
ps	*(struct(long,long,long,array(char)))
->	O
s0	long
+	O
2	int
*	O
SIEVESIZE	int
-	O
1	int
)	O
ps	*(struct(long,long,long,array(char)))
->	O
sqrt_s0	long
++	O
;	O
pi	long
=	O
(	O
(	O
ps	*(struct(long,long,long,array(char)))
->	O
s0	long
+	O
3	int
)	O
/	O
2	int
)	O
%	O
3	int
;	O
if	O
(	O
pi	long
>	O
0	int
)	O
pi	long
=	O
3	int
-	O
pi	long
;	O
if	O
(	O
ps	*(struct(long,long,long,array(char)))
->	O
s0	long
+	O
2	int
*	O
pi	long
<=	O
3	int
)	O
pi	long
+=	O
3	int
;	O
sp	*(char)
=	O
ps	*(struct(long,long,long,array(char)))
->	O
s	array(char)
+	O
pi	long
;	O
while	O
(	O
sp	*(char)
<	O
ps	*(struct(long,long,long,array(char)))
->	O
s	array(char)
+	O
SIEVESIZE	int
)	O
{	O
*	O
sp	*(char)
=	O
1	int
,	O
sp	*(char)
+=	O
3	int
;	O
}	O
pi	long
=	O
(	O
(	O
ps	*(struct(long,long,long,array(char)))
->	O
s0	long
+	O
5	int
)	O
/	O
2	int
)	O
%	O
5	int
;	O
if	O
(	O
pi	long
>	O
0	int
)	O
pi	long
=	O
5	int
-	O
pi	long
;	O
if	O
(	O
ps	*(struct(long,long,long,array(char)))
->	O
s0	long
+	O
2	int
*	O
pi	long
<=	O
5	int
)	O
pi	long
+=	O
5	int
;	O
sp	*(char)
=	O
ps	*(struct(long,long,long,array(char)))
->	O
s	array(char)
+	O
pi	long
;	O
while	O
(	O
sp	*(char)
<	O
ps	*(struct(long,long,long,array(char)))
->	O
s	array(char)
+	O
SIEVESIZE	int
)	O
{	O
*	O
sp	*(char)
=	O
1	int
,	O
sp	*(char)
+=	O
5	int
;	O
}	O
pi	long
=	O
(	O
(	O
ps	*(struct(long,long,long,array(char)))
->	O
s0	long
+	O
7	int
)	O
/	O
2	int
)	O
%	O
7	int
;	O
if	O
(	O
pi	long
>	O
0	int
)	O
pi	long
=	O
7	int
-	O
pi	long
;	O
if	O
(	O
ps	*(struct(long,long,long,array(char)))
->	O
s0	long
+	O
2	int
*	O
pi	long
<=	O
7	int
)	O
pi	long
+=	O
7	int
;	O
sp	*(char)
=	O
ps	*(struct(long,long,long,array(char)))
->	O
s	array(char)
+	O
pi	long
;	O
while	O
(	O
sp	*(char)
<	O
ps	*(struct(long,long,long,array(char)))
->	O
s	array(char)
+	O
SIEVESIZE	int
)	O
{	O
*	O
sp	*(char)
=	O
1	int
,	O
sp	*(char)
+=	O
7	int
;	O
}	O
p	*(char)
=	O
11	int
;	O
ai	long
=	O
0	int
;	O
while	O
(	O
p	*(char)
<=	O
ps	*(struct(long,long,long,array(char)))
->	O
sqrt_s0	long
)	O
{	O
pi	long
=	O
(	O
(	O
ps	*(struct(long,long,long,array(char)))
->	O
s0	long
+	O
p	*(char)
)	O
/	O
2	int
)	O
%	O
p	*(char)
;	O
if	O
(	O
pi	long
>	O
0	int
)	O
pi	long
=	O
p	*(char)
-	O
pi	long
;	O
if	O
(	O
ps	*(struct(long,long,long,array(char)))
->	O
s0	long
+	O
2	int
*	O
pi	long
<=	O
p	*(char)
)	O
pi	long
+=	O
p	*(char)
;	O
sp	*(char)
=	O
ps	*(struct(long,long,long,array(char)))
->	O
s	array(char)
+	O
pi	long
;	O
while	O
(	O
sp	*(char)
<	O
ps	*(struct(long,long,long,array(char)))
->	O
s	array(char)
+	O
SIEVESIZE	int
)	O
{	O
*	O
sp	*(char)
=	O
1	int
,	O
sp	*(char)
+=	O
p	*(char)
;	O
}	O
p	*(char)
+=	O
addp	*(char)
[	O
ai	long
]	O
;	O
ai	long
=	O
(	O
ai	long
+	O
1	int
)	O
%	O
48	int
;	O
}	O
ps	*(struct(long,long,long,array(char)))
->	O
d	long
=	O
0	int
;	O
return	O
gmp_nextprime	O
(	O
ps	*(struct(long,long,long,array(char)))
)	O
;	O
}	O
void	O
gmp_init_primesieve	O
(	O
gmp_primesieve_t	struct(long,long,long,array(char))
*	O
ps	*(struct(long,long,long,array(char)))
)	O
{	O
ps	*(struct(long,long,long,array(char)))
->	O
s0	long
=	O
0	int
;	O
ps	*(struct(long,long,long,array(char)))
->	O
sqrt_s0	long
=	O
0	int
;	O
ps	*(struct(long,long,long,array(char)))
->	O
d	long
=	O
SIEVESIZE	int
;	O
ps	*(struct(long,long,long,array(char)))
->	O
s	array(char)
[	O
SIEVESIZE	int
]	O
=	O
0	int
;	O
}	O
