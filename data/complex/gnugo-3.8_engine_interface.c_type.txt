void	O
init_gnugo	(float,int)->(void)
(	O
float	O
memory	float
,	O
unsigned	O
int	O
seed	int
)	O
{	O
set_random_seed	(int)->(void)
(	O
HASH_RANDOM_SEED	int
)	O
;	O
reading_cache_init	(int)->(void)
(	O
memory	float
*	O
1024	int
*	O
1024	int
)	O
;	O
set_random_seed	(int)->(void)
(	O
seed	int
)	O
;	O
persistent_cache_init	()->(void)
(	O
)	O
;	O
clear_board	()->(void)
(	O
)	O
;	O
transformation_init	()->(void)
(	O
)	O
;	O
dfa_match_init	()->(void)
(	O
)	O
;	O
choose_mc_patterns	(*(char))->(int)
(	O
NULL	O
)	O
;	O
clear_approxlib_cache	()->(void)
(	O
)	O
;	O
clear_accuratelib_cache	()->(void)
(	O
)	O
;	O
}	O
int	O
check_boardsize	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
int	O
boardsize	int
,	O
FILE	struct
*	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
int	O
max_board	int
=	O
MAX_BOARD	int
;	O
if	O
(	O
use_monte_carlo_genmove	int
&&	O
max_board	int
>	O
9	int
)	O
max_board	int
=	O
9	int
;	O
if	O
(	O
boardsize	int
<	O
MIN_BOARD	int
||	O
boardsize	int
>	O
max_board	int
)	O
{	O
if	O
(	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Unsupported board size: %d. "	*(char)
,	O
boardsize	int
)	O
;	O
if	O
(	O
boardsize	int
<	O
MIN_BOARD	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Min size is %d.\n"	*(char)
,	O
MIN_BOARD	int
)	O
;	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Max size is %d"	*(char)
,	O
max_board	int
)	O
;	O
if	O
(	O
max_board	int
<	O
MAX_BOARD	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
" (%d without --monte-carlo)"	*(char)
,	O
MAX_BOARD	int
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
".\n"	*(char)
)	O
;	O
}	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Try `gnugo --help' for more information.\n"	*(char)
)	O
;	O
}	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
void	O
gnugo_clear_board	(int)->(void)
(	O
int	O
boardsize	int
)	O
{	O
board_size	int
=	O
boardsize	int
;	O
clear_board	()->(void)
(	O
)	O
;	O
init_timers	()->(void)
(	O
)	O
;	O
}	O
void	O
gnugo_play_move	(int,int)->(void)
(	O
int	O
move	*(int)
,	O
int	O
color	int
)	O
{	O
play_move	(int,int)->(void)
(	O
move	*(int)
,	O
color	int
)	O
;	O
clock_push_button	(int)->(void)
(	O
color	int
)	O
;	O
}	O
int	O
gnugo_play_sgfnode	(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),int)->(int)
(	O
SGFNode	struct(*(struct(*(struct(*`,short,*`)),short,*(char))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
*	O
node	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
int	O
to_move	int
)	O
{	O
SGFProperty	struct(*(struct(*(struct(*`,short,*`)),short,*(char))),short,*(char))
*	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
;	O
for	O
(	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
=	O
node	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
->	O
props	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
;	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
;	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
=	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
->	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
)	O
{	O
switch	O
(	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
->	O
name	short
)	O
{	O
case	O
SGFAB	int
:	O
add_stone	(int,int)->(void)
(	O
get_sgfmove	(*(struct(*(struct(*`,short,*`)),short,*(char))))->(int)
(	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
)	O
,	O
BLACK	int
)	O
;	O
break	O
;	O
case	O
SGFAW	int
:	O
add_stone	(int,int)->(void)
(	O
get_sgfmove	(*(struct(*(struct(*`,short,*`)),short,*(char))))->(int)
(	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
)	O
,	O
WHITE	int
)	O
;	O
break	O
;	O
case	O
SGFPL	int
:	O
if	O
(	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
->	O
value	*(char)
[	O
0	int
]	O
==	O
'w'	O
||	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
->	O
value	*(char)
[	O
0	int
]	O
==	O
'W'	O
)	O
to_move	int
=	O
WHITE	int
;	O
else	O
to_move	int
=	O
BLACK	int
;	O
break	O
;	O
case	O
SGFW	int
:	O
case	O
SGFB	int
:	O
to_move	int
=	O
(	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
->	O
name	short
==	O
SGFW	int
)	O
?	O
WHITE	int
:	O
BLACK	int
;	O
gnugo_play_move	(int,int)->(void)
(	O
get_sgfmove	(*(struct(*(struct(*`,short,*`)),short,*(char))))->(int)
(	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
)	O
,	O
to_move	int
)	O
;	O
to_move	int
=	O
OTHER_COLOR	O
(	O
to_move	int
)	O
;	O
break	O
;	O
}	O
}	O
return	O
to_move	int
;	O
}	O
int	O
gnugo_sethand	(int,*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))->(int)
(	O
int	O
desired_handicap	int
,	O
SGFNode	struct(*(struct(*(struct(*`,short,*`)),short,*(char))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
*	O
node	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
)	O
{	O
place_fixed_handicap	(int)->(int)
(	O
desired_handicap	int
)	O
;	O
sgffile_recordboard	(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))->(void)
(	O
node	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
)	O
;	O
return	O
handicap	int
;	O
}	O
float	O
gnugo_estimate_score	(*(float),*(float))->(float)
(	O
float	O
*	O
upper	*(float)
,	O
float	O
*	O
lower	*(float)
)	O
{	O
silent_examine_position	(int)->(void)
(	O
EXAMINE_DRAGONS	int
)	O
;	O
if	O
(	O
upper	*(float)
!=	O
NULL	O
)	O
*	O
upper	*(float)
=	O
white_score	float
;	O
if	O
(	O
lower	*(float)
!=	O
NULL	O
)	O
*	O
lower	*(float)
=	O
black_score	float
;	O
return	O
(	O
(	O
white_score	float
+	O
black_score	float
)	O
/	O
2.0	int
)	O
;	O
}	O
void	O
gameinfo_clear	(*(struct(int,int,struct(*(struct`),*(struct`)),int)))->(void)
(	O
Gameinfo	struct(int,int,struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))),int)
*	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
)	O
{	O
gnugo_clear_board	(int)->(void)
(	O
board_size	int
)	O
;	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
->	O
handicap	int
=	O
0	int
;	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
->	O
to_move	int
=	O
BLACK	int
;	O
sgftree_clear	(*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))->(void)
(	O
&	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
->	O
game_record	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
)	O
;	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
->	O
computer_player	int
=	O
WHITE	int
;	O
}	O
void	O
gameinfo_print	(*(struct(int,int,struct(*(struct`),*(struct`)),int)))->(void)
(	O
Gameinfo	struct(int,int,struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))),int)
*	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
)	O
{	O
printf	(*(char))->(int)
(	O
"Board Size:   %d\n"	*(char)
,	O
board_size	int
)	O
;	O
printf	(*(char))->(int)
(	O
"Handicap      %d\n"	*(char)
,	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
->	O
handicap	int
)	O
;	O
printf	(*(char))->(int)
(	O
"Komi:         %.1f\n"	*(char)
,	O
komi	float
)	O
;	O
printf	(*(char))->(int)
(	O
"Move Number:  %d\n"	*(char)
,	O
movenum	int
)	O
;	O
printf	(*(char))->(int)
(	O
"To Move:      %s\n"	*(char)
,	O
color_to_string	(int)->(*(char))
(	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
->	O
to_move	int
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"Computer player: "	*(char)
)	O
;	O
if	O
(	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
->	O
computer_player	int
==	O
WHITE	int
)	O
printf	(*(char))->(int)
(	O
"White\n"	*(char)
)	O
;	O
else	O
if	O
(	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
->	O
computer_player	int
==	O
BLACK	int
)	O
printf	(*(char))->(int)
(	O
"Black\n"	*(char)
)	O
;	O
else	O
if	O
(	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
->	O
computer_player	int
==	O
EMPTY	int
)	O
printf	(*(char))->(int)
(	O
"Both (solo)\n"	*(char)
)	O
;	O
else	O
printf	(*(char))->(int)
(	O
"Nobody\n"	*(char)
)	O
;	O
}	O
int	O
gameinfo_play_sgftree_rot	(*(struct(int,int,struct(*(struct`),*(struct`)),int)),*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(char),int)->(int)
(	O
Gameinfo	struct(int,int,struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))),int)
*	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
,	O
SGFTree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
*	O
tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
const	O
char	O
*	O
untilstr	*(char)
,	O
int	O
orientation	int
)	O
{	O
int	O
bs	int
;	O
int	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
=	O
BLACK	int
;	O
int	O
untilmove	int
=	O
-	O
1	int
;	O
int	O
until	int
=	O
9999	int
;	O
if	O
(	O
!	O
sgfGetIntProperty	(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(char),*(int))->(int)
(	O
tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
->	O
root	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
"SZ"	*(char)
,	O
&	O
bs	int
)	O
)	O
bs	int
=	O
19	int
;	O
if	O
(	O
!	O
check_boardsize	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
bs	int
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
return	O
EMPTY	int
;	O
handicap	int
=	O
0	int
;	O
if	O
(	O
sgfGetIntProperty	(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(char),*(int))->(int)
(	O
tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
->	O
root	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
"HA"	*(char)
,	O
&	O
handicap	int
)	O
&&	O
handicap	int
>	O
1	int
)	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
=	O
WHITE	int
;	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
->	O
handicap	int
=	O
handicap	int
;	O
if	O
(	O
handicap	int
>	O
bs	int
*	O
bs	int
-	O
1	int
||	O
handicap	int
<	O
0	int
)	O
{	O
gprintf	(*(char))->(int)
(	O
" Handicap HA[%d] is unreasonable.\n Modify SGF file.\n"	*(char)
,	O
handicap	int
)	O
;	O
return	O
EMPTY	int
;	O
}	O
gnugo_clear_board	(int)->(void)
(	O
bs	int
)	O
;	O
if	O
(	O
!	O
sgfGetFloatProperty	(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(char),*(float))->(int)
(	O
tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
->	O
root	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
"KM"	*(char)
,	O
&	O
komi	float
)	O
)	O
{	O
if	O
(	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
->	O
handicap	int
==	O
0	int
)	O
komi	float
=	O
5.5	int
;	O
else	O
komi	float
=	O
0.5	int
;	O
}	O
if	O
(	O
untilstr	*(char)
)	O
{	O
if	O
(	O
*	O
untilstr	*(char)
>	O
'0'	O
&&	O
*	O
untilstr	*(char)
<=	O
'9'	O
)	O
{	O
until	int
=	O
atoi	(*(char))->(int)
(	O
untilstr	*(char)
)	O
;	O
DEBUG	O
(	O
DEBUG_LOADSGF	int
,	O
"Loading until move %d\n"	*(char)
,	O
until	int
)	O
;	O
}	O
else	O
{	O
untilmove	int
=	O
string_to_location	(int,*(char))->(int)
(	O
board_size	int
,	O
untilstr	*(char)
)	O
;	O
DEBUG	O
(	O
DEBUG_LOADSGF	int
,	O
"Loading until move at %1m\n"	*(char)
,	O
untilmove	int
)	O
;	O
}	O
}	O
for	O
(	O
tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
->	O
lastnode	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
=	O
NULL	O
;	O
sgftreeForward	(*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))->(int)
(	O
tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
)	O
;	O
)	O
{	O
SGFProperty	struct(*(struct(*(struct(*`,short,*`)),short,*(char))),short,*(char))
*	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
;	O
int	O
move	*(int)
;	O
for	O
(	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
=	O
tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
->	O
lastnode	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
->	O
props	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
;	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
;	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
=	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
->	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
)	O
{	O
DEBUG	O
(	O
DEBUG_LOADSGF	int
,	O
"%c%c[%s]\n"	*(char)
,	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
->	O
name	short
&	O
0xff	int
,	O
(	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
->	O
name	short
>>	O
8	int
)	O
,	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
->	O
value	*(char)
)	O
;	O
switch	O
(	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
->	O
name	short
)	O
{	O
case	O
SGFAB	int
:	O
case	O
SGFAW	int
:	O
move	*(int)
=	O
rotate1	(int,int)->(int)
(	O
get_sgfmove	(*(struct(*(struct(*`,short,*`)),short,*(char))))->(int)
(	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
)	O
,	O
orientation	int
)	O
;	O
if	O
(	O
board	*(char)
[	O
move	*(int)
]	O
!=	O
EMPTY	int
)	O
gprintf	(*(char))->(int)
(	O
"Illegal SGF! attempt to add a stone at occupied point %1m\n"	*(char)
,	O
move	*(int)
)	O
;	O
else	O
add_stone	(int,int)->(void)
(	O
move	*(int)
,	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
->	O
name	short
==	O
SGFAB	int
?	O
BLACK	int
:	O
WHITE	int
)	O
;	O
break	O
;	O
case	O
SGFPL	int
:	O
if	O
(	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
->	O
value	*(char)
[	O
0	int
]	O
==	O
'w'	O
||	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
->	O
value	*(char)
[	O
0	int
]	O
==	O
'W'	O
||	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
->	O
value	*(char)
[	O
0	int
]	O
==	O
'2'	O
)	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
=	O
WHITE	int
;	O
else	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
=	O
BLACK	int
;	O
if	O
(	O
stones_on_board	(int)->(int)
(	O
GRAY	int
)	O
==	O
0	int
&&	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
==	O
WHITE	int
)	O
{	O
place_fixed_handicap	(int)->(int)
(	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
->	O
handicap	int
)	O
;	O
sgfOverwritePropertyInt	(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(char),int)->(void)
(	O
tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
->	O
root	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
"HA"	*(char)
,	O
handicap	int
)	O
;	O
}	O
break	O
;	O
case	O
SGFW	int
:	O
case	O
SGFB	int
:	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
=	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
->	O
name	short
==	O
SGFW	int
?	O
WHITE	int
:	O
BLACK	int
;	O
if	O
(	O
stones_on_board	(int)->(int)
(	O
GRAY	int
)	O
==	O
0	int
&&	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
==	O
WHITE	int
)	O
{	O
place_fixed_handicap	(int)->(int)
(	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
->	O
handicap	int
)	O
;	O
sgfOverwritePropertyInt	(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(char),int)->(void)
(	O
tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
->	O
root	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
"HA"	*(char)
,	O
handicap	int
)	O
;	O
}	O
move	*(int)
=	O
get_sgfmove	(*(struct(*(struct(*`,short,*`)),short,*(char))))->(int)
(	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
)	O
;	O
if	O
(	O
move	*(int)
==	O
untilmove	int
||	O
movenum	int
==	O
until	int
-	O
1	int
)	O
{	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
->	O
to_move	int
=	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
;	O
sgftreeBack	(*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))->(int)
(	O
tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
)	O
;	O
return	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
;	O
}	O
move	*(int)
=	O
rotate1	(int,int)->(int)
(	O
move	*(int)
,	O
orientation	int
)	O
;	O
if	O
(	O
move	*(int)
==	O
PASS_MOVE	int
||	O
board	*(char)
[	O
move	*(int)
]	O
==	O
EMPTY	int
)	O
{	O
gnugo_play_move	(int,int)->(void)
(	O
move	*(int)
,	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
)	O
;	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
=	O
OTHER_COLOR	O
(	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
)	O
;	O
}	O
else	O
{	O
gprintf	(*(char))->(int)
(	O
"WARNING: Move off board or on occupied position found in sgf-file.\n"	*(char)
)	O
;	O
gprintf	(*(char))->(int)
(	O
"Move at %1m ignored, trying to proceed.\n"	*(char)
,	O
move	*(int)
)	O
;	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
->	O
to_move	int
=	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
;	O
return	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
;	O
}	O
break	O
;	O
case	O
SGFIL	int
:	O
move	*(int)
=	O
rotate1	(int,int)->(int)
(	O
get_sgfmove	(*(struct(*(struct(*`,short,*`)),short,*(char))))->(int)
(	O
prop	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
)	O
,	O
orientation	int
)	O
;	O
if	O
(	O
board_size	int
>	O
1	int
)	O
{	O
int	O
move_color	int
;	O
if	O
(	O
ON_BOARD	O
(	O
NORTH	O
(	O
move	*(int)
)	O
)	O
)	O
move_color	int
=	O
OTHER_COLOR	O
(	O
board	*(char)
[	O
NORTH	O
(	O
move	*(int)
)	O
]	O
)	O
;	O
else	O
move_color	int
=	O
OTHER_COLOR	O
(	O
board	*(char)
[	O
SOUTH	O
(	O
move	*(int)
)	O
]	O
)	O
;	O
if	O
(	O
is_ko	(int,int,*(int))->(int)
(	O
move	*(int)
,	O
move_color	int
,	O
NULL	O
)	O
)	O
board_ko_pos	int
=	O
move	*(int)
;	O
}	O
break	O
;	O
}	O
}	O
}	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
->	O
to_move	int
=	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
;	O
return	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
;	O
}	O
int	O
gameinfo_play_sgftree	(*(struct(int,int,struct(*(struct`),*(struct`)),int)),*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(char))->(int)
(	O
Gameinfo	struct(int,int,struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))),int)
*	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
,	O
SGFTree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
*	O
tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
const	O
char	O
*	O
untilstr	*(char)
)	O
{	O
return	O
gameinfo_play_sgftree_rot	(*(struct(int,int,struct(*(struct`),*(struct`)),int)),*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(char),int)->(int)
(	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
,	O
tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
untilstr	*(char)
,	O
0	int
)	O
;	O
}	O
