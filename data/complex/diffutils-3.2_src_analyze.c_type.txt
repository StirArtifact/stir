static	O
void	O
discard_confusing_lines	(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)))->(void)
(	O
struct	O
file_data	struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
]	O
)	O
{	O
int	O
f	int
;	O
lin	long
i	long
;	O
char	O
*	O
discarded	array(*(char))
[	O
2	int
]	O
;	O
lin	long
*	O
equiv_count	array(*(long))
[	O
2	int
]	O
;	O
lin	long
*	O
p	*(void)
;	O
p	*(void)
=	O
xmalloc	(long)->(*(void))
(	O
(	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
buffered_lines	long
+	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
buffered_lines	long
)	O
*	O
(	O
2	int
*	O
sizeof	O
*	O
p	*(void)
)	O
)	O
;	O
for	O
(	O
f	int
=	O
0	int
;	O
f	int
<	O
2	int
;	O
f	int
++	O
)	O
{	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	int
]	O
.	O
undiscarded	*(long)
=	O
p	*(void)
;	O
p	*(void)
+=	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	int
]	O
.	O
buffered_lines	long
;	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	int
]	O
.	O
realindexes	*(long)
=	O
p	*(void)
;	O
p	*(void)
+=	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	int
]	O
.	O
buffered_lines	long
;	O
}	O
p	*(void)
=	O
zalloc	(long)->(*(void))
(	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
equiv_max	long
*	O
(	O
2	int
*	O
sizeof	O
*	O
p	*(void)
)	O
)	O
;	O
equiv_count	array(*(long))
[	O
0	int
]	O
=	O
p	*(void)
;	O
equiv_count	array(*(long))
[	O
1	int
]	O
=	O
p	*(void)
+	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
equiv_max	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
buffered_lines	long
;	O
++	O
i	long
)	O
++	O
equiv_count	array(*(long))
[	O
0	int
]	O
[	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
equivs	*(long)
[	O
i	long
]	O
]	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
buffered_lines	long
;	O
++	O
i	long
)	O
++	O
equiv_count	array(*(long))
[	O
1	int
]	O
[	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
equivs	*(long)
[	O
i	long
]	O
]	O
;	O
discarded	array(*(char))
[	O
0	int
]	O
=	O
zalloc	(long)->(*(void))
(	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
buffered_lines	long
+	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
buffered_lines	long
)	O
;	O
discarded	array(*(char))
[	O
1	int
]	O
=	O
discarded	array(*(char))
[	O
0	int
]	O
+	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
buffered_lines	long
;	O
for	O
(	O
f	int
=	O
0	int
;	O
f	int
<	O
2	int
;	O
f	int
++	O
)	O
{	O
size_t	long
end	*(int)
=	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	int
]	O
.	O
buffered_lines	long
;	O
char	O
*	O
discards	*(char)
=	O
discarded	array(*(char))
[	O
f	int
]	O
;	O
lin	long
*	O
counts	*(long)
=	O
equiv_count	array(*(long))
[	O
1	int
-	O
f	int
]	O
;	O
lin	long
*	O
equivs	*(long)
=	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	int
]	O
.	O
equivs	*(long)
;	O
size_t	long
many	long
=	O
5	int
;	O
size_t	long
tem	long
=	O
end	*(int)
/	O
64	int
;	O
while	O
(	O
(	O
tem	long
=	O
tem	long
>>	O
2	int
)	O
>	O
0	int
)	O
many	long
*=	O
2	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
end	*(int)
;	O
i	long
++	O
)	O
{	O
lin	long
nmatch	long
;	O
if	O
(	O
equivs	*(long)
[	O
i	long
]	O
==	O
0	int
)	O
continue	O
;	O
nmatch	long
=	O
counts	*(long)
[	O
equivs	*(long)
[	O
i	long
]	O
]	O
;	O
if	O
(	O
nmatch	long
==	O
0	int
)	O
discards	*(char)
[	O
i	long
]	O
=	O
1	int
;	O
else	O
if	O
(	O
nmatch	long
>	O
many	long
)	O
discards	*(char)
[	O
i	long
]	O
=	O
2	int
;	O
}	O
}	O
for	O
(	O
f	int
=	O
0	int
;	O
f	int
<	O
2	int
;	O
f	int
++	O
)	O
{	O
lin	long
end	*(int)
=	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	int
]	O
.	O
buffered_lines	long
;	O
register	O
char	O
*	O
discards	*(char)
=	O
discarded	array(*(char))
[	O
f	int
]	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
end	*(int)
;	O
i	long
++	O
)	O
{	O
if	O
(	O
discards	*(char)
[	O
i	long
]	O
==	O
2	int
)	O
discards	*(char)
[	O
i	long
]	O
=	O
0	int
;	O
else	O
if	O
(	O
discards	*(char)
[	O
i	long
]	O
!=	O
0	int
)	O
{	O
register	O
lin	long
j	long
;	O
lin	long
length	long
;	O
lin	long
provisional	long
=	O
0	int
;	O
for	O
(	O
j	long
=	O
i	long
;	O
j	long
<	O
end	*(int)
;	O
j	long
++	O
)	O
{	O
if	O
(	O
discards	*(char)
[	O
j	long
]	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
discards	*(char)
[	O
j	long
]	O
==	O
2	int
)	O
++	O
provisional	long
;	O
}	O
while	O
(	O
j	long
>	O
i	long
&&	O
discards	*(char)
[	O
j	long
-	O
1	int
]	O
==	O
2	int
)	O
discards	*(char)
[	O
--	O
j	long
]	O
=	O
0	int
,	O
--	O
provisional	long
;	O
length	long
=	O
j	long
-	O
i	long
;	O
if	O
(	O
provisional	long
*	O
4	int
>	O
length	long
)	O
{	O
while	O
(	O
j	long
>	O
i	long
)	O
if	O
(	O
discards	*(char)
[	O
--	O
j	long
]	O
==	O
2	int
)	O
discards	*(char)
[	O
j	long
]	O
=	O
0	int
;	O
}	O
else	O
{	O
register	O
lin	long
consec	long
;	O
lin	long
minimum	long
=	O
1	int
;	O
lin	long
tem	long
=	O
length	long
>>	O
2	int
;	O
while	O
(	O
0	int
<	O
(	O
tem	long
>>=	O
2	int
)	O
)	O
minimum	long
<<=	O
1	int
;	O
minimum	long
++	O
;	O
for	O
(	O
j	long
=	O
0	int
,	O
consec	long
=	O
0	int
;	O
j	long
<	O
length	long
;	O
j	long
++	O
)	O
if	O
(	O
discards	*(char)
[	O
i	long
+	O
j	long
]	O
!=	O
2	int
)	O
consec	long
=	O
0	int
;	O
else	O
if	O
(	O
minimum	long
==	O
++	O
consec	long
)	O
j	long
-=	O
consec	long
;	O
else	O
if	O
(	O
minimum	long
<	O
consec	long
)	O
discards	*(char)
[	O
i	long
+	O
j	long
]	O
=	O
0	int
;	O
for	O
(	O
j	long
=	O
0	int
,	O
consec	long
=	O
0	int
;	O
j	long
<	O
length	long
;	O
j	long
++	O
)	O
{	O
if	O
(	O
j	long
>=	O
8	int
&&	O
discards	*(char)
[	O
i	long
+	O
j	long
]	O
==	O
1	int
)	O
break	O
;	O
if	O
(	O
discards	*(char)
[	O
i	long
+	O
j	long
]	O
==	O
2	int
)	O
consec	long
=	O
0	int
,	O
discards	*(char)
[	O
i	long
+	O
j	long
]	O
=	O
0	int
;	O
else	O
if	O
(	O
discards	*(char)
[	O
i	long
+	O
j	long
]	O
==	O
0	int
)	O
consec	long
=	O
0	int
;	O
else	O
consec	long
++	O
;	O
if	O
(	O
consec	long
==	O
3	int
)	O
break	O
;	O
}	O
i	long
+=	O
length	long
-	O
1	int
;	O
for	O
(	O
j	long
=	O
0	int
,	O
consec	long
=	O
0	int
;	O
j	long
<	O
length	long
;	O
j	long
++	O
)	O
{	O
if	O
(	O
j	long
>=	O
8	int
&&	O
discards	*(char)
[	O
i	long
-	O
j	long
]	O
==	O
1	int
)	O
break	O
;	O
if	O
(	O
discards	*(char)
[	O
i	long
-	O
j	long
]	O
==	O
2	int
)	O
consec	long
=	O
0	int
,	O
discards	*(char)
[	O
i	long
-	O
j	long
]	O
=	O
0	int
;	O
else	O
if	O
(	O
discards	*(char)
[	O
i	long
-	O
j	long
]	O
==	O
0	int
)	O
consec	long
=	O
0	int
;	O
else	O
consec	long
++	O
;	O
if	O
(	O
consec	long
==	O
3	int
)	O
break	O
;	O
}	O
}	O
}	O
}	O
}	O
for	O
(	O
f	int
=	O
0	int
;	O
f	int
<	O
2	int
;	O
f	int
++	O
)	O
{	O
char	O
*	O
discards	*(char)
=	O
discarded	array(*(char))
[	O
f	int
]	O
;	O
lin	long
end	*(int)
=	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	int
]	O
.	O
buffered_lines	long
;	O
lin	long
j	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
end	*(int)
;	O
++	O
i	long
)	O
if	O
(	O
minimal	bool
||	O
discards	*(char)
[	O
i	long
]	O
==	O
0	int
)	O
{	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	int
]	O
.	O
undiscarded	*(long)
[	O
j	long
]	O
=	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	int
]	O
.	O
equivs	*(long)
[	O
i	long
]	O
;	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	int
]	O
.	O
realindexes	*(long)
[	O
j	long
++	O
]	O
=	O
i	long
;	O
}	O
else	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	int
]	O
.	O
changed	*(char)
[	O
i	long
]	O
=	O
1	int
;	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	int
]	O
.	O
nondiscarded_lines	long
=	O
j	long
;	O
}	O
free	(*(void))->(void)
(	O
discarded	array(*(char))
[	O
0	int
]	O
)	O
;	O
free	(*(void))->(void)
(	O
equiv_count	array(*(long))
[	O
0	int
]	O
)	O
;	O
}	O
static	O
void	O
shift_boundaries	(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)))->(void)
(	O
struct	O
file_data	struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
]	O
)	O
{	O
int	O
f	int
;	O
for	O
(	O
f	int
=	O
0	int
;	O
f	int
<	O
2	int
;	O
f	int
++	O
)	O
{	O
char	O
*	O
changed	*(char)
=	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	int
]	O
.	O
changed	*(char)
;	O
char	O
*	O
other_changed	*(char)
=	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
-	O
f	int
]	O
.	O
changed	*(char)
;	O
lin	long
const	O
*	O
equivs	*(long)
=	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	int
]	O
.	O
equivs	*(long)
;	O
lin	long
i	long
=	O
0	int
;	O
lin	long
j	long
=	O
0	int
;	O
lin	long
i_end	long
=	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	int
]	O
.	O
buffered_lines	long
;	O
while	O
(	O
1	int
)	O
{	O
lin	long
runlength	long
,	O
start	*(int)
,	O
corresponding	long
;	O
while	O
(	O
i	long
<	O
i_end	long
&&	O
!	O
changed	*(char)
[	O
i	long
]	O
)	O
{	O
while	O
(	O
other_changed	*(char)
[	O
j	long
++	O
]	O
)	O
continue	O
;	O
i	long
++	O
;	O
}	O
if	O
(	O
i	long
==	O
i_end	long
)	O
break	O
;	O
start	*(int)
=	O
i	long
;	O
while	O
(	O
changed	*(char)
[	O
++	O
i	long
]	O
)	O
continue	O
;	O
while	O
(	O
other_changed	*(char)
[	O
j	long
]	O
)	O
j	long
++	O
;	O
do	O
{	O
runlength	long
=	O
i	long
-	O
start	*(int)
;	O
while	O
(	O
start	*(int)
&&	O
equivs	*(long)
[	O
start	*(int)
-	O
1	int
]	O
==	O
equivs	*(long)
[	O
i	long
-	O
1	int
]	O
)	O
{	O
changed	*(char)
[	O
--	O
start	*(int)
]	O
=	O
1	int
;	O
changed	*(char)
[	O
--	O
i	long
]	O
=	O
0	int
;	O
while	O
(	O
changed	*(char)
[	O
start	*(int)
-	O
1	int
]	O
)	O
start	*(int)
--	O
;	O
while	O
(	O
other_changed	*(char)
[	O
--	O
j	long
]	O
)	O
continue	O
;	O
}	O
corresponding	long
=	O
other_changed	*(char)
[	O
j	long
-	O
1	int
]	O
?	O
i	long
:	O
i_end	long
;	O
while	O
(	O
i	long
!=	O
i_end	long
&&	O
equivs	*(long)
[	O
start	*(int)
]	O
==	O
equivs	*(long)
[	O
i	long
]	O
)	O
{	O
changed	*(char)
[	O
start	*(int)
++	O
]	O
=	O
0	int
;	O
changed	*(char)
[	O
i	long
++	O
]	O
=	O
1	int
;	O
while	O
(	O
changed	*(char)
[	O
i	long
]	O
)	O
i	long
++	O
;	O
while	O
(	O
other_changed	*(char)
[	O
++	O
j	long
]	O
)	O
corresponding	long
=	O
i	long
;	O
}	O
}	O
while	O
(	O
runlength	long
!=	O
i	long
-	O
start	*(int)
)	O
;	O
while	O
(	O
corresponding	long
<	O
i	long
)	O
{	O
changed	*(char)
[	O
--	O
start	*(int)
]	O
=	O
1	int
;	O
changed	*(char)
[	O
--	O
i	long
]	O
=	O
0	int
;	O
while	O
(	O
other_changed	*(char)
[	O
--	O
j	long
]	O
)	O
continue	O
;	O
}	O
}	O
}	O
}	O
static	O
struct	O
change	struct(*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool)),long,long,long,long,bool)
*	O
add_change	(long,long,long,long,*(struct(*(struct(*`,long,long,long,long,bool)),long,long,long,long,bool)))->(*(struct(*(struct(*`,long,long,long,long,bool)),long,long,long,long,bool)))
(	O
lin	long
line0	long
,	O
lin	long
line1	long
,	O
lin	long
deleted	long
,	O
lin	long
inserted	long
,	O
struct	O
change	struct(*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool)),long,long,long,long,bool)
*	O
old	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
)	O
{	O
struct	O
change	struct(*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool)),long,long,long,long,bool)
*	O
new	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
=	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
*	O
new	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
)	O
;	O
new	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
->	O
line0	long
=	O
line0	long
;	O
new	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
->	O
line1	long
=	O
line1	long
;	O
new	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
->	O
inserted	long
=	O
inserted	long
;	O
new	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
->	O
deleted	long
=	O
deleted	long
;	O
new	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
->	O
link	(*(char),*(char))->(int)
=	O
old	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
;	O
return	O
new	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
;	O
}	O
static	O
struct	O
change	struct(*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool)),long,long,long,long,bool)
*	O
build_reverse_script	(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)))->(*(struct(*(struct(*`,long,long,long,long,bool)),long,long,long,long,bool)))
(	O
struct	O
file_data	struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)
const	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
]	O
)	O
{	O
struct	O
change	struct(*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool)),long,long,long,long,bool)
*	O
script	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
=	O
0	int
;	O
char	O
*	O
changed0	*(char)
=	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
changed	*(char)
;	O
char	O
*	O
changed1	*(char)
=	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
changed	*(char)
;	O
lin	long
len0	long
=	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
buffered_lines	long
;	O
lin	long
len1	long
=	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
buffered_lines	long
;	O
lin	long
i0	long
=	O
0	int
,	O
i1	long
=	O
0	int
;	O
while	O
(	O
i0	long
<	O
len0	long
||	O
i1	long
<	O
len1	long
)	O
{	O
if	O
(	O
changed0	*(char)
[	O
i0	long
]	O
|	O
changed1	*(char)
[	O
i1	long
]	O
)	O
{	O
lin	long
line0	long
=	O
i0	long
,	O
line1	long
=	O
i1	long
;	O
while	O
(	O
changed0	*(char)
[	O
i0	long
]	O
)	O
++	O
i0	long
;	O
while	O
(	O
changed1	*(char)
[	O
i1	long
]	O
)	O
++	O
i1	long
;	O
script	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
=	O
add_change	(long,long,long,long,*(struct(*(struct(*`,long,long,long,long,bool)),long,long,long,long,bool)))->(*(struct(*(struct(*`,long,long,long,long,bool)),long,long,long,long,bool)))
(	O
line0	long
,	O
line1	long
,	O
i0	long
-	O
line0	long
,	O
i1	long
-	O
line1	long
,	O
script	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
)	O
;	O
}	O
i0	long
++	O
,	O
i1	long
++	O
;	O
}	O
return	O
script	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
;	O
}	O
static	O
struct	O
change	struct(*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool)),long,long,long,long,bool)
*	O
build_script	(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)))->(*(struct(*(struct(*`,long,long,long,long,bool)),long,long,long,long,bool)))
(	O
struct	O
file_data	struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)
const	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
]	O
)	O
{	O
struct	O
change	struct(*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool)),long,long,long,long,bool)
*	O
script	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
=	O
0	int
;	O
char	O
*	O
changed0	*(char)
=	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
changed	*(char)
;	O
char	O
*	O
changed1	*(char)
=	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
changed	*(char)
;	O
lin	long
i0	long
=	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
buffered_lines	long
,	O
i1	long
=	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
buffered_lines	long
;	O
while	O
(	O
i0	long
>=	O
0	int
||	O
i1	long
>=	O
0	int
)	O
{	O
if	O
(	O
changed0	*(char)
[	O
i0	long
-	O
1	int
]	O
|	O
changed1	*(char)
[	O
i1	long
-	O
1	int
]	O
)	O
{	O
lin	long
line0	long
=	O
i0	long
,	O
line1	long
=	O
i1	long
;	O
while	O
(	O
changed0	*(char)
[	O
i0	long
-	O
1	int
]	O
)	O
--	O
i0	long
;	O
while	O
(	O
changed1	*(char)
[	O
i1	long
-	O
1	int
]	O
)	O
--	O
i1	long
;	O
script	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
=	O
add_change	(long,long,long,long,*(struct(*(struct(*`,long,long,long,long,bool)),long,long,long,long,bool)))->(*(struct(*(struct(*`,long,long,long,long,bool)),long,long,long,long,bool)))
(	O
i0	long
,	O
i1	long
,	O
line0	long
-	O
i0	long
,	O
line1	long
-	O
i1	long
,	O
script	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
)	O
;	O
}	O
i0	long
--	O
,	O
i1	long
--	O
;	O
}	O
return	O
script	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
;	O
}	O
static	O
int	O
briefly_report	(int,array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)))->(int)
(	O
int	O
changes	enum(int,int,int,int)
,	O
struct	O
file_data	struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)
const	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
]	O
)	O
{	O
if	O
(	O
changes	enum(int,int,int,int)
)	O
{	O
char	O
const	O
*	O
label0	*(char)
=	O
file_label	array(*(char))
[	O
0	int
]	O
?	O
file_label	array(*(char))
[	O
0	int
]	O
:	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
name	*(char)
;	O
char	O
const	O
*	O
label1	*(char)
=	O
file_label	array(*(char))
[	O
1	int
]	O
?	O
file_label	array(*(char))
[	O
1	int
]	O
:	O
filevec	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
name	*(char)
;	O
if	O
(	O
brief	bool
)	O
message	(*(char),*(char),*(char))->(void)
(	O
"Files %s and %s differ\n"	*(char)
,	O
label0	*(char)
,	O
label1	*(char)
)	O
;	O
else	O
{	O
message	(*(char),*(char),*(char))->(void)
(	O
"Binary files %s and %s differ\n"	*(char)
,	O
label0	*(char)
,	O
label1	*(char)
)	O
;	O
changes	enum(int,int,int,int)
=	O
2	int
;	O
}	O
}	O
return	O
changes	enum(int,int,int,int)
;	O
}	O
int	O
diff_2_files	(*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))->(int)
(	O
struct	O
comparison	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`))))))
*	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
)	O
{	O
int	O
f	int
;	O
struct	O
change	struct(*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool)),long,long,long,long,bool)
*	O
e	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
,	O
*	O
p	*(void)
;	O
struct	O
change	struct(*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool)),long,long,long,long,bool)
*	O
script	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
;	O
int	O
changes	enum(int,int,int,int)
;	O
if	O
(	O
read_files	(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),bool)->(bool)
(	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
,	O
files_can_be_treated_as_binary	bool
)	O
)	O
{	O
if	O
(	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
!=	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
&&	O
(	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
desc	int
<	O
0	int
||	O
S_ISREG	O
(	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
)	O
&&	O
(	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
desc	int
<	O
0	int
||	O
S_ISREG	O
(	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
)	O
)	O
changes	enum(int,int,int,int)
=	O
1	int
;	O
else	O
if	O
(	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
desc	int
==	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
desc	int
)	O
changes	enum(int,int,int,int)
=	O
0	int
;	O
else	O
{	O
size_t	long
lcm_max	long
=	O
PTRDIFF_MAX	O
-	O
1	int
;	O
size_t	long
buffer_size	long
=	O
buffer_lcm	(long,long,long)->(long)
(	O
sizeof	O
(	O
word	O
)	O
,	O
buffer_lcm	(long,long,long)->(long)
(	O
STAT_BLOCKSIZE	O
(	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
,	O
STAT_BLOCKSIZE	O
(	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
,	O
lcm_max	long
)	O
,	O
lcm_max	long
)	O
;	O
for	O
(	O
f	int
=	O
0	int
;	O
f	int
<	O
2	int
;	O
f	int
++	O
)	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	int
]	O
.	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	int
]	O
.	O
buffer	*(char)
,	O
buffer_size	long
)	O
;	O
for	O
(	O
;	O
;	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
buffered	long
=	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
buffered	long
=	O
0	int
)	O
{	O
for	O
(	O
f	int
=	O
0	int
;	O
f	int
<	O
2	int
;	O
f	int
++	O
)	O
if	O
(	O
0	int
<=	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	int
]	O
.	O
desc	int
)	O
file_block_read	(*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),long)->(void)
(	O
&	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	int
]	O
,	O
buffer_size	long
-	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	int
]	O
.	O
buffered	long
)	O
;	O
if	O
(	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
buffered	long
!=	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
buffered	long
||	O
memcmp	(*(void),*(void),long)->(int)
(	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
buffer	*(char)
,	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
buffer	*(char)
,	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
buffered	long
)	O
)	O
{	O
changes	enum(int,int,int,int)
=	O
1	int
;	O
break	O
;	O
}	O
if	O
(	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
buffered	long
!=	O
buffer_size	long
)	O
{	O
changes	enum(int,int,int,int)
=	O
0	int
;	O
break	O
;	O
}	O
}	O
}	O
changes	enum(int,int,int,int)
=	O
briefly_report	(int,array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)))->(int)
(	O
changes	enum(int,int,int,int)
,	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
)	O
;	O
}	O
else	O
{	O
struct	O
context	long
ctxt	*(struct(*(long),*(long),*(long),*(long),bool,long))
;	O
lin	long
diags	long
;	O
lin	long
too_expensive	long
;	O
size_t	long
s	long
=	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
buffered_lines	long
+	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
buffered_lines	long
+	O
4	int
;	O
char	O
*	O
flag_space	*(char)
=	O
zalloc	(long)->(*(void))
(	O
s	long
)	O
;	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
changed	*(char)
=	O
flag_space	*(char)
+	O
1	int
;	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
changed	*(char)
=	O
flag_space	*(char)
+	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
buffered_lines	long
+	O
3	int
;	O
discard_confusing_lines	(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)))->(void)
(	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
)	O
;	O
ctxt	*(struct(*(long),*(long),*(long),*(long),bool,long))
.	O
xvec	*(long)
=	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
undiscarded	*(long)
;	O
ctxt	*(struct(*(long),*(long),*(long),*(long),bool,long))
.	O
yvec	*(long)
=	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
undiscarded	*(long)
;	O
diags	long
=	O
(	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
nondiscarded_lines	long
+	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
nondiscarded_lines	long
+	O
3	int
)	O
;	O
ctxt	*(struct(*(long),*(long),*(long),*(long),bool,long))
.	O
fdiag	*(long)
=	O
xmalloc	(long)->(*(void))
(	O
diags	long
*	O
(	O
2	int
*	O
sizeof	O
*	O
ctxt	*(struct(*(long),*(long),*(long),*(long),bool,long))
.	O
fdiag	*(long)
)	O
)	O
;	O
ctxt	*(struct(*(long),*(long),*(long),*(long),bool,long))
.	O
bdiag	*(long)
=	O
ctxt	*(struct(*(long),*(long),*(long),*(long),bool,long))
.	O
fdiag	*(long)
+	O
diags	long
;	O
ctxt	*(struct(*(long),*(long),*(long),*(long),bool,long))
.	O
fdiag	*(long)
+=	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
nondiscarded_lines	long
+	O
1	int
;	O
ctxt	*(struct(*(long),*(long),*(long),*(long),bool,long))
.	O
bdiag	*(long)
+=	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
nondiscarded_lines	long
+	O
1	int
;	O
ctxt	*(struct(*(long),*(long),*(long),*(long),bool,long))
.	O
heuristic	bool
=	O
speed_large_files	bool
;	O
too_expensive	long
=	O
1	int
;	O
for	O
(	O
;	O
diags	long
!=	O
0	int
;	O
diags	long
>>=	O
2	int
)	O
too_expensive	long
<<=	O
1	int
;	O
ctxt	*(struct(*(long),*(long),*(long),*(long),bool,long))
.	O
too_expensive	long
=	O
MAX	O
(	O
256	int
,	O
too_expensive	long
)	O
;	O
files	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
=	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
;	O
files	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
=	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
;	O
compareseq	(long,long,long,long,bool,*(struct(*(long),*(long),*(long),*(long),bool,long)))->(bool)
(	O
0	int
,	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
nondiscarded_lines	long
,	O
0	int
,	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
nondiscarded_lines	long
,	O
minimal	bool
,	O
&	O
ctxt	*(struct(*(long),*(long),*(long),*(long),bool,long))
)	O
;	O
free	(*(void))->(void)
(	O
ctxt	*(struct(*(long),*(long),*(long),*(long),bool,long))
.	O
fdiag	*(long)
-	O
(	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
nondiscarded_lines	long
+	O
1	int
)	O
)	O
;	O
shift_boundaries	(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)))->(void)
(	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
)	O
;	O
if	O
(	O
output_style	enum(int,int,int,int,int,int,int,int,int)
==	O
OUTPUT_ED	int
)	O
script	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
=	O
build_reverse_script	(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)))->(*(struct(*(struct(*`,long,long,long,long,bool)),long,long,long,long,bool)))
(	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
)	O
;	O
else	O
script	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
=	O
build_script	(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)))->(*(struct(*(struct(*`,long,long,long,long,bool)),long,long,long,long,bool)))
(	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
)	O
;	O
if	O
(	O
ignore_blank_lines	bool
||	O
ignore_regexp	struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
.	O
fastmap	*(char)
)	O
{	O
struct	O
change	struct(*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool)),long,long,long,long,bool)
*	O
next	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
=	O
script	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
;	O
changes	enum(int,int,int,int)
=	O
0	int
;	O
while	O
(	O
next	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
&&	O
changes	enum(int,int,int,int)
==	O
0	int
)	O
{	O
struct	O
change	struct(*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool)),long,long,long,long,bool)
*	O
this	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
,	O
*	O
end	*(int)
;	O
lin	long
first0	long
,	O
last0	long
,	O
first1	long
,	O
last1	long
;	O
this	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
=	O
next	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
;	O
end	*(int)
=	O
find_change	(*(struct(*(struct(*`,long,long,long,long,bool)),long,long,long,long,bool)))->(*(struct(*(struct(*`,long,long,long,long,bool)),long,long,long,long,bool)))
(	O
next	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
)	O
;	O
next	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
=	O
end	*(int)
->	O
link	(*(char),*(char))->(int)
;	O
end	*(int)
->	O
link	(*(char),*(char))->(int)
=	O
0	int
;	O
if	O
(	O
analyze_hunk	(*(struct(*(struct(*`,long,long,long,long,bool)),long,long,long,long,bool)),*(long),*(long),*(long),*(long))->(enum(int,int,int,int))
(	O
this	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
,	O
&	O
first0	long
,	O
&	O
last0	long
,	O
&	O
first1	long
,	O
&	O
last1	long
)	O
)	O
changes	enum(int,int,int,int)
=	O
1	int
;	O
end	*(int)
->	O
link	(*(char),*(char))->(int)
=	O
next	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
;	O
}	O
}	O
else	O
changes	enum(int,int,int,int)
=	O
(	O
script	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
!=	O
0	int
)	O
;	O
if	O
(	O
brief	bool
)	O
changes	enum(int,int,int,int)
=	O
briefly_report	(int,array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)))->(int)
(	O
changes	enum(int,int,int,int)
,	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
)	O
;	O
else	O
{	O
if	O
(	O
changes	enum(int,int,int,int)
||	O
!	O
no_diff_means_no_output	bool
)	O
{	O
setup_output	(*(char),*(char),bool)->(void)
(	O
file_label	array(*(char))
[	O
0	int
]	O
?	O
file_label	array(*(char))
[	O
0	int
]	O
:	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
name	*(char)
,	O
file_label	array(*(char))
[	O
1	int
]	O
?	O
file_label	array(*(char))
[	O
1	int
]	O
:	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
name	*(char)
,	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
parent	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
!=	O
0	int
)	O
;	O
switch	O
(	O
output_style	enum(int,int,int,int,int,int,int,int,int)
)	O
{	O
case	O
OUTPUT_CONTEXT	int
:	O
print_context_script	(*(struct(*(struct(*`,long,long,long,long,bool)),long,long,long,long,bool)),bool)->(void)
(	O
script	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
,	O
false	int
)	O
;	O
break	O
;	O
case	O
OUTPUT_UNIFIED	int
:	O
print_context_script	(*(struct(*(struct(*`,long,long,long,long,bool)),long,long,long,long,bool)),bool)->(void)
(	O
script	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
,	O
true	int
)	O
;	O
break	O
;	O
case	O
OUTPUT_ED	int
:	O
print_ed_script	(*(struct(*(struct(*`,long,long,long,long,bool)),long,long,long,long,bool)))->(void)
(	O
script	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
)	O
;	O
break	O
;	O
case	O
OUTPUT_FORWARD_ED	int
:	O
pr_forward_ed_script	(*(struct(*(struct(*`,long,long,long,long,bool)),long,long,long,long,bool)))->(void)
(	O
script	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
)	O
;	O
break	O
;	O
case	O
OUTPUT_RCS	int
:	O
print_rcs_script	(*(struct(*(struct(*`,long,long,long,long,bool)),long,long,long,long,bool)))->(void)
(	O
script	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
)	O
;	O
break	O
;	O
case	O
OUTPUT_NORMAL	int
:	O
print_normal_script	(*(struct(*(struct(*`,long,long,long,long,bool)),long,long,long,long,bool)))->(void)
(	O
script	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
)	O
;	O
break	O
;	O
case	O
OUTPUT_IFDEF	int
:	O
print_ifdef_script	(*(struct(*(struct(*`,long,long,long,long,bool)),long,long,long,long,bool)))->(void)
(	O
script	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
)	O
;	O
break	O
;	O
case	O
OUTPUT_SDIFF	int
:	O
print_sdiff_script	(*(struct(*(struct(*`,long,long,long,long,bool)),long,long,long,long,bool)))->(void)
(	O
script	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
)	O
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
finish_output	()->(void)
(	O
)	O
;	O
}	O
}	O
free	(*(void))->(void)
(	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
undiscarded	*(long)
)	O
;	O
free	(*(void))->(void)
(	O
flag_space	*(char)
)	O
;	O
for	O
(	O
f	int
=	O
0	int
;	O
f	int
<	O
2	int
;	O
f	int
++	O
)	O
{	O
free	(*(void))->(void)
(	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	int
]	O
.	O
equivs	*(long)
)	O
;	O
free	(*(void))->(void)
(	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	int
]	O
.	O
linbuf	*(*(char))
+	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	int
]	O
.	O
linbuf_base	long
)	O
;	O
}	O
for	O
(	O
e	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
=	O
script	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
;	O
e	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
;	O
e	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
=	O
p	*(void)
)	O
{	O
p	*(void)
=	O
e	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
->	O
link	(*(char),*(char))->(int)
;	O
free	(*(void))->(void)
(	O
e	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
)	O
;	O
}	O
if	O
(	O
!	O
ROBUST_OUTPUT_STYLE	O
(	O
output_style	enum(int,int,int,int,int,int,int,int,int)
)	O
)	O
for	O
(	O
f	int
=	O
0	int
;	O
f	int
<	O
2	int
;	O
++	O
f	int
)	O
if	O
(	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	int
]	O
.	O
missing_newline	bool
)	O
{	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
0	int
,	O
"%s: %s\n"	*(char)
,	O
file_label	array(*(char))
[	O
f	int
]	O
?	O
file_label	array(*(char))
[	O
f	int
]	O
:	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	int
]	O
.	O
name	*(char)
,	O
_	O
(	O
"No newline at end of file"	*(char)
)	O
)	O
;	O
changes	enum(int,int,int,int)
=	O
2	int
;	O
}	O
}	O
if	O
(	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
buffer	*(char)
!=	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
buffer	*(char)
)	O
free	(*(void))->(void)
(	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
buffer	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
cmp	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
buffer	*(char)
)	O
;	O
return	O
changes	enum(int,int,int,int)
;	O
}	O
