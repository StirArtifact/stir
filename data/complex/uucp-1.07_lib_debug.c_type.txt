int	O
iDebug	int
;	O
static	O
const	O
char	O
*	O
const	O
azDebug_names	array(*(char))
[	O
]	O
=	O
DEBUG_NAMES	O
;	O
int	O
idebug_parse	(*(char))->(int)
(	O
z	*(char)
)	O
const	O
char	O
*	O
z	*(char)
;	O
{	O
char	O
*	O
zend	*(char)
;	O
int	O
i	int
,	O
iret	int
;	O
char	O
*	O
zcopy	*(char)
,	O
*	O
ztok	*(char)
;	O
if	O
(	O
strncasecmp	(*(char),*(char),long)->(int)
(	O
z	*(char)
,	O
DEBUG_NONE	*(char)
,	O
sizeof	O
DEBUG_NONE	*(char)
-	O
1	int
)	O
==	O
0	int
)	O
return	O
0	int
;	O
i	int
=	O
(	O
int	O
)	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
(	O
char	O
*	O
)	O
z	*(char)
,	O
&	O
zend	*(char)
,	O
0	int
)	O
;	O
if	O
(	O
*	O
zend	*(char)
==	O
'\0'	O
)	O
{	O
if	O
(	O
i	int
>	O
15	int
)	O
i	int
=	O
15	int
;	O
else	O
if	O
(	O
i	int
<	O
0	int
)	O
i	int
=	O
0	int
;	O
return	O
(	O
1	int
<<	O
i	int
)	O
-	O
1	int
;	O
}	O
zcopy	*(char)
=	O
zbufcpy	(*(char))->(*(char))
(	O
z	*(char)
)	O
;	O
iret	int
=	O
0	int
;	O
for	O
(	O
ztok	*(char)
=	O
strtok	(*(char),*(char))->(*(char))
(	O
zcopy	*(char)
,	O
", \t"	*(char)
)	O
;	O
ztok	*(char)
!=	O
NULL	O
;	O
ztok	*(char)
=	O
strtok	(*(char),*(char))->(*(char))
(	O
(	O
char	O
*	O
)	O
NULL	O
,	O
", \t"	*(char)
)	O
)	O
{	O
if	O
(	O
strcasecmp	(*(char),*(char))->(int)
(	O
ztok	*(char)
,	O
"all"	*(char)
)	O
==	O
0	int
)	O
{	O
iret	int
=	O
DEBUG_MAX	O
;	O
break	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
azDebug_names	array(*(char))
[	O
i	int
]	O
!=	O
NULL	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
strncasecmp	(*(char),*(char),long)->(int)
(	O
ztok	*(char)
,	O
azDebug_names	array(*(char))
[	O
i	int
]	O
,	O
strlen	(*(char))->(long)
(	O
azDebug_names	array(*(char))
[	O
i	int
]	O
)	O
)	O
==	O
0	int
)	O
{	O
iret	int
|=	O
1	int
<<	O
i	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
azDebug_names	array(*(char))
[	O
i	int
]	O
==	O
NULL	O
)	O
ulog	(enum(int,int,int,int,int,int,int),*(char))->(void)
(	O
LOG_ERROR	int
,	O
"Unrecognized debugging option \"%s\""	*(char)
,	O
ztok	*(char)
)	O
;	O
}	O
ubuffree	(*(char))->(void)
(	O
zcopy	*(char)
)	O
;	O
return	O
iret	int
;	O
}	O
size_t	long
cdebug_char	(*(char),int)->(long)
(	O
z	*(char)
,	O
ichar	int
)	O
char	O
*	O
z	*(char)
;	O
int	O
ichar	int
;	O
{	O
char	O
b	char
;	O
if	O
(	O
isprint	(int)->(int)
(	O
BUCHAR	O
(	O
ichar	int
)	O
)	O
&&	O
ichar	int
!=	O
'\"'	O
&&	O
ichar	int
!=	O
'\\'	O
)	O
{	O
*	O
z	*(char)
++	O
=	O
(	O
char	O
)	O
ichar	int
;	O
*	O
z	*(char)
=	O
'\0'	O
;	O
return	O
1	int
;	O
}	O
*	O
z	*(char)
++	O
=	O
'\\'	O
;	O
switch	O
(	O
ichar	int
)	O
{	O
case	O
'\n'	O
:	O
b	char
=	O
'n'	O
;	O
break	O
;	O
case	O
'\r'	O
:	O
b	char
=	O
'r'	O
;	O
break	O
;	O
case	O
'\"'	O
:	O
b	char
=	O
'\"'	O
;	O
break	O
;	O
case	O
'\\'	O
:	O
b	char
=	O
'\\'	O
;	O
break	O
;	O
default	O
:	O
sprintf	(*(char),*(char))->(int)
(	O
z	*(char)
,	O
"%03o"	*(char)
,	O
(	O
unsigned	O
int	O
)	O
BUCHAR	O
(	O
ichar	int
)	O
)	O
;	O
return	O
strlen	(*(char))->(long)
(	O
z	*(char)
)	O
+	O
1	int
;	O
}	O
*	O
z	*(char)
++	O
=	O
b	char
;	O
*	O
z	*(char)
=	O
'\0'	O
;	O
return	O
2	int
;	O
}	O
void	O
udebug_buffer	(*(char),*(char),long)->(void)
(	O
zhdr	*(char)
,	O
zbuf	*(char)
,	O
clen	long
)	O
const	O
char	O
*	O
zhdr	*(char)
;	O
const	O
char	O
*	O
zbuf	*(char)
;	O
size_t	long
clen	long
;	O
{	O
char	O
*	O
z	*(char)
,	O
*	O
zalc	*(char)
;	O
size_t	long
i	int
;	O
zalc	*(char)
=	O
zbufalc	(long)->(*(char))
(	O
clen	long
*	O
4	int
+	O
1	int
)	O
;	O
z	*(char)
=	O
zalc	*(char)
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
clen	long
&&	O
i	int
<	O
80	int
;	O
i	int
++	O
)	O
z	*(char)
+=	O
cdebug_char	(*(char),int)->(long)
(	O
z	*(char)
,	O
zbuf	*(char)
[	O
i	int
]	O
)	O
;	O
if	O
(	O
i	int
<	O
clen	long
)	O
{	O
*	O
z	*(char)
++	O
=	O
'.'	O
;	O
*	O
z	*(char)
++	O
=	O
'.'	O
;	O
*	O
z	*(char)
++	O
=	O
'.'	O
;	O
}	O
*	O
z	*(char)
=	O
'\0'	O
;	O
ulog	(enum(int,int,int,int,int,int,int),*(char))->(void)
(	O
LOG_DEBUG	int
,	O
"%s %lu \"%s\""	*(char)
,	O
zhdr	*(char)
,	O
(	O
unsigned	O
long	O
)	O
clen	long
,	O
zalc	*(char)
)	O
;	O
ubuffree	(*(char))->(void)
(	O
zalc	*(char)
)	O
;	O
}	O
