rec_comment_t	*(char)
rec_comment_new	(*(char))->(*(char))
(	O
char	O
*	O
text	*(char)
)	O
{	O
if	O
(	O
!	O
text	*(char)
)	O
return	O
NULL	O
;	O
return	O
strdup	(*(char))->(*(char))
(	O
text	*(char)
)	O
;	O
}	O
void	O
rec_comment_destroy	(*(char))->(void)
(	O
rec_comment_t	*(char)
comment	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
comment	*(char)
)	O
;	O
}	O
rec_comment_t	*(char)
rec_comment_dup	(*(char))->(*(char))
(	O
rec_comment_t	*(char)
comment	*(char)
)	O
{	O
return	O
strdup	(*(char))->(*(char))
(	O
comment	*(char)
)	O
;	O
}	O
char	O
*	O
rec_comment_text	(*(char))->(*(char))
(	O
rec_comment_t	*(char)
comment	*(char)
)	O
{	O
return	O
comment	*(char)
;	O
}	O
void	O
rec_comment_set_text	(*(*(char)),*(char))->(void)
(	O
rec_comment_t	*(char)
*	O
comment	*(char)
,	O
char	O
*	O
text	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
*	O
comment	*(char)
)	O
;	O
*	O
comment	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
text	*(char)
)	O
;	O
}	O
bool	bool
rec_comment_equal_p	(*(char),*(char))->(bool)
(	O
rec_comment_t	*(char)
comment1	*(char)
,	O
rec_comment_t	*(char)
comment2	*(char)
)	O
{	O
return	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
comment1	*(char)
,	O
comment2	*(char)
)	O
==	O
0	int
)	O
;	O
}	O
