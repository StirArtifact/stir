void	O
multiline_warning	O
(	O
char	O
*	O
prefix	O
,	O
char	O
*	O
message	O
)	O
{	O
static	O
int	O
width	O
;	O
const	O
char	O
*	O
cp	O
;	O
int	O
i	O
;	O
fflush	O
(	O
stdout	O
)	O
;	O
cp	O
=	O
message	O
;	O
if	O
(	O
prefix	O
!=	O
NULL	O
)	O
{	O
width	O
=	O
0	int
;	O
if	O
(	O
error_with_progname	O
)	O
{	O
fprintf	O
(	O
stderr	O
,	O
"%s: "	*(char)
,	O
program_name	O
)	O
;	O
width	O
+=	O
mbswidth	O
(	O
program_name	O
,	O
0	int
)	O
+	O
2	int
;	O
}	O
fputs	O
(	O
prefix	O
,	O
stderr	O
)	O
;	O
width	O
+=	O
mbswidth	O
(	O
prefix	O
,	O
0	int
)	O
;	O
free	O
(	O
prefix	O
)	O
;	O
goto	O
after_indent	O
;	O
}	O
for	O
(	O
;	O
;	O
)	O
{	O
const	O
char	O
*	O
np	O
;	O
for	O
(	O
i	O
=	O
width	O
;	O
i	O
>	O
0	int
;	O
i	O
--	O
)	O
putc	O
(	O
' '	O
,	O
stderr	O
)	O
;	O
after_indent	O
:	O
np	O
=	O
strchr	O
(	O
cp	O
,	O
'\n'	O
)	O
;	O
if	O
(	O
np	O
==	O
NULL	O
||	O
np	O
[	O
1	int
]	O
==	O
'\0'	O
)	O
{	O
fputs	O
(	O
cp	O
,	O
stderr	O
)	O
;	O
break	O
;	O
}	O
np	O
++	O
;	O
fwrite	O
(	O
cp	O
,	O
1	int
,	O
np	O
-	O
cp	O
,	O
stderr	O
)	O
;	O
cp	O
=	O
np	O
;	O
}	O
free	O
(	O
message	O
)	O
;	O
}	O
void	O
multiline_error	O
(	O
char	O
*	O
prefix	O
,	O
char	O
*	O
message	O
)	O
{	O
if	O
(	O
prefix	O
!=	O
NULL	O
)	O
++	O
error_message_count	O
;	O
multiline_warning	O
(	O
prefix	O
,	O
message	O
)	O
;	O
}	O
