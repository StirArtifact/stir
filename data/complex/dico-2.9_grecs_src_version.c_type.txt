const	O
char	O
*	O
grecs_vcs_id	*(char)
=	O
"$Id: "	*(char)
GRECS_GIT_ID	*(char)
" $"	*(char)
;	O
struct	O
grecs_version_info	struct(*(char),*(char),*(char),int,int,int,*(char),*(char))
*	O
grecs_version_split	(*(char))->(*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char))))
(	O
const	O
char	O
*	O
vstr	*(char)
)	O
{	O
char	O
*	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
;	O
size_t	long
len	long
;	O
struct	O
grecs_version_info	struct(*(char),*(char),*(char),int,int,int,*(char),*(char))
*	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
=	O
grecs_zalloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
)	O
)	O
;	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
buffer	*(char)
=	O
grecs_strdup	(*(char))->(*(char))
(	O
vstr	*(char)
)	O
;	O
len	long
=	O
strcspn	(*(char),*(char))->(long)
(	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
buffer	*(char)
,	O
" \t"	*(char)
)	O
;	O
if	O
(	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
buffer	*(char)
[	O
len	long
]	O
)	O
{	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
package	*(char)
=	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
buffer	*(char)
;	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
buffer	*(char)
[	O
len	long
++	O
]	O
=	O
0	int
;	O
for	O
(	O
;	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
buffer	*(char)
[	O
len	long
]	O
&&	O
isspace	(int)->(int)
(	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
buffer	*(char)
[	O
len	long
]	O
)	O
;	O
len	long
++	O
)	O
;	O
}	O
else	O
{	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
package	*(char)
=	O
NULL	O
;	O
len	long
=	O
0	int
;	O
}	O
if	O
(	O
!	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
buffer	*(char)
[	O
len	long
]	O
)	O
{	O
free	(*(void))->(void)
(	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
buffer	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
)	O
;	O
return	O
NULL	O
;	O
}	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
version	*(char)
=	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
buffer	*(char)
+	O
len	long
;	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
major	int
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
version	*(char)
,	O
&	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
&&	O
*	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
==	O
'.'	O
)	O
{	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
minor	int
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
+	O
1	int
,	O
&	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
&&	O
*	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
==	O
'.'	O
)	O
{	O
char	O
*	O
q	*(char)
;	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
patch	int
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
+	O
1	int
,	O
&	O
q	*(char)
,	O
10	int
)	O
;	O
if	O
(	O
q	*(char)
==	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
+	O
1	int
)	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
patch	int
=	O
0	int
;	O
else	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
=	O
q	*(char)
;	O
}	O
}	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
suffix	*(char)
=	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
;	O
return	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
;	O
}	O
void	O
grecs_version_info_free	(*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char))))->(void)
(	O
struct	O
grecs_version_info	struct(*(char),*(char),*(char),int,int,int,*(char),*(char))
*	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
)	O
{	O
if	O
(	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
)	O
{	O
if	O
(	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
buffer	*(char)
)	O
grecs_free	(*(void))->(void)
(	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
buffer	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
)	O
;	O
}	O
}	O
struct	O
grecs_version_info	struct(*(char),*(char),*(char),int,int,int,*(char),*(char))
*	O
grecs_version	()->(*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char))))
(	O
void	O
)	O
{	O
struct	O
grecs_version_info	struct(*(char),*(char),*(char),int,int,int,*(char),*(char))
*	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
=	O
grecs_zalloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
)	O
)	O
;	O
size_t	long
size	*(long)
=	O
0	int
;	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
package	*(char)
=	O
PACKAGE_NAME	*(char)
;	O
grecs_asprintf	(*(*(char)),*(long),*(char))->(int)
(	O
&	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
buffer	*(char)
,	O
&	O
size	*(long)
,	O
"%d.%d"	*(char)
,	O
GRECS_VERSION_MAJOR	int
,	O
GRECS_VERSION_MINOR	int
)	O
;	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
version	*(char)
=	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
buffer	*(char)
;	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
major	int
=	O
GRECS_VERSION_MAJOR	int
;	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
minor	int
=	O
GRECS_VERSION_MINOR	int
;	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
id	*(char)
=	O
GRECS_GIT_ID	*(char)
;	O
return	O
pv	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
;	O
}	O
int	O
grecs_version_info_cmp	(*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char))),*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char))),*(int))->(int)
(	O
struct	O
grecs_version_info	struct(*(char),*(char),*(char),int,int,int,*(char),*(char))
*	O
vx	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
,	O
struct	O
grecs_version_info	struct(*(char),*(char),*(char),int,int,int,*(char),*(char))
*	O
vy	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
,	O
int	O
*	O
pres	*(int)
)	O
{	O
if	O
(	O
vx	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
package	*(char)
&&	O
vy	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
package	*(char)
&&	O
strcmp	(*(char),*(char))->(int)
(	O
vx	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
package	*(char)
,	O
vy	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
package	*(char)
)	O
)	O
return	O
1	int
;	O
else	O
if	O
(	O
vx	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
major	int
>	O
vy	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
major	int
)	O
*	O
pres	*(int)
=	O
1	int
;	O
else	O
if	O
(	O
vx	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
major	int
<	O
vy	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
major	int
)	O
*	O
pres	*(int)
=	O
-	O
1	int
;	O
else	O
if	O
(	O
vx	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
minor	int
>	O
vy	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
minor	int
)	O
*	O
pres	*(int)
=	O
1	int
;	O
else	O
if	O
(	O
vx	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
minor	int
<	O
vy	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
minor	int
)	O
*	O
pres	*(int)
=	O
-	O
1	int
;	O
else	O
if	O
(	O
vx	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
patch	int
>	O
vy	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
patch	int
)	O
*	O
pres	*(int)
=	O
1	int
;	O
else	O
if	O
(	O
vx	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
patch	int
<	O
vy	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
patch	int
)	O
*	O
pres	*(int)
=	O
-	O
1	int
;	O
else	O
if	O
(	O
vx	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
suffix	*(char)
&&	O
vy	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
suffix	*(char)
)	O
*	O
pres	*(int)
=	O
strcmp	(*(char),*(char))->(int)
(	O
vx	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
suffix	*(char)
,	O
vy	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
suffix	*(char)
)	O
;	O
else	O
*	O
pres	*(int)
=	O
0	int
;	O
return	O
0	int
;	O
}	O
int	O
grecs_version_cmp	(*(char),*(char),*(int))->(int)
(	O
const	O
char	O
*	O
vstr1	*(char)
,	O
const	O
char	O
*	O
vstr2	*(char)
,	O
int	O
*	O
pres	*(int)
)	O
{	O
struct	O
grecs_version_info	struct(*(char),*(char),*(char),int,int,int,*(char),*(char))
*	O
v1	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
,	O
*	O
v2	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
vstr1	*(char)
||	O
!	O
vstr2	*(char)
)	O
return	O
-	O
1	int
;	O
v1	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
=	O
grecs_version_split	(*(char))->(*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char))))
(	O
vstr1	*(char)
)	O
;	O
if	O
(	O
!	O
v1	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
)	O
return	O
-	O
1	int
;	O
v2	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
=	O
grecs_version_split	(*(char))->(*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char))))
(	O
vstr2	*(char)
)	O
;	O
if	O
(	O
!	O
v2	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
)	O
{	O
grecs_version_info_free	(*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char))))->(void)
(	O
v1	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
rc	int
=	O
grecs_version_info_cmp	(*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char))),*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char))),*(int))->(int)
(	O
v1	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
,	O
v2	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
,	O
pres	*(int)
)	O
;	O
grecs_version_info_free	(*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char))))->(void)
(	O
v1	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
)	O
;	O
grecs_version_info_free	(*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char))))->(void)
(	O
v2	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
grecs_version_ok	(*(char))->(int)
(	O
const	O
char	O
*	O
vstr	*(char)
)	O
{	O
struct	O
grecs_version_info	struct(*(char),*(char),*(char),int,int,int,*(char),*(char))
*	O
vmy	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
,	O
*	O
vreq	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
;	O
int	O
rc	int
,	O
res	int
;	O
if	O
(	O
!	O
vstr	*(char)
)	O
return	O
-	O
1	int
;	O
vreq	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
=	O
grecs_version_split	(*(char))->(*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char))))
(	O
vstr	*(char)
)	O
;	O
if	O
(	O
!	O
vreq	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
)	O
return	O
-	O
1	int
;	O
vmy	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
=	O
grecs_version	()->(*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char))))
(	O
)	O
;	O
if	O
(	O
vreq	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
suffix	*(char)
&&	O
!	O
vmy	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
suffix	*(char)
)	O
vmy	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
->	O
suffix	*(char)
=	O
""	*(char)
;	O
rc	int
=	O
grecs_version_info_cmp	(*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char))),*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char))),*(int))->(int)
(	O
vmy	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
,	O
vreq	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
,	O
&	O
res	int
)	O
;	O
grecs_version_info_free	(*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char))))->(void)
(	O
vmy	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
)	O
;	O
grecs_version_info_free	(*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char))))->(void)
(	O
vreq	*(struct(*(char),*(char),*(char),int,int,int,*(char),*(char)))
)	O
;	O
return	O
rc	int
==	O
0	int
&&	O
res	int
>=	O
0	int
;	O
}	O
