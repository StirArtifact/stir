char	O
ldflags_docstring	array(char)
[	O
]	O
=	O
N_	O
(	O
"list libraries required to link"	*(char)
)	O
;	O
static	O
char	O
ldflags_args_doc	array(char)
[	O
]	O
=	O
N_	O
(	O
"KEYWORD [KEYWORD...]"	*(char)
)	O
;	O
struct	O
lib_descr	struct(*(char),*(char),int,int)
{	O
char	O
*	O
name	*(char)
;	O
char	O
*	O
libname	*(char)
;	O
int	O
weight	int
;	O
int	O
flags	int
;	O
}	O
lib_descr	struct(*(char),*(char),int,int)
[	O
]	O
=	O
{	O
{	O
"mbox"	*(char)
,	O
"-lmu_mbox"	*(char)
,	O
0	int
}	O
,	O
{	O
"dotmail"	*(char)
,	O
"-lmu_dotmail"	*(char)
,	O
0	int
}	O
,	O
{	O
"mh"	*(char)
,	O
"-lmu_mh"	*(char)
,	O
0	int
}	O
,	O
{	O
"maildir"	*(char)
,	O
"-lmu_maildir"	*(char)
,	O
0	int
}	O
,	O
{	O
"imap"	*(char)
,	O
"-lmu_imap"	*(char)
,	O
0	int
}	O
,	O
{	O
"imap"	*(char)
,	O
NEEDAUTH	O
,	O
2	int
}	O
,	O
{	O
"pop"	*(char)
,	O
"-lmu_pop"	*(char)
,	O
0	int
}	O
,	O
{	O
"pop"	*(char)
,	O
NEEDAUTH	O
,	O
2	int
}	O
,	O
{	O
"mailer"	*(char)
,	O
"-lmu_mailer"	*(char)
,	O
0	int
}	O
,	O
{	O
"sieve"	*(char)
,	O
"-lmu_sieve"	*(char)
,	O
0	int
,	O
NOTALL	int
}	O
,	O
{	O
"auth"	*(char)
,	O
"-lmu_auth "	*(char)
AUTHLIBS	O
,	O
2	int
}	O
,	O
{	O
"compat"	*(char)
,	O
NULL	O
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"cfg"	*(char)
,	O
NULL	O
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"argp"	*(char)
,	O
NULL	O
,	O
0	int
,	O
0	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
struct	O
lib_entry	struct(int,*(char))
{	O
int	O
level	int
;	O
char	O
*	O
ptr	*(*(void))
;	O
}	O
lib_entry	struct(int,*(char))
[	O
16	int
]	O
;	O
int	O
nentry	int
;	O
void	O
add_entry	(int,*(char))->(void)
(	O
int	O
level	int
,	O
char	O
*	O
ptr	*(*(void))
)	O
{	O
int	O
i	long
;	O
if	O
(	O
!	O
ptr	*(*(void))
||	O
!	O
*	O
ptr	*(*(void))
)	O
return	O
;	O
if	O
(	O
nentry	int
>=	O
sizeof	O
(	O
lib_entry	struct(int,*(char))
)	O
/	O
sizeof	O
(	O
lib_entry	struct(int,*(char))
[	O
0	int
]	O
)	O
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"too many arguments"	*(char)
)	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
nentry	int
;	O
i	long
++	O
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
lib_entry	struct(int,*(char))
[	O
i	long
]	O
.	O
ptr	*(*(void))
,	O
ptr	*(*(void))
)	O
==	O
0	int
)	O
return	O
;	O
lib_entry	struct(int,*(char))
[	O
nentry	int
]	O
.	O
level	int
=	O
level	int
;	O
lib_entry	struct(int,*(char))
[	O
nentry	int
]	O
.	O
ptr	*(*(void))
=	O
ptr	*(*(void))
;	O
nentry	int
++	O
;	O
}	O
void	O
sort_entries	()->(void)
(	O
void	O
)	O
{	O
int	O
j	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
nentry	int
;	O
j	int
++	O
)	O
{	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
j	int
;	O
i	long
<	O
nentry	int
;	O
i	long
++	O
)	O
if	O
(	O
lib_entry	struct(int,*(char))
[	O
j	int
]	O
.	O
level	int
>	O
lib_entry	struct(int,*(char))
[	O
i	long
]	O
.	O
level	int
)	O
{	O
struct	O
lib_entry	struct(int,*(char))
tmp	struct(int,*(char))
;	O
tmp	struct(int,*(char))
=	O
lib_entry	struct(int,*(char))
[	O
i	long
]	O
;	O
lib_entry	struct(int,*(char))
[	O
i	long
]	O
=	O
lib_entry	struct(int,*(char))
[	O
j	int
]	O
;	O
lib_entry	struct(int,*(char))
[	O
j	int
]	O
=	O
tmp	struct(int,*(char))
;	O
}	O
}	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
j	int
;	O
mu_action_getopt	(*(int),*(*(*(char))),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char),*(char))->(void)
(	O
&	O
argc	long
,	O
&	O
argv	*(*(char))
,	O
NULL	O
,	O
ldflags_docstring	array(char)
,	O
ldflags_args_doc	array(char)
)	O
;	O
add_entry	(int,*(char))->(void)
(	O
-	O
100	int
,	O
LINK_FLAGS	O
)	O
;	O
add_entry	(int,*(char))->(void)
(	O
100	int
,	O
LINK_POSTFLAGS	O
)	O
;	O
add_entry	(int,*(char))->(void)
(	O
8	int
,	O
"-lmailutils"	*(char)
)	O
;	O
if	O
(	O
sizeof	O
(	O
I18NLIBS	O
)	O
>	O
1	int
)	O
add_entry	(int,*(char))->(void)
(	O
10	int
,	O
I18NLIBS	O
)	O
;	O
for	O
(	O
;	O
argc	long
>	O
0	int
;	O
argc	long
--	O
,	O
argv	*(*(char))
++	O
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
0	int
]	O
,	O
"all"	*(char)
)	O
==	O
0	int
)	O
{	O
struct	O
lib_descr	struct(*(char),*(char),int,int)
*	O
p	*(char)
;	O
for	O
(	O
p	*(char)
=	O
lib_descr	struct(*(char),*(char),int,int)
;	O
p	*(char)
->	O
name	*(char)
;	O
p	*(char)
++	O
)	O
{	O
if	O
(	O
p	*(char)
->	O
flags	int
&	O
NOTALL	int
)	O
continue	O
;	O
add_entry	(int,*(char))->(void)
(	O
p	*(char)
->	O
weight	int
,	O
p	*(char)
->	O
libname	*(char)
)	O
;	O
}	O
}	O
else	O
{	O
struct	O
lib_descr	struct(*(char),*(char),int,int)
*	O
p	*(char)
;	O
int	O
found	int
=	O
0	int
;	O
for	O
(	O
p	*(char)
=	O
lib_descr	struct(*(char),*(char),int,int)
;	O
p	*(char)
->	O
name	*(char)
;	O
p	*(char)
++	O
)	O
{	O
if	O
(	O
mu_c_strcasecmp	(*(char),*(char))->(int)
(	O
p	*(char)
->	O
name	*(char)
,	O
argv	*(*(char))
[	O
0	int
]	O
)	O
==	O
0	int
)	O
{	O
add_entry	(int,*(char))->(void)
(	O
p	*(char)
->	O
weight	int
,	O
p	*(char)
->	O
libname	*(char)
)	O
;	O
found	int
=	O
1	int
;	O
}	O
}	O
if	O
(	O
!	O
found	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"unknown keyword: %s"	*(char)
)	O
,	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
return	O
1	int
;	O
}	O
}	O
}	O
sort_entries	()->(void)
(	O
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
lib_entry	struct(int,*(char))
[	O
0	int
]	O
.	O
ptr	*(*(void))
)	O
;	O
for	O
(	O
j	int
=	O
1	int
;	O
j	int
<	O
nentry	int
;	O
j	int
++	O
)	O
mu_printf	(*(char))->(int)
(	O
" %s"	*(char)
,	O
lib_entry	struct(int,*(char))
[	O
j	int
]	O
.	O
ptr	*(*(void))
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
