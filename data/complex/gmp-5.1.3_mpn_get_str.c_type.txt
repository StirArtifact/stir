static	O
unsigned	O
char	O
*	O
mpn_sb_get_str	(*(char),long,*(long),long,int)->(*(char))
(	O
unsigned	O
char	O
*	O
str	*(char)
,	O
size_t	long
len	long
,	O
mp_ptr	*(long)
up	*(long)
,	O
mp_size_t	long
un	long
,	O
int	O
base	int
)	O
{	O
mp_limb_t	long
rl	long
,	O
ul	long
;	O
unsigned	O
char	O
*	O
s	array(char)
;	O
size_t	long
l	long
;	O
unsigned	O
char	O
buf	array(char)
[	O
BUF_ALLOC	O
]	O
;	O
mp_limb_t	long
rp	array(long)
[	O
GET_STR_PRECOMPUTE_THRESHOLD	int
]	O
;	O
if	O
(	O
base	int
==	O
10	int
)	O
{	O
MPN_COPY	O
(	O
rp	array(long)
+	O
1	int
,	O
up	*(long)
,	O
un	long
)	O
;	O
s	array(char)
=	O
buf	array(char)
+	O
BUF_ALLOC	O
;	O
while	O
(	O
un	long
>	O
1	int
)	O
{	O
int	O
i	long
;	O
mp_limb_t	long
frac	long
,	O
digit	long
;	O
MPN_DIVREM_OR_PREINV_DIVREM_1	O
(	O
rp	array(long)
,	O
(	O
mp_size_t	long
)	O
1	int
,	O
rp	array(long)
+	O
1	int
,	O
un	long
,	O
MP_BASES_BIG_BASE_10	O
,	O
MP_BASES_BIG_BASE_INVERTED_10	O
,	O
MP_BASES_NORMALIZATION_STEPS_10	int
)	O
;	O
un	long
-=	O
rp	array(long)
[	O
un	long
]	O
==	O
0	int
;	O
frac	long
=	O
(	O
rp	array(long)
[	O
0	int
]	O
+	O
1	int
)	O
<<	O
GMP_NAIL_BITS	int
;	O
s	array(char)
-=	O
MP_BASES_CHARS_PER_LIMB_10	int
;	O
if	O
(	O
MP_BASES_NORMALIZATION_STEPS_10	int
==	O
0	int
)	O
{	O
umul_ppmm	O
(	O
digit	long
,	O
frac	long
,	O
frac	long
,	O
10	int
)	O
;	O
*	O
s	array(char)
++	O
=	O
digit	long
;	O
}	O
if	O
(	O
MP_BASES_NORMALIZATION_STEPS_10	int
<=	O
1	int
)	O
{	O
umul_ppmm	O
(	O
digit	long
,	O
frac	long
,	O
frac	long
,	O
10	int
)	O
;	O
*	O
s	array(char)
++	O
=	O
digit	long
;	O
}	O
if	O
(	O
MP_BASES_NORMALIZATION_STEPS_10	int
<=	O
2	int
)	O
{	O
umul_ppmm	O
(	O
digit	long
,	O
frac	long
,	O
frac	long
,	O
10	int
)	O
;	O
*	O
s	array(char)
++	O
=	O
digit	long
;	O
}	O
if	O
(	O
MP_BASES_NORMALIZATION_STEPS_10	int
<=	O
3	int
)	O
{	O
umul_ppmm	O
(	O
digit	long
,	O
frac	long
,	O
frac	long
,	O
10	int
)	O
;	O
*	O
s	array(char)
++	O
=	O
digit	long
;	O
}	O
i	long
=	O
(	O
MP_BASES_CHARS_PER_LIMB_10	int
-	O
(	O
(	O
MP_BASES_NORMALIZATION_STEPS_10	int
<	O
4	int
)	O
?	O
(	O
4	int
-	O
MP_BASES_NORMALIZATION_STEPS_10	int
)	O
:	O
0	int
)	O
)	O
;	O
frac	long
=	O
(	O
frac	long
+	O
0xf	int
)	O
>>	O
4	int
;	O
do	O
{	O
frac	long
*=	O
10	int
;	O
digit	long
=	O
frac	long
>>	O
(	O
GMP_LIMB_BITS	int
-	O
4	int
)	O
;	O
*	O
s	array(char)
++	O
=	O
digit	long
;	O
frac	long
&=	O
(	O
~	O
(	O
mp_limb_t	long
)	O
0	int
)	O
>>	O
4	int
;	O
}	O
while	O
(	O
--	O
i	long
)	O
;	O
s	array(char)
-=	O
MP_BASES_CHARS_PER_LIMB_10	int
;	O
}	O
ul	long
=	O
rp	array(long)
[	O
1	int
]	O
;	O
while	O
(	O
ul	long
!=	O
0	int
)	O
{	O
udiv_qrnd_unnorm	O
(	O
ul	long
,	O
rl	long
,	O
ul	long
,	O
10	int
)	O
;	O
*	O
--	O
s	array(char)
=	O
rl	long
;	O
}	O
}	O
else	O
{	O
unsigned	O
chars_per_limb	int
;	O
mp_limb_t	long
big_base	long
,	O
big_base_inverted	long
;	O
unsigned	O
normalization_steps	int
;	O
chars_per_limb	int
=	O
mp_bases	O
[	O
base	int
]	O
.	O
chars_per_limb	int
;	O
big_base	long
=	O
mp_bases	O
[	O
base	int
]	O
.	O
big_base	long
;	O
big_base_inverted	long
=	O
mp_bases	O
[	O
base	int
]	O
.	O
big_base_inverted	long
;	O
count_leading_zeros	O
(	O
normalization_steps	int
,	O
big_base	long
)	O
;	O
MPN_COPY	O
(	O
rp	array(long)
+	O
1	int
,	O
up	*(long)
,	O
un	long
)	O
;	O
s	array(char)
=	O
buf	array(char)
+	O
BUF_ALLOC	O
;	O
while	O
(	O
un	long
>	O
1	int
)	O
{	O
int	O
i	long
;	O
mp_limb_t	long
frac	long
;	O
MPN_DIVREM_OR_PREINV_DIVREM_1	O
(	O
rp	array(long)
,	O
(	O
mp_size_t	long
)	O
1	int
,	O
rp	array(long)
+	O
1	int
,	O
un	long
,	O
big_base	long
,	O
big_base_inverted	long
,	O
normalization_steps	int
)	O
;	O
un	long
-=	O
rp	array(long)
[	O
un	long
]	O
==	O
0	int
;	O
frac	long
=	O
(	O
rp	array(long)
[	O
0	int
]	O
+	O
1	int
)	O
<<	O
GMP_NAIL_BITS	int
;	O
s	array(char)
-=	O
chars_per_limb	int
;	O
i	long
=	O
chars_per_limb	int
;	O
do	O
{	O
mp_limb_t	long
digit	long
;	O
umul_ppmm	O
(	O
digit	long
,	O
frac	long
,	O
frac	long
,	O
base	int
)	O
;	O
*	O
s	array(char)
++	O
=	O
digit	long
;	O
}	O
while	O
(	O
--	O
i	long
)	O
;	O
s	array(char)
-=	O
chars_per_limb	int
;	O
}	O
ul	long
=	O
rp	array(long)
[	O
1	int
]	O
;	O
while	O
(	O
ul	long
!=	O
0	int
)	O
{	O
udiv_qrnd_unnorm	O
(	O
ul	long
,	O
rl	long
,	O
ul	long
,	O
base	int
)	O
;	O
*	O
--	O
s	array(char)
=	O
rl	long
;	O
}	O
}	O
l	long
=	O
buf	array(char)
+	O
BUF_ALLOC	O
-	O
s	array(char)
;	O
while	O
(	O
l	long
<	O
len	long
)	O
{	O
*	O
str	*(char)
++	O
=	O
0	int
;	O
len	long
--	O
;	O
}	O
while	O
(	O
l	long
!=	O
0	int
)	O
{	O
*	O
str	*(char)
++	O
=	O
*	O
s	array(char)
++	O
;	O
l	long
--	O
;	O
}	O
return	O
str	*(char)
;	O
}	O
static	O
unsigned	O
char	O
*	O
mpn_dc_get_str	(*(char),long,*(long),long,*(struct(*(long),long,long,long,int)),*(long))->(*(char))
(	O
unsigned	O
char	O
*	O
str	*(char)
,	O
size_t	long
len	long
,	O
mp_ptr	*(long)
up	*(long)
,	O
mp_size_t	long
un	long
,	O
const	O
powers_t	struct(*(long),long,long,long,int)
*	O
powtab	*(struct(*(long),long,long,long,int))
,	O
mp_ptr	*(long)
tmp	*(long)
)	O
{	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
un	long
,	O
GET_STR_DC_THRESHOLD	int
)	O
)	O
{	O
if	O
(	O
un	long
!=	O
0	int
)	O
str	*(char)
=	O
mpn_sb_get_str	(*(char),long,*(long),long,int)->(*(char))
(	O
str	*(char)
,	O
len	long
,	O
up	*(long)
,	O
un	long
,	O
powtab	*(struct(*(long),long,long,long,int))
->	O
base	int
)	O
;	O
else	O
{	O
while	O
(	O
len	long
!=	O
0	int
)	O
{	O
*	O
str	*(char)
++	O
=	O
0	int
;	O
len	long
--	O
;	O
}	O
}	O
}	O
else	O
{	O
mp_ptr	*(long)
pwp	*(long)
,	O
qp	*(long)
,	O
rp	array(long)
;	O
mp_size_t	long
pwn	long
,	O
qn	long
;	O
mp_size_t	long
sn	long
;	O
pwp	*(long)
=	O
powtab	*(struct(*(long),long,long,long,int))
->	O
p	*(char)
;	O
pwn	long
=	O
powtab	*(struct(*(long),long,long,long,int))
->	O
n	long
;	O
sn	long
=	O
powtab	*(struct(*(long),long,long,long,int))
->	O
shift	long
;	O
if	O
(	O
un	long
<	O
pwn	long
+	O
sn	long
||	O
(	O
un	long
==	O
pwn	long
+	O
sn	long
&&	O
mpn_cmp	O
(	O
up	*(long)
+	O
sn	long
,	O
pwp	*(long)
,	O
un	long
-	O
sn	long
)	O
<	O
0	int
)	O
)	O
{	O
str	*(char)
=	O
mpn_dc_get_str	(*(char),long,*(long),long,*(struct(*(long),long,long,long,int)),*(long))->(*(char))
(	O
str	*(char)
,	O
len	long
,	O
up	*(long)
,	O
un	long
,	O
powtab	*(struct(*(long),long,long,long,int))
-	O
1	int
,	O
tmp	*(long)
)	O
;	O
}	O
else	O
{	O
qp	*(long)
=	O
tmp	*(long)
;	O
rp	array(long)
=	O
up	*(long)
;	O
mpn_tdiv_qr	O
(	O
qp	*(long)
,	O
rp	array(long)
+	O
sn	long
,	O
0L	int
,	O
up	*(long)
+	O
sn	long
,	O
un	long
-	O
sn	long
,	O
pwp	*(long)
,	O
pwn	long
)	O
;	O
qn	long
=	O
un	long
-	O
sn	long
-	O
pwn	long
;	O
qn	long
+=	O
qp	*(long)
[	O
qn	long
]	O
!=	O
0	int
;	O
ASSERT	O
(	O
qn	long
<	O
pwn	long
+	O
sn	long
||	O
(	O
qn	long
==	O
pwn	long
+	O
sn	long
&&	O
mpn_cmp	O
(	O
qp	*(long)
+	O
sn	long
,	O
pwp	*(long)
,	O
pwn	long
)	O
<	O
0	int
)	O
)	O
;	O
if	O
(	O
len	long
!=	O
0	int
)	O
len	long
=	O
len	long
-	O
powtab	*(struct(*(long),long,long,long,int))
->	O
digits_in_base	long
;	O
str	*(char)
=	O
mpn_dc_get_str	(*(char),long,*(long),long,*(struct(*(long),long,long,long,int)),*(long))->(*(char))
(	O
str	*(char)
,	O
len	long
,	O
qp	*(long)
,	O
qn	long
,	O
powtab	*(struct(*(long),long,long,long,int))
-	O
1	int
,	O
tmp	*(long)
+	O
qn	long
)	O
;	O
str	*(char)
=	O
mpn_dc_get_str	(*(char),long,*(long),long,*(struct(*(long),long,long,long,int)),*(long))->(*(char))
(	O
str	*(char)
,	O
powtab	*(struct(*(long),long,long,long,int))
->	O
digits_in_base	long
,	O
rp	array(long)
,	O
pwn	long
+	O
sn	long
,	O
powtab	*(struct(*(long),long,long,long,int))
-	O
1	int
,	O
tmp	*(long)
)	O
;	O
}	O
}	O
return	O
str	*(char)
;	O
}	O
size_t	long
mpn_get_str	O
(	O
unsigned	O
char	O
*	O
str	*(char)
,	O
int	O
base	int
,	O
mp_ptr	*(long)
up	*(long)
,	O
mp_size_t	long
un	long
)	O
{	O
mp_ptr	*(long)
powtab_mem	*(long)
,	O
powtab_mem_ptr	*(long)
;	O
mp_limb_t	long
big_base	long
;	O
size_t	long
digits_in_base	long
;	O
powers_t	struct(*(long),long,long,long,int)
powtab	*(struct(*(long),long,long,long,int))
[	O
GMP_LIMB_BITS	int
]	O
;	O
int	O
pi	int
;	O
mp_size_t	long
n	long
;	O
mp_ptr	*(long)
p	*(char)
,	O
t	*(long)
;	O
size_t	long
out_len	long
;	O
mp_ptr	*(long)
tmp	*(long)
;	O
TMP_DECL	O
;	O
if	O
(	O
un	long
==	O
0	int
)	O
{	O
str	*(char)
[	O
0	int
]	O
=	O
0	int
;	O
return	O
1	int
;	O
}	O
if	O
(	O
POW2_P	O
(	O
base	int
)	O
)	O
{	O
mp_limb_t	long
n1	long
,	O
n0	long
;	O
int	O
bits_per_digit	int
=	O
mp_bases	O
[	O
base	int
]	O
.	O
big_base	long
;	O
int	O
cnt	int
;	O
int	O
bit_pos	int
;	O
mp_size_t	long
i	long
;	O
unsigned	O
char	O
*	O
s	array(char)
=	O
str	*(char)
;	O
mp_bitcnt_t	long
bits	int
;	O
n1	long
=	O
up	*(long)
[	O
un	long
-	O
1	int
]	O
;	O
count_leading_zeros	O
(	O
cnt	int
,	O
n1	long
)	O
;	O
bits	int
=	O
(	O
mp_bitcnt_t	long
)	O
GMP_NUMB_BITS	O
*	O
un	long
-	O
cnt	int
+	O
GMP_NAIL_BITS	int
;	O
cnt	int
=	O
bits	int
%	O
bits_per_digit	int
;	O
if	O
(	O
cnt	int
!=	O
0	int
)	O
bits	int
+=	O
bits_per_digit	int
-	O
cnt	int
;	O
bit_pos	int
=	O
bits	int
-	O
(	O
mp_bitcnt_t	long
)	O
(	O
un	long
-	O
1	int
)	O
*	O
GMP_NUMB_BITS	O
;	O
i	long
=	O
un	long
-	O
1	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
bit_pos	int
-=	O
bits_per_digit	int
;	O
while	O
(	O
bit_pos	int
>=	O
0	int
)	O
{	O
*	O
s	array(char)
++	O
=	O
(	O
n1	long
>>	O
bit_pos	int
)	O
&	O
(	O
(	O
1	int
<<	O
bits_per_digit	int
)	O
-	O
1	int
)	O
;	O
bit_pos	int
-=	O
bits_per_digit	int
;	O
}	O
i	long
--	O
;	O
if	O
(	O
i	long
<	O
0	int
)	O
break	O
;	O
n0	long
=	O
(	O
n1	long
<<	O
-	O
bit_pos	int
)	O
&	O
(	O
(	O
1	int
<<	O
bits_per_digit	int
)	O
-	O
1	int
)	O
;	O
n1	long
=	O
up	*(long)
[	O
i	long
]	O
;	O
bit_pos	int
+=	O
GMP_NUMB_BITS	O
;	O
*	O
s	array(char)
++	O
=	O
n0	long
|	O
(	O
n1	long
>>	O
bit_pos	int
)	O
;	O
}	O
return	O
s	array(char)
-	O
str	*(char)
;	O
}	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
un	long
,	O
GET_STR_PRECOMPUTE_THRESHOLD	int
)	O
)	O
return	O
mpn_sb_get_str	(*(char),long,*(long),long,int)->(*(char))
(	O
str	*(char)
,	O
(	O
size_t	long
)	O
0	int
,	O
up	*(long)
,	O
un	long
,	O
base	int
)	O
-	O
str	*(char)
;	O
TMP_MARK	O
;	O
powtab_mem	*(long)
=	O
TMP_BALLOC_LIMBS	O
(	O
mpn_dc_get_str_powtab_alloc	O
(	O
un	long
)	O
)	O
;	O
powtab_mem_ptr	*(long)
=	O
powtab_mem	*(long)
;	O
big_base	long
=	O
mp_bases	O
[	O
base	int
]	O
.	O
big_base	long
;	O
digits_in_base	long
=	O
mp_bases	O
[	O
base	int
]	O
.	O
chars_per_limb	int
;	O
{	O
mp_size_t	long
n_pows	long
,	O
xn	long
,	O
pn	long
,	O
exptab	array(long)
[	O
GMP_LIMB_BITS	int
]	O
,	O
bexp	long
;	O
mp_limb_t	long
cy	long
;	O
mp_size_t	long
shift	long
;	O
size_t	long
ndig	long
;	O
DIGITS_IN_BASE_PER_LIMB	O
(	O
ndig	long
,	O
un	long
,	O
base	int
)	O
;	O
xn	long
=	O
1	int
+	O
ndig	long
/	O
mp_bases	O
[	O
base	int
]	O
.	O
chars_per_limb	int
;	O
n_pows	long
=	O
0	int
;	O
for	O
(	O
pn	long
=	O
xn	long
;	O
pn	long
!=	O
1	int
;	O
pn	long
=	O
(	O
pn	long
+	O
1	int
)	O
>>	O
1	int
)	O
{	O
exptab	array(long)
[	O
n_pows	long
]	O
=	O
pn	long
;	O
n_pows	long
++	O
;	O
}	O
exptab	array(long)
[	O
n_pows	long
]	O
=	O
1	int
;	O
powtab	*(struct(*(long),long,long,long,int))
[	O
0	int
]	O
.	O
p	*(char)
=	O
&	O
big_base	long
;	O
powtab	*(struct(*(long),long,long,long,int))
[	O
0	int
]	O
.	O
n	long
=	O
1	int
;	O
powtab	*(struct(*(long),long,long,long,int))
[	O
0	int
]	O
.	O
digits_in_base	long
=	O
digits_in_base	long
;	O
powtab	*(struct(*(long),long,long,long,int))
[	O
0	int
]	O
.	O
base	int
=	O
base	int
;	O
powtab	*(struct(*(long),long,long,long,int))
[	O
0	int
]	O
.	O
shift	long
=	O
0	int
;	O
powtab	*(struct(*(long),long,long,long,int))
[	O
1	int
]	O
.	O
p	*(char)
=	O
powtab_mem_ptr	*(long)
;	O
powtab_mem_ptr	*(long)
+=	O
2	int
;	O
powtab	*(struct(*(long),long,long,long,int))
[	O
1	int
]	O
.	O
p	*(char)
[	O
0	int
]	O
=	O
big_base	long
;	O
powtab	*(struct(*(long),long,long,long,int))
[	O
1	int
]	O
.	O
n	long
=	O
1	int
;	O
powtab	*(struct(*(long),long,long,long,int))
[	O
1	int
]	O
.	O
digits_in_base	long
=	O
digits_in_base	long
;	O
powtab	*(struct(*(long),long,long,long,int))
[	O
1	int
]	O
.	O
base	int
=	O
base	int
;	O
powtab	*(struct(*(long),long,long,long,int))
[	O
1	int
]	O
.	O
shift	long
=	O
0	int
;	O
n	long
=	O
1	int
;	O
p	*(char)
=	O
&	O
big_base	long
;	O
bexp	long
=	O
1	int
;	O
shift	long
=	O
0	int
;	O
for	O
(	O
pi	int
=	O
2	int
;	O
pi	int
<	O
n_pows	long
;	O
pi	int
++	O
)	O
{	O
t	*(long)
=	O
powtab_mem_ptr	*(long)
;	O
powtab_mem_ptr	*(long)
+=	O
2	int
*	O
n	long
+	O
2	int
;	O
ASSERT_ALWAYS	O
(	O
powtab_mem_ptr	*(long)
<	O
powtab_mem	*(long)
+	O
mpn_dc_get_str_powtab_alloc	O
(	O
un	long
)	O
)	O
;	O
mpn_sqr	O
(	O
t	*(long)
,	O
p	*(char)
,	O
n	long
)	O
;	O
digits_in_base	long
*=	O
2	int
;	O
n	long
*=	O
2	int
;	O
n	long
-=	O
t	*(long)
[	O
n	long
-	O
1	int
]	O
==	O
0	int
;	O
bexp	long
*=	O
2	int
;	O
if	O
(	O
bexp	long
+	O
1	int
<	O
exptab	array(long)
[	O
n_pows	long
-	O
pi	int
]	O
)	O
{	O
digits_in_base	long
+=	O
mp_bases	O
[	O
base	int
]	O
.	O
chars_per_limb	int
;	O
cy	long
=	O
mpn_mul_1	O
(	O
t	*(long)
,	O
t	*(long)
,	O
n	long
,	O
big_base	long
)	O
;	O
t	*(long)
[	O
n	long
]	O
=	O
cy	long
;	O
n	long
+=	O
cy	long
!=	O
0	int
;	O
bexp	long
+=	O
1	int
;	O
}	O
shift	long
*=	O
2	int
;	O
while	O
(	O
t	*(long)
[	O
0	int
]	O
==	O
0	int
)	O
{	O
t	*(long)
++	O
;	O
n	long
--	O
;	O
shift	long
++	O
;	O
}	O
p	*(char)
=	O
t	*(long)
;	O
powtab	*(struct(*(long),long,long,long,int))
[	O
pi	int
]	O
.	O
p	*(char)
=	O
p	*(char)
;	O
powtab	*(struct(*(long),long,long,long,int))
[	O
pi	int
]	O
.	O
n	long
=	O
n	long
;	O
powtab	*(struct(*(long),long,long,long,int))
[	O
pi	int
]	O
.	O
digits_in_base	long
=	O
digits_in_base	long
;	O
powtab	*(struct(*(long),long,long,long,int))
[	O
pi	int
]	O
.	O
base	int
=	O
base	int
;	O
powtab	*(struct(*(long),long,long,long,int))
[	O
pi	int
]	O
.	O
shift	long
=	O
shift	long
;	O
}	O
for	O
(	O
pi	int
=	O
1	int
;	O
pi	int
<	O
n_pows	long
;	O
pi	int
++	O
)	O
{	O
t	*(long)
=	O
powtab	*(struct(*(long),long,long,long,int))
[	O
pi	int
]	O
.	O
p	*(char)
;	O
n	long
=	O
powtab	*(struct(*(long),long,long,long,int))
[	O
pi	int
]	O
.	O
n	long
;	O
cy	long
=	O
mpn_mul_1	O
(	O
t	*(long)
,	O
t	*(long)
,	O
n	long
,	O
big_base	long
)	O
;	O
t	*(long)
[	O
n	long
]	O
=	O
cy	long
;	O
n	long
+=	O
cy	long
!=	O
0	int
;	O
if	O
(	O
t	*(long)
[	O
0	int
]	O
==	O
0	int
)	O
{	O
powtab	*(struct(*(long),long,long,long,int))
[	O
pi	int
]	O
.	O
p	*(char)
=	O
t	*(long)
+	O
1	int
;	O
n	long
--	O
;	O
powtab	*(struct(*(long),long,long,long,int))
[	O
pi	int
]	O
.	O
shift	long
++	O
;	O
}	O
powtab	*(struct(*(long),long,long,long,int))
[	O
pi	int
]	O
.	O
n	long
=	O
n	long
;	O
powtab	*(struct(*(long),long,long,long,int))
[	O
pi	int
]	O
.	O
digits_in_base	long
+=	O
mp_bases	O
[	O
base	int
]	O
.	O
chars_per_limb	int
;	O
}	O
}	O
tmp	*(long)
=	O
TMP_BALLOC_LIMBS	O
(	O
mpn_dc_get_str_itch	O
(	O
un	long
)	O
)	O
;	O
out_len	long
=	O
mpn_dc_get_str	(*(char),long,*(long),long,*(struct(*(long),long,long,long,int)),*(long))->(*(char))
(	O
str	*(char)
,	O
0	int
,	O
up	*(long)
,	O
un	long
,	O
powtab	*(struct(*(long),long,long,long,int))
-	O
1	int
+	O
pi	int
,	O
tmp	*(long)
)	O
-	O
str	*(char)
;	O
TMP_FREE	O
;	O
return	O
out_len	long
;	O
}	O
