int	O
__gmp_doprnt_integer	(*(struct(*((*`,*`,array(struct(int,int,*(void),*(void))))->(int)),*((*`,*`,long)->(int)),*((*`,int,int)->(int)),*((*`)->(int)))),*(void),*(struct(int,int,*(char),int,char,int,int,int,int,int,char,int)),*(char))->(int)
(	O
const	O
struct	O
doprnt_funs_t	struct(*((*(void),*(char),array(struct(int,int,*(void),*(void))))->(int)),*((*(void),*(char),long)->(int)),*((*(void),int,int)->(int)),*((*(void))->(int)))
*	O
funs	*(struct(*((*(void),*(char),array(struct(int,int,*(void),*(void))))->(int)),*((*(void),*(char),long)->(int)),*((*(void),int,int)->(int)),*((*(void))->(int))))
,	O
void	O
*	O
data	*(void)
,	O
const	O
struct	O
doprnt_params_t	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
*	O
p	*(char)
,	O
const	O
char	O
*	O
s	array(char)
)	O
{	O
int	O
retval	int
=	O
0	int
;	O
int	O
slen	int
,	O
justlen	int
,	O
showbaselen	int
,	O
sign	char
,	O
signlen	int
,	O
slashlen	int
,	O
zeros	int
;	O
int	O
justify	int
,	O
den_showbaselen	int
;	O
const	O
char	O
*	O
slash	*(char)
,	O
*	O
showbase	int
;	O
sign	char
=	O
p	*(char)
->	O
sign	char
;	O
if	O
(	O
s	array(char)
[	O
0	int
]	O
==	O
'-'	O
)	O
{	O
sign	char
=	O
s	array(char)
[	O
0	int
]	O
;	O
s	array(char)
++	O
;	O
}	O
signlen	int
=	O
(	O
sign	char
!=	O
'\0'	O
)	O
;	O
if	O
(	O
*	O
s	array(char)
==	O
'0'	O
&&	O
p	*(char)
->	O
prec	int
==	O
0	int
)	O
s	array(char)
++	O
;	O
slen	int
=	O
strlen	(*(char))->(long)
(	O
s	array(char)
)	O
;	O
slash	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
s	array(char)
,	O
'/'	O
)	O
;	O
showbase	int
=	O
NULL	O
;	O
showbaselen	int
=	O
0	int
;	O
if	O
(	O
p	*(char)
->	O
showbase	int
!=	O
DOPRNT_SHOWBASE_NO	int
)	O
{	O
switch	O
(	O
p	*(char)
->	O
base	int
)	O
{	O
case	O
16	int
:	O
showbase	int
=	O
"0x"	*(char)
;	O
showbaselen	int
=	O
2	int
;	O
break	O
;	O
case	O
-	O
16	int
:	O
showbase	int
=	O
"0X"	*(char)
;	O
showbaselen	int
=	O
2	int
;	O
break	O
;	O
case	O
8	int
:	O
showbase	int
=	O
"0"	*(char)
;	O
showbaselen	int
=	O
1	int
;	O
break	O
;	O
}	O
}	O
den_showbaselen	int
=	O
showbaselen	int
;	O
if	O
(	O
slash	*(char)
==	O
NULL	O
||	O
(	O
p	*(char)
->	O
showbase	int
==	O
DOPRNT_SHOWBASE_NONZERO	int
&&	O
slash	*(char)
[	O
1	int
]	O
==	O
'0'	O
)	O
)	O
den_showbaselen	int
=	O
0	int
;	O
if	O
(	O
p	*(char)
->	O
showbase	int
==	O
DOPRNT_SHOWBASE_NONZERO	int
&&	O
s	array(char)
[	O
0	int
]	O
==	O
'0'	O
)	O
showbaselen	int
=	O
0	int
;	O
zeros	int
=	O
MAX	O
(	O
0	int
,	O
p	*(char)
->	O
prec	int
-	O
slen	int
)	O
;	O
justlen	int
=	O
p	*(char)
->	O
width	int
-	O
(	O
strlen	(*(char))->(long)
(	O
s	array(char)
)	O
+	O
signlen	int
+	O
showbaselen	int
+	O
den_showbaselen	int
+	O
zeros	int
)	O
;	O
justify	int
=	O
p	*(char)
->	O
justify	int
;	O
if	O
(	O
justlen	int
<=	O
0	int
)	O
justify	int
=	O
DOPRNT_JUSTIFY_NONE	int
;	O
if	O
(	O
justify	int
==	O
DOPRNT_JUSTIFY_RIGHT	int
)	O
DOPRNT_REPS	O
(	O
p	*(char)
->	O
fill	char
,	O
justlen	int
)	O
;	O
DOPRNT_REPS_MAYBE	O
(	O
sign	char
,	O
signlen	int
)	O
;	O
DOPRNT_MEMORY_MAYBE	O
(	O
showbase	int
,	O
showbaselen	int
)	O
;	O
DOPRNT_REPS_MAYBE	O
(	O
'0'	O
,	O
zeros	int
)	O
;	O
if	O
(	O
justify	int
==	O
DOPRNT_JUSTIFY_INTERNAL	int
)	O
DOPRNT_REPS	O
(	O
p	*(char)
->	O
fill	char
,	O
justlen	int
)	O
;	O
if	O
(	O
den_showbaselen	int
!=	O
0	int
)	O
{	O
ASSERT	O
(	O
slash	*(char)
!=	O
NULL	O
)	O
;	O
slashlen	int
=	O
slash	*(char)
+	O
1	int
-	O
s	array(char)
;	O
DOPRNT_MEMORY	O
(	O
s	array(char)
,	O
slashlen	int
)	O
;	O
slen	int
-=	O
slashlen	int
;	O
s	array(char)
+=	O
slashlen	int
;	O
DOPRNT_MEMORY	O
(	O
showbase	int
,	O
den_showbaselen	int
)	O
;	O
}	O
DOPRNT_MEMORY	O
(	O
s	array(char)
,	O
slen	int
)	O
;	O
if	O
(	O
justify	int
==	O
DOPRNT_JUSTIFY_LEFT	int
)	O
DOPRNT_REPS	O
(	O
p	*(char)
->	O
fill	char
,	O
justlen	int
)	O
;	O
done	O
:	O
return	O
retval	int
;	O
error	O
:	O
retval	int
=	O
-	O
1	int
;	O
goto	O
done	O
;	O
}	O
