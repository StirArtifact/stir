static	O
GDBM_THREAD_LOCAL	O
gdbm_error	int
gdbm_errno_storage	int
=	O
GDBM_NO_ERROR	int
;	O
int	O
*	O
gdbm_errno_location	()->(*(int))
(	O
void	O
)	O
{	O
return	O
&	O
gdbm_errno_storage	int
;	O
}	O
void	O
gdbm_set_errno	(*(struct),int,int)->(void)
(	O
GDBM_FILE	*(struct)
dbf	*(struct)
,	O
gdbm_error	int
ec	int
,	O
int	O
fatal	int
)	O
{	O
if	O
(	O
dbf	*(struct)
)	O
{	O
free	(*(void))->(void)
(	O
dbf	*(struct)
->	O
last_errstr	*(char)
)	O
;	O
dbf	*(struct)
->	O
last_errstr	*(char)
=	O
NULL	O
;	O
dbf	*(struct)
->	O
last_error	int
=	O
ec	int
;	O
if	O
(	O
gdbm_syserr	array(int)
[	O
ec	int
]	O
)	O
dbf	*(struct)
->	O
last_syserror	int
=	O
errno	O
;	O
else	O
dbf	*(struct)
->	O
last_syserror	int
=	O
0	int
;	O
dbf	*(struct)
->	O
need_recovery	int
=	O
fatal	int
;	O
}	O
gdbm_errno	O
=	O
ec	int
;	O
}	O
gdbm_error	int
gdbm_last_errno	(*(struct))->(int)
(	O
GDBM_FILE	*(struct)
dbf	*(struct)
)	O
{	O
if	O
(	O
!	O
dbf	*(struct)
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
return	O
dbf	*(struct)
->	O
last_error	int
;	O
}	O
int	O
gdbm_last_syserr	(*(struct))->(int)
(	O
GDBM_FILE	*(struct)
dbf	*(struct)
)	O
{	O
if	O
(	O
!	O
dbf	*(struct)
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
return	O
dbf	*(struct)
->	O
last_syserror	int
;	O
}	O
int	O
gdbm_needs_recovery	(*(struct))->(int)
(	O
GDBM_FILE	*(struct)
dbf	*(struct)
)	O
{	O
if	O
(	O
!	O
dbf	*(struct)
)	O
return	O
0	int
;	O
return	O
dbf	*(struct)
->	O
need_recovery	int
;	O
}	O
void	O
gdbm_clear_error	(*(struct))->(void)
(	O
GDBM_FILE	*(struct)
dbf	*(struct)
)	O
{	O
if	O
(	O
dbf	*(struct)
)	O
{	O
dbf	*(struct)
->	O
last_error	int
=	O
GDBM_NO_ERROR	int
;	O
dbf	*(struct)
->	O
last_syserror	int
=	O
0	int
;	O
free	(*(void))->(void)
(	O
dbf	*(struct)
->	O
last_errstr	*(char)
)	O
;	O
dbf	*(struct)
->	O
last_errstr	*(char)
=	O
NULL	O
;	O
}	O
}	O
const	O
char	O
*	O
const	O
gdbm_errlist	array(*(char))
[	O
_GDBM_MAX_ERRNO	O
+	O
1	int
]	O
=	O
{	O
[	O
GDBM_NO_ERROR	int
]	O
=	O
N_	O
(	O
"No error"	*(char)
)	O
,	O
[	O
GDBM_MALLOC_ERROR	int
]	O
=	O
N_	O
(	O
"Malloc error"	*(char)
)	O
,	O
[	O
GDBM_BLOCK_SIZE_ERROR	int
]	O
=	O
N_	O
(	O
"Block size error"	*(char)
)	O
,	O
[	O
GDBM_FILE_OPEN_ERROR	int
]	O
=	O
N_	O
(	O
"File open error"	*(char)
)	O
,	O
[	O
GDBM_FILE_WRITE_ERROR	int
]	O
=	O
N_	O
(	O
"File write error"	*(char)
)	O
,	O
[	O
GDBM_FILE_SEEK_ERROR	int
]	O
=	O
N_	O
(	O
"File seek error"	*(char)
)	O
,	O
[	O
GDBM_FILE_READ_ERROR	int
]	O
=	O
N_	O
(	O
"File read error"	*(char)
)	O
,	O
[	O
GDBM_BAD_MAGIC_NUMBER	int
]	O
=	O
N_	O
(	O
"Bad magic number"	*(char)
)	O
,	O
[	O
GDBM_EMPTY_DATABASE	int
]	O
=	O
N_	O
(	O
"Empty database"	*(char)
)	O
,	O
[	O
GDBM_CANT_BE_READER	int
]	O
=	O
N_	O
(	O
"Can't be reader"	*(char)
)	O
,	O
[	O
GDBM_CANT_BE_WRITER	int
]	O
=	O
N_	O
(	O
"Can't be writer"	*(char)
)	O
,	O
[	O
GDBM_READER_CANT_DELETE	int
]	O
=	O
N_	O
(	O
"Reader can't delete"	*(char)
)	O
,	O
[	O
GDBM_READER_CANT_STORE	int
]	O
=	O
N_	O
(	O
"Reader can't store"	*(char)
)	O
,	O
[	O
GDBM_READER_CANT_REORGANIZE	int
]	O
=	O
N_	O
(	O
"Reader can't reorganize"	*(char)
)	O
,	O
[	O
GDBM_UNKNOWN_ERROR	int
]	O
=	O
N_	O
(	O
"Should not happen: unused error code"	*(char)
)	O
,	O
[	O
GDBM_ITEM_NOT_FOUND	int
]	O
=	O
N_	O
(	O
"Item not found"	*(char)
)	O
,	O
[	O
GDBM_REORGANIZE_FAILED	int
]	O
=	O
N_	O
(	O
"Reorganize failed"	*(char)
)	O
,	O
[	O
GDBM_CANNOT_REPLACE	int
]	O
=	O
N_	O
(	O
"Cannot replace"	*(char)
)	O
,	O
[	O
GDBM_ILLEGAL_DATA	int
]	O
=	O
N_	O
(	O
"Illegal data"	*(char)
)	O
,	O
[	O
GDBM_OPT_ALREADY_SET	int
]	O
=	O
N_	O
(	O
"Option already set"	*(char)
)	O
,	O
[	O
GDBM_OPT_ILLEGAL	int
]	O
=	O
N_	O
(	O
"Illegal option"	*(char)
)	O
,	O
[	O
GDBM_BYTE_SWAPPED	int
]	O
=	O
N_	O
(	O
"Byte-swapped file"	*(char)
)	O
,	O
[	O
GDBM_BAD_FILE_OFFSET	int
]	O
=	O
N_	O
(	O
"File header assumes wrong off_t size"	*(char)
)	O
,	O
[	O
GDBM_BAD_OPEN_FLAGS	int
]	O
=	O
N_	O
(	O
"Bad file flags"	*(char)
)	O
,	O
[	O
GDBM_FILE_STAT_ERROR	int
]	O
=	O
N_	O
(	O
"Cannot stat file"	*(char)
)	O
,	O
[	O
GDBM_FILE_EOF	int
]	O
=	O
N_	O
(	O
"Unexpected end of file"	*(char)
)	O
,	O
[	O
GDBM_NO_DBNAME	int
]	O
=	O
N_	O
(	O
"Database name not given"	*(char)
)	O
,	O
[	O
GDBM_ERR_FILE_OWNER	int
]	O
=	O
N_	O
(	O
"Failed to restore file owner"	*(char)
)	O
,	O
[	O
GDBM_ERR_FILE_MODE	int
]	O
=	O
N_	O
(	O
"Failed to restore file mode"	*(char)
)	O
,	O
[	O
GDBM_NEED_RECOVERY	int
]	O
=	O
N_	O
(	O
"Database needs recovery"	*(char)
)	O
,	O
[	O
GDBM_BACKUP_FAILED	int
]	O
=	O
N_	O
(	O
"Failed to create backup copy"	*(char)
)	O
,	O
[	O
GDBM_DIR_OVERFLOW	int
]	O
=	O
N_	O
(	O
"Bucket directory overflow"	*(char)
)	O
,	O
[	O
GDBM_BAD_BUCKET	int
]	O
=	O
N_	O
(	O
"Malformed bucket header"	*(char)
)	O
,	O
[	O
GDBM_BAD_HEADER	int
]	O
=	O
N_	O
(	O
"Malformed database file header"	*(char)
)	O
,	O
[	O
GDBM_BAD_AVAIL	int
]	O
=	O
N_	O
(	O
"Malformed avail_block"	*(char)
)	O
,	O
[	O
GDBM_BAD_HASH_TABLE	int
]	O
=	O
N_	O
(	O
"Malformed hash table"	*(char)
)	O
,	O
[	O
GDBM_BAD_DIR_ENTRY	int
]	O
=	O
N_	O
(	O
"Invalid directory entry"	*(char)
)	O
,	O
[	O
GDBM_FILE_CLOSE_ERROR	int
]	O
=	O
N_	O
(	O
"Error closing file"	*(char)
)	O
,	O
[	O
GDBM_FILE_SYNC_ERROR	int
]	O
=	O
N_	O
(	O
"Error synchronizing file"	*(char)
)	O
,	O
[	O
GDBM_FILE_TRUNCATE_ERROR	int
]	O
=	O
N_	O
(	O
"Error truncating file"	*(char)
)	O
}	O
;	O
const	O
char	O
*	O
gdbm_strerror	(int)->(*(char))
(	O
gdbm_error	int
error	int
)	O
{	O
if	O
(	O
error	int
<	O
_GDBM_MIN_ERRNO	int
||	O
error	int
>	O
_GDBM_MAX_ERRNO	O
)	O
error	int
=	O
GDBM_UNKNOWN_ERROR	int
;	O
return	O
gettext	(*(char))->(*(char))
(	O
gdbm_errlist	array(*(char))
[	O
error	int
]	O
)	O
;	O
}	O
char	O
const	O
*	O
gdbm_db_strerror	(*(struct))->(*(char))
(	O
GDBM_FILE	*(struct)
dbf	*(struct)
)	O
{	O
if	O
(	O
!	O
dbf	*(struct)
->	O
last_errstr	*(char)
)	O
{	O
char	O
const	O
*	O
errstr	*(char)
=	O
gdbm_strerror	(int)->(*(char))
(	O
dbf	*(struct)
->	O
last_error	int
)	O
;	O
if	O
(	O
dbf	*(struct)
->	O
last_syserror	int
)	O
{	O
char	O
const	O
*	O
syserrstr	*(char)
=	O
strerror	(int)->(*(char))
(	O
dbf	*(struct)
->	O
last_syserror	int
)	O
;	O
size_t	long
len	long
=	O
strlen	(*(char))->(long)
(	O
errstr	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
syserrstr	*(char)
)	O
+	O
2	int
;	O
dbf	*(struct)
->	O
last_errstr	*(char)
=	O
malloc	(long)->(*(void))
(	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
dbf	*(struct)
->	O
last_errstr	*(char)
)	O
return	O
errstr	*(char)
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
dbf	*(struct)
->	O
last_errstr	*(char)
,	O
errstr	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
dbf	*(struct)
->	O
last_errstr	*(char)
,	O
": "	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
dbf	*(struct)
->	O
last_errstr	*(char)
,	O
syserrstr	*(char)
)	O
;	O
}	O
else	O
return	O
errstr	*(char)
;	O
}	O
return	O
dbf	*(struct)
->	O
last_errstr	*(char)
;	O
}	O
int	O
const	O
gdbm_syserr	array(int)
[	O
_GDBM_MAX_ERRNO	O
+	O
1	int
]	O
=	O
{	O
[	O
GDBM_FILE_OPEN_ERROR	int
]	O
=	O
1	int
,	O
[	O
GDBM_FILE_WRITE_ERROR	int
]	O
=	O
1	int
,	O
[	O
GDBM_FILE_SEEK_ERROR	int
]	O
=	O
1	int
,	O
[	O
GDBM_FILE_READ_ERROR	int
]	O
=	O
1	int
,	O
[	O
GDBM_FILE_STAT_ERROR	int
]	O
=	O
1	int
,	O
[	O
GDBM_BACKUP_FAILED	int
]	O
=	O
1	int
,	O
[	O
GDBM_FILE_CLOSE_ERROR	int
]	O
=	O
1	int
,	O
[	O
GDBM_FILE_SYNC_ERROR	int
]	O
=	O
1	int
,	O
[	O
GDBM_FILE_TRUNCATE_ERROR	int
]	O
=	O
1	int
}	O
;	O
int	O
gdbm_check_syserr	(int)->(int)
(	O
gdbm_error	int
n	int
)	O
{	O
if	O
(	O
n	int
>=	O
_GDBM_MIN_ERRNO	int
&&	O
n	int
<=	O
_GDBM_MAX_ERRNO	O
)	O
return	O
gdbm_syserr	array(int)
[	O
n	int
]	O
;	O
return	O
0	int
;	O
}	O
