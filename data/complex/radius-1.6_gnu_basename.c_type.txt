char	O
*	O
last_component	(*(char))->(*(char))
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
char	O
const	O
*	O
base	*(char)
=	O
name	*(char)
+	O
FILE_SYSTEM_PREFIX_LEN	int
(	O
name	*(char)
)	O
;	O
char	O
const	O
*	O
p	*(void)
;	O
bool	bool
saw_slash	bool
=	O
false	int
;	O
while	O
(	O
ISSLASH	O
(	O
*	O
base	*(char)
)	O
)	O
base	*(char)
++	O
;	O
for	O
(	O
p	*(void)
=	O
base	*(char)
;	O
*	O
p	*(void)
;	O
p	*(void)
++	O
)	O
{	O
if	O
(	O
ISSLASH	O
(	O
*	O
p	*(void)
)	O
)	O
saw_slash	bool
=	O
true	int
;	O
else	O
if	O
(	O
saw_slash	bool
)	O
{	O
base	*(char)
=	O
p	*(void)
;	O
saw_slash	bool
=	O
false	int
;	O
}	O
}	O
return	O
(	O
char	O
*	O
)	O
base	*(char)
;	O
}	O
char	O
*	O
base_name	(*(char))->(*(char))
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
char	O
const	O
*	O
base	*(char)
=	O
last_component	(*(char))->(*(char))
(	O
name	*(char)
)	O
;	O
size_t	long
length	long
;	O
if	O
(	O
!	O
*	O
base	*(char)
)	O
return	O
xstrndup	(*(char),long)->(*(char))
(	O
name	*(char)
,	O
base_len	(*(char))->(long)
(	O
name	*(char)
)	O
)	O
;	O
length	long
=	O
base_len	(*(char))->(long)
(	O
base	*(char)
)	O
;	O
if	O
(	O
ISSLASH	O
(	O
base	*(char)
[	O
length	long
]	O
)	O
)	O
length	long
++	O
;	O
if	O
(	O
FILE_SYSTEM_PREFIX_LEN	int
(	O
base	*(char)
)	O
)	O
{	O
char	O
*	O
p	*(void)
=	O
xmalloc	(long)->(*(void))
(	O
length	long
+	O
3	int
)	O
;	O
p	*(void)
[	O
0	int
]	O
=	O
'.'	O
;	O
p	*(void)
[	O
1	int
]	O
=	O
'/'	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
p	*(void)
+	O
2	int
,	O
base	*(char)
,	O
length	long
)	O
;	O
p	*(void)
[	O
length	long
+	O
2	int
]	O
=	O
'\0'	O
;	O
return	O
p	*(void)
;	O
}	O
return	O
xstrndup	(*(char),long)->(*(char))
(	O
base	*(char)
,	O
length	long
)	O
;	O
}	O
size_t	long
base_len	(*(char))->(long)
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
size_t	long
len	long
;	O
size_t	long
prefix_len	long
=	O
FILE_SYSTEM_PREFIX_LEN	int
(	O
name	*(char)
)	O
;	O
for	O
(	O
len	long
=	O
strlen	(*(char))->(long)
(	O
name	*(char)
)	O
;	O
1	int
<	O
len	long
&&	O
ISSLASH	O
(	O
name	*(char)
[	O
len	long
-	O
1	int
]	O
)	O
;	O
len	long
--	O
)	O
continue	O
;	O
if	O
(	O
DOUBLE_SLASH_IS_DISTINCT_ROOT	int
&&	O
len	long
==	O
1	int
&&	O
ISSLASH	O
(	O
name	*(char)
[	O
0	int
]	O
)	O
&&	O
ISSLASH	O
(	O
name	*(char)
[	O
1	int
]	O
)	O
&&	O
!	O
name	*(char)
[	O
2	int
]	O
)	O
return	O
2	int
;	O
if	O
(	O
FILE_SYSTEM_DRIVE_PREFIX_CAN_BE_RELATIVE	int
&&	O
prefix_len	long
&&	O
len	long
==	O
prefix_len	long
&&	O
ISSLASH	O
(	O
name	*(char)
[	O
prefix_len	long
]	O
)	O
)	O
return	O
prefix_len	long
+	O
1	int
;	O
return	O
len	long
;	O
}	O
