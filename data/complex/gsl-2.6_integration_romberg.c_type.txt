gsl_integration_romberg_workspace	struct(long,*(double),*(double))
*	O
gsl_integration_romberg_alloc	(long)->(*(struct(long,*(double),*(double))))
(	O
const	O
size_t	long
n	int
)	O
{	O
gsl_integration_romberg_workspace	struct(long,*(double),*(double))
*	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
;	O
if	O
(	O
n	int
<	O
1	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"workspace size n must be at least 1"	*(char)
,	O
GSL_EDOM	int
,	O
0	int
)	O
;	O
}	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
gsl_integration_romberg_workspace	struct(long,*(double),*(double))
)	O
)	O
;	O
if	O
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
==	O
NULL	O
)	O
{	O
GSL_ERROR_VAL	O
(	O
"unable to allocate workspace"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
n	int
=	O
GSL_MIN	O
(	O
n	int
,	O
30	int
)	O
;	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
work1	*(double)
=	O
malloc	(long)->(*(void))
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
n	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
work1	*(double)
==	O
NULL	O
)	O
{	O
gsl_integration_romberg_free	(*(struct(long,*(double),*(double))))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
)	O
;	O
GSL_ERROR_VAL	O
(	O
"unable to allocate previous row"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
work2	*(double)
=	O
malloc	(long)->(*(void))
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
n	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
work2	*(double)
==	O
NULL	O
)	O
{	O
gsl_integration_romberg_free	(*(struct(long,*(double),*(double))))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
)	O
;	O
GSL_ERROR_VAL	O
(	O
"unable to allocate current row"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
return	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
;	O
}	O
void	O
gsl_integration_romberg_free	(*(struct(long,*(double),*(double))))->(void)
(	O
gsl_integration_romberg_workspace	struct(long,*(double),*(double))
*	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
)	O
{	O
if	O
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
work1	*(double)
)	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
work1	*(double)
)	O
;	O
if	O
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
work2	*(double)
)	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
work2	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
)	O
;	O
}	O
int	O
gsl_integration_romberg	(*(struct(*((double,*`)->(double)),*(void))),double,double,double,double,*(double),*(long),*(struct(long,*(double),*(double))))->(int)
(	O
const	O
gsl_function	struct(*((double,*(void))->(double)),*(void))
*	O
f	*(double)
,	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
,	O
const	O
double	O
epsabs	double
,	O
const	O
double	O
epsrel	double
,	O
double	O
*	O
result	*(double)
,	O
size_t	long
*	O
neval	*(long)
,	O
gsl_integration_romberg_workspace	struct(long,*(double),*(double))
*	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
)	O
{	O
if	O
(	O
epsabs	double
<	O
0.0	int
)	O
{	O
GSL_ERROR	O
(	O
"epsabs must be non-negative"	*(char)
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
if	O
(	O
epsrel	double
<	O
0.0	int
)	O
{	O
GSL_ERROR	O
(	O
"epsrel must be non-negative"	*(char)
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
{	O
const	O
size_t	long
n	int
=	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
n	int
;	O
double	O
*	O
Rp	*(double)
=	O
&	O
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
work1	*(double)
[	O
0	int
]	O
)	O
;	O
double	O
*	O
Rc	*(double)
=	O
&	O
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
work2	*(double)
[	O
0	int
]	O
)	O
;	O
double	O
*	O
Rtmp	*(double)
;	O
double	O
h	double
=	O
0.5	int
*	O
(	O
b	double
-	O
a	double
)	O
;	O
size_t	long
i	long
;	O
Rp	*(double)
[	O
0	int
]	O
=	O
h	double
*	O
(	O
GSL_FN_EVAL	O
(	O
f	*(double)
,	O
a	double
)	O
+	O
GSL_FN_EVAL	O
(	O
f	*(double)
,	O
b	double
)	O
)	O
;	O
*	O
neval	*(long)
=	O
2	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
n	int
;	O
++	O
i	long
)	O
{	O
size_t	long
j	long
;	O
double	O
sum	double
=	O
0.0	int
;	O
double	O
err	double
;	O
double	O
four_j	double
;	O
size_t	long
two_i	long
=	O
1	int
<<	O
i	long
;	O
for	O
(	O
j	long
=	O
1	int
;	O
j	long
<	O
two_i	long
;	O
j	long
+=	O
2	int
)	O
{	O
sum	double
+=	O
GSL_FN_EVAL	O
(	O
f	*(double)
,	O
a	double
+	O
j	long
*	O
h	double
)	O
;	O
++	O
(	O
*	O
neval	*(long)
)	O
;	O
}	O
Rc	*(double)
[	O
0	int
]	O
=	O
sum	double
*	O
h	double
+	O
0.5	int
*	O
Rp	*(double)
[	O
0	int
]	O
;	O
four_j	double
=	O
4.0	int
;	O
for	O
(	O
j	long
=	O
1	int
;	O
j	long
<=	O
i	long
;	O
++	O
j	long
)	O
{	O
Rc	*(double)
[	O
j	long
]	O
=	O
(	O
four_j	double
*	O
Rc	*(double)
[	O
j	long
-	O
1	int
]	O
-	O
Rp	*(double)
[	O
j	long
-	O
1	int
]	O
)	O
/	O
(	O
four_j	double
-	O
1.0	int
)	O
;	O
four_j	double
*=	O
4.0	int
;	O
}	O
err	double
=	O
fabs	(double)->(double)
(	O
Rc	*(double)
[	O
i	long
]	O
-	O
Rp	*(double)
[	O
i	long
-	O
1	int
]	O
)	O
;	O
if	O
(	O
(	O
err	double
<	O
epsabs	double
)	O
||	O
(	O
err	double
<	O
epsrel	double
*	O
fabs	(double)->(double)
(	O
Rc	*(double)
[	O
i	long
]	O
)	O
)	O
)	O
{	O
*	O
result	*(double)
=	O
Rc	*(double)
[	O
i	long
]	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
Rtmp	*(double)
=	O
Rp	*(double)
;	O
Rp	*(double)
=	O
Rc	*(double)
;	O
Rc	*(double)
=	O
Rtmp	*(double)
;	O
h	double
*=	O
0.5	int
;	O
}	O
*	O
result	*(double)
=	O
Rp	*(double)
[	O
n	int
-	O
1	int
]	O
;	O
return	O
GSL_EMAXITER	int
;	O
}	O
}	O
