struct	O
dwarf1_debug	O
{	O
bfd	struct
*	O
abfd	*(struct)
;	O
asymbol	struct(*(struct),*(char),long,int,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct(*`,long,long,*`)),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct(struct`,*`)),*(struct),*(struct(*`,*`,long,int,*`,union`)),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),union(*(void),long))
*	O
*	O
syms	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(char),long,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),union(*(void),long))))
;	O
struct	O
dwarf1_unit	O
*	O
lastUnit	O
;	O
bfd_byte	char
*	O
debug_section	O
;	O
bfd_byte	char
*	O
debug_section_end	O
;	O
bfd_byte	char
*	O
line_section	O
;	O
bfd_byte	char
*	O
line_section_end	O
;	O
bfd_byte	char
*	O
currentDie	O
;	O
}	O
;	O
struct	O
dwarf1_unit	O
{	O
struct	O
dwarf1_unit	O
*	O
prev	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
;	O
char	O
*	O
name	*(char)
;	O
unsigned	O
long	O
low_pc	O
;	O
unsigned	O
long	O
high_pc	O
;	O
int	O
has_stmt_list	O
;	O
unsigned	O
long	O
stmt_list_offset	O
;	O
bfd_byte	char
*	O
first_child	O
;	O
unsigned	O
long	O
line_count	O
;	O
struct	O
linenumber	O
*	O
linenumber_table	O
;	O
struct	O
dwarf1_func	O
*	O
func_list	O
;	O
}	O
;	O
struct	O
dwarf1_func	O
{	O
struct	O
dwarf1_func	O
*	O
prev	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
;	O
char	O
*	O
name	*(char)
;	O
unsigned	O
long	O
low_pc	O
;	O
unsigned	O
long	O
high_pc	O
;	O
}	O
;	O
struct	O
die_info	O
{	O
unsigned	O
long	O
length	O
;	O
unsigned	O
long	O
sibling	O
;	O
unsigned	O
long	O
low_pc	O
;	O
unsigned	O
long	O
high_pc	O
;	O
unsigned	O
long	O
stmt_list_offset	O
;	O
char	O
*	O
name	*(char)
;	O
int	O
has_stmt_list	O
;	O
unsigned	O
short	O
tag	O
;	O
}	O
;	O
struct	O
linenumber	O
{	O
unsigned	O
long	O
addr	*(void)
;	O
unsigned	O
long	O
linenumber	O
;	O
}	O
;	O
static	O
struct	O
dwarf1_unit	O
*	O
alloc_dwarf1_unit	O
(	O
struct	O
dwarf1_debug	O
*	O
stash	O
)	O
{	O
bfd_size_type	long
amt	O
=	O
sizeof	O
(	O
struct	O
dwarf1_unit	O
)	O
;	O
struct	O
dwarf1_unit	O
*	O
x	O
=	O
(	O
struct	O
dwarf1_unit	O
*	O
)	O
bfd_zalloc	(*(struct),long)->(*(void))
(	O
stash	O
->	O
abfd	*(struct)
,	O
amt	O
)	O
;	O
if	O
(	O
x	O
)	O
{	O
x	O
->	O
prev	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
=	O
stash	O
->	O
lastUnit	O
;	O
stash	O
->	O
lastUnit	O
=	O
x	O
;	O
}	O
return	O
x	O
;	O
}	O
static	O
struct	O
dwarf1_func	O
*	O
alloc_dwarf1_func	O
(	O
struct	O
dwarf1_debug	O
*	O
stash	O
,	O
struct	O
dwarf1_unit	O
*	O
aUnit	O
)	O
{	O
bfd_size_type	long
amt	O
=	O
sizeof	O
(	O
struct	O
dwarf1_func	O
)	O
;	O
struct	O
dwarf1_func	O
*	O
x	O
=	O
(	O
struct	O
dwarf1_func	O
*	O
)	O
bfd_zalloc	(*(struct),long)->(*(void))
(	O
stash	O
->	O
abfd	*(struct)
,	O
amt	O
)	O
;	O
if	O
(	O
x	O
)	O
{	O
x	O
->	O
prev	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
=	O
aUnit	O
->	O
func_list	O
;	O
aUnit	O
->	O
func_list	O
=	O
x	O
;	O
}	O
return	O
x	O
;	O
}	O
static	O
bfd_boolean	int
parse_die	O
(	O
bfd	struct
*	O
abfd	*(struct)
,	O
struct	O
die_info	O
*	O
aDieInfo	O
,	O
bfd_byte	char
*	O
aDiePtr	O
,	O
bfd_byte	char
*	O
aDiePtrEnd	O
)	O
{	O
bfd_byte	char
*	O
this_die	O
=	O
aDiePtr	O
;	O
bfd_byte	char
*	O
xptr	O
=	O
this_die	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
aDieInfo	O
,	O
0	int
,	O
sizeof	O
(	O
*	O
aDieInfo	O
)	O
)	O
;	O
if	O
(	O
xptr	O
+	O
4	int
>	O
aDiePtrEnd	O
)	O
return	O
FALSE	O
;	O
aDieInfo	O
->	O
length	O
=	O
bfd_get_32	O
(	O
abfd	*(struct)
,	O
xptr	O
)	O
;	O
xptr	O
+=	O
4	int
;	O
if	O
(	O
aDieInfo	O
->	O
length	O
==	O
0	int
||	O
this_die	O
+	O
aDieInfo	O
->	O
length	O
>	O
aDiePtrEnd	O
)	O
return	O
FALSE	O
;	O
aDiePtrEnd	O
=	O
this_die	O
+	O
aDieInfo	O
->	O
length	O
;	O
if	O
(	O
aDieInfo	O
->	O
length	O
<	O
6	int
)	O
{	O
aDieInfo	O
->	O
tag	O
=	O
TAG_padding	O
;	O
return	O
TRUE	int
;	O
}	O
if	O
(	O
xptr	O
+	O
2	int
>	O
aDiePtrEnd	O
)	O
return	O
FALSE	O
;	O
aDieInfo	O
->	O
tag	O
=	O
bfd_get_16	O
(	O
abfd	*(struct)
,	O
xptr	O
)	O
;	O
xptr	O
+=	O
2	int
;	O
while	O
(	O
xptr	O
+	O
2	int
<=	O
aDiePtrEnd	O
)	O
{	O
unsigned	O
int	O
block_len	O
;	O
unsigned	O
short	O
attr	O
;	O
attr	O
=	O
bfd_get_16	O
(	O
abfd	*(struct)
,	O
xptr	O
)	O
;	O
xptr	O
+=	O
2	int
;	O
switch	O
(	O
FORM_FROM_ATTR	O
(	O
attr	O
)	O
)	O
{	O
case	O
FORM_DATA2	O
:	O
xptr	O
+=	O
2	int
;	O
break	O
;	O
case	O
FORM_DATA4	O
:	O
case	O
FORM_REF	O
:	O
if	O
(	O
xptr	O
+	O
4	int
<=	O
aDiePtrEnd	O
)	O
{	O
if	O
(	O
attr	O
==	O
AT_sibling	O
)	O
aDieInfo	O
->	O
sibling	O
=	O
bfd_get_32	O
(	O
abfd	*(struct)
,	O
xptr	O
)	O
;	O
else	O
if	O
(	O
attr	O
==	O
AT_stmt_list	O
)	O
{	O
aDieInfo	O
->	O
stmt_list_offset	O
=	O
bfd_get_32	O
(	O
abfd	*(struct)
,	O
xptr	O
)	O
;	O
aDieInfo	O
->	O
has_stmt_list	O
=	O
1	int
;	O
}	O
}	O
xptr	O
+=	O
4	int
;	O
break	O
;	O
case	O
FORM_DATA8	O
:	O
xptr	O
+=	O
8	int
;	O
break	O
;	O
case	O
FORM_ADDR	O
:	O
if	O
(	O
xptr	O
+	O
4	int
<=	O
aDiePtrEnd	O
)	O
{	O
if	O
(	O
attr	O
==	O
AT_low_pc	O
)	O
aDieInfo	O
->	O
low_pc	O
=	O
bfd_get_32	O
(	O
abfd	*(struct)
,	O
xptr	O
)	O
;	O
else	O
if	O
(	O
attr	O
==	O
AT_high_pc	O
)	O
aDieInfo	O
->	O
high_pc	O
=	O
bfd_get_32	O
(	O
abfd	*(struct)
,	O
xptr	O
)	O
;	O
}	O
xptr	O
+=	O
4	int
;	O
break	O
;	O
case	O
FORM_BLOCK2	O
:	O
if	O
(	O
xptr	O
+	O
2	int
<=	O
aDiePtrEnd	O
)	O
{	O
block_len	O
=	O
bfd_get_16	O
(	O
abfd	*(struct)
,	O
xptr	O
)	O
;	O
if	O
(	O
xptr	O
+	O
block_len	O
>	O
aDiePtrEnd	O
||	O
xptr	O
+	O
block_len	O
<	O
xptr	O
)	O
return	O
FALSE	O
;	O
xptr	O
+=	O
block_len	O
;	O
}	O
xptr	O
+=	O
2	int
;	O
break	O
;	O
case	O
FORM_BLOCK4	O
:	O
if	O
(	O
xptr	O
+	O
4	int
<=	O
aDiePtrEnd	O
)	O
{	O
block_len	O
=	O
bfd_get_32	O
(	O
abfd	*(struct)
,	O
xptr	O
)	O
;	O
if	O
(	O
xptr	O
+	O
block_len	O
>	O
aDiePtrEnd	O
||	O
xptr	O
+	O
block_len	O
<	O
xptr	O
)	O
return	O
FALSE	O
;	O
xptr	O
+=	O
block_len	O
;	O
}	O
xptr	O
+=	O
4	int
;	O
break	O
;	O
case	O
FORM_STRING	O
:	O
if	O
(	O
attr	O
==	O
AT_name	O
)	O
aDieInfo	O
->	O
name	*(char)
=	O
(	O
char	O
*	O
)	O
xptr	O
;	O
xptr	O
+=	O
strnlen	(*(char),long)->(long)
(	O
(	O
char	O
*	O
)	O
xptr	O
,	O
aDiePtrEnd	O
-	O
xptr	O
)	O
+	O
1	int
;	O
break	O
;	O
}	O
}	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
parse_line_table	O
(	O
struct	O
dwarf1_debug	O
*	O
stash	O
,	O
struct	O
dwarf1_unit	O
*	O
aUnit	O
)	O
{	O
bfd_byte	char
*	O
xptr	O
;	O
if	O
(	O
stash	O
->	O
line_section	O
==	O
0	int
)	O
{	O
asection	struct(*(char),int,int,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*(struct`),long))),int,int,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`)))),union(*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`)))))
*	O
msec	O
;	O
bfd_size_type	long
size	long
;	O
msec	O
=	O
bfd_get_section_by_name	(*(struct),*(char))->(*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))))
(	O
stash	O
->	O
abfd	*(struct)
,	O
".line"	*(char)
)	O
;	O
if	O
(	O
!	O
msec	O
)	O
return	O
FALSE	O
;	O
size	long
=	O
msec	O
->	O
rawsize	long
?	O
msec	O
->	O
rawsize	long
:	O
msec	O
->	O
size	long
;	O
stash	O
->	O
line_section	O
=	O
bfd_simple_get_relocated_section_contents	O
(	O
stash	O
->	O
abfd	*(struct)
,	O
msec	O
,	O
NULL	O
,	O
stash	O
->	O
syms	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(char),long,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),union(*(void),long))))
)	O
;	O
if	O
(	O
!	O
stash	O
->	O
line_section	O
)	O
return	O
FALSE	O
;	O
stash	O
->	O
line_section_end	O
=	O
stash	O
->	O
line_section	O
+	O
size	long
;	O
}	O
xptr	O
=	O
stash	O
->	O
line_section	O
+	O
aUnit	O
->	O
stmt_list_offset	O
;	O
if	O
(	O
xptr	O
+	O
8	int
<=	O
stash	O
->	O
line_section_end	O
)	O
{	O
unsigned	O
long	O
eachLine	O
;	O
bfd_byte	char
*	O
tblend	O
;	O
unsigned	O
long	O
base	int
;	O
bfd_size_type	long
amt	O
;	O
tblend	O
=	O
bfd_get_32	O
(	O
stash	O
->	O
abfd	*(struct)
,	O
(	O
bfd_byte	char
*	O
)	O
xptr	O
)	O
+	O
xptr	O
;	O
xptr	O
+=	O
4	int
;	O
base	int
=	O
bfd_get_32	O
(	O
stash	O
->	O
abfd	*(struct)
,	O
(	O
bfd_byte	char
*	O
)	O
xptr	O
)	O
;	O
xptr	O
+=	O
4	int
;	O
aUnit	O
->	O
line_count	O
=	O
(	O
tblend	O
-	O
xptr	O
)	O
/	O
10	int
;	O
amt	O
=	O
sizeof	O
(	O
struct	O
linenumber	O
)	O
*	O
aUnit	O
->	O
line_count	O
;	O
aUnit	O
->	O
linenumber_table	O
=	O
(	O
struct	O
linenumber	O
*	O
)	O
bfd_alloc	(*(struct),long)->(*(void))
(	O
stash	O
->	O
abfd	*(struct)
,	O
amt	O
)	O
;	O
if	O
(	O
!	O
aUnit	O
->	O
linenumber_table	O
)	O
return	O
FALSE	O
;	O
for	O
(	O
eachLine	O
=	O
0	int
;	O
eachLine	O
<	O
aUnit	O
->	O
line_count	O
;	O
eachLine	O
++	O
)	O
{	O
if	O
(	O
xptr	O
+	O
10	int
>	O
stash	O
->	O
line_section_end	O
)	O
{	O
aUnit	O
->	O
line_count	O
=	O
eachLine	O
;	O
break	O
;	O
}	O
aUnit	O
->	O
linenumber_table	O
[	O
eachLine	O
]	O
.	O
linenumber	O
=	O
bfd_get_32	O
(	O
stash	O
->	O
abfd	*(struct)
,	O
(	O
bfd_byte	char
*	O
)	O
xptr	O
)	O
;	O
xptr	O
+=	O
4	int
;	O
xptr	O
+=	O
2	int
;	O
aUnit	O
->	O
linenumber_table	O
[	O
eachLine	O
]	O
.	O
addr	*(void)
=	O
base	int
+	O
bfd_get_32	O
(	O
stash	O
->	O
abfd	*(struct)
,	O
(	O
bfd_byte	char
*	O
)	O
xptr	O
)	O
;	O
xptr	O
+=	O
4	int
;	O
}	O
}	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
parse_functions_in_unit	O
(	O
struct	O
dwarf1_debug	O
*	O
stash	O
,	O
struct	O
dwarf1_unit	O
*	O
aUnit	O
)	O
{	O
bfd_byte	char
*	O
eachDie	O
;	O
if	O
(	O
aUnit	O
->	O
first_child	O
)	O
for	O
(	O
eachDie	O
=	O
aUnit	O
->	O
first_child	O
;	O
eachDie	O
<	O
stash	O
->	O
debug_section_end	O
;	O
)	O
{	O
struct	O
die_info	O
eachDieInfo	O
;	O
if	O
(	O
!	O
parse_die	O
(	O
stash	O
->	O
abfd	*(struct)
,	O
&	O
eachDieInfo	O
,	O
eachDie	O
,	O
stash	O
->	O
debug_section_end	O
)	O
)	O
return	O
FALSE	O
;	O
if	O
(	O
eachDieInfo	O
.	O
tag	O
==	O
TAG_global_subroutine	O
||	O
eachDieInfo	O
.	O
tag	O
==	O
TAG_subroutine	O
||	O
eachDieInfo	O
.	O
tag	O
==	O
TAG_inlined_subroutine	O
||	O
eachDieInfo	O
.	O
tag	O
==	O
TAG_entry_point	O
)	O
{	O
struct	O
dwarf1_func	O
*	O
aFunc	O
=	O
alloc_dwarf1_func	O
(	O
stash	O
,	O
aUnit	O
)	O
;	O
if	O
(	O
!	O
aFunc	O
)	O
return	O
FALSE	O
;	O
aFunc	O
->	O
name	*(char)
=	O
eachDieInfo	O
.	O
name	*(char)
;	O
aFunc	O
->	O
low_pc	O
=	O
eachDieInfo	O
.	O
low_pc	O
;	O
aFunc	O
->	O
high_pc	O
=	O
eachDieInfo	O
.	O
high_pc	O
;	O
}	O
if	O
(	O
eachDieInfo	O
.	O
sibling	O
)	O
eachDie	O
=	O
stash	O
->	O
debug_section	O
+	O
eachDieInfo	O
.	O
sibling	O
;	O
else	O
break	O
;	O
}	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
dwarf1_unit_find_nearest_line	O
(	O
struct	O
dwarf1_debug	O
*	O
stash	O
,	O
struct	O
dwarf1_unit	O
*	O
aUnit	O
,	O
unsigned	O
long	O
addr	*(void)
,	O
const	O
char	O
*	O
*	O
filename_ptr	O
,	O
const	O
char	O
*	O
*	O
functionname_ptr	O
,	O
unsigned	O
int	O
*	O
linenumber_ptr	O
)	O
{	O
int	O
line_p	O
=	O
FALSE	O
;	O
int	O
func_p	O
=	O
FALSE	O
;	O
if	O
(	O
aUnit	O
->	O
low_pc	O
<=	O
addr	*(void)
&&	O
addr	*(void)
<	O
aUnit	O
->	O
high_pc	O
)	O
{	O
if	O
(	O
aUnit	O
->	O
has_stmt_list	O
)	O
{	O
unsigned	O
long	O
i	*(struct)
;	O
struct	O
dwarf1_func	O
*	O
eachFunc	O
;	O
if	O
(	O
!	O
aUnit	O
->	O
linenumber_table	O
)	O
{	O
if	O
(	O
!	O
parse_line_table	O
(	O
stash	O
,	O
aUnit	O
)	O
)	O
return	O
FALSE	O
;	O
}	O
if	O
(	O
!	O
aUnit	O
->	O
func_list	O
)	O
{	O
if	O
(	O
!	O
parse_functions_in_unit	O
(	O
stash	O
,	O
aUnit	O
)	O
)	O
return	O
FALSE	O
;	O
}	O
for	O
(	O
i	*(struct)
=	O
0	int
;	O
i	*(struct)
<	O
aUnit	O
->	O
line_count	O
;	O
i	*(struct)
++	O
)	O
{	O
if	O
(	O
aUnit	O
->	O
linenumber_table	O
[	O
i	*(struct)
]	O
.	O
addr	*(void)
<=	O
addr	*(void)
&&	O
addr	*(void)
<	O
aUnit	O
->	O
linenumber_table	O
[	O
i	*(struct)
+	O
1	int
]	O
.	O
addr	*(void)
)	O
{	O
*	O
filename_ptr	O
=	O
aUnit	O
->	O
name	*(char)
;	O
*	O
linenumber_ptr	O
=	O
aUnit	O
->	O
linenumber_table	O
[	O
i	*(struct)
]	O
.	O
linenumber	O
;	O
line_p	O
=	O
TRUE	int
;	O
break	O
;	O
}	O
}	O
for	O
(	O
eachFunc	O
=	O
aUnit	O
->	O
func_list	O
;	O
eachFunc	O
;	O
eachFunc	O
=	O
eachFunc	O
->	O
prev	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
)	O
{	O
if	O
(	O
eachFunc	O
->	O
low_pc	O
<=	O
addr	*(void)
&&	O
addr	*(void)
<	O
eachFunc	O
->	O
high_pc	O
)	O
{	O
*	O
functionname_ptr	O
=	O
eachFunc	O
->	O
name	*(char)
;	O
func_p	O
=	O
TRUE	int
;	O
break	O
;	O
}	O
}	O
}	O
}	O
return	O
line_p	O
||	O
func_p	O
;	O
}	O
bfd_boolean	int
_bfd_dwarf1_find_nearest_line	O
(	O
bfd	struct
*	O
abfd	*(struct)
,	O
asymbol	struct(*(struct),*(char),long,int,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct(*`,long,long,*`)),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct(struct`,*`)),*(struct),*(struct(*`,*`,long,int,*`,union`)),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),union(*(void),long))
*	O
*	O
symbols	O
,	O
asection	struct(*(char),int,int,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*(struct`),long))),int,int,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`)))),union(*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`)))))
*	O
section	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
,	O
bfd_vma	long
offset	long
,	O
const	O
char	O
*	O
*	O
filename_ptr	O
,	O
const	O
char	O
*	O
*	O
functionname_ptr	O
,	O
unsigned	O
int	O
*	O
linenumber_ptr	O
)	O
{	O
struct	O
dwarf1_debug	O
*	O
stash	O
=	O
elf_tdata	O
(	O
abfd	*(struct)
)	O
->	O
dwarf1_find_line_info	O
;	O
struct	O
dwarf1_unit	O
*	O
eachUnit	O
;	O
unsigned	O
long	O
addr	*(void)
=	O
(	O
unsigned	O
long	O
)	O
(	O
offset	long
+	O
section	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
->	O
vma	long
)	O
;	O
*	O
filename_ptr	O
=	O
NULL	O
;	O
*	O
functionname_ptr	O
=	O
NULL	O
;	O
*	O
linenumber_ptr	O
=	O
0	int
;	O
if	O
(	O
!	O
stash	O
)	O
{	O
asection	struct(*(char),int,int,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*(struct`),long))),int,int,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`)))),union(*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`)))))
*	O
msec	O
;	O
bfd_size_type	long
size	long
=	O
sizeof	O
(	O
struct	O
dwarf1_debug	O
)	O
;	O
stash	O
=	O
elf_tdata	O
(	O
abfd	*(struct)
)	O
->	O
dwarf1_find_line_info	O
=	O
(	O
struct	O
dwarf1_debug	O
*	O
)	O
bfd_zalloc	(*(struct),long)->(*(void))
(	O
abfd	*(struct)
,	O
size	long
)	O
;	O
if	O
(	O
!	O
stash	O
)	O
return	O
FALSE	O
;	O
msec	O
=	O
bfd_get_section_by_name	(*(struct),*(char))->(*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))))
(	O
abfd	*(struct)
,	O
".debug"	*(char)
)	O
;	O
if	O
(	O
!	O
msec	O
)	O
return	O
FALSE	O
;	O
size	long
=	O
msec	O
->	O
rawsize	long
?	O
msec	O
->	O
rawsize	long
:	O
msec	O
->	O
size	long
;	O
stash	O
->	O
debug_section	O
=	O
bfd_simple_get_relocated_section_contents	O
(	O
abfd	*(struct)
,	O
msec	O
,	O
NULL	O
,	O
symbols	O
)	O
;	O
if	O
(	O
!	O
stash	O
->	O
debug_section	O
)	O
return	O
FALSE	O
;	O
stash	O
->	O
debug_section_end	O
=	O
stash	O
->	O
debug_section	O
+	O
size	long
;	O
stash	O
->	O
currentDie	O
=	O
stash	O
->	O
debug_section	O
;	O
stash	O
->	O
abfd	*(struct)
=	O
abfd	*(struct)
;	O
stash	O
->	O
syms	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(char),long,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),union(*(void),long))))
=	O
symbols	O
;	O
}	O
if	O
(	O
!	O
stash	O
->	O
debug_section	O
)	O
return	O
FALSE	O
;	O
for	O
(	O
eachUnit	O
=	O
stash	O
->	O
lastUnit	O
;	O
eachUnit	O
;	O
eachUnit	O
=	O
eachUnit	O
->	O
prev	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
)	O
if	O
(	O
eachUnit	O
->	O
low_pc	O
<=	O
addr	*(void)
&&	O
addr	*(void)
<	O
eachUnit	O
->	O
high_pc	O
)	O
return	O
dwarf1_unit_find_nearest_line	O
(	O
stash	O
,	O
eachUnit	O
,	O
addr	*(void)
,	O
filename_ptr	O
,	O
functionname_ptr	O
,	O
linenumber_ptr	O
)	O
;	O
while	O
(	O
stash	O
->	O
currentDie	O
<	O
stash	O
->	O
debug_section_end	O
)	O
{	O
struct	O
die_info	O
aDieInfo	O
;	O
if	O
(	O
!	O
parse_die	O
(	O
stash	O
->	O
abfd	*(struct)
,	O
&	O
aDieInfo	O
,	O
stash	O
->	O
currentDie	O
,	O
stash	O
->	O
debug_section_end	O
)	O
)	O
return	O
FALSE	O
;	O
if	O
(	O
aDieInfo	O
.	O
tag	O
==	O
TAG_compile_unit	O
)	O
{	O
struct	O
dwarf1_unit	O
*	O
aUnit	O
=	O
alloc_dwarf1_unit	O
(	O
stash	O
)	O
;	O
if	O
(	O
!	O
aUnit	O
)	O
return	O
FALSE	O
;	O
aUnit	O
->	O
name	*(char)
=	O
aDieInfo	O
.	O
name	*(char)
;	O
aUnit	O
->	O
low_pc	O
=	O
aDieInfo	O
.	O
low_pc	O
;	O
aUnit	O
->	O
high_pc	O
=	O
aDieInfo	O
.	O
high_pc	O
;	O
aUnit	O
->	O
has_stmt_list	O
=	O
aDieInfo	O
.	O
has_stmt_list	O
;	O
aUnit	O
->	O
stmt_list_offset	O
=	O
aDieInfo	O
.	O
stmt_list_offset	O
;	O
if	O
(	O
aDieInfo	O
.	O
sibling	O
&&	O
stash	O
->	O
currentDie	O
+	O
aDieInfo	O
.	O
length	O
<	O
stash	O
->	O
debug_section_end	O
&&	O
stash	O
->	O
currentDie	O
+	O
aDieInfo	O
.	O
length	O
!=	O
stash	O
->	O
debug_section	O
+	O
aDieInfo	O
.	O
sibling	O
)	O
aUnit	O
->	O
first_child	O
=	O
stash	O
->	O
currentDie	O
+	O
aDieInfo	O
.	O
length	O
;	O
else	O
aUnit	O
->	O
first_child	O
=	O
0	int
;	O
if	O
(	O
aUnit	O
->	O
low_pc	O
<=	O
addr	*(void)
&&	O
addr	*(void)
<	O
aUnit	O
->	O
high_pc	O
)	O
return	O
dwarf1_unit_find_nearest_line	O
(	O
stash	O
,	O
aUnit	O
,	O
addr	*(void)
,	O
filename_ptr	O
,	O
functionname_ptr	O
,	O
linenumber_ptr	O
)	O
;	O
}	O
if	O
(	O
aDieInfo	O
.	O
sibling	O
!=	O
0	int
)	O
stash	O
->	O
currentDie	O
=	O
stash	O
->	O
debug_section	O
+	O
aDieInfo	O
.	O
sibling	O
;	O
else	O
stash	O
->	O
currentDie	O
+=	O
aDieInfo	O
.	O
length	O
;	O
}	O
return	O
FALSE	O
;	O
}	O
