static	O
int	O
multivar_vcov	(array(double),long,long,long,array(double),long)->(int)
(	O
const	O
double	O
data	*(long double)
[	O
]	O
,	O
size_t	long
d	long
,	O
size_t	long
tda	long
,	O
size_t	long
n	int
,	O
double	O
vcov	array(double)
[	O
]	O
,	O
size_t	long
tda2	long
)	O
;	O
int	O
gsl_ran_multivariate_gaussian	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_rng	struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void))
*	O
r	*(struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void)))
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
mu	double
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
result	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
const	O
size_t	long
M	int
=	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"requires square matrix"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
mu	double
->	O
size	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"incompatible dimension of mean vector with variance-covariance matrix"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
result	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"incompatible dimension of result vector"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
M	int
;	O
++	O
i	long
)	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
result	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
gsl_ran_ugaussian	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))))->(double)
(	O
r	*(struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void)))
)	O
)	O
;	O
gsl_blas_dtrmv	(enum(int,int),enum(int,int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
result	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_add	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
result	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
mu	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_ran_multivariate_gaussian_log_pdf	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
mu	double
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
double	O
*	O
result	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
const	O
size_t	long
M	int
=	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"requires square matrix"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
mu	double
->	O
size	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"incompatible dimension of mean vector with variance-covariance matrix"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
x	double
->	O
size	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"incompatible dimension of quantile vector"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"incompatible dimension of work vector"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
double	O
quadForm	double
;	O
double	O
logSqrtDetSigma	double
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
M	int
;	O
++	O
i	long
)	O
{	O
double	O
xi	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
x	double
,	O
i	long
)	O
;	O
double	O
mui	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
mu	double
,	O
i	long
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
xi	double
-	O
mui	double
)	O
;	O
}	O
gsl_blas_dtrsv	(enum(int,int),enum(int,int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_blas_ddot	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double))->(int)
(	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
&	O
quadForm	double
)	O
;	O
logSqrtDetSigma	double
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
M	int
;	O
++	O
i	long
)	O
{	O
double	O
Lii	double
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
i	long
)	O
;	O
logSqrtDetSigma	double
+=	O
log	(double)->(double)
(	O
Lii	double
)	O
;	O
}	O
*	O
result	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
-	O
0.5	int
*	O
quadForm	double
-	O
logSqrtDetSigma	double
-	O
0.5	int
*	O
M	int
*	O
log	(double)->(double)
(	O
2.0	int
*	O
M_PI	int
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_ran_multivariate_gaussian_pdf	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
mu	double
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
double	O
*	O
result	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
double	O
logpdf	double
;	O
int	O
status	int
=	O
gsl_ran_multivariate_gaussian_log_pdf	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
x	double
,	O
mu	double
,	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
&	O
logpdf	double
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
status	int
==	O
GSL_SUCCESS	int
)	O
*	O
result	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
exp	(double)->(double)
(	O
logpdf	double
)	O
;	O
return	O
status	int
;	O
}	O
int	O
gsl_ran_multivariate_gaussian_mean	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
X	*(float)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
mu_hat	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
const	O
size_t	long
M	int
=	O
X	*(float)
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
X	*(float)
->	O
size2	long
;	O
if	O
(	O
N	int
!=	O
mu_hat	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"mu_hat vector has wrong size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
N	int
;	O
++	O
j	long
)	O
{	O
gsl_vector_const_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
c	*(float)
=	O
gsl_matrix_const_column	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
X	*(float)
,	O
j	long
)	O
;	O
double	O
mean	double
=	O
gsl_stats_mean	(array(double),long,long)->(double)
(	O
c	*(float)
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
.	O
data	*(long double)
,	O
c	*(float)
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
.	O
stride	long
,	O
M	int
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
mu_hat	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
j	long
,	O
mean	double
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_ran_multivariate_gaussian_vcov	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
X	*(float)
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
sigma_hat	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
const	O
size_t	long
M	int
=	O
X	*(float)
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
X	*(float)
->	O
size2	long
;	O
if	O
(	O
sigma_hat	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
sigma_hat	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"sigma_hat must be a square matrix"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
sigma_hat	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"sigma_hat does not match X matrix dimensions"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
return	O
multivar_vcov	(array(double),long,long,long,array(double),long)->(int)
(	O
X	*(float)
->	O
data	*(long double)
,	O
N	int
,	O
X	*(float)
->	O
tda	long
,	O
M	int
,	O
sigma_hat	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
data	*(long double)
,	O
sigma_hat	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
tda	long
)	O
;	O
}	O
}	O
static	O
int	O
multivar_vcov	(array(double),long,long,long,array(double),long)->(int)
(	O
const	O
double	O
data	*(long double)
[	O
]	O
,	O
size_t	long
d	long
,	O
size_t	long
tda	long
,	O
size_t	long
n	int
,	O
double	O
vcov	array(double)
[	O
]	O
,	O
size_t	long
tda2	long
)	O
{	O
size_t	long
j1	(double)->(double)
=	O
0	int
,	O
j2	long
=	O
0	int
;	O
for	O
(	O
j1	(double)->(double)
=	O
0	int
;	O
j1	(double)->(double)
<	O
d	long
;	O
++	O
j1	(double)->(double)
)	O
{	O
vcov	array(double)
[	O
j1	(double)->(double)
*	O
tda2	long
+	O
j1	(double)->(double)
]	O
=	O
gsl_stats_variance	(array(double),long,long)->(double)
(	O
&	O
(	O
data	*(long double)
[	O
j1	(double)->(double)
]	O
)	O
,	O
tda	long
,	O
n	int
)	O
;	O
for	O
(	O
j2	long
=	O
j1	(double)->(double)
+	O
1	int
;	O
j2	long
<	O
d	long
;	O
++	O
j2	long
)	O
{	O
vcov	array(double)
[	O
j1	(double)->(double)
*	O
tda2	long
+	O
j2	long
]	O
=	O
gsl_stats_covariance	(array(double),long,array(double),long,long)->(double)
(	O
&	O
(	O
data	*(long double)
[	O
j1	(double)->(double)
]	O
)	O
,	O
tda	long
,	O
&	O
(	O
data	*(long double)
[	O
j2	long
]	O
)	O
,	O
tda	long
,	O
n	int
)	O
;	O
vcov	array(double)
[	O
j2	long
*	O
tda2	long
+	O
j1	(double)->(double)
]	O
=	O
vcov	array(double)
[	O
j1	(double)->(double)
*	O
tda2	long
+	O
j2	long
]	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
