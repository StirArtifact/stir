int	O
numhash_search	(*(struct(struct(union(*`,*`),int),int,int)),int,*(*(void)))->(int)
(	O
numhashtable	struct(struct(union(*(struct(union`,int)),*(void)),int),int,int)
*	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
int	O
value	int
,	O
void	O
*	O
*	O
ret	*(*(void))
)	O
{	O
int	O
off	int
,	O
bit	int
;	O
numhashnode	struct
*	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
;	O
if	O
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
==	O
NULL	O
)	O
return	O
(	O
0	int
)	O
;	O
off	int
=	O
0	int
;	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
=	O
&	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
table	struct(union(*(struct(union(*`,*`),int)),*(void)),int)
;	O
if	O
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
bitsize	int
<	O
sizeof	O
(	O
int	O
)	O
*	O
8	int
)	O
value	int
=	O
value	int
&	O
(	O
(	O
1	int
<<	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
bitsize	int
)	O
-	O
1	int
)	O
;	O
do	O
{	O
bit	int
=	O
NUMHASH_BIT	O
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
bitsize	int
,	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
depth	int
,	O
off	int
,	O
value	int
)	O
;	O
if	O
(	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
==	O
NULL	O
)	O
return	O
(	O
0	int
)	O
;	O
off	int
++	O
;	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
=	O
&	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
[	O
bit	int
]	O
;	O
}	O
while	O
(	O
off	int
*	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
depth	int
<	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
bitsize	int
)	O
;	O
if	O
(	O
ret	*(*(void))
!=	O
NULL	O
)	O
*	O
ret	*(*(void))
=	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
data	*(void)
;	O
return	O
(	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
nchild	int
)	O
;	O
}	O
int	O
numhash_init	(*(struct(struct(union(*`,*`),int),int,int)),int,int)->(int)
(	O
numhashtable	struct(struct(union(*(struct(union`,int)),*(void)),int),int,int)
*	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
int	O
bitsize	int
,	O
int	O
depth	int
)	O
{	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
table	struct(union(*(struct(union(*`,*`),int)),*(void)),int)
.	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
=	O
NULL	O
;	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
table	struct(union(*(struct(union(*`,*`),int)),*(void)),int)
.	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
data	*(void)
=	O
NULL	O
;	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
table	struct(union(*(struct(union(*`,*`),int)),*(void)),int)
.	O
nchild	int
=	O
0	int
;	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
depth	int
=	O
depth	int
;	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
bitsize	int
=	O
bitsize	int
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
numhash_add	(*(struct(struct(union(*`,*`),int),int,int)),int,*(void))->(int)
(	O
numhashtable	struct(struct(union(*(struct(union`,int)),*(void)),int),int,int)
*	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
int	O
value	int
,	O
void	O
*	O
data	*(void)
)	O
{	O
int	O
off	int
,	O
bit	int
,	O
bitsize	int
,	O
depth	int
,	O
shift	int
,	O
tnode	int
,	O
nodesize	int
;	O
numhashnode	struct
*	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
,	O
*	O
tree	array(*(struct(union(*(struct(union`,int)),*(void)),int)))
[	O
64	int
]	O
;	O
if	O
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
==	O
NULL	O
)	O
return	O
(	O
-	O
1	int
)	O
;	O
off	int
=	O
0	int
;	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
=	O
&	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
table	struct(union(*(struct(union(*`,*`),int)),*(void)),int)
;	O
depth	int
=	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
depth	int
;	O
bitsize	int
=	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
bitsize	int
;	O
tnode	int
=	O
0	int
;	O
if	O
(	O
bitsize	int
<	O
sizeof	O
(	O
int	O
)	O
*	O
8	int
)	O
value	int
=	O
value	int
&	O
(	O
(	O
1	int
<<	O
bitsize	int
)	O
-	O
1	int
)	O
;	O
do	O
{	O
shift	int
=	O
depth	int
*	O
(	O
(	O
(	O
bitsize	int
-	O
1	int
)	O
/	O
depth	int
)	O
-	O
off	int
)	O
;	O
bit	int
=	O
(	O
value	int
>>	O
shift	int
)	O
&	O
(	O
(	O
1	int
<<	O
depth	int
)	O
-	O
1	int
)	O
;	O
if	O
(	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
==	O
NULL	O
)	O
{	O
nodesize	int
=	O
(	O
1	int
<<	O
depth	int
)	O
;	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
numhashnode	struct
)	O
*	O
nodesize	int
)	O
;	O
malloc_check	O
(	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
,	O
0	int
,	O
sizeof	O
(	O
numhashnode	struct
)	O
*	O
nodesize	int
)	O
;	O
}	O
off	int
++	O
;	O
tree	array(*(struct(union(*(struct(union`,int)),*(void)),int)))
[	O
tnode	int
]	O
=	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
;	O
tnode	int
++	O
;	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
=	O
&	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
[	O
bit	int
]	O
;	O
}	O
while	O
(	O
off	int
*	O
depth	int
<	O
bitsize	int
)	O
;	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
data	*(void)
=	O
data	*(void)
;	O
if	O
(	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
nchild	int
)	O
return	O
(	O
0	int
)	O
;	O
else	O
{	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
nchild	int
=	O
1	int
;	O
while	O
(	O
tnode	int
>	O
0	int
)	O
{	O
tnode	int
--	O
;	O
(	O
tree	array(*(struct(union(*(struct(union`,int)),*(void)),int)))
[	O
tnode	int
]	O
->	O
nchild	int
)	O
++	O
;	O
}	O
;	O
return	O
(	O
1	int
)	O
;	O
}	O
}	O
int	O
numhash_total	(*(struct(struct(union(*`,*`),int),int,int)))->(int)
(	O
numhashtable	struct(struct(union(*(struct(union`,int)),*(void)),int),int,int)
*	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
)	O
{	O
return	O
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
table	struct(union(*(struct(union(*`,*`),int)),*(void)),int)
.	O
nchild	int
)	O
;	O
}	O
int	O
numhash_remove	(*(struct(struct(union(*`,*`),int),int,int)),int)->(int)
(	O
numhashtable	struct(struct(union(*(struct(union`,int)),*(void)),int),int,int)
*	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
int	O
value	int
)	O
{	O
int	O
off	int
,	O
bit	int
,	O
bitsize	int
,	O
depth	int
,	O
shift	int
,	O
tnode	int
;	O
numhashnode	struct
*	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
,	O
*	O
tree	array(*(struct(union(*(struct(union`,int)),*(void)),int)))
[	O
64	int
]	O
;	O
if	O
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
==	O
NULL	O
)	O
return	O
(	O
0	int
)	O
;	O
off	int
=	O
0	int
;	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
=	O
&	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
table	struct(union(*(struct(union(*`,*`),int)),*(void)),int)
;	O
depth	int
=	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
depth	int
;	O
bitsize	int
=	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
bitsize	int
;	O
tnode	int
=	O
0	int
;	O
if	O
(	O
bitsize	int
<	O
sizeof	O
(	O
int	O
)	O
*	O
8	int
)	O
value	int
=	O
value	int
&	O
(	O
(	O
1	int
<<	O
bitsize	int
)	O
-	O
1	int
)	O
;	O
do	O
{	O
shift	int
=	O
depth	int
*	O
(	O
(	O
(	O
bitsize	int
-	O
1	int
)	O
/	O
depth	int
)	O
-	O
off	int
)	O
;	O
bit	int
=	O
(	O
value	int
>>	O
shift	int
)	O
&	O
(	O
(	O
1	int
<<	O
depth	int
)	O
-	O
1	int
)	O
;	O
if	O
(	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
==	O
NULL	O
)	O
return	O
(	O
0	int
)	O
;	O
off	int
++	O
;	O
tree	array(*(struct(union(*(struct(union`,int)),*(void)),int)))
[	O
tnode	int
]	O
=	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
;	O
tnode	int
++	O
;	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
=	O
&	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
[	O
bit	int
]	O
;	O
}	O
while	O
(	O
off	int
*	O
depth	int
<	O
bitsize	int
)	O
;	O
if	O
(	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
nchild	int
<=	O
0	int
)	O
return	O
(	O
0	int
)	O
;	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
nchild	int
=	O
0	int
;	O
while	O
(	O
tnode	int
>	O
0	int
)	O
{	O
tnode	int
--	O
;	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
=	O
tree	array(*(struct(union(*(struct(union`,int)),*(void)),int)))
[	O
tnode	int
]	O
;	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
nchild	int
--	O
;	O
if	O
(	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
nchild	int
<=	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
)	O
;	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
=	O
NULL	O
;	O
}	O
}	O
;	O
return	O
(	O
1	int
)	O
;	O
}	O
static	O
int	O
numhash_get_terminal_free	(*(struct(struct(union(*`,*`),int),int,int)),int)->(int)
(	O
numhashtable	struct(struct(union(*(struct(union`,int)),*(void)),int),int,int)
*	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
int	O
dir	int
)	O
{	O
int	O
capacity	int
,	O
cdepth	int
,	O
i	int
,	O
k	int
,	O
off	int
,	O
shift	int
;	O
numhashnode	struct
*	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
;	O
if	O
(	O
(	O
1	int
<<	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
bitsize	int
)	O
<=	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
table	struct(union(*(struct(union(*`,*`),int)),*(void)),int)
.	O
nchild	int
)	O
return	O
(	O
-	O
1	int
)	O
;	O
off	int
=	O
0	int
;	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
=	O
&	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
table	struct(union(*(struct(union(*`,*`),int)),*(void)),int)
;	O
if	O
(	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
==	O
NULL	O
)	O
return	O
(	O
0	int
)	O
;	O
for	O
(	O
off	int
=	O
0	int
,	O
k	int
=	O
0	int
;	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
!=	O
NULL	O
;	O
)	O
{	O
shift	int
=	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
depth	int
*	O
(	O
(	O
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
bitsize	int
-	O
1	int
)	O
/	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
depth	int
)	O
-	O
off	int
)	O
;	O
cdepth	int
=	O
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
bitsize	int
-	O
shift	int
<	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
depth	int
?	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
bitsize	int
-	O
shift	int
:	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
depth	int
)	O
;	O
capacity	int
=	O
(	O
1	int
<<	O
shift	int
)	O
;	O
if	O
(	O
dir	int
>=	O
0	int
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
(	O
1	int
<<	O
cdepth	int
)	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
[	O
i	int
]	O
.	O
nchild	int
<=	O
0	int
)	O
return	O
(	O
k	int
)	O
;	O
else	O
if	O
(	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
[	O
i	int
]	O
.	O
nchild	int
<	O
capacity	int
)	O
break	O
;	O
else	O
k	int
+=	O
capacity	int
;	O
}	O
if	O
(	O
i	int
==	O
(	O
1	int
<<	O
cdepth	int
)	O
)	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
else	O
{	O
for	O
(	O
i	int
=	O
(	O
1	int
<<	O
cdepth	int
)	O
-	O
1	int
;	O
i	int
>=	O
0	int
;	O
i	int
--	O
)	O
{	O
if	O
(	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
[	O
i	int
]	O
.	O
nchild	int
<=	O
0	int
)	O
return	O
(	O
(	O
1	int
<<	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
bitsize	int
)	O
-	O
1	int
-	O
k	int
)	O
;	O
else	O
if	O
(	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
[	O
i	int
]	O
.	O
nchild	int
<	O
capacity	int
)	O
break	O
;	O
else	O
k	int
+=	O
capacity	int
;	O
}	O
if	O
(	O
i	int
<	O
0	int
)	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
=	O
&	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
[	O
i	int
]	O
;	O
off	int
++	O
;	O
}	O
;	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
int	O
numhash_get_smallest_free	(*(struct(struct(union(*`,*`),int),int,int)))->(int)
(	O
numhashtable	struct(struct(union(*(struct(union`,int)),*(void)),int),int,int)
*	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
)	O
{	O
return	O
(	O
numhash_get_terminal_free	(*(struct(struct(union(*`,*`),int),int,int)),int)->(int)
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
+	O
1	int
)	O
)	O
;	O
}	O
int	O
numhash_get_largest_free	(*(struct(struct(union(*`,*`),int),int,int)))->(int)
(	O
numhashtable	struct(struct(union(*(struct(union`,int)),*(void)),int),int,int)
*	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
)	O
{	O
return	O
(	O
numhash_get_terminal_free	(*(struct(struct(union(*`,*`),int),int,int)),int)->(int)
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
-	O
1	int
)	O
)	O
;	O
}	O
static	O
int	O
numhash_get_terminal_used	(*(struct(struct(union(*`,*`),int),int,int)),int)->(int)
(	O
numhashtable	struct(struct(union(*(struct(union`,int)),*(void)),int),int,int)
*	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
int	O
dir	int
)	O
{	O
int	O
capacity	int
,	O
cdepth	int
,	O
i	int
,	O
k	int
,	O
off	int
,	O
shift	int
,	O
tnd	int
;	O
numhashnode	struct
*	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
;	O
if	O
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
table	struct(union(*(struct(union(*`,*`),int)),*(void)),int)
.	O
nchild	int
<=	O
0	int
)	O
return	O
(	O
-	O
1	int
)	O
;	O
off	int
=	O
0	int
;	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
=	O
&	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
table	struct(union(*(struct(union(*`,*`),int)),*(void)),int)
;	O
if	O
(	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
==	O
NULL	O
)	O
return	O
(	O
-	O
1	int
)	O
;	O
tnd	int
=	O
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
bitsize	int
-	O
1	int
)	O
/	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
depth	int
;	O
for	O
(	O
off	int
=	O
0	int
,	O
k	int
=	O
0	int
;	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
!=	O
NULL	O
;	O
)	O
{	O
shift	int
=	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
depth	int
*	O
(	O
(	O
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
bitsize	int
-	O
1	int
)	O
/	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
depth	int
)	O
-	O
off	int
)	O
;	O
cdepth	int
=	O
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
bitsize	int
-	O
shift	int
<	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
depth	int
?	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
bitsize	int
-	O
shift	int
:	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
depth	int
)	O
;	O
capacity	int
=	O
(	O
1	int
<<	O
shift	int
)	O
;	O
if	O
(	O
dir	int
>=	O
0	int
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
(	O
1	int
<<	O
cdepth	int
)	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
[	O
i	int
]	O
.	O
nchild	int
&&	O
off	int
<	O
tnd	int
)	O
break	O
;	O
else	O
if	O
(	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
[	O
i	int
]	O
.	O
nchild	int
)	O
return	O
(	O
k	int
)	O
;	O
else	O
k	int
+=	O
capacity	int
;	O
}	O
if	O
(	O
i	int
==	O
(	O
1	int
<<	O
cdepth	int
)	O
)	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
else	O
{	O
for	O
(	O
i	int
=	O
(	O
1	int
<<	O
cdepth	int
)	O
-	O
1	int
;	O
i	int
>=	O
0	int
;	O
i	int
--	O
)	O
{	O
if	O
(	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
[	O
i	int
]	O
.	O
nchild	int
&&	O
off	int
<	O
tnd	int
)	O
break	O
;	O
else	O
if	O
(	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
[	O
i	int
]	O
.	O
nchild	int
)	O
return	O
(	O
(	O
1	int
<<	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
bitsize	int
)	O
-	O
1	int
-	O
k	int
)	O
;	O
else	O
k	int
+=	O
capacity	int
;	O
}	O
if	O
(	O
i	int
<	O
0	int
)	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
=	O
&	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
[	O
i	int
]	O
;	O
off	int
++	O
;	O
}	O
;	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
int	O
numhash_get_smallest_used	(*(struct(struct(union(*`,*`),int),int,int)))->(int)
(	O
numhashtable	struct(struct(union(*(struct(union`,int)),*(void)),int),int,int)
*	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
)	O
{	O
return	O
(	O
numhash_get_terminal_used	(*(struct(struct(union(*`,*`),int),int,int)),int)->(int)
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
+	O
1	int
)	O
)	O
;	O
}	O
int	O
numhash_get_largest_used	(*(struct(struct(union(*`,*`),int),int,int)))->(int)
(	O
numhashtable	struct(struct(union(*(struct(union`,int)),*(void)),int),int,int)
*	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
)	O
{	O
return	O
(	O
numhash_get_terminal_used	(*(struct(struct(union(*`,*`),int),int,int)),int)->(int)
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
-	O
1	int
)	O
)	O
;	O
}	O
static	O
int	O
numhash_local_walk	(*(struct(union(*(struct`),*(void)),int)),int,int,int,int,*((int,*(void),*(void))->(int)),*(void))->(int)
(	O
numhashnode	struct
*	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
,	O
int	O
off	int
,	O
int	O
num	int
,	O
int	O
depth	int
,	O
int	O
bitsize	int
,	O
int	O
(	O
*	O
callback	*((int,*(void),*(void))->(int))
)	O
(	O
int	O
,	O
void	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
param	*(void)
)	O
{	O
int	O
shift	int
,	O
cdepth	int
,	O
i	int
,	O
ret	*(*(void))
;	O
if	O
(	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
==	O
NULL	O
)	O
return	O
(	O
0	int
)	O
;	O
shift	int
=	O
depth	int
*	O
(	O
(	O
(	O
bitsize	int
-	O
1	int
)	O
/	O
depth	int
)	O
-	O
off	int
)	O
;	O
cdepth	int
=	O
(	O
bitsize	int
-	O
shift	int
<	O
depth	int
?	O
bitsize	int
-	O
shift	int
:	O
depth	int
)	O
;	O
ret	*(*(void))
=	O
0	int
;	O
if	O
(	O
shift	int
>	O
0	int
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
(	O
1	int
<<	O
cdepth	int
)	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
[	O
i	int
]	O
.	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
!=	O
NULL	O
)	O
ret	*(*(void))
+=	O
numhash_local_walk	(*(struct(union(*(struct`),*(void)),int)),int,int,int,int,*((int,*(void),*(void))->(int)),*(void))->(int)
(	O
&	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
[	O
i	int
]	O
,	O
off	int
+	O
1	int
,	O
num	int
|	O
(	O
i	int
<<	O
shift	int
)	O
,	O
depth	int
,	O
bitsize	int
,	O
callback	*((int,*(void),*(void))->(int))
,	O
param	*(void)
)	O
;	O
}	O
}	O
else	O
if	O
(	O
callback	*((int,*(void),*(void))->(int))
!=	O
NULL	O
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
(	O
1	int
<<	O
cdepth	int
)	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
[	O
i	int
]	O
.	O
nchild	int
>	O
0	int
)	O
{	O
callback	*((int,*(void),*(void))->(int))
(	O
num	int
+	O
i	int
,	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
[	O
i	int
]	O
.	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
data	*(void)
,	O
param	*(void)
)	O
;	O
ret	*(*(void))
++	O
;	O
}	O
}	O
}	O
else	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
(	O
1	int
<<	O
cdepth	int
)	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
[	O
i	int
]	O
.	O
nchild	int
>	O
0	int
)	O
ret	*(*(void))
++	O
;	O
}	O
}	O
return	O
(	O
ret	*(*(void))
)	O
;	O
}	O
static	O
int	O
numhash_local_walk_desc	(*(struct(union(*(struct`),*(void)),int)),int,int,int,int,*((int,*(void),*(void))->(int)),*(void))->(int)
(	O
numhashnode	struct
*	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
,	O
int	O
off	int
,	O
int	O
num	int
,	O
int	O
depth	int
,	O
int	O
bitsize	int
,	O
int	O
(	O
*	O
callback	*((int,*(void),*(void))->(int))
)	O
(	O
int	O
,	O
void	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
param	*(void)
)	O
{	O
int	O
shift	int
,	O
cdepth	int
,	O
i	int
,	O
ret	*(*(void))
;	O
if	O
(	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
==	O
NULL	O
)	O
return	O
(	O
0	int
)	O
;	O
shift	int
=	O
depth	int
*	O
(	O
(	O
(	O
bitsize	int
-	O
1	int
)	O
/	O
depth	int
)	O
-	O
off	int
)	O
;	O
cdepth	int
=	O
(	O
bitsize	int
-	O
shift	int
<	O
depth	int
?	O
bitsize	int
-	O
shift	int
:	O
depth	int
)	O
;	O
ret	*(*(void))
=	O
0	int
;	O
if	O
(	O
shift	int
>	O
0	int
)	O
{	O
for	O
(	O
i	int
=	O
(	O
1	int
<<	O
cdepth	int
)	O
-	O
1	int
;	O
i	int
>=	O
0	int
;	O
i	int
--	O
)	O
{	O
if	O
(	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
[	O
i	int
]	O
.	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
!=	O
NULL	O
)	O
ret	*(*(void))
+=	O
numhash_local_walk_desc	(*(struct(union(*(struct`),*(void)),int)),int,int,int,int,*((int,*(void),*(void))->(int)),*(void))->(int)
(	O
&	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
[	O
i	int
]	O
,	O
off	int
+	O
1	int
,	O
num	int
|	O
(	O
i	int
<<	O
shift	int
)	O
,	O
depth	int
,	O
bitsize	int
,	O
callback	*((int,*(void),*(void))->(int))
,	O
param	*(void)
)	O
;	O
}	O
}	O
else	O
if	O
(	O
callback	*((int,*(void),*(void))->(int))
!=	O
NULL	O
)	O
{	O
for	O
(	O
i	int
=	O
(	O
1	int
<<	O
cdepth	int
)	O
-	O
1	int
;	O
i	int
>=	O
0	int
;	O
i	int
--	O
)	O
{	O
if	O
(	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
[	O
i	int
]	O
.	O
nchild	int
>	O
0	int
)	O
{	O
callback	*((int,*(void),*(void))->(int))
(	O
num	int
+	O
i	int
,	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
[	O
i	int
]	O
.	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
data	*(void)
,	O
param	*(void)
)	O
;	O
ret	*(*(void))
++	O
;	O
}	O
}	O
}	O
else	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
(	O
1	int
<<	O
cdepth	int
)	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
[	O
i	int
]	O
.	O
nchild	int
>	O
0	int
)	O
ret	*(*(void))
++	O
;	O
}	O
}	O
return	O
(	O
ret	*(*(void))
)	O
;	O
}	O
int	O
numhash_walk	(*(struct(struct(union(*`,*`),int),int,int)),*((int,*(void),*(void))->(int)),*(void))->(int)
(	O
numhashtable	struct(struct(union(*(struct(union`,int)),*(void)),int),int,int)
*	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
int	O
(	O
*	O
callback	*((int,*(void),*(void))->(int))
)	O
(	O
int	O
,	O
void	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
param	*(void)
)	O
{	O
int	O
ret	*(*(void))
;	O
ret	*(*(void))
=	O
numhash_local_walk	(*(struct(union(*(struct`),*(void)),int)),int,int,int,int,*((int,*(void),*(void))->(int)),*(void))->(int)
(	O
&	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
table	struct(union(*(struct(union(*`,*`),int)),*(void)),int)
,	O
0	int
,	O
0	int
,	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
depth	int
,	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
bitsize	int
,	O
callback	*((int,*(void),*(void))->(int))
,	O
param	*(void)
)	O
;	O
return	O
(	O
ret	*(*(void))
)	O
;	O
}	O
int	O
numhash_walk_asc	(*(struct(struct(union(*`,*`),int),int,int)),*((int,*(void),*(void))->(int)),*(void))->(int)
(	O
numhashtable	struct(struct(union(*(struct(union`,int)),*(void)),int),int,int)
*	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
int	O
(	O
*	O
callback	*((int,*(void),*(void))->(int))
)	O
(	O
int	O
,	O
void	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
param	*(void)
)	O
{	O
return	O
(	O
numhash_walk	(*(struct(struct(union(*`,*`),int),int,int)),*((int,*(void),*(void))->(int)),*(void))->(int)
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
callback	*((int,*(void),*(void))->(int))
,	O
param	*(void)
)	O
)	O
;	O
}	O
int	O
numhash_walk_desc	(*(struct(struct(union(*`,*`),int),int,int)),*((int,*(void),*(void))->(int)),*(void))->(int)
(	O
numhashtable	struct(struct(union(*(struct(union`,int)),*(void)),int),int,int)
*	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
int	O
(	O
*	O
callback	*((int,*(void),*(void))->(int))
)	O
(	O
int	O
,	O
void	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
param	*(void)
)	O
{	O
int	O
ret	*(*(void))
;	O
ret	*(*(void))
=	O
numhash_local_walk_desc	(*(struct(union(*(struct`),*(void)),int)),int,int,int,int,*((int,*(void),*(void))->(int)),*(void))->(int)
(	O
&	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
table	struct(union(*(struct(union(*`,*`),int)),*(void)),int)
,	O
0	int
,	O
0	int
,	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
depth	int
,	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
bitsize	int
,	O
callback	*((int,*(void),*(void))->(int))
,	O
param	*(void)
)	O
;	O
return	O
(	O
ret	*(*(void))
)	O
;	O
}	O
int	O
numhash_walk_dir	(*(struct(struct(union(*`,*`),int),int,int)),*((int,*(void),*(void))->(int)),*(void),int)->(int)
(	O
numhashtable	struct(struct(union(*(struct(union`,int)),*(void)),int),int,int)
*	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
int	O
(	O
*	O
callback	*((int,*(void),*(void))->(int))
)	O
(	O
int	O
,	O
void	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
param	*(void)
,	O
int	O
dir	int
)	O
{	O
int	O
ret	*(*(void))
;	O
if	O
(	O
dir	int
>=	O
0	int
)	O
ret	*(*(void))
=	O
numhash_local_walk	(*(struct(union(*(struct`),*(void)),int)),int,int,int,int,*((int,*(void),*(void))->(int)),*(void))->(int)
(	O
&	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
table	struct(union(*(struct(union(*`,*`),int)),*(void)),int)
,	O
0	int
,	O
0	int
,	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
depth	int
,	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
bitsize	int
,	O
callback	*((int,*(void),*(void))->(int))
,	O
param	*(void)
)	O
;	O
else	O
ret	*(*(void))
=	O
numhash_local_walk_desc	(*(struct(union(*(struct`),*(void)),int)),int,int,int,int,*((int,*(void),*(void))->(int)),*(void))->(int)
(	O
&	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
table	struct(union(*(struct(union(*`,*`),int)),*(void)),int)
,	O
0	int
,	O
0	int
,	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
depth	int
,	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
bitsize	int
,	O
callback	*((int,*(void),*(void))->(int))
,	O
param	*(void)
)	O
;	O
return	O
(	O
ret	*(*(void))
)	O
;	O
}	O
int	O
numhash_first	(*(struct(struct(union(*`,*`),int),int,int)))->(int)
(	O
numhashtable	struct(struct(union(*(struct(union`,int)),*(void)),int),int,int)
*	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
)	O
{	O
return	O
(	O
numhash_get_terminal_used	(*(struct(struct(union(*`,*`),int),int,int)),int)->(int)
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
+	O
1	int
)	O
)	O
;	O
}	O
int	O
numhash_first_wdata	(*(struct(struct(union(*`,*`),int),int,int)),*(*(void)))->(int)
(	O
numhashtable	struct(struct(union(*(struct(union`,int)),*(void)),int),int,int)
*	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
void	O
*	O
*	O
dret	*(*(void))
)	O
{	O
int	O
c	int
;	O
c	int
=	O
numhash_get_terminal_used	(*(struct(struct(union(*`,*`),int),int,int)),int)->(int)
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
+	O
1	int
)	O
;	O
if	O
(	O
c	int
>=	O
0	int
&&	O
dret	*(*(void))
!=	O
NULL	O
)	O
numhash_search	(*(struct(struct(union(*`,*`),int),int,int)),int,*(*(void)))->(int)
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
c	int
,	O
dret	*(*(void))
)	O
;	O
return	O
(	O
c	int
)	O
;	O
}	O
int	O
numhash_last	(*(struct(struct(union(*`,*`),int),int,int)))->(int)
(	O
numhashtable	struct(struct(union(*(struct(union`,int)),*(void)),int),int,int)
*	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
)	O
{	O
return	O
(	O
numhash_get_terminal_used	(*(struct(struct(union(*`,*`),int),int,int)),int)->(int)
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
-	O
1	int
)	O
)	O
;	O
}	O
int	O
numhash_last_wdata	(*(struct(struct(union(*`,*`),int),int,int)),*(*(void)))->(int)
(	O
numhashtable	struct(struct(union(*(struct(union`,int)),*(void)),int),int,int)
*	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
void	O
*	O
*	O
dret	*(*(void))
)	O
{	O
int	O
c	int
;	O
c	int
=	O
numhash_get_terminal_used	(*(struct(struct(union(*`,*`),int),int,int)),int)->(int)
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
-	O
1	int
)	O
;	O
if	O
(	O
c	int
>=	O
0	int
&&	O
dret	*(*(void))
!=	O
NULL	O
)	O
numhash_search	(*(struct(struct(union(*`,*`),int),int,int)),int,*(*(void)))->(int)
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
c	int
,	O
dret	*(*(void))
)	O
;	O
return	O
(	O
c	int
)	O
;	O
}	O
static	O
int	O
numhash_local_first	(*(struct(struct(union(*`,*`),int),int,int)),*(struct(union(*(struct`),*(void)),int)),int,int,*(*(void)))->(int)
(	O
numhashtable	struct(struct(union(*(struct(union`,int)),*(void)),int),int,int)
*	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
numhashnode	struct
*	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
,	O
int	O
fcc	int
,	O
int	O
off	int
,	O
void	O
*	O
*	O
dret	*(*(void))
)	O
{	O
int	O
i	int
,	O
ntn	int
,	O
lcb	int
,	O
ret	*(*(void))
;	O
if	O
(	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
==	O
NULL	O
)	O
return	O
(	O
-	O
1	int
)	O
;	O
ntn	int
=	O
NUMHASH_NTN	O
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
bitsize	int
,	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
depth	int
,	O
off	int
)	O
;	O
lcb	int
=	O
NUMHASH_LCB	O
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
bitsize	int
,	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
depth	int
,	O
off	int
)	O
;	O
ret	*(*(void))
=	O
fcc	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ntn	int
;	O
)	O
{	O
if	O
(	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
[	O
i	int
]	O
.	O
nchild	int
)	O
{	O
if	O
(	O
NUMHASH_RLF	O
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
bitsize	int
,	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
depth	int
,	O
off	int
)	O
)	O
{	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
=	O
&	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
[	O
i	int
]	O
;	O
off	int
++	O
;	O
ntn	int
=	O
NUMHASH_NTN	O
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
bitsize	int
,	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
depth	int
,	O
off	int
)	O
;	O
i	int
=	O
0	int
;	O
lcb	int
=	O
lcb	int
>>	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
depth	int
;	O
}	O
else	O
{	O
if	O
(	O
dret	*(*(void))
!=	O
NULL	O
)	O
*	O
dret	*(*(void))
=	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
[	O
i	int
]	O
.	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
data	*(void)
;	O
return	O
(	O
ret	*(*(void))
)	O
;	O
}	O
}	O
else	O
{	O
i	int
++	O
;	O
ret	*(*(void))
+=	O
lcb	int
;	O
}	O
}	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
static	O
int	O
numhash_local_last	(*(struct(struct(union(*`,*`),int),int,int)),*(struct(union(*(struct`),*(void)),int)),int,int,*(*(void)))->(int)
(	O
numhashtable	struct(struct(union(*(struct(union`,int)),*(void)),int),int,int)
*	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
numhashnode	struct
*	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
,	O
int	O
fcc	int
,	O
int	O
off	int
,	O
void	O
*	O
*	O
dret	*(*(void))
)	O
{	O
int	O
i	int
,	O
ntn	int
,	O
lcb	int
,	O
ret	*(*(void))
;	O
if	O
(	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
==	O
NULL	O
)	O
return	O
(	O
-	O
1	int
)	O
;	O
ntn	int
=	O
NUMHASH_NTN	O
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
bitsize	int
,	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
depth	int
,	O
off	int
)	O
;	O
lcb	int
=	O
NUMHASH_LCB	O
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
bitsize	int
,	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
depth	int
,	O
off	int
)	O
;	O
ret	*(*(void))
=	O
fcc	int
+	O
lcb	int
*	O
(	O
ntn	int
-	O
1	int
)	O
;	O
for	O
(	O
i	int
=	O
ntn	int
-	O
1	int
;	O
i	int
>=	O
0	int
;	O
)	O
{	O
if	O
(	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
[	O
i	int
]	O
.	O
nchild	int
)	O
{	O
if	O
(	O
NUMHASH_RLF	O
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
bitsize	int
,	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
depth	int
,	O
off	int
)	O
)	O
{	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
=	O
&	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
[	O
i	int
]	O
;	O
off	int
++	O
;	O
ntn	int
=	O
NUMHASH_NTN	O
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
bitsize	int
,	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
depth	int
,	O
off	int
)	O
;	O
i	int
=	O
ntn	int
-	O
1	int
;	O
lcb	int
=	O
lcb	int
>>	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
depth	int
;	O
ret	*(*(void))
+=	O
lcb	int
*	O
(	O
ntn	int
-	O
1	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
dret	*(*(void))
!=	O
NULL	O
)	O
*	O
dret	*(*(void))
=	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
[	O
i	int
]	O
.	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
data	*(void)
;	O
return	O
(	O
ret	*(*(void))
)	O
;	O
}	O
}	O
else	O
{	O
i	int
--	O
;	O
ret	*(*(void))
-=	O
lcb	int
;	O
}	O
}	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
static	O
int	O
numhash_local_nextprev	(*(struct(struct(union(*`,*`),int),int,int)),*(struct(union(*(struct`),*(void)),int)),int,int,int,*(int),int,*(*(void)))->(int)
(	O
numhashtable	struct(struct(union(*(struct(union`,int)),*(void)),int),int,int)
*	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
numhashnode	struct
*	O
nh0	*(struct(union(*(struct(union`,int)),*(void)),int))
,	O
int	O
value	int
,	O
int	O
off	int
,	O
int	O
fcc	int
,	O
int	O
*	O
ret	*(*(void))
,	O
int	O
dir	int
,	O
void	O
*	O
*	O
dret	*(*(void))
)	O
{	O
numhashnode	struct
*	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
;	O
int	O
c	int
,	O
i	int
,	O
k	int
,	O
is_real_leaf	int
,	O
ntn	int
,	O
lcb	int
;	O
if	O
(	O
nh0	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
==	O
NULL	O
)	O
return	O
(	O
0	int
)	O
;	O
k	int
=	O
NUMHASH_BIT	O
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
bitsize	int
,	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
depth	int
,	O
off	int
,	O
value	int
)	O
;	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
=	O
&	O
nh0	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
[	O
k	int
]	O
;	O
lcb	int
=	O
NUMHASH_LCB	O
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
bitsize	int
,	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
depth	int
,	O
off	int
)	O
;	O
is_real_leaf	int
=	O
NUMHASH_RLF	O
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
bitsize	int
,	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
depth	int
,	O
off	int
)	O
;	O
if	O
(	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
!=	O
NULL	O
&&	O
is_real_leaf	int
)	O
{	O
c	int
=	O
numhash_local_nextprev	(*(struct(struct(union(*`,*`),int),int,int)),*(struct(union(*(struct`),*(void)),int)),int,int,int,*(int),int,*(*(void)))->(int)
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
,	O
value	int
,	O
off	int
+	O
1	int
,	O
fcc	int
+	O
k	int
*	O
lcb	int
,	O
ret	*(*(void))
,	O
dir	int
,	O
dret	*(*(void))
)	O
;	O
if	O
(	O
c	int
)	O
return	O
(	O
1	int
)	O
;	O
}	O
ntn	int
=	O
NUMHASH_NTN	O
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
bitsize	int
,	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
depth	int
,	O
off	int
)	O
;	O
if	O
(	O
dir	int
>=	O
0	int
)	O
{	O
for	O
(	O
i	int
=	O
k	int
+	O
1	int
;	O
i	int
<	O
ntn	int
;	O
i	int
++	O
)	O
{	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
=	O
&	O
nh0	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
[	O
i	int
]	O
;	O
if	O
(	O
!	O
is_real_leaf	int
&&	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
nchild	int
)	O
{	O
*	O
ret	*(*(void))
=	O
fcc	int
+	O
i	int
;	O
if	O
(	O
dret	*(*(void))
!=	O
NULL	O
)	O
*	O
dret	*(*(void))
=	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
data	*(void)
;	O
return	O
(	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
is_real_leaf	int
&&	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
nchild	int
)	O
{	O
*	O
ret	*(*(void))
=	O
numhash_local_first	(*(struct(struct(union(*`,*`),int),int,int)),*(struct(union(*(struct`),*(void)),int)),int,int,*(*(void)))->(int)
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
,	O
fcc	int
+	O
i	int
*	O
lcb	int
,	O
off	int
+	O
1	int
,	O
dret	*(*(void))
)	O
;	O
return	O
(	O
1	int
)	O
;	O
}	O
}	O
}	O
else	O
{	O
for	O
(	O
i	int
=	O
k	int
-	O
1	int
;	O
i	int
>=	O
0	int
;	O
i	int
--	O
)	O
{	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
=	O
&	O
nh0	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
[	O
i	int
]	O
;	O
if	O
(	O
!	O
is_real_leaf	int
&&	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
nchild	int
)	O
{	O
*	O
ret	*(*(void))
=	O
fcc	int
+	O
i	int
;	O
if	O
(	O
dret	*(*(void))
!=	O
NULL	O
)	O
*	O
dret	*(*(void))
=	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
data	*(void)
;	O
return	O
(	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
is_real_leaf	int
&&	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
nchild	int
)	O
{	O
*	O
ret	*(*(void))
=	O
numhash_local_last	(*(struct(struct(union(*`,*`),int),int,int)),*(struct(union(*(struct`),*(void)),int)),int,int,*(*(void)))->(int)
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
,	O
fcc	int
+	O
i	int
*	O
lcb	int
,	O
off	int
+	O
1	int
,	O
dret	*(*(void))
)	O
;	O
return	O
(	O
1	int
)	O
;	O
}	O
}	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
numhash_next_wdata	(*(struct(struct(union(*`,*`),int),int,int)),int,*(*(void)))->(int)
(	O
numhashtable	struct(struct(union(*(struct(union`,int)),*(void)),int),int,int)
*	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
int	O
value	int
,	O
void	O
*	O
*	O
dret	*(*(void))
)	O
{	O
int	O
ret	*(*(void))
,	O
c	int
;	O
c	int
=	O
numhash_local_nextprev	(*(struct(struct(union(*`,*`),int),int,int)),*(struct(union(*(struct`),*(void)),int)),int,int,int,*(int),int,*(*(void)))->(int)
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
&	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
table	struct(union(*(struct(union(*`,*`),int)),*(void)),int)
,	O
value	int
,	O
0	int
,	O
0	int
,	O
&	O
ret	*(*(void))
,	O
+	O
1	int
,	O
dret	*(*(void))
)	O
;	O
if	O
(	O
c	int
)	O
return	O
(	O
ret	*(*(void))
)	O
;	O
else	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
int	O
numhash_prev_wdata	(*(struct(struct(union(*`,*`),int),int,int)),int,*(*(void)))->(int)
(	O
numhashtable	struct(struct(union(*(struct(union`,int)),*(void)),int),int,int)
*	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
int	O
value	int
,	O
void	O
*	O
*	O
dret	*(*(void))
)	O
{	O
int	O
ret	*(*(void))
,	O
c	int
;	O
c	int
=	O
numhash_local_nextprev	(*(struct(struct(union(*`,*`),int),int,int)),*(struct(union(*(struct`),*(void)),int)),int,int,int,*(int),int,*(*(void)))->(int)
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
&	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
table	struct(union(*(struct(union(*`,*`),int)),*(void)),int)
,	O
value	int
,	O
0	int
,	O
0	int
,	O
&	O
ret	*(*(void))
,	O
-	O
1	int
,	O
dret	*(*(void))
)	O
;	O
if	O
(	O
c	int
)	O
return	O
(	O
ret	*(*(void))
)	O
;	O
else	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
int	O
numhash_next	(*(struct(struct(union(*`,*`),int),int,int)),int)->(int)
(	O
numhashtable	struct(struct(union(*(struct(union`,int)),*(void)),int),int,int)
*	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
int	O
value	int
)	O
{	O
int	O
ret	*(*(void))
,	O
c	int
;	O
c	int
=	O
numhash_local_nextprev	(*(struct(struct(union(*`,*`),int),int,int)),*(struct(union(*(struct`),*(void)),int)),int,int,int,*(int),int,*(*(void)))->(int)
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
&	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
table	struct(union(*(struct(union(*`,*`),int)),*(void)),int)
,	O
value	int
,	O
0	int
,	O
0	int
,	O
&	O
ret	*(*(void))
,	O
+	O
1	int
,	O
NULL	O
)	O
;	O
if	O
(	O
c	int
)	O
return	O
(	O
ret	*(*(void))
)	O
;	O
else	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
int	O
numhash_prev	(*(struct(struct(union(*`,*`),int),int,int)),int)->(int)
(	O
numhashtable	struct(struct(union(*(struct(union`,int)),*(void)),int),int,int)
*	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
int	O
value	int
)	O
{	O
int	O
ret	*(*(void))
,	O
c	int
;	O
c	int
=	O
numhash_local_nextprev	(*(struct(struct(union(*`,*`),int),int,int)),*(struct(union(*(struct`),*(void)),int)),int,int,int,*(int),int,*(*(void)))->(int)
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
&	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
table	struct(union(*(struct(union(*`,*`),int)),*(void)),int)
,	O
value	int
,	O
0	int
,	O
0	int
,	O
&	O
ret	*(*(void))
,	O
-	O
1	int
,	O
NULL	O
)	O
;	O
if	O
(	O
c	int
)	O
return	O
(	O
ret	*(*(void))
)	O
;	O
else	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
int	O
numhash_loop_start	(*(struct(struct(union(*`,*`),int),int,int)),int,*(*(void)))->(int)
(	O
numhashtable	struct(struct(union(*(struct(union`,int)),*(void)),int),int,int)
*	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
int	O
dir	int
,	O
void	O
*	O
*	O
ret	*(*(void))
)	O
{	O
if	O
(	O
dir	int
>=	O
0	int
)	O
return	O
(	O
numhash_first_wdata	(*(struct(struct(union(*`,*`),int),int,int)),*(*(void)))->(int)
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
ret	*(*(void))
)	O
)	O
;	O
else	O
return	O
(	O
numhash_last_wdata	(*(struct(struct(union(*`,*`),int),int,int)),*(*(void)))->(int)
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
ret	*(*(void))
)	O
)	O
;	O
}	O
int	O
numhash_loop_next	(*(struct(struct(union(*`,*`),int),int,int)),int,int,*(*(void)))->(int)
(	O
numhashtable	struct(struct(union(*(struct(union`,int)),*(void)),int),int,int)
*	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
int	O
dir	int
,	O
int	O
key	int
,	O
void	O
*	O
*	O
ret	*(*(void))
)	O
{	O
if	O
(	O
dir	int
>=	O
0	int
)	O
return	O
(	O
numhash_next_wdata	(*(struct(struct(union(*`,*`),int),int,int)),int,*(*(void)))->(int)
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
key	int
,	O
ret	*(*(void))
)	O
)	O
;	O
else	O
return	O
(	O
numhash_prev_wdata	(*(struct(struct(union(*`,*`),int),int,int)),int,*(*(void)))->(int)
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
key	int
,	O
ret	*(*(void))
)	O
)	O
;	O
}	O
static	O
int	O
numhash_local_free	(*(struct(union(*(struct`),*(void)),int)),int,int,int)->(int)
(	O
numhashnode	struct
*	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
,	O
int	O
off	int
,	O
int	O
depth	int
,	O
int	O
bitsize	int
)	O
{	O
int	O
shift	int
,	O
cdepth	int
,	O
i	int
;	O
if	O
(	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
==	O
NULL	O
)	O
return	O
(	O
0	int
)	O
;	O
shift	int
=	O
depth	int
*	O
(	O
(	O
(	O
bitsize	int
-	O
1	int
)	O
/	O
depth	int
)	O
-	O
off	int
)	O
;	O
cdepth	int
=	O
(	O
bitsize	int
-	O
shift	int
<	O
depth	int
?	O
bitsize	int
-	O
shift	int
:	O
depth	int
)	O
;	O
if	O
(	O
shift	int
>	O
0	int
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
(	O
1	int
<<	O
cdepth	int
)	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
[	O
i	int
]	O
.	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
!=	O
NULL	O
)	O
numhash_local_free	(*(struct(union(*(struct`),*(void)),int)),int,int,int)->(int)
(	O
&	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
[	O
i	int
]	O
,	O
off	int
+	O
1	int
,	O
depth	int
,	O
bitsize	int
)	O
;	O
}	O
}	O
free	(*(void))->(void)
(	O
nh	*(struct(union(*(struct(union`,int)),*(void)),int))
->	O
node	union(*(struct(union(*(struct`),*(void)),int)),*(void))
.	O
leaves	*(struct)
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
numhash_free	(*(struct(struct(union(*`,*`),int),int,int)))->(int)
(	O
numhashtable	struct(struct(union(*(struct(union`,int)),*(void)),int),int,int)
*	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
)	O
{	O
numhash_local_free	(*(struct(union(*(struct`),*(void)),int)),int,int,int)->(int)
(	O
&	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
table	struct(union(*(struct(union(*`,*`),int)),*(void)),int)
,	O
0	int
,	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
depth	int
,	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
bitsize	int
)	O
;	O
numhash_init	(*(struct(struct(union(*`,*`),int),int,int)),int,int)->(int)
(	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
,	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
bitsize	int
,	O
nt	*(struct(struct(union(*(struct`),*(void)),int),int,int))
->	O
depth	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
