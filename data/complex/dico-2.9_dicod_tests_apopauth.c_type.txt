dico_stream_t	*(struct)
iostr	*(struct)
;	O
char	O
*	O
in_buffer	*(char)
;	O
size_t	long
in_bufsize	long
;	O
size_t	long
in_level	long
;	O
char	O
*	O
msgid	*(char)
;	O
int	O
dict_status_p	(*(char))->(int)
(	O
const	O
char	O
*	O
status	*(char)
)	O
{	O
return	O
in_level	long
>	O
3	int
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
in_buffer	*(char)
,	O
status	*(char)
,	O
3	int
)	O
==	O
0	int
&&	O
(	O
in_buffer	*(char)
[	O
3	int
]	O
==	O
' '	O
||	O
(	O
in_level	long
==	O
5	int
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
in_buffer	*(char)
+	O
3	int
,	O
"\r\n"	*(char)
,	O
2	int
)	O
==	O
0	int
)	O
)	O
;	O
}	O
void	O
assert_status	(*(char))->(void)
(	O
const	O
char	O
*	O
status	*(char)
)	O
{	O
if	O
(	O
!	O
dict_status_p	(*(char))->(int)
(	O
status	*(char)
)	O
)	O
{	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
"expected status %s but got %s"	*(char)
,	O
status	*(char)
,	O
in_buffer	*(char)
)	O
;	O
exit	(int)->(void)
(	O
3	int
)	O
;	O
}	O
}	O
static	O
void	O
dict_read_reply	()->(void)
(	O
void	O
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
in_buffer	*(char)
)	O
in_buffer	*(char)
[	O
0	int
]	O
=	O
0	int
;	O
rc	int
=	O
dico_stream_getline	(*(struct),*(*(char)),*(long),*(long))->(int)
(	O
iostr	*(struct)
,	O
&	O
in_buffer	*(char)
,	O
&	O
in_bufsize	long
,	O
&	O
in_level	long
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
in_level	long
=	O
dico_trim_nl	(*(char))->(long)
(	O
in_buffer	*(char)
)	O
;	O
else	O
{	O
rc	int
=	O
dico_stream_last_error	(*(struct))->(int)
(	O
iostr	*(struct)
)	O
;	O
if	O
(	O
rc	int
==	O
EIO	int
&&	O
in_level	long
==	O
0	int
)	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
"error reading input: %s"	*(char)
,	O
dico_stream_strerror	(*(struct),int)->(*(char))
(	O
iostr	*(struct)
,	O
rc	int
)	O
)	O
;	O
exit	(int)->(void)
(	O
2	int
)	O
;	O
}	O
}	O
static	O
void	O
get_msgid	()->(void)
(	O
void	O
)	O
{	O
if	O
(	O
in_buffer	*(char)
[	O
in_level	long
-	O
1	int
]	O
==	O
'>'	O
)	O
{	O
char	O
*	O
p	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
in_buffer	*(char)
,	O
'<'	O
)	O
;	O
if	O
(	O
p	*(char)
)	O
{	O
msgid	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
p	*(char)
)	O
;	O
return	O
;	O
}	O
}	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
"server does not support authentication"	*(char)
)	O
;	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
"last reply was: %s"	*(char)
,	O
in_buffer	*(char)
)	O
;	O
}	O
static	O
void	O
apop_auth	(*(char),*(char))->(void)
(	O
const	O
char	O
*	O
user	*(char)
,	O
const	O
char	O
*	O
pass	*(char)
)	O
{	O
int	O
i	int
;	O
struct	O
md5_ctx	struct(int,int,int,int,array(int),int,array(int))
md5context	struct(int,int,int,int,array(int),int,array(int))
;	O
unsigned	O
char	O
md5digest	array(char)
[	O
16	int
]	O
;	O
char	O
buf	*(void)
[	O
sizeof	O
(	O
md5digest	array(char)
)	O
*	O
2	int
+	O
1	int
]	O
;	O
char	O
*	O
p	*(char)
;	O
md5_init_ctx	(*(struct(int,int,int,int,array(int),int,array(int))))->(void)
(	O
&	O
md5context	struct(int,int,int,int,array(int),int,array(int))
)	O
;	O
md5_process_bytes	(*(void),long,*(struct(int,int,int,int,array(int),int,array(int))))->(void)
(	O
msgid	*(char)
,	O
strlen	(*(char))->(long)
(	O
msgid	*(char)
)	O
,	O
&	O
md5context	struct(int,int,int,int,array(int),int,array(int))
)	O
;	O
md5_process_bytes	(*(void),long,*(struct(int,int,int,int,array(int),int,array(int))))->(void)
(	O
pass	*(char)
,	O
strlen	(*(char))->(long)
(	O
pass	*(char)
)	O
,	O
&	O
md5context	struct(int,int,int,int,array(int),int,array(int))
)	O
;	O
md5_finish_ctx	(*(struct(int,int,int,int,array(int),int,array(int))),*(void))->(*(void))
(	O
&	O
md5context	struct(int,int,int,int,array(int),int,array(int))
,	O
md5digest	array(char)
)	O
;	O
for	O
(	O
i	int
=	O
0	int
,	O
p	*(char)
=	O
buf	*(void)
;	O
i	int
<	O
16	int
;	O
i	int
++	O
,	O
p	*(char)
+=	O
2	int
)	O
sprintf	(*(char),*(char))->(int)
(	O
p	*(char)
,	O
"%02x"	*(char)
,	O
md5digest	array(char)
[	O
i	int
]	O
)	O
;	O
*	O
p	*(char)
=	O
0	int
;	O
stream_printf	(*(struct),*(char))->(int)
(	O
iostr	*(struct)
,	O
"AUTH %s %s\r\n"	*(char)
,	O
user	*(char)
,	O
buf	*(void)
)	O
;	O
dict_read_reply	()->(void)
(	O
)	O
;	O
assert_status	(*(char))->(void)
(	O
"230"	*(char)
)	O
;	O
}	O
dico_stream_t	*(struct)
run_command	(int,*(*(char)),*(int))->(*(struct))
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
pid_t	int
*	O
ppid	*(int)
)	O
{	O
pid_t	int
pid	int
;	O
int	O
oup	array(int)
[	O
2	int
]	O
,	O
inp	array(int)
[	O
2	int
]	O
;	O
assert	O
(	O
pipe	(array(int))->(int)
(	O
oup	array(int)
)	O
==	O
0	int
)	O
;	O
assert	O
(	O
pipe	(array(int))->(int)
(	O
inp	array(int)
)	O
==	O
0	int
)	O
;	O
pid	int
=	O
fork	()->(int)
(	O
)	O
;	O
if	O
(	O
pid	int
==	O
(	O
pid_t	int
)	O
-	O
1	int
)	O
{	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
errno	O
,	O
"fork"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
2	int
)	O
;	O
}	O
if	O
(	O
pid	int
==	O
0	int
)	O
{	O
assert	O
(	O
dup2	(int,int)->(int)
(	O
oup	array(int)
[	O
0	int
]	O
,	O
0	int
)	O
>=	O
0	int
)	O
;	O
close	*((*(void))->(int))
(	O
oup	array(int)
[	O
1	int
]	O
)	O
;	O
assert	O
(	O
dup2	(int,int)->(int)
(	O
inp	array(int)
[	O
1	int
]	O
,	O
1	int
)	O
>=	O
0	int
)	O
;	O
close	*((*(void))->(int))
(	O
inp	array(int)
[	O
0	int
]	O
)	O
;	O
execvp	(*(char),array(*(char)))->(int)
(	O
argv	*(*(char))
[	O
0	int
]	O
,	O
argv	*(*(char))
)	O
;	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
errno	O
,	O
"failed to run command"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
127	int
)	O
;	O
}	O
close	*((*(void))->(int))
(	O
oup	array(int)
[	O
0	int
]	O
)	O
;	O
close	*((*(void))->(int))
(	O
inp	array(int)
[	O
1	int
]	O
)	O
;	O
*	O
ppid	*(int)
=	O
pid	int
;	O
return	O
dico_fd_io_stream_create	(int,int)->(*(struct))
(	O
inp	array(int)
[	O
0	int
]	O
,	O
oup	array(int)
[	O
1	int
]	O
)	O
;	O
}	O
void	O
printer	()->(void)
(	O
void	O
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
dict_read_reply	()->(void)
(	O
)	O
;	O
printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
in_buffer	*(char)
)	O
;	O
}	O
}	O
void	O
writer	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
pid_t	int
pid	int
=	O
fork	()->(int)
(	O
)	O
;	O
if	O
(	O
pid	int
==	O
(	O
pid_t	int
)	O
-	O
1	int
)	O
{	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
errno	O
,	O
"fork"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
2	int
)	O
;	O
}	O
if	O
(	O
pid	int
==	O
0	int
)	O
{	O
char	O
buf	*(void)
[	O
512	int
]	O
;	O
size_t	long
n	long
;	O
while	O
(	O
(	O
n	long
=	O
fread	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
buf	*(void)
,	O
1	int
,	O
sizeof	O
(	O
buf	*(void)
)	O
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
>	O
0	int
)	O
dico_stream_write	(*(struct),*(void),long)->(int)
(	O
iostr	*(struct)
,	O
buf	*(void)
,	O
n	long
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
char	O
*	O
user	*(char)
,	O
*	O
pass	*(char)
;	O
pid_t	int
pid	int
;	O
char	O
*	O
script	*(char)
=	O
NULL	O
;	O
dico_set_program_name	(*(char))->(void)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
while	O
(	O
--	O
argc	int
)	O
{	O
char	O
*	O
arg	*(char)
=	O
*	O
++	O
argv	*(*(char))
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
arg	*(char)
,	O
"-script="	*(char)
,	O
8	int
)	O
==	O
0	int
)	O
script	*(char)
=	O
arg	*(char)
+	O
8	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"--"	*(char)
)	O
==	O
0	int
)	O
{	O
--	O
argc	int
;	O
++	O
argv	*(*(char))
;	O
break	O
;	O
}	O
else	O
if	O
(	O
arg	*(char)
[	O
0	int
]	O
==	O
'-'	O
)	O
{	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
"unknown option %s"	*(char)
,	O
arg	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
else	O
break	O
;	O
}	O
if	O
(	O
argc	int
<	O
3	int
)	O
{	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
"usage: %s user pass command [args...]"	*(char)
,	O
dico_program_name	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
user	*(char)
=	O
argv	*(*(char))
[	O
0	int
]	O
;	O
pass	*(char)
=	O
argv	*(*(char))
[	O
1	int
]	O
;	O
argc	int
-=	O
2	int
;	O
argv	*(*(char))
+=	O
2	int
;	O
iostr	*(struct)
=	O
run_command	(int,*(*(char)),*(int))->(*(struct))
(	O
argc	int
,	O
argv	*(*(char))
,	O
&	O
pid	int
)	O
;	O
if	O
(	O
!	O
iostr	*(struct)
)	O
return	O
1	int
;	O
dico_stream_set_buffer	(*(struct),enum(int,int,int),long)->(int)
(	O
iostr	*(struct)
,	O
dico_buffer_line	int
,	O
DICO_MAX_BUFFER	int
)	O
;	O
dict_read_reply	()->(void)
(	O
)	O
;	O
assert_status	(*(char))->(void)
(	O
"220"	*(char)
)	O
;	O
get_msgid	()->(void)
(	O
)	O
;	O
apop_auth	(*(char),*(char))->(void)
(	O
user	*(char)
,	O
pass	*(char)
)	O
;	O
if	O
(	O
script	*(char)
)	O
{	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
script	*(char)
,	O
"r"	*(char)
)	O
;	O
if	O
(	O
!	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
errno	O
,	O
"cannot open %s"	*(char)
,	O
script	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
writer	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
printer	()->(void)
(	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
