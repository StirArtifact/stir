static	O
dico_list_t	*(struct)
strategy_list	*(struct)
;	O
static	O
dico_strategy_t	*(struct)
default_strategy	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
;	O
int	O
dico_strat_name_cmp	(*(void),*(void),*(void))->(int)
(	O
const	O
void	O
*	O
item	*(void)
,	O
const	O
void	O
*	O
data	*(void)
,	O
void	O
*	O
unused	*(void)
)	O
{	O
dico_strategy_t	*(struct)
strat	*(struct)
=	O
(	O
dico_strategy_t	*(struct)
)	O
item	*(void)
;	O
const	O
char	O
*	O
name	*(char)
=	O
data	*(void)
;	O
return	O
strcmp	(*(char),*(char))->(int)
(	O
strat	*(struct)
->	O
name	*(char)
,	O
name	*(char)
)	O
;	O
}	O
dico_strategy_t	*(struct)
dico_strategy_create	(*(char),*(char))->(*(struct(*(char),*(char),*((int,*`,*`)->(int)),*(void),int,*(struct))))
(	O
const	O
char	O
*	O
name	*(char)
,	O
const	O
char	O
*	O
descr	*(char)
)	O
{	O
dico_strategy_t	*(struct)
np	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
;	O
size_t	long
size	long
=	O
sizeof	O
(	O
*	O
np	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
)	O
+	O
strlen	(*(char))->(long)
(	O
name	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
descr	*(char)
)	O
+	O
2	int
;	O
np	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
=	O
malloc	(long)->(*(void))
(	O
size	long
)	O
;	O
if	O
(	O
np	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
)	O
{	O
memset	(*(void),int,long)->(*(void))
(	O
np	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
,	O
0	int
,	O
size	long
)	O
;	O
np	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
->	O
name	*(char)
=	O
(	O
char	O
*	O
)	O
(	O
np	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
+	O
1	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
np	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
->	O
name	*(char)
,	O
name	*(char)
)	O
;	O
np	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
->	O
descr	*(char)
=	O
np	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
->	O
name	*(char)
+	O
strlen	(*(char))->(long)
(	O
np	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
->	O
name	*(char)
)	O
+	O
1	int
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
np	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
->	O
descr	*(char)
,	O
descr	*(char)
)	O
;	O
}	O
return	O
np	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
;	O
}	O
int	O
dico_strat_free	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
)	O
{	O
dico_strategy_t	*(struct)
strat	*(struct)
=	O
item	*(void)
;	O
dico_list_destroy	(*(*(struct)))->(void)
(	O
&	O
strat	*(struct)
->	O
stratcl	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
strat	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
dico_strategy_t	*(struct)
dico_strategy_dup	(*(struct(*(char),*(char),*((int,*`,*`)->(int)),*(void),int,*(struct))))->(*(struct(*(char),*(char),*((int,*`,*`)->(int)),*(void),int,*(struct))))
(	O
const	O
dico_strategy_t	*(struct)
strat	*(struct)
)	O
{	O
dico_strategy_t	*(struct)
np	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
=	O
dico_strategy_create	(*(char),*(char))->(*(struct(*(char),*(char),*((int,*`,*`)->(int)),*(void),int,*(struct))))
(	O
strat	*(struct)
->	O
name	*(char)
,	O
strat	*(struct)
->	O
descr	*(char)
)	O
;	O
if	O
(	O
np	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
)	O
{	O
np	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
->	O
sel	*((*(char),*(void))->(int))
=	O
strat	*(struct)
->	O
sel	*((*(char),*(void))->(int))
;	O
np	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
->	O
closure	*(void)
=	O
strat	*(struct)
->	O
closure	*(void)
;	O
}	O
return	O
np	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
;	O
}	O
dico_strategy_t	*(struct)
dico_strategy_find	(*(char))->(*(struct(*(char),*(char),*((int,*`,*`)->(int)),*(void),int,*(struct))))
(	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
if	O
(	O
DEFSTRATNAME	O
(	O
name	*(char)
)	O
)	O
return	O
default_strategy	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
;	O
return	O
dico_list_locate	(*(struct),*(void))->(*(void))
(	O
strategy_list	*(struct)
,	O
(	O
void	O
*	O
)	O
name	*(char)
)	O
;	O
}	O
int	O
dico_strategy_add	(*(struct(*(char),*(char),*((int,*`,*`)->(int)),*(void),int,*(struct))))->(int)
(	O
const	O
dico_strategy_t	*(struct)
strat	*(struct)
)	O
{	O
if	O
(	O
!	O
strategy_list	*(struct)
)	O
{	O
strategy_list	*(struct)
=	O
dico_list_create	()->(*(struct))
(	O
)	O
;	O
if	O
(	O
!	O
strategy_list	*(struct)
)	O
return	O
1	int
;	O
dico_list_set_comparator	(*(struct),*((*(void),*(void),*(void))->(int)),*(void))->(int)
(	O
strategy_list	*(struct)
,	O
dico_strat_name_cmp	(*(void),*(void),*(void))->(int)
,	O
NULL	O
)	O
;	O
dico_list_set_free_item	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
strategy_list	*(struct)
,	O
dico_strat_free	(*(void),*(void))->(int)
,	O
NULL	O
)	O
;	O
}	O
if	O
(	O
!	O
dico_strategy_find	(*(char))->(*(struct(*(char),*(char),*((int,*`,*`)->(int)),*(void),int,*(struct))))
(	O
strat	*(struct)
->	O
name	*(char)
)	O
)	O
{	O
dico_strategy_t	*(struct)
new_strat	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
=	O
dico_strategy_dup	(*(struct(*(char),*(char),*((int,*`,*`)->(int)),*(void),int,*(struct))))->(*(struct(*(char),*(char),*((int,*`,*`)->(int)),*(void),int,*(struct))))
(	O
strat	*(struct)
)	O
;	O
if	O
(	O
!	O
new_strat	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
)	O
return	O
1	int
;	O
dico_list_append	(*(struct),*(void))->(int)
(	O
strategy_list	*(struct)
,	O
new_strat	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
)	O
;	O
}	O
return	O
0	int
;	O
}	O
dico_iterator_t	*(struct)
dico_strategy_iterator	()->(*(struct))
(	O
void	O
)	O
{	O
return	O
dico_list_iterator	(*(struct))->(*(struct))
(	O
strategy_list	*(struct)
)	O
;	O
}	O
size_t	long
dico_strategy_count	()->(long)
(	O
void	O
)	O
{	O
return	O
dico_list_count	(*(struct))->(long)
(	O
strategy_list	*(struct)
)	O
;	O
}	O
void	O
dico_strategy_iterate	(*((*(void),*(void))->(int)),*(void))->(void)
(	O
dico_list_iterator_t	*((*(void),*(void))->(int))
itr	*((*(void),*(void))->(int))
,	O
void	O
*	O
data	*(void)
)	O
{	O
return	O
dico_list_iterate	(*(struct),*((*(void),*(void))->(int)),*(void))->(void)
(	O
strategy_list	*(struct)
,	O
itr	*((*(void),*(void))->(int))
,	O
data	*(void)
)	O
;	O
}	O
int	O
dico_set_default_strategy	(*(char))->(int)
(	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
dico_strategy_t	*(struct)
sp	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
;	O
if	O
(	O
DEFSTRATNAME	O
(	O
name	*(char)
)	O
||	O
(	O
sp	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
=	O
dico_strategy_find	(*(char))->(*(struct(*(char),*(char),*((int,*`,*`)->(int)),*(void),int,*(struct))))
(	O
name	*(char)
)	O
)	O
==	O
NULL	O
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
1	int
;	O
}	O
if	O
(	O
default_strategy	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
)	O
default_strategy	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
->	O
is_default	int
=	O
0	int
;	O
sp	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
->	O
is_default	int
=	O
1	int
;	O
default_strategy	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
=	O
sp	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
;	O
return	O
0	int
;	O
}	O
dico_strategy_t	*(struct)
dico_get_default_strategy	()->(*(struct(*(char),*(char),*((int,*`,*`)->(int)),*(void),int,*(struct))))
(	O
void	O
)	O
{	O
return	O
default_strategy	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
;	O
}	O
