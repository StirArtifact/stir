int	O
pdImageColorAllocate	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int)),int,int,int)->(int)
(	O
pdImagePtr	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
,	O
int	O
,	O
int	O
,	O
int	O
)	O
;	O
int	O
PicBuf_to_PNG	(*(struct(*(char),*(char),*(char),int,int,int,int,float,int,int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int)),*(struct(char,int,int,int,int,int,int,int,int,*(char),double,double,double,double,double,double,double,double,double,double,*(struct(int,int,int,int,*`,*`,*`)),double,double)))->(int)
(	O
const	O
GEN_PAR	struct(*(char),*(char),*(char),int,int,int,int,float,int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int)
*	O
pg	*(struct(*(char),*(char),*(char),int,int,int,int,float,int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int))
,	O
const	O
OUT_PAR	struct(char,int,int,int,int,int,int,int,int,*(char),double,double,double,double,double,double,double,double,double,double,*(struct(int,int,int,int,*(struct(*`,int,*`,*`)),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))))),double,double)
*	O
po	*(struct(char,int,int,int,int,int,int,int,int,*(char),double,double,double,double,double,double,double,double,double,double,*(struct(int,int,int,int,*(struct`),*(char),*(struct`))),double,double))
)	O
{	O
FILE	struct
*	O
fd	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
int	O
row_c	int
,	O
x	int
;	O
const	O
RowBuf	struct(*(char),int,*(struct(*(char),int,*(struct(*`,int,*`,*`)),*(struct(*`,int,*`,*`)))),*(struct(*(char),int,*(struct(*`,int,*`,*`)),*(struct(*`,int,*`,*`)))))
*	O
row	*(struct(*(char),int,*(struct(*(char),int,*(struct`),*(struct`))),*(struct(*(char),int,*(struct`),*(struct`)))))
;	O
const	O
PicBuf	struct(int,int,int,int,*(struct(*(char),int,*(struct(*`,int,*`,*`)),*(struct(*`,int,*`,*`)))),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
*	O
pb	*(struct(int,int,int,int,*(struct(*(char),int,*(struct`),*(struct`))),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))
;	O
int	O
ppm	array(array(int))
[	O
]	O
[	O
3	int
]	O
=	O
{	O
{	O
255	int
,	O
255	int
,	O
255	int
}	O
,	O
{	O
0	int
,	O
0	int
,	O
0	int
}	O
}	O
;	O
int	O
colour	int
;	O
pdImagePtr	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
;	O
int	O
pdcol	int
;	O
if	O
(	O
pg	*(struct(*(char),*(char),*(char),int,int,int,int,float,int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int))
==	O
NULL	O
||	O
po	*(struct(char,int,int,int,int,int,int,int,int,*(char),double,double,double,double,double,double,double,double,double,double,*(struct(int,int,int,int,*(struct`),*(char),*(struct`))),double,double))
==	O
NULL	O
)	O
return	O
ERROR	O
;	O
pb	*(struct(int,int,int,int,*(struct(*(char),int,*(struct`),*(struct`))),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))
=	O
po	*(struct(char,int,int,int,int,int,int,int,int,*(char),double,double,double,double,double,double,double,double,double,double,*(struct(int,int,int,int,*(struct`),*(char),*(struct`))),double,double))
->	O
picbuf	*(struct(int,int,int,int,*(struct(*(char),int,*(struct`),*(struct`))),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))
;	O
if	O
(	O
pb	*(struct(int,int,int,int,*(struct(*(char),int,*(struct`),*(struct`))),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))
==	O
NULL	O
)	O
return	O
ERROR	O
;	O
if	O
(	O
!	O
pg	*(struct(*(char),*(char),*(char),int,int,int,int,float,int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int))
->	O
quiet	int
)	O
Eprintf	(*(char))->(void)
(	O
"\nWriting PNG output: %s\n"	*(char)
,	O
po	*(struct(char,int,int,int,int,int,int,int,int,*(char),double,double,double,double,double,double,double,double,double,double,*(struct(int,int,int,int,*(struct`),*(char),*(struct`))),double,double))
->	O
outfile	*(char)
)	O
;	O
if	O
(	O
*	O
po	*(struct(char,int,int,int,int,int,int,int,int,*(char),double,double,double,double,double,double,double,double,double,double,*(struct(int,int,int,int,*(struct`),*(char),*(struct`))),double,double))
->	O
outfile	*(char)
!=	O
'-'	O
)	O
{	O
if	O
(	O
(	O
fd	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
po	*(struct(char,int,int,int,int,int,int,int,int,*(char),double,double,double,double,double,double,double,double,double,double,*(struct(int,int,int,int,*(struct`),*(char),*(struct`))),double,double))
->	O
outfile	*(char)
,	O
WRITE_BIN	*(char)
)	O
)	O
==	O
NULL	O
)	O
goto	O
ERROR_EXIT	O
;	O
}	O
else	O
fd	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
=	O
pdImageCreate	(int,int)->(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int)))
(	O
pb	*(struct(int,int,int,int,*(struct(*(char),int,*(struct`),*(struct`))),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))
->	O
nc	int
,	O
pb	*(struct(int,int,int,int,*(struct(*(char),int,*(struct`),*(struct`))),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))
->	O
nr	int
)	O
;	O
if	O
(	O
pb	*(struct(int,int,int,int,*(struct(*(char),int,*(struct`),*(struct`))),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))
->	O
depth	int
>	O
1	int
)	O
{	O
for	O
(	O
colour	int
=	O
0	int
;	O
colour	int
<	O
PDNCOL	int
;	O
colour	int
++	O
)	O
pdcol	int
=	O
pdImageColorAllocate	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int)),int,int,int)->(int)
(	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
,	O
pt	struct(array(float),array(short),array(array(char)))
.	O
clut	array(array(char))
[	O
colour	int
]	O
[	O
0	int
]	O
,	O
pt	struct(array(float),array(short),array(array(char)))
.	O
clut	array(array(char))
[	O
colour	int
]	O
[	O
1	int
]	O
,	O
pt	struct(array(float),array(short),array(array(char)))
.	O
clut	array(array(char))
[	O
colour	int
]	O
[	O
2	int
]	O
)	O
;	O
for	O
(	O
row_c	int
=	O
0	int
;	O
row_c	int
<	O
pb	*(struct(int,int,int,int,*(struct(*(char),int,*(struct`),*(struct`))),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))
->	O
nr	int
;	O
row_c	int
++	O
)	O
{	O
row	*(struct(*(char),int,*(struct(*(char),int,*(struct`),*(struct`))),*(struct(*(char),int,*(struct`),*(struct`)))))
=	O
get_RowBuf	(*(struct(int,int,int,int,*(struct(*`,int,*`,*`)),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))))),int)->(*(struct(*(char),int,*(struct(*`,int,*`,*`)),*(struct(*`,int,*`,*`)))))
(	O
pb	*(struct(int,int,int,int,*(struct(*(char),int,*(struct`),*(struct`))),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))
,	O
pb	*(struct(int,int,int,int,*(struct(*(char),int,*(struct`),*(struct`))),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))
->	O
nr	int
-	O
row_c	int
-	O
1	int
)	O
;	O
if	O
(	O
row	*(struct(*(char),int,*(struct(*(char),int,*(struct`),*(struct`))),*(struct(*(char),int,*(struct`),*(struct`)))))
==	O
NULL	O
)	O
continue	O
;	O
for	O
(	O
x	int
=	O
0	int
;	O
x	int
<	O
pb	*(struct(int,int,int,int,*(struct(*(char),int,*(struct`),*(struct`))),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))
->	O
nc	int
;	O
x	int
++	O
)	O
{	O
colour	int
=	O
index_from_RowBuf	(*(struct(*(char),int,*(struct(*`,int,*`,*`)),*(struct(*`,int,*`,*`)))),int,*(struct(int,int,int,int,*(struct(*`,int,*`,*`)),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))))))->(int)
(	O
row	*(struct(*(char),int,*(struct(*(char),int,*(struct`),*(struct`))),*(struct(*(char),int,*(struct`),*(struct`)))))
,	O
x	int
,	O
pb	*(struct(int,int,int,int,*(struct(*(char),int,*(struct`),*(struct`))),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))
)	O
;	O
pdImageSetPixel	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int)),int,int,int)->(void)
(	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
,	O
x	int
,	O
row_c	int
,	O
colour	int
)	O
;	O
}	O
if	O
(	O
(	O
!	O
pg	*(struct(*(char),*(char),*(char),int,int,int,int,float,int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int))
->	O
quiet	int
)	O
&&	O
(	O
row_c	int
%	O
10	int
==	O
0	int
)	O
)	O
Eprintf	(*(char))->(void)
(	O
"."	*(char)
)	O
;	O
}	O
}	O
else	O
{	O
for	O
(	O
colour	int
=	O
0	int
;	O
colour	int
<	O
2	int
;	O
colour	int
++	O
)	O
pdcol	int
=	O
pdImageColorAllocate	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int)),int,int,int)->(int)
(	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
,	O
ppm	array(array(int))
[	O
colour	int
]	O
[	O
0	int
]	O
,	O
ppm	array(array(int))
[	O
colour	int
]	O
[	O
1	int
]	O
,	O
ppm	array(array(int))
[	O
colour	int
]	O
[	O
2	int
]	O
)	O
;	O
for	O
(	O
row_c	int
=	O
0	int
;	O
row_c	int
<	O
pb	*(struct(int,int,int,int,*(struct(*(char),int,*(struct`),*(struct`))),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))
->	O
nr	int
;	O
row_c	int
++	O
)	O
{	O
row	*(struct(*(char),int,*(struct(*(char),int,*(struct`),*(struct`))),*(struct(*(char),int,*(struct`),*(struct`)))))
=	O
get_RowBuf	(*(struct(int,int,int,int,*(struct(*`,int,*`,*`)),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))))),int)->(*(struct(*(char),int,*(struct(*`,int,*`,*`)),*(struct(*`,int,*`,*`)))))
(	O
pb	*(struct(int,int,int,int,*(struct(*(char),int,*(struct`),*(struct`))),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))
,	O
pb	*(struct(int,int,int,int,*(struct(*(char),int,*(struct`),*(struct`))),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))
->	O
nr	int
-	O
row_c	int
-	O
1	int
)	O
;	O
if	O
(	O
row	*(struct(*(char),int,*(struct(*(char),int,*(struct`),*(struct`))),*(struct(*(char),int,*(struct`),*(struct`)))))
==	O
NULL	O
)	O
continue	O
;	O
for	O
(	O
x	int
=	O
0	int
;	O
x	int
<	O
pb	*(struct(int,int,int,int,*(struct(*(char),int,*(struct`),*(struct`))),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))
->	O
nc	int
;	O
x	int
++	O
)	O
{	O
colour	int
=	O
index_from_RowBuf	(*(struct(*(char),int,*(struct(*`,int,*`,*`)),*(struct(*`,int,*`,*`)))),int,*(struct(int,int,int,int,*(struct(*`,int,*`,*`)),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))))))->(int)
(	O
row	*(struct(*(char),int,*(struct(*(char),int,*(struct`),*(struct`))),*(struct(*(char),int,*(struct`),*(struct`)))))
,	O
x	int
,	O
pb	*(struct(int,int,int,int,*(struct(*(char),int,*(struct`),*(struct`))),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))
)	O
;	O
pdImageSetPixel	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int)),int,int,int)->(void)
(	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
,	O
x	int
,	O
row_c	int
,	O
colour	int
)	O
;	O
}	O
if	O
(	O
(	O
!	O
pg	*(struct(*(char),*(char),*(char),int,int,int,int,float,int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int))
->	O
quiet	int
)	O
&&	O
(	O
row_c	int
%	O
10	int
==	O
0	int
)	O
)	O
Eprintf	(*(char))->(void)
(	O
"."	*(char)
)	O
;	O
}	O
}	O
pdImagePNG	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
,	O
fd	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
pdImageDestroy	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int)))->(void)
(	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fd	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
!	O
pg	*(struct(*(char),*(char),*(char),int,int,int,int,float,int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int))
->	O
quiet	int
)	O
Eprintf	(*(char))->(void)
(	O
"\n"	*(char)
)	O
;	O
if	O
(	O
fd	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
!=	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fd	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
return	O
0	int
;	O
ERROR_EXIT	O
:	O
PError	(*(char))->(void)
(	O
"write_PNG"	*(char)
)	O
;	O
return	O
ERROR	O
;	O
}	O
pdImagePtr	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
pdImageCreate	(int,int)->(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int)))
(	O
sx	int
,	O
sy	int
)	O
int	O
sx	int
;	O
int	O
sy	int
;	O
{	O
int	O
i	int
;	O
pdImagePtr	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
;	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
=	O
(	O
pdImage	struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int)
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
pdImage	struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int)
)	O
)	O
;	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
->	O
pixels	*(*(char))
=	O
(	O
unsigned	O
char	O
*	O
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
unsigned	O
char	O
*	O
)	O
*	O
sy	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
(	O
i	int
<	O
sy	int
)	O
;	O
i	int
++	O
)	O
{	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
->	O
pixels	*(*(char))
[	O
i	int
]	O
=	O
(	O
unsigned	O
char	O
*	O
)	O
calloc	(long,long)->(*(void))
(	O
(	O
size_t	long
)	O
sx	int
,	O
sizeof	O
(	O
unsigned	O
char	O
)	O
)	O
;	O
}	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
->	O
sx	int
=	O
sx	int
;	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
->	O
sy	int
=	O
sy	int
;	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
->	O
colorsTotal	int
=	O
0	int
;	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
->	O
transparent	int
=	O
(	O
-	O
1	int
)	O
;	O
return	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
;	O
}	O
void	O
pdImageDestroy	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int)))->(void)
(	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
)	O
pdImagePtr	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
;	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
(	O
i	int
<	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
->	O
sy	int
)	O
;	O
i	int
++	O
)	O
{	O
free	(*(void))->(void)
(	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
->	O
pixels	*(*(char))
[	O
i	int
]	O
)	O
;	O
}	O
free	(*(void))->(void)
(	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
->	O
pixels	*(*(char))
)	O
;	O
free	(*(void))->(void)
(	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
)	O
;	O
}	O
int	O
pdImageColorAllocate	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int)),int,int,int)->(int)
(	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
,	O
r	char
,	O
g	char
,	O
b	char
)	O
pdImagePtr	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
;	O
int	O
r	char
;	O
int	O
g	char
;	O
int	O
b	char
;	O
{	O
int	O
i	int
;	O
int	O
ct	int
=	O
(	O
-	O
1	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
(	O
i	int
<	O
(	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
->	O
colorsTotal	int
)	O
)	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
->	O
open	array(int)
[	O
i	int
]	O
)	O
{	O
ct	int
=	O
i	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
ct	int
==	O
(	O
-	O
1	int
)	O
)	O
{	O
ct	int
=	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
->	O
colorsTotal	int
;	O
if	O
(	O
ct	int
==	O
pdMaxColors	int
)	O
{	O
return	O
-	O
1	int
;	O
}	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
->	O
colorsTotal	int
++	O
;	O
}	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
->	O
red	int
[	O
ct	int
]	O
=	O
r	char
;	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
->	O
green	int
[	O
ct	int
]	O
=	O
g	char
;	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
->	O
blue	int
[	O
ct	int
]	O
=	O
b	char
;	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
->	O
open	array(int)
[	O
ct	int
]	O
=	O
0	int
;	O
return	O
ct	int
;	O
}	O
void	O
pdImageColorTransparent	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int)),int)->(void)
(	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
,	O
color	array(short)
)	O
pdImagePtr	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
;	O
unsigned	O
char	O
color	array(short)
;	O
{	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
->	O
transparent	int
=	O
color	array(short)
;	O
}	O
void	O
pdImageSetPixel	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int)),int,int,int)->(void)
(	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
,	O
x	int
,	O
y	int
,	O
color	array(short)
)	O
pdImagePtr	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
;	O
int	O
x	int
;	O
int	O
y	int
;	O
unsigned	O
char	O
color	array(short)
;	O
{	O
if	O
(	O
pdImageBoundsSafe	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int)),int,int)->(int)
(	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
,	O
x	int
,	O
y	int
)	O
)	O
{	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
->	O
pixels	*(*(char))
[	O
y	int
]	O
[	O
x	int
]	O
=	O
color	array(short)
;	O
}	O
}	O
int	O
pdImageGetPixel	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int)),int,int)->(int)
(	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
,	O
x	int
,	O
y	int
)	O
pdImagePtr	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
;	O
int	O
x	int
;	O
int	O
y	int
;	O
{	O
if	O
(	O
pdImageBoundsSafe	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int)),int,int)->(int)
(	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
,	O
x	int
,	O
y	int
)	O
)	O
{	O
return	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
->	O
pixels	*(*(char))
[	O
y	int
]	O
[	O
x	int
]	O
;	O
}	O
else	O
{	O
return	O
0	int
;	O
}	O
}	O
int	O
pdImageBoundsSafe	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int)),int,int)->(int)
(	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
,	O
x	int
,	O
y	int
)	O
pdImagePtr	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
;	O
int	O
x	int
;	O
int	O
y	int
;	O
{	O
return	O
(	O
!	O
(	O
(	O
(	O
y	int
<	O
0	int
)	O
||	O
(	O
y	int
>=	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
->	O
sy	int
)	O
)	O
||	O
(	O
(	O
x	int
<	O
0	int
)	O
||	O
(	O
x	int
>=	O
im	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int))
->	O
sx	int
)	O
)	O
)	O
)	O
;	O
}	O
