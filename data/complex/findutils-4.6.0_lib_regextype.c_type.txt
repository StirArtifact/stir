struct	O
tagRegexTypeMap	struct(*(char),int,int)
{	O
const	O
char	O
*	O
name	*(char)
;	O
int	O
context	int
;	O
int	O
option_val	int
;	O
}	O
;	O
struct	O
tagRegexTypeMap	struct(*(char),int,int)
regex_map	array(struct(*(char),int,int))
[	O
]	O
=	O
{	O
{	O
"findutils-default"	*(char)
,	O
CONTEXT_FINDUTILS	int
,	O
RE_SYNTAX_EMACS	int
|	O
RE_DOT_NEWLINE	O
}	O
,	O
{	O
"awk"	*(char)
,	O
CONTEXT_ALL	int
,	O
RE_SYNTAX_AWK	O
}	O
,	O
{	O
"egrep"	*(char)
,	O
CONTEXT_ALL	int
,	O
RE_SYNTAX_EGREP	O
}	O
,	O
{	O
"ed"	*(char)
,	O
CONTEXT_GENERIC	int
,	O
RE_SYNTAX_ED	O
}	O
,	O
{	O
"emacs"	*(char)
,	O
CONTEXT_ALL	int
,	O
RE_SYNTAX_EMACS	int
}	O
,	O
{	O
"gnu-awk"	*(char)
,	O
CONTEXT_ALL	int
,	O
RE_SYNTAX_GNU_AWK	O
}	O
,	O
{	O
"grep"	*(char)
,	O
CONTEXT_ALL	int
,	O
RE_SYNTAX_GREP	O
}	O
,	O
{	O
"posix-awk"	*(char)
,	O
CONTEXT_ALL	int
,	O
RE_SYNTAX_POSIX_AWK	O
}	O
,	O
{	O
"posix-basic"	*(char)
,	O
CONTEXT_ALL	int
,	O
RE_SYNTAX_POSIX_BASIC	O
}	O
,	O
{	O
"posix-egrep"	*(char)
,	O
CONTEXT_ALL	int
,	O
RE_SYNTAX_POSIX_EGREP	O
}	O
,	O
{	O
"posix-extended"	*(char)
,	O
CONTEXT_ALL	int
,	O
RE_SYNTAX_POSIX_EXTENDED	O
}	O
,	O
{	O
"posix-minimal-basic"	*(char)
,	O
CONTEXT_GENERIC	int
,	O
RE_SYNTAX_POSIX_MINIMAL_BASIC	O
}	O
,	O
{	O
"sed"	*(char)
,	O
CONTEXT_GENERIC	int
,	O
RE_SYNTAX_SED	O
}	O
,	O
}	O
;	O
enum	O
{	O
N_REGEX_MAP_ENTRIES	int
=	O
sizeof	O
(	O
regex_map	array(struct(*(char),int,int))
)	O
/	O
sizeof	O
(	O
regex_map	array(struct(*(char),int,int))
[	O
0	int
]	O
)	O
}	O
;	O
int	O
get_regex_type	(*(char))->(int)
(	O
const	O
char	O
*	O
s	*(char)
)	O
{	O
unsigned	O
i	int
;	O
size_t	long
msglen	long
;	O
char	O
*	O
buf	*(char)
,	O
*	O
p	*(void)
;	O
msglen	long
=	O
0u	int
;	O
for	O
(	O
i	int
=	O
0u	int
;	O
i	int
<	O
N_REGEX_MAP_ENTRIES	int
;	O
++	O
i	int
)	O
{	O
if	O
(	O
0	int
==	O
strcmp	(*(char),*(char))->(int)
(	O
regex_map	array(struct(*(char),int,int))
[	O
i	int
]	O
.	O
name	*(char)
,	O
s	*(char)
)	O
)	O
return	O
regex_map	array(struct(*(char),int,int))
[	O
i	int
]	O
.	O
option_val	int
;	O
else	O
msglen	long
+=	O
strlen	(*(char))->(long)
(	O
quote	(*(char))->(*(char))
(	O
regex_map	array(struct(*(char),int,int))
[	O
i	int
]	O
.	O
name	*(char)
)	O
)	O
+	O
2u	int
;	O
}	O
p	*(void)
=	O
buf	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
1u	int
+	O
msglen	long
)	O
;	O
for	O
(	O
i	int
=	O
0u	int
;	O
i	int
<	O
N_REGEX_MAP_ENTRIES	int
;	O
++	O
i	int
)	O
{	O
if	O
(	O
i	int
>	O
0u	int
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
p	*(void)
,	O
", "	*(char)
)	O
;	O
p	*(void)
+=	O
2	int
;	O
}	O
p	*(void)
+=	O
sprintf	(*(char),*(char))->(int)
(	O
p	*(void)
,	O
"%s"	*(char)
,	O
quote	(*(char))->(*(char))
(	O
regex_map	array(struct(*(char),int,int))
[	O
i	int
]	O
.	O
name	*(char)
)	O
)	O
;	O
}	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"Unknown regular expression type %s; valid types are %s."	*(char)
)	O
,	O
quote	(*(char))->(*(char))
(	O
s	*(char)
)	O
,	O
buf	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
const	O
char	O
*	O
get_regex_type_name	(int)->(*(char))
(	O
unsigned	O
int	O
ix	int
)	O
{	O
if	O
(	O
ix	int
<	O
N_REGEX_MAP_ENTRIES	int
)	O
return	O
regex_map	array(struct(*(char),int,int))
[	O
ix	int
]	O
.	O
name	*(char)
;	O
else	O
return	O
NULL	O
;	O
}	O
int	O
get_regex_type_flags	(int)->(int)
(	O
unsigned	O
int	O
ix	int
)	O
{	O
if	O
(	O
ix	int
<	O
N_REGEX_MAP_ENTRIES	int
)	O
return	O
regex_map	array(struct(*(char),int,int))
[	O
ix	int
]	O
.	O
option_val	int
;	O
else	O
return	O
-	O
1	int
;	O
}	O
unsigned	O
int	O
get_regex_type_context	(int)->(int)
(	O
unsigned	O
int	O
ix	int
)	O
{	O
if	O
(	O
ix	int
<	O
N_REGEX_MAP_ENTRIES	int
)	O
return	O
regex_map	array(struct(*(char),int,int))
[	O
ix	int
]	O
.	O
context	int
;	O
else	O
return	O
0u	int
;	O
}	O
int	O
get_regex_type_synonym	(int)->(int)
(	O
unsigned	O
int	O
ix	int
)	O
{	O
unsigned	O
i	int
;	O
int	O
flags	int
;	O
if	O
(	O
ix	int
>=	O
N_REGEX_MAP_ENTRIES	int
)	O
return	O
-	O
1	int
;	O
flags	int
=	O
regex_map	array(struct(*(char),int,int))
[	O
ix	int
]	O
.	O
option_val	int
;	O
for	O
(	O
i	int
=	O
0u	int
;	O
i	int
<	O
ix	int
;	O
++	O
i	int
)	O
{	O
if	O
(	O
flags	int
==	O
regex_map	array(struct(*(char),int,int))
[	O
i	int
]	O
.	O
option_val	int
)	O
{	O
return	O
i	int
;	O
}	O
}	O
return	O
-	O
1	int
;	O
}	O
