char	O
*	O
canon_host	(*(char))->(*(char))
(	O
char	O
*	O
host	*(char)
)	O
{	O
struct	O
hostent	struct(*(char),*(*(char)),int,int,*(*(char)))
*	O
he	*(struct(*(char),*(*(char)),int,int,*(*(char))))
=	O
gethostbyname	(*(char))->(*(struct(*(char),*(*(char)),int,int,*(*(char)))))
(	O
host	*(char)
)	O
;	O
if	O
(	O
he	*(struct(*(char),*(*(char)),int,int,*(*(char))))
)	O
{	O
char	O
*	O
addr	*(char)
=	O
0	int
;	O
switch	O
(	O
he	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_addrtype	int
)	O
{	O
case	O
AF_INET	O
:	O
addr	*(char)
=	O
inet_ntoa	(struct(int))->(*(char))
(	O
*	O
(	O
struct	O
in_addr	struct(int)
*	O
)	O
he	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_addr	O
)	O
;	O
break	O
;	O
}	O
if	O
(	O
addr	*(char)
&&	O
strcmp	(*(char),*(char))->(int)
(	O
he	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_name	*(char)
,	O
addr	*(char)
)	O
==	O
0	int
)	O
he	*(struct(*(char),*(*(char)),int,int,*(*(char))))
=	O
gethostbyaddr	(*(void),int,int)->(*(struct(*(char),*(*(char)),int,int,*(*(char)))))
(	O
he	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_addr	O
,	O
he	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_length	int
,	O
he	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_addrtype	int
)	O
;	O
if	O
(	O
he	*(struct(*(char),*(*(char)),int,int,*(*(char))))
)	O
return	O
he	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_name	*(char)
;	O
}	O
return	O
0	int
;	O
}	O
