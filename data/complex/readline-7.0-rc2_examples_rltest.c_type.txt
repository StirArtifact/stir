extern	O
HIST_ENTRY	struct(*(char),*(char),*(void))
*	O
*	O
history_list	()->(*(*(struct(*(char),*(char),*(void)))))
(	O
)	O
;	O
main	()->(int)
(	O
)	O
{	O
char	O
*	O
temp	*(char)
,	O
*	O
prompt	*(char)
;	O
int	O
done	int
;	O
temp	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
prompt	*(char)
=	O
"readline$ "	*(char)
;	O
done	int
=	O
0	int
;	O
while	O
(	O
!	O
done	int
)	O
{	O
temp	*(char)
=	O
readline	(*(char))->(*(char))
(	O
prompt	*(char)
)	O
;	O
if	O
(	O
!	O
temp	*(char)
)	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
if	O
(	O
*	O
temp	*(char)
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s\r\n"	*(char)
,	O
temp	*(char)
)	O
;	O
add_history	(*(char))->(void)
(	O
temp	*(char)
)	O
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
temp	*(char)
,	O
"quit"	*(char)
)	O
==	O
0	int
)	O
done	int
=	O
1	int
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
temp	*(char)
,	O
"list"	*(char)
)	O
==	O
0	int
)	O
{	O
HIST_ENTRY	struct(*(char),*(char),*(void))
*	O
*	O
list	*(*(struct(*(char),*(char),*(void))))
;	O
register	O
int	O
i	int
;	O
list	*(*(struct(*(char),*(char),*(void))))
=	O
history_list	()->(*(*(struct(*(char),*(char),*(void)))))
(	O
)	O
;	O
if	O
(	O
list	*(*(struct(*(char),*(char),*(void))))
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
list	*(*(struct(*(char),*(char),*(void))))
[	O
i	int
]	O
;	O
i	int
++	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%d: %s\r\n"	*(char)
,	O
i	int
,	O
list	*(*(struct(*(char),*(char),*(void))))
[	O
i	int
]	O
->	O
line	*(char)
)	O
;	O
}	O
}	O
free	(*(void))->(void)
(	O
temp	*(char)
)	O
;	O
}	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
