int	O
mu_set_user_privileges	(int,*(int),long)->(int)
(	O
uid_t	int
uid	int
,	O
gid_t	int
*	O
gidv	*(int)
,	O
size_t	long
gidc	long
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
gid_t	int
gid	int
;	O
if	O
(	O
getuid	()->(int)
(	O
)	O
)	O
return	O
EACCES	int
;	O
if	O
(	O
uid	int
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
gidv	*(int)
&&	O
gidc	long
)	O
{	O
if	O
(	O
geteuid	()->(int)
(	O
)	O
==	O
0	int
&&	O
setgroups	(long,*(int))->(int)
(	O
gidc	long
,	O
gidv	*(int)
)	O
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"setgroups(1, %lu) failed: %s"	*(char)
)	O
,	O
(	O
unsigned	O
long	O
)	O
gidv	*(int)
[	O
0	int
]	O
,	O
mu_strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
return	O
errno	O
;	O
}	O
gid	int
=	O
gidv	*(int)
[	O
0	int
]	O
;	O
}	O
else	O
{	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
getpwuid	(int)->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
uid	int
)	O
;	O
if	O
(	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
)	O
gid	int
=	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_gid	int
;	O
else	O
gid	int
=	O
getegid	()->(int)
(	O
)	O
;	O
}	O
if	O
(	O
rc	int
==	O
0	int
&&	O
gid	int
!=	O
0	int
)	O
{	O
if	O
(	O
setgid	(int)->(int)
(	O
gid	int
)	O
<	O
0	int
)	O
{	O
rc	int
=	O
errno	O
;	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"setgid(%lu) failed: %s"	*(char)
)	O
,	O
(	O
unsigned	O
long	O
)	O
gid	int
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
}	O
else	O
if	O
(	O
getegid	()->(int)
(	O
)	O
!=	O
gid	int
)	O
{	O
rc	int
=	O
MU_ERR_FAILURE	O
;	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"setgid(%lu) failed: %s"	*(char)
)	O
,	O
(	O
unsigned	O
long	O
)	O
gid	int
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
}	O
if	O
(	O
rc	int
==	O
0	int
&&	O
getegid	()->(int)
(	O
)	O
!=	O
gid	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"Cannot set effective gid to %lu"	*(char)
)	O
,	O
(	O
unsigned	O
long	O
)	O
gid	int
)	O
;	O
rc	int
=	O
MU_ERR_FAILURE	O
;	O
}	O
}	O
if	O
(	O
rc	int
==	O
0	int
&&	O
uid	int
!=	O
0	int
)	O
{	O
uid_t	int
euid	int
;	O
if	O
(	O
setuid	(int)->(int)
(	O
uid	int
)	O
||	O
geteuid	()->(int)
(	O
)	O
!=	O
uid	int
||	O
(	O
getuid	()->(int)
(	O
)	O
!=	O
uid	int
&&	O
(	O
geteuid	()->(int)
(	O
)	O
==	O
0	int
||	O
getuid	()->(int)
(	O
)	O
==	O
0	int
)	O
)	O
)	O
{	O
if	O
(	O
geteuid	()->(int)
(	O
)	O
!=	O
uid	int
)	O
{	O
if	O
(	O
setreuid	(int,int)->(int)
(	O
uid	int
,	O
-	O
1	int
)	O
<	O
0	int
)	O
{	O
rc	int
=	O
errno	O
;	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"setreuid(%lu,-1) failed: %s"	*(char)
)	O
,	O
(	O
unsigned	O
long	O
)	O
uid	int
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
}	O
if	O
(	O
setuid	(int)->(int)
(	O
uid	int
)	O
<	O
0	int
)	O
{	O
rc	int
=	O
errno	O
;	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"second setuid(%lu) failed: %s"	*(char)
)	O
,	O
(	O
unsigned	O
long	O
)	O
uid	int
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
}	O
}	O
else	O
{	O
rc	int
=	O
errno	O
;	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"setuid(%lu) failed: %s"	*(char)
)	O
,	O
(	O
unsigned	O
long	O
)	O
uid	int
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
}	O
}	O
euid	int
=	O
geteuid	()->(int)
(	O
)	O
;	O
if	O
(	O
uid	int
!=	O
0	int
&&	O
setuid	(int)->(int)
(	O
0	int
)	O
==	O
0	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"seteuid(0) succeeded when it should not"	*(char)
)	O
)	O
;	O
rc	int
=	O
MU_ERR_FAILURE	O
;	O
}	O
else	O
if	O
(	O
uid	int
!=	O
euid	int
&&	O
setuid	(int)->(int)
(	O
euid	int
)	O
==	O
0	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"Cannot drop non-root setuid privileges"	*(char)
)	O
)	O
;	O
rc	int
=	O
MU_ERR_FAILURE	O
;	O
}	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_switch_to_privs	(int,int,*(struct))->(int)
(	O
uid_t	int
uid	int
,	O
gid_t	int
gid	int
,	O
mu_list_t	*(struct)
retain_groups	*(struct)
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
gid_t	int
*	O
emptygidset	*(int)
;	O
size_t	long
size	long
=	O
1	int
,	O
j	long
=	O
1	int
;	O
mu_iterator_t	*(struct)
itr	*(struct)
;	O
if	O
(	O
uid	int
==	O
0	int
)	O
return	O
0	int
;	O
mu_list_count	(*(struct),*(long))->(int)
(	O
retain_groups	*(struct)
,	O
&	O
size	long
)	O
;	O
size	long
++	O
;	O
emptygidset	*(int)
=	O
calloc	(long,long)->(*(void))
(	O
size	long
,	O
sizeof	O
emptygidset	*(int)
[	O
0	int
]	O
)	O
;	O
if	O
(	O
!	O
emptygidset	*(int)
)	O
return	O
ENOMEM	int
;	O
emptygidset	*(int)
[	O
0	int
]	O
=	O
gid	int
?	O
gid	int
:	O
getegid	()->(int)
(	O
)	O
;	O
if	O
(	O
mu_list_get_iterator	(*(struct),*(*(struct)))->(int)
(	O
retain_groups	*(struct)
,	O
&	O
itr	*(struct)
)	O
==	O
0	int
)	O
{	O
for	O
(	O
mu_iterator_first	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
!	O
mu_iterator_is_done	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
mu_iterator_next	(*(struct))->(int)
(	O
itr	*(struct)
)	O
)	O
{	O
void	O
*	O
p	*(void)
;	O
mu_iterator_current	(*(struct),*(*(void)))->(int)
(	O
itr	*(struct)
,	O
&	O
p	*(void)
)	O
;	O
emptygidset	*(int)
[	O
j	long
++	O
]	O
=	O
(	O
gid_t	int
)	O
(	O
intptr_t	long
)	O
p	*(void)
;	O
}	O
mu_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
itr	*(struct)
)	O
;	O
}	O
rc	int
=	O
mu_set_user_privileges	(int,*(int),long)->(int)
(	O
uid	int
,	O
emptygidset	*(int)
,	O
j	long
)	O
;	O
free	(*(void))->(void)
(	O
emptygidset	*(int)
)	O
;	O
return	O
rc	int
;	O
}	O
