enum	O
argcv_quoting_style	O
argcv_quoting_style	O
;	O
struct	O
argcv_info	struct(int,*(char),*(char),*(char),int,int,int,int,int)
{	O
int	O
len	int
;	O
const	O
char	O
*	O
command	*(char)
;	O
const	O
char	O
*	O
delim	*(char)
;	O
const	O
char	O
*	O
comment	*(char)
;	O
int	O
flags	int
;	O
int	O
start	int
;	O
int	O
end	int
;	O
int	O
save	int
;	O
int	O
finish_pos	int
;	O
}	O
;	O
static	O
void	O
init_argcv_info	(*(struct(int,*(char),*(char),*(char),int,int,int,int,int)),int,int,*(char),*(char),*(char))->(void)
(	O
struct	O
argcv_info	struct(int,*(char),*(char),*(char),int,int,int,int,int)
*	O
ap	*(struct(int,*(char),*(char),*(char),int,int,int,int,int))
,	O
int	O
flags	int
,	O
int	O
len	int
,	O
const	O
char	O
*	O
command	*(char)
,	O
const	O
char	O
*	O
delim	*(char)
,	O
const	O
char	O
*	O
comment	*(char)
)	O
{	O
memset	(*(void),int,long)->(*(void))
(	O
ap	*(struct(int,*(char),*(char),*(char),int,int,int,int,int))
,	O
0	int
,	O
sizeof	O
*	O
ap	*(struct(int,*(char),*(char),*(char),int,int,int,int,int))
)	O
;	O
ap	*(struct(int,*(char),*(char),*(char),int,int,int,int,int))
->	O
len	int
=	O
len	int
;	O
ap	*(struct(int,*(char),*(char),*(char),int,int,int,int,int))
->	O
command	*(char)
=	O
command	*(char)
;	O
ap	*(struct(int,*(char),*(char),*(char),int,int,int,int,int))
->	O
delim	*(char)
=	O
delim	*(char)
;	O
ap	*(struct(int,*(char),*(char),*(char),int,int,int,int,int))
->	O
comment	*(char)
=	O
comment	*(char)
;	O
ap	*(struct(int,*(char),*(char),*(char),int,int,int,int,int))
->	O
flags	int
=	O
flags	int
;	O
}	O
static	O
int	O
argcv_scan	(*(struct(int,*(char),*(char),*(char),int,int,int,int,int)))->(int)
(	O
struct	O
argcv_info	struct(int,*(char),*(char),*(char),int,int,int,int,int)
*	O
ap	*(struct(int,*(char),*(char),*(char),int,int,int,int,int))
)	O
{	O
int	O
i	int
=	O
0	int
;	O
int	O
len	int
=	O
ap	*(struct(int,*(char),*(char),*(char),int,int,int,int,int))
->	O
len	int
;	O
const	O
char	O
*	O
command	*(char)
=	O
ap	*(struct(int,*(char),*(char),*(char),int,int,int,int,int))
->	O
command	*(char)
;	O
const	O
char	O
*	O
delim	*(char)
=	O
ap	*(struct(int,*(char),*(char),*(char),int,int,int,int,int))
->	O
delim	*(char)
;	O
const	O
char	O
*	O
comment	*(char)
=	O
ap	*(struct(int,*(char),*(char),*(char),int,int,int,int,int))
->	O
comment	*(char)
;	O
for	O
(	O
;	O
;	O
)	O
{	O
i	int
=	O
ap	*(struct(int,*(char),*(char),*(char),int,int,int,int,int))
->	O
save	int
;	O
if	O
(	O
i	int
>=	O
len	int
)	O
return	O
i	int
+	O
1	int
;	O
while	O
(	O
i	int
<	O
len	int
&&	O
isws	O
(	O
command	*(char)
[	O
i	int
]	O
)	O
)	O
i	int
++	O
;	O
ap	*(struct(int,*(char),*(char),*(char),int,int,int,int,int))
->	O
start	int
=	O
i	int
;	O
if	O
(	O
!	O
isdelim	O
(	O
command	*(char)
[	O
i	int
]	O
,	O
delim	*(char)
)	O
)	O
{	O
while	O
(	O
i	int
<	O
len	int
)	O
{	O
if	O
(	O
command	*(char)
[	O
i	int
]	O
==	O
'\\'	O
)	O
{	O
if	O
(	O
++	O
i	int
==	O
len	int
)	O
break	O
;	O
i	int
++	O
;	O
continue	O
;	O
}	O
if	O
(	O
command	*(char)
[	O
i	int
]	O
==	O
'\''	O
||	O
command	*(char)
[	O
i	int
]	O
==	O
'"'	O
)	O
{	O
int	O
j	int
;	O
for	O
(	O
j	int
=	O
i	int
+	O
1	int
;	O
j	int
<	O
len	int
&&	O
command	*(char)
[	O
j	int
]	O
!=	O
command	*(char)
[	O
i	int
]	O
;	O
j	int
++	O
)	O
if	O
(	O
command	*(char)
[	O
j	int
]	O
==	O
'\\'	O
)	O
j	int
++	O
;	O
if	O
(	O
j	int
<	O
len	int
)	O
i	int
=	O
j	int
+	O
1	int
;	O
else	O
i	int
++	O
;	O
}	O
else	O
if	O
(	O
isws	O
(	O
command	*(char)
[	O
i	int
]	O
)	O
||	O
isdelim	O
(	O
command	*(char)
[	O
i	int
]	O
,	O
delim	*(char)
)	O
)	O
break	O
;	O
else	O
i	int
++	O
;	O
}	O
i	int
--	O
;	O
}	O
else	O
if	O
(	O
!	O
(	O
ap	*(struct(int,*(char),*(char),*(char),int,int,int,int,int))
->	O
flags	int
&	O
DICO_ARGCV_RETURN_DELIMS	int
)	O
)	O
{	O
while	O
(	O
i	int
<	O
len	int
&&	O
isdelim	O
(	O
command	*(char)
[	O
i	int
]	O
,	O
delim	*(char)
)	O
)	O
i	int
++	O
;	O
ap	*(struct(int,*(char),*(char),*(char),int,int,int,int,int))
->	O
save	int
=	O
i	int
;	O
continue	O
;	O
}	O
ap	*(struct(int,*(char),*(char),*(char),int,int,int,int,int))
->	O
end	int
=	O
i	int
;	O
ap	*(struct(int,*(char),*(char),*(char),int,int,int,int,int))
->	O
save	int
=	O
ap	*(struct(int,*(char),*(char),*(char),int,int,int,int,int))
->	O
finish_pos	int
=	O
i	int
+	O
1	int
;	O
if	O
(	O
ap	*(struct(int,*(char),*(char),*(char),int,int,int,int,int))
->	O
save	int
<=	O
len	int
)	O
{	O
if	O
(	O
strchr	(*(char),int)->(*(char))
(	O
comment	*(char)
,	O
command	*(char)
[	O
ap	*(struct(int,*(char),*(char),*(char),int,int,int,int,int))
->	O
start	int
]	O
)	O
!=	O
NULL	O
)	O
{	O
ap	*(struct(int,*(char),*(char),*(char),int,int,int,int,int))
->	O
finish_pos	int
=	O
ap	*(struct(int,*(char),*(char),*(char),int,int,int,int,int))
->	O
start	int
;	O
i	int
=	O
ap	*(struct(int,*(char),*(char),*(char),int,int,int,int,int))
->	O
save	int
;	O
while	O
(	O
i	int
<	O
len	int
&&	O
command	*(char)
[	O
i	int
]	O
!=	O
'\n'	O
)	O
i	int
++	O
;	O
ap	*(struct(int,*(char),*(char),*(char),int,int,int,int,int))
->	O
save	int
=	O
i	int
;	O
continue	O
;	O
}	O
}	O
break	O
;	O
}	O
return	O
ap	*(struct(int,*(char),*(char),*(char),int,int,int,int,int))
->	O
save	int
;	O
}	O
static	O
char	O
quote_transtab	array(char)
[	O
]	O
=	O
"\\\\a\ab\bf\fn\nr\rt\t"	*(char)
;	O
int	O
argcv_unquote_char	O
(	O
int	O
c	int
)	O
{	O
char	O
*	O
p	*(char)
;	O
for	O
(	O
p	*(char)
=	O
quote_transtab	array(char)
;	O
*	O
p	*(char)
;	O
p	*(char)
+=	O
2	int
)	O
{	O
if	O
(	O
*	O
p	*(char)
==	O
c	int
)	O
return	O
p	*(char)
[	O
1	int
]	O
;	O
}	O
return	O
c	int
;	O
}	O
int	O
argcv_quote_char	O
(	O
int	O
c	int
)	O
{	O
char	O
*	O
p	*(char)
;	O
for	O
(	O
p	*(char)
=	O
quote_transtab	array(char)
+	O
sizeof	O
(	O
quote_transtab	array(char)
)	O
-	O
2	int
;	O
p	*(char)
>	O
quote_transtab	array(char)
;	O
p	*(char)
-=	O
2	int
)	O
{	O
if	O
(	O
*	O
p	*(char)
==	O
c	int
)	O
return	O
p	*(char)
[	O
-	O
1	int
]	O
;	O
}	O
return	O
-	O
1	int
;	O
}	O
static	O
int	O
xtonum	(*(int),*(char),int,int)->(int)
(	O
int	O
*	O
pval	*(int)
,	O
const	O
char	O
*	O
src	*(char)
,	O
int	O
base	int
,	O
int	O
cnt	int
)	O
{	O
int	O
i	int
,	O
val	int
;	O
for	O
(	O
i	int
=	O
0	int
,	O
val	int
=	O
0	int
;	O
i	int
<	O
cnt	int
;	O
i	int
++	O
,	O
src	*(char)
++	O
)	O
{	O
int	O
n	long
=	O
*	O
(	O
unsigned	O
char	O
*	O
)	O
src	*(char)
;	O
if	O
(	O
n	long
>	O
127	int
||	O
(	O
n	long
=	O
to_num	O
(	O
n	long
)	O
)	O
>=	O
base	int
)	O
break	O
;	O
val	int
=	O
val	int
*	O
base	int
+	O
n	long
;	O
}	O
*	O
pval	*(int)
=	O
val	int
;	O
return	O
i	int
;	O
}	O
size_t	long
argcv_quoted_length	O
(	O
const	O
char	O
*	O
str	*(char)
,	O
int	O
*	O
quote	*(int)
)	O
{	O
size_t	long
len	int
=	O
0	int
;	O
if	O
(	O
*	O
str	*(char)
==	O
0	int
)	O
{	O
*	O
quote	*(int)
=	O
1	int
;	O
return	O
0	int
;	O
}	O
*	O
quote	*(int)
=	O
0	int
;	O
for	O
(	O
;	O
*	O
str	*(char)
;	O
str	*(char)
++	O
)	O
{	O
if	O
(	O
*	O
str	*(char)
==	O
' '	O
)	O
{	O
len	int
++	O
;	O
*	O
quote	*(int)
=	O
1	int
;	O
}	O
else	O
if	O
(	O
*	O
str	*(char)
==	O
'"'	O
)	O
{	O
len	int
+=	O
2	int
;	O
*	O
quote	*(int)
=	O
1	int
;	O
}	O
else	O
if	O
(	O
*	O
str	*(char)
!=	O
'\t'	O
&&	O
*	O
str	*(char)
!=	O
'\\'	O
&&	O
isprint	(int)->(int)
(	O
*	O
str	*(char)
)	O
)	O
len	int
++	O
;	O
else	O
{	O
switch	O
(	O
argcv_quoting_style	O
)	O
{	O
case	O
argcv_quoting_octal	O
:	O
if	O
(	O
argcv_quote_char	O
(	O
*	O
str	*(char)
)	O
!=	O
-	O
1	int
)	O
len	int
+=	O
2	int
;	O
else	O
len	int
+=	O
4	int
;	O
break	O
;	O
case	O
argcv_quoting_hex	O
:	O
len	int
+=	O
3	int
;	O
break	O
;	O
}	O
}	O
}	O
return	O
len	int
;	O
}	O
void	O
argcv_unquote_copy	O
(	O
char	O
*	O
dst	*(char)
,	O
const	O
char	O
*	O
src	*(char)
,	O
size_t	long
n	long
)	O
{	O
int	O
i	int
=	O
0	int
;	O
int	O
c	int
;	O
int	O
expect_delim	int
=	O
0	int
;	O
while	O
(	O
i	int
<	O
n	long
)	O
{	O
switch	O
(	O
src	*(char)
[	O
i	int
]	O
)	O
{	O
case	O
'\''	O
:	O
case	O
'"'	O
:	O
if	O
(	O
!	O
expect_delim	int
)	O
{	O
const	O
char	O
*	O
p	*(char)
;	O
for	O
(	O
p	*(char)
=	O
src	*(char)
+	O
i	int
+	O
1	int
;	O
*	O
p	*(char)
&&	O
*	O
p	*(char)
!=	O
src	*(char)
[	O
i	int
]	O
;	O
p	*(char)
++	O
)	O
if	O
(	O
*	O
p	*(char)
==	O
'\\'	O
)	O
p	*(char)
++	O
;	O
if	O
(	O
*	O
p	*(char)
)	O
expect_delim	int
=	O
src	*(char)
[	O
i	int
++	O
]	O
;	O
else	O
*	O
dst	*(char)
++	O
=	O
src	*(char)
[	O
i	int
++	O
]	O
;	O
}	O
else	O
if	O
(	O
expect_delim	int
==	O
src	*(char)
[	O
i	int
]	O
)	O
++	O
i	int
;	O
else	O
*	O
dst	*(char)
++	O
=	O
src	*(char)
[	O
i	int
++	O
]	O
;	O
break	O
;	O
case	O
'\\'	O
:	O
++	O
i	int
;	O
if	O
(	O
src	*(char)
[	O
i	int
]	O
==	O
'x'	O
||	O
src	*(char)
[	O
i	int
]	O
==	O
'X'	O
)	O
{	O
if	O
(	O
n	long
-	O
i	int
<	O
2	int
)	O
{	O
*	O
dst	*(char)
++	O
=	O
'\\'	O
;	O
*	O
dst	*(char)
++	O
=	O
src	*(char)
[	O
i	int
++	O
]	O
;	O
}	O
else	O
{	O
int	O
off	int
=	O
xtonum	(*(int),*(char),int,int)->(int)
(	O
&	O
c	int
,	O
src	*(char)
+	O
i	int
+	O
1	int
,	O
16	int
,	O
2	int
)	O
;	O
if	O
(	O
off	int
==	O
0	int
)	O
{	O
*	O
dst	*(char)
++	O
=	O
'\\'	O
;	O
*	O
dst	*(char)
++	O
=	O
src	*(char)
[	O
i	int
++	O
]	O
;	O
}	O
else	O
{	O
*	O
dst	*(char)
++	O
=	O
c	int
;	O
i	int
+=	O
off	int
+	O
1	int
;	O
}	O
}	O
}	O
else	O
if	O
(	O
(	O
unsigned	O
char	O
)	O
src	*(char)
[	O
i	int
]	O
<	O
128	int
&&	O
isdigit	(int)->(int)
(	O
src	*(char)
[	O
i	int
]	O
)	O
)	O
{	O
if	O
(	O
n	long
-	O
i	int
<	O
1	int
)	O
{	O
*	O
dst	*(char)
++	O
=	O
'\\'	O
;	O
*	O
dst	*(char)
++	O
=	O
src	*(char)
[	O
i	int
++	O
]	O
;	O
}	O
else	O
{	O
int	O
off	int
=	O
xtonum	(*(int),*(char),int,int)->(int)
(	O
&	O
c	int
,	O
src	*(char)
+	O
i	int
,	O
8	int
,	O
3	int
)	O
;	O
if	O
(	O
off	int
==	O
0	int
)	O
{	O
*	O
dst	*(char)
++	O
=	O
'\\'	O
;	O
*	O
dst	*(char)
++	O
=	O
src	*(char)
[	O
i	int
++	O
]	O
;	O
}	O
else	O
{	O
*	O
dst	*(char)
++	O
=	O
c	int
;	O
i	int
+=	O
off	int
;	O
}	O
}	O
}	O
else	O
*	O
dst	*(char)
++	O
=	O
argcv_unquote_char	O
(	O
src	*(char)
[	O
i	int
++	O
]	O
)	O
;	O
break	O
;	O
default	O
:	O
*	O
dst	*(char)
++	O
=	O
src	*(char)
[	O
i	int
++	O
]	O
;	O
}	O
}	O
*	O
dst	*(char)
=	O
0	int
;	O
}	O
void	O
argcv_quote_copy	O
(	O
char	O
*	O
dst	*(char)
,	O
const	O
char	O
*	O
src	*(char)
)	O
{	O
for	O
(	O
;	O
*	O
src	*(char)
;	O
src	*(char)
++	O
)	O
{	O
if	O
(	O
*	O
src	*(char)
==	O
'"'	O
)	O
{	O
*	O
dst	*(char)
++	O
=	O
'\\'	O
;	O
*	O
dst	*(char)
++	O
=	O
*	O
src	*(char)
;	O
}	O
else	O
if	O
(	O
*	O
src	*(char)
!=	O
'\t'	O
&&	O
*	O
src	*(char)
!=	O
'\\'	O
&&	O
isprint	(int)->(int)
(	O
*	O
src	*(char)
)	O
)	O
*	O
dst	*(char)
++	O
=	O
*	O
src	*(char)
;	O
else	O
{	O
char	O
tmp	array(char)
[	O
4	int
]	O
;	O
switch	O
(	O
argcv_quoting_style	O
)	O
{	O
case	O
argcv_quoting_octal	O
:	O
{	O
int	O
c	int
=	O
argcv_quote_char	O
(	O
*	O
src	*(char)
)	O
;	O
*	O
dst	*(char)
++	O
=	O
'\\'	O
;	O
if	O
(	O
c	int
!=	O
-	O
1	int
)	O
*	O
dst	*(char)
++	O
=	O
c	int
;	O
else	O
{	O
snprintf	(*(char),long,*(char))->(int)
(	O
tmp	array(char)
,	O
sizeof	O
tmp	array(char)
,	O
"%03o"	*(char)
,	O
*	O
(	O
unsigned	O
char	O
*	O
)	O
src	*(char)
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
dst	*(char)
,	O
tmp	array(char)
,	O
3	int
)	O
;	O
dst	*(char)
+=	O
3	int
;	O
}	O
break	O
;	O
}	O
case	O
argcv_quoting_hex	O
:	O
snprintf	(*(char),long,*(char))->(int)
(	O
tmp	array(char)
,	O
sizeof	O
tmp	array(char)
,	O
"%%%02X"	*(char)
,	O
*	O
(	O
unsigned	O
char	O
*	O
)	O
src	*(char)
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
dst	*(char)
,	O
tmp	array(char)
,	O
3	int
)	O
;	O
dst	*(char)
+=	O
3	int
;	O
break	O
;	O
}	O
}	O
}	O
}	O
int	O
argcv_get_np	O
(	O
const	O
char	O
*	O
command	*(char)
,	O
int	O
len	int
,	O
const	O
char	O
*	O
delim	*(char)
,	O
const	O
char	O
*	O
cmnt	*(char)
,	O
int	O
flags	int
,	O
int	O
*	O
pargc	*(int)
,	O
char	O
*	O
*	O
*	O
pargv	*(*(*(char)))
,	O
char	O
*	O
*	O
endp	*(*(char))
)	O
{	O
int	O
i	int
=	O
0	int
;	O
struct	O
argcv_info	struct(int,*(char),*(char),*(char),int,int,int,int,int)
info	struct(int,*(char),*(char),*(char),int,int,int,int,int)
;	O
int	O
argc	*(int)
;	O
char	O
*	O
*	O
argv	*(*(*(char)))
;	O
if	O
(	O
!	O
delim	*(char)
)	O
delim	*(char)
=	O
""	*(char)
;	O
if	O
(	O
!	O
cmnt	*(char)
)	O
cmnt	*(char)
=	O
""	*(char)
;	O
init_argcv_info	(*(struct(int,*(char),*(char),*(char),int,int,int,int,int)),int,int,*(char),*(char),*(char))->(void)
(	O
&	O
info	struct(int,*(char),*(char),*(char),int,int,int,int,int)
,	O
flags	int
,	O
len	int
,	O
command	*(char)
,	O
delim	*(char)
,	O
cmnt	*(char)
)	O
;	O
argc	*(int)
=	O
0	int
;	O
while	O
(	O
argcv_scan	(*(struct(int,*(char),*(char),*(char),int,int,int,int,int)))->(int)
(	O
&	O
info	struct(int,*(char),*(char),*(char),int,int,int,int,int)
)	O
<=	O
len	int
)	O
argc	*(int)
++	O
;	O
argv	*(*(*(char)))
=	O
calloc	(long,long)->(*(void))
(	O
(	O
argc	*(int)
+	O
1	int
)	O
,	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
if	O
(	O
argv	*(*(*(char)))
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
i	int
=	O
0	int
;	O
info	struct(int,*(char),*(char),*(char),int,int,int,int,int)
.	O
save	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argc	*(int)
;	O
i	int
++	O
)	O
{	O
int	O
n	long
;	O
int	O
unquote	int
;	O
argcv_scan	(*(struct(int,*(char),*(char),*(char),int,int,int,int,int)))->(int)
(	O
&	O
info	struct(int,*(char),*(char),*(char),int,int,int,int,int)
)	O
;	O
if	O
(	O
(	O
command	*(char)
[	O
info	struct(int,*(char),*(char),*(char),int,int,int,int,int)
.	O
start	int
]	O
==	O
'"'	O
||	O
command	*(char)
[	O
info	struct(int,*(char),*(char),*(char),int,int,int,int,int)
.	O
end	int
]	O
==	O
'\''	O
)	O
&&	O
command	*(char)
[	O
info	struct(int,*(char),*(char),*(char),int,int,int,int,int)
.	O
end	int
]	O
==	O
command	*(char)
[	O
info	struct(int,*(char),*(char),*(char),int,int,int,int,int)
.	O
start	int
]	O
)	O
{	O
if	O
(	O
info	struct(int,*(char),*(char),*(char),int,int,int,int,int)
.	O
start	int
<	O
info	struct(int,*(char),*(char),*(char),int,int,int,int,int)
.	O
end	int
)	O
{	O
info	struct(int,*(char),*(char),*(char),int,int,int,int,int)
.	O
start	int
++	O
;	O
info	struct(int,*(char),*(char),*(char),int,int,int,int,int)
.	O
end	int
--	O
;	O
}	O
unquote	int
=	O
0	int
;	O
}	O
else	O
unquote	int
=	O
1	int
;	O
n	long
=	O
info	struct(int,*(char),*(char),*(char),int,int,int,int,int)
.	O
end	int
-	O
info	struct(int,*(char),*(char),*(char),int,int,int,int,int)
.	O
start	int
+	O
1	int
;	O
argv	*(*(*(char)))
[	O
i	int
]	O
=	O
calloc	(long,long)->(*(void))
(	O
n	long
+	O
1	int
,	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
if	O
(	O
argv	*(*(*(char)))
[	O
i	int
]	O
==	O
NULL	O
)	O
{	O
argcv_free	O
(	O
i	int
,	O
argv	*(*(*(char)))
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
if	O
(	O
unquote	int
)	O
argcv_unquote_copy	O
(	O
argv	*(*(*(char)))
[	O
i	int
]	O
,	O
&	O
command	*(char)
[	O
info	struct(int,*(char),*(char),*(char),int,int,int,int,int)
.	O
start	int
]	O
,	O
n	long
)	O
;	O
else	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
argv	*(*(*(char)))
[	O
i	int
]	O
,	O
&	O
command	*(char)
[	O
info	struct(int,*(char),*(char),*(char),int,int,int,int,int)
.	O
start	int
]	O
,	O
n	long
)	O
;	O
argv	*(*(*(char)))
[	O
i	int
]	O
[	O
n	long
]	O
=	O
0	int
;	O
}	O
argv	*(*(*(char)))
[	O
i	int
]	O
=	O
NULL	O
;	O
*	O
pargc	*(int)
=	O
argc	*(int)
;	O
*	O
pargv	*(*(*(char)))
=	O
argv	*(*(*(char)))
;	O
if	O
(	O
endp	*(*(char))
)	O
*	O
endp	*(*(char))
=	O
(	O
char	O
*	O
)	O
(	O
command	*(char)
+	O
info	struct(int,*(char),*(char),*(char),int,int,int,int,int)
.	O
finish_pos	int
)	O
;	O
return	O
0	int
;	O
}	O
int	O
argcv_get_n	O
(	O
const	O
char	O
*	O
command	*(char)
,	O
int	O
len	int
,	O
const	O
char	O
*	O
delim	*(char)
,	O
const	O
char	O
*	O
cmnt	*(char)
,	O
int	O
*	O
pargc	*(int)
,	O
char	O
*	O
*	O
*	O
pargv	*(*(*(char)))
)	O
{	O
return	O
argcv_get_np	O
(	O
command	*(char)
,	O
len	int
,	O
delim	*(char)
,	O
cmnt	*(char)
,	O
DICO_ARGCV_RETURN_DELIMS	int
,	O
pargc	*(int)
,	O
pargv	*(*(*(char)))
,	O
NULL	O
)	O
;	O
}	O
int	O
argcv_get	O
(	O
const	O
char	O
*	O
command	*(char)
,	O
const	O
char	O
*	O
delim	*(char)
,	O
const	O
char	O
*	O
cmnt	*(char)
,	O
int	O
*	O
argc	*(int)
,	O
char	O
*	O
*	O
*	O
argv	*(*(*(char)))
)	O
{	O
return	O
argcv_get_n	O
(	O
command	*(char)
,	O
strlen	(*(char))->(long)
(	O
command	*(char)
)	O
,	O
delim	*(char)
,	O
cmnt	*(char)
,	O
argc	*(int)
,	O
argv	*(*(*(char)))
)	O
;	O
}	O
void	O
argcv_free	O
(	O
int	O
argc	*(int)
,	O
char	O
*	O
*	O
argv	*(*(*(char)))
)	O
{	O
while	O
(	O
--	O
argc	*(int)
>=	O
0	int
)	O
if	O
(	O
argv	*(*(*(char)))
[	O
argc	*(int)
]	O
)	O
free	(*(void))->(void)
(	O
argv	*(*(*(char)))
[	O
argc	*(int)
]	O
)	O
;	O
free	(*(void))->(void)
(	O
argv	*(*(*(char)))
)	O
;	O
}	O
void	O
argv_free	O
(	O
char	O
*	O
*	O
argv	*(*(*(char)))
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
argv	*(*(*(char)))
[	O
i	int
]	O
;	O
i	int
++	O
)	O
free	(*(void))->(void)
(	O
argv	*(*(*(char)))
[	O
i	int
]	O
)	O
;	O
free	(*(void))->(void)
(	O
argv	*(*(*(char)))
)	O
;	O
}	O
int	O
argcv_string	O
(	O
int	O
argc	*(int)
,	O
const	O
char	O
*	O
*	O
argv	*(*(*(char)))
,	O
char	O
*	O
*	O
pstring	*(*(char))
)	O
{	O
size_t	long
i	int
,	O
j	int
,	O
len	int
;	O
char	O
*	O
buffer	*(char)
;	O
if	O
(	O
pstring	*(*(char))
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
buffer	*(char)
=	O
malloc	(long)->(*(void))
(	O
1	int
)	O
;	O
if	O
(	O
buffer	*(char)
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
*	O
buffer	*(char)
=	O
'\0'	O
;	O
for	O
(	O
len	int
=	O
i	int
=	O
j	int
=	O
0	int
;	O
i	int
<	O
argc	*(int)
;	O
i	int
++	O
)	O
{	O
int	O
quote	*(int)
;	O
int	O
toklen	int
;	O
toklen	int
=	O
argcv_quoted_length	O
(	O
argv	*(*(*(char)))
[	O
i	int
]	O
,	O
&	O
quote	*(int)
)	O
;	O
len	int
+=	O
toklen	int
+	O
2	int
;	O
if	O
(	O
quote	*(int)
)	O
len	int
+=	O
2	int
;	O
buffer	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
len	int
)	O
;	O
if	O
(	O
buffer	*(char)
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
buffer	*(char)
[	O
j	int
++	O
]	O
=	O
' '	O
;	O
if	O
(	O
quote	*(int)
)	O
buffer	*(char)
[	O
j	int
++	O
]	O
=	O
'"'	O
;	O
argcv_quote_copy	O
(	O
buffer	*(char)
+	O
j	int
,	O
argv	*(*(*(char)))
[	O
i	int
]	O
)	O
;	O
j	int
+=	O
toklen	int
;	O
if	O
(	O
quote	*(int)
)	O
buffer	*(char)
[	O
j	int
++	O
]	O
=	O
'"'	O
;	O
}	O
for	O
(	O
;	O
j	int
>	O
0	int
&&	O
isspace	(int)->(int)
(	O
buffer	*(char)
[	O
j	int
-	O
1	int
]	O
)	O
;	O
j	int
--	O
)	O
;	O
buffer	*(char)
[	O
j	int
]	O
=	O
0	int
;	O
if	O
(	O
pstring	*(*(char))
)	O
*	O
pstring	*(*(char))
=	O
buffer	*(char)
;	O
return	O
0	int
;	O
}	O
void	O
dico_argcv_remove	(*(int),*(*(*(char))),*((*(char),*(void))->(int)),*(void))->(void)
(	O
int	O
*	O
pargc	*(int)
,	O
char	O
*	O
*	O
*	O
pargv	*(*(*(char)))
,	O
int	O
(	O
*	O
sel	*((*(char),*(void))->(int))
)	O
(	O
const	O
char	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
data	*(void)
)	O
{	O
int	O
i	int
,	O
j	int
;	O
int	O
argc	*(int)
=	O
*	O
pargc	*(int)
;	O
char	O
*	O
*	O
argv	*(*(*(char)))
=	O
*	O
pargv	*(*(*(char)))
;	O
int	O
cnt	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
j	int
=	O
0	int
;	O
i	int
<	O
argc	*(int)
;	O
i	int
++	O
)	O
{	O
if	O
(	O
sel	*((*(char),*(void))->(int))
(	O
argv	*(*(*(char)))
[	O
i	int
]	O
,	O
data	*(void)
)	O
)	O
{	O
free	(*(void))->(void)
(	O
argv	*(*(*(char)))
[	O
i	int
]	O
)	O
;	O
cnt	int
++	O
;	O
}	O
else	O
{	O
if	O
(	O
i	int
!=	O
j	int
)	O
argv	*(*(*(char)))
[	O
j	int
]	O
=	O
argv	*(*(*(char)))
[	O
i	int
]	O
;	O
j	int
++	O
;	O
}	O
}	O
if	O
(	O
i	int
!=	O
j	int
)	O
argv	*(*(*(char)))
[	O
j	int
]	O
=	O
NULL	O
;	O
argc	*(int)
-=	O
cnt	int
;	O
*	O
pargc	*(int)
=	O
argc	*(int)
;	O
*	O
pargv	*(*(*(char)))
=	O
argv	*(*(*(char)))
;	O
}	O
