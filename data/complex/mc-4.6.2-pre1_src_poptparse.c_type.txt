int	O
poptParseArgvString	(*(char),*(int),*(*(*(char))))->(int)
(	O
const	O
char	O
*	O
s	*(char)
,	O
int	O
*	O
argcPtr	*(int)
,	O
char	O
*	O
*	O
*	O
argvPtr	*(*(*(char)))
)	O
{	O
char	O
*	O
buf	*(char)
,	O
*	O
bufStart	*(char)
,	O
*	O
dst	*(char)
;	O
const	O
char	O
*	O
src	*(char)
;	O
char	O
quote	char
=	O
'\0'	O
;	O
int	O
argvAlloced	int
=	O
POPT_ARGV_ARRAY_GROW_DELTA	int
;	O
char	O
*	O
*	O
argv	*(*(char))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
argv	*(*(char))
)	O
*	O
argvAlloced	int
)	O
;	O
char	O
*	O
*	O
argv2	*(*(char))
;	O
int	O
argc	int
=	O
0	int
;	O
int	O
i	int
,	O
buflen	int
;	O
buflen	int
=	O
strlen	(*(char))->(long)
(	O
s	*(char)
)	O
+	O
1	int
;	O
bufStart	*(char)
=	O
buf	*(char)
=	O
alloca	(long)->(*(void))
(	O
buflen	int
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
buf	*(char)
,	O
'\0'	O
,	O
buflen	int
)	O
;	O
src	*(char)
=	O
s	*(char)
;	O
argv	*(*(char))
[	O
argc	int
]	O
=	O
buf	*(char)
;	O
while	O
(	O
*	O
src	*(char)
)	O
{	O
if	O
(	O
quote	char
==	O
*	O
src	*(char)
)	O
{	O
quote	char
=	O
'\0'	O
;	O
}	O
else	O
if	O
(	O
quote	char
)	O
{	O
if	O
(	O
*	O
src	*(char)
==	O
'\\'	O
)	O
{	O
src	*(char)
++	O
;	O
if	O
(	O
!	O
*	O
src	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
argv	*(*(char))
)	O
;	O
return	O
POPT_ERROR_BADQUOTE	O
;	O
}	O
if	O
(	O
*	O
src	*(char)
!=	O
quote	char
)	O
*	O
buf	*(char)
++	O
=	O
'\\'	O
;	O
}	O
*	O
buf	*(char)
++	O
=	O
*	O
src	*(char)
;	O
}	O
else	O
if	O
(	O
isspace	(int)->(int)
(	O
(	O
unsigned	O
char	O
)	O
*	O
src	*(char)
)	O
)	O
{	O
if	O
(	O
*	O
argv	*(*(char))
[	O
argc	int
]	O
)	O
{	O
buf	*(char)
++	O
,	O
argc	int
++	O
;	O
if	O
(	O
argc	int
==	O
argvAlloced	int
)	O
{	O
argvAlloced	int
+=	O
POPT_ARGV_ARRAY_GROW_DELTA	int
;	O
argv	*(*(char))
=	O
realloc	(*(void),long)->(*(void))
(	O
argv	*(*(char))
,	O
sizeof	O
(	O
*	O
argv	*(*(char))
)	O
*	O
argvAlloced	int
)	O
;	O
}	O
argv	*(*(char))
[	O
argc	int
]	O
=	O
buf	*(char)
;	O
}	O
}	O
else	O
switch	O
(	O
*	O
src	*(char)
)	O
{	O
case	O
'"'	O
:	O
case	O
'\''	O
:	O
quote	char
=	O
*	O
src	*(char)
;	O
break	O
;	O
case	O
'\\'	O
:	O
src	*(char)
++	O
;	O
if	O
(	O
!	O
*	O
src	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
argv	*(*(char))
)	O
;	O
return	O
POPT_ERROR_BADQUOTE	O
;	O
}	O
default	O
:	O
*	O
buf	*(char)
++	O
=	O
*	O
src	*(char)
;	O
}	O
src	*(char)
++	O
;	O
}	O
if	O
(	O
strlen	(*(char))->(long)
(	O
argv	*(*(char))
[	O
argc	int
]	O
)	O
)	O
{	O
argc	int
++	O
,	O
buf	*(char)
++	O
;	O
}	O
dst	*(char)
=	O
malloc	(long)->(*(void))
(	O
argc	int
*	O
sizeof	O
(	O
*	O
argv	*(*(char))
)	O
+	O
(	O
buf	*(char)
-	O
bufStart	*(char)
)	O
)	O
;	O
argv2	*(*(char))
=	O
(	O
void	O
*	O
)	O
dst	*(char)
;	O
dst	*(char)
+=	O
argc	int
*	O
sizeof	O
(	O
*	O
argv	*(*(char))
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
argv2	*(*(char))
,	O
argv	*(*(char))
,	O
argc	int
*	O
sizeof	O
(	O
*	O
argv	*(*(char))
)	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
dst	*(char)
,	O
bufStart	*(char)
,	O
buf	*(char)
-	O
bufStart	*(char)
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
{	O
argv2	*(*(char))
[	O
i	int
]	O
=	O
dst	*(char)
+	O
(	O
argv	*(*(char))
[	O
i	int
]	O
-	O
bufStart	*(char)
)	O
;	O
}	O
free	(*(void))->(void)
(	O
argv	*(*(char))
)	O
;	O
*	O
argvPtr	*(*(*(char)))
=	O
argv2	*(*(char))
;	O
*	O
argcPtr	*(int)
=	O
argc	int
;	O
return	O
0	int
;	O
}	O
