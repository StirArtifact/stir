static	O
char	O
*	O
path	*(char)
;	O
static	O
size_t	long
pathlen	long
;	O
extern	O
int	O
isdir	(*(char))->(int)
(	O
const	O
char	O
*	O
name	*(char)
)	O
;	O
static	O
int	O
isdir1	(*(char),*(char))->(int)
(	O
const	O
char	O
*	O
dir	*(char)
,	O
const	O
char	O
*	O
file	*(char)
)	O
{	O
size_t	long
dirlen	long
=	O
strlen	(*(char))->(long)
(	O
dir	*(char)
)	O
;	O
size_t	long
filelen	long
=	O
strlen	(*(char))->(long)
(	O
file	*(char)
)	O
;	O
while	O
(	O
dirlen	long
&&	O
dir	*(char)
[	O
dirlen	long
-	O
1	int
]	O
==	O
'/'	O
)	O
dirlen	long
--	O
;	O
if	O
(	O
(	O
dirlen	long
+	O
filelen	long
+	O
2	int
)	O
>	O
pathlen	long
)	O
{	O
pathlen	long
*=	O
2	int
;	O
if	O
(	O
(	O
dirlen	long
+	O
filelen	long
+	O
2	int
)	O
>	O
pathlen	long
)	O
pathlen	long
=	O
dirlen	long
+	O
filelen	long
+	O
2	int
;	O
path	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
path	*(char)
,	O
pathlen	long
)	O
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
path	*(char)
,	O
dir	*(char)
,	O
dirlen	long
)	O
;	O
path	*(char)
[	O
dirlen	long
]	O
=	O
'/'	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
path	*(char)
+	O
dirlen	long
+	O
1	int
,	O
file	*(char)
)	O
;	O
return	O
isdir	(*(char))->(int)
(	O
path	*(char)
)	O
;	O
}	O
char	O
*	O
savedir	(*(char),long,*(struct),*(struct),*(struct))->(*(char))
(	O
const	O
char	O
*	O
dir	*(char)
,	O
off_t	long
name_size	long
,	O
struct	O
exclude	O
*	O
included_patterns	*(struct)
,	O
struct	O
exclude	O
*	O
excluded_patterns	*(struct)
,	O
struct	O
exclude	O
*	O
excluded_directory_patterns	*(struct)
)	O
{	O
DIR	struct
*	O
dirp	*(struct)
;	O
struct	O
dirent	struct(long,long,short,char,array(char))
*	O
dp	*(struct(long,long,short,char,array(char)))
;	O
char	O
*	O
name_space	*(char)
;	O
char	O
*	O
namep	*(char)
;	O
dirp	*(struct)
=	O
opendir	(*(char))->(*(struct))
(	O
dir	*(char)
)	O
;	O
if	O
(	O
dirp	*(struct)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
name_size	long
<=	O
0	int
)	O
name_size	long
=	O
1	int
;	O
name_space	*(char)
=	O
(	O
char	O
*	O
)	O
malloc	(long)->(*(void))
(	O
name_size	long
)	O
;	O
if	O
(	O
name_space	*(char)
==	O
NULL	O
)	O
{	O
closedir	(*(struct))->(int)
(	O
dirp	*(struct)
)	O
;	O
return	O
NULL	O
;	O
}	O
namep	*(char)
=	O
name_space	*(char)
;	O
while	O
(	O
(	O
dp	*(struct(long,long,short,char,array(char)))
=	O
readdir	(*(struct))->(*(struct(long,long,short,char,array(char))))
(	O
dirp	*(struct)
)	O
)	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
dp	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
[	O
0	int
]	O
!=	O
'.'	O
||	O
(	O
dp	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
[	O
1	int
]	O
!=	O
'\0'	O
&&	O
(	O
dp	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
[	O
1	int
]	O
!=	O
'.'	O
||	O
dp	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
[	O
2	int
]	O
!=	O
'\0'	O
)	O
)	O
)	O
{	O
size_t	long
namlen	long
=	O
strlen	(*(char))->(long)
(	O
dp	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
)	O
;	O
size_t	long
size_needed	long
=	O
(	O
namep	*(char)
-	O
name_space	*(char)
)	O
+	O
namlen	long
+	O
2	int
;	O
if	O
(	O
(	O
included_patterns	*(struct)
||	O
excluded_patterns	*(struct)
)	O
&&	O
!	O
isdir1	(*(char),*(char))->(int)
(	O
dir	*(char)
,	O
dp	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
)	O
)	O
{	O
if	O
(	O
included_patterns	*(struct)
&&	O
excluded_file_name	(*(struct),*(char))->(bool)
(	O
included_patterns	*(struct)
,	O
dp	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
)	O
)	O
continue	O
;	O
if	O
(	O
excluded_patterns	*(struct)
&&	O
excluded_file_name	(*(struct),*(char))->(bool)
(	O
excluded_patterns	*(struct)
,	O
dp	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
)	O
)	O
continue	O
;	O
}	O
if	O
(	O
excluded_directory_patterns	*(struct)
&&	O
isdir1	(*(char),*(char))->(int)
(	O
dir	*(char)
,	O
dp	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
)	O
)	O
{	O
if	O
(	O
excluded_directory_patterns	*(struct)
&&	O
excluded_file_name	(*(struct),*(char))->(bool)
(	O
excluded_directory_patterns	*(struct)
,	O
dp	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
)	O
)	O
continue	O
;	O
}	O
if	O
(	O
size_needed	long
>	O
name_size	long
)	O
{	O
char	O
*	O
new_name_space	*(char)
;	O
while	O
(	O
size_needed	long
>	O
name_size	long
)	O
name_size	long
+=	O
1024	int
;	O
new_name_space	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
name_space	*(char)
,	O
name_size	long
)	O
;	O
if	O
(	O
new_name_space	*(char)
==	O
NULL	O
)	O
{	O
closedir	(*(struct))->(int)
(	O
dirp	*(struct)
)	O
;	O
goto	O
fail	O
;	O
}	O
namep	*(char)
=	O
new_name_space	*(char)
+	O
(	O
namep	*(char)
-	O
name_space	*(char)
)	O
;	O
name_space	*(char)
=	O
new_name_space	*(char)
;	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
namep	*(char)
,	O
dp	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
)	O
;	O
namep	*(char)
+=	O
namlen	long
+	O
1	int
;	O
}	O
}	O
*	O
namep	*(char)
=	O
'\0'	O
;	O
if	O
(	O
CLOSEDIR	O
(	O
dirp	*(struct)
)	O
)	O
{	O
fail	O
:	O
free	(*(void))->(void)
(	O
name_space	*(char)
)	O
;	O
name_space	*(char)
=	O
NULL	O
;	O
}	O
if	O
(	O
path	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
path	*(char)
)	O
;	O
path	*(char)
=	O
NULL	O
;	O
pathlen	long
=	O
0	int
;	O
}	O
return	O
name_space	*(char)
;	O
}	O
