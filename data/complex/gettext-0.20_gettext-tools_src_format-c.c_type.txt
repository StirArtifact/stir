static	O
void	O
*	O
format_parse	O
(	O
const	O
char	O
*	O
format	O
,	O
bool	bool
translated	O
,	O
bool	bool
objc_extensions	O
,	O
char	O
*	O
fdi	O
,	O
char	O
*	O
*	O
invalid_reason	O
)	O
{	O
struct	O
spec	O
result_buf	O
;	O
struct	O
spec	O
*	O
result	*(*(void))
;	O
result	*(*(void))
=	O
format_parse_entrails	O
(	O
format	O
,	O
translated	O
,	O
objc_extensions	O
,	O
fdi	O
,	O
invalid_reason	O
,	O
&	O
result_buf	O
)	O
;	O
if	O
(	O
result	*(*(void))
!=	O
NULL	O
)	O
{	O
struct	O
spec	O
*	O
safe_result	O
=	O
XMALLOC	O
(	O
struct	O
spec	O
)	O
;	O
*	O
safe_result	O
=	O
*	O
result	*(*(void))
;	O
result	*(*(void))
=	O
safe_result	O
;	O
}	O
return	O
result	*(*(void))
;	O
}	O
static	O
void	O
*	O
format_c_parse	O
(	O
const	O
char	O
*	O
format	O
,	O
bool	bool
translated	O
,	O
char	O
*	O
fdi	O
,	O
char	O
*	O
*	O
invalid_reason	O
)	O
{	O
return	O
format_parse	O
(	O
format	O
,	O
translated	O
,	O
false	int
,	O
fdi	O
,	O
invalid_reason	O
)	O
;	O
}	O
static	O
void	O
*	O
format_objc_parse	O
(	O
const	O
char	O
*	O
format	O
,	O
bool	bool
translated	O
,	O
char	O
*	O
fdi	O
,	O
char	O
*	O
*	O
invalid_reason	O
)	O
{	O
return	O
format_parse	O
(	O
format	O
,	O
translated	O
,	O
true	O
,	O
fdi	O
,	O
invalid_reason	O
)	O
;	O
}	O
static	O
void	O
format_free	O
(	O
void	O
*	O
descr	O
)	O
{	O
struct	O
spec	O
*	O
spec	O
=	O
(	O
struct	O
spec	O
*	O
)	O
descr	O
;	O
if	O
(	O
spec	O
->	O
unnumbered	O
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
spec	O
->	O
unnumbered	O
)	O
;	O
if	O
(	O
spec	O
->	O
sysdep_directives	O
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
spec	O
->	O
sysdep_directives	O
)	O
;	O
free	(*(void))->(void)
(	O
spec	O
)	O
;	O
}	O
static	O
bool	bool
format_is_unlikely_intentional	O
(	O
void	O
*	O
descr	O
)	O
{	O
struct	O
spec	O
*	O
spec	O
=	O
(	O
struct	O
spec	O
*	O
)	O
descr	O
;	O
return	O
spec	O
->	O
unlikely_intentional	O
;	O
}	O
static	O
int	O
format_get_number_of_directives	O
(	O
void	O
*	O
descr	O
)	O
{	O
struct	O
spec	O
*	O
spec	O
=	O
(	O
struct	O
spec	O
*	O
)	O
descr	O
;	O
return	O
spec	O
->	O
directives	O
;	O
}	O
static	O
bool	bool
format_check	O
(	O
void	O
*	O
msgid_descr	O
,	O
void	O
*	O
msgstr_descr	O
,	O
bool	bool
equality	O
,	O
formatstring_error_logger_t	O
error_logger	O
,	O
const	O
char	O
*	O
pretty_msgid	O
,	O
const	O
char	O
*	O
pretty_msgstr	O
)	O
{	O
struct	O
spec	O
*	O
spec1	O
=	O
(	O
struct	O
spec	O
*	O
)	O
msgid_descr	O
;	O
struct	O
spec	O
*	O
spec2	O
=	O
(	O
struct	O
spec	O
*	O
)	O
msgstr_descr	O
;	O
bool	bool
err	O
=	O
false	int
;	O
unsigned	O
int	O
i	long
;	O
if	O
(	O
equality	O
?	O
spec1	O
->	O
unnumbered_arg_count	O
!=	O
spec2	O
->	O
unnumbered_arg_count	O
:	O
spec1	O
->	O
unnumbered_arg_count	O
<	O
spec2	O
->	O
unnumbered_arg_count	O
)	O
{	O
if	O
(	O
error_logger	O
)	O
error_logger	O
(	O
_	O
(	O
"number of format specifications in '%s' and '%s' does not match"	*(char)
)	O
,	O
pretty_msgid	O
,	O
pretty_msgstr	O
)	O
;	O
err	O
=	O
true	O
;	O
}	O
else	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
spec2	O
->	O
unnumbered_arg_count	O
;	O
i	long
++	O
)	O
if	O
(	O
spec1	O
->	O
unnumbered	O
[	O
i	long
]	O
.	O
type	O
!=	O
spec2	O
->	O
unnumbered	O
[	O
i	long
]	O
.	O
type	O
)	O
{	O
if	O
(	O
error_logger	O
)	O
error_logger	O
(	O
_	O
(	O
"format specifications in '%s' and '%s' for argument %u are not the same"	*(char)
)	O
,	O
pretty_msgid	O
,	O
pretty_msgstr	O
,	O
i	long
+	O
1	int
)	O
;	O
err	O
=	O
true	O
;	O
}	O
return	O
err	O
;	O
}	O
struct	O
formatstring_parser	O
formatstring_c	O
=	O
{	O
format_c_parse	O
,	O
format_free	O
,	O
format_get_number_of_directives	O
,	O
format_is_unlikely_intentional	O
,	O
format_check	O
}	O
;	O
struct	O
formatstring_parser	O
formatstring_objc	O
=	O
{	O
format_objc_parse	O
,	O
format_free	O
,	O
format_get_number_of_directives	O
,	O
format_is_unlikely_intentional	O
,	O
format_check	O
}	O
;	O
void	O
get_sysdep_c_format_directives	O
(	O
const	O
char	O
*	O
string	*(char)
,	O
bool	bool
translated	O
,	O
struct	O
interval	O
*	O
*	O
intervalsp	O
,	O
size_t	long
*	O
lengthp	O
)	O
{	O
char	O
*	O
invalid_reason	O
=	O
NULL	O
;	O
struct	O
spec	O
*	O
descr	O
=	O
(	O
struct	O
spec	O
*	O
)	O
format_parse	O
(	O
string	*(char)
,	O
translated	O
,	O
true	O
,	O
NULL	O
,	O
&	O
invalid_reason	O
)	O
;	O
if	O
(	O
descr	O
!=	O
NULL	O
&&	O
descr	O
->	O
sysdep_directives_count	O
>	O
0	int
)	O
{	O
unsigned	O
int	O
n	long
=	O
descr	O
->	O
sysdep_directives_count	O
;	O
struct	O
interval	O
*	O
intervals	O
=	O
XNMALLOC	O
(	O
n	long
,	O
struct	O
interval	O
)	O
;	O
unsigned	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	long
;	O
i	long
++	O
)	O
{	O
intervals	O
[	O
i	long
]	O
.	O
startpos	O
=	O
descr	O
->	O
sysdep_directives	O
[	O
2	int
*	O
i	long
]	O
-	O
string	*(char)
;	O
intervals	O
[	O
i	long
]	O
.	O
endpos	O
=	O
descr	O
->	O
sysdep_directives	O
[	O
2	int
*	O
i	long
+	O
1	int
]	O
-	O
string	*(char)
;	O
}	O
*	O
intervalsp	O
=	O
intervals	O
;	O
*	O
lengthp	O
=	O
n	long
;	O
}	O
else	O
{	O
*	O
intervalsp	O
=	O
NULL	O
;	O
*	O
lengthp	O
=	O
0	int
;	O
}	O
if	O
(	O
descr	O
!=	O
NULL	O
)	O
format_free	O
(	O
descr	O
)	O
;	O
else	O
free	(*(void))->(void)
(	O
invalid_reason	O
)	O
;	O
}	O
