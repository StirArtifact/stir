static	O
const	O
char	O
*	O
file	*(char)
;	O
static	O
int	O
unlock	int
;	O
static	O
int	O
flags	int
;	O
static	O
int	O
retries	int
;	O
static	O
unsigned	O
force	int
;	O
static	O
int	O
debug	int
;	O
static	O
void	O
cli_force	(*(struct(int,*(*(char)),long,*(*(struct`)),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)
(	O
struct	O
mu_parseopt	struct(int,*(*(char)),long,*(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char)))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))
*	O
po	*(struct(int,*(*(char)),long,*(*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char)))
,	O
struct	O
mu_option	struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)),*(char))
*	O
opt	*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct`),*(struct`),*(char))->(void)),*(char)))
,	O
char	O
const	O
*	O
arg	*(char)
)	O
{	O
if	O
(	O
arg	*(char)
)	O
{	O
int	O
rc	int
;	O
char	O
*	O
errmsg	*(*(char))
;	O
rc	int
=	O
mu_str_to_c	(*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*(*(char)))->(int)
(	O
arg	*(char)
,	O
opt	*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct`),*(struct`),*(char))->(void)),*(char)))
->	O
opt_type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
,	O
opt	*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct`),*(struct`),*(char))->(void)),*(char)))
->	O
opt_ptr	*(void)
,	O
&	O
errmsg	*(*(char))
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
if	O
(	O
opt	*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct`),*(struct`),*(char))->(void)),*(char)))
->	O
opt_long	*(char)
)	O
mu_parseopt_error	(*(struct(int,*(*(char)),long,*(*(struct`)),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))),*(char))->(void)
(	O
po	*(struct(int,*(*(char)),long,*(*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char)))
,	O
"--%s: %s"	*(char)
,	O
opt	*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct`),*(struct`),*(char))->(void)),*(char)))
->	O
opt_long	*(char)
,	O
errmsg	*(*(char))
?	O
errmsg	*(*(char))
:	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
else	O
mu_parseopt_error	(*(struct(int,*(*(char)),long,*(*(struct`)),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))),*(char))->(void)
(	O
po	*(struct(int,*(*(char)),long,*(*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char)))
,	O
"-%c: %s"	*(char)
,	O
opt	*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct`),*(struct`),*(char))->(void)),*(char)))
->	O
opt_short	int
,	O
errmsg	*(*(char))
?	O
errmsg	*(*(char))
:	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
free	(*(void))->(void)
(	O
errmsg	*(*(char))
)	O
;	O
exit	(int)->(void)
(	O
po	*(struct(int,*(*(char)),long,*(*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char)))
->	O
po_exit_error	int
)	O
;	O
}	O
}	O
else	O
*	O
(	O
unsigned	O
*	O
)	O
opt	*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct`),*(struct`),*(char))->(void)),*(char)))
->	O
opt_ptr	*(void)
=	O
1	int
;	O
}	O
static	O
struct	O
mu_option	struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)),*(char))
dotlock_options	array(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct(int,*`,long,*`,int,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,int,*`,int,int,int,long,*`)),*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`)),*(char))->(void)),*(char)))
[	O
]	O
=	O
{	O
{	O
"unlock"	*(char)
,	O
'u'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"unlock"	*(char)
)	O
,	O
mu_c_bool	int
,	O
&	O
unlock	int
}	O
,	O
{	O
"force"	*(char)
,	O
'f'	O
,	O
N_	O
(	O
"MINUTES"	*(char)
)	O
,	O
MU_OPTION_ARG_OPTIONAL	int
,	O
N_	O
(	O
"forcibly break an existing lock older than a certain time"	*(char)
)	O
,	O
mu_c_uint	int
,	O
&	O
force	int
,	O
cli_force	(*(struct(int,*(*(char)),long,*(*(struct`)),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)
}	O
,	O
{	O
"retry"	*(char)
,	O
'r'	O
,	O
N_	O
(	O
"RETRIES"	*(char)
)	O
,	O
MU_OPTION_ARG_OPTIONAL	int
,	O
N_	O
(	O
"retry the lock a few times"	*(char)
)	O
,	O
mu_c_int	int
,	O
&	O
retries	int
}	O
,	O
{	O
"debug"	*(char)
,	O
'd'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"print details of failure reasons to stderr"	*(char)
)	O
,	O
mu_c_bool	int
,	O
&	O
debug	int
}	O
,	O
MU_OPTION_END	O
}	O
,	O
*	O
options	array(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct`),*(struct`),*(char))->(void)),*(char))))
[	O
]	O
=	O
{	O
dotlock_options	array(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct(int,*`,long,*`,int,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,int,*`,int,int,int,long,*`)),*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`)),*(char))->(void)),*(char)))
,	O
NULL	O
}	O
;	O
struct	O
mu_cfg_param	struct(*(char),int,*(void),long,*((*(void),*(struct(int,union(*`,*`,struct`))))->(int)),*(char),*(char))
dotlock_cfg_param	array(struct(*(char),int,*(void),long,*((*(void),*(struct(int,union`)))->(int)),*(char),*(char)))
[	O
]	O
=	O
{	O
{	O
"force"	*(char)
,	O
mu_c_time	int
,	O
&	O
force	int
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Forcibly break an existing lock older than the specified time."	*(char)
)	O
}	O
,	O
{	O
"retry"	*(char)
,	O
mu_c_int	int
,	O
&	O
retries	int
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Number of times to retry acquiring the lock."	*(char)
)	O
}	O
,	O
{	O
"debug"	*(char)
,	O
mu_c_bool	int
,	O
&	O
debug	int
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Print details of failure reasons to stderr."	*(char)
)	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
struct	O
mu_cli_setup	struct(*(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char)))),*(struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))),*(char),*(char),*(*(char)),*(char),int,int,int,int,*((*(struct))->(void)))
cli	struct(*(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char)))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*(char),*(char),*(*(char)),*(char),int,int,int,int,*((*(struct))->(void)))
=	O
{	O
options	array(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct`),*(struct`),*(char))->(void)),*(char))))
,	O
dotlock_cfg_param	array(struct(*(char),int,*(void),long,*((*(void),*(struct(int,union`)))->(int)),*(char),*(char)))
,	O
N_	O
(	O
"GNU dotlock -- lock mail spool files."	*(char)
)	O
,	O
N_	O
(	O
"FILE"	*(char)
)	O
,	O
NULL	O
,	O
N_	O
(	O
"Returns 0 on success, 3 if locking the file fails because it's already locked, and 1 if some other kind of error occurred."	*(char)
)	O
,	O
MU_DL_EX_ERROR	int
,	O
MU_DL_EX_ERROR	int
}	O
;	O
char	O
*	O
capa	*(struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*((*(void))->(void))))
[	O
]	O
=	O
{	O
"debug"	*(char)
,	O
NULL	O
}	O
;	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	*(*(char))
[	O
]	O
)	O
{	O
mu_locker_t	*(struct)
locker	*(struct)
=	O
0	int
;	O
int	O
err	int
=	O
0	int
;	O
pid_t	int
usergid	int
=	O
getgid	()->(int)
(	O
)	O
;	O
pid_t	int
mailgid	int
=	O
getegid	()->(int)
(	O
)	O
;	O
MU_APP_INIT_NLS	O
(	O
)	O
;	O
if	O
(	O
setegid	(int)->(int)
(	O
usergid	int
)	O
<	O
0	int
)	O
return	O
MU_DL_EX_ERROR	int
;	O
mu_cli	(int,*(*(char)),*(struct(*(*(struct`)),*(struct(*`,int,*`,long,*`,*`,*`)),*(char),*(char),*(*(char)),*(char),int,int,int,int,*((*`)->(void)))),*(*(char)),*(void),*(int),*(*(*(char))))->(void)
(	O
argc	int
,	O
argv	*(*(char))
,	O
&	O
cli	struct(*(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char)))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*(char),*(char),*(*(char)),*(char),int,int,int,int,*((*(struct))->(void)))
,	O
capa	*(struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*((*(void))->(void))))
,	O
NULL	O
,	O
&	O
argc	int
,	O
&	O
argv	*(*(char))
)	O
;	O
switch	O
(	O
argc	int
)	O
{	O
case	O
0	int
:	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"FILE must be specified"	*(char)
)	O
)	O
;	O
exit	(int)->(void)
(	O
MU_DL_EX_ERROR	int
)	O
;	O
case	O
1	int
:	O
file	*(char)
=	O
argv	*(*(char))
[	O
0	int
]	O
;	O
break	O
;	O
default	O
:	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"only one FILE can be specified"	*(char)
)	O
)	O
;	O
}	O
if	O
(	O
force	int
)	O
{	O
force	int
*=	O
60	int
;	O
flags	int
|=	O
MU_LOCKER_TIME	int
;	O
}	O
if	O
(	O
retries	int
!=	O
0	int
)	O
flags	int
|=	O
MU_LOCKER_RETRY	int
;	O
if	O
(	O
(	O
err	int
=	O
mu_locker_create	(*(*(struct)),*(char),int)->(int)
(	O
&	O
locker	*(struct)
,	O
file	*(char)
,	O
flags	int
)	O
)	O
)	O
{	O
if	O
(	O
debug	int
)	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_locker_create"	*(char)
,	O
NULL	O
,	O
err	int
)	O
;	O
return	O
MU_DL_EX_ERROR	int
;	O
}	O
if	O
(	O
force	int
!=	O
0	int
)	O
mu_locker_set_expire_time	(*(struct),int)->(int)
(	O
locker	*(struct)
,	O
force	int
)	O
;	O
if	O
(	O
retries	int
!=	O
0	int
)	O
mu_locker_set_retries	(*(struct),int)->(int)
(	O
locker	*(struct)
,	O
retries	int
)	O
;	O
if	O
(	O
setegid	(int)->(int)
(	O
mailgid	int
)	O
<	O
0	int
)	O
return	O
MU_DL_EX_ERROR	int
;	O
if	O
(	O
unlock	int
)	O
err	int
=	O
mu_locker_remove_lock	(*(struct))->(int)
(	O
locker	*(struct)
)	O
;	O
else	O
err	int
=	O
mu_locker_lock	(*(struct))->(int)
(	O
locker	*(struct)
)	O
;	O
setegid	(int)->(int)
(	O
usergid	int
)	O
;	O
mu_locker_destroy	(*(*(struct)))->(void)
(	O
&	O
locker	*(struct)
)	O
;	O
if	O
(	O
debug	int
&&	O
err	int
)	O
mu_error	(*(char))->(int)
(	O
unlock	int
?	O
_	O
(	O
"unlocking the file %s failed: %s"	*(char)
)	O
:	O
_	O
(	O
"locking the file %s failed: %s"	*(char)
)	O
,	O
file	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
err	int
)	O
)	O
;	O
switch	O
(	O
err	int
)	O
{	O
case	O
0	int
:	O
err	int
=	O
MU_DL_EX_OK	int
;	O
break	O
;	O
case	O
EPERM	int
:	O
err	int
=	O
MU_DL_EX_PERM	int
;	O
break	O
;	O
case	O
MU_ERR_LOCK_NOT_HELD	O
:	O
err	int
=	O
MU_DL_EX_NEXIST	int
;	O
break	O
;	O
case	O
MU_ERR_LOCK_CONFLICT	O
:	O
err	int
=	O
MU_DL_EX_EXIST	int
;	O
break	O
;	O
default	O
:	O
err	int
=	O
MU_DL_EX_ERROR	int
;	O
break	O
;	O
}	O
return	O
err	int
;	O
}	O
