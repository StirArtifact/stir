extern	O
gboolean	int
ecs_mbstr_to_str	(*(*(char)),*(char))->(int)
(	O
ecs_char	char
*	O
*	O
ret_str	*(*(char))
,	O
const	O
char	O
*	O
s	*(char)
)	O
{	O
*	O
ret_str	*(*(char))
=	O
g_strdup	(*(char))->(*(char))
(	O
s	*(char)
)	O
;	O
return	O
TRUE	O
;	O
}	O
extern	O
gboolean	int
ecs_str_to_mbstr	(*(*(char)),*(char))->(int)
(	O
char	O
*	O
*	O
ret_str	*(*(char))
,	O
const	O
ecs_char	char
*	O
s	*(char)
)	O
{	O
*	O
ret_str	*(*(char))
=	O
g_strdup	(*(char))->(*(char))
(	O
s	*(char)
)	O
;	O
return	O
TRUE	O
;	O
}	O
extern	O
gboolean	int
ecs_isalnum	(char)->(int)
(	O
ecs_char	char
c	int
)	O
{	O
return	O
ECS_CTYPE	O
(	O
iswalnum	O
,	O
isalnum	(int)->(int)
,	O
c	int
)	O
;	O
}	O
extern	O
gboolean	int
ecs_isalpha	(char)->(int)
(	O
ecs_char	char
c	int
)	O
{	O
return	O
ECS_CTYPE	O
(	O
iswalpha	O
,	O
isalpha	(int)->(int)
,	O
c	int
)	O
;	O
}	O
extern	O
gboolean	int
ecs_iscntrl	(char)->(int)
(	O
ecs_char	char
c	int
)	O
{	O
return	O
ECS_CTYPE	O
(	O
iswcntrl	O
,	O
iscntrl	(int)->(int)
,	O
c	int
)	O
;	O
}	O
extern	O
gboolean	int
ecs_isdigit	(char)->(int)
(	O
ecs_char	char
c	int
)	O
{	O
return	O
ECS_CTYPE	O
(	O
iswdigit	O
,	O
isdigit	(int)->(int)
,	O
c	int
)	O
;	O
}	O
extern	O
gboolean	int
ecs_isgraph	(char)->(int)
(	O
ecs_char	char
c	int
)	O
{	O
return	O
ECS_CTYPE	O
(	O
iswgraph	O
,	O
isgraph	(int)->(int)
,	O
c	int
)	O
;	O
}	O
extern	O
gboolean	int
ecs_islower	(char)->(int)
(	O
ecs_char	char
c	int
)	O
{	O
return	O
ECS_CTYPE	O
(	O
iswlower	O
,	O
islower	(int)->(int)
,	O
c	int
)	O
;	O
}	O
extern	O
gboolean	int
ecs_isprint	(char)->(int)
(	O
ecs_char	char
c	int
)	O
{	O
return	O
ECS_CTYPE	O
(	O
iswprint	O
,	O
isprint	(int)->(int)
,	O
c	int
)	O
;	O
}	O
extern	O
gboolean	int
ecs_ispunct	(char)->(int)
(	O
ecs_char	char
c	int
)	O
{	O
return	O
ECS_CTYPE	O
(	O
iswpunct	O
,	O
ispunct	(int)->(int)
,	O
c	int
)	O
;	O
}	O
extern	O
gboolean	int
ecs_isspace	(char)->(int)
(	O
ecs_char	char
c	int
)	O
{	O
return	O
ECS_CTYPE	O
(	O
iswspace	O
,	O
isspace	(int)->(int)
,	O
c	int
)	O
;	O
}	O
extern	O
gboolean	int
ecs_isupper	(char)->(int)
(	O
ecs_char	char
c	int
)	O
{	O
return	O
ECS_CTYPE	O
(	O
iswupper	O
,	O
isupper	(int)->(int)
,	O
c	int
)	O
;	O
}	O
extern	O
gboolean	int
ecs_isxdigit	(char)->(int)
(	O
ecs_char	char
c	int
)	O
{	O
return	O
ECS_CTYPE	O
(	O
iswxdigit	O
,	O
isxdigit	(int)->(int)
,	O
c	int
)	O
;	O
}	O
int	O
ecs_strcmp	(*(char),*(char))->(int)
(	O
const	O
ecs_char	char
*	O
a	*(void)
,	O
const	O
ecs_char	char
*	O
b	*(void)
)	O
{	O
size_t	long
i	array(int)
;	O
unsigned	O
long	O
ca	long
,	O
cb	long
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
a	*(void)
[	O
i	array(int)
]	O
==	O
b	*(void)
[	O
i	array(int)
]	O
;	O
i	array(int)
++	O
)	O
{	O
if	O
(	O
a	*(void)
[	O
i	array(int)
]	O
==	O
ECS_CHAR	O
(	O
'\0'	O
)	O
)	O
return	O
0	int
;	O
}	O
ca	long
=	O
(	O
unsigned	O
long	O
)	O
a	*(void)
[	O
i	array(int)
]	O
;	O
cb	long
=	O
(	O
unsigned	O
long	O
)	O
b	*(void)
[	O
i	array(int)
]	O
;	O
return	O
(	O
ca	long
<	O
cb	long
)	O
?	O
-	O
1	int
:	O
(	O
ca	long
>	O
cb	long
)	O
?	O
1	int
:	O
0	int
;	O
}	O
ecs_char	char
*	O
ecs_strchr	(*(char),char)->(*(char))
(	O
const	O
ecs_char	char
*	O
s	*(char)
,	O
ecs_char	char
c	int
)	O
{	O
size_t	long
i	array(int)
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
s	*(char)
[	O
i	array(int)
]	O
!=	O
c	int
;	O
i	array(int)
++	O
)	O
{	O
if	O
(	O
s	*(char)
[	O
i	array(int)
]	O
==	O
ECS_CHAR	O
(	O
'\0'	O
)	O
)	O
return	O
NULL	O
;	O
}	O
return	O
(	O
ecs_char	char
*	O
)	O
s	*(char)
+	O
i	array(int)
;	O
}	O
size_t	long
ecs_strcspn	(*(char),*(char))->(long)
(	O
const	O
ecs_char	char
*	O
haystack	*(struct(*(*(void)),int))
,	O
const	O
ecs_char	char
*	O
needles	*(char)
)	O
{	O
size_t	long
i	array(int)
,	O
j	long
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
haystack	*(struct(*(*(void)),int))
[	O
i	array(int)
]	O
!=	O
ECS_CHAR	O
(	O
'\0'	O
)	O
;	O
i	array(int)
++	O
)	O
{	O
for	O
(	O
j	long
=	O
0	int
;	O
needles	*(char)
[	O
j	long
]	O
!=	O
ECS_CHAR	O
(	O
'\0'	O
)	O
;	O
j	long
++	O
)	O
{	O
if	O
(	O
haystack	*(struct(*(*(void)),int))
[	O
i	array(int)
]	O
==	O
needles	*(char)
[	O
j	long
]	O
)	O
return	O
i	array(int)
;	O
}	O
}	O
return	O
i	array(int)
;	O
}	O
ecs_char	char
*	O
ecs_strrchr	(*(char),char)->(*(char))
(	O
const	O
ecs_char	char
*	O
s	*(char)
,	O
ecs_char	char
c	int
)	O
{	O
ecs_char	char
*	O
pos	*(char)
;	O
size_t	long
i	array(int)
;	O
for	O
(	O
i	array(int)
=	O
0	int
,	O
pos	*(char)
=	O
NULL	O
;	O
;	O
i	array(int)
++	O
)	O
{	O
if	O
(	O
s	*(char)
[	O
i	array(int)
]	O
==	O
c	int
)	O
pos	*(char)
=	O
(	O
ecs_char	char
*	O
)	O
s	*(char)
+	O
i	array(int)
;	O
if	O
(	O
s	*(char)
[	O
i	array(int)
]	O
==	O
ECS_CHAR	O
(	O
'\0'	O
)	O
)	O
return	O
pos	*(char)
;	O
}	O
}	O
size_t	long
ecs_strspn	(*(char),*(char))->(long)
(	O
const	O
ecs_char	char
*	O
s	*(char)
,	O
const	O
ecs_char	char
*	O
chars	*(char)
)	O
{	O
size_t	long
i	array(int)
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
s	*(char)
[	O
i	array(int)
]	O
!=	O
ECS_CHAR	O
(	O
'\0'	O
)	O
;	O
i	array(int)
++	O
)	O
{	O
if	O
(	O
ecs_strchr	(*(char),char)->(*(char))
(	O
chars	*(char)
,	O
s	*(char)
[	O
i	array(int)
]	O
)	O
==	O
NULL	O
)	O
break	O
;	O
}	O
return	O
i	array(int)
;	O
}	O
ecs_char	char
*	O
ecs_strstr	(*(char),*(char))->(*(char))
(	O
const	O
ecs_char	char
*	O
s	*(char)
,	O
const	O
ecs_char	char
*	O
sub	*(char)
)	O
{	O
size_t	long
i	array(int)
,	O
j	long
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
s	*(char)
[	O
i	array(int)
]	O
!=	O
ECS_CHAR	O
(	O
'\0'	O
)	O
;	O
i	array(int)
++	O
)	O
{	O
for	O
(	O
j	long
=	O
0	int
;	O
sub	*(char)
[	O
j	long
]	O
!=	O
ECS_CHAR	O
(	O
'\0'	O
)	O
;	O
j	long
++	O
)	O
{	O
if	O
(	O
s	*(char)
[	O
i	array(int)
+	O
j	long
]	O
!=	O
sub	*(char)
[	O
j	long
]	O
)	O
goto	O
next_i	O
;	O
}	O
return	O
(	O
ecs_char	char
*	O
)	O
s	*(char)
+	O
i	array(int)
;	O
next_i	O
:	O
continue	O
;	O
}	O
return	O
NULL	O
;	O
}	O
size_t	long
ecs_strlen	(*(char))->(long)
(	O
const	O
ecs_char	char
*	O
s	*(char)
)	O
{	O
size_t	long
i	array(int)
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
s	*(char)
[	O
i	array(int)
]	O
!=	O
ECS_CHAR	O
(	O
'\0'	O
)	O
;	O
i	array(int)
++	O
)	O
continue	O
;	O
return	O
i	array(int)
;	O
}	O
ecs_char	char
*	O
ecs_xstrdup	(*(char))->(*(char))
(	O
const	O
ecs_char	char
*	O
s	*(char)
)	O
{	O
ecs_char	char
*	O
retval	*(void)
;	O
size_t	long
len	int
;	O
len	int
=	O
ecs_strlen	(*(char))->(long)
(	O
s	*(char)
)	O
;	O
retval	*(void)
=	O
g_new	O
(	O
ecs_char	char
,	O
len	int
+	O
1	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
retval	*(void)
,	O
s	*(char)
,	O
(	O
len	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
ecs_char	char
)	O
)	O
;	O
return	O
retval	*(void)
;	O
}	O
size_t	long
ecs_strlcpy	(*(char),*(char),long)->(long)
(	O
ecs_char	char
*	O
dst	*(char)
,	O
const	O
ecs_char	char
*	O
src	*(void)
,	O
size_t	long
dstsize	long
)	O
{	O
size_t	long
n	long
=	O
0	int
;	O
if	O
(	O
dstsize	long
>=	O
1	int
)	O
{	O
while	O
(	O
n	long
<	O
dstsize	long
-	O
1	int
&&	O
*	O
src	*(void)
!=	O
ECS_CHAR	O
(	O
'\0'	O
)	O
)	O
{	O
*	O
dst	*(char)
++	O
=	O
*	O
src	*(void)
++	O
;	O
n	long
++	O
;	O
}	O
*	O
dst	*(char)
=	O
ECS_CHAR	O
(	O
'\0'	O
)	O
;	O
}	O
while	O
(	O
*	O
src	*(void)
!=	O
ECS_CHAR	O
(	O
'\0'	O
)	O
)	O
{	O
n	long
++	O
;	O
src	*(void)
++	O
;	O
}	O
return	O
n	long
;	O
}	O
size_t	long
ecs_strlcat	(*(char),*(char),long)->(long)
(	O
ecs_char	char
*	O
dst	*(char)
,	O
const	O
ecs_char	char
*	O
src	*(void)
,	O
size_t	long
dstsize	long
)	O
{	O
size_t	long
di	long
=	O
0	int
;	O
while	O
(	O
di	long
<	O
dstsize	long
&&	O
dst	*(char)
[	O
di	long
]	O
!=	O
ECS_CHAR	O
(	O
'\0'	O
)	O
)	O
di	long
++	O
;	O
return	O
di	long
+	O
ecs_strlcpy	(*(char),*(char),long)->(long)
(	O
dst	*(char)
+	O
di	long
,	O
src	*(void)
,	O
dstsize	long
-	O
di	long
)	O
;	O
}	O
gboolean	int
ecs_strbox	(*(char),*(long),*(long))->(int)
(	O
const	O
ecs_char	char
*	O
s	*(char)
,	O
size_t	long
*	O
ret_width	*(long)
,	O
size_t	long
*	O
ret_height	*(long)
)	O
{	O
size_t	long
nlines	long
=	O
0	int
,	O
ncolumns	long
=	O
0	int
,	O
colindex	long
=	O
0	int
,	O
i	array(int)
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
s	*(char)
[	O
i	array(int)
]	O
!=	O
ECS_CHAR	O
(	O
'\0'	O
)	O
;	O
i	array(int)
++	O
)	O
{	O
if	O
(	O
s	*(char)
[	O
i	array(int)
]	O
==	O
ECS_CHAR	O
(	O
'\n'	O
)	O
)	O
{	O
nlines	long
++	O
;	O
colindex	long
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
!	O
ecs_isprint	(char)->(int)
(	O
s	*(char)
[	O
i	array(int)
]	O
)	O
)	O
return	O
FALSE	O
;	O
colindex	long
++	O
;	O
if	O
(	O
colindex	long
>	O
ncolumns	long
)	O
ncolumns	long
=	O
colindex	long
;	O
}	O
}	O
*	O
ret_width	*(long)
=	O
ncolumns	long
;	O
*	O
ret_height	*(long)
=	O
nlines	long
;	O
return	O
TRUE	O
;	O
}	O
