char	O
*	O
diskfs_server_name	*(char)
=	O
"tmpfs"	*(char)
;	O
char	O
*	O
diskfs_server_version	*(char)
=	O
HURD_VERSION	O
;	O
char	O
*	O
diskfs_extra_version	*(char)
=	O
"GNU Hurd"	*(char)
;	O
char	O
*	O
diskfs_disk_name	*(char)
=	O
"none"	*(char)
;	O
int	O
diskfs_default_sync_interval	int
=	O
0	int
;	O
int	O
diskfs_link_max	int
=	O
(	O
1ULL	int
<<	O
(	O
sizeof	O
(	O
nlink_t	long
)	O
*	O
CHAR_BIT	O
)	O
)	O
-	O
1	int
;	O
int	O
diskfs_name_max	int
=	O
255	int
;	O
int	O
diskfs_maxsymlinks	int
=	O
8	int
;	O
int	O
diskfs_shortcut_symlink	int
=	O
1	int
;	O
int	O
diskfs_shortcut_chrdev	int
=	O
1	int
;	O
int	O
diskfs_shortcut_blkdev	int
=	O
1	int
;	O
int	O
diskfs_shortcut_fifo	int
=	O
1	int
;	O
int	O
diskfs_shortcut_ifsock	int
=	O
1	int
;	O
struct	O
node	O
*	O
diskfs_root_node	*(struct)
;	O
mach_port_t	O
default_pager	int
;	O
off_t	long
tmpfs_page_limit	long
,	O
tmpfs_space_used	long
;	O
mode_t	int
tmpfs_root_mode	int
=	O
-	O
1	int
;	O
error_t	int
diskfs_set_statfs	(*(struct))->(int)
(	O
struct	O
statfs	O
*	O
st	*(struct)
)	O
{	O
fsblkcnt_t	long
pages	long
;	O
st	*(struct)
->	O
f_type	O
=	O
FSTYPE_MEMFS	O
;	O
st	*(struct)
->	O
f_fsid	O
=	O
getpid	()->(int)
(	O
)	O
;	O
st	*(struct)
->	O
f_bsize	O
=	O
vm_page_size	O
;	O
st	*(struct)
->	O
f_blocks	O
=	O
tmpfs_page_limit	long
;	O
st	*(struct)
->	O
f_files	O
=	O
__atomic_load_n	O
(	O
&	O
num_files	int
,	O
__ATOMIC_RELAXED	int
)	O
;	O
pages	long
=	O
round_page	()->(int)
(	O
get_used	()->(long)
(	O
)	O
)	O
/	O
vm_page_size	O
;	O
st	*(struct)
->	O
f_bfree	O
=	O
pages	long
<	O
tmpfs_page_limit	long
?	O
tmpfs_page_limit	long
-	O
pages	long
:	O
0	int
;	O
st	*(struct)
->	O
f_bavail	O
=	O
st	*(struct)
->	O
f_bfree	O
;	O
st	*(struct)
->	O
f_ffree	O
=	O
st	*(struct)
->	O
f_bavail	O
/	O
sizeof	O
(	O
struct	O
disknode	struct(char,int,long,int,long,int,int,int,struct(long,long),struct(long,long),struct(long,long),int,*(char),long,union(*(char),struct(int,int,int),struct(*(struct),*(struct(char,int,long,int,long,int,int,int,struct(long,long),struct(long,long),struct(long,long),int,*(char),long,union(*`,struct`,struct`,long,long),*(struct`),*(*`)))),long,long),*(struct),*(*(struct)))
)	O
;	O
return	O
0	int
;	O
}	O
error_t	int
diskfs_set_hypermetadata	(int,int)->(int)
(	O
int	O
wait	int
,	O
int	O
clean	int
)	O
{	O
return	O
0	int
;	O
}	O
void	O
diskfs_sync_everything	(int)->(void)
(	O
int	O
wait	int
)	O
{	O
}	O
error_t	int
diskfs_reload_global_state	()->(int)
(	O
)	O
{	O
return	O
0	int
;	O
}	O
int	O
diskfs_synchronous	int
=	O
0	int
;	O
static	O
const	O
struct	O
argp_option	struct(*(char),int,*(char),int,*(char),int)
options	*(struct(*(char),int,*(char),int,*(char),int))
[	O
]	O
=	O
{	O
{	O
"mode"	*(char)
,	O
'm'	O
,	O
"MODE"	*(char)
,	O
0	int
,	O
"Permissions (octal) for root directory"	*(char)
}	O
,	O
{	O
"size"	*(char)
,	O
OPT_SIZE	int
,	O
"MAX-BYTES"	*(char)
,	O
0	int
,	O
"Maximum size"	*(char)
}	O
,	O
{	O
NULL	O
,	O
}	O
}	O
;	O
struct	O
option_values	struct(long,int)
{	O
off_t	long
size	long
;	O
mode_t	int
mode	int
;	O
}	O
;	O
static	O
error_t	int
parse_opt_size	(*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))),*(long))->(int)
(	O
const	O
char	O
*	O
arg	*(char)
,	O
struct	O
argp_state	struct(*(struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct`))->(int)),*(char),*(char),*(struct(*(struct`),int,*(char),int)),*((int,*(char),*(void))->(*(char))),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(void))
*	O
state	*(struct(*(struct(*(struct`),*((int,*`,*`)->(int)),*(char),*(char),*(struct`),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void)))
,	O
off_t	long
*	O
newsize	*(long)
)	O
{	O
char	O
*	O
end	*(char)
=	O
NULL	O
;	O
intmax_t	long
size	long
=	O
strtoimax	(*(char),*(*(char)),int)->(long)
(	O
arg	*(char)
,	O
&	O
end	*(char)
,	O
0	int
)	O
;	O
if	O
(	O
end	*(char)
==	O
NULL	O
||	O
end	*(char)
==	O
arg	*(char)
)	O
{	O
argp_error	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))),*(char))->(void)
(	O
state	*(struct(*(struct(*(struct`),*((int,*`,*`)->(int)),*(char),*(char),*(struct`),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void)))
,	O
"argument must be a number"	*(char)
)	O
;	O
return	O
EINVAL	int
;	O
}	O
if	O
(	O
size	long
<	O
0	int
)	O
{	O
argp_error	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))),*(char))->(void)
(	O
state	*(struct(*(struct(*(struct`),*((int,*`,*`)->(int)),*(char),*(char),*(struct`),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void)))
,	O
"negative size not meaningful"	*(char)
)	O
;	O
return	O
EINVAL	int
;	O
}	O
switch	O
(	O
*	O
end	*(char)
)	O
{	O
case	O
'g'	O
:	O
case	O
'G'	O
:	O
size	long
<<=	O
10	int
;	O
case	O
'm'	O
:	O
case	O
'M'	O
:	O
size	long
<<=	O
10	int
;	O
case	O
'k'	O
:	O
case	O
'K'	O
:	O
size	long
<<=	O
10	int
;	O
break	O
;	O
case	O
'%'	O
:	O
{	O
struct	O
vm_statistics	()->(int)
vmstats	struct
;	O
error_t	int
err	int
=	O
vm_statistics	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
&	O
vmstats	struct
)	O
;	O
if	O
(	O
err	int
)	O
{	O
argp_error	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))),*(char))->(void)
(	O
state	*(struct(*(struct(*(struct`),*((int,*`,*`)->(int)),*(char),*(char),*(struct`),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void)))
,	O
"cannot find total physical memory: %s"	*(char)
,	O
strerror	(int)->(*(char))
(	O
err	int
)	O
)	O
;	O
return	O
err	int
;	O
}	O
size	long
=	O
round_page	()->(int)
(	O
(	O
(	O
(	O
vmstats	struct
.	O
free_count	O
+	O
vmstats	struct
.	O
active_count	O
+	O
vmstats	struct
.	O
inactive_count	O
+	O
vmstats	struct
.	O
wire_count	O
)	O
*	O
vm_page_size	O
)	O
*	O
size	long
+	O
99	int
)	O
/	O
100	int
)	O
;	O
break	O
;	O
}	O
}	O
size	long
=	O
(	O
off_t	long
)	O
size	long
;	O
if	O
(	O
size	long
<	O
0	int
)	O
{	O
argp_error	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))),*(char))->(void)
(	O
state	*(struct(*(struct(*(struct`),*((int,*`,*`)->(int)),*(char),*(char),*(struct`),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void)))
,	O
"size too large"	*(char)
)	O
;	O
return	O
EINVAL	int
;	O
}	O
*	O
newsize	*(long)
=	O
size	long
;	O
return	O
0	int
;	O
}	O
static	O
error_t	int
parse_opt	(int,*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))))->(int)
(	O
int	O
key	int
,	O
char	O
*	O
arg	*(char)
,	O
struct	O
argp_state	struct(*(struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct`))->(int)),*(char),*(char),*(struct(*(struct`),int,*(char),int)),*((int,*(char),*(void))->(*(char))),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(void))
*	O
state	*(struct(*(struct(*(struct`),*((int,*`,*`)->(int)),*(char),*(char),*(struct`),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void)))
)	O
{	O
struct	O
option_values	struct(long,int)
*	O
values	*(struct(long,int))
=	O
state	*(struct(*(struct(*(struct`),*((int,*`,*`)->(int)),*(char),*(char),*(struct`),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void)))
->	O
hook	*(void)
;	O
switch	O
(	O
key	int
)	O
{	O
case	O
ARGP_KEY_INIT	int
:	O
state	*(struct(*(struct(*(struct`),*((int,*`,*`)->(int)),*(char),*(char),*(struct`),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void)))
->	O
child_inputs	*(*(void))
[	O
0	int
]	O
=	O
state	*(struct(*(struct(*(struct`),*((int,*`,*`)->(int)),*(char),*(char),*(struct`),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void)))
->	O
input	*(void)
;	O
values	*(struct(long,int))
=	O
malloc	O
(	O
sizeof	O
*	O
values	*(struct(long,int))
)	O
;	O
if	O
(	O
values	*(struct(long,int))
==	O
0	int
)	O
return	O
ENOMEM	int
;	O
state	*(struct(*(struct(*(struct`),*((int,*`,*`)->(int)),*(char),*(char),*(struct`),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void)))
->	O
hook	*(void)
=	O
values	*(struct(long,int))
;	O
values	*(struct(long,int))
->	O
size	long
=	O
-	O
1	int
;	O
values	*(struct(long,int))
->	O
mode	int
=	O
-	O
1	int
;	O
break	O
;	O
case	O
ARGP_KEY_FINI	int
:	O
free	()->(int)
(	O
values	*(struct(long,int))
)	O
;	O
state	*(struct(*(struct(*(struct`),*((int,*`,*`)->(int)),*(char),*(char),*(struct`),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void)))
->	O
hook	*(void)
=	O
0	int
;	O
break	O
;	O
case	O
'm'	O
:	O
{	O
char	O
*	O
end	*(char)
=	O
NULL	O
;	O
mode_t	int
mode	int
=	O
strtoul	O
(	O
arg	*(char)
,	O
&	O
end	*(char)
,	O
8	int
)	O
;	O
if	O
(	O
end	*(char)
==	O
NULL	O
||	O
end	*(char)
==	O
arg	*(char)
)	O
{	O
argp_error	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))),*(char))->(void)
(	O
state	*(struct(*(struct(*(struct`),*((int,*`,*`)->(int)),*(char),*(char),*(struct`),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void)))
,	O
"argument must be an octal number"	*(char)
)	O
;	O
return	O
EINVAL	int
;	O
}	O
if	O
(	O
mode	int
&	O
S_IFMT	O
)	O
{	O
argp_error	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))),*(char))->(void)
(	O
state	*(struct(*(struct(*(struct`),*((int,*`,*`)->(int)),*(char),*(char),*(struct`),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void)))
,	O
"invalid bits in mode"	*(char)
)	O
;	O
return	O
EINVAL	int
;	O
}	O
values	*(struct(long,int))
->	O
mode	int
=	O
mode	int
;	O
}	O
break	O
;	O
case	O
OPT_SIZE	int
:	O
{	O
error_t	int
err	int
=	O
parse_opt_size	(*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))),*(long))->(int)
(	O
arg	*(char)
,	O
state	*(struct(*(struct(*(struct`),*((int,*`,*`)->(int)),*(char),*(char),*(struct`),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void)))
,	O
&	O
values	*(struct(long,int))
->	O
size	long
)	O
;	O
if	O
(	O
err	int
)	O
return	O
err	int
;	O
}	O
break	O
;	O
case	O
ARGP_KEY_NO_ARGS	int
:	O
if	O
(	O
values	*(struct(long,int))
->	O
size	long
<	O
0	int
)	O
{	O
argp_error	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))),*(char))->(void)
(	O
state	*(struct(*(struct(*(struct`),*((int,*`,*`)->(int)),*(char),*(char),*(struct`),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void)))
,	O
"must supply maximum size"	*(char)
)	O
;	O
return	O
EINVAL	int
;	O
}	O
break	O
;	O
case	O
ARGP_KEY_ARGS	int
:	O
if	O
(	O
state	*(struct(*(struct(*(struct`),*((int,*`,*`)->(int)),*(char),*(char),*(struct`),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void)))
->	O
argv	*(*(char))
[	O
state	*(struct(*(struct(*(struct`),*((int,*`,*`)->(int)),*(char),*(char),*(struct`),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void)))
->	O
next	int
+	O
1	int
]	O
!=	O
0	int
)	O
{	O
argp_error	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))),*(char))->(void)
(	O
state	*(struct(*(struct(*(struct`),*((int,*`,*`)->(int)),*(char),*(char),*(struct`),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void)))
,	O
"too many arguments"	*(char)
)	O
;	O
return	O
EINVAL	int
;	O
}	O
else	O
if	O
(	O
values	*(struct(long,int))
->	O
size	long
>=	O
0	int
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
state	*(struct(*(struct(*(struct`),*((int,*`,*`)->(int)),*(char),*(char),*(struct`),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void)))
->	O
argv	*(*(char))
[	O
state	*(struct(*(struct(*(struct`),*((int,*`,*`)->(int)),*(char),*(char),*(struct`),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void)))
->	O
next	int
]	O
,	O
"tmpfs"	*(char)
)	O
!=	O
0	int
)	O
{	O
argp_error	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))),*(char))->(void)
(	O
state	*(struct(*(struct(*(struct`),*((int,*`,*`)->(int)),*(char),*(char),*(struct`),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void)))
,	O
"size specified with --size and argument is not \"tmpfs\""	*(char)
)	O
;	O
return	O
EINVAL	int
;	O
}	O
}	O
else	O
{	O
error_t	int
err	int
=	O
parse_opt_size	(*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))),*(long))->(int)
(	O
state	*(struct(*(struct(*(struct`),*((int,*`,*`)->(int)),*(char),*(char),*(struct`),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void)))
->	O
argv	*(*(char))
[	O
state	*(struct(*(struct(*(struct`),*((int,*`,*`)->(int)),*(char),*(char),*(struct`),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void)))
->	O
next	int
]	O
,	O
state	*(struct(*(struct(*(struct`),*((int,*`,*`)->(int)),*(char),*(char),*(struct`),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void)))
,	O
&	O
values	*(struct(long,int))
->	O
size	long
)	O
;	O
if	O
(	O
err	int
)	O
return	O
err	int
;	O
}	O
break	O
;	O
case	O
ARGP_KEY_SUCCESS	int
:	O
tmpfs_page_limit	long
=	O
values	*(struct(long,int))
->	O
size	long
/	O
vm_page_size	O
;	O
tmpfs_root_mode	int
=	O
values	*(struct(long,int))
->	O
mode	int
;	O
break	O
;	O
default	O
:	O
return	O
ARGP_ERR_UNKNOWN	O
;	O
}	O
return	O
0	int
;	O
}	O
error_t	int
diskfs_append_args	(*(*(char)),*(long))->(int)
(	O
char	O
*	O
*	O
argz	*(*(char))
,	O
size_t	long
*	O
argz_len	*(long)
)	O
{	O
error_t	int
err	int
;	O
err	int
=	O
diskfs_append_std_options	()->(int)
(	O
argz	*(*(char))
,	O
argz_len	*(long)
)	O
;	O
if	O
(	O
!	O
err	int
)	O
{	O
off_t	long
lim	long
=	O
tmpfs_page_limit	long
*	O
vm_page_size	O
;	O
char	O
buf	array(char)
[	O
100	int
]	O
,	O
sfx	char
;	O
S	O
(	O
30	int
,	O
'G'	O
)	O
;	O
else	O
S	O
(	O
20	int
,	O
'M'	O
)	O
;	O
else	O
S	O
(	O
10	int
,	O
'K'	O
)	O
;	O
else	O
sfx	char
=	O
'\0'	O
;	O
snprintf	(*(char),long,*(char))->(int)
(	O
buf	array(char)
,	O
sizeof	O
buf	array(char)
,	O
"%Ld%c"	*(char)
,	O
lim	long
,	O
sfx	char
)	O
;	O
err	int
=	O
argz_add	(*(*(char)),*(long),*(char))->(int)
(	O
argz	*(*(char))
,	O
argz_len	*(long)
,	O
buf	array(char)
)	O
;	O
}	O
return	O
err	int
;	O
}	O
static	O
void	O
*	O
diskfs_thread_function	(*(void))->(*(void))
(	O
void	O
*	O
demuxer	*(void)
)	O
{	O
static	O
int	O
thread_timeout	int
=	O
1000	int
*	O
60	int
*	O
2	int
;	O
error_t	int
err	int
;	O
do	O
{	O
ports_manage_port_operations_multithread	()->(int)
(	O
diskfs_port_bucket	O
,	O
(	O
ports_demuxer_type	O
)	O
demuxer	*(void)
,	O
thread_timeout	int
,	O
0	int
,	O
0	int
)	O
;	O
err	int
=	O
diskfs_shutdown	()->(int)
(	O
0	int
)	O
;	O
}	O
while	O
(	O
err	int
)	O
;	O
exit	O
(	O
0	int
)	O
;	O
return	O
NULL	O
;	O
}	O
static	O
const	O
struct	O
argp_child	struct(*(struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct`))->(int)),*(char),*(char),*(struct(*(struct`),int,*(char),int)),*((int,*(char),*(void))->(*(char))),*(char))),int,*(char),int)
startup_children	array(struct(*(struct(*(struct(*`,int,*`,int,*`,int)),*((int,*`,*`)->(int)),*(char),*(char),*(struct(*`,int,*`,int)),*((int,*`,*`)->(*`)),*(char))),int,*(char),int))
[	O
]	O
=	O
{	O
{	O
&	O
diskfs_startup_argp	O
}	O
,	O
{	O
0	int
}	O
}	O
;	O
static	O
struct	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
startup_argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct(*`,int,*`,int,int,int,int,*`,*`,*`,*`,*`,*`,*`)))->(int)),*(char),*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(char),int)),*((int,*(char),*(void))->(*(char))),*(char))
=	O
{	O
options	*(struct(*(char),int,*(char),int,*(char),int))
,	O
parse_opt	(int,*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))))->(int)
,	O
"MAX-BYTES"	*(char)
,	O
"\vMAX-BYTES may be followed by k or K for kilobytes,\nm or M for megabytes, g or G for gigabytes."	*(char)
,	O
startup_children	array(struct(*(struct(*(struct(*`,int,*`,int,*`,int)),*((int,*`,*`)->(int)),*(char),*(char),*(struct(*`,int,*`,int)),*((int,*`,*`)->(*`)),*(char))),int,*(char),int))
}	O
;	O
static	O
const	O
struct	O
argp_child	struct(*(struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct`))->(int)),*(char),*(char),*(struct(*(struct`),int,*(char),int)),*((int,*(char),*(void))->(*(char))),*(char))),int,*(char),int)
runtime_children	array(struct(*(struct(*(struct(*`,int,*`,int,*`,int)),*((int,*`,*`)->(int)),*(char),*(char),*(struct(*`,int,*`,int)),*((int,*`,*`)->(*`)),*(char))),int,*(char),int))
[	O
]	O
=	O
{	O
{	O
&	O
diskfs_std_runtime_argp	O
}	O
,	O
{	O
0	int
}	O
}	O
;	O
static	O
struct	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
runtime_argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct(*`,int,*`,int,int,int,int,*`,*`,*`,*`,*`,*`,*`)))->(int)),*(char),*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(char),int)),*((int,*(char),*(void))->(*(char))),*(char))
=	O
{	O
options	*(struct(*(char),int,*(char),int,*(char),int))
,	O
parse_opt	(int,*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))))->(int)
,	O
0	int
,	O
0	int
,	O
runtime_children	array(struct(*(struct(*(struct(*`,int,*`,int,*`,int)),*((int,*`,*`)->(int)),*(char),*(char),*(struct(*`,int,*`,int)),*((int,*`,*`)->(*`)),*(char))),int,*(char),int))
}	O
;	O
struct	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
*	O
diskfs_runtime_argp	*(struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct`))->(int)),*(char),*(char),*(struct(*(struct`),int,*(char),int)),*((int,*(char),*(void))->(*(char))),*(char)))
=	O
(	O
struct	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
*	O
)	O
&	O
runtime_argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct(*`,int,*`,int,int,int,int,*`,*`,*`,*`,*`,*`,*`)))->(int)),*(char),*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(char),int)),*((int,*(char),*(void))->(*(char))),*(char))
;	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
error_t	int
err	int
;	O
mach_port_t	O
bootstrap	O
,	O
realnode	O
,	O
host_priv	O
;	O
pthread_t	long
pthread_id	long
;	O
struct	O
stat	O
st	*(struct)
;	O
err	int
=	O
argp_parse	(*(struct(*(struct(*`,int,*`,int,*`,int)),*((int,*`,*`)->(int)),*(char),*(char),*(struct(*`,int,*`,int)),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,*(int),*(void))->(int)
(	O
&	O
startup_argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct(*`,int,*`,int,int,int,int,*`,*`,*`,*`,*`,*`,*`)))->(int)),*(char),*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(char),int)),*((int,*(char),*(void))->(*(char))),*(char))
,	O
argc	int
,	O
argv	*(*(char))
,	O
ARGP_IN_ORDER	int
,	O
NULL	O
,	O
NULL	O
)	O
;	O
assert_perror	()->(int)
(	O
err	int
)	O
;	O
task_get_bootstrap_port	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
&	O
bootstrap	O
)	O
;	O
if	O
(	O
bootstrap	O
==	O
MACH_PORT_NULL	O
)	O
error	(int,int,*(char))->(void)
(	O
2	int
,	O
0	int
,	O
"Must be started as a translator"	*(char)
)	O
;	O
err	int
=	O
get_privileged_ports	()->(int)
(	O
&	O
host_priv	O
,	O
NULL	O
)	O
;	O
if	O
(	O
err	int
==	O
EPERM	int
)	O
{	O
default_pager	int
=	O
file_name_lookup	()->(int)
(	O
_SERVERS_DEFPAGER	O
,	O
O_EXEC	O
,	O
0	int
)	O
;	O
if	O
(	O
default_pager	int
==	O
MACH_PORT_NULL	O
)	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
errno	O
,	O
_SERVERS_DEFPAGER	O
)	O
;	O
}	O
else	O
if	O
(	O
err	int
)	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
err	int
,	O
"Cannot get host privileged port"	*(char)
)	O
;	O
else	O
{	O
err	int
=	O
vm_set_default_memory_manager	()->(int)
(	O
host_priv	O
,	O
&	O
default_pager	int
)	O
;	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
host_priv	O
)	O
;	O
if	O
(	O
err	int
)	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
err	int
,	O
"Cannot get default pager port"	*(char)
)	O
;	O
}	O
if	O
(	O
default_pager	int
==	O
MACH_PORT_NULL	O
)	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
0	int
,	O
"files cannot have contents with no default pager port"	*(char)
)	O
;	O
err	int
=	O
diskfs_init_diskfs	()->(int)
(	O
)	O
;	O
if	O
(	O
err	int
)	O
error	(int,int,*(char))->(void)
(	O
4	int
,	O
err	int
,	O
"init"	*(char)
)	O
;	O
err	int
=	O
diskfs_alloc_node	()->(int)
(	O
0	int
,	O
S_IFDIR	O
,	O
&	O
diskfs_root_node	*(struct)
)	O
;	O
if	O
(	O
err	int
)	O
error	(int,int,*(char))->(void)
(	O
4	int
,	O
err	int
,	O
"cannot create root directory"	*(char)
)	O
;	O
err	int
=	O
pthread_create	()->(int)
(	O
&	O
pthread_id	long
,	O
NULL	O
,	O
diskfs_thread_function	(*(void))->(*(void))
,	O
diskfs_demuxer	O
)	O
;	O
if	O
(	O
!	O
err	int
)	O
pthread_detach	()->(int)
(	O
pthread_id	long
)	O
;	O
else	O
{	O
errno	O
=	O
err	int
;	O
perror	(*(char))->(void)
(	O
"pthread_create"	*(char)
)	O
;	O
}	O
realnode	O
=	O
diskfs_startup_diskfs	()->(int)
(	O
bootstrap	O
,	O
0	int
)	O
;	O
diskfs_root_node	*(struct)
->	O
dn_stat	O
.	O
st_mode	O
=	O
S_IFDIR	O
;	O
err	int
=	O
io_stat	()->(int)
(	O
realnode	O
,	O
&	O
st	*(struct)
)	O
;	O
if	O
(	O
err	int
)	O
{	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
err	int
,	O
"cannot stat underlying node"	*(char)
)	O
;	O
if	O
(	O
tmpfs_root_mode	int
==	O
-	O
1	int
)	O
diskfs_root_node	*(struct)
->	O
dn_stat	O
.	O
st_mode	O
|=	O
0777	int
|	O
S_ISVTX	O
;	O
else	O
diskfs_root_node	*(struct)
->	O
dn_stat	O
.	O
st_mode	O
|=	O
tmpfs_root_mode	int
;	O
diskfs_root_node	*(struct)
->	O
dn_set_ctime	O
=	O
1	int
;	O
diskfs_root_node	*(struct)
->	O
dn_set_mtime	O
=	O
1	int
;	O
diskfs_root_node	*(struct)
->	O
dn_set_atime	O
=	O
1	int
;	O
}	O
else	O
{	O
if	O
(	O
tmpfs_root_mode	int
==	O
-	O
1	int
)	O
{	O
diskfs_root_node	*(struct)
->	O
dn_stat	O
.	O
st_mode	O
|=	O
st	*(struct)
.	O
st_mode	O
&	O
~	O
S_IFMT	O
;	O
if	O
(	O
S_ISREG	()->(int)
(	O
st	*(struct)
.	O
st_mode	O
)	O
&&	O
(	O
st	*(struct)
.	O
st_mode	O
&	O
0111	int
)	O
==	O
0	int
)	O
diskfs_root_node	*(struct)
->	O
dn_stat	O
.	O
st_mode	O
|=	O
(	O
st	*(struct)
.	O
st_mode	O
&	O
0444	int
)	O
>>	O
2	int
;	O
}	O
else	O
diskfs_root_node	*(struct)
->	O
dn_stat	O
.	O
st_mode	O
|=	O
tmpfs_root_mode	int
;	O
diskfs_root_node	*(struct)
->	O
dn_stat	O
.	O
st_uid	O
=	O
st	*(struct)
.	O
st_uid	O
;	O
diskfs_root_node	*(struct)
->	O
dn_stat	O
.	O
st_author	O
=	O
st	*(struct)
.	O
st_author	O
;	O
diskfs_root_node	*(struct)
->	O
dn_stat	O
.	O
st_gid	O
=	O
st	*(struct)
.	O
st_gid	O
;	O
diskfs_root_node	*(struct)
->	O
dn_stat	O
.	O
st_atim	O
=	O
st	*(struct)
.	O
st_atim	O
;	O
diskfs_root_node	*(struct)
->	O
dn_stat	O
.	O
st_mtim	O
=	O
st	*(struct)
.	O
st_mtim	O
;	O
diskfs_root_node	*(struct)
->	O
dn_stat	O
.	O
st_ctim	O
=	O
st	*(struct)
.	O
st_ctim	O
;	O
diskfs_root_node	*(struct)
->	O
dn_stat	O
.	O
st_flags	O
=	O
st	*(struct)
.	O
st_flags	O
;	O
}	O
diskfs_root_node	*(struct)
->	O
dn_stat	O
.	O
st_mode	O
&=	O
~	O
S_ITRANS	O
;	O
diskfs_root_node	*(struct)
->	O
dn_stat	O
.	O
st_mode	O
|=	O
S_IROOT	O
;	O
diskfs_root_node	*(struct)
->	O
dn_stat	O
.	O
st_nlink	O
=	O
2	int
;	O
pthread_mutex_unlock	()->(int)
(	O
&	O
diskfs_root_node	*(struct)
->	O
lock	O
)	O
;	O
pthread_exit	()->(int)
(	O
NULL	O
)	O
;	O
return	O
0	int
;	O
}	O
