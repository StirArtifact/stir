static	O
kwset_t	*(struct)
kwset	*(struct)
;	O
static	O
struct	O
dfa	*(struct)
*	O
dfa	*(struct)
;	O
static	O
struct	O
patterns	struct(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)))
{	O
struct	O
re_pattern_buffer	struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
regexbuf	struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
;	O
struct	O
re_registers	struct(int,*(int),*(int))
regs	struct(int,*(int),*(int))
;	O
}	O
patterns0	struct(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)))
;	O
static	O
struct	O
patterns	struct(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)))
*	O
patterns	struct(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)))
;	O
static	O
size_t	long
pcount	long
;	O
void	O
dfaerror	(*(char))->(void)
(	O
char	O
const	O
*	O
mesg	*(char)
)	O
{	O
error	(int,int,*(char))->(void)
(	O
EXIT_TROUBLE	int
,	O
0	int
,	O
"%s"	*(char)
,	O
mesg	*(char)
)	O
;	O
abort	()->(void)
(	O
)	O
;	O
}	O
void	O
dfawarn	(*(char))->(void)
(	O
char	O
const	O
*	O
mesg	*(char)
)	O
{	O
static	O
enum	O
{	O
DW_NONE	int
=	O
0	int
,	O
DW_POSIX	int
,	O
DW_GNU	int
}	O
mode	enum(int,int,int)
;	O
if	O
(	O
mode	enum(int,int,int)
==	O
DW_NONE	int
)	O
mode	enum(int,int,int)
=	O
(	O
getenv	(*(char))->(*(char))
(	O
"POSIXLY_CORRECT"	*(char)
)	O
?	O
DW_POSIX	int
:	O
DW_GNU	int
)	O
;	O
if	O
(	O
mode	enum(int,int,int)
==	O
DW_GNU	int
)	O
dfaerror	(*(char))->(void)
(	O
mesg	*(char)
)	O
;	O
}	O
static	O
int	O
kwset_exact_matches	int
;	O
static	O
char	O
const	O
*	O
kwsincr_case	(*(char))->(*(char))
(	O
const	O
char	O
*	O
must	*(char)
)	O
{	O
const	O
char	O
*	O
buf	*(char)
;	O
size_t	long
n	long
;	O
n	long
=	O
strlen	(*(char))->(long)
(	O
must	*(char)
)	O
;	O
if	O
(	O
match_icase	int
&&	O
MB_CUR_MAX	O
>	O
1	int
)	O
buf	*(char)
=	O
mbtolower	(*(char),*(long))->(*(char))
(	O
must	*(char)
,	O
&	O
n	long
)	O
;	O
else	O
buf	*(char)
=	O
must	*(char)
;	O
return	O
kwsincr	(*(struct),*(char),long)->(*(char))
(	O
kwset	*(struct)
,	O
buf	*(char)
,	O
n	long
)	O
;	O
}	O
static	O
void	O
kwsmusts	()->(void)
(	O
void	O
)	O
{	O
struct	O
dfamust	struct(int,*(char),*(struct(int,*(char),*(struct(int,*(char),*(struct`))))))
const	O
*	O
dm	*(struct(int,*(char),*(struct(int,*(char),*(struct`)))))
;	O
char	O
const	O
*	O
err	long
;	O
dm	*(struct(int,*(char),*(struct(int,*(char),*(struct`)))))
=	O
dfamusts	(*(struct))->(*(struct(int,*(char),*(struct(int,*`,*`)))))
(	O
dfa	*(struct)
)	O
;	O
if	O
(	O
dm	*(struct(int,*(char),*(struct(int,*(char),*(struct`)))))
)	O
{	O
kwsinit	(*(*(struct)))->(void)
(	O
&	O
kwset	*(struct)
)	O
;	O
for	O
(	O
;	O
dm	*(struct(int,*(char),*(struct(int,*(char),*(struct`)))))
;	O
dm	*(struct(int,*(char),*(struct(int,*(char),*(struct`)))))
=	O
dm	*(struct(int,*(char),*(struct(int,*(char),*(struct`)))))
->	O
next	*(struct(int,*(char),*(struct(int,*(char),*(struct`)))))
)	O
{	O
if	O
(	O
!	O
dm	*(struct(int,*(char),*(struct(int,*(char),*(struct`)))))
->	O
exact	int
)	O
continue	O
;	O
++	O
kwset_exact_matches	int
;	O
if	O
(	O
(	O
err	long
=	O
kwsincr_case	(*(char))->(*(char))
(	O
dm	*(struct(int,*(char),*(struct(int,*(char),*(struct`)))))
->	O
must	*(char)
)	O
)	O
!=	O
NULL	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_TROUBLE	int
,	O
0	int
,	O
"%s"	*(char)
,	O
err	long
)	O
;	O
}	O
for	O
(	O
dm	*(struct(int,*(char),*(struct(int,*(char),*(struct`)))))
=	O
dfamusts	(*(struct))->(*(struct(int,*(char),*(struct(int,*`,*`)))))
(	O
dfa	*(struct)
)	O
;	O
dm	*(struct(int,*(char),*(struct(int,*(char),*(struct`)))))
;	O
dm	*(struct(int,*(char),*(struct(int,*(char),*(struct`)))))
=	O
dm	*(struct(int,*(char),*(struct(int,*(char),*(struct`)))))
->	O
next	*(struct(int,*(char),*(struct(int,*(char),*(struct`)))))
)	O
{	O
if	O
(	O
dm	*(struct(int,*(char),*(struct(int,*(char),*(struct`)))))
->	O
exact	int
)	O
continue	O
;	O
if	O
(	O
(	O
err	long
=	O
kwsincr_case	(*(char))->(*(char))
(	O
dm	*(struct(int,*(char),*(struct(int,*(char),*(struct`)))))
->	O
must	*(char)
)	O
)	O
!=	O
NULL	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_TROUBLE	int
,	O
0	int
,	O
"%s"	*(char)
,	O
err	long
)	O
;	O
}	O
if	O
(	O
(	O
err	long
=	O
kwsprep	(*(struct))->(*(char))
(	O
kwset	*(struct)
)	O
)	O
!=	O
NULL	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_TROUBLE	int
,	O
0	int
,	O
"%s"	*(char)
,	O
err	long
)	O
;	O
}	O
}	O
void	O
GEAcompile	(*(char),long,long)->(void)
(	O
char	O
const	O
*	O
pattern	*(char)
,	O
size_t	long
size	array(long)
,	O
reg_syntax_t	long
syntax_bits	long
)	O
{	O
const	O
char	O
*	O
err	long
;	O
const	O
char	O
*	O
p	*(void)
,	O
*	O
sep	*(char)
;	O
size_t	long
total	long
=	O
size	array(long)
;	O
char	O
*	O
motif	*(char)
;	O
if	O
(	O
match_icase	int
)	O
syntax_bits	long
|=	O
RE_ICASE	O
;	O
re_set_syntax	(long)->(long)
(	O
syntax_bits	long
)	O
;	O
dfasyntax	(long,int,char)->(void)
(	O
syntax_bits	long
,	O
match_icase	int
,	O
eolbyte	char
)	O
;	O
p	*(void)
=	O
pattern	*(char)
;	O
do	O
{	O
size_t	long
len	long
;	O
sep	*(char)
=	O
memchr	(*(void),int,long)->(*(void))
(	O
p	*(void)
,	O
'\n'	O
,	O
total	long
)	O
;	O
if	O
(	O
sep	*(char)
)	O
{	O
len	long
=	O
sep	*(char)
-	O
p	*(void)
;	O
sep	*(char)
++	O
;	O
total	long
-=	O
(	O
len	long
+	O
1	int
)	O
;	O
}	O
else	O
{	O
len	long
=	O
total	long
;	O
total	long
=	O
0	int
;	O
}	O
patterns	struct(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)))
=	O
xnrealloc	(*(void),long,long)->(*(void))
(	O
patterns	struct(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)))
,	O
pcount	long
+	O
1	int
,	O
sizeof	O
*	O
patterns	struct(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)))
)	O
;	O
patterns	struct(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)))
[	O
pcount	long
]	O
=	O
patterns0	struct(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)))
;	O
if	O
(	O
(	O
err	long
=	O
re_compile_pattern	(*(char),long,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)))->(*(char))
(	O
p	*(void)
,	O
len	long
,	O
&	O
(	O
patterns	struct(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)))
[	O
pcount	long
]	O
.	O
regexbuf	struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
)	O
)	O
)	O
!=	O
NULL	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_TROUBLE	int
,	O
0	int
,	O
"%s"	*(char)
,	O
err	long
)	O
;	O
pcount	long
++	O
;	O
p	*(void)
=	O
sep	*(char)
;	O
}	O
while	O
(	O
sep	*(char)
&&	O
total	long
!=	O
0	int
)	O
;	O
if	O
(	O
match_words	int
||	O
match_lines	int
)	O
{	O
static	O
char	O
const	O
line_beg_no_bk	array(char)
[	O
]	O
=	O
"^("	*(char)
;	O
static	O
char	O
const	O
line_end_no_bk	array(char)
[	O
]	O
=	O
")$"	*(char)
;	O
static	O
char	O
const	O
word_beg_no_bk	array(char)
[	O
]	O
=	O
"(^|[^[:alnum:]_])("	*(char)
;	O
static	O
char	O
const	O
word_end_no_bk	array(char)
[	O
]	O
=	O
")([^[:alnum:]_]|$)"	*(char)
;	O
static	O
char	O
const	O
line_beg_bk	array(char)
[	O
]	O
=	O
"^\\("	*(char)
;	O
static	O
char	O
const	O
line_end_bk	array(char)
[	O
]	O
=	O
"\\)$"	*(char)
;	O
static	O
char	O
const	O
word_beg_bk	array(char)
[	O
]	O
=	O
"\\(^\\|[^[:alnum:]_]\\)\\("	*(char)
;	O
static	O
char	O
const	O
word_end_bk	array(char)
[	O
]	O
=	O
"\\)\\([^[:alnum:]_]\\|$\\)"	*(char)
;	O
int	O
bk	int
=	O
!	O
(	O
syntax_bits	long
&	O
RE_NO_BK_PARENS	O
)	O
;	O
char	O
*	O
n	long
=	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
word_beg_bk	array(char)
-	O
1	int
+	O
size	array(long)
+	O
sizeof	O
word_end_bk	array(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
n	long
,	O
match_lines	int
?	O
(	O
bk	int
?	O
line_beg_bk	array(char)
:	O
line_beg_no_bk	array(char)
)	O
:	O
(	O
bk	int
?	O
word_beg_bk	array(char)
:	O
word_beg_no_bk	array(char)
)	O
)	O
;	O
total	long
=	O
strlen	(*(char))->(long)
(	O
n	long
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
n	long
+	O
total	long
,	O
pattern	*(char)
,	O
size	array(long)
)	O
;	O
total	long
+=	O
size	array(long)
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
n	long
+	O
total	long
,	O
match_lines	int
?	O
(	O
bk	int
?	O
line_end_bk	array(char)
:	O
line_end_no_bk	array(char)
)	O
:	O
(	O
bk	int
?	O
word_end_bk	array(char)
:	O
word_end_no_bk	array(char)
)	O
)	O
;	O
total	long
+=	O
strlen	(*(char))->(long)
(	O
n	long
+	O
total	long
)	O
;	O
pattern	*(char)
=	O
motif	*(char)
=	O
n	long
;	O
size	array(long)
=	O
total	long
;	O
}	O
else	O
motif	*(char)
=	O
NULL	O
;	O
dfa	*(struct)
=	O
dfaalloc	()->(*(struct))
(	O
)	O
;	O
dfacomp	(*(char),long,*(struct),int)->(void)
(	O
pattern	*(char)
,	O
size	array(long)
,	O
dfa	*(struct)
,	O
1	int
)	O
;	O
kwsmusts	()->(void)
(	O
)	O
;	O
free	(*(void))->(void)
(	O
motif	*(char)
)	O
;	O
}	O
size_t	long
EGexecute	(*(char),long,*(long),*(char))->(long)
(	O
char	O
const	O
*	O
buf	*(char)
,	O
size_t	long
size	array(long)
,	O
size_t	long
*	O
match_size	*(long)
,	O
char	O
const	O
*	O
start_ptr	*(char)
)	O
{	O
char	O
const	O
*	O
buflim	*(char)
,	O
*	O
beg	*(char)
,	O
*	O
end	*(int)
,	O
*	O
match	*(char)
,	O
*	O
best_match	*(char)
,	O
*	O
mb_start	*(char)
;	O
char	O
eol	char
=	O
eolbyte	char
;	O
int	O
backref	*(int)
,	O
start	*(int)
,	O
len	long
,	O
best_len	int
;	O
struct	O
kwsmatch	struct(int,array(long),array(long))
kwsm	struct(int,array(long),array(long))
;	O
size_t	long
i	long
,	O
ret_val	long
;	O
if	O
(	O
MB_CUR_MAX	O
>	O
1	int
)	O
{	O
if	O
(	O
match_icase	int
)	O
{	O
char	O
*	O
case_buf	*(char)
=	O
mbtolower	(*(char),*(long))->(*(char))
(	O
buf	*(char)
,	O
&	O
size	array(long)
)	O
;	O
if	O
(	O
start_ptr	*(char)
)	O
start_ptr	*(char)
=	O
case_buf	*(char)
+	O
(	O
start_ptr	*(char)
-	O
buf	*(char)
)	O
;	O
buf	*(char)
=	O
case_buf	*(char)
;	O
}	O
}	O
mb_start	*(char)
=	O
buf	*(char)
;	O
buflim	*(char)
=	O
buf	*(char)
+	O
size	array(long)
;	O
for	O
(	O
beg	*(char)
=	O
end	*(int)
=	O
buf	*(char)
;	O
end	*(int)
<	O
buflim	*(char)
;	O
beg	*(char)
=	O
end	*(int)
)	O
{	O
if	O
(	O
!	O
start_ptr	*(char)
)	O
{	O
if	O
(	O
kwset	*(struct)
)	O
{	O
size_t	long
offset	long
=	O
kwsexec	(*(struct),*(char),long,*(struct(int,array(long),array(long))))->(long)
(	O
kwset	*(struct)
,	O
beg	*(char)
,	O
buflim	*(char)
-	O
beg	*(char)
,	O
&	O
kwsm	struct(int,array(long),array(long))
)	O
;	O
if	O
(	O
offset	long
==	O
(	O
size_t	long
)	O
-	O
1	int
)	O
goto	O
failure	O
;	O
beg	*(char)
+=	O
offset	long
;	O
if	O
(	O
(	O
end	*(int)
=	O
memchr	(*(void),int,long)->(*(void))
(	O
beg	*(char)
,	O
eol	char
,	O
buflim	*(char)
-	O
beg	*(char)
)	O
)	O
!=	O
NULL	O
)	O
end	*(int)
++	O
;	O
else	O
end	*(int)
=	O
buflim	*(char)
;	O
match	*(char)
=	O
beg	*(char)
;	O
while	O
(	O
beg	*(char)
>	O
buf	*(char)
&&	O
beg	*(char)
[	O
-	O
1	int
]	O
!=	O
eol	char
)	O
--	O
beg	*(char)
;	O
if	O
(	O
kwsm	struct(int,array(long),array(long))
.	O
index	(*(char),int)->(*(char))
<	O
kwset_exact_matches	int
)	O
{	O
if	O
(	O
mb_start	*(char)
<	O
beg	*(char)
)	O
mb_start	*(char)
=	O
beg	*(char)
;	O
if	O
(	O
MB_CUR_MAX	O
==	O
1	int
||	O
!	O
is_mb_middle	(*(*(char)),*(char),*(char),long)->(bool)
(	O
&	O
mb_start	*(char)
,	O
match	*(char)
,	O
buflim	*(char)
,	O
kwsm	struct(int,array(long),array(long))
.	O
size	array(long)
[	O
0	int
]	O
)	O
)	O
goto	O
success	O
;	O
}	O
if	O
(	O
dfaexec	(*(struct),*(char),*(char),int,*(int),*(int))->(*(char))
(	O
dfa	*(struct)
,	O
beg	*(char)
,	O
(	O
char	O
*	O
)	O
end	*(int)
,	O
0	int
,	O
NULL	O
,	O
&	O
backref	*(int)
)	O
==	O
NULL	O
)	O
continue	O
;	O
}	O
else	O
{	O
char	O
const	O
*	O
next_beg	*(char)
=	O
dfaexec	(*(struct),*(char),*(char),int,*(int),*(int))->(*(char))
(	O
dfa	*(struct)
,	O
beg	*(char)
,	O
(	O
char	O
*	O
)	O
buflim	*(char)
,	O
0	int
,	O
NULL	O
,	O
&	O
backref	*(int)
)	O
;	O
if	O
(	O
next_beg	*(char)
==	O
NULL	O
)	O
break	O
;	O
beg	*(char)
=	O
next_beg	*(char)
;	O
if	O
(	O
(	O
end	*(int)
=	O
memchr	(*(void),int,long)->(*(void))
(	O
beg	*(char)
,	O
eol	char
,	O
buflim	*(char)
-	O
beg	*(char)
)	O
)	O
!=	O
NULL	O
)	O
end	*(int)
++	O
;	O
else	O
end	*(int)
=	O
buflim	*(char)
;	O
while	O
(	O
beg	*(char)
>	O
buf	*(char)
&&	O
beg	*(char)
[	O
-	O
1	int
]	O
!=	O
eol	char
)	O
--	O
beg	*(char)
;	O
}	O
if	O
(	O
!	O
backref	*(int)
)	O
goto	O
success	O
;	O
}	O
else	O
{	O
beg	*(char)
=	O
start_ptr	*(char)
;	O
end	*(int)
=	O
buflim	*(char)
;	O
}	O
best_match	*(char)
=	O
end	*(int)
;	O
best_len	int
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
pcount	long
;	O
i	long
++	O
)	O
{	O
patterns	struct(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)))
[	O
i	long
]	O
.	O
regexbuf	struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
.	O
not_eol	int
=	O
0	int
;	O
if	O
(	O
0	int
<=	O
(	O
start	*(int)
=	O
re_search	(*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)),*(char),int,int,int,*(struct(int,*(int),*(int))))->(int)
(	O
&	O
(	O
patterns	struct(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)))
[	O
i	long
]	O
.	O
regexbuf	struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
)	O
,	O
buf	*(char)
,	O
end	*(int)
-	O
buf	*(char)
-	O
1	int
,	O
beg	*(char)
-	O
buf	*(char)
,	O
end	*(int)
-	O
beg	*(char)
-	O
1	int
,	O
&	O
(	O
patterns	struct(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)))
[	O
i	long
]	O
.	O
regs	struct(int,*(int),*(int))
)	O
)	O
)	O
)	O
{	O
len	long
=	O
patterns	struct(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)))
[	O
i	long
]	O
.	O
regs	struct(int,*(int),*(int))
.	O
end	*(int)
[	O
0	int
]	O
-	O
start	*(int)
;	O
match	*(char)
=	O
buf	*(char)
+	O
start	*(int)
;	O
if	O
(	O
match	*(char)
>	O
best_match	*(char)
)	O
continue	O
;	O
if	O
(	O
start_ptr	*(char)
&&	O
!	O
match_words	int
)	O
goto	O
assess_pattern_match	O
;	O
if	O
(	O
(	O
!	O
match_lines	int
&&	O
!	O
match_words	int
)	O
||	O
(	O
match_lines	int
&&	O
len	long
==	O
end	*(int)
-	O
beg	*(char)
-	O
1	int
)	O
)	O
{	O
match	*(char)
=	O
beg	*(char)
;	O
len	long
=	O
end	*(int)
-	O
beg	*(char)
;	O
goto	O
assess_pattern_match	O
;	O
}	O
if	O
(	O
match_words	int
)	O
while	O
(	O
match	*(char)
<=	O
best_match	*(char)
)	O
{	O
if	O
(	O
(	O
match	*(char)
==	O
buf	*(char)
||	O
!	O
WCHAR	O
(	O
(	O
unsigned	O
char	O
)	O
match	*(char)
[	O
-	O
1	int
]	O
)	O
)	O
&&	O
(	O
start	*(int)
+	O
len	long
==	O
end	*(int)
-	O
buf	*(char)
-	O
1	int
||	O
!	O
WCHAR	O
(	O
(	O
unsigned	O
char	O
)	O
match	*(char)
[	O
len	long
]	O
)	O
)	O
)	O
goto	O
assess_pattern_match	O
;	O
if	O
(	O
len	long
>	O
0	int
)	O
{	O
--	O
len	long
;	O
patterns	struct(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)))
[	O
i	long
]	O
.	O
regexbuf	struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
.	O
not_eol	int
=	O
1	int
;	O
len	long
=	O
re_match	(*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)),*(char),int,int,*(struct(int,*(int),*(int))))->(int)
(	O
&	O
(	O
patterns	struct(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)))
[	O
i	long
]	O
.	O
regexbuf	struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
)	O
,	O
buf	*(char)
,	O
match	*(char)
+	O
len	long
-	O
beg	*(char)
,	O
match	*(char)
-	O
buf	*(char)
,	O
&	O
(	O
patterns	struct(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)))
[	O
i	long
]	O
.	O
regs	struct(int,*(int),*(int))
)	O
)	O
;	O
}	O
if	O
(	O
len	long
<=	O
0	int
)	O
{	O
if	O
(	O
match	*(char)
==	O
end	*(int)
-	O
1	int
)	O
break	O
;	O
match	*(char)
++	O
;	O
patterns	struct(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)))
[	O
i	long
]	O
.	O
regexbuf	struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
.	O
not_eol	int
=	O
0	int
;	O
start	*(int)
=	O
re_search	(*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)),*(char),int,int,int,*(struct(int,*(int),*(int))))->(int)
(	O
&	O
(	O
patterns	struct(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)))
[	O
i	long
]	O
.	O
regexbuf	struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
)	O
,	O
buf	*(char)
,	O
end	*(int)
-	O
buf	*(char)
-	O
1	int
,	O
match	*(char)
-	O
buf	*(char)
,	O
end	*(int)
-	O
match	*(char)
-	O
1	int
,	O
&	O
(	O
patterns	struct(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)))
[	O
i	long
]	O
.	O
regs	struct(int,*(int),*(int))
)	O
)	O
;	O
if	O
(	O
start	*(int)
<	O
0	int
)	O
break	O
;	O
len	long
=	O
patterns	struct(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)))
[	O
i	long
]	O
.	O
regs	struct(int,*(int),*(int))
.	O
end	*(int)
[	O
0	int
]	O
-	O
start	*(int)
;	O
match	*(char)
=	O
buf	*(char)
+	O
start	*(int)
;	O
}	O
}	O
continue	O
;	O
assess_pattern_match	O
:	O
if	O
(	O
!	O
start_ptr	*(char)
)	O
{	O
goto	O
success	O
;	O
}	O
if	O
(	O
match	*(char)
<	O
best_match	*(char)
||	O
(	O
match	*(char)
==	O
best_match	*(char)
&&	O
len	long
>	O
best_len	int
)	O
)	O
{	O
best_match	*(char)
=	O
match	*(char)
;	O
best_len	int
=	O
len	long
;	O
}	O
}	O
}	O
if	O
(	O
best_match	*(char)
<	O
end	*(int)
)	O
{	O
beg	*(char)
=	O
best_match	*(char)
;	O
len	long
=	O
best_len	int
;	O
goto	O
success_in_len	O
;	O
}	O
}	O
failure	O
:	O
ret_val	long
=	O
-	O
1	int
;	O
goto	O
out	O
;	O
success	O
:	O
len	long
=	O
end	*(int)
-	O
beg	*(char)
;	O
success_in_len	O
:	O
*	O
match_size	*(long)
=	O
len	long
;	O
ret_val	long
=	O
beg	*(char)
-	O
buf	*(char)
;	O
out	O
:	O
return	O
ret_val	long
;	O
}	O
