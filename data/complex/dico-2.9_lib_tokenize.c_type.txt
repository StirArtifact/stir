static	O
char	O
quote_transtab	array(char)
[	O
]	O
=	O
"\\\\\"\"a\ab\bf\fn\nr\rt\t"	*(char)
;	O
int	O
dico_unquote_char	(int)->(int)
(	O
int	O
c	int
)	O
{	O
char	O
*	O
p	*(char)
;	O
for	O
(	O
p	*(char)
=	O
quote_transtab	array(char)
;	O
*	O
p	*(char)
;	O
p	*(char)
+=	O
2	int
)	O
{	O
if	O
(	O
*	O
p	*(char)
==	O
c	int
)	O
return	O
p	*(char)
[	O
1	int
]	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
dico_quote_char	(int)->(int)
(	O
int	O
c	int
)	O
{	O
char	O
*	O
p	*(char)
;	O
for	O
(	O
p	*(char)
=	O
quote_transtab	array(char)
;	O
*	O
p	*(char)
;	O
p	*(char)
+=	O
2	int
)	O
{	O
if	O
(	O
p	*(char)
[	O
1	int
]	O
==	O
c	int
)	O
return	O
p	*(char)
[	O
0	int
]	O
;	O
}	O
return	O
0	int
;	O
}	O
void	O
dico_tokenize_begin	(*(struct(*(char),long,long,*(*(char)),int,int)))->(void)
(	O
struct	O
dico_tokbuf	struct(*(char),long,long,*(*(char)),int,int)
*	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
)	O
{	O
memset	(*(void),int,long)->(*(void))
(	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
,	O
0	int
,	O
sizeof	O
(	O
*	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
)	O
)	O
;	O
}	O
void	O
dico_tokenize_end	(*(struct(*(char),long,long,*(*(char)),int,int)))->(void)
(	O
struct	O
dico_tokbuf	struct(*(char),long,long,*(*(char)),int,int)
*	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
)	O
{	O
free	(*(void))->(void)
(	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
->	O
tb_base	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
->	O
tb_tokv	*(*(char))
)	O
;	O
}	O
void	O
dico_tokenize_clear	(*(struct(*(char),long,long,*(*(char)),int,int)))->(void)
(	O
struct	O
dico_tokbuf	struct(*(char),long,long,*(*(char)),int,int)
*	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
)	O
{	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
->	O
tb_level	long
=	O
0	int
;	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
->	O
tb_tokc	int
=	O
0	int
;	O
}	O
static	O
int	O
_dico_tkn_grow	(*(struct(*(char),long,long,*(*(char)),int,int)),*(char),long)->(int)
(	O
struct	O
dico_tokbuf	struct(*(char),long,long,*(*(char)),int,int)
*	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
,	O
char	O
*	O
str	*(struct)
,	O
size_t	long
len	int
)	O
{	O
if	O
(	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
->	O
tb_level	long
+	O
len	int
>	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
->	O
tb_size	long
)	O
{	O
size_t	long
newsize	long
=	O
(	O
(	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
->	O
tb_level	long
+	O
len	int
+	O
TKNBLOCKSIZ	int
-	O
1	int
)	O
/	O
TKNBLOCKSIZ	int
)	O
*	O
TKNBLOCKSIZ	int
;	O
char	O
*	O
newbase	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
->	O
tb_base	*(char)
,	O
newsize	long
)	O
;	O
if	O
(	O
!	O
newbase	*(char)
)	O
return	O
ENOMEM	int
;	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
->	O
tb_base	*(char)
=	O
newbase	*(char)
;	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
->	O
tb_size	long
=	O
newsize	long
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
->	O
tb_base	*(char)
+	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
->	O
tb_level	long
,	O
str	*(struct)
,	O
len	int
)	O
;	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
->	O
tb_level	long
+=	O
len	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_dico_tkn_1grow	(*(struct(*(char),long,long,*(*(char)),int,int)),int)->(int)
(	O
struct	O
dico_tokbuf	struct(*(char),long,long,*(*(char)),int,int)
*	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
,	O
int	O
ch	int
)	O
{	O
char	O
c	int
=	O
ch	int
;	O
return	O
_dico_tkn_grow	(*(struct(*(char),long,long,*(*(char)),int,int)),*(char),long)->(int)
(	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
,	O
&	O
c	int
,	O
1	int
)	O
;	O
}	O
int	O
dico_tokenize_string	(*(struct(*(char),long,long,*(*(char)),int,int)),*(char))->(int)
(	O
struct	O
dico_tokbuf	struct(*(char),long,long,*(*(char)),int,int)
*	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
,	O
char	O
*	O
str	*(struct)
)	O
{	O
struct	O
utf8_iterator	struct(*(char),*(char),int,long,int,int)
itr	*((*(void),*(void))->(int))
;	O
int	O
i	int
,	O
argc	int
=	O
0	int
;	O
int	O
rc	int
;	O
size_t	long
start_level	long
;	O
char	O
*	O
p	*(char)
;	O
utf8_iter_first	(*(struct(*(char),*(char),int,long,int,int)),*(char))->(int)
(	O
&	O
itr	*((*(void),*(void))->(int))
,	O
str	*(struct)
)	O
;	O
start_level	long
=	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
->	O
tb_level	long
;	O
for	O
(	O
rc	int
=	O
0	int
;	O
rc	int
==	O
0	int
;	O
)	O
{	O
int	O
quote	*(int)
;	O
for	O
(	O
;	O
!	O
utf8_iter_end_p	(*(struct(*(char),*(char),int,long,int,int)))->(int)
(	O
&	O
itr	*((*(void),*(void))->(int))
)	O
&&	O
utf8_iter_isascii	O
(	O
itr	*((*(void),*(void))->(int))
)	O
&&	O
ISWS	O
(	O
*	O
itr	*((*(void),*(void))->(int))
.	O
curptr	*(char)
)	O
;	O
utf8_iter_next	(*(struct(*(char),*(char),int,long,int,int)))->(int)
(	O
&	O
itr	*((*(void),*(void))->(int))
)	O
)	O
;	O
if	O
(	O
utf8_iter_end_p	(*(struct(*(char),*(char),int,long,int,int)))->(int)
(	O
&	O
itr	*((*(void),*(void))->(int))
)	O
)	O
break	O
;	O
if	O
(	O
utf8_iter_isascii	O
(	O
itr	*((*(void),*(void))->(int))
)	O
&&	O
ISQUOTE	O
(	O
*	O
itr	*((*(void),*(void))->(int))
.	O
curptr	*(char)
)	O
)	O
{	O
quote	*(int)
=	O
*	O
itr	*((*(void),*(void))->(int))
.	O
curptr	*(char)
;	O
utf8_iter_next	(*(struct(*(char),*(char),int,long,int,int)))->(int)
(	O
&	O
itr	*((*(void),*(void))->(int))
)	O
;	O
}	O
else	O
quote	*(int)
=	O
0	int
;	O
for	O
(	O
;	O
!	O
utf8_iter_end_p	(*(struct(*(char),*(char),int,long,int,int)))->(int)
(	O
&	O
itr	*((*(void),*(void))->(int))
)	O
&&	O
!	O
(	O
utf8_iter_isascii	O
(	O
itr	*((*(void),*(void))->(int))
)	O
&&	O
(	O
quote	*(int)
?	O
0	int
:	O
ISWS	O
(	O
*	O
itr	*((*(void),*(void))->(int))
.	O
curptr	*(char)
)	O
)	O
)	O
;	O
utf8_iter_next	(*(struct(*(char),*(char),int,long,int,int)))->(int)
(	O
&	O
itr	*((*(void),*(void))->(int))
)	O
)	O
{	O
if	O
(	O
utf8_iter_isascii	O
(	O
itr	*((*(void),*(void))->(int))
)	O
)	O
{	O
if	O
(	O
*	O
itr	*((*(void),*(void))->(int))
.	O
curptr	*(char)
==	O
quote	*(int)
)	O
{	O
utf8_iter_next	(*(struct(*(char),*(char),int,long,int,int)))->(int)
(	O
&	O
itr	*((*(void),*(void))->(int))
)	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
*	O
itr	*((*(void),*(void))->(int))
.	O
curptr	*(char)
==	O
'\\'	O
)	O
{	O
utf8_iter_next	(*(struct(*(char),*(char),int,long,int,int)))->(int)
(	O
&	O
itr	*((*(void),*(void))->(int))
)	O
;	O
if	O
(	O
utf8_iter_isascii	O
(	O
itr	*((*(void),*(void))->(int))
)	O
)	O
{	O
rc	int
=	O
_dico_tkn_1grow	(*(struct(*(char),long,long,*(*(char)),int,int)),int)->(int)
(	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
,	O
dico_quote_char	(int)->(int)
(	O
*	O
itr	*((*(void),*(void))->(int))
.	O
curptr	*(char)
)	O
)	O
;	O
}	O
else	O
{	O
rc	int
=	O
_dico_tkn_1grow	(*(struct(*(char),long,long,*(*(char)),int,int)),int)->(int)
(	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
,	O
'\\'	O
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
rc	int
=	O
_dico_tkn_grow	(*(struct(*(char),long,long,*(*(char)),int,int)),*(char),long)->(int)
(	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
,	O
itr	*((*(void),*(void))->(int))
.	O
curptr	*(char)
,	O
itr	*((*(void),*(void))->(int))
.	O
curwidth	int
)	O
;	O
}	O
continue	O
;	O
}	O
}	O
rc	int
=	O
_dico_tkn_grow	(*(struct(*(char),long,long,*(*(char)),int,int)),*(char),long)->(int)
(	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
,	O
itr	*((*(void),*(void))->(int))
.	O
curptr	*(char)
,	O
itr	*((*(void),*(void))->(int))
.	O
curwidth	int
)	O
;	O
}	O
if	O
(	O
rc	int
==	O
0	int
)	O
rc	int
=	O
_dico_tkn_1grow	(*(struct(*(char),long,long,*(*(char)),int,int)),int)->(int)
(	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
,	O
0	int
)	O
;	O
argc	int
++	O
;	O
}	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
->	O
tb_tokc	int
+	O
argc	int
+	O
1	int
>	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
->	O
tb_tokm	int
)	O
{	O
size_t	long
nmax	long
=	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
->	O
tb_tokc	int
+	O
argc	int
+	O
1	int
;	O
char	O
*	O
*	O
nargv	*(*(char))
=	O
realloc	(*(void),long)->(*(void))
(	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
->	O
tb_tokv	*(*(char))
,	O
sizeof	O
(	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
->	O
tb_tokv	*(*(char))
[	O
0	int
]	O
)	O
*	O
nmax	long
)	O
;	O
if	O
(	O
!	O
nargv	*(*(char))
)	O
return	O
ENOMEM	int
;	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
->	O
tb_tokv	*(*(char))
=	O
nargv	*(*(char))
;	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
->	O
tb_tokm	int
=	O
nmax	long
;	O
}	O
for	O
(	O
i	int
=	O
0	int
,	O
p	*(char)
=	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
->	O
tb_base	*(char)
+	O
start_level	long
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
{	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
->	O
tb_tokv	*(*(char))
[	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
->	O
tb_tokc	int
++	O
]	O
=	O
p	*(char)
;	O
p	*(char)
+=	O
strlen	(*(char))->(long)
(	O
p	*(char)
)	O
+	O
1	int
;	O
}	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
->	O
tb_tokv	*(*(char))
[	O
tb	*(struct(*(char),long,long,*(*(char)),int,int))
->	O
tb_tokc	int
]	O
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
