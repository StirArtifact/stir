int	O
gsl_movstat_qqr	(enum(int,int,int),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(void),long)))->(int)
(	O
const	O
gsl_movstat_end_t	enum(int,int,int)
endtype	enum(int,int,int)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
const	O
double	O
q	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
xqqr	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_movstat_workspace	struct(long,long,long,*(double),*(void),long)
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
if	O
(	O
x	double
->	O
size	long
!=	O
xqqr	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"x and xqqr vectors must have same length"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
q	double
<	O
0.0	int
||	O
q	double
>	O
0.5	int
)	O
{	O
GSL_ERROR	O
(	O
"q must be between 0 and 0.5"	*(char)
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
{	O
double	O
qq	double
=	O
q	double
;	O
int	O
status	int
=	O
gsl_movstat_apply_accum	(enum(int,int,int),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*((long)->(long)),*((long,*`)->(int)),*((double,*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)))),*(void),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(void),long)))->(int)
(	O
endtype	enum(int,int,int)
,	O
x	double
,	O
gsl_movstat_accum_qqr	*(struct(*((long)->(long)),*((long,*(void))->(int)),*((double,*(void))->(int)),*((*(void))->(int)),*((*(void),*(double),*(void))->(int))))
,	O
(	O
void	O
*	O
)	O
&	O
qq	double
,	O
xqqr	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
NULL	O
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
return	O
status	int
;	O
}	O
}	O
