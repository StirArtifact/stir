struct	O
mu_kwd	struct(*(char),int)
_mu_imap_status_name_table	array(struct(*(char),int))
[	O
]	O
=	O
{	O
{	O
"MESSAGES"	*(char)
,	O
MU_IMAP_STAT_MESSAGE_COUNT	int
}	O
,	O
{	O
"RECENT"	*(char)
,	O
MU_IMAP_STAT_RECENT_COUNT	int
}	O
,	O
{	O
"UIDNEXT"	*(char)
,	O
MU_IMAP_STAT_UIDNEXT	int
}	O
,	O
{	O
"UIDVALIDITY"	*(char)
,	O
MU_IMAP_STAT_UIDVALIDITY	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
int	O
_status_mapper	(*(*(void)),long,*(void))->(int)
(	O
void	O
*	O
*	O
itmv	*(*(void))
,	O
size_t	long
itmc	long
,	O
void	O
*	O
call_data	*(void)
)	O
{	O
struct	O
mu_imap_stat	struct(int,int,int,long,long,long,long,long)
*	O
ps	*(struct(int,int,int,long,long,long,long,long))
=	O
call_data	*(void)
;	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
kw	*(struct(enum(int,int),union(*(struct),*(char))))
=	O
itmv	*(*(void))
[	O
0	int
]	O
,	O
*	O
val	int
=	O
itmv	*(*(void))
[	O
1	int
]	O
;	O
size_t	long
value	*(void)
;	O
char	O
*	O
p	*(char)
;	O
int	O
flag	int
;	O
if	O
(	O
kw	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
type	int
!=	O
imap_eltype_string	int
||	O
val	int
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
MU_ERR_PARSE	O
;	O
if	O
(	O
mu_kwd_xlat_name_ci	(*(struct(*(char),int)),*(char),*(int))->(int)
(	O
_mu_imap_status_name_table	array(struct(*(char),int))
,	O
kw	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	union(*(struct),*(char))
.	O
string	*(char)
,	O
&	O
flag	int
)	O
)	O
return	O
MU_ERR_PARSE	O
;	O
value	*(void)
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
val	int
->	O
v	union(*(struct),*(char))
.	O
string	*(char)
,	O
&	O
p	*(char)
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	*(char)
)	O
return	O
MU_ERR_PARSE	O
;	O
ps	*(struct(int,int,int,long,long,long,long,long))
->	O
flags	int
|=	O
flag	int
;	O
switch	O
(	O
flag	int
)	O
{	O
case	O
MU_IMAP_STAT_MESSAGE_COUNT	int
:	O
ps	*(struct(int,int,int,long,long,long,long,long))
->	O
message_count	long
=	O
value	*(void)
;	O
break	O
;	O
case	O
MU_IMAP_STAT_RECENT_COUNT	int
:	O
ps	*(struct(int,int,int,long,long,long,long,long))
->	O
recent_count	long
=	O
value	*(void)
;	O
break	O
;	O
case	O
MU_IMAP_STAT_UIDNEXT	int
:	O
ps	*(struct(int,int,int,long,long,long,long,long))
->	O
uidnext	long
=	O
value	*(void)
;	O
break	O
;	O
case	O
MU_IMAP_STAT_UIDVALIDITY	int
:	O
ps	*(struct(int,int,int,long,long,long,long,long))
->	O
uidvalidity	long
=	O
value	*(void)
;	O
break	O
;	O
case	O
MU_IMAP_STAT_FIRST_UNSEEN	int
:	O
ps	*(struct(int,int,int,long,long,long,long,long))
->	O
first_unseen	long
=	O
value	*(void)
;	O
}	O
return	O
0	int
;	O
}	O
struct	O
status_data	struct(*(char),*(struct(int,int,int,long,long,long,long,long)))
{	O
const	O
char	O
*	O
mboxname	*(char)
;	O
struct	O
mu_imap_stat	struct(int,int,int,long,long,long,long,long)
*	O
ps	*(struct(int,int,int,long,long,long,long,long))
;	O
}	O
;	O
static	O
void	O
_status_response_action	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)
(	O
mu_imap_t	*(struct)
imap	*(struct)
,	O
mu_list_t	*(struct)
response	enum(int,int,int)
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
status_data	struct(*(char),*(struct(int,int,int,long,long,long,long,long)))
*	O
sd	*(struct(*(char),*(struct(int,int,int,long,long,long,long,long))))
=	O
data	*(void)
;	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
;	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
=	O
_mu_imap_list_at	(*(struct),int)->(*(struct(enum(int,int),union(*(struct`),*(char)))))
(	O
response	enum(int,int,int)
,	O
0	int
)	O
;	O
if	O
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
&&	O
_mu_imap_list_element_is_string	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(char))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
"STATUS"	*(char)
)	O
)	O
{	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
=	O
_mu_imap_list_at	(*(struct),int)->(*(struct(enum(int,int),union(*(struct`),*(char)))))
(	O
response	enum(int,int,int)
,	O
1	int
)	O
;	O
if	O
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
&&	O
_mu_imap_list_element_is_string	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(char))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
sd	*(struct(*(char),*(struct(int,int,int,long,long,long,long,long))))
->	O
mboxname	*(char)
)	O
)	O
{	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
=	O
_mu_imap_list_at	(*(struct),int)->(*(struct(enum(int,int),union(*(struct`),*(char)))))
(	O
response	enum(int,int,int)
,	O
2	int
)	O
;	O
if	O
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
&&	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
type	int
==	O
imap_eltype_list	int
)	O
{	O
sd	*(struct(*(char),*(struct(int,int,int,long,long,long,long,long))))
->	O
ps	*(struct(int,int,int,long,long,long,long,long))
->	O
flags	int
=	O
0	int
;	O
mu_list_gmap	(*(struct),*((*(*(void)),long,*(void))->(int)),long,*(void))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	union(*(struct),*(char))
.	O
list	*(struct)
,	O
_status_mapper	(*(*(void)),long,*(void))->(int)
,	O
2	int
,	O
sd	*(struct(*(char),*(struct(int,int,int,long,long,long,long,long))))
->	O
ps	*(struct(int,int,int,long,long,long,long,long))
)	O
;	O
}	O
}	O
}	O
}	O
int	O
mu_imap_status	(*(struct),*(char),*(struct(int,int,int,long,long,long,long,long)))->(int)
(	O
mu_imap_t	*(struct)
imap	*(struct)
,	O
const	O
char	O
*	O
mboxname	*(char)
,	O
struct	O
mu_imap_stat	struct(int,int,int,long,long,long,long,long)
*	O
ps	*(struct(int,int,int,long,long,long,long,long))
)	O
{	O
int	O
status	int
;	O
int	O
delim	int
=	O
0	int
;	O
int	O
i	int
;	O
if	O
(	O
imap	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
imap	*(struct)
->	O
io	*(struct)
)	O
return	O
MU_ERR_NO_TRANSPORT	O
;	O
if	O
(	O
imap	*(struct)
->	O
session_state	enum(int,int,int,int)
!=	O
MU_IMAP_SESSION_AUTH	int
&&	O
imap	*(struct)
->	O
session_state	enum(int,int,int,int)
!=	O
MU_IMAP_SESSION_SELECTED	int
)	O
return	O
MU_ERR_SEQ	O
;	O
if	O
(	O
!	O
ps	*(struct(int,int,int,long,long,long,long,long))
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
(	O
ps	*(struct(int,int,int,long,long,long,long,long))
->	O
flags	int
&	O
STATUS_FLAG_MASK	O
)	O
==	O
0	int
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
mboxname	*(char)
)	O
{	O
if	O
(	O
imap	*(struct)
->	O
session_state	enum(int,int,int,int)
==	O
MU_IMAP_SESSION_SELECTED	int
)	O
{	O
if	O
(	O
ps	*(struct(int,int,int,long,long,long,long,long))
)	O
*	O
ps	*(struct(int,int,int,long,long,long,long,long))
=	O
imap	*(struct)
->	O
mbox_stat	struct(int,int,int,long,long,long,long,long)
;	O
return	O
0	int
;	O
}	O
return	O
EINVAL	int
;	O
}	O
if	O
(	O
imap	*(struct)
->	O
mbox_name	*(char)
&&	O
strcmp	(*(char),*(char))->(int)
(	O
imap	*(struct)
->	O
mbox_name	*(char)
,	O
mboxname	*(char)
)	O
==	O
0	int
)	O
{	O
if	O
(	O
ps	*(struct(int,int,int,long,long,long,long,long))
)	O
*	O
ps	*(struct(int,int,int,long,long,long,long,long))
=	O
imap	*(struct)
->	O
mbox_stat	struct(int,int,int,long,long,long,long,long)
;	O
return	O
0	int
;	O
}	O
switch	O
(	O
imap	*(struct)
->	O
client_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
{	O
case	O
MU_IMAP_CLIENT_READY	int
:	O
status	int
=	O
_mu_imap_tag_next	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(int)
(	O
imap	*(struct)
)	O
;	O
MU_IMAP_CHECK_EAGAIN	O
(	O
imap	*(struct)
,	O
status	int
)	O
;	O
status	int
=	O
mu_imapio_printf	(*(struct),*(char))->(int)
(	O
imap	*(struct)
->	O
io	*(struct)
,	O
"%s STATUS %s ("	*(char)
,	O
imap	*(struct)
->	O
tag_str	*(char)
,	O
mboxname	*(char)
)	O
;	O
MU_IMAP_CHECK_ERROR	O
(	O
imap	*(struct)
,	O
status	int
)	O
;	O
delim	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
status	int
==	O
0	int
&&	O
_mu_imap_status_name_table	array(struct(*(char),int))
[	O
i	int
]	O
.	O
name	*(char)
;	O
i	int
++	O
)	O
{	O
if	O
(	O
ps	*(struct(int,int,int,long,long,long,long,long))
->	O
flags	int
&	O
_mu_imap_status_name_table	array(struct(*(char),int))
[	O
i	int
]	O
.	O
tok	int
)	O
{	O
if	O
(	O
delim	int
)	O
status	int
=	O
mu_imapio_send	(*(struct),*(char),long)->(int)
(	O
imap	*(struct)
->	O
io	*(struct)
,	O
" "	*(char)
,	O
1	int
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
status	int
=	O
mu_imapio_printf	(*(struct),*(char))->(int)
(	O
imap	*(struct)
->	O
io	*(struct)
,	O
"%s"	*(char)
,	O
_mu_imap_status_name_table	array(struct(*(char),int))
[	O
i	int
]	O
.	O
name	*(char)
)	O
;	O
}	O
delim	int
=	O
1	int
;	O
}	O
if	O
(	O
status	int
==	O
0	int
)	O
status	int
=	O
mu_imapio_send	(*(struct),*(char),long)->(int)
(	O
imap	*(struct)
->	O
io	*(struct)
,	O
")\r\n"	*(char)
,	O
3	int
)	O
;	O
MU_IMAP_CHECK_ERROR	O
(	O
imap	*(struct)
,	O
status	int
)	O
;	O
MU_IMAP_FCLR	O
(	O
imap	*(struct)
,	O
MU_IMAP_RESP	int
)	O
;	O
imap	*(struct)
->	O
client_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
MU_IMAP_CLIENT_STATUS_RX	int
;	O
case	O
MU_IMAP_CLIENT_STATUS_RX	int
:	O
{	O
struct	O
status_data	struct(*(char),*(struct(int,int,int,long,long,long,long,long)))
sd	*(struct(*(char),*(struct(int,int,int,long,long,long,long,long))))
=	O
{	O
mboxname	*(char)
,	O
ps	*(struct(int,int,int,long,long,long,long,long))
}	O
;	O
status	int
=	O
_mu_imap_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),*(void))->(int)
(	O
imap	*(struct)
,	O
_status_response_action	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)
,	O
&	O
sd	*(struct(*(char),*(struct(int,int,int,long,long,long,long,long))))
)	O
;	O
MU_IMAP_CHECK_EAGAIN	O
(	O
imap	*(struct)
,	O
status	int
)	O
;	O
switch	O
(	O
imap	*(struct)
->	O
response	enum(int,int,int)
)	O
{	O
case	O
MU_IMAP_OK	int
:	O
break	O
;	O
case	O
MU_IMAP_NO	int
:	O
status	int
=	O
EACCES	int
;	O
break	O
;	O
case	O
MU_IMAP_BAD	int
:	O
status	int
=	O
MU_ERR_BADREPLY	O
;	O
break	O
;	O
}	O
imap	*(struct)
->	O
client_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
MU_IMAP_CLIENT_READY	int
;	O
}	O
break	O
;	O
default	O
:	O
status	int
=	O
EINPROGRESS	int
;	O
}	O
return	O
status	int
;	O
}	O
