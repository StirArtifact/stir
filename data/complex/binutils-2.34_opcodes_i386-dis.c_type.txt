static	O
int	O
print_insn	O
(	O
bfd_vma	long
,	O
disassemble_info	O
*	O
)	O
;	O
static	O
void	O
dofloat	O
(	O
int	O
)	O
;	O
static	O
void	O
OP_ST	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_STi	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
int	O
putop	O
(	O
const	O
char	O
*	O
,	O
int	O
)	O
;	O
static	O
void	O
oappend	O
(	O
const	O
char	O
*	O
)	O
;	O
static	O
void	O
append_seg	O
(	O
void	O
)	O
;	O
static	O
void	O
OP_indirE	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
print_operand_value	O
(	O
char	O
*	O
,	O
int	O
,	O
bfd_vma	long
)	O
;	O
static	O
void	O
OP_E_register	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_E_memory	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
print_displacement	O
(	O
char	O
*	O
,	O
bfd_vma	long
)	O
;	O
static	O
void	O
OP_E	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_G	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
bfd_vma	long
get64	O
(	O
void	O
)	O
;	O
static	O
bfd_signed_vma	long
get32	O
(	O
void	O
)	O
;	O
static	O
bfd_signed_vma	long
get32s	O
(	O
void	O
)	O
;	O
static	O
int	O
get16	O
(	O
void	O
)	O
;	O
static	O
void	O
set_op	O
(	O
bfd_vma	long
,	O
int	O
)	O
;	O
static	O
void	O
OP_Skip_MODRM	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_REG	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_IMREG	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_I	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_I64	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_sI	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_J	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_SEG	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_DIR	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_OFF	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_OFF64	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
ptr_reg	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_ESreg	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_DSreg	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_C	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_D	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_T	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_R	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_MMX	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_XMM	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_EM	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_EX	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_EMC	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_MXC	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_MS	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_XS	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_M	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_VEX	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_EX_Vex	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_EX_VexW	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_EX_VexImmW	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_XMM_Vex	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_XMM_VexW	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_Rounding	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_REG_VexI4	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
PCLMUL_Fixup	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
VCMP_Fixup	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
VPCMP_Fixup	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
VPCOM_Fixup	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_0f07	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_Monitor	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_Mwait	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
NOP_Fixup1	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
NOP_Fixup2	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_3DNowSuffix	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
CMP_Fixup	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
BadOp	O
(	O
void	O
)	O
;	O
static	O
void	O
REP_Fixup	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
SEP_Fixup	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
BND_Fixup	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
NOTRACK_Fixup	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
HLE_Fixup1	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
HLE_Fixup2	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
HLE_Fixup3	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
CMPXCHG8B_Fixup	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
XMM_Fixup	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
CRC32_Fixup	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
FXSAVE_Fixup	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
PCMPESTR_Fixup	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_LWPCB_E	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_LWP_E	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_Vex_2src_1	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_Vex_2src_2	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
MOVBE_Fixup	O
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_Mask	O
(	O
int	O
,	O
int	O
)	O
;	O
struct	O
dis_private	O
{	O
bfd_byte	char
*	O
max_fetched	O
;	O
bfd_byte	char
the_buffer	O
[	O
MAX_MNEM_SIZE	O
]	O
;	O
bfd_vma	long
insn_start	O
;	O
int	O
orig_sizeflag	O
;	O
OPCODES_SIGJMP_BUF	O
bailout	O
;	O
}	O
;	O
enum	O
address_mode	O
{	O
mode_16bit	O
,	O
mode_32bit	O
,	O
mode_64bit	O
}	O
;	O
enum	O
address_mode	O
address_mode	O
;	O
static	O
int	O
prefixes	O
;	O
static	O
int	O
rex	O
;	O
static	O
int	O
rex_used	O
;	O
static	O
int	O
rex_ignored	O
;	O
static	O
int	O
used_prefixes	O
;	O
static	O
int	O
fetch_data	O
(	O
struct	O
disassemble_info	O
*	O
info	*(void)
,	O
bfd_byte	char
*	O
addr	*(void)
)	O
{	O
int	O
status	O
;	O
struct	O
dis_private	O
*	O
priv	O
=	O
(	O
struct	O
dis_private	O
*	O
)	O
info	*(void)
->	O
private_data	O
;	O
bfd_vma	long
start	O
=	O
priv	O
->	O
insn_start	O
+	O
(	O
priv	O
->	O
max_fetched	O
-	O
priv	O
->	O
the_buffer	O
)	O
;	O
if	O
(	O
addr	*(void)
<=	O
priv	O
->	O
the_buffer	O
+	O
MAX_MNEM_SIZE	O
)	O
status	O
=	O
(	O
*	O
info	*(void)
->	O
read_memory_func	O
)	O
(	O
start	O
,	O
priv	O
->	O
max_fetched	O
,	O
addr	*(void)
-	O
priv	O
->	O
max_fetched	O
,	O
info	*(void)
)	O
;	O
else	O
status	O
=	O
-	O
1	int
;	O
if	O
(	O
status	O
!=	O
0	int
)	O
{	O
if	O
(	O
priv	O
->	O
max_fetched	O
==	O
priv	O
->	O
the_buffer	O
)	O
(	O
*	O
info	*(void)
->	O
memory_error_func	O
)	O
(	O
status	O
,	O
start	O
,	O
info	*(void)
)	O
;	O
OPCODES_SIGLONGJMP	O
(	O
priv	O
->	O
bailout	O
,	O
1	int
)	O
;	O
}	O
else	O
priv	O
->	O
max_fetched	O
=	O
addr	*(void)
;	O
return	O
1	int
;	O
}	O
enum	O
{	O
b_mode	O
=	O
1	int
,	O
b_swap_mode	O
,	O
b_T_mode	O
,	O
v_mode	O
,	O
v_swap_mode	O
,	O
va_mode	O
,	O
w_mode	O
,	O
d_mode	O
,	O
d_swap_mode	O
,	O
q_mode	O
,	O
q_swap_mode	O
,	O
t_mode	O
,	O
x_mode	O
,	O
evex_x_gscat_mode	O
,	O
evex_x_nobcst_mode	O
,	O
x_swap_mode	O
,	O
xmm_mode	O
,	O
xmmq_mode	O
,	O
evex_half_bcst_xmmq_mode	O
,	O
xmm_mb_mode	O
,	O
xmm_mw_mode	O
,	O
xmm_md_mode	O
,	O
xmm_mq_mode	O
,	O
xmm_mdq_mode	O
,	O
xmmdw_mode	O
,	O
xmmqd_mode	O
,	O
ymm_mode	O
,	O
ymmq_mode	O
,	O
ymmxmm_mode	O
,	O
m_mode	O
,	O
a_mode	O
,	O
cond_jump_mode	O
,	O
loop_jcxz_mode	O
,	O
v_bnd_mode	O
,	O
v_bndmk_mode	O
,	O
dq_mode	O
,	O
dqw_mode	O
,	O
bnd_mode	O
,	O
bnd_swap_mode	O
,	O
f_mode	O
,	O
const_1_mode	O
,	O
indir_v_mode	O
,	O
stack_v_mode	O
,	O
z_mode	O
,	O
o_mode	O
,	O
dqb_mode	O
,	O
db_mode	O
,	O
dw_mode	O
,	O
dqd_mode	O
,	O
vex_mode	O
,	O
vex128_mode	O
,	O
vex256_mode	O
,	O
vex_w_dq_mode	O
,	O
vex_vsib_d_w_dq_mode	O
,	O
vex_vsib_d_w_d_mode	O
,	O
vex_vsib_q_w_dq_mode	O
,	O
vex_vsib_q_w_d_mode	O
,	O
scalar_mode	O
,	O
b_scalar_mode	O
,	O
w_scalar_mode	O
,	O
d_scalar_mode	O
,	O
d_scalar_swap_mode	O
,	O
q_scalar_mode	O
,	O
q_scalar_swap_mode	O
,	O
vex_scalar_mode	O
,	O
vex_scalar_w_dq_mode	O
,	O
evex_rounding_mode	O
,	O
evex_rounding_64_mode	O
,	O
evex_sae_mode	O
,	O
mask_mode	O
,	O
mask_bd_mode	O
,	O
es_reg	O
,	O
cs_reg	O
,	O
ss_reg	O
,	O
ds_reg	O
,	O
fs_reg	O
,	O
gs_reg	O
,	O
eAX_reg	O
,	O
eCX_reg	O
,	O
eDX_reg	O
,	O
eBX_reg	O
,	O
eSP_reg	O
,	O
eBP_reg	O
,	O
eSI_reg	O
,	O
eDI_reg	O
,	O
al_reg	O
,	O
cl_reg	O
,	O
dl_reg	O
,	O
bl_reg	O
,	O
ah_reg	O
,	O
ch_reg	O
,	O
dh_reg	O
,	O
bh_reg	O
,	O
ax_reg	O
,	O
cx_reg	O
,	O
dx_reg	O
,	O
bx_reg	O
,	O
sp_reg	O
,	O
bp_reg	O
,	O
si_reg	O
,	O
di_reg	O
,	O
rAX_reg	O
,	O
rCX_reg	O
,	O
rDX_reg	O
,	O
rBX_reg	O
,	O
rSP_reg	O
,	O
rBP_reg	O
,	O
rSI_reg	O
,	O
rDI_reg	O
,	O
z_mode_ax_reg	O
,	O
indir_dx_reg	O
}	O
;	O
enum	O
{	O
FLOATCODE	O
=	O
1	int
,	O
USE_REG_TABLE	O
,	O
USE_MOD_TABLE	O
,	O
USE_RM_TABLE	O
,	O
USE_PREFIX_TABLE	O
,	O
USE_X86_64_TABLE	O
,	O
USE_3BYTE_TABLE	O
,	O
USE_XOP_8F_TABLE	O
,	O
USE_VEX_C4_TABLE	O
,	O
USE_VEX_C5_TABLE	O
,	O
USE_VEX_LEN_TABLE	O
,	O
USE_VEX_W_TABLE	O
,	O
USE_EVEX_TABLE	O
,	O
USE_EVEX_LEN_TABLE	O
}	O
;	O
enum	O
{	O
REG_80	O
=	O
0	int
,	O
REG_81	O
,	O
REG_83	O
,	O
REG_8F	O
,	O
REG_C0	O
,	O
REG_C1	O
,	O
REG_C6	O
,	O
REG_C7	O
,	O
REG_D0	O
,	O
REG_D1	O
,	O
REG_D2	O
,	O
REG_D3	O
,	O
REG_F6	O
,	O
REG_F7	O
,	O
REG_FE	O
,	O
REG_FF	O
,	O
REG_0F00	O
,	O
REG_0F01	O
,	O
REG_0F0D	O
,	O
REG_0F18	O
,	O
REG_0F1C_P_0_MOD_0	O
,	O
REG_0F1E_P_1_MOD_3	O
,	O
REG_0F71	O
,	O
REG_0F72	O
,	O
REG_0F73	O
,	O
REG_0FA6	O
,	O
REG_0FA7	O
,	O
REG_0FAE	O
,	O
REG_0FBA	O
,	O
REG_0FC7	O
,	O
REG_VEX_0F71	O
,	O
REG_VEX_0F72	O
,	O
REG_VEX_0F73	O
,	O
REG_VEX_0FAE	O
,	O
REG_VEX_0F38F3	O
,	O
REG_XOP_LWPCB	O
,	O
REG_XOP_LWP	O
,	O
REG_XOP_TBM_01	O
,	O
REG_XOP_TBM_02	O
,	O
REG_EVEX_0F71	O
,	O
REG_EVEX_0F72	O
,	O
REG_EVEX_0F73	O
,	O
REG_EVEX_0F38C6	O
,	O
REG_EVEX_0F38C7	O
}	O
;	O
enum	O
{	O
MOD_8D	O
=	O
0	int
,	O
MOD_C6_REG_7	O
,	O
MOD_C7_REG_7	O
,	O
MOD_FF_REG_3	O
,	O
MOD_FF_REG_5	O
,	O
MOD_0F01_REG_0	O
,	O
MOD_0F01_REG_1	O
,	O
MOD_0F01_REG_2	O
,	O
MOD_0F01_REG_3	O
,	O
MOD_0F01_REG_5	O
,	O
MOD_0F01_REG_7	O
,	O
MOD_0F12_PREFIX_0	O
,	O
MOD_0F13	O
,	O
MOD_0F16_PREFIX_0	O
,	O
MOD_0F17	O
,	O
MOD_0F18_REG_0	O
,	O
MOD_0F18_REG_1	O
,	O
MOD_0F18_REG_2	O
,	O
MOD_0F18_REG_3	O
,	O
MOD_0F18_REG_4	O
,	O
MOD_0F18_REG_5	O
,	O
MOD_0F18_REG_6	O
,	O
MOD_0F18_REG_7	O
,	O
MOD_0F1A_PREFIX_0	O
,	O
MOD_0F1B_PREFIX_0	O
,	O
MOD_0F1B_PREFIX_1	O
,	O
MOD_0F1C_PREFIX_0	O
,	O
MOD_0F1E_PREFIX_1	O
,	O
MOD_0F24	O
,	O
MOD_0F26	O
,	O
MOD_0F2B_PREFIX_0	O
,	O
MOD_0F2B_PREFIX_1	O
,	O
MOD_0F2B_PREFIX_2	O
,	O
MOD_0F2B_PREFIX_3	O
,	O
MOD_0F51	O
,	O
MOD_0F71_REG_2	O
,	O
MOD_0F71_REG_4	O
,	O
MOD_0F71_REG_6	O
,	O
MOD_0F72_REG_2	O
,	O
MOD_0F72_REG_4	O
,	O
MOD_0F72_REG_6	O
,	O
MOD_0F73_REG_2	O
,	O
MOD_0F73_REG_3	O
,	O
MOD_0F73_REG_6	O
,	O
MOD_0F73_REG_7	O
,	O
MOD_0FAE_REG_0	O
,	O
MOD_0FAE_REG_1	O
,	O
MOD_0FAE_REG_2	O
,	O
MOD_0FAE_REG_3	O
,	O
MOD_0FAE_REG_4	O
,	O
MOD_0FAE_REG_5	O
,	O
MOD_0FAE_REG_6	O
,	O
MOD_0FAE_REG_7	O
,	O
MOD_0FB2	O
,	O
MOD_0FB4	O
,	O
MOD_0FB5	O
,	O
MOD_0FC3	O
,	O
MOD_0FC7_REG_3	O
,	O
MOD_0FC7_REG_4	O
,	O
MOD_0FC7_REG_5	O
,	O
MOD_0FC7_REG_6	O
,	O
MOD_0FC7_REG_7	O
,	O
MOD_0FD7	O
,	O
MOD_0FE7_PREFIX_2	O
,	O
MOD_0FF0_PREFIX_3	O
,	O
MOD_0F382A_PREFIX_2	O
,	O
MOD_0F38F5_PREFIX_2	O
,	O
MOD_0F38F6_PREFIX_0	O
,	O
MOD_0F38F8_PREFIX_1	O
,	O
MOD_0F38F8_PREFIX_2	O
,	O
MOD_0F38F8_PREFIX_3	O
,	O
MOD_0F38F9_PREFIX_0	O
,	O
MOD_62_32BIT	O
,	O
MOD_C4_32BIT	O
,	O
MOD_C5_32BIT	O
,	O
MOD_VEX_0F12_PREFIX_0	O
,	O
MOD_VEX_0F13	O
,	O
MOD_VEX_0F16_PREFIX_0	O
,	O
MOD_VEX_0F17	O
,	O
MOD_VEX_0F2B	O
,	O
MOD_VEX_W_0_0F41_P_0_LEN_1	O
,	O
MOD_VEX_W_1_0F41_P_0_LEN_1	O
,	O
MOD_VEX_W_0_0F41_P_2_LEN_1	O
,	O
MOD_VEX_W_1_0F41_P_2_LEN_1	O
,	O
MOD_VEX_W_0_0F42_P_0_LEN_1	O
,	O
MOD_VEX_W_1_0F42_P_0_LEN_1	O
,	O
MOD_VEX_W_0_0F42_P_2_LEN_1	O
,	O
MOD_VEX_W_1_0F42_P_2_LEN_1	O
,	O
MOD_VEX_W_0_0F44_P_0_LEN_1	O
,	O
MOD_VEX_W_1_0F44_P_0_LEN_1	O
,	O
MOD_VEX_W_0_0F44_P_2_LEN_1	O
,	O
MOD_VEX_W_1_0F44_P_2_LEN_1	O
,	O
MOD_VEX_W_0_0F45_P_0_LEN_1	O
,	O
MOD_VEX_W_1_0F45_P_0_LEN_1	O
,	O
MOD_VEX_W_0_0F45_P_2_LEN_1	O
,	O
MOD_VEX_W_1_0F45_P_2_LEN_1	O
,	O
MOD_VEX_W_0_0F46_P_0_LEN_1	O
,	O
MOD_VEX_W_1_0F46_P_0_LEN_1	O
,	O
MOD_VEX_W_0_0F46_P_2_LEN_1	O
,	O
MOD_VEX_W_1_0F46_P_2_LEN_1	O
,	O
MOD_VEX_W_0_0F47_P_0_LEN_1	O
,	O
MOD_VEX_W_1_0F47_P_0_LEN_1	O
,	O
MOD_VEX_W_0_0F47_P_2_LEN_1	O
,	O
MOD_VEX_W_1_0F47_P_2_LEN_1	O
,	O
MOD_VEX_W_0_0F4A_P_0_LEN_1	O
,	O
MOD_VEX_W_1_0F4A_P_0_LEN_1	O
,	O
MOD_VEX_W_0_0F4A_P_2_LEN_1	O
,	O
MOD_VEX_W_1_0F4A_P_2_LEN_1	O
,	O
MOD_VEX_W_0_0F4B_P_0_LEN_1	O
,	O
MOD_VEX_W_1_0F4B_P_0_LEN_1	O
,	O
MOD_VEX_W_0_0F4B_P_2_LEN_1	O
,	O
MOD_VEX_0F50	O
,	O
MOD_VEX_0F71_REG_2	O
,	O
MOD_VEX_0F71_REG_4	O
,	O
MOD_VEX_0F71_REG_6	O
,	O
MOD_VEX_0F72_REG_2	O
,	O
MOD_VEX_0F72_REG_4	O
,	O
MOD_VEX_0F72_REG_6	O
,	O
MOD_VEX_0F73_REG_2	O
,	O
MOD_VEX_0F73_REG_3	O
,	O
MOD_VEX_0F73_REG_6	O
,	O
MOD_VEX_0F73_REG_7	O
,	O
MOD_VEX_W_0_0F91_P_0_LEN_0	O
,	O
MOD_VEX_W_1_0F91_P_0_LEN_0	O
,	O
MOD_VEX_W_0_0F91_P_2_LEN_0	O
,	O
MOD_VEX_W_1_0F91_P_2_LEN_0	O
,	O
MOD_VEX_W_0_0F92_P_0_LEN_0	O
,	O
MOD_VEX_W_0_0F92_P_2_LEN_0	O
,	O
MOD_VEX_0F92_P_3_LEN_0	O
,	O
MOD_VEX_W_0_0F93_P_0_LEN_0	O
,	O
MOD_VEX_W_0_0F93_P_2_LEN_0	O
,	O
MOD_VEX_0F93_P_3_LEN_0	O
,	O
MOD_VEX_W_0_0F98_P_0_LEN_0	O
,	O
MOD_VEX_W_1_0F98_P_0_LEN_0	O
,	O
MOD_VEX_W_0_0F98_P_2_LEN_0	O
,	O
MOD_VEX_W_1_0F98_P_2_LEN_0	O
,	O
MOD_VEX_W_0_0F99_P_0_LEN_0	O
,	O
MOD_VEX_W_1_0F99_P_0_LEN_0	O
,	O
MOD_VEX_W_0_0F99_P_2_LEN_0	O
,	O
MOD_VEX_W_1_0F99_P_2_LEN_0	O
,	O
MOD_VEX_0FAE_REG_2	O
,	O
MOD_VEX_0FAE_REG_3	O
,	O
MOD_VEX_0FD7_PREFIX_2	O
,	O
MOD_VEX_0FE7_PREFIX_2	O
,	O
MOD_VEX_0FF0_PREFIX_3	O
,	O
MOD_VEX_0F381A_PREFIX_2	O
,	O
MOD_VEX_0F382A_PREFIX_2	O
,	O
MOD_VEX_0F382C_PREFIX_2	O
,	O
MOD_VEX_0F382D_PREFIX_2	O
,	O
MOD_VEX_0F382E_PREFIX_2	O
,	O
MOD_VEX_0F382F_PREFIX_2	O
,	O
MOD_VEX_0F385A_PREFIX_2	O
,	O
MOD_VEX_0F388C_PREFIX_2	O
,	O
MOD_VEX_0F388E_PREFIX_2	O
,	O
MOD_VEX_W_0_0F3A30_P_2_LEN_0	O
,	O
MOD_VEX_W_1_0F3A30_P_2_LEN_0	O
,	O
MOD_VEX_W_0_0F3A31_P_2_LEN_0	O
,	O
MOD_VEX_W_1_0F3A31_P_2_LEN_0	O
,	O
MOD_VEX_W_0_0F3A32_P_2_LEN_0	O
,	O
MOD_VEX_W_1_0F3A32_P_2_LEN_0	O
,	O
MOD_VEX_W_0_0F3A33_P_2_LEN_0	O
,	O
MOD_VEX_W_1_0F3A33_P_2_LEN_0	O
,	O
MOD_EVEX_0F12_PREFIX_0	O
,	O
MOD_EVEX_0F16_PREFIX_0	O
,	O
MOD_EVEX_0F38C6_REG_1	O
,	O
MOD_EVEX_0F38C6_REG_2	O
,	O
MOD_EVEX_0F38C6_REG_5	O
,	O
MOD_EVEX_0F38C6_REG_6	O
,	O
MOD_EVEX_0F38C7_REG_1	O
,	O
MOD_EVEX_0F38C7_REG_2	O
,	O
MOD_EVEX_0F38C7_REG_5	O
,	O
MOD_EVEX_0F38C7_REG_6	O
}	O
;	O
enum	O
{	O
RM_C6_REG_7	O
=	O
0	int
,	O
RM_C7_REG_7	O
,	O
RM_0F01_REG_0	O
,	O
RM_0F01_REG_1	O
,	O
RM_0F01_REG_2	O
,	O
RM_0F01_REG_3	O
,	O
RM_0F01_REG_5_MOD_3	O
,	O
RM_0F01_REG_7_MOD_3	O
,	O
RM_0F1E_P_1_MOD_3_REG_7	O
,	O
RM_0FAE_REG_6_MOD_3_P_0	O
,	O
RM_0FAE_REG_7_MOD_3	O
,	O
}	O
;	O
enum	O
{	O
PREFIX_90	O
=	O
0	int
,	O
PREFIX_0F01_REG_5_MOD_0	O
,	O
PREFIX_0F01_REG_5_MOD_3_RM_0	O
,	O
PREFIX_0F01_REG_5_MOD_3_RM_2	O
,	O
PREFIX_0F01_REG_7_MOD_3_RM_2	O
,	O
PREFIX_0F01_REG_7_MOD_3_RM_3	O
,	O
PREFIX_0F09	O
,	O
PREFIX_0F10	O
,	O
PREFIX_0F11	O
,	O
PREFIX_0F12	O
,	O
PREFIX_0F16	O
,	O
PREFIX_0F1A	O
,	O
PREFIX_0F1B	O
,	O
PREFIX_0F1C	O
,	O
PREFIX_0F1E	O
,	O
PREFIX_0F2A	O
,	O
PREFIX_0F2B	O
,	O
PREFIX_0F2C	O
,	O
PREFIX_0F2D	O
,	O
PREFIX_0F2E	O
,	O
PREFIX_0F2F	O
,	O
PREFIX_0F51	O
,	O
PREFIX_0F52	O
,	O
PREFIX_0F53	O
,	O
PREFIX_0F58	O
,	O
PREFIX_0F59	O
,	O
PREFIX_0F5A	O
,	O
PREFIX_0F5B	O
,	O
PREFIX_0F5C	O
,	O
PREFIX_0F5D	O
,	O
PREFIX_0F5E	O
,	O
PREFIX_0F5F	O
,	O
PREFIX_0F60	O
,	O
PREFIX_0F61	O
,	O
PREFIX_0F62	O
,	O
PREFIX_0F6C	O
,	O
PREFIX_0F6D	O
,	O
PREFIX_0F6F	O
,	O
PREFIX_0F70	O
,	O
PREFIX_0F73_REG_3	O
,	O
PREFIX_0F73_REG_7	O
,	O
PREFIX_0F78	O
,	O
PREFIX_0F79	O
,	O
PREFIX_0F7C	O
,	O
PREFIX_0F7D	O
,	O
PREFIX_0F7E	O
,	O
PREFIX_0F7F	O
,	O
PREFIX_0FAE_REG_0_MOD_3	O
,	O
PREFIX_0FAE_REG_1_MOD_3	O
,	O
PREFIX_0FAE_REG_2_MOD_3	O
,	O
PREFIX_0FAE_REG_3_MOD_3	O
,	O
PREFIX_0FAE_REG_4_MOD_0	O
,	O
PREFIX_0FAE_REG_4_MOD_3	O
,	O
PREFIX_0FAE_REG_5_MOD_0	O
,	O
PREFIX_0FAE_REG_5_MOD_3	O
,	O
PREFIX_0FAE_REG_6_MOD_0	O
,	O
PREFIX_0FAE_REG_6_MOD_3	O
,	O
PREFIX_0FAE_REG_7_MOD_0	O
,	O
PREFIX_0FB8	O
,	O
PREFIX_0FBC	O
,	O
PREFIX_0FBD	O
,	O
PREFIX_0FC2	O
,	O
PREFIX_0FC3_MOD_0	O
,	O
PREFIX_0FC7_REG_6_MOD_0	O
,	O
PREFIX_0FC7_REG_6_MOD_3	O
,	O
PREFIX_0FC7_REG_7_MOD_3	O
,	O
PREFIX_0FD0	O
,	O
PREFIX_0FD6	O
,	O
PREFIX_0FE6	O
,	O
PREFIX_0FE7	O
,	O
PREFIX_0FF0	O
,	O
PREFIX_0FF7	O
,	O
PREFIX_0F3810	O
,	O
PREFIX_0F3814	O
,	O
PREFIX_0F3815	O
,	O
PREFIX_0F3817	O
,	O
PREFIX_0F3820	O
,	O
PREFIX_0F3821	O
,	O
PREFIX_0F3822	O
,	O
PREFIX_0F3823	O
,	O
PREFIX_0F3824	O
,	O
PREFIX_0F3825	O
,	O
PREFIX_0F3828	O
,	O
PREFIX_0F3829	O
,	O
PREFIX_0F382A	O
,	O
PREFIX_0F382B	O
,	O
PREFIX_0F3830	O
,	O
PREFIX_0F3831	O
,	O
PREFIX_0F3832	O
,	O
PREFIX_0F3833	O
,	O
PREFIX_0F3834	O
,	O
PREFIX_0F3835	O
,	O
PREFIX_0F3837	O
,	O
PREFIX_0F3838	O
,	O
PREFIX_0F3839	O
,	O
PREFIX_0F383A	O
,	O
PREFIX_0F383B	O
,	O
PREFIX_0F383C	O
,	O
PREFIX_0F383D	O
,	O
PREFIX_0F383E	O
,	O
PREFIX_0F383F	O
,	O
PREFIX_0F3840	O
,	O
PREFIX_0F3841	O
,	O
PREFIX_0F3880	O
,	O
PREFIX_0F3881	O
,	O
PREFIX_0F3882	O
,	O
PREFIX_0F38C8	O
,	O
PREFIX_0F38C9	O
,	O
PREFIX_0F38CA	O
,	O
PREFIX_0F38CB	O
,	O
PREFIX_0F38CC	O
,	O
PREFIX_0F38CD	O
,	O
PREFIX_0F38CF	O
,	O
PREFIX_0F38DB	O
,	O
PREFIX_0F38DC	O
,	O
PREFIX_0F38DD	O
,	O
PREFIX_0F38DE	O
,	O
PREFIX_0F38DF	O
,	O
PREFIX_0F38F0	O
,	O
PREFIX_0F38F1	O
,	O
PREFIX_0F38F5	O
,	O
PREFIX_0F38F6	O
,	O
PREFIX_0F38F8	O
,	O
PREFIX_0F38F9	O
,	O
PREFIX_0F3A08	O
,	O
PREFIX_0F3A09	O
,	O
PREFIX_0F3A0A	O
,	O
PREFIX_0F3A0B	O
,	O
PREFIX_0F3A0C	O
,	O
PREFIX_0F3A0D	O
,	O
PREFIX_0F3A0E	O
,	O
PREFIX_0F3A14	O
,	O
PREFIX_0F3A15	O
,	O
PREFIX_0F3A16	O
,	O
PREFIX_0F3A17	O
,	O
PREFIX_0F3A20	O
,	O
PREFIX_0F3A21	O
,	O
PREFIX_0F3A22	O
,	O
PREFIX_0F3A40	O
,	O
PREFIX_0F3A41	O
,	O
PREFIX_0F3A42	O
,	O
PREFIX_0F3A44	O
,	O
PREFIX_0F3A60	O
,	O
PREFIX_0F3A61	O
,	O
PREFIX_0F3A62	O
,	O
PREFIX_0F3A63	O
,	O
PREFIX_0F3ACC	O
,	O
PREFIX_0F3ACE	O
,	O
PREFIX_0F3ACF	O
,	O
PREFIX_0F3ADF	O
,	O
PREFIX_VEX_0F10	O
,	O
PREFIX_VEX_0F11	O
,	O
PREFIX_VEX_0F12	O
,	O
PREFIX_VEX_0F16	O
,	O
PREFIX_VEX_0F2A	O
,	O
PREFIX_VEX_0F2C	O
,	O
PREFIX_VEX_0F2D	O
,	O
PREFIX_VEX_0F2E	O
,	O
PREFIX_VEX_0F2F	O
,	O
PREFIX_VEX_0F41	O
,	O
PREFIX_VEX_0F42	O
,	O
PREFIX_VEX_0F44	O
,	O
PREFIX_VEX_0F45	O
,	O
PREFIX_VEX_0F46	O
,	O
PREFIX_VEX_0F47	O
,	O
PREFIX_VEX_0F4A	O
,	O
PREFIX_VEX_0F4B	O
,	O
PREFIX_VEX_0F51	O
,	O
PREFIX_VEX_0F52	O
,	O
PREFIX_VEX_0F53	O
,	O
PREFIX_VEX_0F58	O
,	O
PREFIX_VEX_0F59	O
,	O
PREFIX_VEX_0F5A	O
,	O
PREFIX_VEX_0F5B	O
,	O
PREFIX_VEX_0F5C	O
,	O
PREFIX_VEX_0F5D	O
,	O
PREFIX_VEX_0F5E	O
,	O
PREFIX_VEX_0F5F	O
,	O
PREFIX_VEX_0F60	O
,	O
PREFIX_VEX_0F61	O
,	O
PREFIX_VEX_0F62	O
,	O
PREFIX_VEX_0F63	O
,	O
PREFIX_VEX_0F64	O
,	O
PREFIX_VEX_0F65	O
,	O
PREFIX_VEX_0F66	O
,	O
PREFIX_VEX_0F67	O
,	O
PREFIX_VEX_0F68	O
,	O
PREFIX_VEX_0F69	O
,	O
PREFIX_VEX_0F6A	O
,	O
PREFIX_VEX_0F6B	O
,	O
PREFIX_VEX_0F6C	O
,	O
PREFIX_VEX_0F6D	O
,	O
PREFIX_VEX_0F6E	O
,	O
PREFIX_VEX_0F6F	O
,	O
PREFIX_VEX_0F70	O
,	O
PREFIX_VEX_0F71_REG_2	O
,	O
PREFIX_VEX_0F71_REG_4	O
,	O
PREFIX_VEX_0F71_REG_6	O
,	O
PREFIX_VEX_0F72_REG_2	O
,	O
PREFIX_VEX_0F72_REG_4	O
,	O
PREFIX_VEX_0F72_REG_6	O
,	O
PREFIX_VEX_0F73_REG_2	O
,	O
PREFIX_VEX_0F73_REG_3	O
,	O
PREFIX_VEX_0F73_REG_6	O
,	O
PREFIX_VEX_0F73_REG_7	O
,	O
PREFIX_VEX_0F74	O
,	O
PREFIX_VEX_0F75	O
,	O
PREFIX_VEX_0F76	O
,	O
PREFIX_VEX_0F77	O
,	O
PREFIX_VEX_0F7C	O
,	O
PREFIX_VEX_0F7D	O
,	O
PREFIX_VEX_0F7E	O
,	O
PREFIX_VEX_0F7F	O
,	O
PREFIX_VEX_0F90	O
,	O
PREFIX_VEX_0F91	O
,	O
PREFIX_VEX_0F92	O
,	O
PREFIX_VEX_0F93	O
,	O
PREFIX_VEX_0F98	O
,	O
PREFIX_VEX_0F99	O
,	O
PREFIX_VEX_0FC2	O
,	O
PREFIX_VEX_0FC4	O
,	O
PREFIX_VEX_0FC5	O
,	O
PREFIX_VEX_0FD0	O
,	O
PREFIX_VEX_0FD1	O
,	O
PREFIX_VEX_0FD2	O
,	O
PREFIX_VEX_0FD3	O
,	O
PREFIX_VEX_0FD4	O
,	O
PREFIX_VEX_0FD5	O
,	O
PREFIX_VEX_0FD6	O
,	O
PREFIX_VEX_0FD7	O
,	O
PREFIX_VEX_0FD8	O
,	O
PREFIX_VEX_0FD9	O
,	O
PREFIX_VEX_0FDA	O
,	O
PREFIX_VEX_0FDB	O
,	O
PREFIX_VEX_0FDC	O
,	O
PREFIX_VEX_0FDD	O
,	O
PREFIX_VEX_0FDE	O
,	O
PREFIX_VEX_0FDF	O
,	O
PREFIX_VEX_0FE0	O
,	O
PREFIX_VEX_0FE1	O
,	O
PREFIX_VEX_0FE2	O
,	O
PREFIX_VEX_0FE3	O
,	O
PREFIX_VEX_0FE4	O
,	O
PREFIX_VEX_0FE5	O
,	O
PREFIX_VEX_0FE6	O
,	O
PREFIX_VEX_0FE7	O
,	O
PREFIX_VEX_0FE8	O
,	O
PREFIX_VEX_0FE9	O
,	O
PREFIX_VEX_0FEA	O
,	O
PREFIX_VEX_0FEB	O
,	O
PREFIX_VEX_0FEC	O
,	O
PREFIX_VEX_0FED	O
,	O
PREFIX_VEX_0FEE	O
,	O
PREFIX_VEX_0FEF	O
,	O
PREFIX_VEX_0FF0	O
,	O
PREFIX_VEX_0FF1	O
,	O
PREFIX_VEX_0FF2	O
,	O
PREFIX_VEX_0FF3	O
,	O
PREFIX_VEX_0FF4	O
,	O
PREFIX_VEX_0FF5	O
,	O
PREFIX_VEX_0FF6	O
,	O
PREFIX_VEX_0FF7	O
,	O
PREFIX_VEX_0FF8	O
,	O
PREFIX_VEX_0FF9	O
,	O
PREFIX_VEX_0FFA	O
,	O
PREFIX_VEX_0FFB	O
,	O
PREFIX_VEX_0FFC	O
,	O
PREFIX_VEX_0FFD	O
,	O
PREFIX_VEX_0FFE	O
,	O
PREFIX_VEX_0F3800	O
,	O
PREFIX_VEX_0F3801	O
,	O
PREFIX_VEX_0F3802	O
,	O
PREFIX_VEX_0F3803	O
,	O
PREFIX_VEX_0F3804	O
,	O
PREFIX_VEX_0F3805	O
,	O
PREFIX_VEX_0F3806	O
,	O
PREFIX_VEX_0F3807	O
,	O
PREFIX_VEX_0F3808	O
,	O
PREFIX_VEX_0F3809	O
,	O
PREFIX_VEX_0F380A	O
,	O
PREFIX_VEX_0F380B	O
,	O
PREFIX_VEX_0F380C	O
,	O
PREFIX_VEX_0F380D	O
,	O
PREFIX_VEX_0F380E	O
,	O
PREFIX_VEX_0F380F	O
,	O
PREFIX_VEX_0F3813	O
,	O
PREFIX_VEX_0F3816	O
,	O
PREFIX_VEX_0F3817	O
,	O
PREFIX_VEX_0F3818	O
,	O
PREFIX_VEX_0F3819	O
,	O
PREFIX_VEX_0F381A	O
,	O
PREFIX_VEX_0F381C	O
,	O
PREFIX_VEX_0F381D	O
,	O
PREFIX_VEX_0F381E	O
,	O
PREFIX_VEX_0F3820	O
,	O
PREFIX_VEX_0F3821	O
,	O
PREFIX_VEX_0F3822	O
,	O
PREFIX_VEX_0F3823	O
,	O
PREFIX_VEX_0F3824	O
,	O
PREFIX_VEX_0F3825	O
,	O
PREFIX_VEX_0F3828	O
,	O
PREFIX_VEX_0F3829	O
,	O
PREFIX_VEX_0F382A	O
,	O
PREFIX_VEX_0F382B	O
,	O
PREFIX_VEX_0F382C	O
,	O
PREFIX_VEX_0F382D	O
,	O
PREFIX_VEX_0F382E	O
,	O
PREFIX_VEX_0F382F	O
,	O
PREFIX_VEX_0F3830	O
,	O
PREFIX_VEX_0F3831	O
,	O
PREFIX_VEX_0F3832	O
,	O
PREFIX_VEX_0F3833	O
,	O
PREFIX_VEX_0F3834	O
,	O
PREFIX_VEX_0F3835	O
,	O
PREFIX_VEX_0F3836	O
,	O
PREFIX_VEX_0F3837	O
,	O
PREFIX_VEX_0F3838	O
,	O
PREFIX_VEX_0F3839	O
,	O
PREFIX_VEX_0F383A	O
,	O
PREFIX_VEX_0F383B	O
,	O
PREFIX_VEX_0F383C	O
,	O
PREFIX_VEX_0F383D	O
,	O
PREFIX_VEX_0F383E	O
,	O
PREFIX_VEX_0F383F	O
,	O
PREFIX_VEX_0F3840	O
,	O
PREFIX_VEX_0F3841	O
,	O
PREFIX_VEX_0F3845	O
,	O
PREFIX_VEX_0F3846	O
,	O
PREFIX_VEX_0F3847	O
,	O
PREFIX_VEX_0F3858	O
,	O
PREFIX_VEX_0F3859	O
,	O
PREFIX_VEX_0F385A	O
,	O
PREFIX_VEX_0F3878	O
,	O
PREFIX_VEX_0F3879	O
,	O
PREFIX_VEX_0F388C	O
,	O
PREFIX_VEX_0F388E	O
,	O
PREFIX_VEX_0F3890	O
,	O
PREFIX_VEX_0F3891	O
,	O
PREFIX_VEX_0F3892	O
,	O
PREFIX_VEX_0F3893	O
,	O
PREFIX_VEX_0F3896	O
,	O
PREFIX_VEX_0F3897	O
,	O
PREFIX_VEX_0F3898	O
,	O
PREFIX_VEX_0F3899	O
,	O
PREFIX_VEX_0F389A	O
,	O
PREFIX_VEX_0F389B	O
,	O
PREFIX_VEX_0F389C	O
,	O
PREFIX_VEX_0F389D	O
,	O
PREFIX_VEX_0F389E	O
,	O
PREFIX_VEX_0F389F	O
,	O
PREFIX_VEX_0F38A6	O
,	O
PREFIX_VEX_0F38A7	O
,	O
PREFIX_VEX_0F38A8	O
,	O
PREFIX_VEX_0F38A9	O
,	O
PREFIX_VEX_0F38AA	O
,	O
PREFIX_VEX_0F38AB	O
,	O
PREFIX_VEX_0F38AC	O
,	O
PREFIX_VEX_0F38AD	O
,	O
PREFIX_VEX_0F38AE	O
,	O
PREFIX_VEX_0F38AF	O
,	O
PREFIX_VEX_0F38B6	O
,	O
PREFIX_VEX_0F38B7	O
,	O
PREFIX_VEX_0F38B8	O
,	O
PREFIX_VEX_0F38B9	O
,	O
PREFIX_VEX_0F38BA	O
,	O
PREFIX_VEX_0F38BB	O
,	O
PREFIX_VEX_0F38BC	O
,	O
PREFIX_VEX_0F38BD	O
,	O
PREFIX_VEX_0F38BE	O
,	O
PREFIX_VEX_0F38BF	O
,	O
PREFIX_VEX_0F38CF	O
,	O
PREFIX_VEX_0F38DB	O
,	O
PREFIX_VEX_0F38DC	O
,	O
PREFIX_VEX_0F38DD	O
,	O
PREFIX_VEX_0F38DE	O
,	O
PREFIX_VEX_0F38DF	O
,	O
PREFIX_VEX_0F38F2	O
,	O
PREFIX_VEX_0F38F3_REG_1	O
,	O
PREFIX_VEX_0F38F3_REG_2	O
,	O
PREFIX_VEX_0F38F3_REG_3	O
,	O
PREFIX_VEX_0F38F5	O
,	O
PREFIX_VEX_0F38F6	O
,	O
PREFIX_VEX_0F38F7	O
,	O
PREFIX_VEX_0F3A00	O
,	O
PREFIX_VEX_0F3A01	O
,	O
PREFIX_VEX_0F3A02	O
,	O
PREFIX_VEX_0F3A04	O
,	O
PREFIX_VEX_0F3A05	O
,	O
PREFIX_VEX_0F3A06	O
,	O
PREFIX_VEX_0F3A08	O
,	O
PREFIX_VEX_0F3A09	O
,	O
PREFIX_VEX_0F3A0A	O
,	O
PREFIX_VEX_0F3A0B	O
,	O
PREFIX_VEX_0F3A0C	O
,	O
PREFIX_VEX_0F3A0D	O
,	O
PREFIX_VEX_0F3A0E	O
,	O
PREFIX_VEX_0F3A0F	O
,	O
PREFIX_VEX_0F3A14	O
,	O
PREFIX_VEX_0F3A15	O
,	O
PREFIX_VEX_0F3A16	O
,	O
PREFIX_VEX_0F3A17	O
,	O
PREFIX_VEX_0F3A18	O
,	O
PREFIX_VEX_0F3A19	O
,	O
PREFIX_VEX_0F3A1D	O
,	O
PREFIX_VEX_0F3A20	O
,	O
PREFIX_VEX_0F3A21	O
,	O
PREFIX_VEX_0F3A22	O
,	O
PREFIX_VEX_0F3A30	O
,	O
PREFIX_VEX_0F3A31	O
,	O
PREFIX_VEX_0F3A32	O
,	O
PREFIX_VEX_0F3A33	O
,	O
PREFIX_VEX_0F3A38	O
,	O
PREFIX_VEX_0F3A39	O
,	O
PREFIX_VEX_0F3A40	O
,	O
PREFIX_VEX_0F3A41	O
,	O
PREFIX_VEX_0F3A42	O
,	O
PREFIX_VEX_0F3A44	O
,	O
PREFIX_VEX_0F3A46	O
,	O
PREFIX_VEX_0F3A48	O
,	O
PREFIX_VEX_0F3A49	O
,	O
PREFIX_VEX_0F3A4A	O
,	O
PREFIX_VEX_0F3A4B	O
,	O
PREFIX_VEX_0F3A4C	O
,	O
PREFIX_VEX_0F3A5C	O
,	O
PREFIX_VEX_0F3A5D	O
,	O
PREFIX_VEX_0F3A5E	O
,	O
PREFIX_VEX_0F3A5F	O
,	O
PREFIX_VEX_0F3A60	O
,	O
PREFIX_VEX_0F3A61	O
,	O
PREFIX_VEX_0F3A62	O
,	O
PREFIX_VEX_0F3A63	O
,	O
PREFIX_VEX_0F3A68	O
,	O
PREFIX_VEX_0F3A69	O
,	O
PREFIX_VEX_0F3A6A	O
,	O
PREFIX_VEX_0F3A6B	O
,	O
PREFIX_VEX_0F3A6C	O
,	O
PREFIX_VEX_0F3A6D	O
,	O
PREFIX_VEX_0F3A6E	O
,	O
PREFIX_VEX_0F3A6F	O
,	O
PREFIX_VEX_0F3A78	O
,	O
PREFIX_VEX_0F3A79	O
,	O
PREFIX_VEX_0F3A7A	O
,	O
PREFIX_VEX_0F3A7B	O
,	O
PREFIX_VEX_0F3A7C	O
,	O
PREFIX_VEX_0F3A7D	O
,	O
PREFIX_VEX_0F3A7E	O
,	O
PREFIX_VEX_0F3A7F	O
,	O
PREFIX_VEX_0F3ACE	O
,	O
PREFIX_VEX_0F3ACF	O
,	O
PREFIX_VEX_0F3ADF	O
,	O
PREFIX_VEX_0F3AF0	O
,	O
PREFIX_EVEX_0F10	O
,	O
PREFIX_EVEX_0F11	O
,	O
PREFIX_EVEX_0F12	O
,	O
PREFIX_EVEX_0F13	O
,	O
PREFIX_EVEX_0F14	O
,	O
PREFIX_EVEX_0F15	O
,	O
PREFIX_EVEX_0F16	O
,	O
PREFIX_EVEX_0F17	O
,	O
PREFIX_EVEX_0F28	O
,	O
PREFIX_EVEX_0F29	O
,	O
PREFIX_EVEX_0F2A	O
,	O
PREFIX_EVEX_0F2B	O
,	O
PREFIX_EVEX_0F2C	O
,	O
PREFIX_EVEX_0F2D	O
,	O
PREFIX_EVEX_0F2E	O
,	O
PREFIX_EVEX_0F2F	O
,	O
PREFIX_EVEX_0F51	O
,	O
PREFIX_EVEX_0F54	O
,	O
PREFIX_EVEX_0F55	O
,	O
PREFIX_EVEX_0F56	O
,	O
PREFIX_EVEX_0F57	O
,	O
PREFIX_EVEX_0F58	O
,	O
PREFIX_EVEX_0F59	O
,	O
PREFIX_EVEX_0F5A	O
,	O
PREFIX_EVEX_0F5B	O
,	O
PREFIX_EVEX_0F5C	O
,	O
PREFIX_EVEX_0F5D	O
,	O
PREFIX_EVEX_0F5E	O
,	O
PREFIX_EVEX_0F5F	O
,	O
PREFIX_EVEX_0F60	O
,	O
PREFIX_EVEX_0F61	O
,	O
PREFIX_EVEX_0F62	O
,	O
PREFIX_EVEX_0F63	O
,	O
PREFIX_EVEX_0F64	O
,	O
PREFIX_EVEX_0F65	O
,	O
PREFIX_EVEX_0F66	O
,	O
PREFIX_EVEX_0F67	O
,	O
PREFIX_EVEX_0F68	O
,	O
PREFIX_EVEX_0F69	O
,	O
PREFIX_EVEX_0F6A	O
,	O
PREFIX_EVEX_0F6B	O
,	O
PREFIX_EVEX_0F6C	O
,	O
PREFIX_EVEX_0F6D	O
,	O
PREFIX_EVEX_0F6E	O
,	O
PREFIX_EVEX_0F6F	O
,	O
PREFIX_EVEX_0F70	O
,	O
PREFIX_EVEX_0F71_REG_2	O
,	O
PREFIX_EVEX_0F71_REG_4	O
,	O
PREFIX_EVEX_0F71_REG_6	O
,	O
PREFIX_EVEX_0F72_REG_0	O
,	O
PREFIX_EVEX_0F72_REG_1	O
,	O
PREFIX_EVEX_0F72_REG_2	O
,	O
PREFIX_EVEX_0F72_REG_4	O
,	O
PREFIX_EVEX_0F72_REG_6	O
,	O
PREFIX_EVEX_0F73_REG_2	O
,	O
PREFIX_EVEX_0F73_REG_3	O
,	O
PREFIX_EVEX_0F73_REG_6	O
,	O
PREFIX_EVEX_0F73_REG_7	O
,	O
PREFIX_EVEX_0F74	O
,	O
PREFIX_EVEX_0F75	O
,	O
PREFIX_EVEX_0F76	O
,	O
PREFIX_EVEX_0F78	O
,	O
PREFIX_EVEX_0F79	O
,	O
PREFIX_EVEX_0F7A	O
,	O
PREFIX_EVEX_0F7B	O
,	O
PREFIX_EVEX_0F7E	O
,	O
PREFIX_EVEX_0F7F	O
,	O
PREFIX_EVEX_0FC2	O
,	O
PREFIX_EVEX_0FC4	O
,	O
PREFIX_EVEX_0FC5	O
,	O
PREFIX_EVEX_0FC6	O
,	O
PREFIX_EVEX_0FD1	O
,	O
PREFIX_EVEX_0FD2	O
,	O
PREFIX_EVEX_0FD3	O
,	O
PREFIX_EVEX_0FD4	O
,	O
PREFIX_EVEX_0FD5	O
,	O
PREFIX_EVEX_0FD6	O
,	O
PREFIX_EVEX_0FD8	O
,	O
PREFIX_EVEX_0FD9	O
,	O
PREFIX_EVEX_0FDA	O
,	O
PREFIX_EVEX_0FDB	O
,	O
PREFIX_EVEX_0FDC	O
,	O
PREFIX_EVEX_0FDD	O
,	O
PREFIX_EVEX_0FDE	O
,	O
PREFIX_EVEX_0FDF	O
,	O
PREFIX_EVEX_0FE0	O
,	O
PREFIX_EVEX_0FE1	O
,	O
PREFIX_EVEX_0FE2	O
,	O
PREFIX_EVEX_0FE3	O
,	O
PREFIX_EVEX_0FE4	O
,	O
PREFIX_EVEX_0FE5	O
,	O
PREFIX_EVEX_0FE6	O
,	O
PREFIX_EVEX_0FE7	O
,	O
PREFIX_EVEX_0FE8	O
,	O
PREFIX_EVEX_0FE9	O
,	O
PREFIX_EVEX_0FEA	O
,	O
PREFIX_EVEX_0FEB	O
,	O
PREFIX_EVEX_0FEC	O
,	O
PREFIX_EVEX_0FED	O
,	O
PREFIX_EVEX_0FEE	O
,	O
PREFIX_EVEX_0FEF	O
,	O
PREFIX_EVEX_0FF1	O
,	O
PREFIX_EVEX_0FF2	O
,	O
PREFIX_EVEX_0FF3	O
,	O
PREFIX_EVEX_0FF4	O
,	O
PREFIX_EVEX_0FF5	O
,	O
PREFIX_EVEX_0FF6	O
,	O
PREFIX_EVEX_0FF8	O
,	O
PREFIX_EVEX_0FF9	O
,	O
PREFIX_EVEX_0FFA	O
,	O
PREFIX_EVEX_0FFB	O
,	O
PREFIX_EVEX_0FFC	O
,	O
PREFIX_EVEX_0FFD	O
,	O
PREFIX_EVEX_0FFE	O
,	O
PREFIX_EVEX_0F3800	O
,	O
PREFIX_EVEX_0F3804	O
,	O
PREFIX_EVEX_0F380B	O
,	O
PREFIX_EVEX_0F380C	O
,	O
PREFIX_EVEX_0F380D	O
,	O
PREFIX_EVEX_0F3810	O
,	O
PREFIX_EVEX_0F3811	O
,	O
PREFIX_EVEX_0F3812	O
,	O
PREFIX_EVEX_0F3813	O
,	O
PREFIX_EVEX_0F3814	O
,	O
PREFIX_EVEX_0F3815	O
,	O
PREFIX_EVEX_0F3816	O
,	O
PREFIX_EVEX_0F3818	O
,	O
PREFIX_EVEX_0F3819	O
,	O
PREFIX_EVEX_0F381A	O
,	O
PREFIX_EVEX_0F381B	O
,	O
PREFIX_EVEX_0F381C	O
,	O
PREFIX_EVEX_0F381D	O
,	O
PREFIX_EVEX_0F381E	O
,	O
PREFIX_EVEX_0F381F	O
,	O
PREFIX_EVEX_0F3820	O
,	O
PREFIX_EVEX_0F3821	O
,	O
PREFIX_EVEX_0F3822	O
,	O
PREFIX_EVEX_0F3823	O
,	O
PREFIX_EVEX_0F3824	O
,	O
PREFIX_EVEX_0F3825	O
,	O
PREFIX_EVEX_0F3826	O
,	O
PREFIX_EVEX_0F3827	O
,	O
PREFIX_EVEX_0F3828	O
,	O
PREFIX_EVEX_0F3829	O
,	O
PREFIX_EVEX_0F382A	O
,	O
PREFIX_EVEX_0F382B	O
,	O
PREFIX_EVEX_0F382C	O
,	O
PREFIX_EVEX_0F382D	O
,	O
PREFIX_EVEX_0F3830	O
,	O
PREFIX_EVEX_0F3831	O
,	O
PREFIX_EVEX_0F3832	O
,	O
PREFIX_EVEX_0F3833	O
,	O
PREFIX_EVEX_0F3834	O
,	O
PREFIX_EVEX_0F3835	O
,	O
PREFIX_EVEX_0F3836	O
,	O
PREFIX_EVEX_0F3837	O
,	O
PREFIX_EVEX_0F3838	O
,	O
PREFIX_EVEX_0F3839	O
,	O
PREFIX_EVEX_0F383A	O
,	O
PREFIX_EVEX_0F383B	O
,	O
PREFIX_EVEX_0F383C	O
,	O
PREFIX_EVEX_0F383D	O
,	O
PREFIX_EVEX_0F383E	O
,	O
PREFIX_EVEX_0F383F	O
,	O
PREFIX_EVEX_0F3840	O
,	O
PREFIX_EVEX_0F3842	O
,	O
PREFIX_EVEX_0F3843	O
,	O
PREFIX_EVEX_0F3844	O
,	O
PREFIX_EVEX_0F3845	O
,	O
PREFIX_EVEX_0F3846	O
,	O
PREFIX_EVEX_0F3847	O
,	O
PREFIX_EVEX_0F384C	O
,	O
PREFIX_EVEX_0F384D	O
,	O
PREFIX_EVEX_0F384E	O
,	O
PREFIX_EVEX_0F384F	O
,	O
PREFIX_EVEX_0F3850	O
,	O
PREFIX_EVEX_0F3851	O
,	O
PREFIX_EVEX_0F3852	O
,	O
PREFIX_EVEX_0F3853	O
,	O
PREFIX_EVEX_0F3854	O
,	O
PREFIX_EVEX_0F3855	O
,	O
PREFIX_EVEX_0F3858	O
,	O
PREFIX_EVEX_0F3859	O
,	O
PREFIX_EVEX_0F385A	O
,	O
PREFIX_EVEX_0F385B	O
,	O
PREFIX_EVEX_0F3862	O
,	O
PREFIX_EVEX_0F3863	O
,	O
PREFIX_EVEX_0F3864	O
,	O
PREFIX_EVEX_0F3865	O
,	O
PREFIX_EVEX_0F3866	O
,	O
PREFIX_EVEX_0F3868	O
,	O
PREFIX_EVEX_0F3870	O
,	O
PREFIX_EVEX_0F3871	O
,	O
PREFIX_EVEX_0F3872	O
,	O
PREFIX_EVEX_0F3873	O
,	O
PREFIX_EVEX_0F3875	O
,	O
PREFIX_EVEX_0F3876	O
,	O
PREFIX_EVEX_0F3877	O
,	O
PREFIX_EVEX_0F3878	O
,	O
PREFIX_EVEX_0F3879	O
,	O
PREFIX_EVEX_0F387A	O
,	O
PREFIX_EVEX_0F387B	O
,	O
PREFIX_EVEX_0F387C	O
,	O
PREFIX_EVEX_0F387D	O
,	O
PREFIX_EVEX_0F387E	O
,	O
PREFIX_EVEX_0F387F	O
,	O
PREFIX_EVEX_0F3883	O
,	O
PREFIX_EVEX_0F3888	O
,	O
PREFIX_EVEX_0F3889	O
,	O
PREFIX_EVEX_0F388A	O
,	O
PREFIX_EVEX_0F388B	O
,	O
PREFIX_EVEX_0F388D	O
,	O
PREFIX_EVEX_0F388F	O
,	O
PREFIX_EVEX_0F3890	O
,	O
PREFIX_EVEX_0F3891	O
,	O
PREFIX_EVEX_0F3892	O
,	O
PREFIX_EVEX_0F3893	O
,	O
PREFIX_EVEX_0F3896	O
,	O
PREFIX_EVEX_0F3897	O
,	O
PREFIX_EVEX_0F3898	O
,	O
PREFIX_EVEX_0F3899	O
,	O
PREFIX_EVEX_0F389A	O
,	O
PREFIX_EVEX_0F389B	O
,	O
PREFIX_EVEX_0F389C	O
,	O
PREFIX_EVEX_0F389D	O
,	O
PREFIX_EVEX_0F389E	O
,	O
PREFIX_EVEX_0F389F	O
,	O
PREFIX_EVEX_0F38A0	O
,	O
PREFIX_EVEX_0F38A1	O
,	O
PREFIX_EVEX_0F38A2	O
,	O
PREFIX_EVEX_0F38A3	O
,	O
PREFIX_EVEX_0F38A6	O
,	O
PREFIX_EVEX_0F38A7	O
,	O
PREFIX_EVEX_0F38A8	O
,	O
PREFIX_EVEX_0F38A9	O
,	O
PREFIX_EVEX_0F38AA	O
,	O
PREFIX_EVEX_0F38AB	O
,	O
PREFIX_EVEX_0F38AC	O
,	O
PREFIX_EVEX_0F38AD	O
,	O
PREFIX_EVEX_0F38AE	O
,	O
PREFIX_EVEX_0F38AF	O
,	O
PREFIX_EVEX_0F38B4	O
,	O
PREFIX_EVEX_0F38B5	O
,	O
PREFIX_EVEX_0F38B6	O
,	O
PREFIX_EVEX_0F38B7	O
,	O
PREFIX_EVEX_0F38B8	O
,	O
PREFIX_EVEX_0F38B9	O
,	O
PREFIX_EVEX_0F38BA	O
,	O
PREFIX_EVEX_0F38BB	O
,	O
PREFIX_EVEX_0F38BC	O
,	O
PREFIX_EVEX_0F38BD	O
,	O
PREFIX_EVEX_0F38BE	O
,	O
PREFIX_EVEX_0F38BF	O
,	O
PREFIX_EVEX_0F38C4	O
,	O
PREFIX_EVEX_0F38C6_REG_1	O
,	O
PREFIX_EVEX_0F38C6_REG_2	O
,	O
PREFIX_EVEX_0F38C6_REG_5	O
,	O
PREFIX_EVEX_0F38C6_REG_6	O
,	O
PREFIX_EVEX_0F38C7_REG_1	O
,	O
PREFIX_EVEX_0F38C7_REG_2	O
,	O
PREFIX_EVEX_0F38C7_REG_5	O
,	O
PREFIX_EVEX_0F38C7_REG_6	O
,	O
PREFIX_EVEX_0F38C8	O
,	O
PREFIX_EVEX_0F38CA	O
,	O
PREFIX_EVEX_0F38CB	O
,	O
PREFIX_EVEX_0F38CC	O
,	O
PREFIX_EVEX_0F38CD	O
,	O
PREFIX_EVEX_0F38CF	O
,	O
PREFIX_EVEX_0F38DC	O
,	O
PREFIX_EVEX_0F38DD	O
,	O
PREFIX_EVEX_0F38DE	O
,	O
PREFIX_EVEX_0F38DF	O
,	O
PREFIX_EVEX_0F3A00	O
,	O
PREFIX_EVEX_0F3A01	O
,	O
PREFIX_EVEX_0F3A03	O
,	O
PREFIX_EVEX_0F3A04	O
,	O
PREFIX_EVEX_0F3A05	O
,	O
PREFIX_EVEX_0F3A08	O
,	O
PREFIX_EVEX_0F3A09	O
,	O
PREFIX_EVEX_0F3A0A	O
,	O
PREFIX_EVEX_0F3A0B	O
,	O
PREFIX_EVEX_0F3A0F	O
,	O
PREFIX_EVEX_0F3A14	O
,	O
PREFIX_EVEX_0F3A15	O
,	O
PREFIX_EVEX_0F3A16	O
,	O
PREFIX_EVEX_0F3A17	O
,	O
PREFIX_EVEX_0F3A18	O
,	O
PREFIX_EVEX_0F3A19	O
,	O
PREFIX_EVEX_0F3A1A	O
,	O
PREFIX_EVEX_0F3A1B	O
,	O
PREFIX_EVEX_0F3A1D	O
,	O
PREFIX_EVEX_0F3A1E	O
,	O
PREFIX_EVEX_0F3A1F	O
,	O
PREFIX_EVEX_0F3A20	O
,	O
PREFIX_EVEX_0F3A21	O
,	O
PREFIX_EVEX_0F3A22	O
,	O
PREFIX_EVEX_0F3A23	O
,	O
PREFIX_EVEX_0F3A25	O
,	O
PREFIX_EVEX_0F3A26	O
,	O
PREFIX_EVEX_0F3A27	O
,	O
PREFIX_EVEX_0F3A38	O
,	O
PREFIX_EVEX_0F3A39	O
,	O
PREFIX_EVEX_0F3A3A	O
,	O
PREFIX_EVEX_0F3A3B	O
,	O
PREFIX_EVEX_0F3A3E	O
,	O
PREFIX_EVEX_0F3A3F	O
,	O
PREFIX_EVEX_0F3A42	O
,	O
PREFIX_EVEX_0F3A43	O
,	O
PREFIX_EVEX_0F3A44	O
,	O
PREFIX_EVEX_0F3A50	O
,	O
PREFIX_EVEX_0F3A51	O
,	O
PREFIX_EVEX_0F3A54	O
,	O
PREFIX_EVEX_0F3A55	O
,	O
PREFIX_EVEX_0F3A56	O
,	O
PREFIX_EVEX_0F3A57	O
,	O
PREFIX_EVEX_0F3A66	O
,	O
PREFIX_EVEX_0F3A67	O
,	O
PREFIX_EVEX_0F3A70	O
,	O
PREFIX_EVEX_0F3A71	O
,	O
PREFIX_EVEX_0F3A72	O
,	O
PREFIX_EVEX_0F3A73	O
,	O
PREFIX_EVEX_0F3ACE	O
,	O
PREFIX_EVEX_0F3ACF	O
}	O
;	O
enum	O
{	O
X86_64_06	O
=	O
0	int
,	O
X86_64_07	O
,	O
X86_64_0D	O
,	O
X86_64_16	O
,	O
X86_64_17	O
,	O
X86_64_1E	O
,	O
X86_64_1F	O
,	O
X86_64_27	O
,	O
X86_64_2F	O
,	O
X86_64_37	O
,	O
X86_64_3F	O
,	O
X86_64_60	O
,	O
X86_64_61	O
,	O
X86_64_62	O
,	O
X86_64_63	O
,	O
X86_64_6D	O
,	O
X86_64_6F	O
,	O
X86_64_82	O
,	O
X86_64_9A	O
,	O
X86_64_C4	O
,	O
X86_64_C5	O
,	O
X86_64_CE	O
,	O
X86_64_D4	O
,	O
X86_64_D5	O
,	O
X86_64_E8	O
,	O
X86_64_E9	O
,	O
X86_64_EA	O
,	O
X86_64_0F01_REG_0	O
,	O
X86_64_0F01_REG_1	O
,	O
X86_64_0F01_REG_2	O
,	O
X86_64_0F01_REG_3	O
}	O
;	O
enum	O
{	O
THREE_BYTE_0F38	O
=	O
0	int
,	O
THREE_BYTE_0F3A	O
}	O
;	O
enum	O
{	O
XOP_08	O
=	O
0	int
,	O
XOP_09	O
,	O
XOP_0A	O
}	O
;	O
enum	O
{	O
VEX_0F	O
=	O
0	int
,	O
VEX_0F38	O
,	O
VEX_0F3A	O
}	O
;	O
enum	O
{	O
EVEX_0F	O
=	O
0	int
,	O
EVEX_0F38	O
,	O
EVEX_0F3A	O
}	O
;	O
enum	O
{	O
VEX_LEN_0F12_P_0_M_0	O
=	O
0	int
,	O
VEX_LEN_0F12_P_0_M_1	O
,	O
VEX_LEN_0F12_P_2	O
,	O
VEX_LEN_0F13_M_0	O
,	O
VEX_LEN_0F16_P_0_M_0	O
,	O
VEX_LEN_0F16_P_0_M_1	O
,	O
VEX_LEN_0F16_P_2	O
,	O
VEX_LEN_0F17_M_0	O
,	O
VEX_LEN_0F41_P_0	O
,	O
VEX_LEN_0F41_P_2	O
,	O
VEX_LEN_0F42_P_0	O
,	O
VEX_LEN_0F42_P_2	O
,	O
VEX_LEN_0F44_P_0	O
,	O
VEX_LEN_0F44_P_2	O
,	O
VEX_LEN_0F45_P_0	O
,	O
VEX_LEN_0F45_P_2	O
,	O
VEX_LEN_0F46_P_0	O
,	O
VEX_LEN_0F46_P_2	O
,	O
VEX_LEN_0F47_P_0	O
,	O
VEX_LEN_0F47_P_2	O
,	O
VEX_LEN_0F4A_P_0	O
,	O
VEX_LEN_0F4A_P_2	O
,	O
VEX_LEN_0F4B_P_0	O
,	O
VEX_LEN_0F4B_P_2	O
,	O
VEX_LEN_0F6E_P_2	O
,	O
VEX_LEN_0F77_P_0	O
,	O
VEX_LEN_0F7E_P_1	O
,	O
VEX_LEN_0F7E_P_2	O
,	O
VEX_LEN_0F90_P_0	O
,	O
VEX_LEN_0F90_P_2	O
,	O
VEX_LEN_0F91_P_0	O
,	O
VEX_LEN_0F91_P_2	O
,	O
VEX_LEN_0F92_P_0	O
,	O
VEX_LEN_0F92_P_2	O
,	O
VEX_LEN_0F92_P_3	O
,	O
VEX_LEN_0F93_P_0	O
,	O
VEX_LEN_0F93_P_2	O
,	O
VEX_LEN_0F93_P_3	O
,	O
VEX_LEN_0F98_P_0	O
,	O
VEX_LEN_0F98_P_2	O
,	O
VEX_LEN_0F99_P_0	O
,	O
VEX_LEN_0F99_P_2	O
,	O
VEX_LEN_0FAE_R_2_M_0	O
,	O
VEX_LEN_0FAE_R_3_M_0	O
,	O
VEX_LEN_0FC4_P_2	O
,	O
VEX_LEN_0FC5_P_2	O
,	O
VEX_LEN_0FD6_P_2	O
,	O
VEX_LEN_0FF7_P_2	O
,	O
VEX_LEN_0F3816_P_2	O
,	O
VEX_LEN_0F3819_P_2	O
,	O
VEX_LEN_0F381A_P_2_M_0	O
,	O
VEX_LEN_0F3836_P_2	O
,	O
VEX_LEN_0F3841_P_2	O
,	O
VEX_LEN_0F385A_P_2_M_0	O
,	O
VEX_LEN_0F38DB_P_2	O
,	O
VEX_LEN_0F38F2_P_0	O
,	O
VEX_LEN_0F38F3_R_1_P_0	O
,	O
VEX_LEN_0F38F3_R_2_P_0	O
,	O
VEX_LEN_0F38F3_R_3_P_0	O
,	O
VEX_LEN_0F38F5_P_0	O
,	O
VEX_LEN_0F38F5_P_1	O
,	O
VEX_LEN_0F38F5_P_3	O
,	O
VEX_LEN_0F38F6_P_3	O
,	O
VEX_LEN_0F38F7_P_0	O
,	O
VEX_LEN_0F38F7_P_1	O
,	O
VEX_LEN_0F38F7_P_2	O
,	O
VEX_LEN_0F38F7_P_3	O
,	O
VEX_LEN_0F3A00_P_2	O
,	O
VEX_LEN_0F3A01_P_2	O
,	O
VEX_LEN_0F3A06_P_2	O
,	O
VEX_LEN_0F3A14_P_2	O
,	O
VEX_LEN_0F3A15_P_2	O
,	O
VEX_LEN_0F3A16_P_2	O
,	O
VEX_LEN_0F3A17_P_2	O
,	O
VEX_LEN_0F3A18_P_2	O
,	O
VEX_LEN_0F3A19_P_2	O
,	O
VEX_LEN_0F3A20_P_2	O
,	O
VEX_LEN_0F3A21_P_2	O
,	O
VEX_LEN_0F3A22_P_2	O
,	O
VEX_LEN_0F3A30_P_2	O
,	O
VEX_LEN_0F3A31_P_2	O
,	O
VEX_LEN_0F3A32_P_2	O
,	O
VEX_LEN_0F3A33_P_2	O
,	O
VEX_LEN_0F3A38_P_2	O
,	O
VEX_LEN_0F3A39_P_2	O
,	O
VEX_LEN_0F3A41_P_2	O
,	O
VEX_LEN_0F3A46_P_2	O
,	O
VEX_LEN_0F3A60_P_2	O
,	O
VEX_LEN_0F3A61_P_2	O
,	O
VEX_LEN_0F3A62_P_2	O
,	O
VEX_LEN_0F3A63_P_2	O
,	O
VEX_LEN_0F3A6A_P_2	O
,	O
VEX_LEN_0F3A6B_P_2	O
,	O
VEX_LEN_0F3A6E_P_2	O
,	O
VEX_LEN_0F3A6F_P_2	O
,	O
VEX_LEN_0F3A7A_P_2	O
,	O
VEX_LEN_0F3A7B_P_2	O
,	O
VEX_LEN_0F3A7E_P_2	O
,	O
VEX_LEN_0F3A7F_P_2	O
,	O
VEX_LEN_0F3ADF_P_2	O
,	O
VEX_LEN_0F3AF0_P_3	O
,	O
VEX_LEN_0FXOP_08_CC	O
,	O
VEX_LEN_0FXOP_08_CD	O
,	O
VEX_LEN_0FXOP_08_CE	O
,	O
VEX_LEN_0FXOP_08_CF	O
,	O
VEX_LEN_0FXOP_08_EC	O
,	O
VEX_LEN_0FXOP_08_ED	O
,	O
VEX_LEN_0FXOP_08_EE	O
,	O
VEX_LEN_0FXOP_08_EF	O
,	O
VEX_LEN_0FXOP_09_80	O
,	O
VEX_LEN_0FXOP_09_81	O
}	O
;	O
enum	O
{	O
EVEX_LEN_0F6E_P_2	O
=	O
0	int
,	O
EVEX_LEN_0F7E_P_1	O
,	O
EVEX_LEN_0F7E_P_2	O
,	O
EVEX_LEN_0FD6_P_2	O
,	O
EVEX_LEN_0F3819_P_2_W_0	O
,	O
EVEX_LEN_0F3819_P_2_W_1	O
,	O
EVEX_LEN_0F381A_P_2_W_0	O
,	O
EVEX_LEN_0F381A_P_2_W_1	O
,	O
EVEX_LEN_0F381B_P_2_W_0	O
,	O
EVEX_LEN_0F381B_P_2_W_1	O
,	O
EVEX_LEN_0F385A_P_2_W_0	O
,	O
EVEX_LEN_0F385A_P_2_W_1	O
,	O
EVEX_LEN_0F385B_P_2_W_0	O
,	O
EVEX_LEN_0F385B_P_2_W_1	O
,	O
EVEX_LEN_0F38C6_REG_1_PREFIX_2	O
,	O
EVEX_LEN_0F38C6_REG_2_PREFIX_2	O
,	O
EVEX_LEN_0F38C6_REG_5_PREFIX_2	O
,	O
EVEX_LEN_0F38C6_REG_6_PREFIX_2	O
,	O
EVEX_LEN_0F38C7_R_1_P_2_W_0	O
,	O
EVEX_LEN_0F38C7_R_1_P_2_W_1	O
,	O
EVEX_LEN_0F38C7_R_2_P_2_W_0	O
,	O
EVEX_LEN_0F38C7_R_2_P_2_W_1	O
,	O
EVEX_LEN_0F38C7_R_5_P_2_W_0	O
,	O
EVEX_LEN_0F38C7_R_5_P_2_W_1	O
,	O
EVEX_LEN_0F38C7_R_6_P_2_W_0	O
,	O
EVEX_LEN_0F38C7_R_6_P_2_W_1	O
,	O
EVEX_LEN_0F3A18_P_2_W_0	O
,	O
EVEX_LEN_0F3A18_P_2_W_1	O
,	O
EVEX_LEN_0F3A19_P_2_W_0	O
,	O
EVEX_LEN_0F3A19_P_2_W_1	O
,	O
EVEX_LEN_0F3A1A_P_2_W_0	O
,	O
EVEX_LEN_0F3A1A_P_2_W_1	O
,	O
EVEX_LEN_0F3A1B_P_2_W_0	O
,	O
EVEX_LEN_0F3A1B_P_2_W_1	O
,	O
EVEX_LEN_0F3A23_P_2_W_0	O
,	O
EVEX_LEN_0F3A23_P_2_W_1	O
,	O
EVEX_LEN_0F3A38_P_2_W_0	O
,	O
EVEX_LEN_0F3A38_P_2_W_1	O
,	O
EVEX_LEN_0F3A39_P_2_W_0	O
,	O
EVEX_LEN_0F3A39_P_2_W_1	O
,	O
EVEX_LEN_0F3A3A_P_2_W_0	O
,	O
EVEX_LEN_0F3A3A_P_2_W_1	O
,	O
EVEX_LEN_0F3A3B_P_2_W_0	O
,	O
EVEX_LEN_0F3A3B_P_2_W_1	O
,	O
EVEX_LEN_0F3A43_P_2_W_0	O
,	O
EVEX_LEN_0F3A43_P_2_W_1	O
}	O
;	O
enum	O
{	O
VEX_W_0F41_P_0_LEN_1	O
=	O
0	int
,	O
VEX_W_0F41_P_2_LEN_1	O
,	O
VEX_W_0F42_P_0_LEN_1	O
,	O
VEX_W_0F42_P_2_LEN_1	O
,	O
VEX_W_0F44_P_0_LEN_0	O
,	O
VEX_W_0F44_P_2_LEN_0	O
,	O
VEX_W_0F45_P_0_LEN_1	O
,	O
VEX_W_0F45_P_2_LEN_1	O
,	O
VEX_W_0F46_P_0_LEN_1	O
,	O
VEX_W_0F46_P_2_LEN_1	O
,	O
VEX_W_0F47_P_0_LEN_1	O
,	O
VEX_W_0F47_P_2_LEN_1	O
,	O
VEX_W_0F4A_P_0_LEN_1	O
,	O
VEX_W_0F4A_P_2_LEN_1	O
,	O
VEX_W_0F4B_P_0_LEN_1	O
,	O
VEX_W_0F4B_P_2_LEN_1	O
,	O
VEX_W_0F90_P_0_LEN_0	O
,	O
VEX_W_0F90_P_2_LEN_0	O
,	O
VEX_W_0F91_P_0_LEN_0	O
,	O
VEX_W_0F91_P_2_LEN_0	O
,	O
VEX_W_0F92_P_0_LEN_0	O
,	O
VEX_W_0F92_P_2_LEN_0	O
,	O
VEX_W_0F93_P_0_LEN_0	O
,	O
VEX_W_0F93_P_2_LEN_0	O
,	O
VEX_W_0F98_P_0_LEN_0	O
,	O
VEX_W_0F98_P_2_LEN_0	O
,	O
VEX_W_0F99_P_0_LEN_0	O
,	O
VEX_W_0F99_P_2_LEN_0	O
,	O
VEX_W_0F380C_P_2	O
,	O
VEX_W_0F380D_P_2	O
,	O
VEX_W_0F380E_P_2	O
,	O
VEX_W_0F380F_P_2	O
,	O
VEX_W_0F3816_P_2	O
,	O
VEX_W_0F3818_P_2	O
,	O
VEX_W_0F3819_P_2	O
,	O
VEX_W_0F381A_P_2_M_0	O
,	O
VEX_W_0F382C_P_2_M_0	O
,	O
VEX_W_0F382D_P_2_M_0	O
,	O
VEX_W_0F382E_P_2_M_0	O
,	O
VEX_W_0F382F_P_2_M_0	O
,	O
VEX_W_0F3836_P_2	O
,	O
VEX_W_0F3846_P_2	O
,	O
VEX_W_0F3858_P_2	O
,	O
VEX_W_0F3859_P_2	O
,	O
VEX_W_0F385A_P_2_M_0	O
,	O
VEX_W_0F3878_P_2	O
,	O
VEX_W_0F3879_P_2	O
,	O
VEX_W_0F38CF_P_2	O
,	O
VEX_W_0F3A00_P_2	O
,	O
VEX_W_0F3A01_P_2	O
,	O
VEX_W_0F3A02_P_2	O
,	O
VEX_W_0F3A04_P_2	O
,	O
VEX_W_0F3A05_P_2	O
,	O
VEX_W_0F3A06_P_2	O
,	O
VEX_W_0F3A18_P_2	O
,	O
VEX_W_0F3A19_P_2	O
,	O
VEX_W_0F3A30_P_2_LEN_0	O
,	O
VEX_W_0F3A31_P_2_LEN_0	O
,	O
VEX_W_0F3A32_P_2_LEN_0	O
,	O
VEX_W_0F3A33_P_2_LEN_0	O
,	O
VEX_W_0F3A38_P_2	O
,	O
VEX_W_0F3A39_P_2	O
,	O
VEX_W_0F3A46_P_2	O
,	O
VEX_W_0F3A48_P_2	O
,	O
VEX_W_0F3A49_P_2	O
,	O
VEX_W_0F3A4A_P_2	O
,	O
VEX_W_0F3A4B_P_2	O
,	O
VEX_W_0F3A4C_P_2	O
,	O
VEX_W_0F3ACE_P_2	O
,	O
VEX_W_0F3ACF_P_2	O
,	O
EVEX_W_0F10_P_0	O
,	O
EVEX_W_0F10_P_1	O
,	O
EVEX_W_0F10_P_2	O
,	O
EVEX_W_0F10_P_3	O
,	O
EVEX_W_0F11_P_0	O
,	O
EVEX_W_0F11_P_1	O
,	O
EVEX_W_0F11_P_2	O
,	O
EVEX_W_0F11_P_3	O
,	O
EVEX_W_0F12_P_0_M_0	O
,	O
EVEX_W_0F12_P_0_M_1	O
,	O
EVEX_W_0F12_P_1	O
,	O
EVEX_W_0F12_P_2	O
,	O
EVEX_W_0F12_P_3	O
,	O
EVEX_W_0F13_P_0	O
,	O
EVEX_W_0F13_P_2	O
,	O
EVEX_W_0F14_P_0	O
,	O
EVEX_W_0F14_P_2	O
,	O
EVEX_W_0F15_P_0	O
,	O
EVEX_W_0F15_P_2	O
,	O
EVEX_W_0F16_P_0_M_0	O
,	O
EVEX_W_0F16_P_0_M_1	O
,	O
EVEX_W_0F16_P_1	O
,	O
EVEX_W_0F16_P_2	O
,	O
EVEX_W_0F17_P_0	O
,	O
EVEX_W_0F17_P_2	O
,	O
EVEX_W_0F28_P_0	O
,	O
EVEX_W_0F28_P_2	O
,	O
EVEX_W_0F29_P_0	O
,	O
EVEX_W_0F29_P_2	O
,	O
EVEX_W_0F2A_P_3	O
,	O
EVEX_W_0F2B_P_0	O
,	O
EVEX_W_0F2B_P_2	O
,	O
EVEX_W_0F2E_P_0	O
,	O
EVEX_W_0F2E_P_2	O
,	O
EVEX_W_0F2F_P_0	O
,	O
EVEX_W_0F2F_P_2	O
,	O
EVEX_W_0F51_P_0	O
,	O
EVEX_W_0F51_P_1	O
,	O
EVEX_W_0F51_P_2	O
,	O
EVEX_W_0F51_P_3	O
,	O
EVEX_W_0F54_P_0	O
,	O
EVEX_W_0F54_P_2	O
,	O
EVEX_W_0F55_P_0	O
,	O
EVEX_W_0F55_P_2	O
,	O
EVEX_W_0F56_P_0	O
,	O
EVEX_W_0F56_P_2	O
,	O
EVEX_W_0F57_P_0	O
,	O
EVEX_W_0F57_P_2	O
,	O
EVEX_W_0F58_P_0	O
,	O
EVEX_W_0F58_P_1	O
,	O
EVEX_W_0F58_P_2	O
,	O
EVEX_W_0F58_P_3	O
,	O
EVEX_W_0F59_P_0	O
,	O
EVEX_W_0F59_P_1	O
,	O
EVEX_W_0F59_P_2	O
,	O
EVEX_W_0F59_P_3	O
,	O
EVEX_W_0F5A_P_0	O
,	O
EVEX_W_0F5A_P_1	O
,	O
EVEX_W_0F5A_P_2	O
,	O
EVEX_W_0F5A_P_3	O
,	O
EVEX_W_0F5B_P_0	O
,	O
EVEX_W_0F5B_P_1	O
,	O
EVEX_W_0F5B_P_2	O
,	O
EVEX_W_0F5C_P_0	O
,	O
EVEX_W_0F5C_P_1	O
,	O
EVEX_W_0F5C_P_2	O
,	O
EVEX_W_0F5C_P_3	O
,	O
EVEX_W_0F5D_P_0	O
,	O
EVEX_W_0F5D_P_1	O
,	O
EVEX_W_0F5D_P_2	O
,	O
EVEX_W_0F5D_P_3	O
,	O
EVEX_W_0F5E_P_0	O
,	O
EVEX_W_0F5E_P_1	O
,	O
EVEX_W_0F5E_P_2	O
,	O
EVEX_W_0F5E_P_3	O
,	O
EVEX_W_0F5F_P_0	O
,	O
EVEX_W_0F5F_P_1	O
,	O
EVEX_W_0F5F_P_2	O
,	O
EVEX_W_0F5F_P_3	O
,	O
EVEX_W_0F62_P_2	O
,	O
EVEX_W_0F66_P_2	O
,	O
EVEX_W_0F6A_P_2	O
,	O
EVEX_W_0F6B_P_2	O
,	O
EVEX_W_0F6C_P_2	O
,	O
EVEX_W_0F6D_P_2	O
,	O
EVEX_W_0F6F_P_1	O
,	O
EVEX_W_0F6F_P_2	O
,	O
EVEX_W_0F6F_P_3	O
,	O
EVEX_W_0F70_P_2	O
,	O
EVEX_W_0F72_R_2_P_2	O
,	O
EVEX_W_0F72_R_6_P_2	O
,	O
EVEX_W_0F73_R_2_P_2	O
,	O
EVEX_W_0F73_R_6_P_2	O
,	O
EVEX_W_0F76_P_2	O
,	O
EVEX_W_0F78_P_0	O
,	O
EVEX_W_0F78_P_2	O
,	O
EVEX_W_0F79_P_0	O
,	O
EVEX_W_0F79_P_2	O
,	O
EVEX_W_0F7A_P_1	O
,	O
EVEX_W_0F7A_P_2	O
,	O
EVEX_W_0F7A_P_3	O
,	O
EVEX_W_0F7B_P_2	O
,	O
EVEX_W_0F7B_P_3	O
,	O
EVEX_W_0F7E_P_1	O
,	O
EVEX_W_0F7F_P_1	O
,	O
EVEX_W_0F7F_P_2	O
,	O
EVEX_W_0F7F_P_3	O
,	O
EVEX_W_0FC2_P_0	O
,	O
EVEX_W_0FC2_P_1	O
,	O
EVEX_W_0FC2_P_2	O
,	O
EVEX_W_0FC2_P_3	O
,	O
EVEX_W_0FC6_P_0	O
,	O
EVEX_W_0FC6_P_2	O
,	O
EVEX_W_0FD2_P_2	O
,	O
EVEX_W_0FD3_P_2	O
,	O
EVEX_W_0FD4_P_2	O
,	O
EVEX_W_0FD6_P_2	O
,	O
EVEX_W_0FE6_P_1	O
,	O
EVEX_W_0FE6_P_2	O
,	O
EVEX_W_0FE6_P_3	O
,	O
EVEX_W_0FE7_P_2	O
,	O
EVEX_W_0FF2_P_2	O
,	O
EVEX_W_0FF3_P_2	O
,	O
EVEX_W_0FF4_P_2	O
,	O
EVEX_W_0FFA_P_2	O
,	O
EVEX_W_0FFB_P_2	O
,	O
EVEX_W_0FFE_P_2	O
,	O
EVEX_W_0F380C_P_2	O
,	O
EVEX_W_0F380D_P_2	O
,	O
EVEX_W_0F3810_P_1	O
,	O
EVEX_W_0F3810_P_2	O
,	O
EVEX_W_0F3811_P_1	O
,	O
EVEX_W_0F3811_P_2	O
,	O
EVEX_W_0F3812_P_1	O
,	O
EVEX_W_0F3812_P_2	O
,	O
EVEX_W_0F3813_P_1	O
,	O
EVEX_W_0F3813_P_2	O
,	O
EVEX_W_0F3814_P_1	O
,	O
EVEX_W_0F3815_P_1	O
,	O
EVEX_W_0F3818_P_2	O
,	O
EVEX_W_0F3819_P_2	O
,	O
EVEX_W_0F381A_P_2	O
,	O
EVEX_W_0F381B_P_2	O
,	O
EVEX_W_0F381E_P_2	O
,	O
EVEX_W_0F381F_P_2	O
,	O
EVEX_W_0F3820_P_1	O
,	O
EVEX_W_0F3821_P_1	O
,	O
EVEX_W_0F3822_P_1	O
,	O
EVEX_W_0F3823_P_1	O
,	O
EVEX_W_0F3824_P_1	O
,	O
EVEX_W_0F3825_P_1	O
,	O
EVEX_W_0F3825_P_2	O
,	O
EVEX_W_0F3826_P_1	O
,	O
EVEX_W_0F3826_P_2	O
,	O
EVEX_W_0F3828_P_1	O
,	O
EVEX_W_0F3828_P_2	O
,	O
EVEX_W_0F3829_P_1	O
,	O
EVEX_W_0F3829_P_2	O
,	O
EVEX_W_0F382A_P_1	O
,	O
EVEX_W_0F382A_P_2	O
,	O
EVEX_W_0F382B_P_2	O
,	O
EVEX_W_0F3830_P_1	O
,	O
EVEX_W_0F3831_P_1	O
,	O
EVEX_W_0F3832_P_1	O
,	O
EVEX_W_0F3833_P_1	O
,	O
EVEX_W_0F3834_P_1	O
,	O
EVEX_W_0F3835_P_1	O
,	O
EVEX_W_0F3835_P_2	O
,	O
EVEX_W_0F3837_P_2	O
,	O
EVEX_W_0F3838_P_1	O
,	O
EVEX_W_0F3839_P_1	O
,	O
EVEX_W_0F383A_P_1	O
,	O
EVEX_W_0F3840_P_2	O
,	O
EVEX_W_0F3852_P_1	O
,	O
EVEX_W_0F3854_P_2	O
,	O
EVEX_W_0F3855_P_2	O
,	O
EVEX_W_0F3858_P_2	O
,	O
EVEX_W_0F3859_P_2	O
,	O
EVEX_W_0F385A_P_2	O
,	O
EVEX_W_0F385B_P_2	O
,	O
EVEX_W_0F3862_P_2	O
,	O
EVEX_W_0F3863_P_2	O
,	O
EVEX_W_0F3866_P_2	O
,	O
EVEX_W_0F3868_P_3	O
,	O
EVEX_W_0F3870_P_2	O
,	O
EVEX_W_0F3871_P_2	O
,	O
EVEX_W_0F3872_P_1	O
,	O
EVEX_W_0F3872_P_2	O
,	O
EVEX_W_0F3872_P_3	O
,	O
EVEX_W_0F3873_P_2	O
,	O
EVEX_W_0F3875_P_2	O
,	O
EVEX_W_0F3878_P_2	O
,	O
EVEX_W_0F3879_P_2	O
,	O
EVEX_W_0F387A_P_2	O
,	O
EVEX_W_0F387B_P_2	O
,	O
EVEX_W_0F387D_P_2	O
,	O
EVEX_W_0F3883_P_2	O
,	O
EVEX_W_0F388D_P_2	O
,	O
EVEX_W_0F3891_P_2	O
,	O
EVEX_W_0F3893_P_2	O
,	O
EVEX_W_0F38A1_P_2	O
,	O
EVEX_W_0F38A3_P_2	O
,	O
EVEX_W_0F38C7_R_1_P_2	O
,	O
EVEX_W_0F38C7_R_2_P_2	O
,	O
EVEX_W_0F38C7_R_5_P_2	O
,	O
EVEX_W_0F38C7_R_6_P_2	O
,	O
EVEX_W_0F3A00_P_2	O
,	O
EVEX_W_0F3A01_P_2	O
,	O
EVEX_W_0F3A04_P_2	O
,	O
EVEX_W_0F3A05_P_2	O
,	O
EVEX_W_0F3A08_P_2	O
,	O
EVEX_W_0F3A09_P_2	O
,	O
EVEX_W_0F3A0A_P_2	O
,	O
EVEX_W_0F3A0B_P_2	O
,	O
EVEX_W_0F3A18_P_2	O
,	O
EVEX_W_0F3A19_P_2	O
,	O
EVEX_W_0F3A1A_P_2	O
,	O
EVEX_W_0F3A1B_P_2	O
,	O
EVEX_W_0F3A1D_P_2	O
,	O
EVEX_W_0F3A21_P_2	O
,	O
EVEX_W_0F3A23_P_2	O
,	O
EVEX_W_0F3A38_P_2	O
,	O
EVEX_W_0F3A39_P_2	O
,	O
EVEX_W_0F3A3A_P_2	O
,	O
EVEX_W_0F3A3B_P_2	O
,	O
EVEX_W_0F3A3E_P_2	O
,	O
EVEX_W_0F3A3F_P_2	O
,	O
EVEX_W_0F3A42_P_2	O
,	O
EVEX_W_0F3A43_P_2	O
,	O
EVEX_W_0F3A50_P_2	O
,	O
EVEX_W_0F3A51_P_2	O
,	O
EVEX_W_0F3A56_P_2	O
,	O
EVEX_W_0F3A57_P_2	O
,	O
EVEX_W_0F3A66_P_2	O
,	O
EVEX_W_0F3A67_P_2	O
,	O
EVEX_W_0F3A70_P_2	O
,	O
EVEX_W_0F3A71_P_2	O
,	O
EVEX_W_0F3A72_P_2	O
,	O
EVEX_W_0F3A73_P_2	O
,	O
EVEX_W_0F3ACE_P_2	O
,	O
EVEX_W_0F3ACF_P_2	O
}	O
;	O
typedef	O
void	O
(	O
*	O
op_rtn	O
)	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
;	O
struct	O
dis386	O
{	O
const	O
char	O
*	O
name	*(char)
;	O
struct	O
{	O
op_rtn	O
rtn	O
;	O
int	O
bytemode	O
;	O
}	O
op	O
[	O
MAX_OPERANDS	O
]	O
;	O
unsigned	O
int	O
prefix_requirement	O
;	O
}	O
;	O
static	O
const	O
struct	O
dis386	O
dis386	O
[	O
]	O
=	O
{	O
{	O
"addB"	*(char)
,	O
{	O
Ebh1	O
,	O
Gb	O
}	O
,	O
0	int
}	O
,	O
{	O
"addS"	*(char)
,	O
{	O
Evh1	O
,	O
Gv	O
}	O
,	O
0	int
}	O
,	O
{	O
"addB"	*(char)
,	O
{	O
Gb	O
,	O
EbS	O
}	O
,	O
0	int
}	O
,	O
{	O
"addS"	*(char)
,	O
{	O
Gv	O
,	O
EvS	O
}	O
,	O
0	int
}	O
,	O
{	O
"addB"	*(char)
,	O
{	O
AL	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"addS"	*(char)
,	O
{	O
eAX	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_06	O
)	O
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_07	O
)	O
}	O
,	O
{	O
"orB"	*(char)
,	O
{	O
Ebh1	O
,	O
Gb	O
}	O
,	O
0	int
}	O
,	O
{	O
"orS"	*(char)
,	O
{	O
Evh1	O
,	O
Gv	O
}	O
,	O
0	int
}	O
,	O
{	O
"orB"	*(char)
,	O
{	O
Gb	O
,	O
EbS	O
}	O
,	O
0	int
}	O
,	O
{	O
"orS"	*(char)
,	O
{	O
Gv	O
,	O
EvS	O
}	O
,	O
0	int
}	O
,	O
{	O
"orB"	*(char)
,	O
{	O
AL	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"orS"	*(char)
,	O
{	O
eAX	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_0D	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"adcB"	*(char)
,	O
{	O
Ebh1	O
,	O
Gb	O
}	O
,	O
0	int
}	O
,	O
{	O
"adcS"	*(char)
,	O
{	O
Evh1	O
,	O
Gv	O
}	O
,	O
0	int
}	O
,	O
{	O
"adcB"	*(char)
,	O
{	O
Gb	O
,	O
EbS	O
}	O
,	O
0	int
}	O
,	O
{	O
"adcS"	*(char)
,	O
{	O
Gv	O
,	O
EvS	O
}	O
,	O
0	int
}	O
,	O
{	O
"adcB"	*(char)
,	O
{	O
AL	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"adcS"	*(char)
,	O
{	O
eAX	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_16	O
)	O
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_17	O
)	O
}	O
,	O
{	O
"sbbB"	*(char)
,	O
{	O
Ebh1	O
,	O
Gb	O
}	O
,	O
0	int
}	O
,	O
{	O
"sbbS"	*(char)
,	O
{	O
Evh1	O
,	O
Gv	O
}	O
,	O
0	int
}	O
,	O
{	O
"sbbB"	*(char)
,	O
{	O
Gb	O
,	O
EbS	O
}	O
,	O
0	int
}	O
,	O
{	O
"sbbS"	*(char)
,	O
{	O
Gv	O
,	O
EvS	O
}	O
,	O
0	int
}	O
,	O
{	O
"sbbB"	*(char)
,	O
{	O
AL	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"sbbS"	*(char)
,	O
{	O
eAX	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_1E	O
)	O
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_1F	O
)	O
}	O
,	O
{	O
"andB"	*(char)
,	O
{	O
Ebh1	O
,	O
Gb	O
}	O
,	O
0	int
}	O
,	O
{	O
"andS"	*(char)
,	O
{	O
Evh1	O
,	O
Gv	O
}	O
,	O
0	int
}	O
,	O
{	O
"andB"	*(char)
,	O
{	O
Gb	O
,	O
EbS	O
}	O
,	O
0	int
}	O
,	O
{	O
"andS"	*(char)
,	O
{	O
Gv	O
,	O
EvS	O
}	O
,	O
0	int
}	O
,	O
{	O
"andB"	*(char)
,	O
{	O
AL	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"andS"	*(char)
,	O
{	O
eAX	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_27	O
)	O
}	O
,	O
{	O
"subB"	*(char)
,	O
{	O
Ebh1	O
,	O
Gb	O
}	O
,	O
0	int
}	O
,	O
{	O
"subS"	*(char)
,	O
{	O
Evh1	O
,	O
Gv	O
}	O
,	O
0	int
}	O
,	O
{	O
"subB"	*(char)
,	O
{	O
Gb	O
,	O
EbS	O
}	O
,	O
0	int
}	O
,	O
{	O
"subS"	*(char)
,	O
{	O
Gv	O
,	O
EvS	O
}	O
,	O
0	int
}	O
,	O
{	O
"subB"	*(char)
,	O
{	O
AL	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"subS"	*(char)
,	O
{	O
eAX	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_2F	O
)	O
}	O
,	O
{	O
"xorB"	*(char)
,	O
{	O
Ebh1	O
,	O
Gb	O
}	O
,	O
0	int
}	O
,	O
{	O
"xorS"	*(char)
,	O
{	O
Evh1	O
,	O
Gv	O
}	O
,	O
0	int
}	O
,	O
{	O
"xorB"	*(char)
,	O
{	O
Gb	O
,	O
EbS	O
}	O
,	O
0	int
}	O
,	O
{	O
"xorS"	*(char)
,	O
{	O
Gv	O
,	O
EvS	O
}	O
,	O
0	int
}	O
,	O
{	O
"xorB"	*(char)
,	O
{	O
AL	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"xorS"	*(char)
,	O
{	O
eAX	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_37	O
)	O
}	O
,	O
{	O
"cmpB"	*(char)
,	O
{	O
Eb	O
,	O
Gb	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmpS"	*(char)
,	O
{	O
Ev	O
,	O
Gv	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmpB"	*(char)
,	O
{	O
Gb	O
,	O
EbS	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmpS"	*(char)
,	O
{	O
Gv	O
,	O
EvS	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmpB"	*(char)
,	O
{	O
AL	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmpS"	*(char)
,	O
{	O
eAX	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_3F	O
)	O
}	O
,	O
{	O
"inc{S|}"	*(char)
,	O
{	O
RMeAX	O
}	O
,	O
0	int
}	O
,	O
{	O
"inc{S|}"	*(char)
,	O
{	O
RMeCX	O
}	O
,	O
0	int
}	O
,	O
{	O
"inc{S|}"	*(char)
,	O
{	O
RMeDX	O
}	O
,	O
0	int
}	O
,	O
{	O
"inc{S|}"	*(char)
,	O
{	O
RMeBX	O
}	O
,	O
0	int
}	O
,	O
{	O
"inc{S|}"	*(char)
,	O
{	O
RMeSP	O
}	O
,	O
0	int
}	O
,	O
{	O
"inc{S|}"	*(char)
,	O
{	O
RMeBP	O
}	O
,	O
0	int
}	O
,	O
{	O
"inc{S|}"	*(char)
,	O
{	O
RMeSI	O
}	O
,	O
0	int
}	O
,	O
{	O
"inc{S|}"	*(char)
,	O
{	O
RMeDI	O
}	O
,	O
0	int
}	O
,	O
{	O
"dec{S|}"	*(char)
,	O
{	O
RMeAX	O
}	O
,	O
0	int
}	O
,	O
{	O
"dec{S|}"	*(char)
,	O
{	O
RMeCX	O
}	O
,	O
0	int
}	O
,	O
{	O
"dec{S|}"	*(char)
,	O
{	O
RMeDX	O
}	O
,	O
0	int
}	O
,	O
{	O
"dec{S|}"	*(char)
,	O
{	O
RMeBX	O
}	O
,	O
0	int
}	O
,	O
{	O
"dec{S|}"	*(char)
,	O
{	O
RMeSP	O
}	O
,	O
0	int
}	O
,	O
{	O
"dec{S|}"	*(char)
,	O
{	O
RMeBP	O
}	O
,	O
0	int
}	O
,	O
{	O
"dec{S|}"	*(char)
,	O
{	O
RMeSI	O
}	O
,	O
0	int
}	O
,	O
{	O
"dec{S|}"	*(char)
,	O
{	O
RMeDI	O
}	O
,	O
0	int
}	O
,	O
{	O
"pushV"	*(char)
,	O
{	O
RMrAX	O
}	O
,	O
0	int
}	O
,	O
{	O
"pushV"	*(char)
,	O
{	O
RMrCX	O
}	O
,	O
0	int
}	O
,	O
{	O
"pushV"	*(char)
,	O
{	O
RMrDX	O
}	O
,	O
0	int
}	O
,	O
{	O
"pushV"	*(char)
,	O
{	O
RMrBX	O
}	O
,	O
0	int
}	O
,	O
{	O
"pushV"	*(char)
,	O
{	O
RMrSP	O
}	O
,	O
0	int
}	O
,	O
{	O
"pushV"	*(char)
,	O
{	O
RMrBP	O
}	O
,	O
0	int
}	O
,	O
{	O
"pushV"	*(char)
,	O
{	O
RMrSI	O
}	O
,	O
0	int
}	O
,	O
{	O
"pushV"	*(char)
,	O
{	O
RMrDI	O
}	O
,	O
0	int
}	O
,	O
{	O
"popV"	*(char)
,	O
{	O
RMrAX	O
}	O
,	O
0	int
}	O
,	O
{	O
"popV"	*(char)
,	O
{	O
RMrCX	O
}	O
,	O
0	int
}	O
,	O
{	O
"popV"	*(char)
,	O
{	O
RMrDX	O
}	O
,	O
0	int
}	O
,	O
{	O
"popV"	*(char)
,	O
{	O
RMrBX	O
}	O
,	O
0	int
}	O
,	O
{	O
"popV"	*(char)
,	O
{	O
RMrSP	O
}	O
,	O
0	int
}	O
,	O
{	O
"popV"	*(char)
,	O
{	O
RMrBP	O
}	O
,	O
0	int
}	O
,	O
{	O
"popV"	*(char)
,	O
{	O
RMrSI	O
}	O
,	O
0	int
}	O
,	O
{	O
"popV"	*(char)
,	O
{	O
RMrDI	O
}	O
,	O
0	int
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_60	O
)	O
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_61	O
)	O
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_62	O
)	O
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_63	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pushT"	*(char)
,	O
{	O
sIv	O
}	O
,	O
0	int
}	O
,	O
{	O
"imulS"	*(char)
,	O
{	O
Gv	O
,	O
Ev	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
"pushT"	*(char)
,	O
{	O
sIbT	O
}	O
,	O
0	int
}	O
,	O
{	O
"imulS"	*(char)
,	O
{	O
Gv	O
,	O
Ev	O
,	O
sIb	O
}	O
,	O
0	int
}	O
,	O
{	O
"ins{b|}"	*(char)
,	O
{	O
Ybr	O
,	O
indirDX	O
}	O
,	O
0	int
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_6D	O
)	O
}	O
,	O
{	O
"outs{b|}"	*(char)
,	O
{	O
indirDXr	O
,	O
Xb	O
}	O
,	O
0	int
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_6F	O
)	O
}	O
,	O
{	O
"joH"	*(char)
,	O
{	O
Jb	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jnoH"	*(char)
,	O
{	O
Jb	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jbH"	*(char)
,	O
{	O
Jb	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jaeH"	*(char)
,	O
{	O
Jb	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jeH"	*(char)
,	O
{	O
Jb	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jneH"	*(char)
,	O
{	O
Jb	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jbeH"	*(char)
,	O
{	O
Jb	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jaH"	*(char)
,	O
{	O
Jb	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jsH"	*(char)
,	O
{	O
Jb	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jnsH"	*(char)
,	O
{	O
Jb	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jpH"	*(char)
,	O
{	O
Jb	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jnpH"	*(char)
,	O
{	O
Jb	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jlH"	*(char)
,	O
{	O
Jb	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jgeH"	*(char)
,	O
{	O
Jb	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jleH"	*(char)
,	O
{	O
Jb	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jgH"	*(char)
,	O
{	O
Jb	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_80	O
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_81	O
)	O
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_82	O
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_83	O
)	O
}	O
,	O
{	O
"testB"	*(char)
,	O
{	O
Eb	O
,	O
Gb	O
}	O
,	O
0	int
}	O
,	O
{	O
"testS"	*(char)
,	O
{	O
Ev	O
,	O
Gv	O
}	O
,	O
0	int
}	O
,	O
{	O
"xchgB"	*(char)
,	O
{	O
Ebh2	O
,	O
Gb	O
}	O
,	O
0	int
}	O
,	O
{	O
"xchgS"	*(char)
,	O
{	O
Evh2	O
,	O
Gv	O
}	O
,	O
0	int
}	O
,	O
{	O
"movB"	*(char)
,	O
{	O
Ebh3	O
,	O
Gb	O
}	O
,	O
0	int
}	O
,	O
{	O
"movS"	*(char)
,	O
{	O
Evh3	O
,	O
Gv	O
}	O
,	O
0	int
}	O
,	O
{	O
"movB"	*(char)
,	O
{	O
Gb	O
,	O
EbS	O
}	O
,	O
0	int
}	O
,	O
{	O
"movS"	*(char)
,	O
{	O
Gv	O
,	O
EvS	O
}	O
,	O
0	int
}	O
,	O
{	O
"movD"	*(char)
,	O
{	O
Sv	O
,	O
Sw	O
}	O
,	O
0	int
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_8D	O
)	O
}	O
,	O
{	O
"movD"	*(char)
,	O
{	O
Sw	O
,	O
Sv	O
}	O
,	O
0	int
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_8F	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_90	O
)	O
}	O
,	O
{	O
"xchgS"	*(char)
,	O
{	O
RMeCX	O
,	O
eAX	O
}	O
,	O
0	int
}	O
,	O
{	O
"xchgS"	*(char)
,	O
{	O
RMeDX	O
,	O
eAX	O
}	O
,	O
0	int
}	O
,	O
{	O
"xchgS"	*(char)
,	O
{	O
RMeBX	O
,	O
eAX	O
}	O
,	O
0	int
}	O
,	O
{	O
"xchgS"	*(char)
,	O
{	O
RMeSP	O
,	O
eAX	O
}	O
,	O
0	int
}	O
,	O
{	O
"xchgS"	*(char)
,	O
{	O
RMeBP	O
,	O
eAX	O
}	O
,	O
0	int
}	O
,	O
{	O
"xchgS"	*(char)
,	O
{	O
RMeSI	O
,	O
eAX	O
}	O
,	O
0	int
}	O
,	O
{	O
"xchgS"	*(char)
,	O
{	O
RMeDI	O
,	O
eAX	O
}	O
,	O
0	int
}	O
,	O
{	O
"cW{t|}R"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"cR{t|}O"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_9A	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pushfT"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"popfT"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"sahf"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"lahf"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"mov%LB"	*(char)
,	O
{	O
AL	O
,	O
Ob	O
}	O
,	O
0	int
}	O
,	O
{	O
"mov%LS"	*(char)
,	O
{	O
eAX	O
,	O
Ov	O
}	O
,	O
0	int
}	O
,	O
{	O
"mov%LB"	*(char)
,	O
{	O
Ob	O
,	O
AL	O
}	O
,	O
0	int
}	O
,	O
{	O
"mov%LS"	*(char)
,	O
{	O
Ov	O
,	O
eAX	O
}	O
,	O
0	int
}	O
,	O
{	O
"movs{b|}"	*(char)
,	O
{	O
Ybr	O
,	O
Xb	O
}	O
,	O
0	int
}	O
,	O
{	O
"movs{R|}"	*(char)
,	O
{	O
Yvr	O
,	O
Xv	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmps{b|}"	*(char)
,	O
{	O
Xb	O
,	O
Yb	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmps{R|}"	*(char)
,	O
{	O
Xv	O
,	O
Yv	O
}	O
,	O
0	int
}	O
,	O
{	O
"testB"	*(char)
,	O
{	O
AL	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"testS"	*(char)
,	O
{	O
eAX	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
"stosB"	*(char)
,	O
{	O
Ybr	O
,	O
AL	O
}	O
,	O
0	int
}	O
,	O
{	O
"stosS"	*(char)
,	O
{	O
Yvr	O
,	O
eAX	O
}	O
,	O
0	int
}	O
,	O
{	O
"lodsB"	*(char)
,	O
{	O
ALr	O
,	O
Xb	O
}	O
,	O
0	int
}	O
,	O
{	O
"lodsS"	*(char)
,	O
{	O
eAXr	O
,	O
Xv	O
}	O
,	O
0	int
}	O
,	O
{	O
"scasB"	*(char)
,	O
{	O
AL	O
,	O
Yb	O
}	O
,	O
0	int
}	O
,	O
{	O
"scasS"	*(char)
,	O
{	O
eAX	O
,	O
Yv	O
}	O
,	O
0	int
}	O
,	O
{	O
"movB"	*(char)
,	O
{	O
RMAL	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"movB"	*(char)
,	O
{	O
RMCL	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"movB"	*(char)
,	O
{	O
RMDL	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"movB"	*(char)
,	O
{	O
RMBL	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"movB"	*(char)
,	O
{	O
RMAH	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"movB"	*(char)
,	O
{	O
RMCH	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"movB"	*(char)
,	O
{	O
RMDH	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"movB"	*(char)
,	O
{	O
RMBH	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"mov%LV"	*(char)
,	O
{	O
RMeAX	O
,	O
Iv64	O
}	O
,	O
0	int
}	O
,	O
{	O
"mov%LV"	*(char)
,	O
{	O
RMeCX	O
,	O
Iv64	O
}	O
,	O
0	int
}	O
,	O
{	O
"mov%LV"	*(char)
,	O
{	O
RMeDX	O
,	O
Iv64	O
}	O
,	O
0	int
}	O
,	O
{	O
"mov%LV"	*(char)
,	O
{	O
RMeBX	O
,	O
Iv64	O
}	O
,	O
0	int
}	O
,	O
{	O
"mov%LV"	*(char)
,	O
{	O
RMeSP	O
,	O
Iv64	O
}	O
,	O
0	int
}	O
,	O
{	O
"mov%LV"	*(char)
,	O
{	O
RMeBP	O
,	O
Iv64	O
}	O
,	O
0	int
}	O
,	O
{	O
"mov%LV"	*(char)
,	O
{	O
RMeSI	O
,	O
Iv64	O
}	O
,	O
0	int
}	O
,	O
{	O
"mov%LV"	*(char)
,	O
{	O
RMeDI	O
,	O
Iv64	O
}	O
,	O
0	int
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_C0	O
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_C1	O
)	O
}	O
,	O
{	O
"retT"	*(char)
,	O
{	O
Iw	O
,	O
BND	O
}	O
,	O
0	int
}	O
,	O
{	O
"retT"	*(char)
,	O
{	O
BND	O
}	O
,	O
0	int
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_C4	O
)	O
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_C5	O
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_C6	O
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_C7	O
)	O
}	O
,	O
{	O
"enterT"	*(char)
,	O
{	O
Iw	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"leaveT"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"Jret{|f}P"	*(char)
,	O
{	O
Iw	O
}	O
,	O
0	int
}	O
,	O
{	O
"Jret{|f}P"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"int3"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"int"	*(char)
,	O
{	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_CE	O
)	O
}	O
,	O
{	O
"iret%LP"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_D0	O
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_D1	O
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_D2	O
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_D3	O
)	O
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_D4	O
)	O
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_D5	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"xlat"	*(char)
,	O
{	O
DSBX	O
}	O
,	O
0	int
}	O
,	O
{	O
FLOAT	O
}	O
,	O
{	O
FLOAT	O
}	O
,	O
{	O
FLOAT	O
}	O
,	O
{	O
FLOAT	O
}	O
,	O
{	O
FLOAT	O
}	O
,	O
{	O
FLOAT	O
}	O
,	O
{	O
FLOAT	O
}	O
,	O
{	O
FLOAT	O
}	O
,	O
{	O
"loopneFH"	*(char)
,	O
{	O
Jb	O
,	O
XX	O
,	O
loop_jcxz_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"loopeFH"	*(char)
,	O
{	O
Jb	O
,	O
XX	O
,	O
loop_jcxz_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"loopFH"	*(char)
,	O
{	O
Jb	O
,	O
XX	O
,	O
loop_jcxz_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jEcxzH"	*(char)
,	O
{	O
Jb	O
,	O
XX	O
,	O
loop_jcxz_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"inB"	*(char)
,	O
{	O
AL	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"inG"	*(char)
,	O
{	O
zAX	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"outB"	*(char)
,	O
{	O
Ib	O
,	O
AL	O
}	O
,	O
0	int
}	O
,	O
{	O
"outG"	*(char)
,	O
{	O
Ib	O
,	O
zAX	O
}	O
,	O
0	int
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_E8	O
)	O
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_E9	O
)	O
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_EA	O
)	O
}	O
,	O
{	O
"jmp"	*(char)
,	O
{	O
Jb	O
,	O
BND	O
}	O
,	O
0	int
}	O
,	O
{	O
"inB"	*(char)
,	O
{	O
AL	O
,	O
indirDX	O
}	O
,	O
0	int
}	O
,	O
{	O
"inG"	*(char)
,	O
{	O
zAX	O
,	O
indirDX	O
}	O
,	O
0	int
}	O
,	O
{	O
"outB"	*(char)
,	O
{	O
indirDX	O
,	O
AL	O
}	O
,	O
0	int
}	O
,	O
{	O
"outG"	*(char)
,	O
{	O
indirDX	O
,	O
zAX	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"icebp"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"hlt"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmc"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_F6	O
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_F7	O
)	O
}	O
,	O
{	O
"clc"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"stc"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"cli"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"sti"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"cld"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"std"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_FE	O
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_FF	O
)	O
}	O
,	O
}	O
;	O
static	O
const	O
struct	O
dis386	O
dis386_twobyte	O
[	O
]	O
=	O
{	O
{	O
REG_TABLE	O
(	O
REG_0F00	O
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_0F01	O
)	O
}	O
,	O
{	O
"larS"	*(char)
,	O
{	O
Gv	O
,	O
Ew	O
}	O
,	O
0	int
}	O
,	O
{	O
"lslS"	*(char)
,	O
{	O
Gv	O
,	O
Ew	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"syscall"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"clts"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"sysret%LP"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"invd"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F09	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"ud2"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_0F0D	O
)	O
}	O
,	O
{	O
"femms"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
""	*(char)
,	O
{	O
MX	O
,	O
EM	O
,	O
OPSUF	O
}	O
,	O
0	int
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F10	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F11	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F12	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F13	O
)	O
}	O
,	O
{	O
"unpcklpX"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"unpckhpX"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F16	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F17	O
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_0F18	O
)	O
}	O
,	O
{	O
"nopQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F1A	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F1B	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F1C	O
)	O
}	O
,	O
{	O
"nopQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F1E	O
)	O
}	O
,	O
{	O
"nopQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"movZ"	*(char)
,	O
{	O
Rm	O
,	O
Cm	O
}	O
,	O
0	int
}	O
,	O
{	O
"movZ"	*(char)
,	O
{	O
Rm	O
,	O
Dm	O
}	O
,	O
0	int
}	O
,	O
{	O
"movZ"	*(char)
,	O
{	O
Cm	O
,	O
Rm	O
}	O
,	O
0	int
}	O
,	O
{	O
"movZ"	*(char)
,	O
{	O
Dm	O
,	O
Rm	O
}	O
,	O
0	int
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F24	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F26	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"movapX"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"movapX"	*(char)
,	O
{	O
EXxS	O
,	O
XM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F2A	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F2B	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F2C	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F2D	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F2E	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F2F	O
)	O
}	O
,	O
{	O
"wrmsr"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"rdtsc"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"rdmsr"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"rdpmc"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"sysenter"	*(char)
,	O
{	O
SEP	O
}	O
,	O
0	int
}	O
,	O
{	O
"sysexit"	*(char)
,	O
{	O
SEP	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"getsec"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
THREE_BYTE_TABLE_PREFIX	O
(	O
THREE_BYTE_0F38	O
,	O
PREFIX_OPCODE	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
THREE_BYTE_TABLE_PREFIX	O
(	O
THREE_BYTE_0F3A	O
,	O
PREFIX_OPCODE	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"cmovoS"	*(char)
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmovnoS"	*(char)
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmovbS"	*(char)
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmovaeS"	*(char)
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmoveS"	*(char)
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmovneS"	*(char)
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmovbeS"	*(char)
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmovaS"	*(char)
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmovsS"	*(char)
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmovnsS"	*(char)
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmovpS"	*(char)
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmovnpS"	*(char)
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmovlS"	*(char)
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmovgeS"	*(char)
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmovleS"	*(char)
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmovgS"	*(char)
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F51	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F51	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F52	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F53	O
)	O
}	O
,	O
{	O
"andpX"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"andnpX"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"orpX"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"xorpX"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F58	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F59	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F5A	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F5B	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F5C	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F5D	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F5E	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F5F	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F60	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F61	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F62	O
)	O
}	O
,	O
{	O
"packsswb"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pcmpgtb"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pcmpgtw"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pcmpgtd"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"packuswb"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"punpckhbw"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"punpckhwd"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"punpckhdq"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"packssdw"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F6C	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F6D	O
)	O
}	O
,	O
{	O
"movK"	*(char)
,	O
{	O
MX	O
,	O
Edq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F6F	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F70	O
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_0F71	O
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_0F72	O
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_0F73	O
)	O
}	O
,	O
{	O
"pcmpeqb"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pcmpeqw"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pcmpeqd"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"emms"	*(char)
,	O
{	O
XX	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F78	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F79	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F7C	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F7D	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F7E	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F7F	O
)	O
}	O
,	O
{	O
"joH"	*(char)
,	O
{	O
Jv	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jnoH"	*(char)
,	O
{	O
Jv	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jbH"	*(char)
,	O
{	O
Jv	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jaeH"	*(char)
,	O
{	O
Jv	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jeH"	*(char)
,	O
{	O
Jv	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jneH"	*(char)
,	O
{	O
Jv	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jbeH"	*(char)
,	O
{	O
Jv	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jaH"	*(char)
,	O
{	O
Jv	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jsH"	*(char)
,	O
{	O
Jv	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jnsH"	*(char)
,	O
{	O
Jv	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jpH"	*(char)
,	O
{	O
Jv	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jnpH"	*(char)
,	O
{	O
Jv	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jlH"	*(char)
,	O
{	O
Jv	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jgeH"	*(char)
,	O
{	O
Jv	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jleH"	*(char)
,	O
{	O
Jv	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jgH"	*(char)
,	O
{	O
Jv	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"seto"	*(char)
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"setno"	*(char)
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"setb"	*(char)
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"setae"	*(char)
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"sete"	*(char)
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"setne"	*(char)
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"setbe"	*(char)
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"seta"	*(char)
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"sets"	*(char)
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"setns"	*(char)
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"setp"	*(char)
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"setnp"	*(char)
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"setl"	*(char)
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"setge"	*(char)
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"setle"	*(char)
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"setg"	*(char)
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"pushT"	*(char)
,	O
{	O
fs	O
}	O
,	O
0	int
}	O
,	O
{	O
"popT"	*(char)
,	O
{	O
fs	O
}	O
,	O
0	int
}	O
,	O
{	O
"cpuid"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"btS"	*(char)
,	O
{	O
Ev	O
,	O
Gv	O
}	O
,	O
0	int
}	O
,	O
{	O
"shldS"	*(char)
,	O
{	O
Ev	O
,	O
Gv	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"shldS"	*(char)
,	O
{	O
Ev	O
,	O
Gv	O
,	O
CL	O
}	O
,	O
0	int
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_0FA6	O
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_0FA7	O
)	O
}	O
,	O
{	O
"pushT"	*(char)
,	O
{	O
gs	O
}	O
,	O
0	int
}	O
,	O
{	O
"popT"	*(char)
,	O
{	O
gs	O
}	O
,	O
0	int
}	O
,	O
{	O
"rsm"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"btsS"	*(char)
,	O
{	O
Evh1	O
,	O
Gv	O
}	O
,	O
0	int
}	O
,	O
{	O
"shrdS"	*(char)
,	O
{	O
Ev	O
,	O
Gv	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"shrdS"	*(char)
,	O
{	O
Ev	O
,	O
Gv	O
,	O
CL	O
}	O
,	O
0	int
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_0FAE	O
)	O
}	O
,	O
{	O
"imulS"	*(char)
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmpxchgB"	*(char)
,	O
{	O
Ebh1	O
,	O
Gb	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmpxchgS"	*(char)
,	O
{	O
Evh1	O
,	O
Gv	O
}	O
,	O
0	int
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FB2	O
)	O
}	O
,	O
{	O
"btrS"	*(char)
,	O
{	O
Evh1	O
,	O
Gv	O
}	O
,	O
0	int
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FB4	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FB5	O
)	O
}	O
,	O
{	O
"movz{bR|x}"	*(char)
,	O
{	O
Gv	O
,	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"movz{wR|x}"	*(char)
,	O
{	O
Gv	O
,	O
Ew	O
}	O
,	O
0	int
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FB8	O
)	O
}	O
,	O
{	O
"ud1S"	*(char)
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_0FBA	O
)	O
}	O
,	O
{	O
"btcS"	*(char)
,	O
{	O
Evh1	O
,	O
Gv	O
}	O
,	O
0	int
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FBC	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FBD	O
)	O
}	O
,	O
{	O
"movs{bR|x}"	*(char)
,	O
{	O
Gv	O
,	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"movs{wR|x}"	*(char)
,	O
{	O
Gv	O
,	O
Ew	O
}	O
,	O
0	int
}	O
,	O
{	O
"xaddB"	*(char)
,	O
{	O
Ebh1	O
,	O
Gb	O
}	O
,	O
0	int
}	O
,	O
{	O
"xaddS"	*(char)
,	O
{	O
Evh1	O
,	O
Gv	O
}	O
,	O
0	int
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FC2	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FC3	O
)	O
}	O
,	O
{	O
"pinsrw"	*(char)
,	O
{	O
MX	O
,	O
Edqw	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pextrw"	*(char)
,	O
{	O
Gdq	O
,	O
MS	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"shufpX"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_0FC7	O
)	O
}	O
,	O
{	O
"bswap"	*(char)
,	O
{	O
RMeAX	O
}	O
,	O
0	int
}	O
,	O
{	O
"bswap"	*(char)
,	O
{	O
RMeCX	O
}	O
,	O
0	int
}	O
,	O
{	O
"bswap"	*(char)
,	O
{	O
RMeDX	O
}	O
,	O
0	int
}	O
,	O
{	O
"bswap"	*(char)
,	O
{	O
RMeBX	O
}	O
,	O
0	int
}	O
,	O
{	O
"bswap"	*(char)
,	O
{	O
RMeSP	O
}	O
,	O
0	int
}	O
,	O
{	O
"bswap"	*(char)
,	O
{	O
RMeBP	O
}	O
,	O
0	int
}	O
,	O
{	O
"bswap"	*(char)
,	O
{	O
RMeSI	O
}	O
,	O
0	int
}	O
,	O
{	O
"bswap"	*(char)
,	O
{	O
RMeDI	O
}	O
,	O
0	int
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FD0	O
)	O
}	O
,	O
{	O
"psrlw"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"psrld"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"psrlq"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"paddq"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pmullw"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FD6	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FD7	O
)	O
}	O
,	O
{	O
"psubusb"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"psubusw"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pminub"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pand"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"paddusb"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"paddusw"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pmaxub"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pandn"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pavgb"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"psraw"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"psrad"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pavgw"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pmulhuw"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pmulhw"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FE6	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FE7	O
)	O
}	O
,	O
{	O
"psubsb"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"psubsw"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pminsw"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"por"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"paddsb"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"paddsw"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pmaxsw"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pxor"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FF0	O
)	O
}	O
,	O
{	O
"psllw"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pslld"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"psllq"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pmuludq"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pmaddwd"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"psadbw"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FF7	O
)	O
}	O
,	O
{	O
"psubb"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"psubw"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"psubd"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"psubq"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"paddb"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"paddw"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"paddd"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"ud0S"	*(char)
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
}	O
;	O
static	O
const	O
unsigned	O
char	O
onebyte_has_modrm	O
[	O
256	int
]	O
=	O
{	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
0	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
}	O
;	O
static	O
const	O
unsigned	O
char	O
twobyte_has_modrm	O
[	O
256	int
]	O
=	O
{	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
0	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
}	O
;	O
static	O
char	O
obuf	O
[	O
100	int
]	O
;	O
static	O
char	O
*	O
obufp	O
;	O
static	O
char	O
*	O
mnemonicendp	O
;	O
static	O
char	O
scratchbuf	O
[	O
100	int
]	O
;	O
static	O
unsigned	O
char	O
*	O
start_codep	O
;	O
static	O
unsigned	O
char	O
*	O
insn_codep	O
;	O
static	O
unsigned	O
char	O
*	O
codep	O
;	O
static	O
unsigned	O
char	O
*	O
end_codep	O
;	O
static	O
int	O
last_lock_prefix	O
;	O
static	O
int	O
last_repz_prefix	O
;	O
static	O
int	O
last_repnz_prefix	O
;	O
static	O
int	O
last_data_prefix	O
;	O
static	O
int	O
last_addr_prefix	O
;	O
static	O
int	O
last_rex_prefix	O
;	O
static	O
int	O
last_seg_prefix	O
;	O
static	O
int	O
fwait_prefix	O
;	O
static	O
int	O
active_seg_prefix	O
;	O
static	O
int	O
all_prefixes	O
[	O
MAX_CODE_LENGTH	O
-	O
1	int
]	O
;	O
static	O
disassemble_info	O
*	O
the_info	O
;	O
static	O
struct	O
{	O
int	O
mod	O
;	O
int	O
reg	O
;	O
int	O
rm	O
;	O
}	O
modrm	O
;	O
static	O
unsigned	O
char	O
need_modrm	O
;	O
static	O
struct	O
{	O
int	O
scale	O
;	O
int	O
index	(*(char),int)->(*(char))
;	O
int	O
base	int
;	O
}	O
sib	O
;	O
static	O
struct	O
{	O
int	O
register_specifier	O
;	O
int	O
length	O
;	O
int	O
prefix	O
;	O
int	O
w	O
;	O
int	O
evex	O
;	O
int	O
r	O
;	O
int	O
v	O
;	O
int	O
mask_register_specifier	O
;	O
int	O
zeroing	O
;	O
int	O
ll	O
;	O
int	O
b	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct(*(*`),long,long,*(struct`))),*(*(struct(*`,long,long,*`))),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct(struct(*`,long,long,*`),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(struct`),*(char),long,int,*(struct`),union(*`,long))),*(*(struct(*`,*`,long,int,*`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
;	O
}	O
vex	O
;	O
static	O
unsigned	O
char	O
need_vex	O
;	O
static	O
unsigned	O
char	O
need_vex_reg	O
;	O
static	O
unsigned	O
char	O
vex_w_done	O
;	O
struct	O
op	O
{	O
const	O
char	O
*	O
name	*(char)
;	O
unsigned	O
int	O
len	long
;	O
}	O
;	O
static	O
const	O
char	O
*	O
*	O
names64	O
;	O
static	O
const	O
char	O
*	O
*	O
names32	O
;	O
static	O
const	O
char	O
*	O
*	O
names16	O
;	O
static	O
const	O
char	O
*	O
*	O
names8	O
;	O
static	O
const	O
char	O
*	O
*	O
names8rex	O
;	O
static	O
const	O
char	O
*	O
*	O
names_seg	O
;	O
static	O
const	O
char	O
*	O
index64	O
;	O
static	O
const	O
char	O
*	O
index32	O
;	O
static	O
const	O
char	O
*	O
*	O
index16	O
;	O
static	O
const	O
char	O
*	O
*	O
names_bnd	O
;	O
static	O
const	O
char	O
*	O
intel_names64	O
[	O
]	O
=	O
{	O
"rax"	*(char)
,	O
"rcx"	*(char)
,	O
"rdx"	*(char)
,	O
"rbx"	*(char)
,	O
"rsp"	*(char)
,	O
"rbp"	*(char)
,	O
"rsi"	*(char)
,	O
"rdi"	*(char)
,	O
"r8"	*(char)
,	O
"r9"	*(char)
,	O
"r10"	*(char)
,	O
"r11"	*(char)
,	O
"r12"	*(char)
,	O
"r13"	*(char)
,	O
"r14"	*(char)
,	O
"r15"	*(char)
}	O
;	O
static	O
const	O
char	O
*	O
intel_names32	O
[	O
]	O
=	O
{	O
"eax"	*(char)
,	O
"ecx"	*(char)
,	O
"edx"	*(char)
,	O
"ebx"	*(char)
,	O
"esp"	*(char)
,	O
"ebp"	*(char)
,	O
"esi"	*(char)
,	O
"edi"	*(char)
,	O
"r8d"	*(char)
,	O
"r9d"	*(char)
,	O
"r10d"	*(char)
,	O
"r11d"	*(char)
,	O
"r12d"	*(char)
,	O
"r13d"	*(char)
,	O
"r14d"	*(char)
,	O
"r15d"	*(char)
}	O
;	O
static	O
const	O
char	O
*	O
intel_names16	O
[	O
]	O
=	O
{	O
"ax"	*(char)
,	O
"cx"	*(char)
,	O
"dx"	*(char)
,	O
"bx"	*(char)
,	O
"sp"	*(char)
,	O
"bp"	*(char)
,	O
"si"	*(char)
,	O
"di"	*(char)
,	O
"r8w"	*(char)
,	O
"r9w"	*(char)
,	O
"r10w"	*(char)
,	O
"r11w"	*(char)
,	O
"r12w"	*(char)
,	O
"r13w"	*(char)
,	O
"r14w"	*(char)
,	O
"r15w"	*(char)
}	O
;	O
static	O
const	O
char	O
*	O
intel_names8	O
[	O
]	O
=	O
{	O
"al"	*(char)
,	O
"cl"	*(char)
,	O
"dl"	*(char)
,	O
"bl"	*(char)
,	O
"ah"	*(char)
,	O
"ch"	*(char)
,	O
"dh"	*(char)
,	O
"bh"	*(char)
,	O
}	O
;	O
static	O
const	O
char	O
*	O
intel_names8rex	O
[	O
]	O
=	O
{	O
"al"	*(char)
,	O
"cl"	*(char)
,	O
"dl"	*(char)
,	O
"bl"	*(char)
,	O
"spl"	*(char)
,	O
"bpl"	*(char)
,	O
"sil"	*(char)
,	O
"dil"	*(char)
,	O
"r8b"	*(char)
,	O
"r9b"	*(char)
,	O
"r10b"	*(char)
,	O
"r11b"	*(char)
,	O
"r12b"	*(char)
,	O
"r13b"	*(char)
,	O
"r14b"	*(char)
,	O
"r15b"	*(char)
}	O
;	O
static	O
const	O
char	O
*	O
intel_names_seg	O
[	O
]	O
=	O
{	O
"es"	*(char)
,	O
"cs"	*(char)
,	O
"ss"	*(char)
,	O
"ds"	*(char)
,	O
"fs"	*(char)
,	O
"gs"	*(char)
,	O
"?"	*(char)
,	O
"?"	*(char)
,	O
}	O
;	O
static	O
const	O
char	O
*	O
intel_index64	O
=	O
"riz"	*(char)
;	O
static	O
const	O
char	O
*	O
intel_index32	O
=	O
"eiz"	*(char)
;	O
static	O
const	O
char	O
*	O
intel_index16	O
[	O
]	O
=	O
{	O
"bx+si"	*(char)
,	O
"bx+di"	*(char)
,	O
"bp+si"	*(char)
,	O
"bp+di"	*(char)
,	O
"si"	*(char)
,	O
"di"	*(char)
,	O
"bp"	*(char)
,	O
"bx"	*(char)
}	O
;	O
static	O
const	O
char	O
*	O
att_names64	O
[	O
]	O
=	O
{	O
"%rax"	*(char)
,	O
"%rcx"	*(char)
,	O
"%rdx"	*(char)
,	O
"%rbx"	*(char)
,	O
"%rsp"	*(char)
,	O
"%rbp"	*(char)
,	O
"%rsi"	*(char)
,	O
"%rdi"	*(char)
,	O
"%r8"	*(char)
,	O
"%r9"	*(char)
,	O
"%r10"	*(char)
,	O
"%r11"	*(char)
,	O
"%r12"	*(char)
,	O
"%r13"	*(char)
,	O
"%r14"	*(char)
,	O
"%r15"	*(char)
}	O
;	O
static	O
const	O
char	O
*	O
att_names32	O
[	O
]	O
=	O
{	O
"%eax"	*(char)
,	O
"%ecx"	*(char)
,	O
"%edx"	*(char)
,	O
"%ebx"	*(char)
,	O
"%esp"	*(char)
,	O
"%ebp"	*(char)
,	O
"%esi"	*(char)
,	O
"%edi"	*(char)
,	O
"%r8d"	*(char)
,	O
"%r9d"	*(char)
,	O
"%r10d"	*(char)
,	O
"%r11d"	*(char)
,	O
"%r12d"	*(char)
,	O
"%r13d"	*(char)
,	O
"%r14d"	*(char)
,	O
"%r15d"	*(char)
}	O
;	O
static	O
const	O
char	O
*	O
att_names16	O
[	O
]	O
=	O
{	O
"%ax"	*(char)
,	O
"%cx"	*(char)
,	O
"%dx"	*(char)
,	O
"%bx"	*(char)
,	O
"%sp"	*(char)
,	O
"%bp"	*(char)
,	O
"%si"	*(char)
,	O
"%di"	*(char)
,	O
"%r8w"	*(char)
,	O
"%r9w"	*(char)
,	O
"%r10w"	*(char)
,	O
"%r11w"	*(char)
,	O
"%r12w"	*(char)
,	O
"%r13w"	*(char)
,	O
"%r14w"	*(char)
,	O
"%r15w"	*(char)
}	O
;	O
static	O
const	O
char	O
*	O
att_names8	O
[	O
]	O
=	O
{	O
"%al"	*(char)
,	O
"%cl"	*(char)
,	O
"%dl"	*(char)
,	O
"%bl"	*(char)
,	O
"%ah"	*(char)
,	O
"%ch"	*(char)
,	O
"%dh"	*(char)
,	O
"%bh"	*(char)
,	O
}	O
;	O
static	O
const	O
char	O
*	O
att_names8rex	O
[	O
]	O
=	O
{	O
"%al"	*(char)
,	O
"%cl"	*(char)
,	O
"%dl"	*(char)
,	O
"%bl"	*(char)
,	O
"%spl"	*(char)
,	O
"%bpl"	*(char)
,	O
"%sil"	*(char)
,	O
"%dil"	*(char)
,	O
"%r8b"	*(char)
,	O
"%r9b"	*(char)
,	O
"%r10b"	*(char)
,	O
"%r11b"	*(char)
,	O
"%r12b"	*(char)
,	O
"%r13b"	*(char)
,	O
"%r14b"	*(char)
,	O
"%r15b"	*(char)
}	O
;	O
static	O
const	O
char	O
*	O
att_names_seg	O
[	O
]	O
=	O
{	O
"%es"	*(char)
,	O
"%cs"	*(char)
,	O
"%ss"	*(char)
,	O
"%ds"	*(char)
,	O
"%fs"	*(char)
,	O
"%gs"	*(char)
,	O
"%?"	*(char)
,	O
"%?"	*(char)
,	O
}	O
;	O
static	O
const	O
char	O
*	O
att_index64	O
=	O
"%riz"	*(char)
;	O
static	O
const	O
char	O
*	O
att_index32	O
=	O
"%eiz"	*(char)
;	O
static	O
const	O
char	O
*	O
att_index16	O
[	O
]	O
=	O
{	O
"%bx,%si"	*(char)
,	O
"%bx,%di"	*(char)
,	O
"%bp,%si"	*(char)
,	O
"%bp,%di"	*(char)
,	O
"%si"	*(char)
,	O
"%di"	*(char)
,	O
"%bp"	*(char)
,	O
"%bx"	*(char)
}	O
;	O
static	O
const	O
char	O
*	O
*	O
names_mm	O
;	O
static	O
const	O
char	O
*	O
intel_names_mm	O
[	O
]	O
=	O
{	O
"mm0"	*(char)
,	O
"mm1"	*(char)
,	O
"mm2"	*(char)
,	O
"mm3"	*(char)
,	O
"mm4"	*(char)
,	O
"mm5"	*(char)
,	O
"mm6"	*(char)
,	O
"mm7"	*(char)
}	O
;	O
static	O
const	O
char	O
*	O
att_names_mm	O
[	O
]	O
=	O
{	O
"%mm0"	*(char)
,	O
"%mm1"	*(char)
,	O
"%mm2"	*(char)
,	O
"%mm3"	*(char)
,	O
"%mm4"	*(char)
,	O
"%mm5"	*(char)
,	O
"%mm6"	*(char)
,	O
"%mm7"	*(char)
}	O
;	O
static	O
const	O
char	O
*	O
intel_names_bnd	O
[	O
]	O
=	O
{	O
"bnd0"	*(char)
,	O
"bnd1"	*(char)
,	O
"bnd2"	*(char)
,	O
"bnd3"	*(char)
}	O
;	O
static	O
const	O
char	O
*	O
att_names_bnd	O
[	O
]	O
=	O
{	O
"%bnd0"	*(char)
,	O
"%bnd1"	*(char)
,	O
"%bnd2"	*(char)
,	O
"%bnd3"	*(char)
}	O
;	O
static	O
const	O
char	O
*	O
*	O
names_xmm	O
;	O
static	O
const	O
char	O
*	O
intel_names_xmm	O
[	O
]	O
=	O
{	O
"xmm0"	*(char)
,	O
"xmm1"	*(char)
,	O
"xmm2"	*(char)
,	O
"xmm3"	*(char)
,	O
"xmm4"	*(char)
,	O
"xmm5"	*(char)
,	O
"xmm6"	*(char)
,	O
"xmm7"	*(char)
,	O
"xmm8"	*(char)
,	O
"xmm9"	*(char)
,	O
"xmm10"	*(char)
,	O
"xmm11"	*(char)
,	O
"xmm12"	*(char)
,	O
"xmm13"	*(char)
,	O
"xmm14"	*(char)
,	O
"xmm15"	*(char)
,	O
"xmm16"	*(char)
,	O
"xmm17"	*(char)
,	O
"xmm18"	*(char)
,	O
"xmm19"	*(char)
,	O
"xmm20"	*(char)
,	O
"xmm21"	*(char)
,	O
"xmm22"	*(char)
,	O
"xmm23"	*(char)
,	O
"xmm24"	*(char)
,	O
"xmm25"	*(char)
,	O
"xmm26"	*(char)
,	O
"xmm27"	*(char)
,	O
"xmm28"	*(char)
,	O
"xmm29"	*(char)
,	O
"xmm30"	*(char)
,	O
"xmm31"	*(char)
}	O
;	O
static	O
const	O
char	O
*	O
att_names_xmm	O
[	O
]	O
=	O
{	O
"%xmm0"	*(char)
,	O
"%xmm1"	*(char)
,	O
"%xmm2"	*(char)
,	O
"%xmm3"	*(char)
,	O
"%xmm4"	*(char)
,	O
"%xmm5"	*(char)
,	O
"%xmm6"	*(char)
,	O
"%xmm7"	*(char)
,	O
"%xmm8"	*(char)
,	O
"%xmm9"	*(char)
,	O
"%xmm10"	*(char)
,	O
"%xmm11"	*(char)
,	O
"%xmm12"	*(char)
,	O
"%xmm13"	*(char)
,	O
"%xmm14"	*(char)
,	O
"%xmm15"	*(char)
,	O
"%xmm16"	*(char)
,	O
"%xmm17"	*(char)
,	O
"%xmm18"	*(char)
,	O
"%xmm19"	*(char)
,	O
"%xmm20"	*(char)
,	O
"%xmm21"	*(char)
,	O
"%xmm22"	*(char)
,	O
"%xmm23"	*(char)
,	O
"%xmm24"	*(char)
,	O
"%xmm25"	*(char)
,	O
"%xmm26"	*(char)
,	O
"%xmm27"	*(char)
,	O
"%xmm28"	*(char)
,	O
"%xmm29"	*(char)
,	O
"%xmm30"	*(char)
,	O
"%xmm31"	*(char)
}	O
;	O
static	O
const	O
char	O
*	O
*	O
names_ymm	O
;	O
static	O
const	O
char	O
*	O
intel_names_ymm	O
[	O
]	O
=	O
{	O
"ymm0"	*(char)
,	O
"ymm1"	*(char)
,	O
"ymm2"	*(char)
,	O
"ymm3"	*(char)
,	O
"ymm4"	*(char)
,	O
"ymm5"	*(char)
,	O
"ymm6"	*(char)
,	O
"ymm7"	*(char)
,	O
"ymm8"	*(char)
,	O
"ymm9"	*(char)
,	O
"ymm10"	*(char)
,	O
"ymm11"	*(char)
,	O
"ymm12"	*(char)
,	O
"ymm13"	*(char)
,	O
"ymm14"	*(char)
,	O
"ymm15"	*(char)
,	O
"ymm16"	*(char)
,	O
"ymm17"	*(char)
,	O
"ymm18"	*(char)
,	O
"ymm19"	*(char)
,	O
"ymm20"	*(char)
,	O
"ymm21"	*(char)
,	O
"ymm22"	*(char)
,	O
"ymm23"	*(char)
,	O
"ymm24"	*(char)
,	O
"ymm25"	*(char)
,	O
"ymm26"	*(char)
,	O
"ymm27"	*(char)
,	O
"ymm28"	*(char)
,	O
"ymm29"	*(char)
,	O
"ymm30"	*(char)
,	O
"ymm31"	*(char)
}	O
;	O
static	O
const	O
char	O
*	O
att_names_ymm	O
[	O
]	O
=	O
{	O
"%ymm0"	*(char)
,	O
"%ymm1"	*(char)
,	O
"%ymm2"	*(char)
,	O
"%ymm3"	*(char)
,	O
"%ymm4"	*(char)
,	O
"%ymm5"	*(char)
,	O
"%ymm6"	*(char)
,	O
"%ymm7"	*(char)
,	O
"%ymm8"	*(char)
,	O
"%ymm9"	*(char)
,	O
"%ymm10"	*(char)
,	O
"%ymm11"	*(char)
,	O
"%ymm12"	*(char)
,	O
"%ymm13"	*(char)
,	O
"%ymm14"	*(char)
,	O
"%ymm15"	*(char)
,	O
"%ymm16"	*(char)
,	O
"%ymm17"	*(char)
,	O
"%ymm18"	*(char)
,	O
"%ymm19"	*(char)
,	O
"%ymm20"	*(char)
,	O
"%ymm21"	*(char)
,	O
"%ymm22"	*(char)
,	O
"%ymm23"	*(char)
,	O
"%ymm24"	*(char)
,	O
"%ymm25"	*(char)
,	O
"%ymm26"	*(char)
,	O
"%ymm27"	*(char)
,	O
"%ymm28"	*(char)
,	O
"%ymm29"	*(char)
,	O
"%ymm30"	*(char)
,	O
"%ymm31"	*(char)
}	O
;	O
static	O
const	O
char	O
*	O
*	O
names_zmm	O
;	O
static	O
const	O
char	O
*	O
intel_names_zmm	O
[	O
]	O
=	O
{	O
"zmm0"	*(char)
,	O
"zmm1"	*(char)
,	O
"zmm2"	*(char)
,	O
"zmm3"	*(char)
,	O
"zmm4"	*(char)
,	O
"zmm5"	*(char)
,	O
"zmm6"	*(char)
,	O
"zmm7"	*(char)
,	O
"zmm8"	*(char)
,	O
"zmm9"	*(char)
,	O
"zmm10"	*(char)
,	O
"zmm11"	*(char)
,	O
"zmm12"	*(char)
,	O
"zmm13"	*(char)
,	O
"zmm14"	*(char)
,	O
"zmm15"	*(char)
,	O
"zmm16"	*(char)
,	O
"zmm17"	*(char)
,	O
"zmm18"	*(char)
,	O
"zmm19"	*(char)
,	O
"zmm20"	*(char)
,	O
"zmm21"	*(char)
,	O
"zmm22"	*(char)
,	O
"zmm23"	*(char)
,	O
"zmm24"	*(char)
,	O
"zmm25"	*(char)
,	O
"zmm26"	*(char)
,	O
"zmm27"	*(char)
,	O
"zmm28"	*(char)
,	O
"zmm29"	*(char)
,	O
"zmm30"	*(char)
,	O
"zmm31"	*(char)
}	O
;	O
static	O
const	O
char	O
*	O
att_names_zmm	O
[	O
]	O
=	O
{	O
"%zmm0"	*(char)
,	O
"%zmm1"	*(char)
,	O
"%zmm2"	*(char)
,	O
"%zmm3"	*(char)
,	O
"%zmm4"	*(char)
,	O
"%zmm5"	*(char)
,	O
"%zmm6"	*(char)
,	O
"%zmm7"	*(char)
,	O
"%zmm8"	*(char)
,	O
"%zmm9"	*(char)
,	O
"%zmm10"	*(char)
,	O
"%zmm11"	*(char)
,	O
"%zmm12"	*(char)
,	O
"%zmm13"	*(char)
,	O
"%zmm14"	*(char)
,	O
"%zmm15"	*(char)
,	O
"%zmm16"	*(char)
,	O
"%zmm17"	*(char)
,	O
"%zmm18"	*(char)
,	O
"%zmm19"	*(char)
,	O
"%zmm20"	*(char)
,	O
"%zmm21"	*(char)
,	O
"%zmm22"	*(char)
,	O
"%zmm23"	*(char)
,	O
"%zmm24"	*(char)
,	O
"%zmm25"	*(char)
,	O
"%zmm26"	*(char)
,	O
"%zmm27"	*(char)
,	O
"%zmm28"	*(char)
,	O
"%zmm29"	*(char)
,	O
"%zmm30"	*(char)
,	O
"%zmm31"	*(char)
}	O
;	O
static	O
const	O
char	O
*	O
*	O
names_mask	O
;	O
static	O
const	O
char	O
*	O
intel_names_mask	O
[	O
]	O
=	O
{	O
"k0"	*(char)
,	O
"k1"	*(char)
,	O
"k2"	*(char)
,	O
"k3"	*(char)
,	O
"k4"	*(char)
,	O
"k5"	*(char)
,	O
"k6"	*(char)
,	O
"k7"	*(char)
}	O
;	O
static	O
const	O
char	O
*	O
att_names_mask	O
[	O
]	O
=	O
{	O
"%k0"	*(char)
,	O
"%k1"	*(char)
,	O
"%k2"	*(char)
,	O
"%k3"	*(char)
,	O
"%k4"	*(char)
,	O
"%k5"	*(char)
,	O
"%k6"	*(char)
,	O
"%k7"	*(char)
}	O
;	O
static	O
const	O
char	O
*	O
names_rounding	O
[	O
]	O
=	O
{	O
"{rn-sae}"	*(char)
,	O
"{rd-sae}"	*(char)
,	O
"{ru-sae}"	*(char)
,	O
"{rz-sae}"	*(char)
}	O
;	O
static	O
const	O
struct	O
dis386	O
reg_table	O
[	O
]	O
[	O
8	int
]	O
=	O
{	O
{	O
{	O
"addA"	*(char)
,	O
{	O
Ebh1	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"orA"	*(char)
,	O
{	O
Ebh1	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"adcA"	*(char)
,	O
{	O
Ebh1	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"sbbA"	*(char)
,	O
{	O
Ebh1	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"andA"	*(char)
,	O
{	O
Ebh1	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"subA"	*(char)
,	O
{	O
Ebh1	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"xorA"	*(char)
,	O
{	O
Ebh1	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmpA"	*(char)
,	O
{	O
Eb	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"addQ"	*(char)
,	O
{	O
Evh1	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
"orQ"	*(char)
,	O
{	O
Evh1	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
"adcQ"	*(char)
,	O
{	O
Evh1	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
"sbbQ"	*(char)
,	O
{	O
Evh1	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
"andQ"	*(char)
,	O
{	O
Evh1	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
"subQ"	*(char)
,	O
{	O
Evh1	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
"xorQ"	*(char)
,	O
{	O
Evh1	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmpQ"	*(char)
,	O
{	O
Ev	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"addQ"	*(char)
,	O
{	O
Evh1	O
,	O
sIb	O
}	O
,	O
0	int
}	O
,	O
{	O
"orQ"	*(char)
,	O
{	O
Evh1	O
,	O
sIb	O
}	O
,	O
0	int
}	O
,	O
{	O
"adcQ"	*(char)
,	O
{	O
Evh1	O
,	O
sIb	O
}	O
,	O
0	int
}	O
,	O
{	O
"sbbQ"	*(char)
,	O
{	O
Evh1	O
,	O
sIb	O
}	O
,	O
0	int
}	O
,	O
{	O
"andQ"	*(char)
,	O
{	O
Evh1	O
,	O
sIb	O
}	O
,	O
0	int
}	O
,	O
{	O
"subQ"	*(char)
,	O
{	O
Evh1	O
,	O
sIb	O
}	O
,	O
0	int
}	O
,	O
{	O
"xorQ"	*(char)
,	O
{	O
Evh1	O
,	O
sIb	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmpQ"	*(char)
,	O
{	O
Ev	O
,	O
sIb	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"popU"	*(char)
,	O
{	O
stackEv	O
}	O
,	O
0	int
}	O
,	O
{	O
XOP_8F_TABLE	O
(	O
XOP_09	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
XOP_8F_TABLE	O
(	O
XOP_09	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"rolA"	*(char)
,	O
{	O
Eb	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"rorA"	*(char)
,	O
{	O
Eb	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"rclA"	*(char)
,	O
{	O
Eb	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"rcrA"	*(char)
,	O
{	O
Eb	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"shlA"	*(char)
,	O
{	O
Eb	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"shrA"	*(char)
,	O
{	O
Eb	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"shlA"	*(char)
,	O
{	O
Eb	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"sarA"	*(char)
,	O
{	O
Eb	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"rolQ"	*(char)
,	O
{	O
Ev	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"rorQ"	*(char)
,	O
{	O
Ev	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"rclQ"	*(char)
,	O
{	O
Ev	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"rcrQ"	*(char)
,	O
{	O
Ev	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"shlQ"	*(char)
,	O
{	O
Ev	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"shrQ"	*(char)
,	O
{	O
Ev	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"shlQ"	*(char)
,	O
{	O
Ev	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"sarQ"	*(char)
,	O
{	O
Ev	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"movA"	*(char)
,	O
{	O
Ebh3	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_C6_REG_7	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"movQ"	*(char)
,	O
{	O
Evh3	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_C7_REG_7	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"rolA"	*(char)
,	O
{	O
Eb	O
,	O
I1	O
}	O
,	O
0	int
}	O
,	O
{	O
"rorA"	*(char)
,	O
{	O
Eb	O
,	O
I1	O
}	O
,	O
0	int
}	O
,	O
{	O
"rclA"	*(char)
,	O
{	O
Eb	O
,	O
I1	O
}	O
,	O
0	int
}	O
,	O
{	O
"rcrA"	*(char)
,	O
{	O
Eb	O
,	O
I1	O
}	O
,	O
0	int
}	O
,	O
{	O
"shlA"	*(char)
,	O
{	O
Eb	O
,	O
I1	O
}	O
,	O
0	int
}	O
,	O
{	O
"shrA"	*(char)
,	O
{	O
Eb	O
,	O
I1	O
}	O
,	O
0	int
}	O
,	O
{	O
"shlA"	*(char)
,	O
{	O
Eb	O
,	O
I1	O
}	O
,	O
0	int
}	O
,	O
{	O
"sarA"	*(char)
,	O
{	O
Eb	O
,	O
I1	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"rolQ"	*(char)
,	O
{	O
Ev	O
,	O
I1	O
}	O
,	O
0	int
}	O
,	O
{	O
"rorQ"	*(char)
,	O
{	O
Ev	O
,	O
I1	O
}	O
,	O
0	int
}	O
,	O
{	O
"rclQ"	*(char)
,	O
{	O
Ev	O
,	O
I1	O
}	O
,	O
0	int
}	O
,	O
{	O
"rcrQ"	*(char)
,	O
{	O
Ev	O
,	O
I1	O
}	O
,	O
0	int
}	O
,	O
{	O
"shlQ"	*(char)
,	O
{	O
Ev	O
,	O
I1	O
}	O
,	O
0	int
}	O
,	O
{	O
"shrQ"	*(char)
,	O
{	O
Ev	O
,	O
I1	O
}	O
,	O
0	int
}	O
,	O
{	O
"shlQ"	*(char)
,	O
{	O
Ev	O
,	O
I1	O
}	O
,	O
0	int
}	O
,	O
{	O
"sarQ"	*(char)
,	O
{	O
Ev	O
,	O
I1	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"rolA"	*(char)
,	O
{	O
Eb	O
,	O
CL	O
}	O
,	O
0	int
}	O
,	O
{	O
"rorA"	*(char)
,	O
{	O
Eb	O
,	O
CL	O
}	O
,	O
0	int
}	O
,	O
{	O
"rclA"	*(char)
,	O
{	O
Eb	O
,	O
CL	O
}	O
,	O
0	int
}	O
,	O
{	O
"rcrA"	*(char)
,	O
{	O
Eb	O
,	O
CL	O
}	O
,	O
0	int
}	O
,	O
{	O
"shlA"	*(char)
,	O
{	O
Eb	O
,	O
CL	O
}	O
,	O
0	int
}	O
,	O
{	O
"shrA"	*(char)
,	O
{	O
Eb	O
,	O
CL	O
}	O
,	O
0	int
}	O
,	O
{	O
"shlA"	*(char)
,	O
{	O
Eb	O
,	O
CL	O
}	O
,	O
0	int
}	O
,	O
{	O
"sarA"	*(char)
,	O
{	O
Eb	O
,	O
CL	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"rolQ"	*(char)
,	O
{	O
Ev	O
,	O
CL	O
}	O
,	O
0	int
}	O
,	O
{	O
"rorQ"	*(char)
,	O
{	O
Ev	O
,	O
CL	O
}	O
,	O
0	int
}	O
,	O
{	O
"rclQ"	*(char)
,	O
{	O
Ev	O
,	O
CL	O
}	O
,	O
0	int
}	O
,	O
{	O
"rcrQ"	*(char)
,	O
{	O
Ev	O
,	O
CL	O
}	O
,	O
0	int
}	O
,	O
{	O
"shlQ"	*(char)
,	O
{	O
Ev	O
,	O
CL	O
}	O
,	O
0	int
}	O
,	O
{	O
"shrQ"	*(char)
,	O
{	O
Ev	O
,	O
CL	O
}	O
,	O
0	int
}	O
,	O
{	O
"shlQ"	*(char)
,	O
{	O
Ev	O
,	O
CL	O
}	O
,	O
0	int
}	O
,	O
{	O
"sarQ"	*(char)
,	O
{	O
Ev	O
,	O
CL	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"testA"	*(char)
,	O
{	O
Eb	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"testA"	*(char)
,	O
{	O
Eb	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"notA"	*(char)
,	O
{	O
Ebh1	O
}	O
,	O
0	int
}	O
,	O
{	O
"negA"	*(char)
,	O
{	O
Ebh1	O
}	O
,	O
0	int
}	O
,	O
{	O
"mulA"	*(char)
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"imulA"	*(char)
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"divA"	*(char)
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"idivA"	*(char)
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"testQ"	*(char)
,	O
{	O
Ev	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
"testQ"	*(char)
,	O
{	O
Ev	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
"notQ"	*(char)
,	O
{	O
Evh1	O
}	O
,	O
0	int
}	O
,	O
{	O
"negQ"	*(char)
,	O
{	O
Evh1	O
}	O
,	O
0	int
}	O
,	O
{	O
"mulQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"imulQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"divQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"idivQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"incA"	*(char)
,	O
{	O
Ebh1	O
}	O
,	O
0	int
}	O
,	O
{	O
"decA"	*(char)
,	O
{	O
Ebh1	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"incQ"	*(char)
,	O
{	O
Evh1	O
}	O
,	O
0	int
}	O
,	O
{	O
"decQ"	*(char)
,	O
{	O
Evh1	O
}	O
,	O
0	int
}	O
,	O
{	O
"call{&|}"	*(char)
,	O
{	O
NOTRACK	O
,	O
indirEv	O
,	O
BND	O
}	O
,	O
0	int
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_FF_REG_3	O
)	O
}	O
,	O
{	O
"jmp{&|}"	*(char)
,	O
{	O
NOTRACK	O
,	O
indirEv	O
,	O
BND	O
}	O
,	O
0	int
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_FF_REG_5	O
)	O
}	O
,	O
{	O
"pushU"	*(char)
,	O
{	O
stackEv	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
{	O
{	O
"sldtD"	*(char)
,	O
{	O
Sv	O
}	O
,	O
0	int
}	O
,	O
{	O
"strD"	*(char)
,	O
{	O
Sv	O
}	O
,	O
0	int
}	O
,	O
{	O
"lldt"	*(char)
,	O
{	O
Ew	O
}	O
,	O
0	int
}	O
,	O
{	O
"ltr"	*(char)
,	O
{	O
Ew	O
}	O
,	O
0	int
}	O
,	O
{	O
"verr"	*(char)
,	O
{	O
Ew	O
}	O
,	O
0	int
}	O
,	O
{	O
"verw"	*(char)
,	O
{	O
Ew	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_0F01_REG_0	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F01_REG_1	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F01_REG_2	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F01_REG_3	O
)	O
}	O
,	O
{	O
"smswD"	*(char)
,	O
{	O
Sv	O
}	O
,	O
0	int
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F01_REG_5	O
)	O
}	O
,	O
{	O
"lmsw"	*(char)
,	O
{	O
Ew	O
}	O
,	O
0	int
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F01_REG_7	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"prefetch"	*(char)
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
{	O
"prefetchw"	*(char)
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
{	O
"prefetchwt1"	*(char)
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
{	O
"prefetch"	*(char)
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
{	O
"prefetch"	*(char)
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
{	O
"prefetch"	*(char)
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
{	O
"prefetch"	*(char)
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
{	O
"prefetch"	*(char)
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_0F18_REG_0	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F18_REG_1	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F18_REG_2	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F18_REG_3	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F18_REG_4	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F18_REG_5	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F18_REG_6	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F18_REG_7	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"cldemote"	*(char)
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
{	O
"nopQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"nopQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"nopQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"nopQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"nopQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"nopQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"nopQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"nopQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"rdsspK"	*(char)
,	O
{	O
Rdq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"nopQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"nopQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"nopQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"nopQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"nopQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
RM_TABLE	O
(	O
RM_0F1E_P_1_MOD_3_REG_7	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F71_REG_2	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F71_REG_4	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F71_REG_6	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F72_REG_2	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F72_REG_4	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F72_REG_6	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F73_REG_2	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F73_REG_3	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F73_REG_6	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F73_REG_7	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"montmul"	*(char)
,	O
{	O
{	O
OP_0f07	O
,	O
0	int
}	O
}	O
,	O
0	int
}	O
,	O
{	O
"xsha1"	*(char)
,	O
{	O
{	O
OP_0f07	O
,	O
0	int
}	O
}	O
,	O
0	int
}	O
,	O
{	O
"xsha256"	*(char)
,	O
{	O
{	O
OP_0f07	O
,	O
0	int
}	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"xstore-rng"	*(char)
,	O
{	O
{	O
OP_0f07	O
,	O
0	int
}	O
}	O
,	O
0	int
}	O
,	O
{	O
"xcrypt-ecb"	*(char)
,	O
{	O
{	O
OP_0f07	O
,	O
0	int
}	O
}	O
,	O
0	int
}	O
,	O
{	O
"xcrypt-cbc"	*(char)
,	O
{	O
{	O
OP_0f07	O
,	O
0	int
}	O
}	O
,	O
0	int
}	O
,	O
{	O
"xcrypt-ctr"	*(char)
,	O
{	O
{	O
OP_0f07	O
,	O
0	int
}	O
}	O
,	O
0	int
}	O
,	O
{	O
"xcrypt-cfb"	*(char)
,	O
{	O
{	O
OP_0f07	O
,	O
0	int
}	O
}	O
,	O
0	int
}	O
,	O
{	O
"xcrypt-ofb"	*(char)
,	O
{	O
{	O
OP_0f07	O
,	O
0	int
}	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_0FAE_REG_0	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FAE_REG_1	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FAE_REG_2	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FAE_REG_3	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FAE_REG_4	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FAE_REG_5	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FAE_REG_6	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FAE_REG_7	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"btQ"	*(char)
,	O
{	O
Ev	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"btsQ"	*(char)
,	O
{	O
Evh1	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"btrQ"	*(char)
,	O
{	O
Evh1	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"btcQ"	*(char)
,	O
{	O
Evh1	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"cmpxchg8b"	*(char)
,	O
{	O
{	O
CMPXCHG8B_Fixup	O
,	O
q_mode	O
}	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FC7_REG_3	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FC7_REG_4	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FC7_REG_5	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FC7_REG_6	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FC7_REG_7	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F71_REG_2	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F71_REG_4	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F71_REG_6	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F72_REG_2	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F72_REG_4	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F72_REG_6	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F73_REG_2	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F73_REG_3	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F73_REG_6	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F73_REG_7	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0FAE_REG_2	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0FAE_REG_3	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38F3_REG_1	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38F3_REG_2	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38F3_REG_3	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"llwpcb"	*(char)
,	O
{	O
{	O
OP_LWPCB_E	O
,	O
0	int
}	O
}	O
,	O
0	int
}	O
,	O
{	O
"slwpcb"	*(char)
,	O
{	O
{	O
OP_LWPCB_E	O
,	O
0	int
}	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"lwpins"	*(char)
,	O
{	O
{	O
OP_LWP_E	O
,	O
0	int
}	O
,	O
Ed	O
,	O
Id	O
}	O
,	O
0	int
}	O
,	O
{	O
"lwpval"	*(char)
,	O
{	O
{	O
OP_LWP_E	O
,	O
0	int
}	O
,	O
Ed	O
,	O
Id	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"blcfill"	*(char)
,	O
{	O
{	O
OP_LWP_E	O
,	O
0	int
}	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
{	O
"blsfill"	*(char)
,	O
{	O
{	O
OP_LWP_E	O
,	O
0	int
}	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
{	O
"blcs"	*(char)
,	O
{	O
{	O
OP_LWP_E	O
,	O
0	int
}	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
{	O
"tzmsk"	*(char)
,	O
{	O
{	O
OP_LWP_E	O
,	O
0	int
}	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
{	O
"blcic"	*(char)
,	O
{	O
{	O
OP_LWP_E	O
,	O
0	int
}	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
{	O
"blsic"	*(char)
,	O
{	O
{	O
OP_LWP_E	O
,	O
0	int
}	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
{	O
"t1mskc"	*(char)
,	O
{	O
{	O
OP_LWP_E	O
,	O
0	int
}	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"blcmsk"	*(char)
,	O
{	O
{	O
OP_LWP_E	O
,	O
0	int
}	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"blci"	*(char)
,	O
{	O
{	O
OP_LWP_E	O
,	O
0	int
}	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
}	O
;	O
static	O
const	O
struct	O
dis386	O
prefix_table	O
[	O
]	O
[	O
4	int
]	O
=	O
{	O
{	O
{	O
"xchgS"	*(char)
,	O
{	O
{	O
NOP_Fixup1	O
,	O
eAX_reg	O
}	O
,	O
{	O
NOP_Fixup2	O
,	O
eAX_reg	O
}	O
}	O
,	O
0	int
}	O
,	O
{	O
"pause"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"xchgS"	*(char)
,	O
{	O
{	O
NOP_Fixup1	O
,	O
eAX_reg	O
}	O
,	O
{	O
NOP_Fixup2	O
,	O
eAX_reg	O
}	O
}	O
,	O
0	int
}	O
,	O
{	O
NULL	O
,	O
{	O
{	O
NULL	O
,	O
0	int
}	O
}	O
,	O
PREFIX_IGNORED	O
}	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"rstorssp"	*(char)
,	O
{	O
Mq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"setssbsy"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"saveprevssp"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"monitorx"	*(char)
,	O
{	O
{	O
OP_Monitor	O
,	O
0	int
}	O
}	O
,	O
0	int
}	O
,	O
{	O
"mcommit"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"mwaitx"	*(char)
,	O
{	O
{	O
OP_Mwait	O
,	O
eBX_reg	O
}	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"wbinvd"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"wbnoinvd"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"movups"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"movss"	*(char)
,	O
{	O
XM	O
,	O
EXd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"movupd"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"movsd"	*(char)
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"movups"	*(char)
,	O
{	O
EXxS	O
,	O
XM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"movss"	*(char)
,	O
{	O
EXdS	O
,	O
XM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"movupd"	*(char)
,	O
{	O
EXxS	O
,	O
XM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"movsd"	*(char)
,	O
{	O
EXqS	O
,	O
XM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_0F12_PREFIX_0	O
)	O
}	O
,	O
{	O
"movsldup"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"movlpd"	*(char)
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"movddup"	*(char)
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_0F16_PREFIX_0	O
)	O
}	O
,	O
{	O
"movshdup"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"movhpd"	*(char)
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_0F1A_PREFIX_0	O
)	O
}	O
,	O
{	O
"bndcl"	*(char)
,	O
{	O
Gbnd	O
,	O
Ev_bnd	O
}	O
,	O
0	int
}	O
,	O
{	O
"bndmov"	*(char)
,	O
{	O
Gbnd	O
,	O
Ebnd	O
}	O
,	O
0	int
}	O
,	O
{	O
"bndcu"	*(char)
,	O
{	O
Gbnd	O
,	O
Ev_bnd	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_0F1B_PREFIX_0	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F1B_PREFIX_1	O
)	O
}	O
,	O
{	O
"bndmov"	*(char)
,	O
{	O
EbndS	O
,	O
Gbnd	O
}	O
,	O
0	int
}	O
,	O
{	O
"bndcn"	*(char)
,	O
{	O
Gbnd	O
,	O
Ev_bnd	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_0F1C_PREFIX_0	O
)	O
}	O
,	O
{	O
"nopQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"nopQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"nopQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"nopQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F1E_PREFIX_1	O
)	O
}	O
,	O
{	O
"nopQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"nopQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"cvtpi2ps"	*(char)
,	O
{	O
XM	O
,	O
EMCq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cvtsi2ss%LQ"	*(char)
,	O
{	O
XM	O
,	O
Edq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cvtpi2pd"	*(char)
,	O
{	O
XM	O
,	O
EMCq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cvtsi2sd%LQ"	*(char)
,	O
{	O
XM	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_0F2B_PREFIX_0	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F2B_PREFIX_1	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F2B_PREFIX_2	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F2B_PREFIX_3	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"cvttps2pi"	*(char)
,	O
{	O
MXC	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cvttss2si"	*(char)
,	O
{	O
Gdq	O
,	O
EXd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cvttpd2pi"	*(char)
,	O
{	O
MXC	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cvttsd2si"	*(char)
,	O
{	O
Gdq	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"cvtps2pi"	*(char)
,	O
{	O
MXC	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cvtss2si"	*(char)
,	O
{	O
Gdq	O
,	O
EXd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cvtpd2pi"	*(char)
,	O
{	O
MXC	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cvtsd2si"	*(char)
,	O
{	O
Gdq	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"ucomiss"	*(char)
,	O
{	O
XM	O
,	O
EXd	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"ucomisd"	*(char)
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"comiss"	*(char)
,	O
{	O
XM	O
,	O
EXd	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"comisd"	*(char)
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"sqrtps"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"sqrtss"	*(char)
,	O
{	O
XM	O
,	O
EXd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"sqrtpd"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"sqrtsd"	*(char)
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"rsqrtps"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"rsqrtss"	*(char)
,	O
{	O
XM	O
,	O
EXd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"rcpps"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"rcpss"	*(char)
,	O
{	O
XM	O
,	O
EXd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"addps"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"addss"	*(char)
,	O
{	O
XM	O
,	O
EXd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"addpd"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"addsd"	*(char)
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"mulps"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"mulss"	*(char)
,	O
{	O
XM	O
,	O
EXd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"mulpd"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"mulsd"	*(char)
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"cvtps2pd"	*(char)
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cvtss2sd"	*(char)
,	O
{	O
XM	O
,	O
EXd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cvtpd2ps"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cvtsd2ss"	*(char)
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"cvtdq2ps"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cvttps2dq"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cvtps2dq"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"subps"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"subss"	*(char)
,	O
{	O
XM	O
,	O
EXd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"subpd"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"subsd"	*(char)
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"minps"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"minss"	*(char)
,	O
{	O
XM	O
,	O
EXd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"minpd"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"minsd"	*(char)
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"divps"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"divss"	*(char)
,	O
{	O
XM	O
,	O
EXd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"divpd"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"divsd"	*(char)
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"maxps"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"maxss"	*(char)
,	O
{	O
XM	O
,	O
EXd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"maxpd"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"maxsd"	*(char)
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"punpcklbw"	*(char)
,	O
{	O
MX	O
,	O
EMd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"punpcklbw"	*(char)
,	O
{	O
MX	O
,	O
EMx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"punpcklwd"	*(char)
,	O
{	O
MX	O
,	O
EMd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"punpcklwd"	*(char)
,	O
{	O
MX	O
,	O
EMx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"punpckldq"	*(char)
,	O
{	O
MX	O
,	O
EMd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"punpckldq"	*(char)
,	O
{	O
MX	O
,	O
EMx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"punpcklqdq"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"punpckhqdq"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"movq"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"movdqu"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"movdqa"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"pshufw"	*(char)
,	O
{	O
MX	O
,	O
EM	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pshufhw"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pshufd"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pshuflw"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"psrldq"	*(char)
,	O
{	O
XS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pslldq"	*(char)
,	O
{	O
XS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmread"	*(char)
,	O
{	O
Em	O
,	O
Gm	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"extrq"	*(char)
,	O
{	O
XS	O
,	O
Ib	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"insertq"	*(char)
,	O
{	O
XM	O
,	O
XS	O
,	O
Ib	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmwrite"	*(char)
,	O
{	O
Gm	O
,	O
Em	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"extrq"	*(char)
,	O
{	O
XM	O
,	O
XS	O
}	O
,	O
0	int
}	O
,	O
{	O
"insertq"	*(char)
,	O
{	O
XM	O
,	O
XS	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"haddpd"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"haddps"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"hsubpd"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"hsubps"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"movK"	*(char)
,	O
{	O
Edq	O
,	O
MX	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"movq"	*(char)
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"movK"	*(char)
,	O
{	O
Edq	O
,	O
XM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"movq"	*(char)
,	O
{	O
EMS	O
,	O
MX	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"movdqu"	*(char)
,	O
{	O
EXxS	O
,	O
XM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"movdqa"	*(char)
,	O
{	O
EXxS	O
,	O
XM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"rdfsbase"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"rdgsbase"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"wrfsbase"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"wrgsbase"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"xsave"	*(char)
,	O
{	O
FXSAVE	O
}	O
,	O
0	int
}	O
,	O
{	O
"ptwrite%LQ"	*(char)
,	O
{	O
Edq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"ptwrite%LQ"	*(char)
,	O
{	O
Edq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"xrstor"	*(char)
,	O
{	O
FXSAVE	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"lfence"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"incsspK"	*(char)
,	O
{	O
Rdq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"xsaveopt"	*(char)
,	O
{	O
FXSAVE	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"clrssbsy"	*(char)
,	O
{	O
Mq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"clwb"	*(char)
,	O
{	O
Mb	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
RM_TABLE	O
(	O
RM_0FAE_REG_6_MOD_3_P_0	O
)	O
}	O
,	O
{	O
"umonitor"	*(char)
,	O
{	O
Eva	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"tpause"	*(char)
,	O
{	O
Edq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"umwait"	*(char)
,	O
{	O
Edq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"clflush"	*(char)
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"clflushopt"	*(char)
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"popcntS"	*(char)
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"bsfS"	*(char)
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"tzcntS"	*(char)
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"bsfS"	*(char)
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"bsrS"	*(char)
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"lzcntS"	*(char)
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"bsrS"	*(char)
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"cmpps"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
,	O
CMP	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cmpss"	*(char)
,	O
{	O
XM	O
,	O
EXd	O
,	O
CMP	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cmppd"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
,	O
CMP	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cmpsd"	*(char)
,	O
{	O
XM	O
,	O
EXq	O
,	O
CMP	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"movntiS"	*(char)
,	O
{	O
Edq	O
,	O
Gdq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"vmptrld"	*(char)
,	O
{	O
Mq	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmxon"	*(char)
,	O
{	O
Mq	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmclear"	*(char)
,	O
{	O
Mq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"rdrand"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"rdrand"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
}	O
,	O
{	O
{	O
"rdseed"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"rdpid"	*(char)
,	O
{	O
Em	O
}	O
,	O
0	int
}	O
,	O
{	O
"rdseed"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"addsubpd"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"addsubps"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"movq2dq"	*(char)
,	O
{	O
XM	O
,	O
MS	O
}	O
,	O
0	int
}	O
,	O
{	O
"movq"	*(char)
,	O
{	O
EXqS	O
,	O
XM	O
}	O
,	O
0	int
}	O
,	O
{	O
"movdq2q"	*(char)
,	O
{	O
MX	O
,	O
XS	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"cvtdq2pd"	*(char)
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cvttpd2dq"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cvtpd2dq"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"movntq"	*(char)
,	O
{	O
Mq	O
,	O
MX	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FE7_PREFIX_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FF0_PREFIX_3	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"maskmovq"	*(char)
,	O
{	O
MX	O
,	O
MS	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"maskmovdqu"	*(char)
,	O
{	O
XM	O
,	O
XS	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pblendvb"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
,	O
XMM0	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"blendvps"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
,	O
XMM0	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"blendvpd"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
,	O
XMM0	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"ptest"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmovsxbw"	*(char)
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmovsxbd"	*(char)
,	O
{	O
XM	O
,	O
EXd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmovsxbq"	*(char)
,	O
{	O
XM	O
,	O
EXw	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmovsxwd"	*(char)
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmovsxwq"	*(char)
,	O
{	O
XM	O
,	O
EXd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmovsxdq"	*(char)
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmuldq"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pcmpeqq"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F382A_PREFIX_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"packusdw"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmovzxbw"	*(char)
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmovzxbd"	*(char)
,	O
{	O
XM	O
,	O
EXd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmovzxbq"	*(char)
,	O
{	O
XM	O
,	O
EXw	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmovzxwd"	*(char)
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmovzxwq"	*(char)
,	O
{	O
XM	O
,	O
EXd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmovzxdq"	*(char)
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pcmpgtq"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pminsb"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pminsd"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pminuw"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pminud"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmaxsb"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmaxsd"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmaxuw"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmaxud"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmulld"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"phminposuw"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"invept"	*(char)
,	O
{	O
Gm	O
,	O
Mo	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"invvpid"	*(char)
,	O
{	O
Gm	O
,	O
Mo	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"invpcid"	*(char)
,	O
{	O
Gm	O
,	O
M	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"sha1nexte"	*(char)
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"sha1msg1"	*(char)
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"sha1msg2"	*(char)
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"sha256rnds2"	*(char)
,	O
{	O
XM	O
,	O
EXxmm	O
,	O
XMM0	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"sha256msg1"	*(char)
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"sha256msg2"	*(char)
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"gf2p8mulb"	*(char)
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"aesimc"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"aesenc"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"aesenclast"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"aesdec"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"aesdeclast"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"movbeS"	*(char)
,	O
{	O
Gv	O
,	O
{	O
MOVBE_Fixup	O
,	O
v_mode	O
}	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"movbeS"	*(char)
,	O
{	O
Gv	O
,	O
{	O
MOVBE_Fixup	O
,	O
v_mode	O
}	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"crc32"	*(char)
,	O
{	O
Gdq	O
,	O
{	O
CRC32_Fixup	O
,	O
b_mode	O
}	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"movbeS"	*(char)
,	O
{	O
{	O
MOVBE_Fixup	O
,	O
v_mode	O
}	O
,	O
Gv	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"movbeS"	*(char)
,	O
{	O
{	O
MOVBE_Fixup	O
,	O
v_mode	O
}	O
,	O
Gv	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"crc32"	*(char)
,	O
{	O
Gdq	O
,	O
{	O
CRC32_Fixup	O
,	O
v_mode	O
}	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F38F5_PREFIX_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_0F38F6_PREFIX_0	O
)	O
}	O
,	O
{	O
"adoxS"	*(char)
,	O
{	O
Gdq	O
,	O
Edq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"adcxS"	*(char)
,	O
{	O
Gdq	O
,	O
Edq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F38F8_PREFIX_1	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F38F8_PREFIX_2	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F38F8_PREFIX_3	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_0F38F9_PREFIX_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"roundps"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"roundpd"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"roundss"	*(char)
,	O
{	O
XM	O
,	O
EXd	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"roundsd"	*(char)
,	O
{	O
XM	O
,	O
EXq	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"blendps"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"blendpd"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pblendw"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pextrb"	*(char)
,	O
{	O
Edqb	O
,	O
XM	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pextrw"	*(char)
,	O
{	O
Edqw	O
,	O
XM	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pextrK"	*(char)
,	O
{	O
Edq	O
,	O
XM	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"extractps"	*(char)
,	O
{	O
Edqd	O
,	O
XM	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pinsrb"	*(char)
,	O
{	O
XM	O
,	O
Edqb	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"insertps"	*(char)
,	O
{	O
XM	O
,	O
EXd	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pinsrK"	*(char)
,	O
{	O
XM	O
,	O
Edq	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"dpps"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"dppd"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"mpsadbw"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pclmulqdq"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
,	O
PCLMUL	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pcmpestrm"	*(char)
,	O
{	O
XM	O
,	O
{	O
PCMPESTR_Fixup	O
,	O
x_mode	O
}	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pcmpestri"	*(char)
,	O
{	O
XM	O
,	O
{	O
PCMPESTR_Fixup	O
,	O
x_mode	O
}	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pcmpistrm"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pcmpistri"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"sha1rnds4"	*(char)
,	O
{	O
XM	O
,	O
EXxmm	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"gf2p8affineqb"	*(char)
,	O
{	O
XM	O
,	O
EXxmm	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"gf2p8affineinvqb"	*(char)
,	O
{	O
XM	O
,	O
EXxmm	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"aeskeygenassist"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"vmovups"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmovss"	*(char)
,	O
{	O
XMVexScalar	O
,	O
VexScalar	O
,	O
EXdScalar	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmovupd"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmovsd"	*(char)
,	O
{	O
XMVexScalar	O
,	O
VexScalar	O
,	O
EXqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmovups"	*(char)
,	O
{	O
EXxS	O
,	O
XM	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmovss"	*(char)
,	O
{	O
EXdVexScalarS	O
,	O
VexScalar	O
,	O
XMScalar	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmovupd"	*(char)
,	O
{	O
EXxS	O
,	O
XM	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmovsd"	*(char)
,	O
{	O
EXqVexScalarS	O
,	O
VexScalar	O
,	O
XMScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F12_PREFIX_0	O
)	O
}	O
,	O
{	O
"vmovsldup"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F12_P_2	O
)	O
}	O
,	O
{	O
"vmovddup"	*(char)
,	O
{	O
XM	O
,	O
EXymmq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F16_PREFIX_0	O
)	O
}	O
,	O
{	O
"vmovshdup"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F16_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vcvtsi2ss%LQ"	*(char)
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vcvtsi2sd%LQ"	*(char)
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vcvttss2si"	*(char)
,	O
{	O
Gdq	O
,	O
EXdScalar	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vcvttsd2si"	*(char)
,	O
{	O
Gdq	O
,	O
EXqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vcvtss2si"	*(char)
,	O
{	O
Gdq	O
,	O
EXdScalar	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vcvtsd2si"	*(char)
,	O
{	O
Gdq	O
,	O
EXqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vucomiss"	*(char)
,	O
{	O
XMScalar	O
,	O
EXdScalar	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vucomisd"	*(char)
,	O
{	O
XMScalar	O
,	O
EXqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vcomiss"	*(char)
,	O
{	O
XMScalar	O
,	O
EXdScalar	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vcomisd"	*(char)
,	O
{	O
XMScalar	O
,	O
EXqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F41_P_0	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F41_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F42_P_0	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F42_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F44_P_0	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F44_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F45_P_0	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F45_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F46_P_0	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F46_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F47_P_0	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F47_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F4A_P_0	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F4A_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F4B_P_0	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F4B_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"vsqrtps"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vsqrtss"	*(char)
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXdScalar	O
}	O
,	O
0	int
}	O
,	O
{	O
"vsqrtpd"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vsqrtsd"	*(char)
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vrsqrtps"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vrsqrtss"	*(char)
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXdScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vrcpps"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vrcpss"	*(char)
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXdScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vaddps"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vaddss"	*(char)
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXdScalar	O
}	O
,	O
0	int
}	O
,	O
{	O
"vaddpd"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vaddsd"	*(char)
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmulps"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmulss"	*(char)
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXdScalar	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmulpd"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmulsd"	*(char)
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vcvtps2pd"	*(char)
,	O
{	O
XM	O
,	O
EXxmmq	O
}	O
,	O
0	int
}	O
,	O
{	O
"vcvtss2sd"	*(char)
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXdScalar	O
}	O
,	O
0	int
}	O
,	O
{	O
"vcvtpd2ps%XY"	*(char)
,	O
{	O
XMM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vcvtsd2ss"	*(char)
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vcvtdq2ps"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vcvttps2dq"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vcvtps2dq"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vsubps"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vsubss"	*(char)
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXdScalar	O
}	O
,	O
0	int
}	O
,	O
{	O
"vsubpd"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vsubsd"	*(char)
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vminps"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vminss"	*(char)
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXdScalar	O
}	O
,	O
0	int
}	O
,	O
{	O
"vminpd"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vminsd"	*(char)
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vdivps"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vdivss"	*(char)
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXdScalar	O
}	O
,	O
0	int
}	O
,	O
{	O
"vdivpd"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vdivsd"	*(char)
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmaxps"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmaxss"	*(char)
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXdScalar	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmaxpd"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmaxsd"	*(char)
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpunpcklbw"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpunpcklwd"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpunpckldq"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpacksswb"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpcmpgtb"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpcmpgtw"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpcmpgtd"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpackuswb"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpunpckhbw"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpunpckhwd"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpunpckhdq"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpackssdw"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpunpcklqdq"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpunpckhqdq"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F6E_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vmovdqu"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmovdqa"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpshufhw"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpshufd"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpshuflw"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsrlw"	*(char)
,	O
{	O
Vex	O
,	O
XS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsraw"	*(char)
,	O
{	O
Vex	O
,	O
XS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsllw"	*(char)
,	O
{	O
Vex	O
,	O
XS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsrld"	*(char)
,	O
{	O
Vex	O
,	O
XS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsrad"	*(char)
,	O
{	O
Vex	O
,	O
XS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpslld"	*(char)
,	O
{	O
Vex	O
,	O
XS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsrlq"	*(char)
,	O
{	O
Vex	O
,	O
XS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsrldq"	*(char)
,	O
{	O
Vex	O
,	O
XS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsllq"	*(char)
,	O
{	O
Vex	O
,	O
XS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpslldq"	*(char)
,	O
{	O
Vex	O
,	O
XS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpcmpeqb"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpcmpeqw"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpcmpeqd"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F77_P_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vhaddpd"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vhaddps"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vhsubpd"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vhsubps"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F7E_P_1	O
)	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F7E_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vmovdqu"	*(char)
,	O
{	O
EXxS	O
,	O
XM	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmovdqa"	*(char)
,	O
{	O
EXxS	O
,	O
XM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F90_P_0	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F90_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F91_P_0	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F91_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F92_P_0	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F92_P_2	O
)	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F92_P_3	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F93_P_0	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F93_P_2	O
)	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F93_P_3	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F98_P_0	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F98_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F99_P_0	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F99_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"vcmpps"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
,	O
VCMP	O
}	O
,	O
0	int
}	O
,	O
{	O
"vcmpss"	*(char)
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXdScalar	O
,	O
VCMP	O
}	O
,	O
0	int
}	O
,	O
{	O
"vcmppd"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
,	O
VCMP	O
}	O
,	O
0	int
}	O
,	O
{	O
"vcmpsd"	*(char)
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXqScalar	O
,	O
VCMP	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0FC4_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0FC5_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vaddsubpd"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vaddsubps"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsrlw"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsrld"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsrlq"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpaddq"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmullw"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0FD6_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0FD7_PREFIX_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsubusb"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsubusw"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpminub"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpand"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpaddusb"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpaddusw"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmaxub"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpandn"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpavgb"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsraw"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsrad"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpavgw"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmulhuw"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmulhw"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vcvtdq2pd"	*(char)
,	O
{	O
XM	O
,	O
EXxmmq	O
}	O
,	O
0	int
}	O
,	O
{	O
"vcvttpd2dq%XY"	*(char)
,	O
{	O
XMM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vcvtpd2dq%XY"	*(char)
,	O
{	O
XMM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0FE7_PREFIX_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsubsb"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsubsw"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpminsw"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpor"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpaddsb"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpaddsw"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmaxsw"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpxor"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0FF0_PREFIX_3	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsllw"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpslld"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsllq"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmuludq"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmaddwd"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsadbw"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0FF7_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsubb"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsubw"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsubd"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsubq"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpaddb"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpaddw"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpaddd"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpshufb"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vphaddw"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vphaddd"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vphaddsw"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmaddubsw"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vphsubw"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vphsubd"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vphsubsw"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsignb"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsignw"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsignd"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmulhrsw"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F380C_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F380D_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F380E_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F380F_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vcvtph2ps"	*(char)
,	O
{	O
XM	O
,	O
EXxmmq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3816_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vptest"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3818_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3819_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F381A_PREFIX_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpabsb"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpabsw"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpabsd"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmovsxbw"	*(char)
,	O
{	O
XM	O
,	O
EXxmmq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmovsxbd"	*(char)
,	O
{	O
XM	O
,	O
EXxmmqd	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmovsxbq"	*(char)
,	O
{	O
XM	O
,	O
EXxmmdw	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmovsxwd"	*(char)
,	O
{	O
XM	O
,	O
EXxmmq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmovsxwq"	*(char)
,	O
{	O
XM	O
,	O
EXxmmqd	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmovsxdq"	*(char)
,	O
{	O
XM	O
,	O
EXxmmq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmuldq"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpcmpeqq"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F382A_PREFIX_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpackusdw"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F382C_PREFIX_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F382D_PREFIX_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F382E_PREFIX_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F382F_PREFIX_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmovzxbw"	*(char)
,	O
{	O
XM	O
,	O
EXxmmq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmovzxbd"	*(char)
,	O
{	O
XM	O
,	O
EXxmmqd	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmovzxbq"	*(char)
,	O
{	O
XM	O
,	O
EXxmmdw	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmovzxwd"	*(char)
,	O
{	O
XM	O
,	O
EXxmmq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmovzxwq"	*(char)
,	O
{	O
XM	O
,	O
EXxmmqd	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmovzxdq"	*(char)
,	O
{	O
XM	O
,	O
EXxmmq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3836_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpcmpgtq"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpminsb"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpminsd"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpminuw"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpminud"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmaxsb"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmaxsd"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmaxuw"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmaxud"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmulld"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3841_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsrlv%LW"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3846_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsllv%LW"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3858_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3859_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F385A_PREFIX_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3878_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3879_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F388C_PREFIX_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F388E_PREFIX_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpgatherd%LW"	*(char)
,	O
{	O
XM	O
,	O
MVexVSIBDWpX	O
,	O
Vex	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpgatherq%LW"	*(char)
,	O
{	O
XMGatherQ	O
,	O
MVexVSIBQWpX	O
,	O
VexGatherQ	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vgatherdp%XW"	*(char)
,	O
{	O
XM	O
,	O
MVexVSIBDWpX	O
,	O
Vex	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vgatherqp%XW"	*(char)
,	O
{	O
XMGatherQ	O
,	O
MVexVSIBQWpX	O
,	O
VexGatherQ	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmaddsub132p%XW"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmsubadd132p%XW"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmadd132p%XW"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmadd132s%XW"	*(char)
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXVexWdqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmsub132p%XW"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmsub132s%XW"	*(char)
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXVexWdqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfnmadd132p%XW"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfnmadd132s%XW"	*(char)
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXVexWdqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfnmsub132p%XW"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfnmsub132s%XW"	*(char)
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXVexWdqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmaddsub213p%XW"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmsubadd213p%XW"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmadd213p%XW"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmadd213s%XW"	*(char)
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXVexWdqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmsub213p%XW"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmsub213s%XW"	*(char)
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXVexWdqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfnmadd213p%XW"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfnmadd213s%XW"	*(char)
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXVexWdqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfnmsub213p%XW"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfnmsub213s%XW"	*(char)
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXVexWdqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmaddsub231p%XW"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmsubadd231p%XW"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmadd231p%XW"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmadd231s%XW"	*(char)
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXVexWdqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmsub231p%XW"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmsub231s%XW"	*(char)
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXVexWdqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfnmadd231p%XW"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfnmadd231s%XW"	*(char)
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXVexWdqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfnmsub231p%XW"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfnmsub231s%XW"	*(char)
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXVexWdqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F38CF_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F38DB_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vaesenc"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vaesenclast"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vaesdec"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vaesdeclast"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F38F2_P_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F38F3_R_1_P_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F38F3_R_2_P_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F38F3_R_3_P_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F38F5_P_0	O
)	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F38F5_P_1	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F38F5_P_3	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F38F6_P_3	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F38F7_P_0	O
)	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F38F7_P_1	O
)	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F38F7_P_2	O
)	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F38F7_P_3	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A00_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A01_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A02_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A04_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A05_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A06_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vroundps"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vroundpd"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vroundss"	*(char)
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXdScalar	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vroundsd"	*(char)
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXqScalar	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vblendps"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vblendpd"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpblendw"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpalignr"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A14_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A15_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A16_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A17_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A18_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A19_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vcvtps2ph"	*(char)
,	O
{	O
EXxmmq	O
,	O
XM	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A20_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A21_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A22_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A30_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A31_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A32_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A33_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A38_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A39_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vdpps"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A41_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vmpsadbw"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpclmulqdq"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
,	O
PCLMUL	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A46_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A48_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A49_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A4A_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A4B_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A4C_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmaddsubps"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmaddsubpd"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmsubaddps"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmsubaddpd"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A60_P_2	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A61_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A62_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A63_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmaddps"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmaddpd"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A6A_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A6B_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmsubps"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmsubpd"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A6E_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A6F_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfnmaddps"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfnmaddpd"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A7A_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A7B_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfnmsubps"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfnmsubpd"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A7E_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A7F_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3ACE_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3ACF_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3ADF_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3AF0_P_3	O
)	O
}	O
,	O
}	O
,	O
}	O
;	O
static	O
const	O
struct	O
dis386	O
x86_64_table	O
[	O
]	O
[	O
2	int
]	O
=	O
{	O
{	O
{	O
"pushP"	*(char)
,	O
{	O
es	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"popP"	*(char)
,	O
{	O
es	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"pushP"	*(char)
,	O
{	O
cs	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"pushP"	*(char)
,	O
{	O
ss	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"popP"	*(char)
,	O
{	O
ss	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"pushP"	*(char)
,	O
{	O
ds	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"popP"	*(char)
,	O
{	O
ds	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"daa"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"das"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"aaa"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"aas"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"pushaP"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"popaP"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_62_32BIT	O
)	O
}	O
,	O
{	O
EVEX_TABLE	O
(	O
EVEX_0F	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"arpl"	*(char)
,	O
{	O
Ew	O
,	O
Gw	O
}	O
,	O
0	int
}	O
,	O
{	O
"movs{lq|xd}"	*(char)
,	O
{	O
Gv	O
,	O
Ed	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"ins{R|}"	*(char)
,	O
{	O
Yzr	O
,	O
indirDX	O
}	O
,	O
0	int
}	O
,	O
{	O
"ins{G|}"	*(char)
,	O
{	O
Yzr	O
,	O
indirDX	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"outs{R|}"	*(char)
,	O
{	O
indirDXr	O
,	O
Xz	O
}	O
,	O
0	int
}	O
,	O
{	O
"outs{G|}"	*(char)
,	O
{	O
indirDXr	O
,	O
Xz	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
REG_TABLE	O
(	O
REG_80	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"Jcall{T|}"	*(char)
,	O
{	O
Ap	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_C4_32BIT	O
)	O
}	O
,	O
{	O
VEX_C4_TABLE	O
(	O
VEX_0F	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_C5_32BIT	O
)	O
}	O
,	O
{	O
VEX_C5_TABLE	O
(	O
VEX_0F	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"into"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"aam"	*(char)
,	O
{	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"aad"	*(char)
,	O
{	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"callP"	*(char)
,	O
{	O
Jv	O
,	O
BND	O
}	O
,	O
0	int
}	O
,	O
{	O
"call@"	*(char)
,	O
{	O
Jv	O
,	O
BND	O
}	O
,	O
0	int
}	O
}	O
,	O
{	O
{	O
"jmpP"	*(char)
,	O
{	O
Jv	O
,	O
BND	O
}	O
,	O
0	int
}	O
,	O
{	O
"jmp@"	*(char)
,	O
{	O
Jv	O
,	O
BND	O
}	O
,	O
0	int
}	O
}	O
,	O
{	O
{	O
"Jjmp{T|}"	*(char)
,	O
{	O
Ap	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"sgdt{Q|IQ}"	*(char)
,	O
{	O
M	O
}	O
,	O
0	int
}	O
,	O
{	O
"sgdt"	*(char)
,	O
{	O
M	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"sidt{Q|IQ}"	*(char)
,	O
{	O
M	O
}	O
,	O
0	int
}	O
,	O
{	O
"sidt"	*(char)
,	O
{	O
M	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"lgdt{Q|Q}"	*(char)
,	O
{	O
M	O
}	O
,	O
0	int
}	O
,	O
{	O
"lgdt"	*(char)
,	O
{	O
M	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"lidt{Q|Q}"	*(char)
,	O
{	O
M	O
}	O
,	O
0	int
}	O
,	O
{	O
"lidt"	*(char)
,	O
{	O
M	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
}	O
;	O
static	O
const	O
struct	O
dis386	O
three_byte_table	O
[	O
]	O
[	O
256	int
]	O
=	O
{	O
{	O
{	O
"pshufb"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"phaddw"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"phaddd"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"phaddsw"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pmaddubsw"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"phsubw"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"phsubd"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"phsubsw"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"psignb"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"psignw"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"psignd"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pmulhrsw"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3810	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3814	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3815	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3817	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pabsb"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pabsw"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pabsd"	*(char)
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3820	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3821	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3822	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3823	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3824	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3825	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3828	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3829	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F382A	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F382B	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3830	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3831	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3832	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3833	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3834	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3835	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3837	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3838	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3839	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F383A	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F383B	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F383C	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F383D	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F383E	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F383F	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3840	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3841	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3880	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3881	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3882	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F38C8	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F38C9	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F38CA	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F38CB	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F38CC	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F38CD	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F38CF	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F38DB	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F38DC	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F38DD	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F38DE	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F38DF	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F38F0	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F38F1	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F38F5	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F38F6	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F38F8	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F38F9	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A08	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A09	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A0A	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A0B	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A0C	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A0D	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A0E	O
)	O
}	O
,	O
{	O
"palignr"	*(char)
,	O
{	O
MX	O
,	O
EM	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A14	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A15	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A16	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A17	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A20	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A21	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A22	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A40	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A41	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A42	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A44	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A60	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A61	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A62	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A63	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3ACC	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3ACE	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3ACF	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3ADF	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
}	O
;	O
static	O
const	O
struct	O
dis386	O
xop_table	O
[	O
]	O
[	O
256	int
]	O
=	O
{	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmacssww"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpmacsswd"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpmacssdql"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmacssdd"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpmacssdqh"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmacsww"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpmacswd"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpmacsdql"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmacsdd"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpmacsdqh"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpcmov"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpperm"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmadcsswd"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmadcswd"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vprotb"	*(char)
,	O
{	O
XM	O
,	O
Vex_2src_1	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"vprotw"	*(char)
,	O
{	O
XM	O
,	O
Vex_2src_1	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"vprotd"	*(char)
,	O
{	O
XM	O
,	O
Vex_2src_1	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"vprotq"	*(char)
,	O
{	O
XM	O
,	O
Vex_2src_1	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0FXOP_08_CC	O
)	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0FXOP_08_CD	O
)	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0FXOP_08_CE	O
)	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0FXOP_08_CF	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0FXOP_08_EC	O
)	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0FXOP_08_ED	O
)	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0FXOP_08_EE	O
)	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0FXOP_08_EF	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_XOP_TBM_01	O
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_XOP_TBM_02	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_XOP_LWPCB	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0FXOP_09_80	O
)	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0FXOP_09_81	O
)	O
}	O
,	O
{	O
"vfrczss"	*(char)
,	O
{	O
XM	O
,	O
EXd	O
}	O
,	O
0	int
}	O
,	O
{	O
"vfrczsd"	*(char)
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vprotb"	*(char)
,	O
{	O
XM	O
,	O
Vex_2src_1	O
,	O
Vex_2src_2	O
}	O
,	O
0	int
}	O
,	O
{	O
"vprotw"	*(char)
,	O
{	O
XM	O
,	O
Vex_2src_1	O
,	O
Vex_2src_2	O
}	O
,	O
0	int
}	O
,	O
{	O
"vprotd"	*(char)
,	O
{	O
XM	O
,	O
Vex_2src_1	O
,	O
Vex_2src_2	O
}	O
,	O
0	int
}	O
,	O
{	O
"vprotq"	*(char)
,	O
{	O
XM	O
,	O
Vex_2src_1	O
,	O
Vex_2src_2	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpshlb"	*(char)
,	O
{	O
XM	O
,	O
Vex_2src_1	O
,	O
Vex_2src_2	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpshlw"	*(char)
,	O
{	O
XM	O
,	O
Vex_2src_1	O
,	O
Vex_2src_2	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpshld"	*(char)
,	O
{	O
XM	O
,	O
Vex_2src_1	O
,	O
Vex_2src_2	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpshlq"	*(char)
,	O
{	O
XM	O
,	O
Vex_2src_1	O
,	O
Vex_2src_2	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpshab"	*(char)
,	O
{	O
XM	O
,	O
Vex_2src_1	O
,	O
Vex_2src_2	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpshaw"	*(char)
,	O
{	O
XM	O
,	O
Vex_2src_1	O
,	O
Vex_2src_2	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpshad"	*(char)
,	O
{	O
XM	O
,	O
Vex_2src_1	O
,	O
Vex_2src_2	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpshaq"	*(char)
,	O
{	O
XM	O
,	O
Vex_2src_1	O
,	O
Vex_2src_2	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vphaddbw"	*(char)
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
{	O
"vphaddbd"	*(char)
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
{	O
"vphaddbq"	*(char)
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vphaddwd"	*(char)
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
{	O
"vphaddwq"	*(char)
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vphadddq"	*(char)
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vphaddubw"	*(char)
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
{	O
"vphaddubd"	*(char)
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
{	O
"vphaddubq"	*(char)
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vphadduwd"	*(char)
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
{	O
"vphadduwq"	*(char)
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vphaddudq"	*(char)
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vphsubbw"	*(char)
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
{	O
"vphsubwd"	*(char)
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
{	O
"vphsubdq"	*(char)
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"bextrS"	*(char)
,	O
{	O
Gdq	O
,	O
Edq	O
,	O
Id	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_XOP_LWP	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
}	O
;	O
static	O
const	O
struct	O
dis386	O
vex_table	O
[	O
]	O
[	O
256	int
]	O
=	O
{	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F10	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F11	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F12	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F13	O
)	O
}	O
,	O
{	O
"vunpcklpX"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vunpckhpX"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F16	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F17	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vmovapX"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmovapX"	*(char)
,	O
{	O
EXxS	O
,	O
XM	O
}	O
,	O
0	int
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F2A	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F2B	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F2C	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F2D	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F2E	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F2F	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F41	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F42	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F44	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F45	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F46	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F47	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F4A	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F4B	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F50	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F51	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F52	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F53	O
)	O
}	O
,	O
{	O
"vandpX"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vandnpX"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vorpX"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vxorpX"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F58	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F59	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F5A	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F5B	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F5C	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F5D	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F5E	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F5F	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F60	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F61	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F62	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F63	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F64	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F65	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F66	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F67	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F68	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F69	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F6A	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F6B	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F6C	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F6D	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F6E	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F6F	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F70	O
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_VEX_0F71	O
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_VEX_0F72	O
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_VEX_0F73	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F74	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F75	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F76	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F77	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F7C	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F7D	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F7E	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F7F	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F90	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F91	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F92	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F93	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F98	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F99	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_VEX_0FAE	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FC2	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FC4	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FC5	O
)	O
}	O
,	O
{	O
"vshufpX"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FD0	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FD1	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FD2	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FD3	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FD4	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FD5	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FD6	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FD7	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FD8	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FD9	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FDA	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FDB	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FDC	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FDD	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FDE	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FDF	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FE0	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FE1	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FE2	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FE3	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FE4	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FE5	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FE6	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FE7	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FE8	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FE9	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FEA	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FEB	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FEC	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FED	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FEE	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FEF	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FF0	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FF1	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FF2	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FF3	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FF4	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FF5	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FF6	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FF7	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FF8	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FF9	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FFA	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FFB	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FFC	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FFD	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FFE	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
{	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3800	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3801	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3802	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3803	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3804	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3805	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3806	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3807	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3808	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3809	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F380A	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F380B	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F380C	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F380D	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F380E	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F380F	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3813	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3816	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3817	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3818	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3819	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F381A	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F381C	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F381D	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F381E	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3820	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3821	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3822	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3823	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3824	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3825	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3828	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3829	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F382A	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F382B	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F382C	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F382D	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F382E	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F382F	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3830	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3831	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3832	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3833	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3834	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3835	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3836	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3837	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3838	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3839	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F383A	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F383B	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F383C	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F383D	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F383E	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F383F	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3840	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3841	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3845	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3846	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3847	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3858	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3859	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F385A	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3878	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3879	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F388C	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F388E	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3890	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3891	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3892	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3893	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3896	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3897	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3898	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3899	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F389A	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F389B	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F389C	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F389D	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F389E	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F389F	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38A6	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38A7	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38A8	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38A9	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38AA	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38AB	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38AC	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38AD	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38AE	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38AF	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38B6	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38B7	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38B8	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38B9	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38BA	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38BB	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38BC	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38BD	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38BE	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38BF	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38CF	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38DB	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38DC	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38DD	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38DE	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38DF	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38F2	O
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_VEX_0F38F3	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38F5	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38F6	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38F7	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
{	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A00	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A01	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A02	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A04	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A05	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A06	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A08	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A09	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A0A	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A0B	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A0C	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A0D	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A0E	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A0F	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A14	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A15	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A16	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A17	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A18	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A19	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A1D	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A20	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A21	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A22	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A30	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A31	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A32	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A33	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A38	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A39	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A40	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A41	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A42	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A44	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A46	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A48	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A49	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A4A	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A4B	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A4C	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A5C	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A5D	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A5E	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A5F	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A60	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A61	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A62	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A63	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A68	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A69	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A6A	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A6B	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A6C	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A6D	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A6E	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A6F	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A78	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A79	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A7A	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A7B	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A7C	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A7D	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A7E	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A7F	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3ACE	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3ACF	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3ADF	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3AF0	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
}	O
;	O
static	O
const	O
struct	O
dis386	O
vex_len_table	O
[	O
]	O
[	O
2	int
]	O
=	O
{	O
{	O
{	O
"vmovlps"	*(char)
,	O
{	O
XM	O
,	O
Vex128	O
,	O
EXq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmovhlps"	*(char)
,	O
{	O
XM	O
,	O
Vex128	O
,	O
EXq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmovlpd"	*(char)
,	O
{	O
XM	O
,	O
Vex128	O
,	O
EXq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmovlpX"	*(char)
,	O
{	O
EXq	O
,	O
XM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmovhps"	*(char)
,	O
{	O
XM	O
,	O
Vex128	O
,	O
EXq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmovlhps"	*(char)
,	O
{	O
XM	O
,	O
Vex128	O
,	O
EXq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmovhpd"	*(char)
,	O
{	O
XM	O
,	O
Vex128	O
,	O
EXq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmovhpX"	*(char)
,	O
{	O
EXq	O
,	O
XM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F41_P_0_LEN_1	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F41_P_2_LEN_1	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F42_P_0_LEN_1	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F42_P_2_LEN_1	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F44_P_0_LEN_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F44_P_2_LEN_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F45_P_0_LEN_1	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F45_P_2_LEN_1	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F46_P_0_LEN_1	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F46_P_2_LEN_1	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F47_P_0_LEN_1	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F47_P_2_LEN_1	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F4A_P_0_LEN_1	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F4A_P_2_LEN_1	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F4B_P_0_LEN_1	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F4B_P_2_LEN_1	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"vmovK"	*(char)
,	O
{	O
XMScalar	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vzeroupper"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"vzeroall"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmovq"	*(char)
,	O
{	O
XMScalar	O
,	O
EXqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmovK"	*(char)
,	O
{	O
Edq	O
,	O
XMScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F90_P_0_LEN_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F90_P_2_LEN_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F91_P_0_LEN_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F91_P_2_LEN_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F92_P_0_LEN_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F92_P_2_LEN_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F92_P_3_LEN_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F93_P_0_LEN_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F93_P_2_LEN_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F93_P_3_LEN_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F98_P_0_LEN_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F98_P_2_LEN_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F99_P_0_LEN_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F99_P_2_LEN_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"vldmxcsr"	*(char)
,	O
{	O
Md	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vstmxcsr"	*(char)
,	O
{	O
Md	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpinsrw"	*(char)
,	O
{	O
XM	O
,	O
Vex128	O
,	O
Edqw	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpextrw"	*(char)
,	O
{	O
Gdq	O
,	O
XS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmovq"	*(char)
,	O
{	O
EXqScalarS	O
,	O
XMScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmaskmovdqu"	*(char)
,	O
{	O
XM	O
,	O
XS	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3816_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3819_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F381A_P_2_M_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3836_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"vphminposuw"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F385A_P_2_M_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"vaesimc"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"andnS"	*(char)
,	O
{	O
Gdq	O
,	O
VexGdq	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"blsrS"	*(char)
,	O
{	O
VexGdq	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"blsmskS"	*(char)
,	O
{	O
VexGdq	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"blsiS"	*(char)
,	O
{	O
VexGdq	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"bzhiS"	*(char)
,	O
{	O
Gdq	O
,	O
Edq	O
,	O
VexGdq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"pextS"	*(char)
,	O
{	O
Gdq	O
,	O
VexGdq	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"pdepS"	*(char)
,	O
{	O
Gdq	O
,	O
VexGdq	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"mulxS"	*(char)
,	O
{	O
Gdq	O
,	O
VexGdq	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"bextrS"	*(char)
,	O
{	O
Gdq	O
,	O
Edq	O
,	O
VexGdq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"sarxS"	*(char)
,	O
{	O
Gdq	O
,	O
Edq	O
,	O
VexGdq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"shlxS"	*(char)
,	O
{	O
Gdq	O
,	O
Edq	O
,	O
VexGdq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"shrxS"	*(char)
,	O
{	O
Gdq	O
,	O
Edq	O
,	O
VexGdq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A00_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A01_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A06_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"vpextrb"	*(char)
,	O
{	O
Edqb	O
,	O
XM	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpextrw"	*(char)
,	O
{	O
Edqw	O
,	O
XM	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpextrK"	*(char)
,	O
{	O
Edq	O
,	O
XM	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vextractps"	*(char)
,	O
{	O
Edqd	O
,	O
XM	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A18_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A19_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"vpinsrb"	*(char)
,	O
{	O
XM	O
,	O
Vex128	O
,	O
Edqb	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vinsertps"	*(char)
,	O
{	O
XM	O
,	O
Vex128	O
,	O
EXd	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpinsrK"	*(char)
,	O
{	O
XM	O
,	O
Vex128	O
,	O
Edq	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A30_P_2_LEN_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A31_P_2_LEN_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A32_P_2_LEN_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A33_P_2_LEN_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A38_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A39_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"vdppd"	*(char)
,	O
{	O
XM	O
,	O
Vex128	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A46_P_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"vpcmpestrm"	*(char)
,	O
{	O
XM	O
,	O
{	O
PCMPESTR_Fixup	O
,	O
x_mode	O
}	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpcmpestri"	*(char)
,	O
{	O
XM	O
,	O
{	O
PCMPESTR_Fixup	O
,	O
x_mode	O
}	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpcmpistrm"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpcmpistri"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vfmaddss"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex128	O
,	O
EXdVexW	O
,	O
EXdVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vfmaddsd"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex128	O
,	O
EXqVexW	O
,	O
EXqVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vfmsubss"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex128	O
,	O
EXdVexW	O
,	O
EXdVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vfmsubsd"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex128	O
,	O
EXqVexW	O
,	O
EXqVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vfnmaddss"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex128	O
,	O
EXdVexW	O
,	O
EXdVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vfnmaddsd"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex128	O
,	O
EXqVexW	O
,	O
EXqVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vfnmsubss"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex128	O
,	O
EXdVexW	O
,	O
EXdVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vfnmsubsd"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex128	O
,	O
EXqVexW	O
,	O
EXqVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vaeskeygenassist"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"rorxS"	*(char)
,	O
{	O
Gdq	O
,	O
Edq	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpcomb"	*(char)
,	O
{	O
XM	O
,	O
Vex128	O
,	O
EXx	O
,	O
VPCOM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpcomw"	*(char)
,	O
{	O
XM	O
,	O
Vex128	O
,	O
EXx	O
,	O
VPCOM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpcomd"	*(char)
,	O
{	O
XM	O
,	O
Vex128	O
,	O
EXx	O
,	O
VPCOM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpcomq"	*(char)
,	O
{	O
XM	O
,	O
Vex128	O
,	O
EXx	O
,	O
VPCOM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpcomub"	*(char)
,	O
{	O
XM	O
,	O
Vex128	O
,	O
EXx	O
,	O
VPCOM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpcomuw"	*(char)
,	O
{	O
XM	O
,	O
Vex128	O
,	O
EXx	O
,	O
VPCOM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpcomud"	*(char)
,	O
{	O
XM	O
,	O
Vex128	O
,	O
EXx	O
,	O
VPCOM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpcomuq"	*(char)
,	O
{	O
XM	O
,	O
Vex128	O
,	O
EXx	O
,	O
VPCOM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vfrczps"	*(char)
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
{	O
"vfrczps"	*(char)
,	O
{	O
XM	O
,	O
EXymmq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vfrczpd"	*(char)
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
{	O
"vfrczpd"	*(char)
,	O
{	O
XM	O
,	O
EXymmq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
}	O
;	O
static	O
const	O
struct	O
dis386	O
vex_w_table	O
[	O
]	O
[	O
2	int
]	O
=	O
{	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F41_P_0_LEN_1	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F41_P_0_LEN_1	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F41_P_2_LEN_1	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F41_P_2_LEN_1	O
)	O
}	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F42_P_0_LEN_1	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F42_P_0_LEN_1	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F42_P_2_LEN_1	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F42_P_2_LEN_1	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F44_P_0_LEN_1	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F44_P_0_LEN_1	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F44_P_2_LEN_1	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F44_P_2_LEN_1	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F45_P_0_LEN_1	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F45_P_0_LEN_1	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F45_P_2_LEN_1	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F45_P_2_LEN_1	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F46_P_0_LEN_1	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F46_P_0_LEN_1	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F46_P_2_LEN_1	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F46_P_2_LEN_1	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F47_P_0_LEN_1	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F47_P_0_LEN_1	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F47_P_2_LEN_1	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F47_P_2_LEN_1	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F4A_P_0_LEN_1	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F4A_P_0_LEN_1	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F4A_P_2_LEN_1	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F4A_P_2_LEN_1	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F4B_P_0_LEN_1	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F4B_P_0_LEN_1	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F4B_P_2_LEN_1	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"kmovw"	*(char)
,	O
{	O
MaskG	O
,	O
MaskE	O
}	O
,	O
0	int
}	O
,	O
{	O
"kmovq"	*(char)
,	O
{	O
MaskG	O
,	O
MaskE	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"kmovb"	*(char)
,	O
{	O
MaskG	O
,	O
MaskBDE	O
}	O
,	O
0	int
}	O
,	O
{	O
"kmovd"	*(char)
,	O
{	O
MaskG	O
,	O
MaskBDE	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F91_P_0_LEN_0	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F91_P_0_LEN_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F91_P_2_LEN_0	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F91_P_2_LEN_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F92_P_0_LEN_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F92_P_2_LEN_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F93_P_0_LEN_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F93_P_2_LEN_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F98_P_0_LEN_0	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F98_P_0_LEN_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F98_P_2_LEN_0	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F98_P_2_LEN_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F99_P_0_LEN_0	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F99_P_0_LEN_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F99_P_2_LEN_0	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F99_P_2_LEN_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"vpermilps"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpermilpd"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vtestps"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vtestpd"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpermps"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vbroadcastss"	*(char)
,	O
{	O
XM	O
,	O
EXxmm_md	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vbroadcastsd"	*(char)
,	O
{	O
XM	O
,	O
EXxmm_mq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vbroadcastf128"	*(char)
,	O
{	O
XM	O
,	O
Mxmm	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmaskmovps"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
Mx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmaskmovpd"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
Mx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmaskmovps"	*(char)
,	O
{	O
Mx	O
,	O
Vex	O
,	O
XM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmaskmovpd"	*(char)
,	O
{	O
Mx	O
,	O
Vex	O
,	O
XM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpermd"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpsravd"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpbroadcastd"	*(char)
,	O
{	O
XM	O
,	O
EXxmm_md	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpbroadcastq"	*(char)
,	O
{	O
XM	O
,	O
EXxmm_mq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vbroadcasti128"	*(char)
,	O
{	O
XM	O
,	O
Mxmm	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpbroadcastb"	*(char)
,	O
{	O
XM	O
,	O
EXxmm_mb	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpbroadcastw"	*(char)
,	O
{	O
XM	O
,	O
EXxmm_mw	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vgf2p8mulb"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpermq"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpermpd"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpblendd"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpermilps"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpermilpd"	*(char)
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vperm2f128"	*(char)
,	O
{	O
XM	O
,	O
Vex256	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vinsertf128"	*(char)
,	O
{	O
XM	O
,	O
Vex256	O
,	O
EXxmm	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vextractf128"	*(char)
,	O
{	O
EXxmm	O
,	O
XM	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F3A30_P_2_LEN_0	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F3A30_P_2_LEN_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F3A31_P_2_LEN_0	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F3A31_P_2_LEN_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F3A32_P_2_LEN_0	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F3A32_P_2_LEN_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F3A33_P_2_LEN_0	O
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F3A33_P_2_LEN_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"vinserti128"	*(char)
,	O
{	O
XM	O
,	O
Vex256	O
,	O
EXxmm	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vextracti128"	*(char)
,	O
{	O
EXxmm	O
,	O
XM	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vperm2i128"	*(char)
,	O
{	O
XM	O
,	O
Vex256	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpermil2ps"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexImmW	O
,	O
EXVexImmW	O
,	O
EXVexImmW	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpermil2ps"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexImmW	O
,	O
EXVexImmW	O
,	O
EXVexImmW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpermil2pd"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexImmW	O
,	O
EXVexImmW	O
,	O
EXVexImmW	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpermil2pd"	*(char)
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexImmW	O
,	O
EXVexImmW	O
,	O
EXVexImmW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vblendvps"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
,	O
XMVexI4	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vblendvpd"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
,	O
XMVexI4	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpblendvb"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
,	O
XMVexI4	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vgf2p8affineqb"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vgf2p8affineinvqb"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
}	O
;	O
static	O
const	O
struct	O
dis386	O
mod_table	O
[	O
]	O
[	O
2	int
]	O
=	O
{	O
{	O
{	O
"leaS"	*(char)
,	O
{	O
Gv	O
,	O
M	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
RM_TABLE	O
(	O
RM_C6_REG_7	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
RM_TABLE	O
(	O
RM_C7_REG_7	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"Jcall^"	*(char)
,	O
{	O
indirEp	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"Jjmp^"	*(char)
,	O
{	O
indirEp	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
X86_64_TABLE	O
(	O
X86_64_0F01_REG_0	O
)	O
}	O
,	O
{	O
RM_TABLE	O
(	O
RM_0F01_REG_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
X86_64_TABLE	O
(	O
X86_64_0F01_REG_1	O
)	O
}	O
,	O
{	O
RM_TABLE	O
(	O
RM_0F01_REG_1	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
X86_64_TABLE	O
(	O
X86_64_0F01_REG_2	O
)	O
}	O
,	O
{	O
RM_TABLE	O
(	O
RM_0F01_REG_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
X86_64_TABLE	O
(	O
X86_64_0F01_REG_3	O
)	O
}	O
,	O
{	O
RM_TABLE	O
(	O
RM_0F01_REG_3	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F01_REG_5_MOD_0	O
)	O
}	O
,	O
{	O
RM_TABLE	O
(	O
RM_0F01_REG_5_MOD_3	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"invlpg"	*(char)
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
{	O
RM_TABLE	O
(	O
RM_0F01_REG_7_MOD_3	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"movlps"	*(char)
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"movhlps"	*(char)
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"movlpX"	*(char)
,	O
{	O
EXq	O
,	O
XM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"movhps"	*(char)
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
0	int
}	O
,	O
{	O
"movlhps"	*(char)
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"movhpX"	*(char)
,	O
{	O
EXq	O
,	O
XM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"prefetchnta"	*(char)
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"prefetcht0"	*(char)
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"prefetcht1"	*(char)
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"prefetcht2"	*(char)
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"nop/reserved"	*(char)
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"nop/reserved"	*(char)
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"nop/reserved"	*(char)
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"nop/reserved"	*(char)
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"bndldx"	*(char)
,	O
{	O
Gbnd	O
,	O
Mv_bnd	O
}	O
,	O
0	int
}	O
,	O
{	O
"nopQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"bndstx"	*(char)
,	O
{	O
Mv_bnd	O
,	O
Gbnd	O
}	O
,	O
0	int
}	O
,	O
{	O
"nopQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"bndmk"	*(char)
,	O
{	O
Gbnd	O
,	O
Mv_bnd	O
}	O
,	O
0	int
}	O
,	O
{	O
"nopQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
REG_TABLE	O
(	O
REG_0F1C_P_0_MOD_0	O
)	O
}	O
,	O
{	O
"nopQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"nopQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_0F1E_P_1_MOD_3	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"movL"	*(char)
,	O
{	O
Rd	O
,	O
Td	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"movL"	*(char)
,	O
{	O
Td	O
,	O
Rd	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"movntps"	*(char)
,	O
{	O
Mx	O
,	O
XM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"movntss"	*(char)
,	O
{	O
Md	O
,	O
XM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"movntpd"	*(char)
,	O
{	O
Mx	O
,	O
XM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"movntsd"	*(char)
,	O
{	O
Mq	O
,	O
XM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"movmskpX"	*(char)
,	O
{	O
Gdq	O
,	O
XS	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"psrlw"	*(char)
,	O
{	O
MS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"psraw"	*(char)
,	O
{	O
MS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"psllw"	*(char)
,	O
{	O
MS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"psrld"	*(char)
,	O
{	O
MS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"psrad"	*(char)
,	O
{	O
MS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pslld"	*(char)
,	O
{	O
MS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"psrlq"	*(char)
,	O
{	O
MS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F73_REG_3	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"psllq"	*(char)
,	O
{	O
MS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F73_REG_7	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"fxsave"	*(char)
,	O
{	O
FXSAVE	O
}	O
,	O
0	int
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FAE_REG_0_MOD_3	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"fxrstor"	*(char)
,	O
{	O
FXSAVE	O
}	O
,	O
0	int
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FAE_REG_1_MOD_3	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"ldmxcsr"	*(char)
,	O
{	O
Md	O
}	O
,	O
0	int
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FAE_REG_2_MOD_3	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"stmxcsr"	*(char)
,	O
{	O
Md	O
}	O
,	O
0	int
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FAE_REG_3_MOD_3	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FAE_REG_4_MOD_0	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FAE_REG_4_MOD_3	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FAE_REG_5_MOD_0	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FAE_REG_5_MOD_3	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FAE_REG_6_MOD_0	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FAE_REG_6_MOD_3	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FAE_REG_7_MOD_0	O
)	O
}	O
,	O
{	O
RM_TABLE	O
(	O
RM_0FAE_REG_7_MOD_3	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"lssS"	*(char)
,	O
{	O
Gv	O
,	O
Mp	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"lfsS"	*(char)
,	O
{	O
Gv	O
,	O
Mp	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"lgsS"	*(char)
,	O
{	O
Gv	O
,	O
Mp	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FC3_MOD_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"xrstors"	*(char)
,	O
{	O
FXSAVE	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"xsavec"	*(char)
,	O
{	O
FXSAVE	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"xsaves"	*(char)
,	O
{	O
FXSAVE	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FC7_REG_6_MOD_0	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FC7_REG_6_MOD_3	O
)	O
}	O
}	O
,	O
{	O
{	O
"vmptrst"	*(char)
,	O
{	O
Mq	O
}	O
,	O
0	int
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FC7_REG_7_MOD_3	O
)	O
}	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmovmskb"	*(char)
,	O
{	O
Gdq	O
,	O
MS	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"movntdq"	*(char)
,	O
{	O
Mx	O
,	O
XM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"lddqu"	*(char)
,	O
{	O
XM	O
,	O
M	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"movntdqa"	*(char)
,	O
{	O
XM	O
,	O
Mx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"wrussK"	*(char)
,	O
{	O
M	O
,	O
Gdq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"wrssK"	*(char)
,	O
{	O
M	O
,	O
Gdq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"enqcmds"	*(char)
,	O
{	O
Gva	O
,	O
M	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"movdir64b"	*(char)
,	O
{	O
Gva	O
,	O
M	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"enqcmd"	*(char)
,	O
{	O
Gva	O
,	O
M	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"movdiri"	*(char)
,	O
{	O
Ev	O
,	O
Gv	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"bound{S|}"	*(char)
,	O
{	O
Gv	O
,	O
Ma	O
}	O
,	O
0	int
}	O
,	O
{	O
EVEX_TABLE	O
(	O
EVEX_0F	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"lesS"	*(char)
,	O
{	O
Gv	O
,	O
Mp	O
}	O
,	O
0	int
}	O
,	O
{	O
VEX_C4_TABLE	O
(	O
VEX_0F	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"ldsS"	*(char)
,	O
{	O
Gv	O
,	O
Mp	O
}	O
,	O
0	int
}	O
,	O
{	O
VEX_C5_TABLE	O
(	O
VEX_0F	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F12_P_0_M_0	O
)	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F12_P_0_M_1	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F13_M_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F16_P_0_M_0	O
)	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F16_P_0_M_1	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F17_M_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"vmovntpX"	*(char)
,	O
{	O
Mx	O
,	O
XM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kandw"	*(char)
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kandq"	*(char)
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kandb"	*(char)
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kandd"	*(char)
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kandnw"	*(char)
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kandnq"	*(char)
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kandnb"	*(char)
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kandnd"	*(char)
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"knotw"	*(char)
,	O
{	O
MaskG	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"knotq"	*(char)
,	O
{	O
MaskG	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"knotb"	*(char)
,	O
{	O
MaskG	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"knotd"	*(char)
,	O
{	O
MaskG	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"korw"	*(char)
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"korq"	*(char)
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"korb"	*(char)
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kord"	*(char)
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kxnorw"	*(char)
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kxnorq"	*(char)
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kxnorb"	*(char)
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kxnord"	*(char)
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kxorw"	*(char)
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kxorq"	*(char)
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kxorb"	*(char)
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kxord"	*(char)
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kaddw"	*(char)
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kaddq"	*(char)
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kaddb"	*(char)
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kaddd"	*(char)
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kunpckwd"	*(char)
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kunpckdq"	*(char)
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kunpckbw"	*(char)
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vmovmskpX"	*(char)
,	O
{	O
Gdq	O
,	O
XS	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F71_REG_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F71_REG_4	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F71_REG_6	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F72_REG_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F72_REG_4	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F72_REG_6	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F73_REG_2	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F73_REG_3	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F73_REG_6	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F73_REG_7	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"kmovw"	*(char)
,	O
{	O
Ew	O
,	O
MaskG	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
{	O
{	O
"kmovq"	*(char)
,	O
{	O
Eq	O
,	O
MaskG	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
{	O
{	O
"kmovb"	*(char)
,	O
{	O
Eb	O
,	O
MaskG	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
{	O
{	O
"kmovd"	*(char)
,	O
{	O
Ed	O
,	O
MaskG	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kmovw"	*(char)
,	O
{	O
MaskG	O
,	O
Rdq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kmovb"	*(char)
,	O
{	O
MaskG	O
,	O
Rdq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kmovK"	*(char)
,	O
{	O
MaskG	O
,	O
Rdq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kmovw"	*(char)
,	O
{	O
Gdq	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kmovb"	*(char)
,	O
{	O
Gdq	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kmovK"	*(char)
,	O
{	O
Gdq	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kortestw"	*(char)
,	O
{	O
MaskG	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kortestq"	*(char)
,	O
{	O
MaskG	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kortestb"	*(char)
,	O
{	O
MaskG	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kortestd"	*(char)
,	O
{	O
MaskG	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"ktestw"	*(char)
,	O
{	O
MaskG	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"ktestq"	*(char)
,	O
{	O
MaskG	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"ktestb"	*(char)
,	O
{	O
MaskG	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"ktestd"	*(char)
,	O
{	O
MaskG	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0FAE_R_2_M_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0FAE_R_3_M_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmovmskb"	*(char)
,	O
{	O
Gdq	O
,	O
XS	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmovntdq"	*(char)
,	O
{	O
Mx	O
,	O
XM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vlddqu"	*(char)
,	O
{	O
XM	O
,	O
M	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F381A_P_2_M_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"vmovntdqa"	*(char)
,	O
{	O
XM	O
,	O
Mx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F382C_P_2_M_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F382D_P_2_M_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F382E_P_2_M_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F382F_P_2_M_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F385A_P_2_M_0	O
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"vpmaskmov%LW"	*(char)
,	O
{	O
XM	O
,	O
Vex	O
,	O
Mx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpmaskmov%LW"	*(char)
,	O
{	O
Mx	O
,	O
Vex	O
,	O
XM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kshiftrb"	*(char)
,	O
{	O
MaskG	O
,	O
MaskR	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kshiftrw"	*(char)
,	O
{	O
MaskG	O
,	O
MaskR	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kshiftrd"	*(char)
,	O
{	O
MaskG	O
,	O
MaskR	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kshiftrq"	*(char)
,	O
{	O
MaskG	O
,	O
MaskR	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kshiftlb"	*(char)
,	O
{	O
MaskG	O
,	O
MaskR	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kshiftlw"	*(char)
,	O
{	O
MaskG	O
,	O
MaskR	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kshiftld"	*(char)
,	O
{	O
MaskG	O
,	O
MaskR	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kshiftlq"	*(char)
,	O
{	O
MaskG	O
,	O
MaskR	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
}	O
;	O
static	O
const	O
struct	O
dis386	O
rm_table	O
[	O
]	O
[	O
8	int
]	O
=	O
{	O
{	O
{	O
"xabort"	*(char)
,	O
{	O
Skip_MODRM	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"xbeginT"	*(char)
,	O
{	O
Skip_MODRM	O
,	O
Jdqw	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"enclv"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmcall"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmlaunch"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmresume"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmxoff"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"pconfig"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"monitor"	*(char)
,	O
{	O
{	O
OP_Monitor	O
,	O
0	int
}	O
}	O
,	O
0	int
}	O
,	O
{	O
"mwait"	*(char)
,	O
{	O
{	O
OP_Mwait	O
,	O
0	int
}	O
}	O
,	O
0	int
}	O
,	O
{	O
"clac"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"stac"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"encls"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"xgetbv"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"xsetbv"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vmfunc"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"xend"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"xtest"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"enclu"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmrun"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmmcall"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmload"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmsave"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"stgi"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"clgi"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"skinit"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"invlpga"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F01_REG_5_MOD_3_RM_0	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F01_REG_5_MOD_3_RM_2	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"rdpkru"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"wrpkru"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"swapgs"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"rdtscp"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F01_REG_7_MOD_3_RM_2	O
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F01_REG_7_MOD_3_RM_3	O
)	O
}	O
,	O
{	O
"clzero"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"rdpru"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"nopQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"nopQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"endbr64"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"endbr32"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"nopQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"nopQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"nopQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"nopQ"	*(char)
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"mfence"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"sfence"	*(char)
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
}	O
;	O
static	O
bfd_boolean	int
op_is_jump	O
=	O
FALSE	O
;	O
static	O
int	O
ckprefix	O
(	O
void	O
)	O
{	O
int	O
newrex	O
,	O
i	*(struct)
,	O
length	O
;	O
rex	O
=	O
0	int
;	O
rex_ignored	O
=	O
0	int
;	O
prefixes	O
=	O
0	int
;	O
used_prefixes	O
=	O
0	int
;	O
rex_used	O
=	O
0	int
;	O
last_lock_prefix	O
=	O
-	O
1	int
;	O
last_repz_prefix	O
=	O
-	O
1	int
;	O
last_repnz_prefix	O
=	O
-	O
1	int
;	O
last_data_prefix	O
=	O
-	O
1	int
;	O
last_addr_prefix	O
=	O
-	O
1	int
;	O
last_rex_prefix	O
=	O
-	O
1	int
;	O
last_seg_prefix	O
=	O
-	O
1	int
;	O
fwait_prefix	O
=	O
-	O
1	int
;	O
active_seg_prefix	O
=	O
0	int
;	O
for	O
(	O
i	*(struct)
=	O
0	int
;	O
i	*(struct)
<	O
(	O
int	O
)	O
ARRAY_SIZE	O
(	O
all_prefixes	O
)	O
;	O
i	*(struct)
++	O
)	O
all_prefixes	O
[	O
i	*(struct)
]	O
=	O
0	int
;	O
i	*(struct)
=	O
0	int
;	O
length	O
=	O
0	int
;	O
while	O
(	O
length	O
<	O
MAX_CODE_LENGTH	O
-	O
1	int
)	O
{	O
FETCH_DATA	O
(	O
the_info	O
,	O
codep	O
+	O
1	int
)	O
;	O
newrex	O
=	O
0	int
;	O
switch	O
(	O
*	O
codep	O
)	O
{	O
case	O
0x40	int
:	O
case	O
0x41	int
:	O
case	O
0x42	int
:	O
case	O
0x43	int
:	O
case	O
0x44	int
:	O
case	O
0x45	int
:	O
case	O
0x46	int
:	O
case	O
0x47	int
:	O
case	O
0x48	int
:	O
case	O
0x49	int
:	O
case	O
0x4a	int
:	O
case	O
0x4b	int
:	O
case	O
0x4c	int
:	O
case	O
0x4d	int
:	O
case	O
0x4e	int
:	O
case	O
0x4f	int
:	O
if	O
(	O
address_mode	O
==	O
mode_64bit	O
)	O
newrex	O
=	O
*	O
codep	O
;	O
else	O
return	O
1	int
;	O
last_rex_prefix	O
=	O
i	*(struct)
;	O
break	O
;	O
case	O
0xf3	int
:	O
prefixes	O
|=	O
PREFIX_REPZ	O
;	O
last_repz_prefix	O
=	O
i	*(struct)
;	O
break	O
;	O
case	O
0xf2	int
:	O
prefixes	O
|=	O
PREFIX_REPNZ	O
;	O
last_repnz_prefix	O
=	O
i	*(struct)
;	O
break	O
;	O
case	O
0xf0	int
:	O
prefixes	O
|=	O
PREFIX_LOCK	O
;	O
last_lock_prefix	O
=	O
i	*(struct)
;	O
break	O
;	O
case	O
0x2e	int
:	O
prefixes	O
|=	O
PREFIX_CS	O
;	O
last_seg_prefix	O
=	O
i	*(struct)
;	O
active_seg_prefix	O
=	O
PREFIX_CS	O
;	O
break	O
;	O
case	O
0x36	int
:	O
prefixes	O
|=	O
PREFIX_SS	O
;	O
last_seg_prefix	O
=	O
i	*(struct)
;	O
active_seg_prefix	O
=	O
PREFIX_SS	O
;	O
break	O
;	O
case	O
0x3e	int
:	O
prefixes	O
|=	O
PREFIX_DS	O
;	O
last_seg_prefix	O
=	O
i	*(struct)
;	O
active_seg_prefix	O
=	O
PREFIX_DS	O
;	O
break	O
;	O
case	O
0x26	int
:	O
prefixes	O
|=	O
PREFIX_ES	O
;	O
last_seg_prefix	O
=	O
i	*(struct)
;	O
active_seg_prefix	O
=	O
PREFIX_ES	O
;	O
break	O
;	O
case	O
0x64	int
:	O
prefixes	O
|=	O
PREFIX_FS	O
;	O
last_seg_prefix	O
=	O
i	*(struct)
;	O
active_seg_prefix	O
=	O
PREFIX_FS	O
;	O
break	O
;	O
case	O
0x65	int
:	O
prefixes	O
|=	O
PREFIX_GS	O
;	O
last_seg_prefix	O
=	O
i	*(struct)
;	O
active_seg_prefix	O
=	O
PREFIX_GS	O
;	O
break	O
;	O
case	O
0x66	int
:	O
prefixes	O
|=	O
PREFIX_DATA	O
;	O
last_data_prefix	O
=	O
i	*(struct)
;	O
break	O
;	O
case	O
0x67	int
:	O
prefixes	O
|=	O
PREFIX_ADDR	O
;	O
last_addr_prefix	O
=	O
i	*(struct)
;	O
break	O
;	O
case	O
FWAIT_OPCODE	O
:	O
fwait_prefix	O
=	O
i	*(struct)
;	O
if	O
(	O
prefixes	O
||	O
rex	O
)	O
{	O
prefixes	O
|=	O
PREFIX_FWAIT	O
;	O
codep	O
++	O
;	O
rex_used	O
=	O
rex	O
;	O
return	O
1	int
;	O
}	O
prefixes	O
=	O
PREFIX_FWAIT	O
;	O
break	O
;	O
default	O
:	O
return	O
1	int
;	O
}	O
if	O
(	O
rex	O
)	O
{	O
rex_used	O
=	O
rex	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
*	O
codep	O
!=	O
FWAIT_OPCODE	O
)	O
all_prefixes	O
[	O
i	*(struct)
++	O
]	O
=	O
*	O
codep	O
;	O
rex	O
=	O
newrex	O
;	O
codep	O
++	O
;	O
length	O
++	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
const	O
char	O
*	O
prefix_name	O
(	O
int	O
pref	O
,	O
int	O
sizeflag	O
)	O
{	O
static	O
const	O
char	O
*	O
rexes	O
[	O
16	int
]	O
=	O
{	O
"rex"	*(char)
,	O
"rex.B"	*(char)
,	O
"rex.X"	*(char)
,	O
"rex.XB"	*(char)
,	O
"rex.R"	*(char)
,	O
"rex.RB"	*(char)
,	O
"rex.RX"	*(char)
,	O
"rex.RXB"	*(char)
,	O
"rex.W"	*(char)
,	O
"rex.WB"	*(char)
,	O
"rex.WX"	*(char)
,	O
"rex.WXB"	*(char)
,	O
"rex.WR"	*(char)
,	O
"rex.WRB"	*(char)
,	O
"rex.WRX"	*(char)
,	O
"rex.WRXB"	*(char)
,	O
}	O
;	O
switch	O
(	O
pref	O
)	O
{	O
case	O
0x40	int
:	O
case	O
0x41	int
:	O
case	O
0x42	int
:	O
case	O
0x43	int
:	O
case	O
0x44	int
:	O
case	O
0x45	int
:	O
case	O
0x46	int
:	O
case	O
0x47	int
:	O
case	O
0x48	int
:	O
case	O
0x49	int
:	O
case	O
0x4a	int
:	O
case	O
0x4b	int
:	O
case	O
0x4c	int
:	O
case	O
0x4d	int
:	O
case	O
0x4e	int
:	O
case	O
0x4f	int
:	O
return	O
rexes	O
[	O
pref	O
-	O
0x40	int
]	O
;	O
case	O
0xf3	int
:	O
return	O
"repz"	*(char)
;	O
case	O
0xf2	int
:	O
return	O
"repnz"	*(char)
;	O
case	O
0xf0	int
:	O
return	O
"lock"	*(char)
;	O
case	O
0x2e	int
:	O
return	O
"cs"	*(char)
;	O
case	O
0x36	int
:	O
return	O
"ss"	*(char)
;	O
case	O
0x3e	int
:	O
return	O
"ds"	*(char)
;	O
case	O
0x26	int
:	O
return	O
"es"	*(char)
;	O
case	O
0x64	int
:	O
return	O
"fs"	*(char)
;	O
case	O
0x65	int
:	O
return	O
"gs"	*(char)
;	O
case	O
0x66	int
:	O
return	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
?	O
"data16"	*(char)
:	O
"data32"	*(char)
;	O
case	O
0x67	int
:	O
if	O
(	O
address_mode	O
==	O
mode_64bit	O
)	O
return	O
(	O
sizeflag	O
&	O
AFLAG	O
)	O
?	O
"addr32"	*(char)
:	O
"addr64"	*(char)
;	O
else	O
return	O
(	O
sizeflag	O
&	O
AFLAG	O
)	O
?	O
"addr16"	*(char)
:	O
"addr32"	*(char)
;	O
case	O
FWAIT_OPCODE	O
:	O
return	O
"fwait"	*(char)
;	O
case	O
REP_PREFIX	O
:	O
return	O
"rep"	*(char)
;	O
case	O
XACQUIRE_PREFIX	O
:	O
return	O
"xacquire"	*(char)
;	O
case	O
XRELEASE_PREFIX	O
:	O
return	O
"xrelease"	*(char)
;	O
case	O
BND_PREFIX	O
:	O
return	O
"bnd"	*(char)
;	O
case	O
NOTRACK_PREFIX	O
:	O
return	O
"notrack"	*(char)
;	O
default	O
:	O
return	O
NULL	O
;	O
}	O
}	O
static	O
char	O
op_out	O
[	O
MAX_OPERANDS	O
]	O
[	O
100	int
]	O
;	O
static	O
int	O
op_ad	O
,	O
op_index	O
[	O
MAX_OPERANDS	O
]	O
;	O
static	O
int	O
two_source_ops	O
;	O
static	O
bfd_vma	long
op_address	O
[	O
MAX_OPERANDS	O
]	O
;	O
static	O
bfd_vma	long
op_riprel	O
[	O
MAX_OPERANDS	O
]	O
;	O
static	O
bfd_vma	long
start_pc	O
;	O
static	O
char	O
intel_syntax	O
;	O
static	O
char	O
intel_mnemonic	O
=	O
!	O
SYSV386_COMPAT	O
;	O
static	O
char	O
open_char	O
;	O
static	O
char	O
close_char	O
;	O
static	O
char	O
separator_char	O
;	O
static	O
char	O
scale_char	O
;	O
enum	O
x86_64_isa	O
{	O
amd64	O
=	O
1	int
,	O
intel64	O
}	O
;	O
static	O
enum	O
x86_64_isa	O
isa64	O
;	O
int	O
print_insn_i386_att	O
(	O
bfd_vma	long
pc	O
,	O
disassemble_info	O
*	O
info	*(void)
)	O
{	O
intel_syntax	O
=	O
0	int
;	O
return	O
print_insn	O
(	O
pc	O
,	O
info	*(void)
)	O
;	O
}	O
int	O
print_insn_i386_intel	O
(	O
bfd_vma	long
pc	O
,	O
disassemble_info	O
*	O
info	*(void)
)	O
{	O
intel_syntax	O
=	O
1	int
;	O
return	O
print_insn	O
(	O
pc	O
,	O
info	*(void)
)	O
;	O
}	O
int	O
print_insn_i386	O
(	O
bfd_vma	long
pc	O
,	O
disassemble_info	O
*	O
info	*(void)
)	O
{	O
intel_syntax	O
=	O
-	O
1	int
;	O
return	O
print_insn	O
(	O
pc	O
,	O
info	*(void)
)	O
;	O
}	O
void	O
print_i386_disassembler_options	O
(	O
FILE	struct
*	O
stream	*(void)
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"\nThe following i386/x86-64 specific disassembler options are supported for use\nwith the -M switch (multiple options should be separated by commas):\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  x86-64      Disassemble in 64bit mode\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  i386        Disassemble in 32bit mode\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  i8086       Disassemble in 16bit mode\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  att         Display instruction in AT&T syntax\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  intel       Display instruction in Intel syntax\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  att-mnemonic\n"	*(char)
"              Display instruction in AT&T mnemonic\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  intel-mnemonic\n"	*(char)
"              Display instruction in Intel mnemonic\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  addr64      Assume 64bit address size\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  addr32      Assume 32bit address size\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  addr16      Assume 16bit address size\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  data32      Assume 32bit data size\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  data16      Assume 16bit data size\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  suffix      Always display instruction suffix in AT&T syntax\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  amd64       Display instruction in AMD64 ISA\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  intel64     Display instruction in Intel64 ISA\n"	*(char)
)	O
)	O
;	O
}	O
static	O
const	O
struct	O
dis386	O
bad_opcode	O
=	O
{	O
"(bad)"	*(char)
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
;	O
static	O
const	O
struct	O
dis386	O
*	O
get_valid_dis386	O
(	O
const	O
struct	O
dis386	O
*	O
dp	O
,	O
disassemble_info	O
*	O
info	*(void)
)	O
{	O
int	O
vindex	O
,	O
vex_table_index	O
;	O
if	O
(	O
dp	O
->	O
name	*(char)
!=	O
NULL	O
)	O
return	O
dp	O
;	O
switch	O
(	O
dp	O
->	O
op	O
[	O
0	int
]	O
.	O
bytemode	O
)	O
{	O
case	O
USE_REG_TABLE	O
:	O
dp	O
=	O
&	O
reg_table	O
[	O
dp	O
->	O
op	O
[	O
1	int
]	O
.	O
bytemode	O
]	O
[	O
modrm	O
.	O
reg	O
]	O
;	O
break	O
;	O
case	O
USE_MOD_TABLE	O
:	O
vindex	O
=	O
modrm	O
.	O
mod	O
==	O
0x3	int
?	O
1	int
:	O
0	int
;	O
dp	O
=	O
&	O
mod_table	O
[	O
dp	O
->	O
op	O
[	O
1	int
]	O
.	O
bytemode	O
]	O
[	O
vindex	O
]	O
;	O
break	O
;	O
case	O
USE_RM_TABLE	O
:	O
dp	O
=	O
&	O
rm_table	O
[	O
dp	O
->	O
op	O
[	O
1	int
]	O
.	O
bytemode	O
]	O
[	O
modrm	O
.	O
rm	O
]	O
;	O
break	O
;	O
case	O
USE_PREFIX_TABLE	O
:	O
if	O
(	O
need_vex	O
)	O
{	O
switch	O
(	O
vex	O
.	O
prefix	O
)	O
{	O
case	O
0	int
:	O
vindex	O
=	O
0	int
;	O
break	O
;	O
case	O
REPE_PREFIX_OPCODE	O
:	O
vindex	O
=	O
1	int
;	O
break	O
;	O
case	O
DATA_PREFIX_OPCODE	O
:	O
vindex	O
=	O
2	int
;	O
break	O
;	O
case	O
REPNE_PREFIX_OPCODE	O
:	O
vindex	O
=	O
3	int
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
break	O
;	O
}	O
}	O
else	O
{	O
int	O
last_prefix	O
=	O
-	O
1	int
;	O
int	O
prefix	O
=	O
0	int
;	O
vindex	O
=	O
0	int
;	O
if	O
(	O
(	O
prefixes	O
&	O
(	O
PREFIX_REPZ	O
|	O
PREFIX_REPNZ	O
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
last_repz_prefix	O
>	O
last_repnz_prefix	O
)	O
{	O
vindex	O
=	O
1	int
;	O
prefix	O
=	O
PREFIX_REPZ	O
;	O
last_prefix	O
=	O
last_repz_prefix	O
;	O
}	O
else	O
{	O
vindex	O
=	O
3	int
;	O
prefix	O
=	O
PREFIX_REPNZ	O
;	O
last_prefix	O
=	O
last_repnz_prefix	O
;	O
}	O
if	O
(	O
(	O
(	O
(	O
prefix_table	O
[	O
dp	O
->	O
op	O
[	O
1	int
]	O
.	O
bytemode	O
]	O
[	O
vindex	O
]	O
.	O
prefix_requirement	O
&	O
PREFIX_IGNORED	O
)	O
>>	O
PREFIX_IGNORED_SHIFT	O
)	O
&	O
prefix	O
)	O
!=	O
0	int
)	O
vindex	O
=	O
0	int
;	O
}	O
if	O
(	O
vindex	O
==	O
0	int
&&	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
!=	O
0	int
)	O
{	O
vindex	O
=	O
2	int
;	O
prefix	O
=	O
PREFIX_DATA	O
;	O
last_prefix	O
=	O
last_data_prefix	O
;	O
}	O
if	O
(	O
vindex	O
!=	O
0	int
)	O
{	O
used_prefixes	O
|=	O
prefix	O
;	O
all_prefixes	O
[	O
last_prefix	O
]	O
=	O
0	int
;	O
}	O
}	O
dp	O
=	O
&	O
prefix_table	O
[	O
dp	O
->	O
op	O
[	O
1	int
]	O
.	O
bytemode	O
]	O
[	O
vindex	O
]	O
;	O
break	O
;	O
case	O
USE_X86_64_TABLE	O
:	O
vindex	O
=	O
address_mode	O
==	O
mode_64bit	O
?	O
1	int
:	O
0	int
;	O
dp	O
=	O
&	O
x86_64_table	O
[	O
dp	O
->	O
op	O
[	O
1	int
]	O
.	O
bytemode	O
]	O
[	O
vindex	O
]	O
;	O
break	O
;	O
case	O
USE_3BYTE_TABLE	O
:	O
FETCH_DATA	O
(	O
info	*(void)
,	O
codep	O
+	O
2	int
)	O
;	O
vindex	O
=	O
*	O
codep	O
++	O
;	O
dp	O
=	O
&	O
three_byte_table	O
[	O
dp	O
->	O
op	O
[	O
1	int
]	O
.	O
bytemode	O
]	O
[	O
vindex	O
]	O
;	O
end_codep	O
=	O
codep	O
;	O
modrm	O
.	O
mod	O
=	O
(	O
*	O
codep	O
>>	O
6	int
)	O
&	O
3	int
;	O
modrm	O
.	O
reg	O
=	O
(	O
*	O
codep	O
>>	O
3	int
)	O
&	O
7	int
;	O
modrm	O
.	O
rm	O
=	O
*	O
codep	O
&	O
7	int
;	O
break	O
;	O
case	O
USE_VEX_LEN_TABLE	O
:	O
if	O
(	O
!	O
need_vex	O
)	O
abort	()->(void)
(	O
)	O
;	O
switch	O
(	O
vex	O
.	O
length	O
)	O
{	O
case	O
128	int
:	O
vindex	O
=	O
0	int
;	O
break	O
;	O
case	O
256	int
:	O
vindex	O
=	O
1	int
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
break	O
;	O
}	O
dp	O
=	O
&	O
vex_len_table	O
[	O
dp	O
->	O
op	O
[	O
1	int
]	O
.	O
bytemode	O
]	O
[	O
vindex	O
]	O
;	O
break	O
;	O
case	O
USE_EVEX_LEN_TABLE	O
:	O
if	O
(	O
!	O
vex	O
.	O
evex	O
)	O
abort	()->(void)
(	O
)	O
;	O
switch	O
(	O
vex	O
.	O
length	O
)	O
{	O
case	O
128	int
:	O
vindex	O
=	O
0	int
;	O
break	O
;	O
case	O
256	int
:	O
vindex	O
=	O
1	int
;	O
break	O
;	O
case	O
512	int
:	O
vindex	O
=	O
2	int
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
break	O
;	O
}	O
dp	O
=	O
&	O
evex_len_table	O
[	O
dp	O
->	O
op	O
[	O
1	int
]	O
.	O
bytemode	O
]	O
[	O
vindex	O
]	O
;	O
break	O
;	O
case	O
USE_XOP_8F_TABLE	O
:	O
FETCH_DATA	O
(	O
info	*(void)
,	O
codep	O
+	O
3	int
)	O
;	O
rex_ignored	O
=	O
rex	O
;	O
rex	O
=	O
~	O
(	O
*	O
codep	O
>>	O
5	int
)	O
&	O
0x7	int
;	O
switch	O
(	O
(	O
*	O
codep	O
&	O
0x1f	int
)	O
)	O
{	O
default	O
:	O
dp	O
=	O
&	O
bad_opcode	O
;	O
return	O
dp	O
;	O
case	O
0x8	int
:	O
vex_table_index	O
=	O
XOP_08	O
;	O
break	O
;	O
case	O
0x9	int
:	O
vex_table_index	O
=	O
XOP_09	O
;	O
break	O
;	O
case	O
0xa	int
:	O
vex_table_index	O
=	O
XOP_0A	O
;	O
break	O
;	O
}	O
codep	O
++	O
;	O
vex	O
.	O
w	O
=	O
*	O
codep	O
&	O
0x80	int
;	O
if	O
(	O
vex	O
.	O
w	O
&&	O
address_mode	O
==	O
mode_64bit	O
)	O
rex	O
|=	O
REX_W	O
;	O
vex	O
.	O
register_specifier	O
=	O
(	O
~	O
(	O
*	O
codep	O
>>	O
3	int
)	O
)	O
&	O
0xf	int
;	O
if	O
(	O
address_mode	O
!=	O
mode_64bit	O
)	O
{	O
rex	O
&=	O
~	O
REX_B	O
;	O
}	O
vex	O
.	O
length	O
=	O
(	O
*	O
codep	O
&	O
0x4	int
)	O
?	O
256	int
:	O
128	int
;	O
switch	O
(	O
(	O
*	O
codep	O
&	O
0x3	int
)	O
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
1	int
:	O
vex	O
.	O
prefix	O
=	O
DATA_PREFIX_OPCODE	O
;	O
break	O
;	O
case	O
2	int
:	O
vex	O
.	O
prefix	O
=	O
REPE_PREFIX_OPCODE	O
;	O
break	O
;	O
case	O
3	int
:	O
vex	O
.	O
prefix	O
=	O
REPNE_PREFIX_OPCODE	O
;	O
break	O
;	O
}	O
need_vex	O
=	O
1	int
;	O
need_vex_reg	O
=	O
1	int
;	O
codep	O
++	O
;	O
vindex	O
=	O
*	O
codep	O
++	O
;	O
dp	O
=	O
&	O
xop_table	O
[	O
vex_table_index	O
]	O
[	O
vindex	O
]	O
;	O
end_codep	O
=	O
codep	O
;	O
FETCH_DATA	O
(	O
info	*(void)
,	O
codep	O
+	O
1	int
)	O
;	O
modrm	O
.	O
mod	O
=	O
(	O
*	O
codep	O
>>	O
6	int
)	O
&	O
3	int
;	O
modrm	O
.	O
reg	O
=	O
(	O
*	O
codep	O
>>	O
3	int
)	O
&	O
7	int
;	O
modrm	O
.	O
rm	O
=	O
*	O
codep	O
&	O
7	int
;	O
break	O
;	O
case	O
USE_VEX_C4_TABLE	O
:	O
FETCH_DATA	O
(	O
info	*(void)
,	O
codep	O
+	O
3	int
)	O
;	O
rex_ignored	O
=	O
rex	O
;	O
rex	O
=	O
~	O
(	O
*	O
codep	O
>>	O
5	int
)	O
&	O
0x7	int
;	O
switch	O
(	O
(	O
*	O
codep	O
&	O
0x1f	int
)	O
)	O
{	O
default	O
:	O
dp	O
=	O
&	O
bad_opcode	O
;	O
return	O
dp	O
;	O
case	O
0x1	int
:	O
vex_table_index	O
=	O
VEX_0F	O
;	O
break	O
;	O
case	O
0x2	int
:	O
vex_table_index	O
=	O
VEX_0F38	O
;	O
break	O
;	O
case	O
0x3	int
:	O
vex_table_index	O
=	O
VEX_0F3A	O
;	O
break	O
;	O
}	O
codep	O
++	O
;	O
vex	O
.	O
w	O
=	O
*	O
codep	O
&	O
0x80	int
;	O
if	O
(	O
address_mode	O
==	O
mode_64bit	O
)	O
{	O
if	O
(	O
vex	O
.	O
w	O
)	O
rex	O
|=	O
REX_W	O
;	O
}	O
else	O
{	O
rex	O
=	O
0	int
;	O
}	O
vex	O
.	O
register_specifier	O
=	O
(	O
~	O
(	O
*	O
codep	O
>>	O
3	int
)	O
)	O
&	O
0xf	int
;	O
vex	O
.	O
length	O
=	O
(	O
*	O
codep	O
&	O
0x4	int
)	O
?	O
256	int
:	O
128	int
;	O
switch	O
(	O
(	O
*	O
codep	O
&	O
0x3	int
)	O
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
1	int
:	O
vex	O
.	O
prefix	O
=	O
DATA_PREFIX_OPCODE	O
;	O
break	O
;	O
case	O
2	int
:	O
vex	O
.	O
prefix	O
=	O
REPE_PREFIX_OPCODE	O
;	O
break	O
;	O
case	O
3	int
:	O
vex	O
.	O
prefix	O
=	O
REPNE_PREFIX_OPCODE	O
;	O
break	O
;	O
}	O
need_vex	O
=	O
1	int
;	O
need_vex_reg	O
=	O
1	int
;	O
codep	O
++	O
;	O
vindex	O
=	O
*	O
codep	O
++	O
;	O
dp	O
=	O
&	O
vex_table	O
[	O
vex_table_index	O
]	O
[	O
vindex	O
]	O
;	O
end_codep	O
=	O
codep	O
;	O
if	O
(	O
vex_table_index	O
!=	O
VEX_0F	O
||	O
vindex	O
!=	O
0x77	int
)	O
{	O
FETCH_DATA	O
(	O
info	*(void)
,	O
codep	O
+	O
1	int
)	O
;	O
modrm	O
.	O
mod	O
=	O
(	O
*	O
codep	O
>>	O
6	int
)	O
&	O
3	int
;	O
modrm	O
.	O
reg	O
=	O
(	O
*	O
codep	O
>>	O
3	int
)	O
&	O
7	int
;	O
modrm	O
.	O
rm	O
=	O
*	O
codep	O
&	O
7	int
;	O
}	O
break	O
;	O
case	O
USE_VEX_C5_TABLE	O
:	O
FETCH_DATA	O
(	O
info	*(void)
,	O
codep	O
+	O
2	int
)	O
;	O
rex_ignored	O
=	O
rex	O
;	O
rex	O
=	O
(	O
*	O
codep	O
&	O
0x80	int
)	O
?	O
0	int
:	O
REX_R	O
;	O
vex	O
.	O
register_specifier	O
=	O
(	O
~	O
(	O
*	O
codep	O
>>	O
3	int
)	O
)	O
&	O
0xf	int
;	O
vex	O
.	O
length	O
=	O
(	O
*	O
codep	O
&	O
0x4	int
)	O
?	O
256	int
:	O
128	int
;	O
switch	O
(	O
(	O
*	O
codep	O
&	O
0x3	int
)	O
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
1	int
:	O
vex	O
.	O
prefix	O
=	O
DATA_PREFIX_OPCODE	O
;	O
break	O
;	O
case	O
2	int
:	O
vex	O
.	O
prefix	O
=	O
REPE_PREFIX_OPCODE	O
;	O
break	O
;	O
case	O
3	int
:	O
vex	O
.	O
prefix	O
=	O
REPNE_PREFIX_OPCODE	O
;	O
break	O
;	O
}	O
need_vex	O
=	O
1	int
;	O
need_vex_reg	O
=	O
1	int
;	O
codep	O
++	O
;	O
vindex	O
=	O
*	O
codep	O
++	O
;	O
dp	O
=	O
&	O
vex_table	O
[	O
dp	O
->	O
op	O
[	O
1	int
]	O
.	O
bytemode	O
]	O
[	O
vindex	O
]	O
;	O
end_codep	O
=	O
codep	O
;	O
if	O
(	O
vindex	O
!=	O
0x77	int
)	O
{	O
FETCH_DATA	O
(	O
info	*(void)
,	O
codep	O
+	O
1	int
)	O
;	O
modrm	O
.	O
mod	O
=	O
(	O
*	O
codep	O
>>	O
6	int
)	O
&	O
3	int
;	O
modrm	O
.	O
reg	O
=	O
(	O
*	O
codep	O
>>	O
3	int
)	O
&	O
7	int
;	O
modrm	O
.	O
rm	O
=	O
*	O
codep	O
&	O
7	int
;	O
}	O
break	O
;	O
case	O
USE_VEX_W_TABLE	O
:	O
if	O
(	O
!	O
need_vex	O
)	O
abort	()->(void)
(	O
)	O
;	O
dp	O
=	O
&	O
vex_w_table	O
[	O
dp	O
->	O
op	O
[	O
1	int
]	O
.	O
bytemode	O
]	O
[	O
vex	O
.	O
w	O
?	O
1	int
:	O
0	int
]	O
;	O
break	O
;	O
case	O
USE_EVEX_TABLE	O
:	O
two_source_ops	O
=	O
0	int
;	O
vex	O
.	O
evex	O
=	O
1	int
;	O
FETCH_DATA	O
(	O
info	*(void)
,	O
codep	O
+	O
4	int
)	O
;	O
rex_ignored	O
=	O
rex	O
;	O
rex	O
=	O
~	O
(	O
*	O
codep	O
>>	O
5	int
)	O
&	O
0x7	int
;	O
vex	O
.	O
r	O
=	O
*	O
codep	O
&	O
0x10	int
;	O
switch	O
(	O
(	O
*	O
codep	O
&	O
0xf	int
)	O
)	O
{	O
default	O
:	O
return	O
&	O
bad_opcode	O
;	O
case	O
0x1	int
:	O
vex_table_index	O
=	O
EVEX_0F	O
;	O
break	O
;	O
case	O
0x2	int
:	O
vex_table_index	O
=	O
EVEX_0F38	O
;	O
break	O
;	O
case	O
0x3	int
:	O
vex_table_index	O
=	O
EVEX_0F3A	O
;	O
break	O
;	O
}	O
codep	O
++	O
;	O
vex	O
.	O
w	O
=	O
*	O
codep	O
&	O
0x80	int
;	O
if	O
(	O
vex	O
.	O
w	O
&&	O
address_mode	O
==	O
mode_64bit	O
)	O
rex	O
|=	O
REX_W	O
;	O
vex	O
.	O
register_specifier	O
=	O
(	O
~	O
(	O
*	O
codep	O
>>	O
3	int
)	O
)	O
&	O
0xf	int
;	O
if	O
(	O
!	O
(	O
*	O
codep	O
&	O
0x4	int
)	O
)	O
return	O
&	O
bad_opcode	O
;	O
switch	O
(	O
(	O
*	O
codep	O
&	O
0x3	int
)	O
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
1	int
:	O
vex	O
.	O
prefix	O
=	O
DATA_PREFIX_OPCODE	O
;	O
break	O
;	O
case	O
2	int
:	O
vex	O
.	O
prefix	O
=	O
REPE_PREFIX_OPCODE	O
;	O
break	O
;	O
case	O
3	int
:	O
vex	O
.	O
prefix	O
=	O
REPNE_PREFIX_OPCODE	O
;	O
break	O
;	O
}	O
codep	O
++	O
;	O
vex	O
.	O
ll	O
=	O
(	O
*	O
codep	O
>>	O
5	int
)	O
&	O
3	int
;	O
vex	O
.	O
b	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct(*(*`),long,long,*(struct`))),*(*(struct(*`,long,long,*`))),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct(struct(*`,long,long,*`),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(struct`),*(char),long,int,*(struct`),union(*`,long))),*(*(struct(*`,*`,long,int,*`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
=	O
(	O
*	O
codep	O
&	O
0x10	int
)	O
!=	O
0	int
;	O
vex	O
.	O
v	O
=	O
*	O
codep	O
&	O
0x8	int
;	O
vex	O
.	O
mask_register_specifier	O
=	O
*	O
codep	O
&	O
0x7	int
;	O
vex	O
.	O
zeroing	O
=	O
*	O
codep	O
&	O
0x80	int
;	O
if	O
(	O
address_mode	O
!=	O
mode_64bit	O
)	O
{	O
rex	O
&=	O
~	O
REX_B	O
;	O
vex	O
.	O
r	O
=	O
1	int
;	O
vex	O
.	O
v	O
=	O
1	int
;	O
}	O
need_vex	O
=	O
1	int
;	O
need_vex_reg	O
=	O
1	int
;	O
codep	O
++	O
;	O
vindex	O
=	O
*	O
codep	O
++	O
;	O
dp	O
=	O
&	O
evex_table	O
[	O
vex_table_index	O
]	O
[	O
vindex	O
]	O
;	O
end_codep	O
=	O
codep	O
;	O
FETCH_DATA	O
(	O
info	*(void)
,	O
codep	O
+	O
1	int
)	O
;	O
modrm	O
.	O
mod	O
=	O
(	O
*	O
codep	O
>>	O
6	int
)	O
&	O
3	int
;	O
modrm	O
.	O
reg	O
=	O
(	O
*	O
codep	O
>>	O
3	int
)	O
&	O
7	int
;	O
modrm	O
.	O
rm	O
=	O
*	O
codep	O
&	O
7	int
;	O
if	O
(	O
modrm	O
.	O
mod	O
==	O
3	int
&&	O
vex	O
.	O
b	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct(*(*`),long,long,*(struct`))),*(*(struct(*`,long,long,*`))),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct(struct(*`,long,long,*`),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(struct`),*(char),long,int,*(struct`),union(*`,long))),*(*(struct(*`,*`,long,int,*`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
)	O
vex	O
.	O
length	O
=	O
512	int
;	O
else	O
{	O
switch	O
(	O
vex	O
.	O
ll	O
)	O
{	O
case	O
0x0	int
:	O
vex	O
.	O
length	O
=	O
128	int
;	O
break	O
;	O
case	O
0x1	int
:	O
vex	O
.	O
length	O
=	O
256	int
;	O
break	O
;	O
case	O
0x2	int
:	O
vex	O
.	O
length	O
=	O
512	int
;	O
break	O
;	O
default	O
:	O
return	O
&	O
bad_opcode	O
;	O
}	O
}	O
break	O
;	O
case	O
0	int
:	O
dp	O
=	O
&	O
bad_opcode	O
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
if	O
(	O
dp	O
->	O
name	*(char)
!=	O
NULL	O
)	O
return	O
dp	O
;	O
else	O
return	O
get_valid_dis386	O
(	O
dp	O
,	O
info	*(void)
)	O
;	O
}	O
static	O
void	O
get_sib	O
(	O
disassemble_info	O
*	O
info	*(void)
,	O
int	O
sizeflag	O
)	O
{	O
if	O
(	O
need_modrm	O
&&	O
(	O
(	O
sizeflag	O
&	O
AFLAG	O
)	O
||	O
address_mode	O
==	O
mode_64bit	O
)	O
&&	O
modrm	O
.	O
mod	O
!=	O
3	int
&&	O
modrm	O
.	O
rm	O
==	O
4	int
)	O
{	O
FETCH_DATA	O
(	O
info	*(void)
,	O
codep	O
+	O
2	int
)	O
;	O
sib	O
.	O
index	(*(char),int)->(*(char))
=	O
(	O
codep	O
[	O
1	int
]	O
>>	O
3	int
)	O
&	O
7	int
;	O
sib	O
.	O
scale	O
=	O
(	O
codep	O
[	O
1	int
]	O
>>	O
6	int
)	O
&	O
3	int
;	O
sib	O
.	O
base	int
=	O
codep	O
[	O
1	int
]	O
&	O
7	int
;	O
}	O
}	O
static	O
int	O
print_insn	O
(	O
bfd_vma	long
pc	O
,	O
disassemble_info	O
*	O
info	*(void)
)	O
{	O
const	O
struct	O
dis386	O
*	O
dp	O
;	O
int	O
i	*(struct)
;	O
char	O
*	O
op_txt	O
[	O
MAX_OPERANDS	O
]	O
;	O
int	O
needcomma	O
;	O
int	O
sizeflag	O
,	O
orig_sizeflag	O
;	O
const	O
char	O
*	O
p	*(void)
;	O
struct	O
dis_private	O
priv	O
;	O
int	O
prefix_length	O
;	O
priv	O
.	O
orig_sizeflag	O
=	O
AFLAG	O
|	O
DFLAG	O
;	O
if	O
(	O
(	O
info	*(void)
->	O
mach	long
&	O
bfd_mach_i386_i386	O
)	O
!=	O
0	int
)	O
address_mode	O
=	O
mode_32bit	O
;	O
else	O
if	O
(	O
info	*(void)
->	O
mach	long
==	O
bfd_mach_i386_i8086	O
)	O
{	O
address_mode	O
=	O
mode_16bit	O
;	O
priv	O
.	O
orig_sizeflag	O
=	O
0	int
;	O
}	O
else	O
address_mode	O
=	O
mode_64bit	O
;	O
if	O
(	O
intel_syntax	O
==	O
(	O
char	O
)	O
-	O
1	int
)	O
intel_syntax	O
=	O
(	O
info	*(void)
->	O
mach	long
&	O
bfd_mach_i386_intel_syntax	O
)	O
!=	O
0	int
;	O
for	O
(	O
p	*(void)
=	O
info	*(void)
->	O
disassembler_options	O
;	O
p	*(void)
!=	O
NULL	O
;	O
)	O
{	O
if	O
(	O
CONST_STRNEQ	O
(	O
p	*(void)
,	O
"amd64"	*(char)
)	O
)	O
isa64	O
=	O
amd64	O
;	O
else	O
if	O
(	O
CONST_STRNEQ	O
(	O
p	*(void)
,	O
"intel64"	*(char)
)	O
)	O
isa64	O
=	O
intel64	O
;	O
else	O
if	O
(	O
CONST_STRNEQ	O
(	O
p	*(void)
,	O
"x86-64"	*(char)
)	O
)	O
{	O
address_mode	O
=	O
mode_64bit	O
;	O
priv	O
.	O
orig_sizeflag	O
=	O
AFLAG	O
|	O
DFLAG	O
;	O
}	O
else	O
if	O
(	O
CONST_STRNEQ	O
(	O
p	*(void)
,	O
"i386"	*(char)
)	O
)	O
{	O
address_mode	O
=	O
mode_32bit	O
;	O
priv	O
.	O
orig_sizeflag	O
=	O
AFLAG	O
|	O
DFLAG	O
;	O
}	O
else	O
if	O
(	O
CONST_STRNEQ	O
(	O
p	*(void)
,	O
"i8086"	*(char)
)	O
)	O
{	O
address_mode	O
=	O
mode_16bit	O
;	O
priv	O
.	O
orig_sizeflag	O
=	O
0	int
;	O
}	O
else	O
if	O
(	O
CONST_STRNEQ	O
(	O
p	*(void)
,	O
"intel"	*(char)
)	O
)	O
{	O
intel_syntax	O
=	O
1	int
;	O
if	O
(	O
CONST_STRNEQ	O
(	O
p	*(void)
+	O
5	int
,	O
"-mnemonic"	*(char)
)	O
)	O
intel_mnemonic	O
=	O
1	int
;	O
}	O
else	O
if	O
(	O
CONST_STRNEQ	O
(	O
p	*(void)
,	O
"att"	*(char)
)	O
)	O
{	O
intel_syntax	O
=	O
0	int
;	O
if	O
(	O
CONST_STRNEQ	O
(	O
p	*(void)
+	O
3	int
,	O
"-mnemonic"	*(char)
)	O
)	O
intel_mnemonic	O
=	O
0	int
;	O
}	O
else	O
if	O
(	O
CONST_STRNEQ	O
(	O
p	*(void)
,	O
"addr"	*(char)
)	O
)	O
{	O
if	O
(	O
address_mode	O
==	O
mode_64bit	O
)	O
{	O
if	O
(	O
p	*(void)
[	O
4	int
]	O
==	O
'3'	O
&&	O
p	*(void)
[	O
5	int
]	O
==	O
'2'	O
)	O
priv	O
.	O
orig_sizeflag	O
&=	O
~	O
AFLAG	O
;	O
else	O
if	O
(	O
p	*(void)
[	O
4	int
]	O
==	O
'6'	O
&&	O
p	*(void)
[	O
5	int
]	O
==	O
'4'	O
)	O
priv	O
.	O
orig_sizeflag	O
|=	O
AFLAG	O
;	O
}	O
else	O
{	O
if	O
(	O
p	*(void)
[	O
4	int
]	O
==	O
'1'	O
&&	O
p	*(void)
[	O
5	int
]	O
==	O
'6'	O
)	O
priv	O
.	O
orig_sizeflag	O
&=	O
~	O
AFLAG	O
;	O
else	O
if	O
(	O
p	*(void)
[	O
4	int
]	O
==	O
'3'	O
&&	O
p	*(void)
[	O
5	int
]	O
==	O
'2'	O
)	O
priv	O
.	O
orig_sizeflag	O
|=	O
AFLAG	O
;	O
}	O
}	O
else	O
if	O
(	O
CONST_STRNEQ	O
(	O
p	*(void)
,	O
"data"	*(char)
)	O
)	O
{	O
if	O
(	O
p	*(void)
[	O
4	int
]	O
==	O
'1'	O
&&	O
p	*(void)
[	O
5	int
]	O
==	O
'6'	O
)	O
priv	O
.	O
orig_sizeflag	O
&=	O
~	O
DFLAG	O
;	O
else	O
if	O
(	O
p	*(void)
[	O
4	int
]	O
==	O
'3'	O
&&	O
p	*(void)
[	O
5	int
]	O
==	O
'2'	O
)	O
priv	O
.	O
orig_sizeflag	O
|=	O
DFLAG	O
;	O
}	O
else	O
if	O
(	O
CONST_STRNEQ	O
(	O
p	*(void)
,	O
"suffix"	*(char)
)	O
)	O
priv	O
.	O
orig_sizeflag	O
|=	O
SUFFIX_ALWAYS	O
;	O
p	*(void)
=	O
strchr	(*(char),int)->(*(char))
(	O
p	*(void)
,	O
','	O
)	O
;	O
if	O
(	O
p	*(void)
!=	O
NULL	O
)	O
p	*(void)
++	O
;	O
}	O
if	O
(	O
address_mode	O
==	O
mode_64bit	O
&&	O
sizeof	O
(	O
bfd_vma	long
)	O
<	O
8	int
)	O
{	O
(	O
*	O
info	*(void)
->	O
fprintf_func	O
)	O
(	O
info	*(void)
->	O
stream	*(void)
,	O
_	O
(	O
"64-bit address is disabled"	*(char)
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
intel_syntax	O
)	O
{	O
names64	O
=	O
intel_names64	O
;	O
names32	O
=	O
intel_names32	O
;	O
names16	O
=	O
intel_names16	O
;	O
names8	O
=	O
intel_names8	O
;	O
names8rex	O
=	O
intel_names8rex	O
;	O
names_seg	O
=	O
intel_names_seg	O
;	O
names_mm	O
=	O
intel_names_mm	O
;	O
names_bnd	O
=	O
intel_names_bnd	O
;	O
names_xmm	O
=	O
intel_names_xmm	O
;	O
names_ymm	O
=	O
intel_names_ymm	O
;	O
names_zmm	O
=	O
intel_names_zmm	O
;	O
index64	O
=	O
intel_index64	O
;	O
index32	O
=	O
intel_index32	O
;	O
names_mask	O
=	O
intel_names_mask	O
;	O
index16	O
=	O
intel_index16	O
;	O
open_char	O
=	O
'['	O
;	O
close_char	O
=	O
']'	O
;	O
separator_char	O
=	O
'+'	O
;	O
scale_char	O
=	O
'*'	O
;	O
}	O
else	O
{	O
names64	O
=	O
att_names64	O
;	O
names32	O
=	O
att_names32	O
;	O
names16	O
=	O
att_names16	O
;	O
names8	O
=	O
att_names8	O
;	O
names8rex	O
=	O
att_names8rex	O
;	O
names_seg	O
=	O
att_names_seg	O
;	O
names_mm	O
=	O
att_names_mm	O
;	O
names_bnd	O
=	O
att_names_bnd	O
;	O
names_xmm	O
=	O
att_names_xmm	O
;	O
names_ymm	O
=	O
att_names_ymm	O
;	O
names_zmm	O
=	O
att_names_zmm	O
;	O
index64	O
=	O
att_index64	O
;	O
index32	O
=	O
att_index32	O
;	O
names_mask	O
=	O
att_names_mask	O
;	O
index16	O
=	O
att_index16	O
;	O
open_char	O
=	O
'('	O
;	O
close_char	O
=	O
')'	O
;	O
separator_char	O
=	O
','	O
;	O
scale_char	O
=	O
','	O
;	O
}	O
if	O
(	O
(	O
info	*(void)
->	O
mach	long
&	O
bfd_mach_l1om	O
)	O
!=	O
0	int
)	O
info	*(void)
->	O
bytes_per_line	O
=	O
8	int
;	O
else	O
info	*(void)
->	O
bytes_per_line	O
=	O
7	int
;	O
info	*(void)
->	O
private_data	O
=	O
&	O
priv	O
;	O
priv	O
.	O
max_fetched	O
=	O
priv	O
.	O
the_buffer	O
;	O
priv	O
.	O
insn_start	O
=	O
pc	O
;	O
obuf	O
[	O
0	int
]	O
=	O
0	int
;	O
for	O
(	O
i	*(struct)
=	O
0	int
;	O
i	*(struct)
<	O
MAX_OPERANDS	O
;	O
++	O
i	*(struct)
)	O
{	O
op_out	O
[	O
i	*(struct)
]	O
[	O
0	int
]	O
=	O
0	int
;	O
op_index	O
[	O
i	*(struct)
]	O
=	O
-	O
1	int
;	O
}	O
the_info	O
=	O
info	*(void)
;	O
start_pc	O
=	O
pc	O
;	O
start_codep	O
=	O
priv	O
.	O
the_buffer	O
;	O
codep	O
=	O
priv	O
.	O
the_buffer	O
;	O
if	O
(	O
OPCODES_SIGSETJMP	O
(	O
priv	O
.	O
bailout	O
)	O
!=	O
0	int
)	O
{	O
const	O
char	O
*	O
name	*(char)
;	O
if	O
(	O
codep	O
>	O
priv	O
.	O
the_buffer	O
)	O
{	O
name	*(char)
=	O
prefix_name	O
(	O
priv	O
.	O
the_buffer	O
[	O
0	int
]	O
,	O
priv	O
.	O
orig_sizeflag	O
)	O
;	O
if	O
(	O
name	*(char)
!=	O
NULL	O
)	O
(	O
*	O
info	*(void)
->	O
fprintf_func	O
)	O
(	O
info	*(void)
->	O
stream	*(void)
,	O
"%s"	*(char)
,	O
name	*(char)
)	O
;	O
else	O
{	O
(	O
*	O
info	*(void)
->	O
fprintf_func	O
)	O
(	O
info	*(void)
->	O
stream	*(void)
,	O
".byte 0x%x"	*(char)
,	O
(	O
unsigned	O
int	O
)	O
priv	O
.	O
the_buffer	O
[	O
0	int
]	O
)	O
;	O
}	O
return	O
1	int
;	O
}	O
return	O
-	O
1	int
;	O
}	O
obufp	O
=	O
obuf	O
;	O
sizeflag	O
=	O
priv	O
.	O
orig_sizeflag	O
;	O
if	O
(	O
!	O
ckprefix	O
(	O
)	O
||	O
rex_used	O
)	O
{	O
for	O
(	O
i	*(struct)
=	O
0	int
;	O
i	*(struct)
<	O
(	O
int	O
)	O
ARRAY_SIZE	O
(	O
all_prefixes	O
)	O
&&	O
all_prefixes	O
[	O
i	*(struct)
]	O
;	O
i	*(struct)
++	O
)	O
(	O
*	O
info	*(void)
->	O
fprintf_func	O
)	O
(	O
info	*(void)
->	O
stream	*(void)
,	O
"%s%s"	*(char)
,	O
i	*(struct)
==	O
0	int
?	O
""	*(char)
:	O
" "	*(char)
,	O
prefix_name	O
(	O
all_prefixes	O
[	O
i	*(struct)
]	O
,	O
sizeflag	O
)	O
)	O
;	O
return	O
i	*(struct)
;	O
}	O
insn_codep	O
=	O
codep	O
;	O
FETCH_DATA	O
(	O
info	*(void)
,	O
codep	O
+	O
1	int
)	O
;	O
two_source_ops	O
=	O
(	O
*	O
codep	O
==	O
0x62	int
)	O
||	O
(	O
*	O
codep	O
==	O
0xc8	int
)	O
;	O
if	O
(	O
(	O
(	O
prefixes	O
&	O
PREFIX_FWAIT	O
)	O
&&	O
(	O
(	O
*	O
codep	O
<	O
0xd8	int
)	O
||	O
(	O
*	O
codep	O
>	O
0xdf	int
)	O
)	O
)	O
)	O
{	O
for	O
(	O
i	*(struct)
=	O
0	int
;	O
i	*(struct)
<	O
fwait_prefix	O
&&	O
all_prefixes	O
[	O
i	*(struct)
]	O
;	O
i	*(struct)
++	O
)	O
(	O
*	O
info	*(void)
->	O
fprintf_func	O
)	O
(	O
info	*(void)
->	O
stream	*(void)
,	O
"%s "	*(char)
,	O
prefix_name	O
(	O
all_prefixes	O
[	O
i	*(struct)
]	O
,	O
sizeflag	O
)	O
)	O
;	O
(	O
*	O
info	*(void)
->	O
fprintf_func	O
)	O
(	O
info	*(void)
->	O
stream	*(void)
,	O
"fwait"	*(char)
)	O
;	O
return	O
i	*(struct)
+	O
1	int
;	O
}	O
if	O
(	O
*	O
codep	O
==	O
0x0f	int
)	O
{	O
unsigned	O
char	O
threebyte	O
;	O
codep	O
++	O
;	O
FETCH_DATA	O
(	O
info	*(void)
,	O
codep	O
+	O
1	int
)	O
;	O
threebyte	O
=	O
*	O
codep	O
;	O
dp	O
=	O
&	O
dis386_twobyte	O
[	O
threebyte	O
]	O
;	O
need_modrm	O
=	O
twobyte_has_modrm	O
[	O
*	O
codep	O
]	O
;	O
codep	O
++	O
;	O
}	O
else	O
{	O
dp	O
=	O
&	O
dis386	O
[	O
*	O
codep	O
]	O
;	O
need_modrm	O
=	O
onebyte_has_modrm	O
[	O
*	O
codep	O
]	O
;	O
codep	O
++	O
;	O
}	O
orig_sizeflag	O
=	O
sizeflag	O
;	O
if	O
(	O
prefixes	O
&	O
PREFIX_ADDR	O
)	O
sizeflag	O
^=	O
AFLAG	O
;	O
if	O
(	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
)	O
sizeflag	O
^=	O
DFLAG	O
;	O
end_codep	O
=	O
codep	O
;	O
if	O
(	O
need_modrm	O
)	O
{	O
FETCH_DATA	O
(	O
info	*(void)
,	O
codep	O
+	O
1	int
)	O
;	O
modrm	O
.	O
mod	O
=	O
(	O
*	O
codep	O
>>	O
6	int
)	O
&	O
3	int
;	O
modrm	O
.	O
reg	O
=	O
(	O
*	O
codep	O
>>	O
3	int
)	O
&	O
7	int
;	O
modrm	O
.	O
rm	O
=	O
*	O
codep	O
&	O
7	int
;	O
}	O
need_vex	O
=	O
0	int
;	O
need_vex_reg	O
=	O
0	int
;	O
vex_w_done	O
=	O
0	int
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
vex	O
,	O
0	int
,	O
sizeof	O
(	O
vex	O
)	O
)	O
;	O
if	O
(	O
dp	O
->	O
name	*(char)
==	O
NULL	O
&&	O
dp	O
->	O
op	O
[	O
0	int
]	O
.	O
bytemode	O
==	O
FLOATCODE	O
)	O
{	O
get_sib	O
(	O
info	*(void)
,	O
sizeflag	O
)	O
;	O
dofloat	O
(	O
sizeflag	O
)	O
;	O
}	O
else	O
{	O
dp	O
=	O
get_valid_dis386	O
(	O
dp	O
,	O
info	*(void)
)	O
;	O
if	O
(	O
dp	O
!=	O
NULL	O
&&	O
putop	O
(	O
dp	O
->	O
name	*(char)
,	O
sizeflag	O
)	O
==	O
0	int
)	O
{	O
get_sib	O
(	O
info	*(void)
,	O
sizeflag	O
)	O
;	O
for	O
(	O
i	*(struct)
=	O
0	int
;	O
i	*(struct)
<	O
MAX_OPERANDS	O
;	O
++	O
i	*(struct)
)	O
{	O
obufp	O
=	O
op_out	O
[	O
i	*(struct)
]	O
;	O
op_ad	O
=	O
MAX_OPERANDS	O
-	O
1	int
-	O
i	*(struct)
;	O
if	O
(	O
dp	O
->	O
op	O
[	O
i	*(struct)
]	O
.	O
rtn	O
)	O
(	O
*	O
dp	O
->	O
op	O
[	O
i	*(struct)
]	O
.	O
rtn	O
)	O
(	O
dp	O
->	O
op	O
[	O
i	*(struct)
]	O
.	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
if	O
(	O
i	*(struct)
==	O
0	int
&&	O
vex	O
.	O
evex	O
)	O
{	O
if	O
(	O
vex	O
.	O
mask_register_specifier	O
)	O
{	O
oappend	O
(	O
"{"	*(char)
)	O
;	O
oappend	O
(	O
names_mask	O
[	O
vex	O
.	O
mask_register_specifier	O
]	O
)	O
;	O
oappend	O
(	O
"}"	*(char)
)	O
;	O
}	O
if	O
(	O
vex	O
.	O
zeroing	O
)	O
oappend	O
(	O
"{z}"	*(char)
)	O
;	O
}	O
}	O
}	O
}	O
if	O
(	O
the_info	O
)	O
{	O
the_info	O
->	O
insn_info_valid	O
=	O
0	int
;	O
the_info	O
->	O
branch_delay_insns	O
=	O
0	int
;	O
the_info	O
->	O
data_size	O
=	O
0	int
;	O
the_info	O
->	O
insn_type	O
=	O
dis_noninsn	O
;	O
the_info	O
->	O
target	*(char)
=	O
0	int
;	O
the_info	O
->	O
target2	O
=	O
0	int
;	O
}	O
op_is_jump	O
=	O
FALSE	O
;	O
{	O
int	O
jump_detection	O
=	O
0	int
;	O
for	O
(	O
i	*(struct)
=	O
0	int
;	O
i	*(struct)
<	O
MAX_OPERANDS	O
;	O
++	O
i	*(struct)
)	O
{	O
if	O
(	O
(	O
dp	O
->	O
op	O
[	O
i	*(struct)
]	O
.	O
rtn	O
==	O
OP_J	O
)	O
||	O
(	O
dp	O
->	O
op	O
[	O
i	*(struct)
]	O
.	O
rtn	O
==	O
OP_indirE	O
)	O
)	O
jump_detection	O
|=	O
1	int
;	O
else	O
if	O
(	O
(	O
dp	O
->	O
op	O
[	O
i	*(struct)
]	O
.	O
rtn	O
==	O
BND_Fixup	O
)	O
||	O
(	O
!	O
dp	O
->	O
op	O
[	O
i	*(struct)
]	O
.	O
rtn	O
&&	O
!	O
dp	O
->	O
op	O
[	O
i	*(struct)
]	O
.	O
bytemode	O
)	O
)	O
jump_detection	O
|=	O
2	int
;	O
else	O
if	O
(	O
(	O
dp	O
->	O
op	O
[	O
i	*(struct)
]	O
.	O
bytemode	O
==	O
cond_jump_mode	O
)	O
||	O
(	O
dp	O
->	O
op	O
[	O
i	*(struct)
]	O
.	O
bytemode	O
==	O
loop_jcxz_mode	O
)	O
)	O
jump_detection	O
|=	O
4	int
;	O
}	O
if	O
(	O
(	O
jump_detection	O
&	O
0x3	int
)	O
==	O
0x3	int
)	O
{	O
op_is_jump	O
=	O
TRUE	int
;	O
if	O
(	O
jump_detection	O
&	O
0x4	int
)	O
the_info	O
->	O
insn_type	O
=	O
dis_condbranch	O
;	O
else	O
the_info	O
->	O
insn_type	O
=	O
(	O
dp	O
->	O
name	*(char)
&&	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
dp	O
->	O
name	*(char)
,	O
"call"	*(char)
,	O
4	int
)	O
)	O
?	O
dis_jsr	O
:	O
dis_branch	O
;	O
}	O
}	O
if	O
(	O
need_vex	O
&&	O
vex	O
.	O
register_specifier	O
!=	O
0	int
)	O
{	O
(	O
*	O
info	*(void)
->	O
fprintf_func	O
)	O
(	O
info	*(void)
->	O
stream	*(void)
,	O
"(bad)"	*(char)
)	O
;	O
return	O
end_codep	O
-	O
priv	O
.	O
the_buffer	O
;	O
}	O
if	O
(	O
rex_ignored	O
==	O
0	int
&&	O
(	O
rex	O
^	O
rex_used	O
)	O
==	O
0	int
&&	O
last_rex_prefix	O
>=	O
0	int
)	O
all_prefixes	O
[	O
last_rex_prefix	O
]	O
=	O
0	int
;	O
if	O
(	O
(	O
prefixes	O
&	O
(	O
PREFIX_CS	O
|	O
PREFIX_SS	O
|	O
PREFIX_DS	O
|	O
PREFIX_ES	O
|	O
PREFIX_FS	O
|	O
PREFIX_GS	O
)	O
)	O
!=	O
0	int
&&	O
(	O
used_prefixes	O
&	O
active_seg_prefix	O
)	O
!=	O
0	int
)	O
all_prefixes	O
[	O
last_seg_prefix	O
]	O
=	O
0	int
;	O
if	O
(	O
(	O
prefixes	O
&	O
PREFIX_ADDR	O
)	O
!=	O
0	int
&&	O
(	O
used_prefixes	O
&	O
PREFIX_ADDR	O
)	O
!=	O
0	int
)	O
all_prefixes	O
[	O
last_addr_prefix	O
]	O
=	O
0	int
;	O
if	O
(	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
!=	O
0	int
&&	O
(	O
used_prefixes	O
&	O
PREFIX_DATA	O
)	O
!=	O
0	int
)	O
all_prefixes	O
[	O
last_data_prefix	O
]	O
=	O
0	int
;	O
prefix_length	O
=	O
0	int
;	O
for	O
(	O
i	*(struct)
=	O
0	int
;	O
i	*(struct)
<	O
(	O
int	O
)	O
ARRAY_SIZE	O
(	O
all_prefixes	O
)	O
;	O
i	*(struct)
++	O
)	O
if	O
(	O
all_prefixes	O
[	O
i	*(struct)
]	O
)	O
{	O
const	O
char	O
*	O
name	*(char)
;	O
name	*(char)
=	O
prefix_name	O
(	O
all_prefixes	O
[	O
i	*(struct)
]	O
,	O
orig_sizeflag	O
)	O
;	O
if	O
(	O
name	*(char)
==	O
NULL	O
)	O
abort	()->(void)
(	O
)	O
;	O
prefix_length	O
+=	O
strlen	(*(char))->(long)
(	O
name	*(char)
)	O
+	O
1	int
;	O
(	O
*	O
info	*(void)
->	O
fprintf_func	O
)	O
(	O
info	*(void)
->	O
stream	*(void)
,	O
"%s "	*(char)
,	O
name	*(char)
)	O
;	O
}	O
if	O
(	O
dp	O
->	O
prefix_requirement	O
==	O
PREFIX_OPCODE	O
&&	O
dp	O
!=	O
&	O
bad_opcode	O
&&	O
(	O
(	O
(	O
prefixes	O
&	O
(	O
PREFIX_REPZ	O
|	O
PREFIX_REPNZ	O
)	O
)	O
!=	O
0	int
&&	O
(	O
used_prefixes	O
&	O
(	O
PREFIX_REPZ	O
|	O
PREFIX_REPNZ	O
)	O
)	O
==	O
0	int
)	O
||	O
(	O
(	O
(	O
(	O
prefixes	O
&	O
(	O
PREFIX_REPZ	O
|	O
PREFIX_REPNZ	O
|	O
PREFIX_DATA	O
)	O
)	O
==	O
PREFIX_DATA	O
)	O
&&	O
(	O
used_prefixes	O
&	O
PREFIX_DATA	O
)	O
==	O
0	int
)	O
)	O
)	O
)	O
{	O
(	O
*	O
info	*(void)
->	O
fprintf_func	O
)	O
(	O
info	*(void)
->	O
stream	*(void)
,	O
"(bad)"	*(char)
)	O
;	O
return	O
end_codep	O
-	O
priv	O
.	O
the_buffer	O
;	O
}	O
if	O
(	O
(	O
codep	O
-	O
start_codep	O
)	O
>	O
MAX_CODE_LENGTH	O
)	O
{	O
(	O
*	O
info	*(void)
->	O
fprintf_func	O
)	O
(	O
info	*(void)
->	O
stream	*(void)
,	O
"(bad)"	*(char)
)	O
;	O
return	O
MAX_CODE_LENGTH	O
;	O
}	O
obufp	O
=	O
mnemonicendp	O
;	O
for	O
(	O
i	*(struct)
=	O
strlen	(*(char))->(long)
(	O
obuf	O
)	O
+	O
prefix_length	O
;	O
i	*(struct)
<	O
6	int
;	O
i	*(struct)
++	O
)	O
oappend	O
(	O
" "	*(char)
)	O
;	O
oappend	O
(	O
" "	*(char)
)	O
;	O
(	O
*	O
info	*(void)
->	O
fprintf_func	O
)	O
(	O
info	*(void)
->	O
stream	*(void)
,	O
"%s"	*(char)
,	O
obuf	O
)	O
;	O
if	O
(	O
intel_syntax	O
||	O
two_source_ops	O
)	O
{	O
bfd_vma	long
riprel	O
;	O
for	O
(	O
i	*(struct)
=	O
0	int
;	O
i	*(struct)
<	O
MAX_OPERANDS	O
;	O
++	O
i	*(struct)
)	O
op_txt	O
[	O
i	*(struct)
]	O
=	O
op_out	O
[	O
i	*(struct)
]	O
;	O
if	O
(	O
intel_syntax	O
&&	O
dp	O
&&	O
dp	O
->	O
op	O
[	O
2	int
]	O
.	O
rtn	O
==	O
OP_Rounding	O
&&	O
dp	O
->	O
op	O
[	O
3	int
]	O
.	O
rtn	O
==	O
OP_E	O
&&	O
dp	O
->	O
op	O
[	O
4	int
]	O
.	O
rtn	O
==	O
NULL	O
)	O
{	O
op_txt	O
[	O
2	int
]	O
=	O
op_out	O
[	O
3	int
]	O
;	O
op_txt	O
[	O
3	int
]	O
=	O
op_out	O
[	O
2	int
]	O
;	O
}	O
for	O
(	O
i	*(struct)
=	O
0	int
;	O
i	*(struct)
<	O
(	O
MAX_OPERANDS	O
>>	O
1	int
)	O
;	O
++	O
i	*(struct)
)	O
{	O
op_ad	O
=	O
op_index	O
[	O
i	*(struct)
]	O
;	O
op_index	O
[	O
i	*(struct)
]	O
=	O
op_index	O
[	O
MAX_OPERANDS	O
-	O
1	int
-	O
i	*(struct)
]	O
;	O
op_index	O
[	O
MAX_OPERANDS	O
-	O
1	int
-	O
i	*(struct)
]	O
=	O
op_ad	O
;	O
riprel	O
=	O
op_riprel	O
[	O
i	*(struct)
]	O
;	O
op_riprel	O
[	O
i	*(struct)
]	O
=	O
op_riprel	O
[	O
MAX_OPERANDS	O
-	O
1	int
-	O
i	*(struct)
]	O
;	O
op_riprel	O
[	O
MAX_OPERANDS	O
-	O
1	int
-	O
i	*(struct)
]	O
=	O
riprel	O
;	O
}	O
}	O
else	O
{	O
for	O
(	O
i	*(struct)
=	O
0	int
;	O
i	*(struct)
<	O
MAX_OPERANDS	O
;	O
++	O
i	*(struct)
)	O
op_txt	O
[	O
MAX_OPERANDS	O
-	O
1	int
-	O
i	*(struct)
]	O
=	O
op_out	O
[	O
i	*(struct)
]	O
;	O
}	O
needcomma	O
=	O
0	int
;	O
for	O
(	O
i	*(struct)
=	O
0	int
;	O
i	*(struct)
<	O
MAX_OPERANDS	O
;	O
++	O
i	*(struct)
)	O
if	O
(	O
*	O
op_txt	O
[	O
i	*(struct)
]	O
)	O
{	O
if	O
(	O
needcomma	O
)	O
(	O
*	O
info	*(void)
->	O
fprintf_func	O
)	O
(	O
info	*(void)
->	O
stream	*(void)
,	O
","	*(char)
)	O
;	O
if	O
(	O
op_index	O
[	O
i	*(struct)
]	O
!=	O
-	O
1	int
&&	O
!	O
op_riprel	O
[	O
i	*(struct)
]	O
)	O
{	O
bfd_vma	long
target	*(char)
=	O
(	O
bfd_vma	long
)	O
op_address	O
[	O
op_index	O
[	O
i	*(struct)
]	O
]	O
;	O
if	O
(	O
the_info	O
&&	O
op_is_jump	O
)	O
{	O
the_info	O
->	O
insn_info_valid	O
=	O
1	int
;	O
the_info	O
->	O
branch_delay_insns	O
=	O
0	int
;	O
the_info	O
->	O
data_size	O
=	O
0	int
;	O
the_info	O
->	O
target	*(char)
=	O
target	*(char)
;	O
the_info	O
->	O
target2	O
=	O
0	int
;	O
}	O
(	O
*	O
info	*(void)
->	O
print_address_func	O
)	O
(	O
target	*(char)
,	O
info	*(void)
)	O
;	O
}	O
else	O
(	O
*	O
info	*(void)
->	O
fprintf_func	O
)	O
(	O
info	*(void)
->	O
stream	*(void)
,	O
"%s"	*(char)
,	O
op_txt	O
[	O
i	*(struct)
]	O
)	O
;	O
needcomma	O
=	O
1	int
;	O
}	O
for	O
(	O
i	*(struct)
=	O
0	int
;	O
i	*(struct)
<	O
MAX_OPERANDS	O
;	O
i	*(struct)
++	O
)	O
if	O
(	O
op_index	O
[	O
i	*(struct)
]	O
!=	O
-	O
1	int
&&	O
op_riprel	O
[	O
i	*(struct)
]	O
)	O
{	O
(	O
*	O
info	*(void)
->	O
fprintf_func	O
)	O
(	O
info	*(void)
->	O
stream	*(void)
,	O
"        # "	*(char)
)	O
;	O
(	O
*	O
info	*(void)
->	O
print_address_func	O
)	O
(	O
(	O
bfd_vma	long
)	O
(	O
start_pc	O
+	O
(	O
codep	O
-	O
start_codep	O
)	O
+	O
op_address	O
[	O
op_index	O
[	O
i	*(struct)
]	O
]	O
)	O
,	O
info	*(void)
)	O
;	O
break	O
;	O
}	O
return	O
codep	O
-	O
priv	O
.	O
the_buffer	O
;	O
}	O
static	O
const	O
char	O
*	O
float_mem	O
[	O
]	O
=	O
{	O
"fadd{s|}"	*(char)
,	O
"fmul{s|}"	*(char)
,	O
"fcom{s|}"	*(char)
,	O
"fcomp{s|}"	*(char)
,	O
"fsub{s|}"	*(char)
,	O
"fsubr{s|}"	*(char)
,	O
"fdiv{s|}"	*(char)
,	O
"fdivr{s|}"	*(char)
,	O
"fld{s|}"	*(char)
,	O
"(bad)"	*(char)
,	O
"fst{s|}"	*(char)
,	O
"fstp{s|}"	*(char)
,	O
"fldenvIC"	*(char)
,	O
"fldcw"	*(char)
,	O
"fNstenvIC"	*(char)
,	O
"fNstcw"	*(char)
,	O
"fiadd{l|}"	*(char)
,	O
"fimul{l|}"	*(char)
,	O
"ficom{l|}"	*(char)
,	O
"ficomp{l|}"	*(char)
,	O
"fisub{l|}"	*(char)
,	O
"fisubr{l|}"	*(char)
,	O
"fidiv{l|}"	*(char)
,	O
"fidivr{l|}"	*(char)
,	O
"fild{l|}"	*(char)
,	O
"fisttp{l|}"	*(char)
,	O
"fist{l|}"	*(char)
,	O
"fistp{l|}"	*(char)
,	O
"(bad)"	*(char)
,	O
"fld{t||t|}"	*(char)
,	O
"(bad)"	*(char)
,	O
"fstp{t||t|}"	*(char)
,	O
"fadd{l|}"	*(char)
,	O
"fmul{l|}"	*(char)
,	O
"fcom{l|}"	*(char)
,	O
"fcomp{l|}"	*(char)
,	O
"fsub{l|}"	*(char)
,	O
"fsubr{l|}"	*(char)
,	O
"fdiv{l|}"	*(char)
,	O
"fdivr{l|}"	*(char)
,	O
"fld{l|}"	*(char)
,	O
"fisttp{ll|}"	*(char)
,	O
"fst{l||}"	*(char)
,	O
"fstp{l|}"	*(char)
,	O
"frstorIC"	*(char)
,	O
"(bad)"	*(char)
,	O
"fNsaveIC"	*(char)
,	O
"fNstsw"	*(char)
,	O
"fiadd{s|}"	*(char)
,	O
"fimul{s|}"	*(char)
,	O
"ficom{s|}"	*(char)
,	O
"ficomp{s|}"	*(char)
,	O
"fisub{s|}"	*(char)
,	O
"fisubr{s|}"	*(char)
,	O
"fidiv{s|}"	*(char)
,	O
"fidivr{s|}"	*(char)
,	O
"fild{s|}"	*(char)
,	O
"fisttp{s|}"	*(char)
,	O
"fist{s|}"	*(char)
,	O
"fistp{s|}"	*(char)
,	O
"fbld"	*(char)
,	O
"fild{ll|}"	*(char)
,	O
"fbstp"	*(char)
,	O
"fistp{ll|}"	*(char)
,	O
}	O
;	O
static	O
const	O
unsigned	O
char	O
float_mem_mode	O
[	O
]	O
=	O
{	O
d_mode	O
,	O
d_mode	O
,	O
d_mode	O
,	O
d_mode	O
,	O
d_mode	O
,	O
d_mode	O
,	O
d_mode	O
,	O
d_mode	O
,	O
d_mode	O
,	O
0	int
,	O
d_mode	O
,	O
d_mode	O
,	O
0	int
,	O
w_mode	O
,	O
0	int
,	O
w_mode	O
,	O
d_mode	O
,	O
d_mode	O
,	O
d_mode	O
,	O
d_mode	O
,	O
d_mode	O
,	O
d_mode	O
,	O
d_mode	O
,	O
d_mode	O
,	O
d_mode	O
,	O
d_mode	O
,	O
d_mode	O
,	O
d_mode	O
,	O
0	int
,	O
t_mode	O
,	O
0	int
,	O
t_mode	O
,	O
q_mode	O
,	O
q_mode	O
,	O
q_mode	O
,	O
q_mode	O
,	O
q_mode	O
,	O
q_mode	O
,	O
q_mode	O
,	O
q_mode	O
,	O
q_mode	O
,	O
q_mode	O
,	O
q_mode	O
,	O
q_mode	O
,	O
0	int
,	O
0	int
,	O
0	int
,	O
w_mode	O
,	O
w_mode	O
,	O
w_mode	O
,	O
w_mode	O
,	O
w_mode	O
,	O
w_mode	O
,	O
w_mode	O
,	O
w_mode	O
,	O
w_mode	O
,	O
w_mode	O
,	O
w_mode	O
,	O
w_mode	O
,	O
w_mode	O
,	O
t_mode	O
,	O
q_mode	O
,	O
t_mode	O
,	O
q_mode	O
}	O
;	O
static	O
const	O
struct	O
dis386	O
float_reg	O
[	O
]	O
[	O
8	int
]	O
=	O
{	O
{	O
{	O
"fadd"	*(char)
,	O
{	O
ST	O
,	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fmul"	*(char)
,	O
{	O
ST	O
,	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fcom"	*(char)
,	O
{	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fcomp"	*(char)
,	O
{	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fsub"	*(char)
,	O
{	O
ST	O
,	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fsubr"	*(char)
,	O
{	O
ST	O
,	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fdiv"	*(char)
,	O
{	O
ST	O
,	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fdivr"	*(char)
,	O
{	O
ST	O
,	O
STi	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"fld"	*(char)
,	O
{	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fxch"	*(char)
,	O
{	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
FGRPd9_2	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
FGRPd9_4	O
}	O
,	O
{	O
FGRPd9_5	O
}	O
,	O
{	O
FGRPd9_6	O
}	O
,	O
{	O
FGRPd9_7	O
}	O
,	O
}	O
,	O
{	O
{	O
"fcmovb"	*(char)
,	O
{	O
ST	O
,	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fcmove"	*(char)
,	O
{	O
ST	O
,	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fcmovbe"	*(char)
,	O
{	O
ST	O
,	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fcmovu"	*(char)
,	O
{	O
ST	O
,	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
FGRPda_5	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
{	O
{	O
"fcmovnb"	*(char)
,	O
{	O
ST	O
,	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fcmovne"	*(char)
,	O
{	O
ST	O
,	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fcmovnbe"	*(char)
,	O
{	O
ST	O
,	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fcmovnu"	*(char)
,	O
{	O
ST	O
,	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
FGRPdb_4	O
}	O
,	O
{	O
"fucomi"	*(char)
,	O
{	O
ST	O
,	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fcomi"	*(char)
,	O
{	O
ST	O
,	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
{	O
{	O
"fadd"	*(char)
,	O
{	O
STi	O
,	O
ST	O
}	O
,	O
0	int
}	O
,	O
{	O
"fmul"	*(char)
,	O
{	O
STi	O
,	O
ST	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"fsub{!M|r}"	*(char)
,	O
{	O
STi	O
,	O
ST	O
}	O
,	O
0	int
}	O
,	O
{	O
"fsub{M|}"	*(char)
,	O
{	O
STi	O
,	O
ST	O
}	O
,	O
0	int
}	O
,	O
{	O
"fdiv{!M|r}"	*(char)
,	O
{	O
STi	O
,	O
ST	O
}	O
,	O
0	int
}	O
,	O
{	O
"fdiv{M|}"	*(char)
,	O
{	O
STi	O
,	O
ST	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"ffree"	*(char)
,	O
{	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"fst"	*(char)
,	O
{	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fstp"	*(char)
,	O
{	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fucom"	*(char)
,	O
{	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fucomp"	*(char)
,	O
{	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
{	O
{	O
"faddp"	*(char)
,	O
{	O
STi	O
,	O
ST	O
}	O
,	O
0	int
}	O
,	O
{	O
"fmulp"	*(char)
,	O
{	O
STi	O
,	O
ST	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
FGRPde_3	O
}	O
,	O
{	O
"fsub{!M|r}p"	*(char)
,	O
{	O
STi	O
,	O
ST	O
}	O
,	O
0	int
}	O
,	O
{	O
"fsub{M|}p"	*(char)
,	O
{	O
STi	O
,	O
ST	O
}	O
,	O
0	int
}	O
,	O
{	O
"fdiv{!M|r}p"	*(char)
,	O
{	O
STi	O
,	O
ST	O
}	O
,	O
0	int
}	O
,	O
{	O
"fdiv{M|}p"	*(char)
,	O
{	O
STi	O
,	O
ST	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"ffreep"	*(char)
,	O
{	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
FGRPdf_4	O
}	O
,	O
{	O
"fucomip"	*(char)
,	O
{	O
ST	O
,	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fcomip"	*(char)
,	O
{	O
ST	O
,	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
}	O
;	O
static	O
char	O
*	O
fgrps	O
[	O
]	O
[	O
8	int
]	O
=	O
{	O
{	O
"(bad)"	*(char)
,	O
"(bad)"	*(char)
,	O
"(bad)"	*(char)
,	O
"(bad)"	*(char)
,	O
"(bad)"	*(char)
,	O
"(bad)"	*(char)
,	O
"(bad)"	*(char)
,	O
"(bad)"	*(char)
,	O
}	O
,	O
{	O
"fnop"	*(char)
,	O
"(bad)"	*(char)
,	O
"(bad)"	*(char)
,	O
"(bad)"	*(char)
,	O
"(bad)"	*(char)
,	O
"(bad)"	*(char)
,	O
"(bad)"	*(char)
,	O
"(bad)"	*(char)
,	O
}	O
,	O
{	O
"fchs"	*(char)
,	O
"fabs"	*(char)
,	O
"(bad)"	*(char)
,	O
"(bad)"	*(char)
,	O
"ftst"	*(char)
,	O
"fxam"	*(char)
,	O
"(bad)"	*(char)
,	O
"(bad)"	*(char)
,	O
}	O
,	O
{	O
"fld1"	*(char)
,	O
"fldl2t"	*(char)
,	O
"fldl2e"	*(char)
,	O
"fldpi"	*(char)
,	O
"fldlg2"	*(char)
,	O
"fldln2"	*(char)
,	O
"fldz"	*(char)
,	O
"(bad)"	*(char)
,	O
}	O
,	O
{	O
"f2xm1"	*(char)
,	O
"fyl2x"	*(char)
,	O
"fptan"	*(char)
,	O
"fpatan"	*(char)
,	O
"fxtract"	*(char)
,	O
"fprem1"	*(char)
,	O
"fdecstp"	*(char)
,	O
"fincstp"	*(char)
,	O
}	O
,	O
{	O
"fprem"	*(char)
,	O
"fyl2xp1"	*(char)
,	O
"fsqrt"	*(char)
,	O
"fsincos"	*(char)
,	O
"frndint"	*(char)
,	O
"fscale"	*(char)
,	O
"fsin"	*(char)
,	O
"fcos"	*(char)
,	O
}	O
,	O
{	O
"(bad)"	*(char)
,	O
"fucompp"	*(char)
,	O
"(bad)"	*(char)
,	O
"(bad)"	*(char)
,	O
"(bad)"	*(char)
,	O
"(bad)"	*(char)
,	O
"(bad)"	*(char)
,	O
"(bad)"	*(char)
,	O
}	O
,	O
{	O
"fNeni(8087 only)"	*(char)
,	O
"fNdisi(8087 only)"	*(char)
,	O
"fNclex"	*(char)
,	O
"fNinit"	*(char)
,	O
"fNsetpm(287 only)"	*(char)
,	O
"frstpm(287 only)"	*(char)
,	O
"(bad)"	*(char)
,	O
"(bad)"	*(char)
,	O
}	O
,	O
{	O
"(bad)"	*(char)
,	O
"fcompp"	*(char)
,	O
"(bad)"	*(char)
,	O
"(bad)"	*(char)
,	O
"(bad)"	*(char)
,	O
"(bad)"	*(char)
,	O
"(bad)"	*(char)
,	O
"(bad)"	*(char)
,	O
}	O
,	O
{	O
"fNstsw"	*(char)
,	O
"(bad)"	*(char)
,	O
"(bad)"	*(char)
,	O
"(bad)"	*(char)
,	O
"(bad)"	*(char)
,	O
"(bad)"	*(char)
,	O
"(bad)"	*(char)
,	O
"(bad)"	*(char)
,	O
}	O
,	O
}	O
;	O
static	O
void	O
swap_operand	O
(	O
void	O
)	O
{	O
mnemonicendp	O
[	O
0	int
]	O
=	O
'.'	O
;	O
mnemonicendp	O
[	O
1	int
]	O
=	O
's'	O
;	O
mnemonicendp	O
+=	O
2	int
;	O
}	O
static	O
void	O
OP_Skip_MODRM	O
(	O
int	O
bytemode	O
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	O
ATTRIBUTE_UNUSED	O
)	O
{	O
MODRM_CHECK	O
;	O
codep	O
++	O
;	O
}	O
static	O
void	O
dofloat	O
(	O
int	O
sizeflag	O
)	O
{	O
const	O
struct	O
dis386	O
*	O
dp	O
;	O
unsigned	O
char	O
floatop	O
;	O
floatop	O
=	O
codep	O
[	O
-	O
1	int
]	O
;	O
if	O
(	O
modrm	O
.	O
mod	O
!=	O
3	int
)	O
{	O
int	O
fp_indx	O
=	O
(	O
floatop	O
-	O
0xd8	int
)	O
*	O
8	int
+	O
modrm	O
.	O
reg	O
;	O
putop	O
(	O
float_mem	O
[	O
fp_indx	O
]	O
,	O
sizeflag	O
)	O
;	O
obufp	O
=	O
op_out	O
[	O
0	int
]	O
;	O
op_ad	O
=	O
2	int
;	O
OP_E	O
(	O
float_mem_mode	O
[	O
fp_indx	O
]	O
,	O
sizeflag	O
)	O
;	O
return	O
;	O
}	O
MODRM_CHECK	O
;	O
codep	O
++	O
;	O
dp	O
=	O
&	O
float_reg	O
[	O
floatop	O
-	O
0xd8	int
]	O
[	O
modrm	O
.	O
reg	O
]	O
;	O
if	O
(	O
dp	O
->	O
name	*(char)
==	O
NULL	O
)	O
{	O
putop	O
(	O
fgrps	O
[	O
dp	O
->	O
op	O
[	O
0	int
]	O
.	O
bytemode	O
]	O
[	O
modrm	O
.	O
rm	O
]	O
,	O
sizeflag	O
)	O
;	O
if	O
(	O
floatop	O
==	O
0xdf	int
&&	O
codep	O
[	O
-	O
1	int
]	O
==	O
0xe0	int
)	O
strcpy	(*(char),*(char))->(*(char))
(	O
op_out	O
[	O
0	int
]	O
,	O
names16	O
[	O
0	int
]	O
)	O
;	O
}	O
else	O
{	O
putop	O
(	O
dp	O
->	O
name	*(char)
,	O
sizeflag	O
)	O
;	O
obufp	O
=	O
op_out	O
[	O
0	int
]	O
;	O
op_ad	O
=	O
2	int
;	O
if	O
(	O
dp	O
->	O
op	O
[	O
0	int
]	O
.	O
rtn	O
)	O
(	O
*	O
dp	O
->	O
op	O
[	O
0	int
]	O
.	O
rtn	O
)	O
(	O
dp	O
->	O
op	O
[	O
0	int
]	O
.	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
obufp	O
=	O
op_out	O
[	O
1	int
]	O
;	O
op_ad	O
=	O
1	int
;	O
if	O
(	O
dp	O
->	O
op	O
[	O
1	int
]	O
.	O
rtn	O
)	O
(	O
*	O
dp	O
->	O
op	O
[	O
1	int
]	O
.	O
rtn	O
)	O
(	O
dp	O
->	O
op	O
[	O
1	int
]	O
.	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
}	O
}	O
static	O
void	O
oappend_maybe_intel	O
(	O
const	O
char	O
*	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
)	O
{	O
oappend	O
(	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
+	O
intel_syntax	O
)	O
;	O
}	O
static	O
void	O
OP_ST	O
(	O
int	O
bytemode	O
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	O
ATTRIBUTE_UNUSED	O
)	O
{	O
oappend_maybe_intel	O
(	O
"%st"	*(char)
)	O
;	O
}	O
static	O
void	O
OP_STi	O
(	O
int	O
bytemode	O
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	O
ATTRIBUTE_UNUSED	O
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
scratchbuf	O
,	O
"%%st(%d)"	*(char)
,	O
modrm	O
.	O
rm	O
)	O
;	O
oappend_maybe_intel	O
(	O
scratchbuf	O
)	O
;	O
}	O
static	O
int	O
putop	O
(	O
const	O
char	O
*	O
in_template	O
,	O
int	O
sizeflag	O
)	O
{	O
const	O
char	O
*	O
p	*(void)
;	O
int	O
alt	O
=	O
0	int
;	O
int	O
cond	O
=	O
1	int
;	O
unsigned	O
int	O
l	O
=	O
0	int
,	O
len	long
=	O
1	int
;	O
char	O
last	O
[	O
4	int
]	O
;	O
for	O
(	O
p	*(void)
=	O
in_template	O
;	O
*	O
p	*(void)
;	O
p	*(void)
++	O
)	O
{	O
switch	O
(	O
*	O
p	*(void)
)	O
{	O
default	O
:	O
*	O
obufp	O
++	O
=	O
*	O
p	*(void)
;	O
break	O
;	O
case	O
'%'	O
:	O
len	long
++	O
;	O
break	O
;	O
case	O
'!'	O
:	O
cond	O
=	O
0	int
;	O
break	O
;	O
case	O
'{'	O
:	O
if	O
(	O
intel_syntax	O
)	O
{	O
while	O
(	O
*	O
++	O
p	*(void)
!=	O
'|'	O
)	O
if	O
(	O
*	O
p	*(void)
==	O
'}'	O
||	O
*	O
p	*(void)
==	O
'\0'	O
)	O
abort	()->(void)
(	O
)	O
;	O
}	O
case	O
'I'	O
:	O
alt	O
=	O
1	int
;	O
continue	O
;	O
case	O
'|'	O
:	O
while	O
(	O
*	O
++	O
p	*(void)
!=	O
'}'	O
)	O
{	O
if	O
(	O
*	O
p	*(void)
==	O
'\0'	O
)	O
abort	()->(void)
(	O
)	O
;	O
}	O
break	O
;	O
case	O
'}'	O
:	O
break	O
;	O
case	O
'A'	O
:	O
if	O
(	O
intel_syntax	O
)	O
break	O
;	O
if	O
(	O
modrm	O
.	O
mod	O
!=	O
3	int
||	O
(	O
sizeflag	O
&	O
SUFFIX_ALWAYS	O
)	O
)	O
*	O
obufp	O
++	O
=	O
'b'	O
;	O
break	O
;	O
case	O
'B'	O
:	O
if	O
(	O
l	O
==	O
0	int
&&	O
len	long
==	O
1	int
)	O
{	O
case_B	O
:	O
if	O
(	O
intel_syntax	O
)	O
break	O
;	O
if	O
(	O
sizeflag	O
&	O
SUFFIX_ALWAYS	O
)	O
*	O
obufp	O
++	O
=	O
'b'	O
;	O
}	O
else	O
{	O
if	O
(	O
l	O
!=	O
1	int
||	O
len	long
!=	O
2	int
||	O
last	O
[	O
0	int
]	O
!=	O
'L'	O
)	O
{	O
SAVE_LAST	O
(	O
*	O
p	*(void)
)	O
;	O
break	O
;	O
}	O
if	O
(	O
address_mode	O
==	O
mode_64bit	O
&&	O
!	O
(	O
prefixes	O
&	O
PREFIX_ADDR	O
)	O
)	O
{	O
*	O
obufp	O
++	O
=	O
'a'	O
;	O
*	O
obufp	O
++	O
=	O
'b'	O
;	O
*	O
obufp	O
++	O
=	O
's'	O
;	O
}	O
goto	O
case_B	O
;	O
}	O
break	O
;	O
case	O
'C'	O
:	O
if	O
(	O
intel_syntax	O
&&	O
!	O
alt	O
)	O
break	O
;	O
if	O
(	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
||	O
(	O
sizeflag	O
&	O
SUFFIX_ALWAYS	O
)	O
)	O
{	O
if	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
*	O
obufp	O
++	O
=	O
intel_syntax	O
?	O
'd'	O
:	O
'l'	O
;	O
else	O
*	O
obufp	O
++	O
=	O
intel_syntax	O
?	O
'w'	O
:	O
's'	O
;	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
;	O
}	O
break	O
;	O
case	O
'D'	O
:	O
if	O
(	O
intel_syntax	O
||	O
!	O
(	O
sizeflag	O
&	O
SUFFIX_ALWAYS	O
)	O
)	O
break	O
;	O
USED_REX	O
(	O
REX_W	O
)	O
;	O
if	O
(	O
modrm	O
.	O
mod	O
==	O
3	int
)	O
{	O
if	O
(	O
rex	O
&	O
REX_W	O
)	O
*	O
obufp	O
++	O
=	O
'q'	O
;	O
else	O
{	O
if	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
*	O
obufp	O
++	O
=	O
intel_syntax	O
?	O
'd'	O
:	O
'l'	O
;	O
else	O
*	O
obufp	O
++	O
=	O
'w'	O
;	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
;	O
}	O
}	O
else	O
*	O
obufp	O
++	O
=	O
'w'	O
;	O
break	O
;	O
case	O
'E'	O
:	O
if	O
(	O
address_mode	O
==	O
mode_64bit	O
)	O
{	O
if	O
(	O
sizeflag	O
&	O
AFLAG	O
)	O
*	O
obufp	O
++	O
=	O
'r'	O
;	O
else	O
*	O
obufp	O
++	O
=	O
'e'	O
;	O
}	O
else	O
if	O
(	O
sizeflag	O
&	O
AFLAG	O
)	O
*	O
obufp	O
++	O
=	O
'e'	O
;	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_ADDR	O
)	O
;	O
break	O
;	O
case	O
'F'	O
:	O
if	O
(	O
intel_syntax	O
)	O
break	O
;	O
if	O
(	O
(	O
prefixes	O
&	O
PREFIX_ADDR	O
)	O
||	O
(	O
sizeflag	O
&	O
SUFFIX_ALWAYS	O
)	O
)	O
{	O
if	O
(	O
sizeflag	O
&	O
AFLAG	O
)	O
*	O
obufp	O
++	O
=	O
address_mode	O
==	O
mode_64bit	O
?	O
'q'	O
:	O
'l'	O
;	O
else	O
*	O
obufp	O
++	O
=	O
address_mode	O
==	O
mode_64bit	O
?	O
'l'	O
:	O
'w'	O
;	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_ADDR	O
)	O
;	O
}	O
break	O
;	O
case	O
'G'	O
:	O
if	O
(	O
intel_syntax	O
||	O
(	O
obufp	O
[	O
-	O
1	int
]	O
!=	O
's'	O
&&	O
!	O
(	O
sizeflag	O
&	O
SUFFIX_ALWAYS	O
)	O
)	O
)	O
break	O
;	O
if	O
(	O
(	O
rex	O
&	O
REX_W	O
)	O
||	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
)	O
*	O
obufp	O
++	O
=	O
'l'	O
;	O
else	O
*	O
obufp	O
++	O
=	O
'w'	O
;	O
if	O
(	O
!	O
(	O
rex	O
&	O
REX_W	O
)	O
)	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
;	O
break	O
;	O
case	O
'H'	O
:	O
if	O
(	O
intel_syntax	O
)	O
break	O
;	O
if	O
(	O
(	O
prefixes	O
&	O
(	O
PREFIX_CS	O
|	O
PREFIX_DS	O
)	O
)	O
==	O
PREFIX_CS	O
||	O
(	O
prefixes	O
&	O
(	O
PREFIX_CS	O
|	O
PREFIX_DS	O
)	O
)	O
==	O
PREFIX_DS	O
)	O
{	O
used_prefixes	O
|=	O
prefixes	O
&	O
(	O
PREFIX_CS	O
|	O
PREFIX_DS	O
)	O
;	O
*	O
obufp	O
++	O
=	O
','	O
;	O
*	O
obufp	O
++	O
=	O
'p'	O
;	O
if	O
(	O
prefixes	O
&	O
PREFIX_DS	O
)	O
*	O
obufp	O
++	O
=	O
't'	O
;	O
else	O
*	O
obufp	O
++	O
=	O
'n'	O
;	O
}	O
break	O
;	O
case	O
'J'	O
:	O
if	O
(	O
intel_syntax	O
)	O
break	O
;	O
*	O
obufp	O
++	O
=	O
'l'	O
;	O
break	O
;	O
case	O
'K'	O
:	O
USED_REX	O
(	O
REX_W	O
)	O
;	O
if	O
(	O
rex	O
&	O
REX_W	O
)	O
*	O
obufp	O
++	O
=	O
'q'	O
;	O
else	O
*	O
obufp	O
++	O
=	O
'd'	O
;	O
break	O
;	O
case	O
'Z'	O
:	O
if	O
(	O
l	O
!=	O
0	int
||	O
len	long
!=	O
1	int
)	O
{	O
if	O
(	O
l	O
!=	O
1	int
||	O
len	long
!=	O
2	int
||	O
last	O
[	O
0	int
]	O
!=	O
'X'	O
)	O
{	O
SAVE_LAST	O
(	O
*	O
p	*(void)
)	O
;	O
break	O
;	O
}	O
if	O
(	O
!	O
need_vex	O
||	O
!	O
vex	O
.	O
evex	O
)	O
abort	()->(void)
(	O
)	O
;	O
if	O
(	O
intel_syntax	O
||	O
(	O
(	O
modrm	O
.	O
mod	O
==	O
3	int
||	O
vex	O
.	O
b	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct(*(*`),long,long,*(struct`))),*(*(struct(*`,long,long,*`))),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct(struct(*`,long,long,*`),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(struct`),*(char),long,int,*(struct`),union(*`,long))),*(*(struct(*`,*`,long,int,*`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
)	O
&&	O
!	O
(	O
sizeflag	O
&	O
SUFFIX_ALWAYS	O
)	O
)	O
)	O
break	O
;	O
switch	O
(	O
vex	O
.	O
length	O
)	O
{	O
case	O
128	int
:	O
*	O
obufp	O
++	O
=	O
'x'	O
;	O
break	O
;	O
case	O
256	int
:	O
*	O
obufp	O
++	O
=	O
'y'	O
;	O
break	O
;	O
case	O
512	int
:	O
*	O
obufp	O
++	O
=	O
'z'	O
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
break	O
;	O
}	O
if	O
(	O
intel_syntax	O
)	O
break	O
;	O
if	O
(	O
address_mode	O
==	O
mode_64bit	O
&&	O
(	O
sizeflag	O
&	O
SUFFIX_ALWAYS	O
)	O
)	O
{	O
*	O
obufp	O
++	O
=	O
'q'	O
;	O
break	O
;	O
}	O
goto	O
case_L	O
;	O
case	O
'L'	O
:	O
if	O
(	O
l	O
!=	O
0	int
||	O
len	long
!=	O
1	int
)	O
{	O
SAVE_LAST	O
(	O
*	O
p	*(void)
)	O
;	O
break	O
;	O
}	O
case_L	O
:	O
if	O
(	O
intel_syntax	O
)	O
break	O
;	O
if	O
(	O
sizeflag	O
&	O
SUFFIX_ALWAYS	O
)	O
*	O
obufp	O
++	O
=	O
'l'	O
;	O
break	O
;	O
case	O
'M'	O
:	O
if	O
(	O
intel_mnemonic	O
!=	O
cond	O
)	O
*	O
obufp	O
++	O
=	O
'r'	O
;	O
break	O
;	O
case	O
'N'	O
:	O
if	O
(	O
(	O
prefixes	O
&	O
PREFIX_FWAIT	O
)	O
==	O
0	int
)	O
*	O
obufp	O
++	O
=	O
'n'	O
;	O
else	O
used_prefixes	O
|=	O
PREFIX_FWAIT	O
;	O
break	O
;	O
case	O
'O'	O
:	O
USED_REX	O
(	O
REX_W	O
)	O
;	O
if	O
(	O
rex	O
&	O
REX_W	O
)	O
*	O
obufp	O
++	O
=	O
'o'	O
;	O
else	O
if	O
(	O
intel_syntax	O
&&	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
)	O
*	O
obufp	O
++	O
=	O
'q'	O
;	O
else	O
*	O
obufp	O
++	O
=	O
'd'	O
;	O
if	O
(	O
!	O
(	O
rex	O
&	O
REX_W	O
)	O
)	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
;	O
break	O
;	O
case	O
'&'	O
:	O
if	O
(	O
!	O
intel_syntax	O
&&	O
address_mode	O
==	O
mode_64bit	O
&&	O
isa64	O
==	O
intel64	O
)	O
{	O
*	O
obufp	O
++	O
=	O
'q'	O
;	O
break	O
;	O
}	O
case	O
'T'	O
:	O
if	O
(	O
!	O
intel_syntax	O
&&	O
address_mode	O
==	O
mode_64bit	O
&&	O
(	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
||	O
(	O
rex	O
&	O
REX_W	O
)	O
)	O
)	O
{	O
*	O
obufp	O
++	O
=	O
'q'	O
;	O
break	O
;	O
}	O
goto	O
case_P	O
;	O
case	O
'P'	O
:	O
if	O
(	O
l	O
==	O
0	int
&&	O
len	long
==	O
1	int
)	O
{	O
case_P	O
:	O
if	O
(	O
intel_syntax	O
)	O
{	O
if	O
(	O
(	O
rex	O
&	O
REX_W	O
)	O
==	O
0	int
&&	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
)	O
{	O
if	O
(	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
==	O
0	int
)	O
*	O
obufp	O
++	O
=	O
'w'	O
;	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
;	O
}	O
break	O
;	O
}	O
if	O
(	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
||	O
(	O
rex	O
&	O
REX_W	O
)	O
||	O
(	O
sizeflag	O
&	O
SUFFIX_ALWAYS	O
)	O
)	O
{	O
USED_REX	O
(	O
REX_W	O
)	O
;	O
if	O
(	O
rex	O
&	O
REX_W	O
)	O
*	O
obufp	O
++	O
=	O
'q'	O
;	O
else	O
{	O
if	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
*	O
obufp	O
++	O
=	O
'l'	O
;	O
else	O
*	O
obufp	O
++	O
=	O
'w'	O
;	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
l	O
!=	O
1	int
||	O
len	long
!=	O
2	int
||	O
last	O
[	O
0	int
]	O
!=	O
'L'	O
)	O
{	O
SAVE_LAST	O
(	O
*	O
p	*(void)
)	O
;	O
break	O
;	O
}	O
if	O
(	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
||	O
(	O
rex	O
&	O
REX_W	O
)	O
||	O
(	O
sizeflag	O
&	O
SUFFIX_ALWAYS	O
)	O
)	O
{	O
USED_REX	O
(	O
REX_W	O
)	O
;	O
if	O
(	O
rex	O
&	O
REX_W	O
)	O
*	O
obufp	O
++	O
=	O
'q'	O
;	O
else	O
{	O
if	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
*	O
obufp	O
++	O
=	O
intel_syntax	O
?	O
'd'	O
:	O
'l'	O
;	O
else	O
*	O
obufp	O
++	O
=	O
'w'	O
;	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
;	O
}	O
}	O
}	O
break	O
;	O
case	O
'U'	O
:	O
if	O
(	O
intel_syntax	O
)	O
break	O
;	O
if	O
(	O
address_mode	O
==	O
mode_64bit	O
&&	O
(	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
||	O
(	O
rex	O
&	O
REX_W	O
)	O
)	O
)	O
{	O
if	O
(	O
modrm	O
.	O
mod	O
!=	O
3	int
||	O
(	O
sizeflag	O
&	O
SUFFIX_ALWAYS	O
)	O
)	O
*	O
obufp	O
++	O
=	O
'q'	O
;	O
break	O
;	O
}	O
goto	O
case_Q	O
;	O
case	O
'Q'	O
:	O
if	O
(	O
l	O
==	O
0	int
&&	O
len	long
==	O
1	int
)	O
{	O
case_Q	O
:	O
if	O
(	O
intel_syntax	O
&&	O
!	O
alt	O
)	O
break	O
;	O
USED_REX	O
(	O
REX_W	O
)	O
;	O
if	O
(	O
modrm	O
.	O
mod	O
!=	O
3	int
||	O
(	O
sizeflag	O
&	O
SUFFIX_ALWAYS	O
)	O
)	O
{	O
if	O
(	O
rex	O
&	O
REX_W	O
)	O
*	O
obufp	O
++	O
=	O
'q'	O
;	O
else	O
{	O
if	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
*	O
obufp	O
++	O
=	O
intel_syntax	O
?	O
'd'	O
:	O
'l'	O
;	O
else	O
*	O
obufp	O
++	O
=	O
'w'	O
;	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
l	O
!=	O
1	int
||	O
len	long
!=	O
2	int
||	O
last	O
[	O
0	int
]	O
!=	O
'L'	O
)	O
{	O
SAVE_LAST	O
(	O
*	O
p	*(void)
)	O
;	O
break	O
;	O
}	O
if	O
(	O
intel_syntax	O
||	O
(	O
modrm	O
.	O
mod	O
==	O
3	int
&&	O
!	O
(	O
sizeflag	O
&	O
SUFFIX_ALWAYS	O
)	O
)	O
)	O
break	O
;	O
if	O
(	O
(	O
rex	O
&	O
REX_W	O
)	O
)	O
{	O
USED_REX	O
(	O
REX_W	O
)	O
;	O
*	O
obufp	O
++	O
=	O
'q'	O
;	O
}	O
else	O
*	O
obufp	O
++	O
=	O
'l'	O
;	O
}	O
break	O
;	O
case	O
'R'	O
:	O
USED_REX	O
(	O
REX_W	O
)	O
;	O
if	O
(	O
rex	O
&	O
REX_W	O
)	O
*	O
obufp	O
++	O
=	O
'q'	O
;	O
else	O
if	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
{	O
if	O
(	O
intel_syntax	O
)	O
*	O
obufp	O
++	O
=	O
'd'	O
;	O
else	O
*	O
obufp	O
++	O
=	O
'l'	O
;	O
}	O
else	O
*	O
obufp	O
++	O
=	O
'w'	O
;	O
if	O
(	O
intel_syntax	O
&&	O
!	O
p	*(void)
[	O
1	int
]	O
&&	O
(	O
(	O
rex	O
&	O
REX_W	O
)	O
||	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
)	O
)	O
*	O
obufp	O
++	O
=	O
'e'	O
;	O
if	O
(	O
!	O
(	O
rex	O
&	O
REX_W	O
)	O
)	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
;	O
break	O
;	O
case	O
'V'	O
:	O
if	O
(	O
l	O
==	O
0	int
&&	O
len	long
==	O
1	int
)	O
{	O
if	O
(	O
intel_syntax	O
)	O
break	O
;	O
if	O
(	O
address_mode	O
==	O
mode_64bit	O
&&	O
(	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
||	O
(	O
rex	O
&	O
REX_W	O
)	O
)	O
)	O
{	O
if	O
(	O
sizeflag	O
&	O
SUFFIX_ALWAYS	O
)	O
*	O
obufp	O
++	O
=	O
'q'	O
;	O
break	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
l	O
!=	O
1	int
||	O
len	long
!=	O
2	int
||	O
last	O
[	O
0	int
]	O
!=	O
'L'	O
)	O
{	O
SAVE_LAST	O
(	O
*	O
p	*(void)
)	O
;	O
break	O
;	O
}	O
if	O
(	O
rex	O
&	O
REX_W	O
)	O
{	O
*	O
obufp	O
++	O
=	O
'a'	O
;	O
*	O
obufp	O
++	O
=	O
'b'	O
;	O
*	O
obufp	O
++	O
=	O
's'	O
;	O
}	O
}	O
goto	O
case_S	O
;	O
case	O
'S'	O
:	O
if	O
(	O
l	O
==	O
0	int
&&	O
len	long
==	O
1	int
)	O
{	O
case_S	O
:	O
if	O
(	O
intel_syntax	O
)	O
break	O
;	O
if	O
(	O
sizeflag	O
&	O
SUFFIX_ALWAYS	O
)	O
{	O
if	O
(	O
rex	O
&	O
REX_W	O
)	O
*	O
obufp	O
++	O
=	O
'q'	O
;	O
else	O
{	O
if	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
*	O
obufp	O
++	O
=	O
'l'	O
;	O
else	O
*	O
obufp	O
++	O
=	O
'w'	O
;	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
l	O
!=	O
1	int
||	O
len	long
!=	O
2	int
||	O
last	O
[	O
0	int
]	O
!=	O
'L'	O
)	O
{	O
SAVE_LAST	O
(	O
*	O
p	*(void)
)	O
;	O
break	O
;	O
}	O
if	O
(	O
address_mode	O
==	O
mode_64bit	O
&&	O
!	O
(	O
prefixes	O
&	O
PREFIX_ADDR	O
)	O
)	O
{	O
*	O
obufp	O
++	O
=	O
'a'	O
;	O
*	O
obufp	O
++	O
=	O
'b'	O
;	O
*	O
obufp	O
++	O
=	O
's'	O
;	O
}	O
goto	O
case_S	O
;	O
}	O
break	O
;	O
case	O
'X'	O
:	O
if	O
(	O
l	O
!=	O
0	int
||	O
len	long
!=	O
1	int
)	O
{	O
SAVE_LAST	O
(	O
*	O
p	*(void)
)	O
;	O
break	O
;	O
}	O
if	O
(	O
need_vex	O
&&	O
vex	O
.	O
prefix	O
)	O
{	O
if	O
(	O
vex	O
.	O
prefix	O
==	O
DATA_PREFIX_OPCODE	O
)	O
*	O
obufp	O
++	O
=	O
'd'	O
;	O
else	O
*	O
obufp	O
++	O
=	O
's'	O
;	O
}	O
else	O
{	O
if	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
*	O
obufp	O
++	O
=	O
'd'	O
;	O
else	O
*	O
obufp	O
++	O
=	O
's'	O
;	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
;	O
}	O
break	O
;	O
case	O
'Y'	O
:	O
if	O
(	O
l	O
==	O
0	int
&&	O
len	long
==	O
1	int
)	O
abort	()->(void)
(	O
)	O
;	O
else	O
{	O
if	O
(	O
l	O
!=	O
1	int
||	O
len	long
!=	O
2	int
||	O
last	O
[	O
0	int
]	O
!=	O
'X'	O
)	O
{	O
SAVE_LAST	O
(	O
*	O
p	*(void)
)	O
;	O
break	O
;	O
}	O
if	O
(	O
!	O
need_vex	O
)	O
abort	()->(void)
(	O
)	O
;	O
if	O
(	O
intel_syntax	O
||	O
(	O
(	O
modrm	O
.	O
mod	O
==	O
3	int
||	O
vex	O
.	O
b	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct(*(*`),long,long,*(struct`))),*(*(struct(*`,long,long,*`))),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct(struct(*`,long,long,*`),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(struct`),*(char),long,int,*(struct`),union(*`,long))),*(*(struct(*`,*`,long,int,*`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
)	O
&&	O
!	O
(	O
sizeflag	O
&	O
SUFFIX_ALWAYS	O
)	O
)	O
)	O
break	O
;	O
switch	O
(	O
vex	O
.	O
length	O
)	O
{	O
case	O
128	int
:	O
*	O
obufp	O
++	O
=	O
'x'	O
;	O
break	O
;	O
case	O
256	int
:	O
*	O
obufp	O
++	O
=	O
'y'	O
;	O
break	O
;	O
case	O
512	int
:	O
if	O
(	O
!	O
vex	O
.	O
evex	O
)	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
}	O
break	O
;	O
case	O
'W'	O
:	O
if	O
(	O
l	O
==	O
0	int
&&	O
len	long
==	O
1	int
)	O
{	O
USED_REX	O
(	O
REX_W	O
)	O
;	O
if	O
(	O
rex	O
&	O
REX_W	O
)	O
{	O
if	O
(	O
intel_syntax	O
)	O
*	O
obufp	O
++	O
=	O
'd'	O
;	O
else	O
*	O
obufp	O
++	O
=	O
'l'	O
;	O
}	O
else	O
if	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
*	O
obufp	O
++	O
=	O
'w'	O
;	O
else	O
*	O
obufp	O
++	O
=	O
'b'	O
;	O
if	O
(	O
!	O
(	O
rex	O
&	O
REX_W	O
)	O
)	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
l	O
!=	O
1	int
||	O
len	long
!=	O
2	int
||	O
(	O
last	O
[	O
0	int
]	O
!=	O
'X'	O
&&	O
last	O
[	O
0	int
]	O
!=	O
'L'	O
)	O
)	O
{	O
SAVE_LAST	O
(	O
*	O
p	*(void)
)	O
;	O
break	O
;	O
}	O
if	O
(	O
!	O
need_vex	O
)	O
abort	()->(void)
(	O
)	O
;	O
if	O
(	O
last	O
[	O
0	int
]	O
==	O
'X'	O
)	O
*	O
obufp	O
++	O
=	O
vex	O
.	O
w	O
?	O
'd'	O
:	O
's'	O
;	O
else	O
*	O
obufp	O
++	O
=	O
vex	O
.	O
w	O
?	O
'q'	O
:	O
'd'	O
;	O
}	O
break	O
;	O
case	O
'^'	O
:	O
if	O
(	O
intel_syntax	O
)	O
break	O
;	O
if	O
(	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
||	O
(	O
sizeflag	O
&	O
SUFFIX_ALWAYS	O
)	O
)	O
{	O
if	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
*	O
obufp	O
++	O
=	O
'l'	O
;	O
else	O
*	O
obufp	O
++	O
=	O
'w'	O
;	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
;	O
}	O
break	O
;	O
case	O
'@'	O
:	O
if	O
(	O
intel_syntax	O
)	O
break	O
;	O
if	O
(	O
address_mode	O
==	O
mode_64bit	O
&&	O
(	O
isa64	O
==	O
intel64	O
||	O
(	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
||	O
(	O
rex	O
&	O
REX_W	O
)	O
)	O
)	O
)	O
*	O
obufp	O
++	O
=	O
'q'	O
;	O
else	O
if	O
(	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
)	O
{	O
if	O
(	O
!	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
)	O
*	O
obufp	O
++	O
=	O
'w'	O
;	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
;	O
}	O
break	O
;	O
}	O
alt	O
=	O
0	int
;	O
}	O
*	O
obufp	O
=	O
0	int
;	O
mnemonicendp	O
=	O
obufp	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
oappend	O
(	O
const	O
char	O
*	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
)	O
{	O
obufp	O
=	O
stpcpy	(*(char),*(char))->(*(char))
(	O
obufp	O
,	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
)	O
;	O
}	O
static	O
void	O
append_seg	O
(	O
void	O
)	O
{	O
if	O
(	O
!	O
active_seg_prefix	O
)	O
return	O
;	O
used_prefixes	O
|=	O
active_seg_prefix	O
;	O
switch	O
(	O
active_seg_prefix	O
)	O
{	O
case	O
PREFIX_CS	O
:	O
oappend_maybe_intel	O
(	O
"%cs:"	*(char)
)	O
;	O
break	O
;	O
case	O
PREFIX_DS	O
:	O
oappend_maybe_intel	O
(	O
"%ds:"	*(char)
)	O
;	O
break	O
;	O
case	O
PREFIX_SS	O
:	O
oappend_maybe_intel	O
(	O
"%ss:"	*(char)
)	O
;	O
break	O
;	O
case	O
PREFIX_ES	O
:	O
oappend_maybe_intel	O
(	O
"%es:"	*(char)
)	O
;	O
break	O
;	O
case	O
PREFIX_FS	O
:	O
oappend_maybe_intel	O
(	O
"%fs:"	*(char)
)	O
;	O
break	O
;	O
case	O
PREFIX_GS	O
:	O
oappend_maybe_intel	O
(	O
"%gs:"	*(char)
)	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
static	O
void	O
OP_indirE	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
if	O
(	O
!	O
intel_syntax	O
)	O
oappend	O
(	O
"*"	*(char)
)	O
;	O
OP_E	O
(	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
}	O
static	O
void	O
print_operand_value	O
(	O
char	O
*	O
buf	*(void)
,	O
int	O
hex	O
,	O
bfd_vma	long
disp	O
)	O
{	O
if	O
(	O
address_mode	O
==	O
mode_64bit	O
)	O
{	O
if	O
(	O
hex	O
)	O
{	O
char	O
tmp	O
[	O
30	int
]	O
;	O
int	O
i	*(struct)
;	O
buf	*(void)
[	O
0	int
]	O
=	O
'0'	O
;	O
buf	*(void)
[	O
1	int
]	O
=	O
'x'	O
;	O
sprintf_vma	O
(	O
tmp	O
,	O
disp	O
)	O
;	O
for	O
(	O
i	*(struct)
=	O
0	int
;	O
tmp	O
[	O
i	*(struct)
]	O
==	O
'0'	O
&&	O
tmp	O
[	O
i	*(struct)
+	O
1	int
]	O
;	O
i	*(struct)
++	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
buf	*(void)
+	O
2	int
,	O
tmp	O
+	O
i	*(struct)
)	O
;	O
}	O
else	O
{	O
bfd_signed_vma	long
v	O
=	O
disp	O
;	O
char	O
tmp	O
[	O
30	int
]	O
;	O
int	O
i	*(struct)
;	O
if	O
(	O
v	O
<	O
0	int
)	O
{	O
*	O
(	O
buf	*(void)
++	O
)	O
=	O
'-'	O
;	O
v	O
=	O
-	O
disp	O
;	O
if	O
(	O
v	O
<	O
0	int
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
buf	*(void)
,	O
"9223372036854775808"	*(char)
)	O
;	O
return	O
;	O
}	O
}	O
if	O
(	O
!	O
v	O
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
buf	*(void)
,	O
"0"	*(char)
)	O
;	O
return	O
;	O
}	O
i	*(struct)
=	O
0	int
;	O
tmp	O
[	O
29	int
]	O
=	O
0	int
;	O
while	O
(	O
v	O
)	O
{	O
tmp	O
[	O
28	int
-	O
i	*(struct)
]	O
=	O
(	O
v	O
%	O
10	int
)	O
+	O
'0'	O
;	O
v	O
/=	O
10	int
;	O
i	*(struct)
++	O
;	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
buf	*(void)
,	O
tmp	O
+	O
29	int
-	O
i	*(struct)
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
hex	O
)	O
sprintf	(*(char),*(char))->(int)
(	O
buf	*(void)
,	O
"0x%x"	*(char)
,	O
(	O
unsigned	O
int	O
)	O
disp	O
)	O
;	O
else	O
sprintf	(*(char),*(char))->(int)
(	O
buf	*(void)
,	O
"%d"	*(char)
,	O
(	O
int	O
)	O
disp	O
)	O
;	O
}	O
}	O
static	O
void	O
print_displacement	O
(	O
char	O
*	O
buf	*(void)
,	O
bfd_vma	long
disp	O
)	O
{	O
bfd_signed_vma	long
val	array(int)
=	O
disp	O
;	O
char	O
tmp	O
[	O
30	int
]	O
;	O
int	O
i	*(struct)
,	O
j	O
=	O
0	int
;	O
if	O
(	O
val	array(int)
<	O
0	int
)	O
{	O
buf	*(void)
[	O
j	O
++	O
]	O
=	O
'-'	O
;	O
val	array(int)
=	O
-	O
disp	O
;	O
if	O
(	O
val	array(int)
<	O
0	int
)	O
{	O
switch	O
(	O
address_mode	O
)	O
{	O
case	O
mode_64bit	O
:	O
strcpy	(*(char),*(char))->(*(char))
(	O
buf	*(void)
+	O
j	O
,	O
"0x8000000000000000"	*(char)
)	O
;	O
break	O
;	O
case	O
mode_32bit	O
:	O
strcpy	(*(char),*(char))->(*(char))
(	O
buf	*(void)
+	O
j	O
,	O
"0x80000000"	*(char)
)	O
;	O
break	O
;	O
case	O
mode_16bit	O
:	O
strcpy	(*(char),*(char))->(*(char))
(	O
buf	*(void)
+	O
j	O
,	O
"0x8000"	*(char)
)	O
;	O
break	O
;	O
}	O
return	O
;	O
}	O
}	O
buf	*(void)
[	O
j	O
++	O
]	O
=	O
'0'	O
;	O
buf	*(void)
[	O
j	O
++	O
]	O
=	O
'x'	O
;	O
sprintf_vma	O
(	O
tmp	O
,	O
(	O
bfd_vma	long
)	O
val	array(int)
)	O
;	O
for	O
(	O
i	*(struct)
=	O
0	int
;	O
tmp	O
[	O
i	*(struct)
]	O
==	O
'0'	O
;	O
i	*(struct)
++	O
)	O
continue	O
;	O
if	O
(	O
tmp	O
[	O
i	*(struct)
]	O
==	O
'\0'	O
)	O
i	*(struct)
--	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
buf	*(void)
+	O
j	O
,	O
tmp	O
+	O
i	*(struct)
)	O
;	O
}	O
static	O
void	O
intel_operand_size	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
if	O
(	O
vex	O
.	O
evex	O
&&	O
vex	O
.	O
b	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct(*(*`),long,long,*(struct`))),*(*(struct(*`,long,long,*`))),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct(struct(*`,long,long,*`),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(struct`),*(char),long,int,*(struct`),union(*`,long))),*(*(struct(*`,*`,long,int,*`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
&&	O
(	O
bytemode	O
==	O
x_mode	O
||	O
bytemode	O
==	O
evex_half_bcst_xmmq_mode	O
)	O
)	O
{	O
if	O
(	O
vex	O
.	O
w	O
)	O
oappend	O
(	O
"QWORD PTR "	*(char)
)	O
;	O
else	O
oappend	O
(	O
"DWORD PTR "	*(char)
)	O
;	O
return	O
;	O
}	O
switch	O
(	O
bytemode	O
)	O
{	O
case	O
b_mode	O
:	O
case	O
b_swap_mode	O
:	O
case	O
dqb_mode	O
:	O
case	O
db_mode	O
:	O
oappend	O
(	O
"BYTE PTR "	*(char)
)	O
;	O
break	O
;	O
case	O
w_mode	O
:	O
case	O
dw_mode	O
:	O
case	O
dqw_mode	O
:	O
oappend	O
(	O
"WORD PTR "	*(char)
)	O
;	O
break	O
;	O
case	O
indir_v_mode	O
:	O
if	O
(	O
address_mode	O
==	O
mode_64bit	O
&&	O
isa64	O
==	O
intel64	O
)	O
{	O
oappend	O
(	O
"QWORD PTR "	*(char)
)	O
;	O
break	O
;	O
}	O
case	O
stack_v_mode	O
:	O
if	O
(	O
address_mode	O
==	O
mode_64bit	O
&&	O
(	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
||	O
(	O
rex	O
&	O
REX_W	O
)	O
)	O
)	O
{	O
oappend	O
(	O
"QWORD PTR "	*(char)
)	O
;	O
break	O
;	O
}	O
case	O
v_mode	O
:	O
case	O
v_swap_mode	O
:	O
case	O
dq_mode	O
:	O
USED_REX	O
(	O
REX_W	O
)	O
;	O
if	O
(	O
rex	O
&	O
REX_W	O
)	O
oappend	O
(	O
"QWORD PTR "	*(char)
)	O
;	O
else	O
{	O
if	O
(	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
||	O
bytemode	O
==	O
dq_mode	O
)	O
oappend	O
(	O
"DWORD PTR "	*(char)
)	O
;	O
else	O
oappend	O
(	O
"WORD PTR "	*(char)
)	O
;	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
;	O
}	O
break	O
;	O
case	O
z_mode	O
:	O
if	O
(	O
(	O
rex	O
&	O
REX_W	O
)	O
||	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
)	O
*	O
obufp	O
++	O
=	O
'D'	O
;	O
oappend	O
(	O
"WORD PTR "	*(char)
)	O
;	O
if	O
(	O
!	O
(	O
rex	O
&	O
REX_W	O
)	O
)	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
;	O
break	O
;	O
case	O
a_mode	O
:	O
if	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
oappend	O
(	O
"QWORD PTR "	*(char)
)	O
;	O
else	O
oappend	O
(	O
"DWORD PTR "	*(char)
)	O
;	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
;	O
break	O
;	O
case	O
d_mode	O
:	O
case	O
d_scalar_mode	O
:	O
case	O
d_scalar_swap_mode	O
:	O
case	O
d_swap_mode	O
:	O
case	O
dqd_mode	O
:	O
oappend	O
(	O
"DWORD PTR "	*(char)
)	O
;	O
break	O
;	O
case	O
q_mode	O
:	O
case	O
q_scalar_mode	O
:	O
case	O
q_scalar_swap_mode	O
:	O
case	O
q_swap_mode	O
:	O
oappend	O
(	O
"QWORD PTR "	*(char)
)	O
;	O
break	O
;	O
case	O
m_mode	O
:	O
if	O
(	O
address_mode	O
==	O
mode_64bit	O
)	O
oappend	O
(	O
"QWORD PTR "	*(char)
)	O
;	O
else	O
oappend	O
(	O
"DWORD PTR "	*(char)
)	O
;	O
break	O
;	O
case	O
f_mode	O
:	O
if	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
oappend	O
(	O
"FWORD PTR "	*(char)
)	O
;	O
else	O
oappend	O
(	O
"DWORD PTR "	*(char)
)	O
;	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
;	O
break	O
;	O
case	O
t_mode	O
:	O
oappend	O
(	O
"TBYTE PTR "	*(char)
)	O
;	O
break	O
;	O
case	O
x_mode	O
:	O
case	O
x_swap_mode	O
:	O
case	O
evex_x_gscat_mode	O
:	O
case	O
evex_x_nobcst_mode	O
:	O
case	O
b_scalar_mode	O
:	O
case	O
w_scalar_mode	O
:	O
if	O
(	O
need_vex	O
)	O
{	O
switch	O
(	O
vex	O
.	O
length	O
)	O
{	O
case	O
128	int
:	O
oappend	O
(	O
"XMMWORD PTR "	*(char)
)	O
;	O
break	O
;	O
case	O
256	int
:	O
oappend	O
(	O
"YMMWORD PTR "	*(char)
)	O
;	O
break	O
;	O
case	O
512	int
:	O
oappend	O
(	O
"ZMMWORD PTR "	*(char)
)	O
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
}	O
else	O
oappend	O
(	O
"XMMWORD PTR "	*(char)
)	O
;	O
break	O
;	O
case	O
xmm_mode	O
:	O
oappend	O
(	O
"XMMWORD PTR "	*(char)
)	O
;	O
break	O
;	O
case	O
ymm_mode	O
:	O
oappend	O
(	O
"YMMWORD PTR "	*(char)
)	O
;	O
break	O
;	O
case	O
xmmq_mode	O
:	O
case	O
evex_half_bcst_xmmq_mode	O
:	O
if	O
(	O
!	O
need_vex	O
)	O
abort	()->(void)
(	O
)	O
;	O
switch	O
(	O
vex	O
.	O
length	O
)	O
{	O
case	O
128	int
:	O
oappend	O
(	O
"QWORD PTR "	*(char)
)	O
;	O
break	O
;	O
case	O
256	int
:	O
oappend	O
(	O
"XMMWORD PTR "	*(char)
)	O
;	O
break	O
;	O
case	O
512	int
:	O
oappend	O
(	O
"YMMWORD PTR "	*(char)
)	O
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
break	O
;	O
case	O
xmm_mb_mode	O
:	O
if	O
(	O
!	O
need_vex	O
)	O
abort	()->(void)
(	O
)	O
;	O
switch	O
(	O
vex	O
.	O
length	O
)	O
{	O
case	O
128	int
:	O
case	O
256	int
:	O
case	O
512	int
:	O
oappend	O
(	O
"BYTE PTR "	*(char)
)	O
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
break	O
;	O
case	O
xmm_mw_mode	O
:	O
if	O
(	O
!	O
need_vex	O
)	O
abort	()->(void)
(	O
)	O
;	O
switch	O
(	O
vex	O
.	O
length	O
)	O
{	O
case	O
128	int
:	O
case	O
256	int
:	O
case	O
512	int
:	O
oappend	O
(	O
"WORD PTR "	*(char)
)	O
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
break	O
;	O
case	O
xmm_md_mode	O
:	O
if	O
(	O
!	O
need_vex	O
)	O
abort	()->(void)
(	O
)	O
;	O
switch	O
(	O
vex	O
.	O
length	O
)	O
{	O
case	O
128	int
:	O
case	O
256	int
:	O
case	O
512	int
:	O
oappend	O
(	O
"DWORD PTR "	*(char)
)	O
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
break	O
;	O
case	O
xmm_mq_mode	O
:	O
if	O
(	O
!	O
need_vex	O
)	O
abort	()->(void)
(	O
)	O
;	O
switch	O
(	O
vex	O
.	O
length	O
)	O
{	O
case	O
128	int
:	O
case	O
256	int
:	O
case	O
512	int
:	O
oappend	O
(	O
"QWORD PTR "	*(char)
)	O
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
break	O
;	O
case	O
xmmdw_mode	O
:	O
if	O
(	O
!	O
need_vex	O
)	O
abort	()->(void)
(	O
)	O
;	O
switch	O
(	O
vex	O
.	O
length	O
)	O
{	O
case	O
128	int
:	O
oappend	O
(	O
"WORD PTR "	*(char)
)	O
;	O
break	O
;	O
case	O
256	int
:	O
oappend	O
(	O
"DWORD PTR "	*(char)
)	O
;	O
break	O
;	O
case	O
512	int
:	O
oappend	O
(	O
"QWORD PTR "	*(char)
)	O
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
break	O
;	O
case	O
xmmqd_mode	O
:	O
if	O
(	O
!	O
need_vex	O
)	O
abort	()->(void)
(	O
)	O
;	O
switch	O
(	O
vex	O
.	O
length	O
)	O
{	O
case	O
128	int
:	O
oappend	O
(	O
"DWORD PTR "	*(char)
)	O
;	O
break	O
;	O
case	O
256	int
:	O
oappend	O
(	O
"QWORD PTR "	*(char)
)	O
;	O
break	O
;	O
case	O
512	int
:	O
oappend	O
(	O
"XMMWORD PTR "	*(char)
)	O
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
break	O
;	O
case	O
ymmq_mode	O
:	O
if	O
(	O
!	O
need_vex	O
)	O
abort	()->(void)
(	O
)	O
;	O
switch	O
(	O
vex	O
.	O
length	O
)	O
{	O
case	O
128	int
:	O
oappend	O
(	O
"QWORD PTR "	*(char)
)	O
;	O
break	O
;	O
case	O
256	int
:	O
oappend	O
(	O
"YMMWORD PTR "	*(char)
)	O
;	O
break	O
;	O
case	O
512	int
:	O
oappend	O
(	O
"ZMMWORD PTR "	*(char)
)	O
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
break	O
;	O
case	O
ymmxmm_mode	O
:	O
if	O
(	O
!	O
need_vex	O
)	O
abort	()->(void)
(	O
)	O
;	O
switch	O
(	O
vex	O
.	O
length	O
)	O
{	O
case	O
128	int
:	O
case	O
256	int
:	O
oappend	O
(	O
"XMMWORD PTR "	*(char)
)	O
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
break	O
;	O
case	O
o_mode	O
:	O
oappend	O
(	O
"OWORD PTR "	*(char)
)	O
;	O
break	O
;	O
case	O
xmm_mdq_mode	O
:	O
case	O
vex_w_dq_mode	O
:	O
case	O
vex_scalar_w_dq_mode	O
:	O
if	O
(	O
!	O
need_vex	O
)	O
abort	()->(void)
(	O
)	O
;	O
if	O
(	O
vex	O
.	O
w	O
)	O
oappend	O
(	O
"QWORD PTR "	*(char)
)	O
;	O
else	O
oappend	O
(	O
"DWORD PTR "	*(char)
)	O
;	O
break	O
;	O
case	O
vex_vsib_d_w_dq_mode	O
:	O
case	O
vex_vsib_q_w_dq_mode	O
:	O
if	O
(	O
!	O
need_vex	O
)	O
abort	()->(void)
(	O
)	O
;	O
if	O
(	O
!	O
vex	O
.	O
evex	O
)	O
{	O
if	O
(	O
vex	O
.	O
w	O
)	O
oappend	O
(	O
"QWORD PTR "	*(char)
)	O
;	O
else	O
oappend	O
(	O
"DWORD PTR "	*(char)
)	O
;	O
}	O
else	O
{	O
switch	O
(	O
vex	O
.	O
length	O
)	O
{	O
case	O
128	int
:	O
oappend	O
(	O
"XMMWORD PTR "	*(char)
)	O
;	O
break	O
;	O
case	O
256	int
:	O
oappend	O
(	O
"YMMWORD PTR "	*(char)
)	O
;	O
break	O
;	O
case	O
512	int
:	O
oappend	O
(	O
"ZMMWORD PTR "	*(char)
)	O
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
}	O
break	O
;	O
case	O
vex_vsib_q_w_d_mode	O
:	O
case	O
vex_vsib_d_w_d_mode	O
:	O
if	O
(	O
!	O
need_vex	O
||	O
!	O
vex	O
.	O
evex	O
)	O
abort	()->(void)
(	O
)	O
;	O
switch	O
(	O
vex	O
.	O
length	O
)	O
{	O
case	O
128	int
:	O
oappend	O
(	O
"QWORD PTR "	*(char)
)	O
;	O
break	O
;	O
case	O
256	int
:	O
oappend	O
(	O
"XMMWORD PTR "	*(char)
)	O
;	O
break	O
;	O
case	O
512	int
:	O
oappend	O
(	O
"YMMWORD PTR "	*(char)
)	O
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
break	O
;	O
case	O
mask_bd_mode	O
:	O
if	O
(	O
!	O
need_vex	O
||	O
vex	O
.	O
length	O
!=	O
128	int
)	O
abort	()->(void)
(	O
)	O
;	O
if	O
(	O
vex	O
.	O
w	O
)	O
oappend	O
(	O
"DWORD PTR "	*(char)
)	O
;	O
else	O
oappend	O
(	O
"BYTE PTR "	*(char)
)	O
;	O
break	O
;	O
case	O
mask_mode	O
:	O
if	O
(	O
!	O
need_vex	O
)	O
abort	()->(void)
(	O
)	O
;	O
if	O
(	O
vex	O
.	O
w	O
)	O
oappend	O
(	O
"QWORD PTR "	*(char)
)	O
;	O
else	O
oappend	O
(	O
"WORD PTR "	*(char)
)	O
;	O
break	O
;	O
case	O
v_bnd_mode	O
:	O
case	O
v_bndmk_mode	O
:	O
default	O
:	O
break	O
;	O
}	O
}	O
static	O
void	O
OP_E_register	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
int	O
reg	O
=	O
modrm	O
.	O
rm	O
;	O
const	O
char	O
*	O
*	O
names	O
;	O
USED_REX	O
(	O
REX_B	O
)	O
;	O
if	O
(	O
(	O
rex	O
&	O
REX_B	O
)	O
)	O
reg	O
+=	O
8	int
;	O
if	O
(	O
(	O
sizeflag	O
&	O
SUFFIX_ALWAYS	O
)	O
&&	O
(	O
bytemode	O
==	O
b_swap_mode	O
||	O
bytemode	O
==	O
bnd_swap_mode	O
||	O
bytemode	O
==	O
v_swap_mode	O
)	O
)	O
swap_operand	O
(	O
)	O
;	O
switch	O
(	O
bytemode	O
)	O
{	O
case	O
b_mode	O
:	O
case	O
b_swap_mode	O
:	O
USED_REX	O
(	O
0	int
)	O
;	O
if	O
(	O
rex	O
)	O
names	O
=	O
names8rex	O
;	O
else	O
names	O
=	O
names8	O
;	O
break	O
;	O
case	O
w_mode	O
:	O
names	O
=	O
names16	O
;	O
break	O
;	O
case	O
d_mode	O
:	O
case	O
dw_mode	O
:	O
case	O
db_mode	O
:	O
names	O
=	O
names32	O
;	O
break	O
;	O
case	O
q_mode	O
:	O
names	O
=	O
names64	O
;	O
break	O
;	O
case	O
m_mode	O
:	O
case	O
v_bnd_mode	O
:	O
names	O
=	O
address_mode	O
==	O
mode_64bit	O
?	O
names64	O
:	O
names32	O
;	O
break	O
;	O
case	O
bnd_mode	O
:	O
case	O
bnd_swap_mode	O
:	O
if	O
(	O
reg	O
>	O
0x3	int
)	O
{	O
oappend	O
(	O
"(bad)"	*(char)
)	O
;	O
return	O
;	O
}	O
names	O
=	O
names_bnd	O
;	O
break	O
;	O
case	O
indir_v_mode	O
:	O
if	O
(	O
address_mode	O
==	O
mode_64bit	O
&&	O
isa64	O
==	O
intel64	O
)	O
{	O
names	O
=	O
names64	O
;	O
break	O
;	O
}	O
case	O
stack_v_mode	O
:	O
if	O
(	O
address_mode	O
==	O
mode_64bit	O
&&	O
(	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
||	O
(	O
rex	O
&	O
REX_W	O
)	O
)	O
)	O
{	O
names	O
=	O
names64	O
;	O
break	O
;	O
}	O
bytemode	O
=	O
v_mode	O
;	O
case	O
v_mode	O
:	O
case	O
v_swap_mode	O
:	O
case	O
dq_mode	O
:	O
case	O
dqb_mode	O
:	O
case	O
dqd_mode	O
:	O
case	O
dqw_mode	O
:	O
USED_REX	O
(	O
REX_W	O
)	O
;	O
if	O
(	O
rex	O
&	O
REX_W	O
)	O
names	O
=	O
names64	O
;	O
else	O
{	O
if	O
(	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
||	O
(	O
bytemode	O
!=	O
v_mode	O
&&	O
bytemode	O
!=	O
v_swap_mode	O
)	O
)	O
names	O
=	O
names32	O
;	O
else	O
names	O
=	O
names16	O
;	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
;	O
}	O
break	O
;	O
case	O
va_mode	O
:	O
names	O
=	O
(	O
address_mode	O
==	O
mode_64bit	O
?	O
names64	O
:	O
names32	O
)	O
;	O
if	O
(	O
!	O
(	O
prefixes	O
&	O
PREFIX_ADDR	O
)	O
)	O
names	O
=	O
(	O
address_mode	O
==	O
mode_16bit	O
?	O
names16	O
:	O
names	O
)	O
;	O
else	O
{	O
all_prefixes	O
[	O
last_addr_prefix	O
]	O
=	O
0	int
;	O
names	O
=	O
(	O
address_mode	O
!=	O
mode_32bit	O
?	O
names32	O
:	O
names16	O
)	O
;	O
used_prefixes	O
|=	O
PREFIX_ADDR	O
;	O
}	O
break	O
;	O
case	O
mask_bd_mode	O
:	O
case	O
mask_mode	O
:	O
if	O
(	O
reg	O
>	O
0x7	int
)	O
{	O
oappend	O
(	O
"(bad)"	*(char)
)	O
;	O
return	O
;	O
}	O
names	O
=	O
names_mask	O
;	O
break	O
;	O
case	O
0	int
:	O
return	O
;	O
default	O
:	O
oappend	O
(	O
INTERNAL_DISASSEMBLER_ERROR	O
)	O
;	O
return	O
;	O
}	O
oappend	O
(	O
names	O
[	O
reg	O
]	O
)	O
;	O
}	O
static	O
void	O
OP_E_memory	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
bfd_vma	long
disp	O
=	O
0	int
;	O
int	O
add	O
=	O
(	O
rex	O
&	O
REX_B	O
)	O
?	O
8	int
:	O
0	int
;	O
int	O
riprel	O
=	O
0	int
;	O
int	O
shift	O
;	O
if	O
(	O
vex	O
.	O
evex	O
)	O
{	O
if	O
(	O
vex	O
.	O
b	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct(*(*`),long,long,*(struct`))),*(*(struct(*`,long,long,*`))),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct(struct(*`,long,long,*`),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(struct`),*(char),long,int,*(struct`),union(*`,long))),*(*(struct(*`,*`,long,int,*`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
&&	O
bytemode	O
!=	O
x_mode	O
&&	O
bytemode	O
!=	O
xmmq_mode	O
&&	O
bytemode	O
!=	O
evex_half_bcst_xmmq_mode	O
)	O
{	O
BadOp	O
(	O
)	O
;	O
return	O
;	O
}	O
switch	O
(	O
bytemode	O
)	O
{	O
case	O
dqw_mode	O
:	O
case	O
dw_mode	O
:	O
shift	O
=	O
1	int
;	O
break	O
;	O
case	O
dqb_mode	O
:	O
case	O
db_mode	O
:	O
shift	O
=	O
0	int
;	O
break	O
;	O
case	O
dq_mode	O
:	O
if	O
(	O
address_mode	O
!=	O
mode_64bit	O
)	O
{	O
shift	O
=	O
2	int
;	O
break	O
;	O
}	O
case	O
vex_vsib_d_w_dq_mode	O
:	O
case	O
vex_vsib_d_w_d_mode	O
:	O
case	O
vex_vsib_q_w_dq_mode	O
:	O
case	O
vex_vsib_q_w_d_mode	O
:	O
case	O
evex_x_gscat_mode	O
:	O
case	O
xmm_mdq_mode	O
:	O
shift	O
=	O
vex	O
.	O
w	O
?	O
3	int
:	O
2	int
;	O
break	O
;	O
case	O
x_mode	O
:	O
case	O
evex_half_bcst_xmmq_mode	O
:	O
case	O
xmmq_mode	O
:	O
if	O
(	O
vex	O
.	O
b	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct(*(*`),long,long,*(struct`))),*(*(struct(*`,long,long,*`))),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct(struct(*`,long,long,*`),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(struct`),*(char),long,int,*(struct`),union(*`,long))),*(*(struct(*`,*`,long,int,*`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
)	O
{	O
shift	O
=	O
vex	O
.	O
w	O
?	O
3	int
:	O
2	int
;	O
break	O
;	O
}	O
case	O
xmmqd_mode	O
:	O
case	O
xmmdw_mode	O
:	O
case	O
ymmq_mode	O
:	O
case	O
evex_x_nobcst_mode	O
:	O
case	O
x_swap_mode	O
:	O
switch	O
(	O
vex	O
.	O
length	O
)	O
{	O
case	O
128	int
:	O
shift	O
=	O
4	int
;	O
break	O
;	O
case	O
256	int
:	O
shift	O
=	O
5	int
;	O
break	O
;	O
case	O
512	int
:	O
shift	O
=	O
6	int
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
break	O
;	O
case	O
ymm_mode	O
:	O
shift	O
=	O
5	int
;	O
break	O
;	O
case	O
xmm_mode	O
:	O
shift	O
=	O
4	int
;	O
break	O
;	O
case	O
xmm_mq_mode	O
:	O
case	O
q_mode	O
:	O
case	O
q_scalar_mode	O
:	O
case	O
q_swap_mode	O
:	O
case	O
q_scalar_swap_mode	O
:	O
shift	O
=	O
3	int
;	O
break	O
;	O
case	O
dqd_mode	O
:	O
case	O
xmm_md_mode	O
:	O
case	O
d_mode	O
:	O
case	O
d_scalar_mode	O
:	O
case	O
d_swap_mode	O
:	O
case	O
d_scalar_swap_mode	O
:	O
shift	O
=	O
2	int
;	O
break	O
;	O
case	O
w_scalar_mode	O
:	O
case	O
xmm_mw_mode	O
:	O
shift	O
=	O
1	int
;	O
break	O
;	O
case	O
b_scalar_mode	O
:	O
case	O
xmm_mb_mode	O
:	O
shift	O
=	O
0	int
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
if	O
(	O
!	O
vex	O
.	O
b	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct(*(*`),long,long,*(struct`))),*(*(struct(*`,long,long,*`))),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct(struct(*`,long,long,*`),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(struct`),*(char),long,int,*(struct`),union(*`,long))),*(*(struct(*`,*`,long,int,*`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
&&	O
(	O
bytemode	O
==	O
xmmq_mode	O
||	O
bytemode	O
==	O
evex_half_bcst_xmmq_mode	O
)	O
)	O
shift	O
-=	O
1	int
;	O
else	O
if	O
(	O
bytemode	O
==	O
xmmqd_mode	O
)	O
shift	O
-=	O
2	int
;	O
else	O
if	O
(	O
bytemode	O
==	O
xmmdw_mode	O
)	O
shift	O
-=	O
3	int
;	O
else	O
if	O
(	O
bytemode	O
==	O
ymmq_mode	O
&&	O
vex	O
.	O
length	O
==	O
128	int
)	O
shift	O
-=	O
1	int
;	O
}	O
else	O
shift	O
=	O
0	int
;	O
USED_REX	O
(	O
REX_B	O
)	O
;	O
if	O
(	O
intel_syntax	O
)	O
intel_operand_size	O
(	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
append_seg	O
(	O
)	O
;	O
if	O
(	O
(	O
sizeflag	O
&	O
AFLAG	O
)	O
||	O
address_mode	O
==	O
mode_64bit	O
)	O
{	O
int	O
havedisp	O
;	O
int	O
havesib	O
;	O
int	O
havebase	O
;	O
int	O
haveindex	O
;	O
int	O
needindex	O
;	O
int	O
needaddr32	O
;	O
int	O
base	int
,	O
rbase	O
;	O
int	O
vindex	O
=	O
0	int
;	O
int	O
scale	O
=	O
0	int
;	O
int	O
addr32flag	O
=	O
!	O
(	O
(	O
sizeflag	O
&	O
AFLAG	O
)	O
||	O
bytemode	O
==	O
v_bnd_mode	O
||	O
bytemode	O
==	O
v_bndmk_mode	O
||	O
bytemode	O
==	O
bnd_mode	O
||	O
bytemode	O
==	O
bnd_swap_mode	O
)	O
;	O
const	O
char	O
*	O
*	O
indexes64	O
=	O
names64	O
;	O
const	O
char	O
*	O
*	O
indexes32	O
=	O
names32	O
;	O
havesib	O
=	O
0	int
;	O
havebase	O
=	O
1	int
;	O
haveindex	O
=	O
0	int
;	O
base	int
=	O
modrm	O
.	O
rm	O
;	O
if	O
(	O
base	int
==	O
4	int
)	O
{	O
havesib	O
=	O
1	int
;	O
vindex	O
=	O
sib	O
.	O
index	(*(char),int)->(*(char))
;	O
USED_REX	O
(	O
REX_X	O
)	O
;	O
if	O
(	O
rex	O
&	O
REX_X	O
)	O
vindex	O
+=	O
8	int
;	O
switch	O
(	O
bytemode	O
)	O
{	O
case	O
vex_vsib_d_w_dq_mode	O
:	O
case	O
vex_vsib_d_w_d_mode	O
:	O
case	O
vex_vsib_q_w_dq_mode	O
:	O
case	O
vex_vsib_q_w_d_mode	O
:	O
if	O
(	O
!	O
need_vex	O
)	O
abort	()->(void)
(	O
)	O
;	O
if	O
(	O
vex	O
.	O
evex	O
)	O
{	O
if	O
(	O
!	O
vex	O
.	O
v	O
)	O
vindex	O
+=	O
16	int
;	O
}	O
haveindex	O
=	O
1	int
;	O
switch	O
(	O
vex	O
.	O
length	O
)	O
{	O
case	O
128	int
:	O
indexes64	O
=	O
indexes32	O
=	O
names_xmm	O
;	O
break	O
;	O
case	O
256	int
:	O
if	O
(	O
!	O
vex	O
.	O
w	O
||	O
bytemode	O
==	O
vex_vsib_q_w_dq_mode	O
||	O
bytemode	O
==	O
vex_vsib_q_w_d_mode	O
)	O
indexes64	O
=	O
indexes32	O
=	O
names_ymm	O
;	O
else	O
indexes64	O
=	O
indexes32	O
=	O
names_xmm	O
;	O
break	O
;	O
case	O
512	int
:	O
if	O
(	O
!	O
vex	O
.	O
w	O
||	O
bytemode	O
==	O
vex_vsib_q_w_dq_mode	O
||	O
bytemode	O
==	O
vex_vsib_q_w_d_mode	O
)	O
indexes64	O
=	O
indexes32	O
=	O
names_zmm	O
;	O
else	O
indexes64	O
=	O
indexes32	O
=	O
names_ymm	O
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
break	O
;	O
default	O
:	O
haveindex	O
=	O
vindex	O
!=	O
4	int
;	O
break	O
;	O
}	O
scale	O
=	O
sib	O
.	O
scale	O
;	O
base	int
=	O
sib	O
.	O
base	int
;	O
codep	O
++	O
;	O
}	O
rbase	O
=	O
base	int
+	O
add	O
;	O
switch	O
(	O
modrm	O
.	O
mod	O
)	O
{	O
case	O
0	int
:	O
if	O
(	O
base	int
==	O
5	int
)	O
{	O
havebase	O
=	O
0	int
;	O
if	O
(	O
address_mode	O
==	O
mode_64bit	O
&&	O
!	O
havesib	O
)	O
riprel	O
=	O
1	int
;	O
disp	O
=	O
get32s	O
(	O
)	O
;	O
if	O
(	O
riprel	O
&&	O
bytemode	O
==	O
v_bndmk_mode	O
)	O
{	O
oappend	O
(	O
"(bad)"	*(char)
)	O
;	O
return	O
;	O
}	O
}	O
break	O
;	O
case	O
1	int
:	O
FETCH_DATA	O
(	O
the_info	O
,	O
codep	O
+	O
1	int
)	O
;	O
disp	O
=	O
*	O
codep	O
++	O
;	O
if	O
(	O
(	O
disp	O
&	O
0x80	int
)	O
!=	O
0	int
)	O
disp	O
-=	O
0x100	int
;	O
if	O
(	O
vex	O
.	O
evex	O
&&	O
shift	O
>	O
0	int
)	O
disp	O
<<=	O
shift	O
;	O
break	O
;	O
case	O
2	int
:	O
disp	O
=	O
get32s	O
(	O
)	O
;	O
break	O
;	O
}	O
needindex	O
=	O
0	int
;	O
needaddr32	O
=	O
0	int
;	O
if	O
(	O
havesib	O
&&	O
!	O
havebase	O
&&	O
!	O
haveindex	O
&&	O
address_mode	O
!=	O
mode_16bit	O
)	O
{	O
if	O
(	O
address_mode	O
==	O
mode_64bit	O
)	O
{	O
needindex	O
=	O
addr32flag	O
;	O
needaddr32	O
=	O
1	int
;	O
}	O
else	O
{	O
needindex	O
=	O
1	int
;	O
}	O
}	O
havedisp	O
=	O
(	O
havebase	O
||	O
needindex	O
||	O
(	O
havesib	O
&&	O
(	O
haveindex	O
||	O
scale	O
!=	O
0	int
)	O
)	O
)	O
;	O
if	O
(	O
!	O
intel_syntax	O
)	O
if	O
(	O
modrm	O
.	O
mod	O
!=	O
0	int
||	O
base	int
==	O
5	int
)	O
{	O
if	O
(	O
havedisp	O
||	O
riprel	O
)	O
print_displacement	O
(	O
scratchbuf	O
,	O
disp	O
)	O
;	O
else	O
print_operand_value	O
(	O
scratchbuf	O
,	O
1	int
,	O
disp	O
)	O
;	O
oappend	O
(	O
scratchbuf	O
)	O
;	O
if	O
(	O
riprel	O
)	O
{	O
set_op	O
(	O
disp	O
,	O
1	int
)	O
;	O
oappend	O
(	O
!	O
addr32flag	O
?	O
"(%rip)"	*(char)
:	O
"(%eip)"	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
(	O
havebase	O
||	O
haveindex	O
||	O
needindex	O
||	O
needaddr32	O
||	O
riprel	O
)	O
&&	O
(	O
bytemode	O
!=	O
v_bnd_mode	O
)	O
&&	O
(	O
bytemode	O
!=	O
v_bndmk_mode	O
)	O
&&	O
(	O
bytemode	O
!=	O
bnd_mode	O
)	O
&&	O
(	O
bytemode	O
!=	O
bnd_swap_mode	O
)	O
)	O
used_prefixes	O
|=	O
PREFIX_ADDR	O
;	O
if	O
(	O
havedisp	O
||	O
(	O
intel_syntax	O
&&	O
riprel	O
)	O
)	O
{	O
*	O
obufp	O
++	O
=	O
open_char	O
;	O
if	O
(	O
intel_syntax	O
&&	O
riprel	O
)	O
{	O
set_op	O
(	O
disp	O
,	O
1	int
)	O
;	O
oappend	O
(	O
!	O
addr32flag	O
?	O
"rip"	*(char)
:	O
"eip"	*(char)
)	O
;	O
}	O
*	O
obufp	O
=	O
'\0'	O
;	O
if	O
(	O
havebase	O
)	O
oappend	O
(	O
address_mode	O
==	O
mode_64bit	O
&&	O
!	O
addr32flag	O
?	O
names64	O
[	O
rbase	O
]	O
:	O
names32	O
[	O
rbase	O
]	O
)	O
;	O
if	O
(	O
havesib	O
)	O
{	O
if	O
(	O
scale	O
!=	O
0	int
||	O
needindex	O
||	O
haveindex	O
||	O
(	O
havebase	O
&&	O
base	int
!=	O
ESP_REG_NUM	O
)	O
)	O
{	O
if	O
(	O
!	O
intel_syntax	O
||	O
havebase	O
)	O
{	O
*	O
obufp	O
++	O
=	O
separator_char	O
;	O
*	O
obufp	O
=	O
'\0'	O
;	O
}	O
if	O
(	O
haveindex	O
)	O
oappend	O
(	O
address_mode	O
==	O
mode_64bit	O
&&	O
!	O
addr32flag	O
?	O
indexes64	O
[	O
vindex	O
]	O
:	O
indexes32	O
[	O
vindex	O
]	O
)	O
;	O
else	O
oappend	O
(	O
address_mode	O
==	O
mode_64bit	O
&&	O
!	O
addr32flag	O
?	O
index64	O
:	O
index32	O
)	O
;	O
*	O
obufp	O
++	O
=	O
scale_char	O
;	O
*	O
obufp	O
=	O
'\0'	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
scratchbuf	O
,	O
"%d"	*(char)
,	O
1	int
<<	O
scale	O
)	O
;	O
oappend	O
(	O
scratchbuf	O
)	O
;	O
}	O
}	O
if	O
(	O
intel_syntax	O
&&	O
(	O
disp	O
||	O
modrm	O
.	O
mod	O
!=	O
0	int
||	O
base	int
==	O
5	int
)	O
)	O
{	O
if	O
(	O
!	O
havedisp	O
||	O
(	O
bfd_signed_vma	long
)	O
disp	O
>=	O
0	int
)	O
{	O
*	O
obufp	O
++	O
=	O
'+'	O
;	O
*	O
obufp	O
=	O
'\0'	O
;	O
}	O
else	O
if	O
(	O
modrm	O
.	O
mod	O
!=	O
1	int
&&	O
disp	O
!=	O
-	O
disp	O
)	O
{	O
*	O
obufp	O
++	O
=	O
'-'	O
;	O
*	O
obufp	O
=	O
'\0'	O
;	O
disp	O
=	O
-	O
(	O
bfd_signed_vma	long
)	O
disp	O
;	O
}	O
if	O
(	O
havedisp	O
)	O
print_displacement	O
(	O
scratchbuf	O
,	O
disp	O
)	O
;	O
else	O
print_operand_value	O
(	O
scratchbuf	O
,	O
1	int
,	O
disp	O
)	O
;	O
oappend	O
(	O
scratchbuf	O
)	O
;	O
}	O
*	O
obufp	O
++	O
=	O
close_char	O
;	O
*	O
obufp	O
=	O
'\0'	O
;	O
}	O
else	O
if	O
(	O
intel_syntax	O
)	O
{	O
if	O
(	O
modrm	O
.	O
mod	O
!=	O
0	int
||	O
base	int
==	O
5	int
)	O
{	O
if	O
(	O
!	O
active_seg_prefix	O
)	O
{	O
oappend	O
(	O
names_seg	O
[	O
ds_reg	O
-	O
es_reg	O
]	O
)	O
;	O
oappend	O
(	O
":"	*(char)
)	O
;	O
}	O
print_operand_value	O
(	O
scratchbuf	O
,	O
1	int
,	O
disp	O
)	O
;	O
oappend	O
(	O
scratchbuf	O
)	O
;	O
}	O
}	O
}	O
else	O
{	O
used_prefixes	O
|=	O
prefixes	O
&	O
PREFIX_ADDR	O
;	O
switch	O
(	O
modrm	O
.	O
mod	O
)	O
{	O
case	O
0	int
:	O
if	O
(	O
modrm	O
.	O
rm	O
==	O
6	int
)	O
{	O
disp	O
=	O
get16	O
(	O
)	O
;	O
if	O
(	O
(	O
disp	O
&	O
0x8000	int
)	O
!=	O
0	int
)	O
disp	O
-=	O
0x10000	int
;	O
}	O
break	O
;	O
case	O
1	int
:	O
FETCH_DATA	O
(	O
the_info	O
,	O
codep	O
+	O
1	int
)	O
;	O
disp	O
=	O
*	O
codep	O
++	O
;	O
if	O
(	O
(	O
disp	O
&	O
0x80	int
)	O
!=	O
0	int
)	O
disp	O
-=	O
0x100	int
;	O
if	O
(	O
vex	O
.	O
evex	O
&&	O
shift	O
>	O
0	int
)	O
disp	O
<<=	O
shift	O
;	O
break	O
;	O
case	O
2	int
:	O
disp	O
=	O
get16	O
(	O
)	O
;	O
if	O
(	O
(	O
disp	O
&	O
0x8000	int
)	O
!=	O
0	int
)	O
disp	O
-=	O
0x10000	int
;	O
break	O
;	O
}	O
if	O
(	O
!	O
intel_syntax	O
)	O
if	O
(	O
modrm	O
.	O
mod	O
!=	O
0	int
||	O
modrm	O
.	O
rm	O
==	O
6	int
)	O
{	O
print_displacement	O
(	O
scratchbuf	O
,	O
disp	O
)	O
;	O
oappend	O
(	O
scratchbuf	O
)	O
;	O
}	O
if	O
(	O
modrm	O
.	O
mod	O
!=	O
0	int
||	O
modrm	O
.	O
rm	O
!=	O
6	int
)	O
{	O
*	O
obufp	O
++	O
=	O
open_char	O
;	O
*	O
obufp	O
=	O
'\0'	O
;	O
oappend	O
(	O
index16	O
[	O
modrm	O
.	O
rm	O
]	O
)	O
;	O
if	O
(	O
intel_syntax	O
&&	O
(	O
disp	O
||	O
modrm	O
.	O
mod	O
!=	O
0	int
||	O
modrm	O
.	O
rm	O
==	O
6	int
)	O
)	O
{	O
if	O
(	O
(	O
bfd_signed_vma	long
)	O
disp	O
>=	O
0	int
)	O
{	O
*	O
obufp	O
++	O
=	O
'+'	O
;	O
*	O
obufp	O
=	O
'\0'	O
;	O
}	O
else	O
if	O
(	O
modrm	O
.	O
mod	O
!=	O
1	int
)	O
{	O
*	O
obufp	O
++	O
=	O
'-'	O
;	O
*	O
obufp	O
=	O
'\0'	O
;	O
disp	O
=	O
-	O
(	O
bfd_signed_vma	long
)	O
disp	O
;	O
}	O
print_displacement	O
(	O
scratchbuf	O
,	O
disp	O
)	O
;	O
oappend	O
(	O
scratchbuf	O
)	O
;	O
}	O
*	O
obufp	O
++	O
=	O
close_char	O
;	O
*	O
obufp	O
=	O
'\0'	O
;	O
}	O
else	O
if	O
(	O
intel_syntax	O
)	O
{	O
if	O
(	O
!	O
active_seg_prefix	O
)	O
{	O
oappend	O
(	O
names_seg	O
[	O
ds_reg	O
-	O
es_reg	O
]	O
)	O
;	O
oappend	O
(	O
":"	*(char)
)	O
;	O
}	O
print_operand_value	O
(	O
scratchbuf	O
,	O
1	int
,	O
disp	O
&	O
0xffff	int
)	O
;	O
oappend	O
(	O
scratchbuf	O
)	O
;	O
}	O
}	O
if	O
(	O
vex	O
.	O
evex	O
&&	O
vex	O
.	O
b	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct(*(*`),long,long,*(struct`))),*(*(struct(*`,long,long,*`))),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct(struct(*`,long,long,*`),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(struct`),*(char),long,int,*(struct`),union(*`,long))),*(*(struct(*`,*`,long,int,*`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
&&	O
(	O
bytemode	O
==	O
x_mode	O
||	O
bytemode	O
==	O
xmmq_mode	O
||	O
bytemode	O
==	O
evex_half_bcst_xmmq_mode	O
)	O
)	O
{	O
if	O
(	O
vex	O
.	O
w	O
||	O
bytemode	O
==	O
xmmq_mode	O
||	O
bytemode	O
==	O
evex_half_bcst_xmmq_mode	O
)	O
{	O
switch	O
(	O
vex	O
.	O
length	O
)	O
{	O
case	O
128	int
:	O
oappend	O
(	O
"{1to2}"	*(char)
)	O
;	O
break	O
;	O
case	O
256	int
:	O
oappend	O
(	O
"{1to4}"	*(char)
)	O
;	O
break	O
;	O
case	O
512	int
:	O
oappend	O
(	O
"{1to8}"	*(char)
)	O
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
}	O
else	O
{	O
switch	O
(	O
vex	O
.	O
length	O
)	O
{	O
case	O
128	int
:	O
oappend	O
(	O
"{1to4}"	*(char)
)	O
;	O
break	O
;	O
case	O
256	int
:	O
oappend	O
(	O
"{1to8}"	*(char)
)	O
;	O
break	O
;	O
case	O
512	int
:	O
oappend	O
(	O
"{1to16}"	*(char)
)	O
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
}	O
}	O
}	O
static	O
void	O
OP_E	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
MODRM_CHECK	O
;	O
codep	O
++	O
;	O
if	O
(	O
modrm	O
.	O
mod	O
==	O
3	int
)	O
OP_E_register	O
(	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
else	O
OP_E_memory	O
(	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
}	O
static	O
void	O
OP_G	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
int	O
add	O
=	O
0	int
;	O
const	O
char	O
*	O
*	O
names	O
;	O
USED_REX	O
(	O
REX_R	O
)	O
;	O
if	O
(	O
rex	O
&	O
REX_R	O
)	O
add	O
+=	O
8	int
;	O
switch	O
(	O
bytemode	O
)	O
{	O
case	O
b_mode	O
:	O
USED_REX	O
(	O
0	int
)	O
;	O
if	O
(	O
rex	O
)	O
oappend	O
(	O
names8rex	O
[	O
modrm	O
.	O
reg	O
+	O
add	O
]	O
)	O
;	O
else	O
oappend	O
(	O
names8	O
[	O
modrm	O
.	O
reg	O
+	O
add	O
]	O
)	O
;	O
break	O
;	O
case	O
w_mode	O
:	O
oappend	O
(	O
names16	O
[	O
modrm	O
.	O
reg	O
+	O
add	O
]	O
)	O
;	O
break	O
;	O
case	O
d_mode	O
:	O
case	O
db_mode	O
:	O
case	O
dw_mode	O
:	O
oappend	O
(	O
names32	O
[	O
modrm	O
.	O
reg	O
+	O
add	O
]	O
)	O
;	O
break	O
;	O
case	O
q_mode	O
:	O
oappend	O
(	O
names64	O
[	O
modrm	O
.	O
reg	O
+	O
add	O
]	O
)	O
;	O
break	O
;	O
case	O
bnd_mode	O
:	O
if	O
(	O
modrm	O
.	O
reg	O
>	O
0x3	int
)	O
{	O
oappend	O
(	O
"(bad)"	*(char)
)	O
;	O
return	O
;	O
}	O
oappend	O
(	O
names_bnd	O
[	O
modrm	O
.	O
reg	O
]	O
)	O
;	O
break	O
;	O
case	O
v_mode	O
:	O
case	O
dq_mode	O
:	O
case	O
dqb_mode	O
:	O
case	O
dqd_mode	O
:	O
case	O
dqw_mode	O
:	O
USED_REX	O
(	O
REX_W	O
)	O
;	O
if	O
(	O
rex	O
&	O
REX_W	O
)	O
oappend	O
(	O
names64	O
[	O
modrm	O
.	O
reg	O
+	O
add	O
]	O
)	O
;	O
else	O
{	O
if	O
(	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
||	O
bytemode	O
!=	O
v_mode	O
)	O
oappend	O
(	O
names32	O
[	O
modrm	O
.	O
reg	O
+	O
add	O
]	O
)	O
;	O
else	O
oappend	O
(	O
names16	O
[	O
modrm	O
.	O
reg	O
+	O
add	O
]	O
)	O
;	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
;	O
}	O
break	O
;	O
case	O
va_mode	O
:	O
names	O
=	O
(	O
address_mode	O
==	O
mode_64bit	O
?	O
names64	O
:	O
names32	O
)	O
;	O
if	O
(	O
!	O
(	O
prefixes	O
&	O
PREFIX_ADDR	O
)	O
)	O
{	O
if	O
(	O
address_mode	O
==	O
mode_16bit	O
)	O
names	O
=	O
names16	O
;	O
}	O
else	O
{	O
all_prefixes	O
[	O
last_addr_prefix	O
]	O
=	O
0	int
;	O
names	O
=	O
(	O
address_mode	O
!=	O
mode_32bit	O
?	O
names32	O
:	O
names16	O
)	O
;	O
used_prefixes	O
|=	O
PREFIX_ADDR	O
;	O
}	O
oappend	O
(	O
names	O
[	O
modrm	O
.	O
reg	O
+	O
add	O
]	O
)	O
;	O
break	O
;	O
case	O
m_mode	O
:	O
if	O
(	O
address_mode	O
==	O
mode_64bit	O
)	O
oappend	O
(	O
names64	O
[	O
modrm	O
.	O
reg	O
+	O
add	O
]	O
)	O
;	O
else	O
oappend	O
(	O
names32	O
[	O
modrm	O
.	O
reg	O
+	O
add	O
]	O
)	O
;	O
break	O
;	O
case	O
mask_bd_mode	O
:	O
case	O
mask_mode	O
:	O
if	O
(	O
(	O
modrm	O
.	O
reg	O
+	O
add	O
)	O
>	O
0x7	int
)	O
{	O
oappend	O
(	O
"(bad)"	*(char)
)	O
;	O
return	O
;	O
}	O
oappend	O
(	O
names_mask	O
[	O
modrm	O
.	O
reg	O
+	O
add	O
]	O
)	O
;	O
break	O
;	O
default	O
:	O
oappend	O
(	O
INTERNAL_DISASSEMBLER_ERROR	O
)	O
;	O
break	O
;	O
}	O
}	O
static	O
bfd_vma	long
get64	O
(	O
void	O
)	O
{	O
bfd_vma	long
x	O
;	O
unsigned	O
int	O
a	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct(*(*`),long,long,*(struct`))),*(*(struct(*`,long,long,*`))),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct(struct(*`,long,long,*`),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(struct`),*(char),long,int,*(struct`),union(*`,long))),*(*(struct(*`,*`,long,int,*`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
;	O
unsigned	O
int	O
b	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct(*(*`),long,long,*(struct`))),*(*(struct(*`,long,long,*`))),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct(struct(*`,long,long,*`),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(struct`),*(char),long,int,*(struct`),union(*`,long))),*(*(struct(*`,*`,long,int,*`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
;	O
FETCH_DATA	O
(	O
the_info	O
,	O
codep	O
+	O
8	int
)	O
;	O
a	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct(*(*`),long,long,*(struct`))),*(*(struct(*`,long,long,*`))),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct(struct(*`,long,long,*`),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(struct`),*(char),long,int,*(struct`),union(*`,long))),*(*(struct(*`,*`,long,int,*`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
=	O
*	O
codep	O
++	O
&	O
0xff	int
;	O
a	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct(*(*`),long,long,*(struct`))),*(*(struct(*`,long,long,*`))),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct(struct(*`,long,long,*`),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(struct`),*(char),long,int,*(struct`),union(*`,long))),*(*(struct(*`,*`,long,int,*`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
|=	O
(	O
*	O
codep	O
++	O
&	O
0xff	int
)	O
<<	O
8	int
;	O
a	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct(*(*`),long,long,*(struct`))),*(*(struct(*`,long,long,*`))),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct(struct(*`,long,long,*`),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(struct`),*(char),long,int,*(struct`),union(*`,long))),*(*(struct(*`,*`,long,int,*`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
|=	O
(	O
*	O
codep	O
++	O
&	O
0xff	int
)	O
<<	O
16	int
;	O
a	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct(*(*`),long,long,*(struct`))),*(*(struct(*`,long,long,*`))),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct(struct(*`,long,long,*`),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(struct`),*(char),long,int,*(struct`),union(*`,long))),*(*(struct(*`,*`,long,int,*`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
|=	O
(	O
*	O
codep	O
++	O
&	O
0xffu	int
)	O
<<	O
24	int
;	O
b	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct(*(*`),long,long,*(struct`))),*(*(struct(*`,long,long,*`))),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct(struct(*`,long,long,*`),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(struct`),*(char),long,int,*(struct`),union(*`,long))),*(*(struct(*`,*`,long,int,*`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
=	O
*	O
codep	O
++	O
&	O
0xff	int
;	O
b	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct(*(*`),long,long,*(struct`))),*(*(struct(*`,long,long,*`))),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct(struct(*`,long,long,*`),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(struct`),*(char),long,int,*(struct`),union(*`,long))),*(*(struct(*`,*`,long,int,*`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
|=	O
(	O
*	O
codep	O
++	O
&	O
0xff	int
)	O
<<	O
8	int
;	O
b	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct(*(*`),long,long,*(struct`))),*(*(struct(*`,long,long,*`))),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct(struct(*`,long,long,*`),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(struct`),*(char),long,int,*(struct`),union(*`,long))),*(*(struct(*`,*`,long,int,*`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
|=	O
(	O
*	O
codep	O
++	O
&	O
0xff	int
)	O
<<	O
16	int
;	O
b	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct(*(*`),long,long,*(struct`))),*(*(struct(*`,long,long,*`))),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct(struct(*`,long,long,*`),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(struct`),*(char),long,int,*(struct`),union(*`,long))),*(*(struct(*`,*`,long,int,*`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
|=	O
(	O
*	O
codep	O
++	O
&	O
0xffu	int
)	O
<<	O
24	int
;	O
x	O
=	O
a	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct(*(*`),long,long,*(struct`))),*(*(struct(*`,long,long,*`))),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct(struct(*`,long,long,*`),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(struct`),*(char),long,int,*(struct`),union(*`,long))),*(*(struct(*`,*`,long,int,*`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
+	O
(	O
(	O
bfd_vma	long
)	O
b	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct(*(*`),long,long,*(struct`))),*(*(struct(*`,long,long,*`))),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct(struct(*`,long,long,*`),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(struct`),*(char),long,int,*(struct`),union(*`,long))),*(*(struct(*`,*`,long,int,*`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
<<	O
32	int
)	O
;	O
return	O
x	O
;	O
}	O
static	O
bfd_signed_vma	long
get32	O
(	O
void	O
)	O
{	O
bfd_signed_vma	long
x	O
=	O
0	int
;	O
FETCH_DATA	O
(	O
the_info	O
,	O
codep	O
+	O
4	int
)	O
;	O
x	O
=	O
*	O
codep	O
++	O
&	O
(	O
bfd_signed_vma	long
)	O
0xff	int
;	O
x	O
|=	O
(	O
*	O
codep	O
++	O
&	O
(	O
bfd_signed_vma	long
)	O
0xff	int
)	O
<<	O
8	int
;	O
x	O
|=	O
(	O
*	O
codep	O
++	O
&	O
(	O
bfd_signed_vma	long
)	O
0xff	int
)	O
<<	O
16	int
;	O
x	O
|=	O
(	O
*	O
codep	O
++	O
&	O
(	O
bfd_signed_vma	long
)	O
0xff	int
)	O
<<	O
24	int
;	O
return	O
x	O
;	O
}	O
static	O
bfd_signed_vma	long
get32s	O
(	O
void	O
)	O
{	O
bfd_signed_vma	long
x	O
=	O
0	int
;	O
FETCH_DATA	O
(	O
the_info	O
,	O
codep	O
+	O
4	int
)	O
;	O
x	O
=	O
*	O
codep	O
++	O
&	O
(	O
bfd_signed_vma	long
)	O
0xff	int
;	O
x	O
|=	O
(	O
*	O
codep	O
++	O
&	O
(	O
bfd_signed_vma	long
)	O
0xff	int
)	O
<<	O
8	int
;	O
x	O
|=	O
(	O
*	O
codep	O
++	O
&	O
(	O
bfd_signed_vma	long
)	O
0xff	int
)	O
<<	O
16	int
;	O
x	O
|=	O
(	O
*	O
codep	O
++	O
&	O
(	O
bfd_signed_vma	long
)	O
0xff	int
)	O
<<	O
24	int
;	O
x	O
=	O
(	O
x	O
^	O
(	O
(	O
bfd_signed_vma	long
)	O
1	int
<<	O
31	int
)	O
)	O
-	O
(	O
(	O
bfd_signed_vma	long
)	O
1	int
<<	O
31	int
)	O
;	O
return	O
x	O
;	O
}	O
static	O
int	O
get16	O
(	O
void	O
)	O
{	O
int	O
x	O
=	O
0	int
;	O
FETCH_DATA	O
(	O
the_info	O
,	O
codep	O
+	O
2	int
)	O
;	O
x	O
=	O
*	O
codep	O
++	O
&	O
0xff	int
;	O
x	O
|=	O
(	O
*	O
codep	O
++	O
&	O
0xff	int
)	O
<<	O
8	int
;	O
return	O
x	O
;	O
}	O
static	O
void	O
set_op	O
(	O
bfd_vma	long
op	O
,	O
int	O
riprel	O
)	O
{	O
op_index	O
[	O
op_ad	O
]	O
=	O
op_ad	O
;	O
if	O
(	O
address_mode	O
==	O
mode_64bit	O
)	O
{	O
op_address	O
[	O
op_ad	O
]	O
=	O
op	O
;	O
op_riprel	O
[	O
op_ad	O
]	O
=	O
riprel	O
;	O
}	O
else	O
{	O
op_address	O
[	O
op_ad	O
]	O
=	O
op	O
&	O
0xffffffff	int
;	O
op_riprel	O
[	O
op_ad	O
]	O
=	O
riprel	O
&	O
0xffffffff	int
;	O
}	O
}	O
static	O
void	O
OP_REG	O
(	O
int	O
code	int
,	O
int	O
sizeflag	O
)	O
{	O
const	O
char	O
*	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
;	O
int	O
add	O
;	O
switch	O
(	O
code	int
)	O
{	O
case	O
es_reg	O
:	O
case	O
ss_reg	O
:	O
case	O
cs_reg	O
:	O
case	O
ds_reg	O
:	O
case	O
fs_reg	O
:	O
case	O
gs_reg	O
:	O
oappend	O
(	O
names_seg	O
[	O
code	int
-	O
es_reg	O
]	O
)	O
;	O
return	O
;	O
}	O
USED_REX	O
(	O
REX_B	O
)	O
;	O
if	O
(	O
rex	O
&	O
REX_B	O
)	O
add	O
=	O
8	int
;	O
else	O
add	O
=	O
0	int
;	O
switch	O
(	O
code	int
)	O
{	O
case	O
ax_reg	O
:	O
case	O
cx_reg	O
:	O
case	O
dx_reg	O
:	O
case	O
bx_reg	O
:	O
case	O
sp_reg	O
:	O
case	O
bp_reg	O
:	O
case	O
si_reg	O
:	O
case	O
di_reg	O
:	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
=	O
names16	O
[	O
code	int
-	O
ax_reg	O
+	O
add	O
]	O
;	O
break	O
;	O
case	O
al_reg	O
:	O
case	O
ah_reg	O
:	O
case	O
cl_reg	O
:	O
case	O
ch_reg	O
:	O
case	O
dl_reg	O
:	O
case	O
dh_reg	O
:	O
case	O
bl_reg	O
:	O
case	O
bh_reg	O
:	O
USED_REX	O
(	O
0	int
)	O
;	O
if	O
(	O
rex	O
)	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
=	O
names8rex	O
[	O
code	int
-	O
al_reg	O
+	O
add	O
]	O
;	O
else	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
=	O
names8	O
[	O
code	int
-	O
al_reg	O
]	O
;	O
break	O
;	O
case	O
rAX_reg	O
:	O
case	O
rCX_reg	O
:	O
case	O
rDX_reg	O
:	O
case	O
rBX_reg	O
:	O
case	O
rSP_reg	O
:	O
case	O
rBP_reg	O
:	O
case	O
rSI_reg	O
:	O
case	O
rDI_reg	O
:	O
if	O
(	O
address_mode	O
==	O
mode_64bit	O
&&	O
(	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
||	O
(	O
rex	O
&	O
REX_W	O
)	O
)	O
)	O
{	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
=	O
names64	O
[	O
code	int
-	O
rAX_reg	O
+	O
add	O
]	O
;	O
break	O
;	O
}	O
code	int
+=	O
eAX_reg	O
-	O
rAX_reg	O
;	O
case	O
eAX_reg	O
:	O
case	O
eCX_reg	O
:	O
case	O
eDX_reg	O
:	O
case	O
eBX_reg	O
:	O
case	O
eSP_reg	O
:	O
case	O
eBP_reg	O
:	O
case	O
eSI_reg	O
:	O
case	O
eDI_reg	O
:	O
USED_REX	O
(	O
REX_W	O
)	O
;	O
if	O
(	O
rex	O
&	O
REX_W	O
)	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
=	O
names64	O
[	O
code	int
-	O
eAX_reg	O
+	O
add	O
]	O
;	O
else	O
{	O
if	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
=	O
names32	O
[	O
code	int
-	O
eAX_reg	O
+	O
add	O
]	O
;	O
else	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
=	O
names16	O
[	O
code	int
-	O
eAX_reg	O
+	O
add	O
]	O
;	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
;	O
}	O
break	O
;	O
default	O
:	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
=	O
INTERNAL_DISASSEMBLER_ERROR	O
;	O
break	O
;	O
}	O
oappend	O
(	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
)	O
;	O
}	O
static	O
void	O
OP_IMREG	O
(	O
int	O
code	int
,	O
int	O
sizeflag	O
)	O
{	O
const	O
char	O
*	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
;	O
switch	O
(	O
code	int
)	O
{	O
case	O
indir_dx_reg	O
:	O
if	O
(	O
intel_syntax	O
)	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
=	O
"dx"	*(char)
;	O
else	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
=	O
"(%dx)"	*(char)
;	O
break	O
;	O
case	O
ax_reg	O
:	O
case	O
cx_reg	O
:	O
case	O
dx_reg	O
:	O
case	O
bx_reg	O
:	O
case	O
sp_reg	O
:	O
case	O
bp_reg	O
:	O
case	O
si_reg	O
:	O
case	O
di_reg	O
:	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
=	O
names16	O
[	O
code	int
-	O
ax_reg	O
]	O
;	O
break	O
;	O
case	O
es_reg	O
:	O
case	O
ss_reg	O
:	O
case	O
cs_reg	O
:	O
case	O
ds_reg	O
:	O
case	O
fs_reg	O
:	O
case	O
gs_reg	O
:	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
=	O
names_seg	O
[	O
code	int
-	O
es_reg	O
]	O
;	O
break	O
;	O
case	O
al_reg	O
:	O
case	O
ah_reg	O
:	O
case	O
cl_reg	O
:	O
case	O
ch_reg	O
:	O
case	O
dl_reg	O
:	O
case	O
dh_reg	O
:	O
case	O
bl_reg	O
:	O
case	O
bh_reg	O
:	O
USED_REX	O
(	O
0	int
)	O
;	O
if	O
(	O
rex	O
)	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
=	O
names8rex	O
[	O
code	int
-	O
al_reg	O
]	O
;	O
else	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
=	O
names8	O
[	O
code	int
-	O
al_reg	O
]	O
;	O
break	O
;	O
case	O
eAX_reg	O
:	O
case	O
eCX_reg	O
:	O
case	O
eDX_reg	O
:	O
case	O
eBX_reg	O
:	O
case	O
eSP_reg	O
:	O
case	O
eBP_reg	O
:	O
case	O
eSI_reg	O
:	O
case	O
eDI_reg	O
:	O
USED_REX	O
(	O
REX_W	O
)	O
;	O
if	O
(	O
rex	O
&	O
REX_W	O
)	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
=	O
names64	O
[	O
code	int
-	O
eAX_reg	O
]	O
;	O
else	O
{	O
if	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
=	O
names32	O
[	O
code	int
-	O
eAX_reg	O
]	O
;	O
else	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
=	O
names16	O
[	O
code	int
-	O
eAX_reg	O
]	O
;	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
;	O
}	O
break	O
;	O
case	O
z_mode_ax_reg	O
:	O
if	O
(	O
(	O
rex	O
&	O
REX_W	O
)	O
||	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
)	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
=	O
*	O
names32	O
;	O
else	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
=	O
*	O
names16	O
;	O
if	O
(	O
!	O
(	O
rex	O
&	O
REX_W	O
)	O
)	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
;	O
break	O
;	O
default	O
:	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
=	O
INTERNAL_DISASSEMBLER_ERROR	O
;	O
break	O
;	O
}	O
oappend	O
(	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
)	O
;	O
}	O
static	O
void	O
OP_I	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
bfd_signed_vma	long
op	O
;	O
bfd_signed_vma	long
mask	O
=	O
-	O
1	int
;	O
switch	O
(	O
bytemode	O
)	O
{	O
case	O
b_mode	O
:	O
FETCH_DATA	O
(	O
the_info	O
,	O
codep	O
+	O
1	int
)	O
;	O
op	O
=	O
*	O
codep	O
++	O
;	O
mask	O
=	O
0xff	int
;	O
break	O
;	O
case	O
v_mode	O
:	O
USED_REX	O
(	O
REX_W	O
)	O
;	O
if	O
(	O
rex	O
&	O
REX_W	O
)	O
op	O
=	O
get32s	O
(	O
)	O
;	O
else	O
{	O
if	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
{	O
op	O
=	O
get32	O
(	O
)	O
;	O
mask	O
=	O
0xffffffff	int
;	O
}	O
else	O
{	O
op	O
=	O
get16	O
(	O
)	O
;	O
mask	O
=	O
0xfffff	int
;	O
}	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
;	O
}	O
break	O
;	O
case	O
d_mode	O
:	O
mask	O
=	O
0xffffffff	int
;	O
op	O
=	O
get32	O
(	O
)	O
;	O
break	O
;	O
case	O
w_mode	O
:	O
mask	O
=	O
0xfffff	int
;	O
op	O
=	O
get16	O
(	O
)	O
;	O
break	O
;	O
case	O
const_1_mode	O
:	O
if	O
(	O
intel_syntax	O
)	O
oappend	O
(	O
"1"	*(char)
)	O
;	O
return	O
;	O
default	O
:	O
oappend	O
(	O
INTERNAL_DISASSEMBLER_ERROR	O
)	O
;	O
return	O
;	O
}	O
op	O
&=	O
mask	O
;	O
scratchbuf	O
[	O
0	int
]	O
=	O
'$'	O
;	O
print_operand_value	O
(	O
scratchbuf	O
+	O
1	int
,	O
1	int
,	O
op	O
)	O
;	O
oappend_maybe_intel	O
(	O
scratchbuf	O
)	O
;	O
scratchbuf	O
[	O
0	int
]	O
=	O
'\0'	O
;	O
}	O
static	O
void	O
OP_I64	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
if	O
(	O
bytemode	O
!=	O
v_mode	O
||	O
address_mode	O
!=	O
mode_64bit	O
||	O
!	O
(	O
rex	O
&	O
REX_W	O
)	O
)	O
{	O
OP_I	O
(	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
return	O
;	O
}	O
USED_REX	O
(	O
REX_W	O
)	O
;	O
scratchbuf	O
[	O
0	int
]	O
=	O
'$'	O
;	O
print_operand_value	O
(	O
scratchbuf	O
+	O
1	int
,	O
1	int
,	O
get64	O
(	O
)	O
)	O
;	O
oappend_maybe_intel	O
(	O
scratchbuf	O
)	O
;	O
scratchbuf	O
[	O
0	int
]	O
=	O
'\0'	O
;	O
}	O
static	O
void	O
OP_sI	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
bfd_signed_vma	long
op	O
;	O
switch	O
(	O
bytemode	O
)	O
{	O
case	O
b_mode	O
:	O
case	O
b_T_mode	O
:	O
FETCH_DATA	O
(	O
the_info	O
,	O
codep	O
+	O
1	int
)	O
;	O
op	O
=	O
*	O
codep	O
++	O
;	O
if	O
(	O
(	O
op	O
&	O
0x80	int
)	O
!=	O
0	int
)	O
op	O
-=	O
0x100	int
;	O
if	O
(	O
bytemode	O
==	O
b_T_mode	O
)	O
{	O
if	O
(	O
address_mode	O
!=	O
mode_64bit	O
||	O
!	O
(	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
||	O
(	O
rex	O
&	O
REX_W	O
)	O
)	O
)	O
{	O
if	O
(	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
||	O
(	O
rex	O
&	O
REX_W	O
)	O
)	O
op	O
&=	O
0xffffffff	int
;	O
else	O
op	O
&=	O
0xffff	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
!	O
(	O
rex	O
&	O
REX_W	O
)	O
)	O
{	O
if	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
op	O
&=	O
0xffffffff	int
;	O
else	O
op	O
&=	O
0xffff	int
;	O
}	O
}	O
break	O
;	O
case	O
v_mode	O
:	O
if	O
(	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
||	O
(	O
rex	O
&	O
REX_W	O
)	O
)	O
op	O
=	O
get32s	O
(	O
)	O
;	O
else	O
op	O
=	O
get16	O
(	O
)	O
;	O
break	O
;	O
default	O
:	O
oappend	O
(	O
INTERNAL_DISASSEMBLER_ERROR	O
)	O
;	O
return	O
;	O
}	O
scratchbuf	O
[	O
0	int
]	O
=	O
'$'	O
;	O
print_operand_value	O
(	O
scratchbuf	O
+	O
1	int
,	O
1	int
,	O
op	O
)	O
;	O
oappend_maybe_intel	O
(	O
scratchbuf	O
)	O
;	O
}	O
static	O
void	O
OP_J	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
bfd_vma	long
disp	O
;	O
bfd_vma	long
mask	O
=	O
-	O
1	int
;	O
bfd_vma	long
segment	O
=	O
0	int
;	O
switch	O
(	O
bytemode	O
)	O
{	O
case	O
b_mode	O
:	O
FETCH_DATA	O
(	O
the_info	O
,	O
codep	O
+	O
1	int
)	O
;	O
disp	O
=	O
*	O
codep	O
++	O
;	O
if	O
(	O
(	O
disp	O
&	O
0x80	int
)	O
!=	O
0	int
)	O
disp	O
-=	O
0x100	int
;	O
break	O
;	O
case	O
v_mode	O
:	O
if	O
(	O
isa64	O
!=	O
intel64	O
)	O
case	O
dqw_mode	O
:	O
USED_REX	O
(	O
REX_W	O
)	O
;	O
if	O
(	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
||	O
(	O
address_mode	O
==	O
mode_64bit	O
&&	O
(	O
(	O
isa64	O
==	O
intel64	O
&&	O
bytemode	O
!=	O
dqw_mode	O
)	O
||	O
(	O
rex	O
&	O
REX_W	O
)	O
)	O
)	O
)	O
disp	O
=	O
get32s	O
(	O
)	O
;	O
else	O
{	O
disp	O
=	O
get16	O
(	O
)	O
;	O
if	O
(	O
(	O
disp	O
&	O
0x8000	int
)	O
!=	O
0	int
)	O
disp	O
-=	O
0x10000	int
;	O
mask	O
=	O
0xffff	int
;	O
if	O
(	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
==	O
0	int
)	O
segment	O
=	O
(	O
(	O
start_pc	O
+	O
(	O
codep	O
-	O
start_codep	O
)	O
)	O
&	O
~	O
(	O
(	O
bfd_vma	long
)	O
0xffff	int
)	O
)	O
;	O
}	O
if	O
(	O
address_mode	O
!=	O
mode_64bit	O
||	O
(	O
isa64	O
!=	O
intel64	O
&&	O
!	O
(	O
rex	O
&	O
REX_W	O
)	O
)	O
)	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
;	O
break	O
;	O
default	O
:	O
oappend	O
(	O
INTERNAL_DISASSEMBLER_ERROR	O
)	O
;	O
return	O
;	O
}	O
disp	O
=	O
(	O
(	O
start_pc	O
+	O
(	O
codep	O
-	O
start_codep	O
)	O
+	O
disp	O
)	O
&	O
mask	O
)	O
|	O
segment	O
;	O
set_op	O
(	O
disp	O
,	O
0	int
)	O
;	O
print_operand_value	O
(	O
scratchbuf	O
,	O
1	int
,	O
disp	O
)	O
;	O
oappend	O
(	O
scratchbuf	O
)	O
;	O
}	O
static	O
void	O
OP_SEG	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
if	O
(	O
bytemode	O
==	O
w_mode	O
)	O
oappend	O
(	O
names_seg	O
[	O
modrm	O
.	O
reg	O
]	O
)	O
;	O
else	O
OP_E	O
(	O
modrm	O
.	O
mod	O
==	O
3	int
?	O
bytemode	O
:	O
w_mode	O
,	O
sizeflag	O
)	O
;	O
}	O
static	O
void	O
OP_DIR	O
(	O
int	O
dummy	O
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	O
)	O
{	O
int	O
seg	O
,	O
offset	long
;	O
if	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
{	O
offset	long
=	O
get32	O
(	O
)	O
;	O
seg	O
=	O
get16	O
(	O
)	O
;	O
}	O
else	O
{	O
offset	long
=	O
get16	O
(	O
)	O
;	O
seg	O
=	O
get16	O
(	O
)	O
;	O
}	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
;	O
if	O
(	O
intel_syntax	O
)	O
sprintf	(*(char),*(char))->(int)
(	O
scratchbuf	O
,	O
"0x%x:0x%x"	*(char)
,	O
seg	O
,	O
offset	long
)	O
;	O
else	O
sprintf	(*(char),*(char))->(int)
(	O
scratchbuf	O
,	O
"$0x%x,$0x%x"	*(char)
,	O
seg	O
,	O
offset	long
)	O
;	O
oappend	O
(	O
scratchbuf	O
)	O
;	O
}	O
static	O
void	O
OP_OFF	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
bfd_vma	long
off	O
;	O
if	O
(	O
intel_syntax	O
&&	O
(	O
sizeflag	O
&	O
SUFFIX_ALWAYS	O
)	O
)	O
intel_operand_size	O
(	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
append_seg	O
(	O
)	O
;	O
if	O
(	O
(	O
sizeflag	O
&	O
AFLAG	O
)	O
||	O
address_mode	O
==	O
mode_64bit	O
)	O
off	O
=	O
get32	O
(	O
)	O
;	O
else	O
off	O
=	O
get16	O
(	O
)	O
;	O
if	O
(	O
intel_syntax	O
)	O
{	O
if	O
(	O
!	O
active_seg_prefix	O
)	O
{	O
oappend	O
(	O
names_seg	O
[	O
ds_reg	O
-	O
es_reg	O
]	O
)	O
;	O
oappend	O
(	O
":"	*(char)
)	O
;	O
}	O
}	O
print_operand_value	O
(	O
scratchbuf	O
,	O
1	int
,	O
off	O
)	O
;	O
oappend	O
(	O
scratchbuf	O
)	O
;	O
}	O
static	O
void	O
OP_OFF64	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
bfd_vma	long
off	O
;	O
if	O
(	O
address_mode	O
!=	O
mode_64bit	O
||	O
(	O
prefixes	O
&	O
PREFIX_ADDR	O
)	O
)	O
{	O
OP_OFF	O
(	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
intel_syntax	O
&&	O
(	O
sizeflag	O
&	O
SUFFIX_ALWAYS	O
)	O
)	O
intel_operand_size	O
(	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
append_seg	O
(	O
)	O
;	O
off	O
=	O
get64	O
(	O
)	O
;	O
if	O
(	O
intel_syntax	O
)	O
{	O
if	O
(	O
!	O
active_seg_prefix	O
)	O
{	O
oappend	O
(	O
names_seg	O
[	O
ds_reg	O
-	O
es_reg	O
]	O
)	O
;	O
oappend	O
(	O
":"	*(char)
)	O
;	O
}	O
}	O
print_operand_value	O
(	O
scratchbuf	O
,	O
1	int
,	O
off	O
)	O
;	O
oappend	O
(	O
scratchbuf	O
)	O
;	O
}	O
static	O
void	O
ptr_reg	O
(	O
int	O
code	int
,	O
int	O
sizeflag	O
)	O
{	O
const	O
char	O
*	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
;	O
*	O
obufp	O
++	O
=	O
open_char	O
;	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_ADDR	O
)	O
;	O
if	O
(	O
address_mode	O
==	O
mode_64bit	O
)	O
{	O
if	O
(	O
!	O
(	O
sizeflag	O
&	O
AFLAG	O
)	O
)	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
=	O
names32	O
[	O
code	int
-	O
eAX_reg	O
]	O
;	O
else	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
=	O
names64	O
[	O
code	int
-	O
eAX_reg	O
]	O
;	O
}	O
else	O
if	O
(	O
sizeflag	O
&	O
AFLAG	O
)	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
=	O
names32	O
[	O
code	int
-	O
eAX_reg	O
]	O
;	O
else	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
=	O
names16	O
[	O
code	int
-	O
eAX_reg	O
]	O
;	O
oappend	O
(	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
)	O
;	O
*	O
obufp	O
++	O
=	O
close_char	O
;	O
*	O
obufp	O
=	O
0	int
;	O
}	O
static	O
void	O
OP_ESreg	O
(	O
int	O
code	int
,	O
int	O
sizeflag	O
)	O
{	O
if	O
(	O
intel_syntax	O
)	O
{	O
switch	O
(	O
codep	O
[	O
-	O
1	int
]	O
)	O
{	O
case	O
0x6d	int
:	O
intel_operand_size	O
(	O
z_mode	O
,	O
sizeflag	O
)	O
;	O
break	O
;	O
case	O
0xa5	int
:	O
case	O
0xa7	int
:	O
case	O
0xab	int
:	O
case	O
0xaf	int
:	O
intel_operand_size	O
(	O
v_mode	O
,	O
sizeflag	O
)	O
;	O
break	O
;	O
default	O
:	O
intel_operand_size	O
(	O
b_mode	O
,	O
sizeflag	O
)	O
;	O
}	O
}	O
oappend_maybe_intel	O
(	O
"%es:"	*(char)
)	O
;	O
ptr_reg	O
(	O
code	int
,	O
sizeflag	O
)	O
;	O
}	O
static	O
void	O
OP_DSreg	O
(	O
int	O
code	int
,	O
int	O
sizeflag	O
)	O
{	O
if	O
(	O
intel_syntax	O
)	O
{	O
switch	O
(	O
codep	O
[	O
-	O
1	int
]	O
)	O
{	O
case	O
0x6f	int
:	O
intel_operand_size	O
(	O
z_mode	O
,	O
sizeflag	O
)	O
;	O
break	O
;	O
case	O
0xa5	int
:	O
case	O
0xa7	int
:	O
case	O
0xad	int
:	O
intel_operand_size	O
(	O
v_mode	O
,	O
sizeflag	O
)	O
;	O
break	O
;	O
default	O
:	O
intel_operand_size	O
(	O
b_mode	O
,	O
sizeflag	O
)	O
;	O
}	O
}	O
if	O
(	O
!	O
active_seg_prefix	O
)	O
active_seg_prefix	O
=	O
PREFIX_DS	O
;	O
append_seg	O
(	O
)	O
;	O
ptr_reg	O
(	O
code	int
,	O
sizeflag	O
)	O
;	O
}	O
static	O
void	O
OP_C	O
(	O
int	O
dummy	O
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	O
ATTRIBUTE_UNUSED	O
)	O
{	O
int	O
add	O
;	O
if	O
(	O
rex	O
&	O
REX_R	O
)	O
{	O
USED_REX	O
(	O
REX_R	O
)	O
;	O
add	O
=	O
8	int
;	O
}	O
else	O
if	O
(	O
address_mode	O
!=	O
mode_64bit	O
&&	O
(	O
prefixes	O
&	O
PREFIX_LOCK	O
)	O
)	O
{	O
all_prefixes	O
[	O
last_lock_prefix	O
]	O
=	O
0	int
;	O
used_prefixes	O
|=	O
PREFIX_LOCK	O
;	O
add	O
=	O
8	int
;	O
}	O
else	O
add	O
=	O
0	int
;	O
sprintf	(*(char),*(char))->(int)
(	O
scratchbuf	O
,	O
"%%cr%d"	*(char)
,	O
modrm	O
.	O
reg	O
+	O
add	O
)	O
;	O
oappend_maybe_intel	O
(	O
scratchbuf	O
)	O
;	O
}	O
static	O
void	O
OP_D	O
(	O
int	O
dummy	O
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	O
ATTRIBUTE_UNUSED	O
)	O
{	O
int	O
add	O
;	O
USED_REX	O
(	O
REX_R	O
)	O
;	O
if	O
(	O
rex	O
&	O
REX_R	O
)	O
add	O
=	O
8	int
;	O
else	O
add	O
=	O
0	int
;	O
if	O
(	O
intel_syntax	O
)	O
sprintf	(*(char),*(char))->(int)
(	O
scratchbuf	O
,	O
"db%d"	*(char)
,	O
modrm	O
.	O
reg	O
+	O
add	O
)	O
;	O
else	O
sprintf	(*(char),*(char))->(int)
(	O
scratchbuf	O
,	O
"%%db%d"	*(char)
,	O
modrm	O
.	O
reg	O
+	O
add	O
)	O
;	O
oappend	O
(	O
scratchbuf	O
)	O
;	O
}	O
static	O
void	O
OP_T	O
(	O
int	O
dummy	O
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	O
ATTRIBUTE_UNUSED	O
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
scratchbuf	O
,	O
"%%tr%d"	*(char)
,	O
modrm	O
.	O
reg	O
)	O
;	O
oappend_maybe_intel	O
(	O
scratchbuf	O
)	O
;	O
}	O
static	O
void	O
OP_R	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
MODRM_CHECK	O
;	O
codep	O
++	O
;	O
OP_E_register	O
(	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
}	O
static	O
void	O
OP_MMX	O
(	O
int	O
bytemode	O
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	O
ATTRIBUTE_UNUSED	O
)	O
{	O
int	O
reg	O
=	O
modrm	O
.	O
reg	O
;	O
const	O
char	O
*	O
*	O
names	O
;	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
;	O
if	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
{	O
names	O
=	O
names_xmm	O
;	O
USED_REX	O
(	O
REX_R	O
)	O
;	O
if	O
(	O
rex	O
&	O
REX_R	O
)	O
reg	O
+=	O
8	int
;	O
}	O
else	O
names	O
=	O
names_mm	O
;	O
oappend	O
(	O
names	O
[	O
reg	O
]	O
)	O
;	O
}	O
static	O
void	O
OP_XMM	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
ATTRIBUTE_UNUSED	O
)	O
{	O
int	O
reg	O
=	O
modrm	O
.	O
reg	O
;	O
const	O
char	O
*	O
*	O
names	O
;	O
USED_REX	O
(	O
REX_R	O
)	O
;	O
if	O
(	O
rex	O
&	O
REX_R	O
)	O
reg	O
+=	O
8	int
;	O
if	O
(	O
vex	O
.	O
evex	O
)	O
{	O
if	O
(	O
!	O
vex	O
.	O
r	O
)	O
reg	O
+=	O
16	int
;	O
}	O
if	O
(	O
need_vex	O
&&	O
bytemode	O
!=	O
xmm_mode	O
&&	O
bytemode	O
!=	O
xmmq_mode	O
&&	O
bytemode	O
!=	O
evex_half_bcst_xmmq_mode	O
&&	O
bytemode	O
!=	O
ymm_mode	O
&&	O
bytemode	O
!=	O
scalar_mode	O
)	O
{	O
switch	O
(	O
vex	O
.	O
length	O
)	O
{	O
case	O
128	int
:	O
names	O
=	O
names_xmm	O
;	O
break	O
;	O
case	O
256	int
:	O
if	O
(	O
vex	O
.	O
w	O
||	O
(	O
bytemode	O
!=	O
vex_vsib_q_w_dq_mode	O
&&	O
bytemode	O
!=	O
vex_vsib_q_w_d_mode	O
)	O
)	O
names	O
=	O
names_ymm	O
;	O
else	O
names	O
=	O
names_xmm	O
;	O
break	O
;	O
case	O
512	int
:	O
names	O
=	O
names_zmm	O
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
}	O
else	O
if	O
(	O
bytemode	O
==	O
xmmq_mode	O
||	O
bytemode	O
==	O
evex_half_bcst_xmmq_mode	O
)	O
{	O
switch	O
(	O
vex	O
.	O
length	O
)	O
{	O
case	O
128	int
:	O
case	O
256	int
:	O
names	O
=	O
names_xmm	O
;	O
break	O
;	O
case	O
512	int
:	O
names	O
=	O
names_ymm	O
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
}	O
else	O
if	O
(	O
bytemode	O
==	O
ymm_mode	O
)	O
names	O
=	O
names_ymm	O
;	O
else	O
names	O
=	O
names_xmm	O
;	O
oappend	O
(	O
names	O
[	O
reg	O
]	O
)	O
;	O
}	O
static	O
void	O
OP_EM	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
int	O
reg	O
;	O
const	O
char	O
*	O
*	O
names	O
;	O
if	O
(	O
modrm	O
.	O
mod	O
!=	O
3	int
)	O
{	O
if	O
(	O
intel_syntax	O
&&	O
(	O
bytemode	O
==	O
v_mode	O
||	O
bytemode	O
==	O
v_swap_mode	O
)	O
)	O
{	O
bytemode	O
=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
?	O
x_mode	O
:	O
q_mode	O
;	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
;	O
}	O
OP_E	O
(	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
(	O
sizeflag	O
&	O
SUFFIX_ALWAYS	O
)	O
&&	O
bytemode	O
==	O
v_swap_mode	O
)	O
swap_operand	O
(	O
)	O
;	O
MODRM_CHECK	O
;	O
codep	O
++	O
;	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
;	O
reg	O
=	O
modrm	O
.	O
rm	O
;	O
if	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
{	O
names	O
=	O
names_xmm	O
;	O
USED_REX	O
(	O
REX_B	O
)	O
;	O
if	O
(	O
rex	O
&	O
REX_B	O
)	O
reg	O
+=	O
8	int
;	O
}	O
else	O
names	O
=	O
names_mm	O
;	O
oappend	O
(	O
names	O
[	O
reg	O
]	O
)	O
;	O
}	O
static	O
void	O
OP_EMC	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
if	O
(	O
modrm	O
.	O
mod	O
!=	O
3	int
)	O
{	O
if	O
(	O
intel_syntax	O
&&	O
bytemode	O
==	O
v_mode	O
)	O
{	O
bytemode	O
=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
?	O
x_mode	O
:	O
q_mode	O
;	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
;	O
}	O
OP_E	O
(	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
return	O
;	O
}	O
MODRM_CHECK	O
;	O
codep	O
++	O
;	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
;	O
oappend	O
(	O
names_mm	O
[	O
modrm	O
.	O
rm	O
]	O
)	O
;	O
}	O
static	O
void	O
OP_MXC	O
(	O
int	O
bytemode	O
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	O
ATTRIBUTE_UNUSED	O
)	O
{	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
;	O
oappend	O
(	O
names_mm	O
[	O
modrm	O
.	O
reg	O
]	O
)	O
;	O
}	O
static	O
void	O
OP_EX	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
int	O
reg	O
;	O
const	O
char	O
*	O
*	O
names	O
;	O
MODRM_CHECK	O
;	O
codep	O
++	O
;	O
if	O
(	O
modrm	O
.	O
mod	O
!=	O
3	int
)	O
{	O
OP_E_memory	O
(	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
return	O
;	O
}	O
reg	O
=	O
modrm	O
.	O
rm	O
;	O
USED_REX	O
(	O
REX_B	O
)	O
;	O
if	O
(	O
rex	O
&	O
REX_B	O
)	O
reg	O
+=	O
8	int
;	O
if	O
(	O
vex	O
.	O
evex	O
)	O
{	O
USED_REX	O
(	O
REX_X	O
)	O
;	O
if	O
(	O
(	O
rex	O
&	O
REX_X	O
)	O
)	O
reg	O
+=	O
16	int
;	O
}	O
if	O
(	O
(	O
sizeflag	O
&	O
SUFFIX_ALWAYS	O
)	O
&&	O
(	O
bytemode	O
==	O
x_swap_mode	O
||	O
bytemode	O
==	O
d_swap_mode	O
||	O
bytemode	O
==	O
d_scalar_swap_mode	O
||	O
bytemode	O
==	O
q_swap_mode	O
||	O
bytemode	O
==	O
q_scalar_swap_mode	O
)	O
)	O
swap_operand	O
(	O
)	O
;	O
if	O
(	O
need_vex	O
&&	O
bytemode	O
!=	O
xmm_mode	O
&&	O
bytemode	O
!=	O
xmmdw_mode	O
&&	O
bytemode	O
!=	O
xmmqd_mode	O
&&	O
bytemode	O
!=	O
xmm_mb_mode	O
&&	O
bytemode	O
!=	O
xmm_mw_mode	O
&&	O
bytemode	O
!=	O
xmm_md_mode	O
&&	O
bytemode	O
!=	O
xmm_mq_mode	O
&&	O
bytemode	O
!=	O
xmm_mdq_mode	O
&&	O
bytemode	O
!=	O
xmmq_mode	O
&&	O
bytemode	O
!=	O
evex_half_bcst_xmmq_mode	O
&&	O
bytemode	O
!=	O
ymm_mode	O
&&	O
bytemode	O
!=	O
d_scalar_mode	O
&&	O
bytemode	O
!=	O
d_scalar_swap_mode	O
&&	O
bytemode	O
!=	O
q_scalar_mode	O
&&	O
bytemode	O
!=	O
q_scalar_swap_mode	O
&&	O
bytemode	O
!=	O
vex_scalar_w_dq_mode	O
)	O
{	O
switch	O
(	O
vex	O
.	O
length	O
)	O
{	O
case	O
128	int
:	O
names	O
=	O
names_xmm	O
;	O
break	O
;	O
case	O
256	int
:	O
names	O
=	O
names_ymm	O
;	O
break	O
;	O
case	O
512	int
:	O
names	O
=	O
names_zmm	O
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
}	O
else	O
if	O
(	O
bytemode	O
==	O
xmmq_mode	O
||	O
bytemode	O
==	O
evex_half_bcst_xmmq_mode	O
)	O
{	O
switch	O
(	O
vex	O
.	O
length	O
)	O
{	O
case	O
128	int
:	O
case	O
256	int
:	O
names	O
=	O
names_xmm	O
;	O
break	O
;	O
case	O
512	int
:	O
names	O
=	O
names_ymm	O
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
}	O
else	O
if	O
(	O
bytemode	O
==	O
ymm_mode	O
)	O
names	O
=	O
names_ymm	O
;	O
else	O
names	O
=	O
names_xmm	O
;	O
oappend	O
(	O
names	O
[	O
reg	O
]	O
)	O
;	O
}	O
static	O
void	O
OP_MS	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
if	O
(	O
modrm	O
.	O
mod	O
==	O
3	int
)	O
OP_EM	O
(	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
else	O
BadOp	O
(	O
)	O
;	O
}	O
static	O
void	O
OP_XS	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
if	O
(	O
modrm	O
.	O
mod	O
==	O
3	int
)	O
OP_EX	O
(	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
else	O
BadOp	O
(	O
)	O
;	O
}	O
static	O
void	O
OP_M	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
if	O
(	O
modrm	O
.	O
mod	O
==	O
3	int
)	O
BadOp	O
(	O
)	O
;	O
else	O
OP_E	O
(	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
}	O
static	O
void	O
OP_0f07	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
if	O
(	O
modrm	O
.	O
mod	O
!=	O
3	int
||	O
modrm	O
.	O
rm	O
!=	O
0	int
)	O
BadOp	O
(	O
)	O
;	O
else	O
OP_E	O
(	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
}	O
static	O
void	O
NOP_Fixup1	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
if	O
(	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
!=	O
0	int
||	O
(	O
rex	O
!=	O
0	int
&&	O
rex	O
!=	O
0x48	int
&&	O
address_mode	O
==	O
mode_64bit	O
)	O
)	O
OP_REG	O
(	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
else	O
strcpy	(*(char),*(char))->(*(char))
(	O
obuf	O
,	O
"nop"	*(char)
)	O
;	O
}	O
static	O
void	O
NOP_Fixup2	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
if	O
(	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
!=	O
0	int
||	O
(	O
rex	O
!=	O
0	int
&&	O
rex	O
!=	O
0x48	int
&&	O
address_mode	O
==	O
mode_64bit	O
)	O
)	O
OP_IMREG	O
(	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
}	O
static	O
const	O
char	O
*	O
const	O
Suffix3DNow	O
[	O
]	O
=	O
{	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
"pi2fw"	*(char)
,	O
"pi2fd"	*(char)
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
"pf2iw"	*(char)
,	O
"pf2id"	*(char)
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
"pfnacc"	*(char)
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
"pfpnacc"	*(char)
,	O
NULL	O
,	O
"pfcmpge"	*(char)
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
"pfmin"	*(char)
,	O
NULL	O
,	O
"pfrcp"	*(char)
,	O
"pfrsqrt"	*(char)
,	O
NULL	O
,	O
NULL	O
,	O
"pfsub"	*(char)
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
"pfadd"	*(char)
,	O
NULL	O
,	O
"pfcmpgt"	*(char)
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
"pfmax"	*(char)
,	O
NULL	O
,	O
"pfrcpit1"	*(char)
,	O
"pfrsqit1"	*(char)
,	O
NULL	O
,	O
NULL	O
,	O
"pfsubr"	*(char)
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
"pfacc"	*(char)
,	O
NULL	O
,	O
"pfcmpeq"	*(char)
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
"pfmul"	*(char)
,	O
NULL	O
,	O
"pfrcpit2"	*(char)
,	O
"pmulhrw"	*(char)
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
"pswapd"	*(char)
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
"pavgusb"	*(char)
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
}	O
;	O
static	O
void	O
OP_3DNowSuffix	O
(	O
int	O
bytemode	O
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	O
ATTRIBUTE_UNUSED	O
)	O
{	O
const	O
char	O
*	O
mnemonic	O
;	O
FETCH_DATA	O
(	O
the_info	O
,	O
codep	O
+	O
1	int
)	O
;	O
obufp	O
=	O
mnemonicendp	O
;	O
mnemonic	O
=	O
Suffix3DNow	O
[	O
*	O
codep	O
++	O
&	O
0xff	int
]	O
;	O
if	O
(	O
mnemonic	O
)	O
oappend	O
(	O
mnemonic	O
)	O
;	O
else	O
{	O
op_out	O
[	O
0	int
]	O
[	O
0	int
]	O
=	O
'\0'	O
;	O
op_out	O
[	O
1	int
]	O
[	O
0	int
]	O
=	O
'\0'	O
;	O
BadOp	O
(	O
)	O
;	O
}	O
mnemonicendp	O
=	O
obufp	O
;	O
}	O
static	O
struct	O
op	O
simd_cmp_op	O
[	O
]	O
=	O
{	O
{	O
STRING_COMMA_LEN	O
(	O
"eq"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"lt"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"le"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"unord"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"neq"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"nlt"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"nle"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"ord"	*(char)
)	O
}	O
}	O
;	O
static	O
void	O
CMP_Fixup	O
(	O
int	O
bytemode	O
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	O
ATTRIBUTE_UNUSED	O
)	O
{	O
unsigned	O
int	O
cmp_type	O
;	O
FETCH_DATA	O
(	O
the_info	O
,	O
codep	O
+	O
1	int
)	O
;	O
cmp_type	O
=	O
*	O
codep	O
++	O
&	O
0xff	int
;	O
if	O
(	O
cmp_type	O
<	O
ARRAY_SIZE	O
(	O
simd_cmp_op	O
)	O
)	O
{	O
char	O
suffix	O
[	O
3	int
]	O
;	O
char	O
*	O
p	*(void)
=	O
mnemonicendp	O
-	O
2	int
;	O
suffix	O
[	O
0	int
]	O
=	O
p	*(void)
[	O
0	int
]	O
;	O
suffix	O
[	O
1	int
]	O
=	O
p	*(void)
[	O
1	int
]	O
;	O
suffix	O
[	O
2	int
]	O
=	O
'\0'	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
p	*(void)
,	O
"%s%s"	*(char)
,	O
simd_cmp_op	O
[	O
cmp_type	O
]	O
.	O
name	*(char)
,	O
suffix	O
)	O
;	O
mnemonicendp	O
+=	O
simd_cmp_op	O
[	O
cmp_type	O
]	O
.	O
len	long
;	O
}	O
else	O
{	O
scratchbuf	O
[	O
0	int
]	O
=	O
'$'	O
;	O
print_operand_value	O
(	O
scratchbuf	O
+	O
1	int
,	O
1	int
,	O
cmp_type	O
)	O
;	O
oappend_maybe_intel	O
(	O
scratchbuf	O
)	O
;	O
scratchbuf	O
[	O
0	int
]	O
=	O
'\0'	O
;	O
}	O
}	O
static	O
void	O
OP_Mwait	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
ATTRIBUTE_UNUSED	O
)	O
{	O
if	O
(	O
!	O
intel_syntax	O
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
op_out	O
[	O
0	int
]	O
,	O
names32	O
[	O
0	int
]	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
op_out	O
[	O
1	int
]	O
,	O
names32	O
[	O
1	int
]	O
)	O
;	O
if	O
(	O
bytemode	O
==	O
eBX_reg	O
)	O
strcpy	(*(char),*(char))->(*(char))
(	O
op_out	O
[	O
2	int
]	O
,	O
names32	O
[	O
3	int
]	O
)	O
;	O
two_source_ops	O
=	O
1	int
;	O
}	O
MODRM_CHECK	O
;	O
codep	O
++	O
;	O
}	O
static	O
void	O
OP_Monitor	O
(	O
int	O
bytemode	O
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	O
ATTRIBUTE_UNUSED	O
)	O
{	O
if	O
(	O
!	O
intel_syntax	O
)	O
{	O
const	O
char	O
*	O
*	O
names	O
=	O
(	O
address_mode	O
==	O
mode_64bit	O
?	O
names64	O
:	O
names32	O
)	O
;	O
if	O
(	O
prefixes	O
&	O
PREFIX_ADDR	O
)	O
{	O
all_prefixes	O
[	O
last_addr_prefix	O
]	O
=	O
0	int
;	O
names	O
=	O
(	O
address_mode	O
!=	O
mode_32bit	O
?	O
names32	O
:	O
names16	O
)	O
;	O
used_prefixes	O
|=	O
PREFIX_ADDR	O
;	O
}	O
else	O
if	O
(	O
address_mode	O
==	O
mode_16bit	O
)	O
names	O
=	O
names16	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
op_out	O
[	O
0	int
]	O
,	O
names	O
[	O
0	int
]	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
op_out	O
[	O
1	int
]	O
,	O
names32	O
[	O
1	int
]	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
op_out	O
[	O
2	int
]	O
,	O
names32	O
[	O
2	int
]	O
)	O
;	O
two_source_ops	O
=	O
1	int
;	O
}	O
MODRM_CHECK	O
;	O
codep	O
++	O
;	O
}	O
static	O
void	O
BadOp	O
(	O
void	O
)	O
{	O
codep	O
=	O
insn_codep	O
+	O
1	int
;	O
oappend	O
(	O
"(bad)"	*(char)
)	O
;	O
}	O
static	O
void	O
REP_Fixup	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
if	O
(	O
prefixes	O
&	O
PREFIX_REPZ	O
)	O
all_prefixes	O
[	O
last_repz_prefix	O
]	O
=	O
REP_PREFIX	O
;	O
switch	O
(	O
bytemode	O
)	O
{	O
case	O
al_reg	O
:	O
case	O
eAX_reg	O
:	O
case	O
indir_dx_reg	O
:	O
OP_IMREG	O
(	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
break	O
;	O
case	O
eDI_reg	O
:	O
OP_ESreg	O
(	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
break	O
;	O
case	O
eSI_reg	O
:	O
OP_DSreg	O
(	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
break	O
;	O
}	O
}	O
static	O
void	O
SEP_Fixup	O
(	O
int	O
bytemode	O
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	O
ATTRIBUTE_UNUSED	O
)	O
{	O
if	O
(	O
isa64	O
!=	O
amd64	O
)	O
return	O
;	O
obufp	O
=	O
obuf	O
;	O
BadOp	O
(	O
)	O
;	O
mnemonicendp	O
=	O
obufp	O
;	O
++	O
codep	O
;	O
}	O
static	O
void	O
BND_Fixup	O
(	O
int	O
bytemode	O
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	O
ATTRIBUTE_UNUSED	O
)	O
{	O
if	O
(	O
prefixes	O
&	O
PREFIX_REPNZ	O
)	O
all_prefixes	O
[	O
last_repnz_prefix	O
]	O
=	O
BND_PREFIX	O
;	O
}	O
static	O
void	O
NOTRACK_Fixup	O
(	O
int	O
bytemode	O
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	O
ATTRIBUTE_UNUSED	O
)	O
{	O
if	O
(	O
active_seg_prefix	O
==	O
PREFIX_DS	O
&&	O
(	O
address_mode	O
!=	O
mode_64bit	O
||	O
last_data_prefix	O
<	O
0	int
)	O
)	O
{	O
active_seg_prefix	O
=	O
0	int
;	O
all_prefixes	O
[	O
last_seg_prefix	O
]	O
=	O
NOTRACK_PREFIX	O
;	O
}	O
}	O
static	O
void	O
HLE_Fixup1	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
if	O
(	O
modrm	O
.	O
mod	O
!=	O
3	int
&&	O
(	O
prefixes	O
&	O
PREFIX_LOCK	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
prefixes	O
&	O
PREFIX_REPZ	O
)	O
all_prefixes	O
[	O
last_repz_prefix	O
]	O
=	O
XRELEASE_PREFIX	O
;	O
if	O
(	O
prefixes	O
&	O
PREFIX_REPNZ	O
)	O
all_prefixes	O
[	O
last_repnz_prefix	O
]	O
=	O
XACQUIRE_PREFIX	O
;	O
}	O
OP_E	O
(	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
}	O
static	O
void	O
HLE_Fixup2	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
if	O
(	O
modrm	O
.	O
mod	O
!=	O
3	int
)	O
{	O
if	O
(	O
prefixes	O
&	O
PREFIX_REPZ	O
)	O
all_prefixes	O
[	O
last_repz_prefix	O
]	O
=	O
XRELEASE_PREFIX	O
;	O
if	O
(	O
prefixes	O
&	O
PREFIX_REPNZ	O
)	O
all_prefixes	O
[	O
last_repnz_prefix	O
]	O
=	O
XACQUIRE_PREFIX	O
;	O
}	O
OP_E	O
(	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
}	O
static	O
void	O
HLE_Fixup3	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
if	O
(	O
modrm	O
.	O
mod	O
!=	O
3	int
&&	O
last_repz_prefix	O
>	O
last_repnz_prefix	O
&&	O
(	O
prefixes	O
&	O
PREFIX_REPZ	O
)	O
!=	O
0	int
)	O
all_prefixes	O
[	O
last_repz_prefix	O
]	O
=	O
XRELEASE_PREFIX	O
;	O
OP_E	O
(	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
}	O
static	O
void	O
CMPXCHG8B_Fixup	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
USED_REX	O
(	O
REX_W	O
)	O
;	O
if	O
(	O
rex	O
&	O
REX_W	O
)	O
{	O
char	O
*	O
p	*(void)
=	O
mnemonicendp	O
-	O
2	int
;	O
mnemonicendp	O
=	O
stpcpy	(*(char),*(char))->(*(char))
(	O
p	*(void)
,	O
"16b"	*(char)
)	O
;	O
bytemode	O
=	O
o_mode	O
;	O
}	O
else	O
if	O
(	O
(	O
prefixes	O
&	O
PREFIX_LOCK	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
prefixes	O
&	O
PREFIX_REPZ	O
)	O
all_prefixes	O
[	O
last_repz_prefix	O
]	O
=	O
XRELEASE_PREFIX	O
;	O
if	O
(	O
prefixes	O
&	O
PREFIX_REPNZ	O
)	O
all_prefixes	O
[	O
last_repnz_prefix	O
]	O
=	O
XACQUIRE_PREFIX	O
;	O
}	O
OP_M	O
(	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
}	O
static	O
void	O
XMM_Fixup	O
(	O
int	O
reg	O
,	O
int	O
sizeflag	O
ATTRIBUTE_UNUSED	O
)	O
{	O
const	O
char	O
*	O
*	O
names	O
;	O
if	O
(	O
need_vex	O
)	O
{	O
switch	O
(	O
vex	O
.	O
length	O
)	O
{	O
case	O
128	int
:	O
names	O
=	O
names_xmm	O
;	O
break	O
;	O
case	O
256	int
:	O
names	O
=	O
names_ymm	O
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
}	O
else	O
names	O
=	O
names_xmm	O
;	O
oappend	O
(	O
names	O
[	O
reg	O
]	O
)	O
;	O
}	O
static	O
void	O
CRC32_Fixup	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
char	O
*	O
p	*(void)
=	O
mnemonicendp	O
;	O
switch	O
(	O
bytemode	O
)	O
{	O
case	O
b_mode	O
:	O
if	O
(	O
intel_syntax	O
)	O
goto	O
skip	O
;	O
*	O
p	*(void)
++	O
=	O
'b'	O
;	O
break	O
;	O
case	O
v_mode	O
:	O
if	O
(	O
intel_syntax	O
)	O
goto	O
skip	O
;	O
USED_REX	O
(	O
REX_W	O
)	O
;	O
if	O
(	O
rex	O
&	O
REX_W	O
)	O
*	O
p	*(void)
++	O
=	O
'q'	O
;	O
else	O
{	O
if	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
*	O
p	*(void)
++	O
=	O
'l'	O
;	O
else	O
*	O
p	*(void)
++	O
=	O
'w'	O
;	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
;	O
}	O
break	O
;	O
default	O
:	O
oappend	O
(	O
INTERNAL_DISASSEMBLER_ERROR	O
)	O
;	O
break	O
;	O
}	O
mnemonicendp	O
=	O
p	*(void)
;	O
*	O
p	*(void)
=	O
'\0'	O
;	O
skip	O
:	O
if	O
(	O
modrm	O
.	O
mod	O
==	O
3	int
)	O
{	O
int	O
add	O
;	O
MODRM_CHECK	O
;	O
codep	O
++	O
;	O
USED_REX	O
(	O
REX_B	O
)	O
;	O
add	O
=	O
(	O
rex	O
&	O
REX_B	O
)	O
?	O
8	int
:	O
0	int
;	O
if	O
(	O
bytemode	O
==	O
b_mode	O
)	O
{	O
USED_REX	O
(	O
0	int
)	O
;	O
if	O
(	O
rex	O
)	O
oappend	O
(	O
names8rex	O
[	O
modrm	O
.	O
rm	O
+	O
add	O
]	O
)	O
;	O
else	O
oappend	O
(	O
names8	O
[	O
modrm	O
.	O
rm	O
+	O
add	O
]	O
)	O
;	O
}	O
else	O
{	O
USED_REX	O
(	O
REX_W	O
)	O
;	O
if	O
(	O
rex	O
&	O
REX_W	O
)	O
oappend	O
(	O
names64	O
[	O
modrm	O
.	O
rm	O
+	O
add	O
]	O
)	O
;	O
else	O
if	O
(	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
)	O
oappend	O
(	O
names16	O
[	O
modrm	O
.	O
rm	O
+	O
add	O
]	O
)	O
;	O
else	O
oappend	O
(	O
names32	O
[	O
modrm	O
.	O
rm	O
+	O
add	O
]	O
)	O
;	O
}	O
}	O
else	O
OP_E	O
(	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
}	O
static	O
void	O
FXSAVE_Fixup	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
USED_REX	O
(	O
REX_W	O
)	O
;	O
if	O
(	O
rex	O
&	O
REX_W	O
)	O
{	O
char	O
*	O
p	*(void)
=	O
mnemonicendp	O
;	O
*	O
p	*(void)
++	O
=	O
'6'	O
;	O
*	O
p	*(void)
++	O
=	O
'4'	O
;	O
*	O
p	*(void)
=	O
'\0'	O
;	O
mnemonicendp	O
=	O
p	*(void)
;	O
}	O
OP_M	O
(	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
}	O
static	O
void	O
PCMPESTR_Fixup	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
if	O
(	O
!	O
intel_syntax	O
)	O
{	O
char	O
*	O
p	*(void)
=	O
mnemonicendp	O
;	O
USED_REX	O
(	O
REX_W	O
)	O
;	O
if	O
(	O
rex	O
&	O
REX_W	O
)	O
*	O
p	*(void)
++	O
=	O
'q'	O
;	O
else	O
if	O
(	O
sizeflag	O
&	O
SUFFIX_ALWAYS	O
)	O
*	O
p	*(void)
++	O
=	O
'l'	O
;	O
*	O
p	*(void)
=	O
'\0'	O
;	O
mnemonicendp	O
=	O
p	*(void)
;	O
}	O
OP_EX	O
(	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
}	O
static	O
void	O
OP_VEX	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
ATTRIBUTE_UNUSED	O
)	O
{	O
int	O
reg	O
;	O
const	O
char	O
*	O
*	O
names	O
;	O
if	O
(	O
!	O
need_vex	O
)	O
abort	()->(void)
(	O
)	O
;	O
if	O
(	O
!	O
need_vex_reg	O
)	O
return	O
;	O
reg	O
=	O
vex	O
.	O
register_specifier	O
;	O
vex	O
.	O
register_specifier	O
=	O
0	int
;	O
if	O
(	O
address_mode	O
!=	O
mode_64bit	O
)	O
reg	O
&=	O
7	int
;	O
else	O
if	O
(	O
vex	O
.	O
evex	O
&&	O
!	O
vex	O
.	O
v	O
)	O
reg	O
+=	O
16	int
;	O
if	O
(	O
bytemode	O
==	O
vex_scalar_mode	O
)	O
{	O
oappend	O
(	O
names_xmm	O
[	O
reg	O
]	O
)	O
;	O
return	O
;	O
}	O
switch	O
(	O
vex	O
.	O
length	O
)	O
{	O
case	O
128	int
:	O
switch	O
(	O
bytemode	O
)	O
{	O
case	O
vex_mode	O
:	O
case	O
vex128_mode	O
:	O
case	O
vex_vsib_q_w_dq_mode	O
:	O
case	O
vex_vsib_q_w_d_mode	O
:	O
names	O
=	O
names_xmm	O
;	O
break	O
;	O
case	O
dq_mode	O
:	O
if	O
(	O
rex	O
&	O
REX_W	O
)	O
names	O
=	O
names64	O
;	O
else	O
names	O
=	O
names32	O
;	O
break	O
;	O
case	O
mask_bd_mode	O
:	O
case	O
mask_mode	O
:	O
if	O
(	O
reg	O
>	O
0x7	int
)	O
{	O
oappend	O
(	O
"(bad)"	*(char)
)	O
;	O
return	O
;	O
}	O
names	O
=	O
names_mask	O
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
return	O
;	O
}	O
break	O
;	O
case	O
256	int
:	O
switch	O
(	O
bytemode	O
)	O
{	O
case	O
vex_mode	O
:	O
case	O
vex256_mode	O
:	O
names	O
=	O
names_ymm	O
;	O
break	O
;	O
case	O
vex_vsib_q_w_dq_mode	O
:	O
case	O
vex_vsib_q_w_d_mode	O
:	O
names	O
=	O
vex	O
.	O
w	O
?	O
names_ymm	O
:	O
names_xmm	O
;	O
break	O
;	O
case	O
mask_bd_mode	O
:	O
case	O
mask_mode	O
:	O
if	O
(	O
reg	O
>	O
0x7	int
)	O
{	O
oappend	O
(	O
"(bad)"	*(char)
)	O
;	O
return	O
;	O
}	O
names	O
=	O
names_mask	O
;	O
break	O
;	O
default	O
:	O
oappend	O
(	O
"(bad)"	*(char)
)	O
;	O
return	O
;	O
}	O
break	O
;	O
case	O
512	int
:	O
names	O
=	O
names_zmm	O
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
break	O
;	O
}	O
oappend	O
(	O
names	O
[	O
reg	O
]	O
)	O
;	O
}	O
static	O
unsigned	O
char	O
get_vex_imm8	O
(	O
int	O
sizeflag	O
,	O
int	O
opnum	O
)	O
{	O
int	O
bytes_before_imm	O
=	O
0	int
;	O
if	O
(	O
modrm	O
.	O
mod	O
!=	O
3	int
)	O
{	O
if	O
(	O
(	O
sizeflag	O
&	O
AFLAG	O
)	O
||	O
address_mode	O
==	O
mode_64bit	O
)	O
{	O
int	O
base	int
=	O
modrm	O
.	O
rm	O
;	O
if	O
(	O
base	int
==	O
4	int
)	O
{	O
FETCH_DATA	O
(	O
the_info	O
,	O
codep	O
+	O
1	int
)	O
;	O
base	int
=	O
*	O
codep	O
&	O
7	int
;	O
if	O
(	O
opnum	O
==	O
0	int
)	O
bytes_before_imm	O
++	O
;	O
}	O
if	O
(	O
opnum	O
==	O
0	int
)	O
{	O
switch	O
(	O
modrm	O
.	O
mod	O
)	O
{	O
case	O
0	int
:	O
if	O
(	O
base	int
!=	O
5	int
)	O
break	O
;	O
case	O
2	int
:	O
bytes_before_imm	O
+=	O
4	int
;	O
break	O
;	O
case	O
1	int
:	O
bytes_before_imm	O
++	O
;	O
break	O
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
opnum	O
==	O
0	int
)	O
{	O
switch	O
(	O
modrm	O
.	O
mod	O
)	O
{	O
case	O
0	int
:	O
if	O
(	O
modrm	O
.	O
rm	O
!=	O
6	int
)	O
break	O
;	O
case	O
2	int
:	O
bytes_before_imm	O
+=	O
2	int
;	O
break	O
;	O
case	O
1	int
:	O
if	O
(	O
opnum	O
==	O
0	int
)	O
bytes_before_imm	O
++	O
;	O
break	O
;	O
}	O
}	O
}	O
}	O
FETCH_DATA	O
(	O
the_info	O
,	O
codep	O
+	O
bytes_before_imm	O
+	O
1	int
)	O
;	O
return	O
codep	O
[	O
bytes_before_imm	O
]	O
;	O
}	O
static	O
void	O
OP_EX_VexReg	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
,	O
int	O
reg	O
)	O
{	O
const	O
char	O
*	O
*	O
names	O
;	O
if	O
(	O
reg	O
==	O
-	O
1	int
&&	O
modrm	O
.	O
mod	O
!=	O
3	int
)	O
{	O
OP_E_memory	O
(	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
return	O
;	O
}	O
else	O
{	O
if	O
(	O
reg	O
==	O
-	O
1	int
)	O
{	O
reg	O
=	O
modrm	O
.	O
rm	O
;	O
USED_REX	O
(	O
REX_B	O
)	O
;	O
if	O
(	O
rex	O
&	O
REX_B	O
)	O
reg	O
+=	O
8	int
;	O
}	O
if	O
(	O
address_mode	O
!=	O
mode_64bit	O
)	O
reg	O
&=	O
7	int
;	O
}	O
switch	O
(	O
vex	O
.	O
length	O
)	O
{	O
case	O
128	int
:	O
names	O
=	O
names_xmm	O
;	O
break	O
;	O
case	O
256	int
:	O
names	O
=	O
names_ymm	O
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
oappend	O
(	O
names	O
[	O
reg	O
]	O
)	O
;	O
}	O
static	O
void	O
OP_EX_VexImmW	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
int	O
reg	O
=	O
-	O
1	int
;	O
static	O
unsigned	O
char	O
vex_imm8	O
;	O
if	O
(	O
vex_w_done	O
==	O
0	int
)	O
{	O
vex_w_done	O
=	O
1	int
;	O
MODRM_CHECK	O
;	O
codep	O
++	O
;	O
vex_imm8	O
=	O
get_vex_imm8	O
(	O
sizeflag	O
,	O
0	int
)	O
;	O
if	O
(	O
vex	O
.	O
w	O
)	O
reg	O
=	O
vex_imm8	O
>>	O
4	int
;	O
OP_EX_VexReg	O
(	O
bytemode	O
,	O
sizeflag	O
,	O
reg	O
)	O
;	O
}	O
else	O
if	O
(	O
vex_w_done	O
==	O
1	int
)	O
{	O
vex_w_done	O
=	O
2	int
;	O
if	O
(	O
!	O
vex	O
.	O
w	O
)	O
reg	O
=	O
vex_imm8	O
>>	O
4	int
;	O
OP_EX_VexReg	O
(	O
bytemode	O
,	O
sizeflag	O
,	O
reg	O
)	O
;	O
}	O
else	O
{	O
scratchbuf	O
[	O
0	int
]	O
=	O
'$'	O
;	O
print_operand_value	O
(	O
scratchbuf	O
+	O
1	int
,	O
1	int
,	O
vex_imm8	O
&	O
0xf	int
)	O
;	O
oappend_maybe_intel	O
(	O
scratchbuf	O
)	O
;	O
scratchbuf	O
[	O
0	int
]	O
=	O
'\0'	O
;	O
codep	O
++	O
;	O
}	O
}	O
static	O
void	O
OP_Vex_2src	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
if	O
(	O
modrm	O
.	O
mod	O
==	O
3	int
)	O
{	O
int	O
reg	O
=	O
modrm	O
.	O
rm	O
;	O
USED_REX	O
(	O
REX_B	O
)	O
;	O
if	O
(	O
rex	O
&	O
REX_B	O
)	O
reg	O
+=	O
8	int
;	O
oappend	O
(	O
names_xmm	O
[	O
reg	O
]	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
intel_syntax	O
&&	O
(	O
bytemode	O
==	O
v_mode	O
||	O
bytemode	O
==	O
v_swap_mode	O
)	O
)	O
{	O
bytemode	O
=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
?	O
x_mode	O
:	O
q_mode	O
;	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
;	O
}	O
OP_E	O
(	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
}	O
}	O
static	O
void	O
OP_Vex_2src_1	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
if	O
(	O
modrm	O
.	O
mod	O
==	O
3	int
)	O
{	O
MODRM_CHECK	O
;	O
codep	O
++	O
;	O
}	O
if	O
(	O
vex	O
.	O
w	O
)	O
{	O
unsigned	O
int	O
reg	O
=	O
vex	O
.	O
register_specifier	O
;	O
vex	O
.	O
register_specifier	O
=	O
0	int
;	O
if	O
(	O
address_mode	O
!=	O
mode_64bit	O
)	O
reg	O
&=	O
7	int
;	O
oappend	O
(	O
names_xmm	O
[	O
reg	O
]	O
)	O
;	O
}	O
else	O
OP_Vex_2src	O
(	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
}	O
static	O
void	O
OP_Vex_2src_2	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
if	O
(	O
vex	O
.	O
w	O
)	O
OP_Vex_2src	O
(	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
else	O
{	O
unsigned	O
int	O
reg	O
=	O
vex	O
.	O
register_specifier	O
;	O
vex	O
.	O
register_specifier	O
=	O
0	int
;	O
if	O
(	O
address_mode	O
!=	O
mode_64bit	O
)	O
reg	O
&=	O
7	int
;	O
oappend	O
(	O
names_xmm	O
[	O
reg	O
]	O
)	O
;	O
}	O
}	O
static	O
void	O
OP_EX_VexW	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
int	O
reg	O
=	O
-	O
1	int
;	O
if	O
(	O
!	O
vex_w_done	O
)	O
{	O
MODRM_CHECK	O
;	O
codep	O
++	O
;	O
if	O
(	O
vex	O
.	O
w	O
)	O
reg	O
=	O
get_vex_imm8	O
(	O
sizeflag	O
,	O
0	int
)	O
>>	O
4	int
;	O
}	O
else	O
{	O
if	O
(	O
!	O
vex	O
.	O
w	O
)	O
reg	O
=	O
get_vex_imm8	O
(	O
sizeflag	O
,	O
1	int
)	O
>>	O
4	int
;	O
}	O
OP_EX_VexReg	O
(	O
bytemode	O
,	O
sizeflag	O
,	O
reg	O
)	O
;	O
if	O
(	O
vex_w_done	O
)	O
codep	O
++	O
;	O
vex_w_done	O
=	O
1	int
;	O
}	O
static	O
void	O
OP_REG_VexI4	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
ATTRIBUTE_UNUSED	O
)	O
{	O
int	O
reg	O
;	O
const	O
char	O
*	O
*	O
names	O
;	O
FETCH_DATA	O
(	O
the_info	O
,	O
codep	O
+	O
1	int
)	O
;	O
reg	O
=	O
*	O
codep	O
++	O
;	O
if	O
(	O
bytemode	O
!=	O
x_mode	O
)	O
abort	()->(void)
(	O
)	O
;	O
reg	O
>>=	O
4	int
;	O
if	O
(	O
address_mode	O
!=	O
mode_64bit	O
)	O
reg	O
&=	O
7	int
;	O
switch	O
(	O
vex	O
.	O
length	O
)	O
{	O
case	O
128	int
:	O
names	O
=	O
names_xmm	O
;	O
break	O
;	O
case	O
256	int
:	O
names	O
=	O
names_ymm	O
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
oappend	O
(	O
names	O
[	O
reg	O
]	O
)	O
;	O
}	O
static	O
void	O
OP_XMM_VexW	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
rex	O
&=	O
~	O
REX_W	O
;	O
OP_XMM	O
(	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
}	O
static	O
void	O
OP_EX_Vex	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
if	O
(	O
modrm	O
.	O
mod	O
!=	O
3	int
)	O
need_vex_reg	O
=	O
0	int
;	O
OP_EX	O
(	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
}	O
static	O
void	O
OP_XMM_Vex	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
if	O
(	O
modrm	O
.	O
mod	O
!=	O
3	int
)	O
need_vex_reg	O
=	O
0	int
;	O
OP_XMM	O
(	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
}	O
static	O
struct	O
op	O
vex_cmp_op	O
[	O
]	O
=	O
{	O
{	O
STRING_COMMA_LEN	O
(	O
"eq"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"lt"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"le"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"unord"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"neq"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"nlt"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"nle"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"ord"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"eq_uq"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"nge"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"ngt"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"false"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"neq_oq"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"ge"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"gt"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"true"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"eq_os"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"lt_oq"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"le_oq"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"unord_s"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"neq_us"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"nlt_uq"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"nle_uq"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"ord_s"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"eq_us"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"nge_uq"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"ngt_uq"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"false_os"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"neq_os"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"ge_oq"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"gt_oq"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"true_us"	*(char)
)	O
}	O
,	O
}	O
;	O
static	O
void	O
VCMP_Fixup	O
(	O
int	O
bytemode	O
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	O
ATTRIBUTE_UNUSED	O
)	O
{	O
unsigned	O
int	O
cmp_type	O
;	O
FETCH_DATA	O
(	O
the_info	O
,	O
codep	O
+	O
1	int
)	O
;	O
cmp_type	O
=	O
*	O
codep	O
++	O
&	O
0xff	int
;	O
if	O
(	O
cmp_type	O
<	O
ARRAY_SIZE	O
(	O
vex_cmp_op	O
)	O
)	O
{	O
char	O
suffix	O
[	O
3	int
]	O
;	O
char	O
*	O
p	*(void)
=	O
mnemonicendp	O
-	O
2	int
;	O
suffix	O
[	O
0	int
]	O
=	O
p	*(void)
[	O
0	int
]	O
;	O
suffix	O
[	O
1	int
]	O
=	O
p	*(void)
[	O
1	int
]	O
;	O
suffix	O
[	O
2	int
]	O
=	O
'\0'	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
p	*(void)
,	O
"%s%s"	*(char)
,	O
vex_cmp_op	O
[	O
cmp_type	O
]	O
.	O
name	*(char)
,	O
suffix	O
)	O
;	O
mnemonicendp	O
+=	O
vex_cmp_op	O
[	O
cmp_type	O
]	O
.	O
len	long
;	O
}	O
else	O
{	O
scratchbuf	O
[	O
0	int
]	O
=	O
'$'	O
;	O
print_operand_value	O
(	O
scratchbuf	O
+	O
1	int
,	O
1	int
,	O
cmp_type	O
)	O
;	O
oappend_maybe_intel	O
(	O
scratchbuf	O
)	O
;	O
scratchbuf	O
[	O
0	int
]	O
=	O
'\0'	O
;	O
}	O
}	O
static	O
void	O
VPCMP_Fixup	O
(	O
int	O
bytemode	O
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	O
ATTRIBUTE_UNUSED	O
)	O
{	O
unsigned	O
int	O
cmp_type	O
;	O
if	O
(	O
!	O
vex	O
.	O
evex	O
)	O
abort	()->(void)
(	O
)	O
;	O
FETCH_DATA	O
(	O
the_info	O
,	O
codep	O
+	O
1	int
)	O
;	O
cmp_type	O
=	O
*	O
codep	O
++	O
&	O
0xff	int
;	O
if	O
(	O
cmp_type	O
<	O
ARRAY_SIZE	O
(	O
simd_cmp_op	O
)	O
&&	O
cmp_type	O
!=	O
3	int
&&	O
cmp_type	O
!=	O
7	int
)	O
{	O
char	O
suffix	O
[	O
3	int
]	O
;	O
char	O
*	O
p	*(void)
=	O
mnemonicendp	O
-	O
2	int
;	O
if	O
(	O
p	*(void)
[	O
0	int
]	O
==	O
'p'	O
)	O
{	O
p	*(void)
++	O
;	O
suffix	O
[	O
0	int
]	O
=	O
p	*(void)
[	O
0	int
]	O
;	O
suffix	O
[	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
else	O
{	O
suffix	O
[	O
0	int
]	O
=	O
p	*(void)
[	O
0	int
]	O
;	O
suffix	O
[	O
1	int
]	O
=	O
p	*(void)
[	O
1	int
]	O
;	O
suffix	O
[	O
2	int
]	O
=	O
'\0'	O
;	O
}	O
sprintf	(*(char),*(char))->(int)
(	O
p	*(void)
,	O
"%s%s"	*(char)
,	O
simd_cmp_op	O
[	O
cmp_type	O
]	O
.	O
name	*(char)
,	O
suffix	O
)	O
;	O
mnemonicendp	O
+=	O
simd_cmp_op	O
[	O
cmp_type	O
]	O
.	O
len	long
;	O
}	O
else	O
{	O
scratchbuf	O
[	O
0	int
]	O
=	O
'$'	O
;	O
print_operand_value	O
(	O
scratchbuf	O
+	O
1	int
,	O
1	int
,	O
cmp_type	O
)	O
;	O
oappend_maybe_intel	O
(	O
scratchbuf	O
)	O
;	O
scratchbuf	O
[	O
0	int
]	O
=	O
'\0'	O
;	O
}	O
}	O
static	O
const	O
struct	O
op	O
xop_cmp_op	O
[	O
]	O
=	O
{	O
{	O
STRING_COMMA_LEN	O
(	O
"lt"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"le"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"gt"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"ge"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"eq"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"neq"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"false"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"true"	*(char)
)	O
}	O
}	O
;	O
static	O
void	O
VPCOM_Fixup	O
(	O
int	O
bytemode	O
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	O
ATTRIBUTE_UNUSED	O
)	O
{	O
unsigned	O
int	O
cmp_type	O
;	O
FETCH_DATA	O
(	O
the_info	O
,	O
codep	O
+	O
1	int
)	O
;	O
cmp_type	O
=	O
*	O
codep	O
++	O
&	O
0xff	int
;	O
if	O
(	O
cmp_type	O
<	O
ARRAY_SIZE	O
(	O
xop_cmp_op	O
)	O
)	O
{	O
char	O
suffix	O
[	O
3	int
]	O
;	O
char	O
*	O
p	*(void)
=	O
mnemonicendp	O
-	O
2	int
;	O
if	O
(	O
p	*(void)
[	O
0	int
]	O
==	O
'm'	O
)	O
{	O
p	*(void)
++	O
;	O
suffix	O
[	O
0	int
]	O
=	O
p	*(void)
[	O
0	int
]	O
;	O
suffix	O
[	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
else	O
{	O
suffix	O
[	O
0	int
]	O
=	O
p	*(void)
[	O
0	int
]	O
;	O
suffix	O
[	O
1	int
]	O
=	O
p	*(void)
[	O
1	int
]	O
;	O
suffix	O
[	O
2	int
]	O
=	O
'\0'	O
;	O
}	O
sprintf	(*(char),*(char))->(int)
(	O
p	*(void)
,	O
"%s%s"	*(char)
,	O
xop_cmp_op	O
[	O
cmp_type	O
]	O
.	O
name	*(char)
,	O
suffix	O
)	O
;	O
mnemonicendp	O
+=	O
xop_cmp_op	O
[	O
cmp_type	O
]	O
.	O
len	long
;	O
}	O
else	O
{	O
scratchbuf	O
[	O
0	int
]	O
=	O
'$'	O
;	O
print_operand_value	O
(	O
scratchbuf	O
+	O
1	int
,	O
1	int
,	O
cmp_type	O
)	O
;	O
oappend_maybe_intel	O
(	O
scratchbuf	O
)	O
;	O
scratchbuf	O
[	O
0	int
]	O
=	O
'\0'	O
;	O
}	O
}	O
static	O
const	O
struct	O
op	O
pclmul_op	O
[	O
]	O
=	O
{	O
{	O
STRING_COMMA_LEN	O
(	O
"lql"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"hql"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"lqh"	*(char)
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"hqh"	*(char)
)	O
}	O
}	O
;	O
static	O
void	O
PCLMUL_Fixup	O
(	O
int	O
bytemode	O
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	O
ATTRIBUTE_UNUSED	O
)	O
{	O
unsigned	O
int	O
pclmul_type	O
;	O
FETCH_DATA	O
(	O
the_info	O
,	O
codep	O
+	O
1	int
)	O
;	O
pclmul_type	O
=	O
*	O
codep	O
++	O
&	O
0xff	int
;	O
switch	O
(	O
pclmul_type	O
)	O
{	O
case	O
0x10	int
:	O
pclmul_type	O
=	O
2	int
;	O
break	O
;	O
case	O
0x11	int
:	O
pclmul_type	O
=	O
3	int
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
if	O
(	O
pclmul_type	O
<	O
ARRAY_SIZE	O
(	O
pclmul_op	O
)	O
)	O
{	O
char	O
suffix	O
[	O
4	int
]	O
;	O
char	O
*	O
p	*(void)
=	O
mnemonicendp	O
-	O
3	int
;	O
suffix	O
[	O
0	int
]	O
=	O
p	*(void)
[	O
0	int
]	O
;	O
suffix	O
[	O
1	int
]	O
=	O
p	*(void)
[	O
1	int
]	O
;	O
suffix	O
[	O
2	int
]	O
=	O
p	*(void)
[	O
2	int
]	O
;	O
suffix	O
[	O
3	int
]	O
=	O
'\0'	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
p	*(void)
,	O
"%s%s"	*(char)
,	O
pclmul_op	O
[	O
pclmul_type	O
]	O
.	O
name	*(char)
,	O
suffix	O
)	O
;	O
mnemonicendp	O
+=	O
pclmul_op	O
[	O
pclmul_type	O
]	O
.	O
len	long
;	O
}	O
else	O
{	O
scratchbuf	O
[	O
0	int
]	O
=	O
'$'	O
;	O
print_operand_value	O
(	O
scratchbuf	O
+	O
1	int
,	O
1	int
,	O
pclmul_type	O
)	O
;	O
oappend_maybe_intel	O
(	O
scratchbuf	O
)	O
;	O
scratchbuf	O
[	O
0	int
]	O
=	O
'\0'	O
;	O
}	O
}	O
static	O
void	O
MOVBE_Fixup	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
)	O
{	O
char	O
*	O
p	*(void)
=	O
mnemonicendp	O
;	O
switch	O
(	O
bytemode	O
)	O
{	O
case	O
v_mode	O
:	O
if	O
(	O
intel_syntax	O
)	O
goto	O
skip	O
;	O
USED_REX	O
(	O
REX_W	O
)	O
;	O
if	O
(	O
sizeflag	O
&	O
SUFFIX_ALWAYS	O
)	O
{	O
if	O
(	O
rex	O
&	O
REX_W	O
)	O
*	O
p	*(void)
++	O
=	O
'q'	O
;	O
else	O
{	O
if	O
(	O
sizeflag	O
&	O
DFLAG	O
)	O
*	O
p	*(void)
++	O
=	O
'l'	O
;	O
else	O
*	O
p	*(void)
++	O
=	O
'w'	O
;	O
used_prefixes	O
|=	O
(	O
prefixes	O
&	O
PREFIX_DATA	O
)	O
;	O
}	O
}	O
break	O
;	O
default	O
:	O
oappend	O
(	O
INTERNAL_DISASSEMBLER_ERROR	O
)	O
;	O
break	O
;	O
}	O
mnemonicendp	O
=	O
p	*(void)
;	O
*	O
p	*(void)
=	O
'\0'	O
;	O
skip	O
:	O
OP_M	O
(	O
bytemode	O
,	O
sizeflag	O
)	O
;	O
}	O
static	O
void	O
OP_LWPCB_E	O
(	O
int	O
bytemode	O
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	O
ATTRIBUTE_UNUSED	O
)	O
{	O
int	O
reg	O
;	O
const	O
char	O
*	O
*	O
names	O
;	O
MODRM_CHECK	O
;	O
codep	O
++	O
;	O
if	O
(	O
rex	O
&	O
REX_W	O
)	O
names	O
=	O
names64	O
;	O
else	O
names	O
=	O
names32	O
;	O
reg	O
=	O
modrm	O
.	O
rm	O
;	O
USED_REX	O
(	O
REX_B	O
)	O
;	O
if	O
(	O
rex	O
&	O
REX_B	O
)	O
reg	O
+=	O
8	int
;	O
oappend	O
(	O
names	O
[	O
reg	O
]	O
)	O
;	O
}	O
static	O
void	O
OP_LWP_E	O
(	O
int	O
bytemode	O
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	O
ATTRIBUTE_UNUSED	O
)	O
{	O
const	O
char	O
*	O
*	O
names	O
;	O
unsigned	O
int	O
reg	O
=	O
vex	O
.	O
register_specifier	O
;	O
vex	O
.	O
register_specifier	O
=	O
0	int
;	O
if	O
(	O
rex	O
&	O
REX_W	O
)	O
names	O
=	O
names64	O
;	O
else	O
names	O
=	O
names32	O
;	O
if	O
(	O
address_mode	O
!=	O
mode_64bit	O
)	O
reg	O
&=	O
7	int
;	O
oappend	O
(	O
names	O
[	O
reg	O
]	O
)	O
;	O
}	O
static	O
void	O
OP_Mask	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
ATTRIBUTE_UNUSED	O
)	O
{	O
if	O
(	O
!	O
vex	O
.	O
evex	O
||	O
(	O
bytemode	O
!=	O
mask_mode	O
&&	O
bytemode	O
!=	O
mask_bd_mode	O
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
USED_REX	O
(	O
REX_R	O
)	O
;	O
if	O
(	O
(	O
rex	O
&	O
REX_R	O
)	O
!=	O
0	int
||	O
!	O
vex	O
.	O
r	O
)	O
{	O
BadOp	O
(	O
)	O
;	O
return	O
;	O
}	O
oappend	O
(	O
names_mask	O
[	O
modrm	O
.	O
reg	O
]	O
)	O
;	O
}	O
static	O
void	O
OP_Rounding	O
(	O
int	O
bytemode	O
,	O
int	O
sizeflag	O
ATTRIBUTE_UNUSED	O
)	O
{	O
if	O
(	O
!	O
vex	O
.	O
evex	O
||	O
(	O
bytemode	O
!=	O
evex_rounding_mode	O
&&	O
bytemode	O
!=	O
evex_rounding_64_mode	O
&&	O
bytemode	O
!=	O
evex_sae_mode	O
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
if	O
(	O
modrm	O
.	O
mod	O
==	O
3	int
&&	O
vex	O
.	O
b	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct(*(*`),long,long,*(struct`))),*(*(struct(*`,long,long,*`))),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct(struct(*`,long,long,*`),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(struct`),*(char),long,int,*(struct`),union(*`,long))),*(*(struct(*`,*`,long,int,*`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
)	O
switch	O
(	O
bytemode	O
)	O
{	O
case	O
evex_rounding_64_mode	O
:	O
if	O
(	O
address_mode	O
!=	O
mode_64bit	O
)	O
{	O
oappend	O
(	O
"(bad)"	*(char)
)	O
;	O
break	O
;	O
}	O
case	O
evex_rounding_mode	O
:	O
oappend	O
(	O
names_rounding	O
[	O
vex	O
.	O
ll	O
]	O
)	O
;	O
break	O
;	O
case	O
evex_sae_mode	O
:	O
oappend	O
(	O
"{sae}"	*(char)
)	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
