static	O
PyObject	O
*	O
_repr1	(*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
)	O
{	O
char	O
buf	*(char)
[	O
80	int
]	O
;	O
sprintf	O
(	O
buf	*(char)
,	O
"<"	*(char)
PY_MODULE	*(char)
"."	*(char)
PY_CSNAME1	*(char)
" instance at %p>"	*(char)
,	O
self	*(int)
)	O
;	O
return	O
PyUnicode_FromString	()->(int)
(	O
buf	*(char)
)	O
;	O
}	O
static	O
PyObject	O
*	O
_repr2	(*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
)	O
{	O
char	O
buf	*(char)
[	O
80	int
]	O
;	O
sprintf	O
(	O
buf	*(char)
,	O
"<"	*(char)
PY_MODULE	*(char)
"."	*(char)
PY_CSNAME2	*(char)
" instance at %p>"	*(char)
,	O
self	*(int)
)	O
;	O
return	O
PyUnicode_FromString	()->(int)
(	O
buf	*(char)
)	O
;	O
}	O
static	O
PyObject	O
*	O
_repr3	(*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
)	O
{	O
char	O
buf	*(char)
[	O
80	int
]	O
;	O
sprintf	O
(	O
buf	*(char)
,	O
"<"	*(char)
PY_MODULE	*(char)
"."	*(char)
PY_CSNAME3	*(char)
" instance at %p>"	*(char)
,	O
self	*(int)
)	O
;	O
return	O
PyUnicode_FromString	()->(int)
(	O
buf	*(char)
)	O
;	O
}	O
static	O
PyObject	O
*	O
_repr4	(*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
)	O
{	O
char	O
buf	*(char)
[	O
80	int
]	O
;	O
sprintf	O
(	O
buf	*(char)
,	O
"<"	*(char)
PY_MODULE	*(char)
"."	*(char)
PY_CSNAME4	*(char)
" instance at %p>"	*(char)
,	O
self	*(int)
)	O
;	O
return	O
PyUnicode_FromString	()->(int)
(	O
buf	*(char)
)	O
;	O
}	O
static	O
PyTypeObject	O
PyAuthorityType	int
=	O
{	O
.	O
ob_base	O
=	O
{	O
PyObject_HEAD_INIT	()->(int)
(	O
NULL	O
)	O
}	O
,	O
.	O
tp_name	O
=	O
PY_MODULE	*(char)
"."	*(char)
PY_CSNAME1	*(char)
,	O
.	O
tp_basicsize	O
=	O
sizeof	O
(	O
PyAuthority	O
)	O
,	O
.	O
tp_dealloc	O
=	O
(	O
destructor	O
)	O
_py_dealloc	(*(int))->(void)
,	O
.	O
tp_repr	O
=	O
_repr1	(*(int))->(*(int))
,	O
.	O
tp_str	O
=	O
_repr1	(*(int))->(*(int))
,	O
.	O
tp_flags	O
=	O
Py_TPFLAGS_DEFAULT	O
,	O
.	O
tp_doc	O
=	O
""	*(char)
,	O
}	O
;	O
static	O
PyTypeObject	O
PyTicketType	int
=	O
{	O
.	O
ob_base	O
=	O
{	O
PyObject_HEAD_INIT	()->(int)
(	O
NULL	O
)	O
}	O
,	O
.	O
tp_name	O
=	O
PY_MODULE	*(char)
"."	*(char)
PY_CSNAME2	*(char)
,	O
.	O
tp_basicsize	O
=	O
sizeof	O
(	O
PyTicket	O
)	O
,	O
.	O
tp_dealloc	O
=	O
(	O
destructor	O
)	O
_py_dealloc	(*(int))->(void)
,	O
.	O
tp_repr	O
=	O
_repr2	(*(int))->(*(int))
,	O
.	O
tp_str	O
=	O
_repr2	(*(int))->(*(int))
,	O
.	O
tp_flags	O
=	O
Py_TPFLAGS_DEFAULT	O
,	O
.	O
tp_doc	O
=	O
""	*(char)
,	O
}	O
;	O
static	O
PyTypeObject	O
PyWicketType	int
=	O
{	O
.	O
ob_base	O
=	O
{	O
PyObject_HEAD_INIT	()->(int)
(	O
NULL	O
)	O
}	O
,	O
.	O
tp_name	O
=	O
PY_MODULE	*(char)
"."	*(char)
PY_CSNAME3	*(char)
,	O
.	O
tp_basicsize	O
=	O
sizeof	O
(	O
PyWicket	O
)	O
,	O
.	O
tp_dealloc	O
=	O
(	O
destructor	O
)	O
_py_dealloc	(*(int))->(void)
,	O
.	O
tp_repr	O
=	O
_repr3	(*(int))->(*(int))
,	O
.	O
tp_str	O
=	O
_repr3	(*(int))->(*(int))
,	O
.	O
tp_flags	O
=	O
Py_TPFLAGS_DEFAULT	O
,	O
.	O
tp_doc	O
=	O
""	*(char)
,	O
}	O
;	O
void	O
_dealloc4	(*(int))->(void)
(	O
PyObject	O
*	O
self	*(int)
)	O
{	O
PyAuthData	O
*	O
py_ad	O
=	O
(	O
PyAuthData	O
*	O
)	O
self	*(int)
;	O
if	O
(	O
py_ad	O
->	O
auth_data	O
)	O
mu_auth_data_free	()->(int)
(	O
py_ad	O
->	O
auth_data	O
)	O
;	O
self	*(int)
->	O
ob_type	O
->	O
tp_free	O
(	O
self	*(int)
)	O
;	O
}	O
static	O
PyObject	O
*	O
_getattr4	(*(int),*(char))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
,	O
char	O
*	O
name	*(char)
)	O
{	O
PyAuthData	O
*	O
py_ad	O
=	O
(	O
PyAuthData	O
*	O
)	O
self	*(int)
;	O
struct	O
mu_auth_data	O
*	O
ad	*(struct)
=	O
py_ad	O
->	O
auth_data	O
;	O
if	O
(	O
!	O
ad	*(struct)
)	O
return	O
NULL	O
;	O
if	O
(	O
strcmp	O
(	O
name	*(char)
,	O
"name"	*(char)
)	O
==	O
0	int
)	O
return	O
PyUnicode_FromString	()->(int)
(	O
ad	*(struct)
->	O
name	*(char)
)	O
;	O
else	O
if	O
(	O
strcmp	O
(	O
name	*(char)
,	O
"passwd"	*(char)
)	O
==	O
0	int
)	O
return	O
PyUnicode_FromString	()->(int)
(	O
ad	*(struct)
->	O
passwd	O
)	O
;	O
else	O
if	O
(	O
strcmp	O
(	O
name	*(char)
,	O
"uid"	*(char)
)	O
==	O
0	int
)	O
return	O
PyLong_FromSize_t	()->(int)
(	O
ad	*(struct)
->	O
uid	O
)	O
;	O
else	O
if	O
(	O
strcmp	O
(	O
name	*(char)
,	O
"gid"	*(char)
)	O
==	O
0	int
)	O
return	O
PyLong_FromSize_t	()->(int)
(	O
ad	*(struct)
->	O
gid	O
)	O
;	O
else	O
if	O
(	O
strcmp	O
(	O
name	*(char)
,	O
"gecos"	*(char)
)	O
==	O
0	int
)	O
return	O
PyUnicode_FromString	()->(int)
(	O
ad	*(struct)
->	O
gecos	O
)	O
;	O
else	O
if	O
(	O
strcmp	O
(	O
name	*(char)
,	O
"dir"	*(char)
)	O
==	O
0	int
)	O
return	O
PyUnicode_FromString	()->(int)
(	O
ad	*(struct)
->	O
dir	O
)	O
;	O
else	O
if	O
(	O
strcmp	O
(	O
name	*(char)
,	O
"shell"	*(char)
)	O
==	O
0	int
)	O
return	O
PyUnicode_FromString	()->(int)
(	O
ad	*(struct)
->	O
shell	O
)	O
;	O
else	O
if	O
(	O
strcmp	O
(	O
name	*(char)
,	O
"mailbox"	*(char)
)	O
==	O
0	int
)	O
return	O
PyUnicode_FromString	()->(int)
(	O
ad	*(struct)
->	O
mailbox	O
)	O
;	O
else	O
if	O
(	O
strcmp	O
(	O
name	*(char)
,	O
"source"	*(char)
)	O
==	O
0	int
)	O
return	O
PyUnicode_FromString	()->(int)
(	O
ad	*(struct)
->	O
source	O
)	O
;	O
else	O
if	O
(	O
strcmp	O
(	O
name	*(char)
,	O
"quota"	*(char)
)	O
==	O
0	int
)	O
return	O
PyLong_FromSize_t	()->(int)
(	O
ad	*(struct)
->	O
quota	O
)	O
;	O
else	O
if	O
(	O
strcmp	O
(	O
name	*(char)
,	O
"flags"	*(char)
)	O
==	O
0	int
)	O
return	O
PyLong_FromLong	()->(int)
(	O
ad	*(struct)
->	O
flags	O
)	O
;	O
else	O
if	O
(	O
strcmp	O
(	O
name	*(char)
,	O
"change_uid"	*(char)
)	O
==	O
0	int
)	O
return	O
PyLong_FromLong	()->(int)
(	O
ad	*(struct)
->	O
change_uid	O
)	O
;	O
return	O
NULL	O
;	O
}	O
static	O
PyTypeObject	O
PyAuthDataType	int
=	O
{	O
.	O
ob_base	O
=	O
{	O
PyObject_HEAD_INIT	()->(int)
(	O
NULL	O
)	O
}	O
,	O
.	O
tp_name	O
=	O
PY_MODULE	*(char)
"."	*(char)
PY_CSNAME4	*(char)
,	O
.	O
tp_basicsize	O
=	O
sizeof	O
(	O
PyAuthData	O
)	O
,	O
.	O
tp_dealloc	O
=	O
(	O
destructor	O
)	O
_dealloc4	(*(int))->(void)
,	O
.	O
tp_getattr	O
=	O
_getattr4	(*(int),*(char))->(*(int))
,	O
.	O
tp_repr	O
=	O
_repr4	(*(int))->(*(int))
,	O
.	O
tp_str	O
=	O
_repr4	(*(int))->(*(int))
,	O
.	O
tp_flags	O
=	O
Py_TPFLAGS_DEFAULT	O
,	O
.	O
tp_doc	O
=	O
""	*(char)
,	O
}	O
;	O
PyAuthority	O
*	O
PyAuthority_NEW	()->(*(int))
(	O
)	O
{	O
return	O
(	O
PyAuthority	O
*	O
)	O
PyObject_NEW	O
(	O
PyAuthority	O
,	O
&	O
PyAuthorityType	int
)	O
;	O
}	O
int	O
PyAuthority_Check	(*(int))->(int)
(	O
PyObject	O
*	O
x	*(int)
)	O
{	O
return	O
x	*(int)
->	O
ob_type	O
==	O
&	O
PyAuthorityType	int
;	O
}	O
PyTicket	O
*	O
PyTicket_NEW	()->(*(int))
(	O
)	O
{	O
return	O
(	O
PyTicket	O
*	O
)	O
PyObject_NEW	O
(	O
PyTicket	O
,	O
&	O
PyTicketType	int
)	O
;	O
}	O
int	O
PyTicket_Check	(*(int))->(int)
(	O
PyObject	O
*	O
x	*(int)
)	O
{	O
return	O
x	*(int)
->	O
ob_type	O
==	O
&	O
PyTicketType	int
;	O
}	O
PyWicket	O
*	O
PyWicket_NEW	()->(*(int))
(	O
)	O
{	O
return	O
(	O
PyWicket	O
*	O
)	O
PyObject_NEW	O
(	O
PyWicket	O
,	O
&	O
PyWicketType	int
)	O
;	O
}	O
int	O
PyWicket_Check	(*(int))->(int)
(	O
PyObject	O
*	O
x	*(int)
)	O
{	O
return	O
x	*(int)
->	O
ob_type	O
==	O
&	O
PyWicketType	int
;	O
}	O
PyAuthData	O
*	O
PyAuthData_NEW	()->(*(int))
(	O
)	O
{	O
return	O
(	O
PyAuthData	O
*	O
)	O
PyObject_NEW	O
(	O
PyAuthData	O
,	O
&	O
PyAuthDataType	int
)	O
;	O
}	O
int	O
PyAuthData_Check	(*(int))->(int)
(	O
PyObject	O
*	O
x	*(int)
)	O
{	O
return	O
x	*(int)
->	O
ob_type	O
==	O
&	O
PyAuthDataType	int
;	O
}	O
static	O
PyObject	O
*	O
api_authority_create	(*(int),*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
,	O
PyObject	O
*	O
args	*(int)
)	O
{	O
int	O
status	int
;	O
PyAuthority	O
*	O
py_auth	O
;	O
PyTicket	O
*	O
py_ticket	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	()->(int)
(	O
args	*(int)
,	O
"O!O!"	*(char)
,	O
&	O
PyAuthorityType	int
,	O
&	O
py_auth	O
,	O
&	O
PyTicketType	int
,	O
&	O
py_ticket	O
)	O
)	O
return	O
NULL	O
;	O
status	int
=	O
mu_authority_create	()->(int)
(	O
&	O
py_auth	O
->	O
auth	O
,	O
py_ticket	O
->	O
ticket	O
,	O
NULL	O
)	O
;	O
return	O
_ro	(*(int))->(*(int))
(	O
PyLong_FromLong	()->(int)
(	O
status	int
)	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_authority_destroy	(*(int),*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
,	O
PyObject	O
*	O
args	*(int)
)	O
{	O
PyAuthority	O
*	O
py_auth	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	()->(int)
(	O
args	*(int)
,	O
"O!"	*(char)
,	O
&	O
PyAuthorityType	int
,	O
&	O
py_auth	O
)	O
)	O
return	O
NULL	O
;	O
mu_authority_destroy	()->(int)
(	O
&	O
py_auth	O
->	O
auth	O
,	O
NULL	O
)	O
;	O
return	O
_ro	(*(int))->(*(int))
(	O
Py_None	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_authority_get_ticket	(*(int),*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
,	O
PyObject	O
*	O
args	*(int)
)	O
{	O
int	O
status	int
;	O
PyAuthority	O
*	O
py_auth	O
;	O
PyTicket	O
*	O
py_ticket	O
=	O
PyTicket_NEW	()->(*(int))
(	O
)	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	()->(int)
(	O
args	*(int)
,	O
"O!"	*(char)
,	O
&	O
PyAuthorityType	int
,	O
&	O
py_auth	O
)	O
)	O
return	O
NULL	O
;	O
Py_INCREF	()->(int)
(	O
py_ticket	O
)	O
;	O
status	int
=	O
mu_authority_get_ticket	()->(int)
(	O
py_auth	O
->	O
auth	O
,	O
&	O
py_ticket	O
->	O
ticket	O
)	O
;	O
return	O
status_object	(int,*(int))->(*(int))
(	O
status	int
,	O
(	O
PyObject	O
*	O
)	O
py_ticket	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_authority_set_ticket	(*(int),*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
,	O
PyObject	O
*	O
args	*(int)
)	O
{	O
int	O
status	int
;	O
PyAuthority	O
*	O
py_auth	O
;	O
PyTicket	O
*	O
py_ticket	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	()->(int)
(	O
args	*(int)
,	O
"O!O!"	*(char)
,	O
&	O
PyAuthorityType	int
,	O
&	O
py_auth	O
,	O
&	O
PyTicketType	int
,	O
&	O
py_ticket	O
)	O
)	O
return	O
NULL	O
;	O
status	int
=	O
mu_authority_set_ticket	()->(int)
(	O
py_auth	O
->	O
auth	O
,	O
py_ticket	O
->	O
ticket	O
)	O
;	O
return	O
_ro	(*(int))->(*(int))
(	O
PyLong_FromLong	()->(int)
(	O
status	int
)	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_authority_authenticate	(*(int),*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
,	O
PyObject	O
*	O
args	*(int)
)	O
{	O
int	O
status	int
;	O
PyAuthority	O
*	O
py_auth	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	()->(int)
(	O
args	*(int)
,	O
"O!"	*(char)
,	O
&	O
PyAuthorityType	int
,	O
&	O
py_auth	O
)	O
)	O
return	O
NULL	O
;	O
status	int
=	O
mu_authority_authenticate	()->(int)
(	O
py_auth	O
->	O
auth	O
)	O
;	O
return	O
_ro	(*(int))->(*(int))
(	O
PyLong_FromLong	()->(int)
(	O
status	int
)	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_ticket_create	(*(int),*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
,	O
PyObject	O
*	O
args	*(int)
)	O
{	O
int	O
status	int
;	O
PyTicket	O
*	O
py_ticket	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	()->(int)
(	O
args	*(int)
,	O
"O!"	*(char)
,	O
&	O
PyTicketType	int
,	O
&	O
py_ticket	O
)	O
)	O
return	O
NULL	O
;	O
status	int
=	O
mu_ticket_create	()->(int)
(	O
&	O
py_ticket	O
->	O
ticket	O
,	O
NULL	O
)	O
;	O
return	O
_ro	(*(int))->(*(int))
(	O
PyLong_FromLong	()->(int)
(	O
status	int
)	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_ticket_destroy	(*(int),*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
,	O
PyObject	O
*	O
args	*(int)
)	O
{	O
PyTicket	O
*	O
py_ticket	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	()->(int)
(	O
args	*(int)
,	O
"O!"	*(char)
,	O
&	O
PyTicketType	int
,	O
&	O
py_ticket	O
)	O
)	O
return	O
NULL	O
;	O
mu_ticket_destroy	()->(int)
(	O
&	O
py_ticket	O
->	O
ticket	O
)	O
;	O
return	O
_ro	(*(int))->(*(int))
(	O
Py_None	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_ticket_set_secret	(*(int),*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
,	O
PyObject	O
*	O
args	*(int)
)	O
{	O
int	O
status	int
;	O
PyTicket	O
*	O
py_ticket	O
;	O
PySecret	O
*	O
py_secret	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	()->(int)
(	O
args	*(int)
,	O
"O!O"	*(char)
,	O
&	O
PyTicketType	int
,	O
&	O
py_ticket	O
,	O
&	O
py_secret	O
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
PySecret_Check	()->(int)
(	O
(	O
PyObject	O
*	O
)	O
py_secret	O
)	O
)	O
{	O
PyErr_SetString	()->(int)
(	O
PyExc_TypeError	O
,	O
""	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
status	int
=	O
mu_ticket_set_secret	()->(int)
(	O
py_ticket	O
->	O
ticket	O
,	O
py_secret	O
->	O
secret	O
)	O
;	O
return	O
_ro	(*(int))->(*(int))
(	O
PyLong_FromLong	()->(int)
(	O
status	int
)	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_wicket_create	(*(int),*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
,	O
PyObject	O
*	O
args	*(int)
)	O
{	O
int	O
status	int
;	O
char	O
*	O
filename	*(char)
;	O
PyWicket	O
*	O
py_wicket	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	()->(int)
(	O
args	*(int)
,	O
"O!s"	*(char)
,	O
&	O
PyWicketType	int
,	O
&	O
py_wicket	O
,	O
&	O
filename	*(char)
)	O
)	O
return	O
NULL	O
;	O
status	int
=	O
mu_file_wicket_create	()->(int)
(	O
&	O
py_wicket	O
->	O
wicket	O
,	O
filename	*(char)
)	O
;	O
return	O
_ro	(*(int))->(*(int))
(	O
PyLong_FromLong	()->(int)
(	O
status	int
)	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_wicket_destroy	(*(int),*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
,	O
PyObject	O
*	O
args	*(int)
)	O
{	O
PyWicket	O
*	O
py_wicket	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	()->(int)
(	O
args	*(int)
,	O
"O!"	*(char)
,	O
&	O
PyWicketType	int
,	O
&	O
py_wicket	O
)	O
)	O
return	O
NULL	O
;	O
mu_wicket_destroy	()->(int)
(	O
&	O
py_wicket	O
->	O
wicket	O
)	O
;	O
return	O
_ro	(*(int))->(*(int))
(	O
Py_None	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_wicket_get_ticket	(*(int),*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
,	O
PyObject	O
*	O
args	*(int)
)	O
{	O
int	O
status	int
;	O
char	O
*	O
user	*(char)
;	O
PyWicket	O
*	O
py_wicket	O
;	O
PyTicket	O
*	O
py_ticket	O
=	O
PyTicket_NEW	()->(*(int))
(	O
)	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	()->(int)
(	O
args	*(int)
,	O
"O!s"	*(char)
,	O
&	O
PyWicketType	int
,	O
&	O
py_wicket	O
,	O
&	O
user	*(char)
)	O
)	O
return	O
NULL	O
;	O
Py_INCREF	()->(int)
(	O
py_ticket	O
)	O
;	O
status	int
=	O
mu_wicket_get_ticket	()->(int)
(	O
py_wicket	O
->	O
wicket	O
,	O
user	*(char)
,	O
&	O
py_ticket	O
->	O
ticket	O
)	O
;	O
return	O
status_object	(int,*(int))->(*(int))
(	O
status	int
,	O
(	O
PyObject	O
*	O
)	O
py_ticket	O
)	O
;	O
}	O
struct	O
module_record	struct(*(char),*(struct))
{	O
char	O
*	O
name	*(char)
;	O
struct	O
mu_auth_module	O
*	O
module	*(struct)
;	O
}	O
;	O
static	O
struct	O
module_record	struct(*(char),*(struct))
module_table	array(struct(*(char),*(struct)))
[	O
]	O
=	O
{	O
{	O
"system"	*(char)
,	O
&	O
mu_auth_system_module	O
}	O
,	O
{	O
"generic"	*(char)
,	O
&	O
mu_auth_generic_module	O
}	O
,	O
{	O
"pam"	*(char)
,	O
&	O
mu_auth_pam_module	O
}	O
,	O
{	O
"sql"	*(char)
,	O
&	O
mu_auth_sql_module	O
}	O
,	O
{	O
"virtual"	*(char)
,	O
&	O
mu_auth_virtual_module	O
}	O
,	O
{	O
"radius"	*(char)
,	O
&	O
mu_auth_radius_module	O
}	O
,	O
{	O
"ldap"	*(char)
,	O
&	O
mu_auth_ldap_module	O
}	O
,	O
{	O
NULL	O
,	O
NULL	O
}	O
,	O
}	O
;	O
static	O
struct	O
mu_auth_module	O
*	O
find_module	(*(struct(*(char),*(struct))),*(char))->(*(struct))
(	O
const	O
struct	O
module_record	struct(*(char),*(struct))
*	O
table	*(struct(*(char),*(struct)))
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
for	O
(	O
;	O
table	*(struct(*(char),*(struct)))
->	O
name	*(char)
;	O
table	*(struct(*(char),*(struct)))
++	O
)	O
if	O
(	O
strcmp	O
(	O
table	*(struct(*(char),*(struct)))
->	O
name	*(char)
,	O
name	*(char)
)	O
==	O
0	int
)	O
break	O
;	O
return	O
table	*(struct(*(char),*(struct)))
->	O
module	*(struct)
;	O
}	O
static	O
int	O
register_module	(*(char))->(int)
(	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
int	O
status	int
=	O
0	int
;	O
if	O
(	O
!	O
name	*(char)
)	O
{	O
struct	O
module_record	struct(*(char),*(struct))
*	O
table	*(struct(*(char),*(struct)))
;	O
for	O
(	O
table	*(struct(*(char),*(struct)))
=	O
module_table	array(struct(*(char),*(struct)))
;	O
table	*(struct(*(char),*(struct)))
->	O
name	*(char)
;	O
table	*(struct(*(char),*(struct)))
++	O
)	O
mu_auth_register_module	()->(int)
(	O
table	*(struct(*(char),*(struct)))
->	O
module	*(struct)
)	O
;	O
}	O
else	O
{	O
struct	O
mu_auth_module	O
*	O
module	*(struct)
=	O
find_module	(*(struct(*(char),*(struct))),*(char))->(*(struct))
(	O
module_table	array(struct(*(char),*(struct)))
,	O
name	*(char)
)	O
;	O
if	O
(	O
module	*(struct)
)	O
mu_auth_register_module	()->(int)
(	O
module	*(struct)
)	O
;	O
else	O
status	int
=	O
EINVAL	O
;	O
}	O
return	O
status	int
;	O
}	O
static	O
PyObject	O
*	O
api_register_module	(*(int),*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
,	O
PyObject	O
*	O
args	*(int)
)	O
{	O
int	O
status	int
;	O
char	O
*	O
name	*(char)
=	O
NULL	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	()->(int)
(	O
args	*(int)
,	O
"|s"	*(char)
,	O
&	O
name	*(char)
)	O
)	O
return	O
NULL	O
;	O
status	int
=	O
register_module	(*(char))->(int)
(	O
name	*(char)
)	O
;	O
return	O
_ro	(*(int))->(*(int))
(	O
PyLong_FromLong	()->(int)
(	O
status	int
)	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_get_auth_by_name	(*(int),*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
,	O
PyObject	O
*	O
args	*(int)
)	O
{	O
char	O
*	O
username	*(char)
;	O
PyAuthData	O
*	O
py_ad	O
=	O
PyAuthData_NEW	()->(*(int))
(	O
)	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	()->(int)
(	O
args	*(int)
,	O
"s"	*(char)
,	O
&	O
username	*(char)
)	O
)	O
return	O
NULL	O
;	O
Py_INCREF	()->(int)
(	O
py_ad	O
)	O
;	O
py_ad	O
->	O
auth_data	O
=	O
mu_get_auth_by_name	()->(int)
(	O
username	*(char)
)	O
;	O
if	O
(	O
!	O
py_ad	O
->	O
auth_data	O
)	O
return	O
_ro	(*(int))->(*(int))
(	O
Py_None	O
)	O
;	O
return	O
_ro	(*(int))->(*(int))
(	O
(	O
PyObject	O
*	O
)	O
py_ad	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_get_auth_by_uid	(*(int),*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
,	O
PyObject	O
*	O
args	*(int)
)	O
{	O
uid_t	O
uid	O
;	O
Py_ssize_t	O
n	*(int)
;	O
PyAuthData	O
*	O
py_ad	O
=	O
PyAuthData_NEW	()->(*(int))
(	O
)	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	()->(int)
(	O
args	*(int)
,	O
"n"	*(char)
,	O
&	O
n	*(int)
)	O
)	O
return	O
NULL	O
;	O
uid	O
=	O
(	O
uid_t	O
)	O
n	*(int)
;	O
Py_INCREF	()->(int)
(	O
py_ad	O
)	O
;	O
py_ad	O
->	O
auth_data	O
=	O
mu_get_auth_by_uid	()->(int)
(	O
uid	O
)	O
;	O
if	O
(	O
!	O
py_ad	O
->	O
auth_data	O
)	O
return	O
_ro	(*(int))->(*(int))
(	O
Py_None	O
)	O
;	O
return	O
_ro	(*(int))->(*(int))
(	O
(	O
PyObject	O
*	O
)	O
py_ad	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_authenticate	(*(int),*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
,	O
PyObject	O
*	O
args	*(int)
)	O
{	O
int	O
status	int
;	O
char	O
*	O
pass	*(char)
;	O
PyAuthData	O
*	O
py_ad	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	()->(int)
(	O
args	*(int)
,	O
"O!s"	*(char)
,	O
&	O
PyAuthDataType	int
,	O
&	O
py_ad	O
,	O
&	O
pass	*(char)
)	O
)	O
return	O
NULL	O
;	O
status	int
=	O
mu_authenticate	()->(int)
(	O
py_ad	O
->	O
auth_data	O
,	O
pass	*(char)
)	O
;	O
return	O
_ro	(*(int))->(*(int))
(	O
PyLong_FromLong	()->(int)
(	O
status	int
)	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_set_pam_service	(*(int),*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
,	O
PyObject	O
*	O
args	*(int)
)	O
{	O
char	O
*	O
pam_service	*(char)
;	O
if	O
(	O
!	O
PyArg_ParseTuple	()->(int)
(	O
args	*(int)
,	O
"s"	*(char)
,	O
&	O
pam_service	*(char)
)	O
)	O
return	O
NULL	O
;	O
mu_pam_service	O
=	O
pam_service	*(char)
;	O
return	O
_ro	(*(int))->(*(int))
(	O
Py_None	O
)	O
;	O
}	O
static	O
PyMethodDef	O
methods	array(int)
[	O
]	O
=	O
{	O
{	O
"authority_create"	*(char)
,	O
(	O
PyCFunction	O
)	O
api_authority_create	(*(int),*(int))->(*(int))
,	O
METH_VARARGS	O
,	O
""	*(char)
}	O
,	O
{	O
"authority_destroy"	*(char)
,	O
(	O
PyCFunction	O
)	O
api_authority_destroy	(*(int),*(int))->(*(int))
,	O
METH_VARARGS	O
,	O
""	*(char)
}	O
,	O
{	O
"authority_get_ticket"	*(char)
,	O
(	O
PyCFunction	O
)	O
api_authority_get_ticket	(*(int),*(int))->(*(int))
,	O
METH_VARARGS	O
,	O
""	*(char)
}	O
,	O
{	O
"authority_set_ticket"	*(char)
,	O
(	O
PyCFunction	O
)	O
api_authority_set_ticket	(*(int),*(int))->(*(int))
,	O
METH_VARARGS	O
,	O
""	*(char)
}	O
,	O
{	O
"authority_authenticate"	*(char)
,	O
(	O
PyCFunction	O
)	O
api_authority_authenticate	(*(int),*(int))->(*(int))
,	O
METH_VARARGS	O
,	O
""	*(char)
}	O
,	O
{	O
"ticket_create"	*(char)
,	O
(	O
PyCFunction	O
)	O
api_ticket_create	(*(int),*(int))->(*(int))
,	O
METH_VARARGS	O
,	O
""	*(char)
}	O
,	O
{	O
"ticket_destroy"	*(char)
,	O
(	O
PyCFunction	O
)	O
api_ticket_destroy	(*(int),*(int))->(*(int))
,	O
METH_VARARGS	O
,	O
""	*(char)
}	O
,	O
{	O
"ticket_set_secret"	*(char)
,	O
(	O
PyCFunction	O
)	O
api_ticket_set_secret	(*(int),*(int))->(*(int))
,	O
METH_VARARGS	O
,	O
""	*(char)
}	O
,	O
{	O
"wicket_create"	*(char)
,	O
(	O
PyCFunction	O
)	O
api_wicket_create	(*(int),*(int))->(*(int))
,	O
METH_VARARGS	O
,	O
""	*(char)
}	O
,	O
{	O
"wicket_destroy"	*(char)
,	O
(	O
PyCFunction	O
)	O
api_wicket_destroy	(*(int),*(int))->(*(int))
,	O
METH_VARARGS	O
,	O
""	*(char)
}	O
,	O
{	O
"wicket_get_ticket"	*(char)
,	O
(	O
PyCFunction	O
)	O
api_wicket_get_ticket	(*(int),*(int))->(*(int))
,	O
METH_VARARGS	O
,	O
""	*(char)
}	O
,	O
{	O
"register_module"	*(char)
,	O
(	O
PyCFunction	O
)	O
api_register_module	(*(int),*(int))->(*(int))
,	O
METH_VARARGS	O
,	O
""	*(char)
}	O
,	O
{	O
"get_auth_by_name"	*(char)
,	O
(	O
PyCFunction	O
)	O
api_get_auth_by_name	(*(int),*(int))->(*(int))
,	O
METH_VARARGS	O
,	O
""	*(char)
}	O
,	O
{	O
"get_auth_by_uid"	*(char)
,	O
(	O
PyCFunction	O
)	O
api_get_auth_by_uid	(*(int),*(int))->(*(int))
,	O
METH_VARARGS	O
,	O
""	*(char)
}	O
,	O
{	O
"authenticate"	*(char)
,	O
(	O
PyCFunction	O
)	O
api_authenticate	(*(int),*(int))->(*(int))
,	O
METH_VARARGS	O
,	O
""	*(char)
}	O
,	O
{	O
"set_pam_service"	*(char)
,	O
(	O
PyCFunction	O
)	O
api_set_pam_service	(*(int),*(int))->(*(int))
,	O
METH_VARARGS	O
,	O
""	*(char)
}	O
,	O
{	O
NULL	O
,	O
NULL	O
,	O
0	int
,	O
NULL	O
}	O
}	O
;	O
static	O
struct	O
PyModuleDef	O
moduledef	struct
=	O
{	O
PyModuleDef_HEAD_INIT	O
,	O
PY_MODULE	*(char)
,	O
NULL	O
,	O
-	O
1	int
,	O
methods	array(int)
}	O
;	O
int	O
mu_py_init_auth	()->(int)
(	O
void	O
)	O
{	O
PyAuthorityType	int
.	O
tp_new	O
=	O
PyType_GenericNew	O
;	O
PyTicketType	int
.	O
tp_new	O
=	O
PyType_GenericNew	O
;	O
PyWicketType	int
.	O
tp_new	O
=	O
PyType_GenericNew	O
;	O
PyAuthDataType	int
.	O
tp_new	O
=	O
PyType_GenericNew	O
;	O
if	O
(	O
PyType_Ready	()->(int)
(	O
&	O
PyAuthorityType	int
)	O
<	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
PyType_Ready	()->(int)
(	O
&	O
PyTicketType	int
)	O
<	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
PyType_Ready	()->(int)
(	O
&	O
PyWicketType	int
)	O
<	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
PyType_Ready	()->(int)
(	O
&	O
PyAuthDataType	int
)	O
<	O
0	int
)	O
return	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
void	O
_mu_py_attach_auth	()->(void)
(	O
void	O
)	O
{	O
PyObject	O
*	O
m	O
;	O
if	O
(	O
(	O
m	O
=	O
_mu_py_attach_module	(*(struct))->(*(int))
(	O
&	O
moduledef	struct
)	O
)	O
)	O
{	O
Py_INCREF	()->(int)
(	O
&	O
PyAuthorityType	int
)	O
;	O
Py_INCREF	()->(int)
(	O
&	O
PyTicketType	int
)	O
;	O
Py_INCREF	()->(int)
(	O
&	O
PyWicketType	int
)	O
;	O
Py_INCREF	()->(int)
(	O
&	O
PyAuthDataType	int
)	O
;	O
PyModule_AddObject	()->(int)
(	O
m	O
,	O
PY_CSNAME1	*(char)
,	O
(	O
PyObject	O
*	O
)	O
&	O
PyAuthorityType	int
)	O
;	O
PyModule_AddObject	()->(int)
(	O
m	O
,	O
PY_CSNAME2	*(char)
,	O
(	O
PyObject	O
*	O
)	O
&	O
PyTicketType	int
)	O
;	O
PyModule_AddObject	()->(int)
(	O
m	O
,	O
PY_CSNAME3	*(char)
,	O
(	O
PyObject	O
*	O
)	O
&	O
PyWicketType	int
)	O
;	O
PyModule_AddObject	()->(int)
(	O
m	O
,	O
PY_CSNAME4	*(char)
,	O
(	O
PyObject	O
*	O
)	O
&	O
PyAuthDataType	int
)	O
;	O
}	O
}	O
