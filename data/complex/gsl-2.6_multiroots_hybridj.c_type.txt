typedef	O
struct	O
{	O
size_t	long
iter	long
;	O
size_t	long
ncfail	long
;	O
size_t	long
ncsuc	long
;	O
size_t	long
nslow1	long
;	O
size_t	long
nslow2	long
;	O
double	O
fnorm	double
;	O
double	O
delta	double
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
q	*(struct(long,*(long)))
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
tau	double
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
newton	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
gradient	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
df	*(double)
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
qtdf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
rdx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
}	O
hybridj_state_t	struct(long,long,long,long,long,double,double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
;	O
static	O
int	O
hybridj_alloc	(*(void),long)->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
size_t	long
n	int
)	O
;	O
static	O
int	O
hybridj_set	(*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
gsl_multiroot_function_fdf	struct(*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))->(int)),long,*(void))
*	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f	*(double)
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
static	O
int	O
hybridsj_set	(*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
gsl_multiroot_function_fdf	struct(*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))->(int)),long,*(void))
*	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f	*(double)
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
static	O
int	O
hybridj_set_impl	(*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),int)->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
gsl_multiroot_function_fdf	struct(*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))->(int)),long,*(void))
*	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f	*(double)
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
int	O
scale	int
)	O
;	O
static	O
int	O
hybridj_iterate	(*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
gsl_multiroot_function_fdf	struct(*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))->(int)),long,*(void))
*	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f	*(double)
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
static	O
void	O
hybridj_free	(*(void))->(void)
(	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
int	O
hybridj_iterate_impl	(*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),int)->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
gsl_multiroot_function_fdf	struct(*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))->(int)),long,*(void))
*	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f	*(double)
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
int	O
scale	int
)	O
;	O
static	O
int	O
hybridj_alloc	(*(void),long)->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
size_t	long
n	int
)	O
{	O
hybridj_state_t	struct(long,long,long,long,long,double,double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
*	O
state	*(int)
=	O
(	O
hybridj_state_t	struct(long,long,long,long,long,double,double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
*	O
)	O
vstate	*(void)
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
q	*(struct(long,*(long)))
,	O
*	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
tau	double
,	O
*	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
*	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
*	O
newton	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
*	O
gradient	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
*	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
*	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
*	O
df	*(double)
,	O
*	O
qtdf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
*	O
rdx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
*	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
q	*(struct(long,*(long)))
=	O
gsl_matrix_calloc	(long,long)->(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
,	O
n	int
)	O
;	O
if	O
(	O
q	*(struct(long,*(long)))
==	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"failed to allocate space for q"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
q	*(struct(long,*(long)))
=	O
q	*(struct(long,*(long)))
;	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_calloc	(long,long)->(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
,	O
n	int
)	O
;	O
if	O
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
q	*(struct(long,*(long)))
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for r"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
tau	double
=	O
gsl_vector_calloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
tau	double
==	O
0	int
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
q	*(struct(long,*(long)))
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for tau"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
tau	double
=	O
tau	double
;	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_calloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
q	*(struct(long,*(long)))
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
tau	double
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for diag"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_calloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
q	*(struct(long,*(long)))
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
tau	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for qtf"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
newton	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_calloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
newton	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
q	*(struct(long,*(long)))
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
tau	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for newton"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
newton	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
newton	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gradient	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_calloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
gradient	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
q	*(struct(long,*(long)))
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
tau	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
newton	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for gradient"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
gradient	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gradient	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_calloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
q	*(struct(long,*(long)))
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
tau	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
newton	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
gradient	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for x_trial"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_calloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
q	*(struct(long,*(long)))
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
tau	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
newton	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
gradient	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for f_trial"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
df	*(double)
=	O
gsl_vector_calloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
df	*(double)
==	O
0	int
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
q	*(struct(long,*(long)))
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
tau	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
newton	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
gradient	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for df"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
df	*(double)
=	O
df	*(double)
;	O
qtdf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_calloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
qtdf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
q	*(struct(long,*(long)))
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
tau	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
newton	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
gradient	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
df	*(double)
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for qtdf"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
qtdf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
qtdf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
rdx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_calloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
rdx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
q	*(struct(long,*(long)))
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
tau	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
newton	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
gradient	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
df	*(double)
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
qtdf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for rdx"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
rdx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
rdx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_vector_calloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
==	O
0	int
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
q	*(struct(long,*(long)))
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
tau	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
newton	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
gradient	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
df	*(double)
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
qtdf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
rdx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for w"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_vector_calloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
==	O
0	int
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
q	*(struct(long,*(long)))
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
tau	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
newton	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
gradient	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
df	*(double)
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
qtdf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
rdx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for v"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
hybridj_set	(*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
gsl_multiroot_function_fdf	struct(*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))->(int)),long,*(void))
*	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f	*(double)
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
int	O
status	int
=	O
hybridj_set_impl	(*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),int)->(int)
(	O
vstate	*(void)
,	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
x	double
,	O
f	*(double)
,	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
hybridsj_set	(*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
gsl_multiroot_function_fdf	struct(*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))->(int)),long,*(void))
*	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f	*(double)
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
int	O
status	int
=	O
hybridj_set_impl	(*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),int)->(int)
(	O
vstate	*(void)
,	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
x	double
,	O
f	*(double)
,	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
1	int
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
hybridj_set_impl	(*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),int)->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
gsl_multiroot_function_fdf	struct(*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))->(int)),long,*(void))
*	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f	*(double)
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
int	O
scale	int
)	O
{	O
hybridj_state_t	struct(long,long,long,long,long,double,double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
*	O
state	*(int)
=	O
(	O
hybridj_state_t	struct(long,long,long,long,long,double,double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
*	O
)	O
vstate	*(void)
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
q	*(struct(long,*(long)))
=	O
state	*(int)
->	O
q	*(struct(long,*(long)))
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
state	*(int)
->	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
tau	double
=	O
state	*(int)
->	O
tau	double
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
state	*(int)
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
GSL_MULTIROOT_FN_EVAL_F_DF	O
(	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
x	double
,	O
f	*(double)
,	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
state	*(int)
->	O
iter	long
=	O
1	int
;	O
state	*(int)
->	O
fnorm	double
=	O
enorm	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
f	*(double)
)	O
;	O
state	*(int)
->	O
ncfail	long
=	O
0	int
;	O
state	*(int)
->	O
ncsuc	long
=	O
0	int
;	O
state	*(int)
->	O
nslow1	long
=	O
0	int
;	O
state	*(int)
->	O
nslow2	long
=	O
0	int
;	O
gsl_vector_set_all	(*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(void)
(	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0.0	int
)	O
;	O
if	O
(	O
scale	int
)	O
compute_diag	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
else	O
gsl_vector_set_all	(*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(void)
(	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
1.0	int
)	O
;	O
state	*(int)
->	O
delta	double
=	O
compute_delta	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
x	double
)	O
;	O
gsl_linalg_QR_decomp	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
tau	double
)	O
;	O
gsl_linalg_QR_unpack	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
tau	double
,	O
q	*(struct(long,*(long)))
,	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
hybridj_iterate	(*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
gsl_multiroot_function_fdf	struct(*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))->(int)),long,*(void))
*	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f	*(double)
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
int	O
status	int
=	O
hybridj_iterate_impl	(*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),int)->(int)
(	O
vstate	*(void)
,	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
x	double
,	O
f	*(double)
,	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
hybridsj_iterate	(*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
gsl_multiroot_function_fdf	struct(*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))->(int)),long,*(void))
*	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f	*(double)
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
int	O
status	int
=	O
hybridj_iterate_impl	(*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),int)->(int)
(	O
vstate	*(void)
,	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
x	double
,	O
f	*(double)
,	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
1	int
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
hybridj_iterate_impl	(*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),int)->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
gsl_multiroot_function_fdf	struct(*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))->(int)),long,*(void))
*	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f	*(double)
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
int	O
scale	int
)	O
{	O
hybridj_state_t	struct(long,long,long,long,long,double,double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
*	O
state	*(int)
=	O
(	O
hybridj_state_t	struct(long,long,long,long,long,double,double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
*	O
)	O
vstate	*(void)
;	O
const	O
double	O
fnorm	double
=	O
state	*(int)
->	O
fnorm	double
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
q	*(struct(long,*(long)))
=	O
state	*(int)
->	O
q	*(struct(long,*(long)))
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
state	*(int)
->	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
tau	double
=	O
state	*(int)
->	O
tau	double
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
state	*(int)
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
state	*(int)
->	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
state	*(int)
->	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
state	*(int)
->	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
df	*(double)
=	O
state	*(int)
->	O
df	*(double)
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
qtdf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
state	*(int)
->	O
qtdf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
rdx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
state	*(int)
->	O
rdx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
state	*(int)
->	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
state	*(int)
->	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
double	O
prered	double
,	O
actred	double
;	O
double	O
pnorm	double
,	O
fnorm1	double
,	O
fnorm1p	double
;	O
double	O
ratio	double
;	O
double	O
p1	double
=	O
0.1	int
,	O
p5	double
=	O
0.5	int
,	O
p001	double
=	O
0.001	int
,	O
p0001	double
=	O
0.0001	int
;	O
compute_qtf	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
q	*(struct(long,*(long)))
,	O
f	*(double)
,	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
dogleg	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
delta	double
,	O
state	*(int)
->	O
newton	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
gradient	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
compute_trial_step	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
x	double
,	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
pnorm	double
=	O
scaled_enorm	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
iter	long
==	O
1	int
)	O
{	O
if	O
(	O
pnorm	double
<	O
state	*(int)
->	O
delta	double
)	O
{	O
state	*(int)
->	O
delta	double
=	O
pnorm	double
;	O
}	O
}	O
{	O
int	O
status	int
=	O
GSL_MULTIROOT_FN_EVAL_F	O
(	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
status	int
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
GSL_EBADFUNC	int
;	O
}	O
}	O
compute_df	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
f	*(double)
,	O
df	*(double)
)	O
;	O
fnorm1	double
=	O
enorm	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
actred	double
=	O
compute_actual_reduction	(double,double)->(double)
(	O
fnorm	double
,	O
fnorm1	double
)	O
;	O
compute_rdx	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
rdx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
fnorm1p	double
=	O
enorm_sum	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
rdx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
prered	double
=	O
compute_predicted_reduction	(double,double)->(double)
(	O
fnorm	double
,	O
fnorm1p	double
)	O
;	O
if	O
(	O
prered	double
>	O
0	int
)	O
{	O
ratio	double
=	O
actred	double
/	O
prered	double
;	O
}	O
else	O
{	O
ratio	double
=	O
0	int
;	O
}	O
if	O
(	O
ratio	double
<	O
p1	double
)	O
{	O
state	*(int)
->	O
ncsuc	long
=	O
0	int
;	O
state	*(int)
->	O
ncfail	long
++	O
;	O
state	*(int)
->	O
delta	double
*=	O
p5	double
;	O
}	O
else	O
{	O
state	*(int)
->	O
ncfail	long
=	O
0	int
;	O
state	*(int)
->	O
ncsuc	long
++	O
;	O
if	O
(	O
ratio	double
>=	O
p5	double
||	O
state	*(int)
->	O
ncsuc	long
>	O
1	int
)	O
state	*(int)
->	O
delta	double
=	O
GSL_MAX	O
(	O
state	*(int)
->	O
delta	double
,	O
pnorm	double
/	O
p5	double
)	O
;	O
if	O
(	O
fabs	(double)->(double)
(	O
ratio	double
-	O
1	int
)	O
<=	O
p1	double
)	O
state	*(int)
->	O
delta	double
=	O
pnorm	double
/	O
p5	double
;	O
}	O
if	O
(	O
ratio	double
>=	O
p0001	double
)	O
{	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
x	double
,	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
f	*(double)
,	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
state	*(int)
->	O
fnorm	double
=	O
fnorm1	double
;	O
state	*(int)
->	O
iter	long
++	O
;	O
}	O
state	*(int)
->	O
nslow1	long
++	O
;	O
if	O
(	O
actred	double
>=	O
p001	double
)	O
state	*(int)
->	O
nslow1	long
=	O
0	int
;	O
if	O
(	O
actred	double
>=	O
p1	double
)	O
state	*(int)
->	O
nslow2	long
=	O
0	int
;	O
if	O
(	O
state	*(int)
->	O
ncfail	long
==	O
2	int
)	O
{	O
{	O
int	O
status	int
=	O
GSL_MULTIROOT_FN_EVAL_DF	O
(	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
x	double
,	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
status	int
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
GSL_EBADFUNC	int
;	O
}	O
}	O
state	*(int)
->	O
nslow2	long
++	O
;	O
if	O
(	O
state	*(int)
->	O
iter	long
==	O
1	int
)	O
{	O
if	O
(	O
scale	int
)	O
compute_diag	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
state	*(int)
->	O
delta	double
=	O
compute_delta	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
x	double
)	O
;	O
}	O
else	O
{	O
if	O
(	O
scale	int
)	O
update_diag	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
gsl_linalg_QR_decomp	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
tau	double
)	O
;	O
gsl_linalg_QR_unpack	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
tau	double
,	O
q	*(struct(long,*(long)))
,	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
compute_qtf	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
q	*(struct(long,*(long)))
,	O
df	*(double)
,	O
qtdf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
compute_wv	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
qtdf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
rdx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
pnorm	double
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
gsl_linalg_QR_update	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
q	*(struct(long,*(long)))
,	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
nslow2	long
==	O
5	int
)	O
{	O
return	O
GSL_ENOPROGJ	int
;	O
}	O
if	O
(	O
state	*(int)
->	O
nslow1	long
==	O
10	int
)	O
{	O
return	O
GSL_ENOPROG	int
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
void	O
hybridj_free	(*(void))->(void)
(	O
void	O
*	O
vstate	*(void)
)	O
{	O
hybridj_state_t	struct(long,long,long,long,long,double,double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
*	O
state	*(int)
=	O
(	O
hybridj_state_t	struct(long,long,long,long,long,double,double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
*	O
)	O
vstate	*(void)
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
rdx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
qtdf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
df	*(double)
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
gradient	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
newton	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
tau	double
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
q	*(struct(long,*(long)))
)	O
;	O
}	O
static	O
const	O
gsl_multiroot_fdfsolver_type	struct(*(char),long,*((*(void),long)->(int)),*((*(void),*(struct(*`,*`,*`,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(*`,*`,*`,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void))->(void)))
hybridj_type	struct(*(char),long,*((*(void),long)->(int)),*((*(void),*(struct(*`,*`,*`,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(*`,*`,*`,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void))->(void)))
=	O
{	O
"hybridj"	*(char)
,	O
sizeof	O
(	O
hybridj_state_t	struct(long,long,long,long,long,double,double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
)	O
,	O
&	O
hybridj_alloc	(*(void),long)->(int)
,	O
&	O
hybridj_set	(*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
,	O
&	O
hybridj_iterate	(*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
,	O
&	O
hybridj_free	(*(void))->(void)
}	O
;	O
static	O
const	O
gsl_multiroot_fdfsolver_type	struct(*(char),long,*((*(void),long)->(int)),*((*(void),*(struct(*`,*`,*`,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(*`,*`,*`,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void))->(void)))
hybridsj_type	struct(*(char),long,*((*(void),long)->(int)),*((*(void),*(struct(*`,*`,*`,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(*`,*`,*`,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void))->(void)))
=	O
{	O
"hybridsj"	*(char)
,	O
sizeof	O
(	O
hybridj_state_t	struct(long,long,long,long,long,double,double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
)	O
,	O
&	O
hybridj_alloc	(*(void),long)->(int)
,	O
&	O
hybridsj_set	(*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
,	O
&	O
hybridsj_iterate	(*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
,	O
&	O
hybridj_free	(*(void))->(void)
}	O
;	O
const	O
gsl_multiroot_fdfsolver_type	struct(*(char),long,*((*(void),long)->(int)),*((*(void),*(struct(*`,*`,*`,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(*`,*`,*`,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void))->(void)))
*	O
gsl_multiroot_fdfsolver_hybridj	*(struct(*(char),long,*((*(void),long)->(int)),*((*(void),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(void),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(void))->(void))))
=	O
&	O
hybridj_type	struct(*(char),long,*((*(void),long)->(int)),*((*(void),*(struct(*`,*`,*`,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(*`,*`,*`,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void))->(void)))
;	O
const	O
gsl_multiroot_fdfsolver_type	struct(*(char),long,*((*(void),long)->(int)),*((*(void),*(struct(*`,*`,*`,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(*`,*`,*`,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void))->(void)))
*	O
gsl_multiroot_fdfsolver_hybridsj	*(struct(*(char),long,*((*(void),long)->(int)),*((*(void),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(void),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(void))->(void))))
=	O
&	O
hybridsj_type	struct(*(char),long,*((*(void),long)->(int)),*((*(void),*(struct(*`,*`,*`,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(*`,*`,*`,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void))->(void)))
;	O
