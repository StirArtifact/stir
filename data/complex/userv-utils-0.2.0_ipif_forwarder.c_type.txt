static	O
size_t	long
buffer_size	long
;	O
static	O
struct	O
utsname	struct(array(char),array(char),array(char),array(char),array(char),array(char))
uname_result	struct(array(char),array(char),array(char),array(char),array(char),array(char))
;	O
static	O
const	O
char	O
*	O
opt_chars	*(char)
;	O
static	O
int	O
public_local_fd	int
,	O
private_in_fd	int
,	O
private_out_fd	int
;	O
static	O
int	O
mtu2	int
,	O
keepalive	int
,	O
timeout	int
,	O
reannounce	int
;	O
static	O
int	O
public_remote_specd	int
;	O
static	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
public_remote	struct(short,short,struct(int),array(char))
;	O
static	O
int	O
encdec_keys_fd	int
,	O
encdec_keys_write	int
,	O
crypto_debug	int
;	O
static	O
int	O
n_mechs	int
;	O
static	O
const	O
struct	O
mechanism	struct(*(char),*((*(*(struct)),*(int),*(int))->(void)),*((*(*(struct)))->(void)),*((*(struct),*(struct(*(char),*(char),long)))->(void)),*((*(struct),*(struct(*(char),*(char),long)))->(*(char))))
*	O
mechs	array(*(struct(*(char),*((*(*`),*(int),*(int))->(void)),*((*(*`))->(void)),*((*(struct`),*(struct`))->(void)),*((*(struct`),*(struct`))->(*(char))))))
[	O
MAXMECHS	int
]	O
;	O
static	O
struct	O
mechdata	O
*	O
md_in	array(*(struct))
[	O
MAXMECHS	int
]	O
,	O
*	O
md_out	array(*(struct))
[	O
MAXMECHS	int
]	O
;	O
static	O
size_t	long
maxprefix	long
,	O
maxsuffix	long
;	O
static	O
struct	O
buffer	struct(*(char),*(char),long)
buf_in	struct(*(char),*(char),long)
,	O
buf_out	struct(*(char),*(char),long)
;	O
static	O
unsigned	O
char	O
*	O
accum_buf	*(char)
;	O
static	O
size_t	long
accum_used	long
,	O
accum_avail	long
;	O
static	O
time_t	long
nextsendka	long
;	O
static	O
void	O
cdebug	(int,*(char))->(void)
(	O
int	O
mechno	int
,	O
const	O
char	O
*	O
msg	*(char)
)	O
{	O
if	O
(	O
!	O
crypto_debug	int
)	O
return	O
;	O
printf	(*(char))->(int)
(	O
"%-8.8s: CRYPTO: %-20s %s\n"	*(char)
,	O
uname_result	struct(array(char),array(char),array(char),array(char),array(char),array(char))
.	O
nodename	array(char)
,	O
mechno	int
>=	O
0	int
?	O
mechs	array(*(struct(*(char),*((*(*`),*(int),*(int))->(void)),*((*(*`))->(void)),*((*(struct`),*(struct`))->(void)),*((*(struct`),*(struct`))->(*(char))))))
[	O
mechno	int
]	O
->	O
name	*(char)
:	O
""	*(char)
,	O
msg	*(char)
)	O
;	O
}	O
static	O
void	O
cdebughex	(int,*(char),*(void),long,long,int,int)->(void)
(	O
int	O
mechno	int
,	O
const	O
char	O
*	O
msg	*(char)
,	O
const	O
void	O
*	O
ptr	*(void)
,	O
size_t	long
sz	long
,	O
size_t	long
skipbefore	long
,	O
int	O
spc_offset	int
,	O
int	O
dot_offset	int
)	O
{	O
const	O
unsigned	O
char	O
*	O
p	*(char)
;	O
size_t	long
i	long
;	O
unsigned	O
j	int
=	O
dot_offset	int
;	O
if	O
(	O
!	O
crypto_debug	int
)	O
return	O
;	O
printf	(*(char))->(int)
(	O
"%-8.8s: CRYPTO: %-20s %-10s"	*(char)
,	O
uname_result	struct(array(char),array(char),array(char),array(char),array(char),array(char))
.	O
nodename	array(char)
,	O
mechno	int
>=	O
0	int
?	O
mechs	array(*(struct(*(char),*((*(*`),*(int),*(int))->(void)),*((*(*`))->(void)),*((*(struct`),*(struct`))->(void)),*((*(struct`),*(struct`))->(*(char))))))
[	O
mechno	int
]	O
->	O
name	*(char)
:	O
""	*(char)
,	O
msg	*(char)
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
spc_offset	int
;	O
i	long
++	O
,	O
j	int
++	O
)	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
j	int
&	O
3	int
?	O
"  "	*(char)
:	O
"   "	*(char)
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
skipbefore	long
;	O
i	long
++	O
,	O
j	int
++	O
)	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
j	int
&	O
3	int
?	O
".."	*(char)
:	O
" .."	*(char)
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
for	O
(	O
i	long
=	O
0	int
,	O
p	*(char)
=	O
ptr	*(void)
;	O
i	long
<	O
sz	long
;	O
i	long
++	O
,	O
j	int
++	O
,	O
p	*(char)
++	O
)	O
printf	(*(char))->(int)
(	O
j	int
&	O
3	int
?	O
"%02x"	*(char)
:	O
" %02x"	*(char)
,	O
*	O
p	*(char)
)	O
;	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'\n'	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
static	O
void	O
cdebugbuf	(int,*(char),*(struct(*(char),*(char),long)),int,int)->(void)
(	O
int	O
mechno	int
,	O
const	O
char	O
*	O
msg	*(char)
,	O
const	O
struct	O
buffer	struct(*(char),*(char),long)
*	O
buf	*(struct(*(char),*(char),long))
,	O
int	O
spc_offset	int
,	O
int	O
dot_offset	int
)	O
{	O
cdebughex	(int,*(char),*(void),long,long,int,int)->(void)
(	O
mechno	int
,	O
msg	*(char)
,	O
buf	*(struct(*(char),*(char),long))
->	O
start	*(char)
,	O
buf	*(struct(*(char),*(char),long))
->	O
size	long
,	O
buf	*(struct(*(char),*(char),long))
->	O
start	*(char)
-	O
buf	*(struct(*(char),*(char),long))
->	O
base	*(char)
,	O
spc_offset	int
,	O
dot_offset	int
)	O
;	O
}	O
void	O
get_random	(*(void),long)->(void)
(	O
void	O
*	O
ptr	*(void)
,	O
size_t	long
sz	long
)	O
{	O
static	O
FILE	struct
*	O
randfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
size_t	long
r	long
;	O
if	O
(	O
!	O
randfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
randfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
"/dev/urandom"	*(char)
,	O
"rb"	*(char)
)	O
;	O
if	O
(	O
!	O
randfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
&&	O
errno	O
==	O
ENOENT	int
)	O
randfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
"/dev/random"	*(char)
,	O
"rb"	*(char)
)	O
;	O
if	O
(	O
!	O
randfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
sysfail	(*(char))->(void)
(	O
"open random number generator"	*(char)
)	O
;	O
}	O
r	long
=	O
fread	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
ptr	*(void)
,	O
1	int
,	O
sz	long
,	O
randfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
r	long
!=	O
sz	long
)	O
(	O
ferror	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
randfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
?	O
sysfail	(*(char))->(void)
:	O
fail	(*(char))->(void)
)	O
(	O
"cannot read random number generator"	*(char)
)	O
;	O
cdebughex	(int,*(char),*(void),long,long,int,int)->(void)
(	O
-	O
1	int
,	O
"get_random"	*(char)
,	O
ptr	*(void)
,	O
sz	long
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
}	O
void	O
random_key	(*(void),long)->(void)
(	O
void	O
*	O
ptr	*(void)
,	O
size_t	long
sz	long
)	O
{	O
if	O
(	O
encdec_keys_write	int
)	O
{	O
get_random	(*(void),long)->(void)
(	O
ptr	*(void)
,	O
sz	long
)	O
;	O
write_must	(int,*(void),int,*(char))->(void)
(	O
encdec_keys_fd	int
,	O
ptr	*(void)
,	O
sz	long
,	O
"write keys datastream"	*(char)
)	O
;	O
}	O
else	O
{	O
read_must	(int,*(void),int,*(char))->(void)
(	O
encdec_keys_fd	int
,	O
ptr	*(void)
,	O
sz	long
,	O
"read keys datastream"	*(char)
)	O
;	O
cdebughex	(int,*(char),*(void),long,long,int,int)->(void)
(	O
-	O
1	int
,	O
"random_key"	*(char)
,	O
ptr	*(void)
,	O
sz	long
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
}	O
}	O
static	O
void	O
setnonblock	(int,int)->(void)
(	O
int	O
fd	int
,	O
int	O
nonblock	int
)	O
{	O
int	O
r	long
;	O
r	long
=	O
fcntl	(int,int)->(int)
(	O
fd	int
,	O
F_GETFL	int
)	O
;	O
if	O
(	O
r	long
==	O
-	O
1	int
)	O
sysfail	(*(char))->(void)
(	O
"fcntl F_GETFL"	*(char)
)	O
;	O
r	long
=	O
fcntl	(int,int)->(int)
(	O
fd	int
,	O
F_SETFL	int
,	O
nonblock	int
?	O
r	long
|	O
O_NONBLOCK	int
:	O
r	long
&	O
~	O
O_NONBLOCK	int
)	O
;	O
if	O
(	O
r	long
==	O
-	O
1	int
)	O
sysfail	(*(char))->(void)
(	O
"fcntl F_SETFL"	*(char)
)	O
;	O
}	O
static	O
const	O
struct	O
mechanism	struct(*(char),*((*(*(struct)),*(int),*(int))->(void)),*((*(*(struct)))->(void)),*((*(struct),*(struct(*(char),*(char),long)))->(void)),*((*(struct),*(struct(*(char),*(char),long)))->(*(char))))
*	O
find_mech	(*(char))->(*(struct(*(char),*((*`,*`,*`)->(void)),*((*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(*`)))))
(	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
const	O
struct	O
mechanism	struct(*(char),*((*(*(struct)),*(int),*(int))->(void)),*((*(*(struct)))->(void)),*((*(struct),*(struct(*(char),*(char),long)))->(void)),*((*(struct),*(struct(*(char),*(char),long)))->(*(char))))
*	O
mech	*(struct(*(char),*((*(*`),*(int),*(int))->(void)),*((*(*`))->(void)),*((*(struct`),*(struct`))->(void)),*((*(struct`),*(struct`))->(*(char)))))
,	O
*	O
const	O
*	O
mechlist	*(*(struct(*(char),*((*`,*`,*`)->(void)),*((*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(*`)))))
;	O
for	O
(	O
mechlist	*(*(struct(*(char),*((*`,*`,*`)->(void)),*((*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(*`)))))
=	O
mechanismlists	array(*(struct(*(char),*((*(*`),*(int),*(int))->(void)),*((*(*`))->(void)),*((*(struct`),*(struct`))->(void)),*((*(struct`),*(struct`))->(*(char))))))
;	O
*	O
mechlist	*(*(struct(*(char),*((*`,*`,*`)->(void)),*((*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(*`)))))
;	O
mechlist	*(*(struct(*(char),*((*`,*`,*`)->(void)),*((*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(*`)))))
++	O
)	O
for	O
(	O
mech	*(struct(*(char),*((*(*`),*(int),*(int))->(void)),*((*(*`))->(void)),*((*(struct`),*(struct`))->(void)),*((*(struct`),*(struct`))->(*(char)))))
=	O
*	O
mechlist	*(*(struct(*(char),*((*`,*`,*`)->(void)),*((*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(*`)))))
;	O
mech	*(struct(*(char),*((*(*`),*(int),*(int))->(void)),*((*(*`))->(void)),*((*(struct`),*(struct`))->(void)),*((*(struct`),*(struct`))->(*(char)))))
->	O
name	*(char)
;	O
mech	*(struct(*(char),*((*(*`),*(int),*(int))->(void)),*((*(*`))->(void)),*((*(struct`),*(struct`))->(void)),*((*(struct`),*(struct`))->(*(char)))))
++	O
)	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
mech	*(struct(*(char),*((*(*`),*(int),*(int))->(void)),*((*(*`))->(void)),*((*(struct`),*(struct`))->(void)),*((*(struct`),*(struct`))->(*(char)))))
->	O
name	*(char)
,	O
name	*(char)
)	O
)	O
return	O
mech	*(struct(*(char),*((*(*`),*(int),*(int))->(void)),*((*(*`))->(void)),*((*(struct`),*(struct`))->(void)),*((*(struct`),*(struct`))->(*(char)))))
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: unknown mechanism: %s\n"	*(char)
,	O
programid	array(char)
,	O
name	*(char)
)	O
;	O
exit	(int)->(void)
(	O
4	int
)	O
;	O
}	O
static	O
void	O
inbound	()->(void)
(	O
void	O
)	O
{	O
static	O
int	O
any_recvd	int
;	O
static	O
time_t	long
nextreann	long
;	O
static	O
unsigned	O
long	O
npackets	long
,	O
nbytes	long
;	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
this_saddr	struct(short,short,struct(int),array(char))
;	O
int	O
r	long
,	O
i	long
,	O
different	int
,	O
this_saddrlen	int
;	O
const	O
char	O
*	O
emsg	*(char)
;	O
buf_in	struct(*(char),*(char),long)
.	O
start	*(char)
=	O
buf_in	struct(*(char),*(char),long)
.	O
base	*(char)
+	O
1	int
;	O
buf_in	struct(*(char),*(char),long)
.	O
size	long
=	O
buffer_size	long
-	O
2	int
;	O
setnonblock	(int,int)->(void)
(	O
public_local_fd	int
,	O
1	int
)	O
;	O
this_saddrlen	int
=	O
sizeof	O
(	O
this_saddr	struct(short,short,struct(int),array(char))
)	O
;	O
r	long
=	O
recvfrom	(int,*(void),long,int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),*(int))->(long)
(	O
public_local_fd	int
,	O
buf_in	struct(*(char),*(char),long)
.	O
start	*(char)
,	O
buf_in	struct(*(char),*(char),long)
.	O
size	long
,	O
0	int
,	O
&	O
this_saddr	struct(short,short,struct(int),array(char))
,	O
&	O
this_saddrlen	int
)	O
;	O
if	O
(	O
!	O
r	long
)	O
{	O
diag	(*(char))->(void)
(	O
"empty ciphertext"	*(char)
)	O
;	O
return	O
;	O
}	O
if	O
(	O
r	long
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
!=	O
EAGAIN	int
&&	O
errno	O
!=	O
EINTR	int
)	O
{	O
sysdiag	(*(char))->(void)
(	O
"receive"	*(char)
)	O
;	O
sleep	(int)->(int)
(	O
1	int
)	O
;	O
}	O
return	O
;	O
}	O
if	O
(	O
this_saddr	struct(short,short,struct(int),array(char))
.	O
sin_family	short
!=	O
AF_INET	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: received unknown AF %lu\n"	*(char)
,	O
programid	array(char)
,	O
(	O
unsigned	O
long	O
)	O
this_saddr	struct(short,short,struct(int),array(char))
.	O
sin_family	short
)	O
;	O
return	O
;	O
}	O
assert	O
(	O
this_saddrlen	int
==	O
sizeof	O
(	O
this_saddr	struct(short,short,struct(int),array(char))
)	O
)	O
;	O
assert	O
(	O
r	long
<=	O
buf_in	struct(*(char),*(char),long)
.	O
size	long
)	O
;	O
buf_in	struct(*(char),*(char),long)
.	O
size	long
=	O
r	long
;	O
cdebugbuf	(int,*(char),*(struct(*(char),*(char),long)),int,int)->(void)
(	O
-	O
1	int
,	O
"decode"	*(char)
,	O
&	O
buf_in	struct(*(char),*(char),long)
,	O
3	int
,	O
0	int
)	O
;	O
for	O
(	O
i	long
=	O
n_mechs	int
-	O
1	int
;	O
i	long
>=	O
0	int
;	O
i	long
--	O
)	O
{	O
emsg	*(char)
=	O
mechs	array(*(struct(*(char),*((*(*`),*(int),*(int))->(void)),*((*(*`))->(void)),*((*(struct`),*(struct`))->(void)),*((*(struct`),*(struct`))->(*(char))))))
[	O
i	long
]	O
->	O
decode	*((*(struct),*(struct(*(char),*(char),long)))->(*(char)))
(	O
md_in	array(*(struct))
[	O
i	long
]	O
,	O
&	O
buf_in	struct(*(char),*(char),long)
)	O
;	O
if	O
(	O
emsg	*(char)
)	O
{	O
if	O
(	O
*	O
emsg	*(char)
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: bad packet: %s: %s\n"	*(char)
,	O
programid	array(char)
,	O
mechs	array(*(struct(*(char),*((*(*`),*(int),*(int))->(void)),*((*(*`))->(void)),*((*(struct`),*(struct`))->(void)),*((*(struct`),*(struct`))->(*(char))))))
[	O
i	long
]	O
->	O
name	*(char)
,	O
emsg	*(char)
)	O
;	O
else	O
cdebug	(int,*(char))->(void)
(	O
i	long
,	O
"silently discarded"	*(char)
)	O
;	O
return	O
;	O
}	O
cdebugbuf	(int,*(char),*(struct(*(char),*(char),long)),int,int)->(void)
(	O
i	long
,	O
"decode"	*(char)
,	O
&	O
buf_in	struct(*(char),*(char),long)
,	O
3	int
,	O
0	int
)	O
;	O
}	O
npackets	long
++	O
;	O
nbytes	long
+=	O
buf_in	struct(*(char),*(char),long)
.	O
size	long
;	O
alarm	(int)->(int)
(	O
timeout	int
)	O
;	O
different	int
=	O
(	O
!	O
public_remote_specd	int
||	O
public_remote	struct(short,short,struct(int),array(char))
.	O
sin_addr	struct(int)
.	O
s_addr	int
!=	O
this_saddr	struct(short,short,struct(int),array(char))
.	O
sin_addr	struct(int)
.	O
s_addr	int
||	O
public_remote	struct(short,short,struct(int),array(char))
.	O
sin_port	short
!=	O
this_saddr	struct(short,short,struct(int),array(char))
.	O
sin_port	short
)	O
;	O
if	O
(	O
different	int
)	O
{	O
if	O
(	O
public_remote_specd	int
==	O
2	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: packet from unexpected sender %s:%lu\n"	*(char)
,	O
programid	array(char)
,	O
inet_ntoa	(struct(int))->(*(char))
(	O
this_saddr	struct(short,short,struct(int),array(char))
.	O
sin_addr	struct(int)
)	O
,	O
(	O
unsigned	O
long	O
)	O
ntohs	(short)->(short)
(	O
this_saddr	struct(short,short,struct(int),array(char))
.	O
sin_port	short
)	O
)	O
;	O
return	O
;	O
}	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: tunnel open with peer %s:%lu\n"	*(char)
,	O
programid	array(char)
,	O
inet_ntoa	(struct(int))->(*(char))
(	O
this_saddr	struct(short,short,struct(int),array(char))
.	O
sin_addr	struct(int)
)	O
,	O
(	O
unsigned	O
long	O
)	O
ntohs	(short)->(short)
(	O
this_saddr	struct(short,short,struct(int),array(char))
.	O
sin_port	short
)	O
)	O
;	O
nextsendka	long
=	O
now	()->(long)
(	O
)	O
;	O
public_remote_specd	int
=	O
1	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
&	O
public_remote	struct(short,short,struct(int),array(char))
,	O
&	O
this_saddr	struct(short,short,struct(int),array(char))
,	O
sizeof	O
(	O
public_remote	struct(short,short,struct(int),array(char))
)	O
)	O
;	O
}	O
else	O
if	O
(	O
!	O
any_recvd	int
)	O
{	O
diag	(*(char))->(void)
(	O
"tunnel open"	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
reannounce	int
&&	O
now	()->(long)
(	O
)	O
>=	O
nextreann	long
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: tunnel still open: received %lu packets, %lu bytes\n"	*(char)
,	O
programid	array(char)
,	O
npackets	long
,	O
nbytes	long
)	O
;	O
}	O
else	O
{	O
goto	O
no_set_reann	O
;	O
}	O
if	O
(	O
reannounce	int
)	O
nextreann	long
=	O
now	()->(long)
(	O
)	O
+	O
reannounce	int
;	O
no_set_reann	O
:	O
any_recvd	int
=	O
1	int
;	O
if	O
(	O
!	O
buf_in	struct(*(char),*(char),long)
.	O
size	long
||	O
*	O
buf_in	struct(*(char),*(char),long)
.	O
start	*(char)
!=	O
0300	int
)	O
{	O
*	O
--	O
buf_in	struct(*(char),*(char),long)
.	O
start	*(char)
=	O
0300	int
;	O
buf_in	struct(*(char),*(char),long)
.	O
size	long
++	O
;	O
}	O
if	O
(	O
buf_in	struct(*(char),*(char),long)
.	O
start	*(char)
[	O
buf_in	struct(*(char),*(char),long)
.	O
size	long
-	O
1	int
]	O
!=	O
0300	int
)	O
{	O
buf_in	struct(*(char),*(char),long)
.	O
start	*(char)
[	O
buf_in	struct(*(char),*(char),long)
.	O
size	long
++	O
]	O
=	O
0300	int
;	O
}	O
setnonblock	(int,int)->(void)
(	O
private_in_fd	int
,	O
0	int
)	O
;	O
write_must	(int,*(void),int,*(char))->(void)
(	O
private_in_fd	int
,	O
buf_in	struct(*(char),*(char),long)
.	O
start	*(char)
,	O
buf_in	struct(*(char),*(char),long)
.	O
size	long
,	O
"write down"	*(char)
)	O
;	O
}	O
static	O
void	O
sendpacket	(*(char),long)->(void)
(	O
const	O
unsigned	O
char	O
*	O
message	*(char)
,	O
size_t	long
size	long
)	O
{	O
int	O
i	long
,	O
r	long
;	O
buf_out	struct(*(char),*(char),long)
.	O
start	*(char)
=	O
buf_out	struct(*(char),*(char),long)
.	O
base	*(char)
+	O
maxprefix	long
;	O
buf_out	struct(*(char),*(char),long)
.	O
size	long
=	O
size	long
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
buf_out	struct(*(char),*(char),long)
.	O
start	*(char)
,	O
message	*(char)
,	O
size	long
)	O
;	O
nextsendka	long
=	O
now	()->(long)
(	O
)	O
+	O
keepalive	int
;	O
cdebugbuf	(int,*(char),*(struct(*(char),*(char),long)),int,int)->(void)
(	O
-	O
1	int
,	O
"encode"	*(char)
,	O
&	O
buf_out	struct(*(char),*(char),long)
,	O
4	int
,	O
0	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n_mechs	int
;	O
i	long
++	O
)	O
{	O
mechs	array(*(struct(*(char),*((*(*`),*(int),*(int))->(void)),*((*(*`))->(void)),*((*(struct`),*(struct`))->(void)),*((*(struct`),*(struct`))->(*(char))))))
[	O
i	long
]	O
->	O
encode	*((*(struct),*(struct(*(char),*(char),long)))->(void))
(	O
md_out	array(*(struct))
[	O
i	long
]	O
,	O
&	O
buf_out	struct(*(char),*(char),long)
)	O
;	O
cdebugbuf	(int,*(char),*(struct(*(char),*(char),long)),int,int)->(void)
(	O
i	long
,	O
"encode"	*(char)
,	O
&	O
buf_out	struct(*(char),*(char),long)
,	O
4	int
,	O
0	int
)	O
;	O
}	O
assert	O
(	O
public_remote_specd	int
)	O
;	O
setnonblock	(int,int)->(void)
(	O
public_local_fd	int
,	O
1	int
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
r	long
=	O
sendto	(int,*(void),long,int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(long)
(	O
public_local_fd	int
,	O
buf_out	struct(*(char),*(char),long)
.	O
start	*(char)
,	O
buf_out	struct(*(char),*(char),long)
.	O
size	long
,	O
0	int
,	O
&	O
public_remote	struct(short,short,struct(int),array(char))
,	O
sizeof	O
(	O
public_remote	struct(short,short,struct(int),array(char))
)	O
)	O
;	O
if	O
(	O
r	long
==	O
buf_out	struct(*(char),*(char),long)
.	O
size	long
)	O
break	O
;	O
if	O
(	O
r	long
>=	O
0	int
)	O
{	O
diag	(*(char))->(void)
(	O
"unexpected short send"	*(char)
)	O
;	O
return	O
;	O
}	O
if	O
(	O
errno	O
!=	O
EINTR	int
)	O
{	O
sysdiag	(*(char))->(void)
(	O
"send"	*(char)
)	O
;	O
return	O
;	O
}	O
}	O
}	O
static	O
void	O
outbound	()->(void)
(	O
void	O
)	O
{	O
int	O
r	long
;	O
unsigned	O
char	O
*	O
after_eaten	*(char)
,	O
*	O
delim	*(char)
;	O
size_t	long
this_packet	long
;	O
setnonblock	(int,int)->(void)
(	O
private_out_fd	int
,	O
1	int
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
r	long
=	O
read	(int,*(void),long)->(long)
(	O
private_out_fd	int
,	O
accum_buf	*(char)
+	O
accum_used	long
,	O
accum_avail	long
-	O
accum_used	long
)	O
;	O
if	O
(	O
!	O
r	long
)	O
{	O
diag	(*(char))->(void)
(	O
"outbound datastream closed, quitting"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
if	O
(	O
r	long
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
EAGAIN	int
)	O
return	O
;	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
continue	O
;	O
}	O
accum_used	long
+=	O
r	long
;	O
assert	O
(	O
accum_used	long
<=	O
accum_avail	long
)	O
;	O
after_eaten	*(char)
=	O
accum_buf	*(char)
;	O
while	O
(	O
(	O
delim	*(char)
=	O
memchr	(*(void),int,long)->(*(void))
(	O
after_eaten	*(char)
,	O
0300	int
,	O
accum_used	long
)	O
)	O
)	O
{	O
this_packet	long
=	O
delim	*(char)
-	O
after_eaten	*(char)
;	O
if	O
(	O
this_packet	long
)	O
sendpacket	(*(char),long)->(void)
(	O
after_eaten	*(char)
,	O
this_packet	long
)	O
;	O
accum_used	long
-=	O
this_packet	long
+	O
1	int
;	O
after_eaten	*(char)
=	O
delim	*(char)
+	O
1	int
;	O
}	O
memmove	(*(void),*(void),long)->(*(void))
(	O
accum_buf	*(char)
,	O
after_eaten	*(char)
,	O
accum_used	long
)	O
;	O
if	O
(	O
accum_used	long
==	O
accum_avail	long
)	O
{	O
diag	(*(char))->(void)
(	O
"missing interpacket delimiter in output datastream"	*(char)
)	O
;	O
accum_used	long
=	O
0	int
;	O
}	O
}	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
const	O
char	O
*	O
const	O
*	O
const	O
argv_in	*(*(char))
)	O
{	O
const	O
char	O
*	O
arg	*(char)
;	O
const	O
char	O
*	O
const	O
*	O
argv_save	*(*(char))
;	O
const	O
char	O
*	O
const	O
*	O
argv_done	*(*(char))
;	O
struct	O
pollfd	struct(int,short,short)
pollfds	array(struct(int,short,short))
[	O
2	int
]	O
;	O
int	O
i	long
,	O
polltimeout	int
,	O
r	long
;	O
time_t	long
tnow	long
;	O
argv	*(*(char))
=	O
argv_in	*(*(char))
;	O
if	O
(	O
uname	(*(struct(array(char),array(char),array(char),array(char),array(char),array(char))))->(int)
(	O
&	O
uname_result	struct(array(char),array(char),array(char),array(char),array(char),array(char))
)	O
)	O
{	O
perror	(*(char))->(void)
(	O
PROGRAM	*(char)
": uname failed"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
16	int
)	O
;	O
}	O
sprintf	(*(char),*(char))->(int)
(	O
programid	array(char)
,	O
PROGRAM	*(char)
": %.*s"	*(char)
,	O
SYS_NMLN	O
,	O
uname_result	struct(array(char),array(char),array(char),array(char),array(char),array(char))
.	O
nodename	array(char)
)	O
;	O
opt_chars	*(char)
=	O
getarg_string	()->(*(char))
(	O
)	O
;	O
encdec_keys_write	int
=	O
!	O
!	O
strchr	(*(char),int)->(*(char))
(	O
opt_chars	*(char)
,	O
'w'	O
)	O
;	O
crypto_debug	int
=	O
!	O
!	O
strchr	(*(char),int)->(*(char))
(	O
opt_chars	*(char)
,	O
'K'	O
)	O
;	O
public_local_fd	int
=	O
getarg_ulong	()->(long)
(	O
)	O
;	O
private_in_fd	int
=	O
getarg_ulong	()->(long)
(	O
)	O
;	O
private_out_fd	int
=	O
getarg_ulong	()->(long)
(	O
)	O
;	O
encdec_keys_fd	int
=	O
getarg_ulong	()->(long)
(	O
)	O
;	O
mtu2	int
=	O
getarg_ulong	()->(long)
(	O
)	O
*	O
2	int
;	O
keepalive	int
=	O
getarg_ulong	()->(long)
(	O
)	O
;	O
timeout	int
=	O
getarg_ulong	()->(long)
(	O
)	O
;	O
reannounce	int
=	O
getarg_ulong	()->(long)
(	O
)	O
;	O
arg	*(char)
=	O
getarg_string	()->(*(char))
(	O
)	O
;	O
if	O
(	O
*	O
arg	*(char)
)	O
{	O
public_remote_specd	int
=	O
1	int
;	O
public_remote	struct(short,short,struct(int),array(char))
.	O
sin_family	short
=	O
AF_INET	O
;	O
arg_assert	O
(	O
inet_aton	(*(char),*(struct(int)))->(int)
(	O
arg	*(char)
,	O
&	O
public_remote	struct(short,short,struct(int),array(char))
.	O
sin_addr	struct(int)
)	O
)	O
;	O
public_remote	struct(short,short,struct(int),array(char))
.	O
sin_port	short
=	O
htons	(short)->(short)
(	O
getarg_ulong	()->(long)
(	O
)	O
)	O
;	O
}	O
if	O
(	O
crypto_debug	int
)	O
{	O
diag	(*(char))->(void)
(	O
"crypto debugging enabled!"	*(char)
)	O
;	O
setvbuf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),int,long)->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
0	int
,	O
_IOLBF	int
,	O
0	int
)	O
;	O
}	O
maxprefix	long
=	O
0	int
;	O
i	long
=	O
0	int
;	O
while	O
(	O
(	O
arg	*(char)
=	O
*	O
++	O
argv	*(*(char))
)	O
)	O
{	O
arg_assert	O
(	O
*	O
arg	*(char)
++	O
==	O
'|'	O
)	O
;	O
arg_assert	O
(	O
i	long
<=	O
MAXMECHS	int
)	O
;	O
mechs	array(*(struct(*(char),*((*(*`),*(int),*(int))->(void)),*((*(*`))->(void)),*((*(struct`),*(struct`))->(void)),*((*(struct`),*(struct`))->(*(char))))))
[	O
i	long
]	O
=	O
find_mech	(*(char))->(*(struct(*(char),*((*`,*`,*`)->(void)),*((*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(*`)))))
(	O
arg	*(char)
)	O
;	O
cdebug	(int,*(char))->(void)
(	O
i	long
,	O
"writer->reader setup"	*(char)
)	O
;	O
argv_save	*(*(char))
=	O
argv	*(*(char))
;	O
if	O
(	O
encdec_keys_write	int
)	O
mechs	array(*(struct(*(char),*((*(*`),*(int),*(int))->(void)),*((*(*`))->(void)),*((*(struct`),*(struct`))->(void)),*((*(struct`),*(struct`))->(*(char))))))
[	O
i	long
]	O
->	O
encsetup	*((*(*(struct)),*(int),*(int))->(void))
(	O
&	O
md_out	array(*(struct))
[	O
i	long
]	O
,	O
&	O
maxprefix	long
,	O
&	O
maxsuffix	long
)	O
;	O
else	O
mechs	array(*(struct(*(char),*((*(*`),*(int),*(int))->(void)),*((*(*`))->(void)),*((*(struct`),*(struct`))->(void)),*((*(struct`),*(struct`))->(*(char))))))
[	O
i	long
]	O
->	O
decsetup	*((*(*(struct)))->(void))
(	O
&	O
md_in	array(*(struct))
[	O
i	long
]	O
)	O
;	O
argv_done	*(*(char))
=	O
argv	*(*(char))
;	O
argv	*(*(char))
=	O
argv_save	*(*(char))
;	O
cdebug	(int,*(char))->(void)
(	O
i	long
,	O
"reader->writer setup"	*(char)
)	O
;	O
if	O
(	O
encdec_keys_write	int
)	O
mechs	array(*(struct(*(char),*((*(*`),*(int),*(int))->(void)),*((*(*`))->(void)),*((*(struct`),*(struct`))->(void)),*((*(struct`),*(struct`))->(*(char))))))
[	O
i	long
]	O
->	O
decsetup	*((*(*(struct)))->(void))
(	O
&	O
md_in	array(*(struct))
[	O
i	long
]	O
)	O
;	O
else	O
mechs	array(*(struct(*(char),*((*(*`),*(int),*(int))->(void)),*((*(*`))->(void)),*((*(struct`),*(struct`))->(void)),*((*(struct`),*(struct`))->(*(char))))))
[	O
i	long
]	O
->	O
encsetup	*((*(*(struct)),*(int),*(int))->(void))
(	O
&	O
md_out	array(*(struct))
[	O
i	long
]	O
,	O
&	O
maxprefix	long
,	O
&	O
maxsuffix	long
)	O
;	O
assert	O
(	O
argv	*(*(char))
==	O
argv_done	*(*(char))
)	O
;	O
i	long
++	O
;	O
}	O
n_mechs	int
=	O
i	long
;	O
if	O
(	O
maxprefix	long
<	O
1	int
)	O
maxprefix	long
=	O
1	int
;	O
if	O
(	O
maxsuffix	long
<	O
1	int
)	O
maxsuffix	long
=	O
1	int
;	O
buffer_size	long
=	O
mtu2	int
+	O
maxprefix	long
+	O
maxsuffix	long
;	O
buf_in	struct(*(char),*(char),long)
.	O
base	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
buffer_size	long
)	O
;	O
buf_out	struct(*(char),*(char),long)
.	O
base	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
buffer_size	long
)	O
;	O
accum_avail	long
=	O
mtu2	int
+	O
1	int
;	O
accum_buf	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
accum_avail	long
)	O
;	O
alarm	(int)->(int)
(	O
timeout	int
)	O
;	O
pollfds	array(struct(int,short,short))
[	O
0	int
]	O
.	O
fd	int
=	O
public_local_fd	int
;	O
pollfds	array(struct(int,short,short))
[	O
0	int
]	O
.	O
events	short
=	O
POLLIN	int
;	O
pollfds	array(struct(int,short,short))
[	O
1	int
]	O
.	O
fd	int
=	O
private_out_fd	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
pollfds	array(struct(int,short,short))
[	O
1	int
]	O
.	O
events	short
=	O
public_remote_specd	int
?	O
POLLIN	int
:	O
0	int
;	O
pollfds	array(struct(int,short,short))
[	O
0	int
]	O
.	O
revents	short
=	O
0	int
;	O
pollfds	array(struct(int,short,short))
[	O
1	int
]	O
.	O
revents	short
=	O
0	int
;	O
if	O
(	O
keepalive	int
)	O
{	O
tnow	long
=	O
now	()->(long)
(	O
)	O
;	O
if	O
(	O
tnow	long
>=	O
nextsendka	long
&&	O
public_remote_specd	int
)	O
sendpacket	(*(char),long)->(void)
(	O
"\300"	*(char)
,	O
1	int
)	O
;	O
polltimeout	int
=	O
(	O
nextsendka	long
-	O
tnow	long
)	O
*	O
1000	int
;	O
}	O
else	O
{	O
polltimeout	int
=	O
-	O
1	int
;	O
}	O
r	long
=	O
poll	(*(struct(int,short,short)),long,int)->(int)
(	O
pollfds	array(struct(int,short,short))
,	O
2	int
,	O
polltimeout	int
)	O
;	O
if	O
(	O
!	O
r	long
)	O
continue	O
;	O
if	O
(	O
r	long
==	O
-	O
1	int
&&	O
errno	O
==	O
EINTR	int
)	O
continue	O
;	O
if	O
(	O
r	long
==	O
-	O
1	int
)	O
sysfail	(*(char))->(void)
(	O
"poll"	*(char)
)	O
;	O
if	O
(	O
pollfds	array(struct(int,short,short))
[	O
0	int
]	O
.	O
revents	short
&	O
(	O
POLLIN	int
|	O
POLLERR	int
)	O
)	O
inbound	()->(void)
(	O
)	O
;	O
if	O
(	O
pollfds	array(struct(int,short,short))
[	O
1	int
]	O
.	O
revents	short
&	O
(	O
POLLIN	int
|	O
POLLERR	int
)	O
)	O
outbound	()->(void)
(	O
)	O
;	O
}	O
}	O
