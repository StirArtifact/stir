static	O
int	O
word_sel	(int,*(struct(*(char),*(void),*(struct(*`,*`,*`,*`,int,*`)),int)),*(char))->(int)
(	O
int	O
cmd	int
,	O
dico_key_t	*(struct)
key	*(char)
,	O
const	O
char	O
*	O
dict_word	*(char)
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
char	O
const	O
*	O
key_word	*(char)
=	O
key	*(char)
->	O
word	*(char)
;	O
struct	O
dico_tokbuf	struct(*(char),long,long,*(*(char)),int,int)
tb	struct(*(char),long,long,*(*(char)),int,int)
;	O
int	O
i	int
;	O
switch	O
(	O
cmd	int
)	O
{	O
case	O
DICO_SELECT_BEGIN	int
:	O
break	O
;	O
case	O
DICO_SELECT_RUN	int
:	O
dico_tokenize_begin	(*(struct(*(char),long,long,*(*(char)),int,int)))->(void)
(	O
&	O
tb	struct(*(char),long,long,*(*(char)),int,int)
)	O
;	O
if	O
(	O
dico_tokenize_string	(*(struct(*(char),long,long,*(*(char)),int,int)),*(char))->(int)
(	O
&	O
tb	struct(*(char),long,long,*(*(char)),int,int)
,	O
(	O
char	O
*	O
)	O
dict_word	*(char)
)	O
)	O
{	O
dico_tokenize_end	(*(struct(*(char),long,long,*(*(char)),int,int)))->(void)
(	O
&	O
tb	struct(*(char),long,long,*(*(char)),int,int)
)	O
;	O
return	O
0	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
tb	struct(*(char),long,long,*(*(char)),int,int)
.	O
tb_tokc	int
;	O
i	int
++	O
)	O
if	O
(	O
utf8_strcasecmp	(*(char),*(char))->(int)
(	O
tb	struct(*(char),long,long,*(*(char)),int,int)
.	O
tb_tokv	*(*(char))
[	O
i	int
]	O
,	O
(	O
char	O
*	O
)	O
key_word	*(char)
)	O
==	O
0	int
)	O
{	O
rc	int
=	O
1	int
;	O
break	O
;	O
}	O
dico_tokenize_end	(*(struct(*(char),long,long,*(*(char)),int,int)))->(void)
(	O
&	O
tb	struct(*(char),long,long,*(*(char)),int,int)
)	O
;	O
break	O
;	O
case	O
DICO_SELECT_END	int
:	O
break	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
first_sel	(int,*(struct(*(char),*(void),*(struct(*`,*`,*`,*`,int,*`)),int)),*(char))->(int)
(	O
int	O
cmd	int
,	O
dico_key_t	*(struct)
key	*(char)
,	O
const	O
char	O
*	O
dict_word	*(char)
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
char	O
const	O
*	O
key_word	*(char)
=	O
key	*(char)
->	O
word	*(char)
;	O
struct	O
dico_tokbuf	struct(*(char),long,long,*(*(char)),int,int)
tb	struct(*(char),long,long,*(*(char)),int,int)
;	O
switch	O
(	O
cmd	int
)	O
{	O
case	O
DICO_SELECT_BEGIN	int
:	O
break	O
;	O
case	O
DICO_SELECT_RUN	int
:	O
dico_tokenize_begin	(*(struct(*(char),long,long,*(*(char)),int,int)))->(void)
(	O
&	O
tb	struct(*(char),long,long,*(*(char)),int,int)
)	O
;	O
if	O
(	O
dico_tokenize_string	(*(struct(*(char),long,long,*(*(char)),int,int)),*(char))->(int)
(	O
&	O
tb	struct(*(char),long,long,*(*(char)),int,int)
,	O
(	O
char	O
*	O
)	O
dict_word	*(char)
)	O
==	O
0	int
&&	O
tb	struct(*(char),long,long,*(*(char)),int,int)
.	O
tb_tokc	int
)	O
rc	int
=	O
utf8_strcasecmp	(*(char),*(char))->(int)
(	O
tb	struct(*(char),long,long,*(*(char)),int,int)
.	O
tb_tokv	*(*(char))
[	O
0	int
]	O
,	O
(	O
char	O
*	O
)	O
key_word	*(char)
)	O
==	O
0	int
;	O
dico_tokenize_end	(*(struct(*(char),long,long,*(*(char)),int,int)))->(void)
(	O
&	O
tb	struct(*(char),long,long,*(*(char)),int,int)
)	O
;	O
break	O
;	O
case	O
DICO_SELECT_END	int
:	O
break	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
last_sel	(int,*(struct(*(char),*(void),*(struct(*`,*`,*`,*`,int,*`)),int)),*(char))->(int)
(	O
int	O
cmd	int
,	O
dico_key_t	*(struct)
key	*(char)
,	O
const	O
char	O
*	O
dict_word	*(char)
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
char	O
const	O
*	O
key_word	*(char)
=	O
key	*(char)
->	O
word	*(char)
;	O
struct	O
dico_tokbuf	struct(*(char),long,long,*(*(char)),int,int)
tb	struct(*(char),long,long,*(*(char)),int,int)
;	O
switch	O
(	O
cmd	int
)	O
{	O
case	O
DICO_SELECT_BEGIN	int
:	O
break	O
;	O
case	O
DICO_SELECT_RUN	int
:	O
dico_tokenize_begin	(*(struct(*(char),long,long,*(*(char)),int,int)))->(void)
(	O
&	O
tb	struct(*(char),long,long,*(*(char)),int,int)
)	O
;	O
if	O
(	O
dico_tokenize_string	(*(struct(*(char),long,long,*(*(char)),int,int)),*(char))->(int)
(	O
&	O
tb	struct(*(char),long,long,*(*(char)),int,int)
,	O
(	O
char	O
*	O
)	O
dict_word	*(char)
)	O
==	O
0	int
&&	O
tb	struct(*(char),long,long,*(*(char)),int,int)
.	O
tb_tokc	int
)	O
rc	int
=	O
utf8_strcasecmp	(*(char),*(char))->(int)
(	O
tb	struct(*(char),long,long,*(*(char)),int,int)
.	O
tb_tokv	*(*(char))
[	O
tb	struct(*(char),long,long,*(*(char)),int,int)
.	O
tb_tokc	int
-	O
1	int
]	O
,	O
(	O
char	O
*	O
)	O
key_word	*(char)
)	O
==	O
0	int
;	O
dico_tokenize_end	(*(struct(*(char),long,long,*(*(char)),int,int)))->(void)
(	O
&	O
tb	struct(*(char),long,long,*(*(char)),int,int)
)	O
;	O
break	O
;	O
case	O
DICO_SELECT_END	int
:	O
break	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
struct	O
dico_strategy	struct(*(char),*(char),*((int,*(struct),*(char))->(int)),*(void),int,*(struct))
strats	array(struct(*(char),*(char),*((int,*(struct(*`,*`,*`,int)),*(char))->(int)),*(void),int,*(struct)))
[	O
]	O
=	O
{	O
{	O
"word"	*(char)
,	O
"Match a word anywhere in the headword"	*(char)
,	O
word_sel	(int,*(struct(*(char),*(void),*(struct(*`,*`,*`,*`,int,*`)),int)),*(char))->(int)
}	O
,	O
{	O
"first"	*(char)
,	O
"Match the first word within headwords"	*(char)
,	O
first_sel	(int,*(struct(*(char),*(void),*(struct(*`,*`,*`,*`,int,*`)),int)),*(char))->(int)
}	O
,	O
{	O
"last"	*(char)
,	O
"Match the last word within headwords"	*(char)
,	O
last_sel	(int,*(struct(*(char),*(void),*(struct(*`,*`,*`,*`,int,*`)),int)),*(char))->(int)
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
struct	O
dico_strategy	struct(*(char),*(char),*((int,*(struct),*(char))->(int)),*(void),int,*(struct))
*	O
findstrat	(*(char))->(*(struct(*(char),*(char),*((int,*`,*`)->(int)),*(void),int,*(struct))))
(	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
struct	O
dico_strategy	struct(*(char),*(char),*((int,*(struct),*(char))->(int)),*(void),int,*(struct))
*	O
sp	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
;	O
for	O
(	O
sp	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
=	O
strats	array(struct(*(char),*(char),*((int,*(struct(*`,*`,*`,int)),*(char))->(int)),*(void),int,*(struct)))
;	O
sp	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
->	O
name	*(char)
;	O
sp	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
++	O
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
sp	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
->	O
name	*(char)
,	O
name	*(char)
)	O
==	O
0	int
)	O
return	O
sp	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
;	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
_	O
(	O
"unknown strategy: %s"	*(char)
)	O
,	O
name	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
static	O
int	O
word_init	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
struct	O
dico_strategy	struct(*(char),*(char),*((int,*(struct),*(char))->(int)),*(void),int,*(struct))
*	O
sp	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
;	O
if	O
(	O
argc	int
==	O
1	int
)	O
{	O
for	O
(	O
sp	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
=	O
strats	array(struct(*(char),*(char),*((int,*(struct(*`,*`,*`,int)),*(char))->(int)),*(void),int,*(struct)))
;	O
sp	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
->	O
name	*(char)
;	O
sp	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
++	O
)	O
dico_strategy_add	(*(struct(*(char),*(char),*((int,*`,*`)->(int)),*(void),int,*(struct))))->(int)
(	O
sp	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
)	O
;	O
}	O
else	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
if	O
(	O
(	O
sp	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
=	O
findstrat	(*(char))->(*(struct(*(char),*(char),*((int,*`,*`)->(int)),*(void),int,*(struct))))
(	O
argv	*(*(char))
[	O
i	int
]	O
)	O
)	O
)	O
dico_strategy_add	(*(struct(*(char),*(char),*((int,*`,*`)->(int)),*(void),int,*(struct))))->(int)
(	O
sp	*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct)))
)	O
;	O
}	O
return	O
0	int
;	O
}	O
struct	O
dico_database_module	struct(int,int,*((int,*(*(char)))->(int)),*((*(char),int,*(*(char)))->(*(struct))),*((*(struct))->(int)),*((*(struct))->(int)),*((*(struct))->(int)),*((*(struct))->(*(char))),*((*(struct))->(*(char))),*((*(struct),array(*(struct)))->(int)),*((*(struct),*(struct),*(char))->(*(struct))),*((*(struct),*(char))->(*(struct))),*((*(struct),long,*(struct))->(int)),*((*(struct))->(long)),*((*(struct))->(long)),*((*(struct))->(void)),*((*(struct),*(struct))->(int)),*((int,*(*(char)))->(int)),*((*(struct))->(*(char))),*((*(char),int,*(*(char)),*(void))->(*(struct))),*((*(struct))->(int)),*((*(struct),long)->(*(struct))))
DICO_EXPORT	O
(	O
word	*(char)
,	O
module	O
)	O
=	O
{	O
DICO_MODULE_VERSION	int
,	O
DICO_CAPA_NODB	int
,	O
word_init	(int,*(*(char)))->(int)
,	O
}	O
;	O
