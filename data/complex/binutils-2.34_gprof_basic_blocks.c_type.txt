static	O
int	O
cmp_bb	O
(	O
const	O
PTR	O
,	O
const	O
PTR	O
)	O
;	O
static	O
int	O
cmp_ncalls	O
(	O
const	O
PTR	O
,	O
const	O
PTR	O
)	O
;	O
static	O
void	O
fskip_string	O
(	O
FILE	struct
*	O
)	O
;	O
static	O
void	O
annotate_with_count	O
(	O
char	O
*	O
,	O
unsigned	O
int	O
,	O
int	O
,	O
PTR	O
)	O
;	O
bfd_boolean	int
bb_annotate_all_lines	O
=	O
FALSE	O
;	O
unsigned	O
long	O
bb_min_calls	O
=	O
1	int
;	O
int	O
bb_table_length	O
=	O
10	int
;	O
static	O
long	O
num_executable_lines	O
;	O
static	O
long	O
num_lines_executed	O
;	O
static	O
int	O
cmp_bb	O
(	O
const	O
PTR	O
lp	O
,	O
const	O
PTR	O
rp	O
)	O
{	O
int	O
r	O
;	O
const	O
Sym	O
*	O
left	O
=	O
*	O
(	O
const	O
Sym	O
*	O
*	O
)	O
lp	O
;	O
const	O
Sym	O
*	O
right	O
=	O
*	O
(	O
const	O
Sym	O
*	O
*	O
)	O
rp	O
;	O
if	O
(	O
left	O
->	O
file	*(void)
&&	O
right	O
->	O
file	*(void)
)	O
{	O
r	O
=	O
filename_cmp	(*(char),*(char))->(int)
(	O
left	O
->	O
file	*(void)
->	O
name	*(char)
,	O
right	O
->	O
file	*(void)
->	O
name	*(char)
)	O
;	O
if	O
(	O
r	O
)	O
return	O
r	O
;	O
if	O
(	O
left	O
->	O
line_num	O
!=	O
right	O
->	O
line_num	O
)	O
return	O
left	O
->	O
line_num	O
-	O
right	O
->	O
line_num	O
;	O
}	O
if	O
(	O
left	O
->	O
addr	*(void)
<	O
right	O
->	O
addr	*(void)
)	O
return	O
-	O
1	int
;	O
else	O
if	O
(	O
left	O
->	O
addr	*(void)
>	O
right	O
->	O
addr	*(void)
)	O
return	O
1	int
;	O
else	O
return	O
0	int
;	O
}	O
static	O
int	O
cmp_ncalls	O
(	O
const	O
PTR	O
lp	O
,	O
const	O
PTR	O
rp	O
)	O
{	O
const	O
Sym	O
*	O
left	O
=	O
*	O
(	O
const	O
Sym	O
*	O
*	O
)	O
lp	O
;	O
const	O
Sym	O
*	O
right	O
=	O
*	O
(	O
const	O
Sym	O
*	O
*	O
)	O
rp	O
;	O
if	O
(	O
!	O
left	O
)	O
return	O
1	int
;	O
else	O
if	O
(	O
!	O
right	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
left	O
->	O
ncalls	O
<	O
right	O
->	O
ncalls	O
)	O
return	O
1	int
;	O
else	O
if	O
(	O
left	O
->	O
ncalls	O
>	O
right	O
->	O
ncalls	O
)	O
return	O
-	O
1	int
;	O
return	O
left	O
->	O
line_num	O
-	O
right	O
->	O
line_num	O
;	O
}	O
static	O
void	O
fskip_string	O
(	O
FILE	struct
*	O
fp	O
)	O
{	O
int	O
ch	O
;	O
while	O
(	O
(	O
ch	O
=	O
fgetc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	O
)	O
)	O
!=	O
EOF	O
)	O
{	O
if	O
(	O
ch	O
==	O
'\0'	O
)	O
break	O
;	O
}	O
}	O
void	O
bb_read_rec	O
(	O
FILE	struct
*	O
ifp	O
,	O
const	O
char	O
*	O
filename	*(char)
)	O
{	O
unsigned	O
int	O
nblocks	O
,	O
b	*(char)
;	O
bfd_vma	long
addr	*(void)
,	O
ncalls	O
;	O
Sym	O
*	O
sym	*(struct)
;	O
if	O
(	O
gmon_io_read_32	O
(	O
ifp	O
,	O
&	O
nblocks	O
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"%s: %s: unexpected end of file\n"	*(char)
)	O
,	O
whoami	O
,	O
filename	*(char)
)	O
;	O
done	O
(	O
1	int
)	O
;	O
}	O
nblocks	O
=	O
bfd_get_32	O
(	O
core_bfd	*(struct(*(char),*(struct),*(void),*(struct),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),long,long,struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,long,*(*(struct(*`,*`,long,int,*`,union`))),int,int,*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*(char),*(char),int,int,*((*`,*`)->(*`)),*((*`,*`)->(int)),*((long,int,int)->(*`)),*(struct`),int)),*(void),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),union(*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(struct)),union(*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(void)),*(void),*(void),*(struct(long,array(char)))))
,	O
(	O
bfd_byte	char
*	O
)	O
&	O
nblocks	O
)	O
;	O
if	O
(	O
gmon_file_version	O
==	O
0	int
)	O
fskip_string	O
(	O
ifp	O
)	O
;	O
for	O
(	O
b	*(char)
=	O
0	int
;	O
b	*(char)
<	O
nblocks	O
;	O
++	O
b	*(char)
)	O
{	O
if	O
(	O
gmon_file_version	O
==	O
0	int
)	O
{	O
int	O
line_num	O
;	O
if	O
(	O
(	O
fread	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
&	O
ncalls	O
,	O
sizeof	O
(	O
ncalls	O
)	O
,	O
1	int
,	O
ifp	O
)	O
!=	O
1	int
)	O
||	O
(	O
fread	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
&	O
addr	*(void)
,	O
sizeof	O
(	O
addr	*(void)
)	O
,	O
1	int
,	O
ifp	O
)	O
!=	O
1	int
)	O
||	O
(	O
fskip_string	O
(	O
ifp	O
)	O
,	O
FALSE	O
)	O
||	O
(	O
fskip_string	O
(	O
ifp	O
)	O
,	O
FALSE	O
)	O
||	O
(	O
fread	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
&	O
line_num	O
,	O
sizeof	O
(	O
line_num	O
)	O
,	O
1	int
,	O
ifp	O
)	O
!=	O
1	int
)	O
)	O
{	O
perror	(*(char))->(void)
(	O
filename	*(char)
)	O
;	O
done	O
(	O
1	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
gmon_io_read_vma	O
(	O
ifp	O
,	O
&	O
addr	*(void)
)	O
||	O
gmon_io_read_vma	O
(	O
ifp	O
,	O
&	O
ncalls	O
)	O
)	O
{	O
perror	(*(char))->(void)
(	O
filename	*(char)
)	O
;	O
done	O
(	O
1	int
)	O
;	O
}	O
if	O
(	O
line_granularity	O
)	O
{	O
sym	*(struct)
=	O
sym_lookup	O
(	O
&	O
symtab	O
,	O
addr	*(void)
)	O
;	O
if	O
(	O
sym	*(struct)
)	O
{	O
int	O
i	*(struct)
;	O
DBG	O
(	O
BBDEBUG	O
,	O
printf	(*(char))->(int)
(	O
"[bb_read_rec] 0x%lx->0x%lx (%s:%d) cnt=%lu\n"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
addr	*(void)
,	O
(	O
unsigned	O
long	O
)	O
sym	*(struct)
->	O
addr	*(void)
,	O
sym	*(struct)
->	O
name	*(char)
,	O
sym	*(struct)
->	O
line_num	O
,	O
(	O
unsigned	O
long	O
)	O
ncalls	O
)	O
)	O
;	O
for	O
(	O
i	*(struct)
=	O
0	int
;	O
i	*(struct)
<	O
NBBS	O
;	O
i	*(struct)
++	O
)	O
{	O
if	O
(	O
!	O
sym	*(struct)
->	O
bb_addr	O
[	O
i	*(struct)
]	O
||	O
sym	*(struct)
->	O
bb_addr	O
[	O
i	*(struct)
]	O
==	O
addr	*(void)
)	O
{	O
sym	*(struct)
->	O
bb_addr	O
[	O
i	*(struct)
]	O
=	O
addr	*(void)
;	O
sym	*(struct)
->	O
bb_calls	O
[	O
i	*(struct)
]	O
+=	O
ncalls	O
;	O
break	O
;	O
}	O
}	O
}	O
}	O
else	O
{	O
static	O
bfd_boolean	int
user_warned	O
=	O
FALSE	O
;	O
if	O
(	O
!	O
user_warned	O
)	O
{	O
user_warned	O
=	O
TRUE	int
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"%s: warning: ignoring basic-block exec counts (use -l or --line)\n"	*(char)
)	O
,	O
whoami	O
)	O
;	O
}	O
}	O
}	O
return	O
;	O
}	O
void	O
bb_write_blocks	O
(	O
FILE	struct
*	O
ofp	O
,	O
const	O
char	O
*	O
filename	*(char)
)	O
{	O
unsigned	O
int	O
nblocks	O
=	O
0	int
;	O
Sym	O
*	O
sym	*(struct)
;	O
int	O
i	*(struct)
;	O
for	O
(	O
sym	*(struct)
=	O
symtab	O
.	O
base	int
;	O
sym	*(struct)
<	O
symtab	O
.	O
limit	O
;	O
++	O
sym	*(struct)
)	O
{	O
for	O
(	O
i	*(struct)
=	O
0	int
;	O
i	*(struct)
<	O
NBBS	O
&&	O
sym	*(struct)
->	O
bb_addr	O
[	O
i	*(struct)
]	O
;	O
i	*(struct)
++	O
)	O
;	O
nblocks	O
+=	O
i	*(struct)
;	O
}	O
if	O
(	O
gmon_io_write_8	O
(	O
ofp	O
,	O
GMON_TAG_BB_COUNT	O
)	O
||	O
gmon_io_write_32	O
(	O
ofp	O
,	O
nblocks	O
)	O
)	O
{	O
perror	(*(char))->(void)
(	O
filename	*(char)
)	O
;	O
done	O
(	O
1	int
)	O
;	O
}	O
for	O
(	O
sym	*(struct)
=	O
symtab	O
.	O
base	int
;	O
sym	*(struct)
<	O
symtab	O
.	O
limit	O
;	O
++	O
sym	*(struct)
)	O
{	O
for	O
(	O
i	*(struct)
=	O
0	int
;	O
i	*(struct)
<	O
NBBS	O
&&	O
sym	*(struct)
->	O
bb_addr	O
[	O
i	*(struct)
]	O
;	O
i	*(struct)
++	O
)	O
{	O
if	O
(	O
gmon_io_write_vma	O
(	O
ofp	O
,	O
sym	*(struct)
->	O
bb_addr	O
[	O
i	*(struct)
]	O
)	O
||	O
gmon_io_write_vma	O
(	O
ofp	O
,	O
(	O
bfd_vma	long
)	O
sym	*(struct)
->	O
bb_calls	O
[	O
i	*(struct)
]	O
)	O
)	O
{	O
perror	(*(char))->(void)
(	O
filename	*(char)
)	O
;	O
done	O
(	O
1	int
)	O
;	O
}	O
}	O
}	O
}	O
void	O
print_exec_counts	O
(	O
void	O
)	O
{	O
Sym	O
*	O
*	O
sorted_bbs	O
,	O
*	O
sym	*(struct)
;	O
unsigned	O
int	O
i	*(struct)
,	O
j	O
,	O
len	long
;	O
if	O
(	O
first_output	O
)	O
first_output	O
=	O
FALSE	O
;	O
else	O
printf	(*(char))->(int)
(	O
"\f\n"	*(char)
)	O
;	O
sorted_bbs	O
=	O
(	O
Sym	O
*	O
*	O
)	O
xmalloc	O
(	O
symtab	O
.	O
len	long
*	O
sizeof	O
(	O
sorted_bbs	O
[	O
0	int
]	O
)	O
)	O
;	O
len	long
=	O
0	int
;	O
for	O
(	O
sym	*(struct)
=	O
symtab	O
.	O
base	int
;	O
sym	*(struct)
<	O
symtab	O
.	O
limit	O
;	O
++	O
sym	*(struct)
)	O
{	O
if	O
(	O
sym_lookup	O
(	O
&	O
syms	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(char),long,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),union(*(void),long))))
[	O
INCL_EXEC	O
]	O
,	O
sym	*(struct)
->	O
addr	*(void)
)	O
||	O
(	O
syms	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(char),long,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),union(*(void),long))))
[	O
INCL_EXEC	O
]	O
.	O
len	long
==	O
0	int
&&	O
!	O
sym_lookup	O
(	O
&	O
syms	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(char),long,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),union(*(void),long))))
[	O
EXCL_EXEC	O
]	O
,	O
sym	*(struct)
->	O
addr	*(void)
)	O
)	O
)	O
{	O
sorted_bbs	O
[	O
len	long
++	O
]	O
=	O
sym	*(struct)
;	O
}	O
}	O
qsort	(*(void),long,long,*((*(void),*(void))->(int)))->(void)
(	O
sorted_bbs	O
,	O
len	long
,	O
sizeof	O
(	O
sorted_bbs	O
[	O
0	int
]	O
)	O
,	O
cmp_bb	O
)	O
;	O
for	O
(	O
i	*(struct)
=	O
0	int
;	O
i	*(struct)
<	O
len	long
;	O
++	O
i	*(struct)
)	O
{	O
sym	*(struct)
=	O
sorted_bbs	O
[	O
i	*(struct)
]	O
;	O
if	O
(	O
sym	*(struct)
->	O
ncalls	O
>	O
0	int
||	O
!	O
ignore_zeros	O
)	O
{	O
printf	(*(char))->(int)
(	O
_	O
(	O
"%s:%d: (%s:0x%lx) %lu executions\n"	*(char)
)	O
,	O
sym	*(struct)
->	O
file	*(void)
?	O
sym	*(struct)
->	O
file	*(void)
->	O
name	*(char)
:	O
_	O
(	O
"<unknown>"	*(char)
)	O
,	O
sym	*(struct)
->	O
line_num	O
,	O
sym	*(struct)
->	O
name	*(char)
,	O
(	O
unsigned	O
long	O
)	O
sym	*(struct)
->	O
addr	*(void)
,	O
sym	*(struct)
->	O
ncalls	O
)	O
;	O
}	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
NBBS	O
&&	O
sym	*(struct)
->	O
bb_addr	O
[	O
j	O
]	O
;	O
j	O
++	O
)	O
{	O
if	O
(	O
sym	*(struct)
->	O
bb_calls	O
[	O
j	O
]	O
>	O
0	int
||	O
!	O
ignore_zeros	O
)	O
{	O
printf	(*(char))->(int)
(	O
_	O
(	O
"%s:%d: (%s:0x%lx) %lu executions\n"	*(char)
)	O
,	O
sym	*(struct)
->	O
file	*(void)
?	O
sym	*(struct)
->	O
file	*(void)
->	O
name	*(char)
:	O
_	O
(	O
"<unknown>"	*(char)
)	O
,	O
sym	*(struct)
->	O
line_num	O
,	O
sym	*(struct)
->	O
name	*(char)
,	O
(	O
unsigned	O
long	O
)	O
sym	*(struct)
->	O
bb_addr	O
[	O
j	O
]	O
,	O
sym	*(struct)
->	O
bb_calls	O
[	O
j	O
]	O
)	O
;	O
}	O
}	O
}	O
free	(*(void))->(void)
(	O
sorted_bbs	O
)	O
;	O
}	O
static	O
void	O
annotate_with_count	O
(	O
char	O
*	O
buf	*(void)
,	O
unsigned	O
int	O
width	O
,	O
int	O
line_num	O
,	O
PTR	O
arg	*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*(char),*(char),int,int,*((*(struct`),*(struct`))->(*(struct`))),*((*(struct`),*(char))->(int)),*((long,int,int)->(*(void))),*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*(char),*(char),int,int,*((*`,*`)->(*`)),*((*`,*`)->(int)),*((long,int,int)->(*`)),*(struct`),int)),int))
)	O
{	O
Source_File	O
*	O
sf	O
=	O
(	O
Source_File	O
*	O
)	O
arg	*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*(char),*(char),int,int,*((*(struct`),*(struct`))->(*(struct`))),*((*(struct`),*(char))->(int)),*((long,int,int)->(*(void))),*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*(char),*(char),int,int,*((*`,*`)->(*`)),*((*`,*`)->(int)),*((long,int,int)->(*`)),*(struct`),int)),int))
;	O
Sym	O
*	O
b	*(char)
;	O
unsigned	O
int	O
i	*(struct)
;	O
static	O
unsigned	O
long	O
last_count	O
;	O
unsigned	O
long	O
last_print	O
=	O
(	O
unsigned	O
long	O
)	O
-	O
1	int
;	O
b	*(char)
=	O
NULL	O
;	O
if	O
(	O
line_num	O
<=	O
sf	O
->	O
num_lines	O
)	O
b	*(char)
=	O
(	O
Sym	O
*	O
)	O
sf	O
->	O
line	O
[	O
line_num	O
-	O
1	int
]	O
;	O
if	O
(	O
!	O
b	*(char)
)	O
{	O
for	O
(	O
i	*(struct)
=	O
0	int
;	O
i	*(struct)
<	O
width	O
;	O
i	*(struct)
++	O
)	O
buf	*(void)
[	O
i	*(struct)
]	O
=	O
' '	O
;	O
buf	*(void)
[	O
width	O
]	O
=	O
'\0'	O
;	O
}	O
else	O
{	O
char	O
tmpbuf	O
[	O
NBBS	O
*	O
30	int
]	O
;	O
char	O
*	O
p	*(void)
;	O
unsigned	O
long	O
ncalls	O
;	O
int	O
ncalls_set	O
;	O
unsigned	O
int	O
len	long
;	O
++	O
num_executable_lines	O
;	O
p	*(void)
=	O
tmpbuf	O
;	O
*	O
p	*(void)
=	O
'\0'	O
;	O
ncalls	O
=	O
0	int
;	O
ncalls_set	O
=	O
0	int
;	O
if	O
(	O
b	*(char)
->	O
is_func	O
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
p	*(void)
,	O
"%lu"	*(char)
,	O
b	*(char)
->	O
ncalls	O
)	O
;	O
p	*(void)
+=	O
strlen	(*(char))->(long)
(	O
p	*(void)
)	O
;	O
last_count	O
=	O
b	*(char)
->	O
ncalls	O
;	O
last_print	O
=	O
last_count	O
;	O
ncalls	O
=	O
b	*(char)
->	O
ncalls	O
;	O
ncalls_set	O
=	O
1	int
;	O
}	O
else	O
if	O
(	O
bb_annotate_all_lines	O
&&	O
b	*(char)
->	O
bb_addr	O
[	O
0	int
]	O
&&	O
b	*(char)
->	O
bb_addr	O
[	O
0	int
]	O
>	O
b	*(char)
->	O
addr	*(void)
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
p	*(void)
,	O
"%lu"	*(char)
,	O
last_count	O
)	O
;	O
p	*(void)
+=	O
strlen	(*(char))->(long)
(	O
p	*(void)
)	O
;	O
last_print	O
=	O
last_count	O
;	O
ncalls	O
=	O
last_count	O
;	O
ncalls_set	O
=	O
1	int
;	O
}	O
for	O
(	O
i	*(struct)
=	O
0	int
;	O
i	*(struct)
<	O
NBBS	O
&&	O
b	*(char)
->	O
bb_addr	O
[	O
i	*(struct)
]	O
;	O
i	*(struct)
++	O
)	O
{	O
last_count	O
=	O
b	*(char)
->	O
bb_calls	O
[	O
i	*(struct)
]	O
;	O
if	O
(	O
!	O
ncalls_set	O
)	O
{	O
ncalls	O
=	O
0	int
;	O
ncalls_set	O
=	O
1	int
;	O
}	O
ncalls	O
+=	O
last_count	O
;	O
if	O
(	O
bb_annotate_all_lines	O
&&	O
last_count	O
==	O
last_print	O
)	O
continue	O
;	O
if	O
(	O
p	*(void)
>	O
tmpbuf	O
)	O
*	O
p	*(void)
++	O
=	O
','	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
p	*(void)
,	O
"%lu"	*(char)
,	O
last_count	O
)	O
;	O
p	*(void)
+=	O
strlen	(*(char))->(long)
(	O
p	*(void)
)	O
;	O
last_print	O
=	O
last_count	O
;	O
}	O
if	O
(	O
bb_annotate_all_lines	O
&&	O
p	*(void)
==	O
tmpbuf	O
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
p	*(void)
,	O
"%lu"	*(char)
,	O
last_count	O
)	O
;	O
p	*(void)
+=	O
strlen	(*(char))->(long)
(	O
p	*(void)
)	O
;	O
ncalls	O
=	O
last_count	O
;	O
ncalls_set	O
=	O
1	int
;	O
}	O
if	O
(	O
!	O
ncalls_set	O
)	O
{	O
unsigned	O
int	O
c	O
;	O
for	O
(	O
c	O
=	O
0	int
;	O
c	O
<	O
width	O
;	O
c	O
++	O
)	O
buf	*(void)
[	O
c	O
]	O
=	O
' '	O
;	O
buf	*(void)
[	O
width	O
]	O
=	O
'\0'	O
;	O
return	O
;	O
}	O
++	O
num_lines_executed	O
;	O
if	O
(	O
ncalls	O
<	O
bb_min_calls	O
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
tmpbuf	O
,	O
"#####"	*(char)
)	O
;	O
p	*(void)
=	O
tmpbuf	O
+	O
5	int
;	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
p	*(void)
,	O
" -> "	*(char)
)	O
;	O
p	*(void)
+=	O
4	int
;	O
len	long
=	O
p	*(void)
-	O
tmpbuf	O
;	O
if	O
(	O
len	long
>=	O
width	O
)	O
{	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
buf	*(void)
,	O
tmpbuf	O
,	O
width	O
)	O
;	O
buf	*(void)
[	O
width	O
]	O
=	O
'\0'	O
;	O
}	O
else	O
{	O
unsigned	O
int	O
c	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
buf	*(void)
+	O
width	O
-	O
len	long
,	O
tmpbuf	O
)	O
;	O
for	O
(	O
c	O
=	O
0	int
;	O
c	O
<	O
width	O
-	O
len	long
;	O
++	O
c	O
)	O
buf	*(void)
[	O
c	O
]	O
=	O
' '	O
;	O
}	O
}	O
}	O
void	O
print_annotated_source	O
(	O
void	O
)	O
{	O
Sym	O
*	O
sym	*(struct)
,	O
*	O
line_stats	O
,	O
*	O
new_line	O
;	O
Source_File	O
*	O
sf	O
;	O
int	O
i	*(struct)
,	O
table_len	O
;	O
FILE	struct
*	O
ofp	O
;	O
for	O
(	O
sym	*(struct)
=	O
symtab	O
.	O
base	int
;	O
sym	*(struct)
<	O
symtab	O
.	O
limit	O
;	O
++	O
sym	*(struct)
)	O
{	O
if	O
(	O
sym	*(struct)
->	O
file	*(void)
&&	O
sym	*(struct)
->	O
line_num	O
>	O
sym	*(struct)
->	O
file	*(void)
->	O
num_lines	O
&&	O
(	O
sym_lookup	O
(	O
&	O
syms	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(char),long,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),union(*(void),long))))
[	O
INCL_ANNO	O
]	O
,	O
sym	*(struct)
->	O
addr	*(void)
)	O
||	O
(	O
syms	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(char),long,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),union(*(void),long))))
[	O
INCL_ANNO	O
]	O
.	O
len	long
==	O
0	int
&&	O
!	O
sym_lookup	O
(	O
&	O
syms	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(char),long,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),union(*(void),long))))
[	O
EXCL_ANNO	O
]	O
,	O
sym	*(struct)
->	O
addr	*(void)
)	O
)	O
)	O
)	O
{	O
sym	*(struct)
->	O
file	*(void)
->	O
num_lines	O
=	O
sym	*(struct)
->	O
line_num	O
;	O
}	O
}	O
for	O
(	O
sf	O
=	O
first_src_file	O
;	O
sf	O
;	O
sf	O
=	O
sf	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
{	O
if	O
(	O
sf	O
->	O
num_lines	O
>	O
0	int
)	O
{	O
sf	O
->	O
line	O
=	O
(	O
void	O
*	O
*	O
)	O
xmalloc	O
(	O
sf	O
->	O
num_lines	O
*	O
sizeof	O
(	O
sf	O
->	O
line	O
[	O
0	int
]	O
)	O
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
sf	O
->	O
line	O
,	O
0	int
,	O
sf	O
->	O
num_lines	O
*	O
sizeof	O
(	O
sf	O
->	O
line	O
[	O
0	int
]	O
)	O
)	O
;	O
}	O
}	O
for	O
(	O
sym	*(struct)
=	O
symtab	O
.	O
base	int
;	O
sym	*(struct)
<	O
symtab	O
.	O
limit	O
;	O
++	O
sym	*(struct)
)	O
{	O
if	O
(	O
sym	*(struct)
->	O
file	*(void)
&&	O
sym	*(struct)
->	O
file	*(void)
->	O
num_lines	O
&&	O
(	O
sym_lookup	O
(	O
&	O
syms	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(char),long,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),union(*(void),long))))
[	O
INCL_ANNO	O
]	O
,	O
sym	*(struct)
->	O
addr	*(void)
)	O
||	O
(	O
syms	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(char),long,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),union(*(void),long))))
[	O
INCL_ANNO	O
]	O
.	O
len	long
==	O
0	int
&&	O
!	O
sym_lookup	O
(	O
&	O
syms	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(char),long,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),union(*(void),long))))
[	O
EXCL_ANNO	O
]	O
,	O
sym	*(struct)
->	O
addr	*(void)
)	O
)	O
)	O
)	O
{	O
sym	*(struct)
->	O
file	*(void)
->	O
ncalls	O
+=	O
sym	*(struct)
->	O
ncalls	O
;	O
line_stats	O
=	O
(	O
Sym	O
*	O
)	O
sym	*(struct)
->	O
file	*(void)
->	O
line	O
[	O
sym	*(struct)
->	O
line_num	O
-	O
1	int
]	O
;	O
if	O
(	O
!	O
line_stats	O
)	O
{	O
sym	*(struct)
->	O
file	*(void)
->	O
line	O
[	O
sym	*(struct)
->	O
line_num	O
-	O
1	int
]	O
=	O
sym	*(struct)
;	O
}	O
else	O
if	O
(	O
!	O
line_stats	O
->	O
addr	*(void)
)	O
{	O
line_stats	O
->	O
ncalls	O
+=	O
sym	*(struct)
->	O
ncalls	O
;	O
}	O
else	O
{	O
new_line	O
=	O
(	O
Sym	O
*	O
)	O
xmalloc	O
(	O
sizeof	O
(	O
*	O
new_line	O
)	O
)	O
;	O
*	O
new_line	O
=	O
*	O
line_stats	O
;	O
new_line	O
->	O
addr	*(void)
=	O
0	int
;	O
new_line	O
->	O
ncalls	O
+=	O
sym	*(struct)
->	O
ncalls	O
;	O
sym	*(struct)
->	O
file	*(void)
->	O
line	O
[	O
sym	*(struct)
->	O
line_num	O
-	O
1	int
]	O
=	O
new_line	O
;	O
}	O
}	O
}	O
for	O
(	O
sf	O
=	O
first_src_file	O
;	O
sf	O
;	O
sf	O
=	O
sf	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
{	O
if	O
(	O
!	O
sf	O
->	O
num_lines	O
||	O
(	O
ignore_zeros	O
&&	O
sf	O
->	O
ncalls	O
==	O
0	int
)	O
)	O
continue	O
;	O
num_executable_lines	O
=	O
num_lines_executed	O
=	O
0	int
;	O
ofp	O
=	O
annotate_source	O
(	O
sf	O
,	O
16	int
,	O
annotate_with_count	O
,	O
sf	O
)	O
;	O
if	O
(	O
!	O
ofp	O
)	O
continue	O
;	O
if	O
(	O
bb_table_length	O
>	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
ofp	O
,	O
_	O
(	O
"\n\nTop %d Lines:\n\n     Line      Count\n\n"	*(char)
)	O
,	O
bb_table_length	O
)	O
;	O
qsort	(*(void),long,long,*((*(void),*(void))->(int)))->(void)
(	O
sf	O
->	O
line	O
,	O
sf	O
->	O
num_lines	O
,	O
sizeof	O
(	O
sf	O
->	O
line	O
[	O
0	int
]	O
)	O
,	O
cmp_ncalls	O
)	O
;	O
table_len	O
=	O
bb_table_length	O
;	O
if	O
(	O
table_len	O
>	O
sf	O
->	O
num_lines	O
)	O
table_len	O
=	O
sf	O
->	O
num_lines	O
;	O
for	O
(	O
i	*(struct)
=	O
0	int
;	O
i	*(struct)
<	O
table_len	O
;	O
++	O
i	*(struct)
)	O
{	O
sym	*(struct)
=	O
(	O
Sym	O
*	O
)	O
sf	O
->	O
line	O
[	O
i	*(struct)
]	O
;	O
if	O
(	O
!	O
sym	*(struct)
||	O
sym	*(struct)
->	O
ncalls	O
==	O
0	int
)	O
break	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
ofp	O
,	O
"%9d %10lu\n"	*(char)
,	O
sym	*(struct)
->	O
line_num	O
,	O
sym	*(struct)
->	O
ncalls	O
)	O
;	O
}	O
}	O
free	(*(void))->(void)
(	O
sf	O
->	O
line	O
)	O
;	O
sf	O
->	O
line	O
=	O
0	int
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
ofp	O
,	O
_	O
(	O
"\nExecution Summary:\n\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
ofp	O
,	O
_	O
(	O
"%9ld   Executable lines in this file\n"	*(char)
)	O
,	O
num_executable_lines	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
ofp	O
,	O
_	O
(	O
"%9ld   Lines executed\n"	*(char)
)	O
,	O
num_lines_executed	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
ofp	O
,	O
_	O
(	O
"%9.2f   Percent of the file executed\n"	*(char)
)	O
,	O
num_executable_lines	O
?	O
100.0	int
*	O
num_lines_executed	O
/	O
(	O
double	O
)	O
num_executable_lines	O
:	O
100.0	int
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
ofp	O
,	O
_	O
(	O
"\n%9lu   Total number of line executions\n"	*(char)
)	O
,	O
sf	O
->	O
ncalls	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
ofp	O
,	O
_	O
(	O
"%9.2f   Average executions per line\n"	*(char)
)	O
,	O
num_executable_lines	O
?	O
(	O
double	O
)	O
sf	O
->	O
ncalls	O
/	O
(	O
double	O
)	O
num_executable_lines	O
:	O
0.0	int
)	O
;	O
if	O
(	O
ofp	O
!=	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
ofp	O
)	O
;	O
}	O
}	O
