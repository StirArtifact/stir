struct	O
rec_sex_ast_node_s	O
{	O
enum	O
rec_sex_ast_node_type_e	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
union	O
{	O
int	O
integer	int
;	O
double	O
real	double
;	O
char	O
*	O
string	*(char)
;	O
char	O
*	O
name	*(char)
[	O
2	int
]	O
;	O
}	O
val	*(char)
;	O
int	O
index	(*(char),int)->(*(char))
;	O
bool	bool
fixed	O
;	O
char	O
*	O
fixed_val	O
;	O
rec_sex_ast_node_t	*(struct)
children	O
[	O
REC_SEX_AST_MAX_CHILDREN	int
]	O
;	O
size_t	long
num_children	O
;	O
}	O
;	O
struct	O
rec_sex_ast_s	O
{	O
rec_sex_ast_node_t	*(struct)
top	O
;	O
}	O
;	O
rec_sex_ast_t	*(struct)
rec_sex_ast_new	()->(*(struct))
(	O
)	O
{	O
rec_sex_ast_t	*(struct)
new	O
;	O
new	O
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
rec_sex_ast_s	O
)	O
)	O
;	O
if	O
(	O
new	O
)	O
{	O
new	O
->	O
top	O
=	O
NULL	O
;	O
}	O
return	O
new	O
;	O
}	O
void	O
rec_sex_ast_destroy	(*(struct))->(void)
(	O
rec_sex_ast_t	*(struct)
ast	*(struct)
)	O
{	O
if	O
(	O
ast	*(struct)
->	O
top	O
)	O
{	O
rec_sex_ast_node_destroy	(*(struct))->(void)
(	O
ast	*(struct)
->	O
top	O
)	O
;	O
}	O
free	(*(void))->(void)
(	O
ast	*(struct)
)	O
;	O
}	O
rec_sex_ast_node_t	*(struct)
rec_sex_ast_node_new	()->(*(struct))
(	O
void	O
)	O
{	O
rec_sex_ast_node_t	*(struct)
new	O
;	O
new	O
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
rec_sex_ast_node_s	O
)	O
)	O
;	O
if	O
(	O
new	O
)	O
{	O
new	O
->	O
type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
REC_SEX_NOVAL	int
;	O
new	O
->	O
num_children	O
=	O
0	int
;	O
new	O
->	O
index	(*(char),int)->(*(char))
=	O
-	O
1	int
;	O
new	O
->	O
fixed	O
=	O
false	O
;	O
new	O
->	O
fixed_val	O
=	O
NULL	O
;	O
}	O
return	O
new	O
;	O
}	O
void	O
rec_sex_ast_node_destroy	(*(struct))->(void)
(	O
rec_sex_ast_node_t	*(struct)
node	*(struct)
)	O
{	O
size_t	long
i	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
node	*(struct)
->	O
num_children	O
;	O
i	O
++	O
)	O
{	O
rec_sex_ast_node_destroy	(*(struct))->(void)
(	O
node	*(struct)
->	O
children	O
[	O
i	O
]	O
)	O
;	O
}	O
if	O
(	O
node	*(struct)
->	O
type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
REC_SEX_STR	int
)	O
{	O
free	(*(void))->(void)
(	O
node	*(struct)
->	O
val	*(char)
.	O
string	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
node	*(struct)
->	O
type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
REC_SEX_NAME	int
)	O
{	O
free	(*(void))->(void)
(	O
node	*(struct)
->	O
val	*(char)
.	O
name	*(char)
[	O
0	int
]	O
)	O
;	O
free	(*(void))->(void)
(	O
node	*(struct)
->	O
val	*(char)
.	O
name	*(char)
[	O
1	int
]	O
)	O
;	O
}	O
free	(*(void))->(void)
(	O
node	*(struct)
->	O
fixed_val	O
)	O
;	O
free	(*(void))->(void)
(	O
node	*(struct)
)	O
;	O
}	O
enum	O
rec_sex_ast_node_type_e	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
rec_sex_ast_node_type	(*(struct))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
(	O
rec_sex_ast_node_t	*(struct)
node	*(struct)
)	O
{	O
return	O
node	*(struct)
->	O
type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
}	O
void	O
rec_sex_ast_node_set_type	(*(struct),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(void)
(	O
rec_sex_ast_node_t	*(struct)
node	*(struct)
,	O
enum	O
rec_sex_ast_node_type_e	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
{	O
node	*(struct)
->	O
type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
}	O
int	O
rec_sex_ast_node_int	(*(struct))->(int)
(	O
rec_sex_ast_node_t	*(struct)
node	*(struct)
)	O
{	O
return	O
node	*(struct)
->	O
val	*(char)
.	O
integer	int
;	O
}	O
void	O
rec_sex_ast_node_set_int	(*(struct),int)->(void)
(	O
rec_sex_ast_node_t	*(struct)
node	*(struct)
,	O
int	O
num	int
)	O
{	O
node	*(struct)
->	O
type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
REC_SEX_INT	int
;	O
node	*(struct)
->	O
val	*(char)
.	O
integer	int
=	O
num	int
;	O
}	O
double	O
rec_sex_ast_node_real	(*(struct))->(double)
(	O
rec_sex_ast_node_t	*(struct)
node	*(struct)
)	O
{	O
return	O
node	*(struct)
->	O
val	*(char)
.	O
real	double
;	O
}	O
void	O
rec_sex_ast_node_set_real	(*(struct),double)->(void)
(	O
rec_sex_ast_node_t	*(struct)
node	*(struct)
,	O
double	O
num	int
)	O
{	O
node	*(struct)
->	O
type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
REC_SEX_REAL	int
;	O
node	*(struct)
->	O
val	*(char)
.	O
real	double
=	O
num	int
;	O
}	O
char	O
*	O
rec_sex_ast_node_str	(*(struct))->(*(char))
(	O
rec_sex_ast_node_t	*(struct)
node	*(struct)
)	O
{	O
return	O
node	*(struct)
->	O
val	*(char)
.	O
string	*(char)
;	O
}	O
void	O
rec_sex_ast_node_set_str	(*(struct),*(char))->(void)
(	O
rec_sex_ast_node_t	*(struct)
node	*(struct)
,	O
char	O
*	O
str	*(char)
)	O
{	O
if	O
(	O
node	*(struct)
->	O
type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
REC_SEX_STR	int
)	O
{	O
free	(*(void))->(void)
(	O
node	*(struct)
->	O
val	*(char)
.	O
string	*(char)
)	O
;	O
}	O
node	*(struct)
->	O
type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
REC_SEX_STR	int
;	O
node	*(struct)
->	O
val	*(char)
.	O
string	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
str	*(char)
)	O
;	O
}	O
const	O
char	O
*	O
rec_sex_ast_node_name	(*(struct))->(*(char))
(	O
rec_sex_ast_node_t	*(struct)
node	*(struct)
)	O
{	O
return	O
node	*(struct)
->	O
val	*(char)
.	O
name	*(char)
[	O
0	int
]	O
;	O
}	O
const	O
char	O
*	O
rec_sex_ast_node_subname	(*(struct))->(*(char))
(	O
rec_sex_ast_node_t	*(struct)
node	*(struct)
)	O
{	O
return	O
node	*(struct)
->	O
val	*(char)
.	O
name	*(char)
[	O
1	int
]	O
;	O
}	O
void	O
rec_sex_ast_node_set_name	(*(struct),*(char),*(char))->(void)
(	O
rec_sex_ast_node_t	*(struct)
node	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
,	O
const	O
char	O
*	O
subname	*(char)
)	O
{	O
if	O
(	O
node	*(struct)
->	O
type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
REC_SEX_NAME	int
)	O
{	O
free	(*(void))->(void)
(	O
node	*(struct)
->	O
val	*(char)
.	O
name	*(char)
[	O
0	int
]	O
)	O
;	O
free	(*(void))->(void)
(	O
node	*(struct)
->	O
val	*(char)
.	O
name	*(char)
[	O
1	int
]	O
)	O
;	O
}	O
node	*(struct)
->	O
type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
REC_SEX_NAME	int
;	O
node	*(struct)
->	O
val	*(char)
.	O
name	*(char)
[	O
0	int
]	O
=	O
strdup	(*(char))->(*(char))
(	O
name	*(char)
)	O
;	O
node	*(struct)
->	O
val	*(char)
.	O
name	*(char)
[	O
1	int
]	O
=	O
NULL	O
;	O
if	O
(	O
subname	*(char)
)	O
{	O
node	*(struct)
->	O
val	*(char)
.	O
name	*(char)
[	O
1	int
]	O
=	O
strdup	(*(char))->(*(char))
(	O
subname	*(char)
)	O
;	O
}	O
}	O
void	O
rec_sex_ast_node_link	(*(struct),*(struct))->(void)
(	O
rec_sex_ast_node_t	*(struct)
parent	*(struct)
,	O
rec_sex_ast_node_t	*(struct)
child	*(struct)
)	O
{	O
if	O
(	O
parent	*(struct)
->	O
num_children	O
<	O
REC_SEX_AST_MAX_CHILDREN	int
)	O
{	O
parent	*(struct)
->	O
children	O
[	O
parent	*(struct)
->	O
num_children	O
++	O
]	O
=	O
child	*(struct)
;	O
}	O
}	O
rec_sex_ast_node_t	*(struct)
rec_sex_ast_top	(*(struct))->(*(struct))
(	O
rec_sex_ast_t	*(struct)
ast	*(struct)
)	O
{	O
return	O
ast	*(struct)
->	O
top	O
;	O
}	O
void	O
rec_sex_ast_set_top	(*(struct),*(struct))->(void)
(	O
rec_sex_ast_t	*(struct)
ast	*(struct)
,	O
rec_sex_ast_node_t	*(struct)
node	*(struct)
)	O
{	O
ast	*(struct)
->	O
top	O
=	O
node	*(struct)
;	O
}	O
void	O
rec_sex_ast_print_node	O
(	O
rec_sex_ast_node_t	*(struct)
node	*(struct)
)	O
{	O
int	O
i	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
node	*(struct)
->	O
num_children	O
;	O
i	O
++	O
)	O
{	O
rec_sex_ast_print_node	O
(	O
node	*(struct)
->	O
children	O
[	O
i	O
]	O
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"------- node\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"type: %d\n"	*(char)
,	O
node	*(struct)
->	O
type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
;	O
if	O
(	O
node	*(struct)
->	O
type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
REC_SEX_INT	int
)	O
{	O
printf	(*(char))->(int)
(	O
"value: %d\n"	*(char)
,	O
node	*(struct)
->	O
val	*(char)
.	O
integer	int
)	O
;	O
}	O
if	O
(	O
node	*(struct)
->	O
type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
REC_SEX_NAME	int
)	O
{	O
printf	(*(char))->(int)
(	O
"value: %s\n"	*(char)
,	O
node	*(struct)
->	O
val	*(char)
.	O
name	*(char)
[	O
0	int
]	O
)	O
;	O
}	O
if	O
(	O
node	*(struct)
->	O
type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
REC_SEX_STR	int
)	O
{	O
printf	(*(char))->(int)
(	O
"value: %s\n"	*(char)
,	O
node	*(struct)
->	O
val	*(char)
.	O
string	*(char)
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
}	O
int	O
rec_sex_ast_node_num_children	(*(struct))->(int)
(	O
rec_sex_ast_node_t	*(struct)
node	*(struct)
)	O
{	O
return	O
node	*(struct)
->	O
num_children	O
;	O
}	O
rec_sex_ast_node_t	*(struct)
rec_sex_ast_node_child	(*(struct),int)->(*(struct))
(	O
rec_sex_ast_node_t	*(struct)
node	*(struct)
,	O
int	O
n	int
)	O
{	O
rec_sex_ast_node_t	*(struct)
res	O
;	O
res	O
=	O
NULL	O
;	O
if	O
(	O
n	int
<	O
node	*(struct)
->	O
num_children	O
)	O
{	O
res	O
=	O
node	*(struct)
->	O
children	O
[	O
n	int
]	O
;	O
}	O
return	O
res	O
;	O
}	O
void	O
rec_sex_ast_node_reset	(*(struct))->(void)
(	O
rec_sex_ast_node_t	*(struct)
node	*(struct)
)	O
{	O
int	O
i	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
node	*(struct)
->	O
num_children	O
;	O
i	O
++	O
)	O
{	O
rec_sex_ast_node_reset	(*(struct))->(void)
(	O
node	*(struct)
->	O
children	O
[	O
i	O
]	O
)	O
;	O
}	O
node	*(struct)
->	O
index	(*(char),int)->(*(char))
=	O
0	int
;	O
}	O
void	O
rec_sex_ast_node_fix	(*(struct),*(char))->(void)
(	O
rec_sex_ast_node_t	*(struct)
node	*(struct)
,	O
char	O
*	O
val	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
node	*(struct)
->	O
fixed_val	O
)	O
;	O
node	*(struct)
->	O
fixed	O
=	O
true	O
;	O
node	*(struct)
->	O
fixed_val	O
=	O
strdup	(*(char))->(*(char))
(	O
val	*(char)
)	O
;	O
}	O
void	O
rec_sex_ast_node_unfix	(*(struct))->(void)
(	O
rec_sex_ast_node_t	*(struct)
node	*(struct)
)	O
{	O
int	O
i	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
node	*(struct)
->	O
num_children	O
;	O
i	O
++	O
)	O
{	O
rec_sex_ast_node_unfix	(*(struct))->(void)
(	O
node	*(struct)
->	O
children	O
[	O
i	O
]	O
)	O
;	O
}	O
node	*(struct)
->	O
fixed	O
=	O
false	O
;	O
}	O
bool	bool
rec_sex_ast_node_fixed	(*(struct))->(bool)
(	O
rec_sex_ast_node_t	*(struct)
node	*(struct)
)	O
{	O
return	O
node	*(struct)
->	O
fixed	O
;	O
}	O
char	O
*	O
rec_sex_ast_node_fixed_val	(*(struct))->(*(char))
(	O
rec_sex_ast_node_t	*(struct)
node	*(struct)
)	O
{	O
return	O
node	*(struct)
->	O
fixed_val	O
;	O
}	O
int	O
rec_sex_ast_node_index	(*(struct))->(int)
(	O
rec_sex_ast_node_t	*(struct)
node	*(struct)
)	O
{	O
return	O
node	*(struct)
->	O
index	(*(char),int)->(*(char))
;	O
}	O
void	O
rec_sex_ast_node_set_index	(*(struct),int)->(void)
(	O
rec_sex_ast_node_t	*(struct)
node	*(struct)
,	O
int	O
index	(*(char),int)->(*(char))
)	O
{	O
node	*(struct)
->	O
index	(*(char),int)->(*(char))
=	O
index	(*(char),int)->(*(char))
;	O
}	O
void	O
rec_sex_ast_print	(*(struct))->(void)
(	O
rec_sex_ast_t	*(struct)
ast	*(struct)
)	O
{	O
rec_sex_ast_print_node	O
(	O
ast	*(struct)
->	O
top	O
)	O
;	O
}	O
bool	bool
rec_sex_ast_name_p_1	O
(	O
rec_sex_ast_node_t	*(struct)
node	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
,	O
size_t	long
idx	long
)	O
{	O
size_t	long
i	O
=	O
0	int
;	O
if	O
(	O
node	*(struct)
)	O
{	O
if	O
(	O
(	O
node	*(struct)
->	O
type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
REC_SEX_NAME	int
)	O
&&	O
(	O
(	O
node	*(struct)
->	O
index	(*(char),int)->(*(char))
==	O
-	O
1	int
)	O
||	O
(	O
node	*(struct)
->	O
index	(*(char),int)->(*(char))
<	O
idx	long
)	O
)	O
&&	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
node	*(struct)
->	O
val	*(char)
.	O
name	*(char)
[	O
0	int
]	O
)	O
==	O
0	int
)	O
)	O
{	O
return	O
true	O
;	O
}	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
node	*(struct)
->	O
num_children	O
;	O
i	O
++	O
)	O
{	O
if	O
(	O
rec_sex_ast_name_p_1	O
(	O
node	*(struct)
->	O
children	O
[	O
i	O
]	O
,	O
name	*(char)
,	O
idx	long
)	O
)	O
{	O
return	O
true	O
;	O
}	O
}	O
}	O
return	O
false	O
;	O
}	O
bool	bool
rec_sex_ast_name_p	(*(struct),*(char),long)->(bool)
(	O
rec_sex_ast_t	*(struct)
ast	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
,	O
size_t	long
idx	long
)	O
{	O
return	O
rec_sex_ast_name_p_1	O
(	O
ast	*(struct)
->	O
top	O
,	O
name	*(char)
,	O
idx	long
)	O
;	O
}	O
static	O
bool	bool
rec_sex_ast_hash_name_p_1	O
(	O
rec_sex_ast_node_t	*(struct)
node	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
if	O
(	O
node	*(struct)
)	O
{	O
size_t	long
i	O
=	O
0	int
;	O
if	O
(	O
(	O
node	*(struct)
->	O
type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
REC_SEX_OP_SHA	int
)	O
&&	O
(	O
node	*(struct)
->	O
num_children	O
==	O
1	int
)	O
&&	O
(	O
node	*(struct)
->	O
children	O
[	O
0	int
]	O
->	O
type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
REC_SEX_NAME	int
)	O
&&	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
node	*(struct)
->	O
children	O
[	O
0	int
]	O
->	O
val	*(char)
.	O
name	*(char)
[	O
0	int
]	O
)	O
==	O
0	int
)	O
)	O
return	O
true	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
node	*(struct)
->	O
num_children	O
;	O
i	O
++	O
)	O
if	O
(	O
rec_sex_ast_hash_name_p_1	O
(	O
node	*(struct)
->	O
children	O
[	O
i	O
]	O
,	O
name	*(char)
)	O
)	O
return	O
true	O
;	O
}	O
return	O
false	O
;	O
}	O
bool	bool
rec_sex_ast_hash_name_p	(*(struct),*(char))->(bool)
(	O
rec_sex_ast_t	*(struct)
ast	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
return	O
rec_sex_ast_hash_name_p_1	O
(	O
ast	*(struct)
->	O
top	O
,	O
name	*(char)
)	O
;	O
}	O
