dwg_inthash	struct(*(struct(int,int)),int,int)
*	O
hash_new	(int)->(*(struct(*(struct(int,int)),int,int)))
(	O
uint32_t	int
size	int
)	O
{	O
dwg_inthash	struct(*(struct(int,int)),int,int)
*	O
hash	*(struct(*(struct(int,int)),int,int))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
dwg_inthash	struct(*(struct(int,int)),int,int)
)	O
)	O
;	O
uint32_t	int
cap	int
;	O
if	O
(	O
!	O
hash	*(struct(*(struct(int,int)),int,int))
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
size	int
)	O
size	int
=	O
15	int
;	O
cap	int
=	O
(	O
uint32_t	int
)	O
(	O
size	int
*	O
100.0	int
/	O
HASH_LOAD	int
)	O
;	O
while	O
(	O
size	int
<=	O
cap	int
)	O
size	int
<<=	O
1U	int
;	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
array	*(struct(int,int))
=	O
calloc	(long,long)->(*(void))
(	O
size	int
,	O
sizeof	O
(	O
struct	O
_hashbucket	struct(int,int)
)	O
)	O
;	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
elems	int
=	O
0	int
;	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
size	int
=	O
size	int
;	O
return	O
hash	*(struct(*(struct(int,int)),int,int))
;	O
}	O
static	O
inline	O
int	O
hash_need_resize	(*(struct(*(struct(int,int)),int,int)))->(int)
(	O
dwg_inthash	struct(*(struct(int,int)),int,int)
*	O
hash	*(struct(*(struct(int,int)),int,int))
)	O
{	O
return	O
(	O
uint32_t	int
)	O
(	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
elems	int
*	O
100.0	int
/	O
HASH_LOAD	int
)	O
>	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
size	int
;	O
}	O
static	O
void	O
hash_resize	(*(struct(*(struct(int,int)),int,int)))->(void)
(	O
dwg_inthash	struct(*(struct(int,int)),int,int)
*	O
hash	*(struct(*(struct(int,int)),int,int))
)	O
{	O
dwg_inthash	struct(*(struct(int,int)),int,int)
oldhash	struct(*(struct(int,int)),int,int)
=	O
*	O
hash	*(struct(*(struct(int,int)),int,int))
;	O
uint32_t	int
size	int
=	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
size	int
*	O
2	int
;	O
uint32_t	int
i	int
;	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
array	*(struct(int,int))
=	O
calloc	(long,long)->(*(void))
(	O
size	int
,	O
sizeof	O
(	O
struct	O
_hashbucket	struct(int,int)
)	O
)	O
;	O
if	O
(	O
!	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
array	*(struct(int,int))
)	O
{	O
*	O
hash	*(struct(*(struct(int,int)),int,int))
=	O
oldhash	struct(*(struct(int,int)),int,int)
;	O
return	O
;	O
}	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
elems	int
=	O
0	int
;	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
size	int
=	O
size	int
;	O
memset	(*(void),int,long)->(*(void))
(	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
array	*(struct(int,int))
,	O
0	int
,	O
size	int
*	O
sizeof	O
(	O
struct	O
_hashbucket	struct(int,int)
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
oldhash	struct(*(struct(int,int)),int,int)
.	O
size	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
oldhash	struct(*(struct(int,int)),int,int)
.	O
array	*(struct(int,int))
[	O
i	int
]	O
.	O
key	int
)	O
hash_set	(*(struct(*(struct(int,int)),int,int)),int,int)->(void)
(	O
hash	*(struct(*(struct(int,int)),int,int))
,	O
oldhash	struct(*(struct(int,int)),int,int)
.	O
array	*(struct(int,int))
[	O
i	int
]	O
.	O
key	int
,	O
oldhash	struct(*(struct(int,int)),int,int)
.	O
array	*(struct(int,int))
[	O
i	int
]	O
.	O
value	int
)	O
;	O
}	O
free	(*(void))->(void)
(	O
oldhash	struct(*(struct(int,int)),int,int)
.	O
array	*(struct(int,int))
)	O
;	O
return	O
;	O
}	O
static	O
inline	O
uint32_t	int
hash_func	(int)->(int)
(	O
uint32_t	int
key	int
)	O
{	O
key	int
=	O
(	O
(	O
key	int
>>	O
16	int
)	O
^	O
key	int
)	O
*	O
0x45d9f3b	int
;	O
key	int
=	O
(	O
(	O
key	int
>>	O
16	int
)	O
^	O
key	int
)	O
*	O
0x45d9f3b	int
;	O
key	int
=	O
(	O
key	int
>>	O
16	int
)	O
^	O
key	int
;	O
return	O
key	int
;	O
}	O
uint32_t	int
hash_get	(*(struct(*(struct(int,int)),int,int)),int)->(int)
(	O
dwg_inthash	struct(*(struct(int,int)),int,int)
*	O
hash	*(struct(*(struct(int,int)),int,int))
,	O
uint32_t	int
key	int
)	O
{	O
uint32_t	int
i	int
=	O
hash_func	(int)->(int)
(	O
key	int
)	O
%	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
size	int
;	O
uint32_t	int
j	int
=	O
i	int
;	O
while	O
(	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
array	*(struct(int,int))
[	O
i	int
]	O
.	O
key	int
&&	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
array	*(struct(int,int))
[	O
i	int
]	O
.	O
key	int
!=	O
key	int
)	O
{	O
i	int
++	O
;	O
if	O
(	O
i	int
==	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
size	int
)	O
i	int
=	O
0	int
;	O
if	O
(	O
i	int
==	O
j	int
)	O
return	O
HASH_NOT_FOUND	O
;	O
}	O
if	O
(	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
array	*(struct(int,int))
[	O
i	int
]	O
.	O
key	int
)	O
return	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
array	*(struct(int,int))
[	O
i	int
]	O
.	O
value	int
;	O
else	O
return	O
HASH_NOT_FOUND	O
;	O
}	O
void	O
hash_set	(*(struct(*(struct(int,int)),int,int)),int,int)->(void)
(	O
dwg_inthash	struct(*(struct(int,int)),int,int)
*	O
hash	*(struct(*(struct(int,int)),int,int))
,	O
uint32_t	int
key	int
,	O
uint32_t	int
value	int
)	O
{	O
uint32_t	int
i	int
=	O
hash_func	(int)->(int)
(	O
key	int
)	O
%	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
size	int
;	O
uint32_t	int
j	int
=	O
i	int
;	O
if	O
(	O
key	int
==	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"forbidden 0 key\n"	*(char)
)	O
;	O
return	O
;	O
}	O
if	O
(	O
!	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
array	*(struct(int,int))
[	O
i	int
]	O
.	O
key	int
)	O
{	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
array	*(struct(int,int))
[	O
i	int
]	O
.	O
key	int
=	O
key	int
;	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
array	*(struct(int,int))
[	O
i	int
]	O
.	O
value	int
=	O
value	int
;	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
elems	int
++	O
;	O
return	O
;	O
}	O
while	O
(	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
array	*(struct(int,int))
[	O
i	int
]	O
.	O
key	int
)	O
{	O
if	O
(	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
array	*(struct(int,int))
[	O
i	int
]	O
.	O
key	int
==	O
key	int
)	O
{	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
array	*(struct(int,int))
[	O
i	int
]	O
.	O
value	int
=	O
value	int
;	O
return	O
;	O
}	O
i	int
++	O
;	O
if	O
(	O
i	int
==	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
size	int
)	O
i	int
=	O
0	int
;	O
if	O
(	O
i	int
==	O
j	int
)	O
{	O
if	O
(	O
hash_need_resize	(*(struct(*(struct(int,int)),int,int)))->(int)
(	O
hash	*(struct(*(struct(int,int)),int,int))
)	O
)	O
{	O
hash_resize	(*(struct(*(struct(int,int)),int,int)))->(void)
(	O
hash	*(struct(*(struct(int,int)),int,int))
)	O
;	O
return	O
hash_set	(*(struct(*(struct(int,int)),int,int)),int,int)->(void)
(	O
hash	*(struct(*(struct(int,int)),int,int))
,	O
key	int
,	O
value	int
)	O
;	O
}	O
while	O
(	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
array	*(struct(int,int))
[	O
i	int
]	O
.	O
key	int
)	O
{	O
i	int
++	O
;	O
if	O
(	O
i	int
==	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
size	int
)	O
i	int
=	O
0	int
;	O
if	O
(	O
i	int
==	O
j	int
)	O
{	O
hash_resize	(*(struct(*(struct(int,int)),int,int)))->(void)
(	O
hash	*(struct(*(struct(int,int)),int,int))
)	O
;	O
hash_set	(*(struct(*(struct(int,int)),int,int)),int,int)->(void)
(	O
hash	*(struct(*(struct(int,int)),int,int))
,	O
key	int
,	O
value	int
)	O
;	O
return	O
;	O
}	O
else	O
{	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
array	*(struct(int,int))
[	O
i	int
]	O
.	O
key	int
=	O
key	int
;	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
array	*(struct(int,int))
[	O
i	int
]	O
.	O
value	int
=	O
value	int
;	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
elems	int
++	O
;	O
return	O
;	O
}	O
}	O
}	O
}	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
array	*(struct(int,int))
[	O
i	int
]	O
.	O
key	int
=	O
key	int
;	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
array	*(struct(int,int))
[	O
i	int
]	O
.	O
value	int
=	O
value	int
;	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
elems	int
++	O
;	O
return	O
;	O
}	O
void	O
hash_free	(*(struct(*(struct(int,int)),int,int)))->(void)
(	O
dwg_inthash	struct(*(struct(int,int)),int,int)
*	O
hash	*(struct(*(struct(int,int)),int,int))
)	O
{	O
free	(*(void))->(void)
(	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
array	*(struct(int,int))
)	O
;	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
array	*(struct(int,int))
=	O
NULL	O
;	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
size	int
=	O
0	int
;	O
hash	*(struct(*(struct(int,int)),int,int))
->	O
elems	int
=	O
0	int
;	O
free	(*(void))->(void)
(	O
hash	*(struct(*(struct(int,int)),int,int))
)	O
;	O
}	O
