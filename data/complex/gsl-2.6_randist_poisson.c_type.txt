unsigned	O
int	O
gsl_ran_poisson	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),double)->(int)
(	O
const	O
gsl_rng	struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void))
*	O
r	*(struct(double,double))
,	O
double	O
mu	double
)	O
{	O
double	O
emu	double
;	O
double	O
prod	double
=	O
1.0	int
;	O
unsigned	O
int	O
k	long
=	O
0	int
;	O
while	O
(	O
mu	double
>	O
10	int
)	O
{	O
unsigned	O
int	O
m	int
=	O
mu	double
*	O
(	O
7.0	int
/	O
8.0	int
)	O
;	O
double	O
X	*(float)
=	O
gsl_ran_gamma_int	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),int)->(double)
(	O
r	*(struct(double,double))
,	O
m	int
)	O
;	O
if	O
(	O
X	*(float)
>=	O
mu	double
)	O
{	O
return	O
k	long
+	O
gsl_ran_binomial	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),double,int)->(int)
(	O
r	*(struct(double,double))
,	O
mu	double
/	O
X	*(float)
,	O
m	int
-	O
1	int
)	O
;	O
}	O
else	O
{	O
k	long
+=	O
m	int
;	O
mu	double
-=	O
X	*(float)
;	O
}	O
}	O
emu	double
=	O
exp	(double)->(double)
(	O
-	O
mu	double
)	O
;	O
do	O
{	O
prod	double
*=	O
gsl_rng_uniform	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))))->(double)
(	O
r	*(struct(double,double))
)	O
;	O
k	long
++	O
;	O
}	O
while	O
(	O
prod	double
>	O
emu	double
)	O
;	O
return	O
k	long
-	O
1	int
;	O
}	O
void	O
gsl_ran_poisson_array	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),long,array(int),double)->(void)
(	O
const	O
gsl_rng	struct(*(struct(*(char),long,long,long,*((*`,long)->(void)),*((*`)->(long)),*((*`)->(double)))),*(void))
*	O
r	*(struct(double,double))
,	O
size_t	long
n	int
,	O
unsigned	O
int	O
array	array(int)
[	O
]	O
,	O
double	O
mu	double
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
array	array(int)
[	O
i	long
]	O
=	O
gsl_ran_poisson	(*(struct(*(struct(*`,long,long,long,*`,*`,*`)),*(void))),double)->(int)
(	O
r	*(struct(double,double))
,	O
mu	double
)	O
;	O
}	O
return	O
;	O
}	O
double	O
gsl_ran_poisson_pdf	(int,double)->(double)
(	O
const	O
unsigned	O
int	O
k	long
,	O
const	O
double	O
mu	double
)	O
{	O
double	O
p	int
;	O
double	O
lf	double
=	O
gsl_sf_lnfact	(int)->(double)
(	O
k	long
)	O
;	O
p	int
=	O
exp	(double)->(double)
(	O
log	(double)->(double)
(	O
mu	double
)	O
*	O
k	long
-	O
lf	double
-	O
mu	double
)	O
;	O
return	O
p	int
;	O
}	O
