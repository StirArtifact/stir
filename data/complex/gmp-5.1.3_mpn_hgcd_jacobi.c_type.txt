struct	O
hgcd_jacobi_ctx	struct(*(struct(long,long,array(array(*(long))))),*(int))
{	O
struct	O
hgcd_matrix	struct(long,long,array(array(*(long))))
*	O
M	*(struct(long,long,array(array(*(long)))))
;	O
unsigned	O
*	O
bitsp	*(int)
;	O
}	O
;	O
static	O
void	O
hgcd_jacobi_hook	(*(void),*(long),long,*(long),long,int)->(void)
(	O
void	O
*	O
p	*(char)
,	O
mp_srcptr	*(long)
gp	*(long)
,	O
mp_size_t	long
gn	long
,	O
mp_srcptr	*(long)
qp	*(long)
,	O
mp_size_t	long
qn	long
,	O
int	O
d	long
)	O
{	O
ASSERT	O
(	O
!	O
gp	*(long)
)	O
;	O
ASSERT	O
(	O
d	long
>=	O
0	int
)	O
;	O
MPN_NORMALIZE	O
(	O
qp	*(long)
,	O
qn	long
)	O
;	O
if	O
(	O
qn	long
>	O
0	int
)	O
{	O
struct	O
hgcd_jacobi_ctx	struct(*(struct(long,long,array(array(*(long))))),*(int))
*	O
ctx	*(struct(*(struct(long,long,array(array(*(long))))),*(int)))
=	O
(	O
struct	O
hgcd_jacobi_ctx	struct(*(struct(long,long,array(array(*(long))))),*(int))
*	O
)	O
p	*(char)
;	O
mp_ptr	*(long)
tp	*(long)
=	O
(	O
mp_ptr	*(long)
)	O
qp	*(long)
+	O
qn	long
;	O
mpn_hgcd_matrix_update_q	O
(	O
ctx	*(struct(*(struct(long,long,array(array(*(long))))),*(int)))
->	O
M	*(struct(long,long,array(array(*(long)))))
,	O
qp	*(long)
,	O
qn	long
,	O
d	long
,	O
tp	*(long)
)	O
;	O
*	O
ctx	*(struct(*(struct(long,long,array(array(*(long))))),*(int)))
->	O
bitsp	*(int)
=	O
mpn_jacobi_update	(int,int,int)->(int)
(	O
*	O
ctx	*(struct(*(struct(long,long,array(array(*(long))))),*(int)))
->	O
bitsp	*(int)
,	O
d	long
,	O
qp	*(long)
[	O
0	int
]	O
&	O
3	int
)	O
;	O
}	O
}	O
static	O
mp_size_t	long
hgcd_jacobi_step	(long,*(long),*(long),long,*(struct(long,long,array(array(*(long))))),*(int),*(long))->(long)
(	O
mp_size_t	long
n	long
,	O
mp_ptr	*(long)
ap	*(long)
,	O
mp_ptr	*(long)
bp	*(long)
,	O
mp_size_t	long
s	array(char)
,	O
struct	O
hgcd_matrix	struct(long,long,array(array(*(long))))
*	O
M	*(struct(long,long,array(array(*(long)))))
,	O
unsigned	O
*	O
bitsp	*(int)
,	O
mp_ptr	*(long)
tp	*(long)
)	O
{	O
struct	O
hgcd_matrix1	struct(array(array(long)))
M1	struct(array(array(long)))
;	O
mp_limb_t	long
mask	long
;	O
mp_limb_t	long
ah	long
,	O
al	long
,	O
bh	long
,	O
bl	long
;	O
ASSERT	O
(	O
n	long
>	O
s	array(char)
)	O
;	O
mask	long
=	O
ap	*(long)
[	O
n	long
-	O
1	int
]	O
|	O
bp	*(long)
[	O
n	long
-	O
1	int
]	O
;	O
ASSERT	O
(	O
mask	long
>	O
0	int
)	O
;	O
if	O
(	O
n	long
==	O
s	array(char)
+	O
1	int
)	O
{	O
if	O
(	O
mask	long
<	O
4	int
)	O
goto	O
subtract	O
;	O
ah	long
=	O
ap	*(long)
[	O
n	long
-	O
1	int
]	O
;	O
al	long
=	O
ap	*(long)
[	O
n	long
-	O
2	int
]	O
;	O
bh	long
=	O
bp	*(long)
[	O
n	long
-	O
1	int
]	O
;	O
bl	long
=	O
bp	*(long)
[	O
n	long
-	O
2	int
]	O
;	O
}	O
else	O
if	O
(	O
mask	long
&	O
GMP_NUMB_HIGHBIT	O
)	O
{	O
ah	long
=	O
ap	*(long)
[	O
n	long
-	O
1	int
]	O
;	O
al	long
=	O
ap	*(long)
[	O
n	long
-	O
2	int
]	O
;	O
bh	long
=	O
bp	*(long)
[	O
n	long
-	O
1	int
]	O
;	O
bl	long
=	O
bp	*(long)
[	O
n	long
-	O
2	int
]	O
;	O
}	O
else	O
{	O
int	O
shift	long
;	O
count_leading_zeros	O
(	O
shift	long
,	O
mask	long
)	O
;	O
ah	long
=	O
MPN_EXTRACT_NUMB	O
(	O
shift	long
,	O
ap	*(long)
[	O
n	long
-	O
1	int
]	O
,	O
ap	*(long)
[	O
n	long
-	O
2	int
]	O
)	O
;	O
al	long
=	O
MPN_EXTRACT_NUMB	O
(	O
shift	long
,	O
ap	*(long)
[	O
n	long
-	O
2	int
]	O
,	O
ap	*(long)
[	O
n	long
-	O
3	int
]	O
)	O
;	O
bh	long
=	O
MPN_EXTRACT_NUMB	O
(	O
shift	long
,	O
bp	*(long)
[	O
n	long
-	O
1	int
]	O
,	O
bp	*(long)
[	O
n	long
-	O
2	int
]	O
)	O
;	O
bl	long
=	O
MPN_EXTRACT_NUMB	O
(	O
shift	long
,	O
bp	*(long)
[	O
n	long
-	O
2	int
]	O
,	O
bp	*(long)
[	O
n	long
-	O
3	int
]	O
)	O
;	O
}	O
if	O
(	O
mpn_hgcd2_jacobi	O
(	O
ah	long
,	O
al	long
,	O
bh	long
,	O
bl	long
,	O
&	O
M1	struct(array(array(long)))
,	O
bitsp	*(int)
)	O
)	O
{	O
mpn_hgcd_matrix_mul_1	O
(	O
M	*(struct(long,long,array(array(*(long)))))
,	O
&	O
M1	struct(array(array(long)))
,	O
tp	*(long)
)	O
;	O
MPN_COPY	O
(	O
tp	*(long)
,	O
ap	*(long)
,	O
n	long
)	O
;	O
return	O
mpn_matrix22_mul1_inverse_vector	O
(	O
&	O
M1	struct(array(array(long)))
,	O
ap	*(long)
,	O
tp	*(long)
,	O
bp	*(long)
,	O
n	long
)	O
;	O
}	O
subtract	O
:	O
{	O
struct	O
hgcd_jacobi_ctx	struct(*(struct(long,long,array(array(*(long))))),*(int))
ctx	*(struct(*(struct(long,long,array(array(*(long))))),*(int)))
;	O
ctx	*(struct(*(struct(long,long,array(array(*(long))))),*(int)))
.	O
M	*(struct(long,long,array(array(*(long)))))
=	O
M	*(struct(long,long,array(array(*(long)))))
;	O
ctx	*(struct(*(struct(long,long,array(array(*(long))))),*(int)))
.	O
bitsp	*(int)
=	O
bitsp	*(int)
;	O
return	O
mpn_gcd_subdiv_step	O
(	O
ap	*(long)
,	O
bp	*(long)
,	O
n	long
,	O
s	array(char)
,	O
hgcd_jacobi_hook	(*(void),*(long),long,*(long),long,int)->(void)
,	O
&	O
ctx	*(struct(*(struct(long,long,array(array(*(long))))),*(int)))
,	O
tp	*(long)
)	O
;	O
}	O
}	O
mp_size_t	long
mpn_hgcd_jacobi	O
(	O
mp_ptr	*(long)
ap	*(long)
,	O
mp_ptr	*(long)
bp	*(long)
,	O
mp_size_t	long
n	long
,	O
struct	O
hgcd_matrix	struct(long,long,array(array(*(long))))
*	O
M	*(struct(long,long,array(array(*(long)))))
,	O
unsigned	O
*	O
bitsp	*(int)
,	O
mp_ptr	*(long)
tp	*(long)
)	O
{	O
mp_size_t	long
s	array(char)
=	O
n	long
/	O
2	int
+	O
1	int
;	O
mp_size_t	long
nn	long
;	O
int	O
success	int
=	O
0	int
;	O
if	O
(	O
n	long
<=	O
s	array(char)
)	O
return	O
0	int
;	O
ASSERT	O
(	O
(	O
ap	*(long)
[	O
n	long
-	O
1	int
]	O
|	O
bp	*(long)
[	O
n	long
-	O
1	int
]	O
)	O
>	O
0	int
)	O
;	O
ASSERT	O
(	O
(	O
n	long
+	O
1	int
)	O
/	O
2	int
-	O
1	int
<	O
M	*(struct(long,long,array(array(*(long)))))
->	O
alloc	long
)	O
;	O
if	O
(	O
ABOVE_THRESHOLD	O
(	O
n	long
,	O
HGCD_THRESHOLD	int
)	O
)	O
{	O
mp_size_t	long
n2	long
=	O
(	O
3	int
*	O
n	long
)	O
/	O
4	int
+	O
1	int
;	O
mp_size_t	long
p	*(char)
=	O
n	long
/	O
2	int
;	O
nn	long
=	O
mpn_hgcd_jacobi	O
(	O
ap	*(long)
+	O
p	*(char)
,	O
bp	*(long)
+	O
p	*(char)
,	O
n	long
-	O
p	*(char)
,	O
M	*(struct(long,long,array(array(*(long)))))
,	O
bitsp	*(int)
,	O
tp	*(long)
)	O
;	O
if	O
(	O
nn	long
>	O
0	int
)	O
{	O
n	long
=	O
mpn_hgcd_matrix_adjust	O
(	O
M	*(struct(long,long,array(array(*(long)))))
,	O
p	*(char)
+	O
nn	long
,	O
ap	*(long)
,	O
bp	*(long)
,	O
p	*(char)
,	O
tp	*(long)
)	O
;	O
success	int
=	O
1	int
;	O
}	O
while	O
(	O
n	long
>	O
n2	long
)	O
{	O
nn	long
=	O
hgcd_jacobi_step	(long,*(long),*(long),long,*(struct(long,long,array(array(*(long))))),*(int),*(long))->(long)
(	O
n	long
,	O
ap	*(long)
,	O
bp	*(long)
,	O
s	array(char)
,	O
M	*(struct(long,long,array(array(*(long)))))
,	O
bitsp	*(int)
,	O
tp	*(long)
)	O
;	O
if	O
(	O
!	O
nn	long
)	O
return	O
success	int
?	O
n	long
:	O
0	int
;	O
n	long
=	O
nn	long
;	O
success	int
=	O
1	int
;	O
}	O
if	O
(	O
n	long
>	O
s	array(char)
+	O
2	int
)	O
{	O
struct	O
hgcd_matrix	struct(long,long,array(array(*(long))))
M1	struct(array(array(long)))
;	O
mp_size_t	long
scratch	long
;	O
p	*(char)
=	O
2	int
*	O
s	array(char)
-	O
n	long
+	O
1	int
;	O
scratch	long
=	O
MPN_HGCD_MATRIX_INIT_ITCH	O
(	O
n	long
-	O
p	*(char)
)	O
;	O
mpn_hgcd_matrix_init	O
(	O
&	O
M1	struct(array(array(long)))
,	O
n	long
-	O
p	*(char)
,	O
tp	*(long)
)	O
;	O
nn	long
=	O
mpn_hgcd_jacobi	O
(	O
ap	*(long)
+	O
p	*(char)
,	O
bp	*(long)
+	O
p	*(char)
,	O
n	long
-	O
p	*(char)
,	O
&	O
M1	struct(array(array(long)))
,	O
bitsp	*(int)
,	O
tp	*(long)
+	O
scratch	long
)	O
;	O
if	O
(	O
nn	long
>	O
0	int
)	O
{	O
ASSERT	O
(	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
+	O
2	int
>=	O
M1	struct(array(array(long)))
.	O
n	long
)	O
;	O
ASSERT	O
(	O
M	*(struct(long,long,array(array(*(long)))))
->	O
n	long
+	O
M1	struct(array(array(long)))
.	O
n	long
<	O
M	*(struct(long,long,array(array(*(long)))))
->	O
alloc	long
)	O
;	O
n	long
=	O
mpn_hgcd_matrix_adjust	O
(	O
&	O
M1	struct(array(array(long)))
,	O
p	*(char)
+	O
nn	long
,	O
ap	*(long)
,	O
bp	*(long)
,	O
p	*(char)
,	O
tp	*(long)
+	O
scratch	long
)	O
;	O
mpn_hgcd_matrix_mul	O
(	O
M	*(struct(long,long,array(array(*(long)))))
,	O
&	O
M1	struct(array(array(long)))
,	O
tp	*(long)
+	O
scratch	long
)	O
;	O
success	int
=	O
1	int
;	O
}	O
}	O
}	O
for	O
(	O
;	O
;	O
)	O
{	O
nn	long
=	O
hgcd_jacobi_step	(long,*(long),*(long),long,*(struct(long,long,array(array(*(long))))),*(int),*(long))->(long)
(	O
n	long
,	O
ap	*(long)
,	O
bp	*(long)
,	O
s	array(char)
,	O
M	*(struct(long,long,array(array(*(long)))))
,	O
bitsp	*(int)
,	O
tp	*(long)
)	O
;	O
if	O
(	O
!	O
nn	long
)	O
return	O
success	int
?	O
n	long
:	O
0	int
;	O
n	long
=	O
nn	long
;	O
success	int
=	O
1	int
;	O
}	O
}	O
