char	O
const	O
*	O
progname	*(char)
;	O
void	O
usage	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)->(void)
(	O
FILE	struct
*	O
fp	*(struct(*((*(char),*(void))->(int)),*(void)))
,	O
int	O
status	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*(struct(*((*(char),*(void))->(int)),*(void)))
,	O
"usage: %s [-s SOCKET] COMMAND ARGS...\n"	*(char)
,	O
progname	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*(struct(*((*(char),*(void))->(int)),*(void)))
,	O
"Test tool for accept and pass-fd pies components.\n"	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*(struct(*((*(char),*(void))->(int)),*(void)))
,	O
"Listens on the file descriptor, either 0 or obtained from SOCKET.\n"	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*(struct(*((*(char),*(void))->(int)),*(void)))
,	O
"For each connection, execs COMMAND ARGS as a separate process.\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
status	int
)	O
;	O
}	O
static	O
int	O
listen_socket	(*(char))->(int)
(	O
char	O
const	O
*	O
socket_name	*(char)
)	O
{	O
struct	O
sockaddr_un	struct(short,array(char))
addr	*(char)
;	O
int	O
sockfd	int
;	O
if	O
(	O
strlen	(*(char))->(long)
(	O
socket_name	*(char)
)	O
>	O
sizeof	O
addr	*(char)
.	O
sun_path	array(char)
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: UNIX socket name too long\n"	*(char)
,	O
progname	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
addr	*(char)
.	O
sun_family	short
=	O
AF_UNIX	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
addr	*(char)
.	O
sun_path	array(char)
,	O
socket_name	*(char)
)	O
;	O
sockfd	int
=	O
socket	(int,int,int)->(int)
(	O
PF_UNIX	O
,	O
SOCK_STREAM	int
,	O
0	int
)	O
;	O
if	O
(	O
sockfd	int
==	O
-	O
1	int
)	O
{	O
perror	(*(char))->(void)
(	O
"socket"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
umask	(int)->(int)
(	O
0117	int
)	O
;	O
if	O
(	O
bind	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(int)
(	O
sockfd	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
addr	*(char)
,	O
sizeof	O
(	O
addr	*(char)
)	O
)	O
<	O
0	int
)	O
{	O
perror	(*(char))->(void)
(	O
"bind"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
listen	(int,int)->(int)
(	O
sockfd	int
,	O
8	int
)	O
<	O
0	int
)	O
{	O
perror	(*(char))->(void)
(	O
"listen"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
return	O
sockfd	int
;	O
}	O
static	O
int	O
read_fd	(int)->(int)
(	O
int	O
fd	int
)	O
{	O
struct	O
msghdr	struct(*(void),int,*(struct(*(void),long)),long,*(void),long,int)
msg	struct(*(void),int,*(struct(*(void),long)),long,*(void),long,int)
;	O
struct	O
iovec	struct(*(void),long)
iov	array(struct(*(void),long))
[	O
1	int
]	O
;	O
char	O
base	*(void)
[	O
1	int
]	O
;	O
union	O
{	O
struct	O
cmsghdr	struct(long,int,int,array(char))
cm	struct(long,int,int,array(char))
;	O
char	O
control	array(char)
[	O
CMSG_SPACE	O
(	O
sizeof	O
(	O
int	O
)	O
)	O
]	O
;	O
}	O
control_un	union(struct(long,int,int,array(char)),array(char))
;	O
struct	O
cmsghdr	struct(long,int,int,array(char))
*	O
cmptr	*(struct(long,int,int,array(char)))
;	O
msg	struct(*(void),int,*(struct(*(void),long)),long,*(void),long,int)
.	O
msg_control	*(void)
=	O
control_un	union(struct(long,int,int,array(char)),array(char))
.	O
control	array(char)
;	O
msg	struct(*(void),int,*(struct(*(void),long)),long,*(void),long,int)
.	O
msg_controllen	long
=	O
sizeof	O
(	O
control_un	union(struct(long,int,int,array(char)),array(char))
.	O
control	array(char)
)	O
;	O
msg	struct(*(void),int,*(struct(*(void),long)),long,*(void),long,int)
.	O
msg_name	*(void)
=	O
NULL	O
;	O
msg	struct(*(void),int,*(struct(*(void),long)),long,*(void),long,int)
.	O
msg_namelen	int
=	O
0	int
;	O
iov	array(struct(*(void),long))
[	O
0	int
]	O
.	O
iov_base	*(void)
=	O
base	*(void)
;	O
iov	array(struct(*(void),long))
[	O
0	int
]	O
.	O
iov_len	long
=	O
sizeof	O
(	O
base	*(void)
)	O
;	O
msg	struct(*(void),int,*(struct(*(void),long)),long,*(void),long,int)
.	O
msg_iov	*(struct(*(void),long))
=	O
iov	array(struct(*(void),long))
;	O
msg	struct(*(void),int,*(struct(*(void),long)),long,*(void),long,int)
.	O
msg_iovlen	long
=	O
1	int
;	O
if	O
(	O
recvmsg	(int,*(struct(*(void),int,*(struct(*`,long)),long,*(void),long,int)),int)->(long)
(	O
fd	int
,	O
&	O
msg	struct(*(void),int,*(struct(*(void),long)),long,*(void),long,int)
,	O
0	int
)	O
>	O
0	int
)	O
{	O
if	O
(	O
(	O
cmptr	*(struct(long,int,int,array(char)))
=	O
CMSG_FIRSTHDR	O
(	O
&	O
msg	struct(*(void),int,*(struct(*(void),long)),long,*(void),long,int)
)	O
)	O
!=	O
NULL	O
&&	O
cmptr	*(struct(long,int,int,array(char)))
->	O
cmsg_len	long
==	O
CMSG_LEN	O
(	O
sizeof	O
(	O
int	O
)	O
)	O
&&	O
cmptr	*(struct(long,int,int,array(char)))
->	O
cmsg_level	int
==	O
SOL_SOCKET	int
&&	O
cmptr	*(struct(long,int,int,array(char)))
->	O
cmsg_type	int
==	O
SCM_RIGHTS	int
)	O
return	O
*	O
(	O
(	O
int	O
*	O
)	O
CMSG_DATA	O
(	O
cmptr	*(struct(long,int,int,array(char)))
)	O
)	O
;	O
}	O
return	O
-	O
1	int
;	O
}	O
static	O
int	O
get_fd	(int)->(int)
(	O
int	O
lfd	int
)	O
{	O
int	O
sfd	int
,	O
fd	int
=	O
accept	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),*(int))->(int)
(	O
lfd	int
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
{	O
perror	(*(char))->(void)
(	O
"accept"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
sfd	int
=	O
read_fd	(int)->(int)
(	O
fd	int
)	O
;	O
close	*((*(void))->(int))
(	O
fd	int
)	O
;	O
return	O
sfd	int
;	O
}	O
static	O
void	O
sigchld	(int)->(void)
(	O
int	O
sig	int
)	O
{	O
pid_t	int
pid	int
;	O
while	O
(	O
(	O
pid	int
=	O
waitpid	(int,*(int),int)->(int)
(	O
(	O
pid_t	int
)	O
-	O
1	int
,	O
NULL	O
,	O
WNOHANG	int
)	O
)	O
>=	O
0	int
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
sig	int
,	O
sigchld	(int)->(void)
)	O
;	O
}	O
static	O
void	O
sigquit	(int)->(void)
(	O
int	O
sig	int
)	O
{	O
kill	(int,int)->(int)
(	O
0	int
,	O
sig	int
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
c	long
;	O
int	O
fd	int
;	O
char	O
*	O
socket_name	*(char)
=	O
NULL	O
;	O
progname	*(char)
=	O
argv	*(*(char))
[	O
0	int
]	O
;	O
while	O
(	O
(	O
c	long
=	O
getopt	(int,*(*(char)),*(char))->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
"hs:"	*(char)
)	O
)	O
!=	O
EOF	O
)	O
{	O
switch	O
(	O
c	long
)	O
{	O
case	O
'h'	O
:	O
usage	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)->(void)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
0	int
)	O
;	O
break	O
;	O
case	O
's'	O
:	O
socket_name	*(char)
=	O
optarg	*(char)
;	O
break	O
;	O
default	O
:	O
exit	(int)->(void)
(	O
64	int
)	O
;	O
}	O
}	O
argc	int
-=	O
optind	int
;	O
argv	*(*(char))
+=	O
optind	int
;	O
if	O
(	O
argc	int
==	O
0	int
)	O
usage	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)->(void)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
64	int
)	O
;	O
if	O
(	O
socket_name	*(char)
)	O
{	O
int	O
sfd	int
=	O
listen_socket	(*(char))->(int)
(	O
socket_name	*(char)
)	O
;	O
fd	int
=	O
get_fd	(int)->(int)
(	O
sfd	int
)	O
;	O
close	*((*(void))->(int))
(	O
sfd	int
)	O
;	O
}	O
else	O
fd	int
=	O
0	int
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGCHLD	int
,	O
sigchld	(int)->(void)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGTERM	int
,	O
sigquit	(int)->(void)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGHUP	int
,	O
sigquit	(int)->(void)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGINT	int
,	O
sigquit	(int)->(void)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGQUIT	int
,	O
sigquit	(int)->(void)
)	O
;	O
while	O
(	O
1	int
)	O
{	O
int	O
cfd	int
=	O
accept	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),*(int))->(int)
(	O
fd	int
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
cfd	int
==	O
-	O
1	int
)	O
{	O
perror	(*(char))->(void)
(	O
"accept"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
pid_t	int
pid	int
=	O
fork	()->(int)
(	O
)	O
;	O
if	O
(	O
pid	int
==	O
0	int
)	O
{	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
getmaxfd	O
(	O
)	O
;	O
i	long
>=	O
0	int
;	O
i	long
--	O
)	O
if	O
(	O
i	long
!=	O
cfd	int
)	O
close	*((*(void))->(int))
(	O
i	long
)	O
;	O
if	O
(	O
cfd	int
!=	O
0	int
)	O
dup2	(int,int)->(int)
(	O
cfd	int
,	O
0	int
)	O
;	O
if	O
(	O
cfd	int
!=	O
1	int
)	O
dup2	(int,int)->(int)
(	O
cfd	int
,	O
1	int
)	O
;	O
if	O
(	O
cfd	int
!=	O
2	int
)	O
dup2	(int,int)->(int)
(	O
cfd	int
,	O
2	int
)	O
;	O
if	O
(	O
cfd	int
>	O
2	int
)	O
close	*((*(void))->(int))
(	O
cfd	int
)	O
;	O
execvp	(*(char),array(*(char)))->(int)
(	O
argv	*(*(char))
[	O
0	int
]	O
,	O
argv	*(*(char))
)	O
;	O
exit	(int)->(void)
(	O
127	int
)	O
;	O
}	O
if	O
(	O
pid	int
==	O
-	O
1	int
)	O
{	O
perror	(*(char))->(void)
(	O
"fork"	*(char)
)	O
;	O
}	O
close	*((*(void))->(int))
(	O
cfd	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
