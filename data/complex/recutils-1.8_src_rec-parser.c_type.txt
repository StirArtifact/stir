static	O
int	O
rec_parser_getc	(*(struct))->(int)
(	O
rec_parser_t	*(struct)
parser	*(struct)
)	O
;	O
static	O
int	O
rec_parser_ungetc	(*(struct),int)->(int)
(	O
rec_parser_t	*(struct)
parser	*(struct)
,	O
int	O
ci	int
)	O
;	O
static	O
bool	bool
rec_expect	(*(struct),*(char))->(bool)
(	O
rec_parser_t	*(struct)
parser	*(struct)
,	O
const	O
char	O
*	O
str	*(char)
)	O
;	O
static	O
bool	bool
rec_parse_field_value	(*(struct),*(*(char)))->(bool)
(	O
rec_parser_t	*(struct)
parser	*(struct)
,	O
char	O
*	O
*	O
str	*(char)
)	O
;	O
static	O
bool	bool
rec_parse_comment	(*(struct),*(*(char)))->(bool)
(	O
rec_parser_t	*(struct)
parser	*(struct)
,	O
rec_comment_t	*(char)
*	O
comment	*(char)
)	O
;	O
static	O
bool	bool
rec_parser_digit_p	(char)->(bool)
(	O
char	O
c	int
)	O
;	O
static	O
bool	bool
rec_parser_letter_p	(char)->(bool)
(	O
char	O
c	int
)	O
;	O
static	O
bool	bool
rec_parser_init_common	(*(struct),*(char))->(bool)
(	O
rec_parser_t	*(struct)
parser	*(struct)
,	O
const	O
char	O
*	O
source	*(char)
)	O
;	O
enum	O
rec_parser_error_e	enum(int,int,int,int,int,int,int,int,int)
{	O
REC_PARSER_NOERROR	int
,	O
REC_PARSER_ERROR	int
,	O
REC_PARSER_EUNGETC	int
,	O
REC_PARSER_EFNAME	int
,	O
REC_PARSER_ENOMEM	int
,	O
REC_PARSER_ETOOMUCHNAMEPARTS	int
,	O
REC_PARSER_ECOMMENT	int
,	O
REC_PARSER_EFIELD	int
,	O
REC_PARSER_ERECORD	int
}	O
;	O
struct	O
rec_parser_s	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(char),long,*(char),*(char),*(struct),bool,enum(int,int,int,int,int,int,int,int,int),long,long)
{	O
FILE	struct
*	O
in_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
const	O
char	O
*	O
in_buffer	*(char)
;	O
size_t	long
in_size	long
;	O
const	O
char	O
*	O
p	*(void)
;	O
char	O
*	O
source	*(char)
;	O
rec_record_t	*(struct)
prev_descriptor	*(struct)
;	O
bool	bool
eof	bool
;	O
enum	O
rec_parser_error_e	enum(int,int,int,int,int,int,int,int,int)
error	enum(int,int,int,int,int,int,int,int,int)
;	O
size_t	long
line	long
;	O
size_t	long
character	long
;	O
}	O
;	O
const	O
char	O
*	O
rec_parser_error_strings	array(*(char))
[	O
]	O
=	O
{	O
"no error (unused)"	*(char)
,	O
"unknown error"	*(char)
,	O
"unreading a character"	*(char)
,	O
"expected a field name"	*(char)
,	O
"out of memory"	*(char)
,	O
"too much parts in field name"	*(char)
,	O
"expected a comment"	*(char)
,	O
"expected a field"	*(char)
,	O
"expected a record"	*(char)
,	O
NULL	O
}	O
;	O
rec_parser_t	*(struct)
rec_parser_new	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(*(struct))
(	O
FILE	struct
*	O
in	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
const	O
char	O
*	O
source	*(char)
)	O
{	O
rec_parser_t	*(struct)
parser	*(struct)
;	O
parser	*(struct)
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
rec_parser_s	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(char),long,*(char),*(char),*(struct),bool,enum(int,int,int,int,int,int,int,int,int),long,long)
)	O
)	O
;	O
if	O
(	O
parser	*(struct)
!=	O
NULL	O
)	O
{	O
parser	*(struct)
->	O
in_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
in	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
parser	*(struct)
->	O
in_buffer	*(char)
=	O
NULL	O
;	O
parser	*(struct)
->	O
in_size	long
=	O
0	int
;	O
if	O
(	O
!	O
rec_parser_init_common	(*(struct),*(char))->(bool)
(	O
parser	*(struct)
,	O
source	*(char)
)	O
)	O
{	O
free	(*(void))->(void)
(	O
parser	*(struct)
)	O
;	O
parser	*(struct)
=	O
NULL	O
;	O
}	O
}	O
return	O
parser	*(struct)
;	O
}	O
rec_parser_t	*(struct)
rec_parser_new_str	(*(char),*(char))->(*(struct))
(	O
const	O
char	O
*	O
buffer	*(struct)
,	O
const	O
char	O
*	O
source	*(char)
)	O
{	O
return	O
rec_parser_new_mem	(*(char),long,*(char))->(*(struct))
(	O
buffer	*(struct)
,	O
strlen	(*(char))->(long)
(	O
buffer	*(struct)
)	O
,	O
source	*(char)
)	O
;	O
}	O
rec_parser_t	*(struct)
rec_parser_new_mem	(*(char),long,*(char))->(*(struct))
(	O
const	O
char	O
*	O
buffer	*(struct)
,	O
size_t	long
size	*(long)
,	O
const	O
char	O
*	O
source	*(char)
)	O
{	O
rec_parser_t	*(struct)
parser	*(struct)
;	O
parser	*(struct)
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
rec_parser_s	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(char),long,*(char),*(char),*(struct),bool,enum(int,int,int,int,int,int,int,int,int),long,long)
)	O
)	O
;	O
if	O
(	O
parser	*(struct)
!=	O
NULL	O
)	O
{	O
parser	*(struct)
->	O
in_buffer	*(char)
=	O
buffer	*(struct)
;	O
parser	*(struct)
->	O
in_size	long
=	O
size	*(long)
;	O
parser	*(struct)
->	O
in_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
NULL	O
;	O
if	O
(	O
!	O
rec_parser_init_common	(*(struct),*(char))->(bool)
(	O
parser	*(struct)
,	O
source	*(char)
)	O
)	O
{	O
free	(*(void))->(void)
(	O
parser	*(struct)
)	O
;	O
parser	*(struct)
=	O
NULL	O
;	O
}	O
}	O
return	O
parser	*(struct)
;	O
}	O
void	O
rec_parser_destroy	(*(struct))->(void)
(	O
rec_parser_t	*(struct)
parser	*(struct)
)	O
{	O
if	O
(	O
parser	*(struct)
)	O
{	O
free	(*(void))->(void)
(	O
parser	*(struct)
->	O
source	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
parser	*(struct)
)	O
;	O
}	O
}	O
bool	bool
rec_parser_eof	(*(struct))->(bool)
(	O
rec_parser_t	*(struct)
parser	*(struct)
)	O
{	O
return	O
parser	*(struct)
->	O
eof	bool
;	O
}	O
bool	bool
rec_parser_error	(*(struct))->(bool)
(	O
rec_parser_t	*(struct)
parser	*(struct)
)	O
{	O
return	O
(	O
parser	*(struct)
->	O
error	enum(int,int,int,int,int,int,int,int,int)
!=	O
REC_PARSER_NOERROR	int
)	O
;	O
}	O
void	O
rec_parser_perror	(*(struct),*(char))->(void)
(	O
rec_parser_t	*(struct)
parser	*(struct)
,	O
const	O
char	O
*	O
fmt	*(char)
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
ap	array(struct(int,int,*(void),*(void)))
;	O
char	O
*	O
number_str	*(char)
;	O
va_start	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
fmt	*(char)
)	O
;	O
vfprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),array(struct(int,int,*(void),*(void))))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
fmt	*(char)
,	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
": "	*(char)
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
number_str	*(char)
=	O
NULL	O
;	O
if	O
(	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
number_str	*(char)
,	O
"%zu"	*(char)
,	O
parser	*(struct)
->	O
line	long
)	O
!=	O
-	O
1	int
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
number_str	*(char)
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
free	(*(void))->(void)
(	O
number_str	*(char)
)	O
;	O
}	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
": error: "	*(char)
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
gettext	(*(char))->(*(char))
(	O
rec_parser_error_strings	array(*(char))
[	O
parser	*(struct)
->	O
error	enum(int,int,int,int,int,int,int,int,int)
]	O
)	O
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'\n'	O
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
va_end	O
(	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
}	O
bool	bool
rec_parse_field_name	(*(struct),*(*(char)))->(bool)
(	O
rec_parser_t	*(struct)
parser	*(struct)
,	O
char	O
*	O
*	O
fname	*(char)
)	O
{	O
bool	bool
ret	bool
=	O
true	int
;	O
int	O
ci	int
;	O
size_t	long
str_size	*(long)
;	O
char	O
c	int
;	O
rec_buf_t	*(struct)
buf	*(struct)
;	O
if	O
(	O
rec_parser_eof	(*(struct))->(bool)
(	O
parser	*(struct)
)	O
||	O
rec_parser_error	(*(struct))->(bool)
(	O
parser	*(struct)
)	O
)	O
return	O
false	int
;	O
buf	*(struct)
=	O
rec_buf_new	(*(*(char)),*(long))->(*(struct))
(	O
fname	*(char)
,	O
&	O
str_size	*(long)
)	O
;	O
if	O
(	O
!	O
buf	*(struct)
)	O
{	O
parser	*(struct)
->	O
error	enum(int,int,int,int,int,int,int,int,int)
=	O
REC_PARSER_ENOMEM	int
;	O
return	O
false	int
;	O
}	O
ci	int
=	O
rec_parser_getc	(*(struct))->(int)
(	O
parser	*(struct)
)	O
;	O
if	O
(	O
ci	int
==	O
EOF	O
)	O
ret	bool
=	O
false	int
;	O
else	O
{	O
c	int
=	O
(	O
char	O
)	O
ci	int
;	O
if	O
(	O
(	O
rec_parser_letter_p	(char)->(bool)
(	O
c	int
)	O
)	O
||	O
(	O
c	int
==	O
'%'	O
)	O
)	O
{	O
if	O
(	O
rec_buf_putc	(int,*(struct))->(int)
(	O
c	int
,	O
buf	*(struct)
)	O
==	O
EOF	O
)	O
{	O
parser	*(struct)
->	O
error	enum(int,int,int,int,int,int,int,int,int)
=	O
REC_PARSER_ENOMEM	int
;	O
return	O
false	int
;	O
}	O
}	O
else	O
{	O
parser	*(struct)
->	O
error	enum(int,int,int,int,int,int,int,int,int)
=	O
REC_PARSER_EFNAME	int
;	O
ret	bool
=	O
false	int
;	O
}	O
}	O
if	O
(	O
ret	bool
)	O
{	O
while	O
(	O
(	O
ci	int
=	O
rec_parser_getc	(*(struct))->(int)
(	O
parser	*(struct)
)	O
)	O
!=	O
EOF	O
)	O
{	O
c	int
=	O
(	O
char	O
)	O
ci	int
;	O
if	O
(	O
rec_parser_letter_p	(char)->(bool)
(	O
c	int
)	O
||	O
rec_parser_digit_p	(char)->(bool)
(	O
c	int
)	O
||	O
(	O
c	int
==	O
'_'	O
)	O
)	O
{	O
if	O
(	O
rec_buf_putc	(int,*(struct))->(int)
(	O
c	int
,	O
buf	*(struct)
)	O
==	O
EOF	O
)	O
{	O
parser	*(struct)
->	O
error	enum(int,int,int,int,int,int,int,int,int)
=	O
REC_PARSER_ENOMEM	int
;	O
return	O
false	int
;	O
}	O
if	O
(	O
parser	*(struct)
->	O
error	enum(int,int,int,int,int,int,int,int,int)
>	O
0	int
)	O
break	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
':'	O
)	O
break	O
;	O
else	O
{	O
parser	*(struct)
->	O
error	enum(int,int,int,int,int,int,int,int,int)
=	O
REC_PARSER_EFNAME	int
;	O
ret	bool
=	O
false	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
parser	*(struct)
->	O
eof	bool
)	O
{	O
parser	*(struct)
->	O
error	enum(int,int,int,int,int,int,int,int,int)
=	O
REC_PARSER_EFNAME	int
;	O
ret	bool
=	O
false	int
;	O
}	O
}	O
rec_buf_close	(*(struct))->(void)
(	O
buf	*(struct)
)	O
;	O
if	O
(	O
!	O
ret	bool
)	O
free	(*(void))->(void)
(	O
*	O
fname	*(char)
)	O
;	O
else	O
{	O
ci	int
=	O
rec_parser_getc	(*(struct))->(int)
(	O
parser	*(struct)
)	O
;	O
if	O
(	O
ci	int
!=	O
EOF	O
)	O
{	O
c	int
=	O
(	O
char	O
)	O
ci	int
;	O
if	O
(	O
(	O
c	int
==	O
' '	O
)	O
||	O
(	O
c	int
==	O
'\t'	O
)	O
)	O
parser	*(struct)
->	O
error	enum(int,int,int,int,int,int,int,int,int)
=	O
REC_PARSER_NOERROR	int
;	O
else	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
{	O
parser	*(struct)
->	O
error	enum(int,int,int,int,int,int,int,int,int)
=	O
REC_PARSER_NOERROR	int
;	O
rec_parser_ungetc	(*(struct),int)->(int)
(	O
parser	*(struct)
,	O
c	int
)	O
;	O
}	O
else	O
rec_parser_ungetc	(*(struct),int)->(int)
(	O
parser	*(struct)
,	O
c	int
)	O
;	O
}	O
}	O
return	O
ret	bool
;	O
}	O
void	O
rec_parser_reset	(*(struct))->(void)
(	O
rec_parser_t	*(struct)
parser	*(struct)
)	O
{	O
parser	*(struct)
->	O
eof	bool
=	O
false	int
;	O
parser	*(struct)
->	O
error	enum(int,int,int,int,int,int,int,int,int)
=	O
REC_PARSER_NOERROR	int
;	O
parser	*(struct)
->	O
p	*(void)
=	O
parser	*(struct)
->	O
in_buffer	*(char)
;	O
}	O
bool	bool
rec_parse_field	(*(struct),*(*(struct)))->(bool)
(	O
rec_parser_t	*(struct)
parser	*(struct)
,	O
rec_field_t	*(struct)
*	O
field	*(struct)
)	O
{	O
bool	bool
ret	bool
;	O
rec_field_t	*(struct)
new	*(struct)
;	O
char	O
*	O
field_name	*(char)
;	O
char	O
*	O
field_value	*(char)
;	O
size_t	long
location	long
;	O
size_t	long
char_location	long
;	O
if	O
(	O
rec_parser_eof	(*(struct))->(bool)
(	O
parser	*(struct)
)	O
||	O
rec_parser_error	(*(struct))->(bool)
(	O
parser	*(struct)
)	O
)	O
return	O
false	int
;	O
location	long
=	O
parser	*(struct)
->	O
line	long
;	O
char_location	long
=	O
parser	*(struct)
->	O
character	long
;	O
if	O
(	O
char_location	long
!=	O
0	int
)	O
char_location	long
++	O
;	O
ret	bool
=	O
rec_parse_field_name	(*(struct),*(*(char)))->(bool)
(	O
parser	*(struct)
,	O
&	O
field_name	*(char)
)	O
;	O
if	O
(	O
ret	bool
)	O
{	O
ret	bool
=	O
rec_parse_field_value	(*(struct),*(*(char)))->(bool)
(	O
parser	*(struct)
,	O
&	O
field_value	*(char)
)	O
;	O
if	O
(	O
ret	bool
)	O
{	O
new	*(struct)
=	O
rec_field_new	(*(char),*(char))->(*(struct))
(	O
field_name	*(char)
,	O
field_value	*(char)
)	O
;	O
if	O
(	O
new	*(struct)
==	O
NULL	O
)	O
return	O
false	int
;	O
rec_field_set_source	(*(struct),*(char))->(bool)
(	O
new	*(struct)
,	O
parser	*(struct)
->	O
source	*(char)
)	O
;	O
rec_field_set_location	(*(struct),long)->(bool)
(	O
new	*(struct)
,	O
location	long
)	O
;	O
rec_field_set_char_location	(*(struct),long)->(bool)
(	O
new	*(struct)
,	O
char_location	long
)	O
;	O
*	O
field	*(struct)
=	O
new	*(struct)
;	O
free	(*(void))->(void)
(	O
field_value	*(char)
)	O
;	O
}	O
free	(*(void))->(void)
(	O
field_name	*(char)
)	O
;	O
}	O
return	O
ret	bool
;	O
}	O
bool	bool
rec_parse_record	(*(struct),*(*(struct)))->(bool)
(	O
rec_parser_t	*(struct)
parser	*(struct)
,	O
rec_record_t	*(struct)
*	O
record	*(struct)
)	O
{	O
rec_record_t	*(struct)
new	*(struct)
;	O
rec_field_t	*(struct)
field	*(struct)
;	O
bool	bool
ret	bool
;	O
int	O
ci	int
;	O
char	O
c	int
;	O
rec_comment_t	*(char)
comment	*(char)
;	O
size_t	long
char_location	long
;	O
if	O
(	O
rec_parser_eof	(*(struct))->(bool)
(	O
parser	*(struct)
)	O
||	O
rec_parser_error	(*(struct))->(bool)
(	O
parser	*(struct)
)	O
)	O
return	O
false	int
;	O
new	*(struct)
=	O
rec_record_new	()->(*(struct))
(	O
)	O
;	O
if	O
(	O
!	O
new	*(struct)
)	O
{	O
parser	*(struct)
->	O
error	enum(int,int,int,int,int,int,int,int,int)
=	O
REC_PARSER_ENOMEM	int
;	O
return	O
false	int
;	O
}	O
rec_record_set_source	(*(struct),*(char))->(void)
(	O
new	*(struct)
,	O
parser	*(struct)
->	O
source	*(char)
)	O
;	O
rec_record_set_location	(*(struct),long)->(void)
(	O
new	*(struct)
,	O
parser	*(struct)
->	O
line	long
)	O
;	O
char_location	long
=	O
parser	*(struct)
->	O
character	long
;	O
if	O
(	O
char_location	long
!=	O
0	int
)	O
char_location	long
++	O
;	O
rec_record_set_char_location	(*(struct),long)->(void)
(	O
new	*(struct)
,	O
char_location	long
)	O
;	O
if	O
(	O
rec_parse_field	(*(struct),*(*(struct)))->(bool)
(	O
parser	*(struct)
,	O
&	O
field	*(struct)
)	O
)	O
rec_mset_append	(*(struct),int,*(void),int)->(*(struct))
(	O
rec_record_mset	(*(struct))->(*(struct))
(	O
new	*(struct)
)	O
,	O
MSET_FIELD	int
,	O
(	O
void	O
*	O
)	O
field	*(struct)
,	O
MSET_ANY	int
)	O
;	O
else	O
{	O
parser	*(struct)
->	O
error	enum(int,int,int,int,int,int,int,int,int)
=	O
REC_PARSER_EFIELD	int
;	O
rec_record_destroy	(*(struct))->(void)
(	O
new	*(struct)
)	O
;	O
*	O
record	*(struct)
=	O
NULL	O
;	O
return	O
false	int
;	O
}	O
ret	bool
=	O
true	int
;	O
while	O
(	O
(	O
ci	int
=	O
rec_parser_getc	(*(struct))->(int)
(	O
parser	*(struct)
)	O
)	O
!=	O
EOF	O
)	O
{	O
c	int
=	O
(	O
char	O
)	O
ci	int
;	O
if	O
(	O
c	int
==	O
'#'	O
)	O
{	O
rec_parser_ungetc	(*(struct),int)->(int)
(	O
parser	*(struct)
,	O
ci	int
)	O
;	O
if	O
(	O
rec_parse_comment	(*(struct),*(*(char)))->(bool)
(	O
parser	*(struct)
,	O
&	O
comment	*(char)
)	O
)	O
rec_mset_append	(*(struct),int,*(void),int)->(*(struct))
(	O
rec_record_mset	(*(struct))->(*(struct))
(	O
new	*(struct)
)	O
,	O
MSET_COMMENT	int
,	O
(	O
void	O
*	O
)	O
comment	*(char)
,	O
MSET_ANY	int
)	O
;	O
}	O
else	O
if	O
(	O
(	O
c	int
==	O
' '	O
)	O
||	O
(	O
c	int
==	O
'\t'	O
)	O
)	O
{	O
while	O
(	O
(	O
ci	int
!=	O
EOF	O
)	O
&&	O
(	O
(	O
c	int
==	O
' '	O
)	O
||	O
(	O
c	int
==	O
'\t'	O
)	O
)	O
)	O
{	O
ci	int
=	O
rec_parser_getc	(*(struct))->(int)
(	O
parser	*(struct)
)	O
;	O
c	int
=	O
(	O
char	O
)	O
ci	int
;	O
}	O
if	O
(	O
(	O
ci	int
==	O
EOF	O
)	O
||	O
(	O
c	int
==	O
'\n'	O
)	O
)	O
break	O
;	O
else	O
{	O
parser	*(struct)
->	O
error	enum(int,int,int,int,int,int,int,int,int)
=	O
REC_PARSER_EFIELD	int
;	O
ret	bool
=	O
false	int
;	O
break	O
;	O
}	O
}	O
else	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
break	O
;	O
else	O
{	O
rec_parser_ungetc	(*(struct),int)->(int)
(	O
parser	*(struct)
,	O
ci	int
)	O
;	O
if	O
(	O
rec_parse_field	(*(struct),*(*(struct)))->(bool)
(	O
parser	*(struct)
,	O
&	O
field	*(struct)
)	O
)	O
rec_mset_append	(*(struct),int,*(void),int)->(*(struct))
(	O
rec_record_mset	(*(struct))->(*(struct))
(	O
new	*(struct)
)	O
,	O
MSET_FIELD	int
,	O
(	O
void	O
*	O
)	O
field	*(struct)
,	O
MSET_ANY	int
)	O
;	O
else	O
{	O
parser	*(struct)
->	O
error	enum(int,int,int,int,int,int,int,int,int)
=	O
REC_PARSER_EFIELD	int
;	O
ret	bool
=	O
false	int
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
ret	bool
)	O
*	O
record	*(struct)
=	O
new	*(struct)
;	O
else	O
{	O
rec_record_destroy	(*(struct))->(void)
(	O
new	*(struct)
)	O
;	O
*	O
record	*(struct)
=	O
NULL	O
;	O
}	O
return	O
ret	bool
;	O
}	O
bool	bool
rec_parse_rset	(*(struct),*(*(struct)))->(bool)
(	O
rec_parser_t	*(struct)
parser	*(struct)
,	O
rec_rset_t	*(struct)
*	O
rset	*(struct)
)	O
{	O
bool	bool
ret	bool
;	O
int	O
ci	int
;	O
char	O
c	int
;	O
rec_rset_t	*(struct)
new	*(struct)
;	O
rec_record_t	*(struct)
record	*(struct)
;	O
rec_comment_t	*(char)
comment	*(char)
;	O
size_t	long
comments_added	long
=	O
0	int
;	O
ret	bool
=	O
false	int
;	O
if	O
(	O
(	O
new	*(struct)
=	O
rec_rset_new	()->(*(struct))
(	O
)	O
)	O
==	O
NULL	O
)	O
{	O
parser	*(struct)
->	O
error	enum(int,int,int,int,int,int,int,int,int)
=	O
REC_PARSER_ENOMEM	int
;	O
return	O
false	int
;	O
}	O
rec_rset_set_descriptor	(*(struct),*(struct))->(void)
(	O
new	*(struct)
,	O
parser	*(struct)
->	O
prev_descriptor	*(struct)
)	O
;	O
parser	*(struct)
->	O
prev_descriptor	*(struct)
=	O
NULL	O
;	O
while	O
(	O
(	O
ci	int
=	O
rec_parser_getc	(*(struct))->(int)
(	O
parser	*(struct)
)	O
)	O
!=	O
EOF	O
)	O
{	O
c	int
=	O
(	O
char	O
)	O
ci	int
;	O
if	O
(	O
(	O
c	int
==	O
'\n'	O
)	O
||	O
(	O
c	int
==	O
' '	O
)	O
||	O
(	O
c	int
==	O
'\t'	O
)	O
)	O
continue	O
;	O
else	O
if	O
(	O
c	int
==	O
'#'	O
)	O
{	O
rec_parser_ungetc	(*(struct),int)->(int)
(	O
parser	*(struct)
,	O
c	int
)	O
;	O
rec_parse_comment	(*(struct),*(*(char)))->(bool)
(	O
parser	*(struct)
,	O
&	O
comment	*(char)
)	O
;	O
rec_mset_append	(*(struct),int,*(void),int)->(*(struct))
(	O
rec_rset_mset	(*(struct))->(*(struct))
(	O
new	*(struct)
)	O
,	O
MSET_COMMENT	int
,	O
(	O
void	O
*	O
)	O
comment	*(char)
,	O
MSET_ANY	int
)	O
;	O
comments_added	long
++	O
;	O
}	O
else	O
{	O
rec_parser_ungetc	(*(struct),int)->(int)
(	O
parser	*(struct)
,	O
c	int
)	O
;	O
if	O
(	O
rec_parse_record	(*(struct),*(*(struct)))->(bool)
(	O
parser	*(struct)
,	O
&	O
record	*(struct)
)	O
)	O
{	O
if	O
(	O
rec_record_field_p	(*(struct),*(char))->(bool)
(	O
record	*(struct)
,	O
FNAME	O
(	O
REC_FIELD_REC	int
)	O
)	O
)	O
{	O
if	O
(	O
(	O
rec_rset_num_records	(*(struct))->(long)
(	O
new	*(struct)
)	O
==	O
0	int
)	O
&&	O
(	O
!	O
rec_rset_descriptor	(*(struct))->(*(struct))
(	O
new	*(struct)
)	O
)	O
)	O
{	O
rec_rset_set_descriptor	(*(struct),*(struct))->(void)
(	O
new	*(struct)
,	O
record	*(struct)
)	O
;	O
rec_rset_set_descriptor_pos	(*(struct),long)->(void)
(	O
new	*(struct)
,	O
comments_added	long
)	O
;	O
}	O
else	O
{	O
parser	*(struct)
->	O
prev_descriptor	*(struct)
=	O
record	*(struct)
;	O
ret	bool
=	O
true	int
;	O
break	O
;	O
}	O
}	O
else	O
{	O
rec_record_set_container	(*(struct),*(void))->(void)
(	O
record	*(struct)
,	O
new	*(struct)
)	O
;	O
rec_mset_append	(*(struct),int,*(void),int)->(*(struct))
(	O
rec_rset_mset	(*(struct))->(*(struct))
(	O
new	*(struct)
)	O
,	O
MSET_RECORD	int
,	O
(	O
void	O
*	O
)	O
record	*(struct)
,	O
MSET_ANY	int
)	O
;	O
}	O
}	O
else	O
{	O
parser	*(struct)
->	O
error	enum(int,int,int,int,int,int,int,int,int)
=	O
REC_PARSER_ERECORD	int
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
(	O
parser	*(struct)
->	O
error	enum(int,int,int,int,int,int,int,int,int)
==	O
REC_PARSER_NOERROR	int
)	O
&&	O
(	O
rec_rset_descriptor	(*(struct))->(*(struct))
(	O
new	*(struct)
)	O
||	O
(	O
rec_rset_num_records	(*(struct))->(long)
(	O
new	*(struct)
)	O
>	O
0	int
)	O
)	O
)	O
ret	bool
=	O
true	int
;	O
if	O
(	O
ret	bool
)	O
*	O
rset	*(struct)
=	O
new	*(struct)
;	O
else	O
{	O
rec_rset_destroy	(*(struct))->(void)
(	O
new	*(struct)
)	O
;	O
*	O
rset	*(struct)
=	O
NULL	O
;	O
}	O
return	O
ret	bool
;	O
}	O
bool	bool
rec_parse_db	(*(struct),*(*(struct)))->(bool)
(	O
rec_parser_t	*(struct)
parser	*(struct)
,	O
rec_db_t	*(struct)
*	O
db	*(struct)
)	O
{	O
bool	bool
ret	bool
;	O
rec_rset_t	*(struct)
rset	*(struct)
;	O
rec_db_t	*(struct)
new	*(struct)
;	O
ret	bool
=	O
true	int
;	O
new	*(struct)
=	O
rec_db_new	()->(*(struct))
(	O
)	O
;	O
if	O
(	O
!	O
new	*(struct)
)	O
return	O
false	int
;	O
while	O
(	O
rec_parse_rset	(*(struct),*(*(struct)))->(bool)
(	O
parser	*(struct)
,	O
&	O
rset	*(struct)
)	O
)	O
{	O
if	O
(	O
!	O
rec_db_insert_rset	(*(struct),*(struct),long)->(bool)
(	O
new	*(struct)
,	O
rset	*(struct)
,	O
rec_db_size	(*(struct))->(long)
(	O
new	*(struct)
)	O
)	O
)	O
{	O
parser	*(struct)
->	O
error	enum(int,int,int,int,int,int,int,int,int)
=	O
REC_PARSER_ENOMEM	int
;	O
ret	bool
=	O
false	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
!	O
rec_parser_eof	(*(struct))->(bool)
(	O
parser	*(struct)
)	O
)	O
ret	bool
=	O
false	int
;	O
if	O
(	O
ret	bool
)	O
*	O
db	*(struct)
=	O
new	*(struct)
;	O
return	O
ret	bool
;	O
}	O
char	O
*	O
rec_parse_field_name_str	(*(char))->(*(char))
(	O
const	O
char	O
*	O
str	*(char)
)	O
{	O
rec_parser_t	*(struct)
parser	*(struct)
;	O
char	O
*	O
field_name	*(char)
=	O
NULL	O
;	O
char	O
*	O
str2	*(char)
;	O
size_t	long
str_size	*(long)
;	O
str_size	*(long)
=	O
strlen	(*(char))->(long)
(	O
str	*(char)
)	O
;	O
str2	*(char)
=	O
malloc	(long)->(*(void))
(	O
str_size	*(long)
+	O
2	int
)	O
;	O
if	O
(	O
!	O
str2	*(char)
)	O
return	O
NULL	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
str2	*(char)
,	O
str	*(char)
,	O
str_size	*(long)
)	O
;	O
if	O
(	O
str_size	*(long)
>	O
0	int
&&	O
str2	*(char)
[	O
str_size	*(long)
-	O
1	int
]	O
==	O
':'	O
)	O
str2	*(char)
[	O
str_size	*(long)
]	O
=	O
'\0'	O
;	O
else	O
{	O
str2	*(char)
[	O
str_size	*(long)
]	O
=	O
':'	O
;	O
str2	*(char)
[	O
str_size	*(long)
+	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
parser	*(struct)
=	O
rec_parser_new_str	(*(char),*(char))->(*(struct))
(	O
str2	*(char)
,	O
"dummy"	*(char)
)	O
;	O
if	O
(	O
!	O
rec_parse_field_name	(*(struct),*(*(char)))->(bool)
(	O
parser	*(struct)
,	O
&	O
field_name	*(char)
)	O
)	O
field_name	*(char)
=	O
NULL	O
;	O
if	O
(	O
!	O
rec_parser_eof	(*(struct))->(bool)
(	O
parser	*(struct)
)	O
)	O
{	O
free	(*(void))->(void)
(	O
field_name	*(char)
)	O
;	O
field_name	*(char)
=	O
NULL	O
;	O
}	O
rec_parser_destroy	(*(struct))->(void)
(	O
parser	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
str2	*(char)
)	O
;	O
return	O
field_name	*(char)
;	O
}	O
rec_record_t	*(struct)
rec_parse_record_str	(*(char))->(*(struct))
(	O
const	O
char	O
*	O
str	*(char)
)	O
{	O
rec_parser_t	*(struct)
parser	*(struct)
;	O
rec_record_t	*(struct)
record	*(struct)
;	O
record	*(struct)
=	O
NULL	O
;	O
parser	*(struct)
=	O
rec_parser_new_str	(*(char),*(char))->(*(struct))
(	O
str	*(char)
,	O
"dummy"	*(char)
)	O
;	O
if	O
(	O
parser	*(struct)
)	O
{	O
if	O
(	O
!	O
rec_parse_record	(*(struct),*(*(struct)))->(bool)
(	O
parser	*(struct)
,	O
&	O
record	*(struct)
)	O
)	O
record	*(struct)
=	O
NULL	O
;	O
rec_parser_destroy	(*(struct))->(void)
(	O
parser	*(struct)
)	O
;	O
}	O
return	O
record	*(struct)
;	O
}	O
bool	bool
rec_parser_seek	(*(struct),long,long)->(bool)
(	O
rec_parser_t	*(struct)
parser	*(struct)
,	O
size_t	long
line_number	long
,	O
size_t	long
position	long
)	O
{	O
if	O
(	O
parser	*(struct)
->	O
in_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
if	O
(	O
fseek	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),long,int)->(int)
(	O
parser	*(struct)
->	O
in_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
position	long
,	O
SEEK_SET	int
)	O
)	O
return	O
false	int
;	O
}	O
else	O
if	O
(	O
parser	*(struct)
->	O
in_buffer	*(char)
)	O
{	O
if	O
(	O
position	long
>	O
parser	*(struct)
->	O
in_size	long
)	O
return	O
false	int
;	O
parser	*(struct)
->	O
p	*(void)
=	O
parser	*(struct)
->	O
in_buffer	*(char)
+	O
position	long
;	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"rec_parser_seek: no backend in parser. This is a bug.  Please report it."	*(char)
)	O
;	O
return	O
false	int
;	O
}	O
parser	*(struct)
->	O
line	long
=	O
line_number	long
;	O
parser	*(struct)
->	O
character	long
=	O
position	long
;	O
return	O
true	int
;	O
}	O
long	O
rec_parser_tell	(*(struct))->(long)
(	O
rec_parser_t	*(struct)
parser	*(struct)
)	O
{	O
if	O
(	O
parser	*(struct)
->	O
in_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
return	O
ftell	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
parser	*(struct)
->	O
in_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
else	O
if	O
(	O
parser	*(struct)
->	O
in_buffer	*(char)
)	O
return	O
parser	*(struct)
->	O
p	*(void)
-	O
parser	*(struct)
->	O
in_buffer	*(char)
;	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"rec_parser_seek: no backend in parser. This is a bug.  Please report it."	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
static	O
int	O
rec_parser_getc	(*(struct))->(int)
(	O
rec_parser_t	*(struct)
parser	*(struct)
)	O
{	O
int	O
ci	int
;	O
if	O
(	O
parser	*(struct)
->	O
in_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
ci	int
=	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
parser	*(struct)
->	O
in_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
else	O
if	O
(	O
parser	*(struct)
->	O
in_buffer	*(char)
)	O
{	O
if	O
(	O
parser	*(struct)
->	O
p	*(void)
==	O
parser	*(struct)
->	O
in_buffer	*(char)
+	O
parser	*(struct)
->	O
in_size	long
)	O
ci	int
=	O
EOF	O
;	O
else	O
{	O
ci	int
=	O
*	O
(	O
parser	*(struct)
->	O
p	*(void)
)	O
;	O
parser	*(struct)
->	O
p	*(void)
++	O
;	O
}	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"rec_parser_getc: no backend in parser. This is a bug.  Please report it."	*(char)
)	O
;	O
return	O
EOF	O
;	O
}	O
if	O
(	O
ci	int
==	O
EOF	O
)	O
parser	*(struct)
->	O
eof	bool
=	O
true	int
;	O
else	O
{	O
parser	*(struct)
->	O
character	long
++	O
;	O
if	O
(	O
(	O
(	O
char	O
)	O
ci	int
)	O
==	O
'\n'	O
)	O
parser	*(struct)
->	O
line	long
++	O
;	O
}	O
return	O
ci	int
;	O
}	O
int	O
rec_parser_ungetc	(*(struct),int)->(int)
(	O
rec_parser_t	*(struct)
parser	*(struct)
,	O
int	O
ci	int
)	O
{	O
int	O
res	int
;	O
parser	*(struct)
->	O
character	long
--	O
;	O
if	O
(	O
(	O
(	O
char	O
)	O
ci	int
)	O
==	O
'\n'	O
)	O
parser	*(struct)
->	O
line	long
--	O
;	O
if	O
(	O
parser	*(struct)
->	O
in_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
res	int
=	O
ungetc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
ci	int
,	O
parser	*(struct)
->	O
in_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
res	int
!=	O
ci	int
)	O
parser	*(struct)
->	O
error	enum(int,int,int,int,int,int,int,int,int)
=	O
REC_PARSER_EUNGETC	int
;	O
}	O
else	O
if	O
(	O
parser	*(struct)
->	O
in_buffer	*(char)
)	O
{	O
if	O
(	O
parser	*(struct)
->	O
p	*(void)
>	O
parser	*(struct)
->	O
in_buffer	*(char)
)	O
{	O
res	int
=	O
ci	int
;	O
parser	*(struct)
->	O
p	*(void)
--	O
;	O
}	O
else	O
{	O
res	int
=	O
EOF	O
;	O
parser	*(struct)
->	O
error	enum(int,int,int,int,int,int,int,int,int)
=	O
REC_PARSER_EUNGETC	int
;	O
}	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"rec_parser_ungetc: no backend in parser. This is a bug.  Please report it."	*(char)
)	O
;	O
return	O
EOF	O
;	O
}	O
return	O
res	int
;	O
}	O
static	O
bool	bool
rec_parser_digit_p	(char)->(bool)
(	O
char	O
c	int
)	O
{	O
return	O
(	O
(	O
c	int
>=	O
'0'	O
)	O
&&	O
(	O
c	int
<=	O
'9'	O
)	O
)	O
;	O
}	O
static	O
bool	bool
rec_parser_letter_p	(char)->(bool)
(	O
char	O
c	int
)	O
{	O
return	O
(	O
(	O
(	O
c	int
>=	O
'A'	O
)	O
&&	O
(	O
c	int
<=	O
'Z'	O
)	O
)	O
||	O
(	O
(	O
c	int
>=	O
'a'	O
)	O
&&	O
(	O
c	int
<=	O
'z'	O
)	O
)	O
)	O
;	O
}	O
static	O
bool	bool
rec_expect	(*(struct),*(char))->(bool)
(	O
rec_parser_t	*(struct)
parser	*(struct)
,	O
const	O
char	O
*	O
str	*(char)
)	O
{	O
size_t	long
str_size	*(long)
;	O
size_t	long
counter	long
;	O
bool	bool
found	bool
;	O
int	O
ci	int
;	O
char	O
c	int
;	O
found	bool
=	O
true	int
;	O
str_size	*(long)
=	O
strlen	(*(char))->(long)
(	O
str	*(char)
)	O
;	O
for	O
(	O
counter	long
=	O
0	int
;	O
counter	long
<	O
str_size	*(long)
;	O
counter	long
++	O
)	O
{	O
ci	int
=	O
rec_parser_getc	(*(struct))->(int)
(	O
parser	*(struct)
)	O
;	O
if	O
(	O
ci	int
==	O
EOF	O
)	O
{	O
found	bool
=	O
false	int
;	O
parser	*(struct)
->	O
eof	bool
=	O
true	int
;	O
break	O
;	O
}	O
else	O
{	O
c	int
=	O
(	O
char	O
)	O
ci	int
;	O
if	O
(	O
c	int
!=	O
str	*(char)
[	O
counter	long
]	O
)	O
{	O
rec_parser_ungetc	(*(struct),int)->(int)
(	O
parser	*(struct)
,	O
ci	int
)	O
;	O
found	bool
=	O
false	int
;	O
break	O
;	O
}	O
}	O
}	O
return	O
found	bool
;	O
}	O
static	O
bool	bool
rec_parse_field_value	(*(struct),*(*(char)))->(bool)
(	O
rec_parser_t	*(struct)
parser	*(struct)
,	O
char	O
*	O
*	O
str	*(char)
)	O
{	O
bool	bool
ret	bool
;	O
int	O
ci	int
,	O
ci2	int
;	O
char	O
c	int
,	O
c2	char
;	O
size_t	long
str_size	*(long)
;	O
bool	bool
prev_newline	bool
;	O
rec_buf_t	*(struct)
buf	*(struct)
;	O
if	O
(	O
rec_parser_eof	(*(struct))->(bool)
(	O
parser	*(struct)
)	O
||	O
rec_parser_error	(*(struct))->(bool)
(	O
parser	*(struct)
)	O
)	O
return	O
false	int
;	O
c	int
=	O
'\0'	O
;	O
prev_newline	bool
=	O
false	int
;	O
ret	bool
=	O
true	int
;	O
buf	*(struct)
=	O
rec_buf_new	(*(*(char)),*(long))->(*(struct))
(	O
str	*(char)
,	O
&	O
str_size	*(long)
)	O
;	O
if	O
(	O
!	O
buf	*(struct)
)	O
{	O
parser	*(struct)
->	O
error	enum(int,int,int,int,int,int,int,int,int)
=	O
REC_PARSER_ENOMEM	int
;	O
return	O
false	int
;	O
}	O
while	O
(	O
(	O
ci	int
=	O
rec_parser_getc	(*(struct))->(int)
(	O
parser	*(struct)
)	O
)	O
!=	O
EOF	O
)	O
{	O
c	int
=	O
(	O
char	O
)	O
ci	int
;	O
if	O
(	O
(	O
prev_newline	bool
)	O
&&	O
(	O
c	int
!=	O
'+'	O
)	O
)	O
{	O
rec_parser_ungetc	(*(struct),int)->(int)
(	O
parser	*(struct)
,	O
ci	int
)	O
;	O
rec_buf_rewind	(*(struct),int)->(void)
(	O
buf	*(struct)
,	O
1	int
)	O
;	O
break	O
;	O
}	O
if	O
(	O
c	int
==	O
'\\'	O
)	O
{	O
ci2	int
=	O
rec_parser_getc	(*(struct))->(int)
(	O
parser	*(struct)
)	O
;	O
if	O
(	O
ci2	int
==	O
EOF	O
)	O
{	O
parser	*(struct)
->	O
eof	bool
=	O
true	int
;	O
ret	bool
=	O
false	int
;	O
break	O
;	O
}	O
else	O
{	O
c2	char
=	O
(	O
char	O
)	O
ci2	int
;	O
if	O
(	O
c2	char
==	O
'\n'	O
)	O
{	O
}	O
else	O
{	O
if	O
(	O
rec_buf_putc	(int,*(struct))->(int)
(	O
c	int
,	O
buf	*(struct)
)	O
==	O
EOF	O
)	O
{	O
parser	*(struct)
->	O
error	enum(int,int,int,int,int,int,int,int,int)
=	O
REC_PARSER_ENOMEM	int
;	O
return	O
false	int
;	O
}	O
if	O
(	O
parser	*(struct)
->	O
error	enum(int,int,int,int,int,int,int,int,int)
>	O
0	int
)	O
{	O
break	O
;	O
}	O
if	O
(	O
rec_parser_ungetc	(*(struct),int)->(int)
(	O
parser	*(struct)
,	O
ci2	int
)	O
!=	O
ci2	int
)	O
{	O
ret	bool
=	O
false	int
;	O
break	O
;	O
}	O
}	O
}	O
prev_newline	bool
=	O
false	int
;	O
}	O
else	O
if	O
(	O
c	int
==	O
'+'	O
)	O
{	O
if	O
(	O
prev_newline	bool
)	O
{	O
ci2	int
=	O
rec_parser_getc	(*(struct))->(int)
(	O
parser	*(struct)
)	O
;	O
if	O
(	O
ci2	int
==	O
EOF	O
)	O
{	O
parser	*(struct)
->	O
eof	bool
=	O
true	int
;	O
ret	bool
=	O
false	int
;	O
break	O
;	O
}	O
else	O
{	O
c2	char
=	O
(	O
char	O
)	O
ci2	int
;	O
if	O
(	O
c2	char
!=	O
' '	O
)	O
{	O
if	O
(	O
rec_parser_ungetc	(*(struct),int)->(int)
(	O
parser	*(struct)
,	O
ci2	int
)	O
!=	O
ci2	int
)	O
{	O
ret	bool
=	O
false	int
;	O
break	O
;	O
}	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
rec_buf_putc	(int,*(struct))->(int)
(	O
c	int
,	O
buf	*(struct)
)	O
==	O
EOF	O
)	O
{	O
parser	*(struct)
->	O
error	enum(int,int,int,int,int,int,int,int,int)
=	O
REC_PARSER_ENOMEM	int
;	O
return	O
false	int
;	O
}	O
if	O
(	O
parser	*(struct)
->	O
error	enum(int,int,int,int,int,int,int,int,int)
>	O
0	int
)	O
break	O
;	O
}	O
prev_newline	bool
=	O
false	int
;	O
}	O
else	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
{	O
if	O
(	O
rec_buf_putc	(int,*(struct))->(int)
(	O
c	int
,	O
buf	*(struct)
)	O
==	O
EOF	O
)	O
{	O
parser	*(struct)
->	O
error	enum(int,int,int,int,int,int,int,int,int)
=	O
REC_PARSER_ENOMEM	int
;	O
return	O
false	int
;	O
}	O
if	O
(	O
parser	*(struct)
->	O
error	enum(int,int,int,int,int,int,int,int,int)
>	O
0	int
)	O
break	O
;	O
prev_newline	bool
=	O
true	int
;	O
}	O
else	O
{	O
if	O
(	O
rec_buf_putc	(int,*(struct))->(int)
(	O
c	int
,	O
buf	*(struct)
)	O
==	O
EOF	O
)	O
{	O
parser	*(struct)
->	O
error	enum(int,int,int,int,int,int,int,int,int)
=	O
REC_PARSER_ENOMEM	int
;	O
return	O
false	int
;	O
}	O
if	O
(	O
parser	*(struct)
->	O
error	enum(int,int,int,int,int,int,int,int,int)
>	O
0	int
)	O
break	O
;	O
prev_newline	bool
=	O
false	int
;	O
}	O
}	O
if	O
(	O
ret	bool
)	O
{	O
if	O
(	O
rec_parser_eof	(*(struct))->(bool)
(	O
parser	*(struct)
)	O
&&	O
(	O
c	int
==	O
'\n'	O
)	O
)	O
rec_buf_rewind	(*(struct),int)->(void)
(	O
buf	*(struct)
,	O
1	int
)	O
;	O
}	O
rec_buf_close	(*(struct))->(void)
(	O
buf	*(struct)
)	O
;	O
if	O
(	O
!	O
ret	bool
)	O
free	(*(void))->(void)
(	O
*	O
str	*(char)
)	O
;	O
return	O
ret	bool
;	O
}	O
static	O
bool	bool
rec_parse_comment	(*(struct),*(*(char)))->(bool)
(	O
rec_parser_t	*(struct)
parser	*(struct)
,	O
rec_comment_t	*(char)
*	O
comment	*(char)
)	O
{	O
bool	bool
ret	bool
;	O
rec_buf_t	*(struct)
buf	*(struct)
;	O
char	O
*	O
str	*(char)
;	O
size_t	long
str_size	*(long)
;	O
int	O
ci	int
;	O
char	O
c	int
;	O
ret	bool
=	O
false	int
;	O
buf	*(struct)
=	O
rec_buf_new	(*(*(char)),*(long))->(*(struct))
(	O
&	O
str	*(char)
,	O
&	O
str_size	*(long)
)	O
;	O
if	O
(	O
rec_expect	(*(struct),*(char))->(bool)
(	O
parser	*(struct)
,	O
"#"	*(char)
)	O
)	O
{	O
while	O
(	O
(	O
ci	int
=	O
rec_parser_getc	(*(struct))->(int)
(	O
parser	*(struct)
)	O
)	O
!=	O
EOF	O
)	O
{	O
c	int
=	O
(	O
char	O
)	O
ci	int
;	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
{	O
if	O
(	O
(	O
ci	int
=	O
rec_parser_getc	(*(struct))->(int)
(	O
parser	*(struct)
)	O
)	O
==	O
EOF	O
)	O
break	O
;	O
c	int
=	O
(	O
char	O
)	O
ci	int
;	O
if	O
(	O
c	int
!=	O
'#'	O
)	O
{	O
rec_parser_ungetc	(*(struct),int)->(int)
(	O
parser	*(struct)
,	O
ci	int
)	O
;	O
break	O
;	O
}	O
else	O
c	int
=	O
'\n'	O
;	O
}	O
if	O
(	O
rec_buf_putc	(int,*(struct))->(int)
(	O
c	int
,	O
buf	*(struct)
)	O
==	O
EOF	O
)	O
{	O
parser	*(struct)
->	O
error	enum(int,int,int,int,int,int,int,int,int)
=	O
REC_PARSER_ENOMEM	int
;	O
return	O
false	int
;	O
}	O
}	O
ret	bool
=	O
true	int
;	O
}	O
rec_buf_close	(*(struct))->(void)
(	O
buf	*(struct)
)	O
;	O
if	O
(	O
ret	bool
)	O
*	O
comment	*(char)
=	O
rec_comment_new	(*(char))->(*(char))
(	O
str	*(char)
)	O
;	O
else	O
*	O
comment	*(char)
=	O
NULL	O
;	O
free	(*(void))->(void)
(	O
str	*(char)
)	O
;	O
return	O
ret	bool
;	O
}	O
static	O
bool	bool
rec_parser_init_common	(*(struct),*(char))->(bool)
(	O
rec_parser_t	*(struct)
parser	*(struct)
,	O
const	O
char	O
*	O
source	*(char)
)	O
{	O
if	O
(	O
source	*(char)
)	O
{	O
parser	*(struct)
->	O
source	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
source	*(char)
)	O
;	O
if	O
(	O
!	O
parser	*(struct)
->	O
source	*(char)
)	O
return	O
false	int
;	O
}	O
else	O
parser	*(struct)
->	O
source	*(char)
=	O
NULL	O
;	O
parser	*(struct)
->	O
eof	bool
=	O
false	int
;	O
parser	*(struct)
->	O
error	enum(int,int,int,int,int,int,int,int,int)
=	O
REC_PARSER_NOERROR	int
;	O
parser	*(struct)
->	O
line	long
=	O
1	int
;	O
parser	*(struct)
->	O
character	long
=	O
0	int
;	O
parser	*(struct)
->	O
prev_descriptor	*(struct)
=	O
NULL	O
;	O
parser	*(struct)
->	O
p	*(void)
=	O
parser	*(struct)
->	O
in_buffer	*(char)
;	O
return	O
true	int
;	O
}	O
