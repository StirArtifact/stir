int	O
mu_iterator_create	(*(*(struct)),*(void))->(int)
(	O
mu_iterator_t	*(struct)
*	O
piterator	*(*(struct))
,	O
void	O
*	O
owner	*(void)
)	O
{	O
mu_iterator_t	*(struct)
iterator	*(struct)
;	O
if	O
(	O
piterator	*(*(struct))
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
owner	*(void)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
iterator	*(struct)
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
iterator	*(struct)
)	O
)	O
;	O
if	O
(	O
iterator	*(struct)
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
iterator	*(struct)
->	O
owner	*(void)
=	O
owner	*(void)
;	O
*	O
piterator	*(*(struct))
=	O
iterator	*(struct)
;	O
return	O
0	int
;	O
}	O
int	O
mu_iterator_set_first	(*(struct),*((*(void))->(int)))->(int)
(	O
mu_iterator_t	*(struct)
itr	*(struct)
,	O
int	O
(	O
*	O
first	*((*(void))->(int))
)	O
(	O
void	O
*	O
)	O
)	O
{	O
if	O
(	O
!	O
itr	*(struct)
)	O
return	O
EINVAL	int
;	O
itr	*(struct)
->	O
first	*((*(void))->(int))
=	O
first	*((*(void))->(int))
;	O
return	O
0	int
;	O
}	O
int	O
mu_iterator_set_next	(*(struct),*((*(void))->(int)))->(int)
(	O
mu_iterator_t	*(struct)
itr	*(struct)
,	O
int	O
(	O
*	O
next	*((*(void))->(int))
)	O
(	O
void	O
*	O
)	O
)	O
{	O
if	O
(	O
!	O
itr	*(struct)
)	O
return	O
EINVAL	int
;	O
itr	*(struct)
->	O
next	*((*(void))->(int))
=	O
next	*((*(void))->(int))
;	O
return	O
0	int
;	O
}	O
int	O
mu_iterator_set_getitem	(*(struct),*((*(void),*(*(void)),*(*(void)))->(int)))->(int)
(	O
mu_iterator_t	*(struct)
itr	*(struct)
,	O
int	O
(	O
*	O
getitem	*((*(void),*(*(void)),*(*(void)))->(int))
)	O
(	O
void	O
*	O
,	O
void	O
*	O
*	O
,	O
const	O
void	O
*	O
*	O
)	O
)	O
{	O
if	O
(	O
!	O
itr	*(struct)
)	O
return	O
EINVAL	int
;	O
itr	*(struct)
->	O
getitem	*((*(void),*(*(void)),*(*(void)))->(int))
=	O
getitem	*((*(void),*(*(void)),*(*(void)))->(int))
;	O
return	O
0	int
;	O
}	O
int	O
mu_iterator_set_finished_p	(*(struct),*((*(void))->(int)))->(int)
(	O
mu_iterator_t	*(struct)
itr	*(struct)
,	O
int	O
(	O
*	O
finished_p	*((*(void))->(int))
)	O
(	O
void	O
*	O
)	O
)	O
{	O
if	O
(	O
!	O
itr	*(struct)
)	O
return	O
EINVAL	int
;	O
itr	*(struct)
->	O
finished_p	*((*(void))->(int))
=	O
finished_p	*((*(void))->(int))
;	O
return	O
0	int
;	O
}	O
int	O
mu_iterator_set_delitem	(*(struct),*((*(void),*(void))->(int)))->(int)
(	O
mu_iterator_t	*(struct)
itr	*(struct)
,	O
int	O
(	O
*	O
delitem	*((*(void),*(void))->(int))
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
)	O
{	O
if	O
(	O
!	O
itr	*(struct)
)	O
return	O
EINVAL	int
;	O
itr	*(struct)
->	O
delitem	*((*(void),*(void))->(int))
=	O
delitem	*((*(void),*(void))->(int))
;	O
return	O
0	int
;	O
}	O
int	O
mu_iterator_set_itrctl	(*(struct),*((*(void),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int)))->(int)
(	O
mu_iterator_t	*(struct)
itr	*(struct)
,	O
int	O
(	O
*	O
itrctl	*((*(void),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int))
)	O
(	O
void	O
*	O
,	O
enum	O
mu_itrctl_req	enum(int,int,int,int,int,int,int,int,int,int)
,	O
void	O
*	O
)	O
)	O
{	O
if	O
(	O
!	O
itr	*(struct)
)	O
return	O
EINVAL	int
;	O
itr	*(struct)
->	O
itrctl	*((*(void),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int))
=	O
itrctl	*((*(void),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int))
;	O
return	O
0	int
;	O
}	O
int	O
mu_iterator_set_dataptr	(*(struct),*((*(void))->(*(void))))->(int)
(	O
mu_iterator_t	*(struct)
itr	*(struct)
,	O
void	O
*	O
(	O
*	O
dataptr	*((*(void))->(*(void)))
)	O
(	O
void	O
*	O
)	O
)	O
{	O
if	O
(	O
!	O
itr	*(struct)
)	O
return	O
EINVAL	int
;	O
itr	*(struct)
->	O
dataptr	*((*(void))->(*(void)))
=	O
dataptr	*((*(void))->(*(void)))
;	O
return	O
0	int
;	O
}	O
int	O
mu_iterator_set_destroy	(*(struct),*((*(struct),*(void))->(int)))->(int)
(	O
mu_iterator_t	*(struct)
itr	*(struct)
,	O
int	O
(	O
*	O
destroy	*((*(struct),*(void))->(int))
)	O
(	O
mu_iterator_t	*(struct)
,	O
void	O
*	O
)	O
)	O
{	O
if	O
(	O
!	O
itr	*(struct)
)	O
return	O
EINVAL	int
;	O
itr	*(struct)
->	O
destroy	*((*(struct),*(void))->(int))
=	O
destroy	*((*(struct),*(void))->(int))
;	O
return	O
0	int
;	O
}	O
int	O
mu_iterator_set_dup	(*(struct),*((*(*(void)),*(void))->(int)))->(int)
(	O
mu_iterator_t	*(struct)
itr	*(struct)
,	O
int	O
(	O
*	O
dup	*((*(*(void)),*(void))->(int))
)	O
(	O
void	O
*	O
*	O
ptr	*(*(void))
,	O
void	O
*	O
data	*(void)
)	O
)	O
{	O
if	O
(	O
!	O
itr	*(struct)
)	O
return	O
EINVAL	int
;	O
itr	*(struct)
->	O
dup	*((*(*(void)),*(void))->(int))
=	O
dup	*((*(*(void)),*(void))->(int))
;	O
return	O
0	int
;	O
}	O
int	O
mu_iterator_dup	(*(*(struct)),*(struct))->(int)
(	O
mu_iterator_t	*(struct)
*	O
piterator	*(*(struct))
,	O
mu_iterator_t	*(struct)
orig	*(struct)
)	O
{	O
mu_iterator_t	*(struct)
iterator	*(struct)
;	O
int	O
status	int
;	O
if	O
(	O
piterator	*(*(struct))
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
orig	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
status	int
=	O
mu_iterator_create	(*(*(struct)),*(void))->(int)
(	O
&	O
iterator	*(struct)
,	O
orig	*(struct)
->	O
owner	*(void)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
orig	*(struct)
->	O
dup	*((*(*(void)),*(void))->(int))
(	O
&	O
iterator	*(struct)
->	O
owner	*(void)
,	O
orig	*(struct)
->	O
owner	*(void)
)	O
;	O
if	O
(	O
status	int
)	O
{	O
free	(*(void))->(void)
(	O
iterator	*(struct)
)	O
;	O
return	O
status	int
;	O
}	O
iterator	*(struct)
->	O
is_advanced	int
=	O
orig	*(struct)
->	O
is_advanced	int
;	O
iterator	*(struct)
->	O
dup	*((*(*(void)),*(void))->(int))
=	O
orig	*(struct)
->	O
dup	*((*(*(void)),*(void))->(int))
;	O
iterator	*(struct)
->	O
destroy	*((*(struct),*(void))->(int))
=	O
orig	*(struct)
->	O
destroy	*((*(struct),*(void))->(int))
;	O
iterator	*(struct)
->	O
first	*((*(void))->(int))
=	O
orig	*(struct)
->	O
first	*((*(void))->(int))
;	O
iterator	*(struct)
->	O
next	*((*(void))->(int))
=	O
orig	*(struct)
->	O
next	*((*(void))->(int))
;	O
iterator	*(struct)
->	O
getitem	*((*(void),*(*(void)),*(*(void)))->(int))
=	O
orig	*(struct)
->	O
getitem	*((*(void),*(*(void)),*(*(void)))->(int))
;	O
iterator	*(struct)
->	O
delitem	*((*(void),*(void))->(int))
=	O
orig	*(struct)
->	O
delitem	*((*(void),*(void))->(int))
;	O
iterator	*(struct)
->	O
finished_p	*((*(void))->(int))
=	O
orig	*(struct)
->	O
finished_p	*((*(void))->(int))
;	O
iterator	*(struct)
->	O
itrctl	*((*(void),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int))
=	O
orig	*(struct)
->	O
itrctl	*((*(void),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int))
;	O
*	O
piterator	*(*(struct))
=	O
iterator	*(struct)
;	O
return	O
0	int
;	O
}	O
void	O
mu_iterator_destroy	(*(*(struct)))->(void)
(	O
mu_iterator_t	*(struct)
*	O
piterator	*(*(struct))
)	O
{	O
if	O
(	O
!	O
piterator	*(*(struct))
||	O
!	O
*	O
piterator	*(*(struct))
)	O
return	O
;	O
if	O
(	O
(	O
*	O
piterator	*(*(struct))
)	O
->	O
destroy	*((*(struct),*(void))->(int))
)	O
(	O
*	O
piterator	*(*(struct))
)	O
->	O
destroy	*((*(struct),*(void))->(int))
(	O
*	O
piterator	*(*(struct))
,	O
(	O
*	O
piterator	*(*(struct))
)	O
->	O
owner	*(void)
)	O
;	O
free	(*(void))->(void)
(	O
*	O
piterator	*(*(struct))
)	O
;	O
*	O
piterator	*(*(struct))
=	O
NULL	O
;	O
}	O
int	O
mu_iterator_first	(*(struct))->(int)
(	O
mu_iterator_t	*(struct)
iterator	*(struct)
)	O
{	O
iterator	*(struct)
->	O
is_advanced	int
=	O
0	int
;	O
return	O
iterator	*(struct)
->	O
first	*((*(void))->(int))
(	O
iterator	*(struct)
->	O
owner	*(void)
)	O
;	O
}	O
int	O
mu_iterator_next	(*(struct))->(int)
(	O
mu_iterator_t	*(struct)
iterator	*(struct)
)	O
{	O
int	O
status	int
=	O
0	int
;	O
if	O
(	O
!	O
iterator	*(struct)
->	O
is_advanced	int
)	O
status	int
=	O
iterator	*(struct)
->	O
next	*((*(void))->(int))
(	O
iterator	*(struct)
->	O
owner	*(void)
)	O
;	O
iterator	*(struct)
->	O
is_advanced	int
=	O
0	int
;	O
return	O
status	int
;	O
}	O
int	O
mu_iterator_skip	(*(struct),long)->(int)
(	O
mu_iterator_t	*(struct)
iterator	*(struct)
,	O
ssize_t	long
count	long
)	O
{	O
int	O
status	int
;	O
if	O
(	O
count	long
<	O
0	int
)	O
return	O
ENOSYS	int
;	O
while	O
(	O
count	long
--	O
)	O
if	O
(	O
(	O
status	int
=	O
mu_iterator_next	(*(struct))->(int)
(	O
iterator	*(struct)
)	O
)	O
)	O
break	O
;	O
return	O
status	int
;	O
}	O
int	O
mu_iterator_skip_while	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
mu_iterator_t	*(struct)
iterator	*(struct)
,	O
int	O
(	O
*	O
pred	*((*(void),*(void))->(int))
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
data	*(void)
)	O
{	O
int	O
status	int
;	O
if	O
(	O
!	O
iterator	*(struct)
||	O
!	O
pred	*((*(void),*(void))->(int))
)	O
return	O
EINVAL	int
;	O
do	O
{	O
if	O
(	O
(	O
status	int
=	O
mu_iterator_next	(*(struct))->(int)
(	O
iterator	*(struct)
)	O
)	O
==	O
0	int
)	O
{	O
void	O
*	O
item	*(void)
;	O
if	O
(	O
(	O
status	int
=	O
mu_iterator_current	(*(struct),*(*(void)))->(int)
(	O
iterator	*(struct)
,	O
&	O
item	*(void)
)	O
)	O
==	O
0	int
)	O
if	O
(	O
!	O
pred	*((*(void),*(void))->(int))
(	O
item	*(void)
,	O
data	*(void)
)	O
)	O
break	O
;	O
}	O
}	O
while	O
(	O
status	int
==	O
0	int
)	O
;	O
return	O
status	int
;	O
}	O
int	O
mu_iterator_skip_until	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
mu_iterator_t	*(struct)
iterator	*(struct)
,	O
int	O
(	O
*	O
pred	*((*(void),*(void))->(int))
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
data	*(void)
)	O
{	O
int	O
status	int
;	O
if	O
(	O
!	O
iterator	*(struct)
||	O
!	O
pred	*((*(void),*(void))->(int))
)	O
return	O
EINVAL	int
;	O
do	O
{	O
if	O
(	O
(	O
status	int
=	O
mu_iterator_next	(*(struct))->(int)
(	O
iterator	*(struct)
)	O
)	O
==	O
0	int
)	O
{	O
void	O
*	O
item	*(void)
;	O
if	O
(	O
(	O
status	int
=	O
mu_iterator_current	(*(struct),*(*(void)))->(int)
(	O
iterator	*(struct)
,	O
&	O
item	*(void)
)	O
)	O
==	O
0	int
)	O
if	O
(	O
pred	*((*(void),*(void))->(int))
(	O
item	*(void)
,	O
data	*(void)
)	O
)	O
break	O
;	O
}	O
}	O
while	O
(	O
status	int
==	O
0	int
)	O
;	O
return	O
status	int
;	O
}	O
int	O
mu_iterator_current	(*(struct),*(*(void)))->(int)
(	O
mu_iterator_t	*(struct)
iterator	*(struct)
,	O
void	O
*	O
*	O
pitem	*(*(void))
)	O
{	O
return	O
mu_iterator_current_kv	(*(struct),*(*(void)),*(*(void)))->(int)
(	O
iterator	*(struct)
,	O
NULL	O
,	O
pitem	*(*(void))
)	O
;	O
}	O
int	O
mu_iterator_current_kv	(*(struct),*(*(void)),*(*(void)))->(int)
(	O
mu_iterator_t	*(struct)
iterator	*(struct)
,	O
const	O
void	O
*	O
*	O
pkey	*(*(void))
,	O
void	O
*	O
*	O
pitem	*(*(void))
)	O
{	O
void	O
*	O
ptr	*(*(void))
;	O
int	O
rc	int
=	O
iterator	*(struct)
->	O
getitem	*((*(void),*(*(void)),*(*(void)))->(int))
(	O
iterator	*(struct)
->	O
owner	*(void)
,	O
&	O
ptr	*(*(void))
,	O
pkey	*(*(void))
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
iterator	*(struct)
->	O
dataptr	*((*(void))->(*(void)))
)	O
*	O
pitem	*(*(void))
=	O
iterator	*(struct)
->	O
dataptr	*((*(void))->(*(void)))
(	O
ptr	*(*(void))
)	O
;	O
else	O
*	O
pitem	*(*(void))
=	O
ptr	*(*(void))
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_iterator_is_done	(*(struct))->(int)
(	O
mu_iterator_t	*(struct)
iterator	*(struct)
)	O
{	O
if	O
(	O
iterator	*(struct)
==	O
NULL	O
)	O
return	O
1	int
;	O
return	O
iterator	*(struct)
->	O
finished_p	*((*(void))->(int))
(	O
iterator	*(struct)
->	O
owner	*(void)
)	O
;	O
}	O
int	O
iterator_get_owner	(*(struct(*(struct(*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(void),int,*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),*`)->(int)),*((*`)->(*`)))),*(*(void)))->(int)
(	O
mu_iterator_t	*(struct)
iterator	*(struct)
,	O
void	O
*	O
*	O
powner	*(*(void))
)	O
{	O
if	O
(	O
!	O
iterator	*(struct)
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
powner	*(*(void))
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
*	O
powner	*(*(void))
=	O
iterator	*(struct)
->	O
owner	*(void)
;	O
return	O
0	int
;	O
}	O
void	O
mu_iterator_delitem	(*(struct),*(void))->(void)
(	O
mu_iterator_t	*(struct)
iterator	*(struct)
,	O
void	O
*	O
itm	*(void)
)	O
{	O
for	O
(	O
;	O
iterator	*(struct)
;	O
iterator	*(struct)
=	O
iterator	*(struct)
->	O
next_itr	*(struct(*(struct(*(struct`),*(void),int,*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),*`)->(int)),*((*`)->(*`)))),*(void),int,*((*(*`),*(void))->(int)),*((*(struct`),*(void))->(int)),*((*(void))->(int)),*((*(void))->(int)),*((*(void),*(*`),*(*`))->(int)),*((*(void),*(void))->(int)),*((*(void))->(int)),*((*(void),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int)),*((*(void))->(*(void)))))
)	O
{	O
if	O
(	O
iterator	*(struct)
->	O
delitem	*((*(void),*(void))->(int))
)	O
{	O
switch	O
(	O
iterator	*(struct)
->	O
delitem	*((*(void),*(void))->(int))
(	O
iterator	*(struct)
->	O
owner	*(void)
,	O
itm	*(void)
)	O
)	O
{	O
case	O
MU_ITR_DELITEM_NEXT	int
:	O
iterator	*(struct)
->	O
next	*((*(void))->(int))
(	O
iterator	*(struct)
->	O
owner	*(void)
)	O
;	O
case	O
MU_ITR_DELITEM_ADVANCE	int
:	O
iterator	*(struct)
->	O
is_advanced	int
++	O
;	O
}	O
}	O
}	O
}	O
int	O
mu_iterator_attach	(*(*(struct)),*(struct))->(int)
(	O
mu_iterator_t	*(struct)
*	O
root	*(*(struct))
,	O
mu_iterator_t	*(struct)
iterator	*(struct)
)	O
{	O
iterator	*(struct)
->	O
next_itr	*(struct(*(struct(*(struct`),*(void),int,*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),*`)->(int)),*((*`)->(*`)))),*(void),int,*((*(*`),*(void))->(int)),*((*(struct`),*(void))->(int)),*((*(void))->(int)),*((*(void))->(int)),*((*(void),*(*`),*(*`))->(int)),*((*(void),*(void))->(int)),*((*(void))->(int)),*((*(void),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int)),*((*(void))->(*(void)))))
=	O
*	O
root	*(*(struct))
;	O
*	O
root	*(*(struct))
=	O
iterator	*(struct)
;	O
return	O
0	int
;	O
}	O
int	O
mu_iterator_detach	(*(*(struct)),*(struct))->(int)
(	O
mu_iterator_t	*(struct)
*	O
root	*(*(struct))
,	O
mu_iterator_t	*(struct)
iterator	*(struct)
)	O
{	O
mu_iterator_t	*(struct)
itr	*(struct)
,	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
for	O
(	O
itr	*(struct)
=	O
*	O
root	*(*(struct))
,	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
NULL	O
;	O
itr	*(struct)
;	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
itr	*(struct)
,	O
itr	*(struct)
=	O
itr	*(struct)
->	O
next_itr	*(struct(*(struct(*(struct`),*(void),int,*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),*`)->(int)),*((*`)->(*`)))),*(void),int,*((*(*`),*(void))->(int)),*((*(struct`),*(void))->(int)),*((*(void))->(int)),*((*(void))->(int)),*((*(void),*(*`),*(*`))->(int)),*((*(void),*(void))->(int)),*((*(void))->(int)),*((*(void),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int)),*((*(void))->(*(void)))))
)	O
if	O
(	O
iterator	*(struct)
==	O
itr	*(struct)
)	O
break	O
;	O
if	O
(	O
itr	*(struct)
)	O
{	O
if	O
(	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
)	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
next_itr	*(struct(*(struct(*(struct`),*(void),int,*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),*`)->(int)),*((*`)->(*`)))),*(void),int,*((*(*`),*(void))->(int)),*((*(struct`),*(void))->(int)),*((*(void))->(int)),*((*(void))->(int)),*((*(void),*(*`),*(*`))->(int)),*((*(void),*(void))->(int)),*((*(void))->(int)),*((*(void),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int)),*((*(void))->(*(void)))))
=	O
itr	*(struct)
->	O
next_itr	*(struct(*(struct(*(struct`),*(void),int,*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),*`)->(int)),*((*`)->(*`)))),*(void),int,*((*(*`),*(void))->(int)),*((*(struct`),*(void))->(int)),*((*(void))->(int)),*((*(void))->(int)),*((*(void),*(*`),*(*`))->(int)),*((*(void),*(void))->(int)),*((*(void))->(int)),*((*(void),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int)),*((*(void))->(*(void)))))
;	O
else	O
*	O
root	*(*(struct))
=	O
itr	*(struct)
->	O
next_itr	*(struct(*(struct(*(struct`),*(void),int,*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),*`)->(int)),*((*`)->(*`)))),*(void),int,*((*(*`),*(void))->(int)),*((*(struct`),*(void))->(int)),*((*(void))->(int)),*((*(void))->(int)),*((*(void),*(*`),*(*`))->(int)),*((*(void),*(void))->(int)),*((*(void))->(int)),*((*(void),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int)),*((*(void))->(*(void)))))
;	O
}	O
return	O
0	int
;	O
}	O
int	O
mu_iterator_ctl	(*(struct),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int)
(	O
mu_iterator_t	*(struct)
iterator	*(struct)
,	O
enum	O
mu_itrctl_req	enum(int,int,int,int,int,int,int,int,int,int)
req	enum(int,int,int,int,int,int,int,int,int,int)
,	O
void	O
*	O
arg	*(void)
)	O
{	O
if	O
(	O
!	O
iterator	*(struct)
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
iterator	*(struct)
->	O
itrctl	*((*(void),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int))
)	O
return	O
ENOSYS	int
;	O
return	O
iterator	*(struct)
->	O
itrctl	*((*(void),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int))
(	O
iterator	*(struct)
->	O
owner	*(void)
,	O
req	enum(int,int,int,int,int,int,int,int,int,int)
,	O
arg	*(void)
)	O
;	O
}	O
