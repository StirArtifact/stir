public	O
char	O
*	O
every_first_cmd	*(char)
=	O
NULL	O
;	O
public	O
int	O
new_file	int
;	O
public	O
int	O
is_tty	int
;	O
public	O
IFILE	O
curr_ifile	*(void)
=	O
NULL_IFILE	O
;	O
public	O
IFILE	O
old_ifile	*(void)
=	O
NULL_IFILE	O
;	O
public	O
struct	O
scrpos	struct(long,int)
initial_scrpos	struct(long,int)
;	O
public	O
int	O
any_display	int
=	O
FALSE	int
;	O
public	O
POSITION	long
start_attnpos	long
=	O
NULL_POSITION	O
;	O
public	O
POSITION	long
end_attnpos	long
=	O
NULL_POSITION	O
;	O
public	O
int	O
wscroll	int
;	O
public	O
char	O
*	O
progname	*(char)
;	O
public	O
int	O
quitting	int
;	O
public	O
int	O
secure	int
;	O
public	O
int	O
dohelp	int
;	O
public	O
int	O
logfile	int
=	O
-	O
1	int
;	O
public	O
int	O
force_logfile	int
=	O
FALSE	int
;	O
public	O
char	O
*	O
namelogfile	*(char)
=	O
NULL	O
;	O
public	O
char	O
*	O
editor	*(char)
;	O
public	O
char	O
*	O
editproto	*(char)
;	O
extern	O
char	O
*	O
tags	*(char)
;	O
extern	O
char	O
*	O
tagoption	*(char)
;	O
extern	O
int	O
jump_sline	int
;	O
public	O
int	O
line_count	int
;	O
extern	O
int	O
less_is_more	int
;	O
extern	O
int	O
missing_cap	int
;	O
extern	O
int	O
know_dumb	int
;	O
extern	O
int	O
pr_type	int
;	O
extern	O
int	O
quit_if_one_screen	int
;	O
int	O
main	(int,array(*(char)))->(int)
(	O
argc	int
,	O
argv	array(*(char))
)	O
int	O
argc	int
;	O
char	O
*	O
argv	array(*(char))
[	O
]	O
;	O
{	O
IFILE	O
ifile	*(void)
;	O
char	O
*	O
s	*(char)
;	O
progname	*(char)
=	O
*	O
argv	array(*(char))
++	O
;	O
argc	int
--	O
;	O
secure	int
=	O
0	int
;	O
s	*(char)
=	O
lgetenv	(*(char))->(*(char))
(	O
"LESSSECURE"	*(char)
)	O
;	O
if	O
(	O
s	*(char)
!=	O
NULL	O
&&	O
*	O
s	*(char)
!=	O
'\0'	O
)	O
secure	int
=	O
1	int
;	O
is_tty	int
=	O
isatty	(int)->(int)
(	O
1	int
)	O
;	O
init_cmds	()->(void)
(	O
)	O
;	O
get_term	()->(void)
(	O
)	O
;	O
expand_cmd_tables	()->(void)
(	O
)	O
;	O
init_charset	()->(void)
(	O
)	O
;	O
init_line	()->(void)
(	O
)	O
;	O
init_cmdhist	()->(void)
(	O
)	O
;	O
init_option	()->(void)
(	O
)	O
;	O
init_search	()->(void)
(	O
)	O
;	O
for	O
(	O
s	*(char)
=	O
progname	*(char)
+	O
strlen	(*(char))->(long)
(	O
progname	*(char)
)	O
;	O
s	*(char)
>	O
progname	*(char)
;	O
s	*(char)
--	O
)	O
{	O
if	O
(	O
s	*(char)
[	O
-	O
1	int
]	O
==	O
PATHNAME_SEP	*(char)
[	O
0	int
]	O
)	O
break	O
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
s	*(char)
,	O
"more"	*(char)
)	O
==	O
0	int
)	O
less_is_more	int
=	O
1	int
;	O
init_prompt	()->(void)
(	O
)	O
;	O
s	*(char)
=	O
lgetenv	(*(char))->(*(char))
(	O
less_is_more	int
?	O
"MORE"	*(char)
:	O
"LESS"	*(char)
)	O
;	O
if	O
(	O
s	*(char)
!=	O
NULL	O
)	O
scan_option	(*(char))->(void)
(	O
save	(*(char))->(*(char))
(	O
s	*(char)
)	O
)	O
;	O
while	O
(	O
argc	int
>	O
0	int
&&	O
(	O
isoptstring	O
(	O
*	O
argv	array(*(char))
)	O
||	O
isoptpending	()->(int)
(	O
)	O
)	O
)	O
{	O
s	*(char)
=	O
*	O
argv	array(*(char))
++	O
;	O
argc	int
--	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
s	*(char)
,	O
"--"	*(char)
)	O
==	O
0	int
)	O
break	O
;	O
scan_option	(*(char))->(void)
(	O
s	*(char)
)	O
;	O
}	O
if	O
(	O
isoptpending	()->(int)
(	O
)	O
)	O
{	O
nopendopt	()->(void)
(	O
)	O
;	O
quit	(int)->(void)
(	O
QUIT_OK	int
)	O
;	O
}	O
editor	*(char)
=	O
lgetenv	(*(char))->(*(char))
(	O
"VISUAL"	*(char)
)	O
;	O
if	O
(	O
editor	*(char)
==	O
NULL	O
||	O
*	O
editor	*(char)
==	O
'\0'	O
)	O
{	O
editor	*(char)
=	O
lgetenv	(*(char))->(*(char))
(	O
"EDITOR"	*(char)
)	O
;	O
if	O
(	O
editor	*(char)
==	O
NULL	O
||	O
*	O
editor	*(char)
==	O
'\0'	O
)	O
editor	*(char)
=	O
EDIT_PGM	*(char)
;	O
}	O
editproto	*(char)
=	O
lgetenv	(*(char))->(*(char))
(	O
"LESSEDIT"	*(char)
)	O
;	O
if	O
(	O
editproto	*(char)
==	O
NULL	O
||	O
*	O
editproto	*(char)
==	O
'\0'	O
)	O
editproto	*(char)
=	O
"%E ?lm+%lm. %f"	*(char)
;	O
ifile	*(void)
=	O
NULL_IFILE	O
;	O
if	O
(	O
dohelp	int
)	O
ifile	*(void)
=	O
get_ifile	(*(char),*(void))->(*(void))
(	O
FAKE_HELPFILE	*(char)
,	O
ifile	*(void)
)	O
;	O
while	O
(	O
argc	int
--	O
>	O
0	int
)	O
{	O
(	O
void	O
)	O
get_ifile	(*(char),*(void))->(*(void))
(	O
*	O
argv	array(*(char))
++	O
,	O
ifile	*(void)
)	O
;	O
ifile	*(void)
=	O
prev_ifile	(*(void))->(*(void))
(	O
NULL_IFILE	O
)	O
;	O
}	O
if	O
(	O
!	O
is_tty	int
)	O
{	O
SET_BINARY	O
(	O
1	int
)	O
;	O
if	O
(	O
nifile	()->(int)
(	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
edit_stdin	()->(int)
(	O
)	O
==	O
0	int
)	O
cat_file	()->(void)
(	O
)	O
;	O
}	O
else	O
if	O
(	O
edit_first	()->(int)
(	O
)	O
==	O
0	int
)	O
{	O
do	O
{	O
cat_file	()->(void)
(	O
)	O
;	O
}	O
while	O
(	O
edit_next	(int)->(int)
(	O
1	int
)	O
==	O
0	int
)	O
;	O
}	O
quit	(int)->(void)
(	O
QUIT_OK	int
)	O
;	O
}	O
if	O
(	O
missing_cap	int
&&	O
!	O
know_dumb	int
)	O
error	(*(char),*(union(*(char),int,long)))->(void)
(	O
"WARNING: terminal is not fully functional"	*(char)
,	O
NULL_PARG	O
)	O
;	O
init_mark	()->(void)
(	O
)	O
;	O
open_getchr	()->(void)
(	O
)	O
;	O
raw_mode	(int)->(void)
(	O
1	int
)	O
;	O
init_signals	(int)->(void)
(	O
1	int
)	O
;	O
if	O
(	O
tagoption	*(char)
!=	O
NULL	O
||	O
strcmp	(*(char),*(char))->(int)
(	O
tags	*(char)
,	O
"-"	*(char)
)	O
==	O
0	int
)	O
{	O
if	O
(	O
nifile	()->(int)
(	O
)	O
>	O
0	int
)	O
{	O
error	(*(char),*(union(*(char),int,long)))->(void)
(	O
"No filenames allowed with -t option"	*(char)
,	O
NULL_PARG	O
)	O
;	O
quit	(int)->(void)
(	O
QUIT_ERROR	int
)	O
;	O
}	O
findtag	(*(char))->(void)
(	O
tagoption	*(char)
)	O
;	O
if	O
(	O
edit_tagfile	()->(int)
(	O
)	O
)	O
quit	(int)->(void)
(	O
QUIT_ERROR	int
)	O
;	O
initial_scrpos	struct(long,int)
.	O
pos	long
=	O
tagsearch	()->(long)
(	O
)	O
;	O
if	O
(	O
initial_scrpos	struct(long,int)
.	O
pos	long
==	O
NULL_POSITION	O
)	O
quit	(int)->(void)
(	O
QUIT_ERROR	int
)	O
;	O
initial_scrpos	struct(long,int)
.	O
ln	int
=	O
jump_sline	int
;	O
}	O
else	O
if	O
(	O
nifile	()->(int)
(	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
edit_stdin	()->(int)
(	O
)	O
)	O
quit	(int)->(void)
(	O
QUIT_ERROR	int
)	O
;	O
if	O
(	O
quit_if_one_screen	int
)	O
line_count	int
=	O
get_line_count	()->(int)
(	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
edit_first	()->(int)
(	O
)	O
)	O
quit	(int)->(void)
(	O
QUIT_ERROR	int
)	O
;	O
if	O
(	O
quit_if_one_screen	int
)	O
{	O
if	O
(	O
nifile	()->(int)
(	O
)	O
==	O
1	int
)	O
line_count	int
=	O
get_line_count	()->(int)
(	O
)	O
;	O
else	O
quit_if_one_screen	int
=	O
FALSE	int
;	O
}	O
}	O
init	()->(void)
(	O
)	O
;	O
commands	()->(void)
(	O
)	O
;	O
quit	(int)->(void)
(	O
QUIT_OK	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
public	O
char	O
*	O
save	(*(char))->(*(char))
(	O
s	*(char)
)	O
constant	O
char	O
*	O
s	*(char)
;	O
{	O
char	O
*	O
p	*(char)
;	O
p	*(char)
=	O
(	O
char	O
*	O
)	O
ecalloc	(int,int)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
s	*(char)
)	O
+	O
1	int
,	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
p	*(char)
,	O
s	*(char)
)	O
;	O
return	O
(	O
p	*(char)
)	O
;	O
}	O
public	O
VOID_POINTER	O
ecalloc	(int,int)->(*(void))
(	O
count	int
,	O
size	int
)	O
int	O
count	int
;	O
unsigned	O
int	O
size	int
;	O
{	O
VOID_POINTER	O
p	*(char)
;	O
p	*(char)
=	O
(	O
VOID_POINTER	O
)	O
calloc	(long,long)->(*(void))
(	O
count	int
,	O
size	int
)	O
;	O
if	O
(	O
p	*(char)
!=	O
NULL	O
)	O
return	O
(	O
p	*(char)
)	O
;	O
error	(*(char),*(union(*(char),int,long)))->(void)
(	O
"Cannot allocate memory"	*(char)
,	O
NULL_PARG	O
)	O
;	O
quit	(int)->(void)
(	O
QUIT_ERROR	int
)	O
;	O
return	O
(	O
NULL	O
)	O
;	O
}	O
public	O
char	O
*	O
skipsp	(*(char))->(*(char))
(	O
s	*(char)
)	O
char	O
*	O
s	*(char)
;	O
{	O
while	O
(	O
*	O
s	*(char)
==	O
' '	O
||	O
*	O
s	*(char)
==	O
'\t'	O
)	O
s	*(char)
++	O
;	O
return	O
(	O
s	*(char)
)	O
;	O
}	O
public	O
int	O
sprefix	(*(char),*(char),int)->(int)
(	O
ps	*(char)
,	O
s	*(char)
,	O
uppercase	int
)	O
char	O
*	O
ps	*(char)
;	O
char	O
*	O
s	*(char)
;	O
int	O
uppercase	int
;	O
{	O
int	O
c	int
;	O
int	O
sc	int
;	O
int	O
len	int
=	O
0	int
;	O
for	O
(	O
;	O
*	O
s	*(char)
!=	O
'\0'	O
;	O
s	*(char)
++	O
,	O
ps	*(char)
++	O
)	O
{	O
c	int
=	O
*	O
ps	*(char)
;	O
if	O
(	O
uppercase	int
)	O
{	O
if	O
(	O
len	int
==	O
0	int
&&	O
ASCII_IS_LOWER	O
(	O
c	int
)	O
)	O
return	O
(	O
-	O
1	int
)	O
;	O
if	O
(	O
ASCII_IS_UPPER	O
(	O
c	int
)	O
)	O
c	int
=	O
ASCII_TO_LOWER	O
(	O
c	int
)	O
;	O
}	O
sc	int
=	O
*	O
s	*(char)
;	O
if	O
(	O
len	int
>	O
0	int
&&	O
ASCII_IS_UPPER	O
(	O
sc	int
)	O
)	O
sc	int
=	O
ASCII_TO_LOWER	O
(	O
sc	int
)	O
;	O
if	O
(	O
c	int
!=	O
sc	int
)	O
break	O
;	O
len	int
++	O
;	O
}	O
return	O
(	O
len	int
)	O
;	O
}	O
public	O
void	O
quit	(int)->(void)
(	O
status	int
)	O
int	O
status	int
;	O
{	O
static	O
int	O
save_status	int
;	O
if	O
(	O
status	int
<	O
0	int
)	O
status	int
=	O
save_status	int
;	O
else	O
save_status	int
=	O
status	int
;	O
quitting	int
=	O
1	int
;	O
edit	(*(char))->(int)
(	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
save_cmdhist	()->(void)
(	O
)	O
;	O
if	O
(	O
any_display	int
&&	O
is_tty	int
)	O
clear_bot	()->(void)
(	O
)	O
;	O
deinit	()->(void)
(	O
)	O
;	O
flush	()->(void)
(	O
)	O
;	O
raw_mode	(int)->(void)
(	O
0	int
)	O
;	O
close_getchr	()->(void)
(	O
)	O
;	O
exit	(int)->(void)
(	O
status	int
)	O
;	O
}	O
