static	O
int	O
_mailer_smtp_init	(*(struct(*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,*`,int,int)),*(struct),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))))->(int)
(	O
mu_mailer_t	*(struct)
)	O
;	O
static	O
int	O
_url_smtp_init	(*(struct(int,*(char),*(char),*(char),*(struct),*(char),*(char),short,*(char),*(char),*(*(char)),int,*(*(char)),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)))))->(int)
(	O
mu_url_t	*(struct)
url	*(struct)
)	O
{	O
if	O
(	O
url	*(struct)
->	O
port	int
==	O
0	int
)	O
url	*(struct)
->	O
port	int
=	O
MU_SMTP_PORT	int
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
_mu_record	struct(int,*(char),int,int,int,*((*(struct(int,*(char),*(char),*(char),*(struct`),*(char),*(char),short,*(char),*(char),*(*`),int,*(*`),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)))))->(int)),*((*(struct))->(int)),*((*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))))->(int)),*((*(struct))->(int)),*(void),*((*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(struct(int,*(char),*(char),*(char),*(struct`),*(char),*(char),short,*(char),*(char),*(*`),int,*(*`),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)))),int)->(int)),*((*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(*((*`)->(int))))->(int)),*((*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(*((*`)->(int))))->(int)),*((*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(*((*`)->(int))))->(int)),*((*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(*((*`)->(int))))->(int)),*((*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(char),int)->(int)))
_smtp_record	struct(int,*(char),int,int,int,*((*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))->(int)),*((*(struct))->(int)),*((*(struct(*`,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`)))->(int)),*((*(struct))->(int)),*(void),*((*(struct(int,*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int)->(int)),*((*(struct(int,*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*((*`)->(int))))->(int)),*((*(struct(int,*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*((*`)->(int))))->(int)),*((*(struct(int,*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*((*`)->(int))))->(int)),*((*(struct(int,*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*((*`)->(int))))->(int)),*((*(struct(int,*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(char),int)->(int)))
=	O
{	O
MU_SMTP_PRIO	int
,	O
MU_SMTP_SCHEME	*(char)
,	O
MU_RECORD_DEFAULT	int
,	O
MU_URL_SCHEME	int
|	O
MU_URL_CRED	O
|	O
MU_URL_INET	O
|	O
MU_URL_PARAM	int
,	O
MU_URL_HOST	int
,	O
_url_smtp_init	(*(struct(int,*(char),*(char),*(char),*(struct),*(char),*(char),short,*(char),*(char),*(*(char)),int,*(*(char)),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)))))->(int)
,	O
_mu_mailer_mailbox_init	(*(struct))->(int)
,	O
_mailer_smtp_init	(*(struct(*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,*`,int,int)),*(struct),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))))->(int)
,	O
_mu_mailer_folder_init	(*(struct))->(int)
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
}	O
;	O
mu_record_t	*(struct)
mu_smtp_record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
=	O
&	O
_smtp_record	struct(int,*(char),int,int,int,*((*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))->(int)),*((*(struct))->(int)),*((*(struct(*`,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`)))->(int)),*((*(struct))->(int)),*(void),*((*(struct(int,*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int)->(int)),*((*(struct(int,*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*((*`)->(int))))->(int)),*((*(struct(int,*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*((*`)->(int))))->(int)),*((*(struct(int,*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*((*`)->(int))))->(int)),*((*(struct(int,*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*((*`)->(int))))->(int)),*((*(struct(int,*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(char),int)->(int)))
;	O
struct	O
_smtp_mailer	struct(*(struct(*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(struct`),*(char),*(char),short,*(char),*(char),*(*`),int,*(*`),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)))),int,*(struct(*(void),*(void),int,int)),*(struct),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(struct`),*(*`))->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))))
{	O
mu_mailer_t	*(struct)
mailer	*(struct)
;	O
mu_smtp_t	*(struct)
smtp	*(struct)
;	O
mu_address_t	*(struct)
rcpt_to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
mu_address_t	*(struct)
rcpt_bcc	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
}	O
;	O
static	O
void	O
smtp_mailer_add_auth_mech	(*(struct(*(struct(*`,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(char))->(void)
(	O
struct	O
_smtp_mailer	struct(*(struct(*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(struct`),*(char),*(char),short,*(char),*(char),*(*`),int,*(*`),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)))),int,*(struct(*(void),*(void),int,int)),*(struct),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(struct`),*(*`))->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))))
*	O
smtp_mailer	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
const	O
char	O
*	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
)	O
{	O
struct	O
mu_wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_delim	*(char)
=	O
","	*(char)
;	O
if	O
(	O
mu_wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
(	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
,	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
MU_WRDSF_DEFFLAGS	O
|	O
MU_WRDSF_DELIM	O
|	O
MU_WRDSF_WS	O
)	O
)	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"cannot split line `%s': %s"	*(char)
)	O
,	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
,	O
mu_wordsplit_strerror	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(*(char))
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
)	O
;	O
else	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordc	long
;	O
i	long
++	O
)	O
mu_smtp_add_auth_mech	(*(struct),*(char))->(int)
(	O
smtp_mailer	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
smtp	*(struct)
,	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordv	*(*(char))
[	O
i	long
]	O
)	O
;	O
mu_wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
}	O
}	O
static	O
int	O
smtp_open	(*(struct(*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,*`,int,int)),*(struct),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),int)->(int)
(	O
mu_mailer_t	*(struct)
mailer	*(struct)
,	O
int	O
flags	int
)	O
{	O
const	O
char	O
*	O
auth	*(char)
,	O
*	O
scheme	*(char)
;	O
struct	O
_smtp_mailer	struct(*(struct(*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(struct`),*(char),*(char),short,*(char),*(char),*(*`),int,*(*`),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)))),int,*(struct(*(void),*(void),int,int)),*(struct),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(struct`),*(*`))->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))))
*	O
smtp_mailer	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
mailer	*(struct)
->	O
data	*(void)
;	O
int	O
rc	int
;	O
size_t	long
parmc	long
=	O
0	int
;	O
char	O
*	O
*	O
parmv	*(*(char))
=	O
NULL	O
;	O
int	O
tls	int
=	O
0	int
;	O
int	O
nostarttls	int
=	O
0	int
;	O
int	O
noauth	int
=	O
DFLNOAUTH	int
;	O
rc	int
=	O
mu_url_sget_scheme	(*(struct),*(*(char)))->(int)
(	O
mailer	*(struct)
->	O
url	*(struct)
,	O
&	O
scheme	*(char)
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
tls	int
=	O
strcmp	(*(char),*(char))->(int)
(	O
scheme	*(char)
,	O
"smtps"	*(char)
)	O
==	O
0	int
;	O
rc	int
=	O
mu_smtp_create	(*(*(struct)))->(int)
(	O
&	O
smtp_mailer	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
smtp	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
mu_debug_level_p	(int,int)->(int)
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_PROT	int
)	O
)	O
mu_smtp_trace	(*(struct),int)->(int)
(	O
smtp_mailer	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
smtp	*(struct)
,	O
MU_SMTP_TRACE_SET	int
)	O
;	O
if	O
(	O
mu_debug_level_p	(int,int)->(int)
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_TRACE6	int
)	O
)	O
mu_smtp_trace_mask	(*(struct),int,int)->(int)
(	O
smtp_mailer	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
smtp	*(struct)
,	O
MU_SMTP_TRACE_SET	int
,	O
MU_XSCRIPT_SECURE	int
)	O
;	O
if	O
(	O
mu_debug_level_p	(int,int)->(int)
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_TRACE7	int
)	O
)	O
mu_smtp_trace_mask	(*(struct),int,int)->(int)
(	O
smtp_mailer	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
smtp	*(struct)
,	O
MU_SMTP_TRACE_SET	int
,	O
MU_XSCRIPT_PAYLOAD	int
)	O
;	O
mu_smtp_set_url	(*(struct),*(struct))->(int)
(	O
smtp_mailer	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
smtp	*(struct)
,	O
mailer	*(struct)
->	O
url	*(struct)
)	O
;	O
if	O
(	O
mu_url_sget_auth	(*(struct),*(*(char)))->(int)
(	O
mailer	*(struct)
->	O
url	*(struct)
,	O
&	O
auth	*(char)
)	O
==	O
0	int
)	O
smtp_mailer_add_auth_mech	(*(struct(*(struct(*`,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(char))->(void)
(	O
smtp_mailer	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
auth	*(char)
)	O
;	O
if	O
(	O
mu_url_sget_fvpairs	(*(struct),*(long),*(*(*(char))))->(int)
(	O
mailer	*(struct)
->	O
url	*(struct)
,	O
&	O
parmc	long
,	O
&	O
parmv	*(*(char))
)	O
==	O
0	int
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
parmc	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
parmv	*(*(char))
[	O
i	long
]	O
,	O
"notls"	*(char)
)	O
==	O
0	int
)	O
nostarttls	int
=	O
1	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
parmv	*(*(char))
[	O
i	long
]	O
,	O
"noauth"	*(char)
)	O
==	O
0	int
)	O
noauth	int
=	O
1	int
;	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
parmv	*(*(char))
[	O
i	long
]	O
,	O
"auth="	*(char)
,	O
5	int
)	O
==	O
0	int
)	O
smtp_mailer_add_auth_mech	(*(struct(*(struct(*`,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(char))->(void)
(	O
smtp_mailer	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
parmv	*(*(char))
[	O
i	long
]	O
+	O
5	int
)	O
;	O
}	O
}	O
if	O
(	O
mailer	*(struct)
->	O
stream	*(struct)
==	O
NULL	O
)	O
{	O
struct	O
mu_sockaddr	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(short,array(char))),int,*(char))),*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(short,array(char))),int,*(char))),*(struct(short,array(char))),int,*(char))
*	O
sa	*(struct(short,array(char)))
;	O
struct	O
mu_sockaddr_hints	struct(int,int,int,int,short)
hints	*(struct(*(char),*(char)))
;	O
mu_stream_t	*(struct)
transport	*(struct)
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
hints	*(struct(*(char),*(char)))
,	O
0	int
,	O
sizeof	O
(	O
hints	*(struct(*(char),*(char)))
)	O
)	O
;	O
hints	*(struct(*(char),*(char)))
.	O
flags	int
=	O
MU_AH_DETECT_FAMILY	int
;	O
hints	*(struct(*(char),*(char)))
.	O
port	int
=	O
tls	int
?	O
MU_SMTPS_PORT	int
:	O
MU_SMTP_PORT	int
;	O
hints	*(struct(*(char),*(char)))
.	O
protocol	int
=	O
IPPROTO_TCP	int
;	O
hints	*(struct(*(char),*(char)))
.	O
socktype	int
=	O
SOCK_STREAM	int
;	O
rc	int
=	O
mu_sockaddr_from_url	(*(*(struct(*(struct`),*(struct`),*(struct`),int,*(char)))),*(struct),*(struct(int,int,int,int,short)))->(int)
(	O
&	O
sa	*(struct(short,array(char)))
,	O
mailer	*(struct)
->	O
url	*(struct)
,	O
&	O
hints	*(struct(*(char),*(char)))
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_tcp_stream_create_from_sa	(*(*(struct)),*(struct),*(struct),int)->(int)
(	O
&	O
transport	*(struct)
,	O
sa	*(struct(short,array(char)))
,	O
NULL	O
,	O
mailer	*(struct)
->	O
flags	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sockaddr_free	(*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(short,array(char))),int,*(char))))->(void)
(	O
sa	*(struct(short,array(char)))
)	O
;	O
return	O
rc	int
;	O
}	O
mailer	*(struct)
->	O
stream	*(struct)
=	O
transport	*(struct)
;	O
mu_stream_set_buffer	(*(struct),enum(int,int,int),long)->(int)
(	O
mailer	*(struct)
->	O
stream	*(struct)
,	O
mu_buffer_line	int
,	O
0	int
)	O
;	O
}	O
mu_smtp_set_carrier	(*(struct),*(struct))->(int)
(	O
smtp_mailer	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
smtp	*(struct)
,	O
mailer	*(struct)
->	O
stream	*(struct)
)	O
;	O
rc	int
=	O
mu_smtp_open	(*(struct))->(int)
(	O
smtp_mailer	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
smtp	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_smtp_ehlo	(*(struct))->(int)
(	O
smtp_mailer	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
smtp	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
!	O
noauth	int
&&	O
mu_smtp_capa_test	(*(struct),*(char),*(*(char)))->(int)
(	O
smtp_mailer	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
smtp	*(struct)
,	O
"AUTH"	*(char)
,	O
NULL	O
)	O
==	O
0	int
)	O
{	O
rc	int
=	O
mu_smtp_auth	(*(struct))->(int)
(	O
smtp_mailer	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
smtp	*(struct)
)	O
;	O
switch	O
(	O
rc	int
)	O
{	O
case	O
0	int
:	O
rc	int
=	O
mu_smtp_ehlo	(*(struct))->(int)
(	O
smtp_mailer	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
smtp	*(struct)
)	O
;	O
break	O
;	O
case	O
ENOSYS	int
:	O
case	O
MU_ERR_AUTH_NO_CRED	O
:	O
mu_diag_output	(int,*(char))->(void)
(	O
MU_DIAG_NOTICE	O
,	O
"authentication disabled: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
rc	int
=	O
0	int
;	O
break	O
;	O
}	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
smtp_destroy	(*(struct(*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,*`,int,int)),*(struct),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))))->(void)
(	O
mu_mailer_t	*(struct)
mailer	*(struct)
)	O
{	O
struct	O
_smtp_mailer	struct(*(struct(*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(struct`),*(char),*(char),short,*(char),*(char),*(*`),int,*(*`),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)))),int,*(struct(*(void),*(void),int,int)),*(struct),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(struct`),*(*`))->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))))
*	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
mailer	*(struct)
->	O
data	*(void)
;	O
mu_address_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(void)
(	O
&	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
rcpt_to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
mu_address_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(void)
(	O
&	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
rcpt_bcc	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
mu_smtp_destroy	(*(*(struct)))->(void)
(	O
&	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
smtp	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
mailer	*(struct)
->	O
data	*(void)
=	O
NULL	O
;	O
}	O
static	O
int	O
smtp_close	(*(struct(*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,*`,int,int)),*(struct),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))))->(int)
(	O
mu_mailer_t	*(struct)
mailer	*(struct)
)	O
{	O
struct	O
_smtp_mailer	struct(*(struct(*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(struct`),*(char),*(char),short,*(char),*(char),*(*`),int,*(*`),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)))),int,*(struct(*(void),*(void),int,int)),*(struct),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(struct`),*(*`))->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))))
*	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
mailer	*(struct)
->	O
data	*(void)
;	O
return	O
mu_smtp_quit	(*(struct))->(int)
(	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
smtp	*(struct)
)	O
;	O
}	O
int	O
smtp_address_add	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(char))->(int)
(	O
mu_address_t	*(struct)
*	O
paddr	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
const	O
char	O
*	O
value	*(char)
)	O
{	O
mu_address_t	*(struct)
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
NULL	O
;	O
int	O
status	int
;	O
status	int
=	O
mu_address_create	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(char))->(int)
(	O
&	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
value	*(char)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
mu_address_union	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
paddr	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
mu_address_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(void)
(	O
&	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
_smtp_property_is_set	(*(struct(*(struct(*`,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(char))->(int)
(	O
struct	O
_smtp_mailer	struct(*(struct(*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(struct`),*(char),*(char),short,*(char),*(char),*(*`),int,*(*`),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)))),int,*(struct(*(void),*(void),int,int)),*(struct),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(struct`),*(*`))->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))))
*	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
mu_property_t	*(struct)
property	*(struct)
=	O
NULL	O
;	O
mu_mailer_get_property	(*(struct),*(*(struct)))->(int)
(	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
mailer	*(struct)
,	O
&	O
property	*(struct)
)	O
;	O
return	O
mu_property_is_set	(*(struct),*(char))->(int)
(	O
property	*(struct)
,	O
name	*(char)
)	O
;	O
}	O
static	O
int	O
_smtp_set_rcpt	(*(struct(*(struct(*`,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
struct	O
_smtp_mailer	struct(*(struct(*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(struct`),*(char),*(char),short,*(char),*(char),*(*`),int,*(*`),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)))),int,*(struct(*(void),*(void),int,int)),*(struct),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(struct`),*(*`))->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))))
*	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
mu_message_t	*(struct)
msg	*(struct)
,	O
mu_address_t	*(struct)
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
{	O
int	O
status	int
=	O
0	int
;	O
if	O
(	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
{	O
if	O
(	O
(	O
status	int
=	O
mu_mailer_check_to	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
)	O
!=	O
0	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"mu_mailer_send_message(): explicit to not valid"	*(char)
)	O
)	O
;	O
return	O
status	int
;	O
}	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
rcpt_to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
mu_address_dup	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
(	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
if	O
(	O
!	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
rcpt_to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
return	O
ENOMEM	int
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
}	O
if	O
(	O
!	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
||	O
_smtp_property_is_set	(*(struct(*(struct(*`,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(char))->(int)
(	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
"READ_RECIPIENTS"	*(char)
)	O
)	O
{	O
mu_header_t	*(struct)
header	*(struct)
;	O
if	O
(	O
(	O
status	int
=	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
header	*(struct)
)	O
)	O
)	O
return	O
status	int
;	O
do	O
{	O
const	O
char	O
*	O
value	*(char)
;	O
status	int
=	O
mu_header_sget_value	O
(	O
header	*(struct)
,	O
MU_HEADER_TO	*(char)
,	O
&	O
value	*(char)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
smtp_address_add	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(char))->(int)
(	O
&	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
rcpt_to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
value	*(char)
)	O
;	O
else	O
if	O
(	O
status	int
!=	O
MU_ERR_NOENT	O
)	O
break	O
;	O
status	int
=	O
mu_header_sget_value	O
(	O
header	*(struct)
,	O
MU_HEADER_CC	*(char)
,	O
&	O
value	*(char)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
smtp_address_add	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(char))->(int)
(	O
&	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
rcpt_to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
value	*(char)
)	O
;	O
else	O
if	O
(	O
status	int
!=	O
MU_ERR_NOENT	O
)	O
break	O
;	O
status	int
=	O
mu_header_sget_value	O
(	O
header	*(struct)
,	O
MU_HEADER_BCC	*(char)
,	O
&	O
value	*(char)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
smtp_address_add	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(char))->(int)
(	O
&	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
rcpt_bcc	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
value	*(char)
)	O
;	O
else	O
if	O
(	O
status	int
!=	O
MU_ERR_NOENT	O
)	O
break	O
;	O
if	O
(	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
rcpt_to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
&&	O
(	O
status	int
=	O
mu_mailer_check_to	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
rcpt_to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
)	O
)	O
break	O
;	O
if	O
(	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
rcpt_bcc	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
&&	O
(	O
status	int
=	O
mu_mailer_check_to	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
rcpt_bcc	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
)	O
)	O
break	O
;	O
}	O
while	O
(	O
0	int
)	O
;	O
}	O
if	O
(	O
status	int
)	O
{	O
mu_address_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(void)
(	O
&	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
rcpt_to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
mu_address_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(void)
(	O
&	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
rcpt_bcc	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
}	O
else	O
{	O
size_t	long
rcpt_cnt	long
,	O
bcc_cnt	long
;	O
if	O
(	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
rcpt_to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
mu_address_get_count	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(long))->(int)
(	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
rcpt_to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
&	O
rcpt_cnt	long
)	O
;	O
if	O
(	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
rcpt_bcc	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
mu_address_get_count	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(long))->(int)
(	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
rcpt_bcc	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
&	O
bcc_cnt	long
)	O
;	O
if	O
(	O
rcpt_cnt	long
+	O
bcc_cnt	long
==	O
0	int
)	O
status	int
=	O
MU_ERR_MAILER_NO_RCPT_TO	O
;	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
_rcpt_to_addr	(*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(long))->(int)
(	O
mu_smtp_t	*(struct)
smtp	*(struct)
,	O
mu_address_t	*(struct)
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
size_t	long
*	O
pcount	*(long)
)	O
{	O
size_t	long
i	long
,	O
count	*(long)
,	O
rcpt_cnt	long
=	O
0	int
;	O
int	O
status	int
;	O
status	int
=	O
mu_address_get_count	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(long))->(int)
(	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
&	O
count	*(long)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
count	*(long)
;	O
i	long
++	O
)	O
{	O
const	O
char	O
*	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
NULL	O
;	O
status	int
=	O
mu_address_sget_email	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),long,*(*(char)))->(int)
(	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
i	long
,	O
&	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
if	O
(	O
status	int
==	O
0	int
&&	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
{	O
status	int
=	O
mu_smtp_rcpt_basic	(*(struct),*(char),*(char))->(int)
(	O
smtp	*(struct)
,	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
rcpt_cnt	long
++	O
;	O
else	O
if	O
(	O
status	int
!=	O
MU_ERR_REPLY	O
)	O
break	O
;	O
}	O
}	O
*	O
pcount	*(long)
=	O
rcpt_cnt	long
;	O
return	O
status	int
;	O
}	O
static	O
int	O
smtp_send_message	(*(struct(*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,*`,int,int)),*(struct),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
mu_mailer_t	*(struct)
mailer	*(struct)
,	O
mu_message_t	*(struct)
msg	*(struct)
,	O
mu_address_t	*(struct)
argfrom	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
mu_address_t	*(struct)
argto	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
{	O
struct	O
_smtp_mailer	struct(*(struct(*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(struct`),*(char),*(char),short,*(char),*(char),*(*`),int,*(*`),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)))),int,*(struct(*(void),*(void),int,int)),*(struct),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(struct`),*(*`))->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))))
*	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
mu_smtp_t	*(struct)
smtp	*(struct)
;	O
int	O
status	int
;	O
size_t	long
size	long
,	O
lines	long
,	O
count	*(long)
;	O
const	O
char	O
*	O
mail_from	*(char)
,	O
*	O
size_str	*(char)
;	O
mu_header_t	*(struct)
header	*(struct)
;	O
if	O
(	O
mailer	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
mailer	*(struct)
->	O
data	*(void)
;	O
if	O
(	O
!	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
return	O
EINVAL	int
;	O
smtp	*(struct)
=	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
smtp	*(struct)
;	O
if	O
(	O
(	O
status	int
=	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
header	*(struct)
)	O
)	O
)	O
return	O
status	int
;	O
status	int
=	O
_smtp_set_rcpt	(*(struct(*(struct(*`,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
msg	*(struct)
,	O
argto	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
mu_address_sget_email	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),long,*(*(char)))->(int)
(	O
argfrom	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
1	int
,	O
&	O
mail_from	*(char)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
!	O
mail_from	*(char)
)	O
return	O
MU_ERR_NOENT	O
;	O
if	O
(	O
mu_smtp_capa_test	(*(struct),*(char),*(*(char)))->(int)
(	O
smtp	*(struct)
,	O
"SIZE"	*(char)
,	O
&	O
size_str	*(char)
)	O
==	O
0	int
&&	O
mu_message_size	(*(struct),*(long))->(int)
(	O
msg	*(struct)
,	O
&	O
size	long
)	O
==	O
0	int
&&	O
mu_message_lines	(*(struct),*(long))->(int)
(	O
msg	*(struct)
,	O
&	O
lines	long
)	O
==	O
0	int
)	O
{	O
size_t	long
msgsize	long
=	O
size	long
+	O
lines	long
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
size_str	*(char)
,	O
"SIZE "	*(char)
,	O
5	int
)	O
==	O
0	int
)	O
{	O
size_t	long
maxsize	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
size_str	*(char)
+	O
5	int
,	O
NULL	O
,	O
10	int
)	O
;	O
if	O
(	O
msgsize	long
&&	O
maxsize	long
&&	O
msgsize	long
>	O
maxsize	long
)	O
return	O
EFBIG	int
;	O
}	O
status	int
=	O
mu_smtp_mail_basic	(*(struct),*(char),*(char))->(int)
(	O
smtp	*(struct)
,	O
mail_from	*(char)
,	O
"SIZE=%lu"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
msgsize	long
)	O
;	O
}	O
else	O
status	int
=	O
mu_smtp_mail_basic	(*(struct),*(char),*(char))->(int)
(	O
smtp	*(struct)
,	O
mail_from	*(char)
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
)	O
{	O
if	O
(	O
status	int
==	O
MU_ERR_REPLY	O
)	O
mu_smtp_rset	(*(struct))->(int)
(	O
smtp	*(struct)
)	O
;	O
return	O
status	int
;	O
}	O
status	int
=	O
_rcpt_to_addr	(*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(long))->(int)
(	O
smtp	*(struct)
,	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
rcpt_to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
&	O
count	*(long)
)	O
;	O
if	O
(	O
status	int
&&	O
count	*(long)
==	O
0	int
)	O
{	O
if	O
(	O
status	int
==	O
MU_ERR_REPLY	O
)	O
mu_smtp_rset	(*(struct))->(int)
(	O
smtp	*(struct)
)	O
;	O
return	O
status	int
;	O
}	O
status	int
=	O
_rcpt_to_addr	(*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(long))->(int)
(	O
smtp	*(struct)
,	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
rcpt_bcc	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
&	O
count	*(long)
)	O
;	O
if	O
(	O
status	int
&&	O
count	*(long)
==	O
0	int
)	O
{	O
if	O
(	O
status	int
==	O
MU_ERR_REPLY	O
)	O
mu_smtp_rset	(*(struct))->(int)
(	O
smtp	*(struct)
)	O
;	O
return	O
status	int
;	O
}	O
if	O
(	O
mu_header_sget_value	O
(	O
header	*(struct)
,	O
MU_HEADER_BCC	*(char)
,	O
NULL	O
)	O
==	O
0	int
||	O
mu_header_sget_value	O
(	O
header	*(struct)
,	O
MU_HEADER_FCC	*(char)
,	O
NULL	O
)	O
==	O
0	int
)	O
{	O
mu_iterator_t	*(struct)
itr	*(struct)
;	O
mu_body_t	*(struct)
body	*(struct)
;	O
mu_stream_t	*(struct)
ostr	*(struct)
,	O
bstr	*(struct)
;	O
status	int
=	O
mu_smtp_data	(*(struct),*(*(struct)))->(int)
(	O
smtp	*(struct)
,	O
&	O
ostr	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
{	O
if	O
(	O
status	int
==	O
MU_ERR_REPLY	O
)	O
mu_smtp_rset	(*(struct))->(int)
(	O
smtp	*(struct)
)	O
;	O
return	O
status	int
;	O
}	O
mu_header_get_iterator	(*(struct),*(*(struct)))->(int)
(	O
header	*(struct)
,	O
&	O
itr	*(struct)
)	O
;	O
for	O
(	O
mu_iterator_first	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
!	O
mu_iterator_is_done	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
mu_iterator_next	(*(struct))->(int)
(	O
itr	*(struct)
)	O
)	O
{	O
const	O
char	O
*	O
name	*(char)
;	O
void	O
*	O
value	*(char)
;	O
mu_iterator_current_kv	(*(struct),*(*(void)),*(*(void)))->(int)
(	O
itr	*(struct)
,	O
(	O
void	O
*	O
)	O
&	O
name	*(char)
,	O
&	O
value	*(char)
)	O
;	O
if	O
(	O
mu_c_strcasecmp	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
MU_HEADER_BCC	*(char)
)	O
==	O
0	int
||	O
mu_c_strcasecmp	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
MU_HEADER_FCC	*(char)
)	O
==	O
0	int
)	O
continue	O
;	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
ostr	*(struct)
,	O
"%s: %s\n"	*(char)
,	O
name	*(char)
,	O
(	O
char	O
*	O
)	O
value	*(char)
)	O
;	O
}	O
mu_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
itr	*(struct)
)	O
;	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
ostr	*(struct)
,	O
"\n"	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
mu_message_get_body	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
body	*(struct)
)	O
;	O
mu_body_get_streamref	(*(struct),*(*(struct)))->(int)
(	O
body	*(struct)
,	O
&	O
bstr	*(struct)
)	O
;	O
status	int
=	O
mu_stream_copy	(*(struct),*(struct),long,*(long))->(int)
(	O
ostr	*(struct)
,	O
bstr	*(struct)
,	O
0	int
,	O
NULL	O
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
bstr	*(struct)
)	O
;	O
mu_stream_close	(*(struct))->(int)
(	O
ostr	*(struct)
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
ostr	*(struct)
)	O
;	O
}	O
else	O
{	O
mu_stream_t	*(struct)
str	*(struct(int,*(char),*(char),*(char),*(char)))
;	O
mu_message_get_streamref	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
)	O
;	O
status	int
=	O
mu_smtp_send_stream	(*(struct),*(struct))->(int)
(	O
smtp	*(struct)
,	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
str	*(struct(int,*(char),*(char),*(char),*(char)))
)	O
;	O
}	O
mu_address_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(void)
(	O
&	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
rcpt_to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
mu_address_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(void)
(	O
&	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
rcpt_bcc	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
status	int
=	O
mu_smtp_dot	(*(struct))->(int)
(	O
smtp	*(struct)
)	O
;	O
if	O
(	O
status	int
==	O
MU_ERR_REPLY	O
)	O
mu_smtp_rset	(*(struct))->(int)
(	O
smtp	*(struct)
)	O
;	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
_mailer_smtp_init	(*(struct(*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,*`,int,int)),*(struct),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))))->(int)
(	O
mu_mailer_t	*(struct)
mailer	*(struct)
)	O
{	O
struct	O
_smtp_mailer	struct(*(struct(*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(struct`),*(char),*(char),short,*(char),*(char),*(*`),int,*(*`),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)))),int,*(struct(*(void),*(void),int,int)),*(struct),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(struct`),*(*`))->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))))
*	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
mailer	*(struct)
->	O
data	*(void)
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
)	O
;	O
if	O
(	O
mailer	*(struct)
->	O
data	*(void)
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
smp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
mailer	*(struct)
=	O
mailer	*(struct)
;	O
mailer	*(struct)
->	O
_destroy	*((*(struct),*(void))->(int))
=	O
smtp_destroy	(*(struct(*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,*`,int,int)),*(struct),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))))->(void)
;	O
mailer	*(struct)
->	O
_open	*((*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),int)->(int))
=	O
smtp_open	(*(struct(*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,*`,int,int)),*(struct),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),int)->(int)
;	O
mailer	*(struct)
->	O
_close	*((*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))))->(int))
=	O
smtp_close	(*(struct(*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,*`,int,int)),*(struct),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))))->(int)
;	O
mailer	*(struct)
->	O
_send_message	*((*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))->(int))
=	O
smtp_send_message	(*(struct(*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,*`,int,int)),*(struct),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
;	O
{	O
mu_property_t	*(struct)
property	*(struct)
=	O
NULL	O
;	O
mu_mailer_get_property	(*(struct),*(*(struct)))->(int)
(	O
mailer	*(struct)
,	O
&	O
property	*(struct)
)	O
;	O
mu_property_set_value	(*(struct),*(char),*(char),int)->(int)
(	O
property	*(struct)
,	O
"TYPE"	*(char)
,	O
"SMTP"	*(char)
,	O
1	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
