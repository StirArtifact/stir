const	O
char	O
*	O
mu_errname	(int)->(*(char))
(	O
int	O
e	int
)	O
{	O
static	O
char	O
buf	array(char)
[	O
128	int
]	O
;	O
switch	O
(	O
e	int
)	O
{	O
case	O
EOK	int
:	O
return	O
"EOK"	*(char)
;	O
case	O
MU_ERR_FAILURE	O
:	O
return	O
"MU_ERR_FAILURE"	*(char)
;	O
case	O
MU_ERR_CANCELED	O
:	O
return	O
"MU_ERR_CANCELED"	*(char)
;	O
case	O
MU_ERR_EMPTY_VFN	O
:	O
return	O
"MU_ERR_EMPTY_VFN"	*(char)
;	O
case	O
MU_ERR_OUT_PTR_NULL	O
:	O
return	O
"MU_ERR_OUT_PTR_NULL"	*(char)
;	O
case	O
MU_ERR_MBX_REMOVED	O
:	O
return	O
"MU_ERR_MBX_REMOVED"	*(char)
;	O
case	O
MU_ERR_NOT_OPEN	O
:	O
return	O
"MU_ERR_NOT_OPEN"	*(char)
;	O
case	O
MU_ERR_OPEN	O
:	O
return	O
"MU_ERR_OPEN"	*(char)
;	O
case	O
MU_ERR_INVALID_EMAIL	O
:	O
return	O
"MU_ERR_INVALID_EMAIL"	*(char)
;	O
case	O
MU_ERR_EMPTY_ADDRESS	O
:	O
return	O
"MU_ERR_EMPTY_ADDRESS"	*(char)
;	O
case	O
MU_ERR_LOCKER_NULL	O
:	O
return	O
"MU_ERR_LOCKER_NULL"	*(char)
;	O
case	O
MU_ERR_LOCK_CONFLICT	O
:	O
return	O
"MU_ERR_LOCK_CONFLICT"	*(char)
;	O
case	O
MU_ERR_LOCK_BAD_LOCK	O
:	O
return	O
"MU_ERR_LOCK_BAD_LOCK"	*(char)
;	O
case	O
MU_ERR_LOCK_BAD_FILE	O
:	O
return	O
"MU_ERR_LOCK_BAD_FILE"	*(char)
;	O
case	O
MU_ERR_LOCK_NOT_HELD	O
:	O
return	O
"MU_ERR_LOCK_NOT_HELD"	*(char)
;	O
case	O
MU_ERR_LOCK_EXT_FAIL	O
:	O
return	O
"MU_ERR_LOCK_EXT_FAIL"	*(char)
;	O
case	O
MU_ERR_LOCK_EXT_ERR	O
:	O
return	O
"MU_ERR_LOCK_EXT_ERR"	*(char)
;	O
case	O
MU_ERR_LOCK_EXT_KILLED	O
:	O
return	O
"MU_ERR_LOCK_EXT_KILLED"	*(char)
;	O
case	O
MU_ERR_NO_SUCH_USER	O
:	O
return	O
"MU_ERR_NO_SUCH_USER"	*(char)
;	O
case	O
MU_ERR_GETHOSTBYNAME	O
:	O
return	O
"MU_ERR_GETHOSTBYNAME"	*(char)
;	O
case	O
MU_ERR_MAILER_BAD_FROM	O
:	O
return	O
"MU_ERR_MAILER_BAD_FROM"	*(char)
;	O
case	O
MU_ERR_MAILER_BAD_TO	O
:	O
return	O
"MU_ERR_MAILER_BAD_TO"	*(char)
;	O
case	O
MU_ERR_MAILER_NO_RCPT_TO	O
:	O
return	O
"MU_ERR_MAILER_NO_RCPT_TO"	*(char)
;	O
case	O
MU_ERR_MAILER_BAD_URL	O
:	O
return	O
"MU_ERR_MAILER_BAD_URL"	*(char)
;	O
case	O
MU_ERR_SMTP_RCPT_FAILED	O
:	O
return	O
"MU_ERR_SMTP_RCPT_FAILED"	*(char)
;	O
case	O
MU_ERR_TCP_NO_HOST	O
:	O
return	O
"MU_ERR_TCP_NO_HOST"	*(char)
;	O
case	O
MU_ERR_TCP_NO_PORT	O
:	O
return	O
"MU_ERR_TCP_NO_PORT"	*(char)
;	O
case	O
MU_ERR_BAD_2047_INPUT	O
:	O
return	O
"MU_ERR_BAD_2047_INPUT"	*(char)
;	O
case	O
MU_ERR_BAD_2047_ENCODING	O
:	O
return	O
"MU_ERR_BAD_2047_ENCODING"	*(char)
;	O
case	O
MU_ERR_NOUSERNAME	O
:	O
return	O
"MU_ERR_NOUSERNAME"	*(char)
;	O
case	O
MU_ERR_NOPASSWORD	O
:	O
return	O
"MU_ERR_NOPASSWORD"	*(char)
;	O
case	O
MU_ERR_BADREPLY	O
:	O
return	O
"MU_ERR_BADREPLY"	*(char)
;	O
case	O
MU_ERR_SEQ	O
:	O
return	O
"MU_ERR_SEQ"	*(char)
;	O
case	O
MU_ERR_REPLY	O
:	O
return	O
"MU_ERR_REPLY"	*(char)
;	O
case	O
MU_ERR_BAD_AUTH_SCHEME	O
:	O
return	O
"MU_ERR_BAD_AUTH_SCHEME"	*(char)
;	O
case	O
MU_ERR_AUTH_FAILURE	O
:	O
return	O
"MU_ERR_AUTH_FAILURE"	*(char)
;	O
case	O
MU_ERR_PROCESS_NOEXEC	O
:	O
return	O
"MU_ERR_PROCESS_NOEXEC"	*(char)
;	O
case	O
MU_ERR_PROCESS_EXITED	O
:	O
return	O
"MU_ERR_PROCESS_EXITED"	*(char)
;	O
case	O
MU_ERR_PROCESS_SIGNALED	O
:	O
return	O
"MU_ERR_PROCESS_SIGNALED"	*(char)
;	O
case	O
MU_ERR_PROCESS_UNKNOWN_FAILURE	O
:	O
return	O
"MU_ERR_PROCESS_UNKNOWN_FAILURE"	*(char)
;	O
case	O
MU_ERR_CONN_CLOSED	O
:	O
return	O
"MU_ERR_CONN_CLOSED"	*(char)
;	O
case	O
MU_ERR_PARSE	O
:	O
return	O
"MU_ERR_PARSE"	*(char)
;	O
case	O
MU_ERR_NOENT	O
:	O
return	O
"MU_ERR_NOENT"	*(char)
;	O
case	O
MU_ERR_EXISTS	O
:	O
return	O
"MU_ERR_EXISTS"	*(char)
;	O
case	O
MU_ERR_BUFSPACE	O
:	O
return	O
"MU_ERR_BUFSPACE"	*(char)
;	O
case	O
MU_ERR_SQL	O
:	O
return	O
"MU_ERR_SQL"	*(char)
;	O
case	O
MU_ERR_DB_ALREADY_CONNECTED	O
:	O
return	O
"MU_ERR_DB_ALREADY_CONNECTED"	*(char)
;	O
case	O
MU_ERR_DB_NOT_CONNECTED	O
:	O
return	O
"MU_ERR_DB_NOT_CONNECTED"	*(char)
;	O
case	O
MU_ERR_RESULT_NOT_RELEASED	O
:	O
return	O
"MU_ERR_RESULT_NOT_RELEASED"	*(char)
;	O
case	O
MU_ERR_NO_QUERY	O
:	O
return	O
"MU_ERR_NO_QUERY"	*(char)
;	O
case	O
MU_ERR_BAD_COLUMN	O
:	O
return	O
"MU_ERR_BAD_COLUMN"	*(char)
;	O
case	O
MU_ERR_NO_RESULT	O
:	O
return	O
"MU_ERR_NO_RESULT"	*(char)
;	O
case	O
MU_ERR_NO_INTERFACE	O
:	O
return	O
"MU_ERR_NO_INTERFACE"	*(char)
;	O
case	O
MU_ERR_BADOP	O
:	O
return	O
"MU_ERR_BADOP"	*(char)
;	O
case	O
MU_ERR_BAD_FILENAME	O
:	O
return	O
"MU_ERR_BAD_FILENAME"	*(char)
;	O
case	O
MU_ERR_READ	O
:	O
return	O
"MU_ERR_READ"	*(char)
;	O
case	O
MU_ERR_NO_TRANSPORT	O
:	O
return	O
"MU_ERR_NO_TRANSPORT"	*(char)
;	O
case	O
MU_ERR_AUTH_NO_CRED	O
:	O
return	O
"MU_ERR_AUTH_NO_CRED"	*(char)
;	O
case	O
MU_ERR_URL_MISS_PARTS	O
:	O
return	O
"MU_ERR_URL_MISS_PARTS"	*(char)
;	O
case	O
MU_ERR_URL_EXTRA_PARTS	O
:	O
return	O
"MU_ERR_URL_EXTRA_PARTS"	*(char)
;	O
case	O
MU_ERR_URL_INVALID_PARAMETER	O
:	O
return	O
"MU_ERR_URL_INVALID_PARAMETER"	*(char)
;	O
case	O
MU_ERR_INFO_UNAVAILABLE	O
:	O
return	O
"MU_ERR_INFO_UNAVAILABLE"	*(char)
;	O
case	O
MU_ERR_NONAME	O
:	O
return	O
"MU_ERR_NONAME"	*(char)
;	O
case	O
MU_ERR_BADFLAGS	O
:	O
return	O
"MU_ERR_BADFLAGS"	*(char)
;	O
case	O
MU_ERR_SOCKTYPE	O
:	O
return	O
"MU_ERR_SOCKTYPE"	*(char)
;	O
case	O
MU_ERR_FAMILY	O
:	O
return	O
"MU_ERR_FAMILY"	*(char)
;	O
case	O
MU_ERR_SERVICE	O
:	O
return	O
"MU_ERR_SERVICE"	*(char)
;	O
case	O
MU_ERR_PERM_OWNER_MISMATCH	O
:	O
return	O
"MU_ERR_PERM_OWNER_MISMATCH"	*(char)
;	O
case	O
MU_ERR_PERM_GROUP_WRITABLE	O
:	O
return	O
"MU_ERR_PERM_GROUP_WRITABLE"	*(char)
;	O
case	O
MU_ERR_PERM_WORLD_WRITABLE	O
:	O
return	O
"MU_ERR_PERM_WORLD_WRITABLE"	*(char)
;	O
case	O
MU_ERR_PERM_GROUP_READABLE	O
:	O
return	O
"MU_ERR_PERM_GROUP_READABLE"	*(char)
;	O
case	O
MU_ERR_PERM_WORLD_READABLE	O
:	O
return	O
"MU_ERR_PERM_WORLD_READABLE"	*(char)
;	O
case	O
MU_ERR_PERM_LINKED_WRDIR	O
:	O
return	O
"MU_ERR_PERM_LINKED_WRDIR"	*(char)
;	O
case	O
MU_ERR_PERM_DIR_IWGRP	O
:	O
return	O
"MU_ERR_PERM_DIR_IWGRP"	*(char)
;	O
case	O
MU_ERR_PERM_DIR_IWOTH	O
:	O
return	O
"MU_ERR_PERM_DIR_IWOTH"	*(char)
;	O
case	O
MU_ERR_DISABLED	O
:	O
return	O
"MU_ERR_DISABLED"	*(char)
;	O
case	O
MU_ERR_FORMAT	O
:	O
return	O
"MU_ERR_FORMAT"	*(char)
;	O
case	O
MU_ERR_REMOVE_SOURCE	O
:	O
return	O
"MU_ERR_REMOVE_SOURCE"	*(char)
;	O
case	O
MU_ERR_REMOVE_DEST	O
:	O
return	O
"MU_ERR_REMOVE_DEST"	*(char)
;	O
case	O
MU_ERR_RESTORE_META	O
:	O
return	O
"MU_ERR_RESTORE_META"	*(char)
;	O
case	O
MU_ERR_USER0	O
:	O
return	O
"MU_ERR_USER0"	*(char)
;	O
case	O
MU_ERR_USER1	O
:	O
return	O
"MU_ERR_USER1"	*(char)
;	O
case	O
MU_ERR_USER2	O
:	O
return	O
"MU_ERR_USER2"	*(char)
;	O
case	O
MU_ERR_USER3	O
:	O
return	O
"MU_ERR_USER3"	*(char)
;	O
case	O
MU_ERR_USER4	O
:	O
return	O
"MU_ERR_USER4"	*(char)
;	O
case	O
MU_ERR_USER5	O
:	O
return	O
"MU_ERR_USER5"	*(char)
;	O
case	O
MU_ERR_USER6	O
:	O
return	O
"MU_ERR_USER6"	*(char)
;	O
case	O
MU_ERR_USER7	O
:	O
return	O
"MU_ERR_USER7"	*(char)
;	O
}	O
snprintf	(*(char),long,*(char))->(int)
(	O
buf	array(char)
,	O
sizeof	O
buf	array(char)
,	O
_	O
(	O
"Error %d"	*(char)
)	O
,	O
e	int
)	O
;	O
return	O
buf	array(char)
;	O
}	O
const	O
char	O
*	O
mu_strerror	(int)->(*(char))
(	O
int	O
e	int
)	O
{	O
switch	O
(	O
e	int
)	O
{	O
case	O
EOK	int
:	O
return	O
_	O
(	O
"Success"	*(char)
)	O
;	O
case	O
MU_ERR_FAILURE	O
:	O
return	O
_	O
(	O
"Operation failed"	*(char)
)	O
;	O
case	O
MU_ERR_CANCELED	O
:	O
return	O
_	O
(	O
"Operation canceled"	*(char)
)	O
;	O
case	O
MU_ERR_EMPTY_VFN	O
:	O
return	O
_	O
(	O
"Empty virtual function"	*(char)
)	O
;	O
case	O
MU_ERR_OUT_PTR_NULL	O
:	O
return	O
_	O
(	O
"Null output pointer"	*(char)
)	O
;	O
case	O
MU_ERR_MBX_REMOVED	O
:	O
return	O
_	O
(	O
"Mailbox removed"	*(char)
)	O
;	O
case	O
MU_ERR_NOT_OPEN	O
:	O
return	O
_	O
(	O
"Resource not open"	*(char)
)	O
;	O
case	O
MU_ERR_OPEN	O
:	O
return	O
_	O
(	O
"Resource is already open"	*(char)
)	O
;	O
case	O
MU_ERR_INVALID_EMAIL	O
:	O
return	O
_	O
(	O
"Malformed email address"	*(char)
)	O
;	O
case	O
MU_ERR_EMPTY_ADDRESS	O
:	O
return	O
_	O
(	O
"Empty address list"	*(char)
)	O
;	O
case	O
MU_ERR_LOCKER_NULL	O
:	O
return	O
_	O
(	O
"Locker null"	*(char)
)	O
;	O
case	O
MU_ERR_LOCK_CONFLICT	O
:	O
return	O
_	O
(	O
"Conflict with previous locker"	*(char)
)	O
;	O
case	O
MU_ERR_LOCK_BAD_LOCK	O
:	O
return	O
_	O
(	O
"Lock file check failed"	*(char)
)	O
;	O
case	O
MU_ERR_LOCK_BAD_FILE	O
:	O
return	O
_	O
(	O
"File check failed"	*(char)
)	O
;	O
case	O
MU_ERR_LOCK_NOT_HELD	O
:	O
return	O
_	O
(	O
"Lock not held on file"	*(char)
)	O
;	O
case	O
MU_ERR_LOCK_EXT_FAIL	O
:	O
return	O
_	O
(	O
"Failed to execute external locker"	*(char)
)	O
;	O
case	O
MU_ERR_LOCK_EXT_ERR	O
:	O
return	O
_	O
(	O
"External locker failed"	*(char)
)	O
;	O
case	O
MU_ERR_LOCK_EXT_KILLED	O
:	O
return	O
_	O
(	O
"External locker killed"	*(char)
)	O
;	O
case	O
MU_ERR_NO_SUCH_USER	O
:	O
return	O
_	O
(	O
"No such user name"	*(char)
)	O
;	O
case	O
MU_ERR_GETHOSTBYNAME	O
:	O
return	O
_	O
(	O
"DNS name resolution failed"	*(char)
)	O
;	O
case	O
MU_ERR_MAILER_BAD_FROM	O
:	O
return	O
_	O
(	O
"Not a valid sender address"	*(char)
)	O
;	O
case	O
MU_ERR_MAILER_BAD_TO	O
:	O
return	O
_	O
(	O
"Not a valid recipient address"	*(char)
)	O
;	O
case	O
MU_ERR_MAILER_NO_RCPT_TO	O
:	O
return	O
_	O
(	O
"No recipient addresses found"	*(char)
)	O
;	O
case	O
MU_ERR_MAILER_BAD_URL	O
:	O
return	O
_	O
(	O
"Malformed or unsupported mailer URL"	*(char)
)	O
;	O
case	O
MU_ERR_SMTP_RCPT_FAILED	O
:	O
return	O
_	O
(	O
"SMTP RCPT command failed"	*(char)
)	O
;	O
case	O
MU_ERR_TCP_NO_HOST	O
:	O
return	O
_	O
(	O
"Required host specification is missing"	*(char)
)	O
;	O
case	O
MU_ERR_TCP_NO_PORT	O
:	O
return	O
_	O
(	O
"Invalid port or service specification"	*(char)
)	O
;	O
case	O
MU_ERR_BAD_2047_INPUT	O
:	O
return	O
_	O
(	O
"Input string is not RFC 2047 encoded"	*(char)
)	O
;	O
case	O
MU_ERR_BAD_2047_ENCODING	O
:	O
return	O
_	O
(	O
"Not a valid RFC 2047 encoding"	*(char)
)	O
;	O
case	O
MU_ERR_NOUSERNAME	O
:	O
return	O
_	O
(	O
"User name is not supplied"	*(char)
)	O
;	O
case	O
MU_ERR_NOPASSWORD	O
:	O
return	O
_	O
(	O
"User password is not supplied"	*(char)
)	O
;	O
case	O
MU_ERR_BADREPLY	O
:	O
return	O
_	O
(	O
"Invalid reply from the remote host"	*(char)
)	O
;	O
case	O
MU_ERR_SEQ	O
:	O
return	O
_	O
(	O
"Bad command sequence"	*(char)
)	O
;	O
case	O
MU_ERR_REPLY	O
:	O
return	O
_	O
(	O
"Operation rejected by remote party"	*(char)
)	O
;	O
case	O
MU_ERR_BAD_AUTH_SCHEME	O
:	O
return	O
_	O
(	O
"Unsupported authentication scheme"	*(char)
)	O
;	O
case	O
MU_ERR_AUTH_FAILURE	O
:	O
return	O
_	O
(	O
"Authentication failed"	*(char)
)	O
;	O
case	O
MU_ERR_PROCESS_NOEXEC	O
:	O
return	O
_	O
(	O
"Cannot execute"	*(char)
)	O
;	O
case	O
MU_ERR_PROCESS_EXITED	O
:	O
return	O
_	O
(	O
"Process exited with a non-zero status"	*(char)
)	O
;	O
case	O
MU_ERR_PROCESS_SIGNALED	O
:	O
return	O
_	O
(	O
"Process exited on signal"	*(char)
)	O
;	O
case	O
MU_ERR_PROCESS_UNKNOWN_FAILURE	O
:	O
return	O
_	O
(	O
"Unknown failure while executing subprocess"	*(char)
)	O
;	O
case	O
MU_ERR_CONN_CLOSED	O
:	O
return	O
_	O
(	O
"Connection closed by remote host"	*(char)
)	O
;	O
case	O
MU_ERR_PARSE	O
:	O
return	O
_	O
(	O
"Parse error"	*(char)
)	O
;	O
case	O
MU_ERR_NOENT	O
:	O
return	O
_	O
(	O
"Requested item not found"	*(char)
)	O
;	O
case	O
MU_ERR_EXISTS	O
:	O
return	O
_	O
(	O
"Item already exists"	*(char)
)	O
;	O
case	O
MU_ERR_BUFSPACE	O
:	O
return	O
_	O
(	O
"Not enough buffer space"	*(char)
)	O
;	O
case	O
MU_ERR_SQL	O
:	O
return	O
_	O
(	O
"SQL error"	*(char)
)	O
;	O
case	O
MU_ERR_DB_ALREADY_CONNECTED	O
:	O
return	O
_	O
(	O
"Already connected to the database"	*(char)
)	O
;	O
case	O
MU_ERR_DB_NOT_CONNECTED	O
:	O
return	O
_	O
(	O
"Not connected to the database"	*(char)
)	O
;	O
case	O
MU_ERR_RESULT_NOT_RELEASED	O
:	O
return	O
_	O
(	O
"Result of the previous query is not released"	*(char)
)	O
;	O
case	O
MU_ERR_NO_QUERY	O
:	O
return	O
_	O
(	O
"No query was yet executed"	*(char)
)	O
;	O
case	O
MU_ERR_BAD_COLUMN	O
:	O
return	O
_	O
(	O
"Bad column address"	*(char)
)	O
;	O
case	O
MU_ERR_NO_RESULT	O
:	O
return	O
_	O
(	O
"No result from the previous query available"	*(char)
)	O
;	O
case	O
MU_ERR_NO_INTERFACE	O
:	O
return	O
_	O
(	O
"No such interface"	*(char)
)	O
;	O
case	O
MU_ERR_BADOP	O
:	O
return	O
_	O
(	O
"Inappropriate operation for this mode"	*(char)
)	O
;	O
case	O
MU_ERR_BAD_FILENAME	O
:	O
return	O
_	O
(	O
"Badly formed file or directory name"	*(char)
)	O
;	O
case	O
MU_ERR_READ	O
:	O
return	O
_	O
(	O
"Read error"	*(char)
)	O
;	O
case	O
MU_ERR_NO_TRANSPORT	O
:	O
return	O
_	O
(	O
"Transport stream not set"	*(char)
)	O
;	O
case	O
MU_ERR_AUTH_NO_CRED	O
:	O
return	O
_	O
(	O
"No credentials supplied"	*(char)
)	O
;	O
case	O
MU_ERR_URL_MISS_PARTS	O
:	O
return	O
_	O
(	O
"URL missing required parts"	*(char)
)	O
;	O
case	O
MU_ERR_URL_EXTRA_PARTS	O
:	O
return	O
_	O
(	O
"URL has parts not allowed by its scheme"	*(char)
)	O
;	O
case	O
MU_ERR_URL_INVALID_PARAMETER	O
:	O
return	O
_	O
(	O
"Invalid parameter in URL"	*(char)
)	O
;	O
case	O
MU_ERR_INFO_UNAVAILABLE	O
:	O
return	O
_	O
(	O
"Information is not yet available"	*(char)
)	O
;	O
case	O
MU_ERR_NONAME	O
:	O
return	O
_	O
(	O
"Name or service not known"	*(char)
)	O
;	O
case	O
MU_ERR_BADFLAGS	O
:	O
return	O
_	O
(	O
"Bad value for flags"	*(char)
)	O
;	O
case	O
MU_ERR_SOCKTYPE	O
:	O
return	O
_	O
(	O
"Socket type not supported"	*(char)
)	O
;	O
case	O
MU_ERR_FAMILY	O
:	O
return	O
_	O
(	O
"Address family not supported"	*(char)
)	O
;	O
case	O
MU_ERR_SERVICE	O
:	O
return	O
_	O
(	O
"Requested service not supported"	*(char)
)	O
;	O
case	O
MU_ERR_PERM_OWNER_MISMATCH	O
:	O
return	O
_	O
(	O
"File owner mismatch"	*(char)
)	O
;	O
case	O
MU_ERR_PERM_GROUP_WRITABLE	O
:	O
return	O
_	O
(	O
"Group writable file"	*(char)
)	O
;	O
case	O
MU_ERR_PERM_WORLD_WRITABLE	O
:	O
return	O
_	O
(	O
"World writable file"	*(char)
)	O
;	O
case	O
MU_ERR_PERM_GROUP_READABLE	O
:	O
return	O
_	O
(	O
"Group readable file"	*(char)
)	O
;	O
case	O
MU_ERR_PERM_WORLD_READABLE	O
:	O
return	O
_	O
(	O
"World readable file"	*(char)
)	O
;	O
case	O
MU_ERR_PERM_LINKED_WRDIR	O
:	O
return	O
_	O
(	O
"Linked file in a writable directory"	*(char)
)	O
;	O
case	O
MU_ERR_PERM_DIR_IWGRP	O
:	O
return	O
_	O
(	O
"File in group writable directory"	*(char)
)	O
;	O
case	O
MU_ERR_PERM_DIR_IWOTH	O
:	O
return	O
_	O
(	O
"File in world writable directory"	*(char)
)	O
;	O
case	O
MU_ERR_DISABLED	O
:	O
return	O
_	O
(	O
"Requested feature disabled in configuration"	*(char)
)	O
;	O
case	O
MU_ERR_FORMAT	O
:	O
return	O
_	O
(	O
"Error in format string"	*(char)
)	O
;	O
case	O
MU_ERR_REMOVE_SOURCE	O
:	O
return	O
_	O
(	O
"Failed to remove source file"	*(char)
)	O
;	O
case	O
MU_ERR_REMOVE_DEST	O
:	O
return	O
_	O
(	O
"Failed to remove destination file"	*(char)
)	O
;	O
case	O
MU_ERR_RESTORE_META	O
:	O
return	O
_	O
(	O
"Failed to restore ownership or mode"	*(char)
)	O
;	O
case	O
MU_ERR_USER0	O
:	O
return	O
_	O
(	O
"User-defined error 0"	*(char)
)	O
;	O
case	O
MU_ERR_USER1	O
:	O
return	O
_	O
(	O
"User-defined error 1"	*(char)
)	O
;	O
case	O
MU_ERR_USER2	O
:	O
return	O
_	O
(	O
"User-defined error 2"	*(char)
)	O
;	O
case	O
MU_ERR_USER3	O
:	O
return	O
_	O
(	O
"User-defined error 3"	*(char)
)	O
;	O
case	O
MU_ERR_USER4	O
:	O
return	O
_	O
(	O
"User-defined error 4"	*(char)
)	O
;	O
case	O
MU_ERR_USER5	O
:	O
return	O
_	O
(	O
"User-defined error 5"	*(char)
)	O
;	O
case	O
MU_ERR_USER6	O
:	O
return	O
_	O
(	O
"User-defined error 6"	*(char)
)	O
;	O
case	O
MU_ERR_USER7	O
:	O
return	O
_	O
(	O
"User-defined error 7"	*(char)
)	O
;	O
}	O
return	O
strerror	(int)->(*(char))
(	O
e	int
)	O
;	O
}	O
