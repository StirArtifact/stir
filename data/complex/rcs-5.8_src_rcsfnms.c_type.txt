struct	O
compair	struct(*(char),*(char))
{	O
char	O
const	O
*	O
suffix	*(char)
,	O
*	O
comlead	*(char)
;	O
}	O
;	O
static	O
struct	O
compair	struct(*(char),*(char))
const	O
comtable	array(struct(*(char),*(char)))
[	O
]	O
=	O
{	O
{	O
"a"	*(char)
,	O
"-- "	*(char)
}	O
,	O
{	O
"ada"	*(char)
,	O
"-- "	*(char)
}	O
,	O
{	O
"adb"	*(char)
,	O
"-- "	*(char)
}	O
,	O
{	O
"ads"	*(char)
,	O
"-- "	*(char)
}	O
,	O
{	O
"asm"	*(char)
,	O
";; "	*(char)
}	O
,	O
{	O
"bat"	*(char)
,	O
":: "	*(char)
}	O
,	O
{	O
"body"	*(char)
,	O
"-- "	*(char)
}	O
,	O
{	O
"c"	*(char)
,	O
" * "	*(char)
}	O
,	O
{	O
"c++"	*(char)
,	O
"// "	*(char)
}	O
,	O
{	O
"cc"	*(char)
,	O
"// "	*(char)
}	O
,	O
{	O
"cpp"	*(char)
,	O
"// "	*(char)
}	O
,	O
{	O
"cxx"	*(char)
,	O
"// "	*(char)
}	O
,	O
{	O
"cl"	*(char)
,	O
";;; "	*(char)
}	O
,	O
{	O
"cmd"	*(char)
,	O
":: "	*(char)
}	O
,	O
{	O
"cmf"	*(char)
,	O
"c "	*(char)
}	O
,	O
{	O
"cs"	*(char)
,	O
" * "	*(char)
}	O
,	O
{	O
"el"	*(char)
,	O
"; "	*(char)
}	O
,	O
{	O
"f"	*(char)
,	O
"c "	*(char)
}	O
,	O
{	O
"for"	*(char)
,	O
"c "	*(char)
}	O
,	O
{	O
"h"	*(char)
,	O
" * "	*(char)
}	O
,	O
{	O
"hpp"	*(char)
,	O
"// "	*(char)
}	O
,	O
{	O
"hxx"	*(char)
,	O
"// "	*(char)
}	O
,	O
{	O
"l"	*(char)
,	O
" * "	*(char)
}	O
,	O
{	O
"lisp"	*(char)
,	O
";;; "	*(char)
}	O
,	O
{	O
"lsp"	*(char)
,	O
";; "	*(char)
}	O
,	O
{	O
"m"	*(char)
,	O
"// "	*(char)
}	O
,	O
{	O
"mac"	*(char)
,	O
";; "	*(char)
}	O
,	O
{	O
"me"	*(char)
,	O
".\\\" "	*(char)
}	O
,	O
{	O
"ml"	*(char)
,	O
"; "	*(char)
}	O
,	O
{	O
"mm"	*(char)
,	O
".\\\" "	*(char)
}	O
,	O
{	O
"ms"	*(char)
,	O
".\\\" "	*(char)
}	O
,	O
{	O
"p"	*(char)
,	O
" * "	*(char)
}	O
,	O
{	O
"pas"	*(char)
,	O
" * "	*(char)
}	O
,	O
{	O
"ps"	*(char)
,	O
"% "	*(char)
}	O
,	O
{	O
"spec"	*(char)
,	O
"-- "	*(char)
}	O
,	O
{	O
"sty"	*(char)
,	O
"% "	*(char)
}	O
,	O
{	O
"tex"	*(char)
,	O
"% "	*(char)
}	O
,	O
{	O
"y"	*(char)
,	O
" * "	*(char)
}	O
,	O
{	O
NULL	O
,	O
"# "	*(char)
}	O
}	O
;	O
static	O
void	O
InitAdmin	()->(void)
(	O
void	O
)	O
{	O
register	O
char	O
const	O
*	O
ext	*(char)
;	O
REPO	O
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
=	O
NULL	O
;	O
BE	O
(	O
strictly_locking	bool
)	O
=	O
STRICT_LOCKING	O
;	O
REPO	O
(	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
)	O
=	O
empty_repo	(*(struct(*(char),*(struct),*(void),long)))->(*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),int,long,*(struct),*(struct(long,long,long,*`,long,array(long))),long,*(struct),*(struct))))
(	O
SINGLE	O
)	O
;	O
ext	*(char)
=	O
(	O
ext	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
MANI	O
(	O
filename	*(char)
)	O
,	O
'.'	O
)	O
)	O
?	O
1	int
+	O
ext	*(char)
:	O
""	*(char)
;	O
for	O
(	O
struct	O
compair	struct(*(char),*(char))
const	O
*	O
ent	*(struct(*(char),*(char)))
=	O
comtable	array(struct(*(char),*(char)))
;	O
;	O
ent	*(struct(*(char),*(char)))
++	O
)	O
if	O
(	O
!	O
ent	*(struct(*(char),*(char)))
->	O
suffix	*(char)
||	O
!	O
strcasecmp	(*(char),*(char))->(int)
(	O
ent	*(struct(*(char),*(char)))
->	O
suffix	*(char)
,	O
ext	*(char)
)	O
)	O
{	O
REPO	O
(	O
log_lead	struct(*(char),long)
)	O
.	O
string	*(char)
=	O
ent	*(struct(*(char),*(char)))
->	O
comlead	*(char)
;	O
REPO	O
(	O
log_lead	struct(*(char),long)
)	O
.	O
size	long
=	O
strlen	(*(char))->(long)
(	O
ent	*(struct(*(char),*(char)))
->	O
comlead	*(char)
)	O
;	O
break	O
;	O
}	O
BE	O
(	O
kws	int
)	O
=	O
kwsub_kv	int
;	O
}	O
char	O
const	O
*	O
basefilename	(*(char))->(*(char))
(	O
char	O
const	O
*	O
p	*(char)
)	O
{	O
register	O
char	O
const	O
*	O
b	*(char)
=	O
p	*(char)
,	O
*	O
q	*(char)
=	O
p	*(char)
;	O
for	O
(	O
;	O
;	O
)	O
switch	O
(	O
*	O
q	*(char)
++	O
)	O
{	O
case	O
SLASHes	char
:	O
b	*(char)
=	O
q	*(char)
;	O
break	O
;	O
case	O
0	int
:	O
return	O
b	*(char)
;	O
}	O
}	O
static	O
size_t	long
suffixlen	(*(char))->(long)
(	O
char	O
const	O
*	O
x	*(struct(*(char),long))
)	O
{	O
register	O
char	O
const	O
*	O
p	*(char)
;	O
p	*(char)
=	O
x	*(struct(*(char),long))
;	O
for	O
(	O
;	O
;	O
)	O
switch	O
(	O
*	O
p	*(char)
)	O
{	O
case	O
0	int
:	O
case	O
SLASHes	char
:	O
return	O
p	*(char)
-	O
x	*(struct(*(char),long))
;	O
default	O
:	O
++	O
p	*(char)
;	O
continue	O
;	O
}	O
}	O
char	O
const	O
*	O
rcssuffix	(*(char))->(*(char))
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
char	O
const	O
*	O
x	*(struct(*(char),long))
,	O
*	O
p	*(char)
,	O
*	O
nz	*(char)
;	O
size_t	long
nl	long
,	O
xl	long
;	O
nl	long
=	O
strlen	(*(char))->(long)
(	O
name	*(char)
)	O
;	O
nz	*(char)
=	O
name	*(char)
+	O
nl	long
;	O
x	*(struct(*(char),long))
=	O
BE	O
(	O
pe	*(char)
)	O
;	O
do	O
{	O
if	O
(	O
(	O
xl	long
=	O
suffixlen	(*(char))->(long)
(	O
x	*(struct(*(char),long))
)	O
)	O
)	O
{	O
if	O
(	O
xl	long
<=	O
nl	long
&&	O
MEM_SAME	O
(	O
xl	long
,	O
(	O
p	*(char)
=	O
nz	*(char)
-	O
xl	long
)	O
,	O
x	*(struct(*(char),long))
)	O
)	O
return	O
p	*(char)
;	O
}	O
else	O
for	O
(	O
p	*(char)
=	O
name	*(char)
;	O
p	*(char)
<	O
nz	*(char)
-	O
rcsdirlen	O
;	O
p	*(char)
++	O
)	O
if	O
(	O
isSLASH	(int)->(bool)
(	O
p	*(char)
[	O
rcsdirlen	O
]	O
)	O
&&	O
(	O
p	*(char)
==	O
name	*(char)
||	O
isSLASH	(int)->(bool)
(	O
p	*(char)
[	O
-	O
1	int
]	O
)	O
)	O
&&	O
MEM_SAME	O
(	O
rcsdirlen	O
,	O
p	*(char)
,	O
rcsdir	*(char)
)	O
)	O
return	O
nz	*(char)
;	O
x	*(struct(*(char),long))
+=	O
xl	long
;	O
}	O
while	O
(	O
*	O
x	*(struct(*(char),long))
++	O
)	O
;	O
return	O
NULL	O
;	O
}	O
struct	O
fro	struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long)))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),long)
*	O
rcsreadopen	(*(struct(*((*`)->(*`)),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct`,struct`,struct`,array(long))),int)))->(*(struct))
(	O
struct	O
maybe	struct(*((*(struct(*((*`)->(*`)),bool,struct(*`,long),*(struct`),struct(*`,long),*(struct`),int)))->(*(struct))),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),int)
*	O
m	*(struct)
)	O
{	O
return	O
fro_open	(*(char),*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)))
(	O
m	*(struct)
->	O
tentative	struct(*(char),long)
.	O
string	*(char)
,	O
FOPEN_RB	*(char)
,	O
m	*(struct)
->	O
status	int
)	O
;	O
}	O
static	O
bool	bool
finopen	(*(struct(*((*`)->(*`)),bool,struct(*(char),long),*(struct(*`,*`,*`,long)),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct`,struct`,struct`,array(long))),int)))->(bool)
(	O
struct	O
maybe	struct(*((*(struct(*((*`)->(*`)),bool,struct(*`,long),*(struct`),struct(*`,long),*(struct`),int)))->(*(struct))),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),int)
*	O
m	*(struct)
)	O
{	O
bool	bool
interesting	bool
,	O
preferold	bool
;	O
preferold	bool
=	O
m	*(struct)
->	O
bestfit	struct(*(char),long)
.	O
string	*(char)
[	O
0	int
]	O
&&	O
(	O
m	*(struct)
->	O
mustread	bool
||	O
0	int
<=	O
REPO	O
(	O
fd_lock	int
)	O
)	O
;	O
FLOW	O
(	O
from	*(struct)
)	O
=	O
(	O
m	*(struct)
->	O
open	*((*(struct(*((*`)->(*`)),bool,struct(*`,long),*(struct`),struct(*`,long),*(struct`),int)))->(*(struct)))
)	O
(	O
m	*(struct)
)	O
;	O
interesting	bool
=	O
FLOW	O
(	O
from	*(struct)
)	O
||	O
errno	O
!=	O
ENOENT	int
;	O
if	O
(	O
interesting	bool
||	O
!	O
preferold	bool
)	O
{	O
m	*(struct)
->	O
eno	int
=	O
errno	O
;	O
m	*(struct)
->	O
bestfit	struct(*(char),long)
=	O
m	*(struct)
->	O
tentative	struct(*(char),long)
;	O
}	O
return	O
interesting	bool
;	O
}	O
static	O
bool	bool
fin2open	(*(char),long,*(char),long,*(char),long,*(struct(*((*`)->(*`)),bool,struct(*(char),long),*(struct(*`,*`,*`,long)),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct`,struct`,struct`,array(long))),int)))->(bool)
(	O
char	O
const	O
*	O
d	*(char)
,	O
size_t	long
dlen	long
,	O
char	O
const	O
*	O
base	*(char)
,	O
size_t	long
baselen	long
,	O
char	O
const	O
*	O
x	*(struct(*(char),long))
,	O
size_t	long
xlen	long
,	O
struct	O
maybe	struct(*((*(struct(*((*`)->(*`)),bool,struct(*`,long),*(struct`),struct(*`,long),*(struct`),int)))->(*(struct))),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),int)
*	O
m	*(struct)
)	O
{	O
ACC	O
(	O
d	*(char)
)	O
;	O
ACC	O
(	O
rcsdir	*(char)
)	O
;	O
accumulate_byte	(*(struct(*(char),*(struct),*(void),long)),int)->(void)
(	O
m	*(struct)
->	O
space	*(struct)
,	O
SLASH	char
)	O
;	O
ACC	O
(	O
base	*(char)
)	O
;	O
ACC	O
(	O
x	*(struct(*(char),long))
)	O
;	O
OK	O
(	O
)	O
;	O
if	O
(	O
xlen	long
)	O
{	O
if	O
(	O
finopen	(*(struct(*((*`)->(*`)),bool,struct(*(char),long),*(struct(*`,*`,*`,long)),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct`,struct`,struct`,array(long))),int)))->(bool)
(	O
m	*(struct)
)	O
)	O
return	O
true	int
;	O
ACC	O
(	O
d	*(char)
)	O
;	O
ACC	O
(	O
base	*(char)
)	O
;	O
ACC	O
(	O
x	*(struct(*(char),long))
)	O
;	O
OK	O
(	O
)	O
;	O
}	O
return	O
finopen	(*(struct(*((*`)->(*`)),bool,struct(*(char),long),*(struct(*`,*`,*`,long)),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct`,struct`,struct`,array(long))),int)))->(bool)
(	O
m	*(struct)
)	O
;	O
}	O
int	O
pairnames	(int,*(*(char)),*((*(struct(*`,bool,struct`,*`,struct`,*`,int)))->(*(struct))),bool,bool)->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
open_rcsfile_fn	(*(struct))->(*(struct))
*	O
rcsopen	*((*(struct(*((*`)->(*`)),bool,struct(*`,long),*(struct`),struct(*`,long),*(struct`),int)))->(*(struct)))
,	O
bool	bool
mustread	bool
,	O
bool	bool
quiet	bool
)	O
{	O
register	O
char	O
*	O
p	*(char)
,	O
*	O
arg	*(char)
,	O
*	O
RCS1	*(char)
;	O
char	O
const	O
*	O
base	*(char)
,	O
*	O
RCSbase	*(char)
,	O
*	O
x	*(struct(*(char),long))
;	O
char	O
*	O
mani_filename	*(char)
;	O
bool	bool
paired	bool
;	O
size_t	long
arglen	long
,	O
dlen	long
,	O
baselen	long
,	O
xlen	long
;	O
struct	O
fro	struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long)))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),long)
*	O
from	*(struct)
;	O
struct	O
maybe	struct(*((*(struct(*((*`)->(*`)),bool,struct(*`,long),*(struct`),struct(*`,long),*(struct`),int)))->(*(struct))),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),int)
maybe	struct(*((*(struct(*((*`)->(*`)),bool,struct(*`,long),*(struct`),struct(*`,long),*(struct`),int)))->(*(struct))),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),int)
=	O
{	O
.	O
open	*((*(struct(*((*`)->(*`)),bool,struct(*`,long),*(struct`),struct(*`,long),*(struct`),int)))->(*(struct)))
=	O
rcsopen	*((*(struct(*((*`)->(*`)),bool,struct(*`,long),*(struct`),struct(*`,long),*(struct`),int)))->(*(struct)))
,	O
.	O
mustread	bool
=	O
mustread	bool
,	O
.	O
status	int
=	O
&	O
REPO	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
}	O
;	O
REPO	O
(	O
fd_lock	int
)	O
=	O
-	O
1	int
;	O
if	O
(	O
!	O
(	O
arg	*(char)
=	O
*	O
argv	*(*(char))
)	O
)	O
return	O
0	int
;	O
if	O
(	O
*	O
arg	*(char)
==	O
'-'	O
)	O
{	O
PERR	O
(	O
"%s option is ignored after filenames"	*(char)
,	O
arg	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
base	*(char)
=	O
basefilename	(*(char))->(*(char))
(	O
arg	*(char)
)	O
;	O
paired	bool
=	O
false	int
;	O
if	O
(	O
(	O
x	*(struct(*(char),long))
=	O
rcssuffix	(*(char))->(*(char))
(	O
arg	*(char)
)	O
)	O
)	O
{	O
RCS1	*(char)
=	O
arg	*(char)
;	O
RCSbase	*(char)
=	O
base	*(char)
;	O
baselen	long
=	O
x	*(struct(*(char),long))
-	O
base	*(char)
;	O
if	O
(	O
1	int
<	O
argc	int
&&	O
!	O
rcssuffix	(*(char))->(*(char))
(	O
mani_filename	*(char)
=	O
p	*(char)
=	O
argv	*(*(char))
[	O
1	int
]	O
)	O
&&	O
baselen	long
<=	O
(	O
arglen	long
=	O
(	O
size_t	long
)	O
strlen	(*(char))->(long)
(	O
p	*(char)
)	O
)	O
&&	O
(	O
(	O
p	*(char)
+=	O
arglen	long
-	O
baselen	long
)	O
==	O
mani_filename	*(char)
||	O
isSLASH	(int)->(bool)
(	O
p	*(char)
[	O
-	O
1	int
]	O
)	O
)	O
&&	O
MEM_SAME	O
(	O
baselen	long
,	O
base	*(char)
,	O
p	*(char)
)	O
)	O
{	O
argv	*(*(char))
[	O
1	int
]	O
=	O
NULL	O
;	O
paired	bool
=	O
true	int
;	O
}	O
else	O
{	O
mani_filename	*(char)
=	O
intern	(*(struct(*(char),*(struct),*(void),long)),*(char),long)->(*(char))
(	O
SINGLE	O
,	O
base	*(char)
,	O
baselen	long
+	O
1	int
)	O
;	O
mani_filename	*(char)
[	O
baselen	long
]	O
=	O
'\0'	O
;	O
}	O
}	O
else	O
{	O
mani_filename	*(char)
=	O
arg	*(char)
;	O
baselen	long
=	O
strlen	(*(char))->(long)
(	O
base	*(char)
)	O
;	O
if	O
(	O
1	int
<	O
argc	int
&&	O
(	O
x	*(struct(*(char),long))
=	O
rcssuffix	(*(char))->(*(char))
(	O
RCS1	*(char)
=	O
argv	*(*(char))
[	O
1	int
]	O
)	O
)	O
&&	O
RCS1	*(char)
+	O
baselen	long
<=	O
x	*(struct(*(char),long))
&&	O
(	O
(	O
RCSbase	*(char)
=	O
x	*(struct(*(char),long))
-	O
baselen	long
)	O
==	O
RCS1	*(char)
||	O
isSLASH	(int)->(bool)
(	O
RCSbase	*(char)
[	O
-	O
1	int
]	O
)	O
)	O
&&	O
MEM_SAME	O
(	O
baselen	long
,	O
base	*(char)
,	O
RCSbase	*(char)
)	O
)	O
{	O
argv	*(*(char))
[	O
1	int
]	O
=	O
NULL	O
;	O
paired	bool
=	O
true	int
;	O
}	O
else	O
RCSbase	*(char)
=	O
RCS1	*(char)
=	O
NULL	O
;	O
}	O
MANI	O
(	O
filename	*(char)
)	O
=	O
mani_filename	*(char)
;	O
maybe	struct(*((*(struct(*((*`)->(*`)),bool,struct(*`,long),*(struct`),struct(*`,long),*(struct`),int)))->(*(struct))),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),int)
.	O
space	*(struct)
=	O
make_space	(array(char))->(*(struct(*(char),*(struct),*(void),long)))
(	O
__func__	O
)	O
;	O
if	O
(	O
RCSbase	*(char)
!=	O
RCS1	*(char)
)	O
{	O
maybe	struct(*((*(struct(*((*`)->(*`)),bool,struct(*`,long),*(struct`),struct(*`,long),*(struct`),int)))->(*(struct))),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),int)
.	O
bestfit	struct(*(char),long)
.	O
string	*(char)
=	O
RCS1	*(char)
;	O
maybe	struct(*((*(struct(*((*`)->(*`)),bool,struct(*`,long),*(struct`),struct(*`,long),*(struct`),int)))->(*(struct))),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),int)
.	O
bestfit	struct(*(char),long)
.	O
size	long
=	O
strlen	(*(char))->(long)
(	O
RCS1	*(char)
)	O
;	O
maybe	struct(*((*(struct(*((*`)->(*`)),bool,struct(*`,long),*(struct`),struct(*`,long),*(struct`),int)))->(*(struct))),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),int)
.	O
tentative	struct(*(char),long)
=	O
maybe	struct(*((*(struct(*((*`)->(*`)),bool,struct(*`,long),*(struct`),struct(*`,long),*(struct`),int)))->(*(struct))),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),int)
.	O
bestfit	struct(*(char),long)
;	O
FLOW	O
(	O
from	*(struct)
)	O
=	O
(	O
*	O
rcsopen	*((*(struct(*((*`)->(*`)),bool,struct(*`,long),*(struct`),struct(*`,long),*(struct`),int)))->(*(struct)))
)	O
(	O
&	O
maybe	struct(*((*(struct(*((*`)->(*`)),bool,struct(*`,long),*(struct`),struct(*`,long),*(struct`),int)))->(*(struct))),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),int)
)	O
;	O
maybe	struct(*((*(struct(*((*`)->(*`)),bool,struct(*`,long),*(struct`),struct(*`,long),*(struct`),int)))->(*(struct))),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),int)
.	O
eno	int
=	O
errno	O
;	O
}	O
else	O
{	O
maybe	struct(*((*(struct(*((*`)->(*`)),bool,struct(*`,long),*(struct`),struct(*`,long),*(struct`),int)))->(*(struct))),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),int)
.	O
bestfit	struct(*(char),long)
.	O
string	*(char)
=	O
""	*(char)
;	O
maybe	struct(*((*(struct(*((*`)->(*`)),bool,struct(*`,long),*(struct`),struct(*`,long),*(struct`),int)))->(*(struct))),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),int)
.	O
bestfit	struct(*(char),long)
.	O
size	long
=	O
0	int
;	O
if	O
(	O
RCS1	*(char)
)	O
fin2open	(*(char),long,*(char),long,*(char),long,*(struct(*((*`)->(*`)),bool,struct(*(char),long),*(struct(*`,*`,*`,long)),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct`,struct`,struct`,array(long))),int)))->(bool)
(	O
arg	*(char)
,	O
(	O
size_t	long
)	O
0	int
,	O
RCSbase	*(char)
,	O
baselen	long
,	O
x	*(struct(*(char),long))
,	O
strlen	(*(char))->(long)
(	O
x	*(struct(*(char),long))
)	O
,	O
&	O
maybe	struct(*((*(struct(*((*`)->(*`)),bool,struct(*`,long),*(struct`),struct(*`,long),*(struct`),int)))->(*(struct))),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),int)
)	O
;	O
else	O
{	O
dlen	long
=	O
base	*(char)
-	O
arg	*(char)
;	O
x	*(struct(*(char),long))
=	O
BE	O
(	O
pe	*(char)
)	O
;	O
while	O
(	O
!	O
fin2open	(*(char),long,*(char),long,*(char),long,*(struct(*((*`)->(*`)),bool,struct(*(char),long),*(struct(*`,*`,*`,long)),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct`,struct`,struct`,array(long))),int)))->(bool)
(	O
arg	*(char)
,	O
dlen	long
,	O
base	*(char)
,	O
baselen	long
,	O
x	*(struct(*(char),long))
,	O
xlen	long
=	O
suffixlen	(*(char))->(long)
(	O
x	*(struct(*(char),long))
)	O
,	O
&	O
maybe	struct(*((*(struct(*((*`)->(*`)),bool,struct(*`,long),*(struct`),struct(*`,long),*(struct`),int)))->(*(struct))),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),int)
)	O
)	O
{	O
x	*(struct(*(char),long))
+=	O
xlen	long
;	O
if	O
(	O
!	O
*	O
x	*(struct(*(char),long))
++	O
)	O
break	O
;	O
}	O
}	O
}	O
REPO	O
(	O
filename	*(char)
)	O
=	O
p	*(char)
=	O
intern	(*(struct(*(char),*(struct),*(void),long)),*(char),long)->(*(char))
(	O
SINGLE	O
,	O
maybe	struct(*((*(struct(*((*`)->(*`)),bool,struct(*`,long),*(struct`),struct(*`,long),*(struct`),int)))->(*(struct))),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),int)
.	O
bestfit	struct(*(char),long)
.	O
string	*(char)
,	O
maybe	struct(*((*(struct(*((*`)->(*`)),bool,struct(*`,long),*(struct`),struct(*`,long),*(struct`),int)))->(*(struct))),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),int)
.	O
bestfit	struct(*(char),long)
.	O
size	long
)	O
;	O
FLOW	O
(	O
erroneousp	bool
)	O
=	O
false	int
;	O
BE	O
(	O
Oerrloop	bool
)	O
=	O
false	int
;	O
if	O
(	O
(	O
from	*(struct)
=	O
FLOW	O
(	O
from	*(struct)
)	O
)	O
)	O
{	O
if	O
(	O
!	O
S_ISREG	O
(	O
maybe	struct(*((*(struct(*((*`)->(*`)),bool,struct(*`,long),*(struct`),struct(*`,long),*(struct`),int)))->(*(struct))),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),int)
.	O
status	int
->	O
st_mode	int
)	O
)	O
{	O
PERR	O
(	O
"%s isn't a regular file -- ignored"	*(char)
,	O
p	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
REPO	O
(	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
)	O
=	O
grok_all	(*(struct(*(char),*(struct),*(void),long)),*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)))->(*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),int,long,*(struct),*(struct(long,long,long,*`,long,array(long))),long,*(struct),*(struct))))
(	O
SINGLE	O
,	O
from	*(struct)
)	O
;	O
FLOW	O
(	O
to	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
=	O
NULL	O
;	O
}	O
else	O
{	O
if	O
(	O
maybe	struct(*((*(struct(*((*`)->(*`)),bool,struct(*`,long),*(struct`),struct(*`,long),*(struct`),int)))->(*(struct))),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),int)
.	O
eno	int
!=	O
ENOENT	int
||	O
mustread	bool
||	O
PROB	O
(	O
REPO	O
(	O
fd_lock	int
)	O
)	O
)	O
{	O
if	O
(	O
maybe	struct(*((*(struct(*((*`)->(*`)),bool,struct(*`,long),*(struct`),struct(*`,long),*(struct`),int)))->(*(struct))),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),int)
.	O
eno	int
==	O
EEXIST	int
)	O
PERR	O
(	O
"RCS file %s is in use"	*(char)
,	O
p	*(char)
)	O
;	O
else	O
if	O
(	O
!	O
quiet	bool
||	O
maybe	struct(*((*(struct(*((*`)->(*`)),bool,struct(*`,long),*(struct`),struct(*`,long),*(struct`),int)))->(*(struct))),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),int)
.	O
eno	int
!=	O
ENOENT	int
)	O
syserror	(int,*(char))->(void)
(	O
maybe	struct(*((*(struct(*((*`)->(*`)),bool,struct(*`,long),*(struct`),struct(*`,long),*(struct`),int)))->(*(struct))),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),int)
.	O
eno	int
,	O
p	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
InitAdmin	()->(void)
(	O
)	O
;	O
}	O
;	O
if	O
(	O
paired	bool
&&	O
MANI	O
(	O
standard_output	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
MWARN	O
(	O
"Working file ignored due to -p option"	*(char)
)	O
;	O
PREV	O
(	O
valid	bool
)	O
=	O
false	int
;	O
close_space	(*(struct(*(char),*(struct),*(void),long)))->(void)
(	O
maybe	struct(*((*(struct(*((*`)->(*`)),bool,struct(*`,long),*(struct`),struct(*`,long),*(struct`),int)))->(*(struct))),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),int)
.	O
space	*(struct)
)	O
;	O
return	O
from	*(struct)
?	O
1	int
:	O
-	O
1	int
;	O
}	O
static	O
size_t	long
dir_useful_len	(*(char))->(long)
(	O
char	O
const	O
*	O
d	*(char)
)	O
{	O
size_t	long
dlen	long
=	O
strlen	(*(char))->(long)
(	O
d	*(char)
)	O
;	O
if	O
(	O
DOUBLE_SLASH_IS_DISTINCT_ROOT	int
&&	O
dlen	long
==	O
2	int
&&	O
isSLASH	(int)->(bool)
(	O
d	*(char)
[	O
0	int
]	O
)	O
&&	O
isSLASH	(int)->(bool)
(	O
d	*(char)
[	O
1	int
]	O
)	O
)	O
--	O
dlen	long
;	O
else	O
while	O
(	O
dlen	long
&&	O
isSLASH	(int)->(bool)
(	O
d	*(char)
[	O
dlen	long
-	O
1	int
]	O
)	O
)	O
--	O
dlen	long
;	O
return	O
dlen	long
;	O
}	O
char	O
const	O
*	O
getfullRCSname	()->(*(char))
(	O
void	O
)	O
{	O
char	O
const	O
*	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
=	O
REPO	O
(	O
filename	*(char)
)	O
;	O
if	O
(	O
ABSFNAME	O
(	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
)	O
)	O
return	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
;	O
else	O
{	O
char	O
*	O
cwd	*(char)
;	O
char	O
*	O
rv	*(char)
;	O
size_t	long
len	char
;	O
if	O
(	O
!	O
(	O
cwd	*(char)
=	O
BE	O
(	O
cwd	*(char)
)	O
)	O
)	O
{	O
char	O
*	O
PWD	*(char)
=	O
cgetenv	(*(char))->(*(char))
(	O
"PWD"	*(char)
)	O
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
PWDstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
,	O
dotstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
if	O
(	O
!	O
(	O
(	O
cwd	*(char)
=	O
PWD	*(char)
)	O
&&	O
ABSFNAME	O
(	O
PWD	*(char)
)	O
&&	O
!	O
PROB	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
PWD	*(char)
,	O
&	O
PWDstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
)	O
&&	O
!	O
PROB	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
"."	*(char)
,	O
&	O
dotstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
)	O
&&	O
SAME_INODE	O
(	O
PWDstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
,	O
dotstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
)	O
)	O
{	O
size_t	long
sz	long
=	O
64	int
;	O
while	O
(	O
!	O
(	O
cwd	*(char)
=	O
alloc	(*(struct(*(char),*(struct),*(void),long)),*(char),long)->(*(void))
(	O
PLEXUS	O
,	O
__func__	O
,	O
sz	long
)	O
,	O
getcwd	(*(char),long)->(*(char))
(	O
cwd	*(char)
,	O
sz	long
)	O
)	O
)	O
{	O
brush_off	(*(struct(*(char),*(struct),*(void),long)),*(void))->(void)
(	O
PLEXUS	O
,	O
cwd	*(char)
)	O
;	O
if	O
(	O
errno	O
==	O
ERANGE	int
)	O
sz	long
<<=	O
1	int
;	O
else	O
if	O
(	O
(	O
cwd	*(char)
=	O
PWD	*(char)
)	O
)	O
break	O
;	O
else	O
fatal_sys	(*(char))->(void)
(	O
"getcwd"	*(char)
)	O
;	O
}	O
}	O
cwd	*(char)
[	O
dir_useful_len	(*(char))->(long)
(	O
cwd	*(char)
)	O
]	O
=	O
'\0'	O
;	O
BE	O
(	O
cwd	*(char)
)	O
=	O
cwd	*(char)
;	O
}	O
for	O
(	O
;	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
[	O
0	int
]	O
==	O
'.'	O
&&	O
isSLASH	(int)->(bool)
(	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
[	O
1	int
]	O
)	O
;	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
+=	O
2	int
)	O
while	O
(	O
isSLASH	(int)->(bool)
(	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
[	O
2	int
]	O
)	O
)	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
++	O
;	O
accf	(*(struct(*(char),*(struct),*(void),long)),*(char))->(void)
(	O
SINGLE	O
,	O
"%s%c%s"	*(char)
,	O
cwd	*(char)
,	O
SLASH	char
,	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
)	O
;	O
rv	*(char)
=	O
finish_string	(*(struct(*(char),*(struct),*(void),long)),*(long))->(*(char))
(	O
SINGLE	O
,	O
&	O
len	char
)	O
;	O
return	O
rv	*(char)
;	O
}	O
}	O
bool	bool
isSLASH	(int)->(bool)
(	O
int	O
c	int
)	O
{	O
return	O
(	O
SLASH	char
==	O
c	int
)	O
;	O
}	O
