struct	O
bsts_node	O
{	O
struct	O
bsts_node	O
*	O
link	O
[	O
2	int
]	O
;	O
int	O
data	O
;	O
}	O
;	O
struct	O
bsts_tree	O
{	O
struct	O
bsts_node	O
*	O
root	O
;	O
struct	O
bsts_node	O
sentinel	O
;	O
struct	O
libavl_allocator	struct(*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),long)->(*(void))),*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),*(void))->(void)))
*	O
alloc	O
;	O
}	O
;	O
extern	O
struct	O
libavl_allocator	struct(*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),long)->(*(void))),*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),*(void))->(void)))
bsts_allocator_default	O
;	O
void	O
*	O
bsts_malloc	O
(	O
struct	O
libavl_allocator	struct(*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),long)->(*(void))),*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),*(void))->(void)))
*	O
,	O
size_t	long
)	O
;	O
void	O
bsts_free	O
(	O
struct	O
libavl_allocator	struct(*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),long)->(*(void))),*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),*(void))->(void)))
*	O
,	O
void	O
*	O
)	O
;	O
void	O
*	O
bsts_malloc	O
(	O
struct	O
libavl_allocator	struct(*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),long)->(*(void))),*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),*(void))->(void)))
*	O
allocator	*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void))))
,	O
size_t	long
size	O
)	O
{	O
assert	O
(	O
allocator	*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void))))
!=	O
NULL	O
&&	O
size	O
>	O
0	int
)	O
;	O
return	O
malloc	(long)->(*(void))
(	O
size	O
)	O
;	O
}	O
void	O
bsts_free	O
(	O
struct	O
libavl_allocator	struct(*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),long)->(*(void))),*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),*(void))->(void)))
*	O
allocator	*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void))))
,	O
void	O
*	O
block	O
)	O
{	O
assert	O
(	O
allocator	*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void))))
!=	O
NULL	O
&&	O
block	O
!=	O
NULL	O
)	O
;	O
free	(*(void))->(void)
(	O
block	O
)	O
;	O
}	O
struct	O
libavl_allocator	struct(*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),long)->(*(void))),*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),*(void))->(void)))
bsts_allocator_default	O
=	O
{	O
bsts_malloc	O
,	O
bsts_free	O
}	O
;	O
int	O
bsts_find	O
(	O
struct	O
bsts_tree	O
*	O
tree	O
,	O
int	O
item	O
)	O
{	O
const	O
struct	O
bsts_node	O
*	O
node	O
;	O
tree	O
->	O
sentinel	O
.	O
data	O
=	O
item	O
;	O
node	O
=	O
tree	O
->	O
root	O
;	O
while	O
(	O
item	O
!=	O
node	O
->	O
data	O
)	O
if	O
(	O
item	O
<	O
node	O
->	O
data	O
)	O
node	O
=	O
node	O
->	O
link	O
[	O
0	int
]	O
;	O
else	O
node	O
=	O
node	O
->	O
link	O
[	O
1	int
]	O
;	O
return	O
node	O
!=	O
&	O
tree	O
->	O
sentinel	O
;	O
}	O
void	O
bsts_insert	O
(	O
struct	O
bsts_tree	O
*	O
tree	O
,	O
int	O
item	O
)	O
{	O
struct	O
bsts_node	O
*	O
*	O
q	O
=	O
&	O
tree	O
->	O
root	O
;	O
struct	O
bsts_node	O
*	O
p	O
=	O
tree	O
->	O
root	O
;	O
tree	O
->	O
sentinel	O
.	O
data	O
=	O
item	O
;	O
while	O
(	O
item	O
!=	O
p	O
->	O
data	O
)	O
{	O
int	O
dir	O
=	O
item	O
>	O
p	O
->	O
data	O
;	O
q	O
=	O
&	O
p	O
->	O
link	O
[	O
dir	O
]	O
;	O
p	O
=	O
p	O
->	O
link	O
[	O
dir	O
]	O
;	O
}	O
if	O
(	O
p	O
==	O
&	O
tree	O
->	O
sentinel	O
)	O
{	O
*	O
q	O
=	O
tree	O
->	O
alloc	O
->	O
libavl_malloc	*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),long)->(*(void)))
(	O
tree	O
->	O
alloc	O
,	O
sizeof	O
*	O
*	O
q	O
)	O
;	O
if	O
(	O
*	O
q	O
==	O
NULL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"out of memory\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	O
)	O
;	O
}	O
(	O
*	O
q	O
)	O
->	O
link	O
[	O
0	int
]	O
=	O
(	O
*	O
q	O
)	O
->	O
link	O
[	O
1	int
]	O
=	O
&	O
tree	O
->	O
sentinel	O
;	O
(	O
*	O
q	O
)	O
->	O
data	O
=	O
item	O
;	O
}	O
}	O
int	O
test_correctness	(*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),array(int),array(int),int,int)->(int)
(	O
struct	O
libavl_allocator	struct(*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),long)->(*(void))),*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),*(void))->(void)))
*	O
alloc	O
,	O
int	O
*	O
insert	array(int)
,	O
int	O
*	O
delete	array(int)
,	O
int	O
n	int
,	O
int	O
verbosity	int
)	O
{	O
struct	O
bsts_tree	O
tree	O
;	O
int	O
okay	O
=	O
1	int
;	O
int	O
i	O
;	O
tree	O
.	O
root	O
=	O
&	O
tree	O
.	O
sentinel	O
;	O
tree	O
.	O
alloc	O
=	O
alloc	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
n	int
;	O
i	O
++	O
)	O
bsts_insert	O
(	O
&	O
tree	O
,	O
insert	array(int)
[	O
i	O
]	O
)	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
n	int
;	O
i	O
++	O
)	O
if	O
(	O
!	O
bsts_find	O
(	O
&	O
tree	O
,	O
i	O
)	O
)	O
{	O
printf	(*(char))->(int)
(	O
"%d should be in tree, but isn't\n"	*(char)
,	O
i	O
)	O
;	O
okay	O
=	O
0	int
;	O
}	O
return	O
okay	O
;	O
}	O
int	O
test_overflow	(*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),array(int),int,int)->(int)
(	O
struct	O
libavl_allocator	struct(*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),long)->(*(void))),*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),*(void))->(void)))
*	O
alloc	O
,	O
int	O
order	array(int)
[	O
]	O
,	O
int	O
n	int
,	O
int	O
verbosity	int
)	O
{	O
return	O
0	int
;	O
}	O
