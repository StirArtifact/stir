int	O
sieve_addheader	(*(struct))->(int)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
)	O
{	O
const	O
char	O
*	O
field_name	*(char)
;	O
const	O
char	O
*	O
field_value	*(char)
;	O
mu_message_t	*(struct)
msg	*(struct)
;	O
mu_header_t	*(struct)
hdr	*(struct)
;	O
int	O
rc	int
;	O
mu_sieve_get_arg	(*(struct),long,enum(int,int,int,int,int),*(void))->(void)
(	O
mach	*(struct)
,	O
0	int
,	O
SVT_STRING	int
,	O
&	O
field_name	*(char)
)	O
;	O
mu_sieve_get_arg	(*(struct),long,enum(int,int,int,int,int),*(void))->(void)
(	O
mach	*(struct)
,	O
1	int
,	O
SVT_STRING	int
,	O
&	O
field_value	*(char)
)	O
;	O
mu_sieve_log_action	(*(struct),*(char),*(char))->(void)
(	O
mach	*(struct)
,	O
"ADDHEADER"	*(char)
,	O
"%s: %s"	*(char)
,	O
field_name	*(char)
,	O
field_value	*(char)
)	O
;	O
if	O
(	O
mu_sieve_is_dry_run	(*(struct))->(int)
(	O
mach	*(struct)
)	O
)	O
return	O
0	int
;	O
msg	*(struct)
=	O
mu_sieve_get_message	(*(struct))->(*(struct))
(	O
mach	*(struct)
)	O
;	O
rc	int
=	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
hdr	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	(*(struct),*(char))->(void)
(	O
mach	*(struct)
,	O
"%lu: %s: %s"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	(*(struct))->(long)
(	O
mach	*(struct)
)	O
,	O
_	O
(	O
"cannot get message header"	*(char)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
mu_sieve_abort	(*(struct))->(void)
(	O
mach	*(struct)
)	O
;	O
}	O
rc	int
=	O
(	O
mu_sieve_get_tag	(*(struct),*(char),enum(int,int,int,int,int),*(void))->(int)
(	O
mach	*(struct)
,	O
"last"	*(char)
,	O
SVT_VOID	int
,	O
NULL	O
)	O
?	O
mu_header_append	(*(struct),*(char),*(char))->(int)
:	O
mu_header_prepend	(*(struct),*(char),*(char))->(int)
)	O
(	O
hdr	*(struct)
,	O
field_name	*(char)
,	O
field_value	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	(*(struct),*(char))->(void)
(	O
mach	*(struct)
,	O
"%lu: %s: %s"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	(*(struct))->(long)
(	O
mach	*(struct)
)	O
,	O
_	O
(	O
"cannot append message header"	*(char)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
mu_sieve_abort	(*(struct))->(void)
(	O
mach	*(struct)
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
sieve_deleteheader	(*(struct))->(int)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
)	O
{	O
mu_sieve_value_t	struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long)))
*	O
val	*(char)
;	O
const	O
char	O
*	O
field_name	*(char)
;	O
mu_message_t	*(struct)
msg	*(struct)
;	O
mu_header_t	*(struct)
hdr	*(struct)
;	O
int	O
rc	int
;	O
mu_sieve_comparator_t	*((*(struct),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int))
comp	array(*((*(struct),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int)))
;	O
mu_iterator_t	*(struct)
itr	*(struct)
;	O
size_t	long
i	long
,	O
idx	long
=	O
0	int
;	O
mu_sieve_get_arg	(*(struct),long,enum(int,int,int,int,int),*(void))->(void)
(	O
mach	*(struct)
,	O
0	int
,	O
SVT_STRING	int
,	O
&	O
field_name	*(char)
)	O
;	O
val	*(char)
=	O
mu_sieve_get_arg_optional	(*(struct),long)->(*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))))
(	O
mach	*(struct)
,	O
1	int
)	O
;	O
mu_sieve_log_action	(*(struct),*(char),*(char))->(void)
(	O
mach	*(struct)
,	O
"DELETEHEADER"	*(char)
,	O
"%s%s"	*(char)
,	O
field_name	*(char)
,	O
val	*(char)
?	O
" (values)"	*(char)
:	O
""	*(char)
)	O
;	O
if	O
(	O
mu_sieve_is_dry_run	(*(struct))->(int)
(	O
mach	*(struct)
)	O
)	O
return	O
0	int
;	O
msg	*(struct)
=	O
mu_sieve_get_message	(*(struct))->(*(struct))
(	O
mach	*(struct)
)	O
;	O
rc	int
=	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
hdr	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	(*(struct),*(char))->(void)
(	O
mach	*(struct)
,	O
"%lu: %s: %s"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	(*(struct))->(long)
(	O
mach	*(struct)
)	O
,	O
_	O
(	O
"cannot get message header"	*(char)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
mu_sieve_abort	(*(struct))->(void)
(	O
mach	*(struct)
)	O
;	O
}	O
rc	int
=	O
mu_header_get_iterator	(*(struct),*(*(struct)))->(int)
(	O
hdr	*(struct)
,	O
&	O
itr	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	(*(struct),*(char))->(void)
(	O
mach	*(struct)
,	O
"mu_header_get_iterator: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
mu_sieve_abort	(*(struct))->(void)
(	O
mach	*(struct)
)	O
;	O
}	O
if	O
(	O
mu_sieve_get_tag	(*(struct),*(char),enum(int,int,int,int,int),*(void))->(int)
(	O
mach	*(struct)
,	O
"last"	*(char)
,	O
SVT_VOID	int
,	O
NULL	O
)	O
)	O
{	O
int	O
backwards	int
=	O
1	int
;	O
mu_iterator_ctl	(*(struct),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int)
(	O
itr	*(struct)
,	O
mu_itrctl_set_direction	int
,	O
&	O
backwards	int
)	O
;	O
}	O
comp	array(*((*(struct),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int)))
=	O
mu_sieve_get_comparator	(*(struct))->(*((*(struct),*(struct(int,int,*`,*`,*`)),*(char))->(int)))
(	O
mach	*(struct)
)	O
;	O
mu_sieve_get_tag	(*(struct),*(char),enum(int,int,int,int,int),*(void))->(int)
(	O
mach	*(struct)
,	O
"index"	*(char)
,	O
SVT_NUMBER	int
,	O
&	O
idx	long
)	O
;	O
for	O
(	O
i	long
=	O
0	int
,	O
mu_iterator_first	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
!	O
mu_iterator_is_done	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
mu_iterator_next	(*(struct))->(int)
(	O
itr	*(struct)
)	O
)	O
{	O
const	O
char	O
*	O
fn	*(char)
,	O
*	O
fv	*(char)
;	O
mu_iterator_current_kv	(*(struct),*(*(void)),*(*(void)))->(int)
(	O
itr	*(struct)
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
fn	*(char)
,	O
(	O
void	O
*	O
*	O
)	O
&	O
fv	*(char)
)	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
field_name	*(char)
,	O
fn	*(char)
)	O
)	O
continue	O
;	O
if	O
(	O
idx	long
&&	O
++	O
i	long
<	O
idx	long
)	O
continue	O
;	O
if	O
(	O
val	*(char)
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
val	*(char)
->	O
v	union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct)))
.	O
list	*(struct)
.	O
count	*(long)
;	O
i	long
++	O
)	O
{	O
mu_sieve_string_t	struct(int,int,*(char),*(char),*(void))
*	O
s	*(char)
=	O
mu_sieve_string_raw	(*(struct),*(struct(long,long)),long)->(*(struct(int,int,*(char),*(char),*(void))))
(	O
mach	*(struct)
,	O
&	O
val	*(char)
->	O
v	union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct)))
.	O
list	*(struct)
,	O
i	long
)	O
;	O
if	O
(	O
comp	array(*((*(struct),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int)))
(	O
mach	*(struct)
,	O
s	*(char)
,	O
fv	*(char)
)	O
)	O
{	O
mu_iterator_ctl	(*(struct),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int)
(	O
itr	*(struct)
,	O
mu_itrctl_delete	int
,	O
NULL	O
)	O
;	O
break	O
;	O
}	O
}	O
}	O
else	O
mu_iterator_ctl	(*(struct),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int)
(	O
itr	*(struct)
,	O
mu_itrctl_delete	int
,	O
NULL	O
)	O
;	O
if	O
(	O
idx	long
)	O
break	O
;	O
}	O
mu_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
itr	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
mu_sieve_tag_def_t	struct(*(char),enum(int,int,int,int,int))
addheader_tags	array(struct(*(char),enum(int,int,int,int,int)))
[	O
]	O
=	O
{	O
{	O
"last"	*(char)
,	O
SVT_VOID	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
mu_sieve_tag_group_t	struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct))->(int)))
addheader_tag_groups	array(struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct))->(int))))
[	O
]	O
=	O
{	O
{	O
addheader_tags	array(struct(*(char),enum(int,int,int,int,int)))
,	O
NULL	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
mu_sieve_data_type	enum(int,int,int,int,int)
addheader_args	array(enum(int,int,int,int,int))
[	O
]	O
=	O
{	O
SVT_STRING	int
,	O
SVT_STRING	int
,	O
SVT_VOID	int
}	O
;	O
static	O
mu_sieve_tag_def_t	struct(*(char),enum(int,int,int,int,int))
match_part_tags	array(struct(*(char),enum(int,int,int,int,int)))
[	O
]	O
=	O
{	O
{	O
"is"	*(char)
,	O
SVT_VOID	int
}	O
,	O
{	O
"contains"	*(char)
,	O
SVT_VOID	int
}	O
,	O
{	O
"matches"	*(char)
,	O
SVT_VOID	int
}	O
,	O
{	O
"regex"	*(char)
,	O
SVT_VOID	int
}	O
,	O
{	O
"count"	*(char)
,	O
SVT_STRING	int
}	O
,	O
{	O
"value"	*(char)
,	O
SVT_STRING	int
}	O
,	O
{	O
"comparator"	*(char)
,	O
SVT_STRING	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
mu_sieve_tag_def_t	struct(*(char),enum(int,int,int,int,int))
deleteheader_tags	array(struct(*(char),enum(int,int,int,int,int)))
[	O
]	O
=	O
{	O
{	O
"last"	*(char)
,	O
SVT_VOID	int
}	O
,	O
{	O
"index"	*(char)
,	O
SVT_NUMBER	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
mu_sieve_tag_group_t	struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct))->(int)))
deleteheader_tag_groups	array(struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct))->(int))))
[	O
]	O
=	O
{	O
{	O
deleteheader_tags	array(struct(*(char),enum(int,int,int,int,int)))
,	O
NULL	O
}	O
,	O
{	O
match_part_tags	array(struct(*(char),enum(int,int,int,int,int)))
,	O
mu_sieve_match_part_checker	(*(struct))->(int)
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
mu_sieve_data_type	enum(int,int,int,int,int)
deleteheader_args	array(enum(int,int,int,int,int))
[	O
]	O
=	O
{	O
SVT_STRING	int
,	O
SVT_VOID	int
}	O
;	O
int	O
SIEVE_EXPORT	O
(	O
editheader	O
,	O
init	O
)	O
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
)	O
{	O
mu_sieve_register_action	(*(struct),*(char),*((*(struct))->(int)),*(enum(int,int,int,int,int)),*(struct(*(struct(*`,enum(int,int,int,int,int))),*((*`)->(int)))),int)->(void)
(	O
mach	*(struct)
,	O
"editheader"	*(char)
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
1	int
)	O
;	O
mu_sieve_register_action	(*(struct),*(char),*((*(struct))->(int)),*(enum(int,int,int,int,int)),*(struct(*(struct(*`,enum(int,int,int,int,int))),*((*`)->(int)))),int)->(void)
(	O
mach	*(struct)
,	O
"addheader"	*(char)
,	O
sieve_addheader	(*(struct))->(int)
,	O
addheader_args	array(enum(int,int,int,int,int))
,	O
addheader_tag_groups	array(struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct))->(int))))
,	O
1	int
)	O
;	O
mu_sieve_register_action_ext	(*(struct),*(char),*((*(struct))->(int)),*(enum(int,int,int,int,int)),*(enum(int,int,int,int,int)),*(struct(*(struct(*`,enum(int,int,int,int,int))),*((*`)->(int)))),int)->(void)
(	O
mach	*(struct)
,	O
"deleteheader"	*(char)
,	O
sieve_deleteheader	(*(struct))->(int)
,	O
deleteheader_args	array(enum(int,int,int,int,int))
,	O
deleteheader_args	array(enum(int,int,int,int,int))
,	O
deleteheader_tag_groups	array(struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct))->(int))))
,	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
