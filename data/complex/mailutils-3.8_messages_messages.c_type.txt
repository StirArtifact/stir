static	O
int	O
messages_count	(*(char))->(int)
(	O
const	O
char	O
*	O
)	O
;	O
static	O
int	O
silent	int
=	O
0	int
;	O
static	O
struct	O
mu_option	struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)),*(char))
messages_options	array(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct(int,*`,long,*`,int,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,int,*`,int,int,int,long,*`)),*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`)),*(char))->(void)),*(char)))
[	O
]	O
=	O
{	O
{	O
"quiet"	*(char)
,	O
'q'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"only display number of messages"	*(char)
)	O
,	O
mu_c_bool	int
,	O
&	O
silent	int
}	O
,	O
{	O
"silent"	*(char)
,	O
's'	O
,	O
NULL	O
,	O
MU_OPTION_ALIAS	int
}	O
,	O
MU_OPTION_END	O
}	O
;	O
static	O
char	O
*	O
capa	*(struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*((*(void))->(void))))
[	O
]	O
=	O
{	O
"debug"	*(char)
,	O
"mailbox"	*(char)
,	O
"locking"	*(char)
,	O
NULL	O
}	O
;	O
static	O
struct	O
mu_option	struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)),*(char))
*	O
options	array(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct`),*(struct`),*(char))->(void)),*(char))))
[	O
]	O
=	O
{	O
messages_options	array(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct(int,*`,long,*`,int,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,int,*`,int,int,int,long,*`)),*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`)),*(char))->(void)),*(char)))
,	O
NULL	O
}	O
;	O
struct	O
mu_cli_setup	struct(*(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char)))),*(struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))),*(char),*(char),*(*(char)),*(char),int,int,int,int,*((*(struct))->(void)))
cli	struct(*(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char)))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*(char),*(char),*(*(char)),*(char),int,int,int,int,*((*(struct))->(void)))
=	O
{	O
options	array(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct`),*(struct`),*(char))->(void)),*(char))))
,	O
NULL	O
,	O
N_	O
(	O
"GNU messages -- count the number of messages in a mailbox"	*(char)
)	O
,	O
N_	O
(	O
"[mailbox...]"	*(char)
)	O
}	O
;	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
err	int
=	O
0	int
;	O
MU_APP_INIT_NLS	O
(	O
)	O
;	O
mu_register_all_mbox_formats	O
(	O
)	O
;	O
mu_auth_register_module	(*(struct(*(char),array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int))),array(*(void)),*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`)),*(struct(*`,int,*`,long,*`,*`,*`)),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*((*`)->(void)))))->(void)
(	O
&	O
mu_auth_tls_module	struct(*(char),array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int))),array(*(void)),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*((*(void))->(void)))
)	O
;	O
mu_cli	(int,*(*(char)),*(struct(*(*(struct`)),*(struct(*`,int,*`,long,*`,*`,*`)),*(char),*(char),*(*(char)),*(char),int,int,int,int,*((*`)->(void)))),*(*(char)),*(void),*(int),*(*(*(char))))->(void)
(	O
argc	long
,	O
argv	*(*(char))
,	O
&	O
cli	struct(*(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char)))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*(char),*(char),*(*(char)),*(char),int,int,int,int,*((*(struct))->(void)))
,	O
capa	*(struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*((*(void))->(void))))
,	O
NULL	O
,	O
&	O
argc	long
,	O
&	O
argv	*(*(char))
)	O
;	O
if	O
(	O
argc	long
==	O
0	int
&&	O
messages_count	(*(char))->(int)
(	O
NULL	O
)	O
<	O
0	int
)	O
err	int
=	O
1	int
;	O
else	O
if	O
(	O
argc	long
>=	O
1	int
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
messages_count	(*(char))->(int)
(	O
argv	*(*(char))
[	O
i	long
]	O
)	O
<	O
0	int
)	O
err	int
=	O
1	int
;	O
}	O
}	O
return	O
err	int
;	O
}	O
static	O
int	O
messages_count	(*(char))->(int)
(	O
const	O
char	O
*	O
box	*(char)
)	O
{	O
mu_mailbox_t	*(struct)
mbox	*(struct)
;	O
mu_url_t	*(struct)
url	*(struct)
=	O
NULL	O
;	O
size_t	long
count	long
;	O
int	O
status	int
=	O
0	int
;	O
status	int
=	O
mu_mailbox_create_default	(*(*(struct)),*(char))->(int)
(	O
&	O
mbox	*(struct)
,	O
box	*(char)
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
{	O
if	O
(	O
box	*(char)
)	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"could not create mailbox `%s': %s"	*(char)
)	O
,	O
box	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
;	O
else	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"could not create default mailbox: %s"	*(char)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
mu_mailbox_get_url	(*(struct),*(*(struct)))->(int)
(	O
mbox	*(struct)
,	O
&	O
url	*(struct)
)	O
;	O
box	*(char)
=	O
mu_url_to_string	(*(struct))->(*(char))
(	O
url	*(struct)
)	O
;	O
status	int
=	O
mu_mailbox_open	(*(struct),int)->(int)
(	O
mbox	*(struct)
,	O
MU_STREAM_READ	int
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"could not open mailbox `%s': %s"	*(char)
)	O
,	O
box	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
status	int
=	O
mu_mailbox_messages_count	(*(struct),*(long))->(int)
(	O
mbox	*(struct)
,	O
&	O
count	long
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"could not count messages in mailbox `%s': %s"	*(char)
)	O
,	O
box	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
silent	int
)	O
mu_printf	(*(char))->(int)
(	O
"%lu\n"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
count	long
)	O
;	O
else	O
mu_printf	(*(char))->(int)
(	O
_	O
(	O
"Number of messages in %s: %lu\n"	*(char)
)	O
,	O
box	*(char)
,	O
(	O
unsigned	O
long	O
)	O
count	long
)	O
;	O
status	int
=	O
mu_mailbox_close	(*(struct))->(int)
(	O
mbox	*(struct)
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"could not close `%s': %s"	*(char)
)	O
,	O
box	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
mu_mailbox_destroy	(*(*(struct)))->(void)
(	O
&	O
mbox	*(struct)
)	O
;	O
return	O
count	long
;	O
}	O
