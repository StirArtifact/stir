void	O
change_dragon_status	(int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(void)
(	O
int	O
dr	int
,	O
enum	O
dragon_status	(int)->(enum)
status	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
{	O
int	O
pos	int
;	O
int	O
origin	int
=	O
dragon	int
[	O
dr	int
]	O
.	O
origin	int
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
if	O
(	O
ON_BOARD	O
(	O
pos	int
)	O
)	O
{	O
if	O
(	O
dragon	int
[	O
pos	int
]	O
.	O
origin	int
==	O
origin	int
)	O
dragon	int
[	O
pos	int
]	O
.	O
status	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
status	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
}	O
}	O
int	O
defend_against	(int,int,int)->(int)
(	O
int	O
move	*(int)
,	O
int	O
color	int
,	O
int	O
apos	int
)	O
{	O
if	O
(	O
trymove	(int,int,*(char),int)->(int)
(	O
move	*(int)
,	O
color	int
,	O
"defend_against"	*(char)
,	O
NO_MOVE	O
)	O
)	O
{	O
if	O
(	O
safe_move	(int,int)->(int)
(	O
apos	int
,	O
OTHER_COLOR	O
(	O
color	int
)	O
)	O
==	O
0	int
)	O
{	O
popgo	()->(void)
(	O
)	O
;	O
return	O
1	int
;	O
}	O
popgo	()->(void)
(	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
cut_possible	(int,int)->(int)
(	O
int	O
pos	int
,	O
int	O
color	int
)	O
{	O
return	O
(	O
cutting_points	array(int)
[	O
pos	int
]	O
&	O
OTHER_COLOR	O
(	O
color	int
)	O
)	O
!=	O
0	int
;	O
}	O
int	O
does_attack	(int,int)->(int)
(	O
int	O
move	*(int)
,	O
int	O
str	int
)	O
{	O
int	O
color	int
=	O
board	*(char)
[	O
str	int
]	O
;	O
int	O
other	int
=	O
OTHER_COLOR	O
(	O
color	int
)	O
;	O
int	O
result	int
=	O
0	int
;	O
int	O
acode	int
=	O
0	int
;	O
int	O
dcode	int
=	O
0	int
;	O
int	O
spos	int
=	O
NO_MOVE	O
;	O
attack_and_defend	(int,*(int),*(int),*(int),*(int))->(int)
(	O
str	int
,	O
&	O
acode	int
,	O
NULL	O
,	O
&	O
dcode	int
,	O
&	O
spos	int
)	O
;	O
if	O
(	O
acode	int
!=	O
0	int
&&	O
dcode	int
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
trymove	(int,int,*(char),int)->(int)
(	O
move	*(int)
,	O
other	int
,	O
"does_attack-A"	*(char)
,	O
str	int
)	O
)	O
{	O
if	O
(	O
!	O
board	*(char)
[	O
str	int
]	O
)	O
result	int
=	O
WIN	int
;	O
else	O
result	int
=	O
REVERSE_RESULT	O
(	O
find_defense	(int,*(int))->(int)
(	O
str	int
,	O
NULL	O
)	O
)	O
;	O
if	O
(	O
result	int
!=	O
0	int
)	O
{	O
increase_depth_values	()->(void)
(	O
)	O
;	O
if	O
(	O
spos	int
!=	O
NO_MOVE	O
&&	O
trymove	(int,int,*(char),int)->(int)
(	O
spos	int
,	O
color	int
,	O
"does_attack-B"	*(char)
,	O
str	int
)	O
)	O
{	O
if	O
(	O
board	*(char)
[	O
str	int
]	O
)	O
{	O
int	O
new_result	int
=	O
attack	(int,*(int))->(int)
(	O
str	int
,	O
NULL	O
)	O
;	O
if	O
(	O
new_result	int
<	O
result	int
)	O
result	int
=	O
new_result	int
;	O
}	O
popgo	()->(void)
(	O
)	O
;	O
}	O
decrease_depth_values	()->(void)
(	O
)	O
;	O
}	O
popgo	()->(void)
(	O
)	O
;	O
}	O
if	O
(	O
result	int
<	O
acode	int
)	O
result	int
=	O
0	int
;	O
return	O
result	int
;	O
}	O
int	O
does_defend	(int,int)->(int)
(	O
int	O
move	*(int)
,	O
int	O
str	int
)	O
{	O
int	O
color	int
=	O
board	*(char)
[	O
str	int
]	O
;	O
int	O
other	int
=	O
OTHER_COLOR	O
(	O
color	int
)	O
;	O
int	O
result	int
=	O
0	int
;	O
int	O
spos	int
=	O
NO_MOVE	O
;	O
if	O
(	O
!	O
attack	(int,*(int))->(int)
(	O
str	int
,	O
&	O
spos	int
)	O
)	O
return	O
0	int
;	O
gg_assert	O
(	O
spos	int
!=	O
NO_MOVE	O
)	O
;	O
if	O
(	O
trymove	(int,int,*(char),int)->(int)
(	O
move	*(int)
,	O
color	int
,	O
"does_defend-A"	*(char)
,	O
str	int
)	O
)	O
{	O
if	O
(	O
!	O
attack	(int,*(int))->(int)
(	O
str	int
,	O
NULL	O
)	O
)	O
{	O
result	int
=	O
1	int
;	O
increase_depth_values	()->(void)
(	O
)	O
;	O
if	O
(	O
trymove	(int,int,*(char),int)->(int)
(	O
spos	int
,	O
other	int
,	O
"does_defend-B"	*(char)
,	O
str	int
)	O
)	O
{	O
if	O
(	O
!	O
board	*(char)
[	O
str	int
]	O
||	O
!	O
find_defense	(int,*(int))->(int)
(	O
str	int
,	O
NULL	O
)	O
)	O
result	int
=	O
0	int
;	O
popgo	()->(void)
(	O
)	O
;	O
}	O
decrease_depth_values	()->(void)
(	O
)	O
;	O
}	O
popgo	()->(void)
(	O
)	O
;	O
}	O
return	O
result	int
;	O
}	O
int	O
somewhere	(int,int,int)->(int)
(	O
int	O
color	int
,	O
int	O
check_alive	int
,	O
int	O
num_moves	int
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
ap	array(struct(int,int,*(void),*(void)))
;	O
int	O
pos	int
;	O
int	O
k	int
;	O
gg_assert	O
(	O
stackp	int
==	O
0	int
||	O
!	O
check_alive	int
)	O
;	O
va_start	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
num_moves	int
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
num_moves	int
;	O
k	int
++	O
)	O
{	O
pos	int
=	O
va_arg	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
int	O
)	O
;	O
if	O
(	O
board	*(char)
[	O
pos	int
]	O
==	O
color	int
&&	O
(	O
!	O
check_alive	int
||	O
dragon	int
[	O
pos	int
]	O
.	O
status	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
!=	O
DEAD	int
)	O
)	O
{	O
va_end	O
(	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
return	O
1	int
;	O
}	O
}	O
va_end	O
(	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
return	O
0	int
;	O
}	O
int	O
visible_along_edge	(int,int,int)->(int)
(	O
int	O
color	int
,	O
int	O
apos	int
,	O
int	O
bpos	int
)	O
{	O
int	O
ai	int
=	O
I	O
(	O
apos	int
)	O
;	O
int	O
aj	int
=	O
J	O
(	O
apos	int
)	O
;	O
int	O
bi	int
=	O
I	O
(	O
bpos	int
)	O
;	O
int	O
bj	int
=	O
J	O
(	O
bpos	int
)	O
;	O
int	O
pos	int
;	O
int	O
forward	int
;	O
int	O
up	int
;	O
ASSERT1	O
(	O
(	O
ai	int
==	O
bi	int
)	O
^	O
(	O
aj	int
==	O
bj	int
)	O
,	O
apos	int
)	O
;	O
if	O
(	O
ai	int
==	O
bi	int
)	O
{	O
if	O
(	O
aj	int
>	O
bj	int
)	O
forward	int
=	O
WEST	O
(	O
0	int
)	O
;	O
else	O
forward	int
=	O
EAST	O
(	O
0	int
)	O
;	O
if	O
(	O
ai	int
<	O
board_size	int
/	O
2	int
)	O
{	O
pos	int
=	O
POS	O
(	O
0	int
,	O
bj	int
)	O
;	O
up	int
=	O
SOUTH	O
(	O
0	int
)	O
;	O
}	O
else	O
{	O
pos	int
=	O
POS	O
(	O
board_size	int
-	O
1	int
,	O
bj	int
)	O
;	O
up	int
=	O
NORTH	O
(	O
0	int
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
ai	int
>	O
bi	int
)	O
forward	int
=	O
NORTH	O
(	O
0	int
)	O
;	O
else	O
forward	int
=	O
SOUTH	O
(	O
0	int
)	O
;	O
if	O
(	O
aj	int
<	O
board_size	int
/	O
2	int
)	O
{	O
pos	int
=	O
POS	O
(	O
bi	int
,	O
0	int
)	O
;	O
up	int
=	O
EAST	O
(	O
0	int
)	O
;	O
}	O
else	O
{	O
pos	int
=	O
POS	O
(	O
bi	int
,	O
board_size	int
-	O
1	int
)	O
;	O
up	int
=	O
WEST	O
(	O
0	int
)	O
;	O
}	O
}	O
for	O
(	O
;	O
ON_BOARD	O
(	O
pos	int
)	O
;	O
pos	int
+=	O
forward	int
)	O
{	O
int	O
k	int
;	O
for	O
(	O
k	int
=	O
4	int
;	O
k	int
>=	O
0	int
;	O
k	int
--	O
)	O
{	O
ASSERT_ON_BOARD1	O
(	O
pos	int
+	O
k	int
*	O
up	int
)	O
;	O
if	O
(	O
board	*(char)
[	O
pos	int
+	O
k	int
*	O
up	int
]	O
==	O
color	int
)	O
return	O
1	int
;	O
else	O
if	O
(	O
board	*(char)
[	O
pos	int
+	O
k	int
*	O
up	int
]	O
==	O
OTHER_COLOR	O
(	O
color	int
)	O
)	O
return	O
0	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
test_symmetry_after_move	(int,int,int)->(int)
(	O
int	O
move	*(int)
,	O
int	O
color	int
,	O
int	O
strict	int
)	O
{	O
int	O
pos	int
;	O
int	O
result	int
=	O
1	int
;	O
if	O
(	O
move	*(int)
!=	O
PASS_MOVE	int
)	O
{	O
if	O
(	O
board	*(char)
[	O
move	*(int)
]	O
!=	O
EMPTY	int
)	O
return	O
0	int
;	O
if	O
(	O
!	O
trymove	(int,int,*(char),int)->(int)
(	O
move	*(int)
,	O
color	int
,	O
"find_mirror_move"	*(char)
,	O
NO_MOVE	O
)	O
)	O
return	O
0	int
;	O
}	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
MIRROR_MOVE	O
(	O
pos	int
)	O
;	O
pos	int
++	O
)	O
{	O
int	O
sum	*(struct(char,char,char,char))
;	O
if	O
(	O
!	O
ON_BOARD	O
(	O
pos	int
)	O
)	O
continue	O
;	O
sum	*(struct(char,char,char,char))
=	O
board	*(char)
[	O
pos	int
]	O
+	O
board	*(char)
[	O
MIRROR_MOVE	O
(	O
pos	int
)	O
]	O
;	O
if	O
(	O
sum	*(struct(char,char,char,char))
!=	O
EMPTY	int
+	O
EMPTY	int
&&	O
sum	*(struct(char,char,char,char))
!=	O
BLACK	int
+	O
WHITE	int
)	O
{	O
if	O
(	O
strict	int
||	O
sum	*(struct(char,char,char,char))
==	O
EMPTY	int
+	O
WHITE	int
||	O
sum	*(struct(char,char,char,char))
==	O
EMPTY	int
+	O
BLACK	int
)	O
{	O
result	int
=	O
0	int
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
move	*(int)
!=	O
PASS_MOVE	int
)	O
popgo	()->(void)
(	O
)	O
;	O
return	O
result	int
;	O
}	O
int	O
play_break_through_n	(int,int)->(int)
(	O
int	O
color	int
,	O
int	O
num_moves	int
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
ap	array(struct(int,int,*(void),*(void)))
;	O
int	O
mcolor	int
=	O
color	int
;	O
int	O
success	int
=	O
0	int
;	O
int	O
i	int
;	O
int	O
played_moves	int
=	O
0	int
;	O
int	O
apos	int
;	O
int	O
xpos	int
;	O
int	O
ypos	int
;	O
int	O
zpos	int
;	O
va_start	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
num_moves	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
num_moves	int
;	O
i	int
++	O
)	O
{	O
apos	int
=	O
va_arg	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
int	O
)	O
;	O
if	O
(	O
apos	int
!=	O
NO_MOVE	O
&&	O
(	O
trymove	(int,int,*(char),int)->(int)
(	O
apos	int
,	O
mcolor	int
,	O
"play_break_through_n"	*(char)
,	O
NO_MOVE	O
)	O
||	O
tryko	(int,int,*(char))->(int)
(	O
apos	int
,	O
mcolor	int
,	O
"play_break_through_n"	*(char)
)	O
)	O
)	O
played_moves	int
++	O
;	O
mcolor	int
=	O
OTHER_COLOR	O
(	O
mcolor	int
)	O
;	O
}	O
xpos	int
=	O
va_arg	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
int	O
)	O
;	O
ypos	int
=	O
va_arg	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
int	O
)	O
;	O
zpos	int
=	O
va_arg	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
int	O
)	O
;	O
if	O
(	O
board	*(char)
[	O
xpos	int
]	O
==	O
EMPTY	int
||	O
board	*(char)
[	O
ypos	int
]	O
==	O
EMPTY	int
||	O
board	*(char)
[	O
zpos	int
]	O
==	O
EMPTY	int
)	O
success	int
=	O
1	int
;	O
else	O
success	int
=	O
break_through	(int,int,int)->(int)
(	O
xpos	int
,	O
ypos	int
,	O
zpos	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
played_moves	int
;	O
i	int
++	O
)	O
popgo	()->(void)
(	O
)	O
;	O
va_end	O
(	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
return	O
success	int
;	O
}	O
int	O
play_attack_defend_n	(int,int,int)->(int)
(	O
int	O
color	int
,	O
int	O
do_attack	int
,	O
int	O
num_moves	int
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
ap	array(struct(int,int,*(void),*(void)))
;	O
int	O
mcolor	int
=	O
color	int
;	O
int	O
success	int
=	O
0	int
;	O
int	O
i	int
;	O
int	O
played_moves	int
=	O
0	int
;	O
int	O
apos	int
;	O
int	O
zpos	int
;	O
va_start	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
num_moves	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
num_moves	int
;	O
i	int
++	O
)	O
{	O
apos	int
=	O
va_arg	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
int	O
)	O
;	O
if	O
(	O
apos	int
!=	O
NO_MOVE	O
&&	O
(	O
trymove	(int,int,*(char),int)->(int)
(	O
apos	int
,	O
mcolor	int
,	O
"play_attack_defend_n"	*(char)
,	O
NO_MOVE	O
)	O
||	O
tryko	(int,int,*(char))->(int)
(	O
apos	int
,	O
mcolor	int
,	O
"play_attack_defend_n"	*(char)
)	O
)	O
)	O
played_moves	int
++	O
;	O
mcolor	int
=	O
OTHER_COLOR	O
(	O
mcolor	int
)	O
;	O
}	O
zpos	int
=	O
va_arg	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
int	O
)	O
;	O
if	O
(	O
do_attack	int
)	O
{	O
if	O
(	O
board	*(char)
[	O
zpos	int
]	O
==	O
EMPTY	int
)	O
success	int
=	O
WIN	int
;	O
else	O
success	int
=	O
attack	(int,*(int))->(int)
(	O
zpos	int
,	O
NULL	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
board	*(char)
[	O
zpos	int
]	O
==	O
EMPTY	int
)	O
success	int
=	O
0	int
;	O
else	O
{	O
int	O
dcode	int
=	O
find_defense	(int,*(int))->(int)
(	O
zpos	int
,	O
NULL	O
)	O
;	O
if	O
(	O
dcode	int
==	O
0	int
&&	O
!	O
attack	(int,*(int))->(int)
(	O
zpos	int
,	O
NULL	O
)	O
)	O
success	int
=	O
WIN	int
;	O
else	O
success	int
=	O
dcode	int
;	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
played_moves	int
;	O
i	int
++	O
)	O
popgo	()->(void)
(	O
)	O
;	O
va_end	O
(	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
return	O
success	int
;	O
}	O
int	O
play_attack_defend2_n	(int,int,int)->(int)
(	O
int	O
color	int
,	O
int	O
do_attack	int
,	O
int	O
num_moves	int
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
ap	array(struct(int,int,*(void),*(void)))
;	O
int	O
mcolor	int
=	O
color	int
;	O
int	O
success	int
=	O
0	int
;	O
int	O
i	int
;	O
int	O
played_moves	int
=	O
0	int
;	O
int	O
apos	int
;	O
int	O
ypos	int
;	O
int	O
zpos	int
;	O
va_start	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
num_moves	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
num_moves	int
;	O
i	int
++	O
)	O
{	O
apos	int
=	O
va_arg	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
int	O
)	O
;	O
if	O
(	O
apos	int
!=	O
NO_MOVE	O
&&	O
(	O
trymove	(int,int,*(char),int)->(int)
(	O
apos	int
,	O
mcolor	int
,	O
"play_attack_defend_n"	*(char)
,	O
NO_MOVE	O
)	O
||	O
tryko	(int,int,*(char))->(int)
(	O
apos	int
,	O
mcolor	int
,	O
"play_attack_defend_n"	*(char)
)	O
)	O
)	O
played_moves	int
++	O
;	O
mcolor	int
=	O
OTHER_COLOR	O
(	O
mcolor	int
)	O
;	O
}	O
ypos	int
=	O
va_arg	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
int	O
)	O
;	O
zpos	int
=	O
va_arg	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
int	O
)	O
;	O
if	O
(	O
do_attack	int
)	O
{	O
if	O
(	O
board	*(char)
[	O
ypos	int
]	O
==	O
EMPTY	int
||	O
board	*(char)
[	O
zpos	int
]	O
==	O
EMPTY	int
)	O
success	int
=	O
WIN	int
;	O
else	O
success	int
=	O
attack_either	(int,int)->(int)
(	O
ypos	int
,	O
zpos	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
board	*(char)
[	O
ypos	int
]	O
==	O
EMPTY	int
||	O
board	*(char)
[	O
zpos	int
]	O
==	O
EMPTY	int
)	O
success	int
=	O
0	int
;	O
else	O
success	int
=	O
defend_both	(int,int)->(int)
(	O
ypos	int
,	O
zpos	int
)	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
played_moves	int
;	O
i	int
++	O
)	O
popgo	()->(void)
(	O
)	O
;	O
va_end	O
(	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
return	O
success	int
;	O
}	O
int	O
play_connect_n	(int,int,int)->(int)
(	O
int	O
color	int
,	O
int	O
do_connect	int
,	O
int	O
num_moves	int
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
ap	array(struct(int,int,*(void),*(void)))
;	O
int	O
mcolor	int
=	O
color	int
;	O
int	O
success	int
=	O
0	int
;	O
int	O
i	int
;	O
int	O
played_moves	int
=	O
0	int
;	O
int	O
apos	int
;	O
int	O
ypos	int
;	O
int	O
zpos	int
;	O
va_start	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
num_moves	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
num_moves	int
;	O
i	int
++	O
)	O
{	O
apos	int
=	O
va_arg	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
int	O
)	O
;	O
if	O
(	O
apos	int
!=	O
NO_MOVE	O
&&	O
(	O
trymove	(int,int,*(char),int)->(int)
(	O
apos	int
,	O
mcolor	int
,	O
"play_connect_n"	*(char)
,	O
NO_MOVE	O
)	O
||	O
tryko	(int,int,*(char))->(int)
(	O
apos	int
,	O
mcolor	int
,	O
"play_connect_n"	*(char)
)	O
)	O
)	O
played_moves	int
++	O
;	O
mcolor	int
=	O
OTHER_COLOR	O
(	O
mcolor	int
)	O
;	O
}	O
ypos	int
=	O
va_arg	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
int	O
)	O
;	O
zpos	int
=	O
va_arg	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
int	O
)	O
;	O
if	O
(	O
do_connect	int
)	O
{	O
if	O
(	O
board	*(char)
[	O
ypos	int
]	O
==	O
EMPTY	int
||	O
board	*(char)
[	O
zpos	int
]	O
==	O
EMPTY	int
)	O
success	int
=	O
0	int
;	O
else	O
success	int
=	O
string_connect	(int,int,*(int))->(int)
(	O
ypos	int
,	O
zpos	int
,	O
NULL	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
board	*(char)
[	O
ypos	int
]	O
==	O
EMPTY	int
||	O
board	*(char)
[	O
zpos	int
]	O
==	O
EMPTY	int
)	O
success	int
=	O
WIN	int
;	O
else	O
success	int
=	O
disconnect	(int,int,*(int))->(int)
(	O
ypos	int
,	O
zpos	int
,	O
NULL	O
)	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
played_moves	int
;	O
i	int
++	O
)	O
popgo	()->(void)
(	O
)	O
;	O
va_end	O
(	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
return	O
success	int
;	O
}	O
int	O
play_lib_n	(int,int)->(int)
(	O
int	O
color	int
,	O
int	O
num_moves	int
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
ap	array(struct(int,int,*(void),*(void)))
;	O
int	O
mcolor	int
=	O
color	int
;	O
int	O
libs	*(int)
=	O
0	int
;	O
int	O
i	int
;	O
int	O
played_moves	int
=	O
0	int
;	O
int	O
apos	int
;	O
int	O
ypos	int
;	O
va_start	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
num_moves	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
num_moves	int
;	O
i	int
++	O
)	O
{	O
apos	int
=	O
va_arg	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
int	O
)	O
;	O
if	O
(	O
apos	int
!=	O
NO_MOVE	O
&&	O
(	O
trymove	(int,int,*(char),int)->(int)
(	O
apos	int
,	O
mcolor	int
,	O
"play_connect_n"	*(char)
,	O
NO_MOVE	O
)	O
||	O
tryko	(int,int,*(char))->(int)
(	O
apos	int
,	O
mcolor	int
,	O
"play_connect_n"	*(char)
)	O
)	O
)	O
played_moves	int
++	O
;	O
mcolor	int
=	O
OTHER_COLOR	O
(	O
mcolor	int
)	O
;	O
}	O
ypos	int
=	O
va_arg	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
int	O
)	O
;	O
if	O
(	O
board	*(char)
[	O
ypos	int
]	O
==	O
EMPTY	int
)	O
libs	*(int)
=	O
0	int
;	O
else	O
libs	*(int)
=	O
countlib	(int)->(int)
(	O
ypos	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
played_moves	int
;	O
i	int
++	O
)	O
popgo	()->(void)
(	O
)	O
;	O
va_end	O
(	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
return	O
libs	*(int)
;	O
}	O
void	O
set_depth_values	(int,int)->(void)
(	O
int	O
level	int
,	O
int	O
report_levels	int
)	O
{	O
static	O
int	O
node_limits	array(int)
[	O
]	O
=	O
{	O
500	int
,	O
500	int
,	O
450	int
,	O
400	int
,	O
400	int
,	O
325	int
,	O
275	int
,	O
200	int
,	O
150	int
,	O
100	int
,	O
75	int
,	O
50	int
}	O
;	O
int	O
depth_level	int
;	O
if	O
(	O
level	int
>=	O
10	int
)	O
depth_level	int
=	O
level	int
-	O
10	int
;	O
else	O
if	O
(	O
level	int
==	O
9	int
)	O
depth_level	int
=	O
0	int
;	O
else	O
if	O
(	O
level	int
==	O
8	int
)	O
depth_level	int
=	O
-	O
1	int
;	O
else	O
depth_level	int
=	O
level	int
-	O
8	int
;	O
depth	int
=	O
gg_max	O
(	O
6	int
,	O
DEPTH	int
+	O
depth_level	int
)	O
;	O
branch_depth	int
=	O
gg_max	O
(	O
3	int
,	O
BRANCH_DEPTH	int
+	O
depth_level	int
)	O
;	O
backfill_depth	int
=	O
gg_max	O
(	O
2	int
,	O
BACKFILL_DEPTH	int
+	O
depth_level	int
)	O
;	O
backfill2_depth	int
=	O
gg_max	O
(	O
1	int
,	O
BACKFILL2_DEPTH	int
+	O
depth_level	int
)	O
;	O
break_chain_depth	int
=	O
gg_max	O
(	O
2	int
,	O
BREAK_CHAIN_DEPTH	int
+	O
depth_level	int
)	O
;	O
if	O
(	O
level	int
>=	O
8	int
)	O
owl_distrust_depth	int
=	O
gg_max	O
(	O
1	int
,	O
(	O
2	int
*	O
OWL_DISTRUST_DEPTH	int
+	O
depth_level	int
)	O
/	O
2	int
)	O
;	O
else	O
owl_distrust_depth	int
=	O
gg_max	O
(	O
1	int
,	O
(	O
2	int
*	O
OWL_DISTRUST_DEPTH	int
-	O
1	int
+	O
depth_level	int
)	O
/	O
2	int
)	O
;	O
owl_branch_depth	int
=	O
gg_max	O
(	O
2	int
,	O
(	O
2	int
*	O
OWL_BRANCH_DEPTH	int
+	O
depth_level	int
)	O
/	O
2	int
)	O
;	O
owl_reading_depth	int
=	O
gg_max	O
(	O
5	int
,	O
(	O
2	int
*	O
OWL_READING_DEPTH	int
+	O
depth_level	int
)	O
/	O
2	int
)	O
;	O
if	O
(	O
level	int
>=	O
10	int
)	O
aa_depth	int
=	O
gg_max	O
(	O
0	int
,	O
AA_DEPTH	int
+	O
(	O
level	int
-	O
10	int
)	O
)	O
;	O
else	O
if	O
(	O
level	int
==	O
9	int
)	O
aa_depth	int
=	O
gg_max	O
(	O
0	int
,	O
AA_DEPTH	int
)	O
;	O
else	O
if	O
(	O
level	int
>=	O
7	int
)	O
aa_depth	int
=	O
gg_max	O
(	O
0	int
,	O
AA_DEPTH	int
-	O
1	int
)	O
;	O
else	O
aa_depth	int
=	O
gg_max	O
(	O
0	int
,	O
AA_DEPTH	int
-	O
(	O
8	int
-	O
level	int
)	O
)	O
;	O
if	O
(	O
level	int
>=	O
10	int
)	O
ko_depth	int
=	O
gg_max	O
(	O
1	int
,	O
KO_DEPTH	int
+	O
(	O
level	int
-	O
10	int
)	O
)	O
;	O
else	O
if	O
(	O
level	int
==	O
9	int
)	O
ko_depth	int
=	O
gg_max	O
(	O
1	int
,	O
KO_DEPTH	int
)	O
;	O
else	O
if	O
(	O
level	int
>=	O
7	int
)	O
ko_depth	int
=	O
gg_max	O
(	O
1	int
,	O
KO_DEPTH	int
-	O
1	int
)	O
;	O
else	O
ko_depth	int
=	O
gg_max	O
(	O
1	int
,	O
KO_DEPTH	int
+	O
(	O
level	int
-	O
8	int
)	O
)	O
;	O
if	O
(	O
level	int
>=	O
10	int
)	O
fourlib_depth	int
=	O
gg_max	O
(	O
1	int
,	O
FOURLIB_DEPTH	int
+	O
(	O
level	int
-	O
10	int
)	O
)	O
;	O
else	O
if	O
(	O
level	int
>=	O
7	int
)	O
fourlib_depth	int
=	O
gg_max	O
(	O
1	int
,	O
FOURLIB_DEPTH	int
)	O
;	O
else	O
fourlib_depth	int
=	O
gg_max	O
(	O
1	int
,	O
FOURLIB_DEPTH	int
+	O
(	O
level	int
-	O
7	int
)	O
)	O
;	O
if	O
(	O
level	int
>=	O
8	int
)	O
superstring_depth	int
=	O
gg_max	O
(	O
1	int
,	O
SUPERSTRING_DEPTH	int
)	O
;	O
else	O
superstring_depth	int
=	O
0	int
;	O
if	O
(	O
level	int
>=	O
10	int
)	O
owl_node_limit	int
=	O
OWL_NODE_LIMIT	int
*	O
pow	(double,double)->(double)
(	O
1.5	int
,	O
depth_level	int
)	O
;	O
else	O
{	O
owl_node_limit	int
=	O
(	O
OWL_NODE_LIMIT	int
*	O
node_limits	array(int)
[	O
10	int
-	O
level	int
]	O
/	O
node_limits	array(int)
[	O
0	int
]	O
)	O
;	O
owl_node_limit	int
=	O
gg_max	O
(	O
20	int
,	O
owl_node_limit	int
)	O
;	O
}	O
semeai_branch_depth	int
=	O
gg_max	O
(	O
2	int
,	O
(	O
2	int
*	O
SEMEAI_BRANCH_DEPTH	int
+	O
depth_level	int
)	O
/	O
2	int
)	O
;	O
semeai_branch_depth2	int
=	O
gg_max	O
(	O
2	int
,	O
(	O
2	int
*	O
SEMEAI_BRANCH_DEPTH2	int
+	O
depth_level	int
)	O
/	O
2	int
)	O
;	O
semeai_node_limit	int
=	O
SEMEAI_NODE_LIMIT	int
*	O
pow	(double,double)->(double)
(	O
1.5	int
,	O
depth_level	int
)	O
;	O
connect_depth	int
=	O
gg_max	O
(	O
2	int
,	O
CONNECT_DEPTH	int
+	O
2	int
*	O
depth_level	int
)	O
;	O
connect_depth2	int
=	O
gg_max	O
(	O
2	int
,	O
CONNECT_DEPTH2	int
+	O
2	int
*	O
depth_level	int
)	O
;	O
connection_node_limit	int
=	O
CONNECT_NODE_LIMIT	int
*	O
pow	(double,double)->(double)
(	O
1.45	int
,	O
depth_level	int
)	O
;	O
breakin_depth	int
=	O
gg_max	O
(	O
2	int
,	O
BREAKIN_DEPTH	int
+	O
2	int
*	O
depth_level	int
)	O
;	O
breakin_node_limit	int
=	O
BREAKIN_NODE_LIMIT	int
*	O
pow	(double,double)->(double)
(	O
1.5	int
,	O
depth_level	int
)	O
;	O
if	O
(	O
mandated_depth	int
!=	O
-	O
1	int
)	O
depth	int
=	O
mandated_depth	int
;	O
if	O
(	O
mandated_backfill_depth	int
!=	O
-	O
1	int
)	O
backfill_depth	int
=	O
mandated_backfill_depth	int
;	O
if	O
(	O
mandated_backfill2_depth	int
!=	O
-	O
1	int
)	O
backfill2_depth	int
=	O
mandated_backfill2_depth	int
;	O
if	O
(	O
mandated_break_chain_depth	int
!=	O
-	O
1	int
)	O
break_chain_depth	int
=	O
mandated_break_chain_depth	int
;	O
if	O
(	O
mandated_superstring_depth	int
!=	O
-	O
1	int
)	O
superstring_depth	int
=	O
mandated_superstring_depth	int
;	O
if	O
(	O
mandated_branch_depth	int
!=	O
-	O
1	int
)	O
branch_depth	int
=	O
mandated_branch_depth	int
;	O
if	O
(	O
mandated_fourlib_depth	int
!=	O
-	O
1	int
)	O
fourlib_depth	int
=	O
mandated_fourlib_depth	int
;	O
if	O
(	O
mandated_ko_depth	int
!=	O
-	O
1	int
)	O
ko_depth	int
=	O
mandated_ko_depth	int
;	O
if	O
(	O
mandated_aa_depth	int
!=	O
-	O
1	int
)	O
aa_depth	int
=	O
mandated_aa_depth	int
;	O
if	O
(	O
mandated_owl_distrust_depth	int
!=	O
-	O
1	int
)	O
owl_distrust_depth	int
=	O
mandated_owl_distrust_depth	int
;	O
if	O
(	O
mandated_owl_branch_depth	int
!=	O
-	O
1	int
)	O
owl_branch_depth	int
=	O
mandated_owl_branch_depth	int
;	O
if	O
(	O
mandated_owl_reading_depth	int
!=	O
-	O
1	int
)	O
owl_reading_depth	int
=	O
mandated_owl_reading_depth	int
;	O
if	O
(	O
mandated_owl_node_limit	int
!=	O
-	O
1	int
)	O
owl_node_limit	int
=	O
mandated_owl_node_limit	int
;	O
if	O
(	O
mandated_semeai_node_limit	int
!=	O
-	O
1	int
)	O
semeai_node_limit	int
=	O
mandated_semeai_node_limit	int
;	O
depth_offset	int
=	O
0	int
;	O
if	O
(	O
report_levels	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"at level %d:\n\ndepth: %d\nbranch_depth: %d\nbackfill_depth: %d\nbackfill2_depth: %d\nbreak_chain_depth: %d\nowl_distrust_depth: %d\nowl_branch_depth: %d\nowl_reading_depth: %d\naa_depth: %d\nko_depth: %d\nfourlib_depth: %d\nsuperstring_depth: %d\nowl_node_limit: %d\nsemeai_branch_depth: %d\nsemeai_branch_depth2: %d\nsemeai_node_limit: %d\nconnect_depth: %d\nconnect_depth2: %d\nconnection_node_limit: %d\nbreakin_depth: %d\nbreakin_node_limit: %d\n\n"	*(char)
,	O
level	int
,	O
depth	int
,	O
branch_depth	int
,	O
backfill_depth	int
,	O
backfill2_depth	int
,	O
break_chain_depth	int
,	O
owl_distrust_depth	int
,	O
owl_branch_depth	int
,	O
owl_reading_depth	int
,	O
aa_depth	int
,	O
ko_depth	int
,	O
fourlib_depth	int
,	O
superstring_depth	int
,	O
owl_node_limit	int
,	O
semeai_branch_depth	int
,	O
semeai_branch_depth2	int
,	O
semeai_node_limit	int
,	O
connect_depth	int
,	O
connect_depth2	int
,	O
connection_node_limit	int
,	O
breakin_depth	int
,	O
breakin_node_limit	int
)	O
;	O
}	O
}	O
static	O
int	O
depth_modification	int
=	O
0	int
;	O
void	O
modify_depth_values	(int)->(void)
(	O
int	O
n	int
)	O
{	O
depth	int
+=	O
n	int
;	O
backfill_depth	int
+=	O
n	int
;	O
backfill2_depth	int
+=	O
n	int
;	O
break_chain_depth	int
+=	O
n	int
;	O
superstring_depth	int
+=	O
n	int
;	O
branch_depth	int
+=	O
n	int
;	O
fourlib_depth	int
+=	O
n	int
;	O
ko_depth	int
+=	O
n	int
;	O
breakin_depth	int
+=	O
n	int
;	O
depth_offset	int
+=	O
n	int
;	O
depth_modification	int
+=	O
n	int
;	O
}	O
void	O
increase_depth_values	()->(void)
(	O
void	O
)	O
{	O
modify_depth_values	(int)->(void)
(	O
1	int
)	O
;	O
}	O
void	O
decrease_depth_values	()->(void)
(	O
void	O
)	O
{	O
modify_depth_values	(int)->(void)
(	O
-	O
1	int
)	O
;	O
}	O
int	O
get_depth_modification	()->(int)
(	O
void	O
)	O
{	O
return	O
depth_modification	int
;	O
}	O
static	O
int	O
detect_owl_blunder	(int,int,*(int),array(char),int,*(float),int)->(int)
(	O
int	O
move	*(int)
,	O
int	O
color	int
,	O
int	O
*	O
defense_point	*(int)
,	O
signed	O
char	O
safe_stones	array(char)
[	O
BOARDMAX	O
]	O
,	O
int	O
liberties	*(int)
,	O
float	O
*	O
return_value	*(float)
,	O
int	O
save_verbose	int
)	O
;	O
static	O
void	O
detect_tactical_blunder	(int,int,*(int),array(char),int,*(int),*(float),int)->(void)
(	O
int	O
move	*(int)
,	O
int	O
color	int
,	O
int	O
*	O
defense_point	*(int)
,	O
signed	O
char	O
safe_stones	array(char)
[	O
BOARDMAX	O
]	O
,	O
int	O
liberties	*(int)
,	O
int	O
*	O
libs	*(int)
,	O
float	O
*	O
return_value	*(float)
,	O
int	O
save_verbose	int
)	O
;	O
int	O
confirm_safety	(int,int,*(int),array(char))->(int)
(	O
int	O
move	*(int)
,	O
int	O
color	int
,	O
int	O
*	O
defense_point	*(int)
,	O
signed	O
char	O
safe_stones	array(char)
[	O
BOARDMAX	O
]	O
)	O
{	O
return	O
(	O
blunder_size	(int,int,*(int),array(char))->(float)
(	O
move	*(int)
,	O
color	int
,	O
defense_point	*(int)
,	O
safe_stones	array(char)
)	O
==	O
0.0	int
)	O
;	O
}	O
float	O
blunder_size	(int,int,*(int),array(char))->(float)
(	O
int	O
move	*(int)
,	O
int	O
color	int
,	O
int	O
*	O
defense_point	*(int)
,	O
signed	O
char	O
safe_stones	array(char)
[	O
BOARDMAX	O
]	O
)	O
{	O
int	O
libs	*(int)
[	O
5	int
]	O
;	O
int	O
liberties	*(int)
=	O
accuratelib	(int,int,int,*(int))->(int)
(	O
move	*(int)
,	O
color	int
,	O
5	int
,	O
libs	*(int)
)	O
;	O
int	O
trouble	int
=	O
0	int
;	O
int	O
save_verbose	int
=	O
verbose	int
;	O
float	O
return_value	*(float)
=	O
0.0	int
;	O
int	O
atari	int
;	O
signed	O
char	O
defense_moves	array(char)
[	O
BOARDMAX	O
]	O
;	O
if	O
(	O
defense_point	*(int)
)	O
*	O
defense_point	*(int)
=	O
NO_MOVE	O
;	O
TRACE	O
(	O
"Checking safety of a %s move at %1m\n"	*(char)
,	O
color_to_string	(int)->(*(char))
(	O
color	int
)	O
,	O
move	*(int)
)	O
;	O
if	O
(	O
verbose	int
>	O
0	int
)	O
verbose	int
--	O
;	O
trouble	int
=	O
detect_owl_blunder	(int,int,*(int),array(char),int,*(float),int)->(int)
(	O
move	*(int)
,	O
color	int
,	O
defense_point	*(int)
,	O
safe_stones	array(char)
,	O
liberties	*(int)
,	O
&	O
return_value	*(float)
,	O
save_verbose	int
)	O
;	O
if	O
(	O
trouble	int
)	O
detect_tactical_blunder	(int,int,*(int),array(char),int,*(int),*(float),int)->(void)
(	O
move	*(int)
,	O
color	int
,	O
defense_point	*(int)
,	O
safe_stones	array(char)
,	O
liberties	*(int)
,	O
libs	*(int)
,	O
&	O
return_value	*(float)
,	O
save_verbose	int
)	O
;	O
atari	int
=	O
atari_atari_blunder_size	(int,int,array(char),array(char))->(int)
(	O
color	int
,	O
move	*(int)
,	O
defense_moves	array(char)
,	O
safe_stones	array(char)
)	O
;	O
if	O
(	O
atari	int
)	O
{	O
if	O
(	O
defense_point	*(int)
)	O
{	O
int	O
pos	int
;	O
*	O
defense_point	*(int)
=	O
NO_MOVE	O
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
if	O
(	O
ON_BOARD	O
(	O
pos	int
)	O
&&	O
defense_moves	array(char)
[	O
pos	int
]	O
)	O
{	O
*	O
defense_point	*(int)
=	O
pos	int
;	O
break	O
;	O
}	O
}	O
verbose	int
=	O
save_verbose	int
;	O
TRACE	O
(	O
"Combination attack appears.\n"	*(char)
)	O
;	O
return_value	*(float)
+=	O
(	O
float	O
)	O
atari	int
;	O
}	O
verbose	int
=	O
save_verbose	int
;	O
return	O
return_value	*(float)
;	O
}	O
static	O
int	O
detect_owl_blunder	(int,int,*(int),array(char),int,*(float),int)->(int)
(	O
int	O
move	*(int)
,	O
int	O
color	int
,	O
int	O
*	O
defense_point	*(int)
,	O
signed	O
char	O
safe_stones	array(char)
[	O
BOARDMAX	O
]	O
,	O
int	O
liberties	*(int)
,	O
float	O
*	O
return_value	*(float)
,	O
int	O
save_verbose	int
)	O
{	O
int	O
k	int
;	O
int	O
ii	int
;	O
int	O
trouble	int
=	O
0	int
;	O
int	O
dragon_analyzed	array(int)
[	O
4	int
]	O
=	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
}	O
;	O
int	O
current_verbose	int
=	O
verbose	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
4	int
;	O
k	int
++	O
)	O
{	O
int	O
bpos	int
=	O
move	*(int)
+	O
delta	array(int)
[	O
k	int
]	O
;	O
int	O
j	int
;	O
if	O
(	O
board	*(char)
[	O
bpos	int
]	O
!=	O
color	int
)	O
continue	O
;	O
if	O
(	O
liberties	*(int)
<=	O
worm	array(struct(int,int,float,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(int),array(int),array(int),array(int),array(int),array(int),array(int),array(int)))
[	O
bpos	int
]	O
.	O
liberties	*(int)
&&	O
liberties	*(int)
<=	O
4	int
)	O
trouble	int
=	O
1	int
;	O
else	O
if	O
(	O
min_eyes	(*(struct(char,char,char,char)))->(int)
(	O
&	O
(	O
DRAGON2	O
(	O
bpos	int
)	O
.	O
genus	*(struct)
)	O
)	O
>	O
2	int
||	O
!	O
is_proper_eye_space	(int)->(int)
(	O
move	*(int)
)	O
)	O
continue	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
k	int
;	O
j	int
++	O
)	O
if	O
(	O
dragon_analyzed	array(int)
[	O
j	int
]	O
==	O
dragon	int
[	O
bpos	int
]	O
.	O
origin	int
)	O
break	O
;	O
if	O
(	O
j	int
<	O
k	int
)	O
continue	O
;	O
dragon_analyzed	array(int)
[	O
k	int
]	O
=	O
dragon	int
[	O
bpos	int
]	O
.	O
origin	int
;	O
if	O
(	O
safe_stones	array(char)
&&	O
safe_stones	array(char)
[	O
bpos	int
]	O
==	O
OWL_SAVED_STONE	int
)	O
continue	O
;	O
if	O
(	O
(	O
dragon	int
[	O
bpos	int
]	O
.	O
status	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
ALIVE	int
||	O
(	O
safe_stones	array(char)
&&	O
safe_stones	array(char)
[	O
bpos	int
]	O
)	O
)	O
&&	O
DRAGON2	O
(	O
bpos	int
)	O
.	O
safety	int
!=	O
INVINCIBLE	int
&&	O
DRAGON2	O
(	O
bpos	int
)	O
.	O
safety	int
!=	O
STRONGLY_ALIVE	int
)	O
{	O
int	O
kworm	int
=	O
NO_MOVE	O
;	O
int	O
acode	int
=	O
owl_confirm_safety	(int,int,*(int),*(int))->(int)
(	O
move	*(int)
,	O
bpos	int
,	O
defense_point	*(int)
,	O
&	O
kworm	int
)	O
;	O
if	O
(	O
acode	int
!=	O
WIN	int
)	O
{	O
int	O
r	int
;	O
for	O
(	O
r	int
=	O
0	int
;	O
r	int
<	O
DRAGON2	O
(	O
bpos	int
)	O
.	O
neighbors	int
;	O
r	int
++	O
)	O
{	O
int	O
neighbor	int
=	O
dragon2	*(struct(int,array(int),int,int,int,float,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),float,float,float,int,struct(char,char,char,char),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,int,int,int,int,int,int))
[	O
DRAGON2	O
(	O
bpos	int
)	O
.	O
adjacent	array(int)
[	O
r	int
]	O
]	O
.	O
origin	int
;	O
int	O
resultb	*(int)
;	O
if	O
(	O
board	*(char)
[	O
neighbor	int
]	O
==	O
color	int
)	O
continue	O
;	O
owl_analyze_semeai_after_move	(int,int,int,int,*(int),*(int),*(int),int,*(int),int)->(void)
(	O
move	*(int)
,	O
color	int
,	O
neighbor	int
,	O
bpos	int
,	O
NULL	O
,	O
&	O
resultb	*(int)
,	O
NULL	O
,	O
1	int
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
resultb	*(int)
==	O
0	int
)	O
acode	int
=	O
WIN	int
;	O
}	O
}	O
if	O
(	O
acode	int
==	O
0	int
)	O
{	O
verbose	int
=	O
save_verbose	int
;	O
TRACE	O
(	O
"Dragon at %1m becomes attackable.\n"	*(char)
,	O
bpos	int
)	O
;	O
verbose	int
=	O
current_verbose	int
;	O
*	O
return_value	*(float)
+=	O
2.0	int
*	O
dragon	int
[	O
bpos	int
]	O
.	O
effective_size	float
;	O
if	O
(	O
safe_stones	array(char)
)	O
mark_dragon	(int,array(char),char)->(void)
(	O
bpos	int
,	O
safe_stones	array(char)
,	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
acode	int
==	O
LOSS	int
)	O
{	O
verbose	int
=	O
save_verbose	int
;	O
TRACE	O
(	O
"Dragon at %1m becomes attackable.\n"	*(char)
,	O
bpos	int
)	O
;	O
verbose	int
=	O
current_verbose	int
;	O
if	O
(	O
kworm	int
==	O
move	*(int)
)	O
{	O
int	O
l	int
;	O
for	O
(	O
l	int
=	O
0	int
;	O
l	int
<	O
4	int
;	O
l	int
++	O
)	O
{	O
int	O
kworm	int
=	O
move	*(int)
+	O
delta	array(int)
[	O
l	int
]	O
;	O
if	O
(	O
board	*(char)
[	O
kworm	int
]	O
==	O
color	int
)	O
{	O
*	O
return_value	*(float)
+=	O
2.0	int
*	O
worm	array(struct(int,int,float,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(int),array(int),array(int),array(int),array(int),array(int),array(int),array(int)))
[	O
kworm	int
]	O
.	O
effective_size	float
;	O
if	O
(	O
safe_stones	array(char)
)	O
for	O
(	O
ii	int
=	O
BOARDMIN	O
;	O
ii	int
<	O
BOARDMAX	O
;	O
ii	int
++	O
)	O
if	O
(	O
ON_BOARD	O
(	O
ii	int
)	O
&&	O
worm	array(struct(int,int,float,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(int),array(int),array(int),array(int),array(int),array(int),array(int),array(int)))
[	O
ii	int
]	O
.	O
origin	int
==	O
worm	array(struct(int,int,float,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(int),array(int),array(int),array(int),array(int),array(int),array(int),array(int)))
[	O
kworm	int
]	O
.	O
origin	int
)	O
safe_stones	array(char)
[	O
ii	int
]	O
=	O
0	int
;	O
}	O
}	O
}	O
else	O
{	O
*	O
return_value	*(float)
+=	O
2.0	int
*	O
worm	array(struct(int,int,float,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(int),array(int),array(int),array(int),array(int),array(int),array(int),array(int)))
[	O
kworm	int
]	O
.	O
effective_size	float
;	O
if	O
(	O
safe_stones	array(char)
)	O
for	O
(	O
ii	int
=	O
BOARDMIN	O
;	O
ii	int
<	O
BOARDMAX	O
;	O
ii	int
++	O
)	O
if	O
(	O
ON_BOARD	O
(	O
ii	int
)	O
&&	O
worm	array(struct(int,int,float,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(int),array(int),array(int),array(int),array(int),array(int),array(int),array(int)))
[	O
ii	int
]	O
.	O
origin	int
==	O
worm	array(struct(int,int,float,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(int),array(int),array(int),array(int),array(int),array(int),array(int),array(int)))
[	O
kworm	int
]	O
.	O
origin	int
)	O
safe_stones	array(char)
[	O
ii	int
]	O
=	O
0	int
;	O
}	O
}	O
}	O
}	O
return	O
trouble	int
;	O
}	O
static	O
void	O
detect_tactical_blunder	(int,int,*(int),array(char),int,*(int),*(float),int)->(void)
(	O
int	O
move	*(int)
,	O
int	O
color	int
,	O
int	O
*	O
defense_point	*(int)
,	O
signed	O
char	O
safe_stones	array(char)
[	O
BOARDMAX	O
]	O
,	O
int	O
liberties	*(int)
,	O
int	O
*	O
libs	*(int)
,	O
float	O
*	O
return_value	*(float)
,	O
int	O
save_verbose	int
)	O
{	O
int	O
other	int
=	O
OTHER_COLOR	O
(	O
color	int
)	O
;	O
int	O
pos	int
;	O
int	O
ii	int
;	O
int	O
current_verbose	int
=	O
verbose	int
;	O
if	O
(	O
!	O
trymove	(int,int,*(char),int)->(int)
(	O
move	*(int)
,	O
color	int
,	O
NULL	O
,	O
NO_MOVE	O
)	O
)	O
return	O
;	O
increase_depth_values	()->(void)
(	O
)	O
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
!	O
IS_STONE	O
(	O
board	*(char)
[	O
pos	int
]	O
)	O
||	O
worm	array(struct(int,int,float,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(int),array(int),array(int),array(int),array(int),array(int),array(int),array(int)))
[	O
pos	int
]	O
.	O
origin	int
!=	O
pos	int
||	O
pos	int
==	O
move	*(int)
)	O
continue	O
;	O
if	O
(	O
board	*(char)
[	O
pos	int
]	O
==	O
color	int
&&	O
(	O
(	O
safe_stones	array(char)
&&	O
safe_stones	array(char)
[	O
pos	int
]	O
)	O
||	O
(	O
!	O
safe_stones	array(char)
&&	O
worm	array(struct(int,int,float,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(int),array(int),array(int),array(int),array(int),array(int),array(int),array(int)))
[	O
pos	int
]	O
.	O
attack_codes	array(int)
[	O
0	int
]	O
==	O
0	int
)	O
)	O
&&	O
attack	(int,*(int))->(int)
(	O
pos	int
,	O
NULL	O
)	O
)	O
{	O
if	O
(	O
defense_point	*(int)
)	O
{	O
find_defense	(int,*(int))->(int)
(	O
pos	int
,	O
defense_point	*(int)
)	O
;	O
popgo	()->(void)
(	O
)	O
;	O
if	O
(	O
!	O
is_legal	(int,int)->(int)
(	O
*	O
defense_point	*(int)
,	O
color	int
)	O
||	O
play_attack_defend_n	(int,int,int)->(int)
(	O
color	int
,	O
1	int
,	O
1	int
,	O
*	O
defense_point	*(int)
,	O
pos	int
)	O
)	O
find_defense	(int,*(int))->(int)
(	O
pos	int
,	O
defense_point	*(int)
)	O
;	O
trymove	(int,int,*(char),int)->(int)
(	O
move	*(int)
,	O
color	int
,	O
NULL	O
,	O
NO_MOVE	O
)	O
;	O
}	O
verbose	int
=	O
save_verbose	int
;	O
TRACE	O
(	O
"After %1m Worm at %1m becomes attackable.\n"	*(char)
,	O
move	*(int)
,	O
pos	int
)	O
;	O
verbose	int
=	O
current_verbose	int
;	O
*	O
return_value	*(float)
+=	O
worm	array(struct(int,int,float,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(int),array(int),array(int),array(int),array(int),array(int),array(int),array(int)))
[	O
pos	int
]	O
.	O
effective_size	float
;	O
if	O
(	O
safe_stones	array(char)
)	O
for	O
(	O
ii	int
=	O
BOARDMIN	O
;	O
ii	int
<	O
BOARDMAX	O
;	O
ii	int
++	O
)	O
if	O
(	O
worm	array(struct(int,int,float,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(int),array(int),array(int),array(int),array(int),array(int),array(int),array(int)))
[	O
ii	int
]	O
.	O
origin	int
==	O
worm	array(struct(int,int,float,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(int),array(int),array(int),array(int),array(int),array(int),array(int),array(int)))
[	O
pos	int
]	O
.	O
origin	int
)	O
safe_stones	array(char)
[	O
ii	int
]	O
=	O
0	int
;	O
}	O
else	O
if	O
(	O
board	*(char)
[	O
pos	int
]	O
==	O
other	int
&&	O
worm	array(struct(int,int,float,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(int),array(int),array(int),array(int),array(int),array(int),array(int),array(int)))
[	O
pos	int
]	O
.	O
origin	int
==	O
pos	int
&&	O
worm	array(struct(int,int,float,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(int),array(int),array(int),array(int),array(int),array(int),array(int),array(int)))
[	O
pos	int
]	O
.	O
attack_codes	array(int)
[	O
0	int
]	O
!=	O
0	int
&&	O
worm	array(struct(int,int,float,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(int),array(int),array(int),array(int),array(int),array(int),array(int),array(int)))
[	O
pos	int
]	O
.	O
defense_codes	array(int)
[	O
0	int
]	O
==	O
0	int
&&	O
find_defense	(int,*(int))->(int)
(	O
pos	int
,	O
NULL	O
)	O
)	O
{	O
int	O
owl_attacks	int
;	O
int	O
defense_effective	int
=	O
0	int
;	O
popgo	()->(void)
(	O
)	O
;	O
decrease_depth_values	()->(void)
(	O
)	O
;	O
owl_attacks	int
=	O
owl_does_attack	(int,int,*(int))->(int)
(	O
move	*(int)
,	O
pos	int
,	O
NULL	O
)	O
;	O
if	O
(	O
owl_attacks	int
!=	O
WIN	int
)	O
{	O
*	O
return_value	*(float)
+=	O
2	int
*	O
worm	array(struct(int,int,float,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(int),array(int),array(int),array(int),array(int),array(int),array(int),array(int)))
[	O
pos	int
]	O
.	O
effective_size	float
;	O
defense_effective	int
=	O
1	int
;	O
verbose	int
=	O
save_verbose	int
;	O
TRACE	O
(	O
"After %1m worm at %1m becomes defendable - A.\n"	*(char)
,	O
move	*(int)
,	O
pos	int
)	O
;	O
verbose	int
=	O
current_verbose	int
;	O
}	O
else	O
if	O
(	O
dragon	int
[	O
pos	int
]	O
.	O
status	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
!=	O
ALIVE	int
)	O
{	O
int	O
k	int
;	O
int	O
adj	array(int)
[	O
MAXCHAIN	int
]	O
;	O
int	O
num_adj	*(int)
;	O
num_adj	*(int)
=	O
extended_chainlinks	(int,array(int),int)->(int)
(	O
pos	int
,	O
adj	array(int)
,	O
0	int
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
num_adj	*(int)
;	O
k	int
++	O
)	O
{	O
int	O
neighbor	int
=	O
adj	array(int)
[	O
k	int
]	O
;	O
int	O
resulta	*(int)
;	O
owl_analyze_semeai_after_move	(int,int,int,int,*(int),*(int),*(int),int,*(int),int)->(void)
(	O
move	*(int)
,	O
color	int
,	O
pos	int
,	O
neighbor	int
,	O
&	O
resulta	*(int)
,	O
NULL	O
,	O
NULL	O
,	O
1	int
,	O
NULL	O
,	O
1	int
)	O
;	O
if	O
(	O
resulta	*(int)
!=	O
0	int
)	O
{	O
*	O
return_value	*(float)
+=	O
2	int
*	O
worm	array(struct(int,int,float,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(int),array(int),array(int),array(int),array(int),array(int),array(int),array(int)))
[	O
pos	int
]	O
.	O
effective_size	float
;	O
defense_effective	int
=	O
1	int
;	O
verbose	int
=	O
save_verbose	int
;	O
TRACE	O
(	O
"After %1m worm at %1m becomes defendable - B.\n"	*(char)
,	O
move	*(int)
,	O
pos	int
)	O
;	O
verbose	int
=	O
current_verbose	int
;	O
break	O
;	O
}	O
}	O
}	O
trymove	(int,int,*(char),int)->(int)
(	O
move	*(int)
,	O
color	int
,	O
NULL	O
,	O
NO_MOVE	O
)	O
;	O
increase_depth_values	()->(void)
(	O
)	O
;	O
if	O
(	O
defense_effective	int
&&	O
defense_point	*(int)
)	O
{	O
int	O
dpos	int
;	O
if	O
(	O
attack	(int,*(int))->(int)
(	O
pos	int
,	O
&	O
dpos	int
)	O
)	O
{	O
*	O
defense_point	*(int)
=	O
dpos	int
;	O
popgo	()->(void)
(	O
)	O
;	O
if	O
(	O
!	O
is_legal	(int,int)->(int)
(	O
dpos	int
,	O
color	int
)	O
||	O
play_attack_defend_n	(int,int,int)->(int)
(	O
color	int
,	O
0	int
,	O
1	int
,	O
dpos	int
,	O
pos	int
)	O
)	O
attack	(int,*(int))->(int)
(	O
pos	int
,	O
defense_point	*(int)
)	O
;	O
trymove	(int,int,*(char),int)->(int)
(	O
move	*(int)
,	O
color	int
,	O
NULL	O
,	O
NO_MOVE	O
)	O
;	O
}	O
else	O
{	O
verbose	int
=	O
save_verbose	int
;	O
TRACE	O
(	O
"No attack found (unexpectedly) on %1m after move at %1m.\n"	*(char)
,	O
pos	int
,	O
move	*(int)
)	O
;	O
verbose	int
=	O
current_verbose	int
;	O
}	O
}	O
}	O
}	O
if	O
(	O
liberties	*(int)
==	O
2	int
)	O
{	O
float	O
d_a_blunder_size	float
;	O
if	O
(	O
double_atari	(int,int,*(float),array(char))->(int)
(	O
libs	*(int)
[	O
0	int
]	O
,	O
other	int
,	O
&	O
d_a_blunder_size	float
,	O
safe_stones	array(char)
)	O
)	O
{	O
if	O
(	O
defense_point	*(int)
&&	O
safe_move	(int,int)->(int)
(	O
libs	*(int)
[	O
0	int
]	O
,	O
color	int
)	O
==	O
WIN	int
)	O
*	O
defense_point	*(int)
=	O
libs	*(int)
[	O
0	int
]	O
;	O
*	O
return_value	*(float)
+=	O
d_a_blunder_size	float
;	O
verbose	int
=	O
save_verbose	int
;	O
TRACE	O
(	O
"Double threat appears at %1m.\n"	*(char)
,	O
libs	*(int)
[	O
0	int
]	O
)	O
;	O
verbose	int
=	O
current_verbose	int
;	O
}	O
else	O
if	O
(	O
double_atari	(int,int,*(float),array(char))->(int)
(	O
libs	*(int)
[	O
1	int
]	O
,	O
other	int
,	O
&	O
d_a_blunder_size	float
,	O
safe_stones	array(char)
)	O
)	O
{	O
if	O
(	O
defense_point	*(int)
&&	O
safe_move	(int,int)->(int)
(	O
libs	*(int)
[	O
1	int
]	O
,	O
color	int
)	O
==	O
WIN	int
)	O
*	O
defense_point	*(int)
=	O
libs	*(int)
[	O
1	int
]	O
;	O
*	O
return_value	*(float)
+=	O
d_a_blunder_size	float
;	O
verbose	int
=	O
save_verbose	int
;	O
TRACE	O
(	O
"Double threat appears at %1m.\n"	*(char)
,	O
libs	*(int)
[	O
1	int
]	O
)	O
;	O
verbose	int
=	O
current_verbose	int
;	O
}	O
}	O
decrease_depth_values	()->(void)
(	O
)	O
;	O
popgo	()->(void)
(	O
)	O
;	O
}	O
int	O
double_atari	(int,int,*(float),array(char))->(int)
(	O
int	O
move	*(int)
,	O
int	O
color	int
,	O
float	O
*	O
value	*(char)
,	O
signed	O
char	O
safe_stones	array(char)
[	O
BOARDMAX	O
]	O
)	O
{	O
int	O
other	int
=	O
OTHER_COLOR	O
(	O
color	int
)	O
;	O
int	O
k	int
;	O
int	O
m	int
=	O
I	O
(	O
move	*(int)
)	O
;	O
int	O
n	int
=	O
J	O
(	O
move	*(int)
)	O
;	O
if	O
(	O
!	O
ON_BOARD	O
(	O
move	*(int)
)	O
)	O
return	O
0	int
;	O
for	O
(	O
k	int
=	O
4	int
;	O
k	int
<	O
8	int
;	O
k	int
++	O
)	O
{	O
int	O
dm	int
=	O
deltai	array(int)
[	O
k	int
]	O
;	O
int	O
dn	int
=	O
deltaj	array(int)
[	O
k	int
]	O
;	O
if	O
(	O
BOARD	O
(	O
m	int
+	O
dm	int
,	O
n	int
+	O
dn	int
)	O
==	O
color	int
&&	O
BOARD	O
(	O
m	int
,	O
n	int
+	O
dn	int
)	O
==	O
other	int
&&	O
BOARD	O
(	O
m	int
+	O
dm	int
,	O
n	int
)	O
==	O
other	int
&&	O
(	O
!	O
safe_stones	array(char)
||	O
(	O
safe_stones	array(char)
[	O
POS	O
(	O
m	int
,	O
n	int
+	O
dn	int
)	O
]	O
&&	O
safe_stones	array(char)
[	O
POS	O
(	O
m	int
+	O
dm	int
,	O
n	int
)	O
]	O
)	O
)	O
&&	O
trymove	(int,int,*(char),int)->(int)
(	O
move	*(int)
,	O
color	int
,	O
"double_atari"	*(char)
,	O
NO_MOVE	O
)	O
)	O
{	O
if	O
(	O
countlib	(int)->(int)
(	O
move	*(int)
)	O
>	O
1	int
&&	O
(	O
BOARD	O
(	O
m	int
,	O
n	int
+	O
dn	int
)	O
==	O
EMPTY	int
||	O
BOARD	O
(	O
m	int
+	O
dm	int
,	O
n	int
)	O
==	O
EMPTY	int
||	O
!	O
defend_both	(int,int)->(int)
(	O
POS	O
(	O
m	int
,	O
n	int
+	O
dn	int
)	O
,	O
POS	O
(	O
m	int
+	O
dm	int
,	O
n	int
)	O
)	O
)	O
)	O
{	O
popgo	()->(void)
(	O
)	O
;	O
if	O
(	O
value	*(char)
)	O
{	O
if	O
(	O
worm	array(struct(int,int,float,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(int),array(int),array(int),array(int),array(int),array(int),array(int),array(int)))
[	O
POS	O
(	O
m	int
,	O
n	int
+	O
dn	int
)	O
]	O
.	O
effective_size	float
>	O
worm	array(struct(int,int,float,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(int),array(int),array(int),array(int),array(int),array(int),array(int),array(int)))
[	O
POS	O
(	O
m	int
+	O
dm	int
,	O
n	int
)	O
]	O
.	O
effective_size	float
)	O
{	O
*	O
value	*(char)
=	O
2.0	int
*	O
worm	array(struct(int,int,float,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(int),array(int),array(int),array(int),array(int),array(int),array(int),array(int)))
[	O
POS	O
(	O
m	int
,	O
n	int
+	O
dn	int
)	O
]	O
.	O
effective_size	float
;	O
if	O
(	O
safe_stones	array(char)
)	O
mark_string	(int,array(char),char)->(void)
(	O
POS	O
(	O
m	int
,	O
n	int
+	O
dn	int
)	O
,	O
safe_stones	array(char)
,	O
0	int
)	O
;	O
}	O
else	O
{	O
*	O
value	*(char)
=	O
2.0	int
*	O
worm	array(struct(int,int,float,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),array(int),array(int),array(int),array(int),array(int),array(int),array(int),array(int)))
[	O
POS	O
(	O
m	int
+	O
dm	int
,	O
n	int
)	O
]	O
.	O
effective_size	float
;	O
if	O
(	O
safe_stones	array(char)
)	O
mark_string	(int,array(char),char)->(void)
(	O
POS	O
(	O
m	int
+	O
dm	int
,	O
n	int
)	O
,	O
safe_stones	array(char)
,	O
0	int
)	O
;	O
}	O
}	O
return	O
1	int
;	O
}	O
popgo	()->(void)
(	O
)	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
playing_into_snapback	(int,int)->(int)
(	O
int	O
move	*(int)
,	O
int	O
color	int
)	O
{	O
int	O
libs	*(int)
[	O
2	int
]	O
;	O
int	O
k	int
;	O
if	O
(	O
approxlib	(int,int,int,*(int))->(int)
(	O
move	*(int)
,	O
color	int
,	O
1	int
,	O
NULL	O
)	O
!=	O
0	int
||	O
accuratelib	(int,int,int,*(int))->(int)
(	O
move	*(int)
,	O
color	int
,	O
2	int
,	O
libs	*(int)
)	O
!=	O
1	int
)	O
return	O
0	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
4	int
;	O
k	int
++	O
)	O
if	O
(	O
board	*(char)
[	O
move	*(int)
+	O
delta	array(int)
[	O
k	int
]	O
]	O
==	O
color	int
&&	O
adjacent_strings	(int,int)->(int)
(	O
libs	*(int)
[	O
0	int
]	O
,	O
move	*(int)
+	O
delta	array(int)
[	O
k	int
]	O
)	O
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
void	O
who_wins	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
int	O
color	int
,	O
FILE	struct
*	O
outfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
float	O
result	int
;	O
silent_examine_position	(int)->(void)
(	O
EXAMINE_DRAGONS	int
)	O
;	O
if	O
(	O
color	int
!=	O
BLACK	int
&&	O
color	int
!=	O
WHITE	int
)	O
color	int
=	O
BLACK	int
;	O
result	int
=	O
(	O
white_score	float
+	O
black_score	float
)	O
/	O
2.0	int
;	O
if	O
(	O
result	int
==	O
0.0	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
outfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Result: jigo   "	*(char)
)	O
;	O
else	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
outfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Result: %c+%.1f   "	*(char)
,	O
(	O
result	int
>	O
0.0	int
)	O
?	O
'W'	O
:	O
'B'	O
,	O
gg_abs	O
(	O
result	int
)	O
)	O
;	O
}	O
static	O
void	O
do_find_superstring	(int,*(int),*(int),*(int),*(int),int,*(int),*(int),int,int,int)->(void)
(	O
int	O
str	int
,	O
int	O
*	O
num_stones	int
,	O
int	O
*	O
stones	*(int)
,	O
int	O
*	O
num_lib	*(int)
,	O
int	O
*	O
libs	*(int)
,	O
int	O
maxlibs	int
,	O
int	O
*	O
num_adj	*(int)
,	O
int	O
*	O
adjs	*(int)
,	O
int	O
liberty_cap	int
,	O
int	O
proper	int
,	O
int	O
type	char
)	O
;	O
static	O
void	O
superstring_add_string	(int,*(int),*(int),*(int),*(int),*(int),*(int),int,*(int),*(int),int,array(char),array(char),array(char),int)->(void)
(	O
int	O
str	int
,	O
int	O
*	O
num_my_stones	*(int)
,	O
int	O
*	O
my_stones	*(int)
,	O
int	O
*	O
num_stones	int
,	O
int	O
*	O
stones	*(int)
,	O
int	O
*	O
num_libs	*(int)
,	O
int	O
*	O
libs	*(int)
,	O
int	O
maxlibs	int
,	O
int	O
*	O
num_adj	*(int)
,	O
int	O
*	O
adjs	*(int)
,	O
int	O
liberty_cap	int
,	O
signed	O
char	O
mx	array(char)
[	O
BOARDMAX	O
]	O
,	O
signed	O
char	O
ml	array(char)
[	O
BOARDMAX	O
]	O
,	O
signed	O
char	O
ma	array(char)
[	O
BOARDMAX	O
]	O
,	O
int	O
do_add	int
)	O
;	O
void	O
find_superstring	(int,*(int),*(int))->(void)
(	O
int	O
str	int
,	O
int	O
*	O
num_stones	int
,	O
int	O
*	O
stones	*(int)
)	O
{	O
do_find_superstring	(int,*(int),*(int),*(int),*(int),int,*(int),*(int),int,int,int)->(void)
(	O
str	int
,	O
num_stones	int
,	O
stones	*(int)
,	O
NULL	O
,	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
NULL	O
,	O
0	int
,	O
0	int
,	O
1	int
)	O
;	O
}	O
void	O
find_superstring_conservative	(int,*(int),*(int))->(void)
(	O
int	O
str	int
,	O
int	O
*	O
num_stones	int
,	O
int	O
*	O
stones	*(int)
)	O
{	O
do_find_superstring	(int,*(int),*(int),*(int),*(int),int,*(int),*(int),int,int,int)->(void)
(	O
str	int
,	O
num_stones	int
,	O
stones	*(int)
,	O
NULL	O
,	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
NULL	O
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
}	O
void	O
find_superstring_liberties	(int,*(int),*(int),int)->(void)
(	O
int	O
str	int
,	O
int	O
*	O
num_libs	*(int)
,	O
int	O
*	O
libs	*(int)
,	O
int	O
liberty_cap	int
)	O
{	O
do_find_superstring	(int,*(int),*(int),*(int),*(int),int,*(int),*(int),int,int,int)->(void)
(	O
str	int
,	O
NULL	O
,	O
NULL	O
,	O
num_libs	*(int)
,	O
libs	*(int)
,	O
MAX_LIBERTIES	int
,	O
NULL	O
,	O
NULL	O
,	O
liberty_cap	int
,	O
0	int
,	O
0	int
)	O
;	O
}	O
void	O
find_proper_superstring_liberties	(int,*(int),*(int),int)->(void)
(	O
int	O
str	int
,	O
int	O
*	O
num_libs	*(int)
,	O
int	O
*	O
libs	*(int)
,	O
int	O
liberty_cap	int
)	O
{	O
do_find_superstring	(int,*(int),*(int),*(int),*(int),int,*(int),*(int),int,int,int)->(void)
(	O
str	int
,	O
NULL	O
,	O
NULL	O
,	O
num_libs	*(int)
,	O
libs	*(int)
,	O
MAX_LIBERTIES	int
,	O
NULL	O
,	O
NULL	O
,	O
liberty_cap	int
,	O
1	int
,	O
0	int
)	O
;	O
}	O
void	O
find_superstring_stones_and_liberties	(int,*(int),*(int),*(int),*(int),int)->(void)
(	O
int	O
str	int
,	O
int	O
*	O
num_stones	int
,	O
int	O
*	O
stones	*(int)
,	O
int	O
*	O
num_libs	*(int)
,	O
int	O
*	O
libs	*(int)
,	O
int	O
liberty_cap	int
)	O
{	O
do_find_superstring	(int,*(int),*(int),*(int),*(int),int,*(int),*(int),int,int,int)->(void)
(	O
str	int
,	O
num_stones	int
,	O
stones	*(int)
,	O
num_libs	*(int)
,	O
libs	*(int)
,	O
MAX_LIBERTIES	int
,	O
NULL	O
,	O
NULL	O
,	O
liberty_cap	int
,	O
0	int
,	O
0	int
)	O
;	O
}	O
void	O
superstring_chainlinks	(int,*(int),array(int),int)->(void)
(	O
int	O
str	int
,	O
int	O
*	O
num_adj	*(int)
,	O
int	O
adjs	*(int)
[	O
MAXCHAIN	int
]	O
,	O
int	O
liberty_cap	int
)	O
{	O
do_find_superstring	(int,*(int),*(int),*(int),*(int),int,*(int),*(int),int,int,int)->(void)
(	O
str	int
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
0	int
,	O
num_adj	*(int)
,	O
adjs	*(int)
,	O
liberty_cap	int
,	O
0	int
,	O
2	int
)	O
;	O
}	O
void	O
proper_superstring_chainlinks	(int,*(int),array(int),int)->(void)
(	O
int	O
str	int
,	O
int	O
*	O
num_adj	*(int)
,	O
int	O
adjs	*(int)
[	O
MAXCHAIN	int
]	O
,	O
int	O
liberty_cap	int
)	O
{	O
do_find_superstring	(int,*(int),*(int),*(int),*(int),int,*(int),*(int),int,int,int)->(void)
(	O
str	int
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
0	int
,	O
num_adj	*(int)
,	O
adjs	*(int)
,	O
liberty_cap	int
,	O
1	int
,	O
2	int
)	O
;	O
}	O
static	O
void	O
do_find_superstring	(int,*(int),*(int),*(int),*(int),int,*(int),*(int),int,int,int)->(void)
(	O
int	O
str	int
,	O
int	O
*	O
num_stones	int
,	O
int	O
*	O
stones	*(int)
,	O
int	O
*	O
num_libs	*(int)
,	O
int	O
*	O
libs	*(int)
,	O
int	O
maxlibs	int
,	O
int	O
*	O
num_adj	*(int)
,	O
int	O
*	O
adjs	*(int)
,	O
int	O
liberty_cap	int
,	O
int	O
proper	int
,	O
int	O
type	char
)	O
{	O
int	O
num_my_stones	*(int)
;	O
int	O
my_stones	*(int)
[	O
MAX_BOARD	int
*	O
MAX_BOARD	int
]	O
;	O
signed	O
char	O
mx	array(char)
[	O
BOARDMAX	O
]	O
;	O
signed	O
char	O
ml	array(char)
[	O
BOARDMAX	O
]	O
;	O
signed	O
char	O
ma	array(char)
[	O
BOARDMAX	O
]	O
;	O
int	O
k	int
,	O
l	int
,	O
r	int
;	O
int	O
color	int
=	O
board	*(char)
[	O
str	int
]	O
;	O
int	O
other	int
=	O
OTHER_COLOR	O
(	O
color	int
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
mx	array(char)
,	O
0	int
,	O
sizeof	O
(	O
mx	array(char)
)	O
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
ml	array(char)
,	O
0	int
,	O
sizeof	O
(	O
ml	array(char)
)	O
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
ma	array(char)
,	O
0	int
,	O
sizeof	O
(	O
ma	array(char)
)	O
)	O
;	O
if	O
(	O
num_stones	int
)	O
*	O
num_stones	int
=	O
0	int
;	O
if	O
(	O
num_libs	*(int)
)	O
*	O
num_libs	*(int)
=	O
0	int
;	O
if	O
(	O
num_adj	*(int)
)	O
*	O
num_adj	*(int)
=	O
0	int
;	O
num_my_stones	*(int)
=	O
0	int
;	O
superstring_add_string	(int,*(int),*(int),*(int),*(int),*(int),*(int),int,*(int),*(int),int,array(char),array(char),array(char),int)->(void)
(	O
str	int
,	O
&	O
num_my_stones	*(int)
,	O
my_stones	*(int)
,	O
num_stones	int
,	O
stones	*(int)
,	O
num_libs	*(int)
,	O
libs	*(int)
,	O
maxlibs	int
,	O
num_adj	*(int)
,	O
adjs	*(int)
,	O
liberty_cap	int
,	O
mx	array(char)
,	O
ml	array(char)
,	O
ma	array(char)
,	O
!	O
proper	int
)	O
;	O
for	O
(	O
r	int
=	O
0	int
;	O
r	int
<	O
num_my_stones	*(int)
;	O
r	int
++	O
)	O
{	O
int	O
pos	int
=	O
my_stones	*(int)
[	O
r	int
]	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
4	int
;	O
k	int
++	O
)	O
{	O
int	O
right	int
=	O
delta	array(int)
[	O
k	int
]	O
;	O
int	O
up	int
=	O
delta	array(int)
[	O
(	O
k	int
+	O
1	int
)	O
%	O
4	int
]	O
;	O
int	O
apos	int
=	O
pos	int
+	O
right	int
;	O
int	O
bpos	int
=	O
pos	int
+	O
right	int
+	O
up	int
;	O
int	O
cpos	int
=	O
pos	int
+	O
2	int
*	O
right	int
;	O
int	O
dpos	int
=	O
pos	int
+	O
right	int
-	O
up	int
;	O
int	O
epos	int
=	O
pos	int
+	O
2	int
*	O
up	int
;	O
int	O
fpos	int
=	O
pos	int
+	O
right	int
+	O
2	int
*	O
up	int
;	O
int	O
gpos	int
=	O
pos	int
+	O
up	int
;	O
int	O
unsafe_move	int
;	O
if	O
(	O
!	O
ON_BOARD	O
(	O
apos	int
)	O
)	O
continue	O
;	O
if	O
(	O
board	*(char)
[	O
apos	int
]	O
==	O
EMPTY	int
)	O
{	O
if	O
(	O
type	char
==	O
2	int
)	O
unsafe_move	int
=	O
(	O
approxlib	(int,int,int,*(int))->(int)
(	O
apos	int
,	O
other	int
,	O
2	int
,	O
NULL	O
)	O
<	O
2	int
)	O
;	O
else	O
unsafe_move	int
=	O
is_self_atari	(int,int)->(int)
(	O
apos	int
,	O
other	int
)	O
;	O
if	O
(	O
unsafe_move	int
&&	O
type	char
==	O
1	int
&&	O
is_ko	(int,int,*(int))->(int)
(	O
apos	int
,	O
other	int
,	O
NULL	O
)	O
)	O
unsafe_move	int
=	O
0	int
;	O
if	O
(	O
unsafe_move	int
)	O
{	O
if	O
(	O
board	*(char)
[	O
bpos	int
]	O
==	O
color	int
&&	O
!	O
mx	array(char)
[	O
bpos	int
]	O
)	O
superstring_add_string	(int,*(int),*(int),*(int),*(int),*(int),*(int),int,*(int),*(int),int,array(char),array(char),array(char),int)->(void)
(	O
bpos	int
,	O
&	O
num_my_stones	*(int)
,	O
my_stones	*(int)
,	O
num_stones	int
,	O
stones	*(int)
,	O
num_libs	*(int)
,	O
libs	*(int)
,	O
maxlibs	int
,	O
num_adj	*(int)
,	O
adjs	*(int)
,	O
liberty_cap	int
,	O
mx	array(char)
,	O
ml	array(char)
,	O
ma	array(char)
,	O
1	int
)	O
;	O
if	O
(	O
board	*(char)
[	O
cpos	int
]	O
==	O
color	int
&&	O
!	O
mx	array(char)
[	O
cpos	int
]	O
)	O
superstring_add_string	(int,*(int),*(int),*(int),*(int),*(int),*(int),int,*(int),*(int),int,array(char),array(char),array(char),int)->(void)
(	O
cpos	int
,	O
&	O
num_my_stones	*(int)
,	O
my_stones	*(int)
,	O
num_stones	int
,	O
stones	*(int)
,	O
num_libs	*(int)
,	O
libs	*(int)
,	O
maxlibs	int
,	O
num_adj	*(int)
,	O
adjs	*(int)
,	O
liberty_cap	int
,	O
mx	array(char)
,	O
ml	array(char)
,	O
ma	array(char)
,	O
1	int
)	O
;	O
if	O
(	O
board	*(char)
[	O
dpos	int
]	O
==	O
color	int
&&	O
!	O
mx	array(char)
[	O
dpos	int
]	O
)	O
superstring_add_string	(int,*(int),*(int),*(int),*(int),*(int),*(int),int,*(int),*(int),int,array(char),array(char),array(char),int)->(void)
(	O
dpos	int
,	O
&	O
num_my_stones	*(int)
,	O
my_stones	*(int)
,	O
num_stones	int
,	O
stones	*(int)
,	O
num_libs	*(int)
,	O
libs	*(int)
,	O
maxlibs	int
,	O
num_adj	*(int)
,	O
adjs	*(int)
,	O
liberty_cap	int
,	O
mx	array(char)
,	O
ml	array(char)
,	O
ma	array(char)
,	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
board	*(char)
[	O
apos	int
]	O
==	O
color	int
&&	O
board	*(char)
[	O
bpos	int
]	O
==	O
EMPTY	int
&&	O
board	*(char)
[	O
fpos	int
]	O
==	O
color	int
&&	O
board	*(char)
[	O
epos	int
]	O
==	O
color	int
&&	O
!	O
mx	array(char)
[	O
epos	int
]	O
&&	O
board	*(char)
[	O
gpos	int
]	O
==	O
EMPTY	int
)	O
superstring_add_string	(int,*(int),*(int),*(int),*(int),*(int),*(int),int,*(int),*(int),int,array(char),array(char),array(char),int)->(void)
(	O
epos	int
,	O
&	O
num_my_stones	*(int)
,	O
my_stones	*(int)
,	O
num_stones	int
,	O
stones	*(int)
,	O
num_libs	*(int)
,	O
libs	*(int)
,	O
maxlibs	int
,	O
num_adj	*(int)
,	O
adjs	*(int)
,	O
liberty_cap	int
,	O
mx	array(char)
,	O
ml	array(char)
,	O
ma	array(char)
,	O
1	int
)	O
;	O
if	O
(	O
board	*(char)
[	O
bpos	int
]	O
==	O
color	int
&&	O
!	O
mx	array(char)
[	O
bpos	int
]	O
&&	O
board	*(char)
[	O
apos	int
]	O
==	O
EMPTY	int
&&	O
board	*(char)
[	O
gpos	int
]	O
==	O
EMPTY	int
)	O
superstring_add_string	(int,*(int),*(int),*(int),*(int),*(int),*(int),int,*(int),*(int),int,array(char),array(char),array(char),int)->(void)
(	O
bpos	int
,	O
&	O
num_my_stones	*(int)
,	O
my_stones	*(int)
,	O
num_stones	int
,	O
stones	*(int)
,	O
num_libs	*(int)
,	O
libs	*(int)
,	O
maxlibs	int
,	O
num_adj	*(int)
,	O
adjs	*(int)
,	O
liberty_cap	int
,	O
mx	array(char)
,	O
ml	array(char)
,	O
ma	array(char)
,	O
1	int
)	O
;	O
if	O
(	O
type	char
==	O
1	int
)	O
for	O
(	O
l	int
=	O
0	int
;	O
l	int
<	O
2	int
;	O
l	int
++	O
)	O
{	O
int	O
upos	int
;	O
if	O
(	O
l	int
==	O
0	int
)	O
{	O
upos	int
=	O
apos	int
;	O
}	O
else	O
{	O
upos	int
=	O
bpos	int
;	O
}	O
if	O
(	O
board	*(char)
[	O
upos	int
]	O
!=	O
other	int
)	O
continue	O
;	O
upos	int
=	O
find_origin	(int)->(int)
(	O
upos	int
)	O
;	O
if	O
(	O
mx	array(char)
[	O
upos	int
]	O
==	O
1	int
)	O
continue	O
;	O
mx	array(char)
[	O
upos	int
]	O
=	O
1	int
;	O
if	O
(	O
attack	(int,*(int))->(int)
(	O
upos	int
,	O
NULL	O
)	O
&&	O
!	O
find_defense	(int,*(int))->(int)
(	O
upos	int
,	O
NULL	O
)	O
)	O
{	O
int	O
lunch_stones	array(int)
[	O
MAX_BOARD	int
*	O
MAX_BOARD	int
]	O
;	O
int	O
num_lunch_stones	int
=	O
findstones	(int,int,*(int))->(int)
(	O
upos	int
,	O
MAX_BOARD	int
*	O
MAX_BOARD	int
,	O
lunch_stones	array(int)
)	O
;	O
int	O
m	int
,	O
n	int
;	O
for	O
(	O
m	int
=	O
0	int
;	O
m	int
<	O
num_lunch_stones	int
;	O
m	int
++	O
)	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
8	int
;	O
n	int
++	O
)	O
{	O
int	O
vpos	int
=	O
lunch_stones	array(int)
[	O
m	int
]	O
+	O
delta	array(int)
[	O
n	int
]	O
;	O
if	O
(	O
board	*(char)
[	O
vpos	int
]	O
==	O
color	int
&&	O
!	O
mx	array(char)
[	O
vpos	int
]	O
)	O
superstring_add_string	(int,*(int),*(int),*(int),*(int),*(int),*(int),int,*(int),*(int),int,array(char),array(char),array(char),int)->(void)
(	O
vpos	int
,	O
&	O
num_my_stones	*(int)
,	O
my_stones	*(int)
,	O
num_stones	int
,	O
stones	*(int)
,	O
num_libs	*(int)
,	O
libs	*(int)
,	O
maxlibs	int
,	O
num_adj	*(int)
,	O
adjs	*(int)
,	O
liberty_cap	int
,	O
mx	array(char)
,	O
ml	array(char)
,	O
ma	array(char)
,	O
1	int
)	O
;	O
}	O
}	O
}	O
if	O
(	O
num_libs	*(int)
&&	O
maxlibs	int
>	O
0	int
&&	O
*	O
num_libs	*(int)
>=	O
maxlibs	int
)	O
return	O
;	O
}	O
}	O
}	O
static	O
void	O
superstring_add_string	(int,*(int),*(int),*(int),*(int),*(int),*(int),int,*(int),*(int),int,array(char),array(char),array(char),int)->(void)
(	O
int	O
str	int
,	O
int	O
*	O
num_my_stones	*(int)
,	O
int	O
*	O
my_stones	*(int)
,	O
int	O
*	O
num_stones	int
,	O
int	O
*	O
stones	*(int)
,	O
int	O
*	O
num_libs	*(int)
,	O
int	O
*	O
libs	*(int)
,	O
int	O
maxlibs	int
,	O
int	O
*	O
num_adj	*(int)
,	O
int	O
*	O
adjs	*(int)
,	O
int	O
liberty_cap	int
,	O
signed	O
char	O
mx	array(char)
[	O
BOARDMAX	O
]	O
,	O
signed	O
char	O
ml	array(char)
[	O
BOARDMAX	O
]	O
,	O
signed	O
char	O
ma	array(char)
[	O
BOARDMAX	O
]	O
,	O
int	O
do_add	int
)	O
{	O
int	O
num_my_libs	int
;	O
int	O
my_libs	array(int)
[	O
MAXLIBS	O
]	O
;	O
int	O
num_my_adj	int
;	O
int	O
my_adjs	array(int)
[	O
MAXCHAIN	int
]	O
;	O
int	O
new_stones	int
;	O
int	O
k	int
;	O
ASSERT1	O
(	O
mx	array(char)
[	O
str	int
]	O
==	O
0	int
,	O
str	int
)	O
;	O
new_stones	int
=	O
findstones	(int,int,*(int))->(int)
(	O
str	int
,	O
board_size	int
*	O
board_size	int
,	O
&	O
(	O
my_stones	*(int)
[	O
*	O
num_my_stones	*(int)
]	O
)	O
)	O
;	O
mark_string	(int,array(char),char)->(void)
(	O
str	int
,	O
mx	array(char)
,	O
1	int
)	O
;	O
if	O
(	O
stones	*(int)
)	O
{	O
gg_assert	O
(	O
num_stones	int
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
new_stones	int
;	O
k	int
++	O
)	O
{	O
if	O
(	O
do_add	int
)	O
{	O
stones	*(int)
[	O
*	O
num_stones	int
]	O
=	O
my_stones	*(int)
[	O
*	O
num_my_stones	*(int)
+	O
k	int
]	O
;	O
(	O
*	O
num_stones	int
)	O
++	O
;	O
}	O
}	O
}	O
(	O
*	O
num_my_stones	*(int)
)	O
+=	O
new_stones	int
;	O
if	O
(	O
libs	*(int)
)	O
{	O
gg_assert	O
(	O
num_libs	*(int)
)	O
;	O
num_my_libs	int
=	O
findlib	(int,int,*(int))->(int)
(	O
str	int
,	O
MAXLIBS	O
,	O
my_libs	array(int)
)	O
;	O
if	O
(	O
liberty_cap	int
>	O
0	int
&&	O
num_my_libs	int
>	O
liberty_cap	int
)	O
(	O
*	O
num_my_stones	*(int)
)	O
-=	O
new_stones	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
num_my_libs	int
;	O
k	int
++	O
)	O
{	O
if	O
(	O
ml	array(char)
[	O
my_libs	array(int)
[	O
k	int
]	O
]	O
)	O
continue	O
;	O
ml	array(char)
[	O
my_libs	array(int)
[	O
k	int
]	O
]	O
=	O
1	int
;	O
if	O
(	O
do_add	int
&&	O
(	O
liberty_cap	int
==	O
0	int
||	O
num_my_libs	int
<=	O
liberty_cap	int
)	O
)	O
{	O
libs	*(int)
[	O
*	O
num_libs	*(int)
]	O
=	O
my_libs	array(int)
[	O
k	int
]	O
;	O
(	O
*	O
num_libs	*(int)
)	O
++	O
;	O
if	O
(	O
*	O
num_libs	*(int)
==	O
maxlibs	int
)	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
adjs	*(int)
)	O
{	O
gg_assert	O
(	O
num_adj	*(int)
)	O
;	O
num_my_adj	int
=	O
chainlinks	(int,array(int))->(int)
(	O
str	int
,	O
my_adjs	array(int)
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
num_my_adj	int
;	O
k	int
++	O
)	O
{	O
if	O
(	O
liberty_cap	int
>	O
0	int
&&	O
countlib	(int)->(int)
(	O
my_adjs	array(int)
[	O
k	int
]	O
)	O
>	O
liberty_cap	int
)	O
continue	O
;	O
if	O
(	O
ma	array(char)
[	O
my_adjs	array(int)
[	O
k	int
]	O
]	O
)	O
continue	O
;	O
ma	array(char)
[	O
my_adjs	array(int)
[	O
k	int
]	O
]	O
=	O
1	int
;	O
if	O
(	O
do_add	int
)	O
{	O
adjs	*(int)
[	O
*	O
num_adj	*(int)
]	O
=	O
my_adjs	array(int)
[	O
k	int
]	O
;	O
(	O
*	O
num_adj	*(int)
)	O
++	O
;	O
}	O
}	O
}	O
}	O
static	O
double	O
timers	array(double)
[	O
NUMBER_OF_TIMERS	int
]	O
;	O
void	O
start_timer	(int)->(void)
(	O
int	O
n	int
)	O
{	O
gg_assert	O
(	O
n	int
>=	O
0	int
&&	O
n	int
<	O
NUMBER_OF_TIMERS	int
)	O
;	O
if	O
(	O
!	O
showtime	int
)	O
return	O
;	O
timers	array(double)
[	O
n	int
]	O
=	O
gg_cputime	()->(double)
(	O
)	O
;	O
}	O
double	O
time_report	(int,*(char),int,double)->(double)
(	O
int	O
n	int
,	O
const	O
char	O
*	O
occupation	*(char)
,	O
int	O
move	*(int)
,	O
double	O
mintime	double
)	O
{	O
double	O
t	double
;	O
double	O
dt	double
;	O
gg_assert	O
(	O
n	int
>=	O
0	int
&&	O
n	int
<	O
NUMBER_OF_TIMERS	int
)	O
;	O
if	O
(	O
!	O
showtime	int
)	O
return	O
0.0	int
;	O
t	double
=	O
gg_cputime	()->(double)
(	O
)	O
;	O
dt	double
=	O
t	double
-	O
timers	array(double)
[	O
n	int
]	O
;	O
if	O
(	O
dt	double
>	O
mintime	double
)	O
{	O
gprintf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
occupation	*(char)
)	O
;	O
if	O
(	O
move	*(int)
!=	O
NO_MOVE	O
)	O
gprintf	(*(char))->(int)
(	O
"%1m"	*(char)
,	O
move	*(int)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
": %.2f sec\n"	*(char)
,	O
dt	double
)	O
;	O
}	O
timers	array(double)
[	O
n	int
]	O
=	O
t	double
;	O
return	O
dt	double
;	O
}	O
void	O
clearstats	()->(void)
(	O
)	O
{	O
stats	struct(int,int,int,int)
.	O
nodes	int
=	O
0	int
;	O
stats	struct(int,int,int,int)
.	O
read_result_entered	int
=	O
0	int
;	O
stats	struct(int,int,int,int)
.	O
read_result_hits	int
=	O
0	int
;	O
stats	struct(int,int,int,int)
.	O
trusted_read_result_hits	int
=	O
0	int
;	O
}	O
void	O
showstats	()->(void)
(	O
)	O
{	O
gprintf	(*(char))->(int)
(	O
"Nodes:                    %d\n"	*(char)
,	O
stats	struct(int,int,int,int)
.	O
nodes	int
)	O
;	O
gprintf	(*(char))->(int)
(	O
"Read results entered:     %d\n"	*(char)
,	O
stats	struct(int,int,int,int)
.	O
read_result_entered	int
)	O
;	O
gprintf	(*(char))->(int)
(	O
"Read result hits:         %d\n"	*(char)
,	O
stats	struct(int,int,int,int)
.	O
read_result_hits	int
)	O
;	O
gprintf	(*(char))->(int)
(	O
"Trusted read result hits: %d\n"	*(char)
,	O
stats	struct(int,int,int,int)
.	O
trusted_read_result_hits	int
)	O
;	O
}	O
int	O
choose_mc_patterns	(*(char))->(int)
(	O
char	O
*	O
name	short
)	O
{	O
int	O
k	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
mc_pattern_databases	array(struct(*(char),*(int)))
[	O
k	int
]	O
.	O
name	short
;	O
k	int
++	O
)	O
{	O
if	O
(	O
!	O
name	short
||	O
strcmp	(*(char),*(char))->(int)
(	O
name	short
,	O
mc_pattern_databases	array(struct(*(char),*(int)))
[	O
k	int
]	O
.	O
name	short
)	O
==	O
0	int
)	O
{	O
mc_init_patterns	(*(int))->(void)
(	O
mc_pattern_databases	array(struct(*(char),*(int)))
[	O
k	int
]	O
.	O
values	array(float)
)	O
;	O
return	O
1	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
void	O
list_mc_patterns	()->(void)
(	O
void	O
)	O
{	O
int	O
k	int
;	O
printf	(*(char))->(int)
(	O
"Available builtin Monte Carlo local patterns:\n\n"	*(char)
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
mc_pattern_databases	array(struct(*(char),*(int)))
[	O
k	int
]	O
.	O
name	short
;	O
k	int
++	O
)	O
{	O
if	O
(	O
k	int
==	O
0	int
)	O
printf	(*(char))->(int)
(	O
"* %s (default)\n"	*(char)
,	O
mc_pattern_databases	array(struct(*(char),*(int)))
[	O
k	int
]	O
.	O
name	short
)	O
;	O
else	O
printf	(*(char))->(int)
(	O
"* %s\n"	*(char)
,	O
mc_pattern_databases	array(struct(*(char),*(int)))
[	O
k	int
]	O
.	O
name	short
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"\nUse \"--mc-patterns name\" to choose one of these.\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"Use \"--mc-load-patterns filename\" to directly load a pattern database.\n"	*(char)
)	O
;	O
}	O
