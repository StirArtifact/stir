static	O
unsigned	O
int	O
check_invariants	(*(struct(struct(*(struct`),long),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),enum(int,int),long,*(void))),*(struct(struct(*(struct`),long),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),enum(int,int),long,*(void))))->(int)
(	O
gl_list_node_t	*(struct)
node	*(struct)
,	O
gl_list_node_t	*(struct)
parent	*(struct(struct(*(struct(*`,long)),long),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),enum(int,int),long,*(void)))
)	O
{	O
unsigned	O
int	O
left_blackheight	int
=	O
(	O
node	*(struct)
->	O
left	*(struct(struct(*(struct(*`,long)),long),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),enum(int,int),long,*(void)))
!=	O
NULL	O
?	O
check_invariants	(*(struct(struct(*(struct`),long),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),enum(int,int),long,*(void))),*(struct(struct(*(struct`),long),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),enum(int,int),long,*(void))))->(int)
(	O
node	*(struct)
->	O
left	*(struct(struct(*(struct(*`,long)),long),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),enum(int,int),long,*(void)))
,	O
node	*(struct)
)	O
:	O
0	int
)	O
;	O
unsigned	O
int	O
right_blackheight	int
=	O
(	O
node	*(struct)
->	O
right	*(struct(struct(*(struct(*`,long)),long),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),enum(int,int),long,*(void)))
!=	O
NULL	O
?	O
check_invariants	(*(struct(struct(*(struct`),long),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),enum(int,int),long,*(void))),*(struct(struct(*(struct`),long),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),enum(int,int),long,*(void))))->(int)
(	O
node	*(struct)
->	O
right	*(struct(struct(*(struct(*`,long)),long),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),enum(int,int),long,*(void)))
,	O
node	*(struct)
)	O
:	O
0	int
)	O
;	O
if	O
(	O
!	O
(	O
node	*(struct)
->	O
parent	*(struct(struct(*(struct(*`,long)),long),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),enum(int,int),long,*(void)))
==	O
parent	*(struct(struct(*(struct(*`,long)),long),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),enum(int,int),long,*(void)))
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
if	O
(	O
!	O
(	O
node	*(struct)
->	O
branch_size	long
==	O
(	O
node	*(struct)
->	O
left	*(struct(struct(*(struct(*`,long)),long),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),enum(int,int),long,*(void)))
!=	O
NULL	O
?	O
node	*(struct)
->	O
left	*(struct(struct(*(struct(*`,long)),long),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),enum(int,int),long,*(void)))
->	O
branch_size	long
:	O
0	int
)	O
+	O
1	int
+	O
(	O
node	*(struct)
->	O
right	*(struct(struct(*(struct(*`,long)),long),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),enum(int,int),long,*(void)))
!=	O
NULL	O
?	O
node	*(struct)
->	O
right	*(struct(struct(*(struct(*`,long)),long),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),enum(int,int),long,*(void)))
->	O
branch_size	long
:	O
0	int
)	O
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
if	O
(	O
!	O
(	O
node	*(struct)
->	O
color	enum(int,int)
==	O
BLACK	int
||	O
node	*(struct)
->	O
color	enum(int,int)
==	O
RED	int
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
if	O
(	O
parent	*(struct(struct(*(struct(*`,long)),long),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),enum(int,int),long,*(void)))
==	O
NULL	O
&&	O
!	O
(	O
node	*(struct)
->	O
color	enum(int,int)
==	O
BLACK	int
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
if	O
(	O
!	O
(	O
left_blackheight	int
==	O
right_blackheight	int
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
return	O
left_blackheight	int
+	O
(	O
node	*(struct)
->	O
color	enum(int,int)
==	O
BLACK	int
?	O
1	int
:	O
0	int
)	O
;	O
}	O
void	O
gl_rbtreehash_list_check_invariants	(*(struct(struct(*(struct`),*((*`,*`)->(bool)),*((*`)->(long)),*((*`)->(void)),bool),*(*(struct`)),long,*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)))))->(void)
(	O
gl_list_t	*(struct)
list	*(struct)
)	O
{	O
if	O
(	O
list	*(struct)
->	O
root	*(struct(struct(*(struct(*`,long)),long),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),enum(int,int),long,*(void)))
!=	O
NULL	O
)	O
check_invariants	(*(struct(struct(*(struct`),long),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),enum(int,int),long,*(void))),*(struct(struct(*(struct`),long),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),enum(int,int),long,*(void))))->(int)
(	O
list	*(struct)
->	O
root	*(struct(struct(*(struct(*`,long)),long),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void))),enum(int,int),long,*(void)))
,	O
NULL	O
)	O
;	O
}	O
const	O
struct	O
gl_list_implementation	struct(*((*(struct(*((*`,*`,*`,*`,bool)->(*`)),*((*`,*`,*`,*`,bool,long,*`)->(*`)),*((*`)->(long)),*((*`,*`)->(*`)),*((*`,*`,*`)->(int)),*((*`,*`)->(*`)),*((*`,*`)->(*`)),*((*`,long)->(*`)),*((*`,long,*`)->(*`)),*((*`,long,long,*`)->(*`)),*((*`,long,long,*`)->(long)),*((*`,*`)->(*`)),*((*`,*`)->(*`)),*((*`,*`,*`)->(*`)),*((*`,*`,*`)->(*`)),*((*`,long,*`)->(*`)),*((*`,*`)->(bool)),*((*`,long)->(bool)),*((*`,*`)->(bool)),*((*`)->(void)),*((*`)->(struct`)),*((*`,long,long)->(struct`)),*((*`,*`,*`)->(bool)),*((*`)->(void)),*((*`,*`,*`)->(*`)),*((*`,*`,long,long,*`)->(*`)),*((*`,*`,*`)->(long)),*((*`,*`,long,long,*`)->(long)),*((*`,*`,*`)->(*`)),*((*`,*`,*`)->(bool)))),*((*(void),*(void))->(bool)),*((*(void))->(long)),*((*(void))->(void)),bool)->(*(struct))),*((*(struct(*((*`,*`,*`,*`,bool)->(*`)),*((*`,*`,*`,*`,bool,long,*`)->(*`)),*((*`)->(long)),*((*`,*`)->(*`)),*((*`,*`,*`)->(int)),*((*`,*`)->(*`)),*((*`,*`)->(*`)),*((*`,long)->(*`)),*((*`,long,*`)->(*`)),*((*`,long,long,*`)->(*`)),*((*`,long,long,*`)->(long)),*((*`,*`)->(*`)),*((*`,*`)->(*`)),*((*`,*`,*`)->(*`)),*((*`,*`,*`)->(*`)),*((*`,long,*`)->(*`)),*((*`,*`)->(bool)),*((*`,long)->(bool)),*((*`,*`)->(bool)),*((*`)->(void)),*((*`)->(struct`)),*((*`,long,long)->(struct`)),*((*`,*`,*`)->(bool)),*((*`)->(void)),*((*`,*`,*`)->(*`)),*((*`,*`,long,long,*`)->(*`)),*((*`,*`,*`)->(long)),*((*`,*`,long,long,*`)->(long)),*((*`,*`,*`)->(*`)),*((*`,*`,*`)->(bool)))),*((*(void),*(void))->(bool)),*((*(void))->(long)),*((*(void))->(void)),bool,long,*(*(void)))->(*(struct))),*((*(struct))->(long)),*((*(struct),*(struct))->(*(void))),*((*(struct),*(struct),*(void))->(int)),*((*(struct),*(struct))->(*(struct))),*((*(struct),*(struct))->(*(struct))),*((*(struct),long)->(*(void))),*((*(struct),long,*(void))->(*(struct))),*((*(struct),long,long,*(void))->(*(struct))),*((*(struct),long,long,*(void))->(long)),*((*(struct),*(void))->(*(struct))),*((*(struct),*(void))->(*(struct))),*((*(struct),*(struct),*(void))->(*(struct))),*((*(struct),*(struct),*(void))->(*(struct))),*((*(struct),long,*(void))->(*(struct))),*((*(struct),*(struct))->(bool)),*((*(struct),long)->(bool)),*((*(struct),*(void))->(bool)),*((*(struct))->(void)),*((*(struct))->(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct),long,*(void),*(void),long,long))),*((*(struct),long,long)->(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct),long,*(void),*(void),long,long))),*((*(struct(*(struct`),*(struct`),long,*(void),*(void),long,long)),*(*(void)),*(*(struct)))->(bool)),*((*(struct(*(struct`),*(struct`),long,*(void),*(void),long,long)))->(void)),*((*(struct),*((*(void),*(void))->(int)),*(void))->(*(struct))),*((*(struct),*((*(void),*(void))->(int)),long,long,*(void))->(*(struct))),*((*(struct),*((*(void),*(void))->(int)),*(void))->(long)),*((*(struct),*((*(void),*(void))->(int)),long,long,*(void))->(long)),*((*(struct),*((*(void),*(void))->(int)),*(void))->(*(struct))),*((*(struct),*((*(void),*(void))->(int)),*(void))->(bool)))
gl_rbtreehash_list_implementation	struct(*((*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*((*`,*`)->(bool)),*((*`)->(long)),*((*`)->(void)),bool)->(*(struct))),*((*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*((*`,*`)->(bool)),*((*`)->(long)),*((*`)->(void)),bool,long,*(*(void)))->(*(struct))),*((*(struct))->(long)),*((*(struct),*(struct))->(*(void))),*((*(struct),*(struct),*(void))->(int)),*((*(struct),*(struct))->(*(struct))),*((*(struct),*(struct))->(*(struct))),*((*(struct),long)->(*(void))),*((*(struct),long,*(void))->(*(struct))),*((*(struct),long,long,*(void))->(*(struct))),*((*(struct),long,long,*(void))->(long)),*((*(struct),*(void))->(*(struct))),*((*(struct),*(void))->(*(struct))),*((*(struct),*(struct),*(void))->(*(struct))),*((*(struct),*(struct),*(void))->(*(struct))),*((*(struct),long,*(void))->(*(struct))),*((*(struct),*(struct))->(bool)),*((*(struct),long)->(bool)),*((*(struct),*(void))->(bool)),*((*(struct))->(void)),*((*(struct))->(struct(*(struct`),*(struct`),long,*(void),*(void),long,long))),*((*(struct),long,long)->(struct(*(struct`),*(struct`),long,*(void),*(void),long,long))),*((*(struct(*`,*`,long,*`,*`,long,long)),*(*(void)),*(*(struct`)))->(bool)),*((*(struct(*`,*`,long,*`,*`,long,long)))->(void)),*((*(struct),*((*`,*`)->(int)),*(void))->(*(struct))),*((*(struct),*((*`,*`)->(int)),long,long,*(void))->(*(struct))),*((*(struct),*((*`,*`)->(int)),*(void))->(long)),*((*(struct),*((*`,*`)->(int)),long,long,*(void))->(long)),*((*(struct),*((*`,*`)->(int)),*(void))->(*(struct))),*((*(struct),*((*`,*`)->(int)),*(void))->(bool)))
=	O
{	O
gl_tree_nx_create_empty	(*(struct(*((*`,*`,*`,*`,bool)->(*`)),*((*`,*`,*`,*`,bool,long,*`)->(*`)),*((*`)->(long)),*((*`,*`)->(*`)),*((*`,*`,*`)->(int)),*((*`,*`)->(*`)),*((*`,*`)->(*`)),*((*`,long)->(*`)),*((*`,long,*`)->(*`)),*((*`,long,long,*`)->(*`)),*((*`,long,long,*`)->(long)),*((*`,*`)->(*`)),*((*`,*`)->(*`)),*((*`,*`,*`)->(*`)),*((*`,*`,*`)->(*`)),*((*`,long,*`)->(*`)),*((*`,*`)->(bool)),*((*`,long)->(bool)),*((*`,*`)->(bool)),*((*`)->(void)),*((*`)->(struct`)),*((*`,long,long)->(struct`)),*((*`,*`,*`)->(bool)),*((*`)->(void)),*((*`,*`,*`)->(*`)),*((*`,*`,long,long,*`)->(*`)),*((*`,*`,*`)->(long)),*((*`,*`,long,long,*`)->(long)),*((*`,*`,*`)->(*`)),*((*`,*`,*`)->(bool)))),*((*(void),*(void))->(bool)),*((*(void))->(long)),*((*(void))->(void)),bool)->(*(struct(struct(*(struct`),*((*`,*`)->(bool)),*((*`)->(long)),*((*`)->(void)),bool),*(*(struct`)),long,*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)))))
,	O
gl_tree_nx_create	(*(struct(*((*`,*`,*`,*`,bool)->(*`)),*((*`,*`,*`,*`,bool,long,*`)->(*`)),*((*`)->(long)),*((*`,*`)->(*`)),*((*`,*`,*`)->(int)),*((*`,*`)->(*`)),*((*`,*`)->(*`)),*((*`,long)->(*`)),*((*`,long,*`)->(*`)),*((*`,long,long,*`)->(*`)),*((*`,long,long,*`)->(long)),*((*`,*`)->(*`)),*((*`,*`)->(*`)),*((*`,*`,*`)->(*`)),*((*`,*`,*`)->(*`)),*((*`,long,*`)->(*`)),*((*`,*`)->(bool)),*((*`,long)->(bool)),*((*`,*`)->(bool)),*((*`)->(void)),*((*`)->(struct`)),*((*`,long,long)->(struct`)),*((*`,*`,*`)->(bool)),*((*`)->(void)),*((*`,*`,*`)->(*`)),*((*`,*`,long,long,*`)->(*`)),*((*`,*`,*`)->(long)),*((*`,*`,long,long,*`)->(long)),*((*`,*`,*`)->(*`)),*((*`,*`,*`)->(bool)))),*((*(void),*(void))->(bool)),*((*(void))->(long)),*((*(void))->(void)),bool,long,*(*(void)))->(*(struct(struct(*(struct`),*((*`,*`)->(bool)),*((*`)->(long)),*((*`)->(void)),bool),*(*(struct`)),long,*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)))))
,	O
gl_tree_size	(*(struct(struct(*(struct`),*((*`,*`)->(bool)),*((*`)->(long)),*((*`)->(void)),bool),*(*(struct`)),long,*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)))))->(long)
,	O
gl_tree_node_value	(*(struct(struct(*(struct`),*((*`,*`)->(bool)),*((*`)->(long)),*((*`)->(void)),bool),*(*(struct`)),long,*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)))),*(struct(struct(*(struct`),long),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),enum(int,int),long,*(void))))->(*(void))
,	O
gl_tree_node_nx_set_value	(*(struct(struct(*(struct`),*((*`,*`)->(bool)),*((*`)->(long)),*((*`)->(void)),bool),*(*(struct`)),long,*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)))),*(struct(struct(*(struct`),long),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),enum(int,int),long,*(void))),*(void))->(int)
,	O
gl_tree_next_node	(*(struct(struct(*(struct`),*((*`,*`)->(bool)),*((*`)->(long)),*((*`)->(void)),bool),*(*(struct`)),long,*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)))),*(struct(struct(*(struct`),long),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),enum(int,int),long,*(void))))->(*(struct(struct(*(struct`),long),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),enum(int,int),long,*(void))))
,	O
gl_tree_previous_node	(*(struct(struct(*(struct`),*((*`,*`)->(bool)),*((*`)->(long)),*((*`)->(void)),bool),*(*(struct`)),long,*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)))),*(struct(struct(*(struct`),long),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),enum(int,int),long,*(void))))->(*(struct(struct(*(struct`),long),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),enum(int,int),long,*(void))))
,	O
gl_tree_get_at	(*(struct(struct(*(struct`),*((*`,*`)->(bool)),*((*`)->(long)),*((*`)->(void)),bool),*(*(struct`)),long,*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)))),long)->(*(void))
,	O
gl_tree_nx_set_at	(*(struct(struct(*(struct`),*((*`,*`)->(bool)),*((*`)->(long)),*((*`)->(void)),bool),*(*(struct`)),long,*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)))),long,*(void))->(*(struct(struct(*(struct`),long),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),enum(int,int),long,*(void))))
,	O
gl_tree_search_from_to	(*(struct(struct(*(struct`),*((*`,*`)->(bool)),*((*`)->(long)),*((*`)->(void)),bool),*(*(struct`)),long,*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)))),long,long,*(void))->(*(struct(struct(*(struct`),long),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),enum(int,int),long,*(void))))
,	O
gl_tree_indexof_from_to	(*(struct(struct(*(struct`),*((*`,*`)->(bool)),*((*`)->(long)),*((*`)->(void)),bool),*(*(struct`)),long,*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)))),long,long,*(void))->(long)
,	O
gl_tree_nx_add_first	(*(struct(struct(*(struct`),*((*`,*`)->(bool)),*((*`)->(long)),*((*`)->(void)),bool),*(*(struct`)),long,*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)))),*(void))->(*(struct(struct(*(struct`),long),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),enum(int,int),long,*(void))))
,	O
gl_tree_nx_add_last	(*(struct(struct(*(struct`),*((*`,*`)->(bool)),*((*`)->(long)),*((*`)->(void)),bool),*(*(struct`)),long,*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)))),*(void))->(*(struct(struct(*(struct`),long),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),enum(int,int),long,*(void))))
,	O
gl_tree_nx_add_before	(*(struct(struct(*(struct`),*((*`,*`)->(bool)),*((*`)->(long)),*((*`)->(void)),bool),*(*(struct`)),long,*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)))),*(struct(struct(*(struct`),long),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),enum(int,int),long,*(void))),*(void))->(*(struct(struct(*(struct`),long),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),enum(int,int),long,*(void))))
,	O
gl_tree_nx_add_after	(*(struct(struct(*(struct`),*((*`,*`)->(bool)),*((*`)->(long)),*((*`)->(void)),bool),*(*(struct`)),long,*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)))),*(struct(struct(*(struct`),long),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),enum(int,int),long,*(void))),*(void))->(*(struct(struct(*(struct`),long),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),enum(int,int),long,*(void))))
,	O
gl_tree_nx_add_at	(*(struct(struct(*(struct`),*((*`,*`)->(bool)),*((*`)->(long)),*((*`)->(void)),bool),*(*(struct`)),long,*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)))),long,*(void))->(*(struct(struct(*(struct`),long),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),enum(int,int),long,*(void))))
,	O
gl_tree_remove_node	(*(struct(struct(*(struct`),*((*`,*`)->(bool)),*((*`)->(long)),*((*`)->(void)),bool),*(*(struct`)),long,*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)))),*(struct(struct(*(struct`),long),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),enum(int,int),long,*(void))))->(bool)
,	O
gl_tree_remove_at	(*(struct(struct(*(struct`),*((*`,*`)->(bool)),*((*`)->(long)),*((*`)->(void)),bool),*(*(struct`)),long,*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)))),long)->(bool)
,	O
gl_tree_remove	(*(struct(struct(*(struct`),*((*`,*`)->(bool)),*((*`)->(long)),*((*`)->(void)),bool),*(*(struct`)),long,*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)))),*(void))->(bool)
,	O
gl_tree_list_free	(*(struct(struct(*(struct`),*((*`,*`)->(bool)),*((*`)->(long)),*((*`)->(void)),bool),*(*(struct`)),long,*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)))))->(void)
,	O
gl_tree_iterator	(*(struct(struct(*(struct`),*((*`,*`)->(bool)),*((*`)->(long)),*((*`)->(void)),bool),*(*(struct`)),long,*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)))))->(struct(*(struct(*((*`,*`,*`,*`,bool)->(*`)),*((*`,*`,*`,*`,bool,long,*`)->(*`)),*((*`)->(long)),*((*`,*`)->(*`)),*((*`,*`,*`)->(int)),*((*`,*`)->(*`)),*((*`,*`)->(*`)),*((*`,long)->(*`)),*((*`,long,*`)->(*`)),*((*`,long,long,*`)->(*`)),*((*`,long,long,*`)->(long)),*((*`,*`)->(*`)),*((*`,*`)->(*`)),*((*`,*`,*`)->(*`)),*((*`,*`,*`)->(*`)),*((*`,long,*`)->(*`)),*((*`,*`)->(bool)),*((*`,long)->(bool)),*((*`,*`)->(bool)),*((*`)->(void)),*((*`)->(struct`)),*((*`,long,long)->(struct`)),*((*`,*`,*`)->(bool)),*((*`)->(void)),*((*`,*`,*`)->(*`)),*((*`,*`,long,long,*`)->(*`)),*((*`,*`,*`)->(long)),*((*`,*`,long,long,*`)->(long)),*((*`,*`,*`)->(*`)),*((*`,*`,*`)->(bool)))),*(struct(struct(*`,*`,*`,*`,bool),*(*`),long,*(struct`))),long,*(void),*(void),long,long))
,	O
gl_tree_iterator_from_to	(*(struct(struct(*(struct`),*((*`,*`)->(bool)),*((*`)->(long)),*((*`)->(void)),bool),*(*(struct`)),long,*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)))),long,long)->(struct(*(struct(*((*`,*`,*`,*`,bool)->(*`)),*((*`,*`,*`,*`,bool,long,*`)->(*`)),*((*`)->(long)),*((*`,*`)->(*`)),*((*`,*`,*`)->(int)),*((*`,*`)->(*`)),*((*`,*`)->(*`)),*((*`,long)->(*`)),*((*`,long,*`)->(*`)),*((*`,long,long,*`)->(*`)),*((*`,long,long,*`)->(long)),*((*`,*`)->(*`)),*((*`,*`)->(*`)),*((*`,*`,*`)->(*`)),*((*`,*`,*`)->(*`)),*((*`,long,*`)->(*`)),*((*`,*`)->(bool)),*((*`,long)->(bool)),*((*`,*`)->(bool)),*((*`)->(void)),*((*`)->(struct`)),*((*`,long,long)->(struct`)),*((*`,*`,*`)->(bool)),*((*`)->(void)),*((*`,*`,*`)->(*`)),*((*`,*`,long,long,*`)->(*`)),*((*`,*`,*`)->(long)),*((*`,*`,long,long,*`)->(long)),*((*`,*`,*`)->(*`)),*((*`,*`,*`)->(bool)))),*(struct(struct(*`,*`,*`,*`,bool),*(*`),long,*(struct`))),long,*(void),*(void),long,long))
,	O
gl_tree_iterator_next	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(struct`,*`,long,*`)),long,*(void),*(void),long,long)),*(*(void)),*(*(struct(struct(*`,long),*(struct`),*(struct`),*(struct`),enum(int,int),long,*(void)))))->(bool)
,	O
gl_tree_iterator_free	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(struct`,*`,long,*`)),long,*(void),*(void),long,long)))->(void)
,	O
gl_tree_sortedlist_search	(*(struct(struct(*(struct`),*((*`,*`)->(bool)),*((*`)->(long)),*((*`)->(void)),bool),*(*(struct`)),long,*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)))),*((*(void),*(void))->(int)),*(void))->(*(struct(struct(*(struct`),long),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),enum(int,int),long,*(void))))
,	O
gl_tree_sortedlist_search_from_to	(*(struct(struct(*(struct`),*((*`,*`)->(bool)),*((*`)->(long)),*((*`)->(void)),bool),*(*(struct`)),long,*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)))),*((*(void),*(void))->(int)),long,long,*(void))->(*(struct(struct(*(struct`),long),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),enum(int,int),long,*(void))))
,	O
gl_tree_sortedlist_indexof	(*(struct(struct(*(struct`),*((*`,*`)->(bool)),*((*`)->(long)),*((*`)->(void)),bool),*(*(struct`)),long,*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)))),*((*(void),*(void))->(int)),*(void))->(long)
,	O
gl_tree_sortedlist_indexof_from_to	(*(struct(struct(*(struct`),*((*`,*`)->(bool)),*((*`)->(long)),*((*`)->(void)),bool),*(*(struct`)),long,*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)))),*((*(void),*(void))->(int)),long,long,*(void))->(long)
,	O
gl_tree_sortedlist_nx_add	(*(struct(struct(*(struct`),*((*`,*`)->(bool)),*((*`)->(long)),*((*`)->(void)),bool),*(*(struct`)),long,*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)))),*((*(void),*(void))->(int)),*(void))->(*(struct(struct(*(struct`),long),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)),enum(int,int),long,*(void))))
,	O
gl_tree_sortedlist_remove	(*(struct(struct(*(struct`),*((*`,*`)->(bool)),*((*`)->(long)),*((*`)->(void)),bool),*(*(struct`)),long,*(struct(struct`,*`,*`,*`,enum(int,int),long,*`)))),*((*(void),*(void))->(int)),*(void))->(bool)
}	O
;	O
