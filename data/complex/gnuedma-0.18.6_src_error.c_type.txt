ESint32	long
EDMAPROC	O
edma_error	()->(long)
(	O
)	O
{	O
return	O
edma_last_error	long
;	O
}	O
static	O
jmp_buf	array(struct(array(int),int,struct(array(long))))
*	O
*	O
edma_cntx	*(*(array(struct(array(int),int,struct(array(long))))))
=	O
NULL	O
;	O
ESint32	long
EDMAPROC	O
edma_exception_try	(*(array(struct(array(int),int,struct(array(long))))))->(long)
(	O
jmp_buf	array(struct(array(int),int,struct(array(long))))
*	O
env	*(array(struct(array(int),int,struct(array(long)))))
)	O
{	O
edma_in_try_block	long
++	O
;	O
if	O
(	O
edma_cntx	*(*(array(struct(array(int),int,struct(array(long))))))
==	O
NULL	O
)	O
{	O
if	O
(	O
(	O
edma_cntx	*(*(array(struct(array(int),int,struct(array(long))))))
=	O
(	O
jmp_buf	array(struct(array(int),int,struct(array(long))))
*	O
*	O
)	O
edma_palloc	(long)->(long)
(	O
sizeof	O
(	O
jmp_buf	array(struct(array(int),int,struct(array(long))))
*	O
)	O
*	O
edma_in_try_block	long
)	O
)	O
==	O
0	int
)	O
{	O
edma_printf	(*(char))->(long)
(	O
"[edma_exception_try] Can't alloc context "	*(char)
"exception table"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
(	O
edma_cntx	*(*(array(struct(array(int),int,struct(array(long))))))
=	O
(	O
jmp_buf	array(struct(array(int),int,struct(array(long))))
*	O
*	O
)	O
edma_prealloc	(long,long)->(long)
(	O
(	O
HMEM	long
)	O
edma_cntx	*(*(array(struct(array(int),int,struct(array(long))))))
,	O
sizeof	O
(	O
jmp_buf	array(struct(array(int),int,struct(array(long))))
*	O
)	O
*	O
edma_in_try_block	long
)	O
)	O
==	O
0	int
)	O
{	O
edma_printf	(*(char))->(long)
(	O
"[edma_exception_try] Can't realloc context "	*(char)
"exception table"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
edma_cntx	*(*(array(struct(array(int),int,struct(array(long))))))
[	O
edma_in_try_block	long
-	O
1	int
]	O
=	O
env	*(array(struct(array(int),int,struct(array(long)))))
;	O
return	O
0	int
;	O
}	O
ESint32	long
EDMAPROC	O
edma_exception_throw	(long)->(long)
(	O
OBJID	long
val	long
)	O
{	O
if	O
(	O
edma_in_try_block	long
)	O
{	O
_edma_stack_execution_del_obj	(long)->(long)
(	O
val	long
)	O
;	O
longjmp	(array(struct(array(int),int,struct(array(long)))),int)->(void)
(	O
*	O
edma_cntx	*(*(array(struct(array(int),int,struct(array(long))))))
[	O
edma_in_try_block	long
-	O
1	int
]	O
,	O
val	long
+	O
1	int
)	O
;	O
}	O
else	O
{	O
edma_met3	(long,*(char))->(long)
(	O
val	long
,	O
"brief"	*(char)
)	O
;	O
edma_free_obj	(long)->(long)
(	O
val	long
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
ESint32	long
EDMAPROC	O
edma_exception_clean	(long)->(long)
(	O
OBJID	long
id	long
)	O
{	O
if	O
(	O
edma_in_try_block	long
)	O
{	O
edma_in_try_block	long
--	O
;	O
}	O
return	O
0	int
;	O
}	O
ESint32	long
EDMAPROC	O
_edma_system_exception	(*(char))->(long)
(	O
EPChar	*(char)
fmt	*(char)
,	O
...	O
)	O
{	O
EChar	char
msg	array(char)
[	O
1024	int
]	O
;	O
OBJID	long
eex	long
;	O
va_list	*(char)
p	*(char)
;	O
va_start	O
(	O
p	*(char)
,	O
fmt	*(char)
)	O
;	O
vsprintf	(*(char),*(char),*(char))->(int)
(	O
msg	array(char)
,	O
fmt	*(char)
,	O
p	*(char)
)	O
;	O
eex	long
=	O
edma_new_obj	(*(char))->(long)
(	O
"EDMA_EXCEPTION"	*(char)
)	O
;	O
edma_met3	(long,*(char))->(long)
(	O
eex	long
,	O
"set"	*(char)
,	O
1	int
,	O
msg	array(char)
)	O
;	O
edma_met3	(long,*(char))->(long)
(	O
eex	long
,	O
"throw"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
ESint32	long
EDMAPROC	O
_edma_system_exception_clean	()->(long)
(	O
)	O
{	O
edma_in_try_block	long
=	O
0	int
;	O
free	(*(void))->(void)
(	O
edma_cntx	*(*(array(struct(array(int),int,struct(array(long))))))
)	O
;	O
edma_cntx	*(*(array(struct(array(int),int,struct(array(long))))))
=	O
0	int
;	O
return	O
0	int
;	O
}	O
