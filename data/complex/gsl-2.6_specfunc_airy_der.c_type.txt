static	O
double	O
aif_data	array(double)
[	O
8	int
]	O
=	O
{	O
0.10527461226531408809	int
,	O
0.01183613628152997844	int
,	O
0.00012328104173225664	int
,	O
0.00000062261225638140	int
,	O
0.00000000185298887844	int
,	O
0.00000000000363328873	int
,	O
0.00000000000000504622	int
,	O
0.00000000000000000522	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
aif_cs	struct(*(double),int,double,double,int)
=	O
{	O
aif_data	array(double)
,	O
7	int
,	O
-	O
1	int
,	O
1	int
,	O
7	int
}	O
;	O
static	O
double	O
aig_data	array(double)
[	O
9	int
]	O
=	O
{	O
0.021233878150918666852	int
,	O
0.086315930335214406752	int
,	O
0.001797594720383231358	int
,	O
0.000014265499875550693	int
,	O
0.000000059437995283683	int
,	O
0.000000000152403366479	int
,	O
0.000000000000264587660	int
,	O
0.000000000000000331562	int
,	O
0.000000000000000000314	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
aig_cs	struct(*(double),int,double,double,int)
=	O
{	O
aig_data	array(double)
,	O
8	int
,	O
-	O
1	int
,	O
1	int
,	O
8	int
}	O
;	O
static	O
double	O
aip2_data	array(double)
[	O
15	int
]	O
=	O
{	O
0.0065457691989713757	int
,	O
0.0023833724120774592	int
,	O
-	O
0.0000430700770220586	int
,	O
0.0000015629125858629	int
,	O
-	O
0.0000000815417186163	int
,	O
0.0000000054103738057	int
,	O
-	O
0.0000000004284130883	int
,	O
0.0000000000389497963	int
,	O
-	O
0.0000000000039623161	int
,	O
0.0000000000004428184	int
,	O
-	O
0.0000000000000536297	int
,	O
0.0000000000000069650	int
,	O
-	O
0.0000000000000009620	int
,	O
0.0000000000000001403	int
,	O
-	O
0.0000000000000000215	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
aip2_cs	struct(*(double),int,double,double,int)
=	O
{	O
aip2_data	array(double)
,	O
14	int
,	O
-	O
1	int
,	O
1	int
,	O
9	int
}	O
;	O
static	O
double	O
aip1_data	array(double)
[	O
25	int
]	O
=	O
{	O
0.0358865097808301538	int
,	O
0.0114668575627764899	int
,	O
-	O
0.0007592073583861400	int
,	O
0.0000869517610893841	int
,	O
-	O
0.0000128237294298592	int
,	O
0.0000022062695681038	int
,	O
-	O
0.0000004222295185921	int
,	O
0.0000000874686415726	int
,	O
-	O
0.0000000192773588418	int
,	O
0.0000000044668460054	int
,	O
-	O
0.0000000010790108052	int
,	O
0.0000000002700029447	int
,	O
-	O
0.0000000000696480108	int
,	O
0.0000000000184489907	int
,	O
-	O
0.0000000000050027817	int
,	O
0.0000000000013852243	int
,	O
-	O
0.0000000000003908218	int
,	O
0.0000000000001121536	int
,	O
-	O
0.0000000000000326862	int
,	O
0.0000000000000096619	int
,	O
-	O
0.0000000000000028935	int
,	O
0.0000000000000008770	int
,	O
-	O
0.0000000000000002688	int
,	O
0.0000000000000000832	int
,	O
-	O
0.0000000000000000260	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
aip1_cs	struct(*(double),int,double,double,int)
=	O
{	O
aip1_data	array(double)
,	O
24	int
,	O
-	O
1	int
,	O
1	int
,	O
14	int
}	O
;	O
static	O
double	O
bif_data	array(double)
[	O
8	int
]	O
=	O
{	O
0.1153536790828570243	int
,	O
0.0205007894049192875	int
,	O
0.0002135290278902876	int
,	O
0.0000010783960614677	int
,	O
0.0000000032094708833	int
,	O
0.0000000000062930407	int
,	O
0.0000000000000087403	int
,	O
0.0000000000000000090	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
bif_cs	struct(*(double),int,double,double,int)
=	O
{	O
bif_data	array(double)
,	O
7	int
,	O
-	O
1	int
,	O
1	int
,	O
7	int
}	O
;	O
static	O
double	O
big_data	array(double)
[	O
9	int
]	O
=	O
{	O
-	O
0.097196440416443537390	int
,	O
0.149503576843167066571	int
,	O
0.003113525387121326042	int
,	O
0.000024708570579821297	int
,	O
0.000000102949627731379	int
,	O
0.000000000263970373987	int
,	O
0.000000000000458279271	int
,	O
0.000000000000000574283	int
,	O
0.000000000000000000544	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
big_cs	struct(*(double),int,double,double,int)
=	O
{	O
big_data	array(double)
,	O
8	int
,	O
-	O
1	int
,	O
1	int
,	O
8	int
}	O
;	O
static	O
double	O
bif2_data	array(double)
[	O
10	int
]	O
=	O
{	O
0.323493987603522033521	int
,	O
0.086297871535563559139	int
,	O
0.002994025552655397426	int
,	O
0.000051430528364661637	int
,	O
0.000000525840250036811	int
,	O
0.000000003561751373958	int
,	O
0.000000000017146864007	int
,	O
0.000000000000061663520	int
,	O
0.000000000000000171911	int
,	O
0.000000000000000000382	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
bif2_cs	struct(*(double),int,double,double,int)
=	O
{	O
bif2_data	array(double)
,	O
9	int
,	O
-	O
1	int
,	O
1	int
,	O
9	int
}	O
;	O
static	O
double	O
big2_data	array(double)
[	O
10	int
]	O
=	O
{	O
1.6062999463621294578	int
,	O
0.7449088819876088652	int
,	O
0.0470138738610277380	int
,	O
0.0012284422062548239	int
,	O
0.0000173222412256624	int
,	O
0.0000001521901652368	int
,	O
0.0000000009113560249	int
,	O
0.0000000000039547918	int
,	O
0.0000000000000130017	int
,	O
0.0000000000000000335	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
big2_cs	struct(*(double),int,double,double,int)
=	O
{	O
big2_data	array(double)
,	O
9	int
,	O
-	O
1	int
,	O
1	int
,	O
9	int
}	O
;	O
static	O
double	O
bip2_data	array(double)
[	O
29	int
]	O
=	O
{	O
-	O
0.13269705443526630495	int
,	O
-	O
0.00568443626045977481	int
,	O
-	O
0.00015643601119611610	int
,	O
-	O
0.00001136737203679562	int
,	O
-	O
0.00000143464350991284	int
,	O
-	O
0.00000018098531185164	int
,	O
0.00000000926177343611	int
,	O
0.00000001710005490721	int
,	O
0.00000000476698163504	int
,	O
-	O
0.00000000035195022023	int
,	O
-	O
0.00000000058890614316	int
,	O
-	O
0.00000000006678499608	int
,	O
0.00000000006395565102	int
,	O
0.00000000001554529427	int
,	O
-	O
0.00000000000792397000	int
,	O
-	O
0.00000000000258326243	int
,	O
0.00000000000121655048	int
,	O
0.00000000000038707207	int
,	O
-	O
0.00000000000022487045	int
,	O
-	O
0.00000000000004953477	int
,	O
0.00000000000004563782	int
,	O
0.00000000000000332998	int
,	O
-	O
0.00000000000000921750	int
,	O
0.00000000000000094157	int
,	O
0.00000000000000167154	int
,	O
-	O
0.00000000000000055134	int
,	O
-	O
0.00000000000000022369	int
,	O
0.00000000000000017487	int
,	O
0.00000000000000000207	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
bip2_cs	struct(*(double),int,double,double,int)
=	O
{	O
bip2_data	array(double)
,	O
28	int
,	O
-	O
1	int
,	O
1	int
,	O
14	int
}	O
;	O
static	O
double	O
bip1_data	array(double)
[	O
24	int
]	O
=	O
{	O
-	O
0.1729187351079553719	int
,	O
-	O
0.0149358492984694364	int
,	O
-	O
0.0005471104951678566	int
,	O
0.0001537966292958408	int
,	O
0.0000154353476192179	int
,	O
-	O
0.0000065434113851906	int
,	O
0.0000003728082407879	int
,	O
0.0000002072078388189	int
,	O
-	O
0.0000000658173336470	int
,	O
0.0000000074926746354	int
,	O
0.0000000011101336884	int
,	O
-	O
0.0000000007265140553	int
,	O
0.0000000001782723560	int
,	O
-	O
0.0000000000217346352	int
,	O
-	O
0.0000000000020302035	int
,	O
0.0000000000019311827	int
,	O
-	O
0.0000000000006044953	int
,	O
0.0000000000001209450	int
,	O
-	O
0.0000000000000125109	int
,	O
-	O
0.0000000000000019917	int
,	O
0.0000000000000015154	int
,	O
-	O
0.0000000000000004977	int
,	O
0.0000000000000001155	int
,	O
-	O
0.0000000000000000186	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
bip1_cs	struct(*(double),int,double,double,int)
=	O
{	O
bip1_data	array(double)
,	O
23	int
,	O
-	O
1	int
,	O
1	int
,	O
13	int
}	O
;	O
static	O
double	O
an22_data	array(double)
[	O
33	int
]	O
=	O
{	O
0.0537418629629794329	int
,	O
-	O
0.0126661435859883193	int
,	O
-	O
0.0011924334106593007	int
,	O
-	O
0.0002032327627275655	int
,	O
-	O
0.0000446468963075164	int
,	O
-	O
0.0000113359036053123	int
,	O
-	O
0.0000031641352378546	int
,	O
-	O
0.0000009446708886149	int
,	O
-	O
0.0000002966562236472	int
,	O
-	O
0.0000000969118892024	int
,	O
-	O
0.0000000326822538653	int
,	O
-	O
0.0000000113144618964	int
,	O
-	O
0.0000000040042691002	int
,	O
-	O
0.0000000014440333684	int
,	O
-	O
0.0000000005292853746	int
,	O
-	O
0.0000000001967763374	int
,	O
-	O
0.0000000000740800096	int
,	O
-	O
0.0000000000282016314	int
,	O
-	O
0.0000000000108440066	int
,	O
-	O
0.0000000000042074801	int
,	O
-	O
0.0000000000016459150	int
,	O
-	O
0.0000000000006486827	int
,	O
-	O
0.0000000000002574095	int
,	O
-	O
0.0000000000001027889	int
,	O
-	O
0.0000000000000412846	int
,	O
-	O
0.0000000000000166711	int
,	O
-	O
0.0000000000000067657	int
,	O
-	O
0.0000000000000027585	int
,	O
-	O
0.0000000000000011296	int
,	O
-	O
0.0000000000000004645	int
,	O
-	O
0.0000000000000001917	int
,	O
-	O
0.0000000000000000794	int
,	O
-	O
0.0000000000000000330	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
an22_cs	struct(*(double),int,double,double,int)
=	O
{	O
an22_data	array(double)
,	O
32	int
,	O
-	O
1	int
,	O
1	int
,	O
18	int
}	O
;	O
static	O
double	O
an21_data	array(double)
[	O
24	int
]	O
=	O
{	O
0.0198313155263169394	int
,	O
-	O
0.0029376249067087533	int
,	O
-	O
0.0001136260695958196	int
,	O
-	O
0.0000100554451087156	int
,	O
-	O
0.0000013048787116563	int
,	O
-	O
0.0000002123881993151	int
,	O
-	O
0.0000000402270833384	int
,	O
-	O
0.0000000084996745953	int
,	O
-	O
0.0000000019514839426	int
,	O
-	O
0.0000000004783865344	int
,	O
-	O
0.0000000001236733992	int
,	O
-	O
0.0000000000334137486	int
,	O
-	O
0.0000000000093702824	int
,	O
-	O
0.0000000000027130128	int
,	O
-	O
0.0000000000008075954	int
,	O
-	O
0.0000000000002463214	int
,	O
-	O
0.0000000000000767656	int
,	O
-	O
0.0000000000000243883	int
,	O
-	O
0.0000000000000078831	int
,	O
-	O
0.0000000000000025882	int
,	O
-	O
0.0000000000000008619	int
,	O
-	O
0.0000000000000002908	int
,	O
-	O
0.0000000000000000993	int
,	O
-	O
0.0000000000000000343	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
an21_cs	struct(*(double),int,double,double,int)
=	O
{	O
an21_data	array(double)
,	O
23	int
,	O
-	O
1	int
,	O
1	int
,	O
12	int
}	O
;	O
static	O
double	O
an20_data	array(double)
[	O
16	int
]	O
=	O
{	O
0.0126732217145738027	int
,	O
-	O
0.0005212847072615621	int
,	O
-	O
0.0000052672111140370	int
,	O
-	O
0.0000001628202185026	int
,	O
-	O
0.0000000090991442687	int
,	O
-	O
0.0000000007438647126	int
,	O
-	O
0.0000000000795494752	int
,	O
-	O
0.0000000000104050944	int
,	O
-	O
0.0000000000015932426	int
,	O
-	O
0.0000000000002770648	int
,	O
-	O
0.0000000000000535343	int
,	O
-	O
0.0000000000000113062	int
,	O
-	O
0.0000000000000025772	int
,	O
-	O
0.0000000000000006278	int
,	O
-	O
0.0000000000000001621	int
,	O
-	O
0.0000000000000000441	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
an20_cs	struct(*(double),int,double,double,int)
=	O
{	O
an20_data	array(double)
,	O
15	int
,	O
-	O
1	int
,	O
1	int
,	O
8	int
}	O
;	O
static	O
double	O
aph2_data	array(double)
[	O
32	int
]	O
=	O
{	O
-	O
0.2057088719781465107	int
,	O
0.0422196961357771922	int
,	O
0.0020482560511207275	int
,	O
0.0002607800735165006	int
,	O
0.0000474824268004729	int
,	O
0.0000105102756431612	int
,	O
0.0000026353534014668	int
,	O
0.0000007208824863499	int
,	O
0.0000002103236664473	int
,	O
0.0000000644975634555	int
,	O
0.0000000205802377264	int
,	O
0.0000000067836273921	int
,	O
0.0000000022974015284	int
,	O
0.0000000007961306765	int
,	O
0.0000000002813860610	int
,	O
0.0000000001011749057	int
,	O
0.0000000000369306738	int
,	O
0.0000000000136615066	int
,	O
0.0000000000051142751	int
,	O
0.0000000000019351689	int
,	O
0.0000000000007393607	int
,	O
0.0000000000002849792	int
,	O
0.0000000000001107281	int
,	O
0.0000000000000433412	int
,	O
0.0000000000000170801	int
,	O
0.0000000000000067733	int
,	O
0.0000000000000027017	int
,	O
0.0000000000000010835	int
,	O
0.0000000000000004367	int
,	O
0.0000000000000001769	int
,	O
0.0000000000000000719	int
,	O
0.0000000000000000294	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
aph2_cs	struct(*(double),int,double,double,int)
=	O
{	O
aph2_data	array(double)
,	O
31	int
,	O
-	O
1	int
,	O
1	int
,	O
16	int
}	O
;	O
static	O
double	O
aph1_data	array(double)
[	O
22	int
]	O
=	O
{	O
-	O
0.1024172908077571694	int
,	O
0.0071697275146591248	int
,	O
0.0001209959363122329	int
,	O
0.0000073361512841220	int
,	O
0.0000007535382954272	int
,	O
0.0000001041478171741	int
,	O
0.0000000174358728519	int
,	O
0.0000000033399795033	int
,	O
0.0000000007073075174	int
,	O
0.0000000001619187515	int
,	O
0.0000000000394539982	int
,	O
0.0000000000101192282	int
,	O
0.0000000000027092778	int
,	O
0.0000000000007523806	int
,	O
0.0000000000002156369	int
,	O
0.0000000000000635283	int
,	O
0.0000000000000191757	int
,	O
0.0000000000000059143	int
,	O
0.0000000000000018597	int
,	O
0.0000000000000005950	int
,	O
0.0000000000000001934	int
,	O
0.0000000000000000638	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
aph1_cs	struct(*(double),int,double,double,int)
=	O
{	O
aph1_data	array(double)
,	O
21	int
,	O
-	O
1	int
,	O
1	int
,	O
10	int
}	O
;	O
static	O
double	O
aph0_data	array(double)
[	O
15	int
]	O
=	O
{	O
-	O
0.0855849241130933257	int
,	O
0.0011214378867065261	int
,	O
0.0000042721029353664	int
,	O
0.0000000817607381483	int
,	O
0.0000000033907645000	int
,	O
0.0000000002253264423	int
,	O
0.0000000000206284209	int
,	O
0.0000000000023858763	int
,	O
0.0000000000003301618	int
,	O
0.0000000000000527010	int
,	O
0.0000000000000094555	int
,	O
0.0000000000000018709	int
,	O
0.0000000000000004024	int
,	O
0.0000000000000000930	int
,	O
0.0000000000000000229	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
aph0_cs	struct(*(double),int,double,double,int)
=	O
{	O
aph0_data	array(double)
,	O
14	int
,	O
-	O
1	int
,	O
1	int
,	O
7	int
}	O
;	O
static	O
int	O
airy_deriv_mod_phase	(double,int,*(struct(double,double)),*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
gsl_mode_t	int
mode	int
,	O
gsl_sf_result	struct(double,double)
*	O
ampl	*(struct(double,double))
,	O
gsl_sf_result	struct(double,double)
*	O
phi	*(struct(double,double))
)	O
{	O
const	O
double	O
pi34	double
=	O
2.356194490192344928847	int
;	O
gsl_sf_result	struct(double,double)
result_a	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
result_p	struct(double,double)
;	O
double	O
a	double
,	O
p	double
;	O
double	O
sqx	double
;	O
if	O
(	O
x	double
<=	O
-	O
4.0	int
)	O
{	O
double	O
z	double
=	O
128.0	int
/	O
(	O
x	double
*	O
x	double
*	O
x	double
)	O
+	O
1.0	int
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
an20_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
mode	int
,	O
&	O
result_a	struct(double,double)
)	O
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
aph0_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
mode	int
,	O
&	O
result_p	struct(double,double)
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<=	O
-	O
2.0	int
)	O
{	O
double	O
z	double
=	O
(	O
128.0	int
/	O
(	O
x	double
*	O
x	double
*	O
x	double
)	O
+	O
9.0	int
)	O
/	O
7.0	int
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
an21_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
mode	int
,	O
&	O
result_a	struct(double,double)
)	O
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
aph1_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
mode	int
,	O
&	O
result_p	struct(double,double)
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<=	O
-	O
1.0	int
)	O
{	O
double	O
z	double
=	O
(	O
16.0	int
/	O
(	O
x	double
*	O
x	double
*	O
x	double
)	O
+	O
9.0	int
)	O
/	O
7.0	int
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
an22_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
mode	int
,	O
&	O
result_a	struct(double,double)
)	O
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
aph2_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
mode	int
,	O
&	O
result_p	struct(double,double)
)	O
;	O
}	O
else	O
{	O
ampl	*(struct(double,double))
->	O
val	double
=	O
0.0	int
;	O
ampl	*(struct(double,double))
->	O
err	double
=	O
0.0	int
;	O
phi	*(struct(double,double))
->	O
val	double
=	O
0.0	int
;	O
phi	*(struct(double,double))
->	O
err	double
=	O
0.0	int
;	O
GSL_ERROR	O
(	O
"x is greater than 1.0"	*(char)
,	O
GSL_EDOM	int
)	O
;	O
}	O
a	double
=	O
0.3125	int
+	O
result_a	struct(double,double)
.	O
val	double
;	O
p	double
=	O
-	O
0.625	int
+	O
result_p	struct(double,double)
.	O
val	double
;	O
sqx	double
=	O
sqrt	(double)->(double)
(	O
-	O
x	double
)	O
;	O
ampl	*(struct(double,double))
->	O
val	double
=	O
sqrt	(double)->(double)
(	O
a	double
*	O
sqx	double
)	O
;	O
ampl	*(struct(double,double))
->	O
err	double
=	O
fabs	(double)->(double)
(	O
ampl	*(struct(double,double))
->	O
val	double
)	O
*	O
(	O
GSL_DBL_EPSILON	int
+	O
fabs	(double)->(double)
(	O
result_a	struct(double,double)
.	O
err	double
/	O
result_a	struct(double,double)
.	O
val	double
)	O
)	O
;	O
phi	*(struct(double,double))
->	O
val	double
=	O
pi34	double
-	O
x	double
*	O
sqx	double
*	O
p	double
;	O
phi	*(struct(double,double))
->	O
err	double
=	O
fabs	(double)->(double)
(	O
phi	*(struct(double,double))
->	O
val	double
)	O
*	O
(	O
GSL_DBL_EPSILON	int
+	O
fabs	(double)->(double)
(	O
result_p	struct(double,double)
.	O
err	double
/	O
result_p	struct(double,double)
.	O
val	double
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_sf_airy_Ai_deriv_scaled_e	(double,int,*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
gsl_mode_t	int
mode	int
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
if	O
(	O
x	double
<	O
-	O
1.0	int
)	O
{	O
gsl_sf_result	struct(double,double)
a	double
;	O
gsl_sf_result	struct(double,double)
p	double
;	O
int	O
status_ap	int
=	O
airy_deriv_mod_phase	(double,int,*(struct(double,double)),*(struct(double,double)))->(int)
(	O
x	double
,	O
mode	int
,	O
&	O
a	double
,	O
&	O
p	double
)	O
;	O
double	O
c	*(double)
=	O
cos	(double)->(double)
(	O
p	double
.	O
val	double
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
a	double
.	O
val	double
*	O
c	*(double)
;	O
result	*(struct(double,double))
->	O
err	double
=	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
*	O
p	double
.	O
err	double
)	O
+	O
fabs	(double)->(double)
(	O
c	*(double)
*	O
a	double
.	O
err	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
status_ap	int
;	O
}	O
else	O
if	O
(	O
x	double
<=	O
1.0	int
)	O
{	O
const	O
double	O
x3	double
=	O
x	double
*	O
x	double
*	O
x	double
;	O
const	O
double	O
x2	double
=	O
x	double
*	O
x	double
;	O
gsl_sf_result	struct(double,double)
result_c0	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
result_c1	struct(double,double)
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
aif_cs	struct(*(double),int,double,double,int)
,	O
x3	double
,	O
mode	int
,	O
&	O
result_c0	struct(double,double)
)	O
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
aig_cs	struct(*(double),int,double,double,int)
,	O
x3	double
,	O
mode	int
,	O
&	O
result_c1	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
(	O
x2	double
*	O
(	O
0.125	int
+	O
result_c0	struct(double,double)
.	O
val	double
)	O
-	O
result_c1	struct(double,double)
.	O
val	double
)	O
-	O
0.25	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
fabs	(double)->(double)
(	O
x2	double
*	O
result_c0	struct(double,double)
.	O
val	double
)	O
+	O
result_c1	struct(double,double)
.	O
err	double
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
if	O
(	O
x	double
>	O
GSL_ROOT3_DBL_EPSILON	int
*	O
GSL_ROOT3_DBL_EPSILON	int
)	O
{	O
double	O
s	int
=	O
exp	(double)->(double)
(	O
2.0	int
*	O
x	double
*	O
sqrt	(double)->(double)
(	O
x	double
)	O
/	O
3.0	int
)	O
;	O
result	*(struct(double,double))
->	O
val	double
*=	O
s	int
;	O
result	*(struct(double,double))
->	O
err	double
*=	O
s	int
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<=	O
4.0	int
)	O
{	O
const	O
double	O
sqrtx	double
=	O
sqrt	(double)->(double)
(	O
x	double
)	O
;	O
const	O
double	O
z	double
=	O
(	O
16.0	int
/	O
(	O
x	double
*	O
sqrtx	double
)	O
-	O
9.0	int
)	O
/	O
7.0	int
;	O
const	O
double	O
s	int
=	O
sqrt	(double)->(double)
(	O
sqrtx	double
)	O
;	O
gsl_sf_result	struct(double,double)
result_c0	struct(double,double)
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
aip1_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
mode	int
,	O
&	O
result_c0	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
-	O
(	O
0.28125	int
+	O
result_c0	struct(double,double)
.	O
val	double
)	O
*	O
s	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
result_c0	struct(double,double)
.	O
err	double
*	O
s	int
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
const	O
double	O
sqrtx	double
=	O
sqrt	(double)->(double)
(	O
x	double
)	O
;	O
const	O
double	O
z	double
=	O
16.0	int
/	O
(	O
x	double
*	O
sqrtx	double
)	O
-	O
1.0	int
;	O
const	O
double	O
s	int
=	O
sqrt	(double)->(double)
(	O
sqrtx	double
)	O
;	O
gsl_sf_result	struct(double,double)
result_c0	struct(double,double)
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
aip2_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
mode	int
,	O
&	O
result_c0	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
-	O
(	O
0.28125	int
+	O
result_c0	struct(double,double)
.	O
val	double
)	O
*	O
s	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
result_c0	struct(double,double)
.	O
err	double
*	O
s	int
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_airy_Ai_deriv_e	(double,int,*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
gsl_mode_t	int
mode	int
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
if	O
(	O
x	double
<	O
-	O
1.0	int
)	O
{	O
gsl_sf_result	struct(double,double)
a	double
;	O
gsl_sf_result	struct(double,double)
p	double
;	O
int	O
status_ap	int
=	O
airy_deriv_mod_phase	(double,int,*(struct(double,double)),*(struct(double,double)))->(int)
(	O
x	double
,	O
mode	int
,	O
&	O
a	double
,	O
&	O
p	double
)	O
;	O
double	O
c	*(double)
=	O
cos	(double)->(double)
(	O
p	double
.	O
val	double
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
a	double
.	O
val	double
*	O
c	*(double)
;	O
result	*(struct(double,double))
->	O
err	double
=	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
*	O
p	double
.	O
err	double
)	O
+	O
fabs	(double)->(double)
(	O
c	*(double)
*	O
a	double
.	O
err	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
status_ap	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
1.0	int
)	O
{	O
const	O
double	O
x3	double
=	O
x	double
*	O
x	double
*	O
x	double
;	O
gsl_sf_result	struct(double,double)
result_c1	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
result_c2	struct(double,double)
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
aif_cs	struct(*(double),int,double,double,int)
,	O
x3	double
,	O
mode	int
,	O
&	O
result_c1	struct(double,double)
)	O
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
aig_cs	struct(*(double),int,double,double,int)
,	O
x3	double
,	O
mode	int
,	O
&	O
result_c2	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
(	O
x	double
*	O
x	double
*	O
(	O
0.125	int
+	O
result_c1	struct(double,double)
.	O
val	double
)	O
-	O
result_c2	struct(double,double)
.	O
val	double
)	O
-	O
0.25	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
fabs	(double)->(double)
(	O
x	double
*	O
x	double
*	O
result_c1	struct(double,double)
.	O
err	double
)	O
+	O
result_c2	struct(double,double)
.	O
err	double
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
*	O
x	double
*	O
x	double
<	O
9.0	int
/	O
4.0	int
*	O
GSL_LOG_DBL_MIN	O
*	O
GSL_LOG_DBL_MIN	O
)	O
{	O
gsl_sf_result	struct(double,double)
result_aps	struct(double,double)
;	O
const	O
double	O
arg	double
=	O
-	O
2.0	int
*	O
x	double
*	O
sqrt	(double)->(double)
(	O
x	double
)	O
/	O
3.0	int
;	O
const	O
int	O
stat_a	int
=	O
gsl_sf_airy_Ai_deriv_scaled_e	(double,int,*(struct(double,double)))->(int)
(	O
x	double
,	O
mode	int
,	O
&	O
result_aps	struct(double,double)
)	O
;	O
const	O
int	O
stat_e	int
=	O
gsl_sf_exp_mult_err_e	(double,double,double,double,*(struct(double,double)))->(int)
(	O
arg	double
,	O
1.5	int
*	O
fabs	(double)->(double)
(	O
arg	double
*	O
GSL_DBL_EPSILON	int
)	O
,	O
result_aps	struct(double,double)
.	O
val	double
,	O
result_aps	struct(double,double)
.	O
err	double
,	O
result	*(struct(double,double))
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_e	int
,	O
stat_a	int
)	O
;	O
}	O
else	O
{	O
UNDERFLOW_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
}	O
int	O
gsl_sf_airy_Bi_deriv_scaled_e	(double,int,*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
gsl_mode_t	int
mode	int
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
const	O
double	O
atr	double
=	O
8.7506905708484345	int
;	O
const	O
double	O
btr	double
=	O
-	O
2.0938363213560543	int
;	O
if	O
(	O
x	double
<	O
-	O
1.0	int
)	O
{	O
gsl_sf_result	struct(double,double)
a	double
;	O
gsl_sf_result	struct(double,double)
p	double
;	O
int	O
status_ap	int
=	O
airy_deriv_mod_phase	(double,int,*(struct(double,double)),*(struct(double,double)))->(int)
(	O
x	double
,	O
mode	int
,	O
&	O
a	double
,	O
&	O
p	double
)	O
;	O
double	O
s	int
=	O
sin	(double)->(double)
(	O
p	double
.	O
val	double
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
a	double
.	O
val	double
*	O
s	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
*	O
p	double
.	O
err	double
)	O
+	O
fabs	(double)->(double)
(	O
s	int
*	O
a	double
.	O
err	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
status_ap	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
1.0	int
)	O
{	O
const	O
double	O
x3	double
=	O
x	double
*	O
x	double
*	O
x	double
;	O
const	O
double	O
x2	double
=	O
x	double
*	O
x	double
;	O
gsl_sf_result	struct(double,double)
result_c1	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
result_c2	struct(double,double)
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
bif_cs	struct(*(double),int,double,double,int)
,	O
x3	double
,	O
mode	int
,	O
&	O
result_c1	struct(double,double)
)	O
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
big_cs	struct(*(double),int,double,double,int)
,	O
x3	double
,	O
mode	int
,	O
&	O
result_c2	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
x2	double
*	O
(	O
result_c1	struct(double,double)
.	O
val	double
+	O
0.25	int
)	O
+	O
result_c2	struct(double,double)
.	O
val	double
+	O
0.5	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
x2	double
*	O
result_c1	struct(double,double)
.	O
err	double
+	O
result_c2	struct(double,double)
.	O
err	double
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
if	O
(	O
x	double
>	O
GSL_ROOT3_DBL_EPSILON	int
*	O
GSL_ROOT3_DBL_EPSILON	int
)	O
{	O
const	O
double	O
s	int
=	O
exp	(double)->(double)
(	O
-	O
2.0	int
*	O
x	double
*	O
sqrt	(double)->(double)
(	O
x	double
)	O
/	O
3.0	int
)	O
;	O
result	*(struct(double,double))
->	O
val	double
*=	O
s	int
;	O
result	*(struct(double,double))
->	O
err	double
*=	O
s	int
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
2.0	int
)	O
{	O
const	O
double	O
z	double
=	O
(	O
2.0	int
*	O
x	double
*	O
x	double
*	O
x	double
-	O
9.0	int
)	O
/	O
7.0	int
;	O
const	O
double	O
s	int
=	O
exp	(double)->(double)
(	O
-	O
2.0	int
*	O
x	double
*	O
sqrt	(double)->(double)
(	O
x	double
)	O
/	O
3.0	int
)	O
;	O
gsl_sf_result	struct(double,double)
result_c0	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
result_c1	struct(double,double)
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
bif2_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
mode	int
,	O
&	O
result_c0	struct(double,double)
)	O
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
big2_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
mode	int
,	O
&	O
result_c1	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
s	int
*	O
(	O
x	double
*	O
x	double
*	O
(	O
0.25	int
+	O
result_c0	struct(double,double)
.	O
val	double
)	O
+	O
0.5	int
+	O
result_c1	struct(double,double)
.	O
val	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
s	int
*	O
(	O
x	double
*	O
x	double
*	O
result_c0	struct(double,double)
.	O
err	double
+	O
result_c1	struct(double,double)
.	O
err	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
4.0	int
)	O
{	O
const	O
double	O
sqrtx	double
=	O
sqrt	(double)->(double)
(	O
x	double
)	O
;	O
const	O
double	O
z	double
=	O
atr	double
/	O
(	O
x	double
*	O
sqrtx	double
)	O
+	O
btr	double
;	O
const	O
double	O
s	int
=	O
sqrt	(double)->(double)
(	O
sqrtx	double
)	O
;	O
gsl_sf_result	struct(double,double)
result_c0	struct(double,double)
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
bip1_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
mode	int
,	O
&	O
result_c0	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
s	int
*	O
(	O
0.625	int
+	O
result_c0	struct(double,double)
.	O
val	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
s	int
*	O
result_c0	struct(double,double)
.	O
err	double
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
const	O
double	O
sqrtx	double
=	O
sqrt	(double)->(double)
(	O
x	double
)	O
;	O
const	O
double	O
z	double
=	O
16.0	int
/	O
(	O
x	double
*	O
sqrtx	double
)	O
-	O
1.0	int
;	O
const	O
double	O
s	int
=	O
sqrt	(double)->(double)
(	O
sqrtx	double
)	O
;	O
gsl_sf_result	struct(double,double)
result_c0	struct(double,double)
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
bip2_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
mode	int
,	O
&	O
result_c0	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
s	int
*	O
(	O
0.625	int
+	O
result_c0	struct(double,double)
.	O
val	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
s	int
*	O
result_c0	struct(double,double)
.	O
err	double
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_airy_Bi_deriv_e	(double,int,*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
gsl_mode_t	int
mode	int
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
if	O
(	O
x	double
<	O
-	O
1.0	int
)	O
{	O
gsl_sf_result	struct(double,double)
a	double
;	O
gsl_sf_result	struct(double,double)
p	double
;	O
int	O
status_ap	int
=	O
airy_deriv_mod_phase	(double,int,*(struct(double,double)),*(struct(double,double)))->(int)
(	O
x	double
,	O
mode	int
,	O
&	O
a	double
,	O
&	O
p	double
)	O
;	O
double	O
s	int
=	O
sin	(double)->(double)
(	O
p	double
.	O
val	double
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
a	double
.	O
val	double
*	O
s	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
*	O
p	double
.	O
err	double
)	O
+	O
fabs	(double)->(double)
(	O
s	int
*	O
a	double
.	O
err	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
status_ap	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
1.0	int
)	O
{	O
const	O
double	O
x3	double
=	O
x	double
*	O
x	double
*	O
x	double
;	O
const	O
double	O
x2	double
=	O
x	double
*	O
x	double
;	O
gsl_sf_result	struct(double,double)
result_c1	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
result_c2	struct(double,double)
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
bif_cs	struct(*(double),int,double,double,int)
,	O
x3	double
,	O
mode	int
,	O
&	O
result_c1	struct(double,double)
)	O
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
big_cs	struct(*(double),int,double,double,int)
,	O
x3	double
,	O
mode	int
,	O
&	O
result_c2	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
x2	double
*	O
(	O
result_c1	struct(double,double)
.	O
val	double
+	O
0.25	int
)	O
+	O
result_c2	struct(double,double)
.	O
val	double
+	O
0.5	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
x2	double
*	O
result_c1	struct(double,double)
.	O
err	double
+	O
result_c2	struct(double,double)
.	O
err	double
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
2.0	int
)	O
{	O
const	O
double	O
z	double
=	O
(	O
2.0	int
*	O
x	double
*	O
x	double
*	O
x	double
-	O
9.0	int
)	O
/	O
7.0	int
;	O
gsl_sf_result	struct(double,double)
result_c1	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
result_c2	struct(double,double)
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
bif2_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
mode	int
,	O
&	O
result_c1	struct(double,double)
)	O
;	O
cheb_eval_mode_e	(*(struct(*(double),int,double,double,int)),double,int,*(struct(double,double)))->(int)
(	O
&	O
big2_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
mode	int
,	O
&	O
result_c2	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
x	double
*	O
x	double
*	O
(	O
result_c1	struct(double,double)
.	O
val	double
+	O
0.25	int
)	O
+	O
result_c2	struct(double,double)
.	O
val	double
+	O
0.5	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
x	double
*	O
x	double
*	O
result_c1	struct(double,double)
.	O
err	double
+	O
result_c2	struct(double,double)
.	O
err	double
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
GSL_ROOT3_DBL_MAX	int
*	O
GSL_ROOT3_DBL_MAX	int
)	O
{	O
gsl_sf_result	struct(double,double)
result_bps	struct(double,double)
;	O
const	O
double	O
arg	double
=	O
2.0	int
*	O
(	O
x	double
*	O
sqrt	(double)->(double)
(	O
x	double
)	O
/	O
3.0	int
)	O
;	O
int	O
stat_b	int
=	O
gsl_sf_airy_Bi_deriv_scaled_e	(double,int,*(struct(double,double)))->(int)
(	O
x	double
,	O
mode	int
,	O
&	O
result_bps	struct(double,double)
)	O
;	O
int	O
stat_e	int
=	O
gsl_sf_exp_mult_err_e	(double,double,double,double,*(struct(double,double)))->(int)
(	O
arg	double
,	O
1.5	int
*	O
fabs	(double)->(double)
(	O
arg	double
*	O
GSL_DBL_EPSILON	int
)	O
,	O
result_bps	struct(double,double)
.	O
val	double
,	O
result_bps	struct(double,double)
.	O
err	double
,	O
result	*(struct(double,double))
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_e	int
,	O
stat_b	int
)	O
;	O
}	O
else	O
{	O
OVERFLOW_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
}	O
double	O
gsl_sf_airy_Ai_deriv_scaled	(double,int)->(double)
(	O
const	O
double	O
x	double
,	O
gsl_mode_t	int
mode	int
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_airy_Ai_deriv_scaled_e	(double,int,*(struct(double,double)))->(int)
(	O
x	double
,	O
mode	int
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
double	O
gsl_sf_airy_Ai_deriv	(double,int)->(double)
(	O
const	O
double	O
x	double
,	O
gsl_mode_t	int
mode	int
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_airy_Ai_deriv_e	(double,int,*(struct(double,double)))->(int)
(	O
x	double
,	O
mode	int
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
double	O
gsl_sf_airy_Bi_deriv_scaled	(double,int)->(double)
(	O
const	O
double	O
x	double
,	O
gsl_mode_t	int
mode	int
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_airy_Bi_deriv_scaled_e	(double,int,*(struct(double,double)))->(int)
(	O
x	double
,	O
mode	int
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
double	O
gsl_sf_airy_Bi_deriv	(double,int)->(double)
(	O
const	O
double	O
x	double
,	O
gsl_mode_t	int
mode	int
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_airy_Bi_deriv_e	(double,int,*(struct(double,double)))->(int)
(	O
x	double
,	O
mode	int
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
