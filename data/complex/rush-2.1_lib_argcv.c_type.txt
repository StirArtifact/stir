void	O
argcv_free	(int,*(*(char)))->(void)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
if	O
(	O
argc	int
)	O
{	O
while	O
(	O
--	O
argc	int
>=	O
0	int
)	O
free	(*(void))->(void)
(	O
argv	*(*(char))
[	O
argc	int
]	O
)	O
;	O
free	(*(void))->(void)
(	O
argv	*(*(char))
)	O
;	O
}	O
}	O
char	O
*	O
argcv_string	(int,*(*(char)))->(*(char))
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
i	int
;	O
slist_t	*(struct)
slist	*(struct)
;	O
char	O
*	O
ret	*(*(char))
;	O
slist	*(struct)
=	O
slist_create	()->(*(struct))
(	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
{	O
size_t	long
len	long
;	O
int	O
quote	*(int)
;	O
if	O
(	O
i	int
)	O
slist_append	(*(struct),*(char),long)->(void)
(	O
slist	*(struct)
,	O
" "	*(char)
,	O
1	int
)	O
;	O
len	long
=	O
wordsplit_c_quoted_length	(*(char),int,*(int))->(long)
(	O
argv	*(*(char))
[	O
i	int
]	O
,	O
0	int
,	O
&	O
quote	*(int)
)	O
;	O
if	O
(	O
quote	*(int)
)	O
slist_append	(*(struct),*(char),long)->(void)
(	O
slist	*(struct)
,	O
"\""	*(char)
,	O
1	int
)	O
;	O
wordsplit_c_quote_copy	(*(char),*(char),int)->(void)
(	O
slist_alloc	(*(struct),long)->(*(char))
(	O
slist	*(struct)
,	O
len	long
)	O
,	O
argv	*(*(char))
[	O
i	int
]	O
,	O
0	int
)	O
;	O
if	O
(	O
quote	*(int)
)	O
slist_append	(*(struct),*(char),long)->(void)
(	O
slist	*(struct)
,	O
"\""	*(char)
,	O
1	int
)	O
;	O
}	O
slist_reduce	(*(struct),*(*(char)),*(long))->(*(char))
(	O
slist	*(struct)
,	O
&	O
ret	*(*(char))
,	O
NULL	O
)	O
;	O
slist_free	(*(struct))->(void)
(	O
slist	*(struct)
)	O
;	O
return	O
ret	*(*(char))
;	O
}	O
