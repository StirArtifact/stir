struct	O
dirent	struct(long,long,short,char,array(char))
*	O
*	O
eps	*(*(struct(long,long,short,char,array(char))))
;	O
int	O
epscount	int
;	O
static	O
int	O
one	(*(struct(long,long,short,char,array(char))))->(int)
(	O
const	O
struct	O
dirent	struct(long,long,short,char,array(char))
*	O
unused	*(struct(long,long,short,char,array(char)))
)	O
{	O
return	O
1	int
;	O
}	O
char	O
*	O
getCwd	()->(*(char))
(	O
)	O
{	O
if	O
(	O
cwd	*(char)
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
cwd	*(char)
)	O
;	O
cwd	*(char)
=	O
getcwd	(*(char),long)->(*(char))
(	O
NULL	O
,	O
0	int
)	O
;	O
return	O
cwd	*(char)
;	O
}	O
int	O
scanDir	(*(char),*(*(*(char))),*(*(*(char))),*(int),*(int))->(int)
(	O
char	O
*	O
dir	*(char)
,	O
char	O
*	O
*	O
*	O
dirs	*(*(*(char)))
,	O
char	O
*	O
*	O
*	O
files	*(*(*(char)))
,	O
int	O
*	O
totalDirs	*(int)
,	O
int	O
*	O
totalFiles	*(int)
)	O
{	O
int	O
dcount	int
=	O
0	int
;	O
int	O
fcount	int
=	O
0	int
;	O
int	O
n	int
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
char	O
*	O
ldirs	array(*(char))
[	O
MAXDIRS	int
]	O
;	O
char	O
*	O
lfiles	array(*(char))
[	O
MAXFILES	int
]	O
;	O
char	O
*	O
oldcwd	*(char)
=	O
getcwd	(*(char),long)->(*(char))
(	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
eps	*(*(struct(long,long,short,char,array(char))))
!=	O
NULL	O
)	O
{	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
epscount	int
;	O
n	int
++	O
)	O
free	(*(void))->(void)
(	O
eps	*(*(struct(long,long,short,char,array(char))))
[	O
n	int
]	O
)	O
;	O
free	(*(void))->(void)
(	O
eps	*(*(struct(long,long,short,char,array(char))))
)	O
;	O
eps	*(*(struct(long,long,short,char,array(char))))
=	O
NULL	O
;	O
}	O
int	O
x	int
=	O
chdir	(*(char))->(int)
(	O
dir	*(char)
)	O
;	O
if	O
(	O
x	int
==	O
-	O
1	int
)	O
DIR_RETURN_ERROR	O
(	O
)	O
;	O
if	O
(	O
!	O
getCwd	()->(*(char))
(	O
)	O
)	O
DIR_RETURN_ERROR	O
(	O
)	O
;	O
x	int
=	O
lstat	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
dir	*(char)
,	O
&	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
;	O
if	O
(	O
x	int
==	O
-	O
1	int
)	O
DIR_RETURN_ERROR	O
(	O
)	O
;	O
if	O
(	O
S_ISDIR	O
(	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
)	O
{	O
n	int
=	O
scandir	(*(char),*(*(*(struct(long,long,short,char,array(char))))),*((*(struct(long,long,short,char,array(char))))->(int)),*((*(*(struct`)),*(*(struct`)))->(int)))->(int)
(	O
dir	*(char)
,	O
&	O
eps	*(*(struct(long,long,short,char,array(char))))
,	O
one	(*(struct(long,long,short,char,array(char))))->(int)
,	O
alphasort	(*(*(struct(long,long,short,char,array(char)))),*(*(struct(long,long,short,char,array(char)))))->(int)
)	O
;	O
if	O
(	O
n	int
>=	O
0	int
)	O
{	O
int	O
cnt	int
;	O
for	O
(	O
cnt	int
=	O
0	int
;	O
cnt	int
<	O
n	int
;	O
++	O
cnt	int
)	O
{	O
x	int
=	O
lstat	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
eps	*(*(struct(long,long,short,char,array(char))))
[	O
cnt	int
]	O
->	O
d_name	array(char)
,	O
&	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
;	O
if	O
(	O
x	int
==	O
-	O
1	int
)	O
DIR_RETURN_ERROR	O
(	O
)	O
;	O
if	O
(	O
S_ISDIR	O
(	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
eps	*(*(struct(long,long,short,char,array(char))))
[	O
cnt	int
]	O
->	O
d_name	array(char)
,	O
"."	*(char)
)	O
==	O
0	int
)	O
continue	O
;	O
ldirs	array(*(char))
[	O
dcount	int
++	O
]	O
=	O
eps	*(*(struct(long,long,short,char,array(char))))
[	O
cnt	int
]	O
->	O
d_name	array(char)
;	O
}	O
else	O
{	O
lfiles	array(*(char))
[	O
fcount	int
++	O
]	O
=	O
eps	*(*(struct(long,long,short,char,array(char))))
[	O
cnt	int
]	O
->	O
d_name	array(char)
;	O
}	O
}	O
}	O
free	(*(void))->(void)
(	O
oldcwd	*(char)
)	O
;	O
*	O
totalDirs	*(int)
=	O
dcount	int
;	O
*	O
totalFiles	*(int)
=	O
fcount	int
;	O
*	O
dirs	*(*(*(char)))
=	O
(	O
char	O
*	O
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
char	O
*	O
*	O
)	O
*	O
dcount	int
)	O
;	O
if	O
(	O
!	O
*	O
dirs	*(*(*(char)))
)	O
DIR_RETURN_ERROR	O
(	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
*	O
dirs	*(*(*(char)))
,	O
ldirs	array(*(char))
,	O
sizeof	O
(	O
char	O
*	O
*	O
)	O
*	O
dcount	int
)	O
;	O
*	O
files	*(*(*(char)))
=	O
(	O
char	O
*	O
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
char	O
*	O
*	O
)	O
*	O
fcount	int
)	O
;	O
if	O
(	O
!	O
*	O
files	*(*(*(char)))
)	O
DIR_RETURN_ERROR	O
(	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
*	O
files	*(*(*(char)))
,	O
lfiles	array(*(char))
,	O
sizeof	O
(	O
char	O
*	O
*	O
)	O
*	O
fcount	int
)	O
;	O
return	O
1	int
;	O
}	O
else	O
{	O
char	O
*	O
tmp	*(char)
=	O
(	O
char	O
*	O
)	O
malloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
dir	*(char)
)	O
+	O
21	int
)	O
;	O
if	O
(	O
!	O
tmp	*(char)
)	O
{	O
msgBox	(*(char),int,enum(int,int,int))->(int)
(	O
"Insufficient memory"	*(char)
,	O
OK	int
,	O
ERROR	int
)	O
;	O
return	O
0	int
;	O
}	O
sprintf	(*(char),*(char))->(int)
(	O
tmp	*(char)
,	O
"Error opening dir:\n%s"	*(char)
,	O
dir	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
tmp	*(char)
,	O
"\0"	*(char)
)	O
;	O
msgBox	(*(char),int,enum(int,int,int))->(int)
(	O
tmp	*(char)
,	O
OK	int
,	O
ERROR	int
)	O
;	O
free	(*(void))->(void)
(	O
tmp	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
oldcwd	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
}	O
