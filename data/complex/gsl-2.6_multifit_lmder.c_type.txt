typedef	O
struct	O
{	O
size_t	long
iter	long
;	O
double	O
xnorm	double
;	O
double	O
fnorm	double
;	O
double	O
delta	double
;	O
double	O
par	double
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
tau	double
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
newton	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
gradient	*((*(void),*(struct(long,long,*(double),*(struct`),int)))->(int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
df	*(double)
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
sdiag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
rptdx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
weights	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
work1	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_permutation	struct(long,*(long))
*	O
perm	*(struct(long,*(long)))
;	O
}	O
lmder_state_t	struct(long,double,double,double,double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))))
;	O
static	O
int	O
lmder_alloc	(*(void),long,long)->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
size_t	long
n	int
,	O
size_t	long
p	int
)	O
;	O
static	O
int	O
lmder_set	(*(void),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
swts	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_multifit_function_fdf	struct(*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))->(int)),long,long,*(void),long,long)
*	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f	*(double)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
static	O
int	O
lmsder_set	(*(void),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
swts	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_multifit_function_fdf	struct(*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))->(int)),long,long,*(void),long,long)
*	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f	*(double)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
static	O
int	O
set	*((*(void),*(struct(*((*`,*`,*`)->(int)),long,long,*(void))),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)))->(int))
(	O
void	O
*	O
vstate	*(void)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
swts	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_multifit_function_fdf	struct(*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))->(int)),long,long,*(void),long,long)
*	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f	*(double)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
int	O
scale	int
)	O
;	O
static	O
int	O
lmder_iterate	(*(void),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
swts	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_multifit_function_fdf	struct(*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))->(int)),long,long,*(void),long,long)
*	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f	*(double)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
static	O
void	O
lmder_free	(*(void))->(void)
(	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
int	O
iterate	*((*(void),*(struct(*((*`,*`,*`)->(int)),long,long,*(void))),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)))->(int))
(	O
void	O
*	O
vstate	*(void)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
swts	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_multifit_function_fdf	struct(*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))->(int)),long,long,*(void),long,long)
*	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f	*(double)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
int	O
scale	int
)	O
;	O
static	O
int	O
lmder_alloc	(*(void),long,long)->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
size_t	long
n	int
,	O
size_t	long
p	int
)	O
{	O
lmder_state_t	struct(long,double,double,double,double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))))
*	O
state	*(int)
=	O
(	O
lmder_state_t	struct(long,double,double,double,double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))))
*	O
)	O
vstate	*(void)
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
*	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
tau	double
,	O
*	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
*	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
*	O
newton	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
*	O
gradient	*((*(void),*(struct(long,long,*(double),*(struct`),int)))->(int))
,	O
*	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
*	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
*	O
df	*(double)
,	O
*	O
sdiag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
*	O
rptdx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
*	O
work1	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_permutation	struct(long,*(long))
*	O
perm	*(struct(long,*(long)))
;	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_alloc	(long,long)->(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
,	O
p	int
)	O
;	O
if	O
(	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"failed to allocate space for J"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_alloc	(long,long)->(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
,	O
p	int
)	O
;	O
if	O
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"failed to allocate space for r"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
tau	double
=	O
gsl_vector_calloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
GSL_MIN	O
(	O
n	int
,	O
p	int
)	O
)	O
;	O
if	O
(	O
tau	double
==	O
0	int
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for tau"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
tau	double
=	O
tau	double
;	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_calloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
)	O
;	O
if	O
(	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
tau	double
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for diag"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_calloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
tau	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for qtf"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
newton	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_calloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
)	O
;	O
if	O
(	O
newton	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
tau	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for newton"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
newton	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
newton	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gradient	*((*(void),*(struct(long,long,*(double),*(struct`),int)))->(int))
=	O
gsl_vector_calloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
)	O
;	O
if	O
(	O
gradient	*((*(void),*(struct(long,long,*(double),*(struct`),int)))->(int))
==	O
0	int
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
tau	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
newton	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for gradient"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
gradient	*((*(void),*(struct(long,long,*(double),*(struct`),int)))->(int))
=	O
gradient	*((*(void),*(struct(long,long,*(double),*(struct`),int)))->(int))
;	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_calloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
)	O
;	O
if	O
(	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
tau	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
newton	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
gradient	*((*(void),*(struct(long,long,*(double),*(struct`),int)))->(int))
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for x_trial"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_calloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
tau	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
newton	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
gradient	*((*(void),*(struct(long,long,*(double),*(struct`),int)))->(int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for f_trial"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
df	*(double)
=	O
gsl_vector_calloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
df	*(double)
==	O
0	int
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
tau	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
newton	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
gradient	*((*(void),*(struct(long,long,*(double),*(struct`),int)))->(int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for df"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
df	*(double)
=	O
df	*(double)
;	O
sdiag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_calloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
)	O
;	O
if	O
(	O
sdiag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
tau	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
newton	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
gradient	*((*(void),*(struct(long,long,*(double),*(struct`),int)))->(int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
df	*(double)
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for sdiag"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
sdiag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
sdiag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
rptdx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_calloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
rptdx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
tau	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
newton	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
gradient	*((*(void),*(struct(long,long,*(double),*(struct`),int)))->(int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
df	*(double)
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
sdiag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for rptdx"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
rptdx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
rptdx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_vector_calloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
==	O
0	int
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
tau	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
newton	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
gradient	*((*(void),*(struct(long,long,*(double),*(struct`),int)))->(int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
df	*(double)
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
sdiag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
rptdx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for w"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
work1	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_calloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
)	O
;	O
if	O
(	O
work1	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
tau	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
newton	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
gradient	*((*(void),*(struct(long,long,*(double),*(struct`),int)))->(int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
df	*(double)
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
sdiag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
rptdx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for work1"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
work1	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
work1	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
perm	*(struct(long,*(long)))
=	O
gsl_permutation_calloc	(long)->(*(struct(long,*(long))))
(	O
p	int
)	O
;	O
if	O
(	O
perm	*(struct(long,*(long)))
==	O
0	int
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
tau	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
newton	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
gradient	*((*(void),*(struct(long,long,*(double),*(struct`),int)))->(int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
df	*(double)
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
sdiag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
rptdx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
work1	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for perm"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
perm	*(struct(long,*(long)))
=	O
perm	*(struct(long,*(long)))
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
lmder_set	(*(void),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
swts	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_multifit_function_fdf	struct(*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))->(int)),long,long,*(void),long,long)
*	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f	*(double)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
int	O
status	int
=	O
set	*((*(void),*(struct(*((*`,*`,*`)->(int)),long,long,*(void))),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)))->(int))
(	O
vstate	*(void)
,	O
swts	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
x	double
,	O
f	*(double)
,	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
lmsder_set	(*(void),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
swts	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_multifit_function_fdf	struct(*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))->(int)),long,long,*(void),long,long)
*	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f	*(double)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
int	O
status	int
=	O
set	*((*(void),*(struct(*((*`,*`,*`)->(int)),long,long,*(void))),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)))->(int))
(	O
vstate	*(void)
,	O
swts	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
x	double
,	O
f	*(double)
,	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
1	int
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
lmder_iterate	(*(void),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
swts	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_multifit_function_fdf	struct(*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))->(int)),long,long,*(void),long,long)
*	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f	*(double)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
int	O
status	int
=	O
iterate	*((*(void),*(struct(*((*`,*`,*`)->(int)),long,long,*(void))),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)))->(int))
(	O
vstate	*(void)
,	O
swts	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
x	double
,	O
f	*(double)
,	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
lmsder_iterate	(*(void),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
swts	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_multifit_function_fdf	struct(*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))->(int)),long,long,*(void),long,long)
*	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f	*(double)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
int	O
status	int
=	O
iterate	*((*(void),*(struct(*((*`,*`,*`)->(int)),long,long,*(void))),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)))->(int))
(	O
vstate	*(void)
,	O
swts	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
x	double
,	O
f	*(double)
,	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
1	int
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
lmder_gradient	(*(void),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
g	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
lmder_state_t	struct(long,double,double,double,double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))))
*	O
state	*(int)
=	O
(	O
lmder_state_t	struct(long,double,double,double,double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))))
*	O
)	O
vstate	*(void)
;	O
compute_gradient	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
g	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
lmder_jac	(*(void),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
lmder_state_t	struct(long,double,double,double,double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))))
*	O
state	*(int)
=	O
(	O
lmder_state_t	struct(long,double,double,double,double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))))
*	O
)	O
vstate	*(void)
;	O
int	O
s	*(float)
=	O
gsl_matrix_memcpy	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
return	O
s	*(float)
;	O
}	O
static	O
void	O
lmder_free	(*(void))->(void)
(	O
void	O
*	O
vstate	*(void)
)	O
{	O
lmder_state_t	struct(long,double,double,double,double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))))
*	O
state	*(int)
=	O
(	O
lmder_state_t	struct(long,double,double,double,double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))))
*	O
)	O
vstate	*(void)
;	O
if	O
(	O
state	*(int)
->	O
perm	*(struct(long,*(long)))
)	O
gsl_permutation_free	(*(struct(long,*(long))))->(void)
(	O
state	*(int)
->	O
perm	*(struct(long,*(long)))
)	O
;	O
if	O
(	O
state	*(int)
->	O
work1	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
work1	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
rptdx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
rptdx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
sdiag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
sdiag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
df	*(double)
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
df	*(double)
)	O
;	O
if	O
(	O
state	*(int)
->	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
gradient	*((*(void),*(struct(long,long,*(double),*(struct`),int)))->(int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
gradient	*((*(void),*(struct(long,long,*(double),*(struct`),int)))->(int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
newton	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
newton	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
qtf	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
tau	double
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
tau	double
)	O
;	O
if	O
(	O
state	*(int)
->	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
static	O
const	O
gsl_multifit_fdfsolver_type	struct(*(char),long,*((*(void),long,long)->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(struct(*`,*`,*`,long,long,*`,long,long)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(struct(*`,*`,*`,long,long,*`,long,long)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(void))->(void)))
lmder_type	struct(*(char),long,*((*(void),long,long)->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(struct(*`,*`,*`,long,long,*`,long,long)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(struct(*`,*`,*`,long,long,*`,long,long)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(void))->(void)))
=	O
{	O
"lmder"	*(char)
,	O
sizeof	O
(	O
lmder_state_t	struct(long,double,double,double,double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))))
)	O
,	O
&	O
lmder_alloc	(*(void),long,long)->(int)
,	O
&	O
lmder_set	(*(void),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
,	O
&	O
lmder_iterate	(*(void),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
,	O
&	O
lmder_gradient	(*(void),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
,	O
&	O
lmder_jac	(*(void),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
,	O
&	O
lmder_free	(*(void))->(void)
}	O
;	O
static	O
const	O
gsl_multifit_fdfsolver_type	struct(*(char),long,*((*(void),long,long)->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(struct(*`,*`,*`,long,long,*`,long,long)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(struct(*`,*`,*`,long,long,*`,long,long)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(void))->(void)))
lmsder_type	struct(*(char),long,*((*(void),long,long)->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(struct(*`,*`,*`,long,long,*`,long,long)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(struct(*`,*`,*`,long,long,*`,long,long)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(void))->(void)))
=	O
{	O
"lmsder"	*(char)
,	O
sizeof	O
(	O
lmder_state_t	struct(long,double,double,double,double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))))
)	O
,	O
&	O
lmder_alloc	(*(void),long,long)->(int)
,	O
&	O
lmsder_set	(*(void),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
,	O
&	O
lmsder_iterate	(*(void),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
,	O
&	O
lmder_gradient	(*(void),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
,	O
&	O
lmder_jac	(*(void),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
,	O
&	O
lmder_free	(*(void))->(void)
}	O
;	O
const	O
gsl_multifit_fdfsolver_type	struct(*(char),long,*((*(void),long,long)->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(struct(*`,*`,*`,long,long,*`,long,long)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(struct(*`,*`,*`,long,long,*`,long,long)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(void))->(void)))
*	O
gsl_multifit_fdfsolver_lmder	*(struct(*(char),long,*((*(void),long,long)->(int)),*((*(void),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(void),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(void),*(struct`))->(int)),*((*(void),*(struct`))->(int)),*((*(void))->(void))))
=	O
&	O
lmder_type	struct(*(char),long,*((*(void),long,long)->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(struct(*`,*`,*`,long,long,*`,long,long)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(struct(*`,*`,*`,long,long,*`,long,long)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(void))->(void)))
;	O
const	O
gsl_multifit_fdfsolver_type	struct(*(char),long,*((*(void),long,long)->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(struct(*`,*`,*`,long,long,*`,long,long)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(struct(*`,*`,*`,long,long,*`,long,long)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(void))->(void)))
*	O
gsl_multifit_fdfsolver_lmsder	*(struct(*(char),long,*((*(void),long,long)->(int)),*((*(void),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(void),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(void),*(struct`))->(int)),*((*(void),*(struct`))->(int)),*((*(void))->(void))))
=	O
&	O
lmsder_type	struct(*(char),long,*((*(void),long,long)->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(struct(*`,*`,*`,long,long,*`,long,long)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(struct(*`,*`,*`,long,long,*`,long,long)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(void))->(void)))
;	O
