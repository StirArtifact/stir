typedef	O
struct	O
{	O
TEXT	O
space	O
;	O
TEXT	O
word	O
;	O
int	O
invisible_pending_word	O
;	O
int	O
space_counter	O
;	O
int	O
word_counter	O
;	O
int	O
end_sentence	O
;	O
int	O
max	int
;	O
int	O
indent_length	O
;	O
int	O
indent_length_next	O
;	O
int	O
counter	O
;	O
int	O
lines_counter	O
;	O
int	O
end_line_count	O
;	O
wint_t	int
last_letter	O
;	O
int	O
protect_spaces	O
;	O
int	O
ignore_columns	O
;	O
int	O
keep_end_lines	O
;	O
int	O
french_spacing	O
;	O
int	O
double_width_no_break	O
;	O
int	O
unfilled	O
;	O
int	O
no_final_newline	O
;	O
int	O
add_final_space	O
;	O
int	O
in_use	O
;	O
}	O
PARAGRAPH	O
;	O
static	O
PARAGRAPH	O
state	*(int)
;	O
int	O
xspara_init	O
(	O
int	O
unused	O
,	O
char	O
*	O
unused2	O
)	O
{	O
char	O
*	O
utf8_locale	O
=	O
0	int
;	O
int	O
len	long
;	O
char	O
*	O
cur	O
;	O
char	O
*	O
dot	O
;	O
dTHX	O
;	O
switch_to_global_locale	O
(	O
)	O
;	O
if	O
(	O
setlocale	(int,*(char))->(*(char))
(	O
LC_CTYPE	O
,	O
"en_US.UTF-8"	*(char)
)	O
||	O
setlocale	(int,*(char))->(*(char))
(	O
LC_CTYPE	O
,	O
"en_US.utf8"	*(char)
)	O
)	O
goto	O
success	O
;	O
cur	O
=	O
setlocale	(int,*(char))->(*(char))
(	O
LC_CTYPE	O
,	O
0	int
)	O
;	O
if	O
(	O
!	O
cur	O
)	O
goto	O
failure	O
;	O
len	long
=	O
strlen	(*(char))->(long)
(	O
cur	O
)	O
;	O
if	O
(	O
len	long
>=	O
6	int
&&	O
!	O
memcmp	(*(void),*(void),long)->(int)
(	O
".UTF-8"	*(char)
,	O
cur	O
+	O
len	long
-	O
6	int
,	O
6	int
)	O
||	O
len	long
>=	O
5	int
&&	O
!	O
memcmp	(*(void),*(void),long)->(int)
(	O
".utf8"	*(char)
,	O
cur	O
+	O
len	long
-	O
5	int
,	O
5	int
)	O
||	O
len	long
>=	O
6	int
&&	O
!	O
memcmp	(*(void),*(void),long)->(int)
(	O
".utf-8"	*(char)
,	O
cur	O
+	O
len	long
-	O
6	int
,	O
6	int
)	O
||	O
len	long
>=	O
5	int
&&	O
!	O
memcmp	(*(void),*(void),long)->(int)
(	O
".UTF8"	*(char)
,	O
cur	O
+	O
len	long
-	O
5	int
,	O
5	int
)	O
)	O
{	O
setlocale	(int,*(char))->(*(char))
(	O
LC_CTYPE	O
,	O
""	*(char)
)	O
;	O
goto	O
success	O
;	O
}	O
dot	O
=	O
strchr	(*(char),int)->(*(char))
(	O
cur	O
,	O
'.'	O
)	O
;	O
if	O
(	O
!	O
dot	O
)	O
dot	O
=	O
cur	O
+	O
len	long
;	O
utf8_locale	O
=	O
malloc	(long)->(*(void))
(	O
len	long
+	O
6	int
+	O
1	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
utf8_locale	O
,	O
cur	O
,	O
dot	O
-	O
cur	O
)	O
;	O
dot	O
=	O
utf8_locale	O
+	O
(	O
dot	O
-	O
cur	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
dot	O
,	O
".UTF-8"	*(char)
,	O
7	int
)	O
;	O
if	O
(	O
setlocale	(int,*(char))->(*(char))
(	O
LC_CTYPE	O
,	O
utf8_locale	O
)	O
)	O
goto	O
success	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
dot	O
,	O
".utf8"	*(char)
,	O
6	int
)	O
;	O
if	O
(	O
setlocale	(int,*(char))->(*(char))
(	O
LC_CTYPE	O
,	O
utf8_locale	O
)	O
)	O
goto	O
success	O
;	O
{	O
FILE	struct
*	O
p	O
;	O
char	O
*	O
line	O
=	O
0	int
;	O
size_t	long
n	O
=	O
0	int
;	O
ssize_t	long
ret	O
;	O
p	O
=	O
popen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
"locale -a"	*(char)
,	O
"r"	*(char)
)	O
;	O
if	O
(	O
!	O
p	O
)	O
goto	O
failure	O
;	O
while	O
(	O
1	int
)	O
{	O
ret	O
=	O
getline	(*(*(char)),*(long),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
&	O
line	O
,	O
&	O
n	O
,	O
p	O
)	O
;	O
if	O
(	O
ret	O
==	O
(	O
ssize_t	long
)	O
-	O
1	int
)	O
{	O
free	(*(void))->(void)
(	O
line	O
)	O
;	O
pclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
p	O
)	O
;	O
goto	O
failure	O
;	O
}	O
if	O
(	O
strstr	(*(char),*(char))->(*(char))
(	O
line	O
,	O
"UTF-8"	*(char)
)	O
||	O
strstr	(*(char),*(char))->(*(char))
(	O
line	O
,	O
"utf8"	*(char)
)	O
)	O
{	O
line	O
[	O
ret	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
setlocale	(int,*(char))->(*(char))
(	O
LC_CTYPE	O
,	O
line	O
)	O
)	O
{	O
free	(*(void))->(void)
(	O
line	O
)	O
;	O
pclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
p	O
)	O
;	O
goto	O
success	O
;	O
}	O
}	O
}	O
}	O
if	O
(	O
1	int
)	O
{	O
failure	O
:	O
return	O
0	int
;	O
}	O
else	O
{	O
success	O
:	O
;	O
free	(*(void))->(void)
(	O
utf8_locale	O
)	O
;	O
sync_locale	O
(	O
)	O
;	O
return	O
1	int
;	O
}	O
}	O
static	O
PARAGRAPH	O
*	O
state_array	O
;	O
static	O
int	O
state_array_size	O
;	O
static	O
int	O
current_state	O
;	O
static	O
void	O
xspara__switch_state	O
(	O
int	O
id	O
)	O
{	O
if	O
(	O
current_state	O
==	O
id	O
)	O
return	O
;	O
if	O
(	O
current_state	O
!=	O
-	O
1	int
)	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
&	O
state_array	O
[	O
current_state	O
]	O
,	O
&	O
state	*(int)
,	O
sizeof	O
(	O
PARAGRAPH	O
)	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
&	O
state	*(int)
,	O
&	O
state_array	O
[	O
id	O
]	O
,	O
sizeof	O
(	O
PARAGRAPH	O
)	O
)	O
;	O
current_state	O
=	O
id	O
;	O
}	O
int	O
xspara_new	O
(	O
HV	struct
*	O
conf	O
)	O
{	O
int	O
i	O
;	O
dTHX	O
;	O
TEXT	O
saved_space	O
,	O
saved_word	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
state_array_size	O
;	O
i	O
++	O
)	O
{	O
if	O
(	O
!	O
state_array	O
[	O
i	O
]	O
.	O
in_use	O
)	O
break	O
;	O
}	O
if	O
(	O
i	O
==	O
state_array_size	O
)	O
{	O
state_array	O
=	O
realloc	(*(void),long)->(*(void))
(	O
state_array	O
,	O
(	O
state_array_size	O
+=	O
10	int
)	O
*	O
sizeof	O
(	O
PARAGRAPH	O
)	O
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
state_array	O
+	O
i	O
,	O
0	int
,	O
10	int
*	O
sizeof	O
(	O
PARAGRAPH	O
)	O
)	O
;	O
}	O
state_array	O
[	O
i	O
]	O
.	O
in_use	O
=	O
1	int
;	O
xspara__switch_state	O
(	O
i	O
)	O
;	O
saved_space	O
=	O
state	*(int)
.	O
space	O
;	O
saved_word	O
=	O
state	*(int)
.	O
word	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
state	*(int)
,	O
0	int
,	O
sizeof	O
(	O
state	*(int)
)	O
)	O
;	O
state	*(int)
.	O
space	O
=	O
saved_space	O
;	O
state	*(int)
.	O
word	O
=	O
saved_word	O
;	O
state	*(int)
.	O
space	O
.	O
end	long
=	O
state	*(int)
.	O
word	O
.	O
end	long
=	O
0	int
;	O
state	*(int)
.	O
in_use	O
=	O
1	int
;	O
state	*(int)
.	O
max	int
=	O
72	int
;	O
state	*(int)
.	O
indent_length_next	O
=	O
-	O
1	int
;	O
state	*(int)
.	O
end_sentence	O
=	O
-	O
2	int
;	O
state	*(int)
.	O
last_letter	O
=	O
L'\0'	O
;	O
if	O
(	O
conf	O
)	O
xspara_init_state	O
(	O
conf	O
)	O
;	O
return	O
i	O
;	O
}	O
void	O
xspara_set_state	O
(	O
SV	struct
*	O
sv	struct(*(void),int,int,union(*(char),long,long,double,*(struct(*(void),int,int,union(*(char),long,long,double,*(struct`),*(*`),*(*`),*(struct`),*(*`)))),*(*(struct(*(void),int,int,union(*`,long,long,double,*`,*`,*`,*`,*`)))),*(*(struct)),*(struct),*(*(struct))))
)	O
{	O
dTHX	O
;	O
xspara__switch_state	O
(	O
SvIV	O
(	O
sv	struct(*(void),int,int,union(*(char),long,long,double,*(struct(*(void),int,int,union(*(char),long,long,double,*(struct`),*(*`),*(*`),*(struct`),*(*`)))),*(*(struct(*(void),int,int,union(*`,long,long,double,*`,*`,*`,*`,*`)))),*(*(struct)),*(struct),*(*(struct))))
)	O
)	O
;	O
}	O
void	O
xspara_init_state	O
(	O
HV	struct
*	O
hash	O
)	O
{	O
SV	struct
*	O
*	O
val	array(int)
;	O
dTHX	O
;	O
FETCH_INT	O
(	O
"end_sentence"	*(char)
,	O
state	*(int)
.	O
end_sentence	O
)	O
;	O
FETCH_INT	O
(	O
"max"	*(char)
,	O
state	*(int)
.	O
max	int
)	O
;	O
FETCH_INT	O
(	O
"indent_length"	*(char)
,	O
state	*(int)
.	O
indent_length	O
)	O
;	O
FETCH_INT	O
(	O
"indent_length_next"	*(char)
,	O
state	*(int)
.	O
indent_length_next	O
)	O
;	O
FETCH_INT	O
(	O
"counter"	*(char)
,	O
state	*(int)
.	O
counter	O
)	O
;	O
FETCH_INT	O
(	O
"word_counter"	*(char)
,	O
state	*(int)
.	O
word_counter	O
)	O
;	O
FETCH_INT	O
(	O
"lines_counter"	*(char)
,	O
state	*(int)
.	O
lines_counter	O
)	O
;	O
FETCH_INT	O
(	O
"end_line_count"	*(char)
,	O
state	*(int)
.	O
end_line_count	O
)	O
;	O
FETCH_INT	O
(	O
"protect_spaces"	*(char)
,	O
state	*(int)
.	O
protect_spaces	O
)	O
;	O
FETCH_INT	O
(	O
"ignore_columns"	*(char)
,	O
state	*(int)
.	O
ignore_columns	O
)	O
;	O
FETCH_INT	O
(	O
"keep_end_lines"	*(char)
,	O
state	*(int)
.	O
keep_end_lines	O
)	O
;	O
FETCH_INT	O
(	O
"frenchspacing"	*(char)
,	O
state	*(int)
.	O
french_spacing	O
)	O
;	O
FETCH_INT	O
(	O
"unfilled"	*(char)
,	O
state	*(int)
.	O
unfilled	O
)	O
;	O
FETCH_INT	O
(	O
"no_final_newline"	*(char)
,	O
state	*(int)
.	O
no_final_newline	O
)	O
;	O
FETCH_INT	O
(	O
"add_final_space"	*(char)
,	O
state	*(int)
.	O
add_final_space	O
)	O
;	O
val	array(int)
=	O
FETCH	O
(	O
"word"	*(char)
)	O
;	O
if	O
(	O
val	array(int)
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Bug: setting 'word' is not supported.\n"	*(char)
)	O
;	O
abort	()->(void)
(	O
)	O
;	O
}	O
val	array(int)
=	O
FETCH	O
(	O
"space"	*(char)
)	O
;	O
if	O
(	O
val	array(int)
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Bug: setting 'space' is not supported.\n"	*(char)
)	O
;	O
abort	()->(void)
(	O
)	O
;	O
}	O
return	O
;	O
}	O
void	O
xspara_get_state	O
(	O
HV	struct
*	O
hash	O
)	O
{	O
SV	struct
*	O
val	array(int)
;	O
return	O
;	O
dTHX	O
;	O
val	array(int)
=	O
newSViv	O
(	O
state	*(int)
.	O
end_sentence	O
)	O
;	O
STORE	O
(	O
"end_sentence"	*(char)
)	O
;	O
val	array(int)
=	O
newSViv	O
(	O
state	*(int)
.	O
counter	O
)	O
;	O
STORE	O
(	O
"counter"	*(char)
)	O
;	O
val	array(int)
=	O
newSViv	O
(	O
state	*(int)
.	O
word_counter	O
)	O
;	O
STORE	O
(	O
"word_counter"	*(char)
)	O
;	O
val	array(int)
=	O
newSViv	O
(	O
state	*(int)
.	O
lines_counter	O
)	O
;	O
STORE	O
(	O
"lines_counter"	*(char)
)	O
;	O
return	O
;	O
}	O
void	O
xspara__cut_line	O
(	O
TEXT	O
*	O
result	O
)	O
{	O
if	O
(	O
!	O
state	*(int)
.	O
ignore_columns	O
)	O
{	O
xspara__end_line	O
(	O
)	O
;	O
text_append	O
(	O
result	O
,	O
"\n"	*(char)
)	O
;	O
}	O
}	O
int	O
xspara_end_line_count	O
(	O
void	O
)	O
{	O
return	O
state	*(int)
.	O
end_line_count	O
;	O
}	O
void	O
xspara__end_line	O
(	O
void	O
)	O
{	O
state	*(int)
.	O
counter	O
=	O
0	int
;	O
state	*(int)
.	O
space	O
.	O
end	long
=	O
0	int
;	O
state	*(int)
.	O
space_counter	O
=	O
0	int
;	O
if	O
(	O
state	*(int)
.	O
indent_length_next	O
!=	O
-	O
1	int
)	O
{	O
state	*(int)
.	O
indent_length	O
=	O
state	*(int)
.	O
indent_length_next	O
;	O
state	*(int)
.	O
indent_length_next	O
=	O
-	O
1	int
;	O
}	O
state	*(int)
.	O
lines_counter	O
++	O
;	O
state	*(int)
.	O
end_line_count	O
++	O
;	O
}	O
char	O
*	O
xspara_end_line	O
(	O
void	O
)	O
{	O
state	*(int)
.	O
end_line_count	O
=	O
0	int
;	O
xspara__end_line	O
(	O
)	O
;	O
return	O
"\n"	*(char)
;	O
}	O
char	O
*	O
xspara_get_pending	O
(	O
void	O
)	O
{	O
static	O
TEXT	O
t	O
;	O
text_reset	O
(	O
&	O
t	O
)	O
;	O
text_append_n	O
(	O
&	O
t	O
,	O
state	*(int)
.	O
space	O
.	O
text	O
,	O
state	*(int)
.	O
space	O
.	O
end	long
)	O
;	O
text_append_n	O
(	O
&	O
t	O
,	O
state	*(int)
.	O
word	O
.	O
text	O
,	O
state	*(int)
.	O
word	O
.	O
end	long
)	O
;	O
return	O
t	O
.	O
text	O
;	O
}	O
void	O
xspara__add_pending_word	O
(	O
TEXT	O
*	O
result	O
,	O
int	O
add_spaces	O
)	O
{	O
if	O
(	O
state	*(int)
.	O
word	O
.	O
end	long
==	O
0	int
&&	O
!	O
state	*(int)
.	O
invisible_pending_word	O
&&	O
!	O
add_spaces	O
)	O
return	O
;	O
if	O
(	O
state	*(int)
.	O
indent_length	O
>	O
state	*(int)
.	O
counter	O
)	O
{	O
int	O
i	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
state	*(int)
.	O
indent_length	O
-	O
state	*(int)
.	O
counter	O
;	O
i	O
++	O
)	O
text_append	O
(	O
result	O
,	O
" "	*(char)
)	O
;	O
state	*(int)
.	O
counter	O
=	O
state	*(int)
.	O
indent_length	O
;	O
if	O
(	O
!	O
state	*(int)
.	O
unfilled	O
)	O
state	*(int)
.	O
space	O
.	O
end	long
=	O
0	int
;	O
}	O
if	O
(	O
state	*(int)
.	O
space	O
.	O
end	long
>	O
0	int
)	O
{	O
text_append_n	O
(	O
result	O
,	O
state	*(int)
.	O
space	O
.	O
text	O
,	O
state	*(int)
.	O
space	O
.	O
end	long
)	O
;	O
state	*(int)
.	O
counter	O
+=	O
state	*(int)
.	O
space_counter	O
;	O
state	*(int)
.	O
space	O
.	O
end	long
=	O
0	int
;	O
state	*(int)
.	O
space_counter	O
=	O
0	int
;	O
}	O
if	O
(	O
state	*(int)
.	O
word	O
.	O
end	long
>	O
0	int
||	O
state	*(int)
.	O
invisible_pending_word	O
)	O
{	O
text_append_n	O
(	O
result	O
,	O
state	*(int)
.	O
word	O
.	O
text	O
,	O
state	*(int)
.	O
word	O
.	O
end	long
)	O
;	O
state	*(int)
.	O
counter	O
+=	O
state	*(int)
.	O
word_counter	O
;	O
state	*(int)
.	O
word	O
.	O
end	long
=	O
0	int
;	O
state	*(int)
.	O
word_counter	O
=	O
0	int
;	O
state	*(int)
.	O
invisible_pending_word	O
=	O
0	int
;	O
}	O
}	O
char	O
*	O
xspara_add_pending_word	O
(	O
int	O
add_spaces	O
)	O
{	O
static	O
TEXT	O
ret	O
;	O
text_reset	O
(	O
&	O
ret	O
)	O
;	O
state	*(int)
.	O
end_line_count	O
=	O
0	int
;	O
xspara__add_pending_word	O
(	O
&	O
ret	O
,	O
add_spaces	O
)	O
;	O
if	O
(	O
ret	O
.	O
text	O
)	O
return	O
ret	O
.	O
text	O
;	O
else	O
return	O
""	*(char)
;	O
}	O
char	O
*	O
xspara_end	O
(	O
void	O
)	O
{	O
static	O
TEXT	O
ret	O
;	O
text_reset	O
(	O
&	O
ret	O
)	O
;	O
state	*(int)
.	O
end_line_count	O
=	O
0	int
;	O
xspara__add_pending_word	O
(	O
&	O
ret	O
,	O
state	*(int)
.	O
add_final_space	O
)	O
;	O
if	O
(	O
!	O
state	*(int)
.	O
no_final_newline	O
&&	O
state	*(int)
.	O
counter	O
!=	O
0	int
)	O
{	O
text_append	O
(	O
&	O
ret	O
,	O
"\n"	*(char)
)	O
;	O
state	*(int)
.	O
lines_counter	O
++	O
;	O
state	*(int)
.	O
end_line_count	O
++	O
;	O
}	O
state_array	O
[	O
current_state	O
]	O
.	O
in_use	O
=	O
0	int
;	O
state	*(int)
.	O
in_use	O
=	O
0	int
;	O
if	O
(	O
ret	O
.	O
text	O
)	O
return	O
ret	O
.	O
text	O
;	O
else	O
return	O
""	*(char)
;	O
}	O
void	O
xspara__add_next	O
(	O
TEXT	O
*	O
result	O
,	O
char	O
*	O
word	O
,	O
int	O
word_len	O
,	O
int	O
transparent	O
)	O
{	O
int	O
disinhibit	O
=	O
0	int
;	O
if	O
(	O
!	O
word	O
)	O
return	O
;	O
if	O
(	O
word_len	O
>=	O
1	int
&&	O
word	O
[	O
word_len	O
-	O
1	int
]	O
==	O
'\b'	O
)	O
{	O
word	O
[	O
--	O
word_len	O
]	O
=	O
'\0'	O
;	O
disinhibit	O
=	O
1	int
;	O
}	O
if	O
(	O
state	*(int)
.	O
word	O
.	O
end	long
==	O
0	int
&&	O
!	O
state	*(int)
.	O
invisible_pending_word	O
)	O
{	O
state	*(int)
.	O
last_letter	O
=	O
L'\0'	O
;	O
if	O
(	O
state	*(int)
.	O
counter	O
!=	O
0	int
&&	O
state	*(int)
.	O
space	O
.	O
end	long
>	O
0	int
&&	O
state	*(int)
.	O
end_sentence	O
==	O
1	int
&&	O
!	O
state	*(int)
.	O
french_spacing	O
)	O
{	O
wchar_t	int
wc	O
;	O
size_t	long
char_len	O
;	O
char_len	O
=	O
mbrtowc	(*(int),*(char),long,*(struct(int,union(int,array(char)))))->(long)
(	O
&	O
wc	O
,	O
word	O
,	O
word_len	O
,	O
NULL	O
)	O
;	O
if	O
(	O
(	O
long	O
)	O
char_len	O
>	O
0	int
&&	O
!	O
iswspace	(int)->(int)
(	O
wc	O
)	O
)	O
{	O
while	O
(	O
state	*(int)
.	O
space_counter	O
<	O
2	int
)	O
{	O
text_append_n	O
(	O
&	O
state	*(int)
.	O
space	O
,	O
" "	*(char)
,	O
1	int
)	O
;	O
state	*(int)
.	O
space_counter	O
++	O
;	O
}	O
}	O
state	*(int)
.	O
end_sentence	O
=	O
-	O
2	int
;	O
}	O
}	O
text_append_n	O
(	O
&	O
state	*(int)
.	O
word	O
,	O
word	O
,	O
word_len	O
)	O
;	O
if	O
(	O
word_len	O
==	O
0	int
&&	O
word	O
)	O
state	*(int)
.	O
invisible_pending_word	O
=	O
1	int
;	O
if	O
(	O
!	O
transparent	O
)	O
{	O
if	O
(	O
disinhibit	O
)	O
state	*(int)
.	O
last_letter	O
=	O
L'a'	O
;	O
else	O
{	O
char	O
*	O
p	O
=	O
word	O
+	O
word_len	O
;	O
int	O
len	long
=	O
0	int
;	O
while	O
(	O
p	O
>	O
word	O
)	O
{	O
p	O
--	O
;	O
len	long
++	O
;	O
if	O
(	O
(	O
long	O
)	O
mbrlen	(*(char),long,*(struct(int,union(int,array(char)))))->(long)
(	O
p	O
,	O
len	long
,	O
NULL	O
)	O
>	O
0	int
)	O
{	O
wchar_t	int
wc	O
=	O
L'\0'	O
;	O
mbrtowc	(*(int),*(char),long,*(struct(int,union(int,array(char)))))->(long)
(	O
&	O
wc	O
,	O
p	O
,	O
len	long
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
wcschr	(*(int),int)->(*(int))
(	O
L".?!\"')]"	O
,	O
wc	O
)	O
)	O
{	O
state	*(int)
.	O
last_letter	O
=	O
wc	O
;	O
break	O
;	O
}	O
}	O
}	O
}	O
}	O
if	O
(	O
strchr	(*(char),int)->(*(char))
(	O
word	O
,	O
'\n'	O
)	O
)	O
{	O
xspara__add_pending_word	O
(	O
result	O
,	O
0	int
)	O
;	O
xspara__end_line	O
(	O
)	O
;	O
}	O
else	O
{	O
int	O
len	long
=	O
0	int
;	O
int	O
left	O
=	O
word_len	O
;	O
wchar_t	int
w	O
;	O
char	O
*	O
p	O
=	O
word	O
;	O
while	O
(	O
left	O
>	O
0	int
)	O
{	O
int	O
char_len	O
=	O
mbrtowc	(*(int),*(char),long,*(struct(int,union(int,array(char)))))->(long)
(	O
&	O
w	O
,	O
p	O
,	O
left	O
,	O
NULL	O
)	O
;	O
left	O
-=	O
char_len	O
;	O
p	O
+=	O
char_len	O
;	O
len	long
++	O
;	O
}	O
state	*(int)
.	O
word_counter	O
+=	O
len	long
;	O
}	O
if	O
(	O
state	*(int)
.	O
counter	O
!=	O
0	int
&&	O
state	*(int)
.	O
counter	O
+	O
state	*(int)
.	O
word_counter	O
+	O
state	*(int)
.	O
space_counter	O
>	O
state	*(int)
.	O
max	int
)	O
{	O
xspara__cut_line	O
(	O
result	O
)	O
;	O
}	O
}	O
char	O
*	O
xspara_add_next	O
(	O
char	O
*	O
text	O
,	O
int	O
text_len	O
,	O
int	O
transparent	O
)	O
{	O
static	O
TEXT	O
t	O
;	O
text_reset	O
(	O
&	O
t	O
)	O
;	O
state	*(int)
.	O
end_line_count	O
=	O
0	int
;	O
xspara__add_next	O
(	O
&	O
t	O
,	O
text	O
,	O
text_len	O
,	O
transparent	O
)	O
;	O
if	O
(	O
t	O
.	O
space	O
>	O
0	int
)	O
return	O
t	O
.	O
text	O
;	O
else	O
return	O
""	*(char)
;	O
}	O
void	O
xspara_remove_end_sentence	O
(	O
void	O
)	O
{	O
state	*(int)
.	O
end_sentence	O
=	O
0	int
;	O
}	O
void	O
xspara_add_end_sentence	O
(	O
int	O
value	*(struct(*(void),int,int,union(*(char),long,long,double,*(struct(*`,int,int,union`)),*(*(struct`)),*(*(struct`)),*(struct),*(*(struct`)))))
)	O
{	O
state	*(int)
.	O
end_sentence	O
=	O
value	*(struct(*(void),int,int,union(*(char),long,long,double,*(struct(*`,int,int,union`)),*(*(struct`)),*(*(struct`)),*(struct),*(*(struct`)))))
;	O
}	O
void	O
xspara_allow_end_sentence	O
(	O
void	O
)	O
{	O
state	*(int)
.	O
last_letter	O
=	O
L'a'	O
;	O
}	O
char	O
*	O
xspara_set_space_protection	O
(	O
int	O
protect_spaces	O
,	O
int	O
ignore_columns	O
,	O
int	O
keep_end_lines	O
,	O
int	O
french_spacing	O
,	O
int	O
double_width_no_break	O
)	O
{	O
if	O
(	O
protect_spaces	O
!=	O
-	O
1	int
)	O
state	*(int)
.	O
protect_spaces	O
=	O
protect_spaces	O
;	O
if	O
(	O
ignore_columns	O
!=	O
-	O
1	int
)	O
state	*(int)
.	O
ignore_columns	O
=	O
ignore_columns	O
;	O
if	O
(	O
keep_end_lines	O
!=	O
-	O
1	int
)	O
state	*(int)
.	O
keep_end_lines	O
=	O
keep_end_lines	O
;	O
if	O
(	O
double_width_no_break	O
!=	O
-	O
1	int
)	O
state	*(int)
.	O
double_width_no_break	O
=	O
double_width_no_break	O
;	O
if	O
(	O
state	*(int)
.	O
french_spacing	O
==	O
0	int
&&	O
french_spacing	O
!=	O
-	O
1	int
&&	O
french_spacing	O
!=	O
0	int
&&	O
state	*(int)
.	O
end_sentence	O
!=	O
-	O
2	int
&&	O
state	*(int)
.	O
end_sentence	O
!=	O
0	int
&&	O
state	*(int)
.	O
counter	O
!=	O
0	int
&&	O
state	*(int)
.	O
space	O
.	O
end	long
>	O
0	int
&&	O
state	*(int)
.	O
word	O
.	O
end	long
==	O
0	int
&&	O
!	O
state	*(int)
.	O
invisible_pending_word	O
)	O
{	O
while	O
(	O
state	*(int)
.	O
space_counter	O
<	O
2	int
)	O
{	O
text_append_n	O
(	O
&	O
state	*(int)
.	O
space	O
,	O
" "	*(char)
,	O
1	int
)	O
;	O
state	*(int)
.	O
space_counter	O
++	O
;	O
}	O
state	*(int)
.	O
end_sentence	O
=	O
-	O
2	int
;	O
}	O
if	O
(	O
french_spacing	O
!=	O
-	O
1	int
)	O
{	O
state	*(int)
.	O
french_spacing	O
=	O
french_spacing	O
;	O
}	O
if	O
(	O
protect_spaces	O
!=	O
-	O
1	int
&&	O
state	*(int)
.	O
protect_spaces	O
)	O
{	O
if	O
(	O
state	*(int)
.	O
word	O
.	O
end	long
==	O
0	int
)	O
{	O
state	*(int)
.	O
invisible_pending_word	O
=	O
1	int
;	O
}	O
}	O
return	O
""	*(char)
;	O
}	O
char	O
*	O
xspara_add_text	O
(	O
char	O
*	O
text	O
)	O
{	O
char	O
*	O
p	O
=	O
text	O
;	O
int	O
len	long
;	O
wchar_t	int
wc	O
;	O
size_t	long
char_len	O
;	O
static	O
TEXT	O
result	O
;	O
dTHX	O
;	O
text_reset	O
(	O
&	O
result	O
)	O
;	O
len	long
=	O
strlen	(*(char))->(long)
(	O
text	O
)	O
;	O
state	*(int)
.	O
end_line_count	O
=	O
0	int
;	O
while	O
(	O
len	long
>	O
0	int
)	O
{	O
char_len	O
=	O
mbrtowc	(*(int),*(char),long,*(struct(int,union(int,array(char)))))->(long)
(	O
&	O
wc	O
,	O
p	O
,	O
len	long
,	O
NULL	O
)	O
;	O
if	O
(	O
(	O
long	O
)	O
char_len	O
==	O
0	int
)	O
break	O
;	O
else	O
if	O
(	O
(	O
long	O
)	O
char_len	O
<	O
0	int
)	O
{	O
p	O
++	O
;	O
len	long
--	O
;	O
continue	O
;	O
}	O
if	O
(	O
iswspace	(int)->(int)
(	O
wc	O
)	O
&&	O
wc	O
!=	O
L'\x00a0'	O
&&	O
wc	O
!=	O
L'\x202f'	O
)	O
{	O
state	*(int)
.	O
last_letter	O
=	O
L'\0'	O
;	O
if	O
(	O
state	*(int)
.	O
protect_spaces	O
)	O
{	O
text_append_n	O
(	O
&	O
state	*(int)
.	O
word	O
,	O
p	O
,	O
char_len	O
)	O
;	O
state	*(int)
.	O
word_counter	O
++	O
;	O
if	O
(	O
strchr	(*(char),int)->(*(char))
(	O
state	*(int)
.	O
word	O
.	O
text	O
,	O
'\n'	O
)	O
)	O
{	O
char	O
*	O
ptr	O
=	O
state	*(int)
.	O
word	O
.	O
text	O
;	O
while	O
(	O
*	O
ptr	O
)	O
{	O
if	O
(	O
*	O
ptr	O
==	O
'\n'	O
)	O
*	O
ptr	O
=	O
' '	O
;	O
ptr	O
++	O
;	O
}	O
}	O
if	O
(	O
state	*(int)
.	O
counter	O
!=	O
0	int
&&	O
state	*(int)
.	O
counter	O
+	O
state	*(int)
.	O
word_counter	O
+	O
state	*(int)
.	O
space_counter	O
>	O
state	*(int)
.	O
max	int
)	O
{	O
xspara__cut_line	O
(	O
&	O
result	O
)	O
;	O
}	O
}	O
else	O
{	O
int	O
pending	O
=	O
state	*(int)
.	O
invisible_pending_word	O
;	O
xspara__add_pending_word	O
(	O
&	O
result	O
,	O
0	int
)	O
;	O
if	O
(	O
state	*(int)
.	O
counter	O
!=	O
0	int
||	O
state	*(int)
.	O
unfilled	O
||	O
pending	O
)	O
{	O
if	O
(	O
state	*(int)
.	O
end_sentence	O
==	O
1	int
&&	O
!	O
state	*(int)
.	O
french_spacing	O
&&	O
!	O
state	*(int)
.	O
unfilled	O
)	O
{	O
wchar_t	int
q_char	O
;	O
size_t	long
q_len	O
;	O
int	O
at_least_two	O
=	O
0	int
;	O
q_len	O
=	O
mbrtowc	(*(int),*(char),long,*(struct(int,union(int,array(char)))))->(long)
(	O
&	O
q_char	O
,	O
p	O
+	O
char_len	O
,	O
len	long
-	O
char_len	O
,	O
NULL	O
)	O
;	O
if	O
(	O
(	O
long	O
)	O
q_len	O
>	O
0	int
)	O
{	O
if	O
(	O
iswspace	(int)->(int)
(	O
q_char	O
)	O
)	O
at_least_two	O
=	O
1	int
;	O
}	O
if	O
(	O
state	*(int)
.	O
space_counter	O
>=	O
1	int
||	O
at_least_two	O
)	O
{	O
if	O
(	O
state	*(int)
.	O
space_counter	O
>	O
0	int
)	O
{	O
static	O
TEXT	O
new_space	O
;	O
char	O
*	O
pspace	O
;	O
int	O
pspace_left	O
;	O
int	O
len	long
;	O
int	O
i	O
;	O
text_reset	O
(	O
&	O
new_space	O
)	O
;	O
pspace	O
=	O
state	*(int)
.	O
space	O
.	O
text	O
;	O
pspace_left	O
=	O
state	*(int)
.	O
space	O
.	O
end	long
;	O
state	*(int)
.	O
space_counter	O
=	O
0	int
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
2	int
;	O
i	O
++	O
)	O
{	O
if	O
(	O
!	O
*	O
pspace	O
)	O
break	O
;	O
len	long
=	O
mbrlen	(*(char),long,*(struct(int,union(int,array(char)))))->(long)
(	O
pspace	O
,	O
pspace_left	O
,	O
NULL	O
)	O
;	O
if	O
(	O
*	O
pspace	O
==	O
'\n'	O
||	O
*	O
pspace	O
==	O
'\r'	O
)	O
text_append_n	O
(	O
&	O
new_space	O
,	O
" "	*(char)
,	O
1	int
)	O
;	O
else	O
if	O
(	O
len	long
>	O
0	int
)	O
text_append_n	O
(	O
&	O
new_space	O
,	O
pspace	O
,	O
len	long
)	O
;	O
else	O
len	long
=	O
1	int
;	O
state	*(int)
.	O
space_counter	O
++	O
;	O
pspace	O
+=	O
len	long
;	O
pspace_left	O
-=	O
len	long
;	O
}	O
state	*(int)
.	O
space	O
.	O
end	long
=	O
0	int
;	O
text_append_n	O
(	O
&	O
state	*(int)
.	O
space	O
,	O
new_space	O
.	O
text	O
,	O
new_space	O
.	O
end	long
)	O
;	O
text_destroy	O
(	O
&	O
new_space	O
)	O
;	O
}	O
while	O
(	O
state	*(int)
.	O
space_counter	O
<	O
2	int
)	O
{	O
if	O
(	O
*	O
p	O
==	O
'\n'	O
||	O
*	O
p	O
==	O
'\r'	O
)	O
text_append_n	O
(	O
&	O
state	*(int)
.	O
space	O
,	O
" "	*(char)
,	O
1	int
)	O
;	O
else	O
text_append_n	O
(	O
&	O
state	*(int)
.	O
space	O
,	O
p	O
,	O
char_len	O
)	O
;	O
state	*(int)
.	O
space_counter	O
++	O
;	O
p	O
+=	O
char_len	O
;	O
len	long
-=	O
char_len	O
;	O
char_len	O
=	O
mbrtowc	(*(int),*(char),long,*(struct(int,union(int,array(char)))))->(long)
(	O
&	O
wc	O
,	O
p	O
,	O
len	long
,	O
NULL	O
)	O
;	O
if	O
(	O
(	O
long	O
)	O
char_len	O
<=	O
0	int
||	O
!	O
iswspace	(int)->(int)
(	O
wc	O
)	O
)	O
break	O
;	O
}	O
while	O
(	O
(	O
long	O
)	O
char_len	O
>	O
0	int
&&	O
iswspace	(int)->(int)
(	O
wc	O
)	O
)	O
{	O
p	O
+=	O
char_len	O
;	O
len	long
-=	O
char_len	O
;	O
char_len	O
=	O
mbrtowc	(*(int),*(char),long,*(struct(int,union(int,array(char)))))->(long)
(	O
&	O
wc	O
,	O
p	O
,	O
len	long
,	O
NULL	O
)	O
;	O
}	O
while	O
(	O
state	*(int)
.	O
space_counter	O
<	O
2	int
)	O
{	O
text_append_n	O
(	O
&	O
state	*(int)
.	O
space	O
,	O
" "	*(char)
,	O
1	int
)	O
;	O
state	*(int)
.	O
space_counter	O
++	O
;	O
}	O
state	*(int)
.	O
end_sentence	O
=	O
-	O
2	int
;	O
continue	O
;	O
}	O
else	O
{	O
state	*(int)
.	O
space	O
.	O
end	long
=	O
0	int
;	O
state	*(int)
.	O
space_counter	O
=	O
0	int
;	O
if	O
(	O
*	O
p	O
==	O
'\n'	O
||	O
*	O
p	O
==	O
'\r'	O
)	O
text_append_n	O
(	O
&	O
state	*(int)
.	O
space	O
,	O
" "	*(char)
,	O
1	int
)	O
;	O
else	O
text_append_n	O
(	O
&	O
state	*(int)
.	O
space	O
,	O
p	O
,	O
char_len	O
)	O
;	O
state	*(int)
.	O
space_counter	O
++	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
state	*(int)
.	O
unfilled	O
||	O
state	*(int)
.	O
space_counter	O
<	O
1	int
)	O
{	O
if	O
(	O
*	O
p	O
==	O
'\n'	O
||	O
*	O
p	O
==	O
'\r'	O
)	O
{	O
if	O
(	O
!	O
state	*(int)
.	O
unfilled	O
)	O
{	O
text_append_n	O
(	O
&	O
state	*(int)
.	O
space	O
,	O
" "	*(char)
,	O
1	int
)	O
;	O
state	*(int)
.	O
space_counter	O
++	O
;	O
}	O
else	O
if	O
(	O
*	O
p	O
==	O
'\n'	O
)	O
{	O
xspara__add_pending_word	O
(	O
&	O
result	O
,	O
0	int
)	O
;	O
xspara__end_line	O
(	O
)	O
;	O
text_append	O
(	O
&	O
result	O
,	O
"\n"	*(char)
)	O
;	O
}	O
}	O
else	O
{	O
text_append_n	O
(	O
&	O
state	*(int)
.	O
space	O
,	O
p	O
,	O
char_len	O
)	O
;	O
state	*(int)
.	O
space_counter	O
++	O
;	O
}	O
}	O
}	O
}	O
}	O
if	O
(	O
state	*(int)
.	O
counter	O
+	O
state	*(int)
.	O
space_counter	O
>	O
state	*(int)
.	O
max	int
)	O
{	O
xspara__cut_line	O
(	O
&	O
result	O
)	O
;	O
}	O
if	O
(	O
!	O
state	*(int)
.	O
unfilled	O
&&	O
*	O
p	O
==	O
'\n'	O
&&	O
state	*(int)
.	O
keep_end_lines	O
)	O
{	O
xspara__end_line	O
(	O
)	O
;	O
text_append	O
(	O
&	O
result	O
,	O
"\n"	*(char)
)	O
;	O
}	O
}	O
else	O
{	O
int	O
width	O
=	O
wcwidth	(int)->(int)
(	O
wc	O
)	O
;	O
if	O
(	O
width	O
==	O
2	int
)	O
{	O
state	*(int)
.	O
last_letter	O
=	O
L'\0'	O
;	O
text_append_n	O
(	O
&	O
state	*(int)
.	O
word	O
,	O
p	O
,	O
char_len	O
)	O
;	O
state	*(int)
.	O
word_counter	O
+=	O
2	int
;	O
if	O
(	O
state	*(int)
.	O
counter	O
!=	O
0	int
&&	O
state	*(int)
.	O
counter	O
+	O
state	*(int)
.	O
word_counter	O
>	O
state	*(int)
.	O
max	int
)	O
{	O
xspara__cut_line	O
(	O
&	O
result	O
)	O
;	O
}	O
if	O
(	O
!	O
state	*(int)
.	O
protect_spaces	O
&&	O
!	O
state	*(int)
.	O
double_width_no_break	O
)	O
{	O
xspara__add_pending_word	O
(	O
&	O
result	O
,	O
0	int
)	O
;	O
state	*(int)
.	O
end_sentence	O
=	O
-	O
2	int
;	O
}	O
}	O
else	O
if	O
(	O
wc	O
==	O
L'\b'	O
)	O
{	O
xspara_allow_end_sentence	O
(	O
)	O
;	O
}	O
else	O
if	O
(	O
width	O
==	O
1	int
||	O
width	O
==	O
0	int
)	O
{	O
char	O
*	O
added_word	O
;	O
added_word	O
=	O
malloc	(long)->(*(void))
(	O
char_len	O
+	O
1	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
added_word	O
,	O
p	O
,	O
char_len	O
)	O
;	O
added_word	O
[	O
char_len	O
]	O
=	O
'\0'	O
;	O
xspara__add_next	O
(	O
&	O
result	O
,	O
added_word	O
,	O
char_len	O
,	O
0	int
)	O
;	O
free	(*(void))->(void)
(	O
added_word	O
)	O
;	O
if	O
(	O
strchr	(*(char),int)->(*(char))
(	O
".?!"	*(char)
,	O
*	O
p	O
)	O
&&	O
!	O
state	*(int)
.	O
unfilled	O
)	O
{	O
if	O
(	O
!	O
iswupper	(int)->(int)
(	O
state	*(int)
.	O
last_letter	O
)	O
)	O
{	O
if	O
(	O
state	*(int)
.	O
french_spacing	O
)	O
state	*(int)
.	O
end_sentence	O
=	O
-	O
1	int
;	O
else	O
state	*(int)
.	O
end_sentence	O
=	O
1	int
;	O
}	O
}	O
else	O
if	O
(	O
strchr	(*(char),int)->(*(char))
(	O
"\"')]"	*(char)
,	O
*	O
p	O
)	O
)	O
{	O
}	O
else	O
{	O
state	*(int)
.	O
end_sentence	O
=	O
-	O
2	int
;	O
state	*(int)
.	O
last_letter	O
=	O
wc	O
;	O
}	O
}	O
else	O
{	O
text_append_n	O
(	O
&	O
state	*(int)
.	O
word	O
,	O
p	O
,	O
char_len	O
)	O
;	O
}	O
}	O
p	O
+=	O
char_len	O
;	O
len	long
-=	O
char_len	O
;	O
}	O
if	O
(	O
result	O
.	O
space	O
>	O
0	int
)	O
return	O
result	O
.	O
text	O
;	O
else	O
return	O
""	*(char)
;	O
}	O
