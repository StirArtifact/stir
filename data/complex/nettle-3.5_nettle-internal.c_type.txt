static	O
void	O
des_set_key_wrapper	(*(void),*(char))->(void)
(	O
void	O
*	O
ctx	*(void)
,	O
const	O
uint8_t	char
*	O
key	*(char)
)	O
{	O
des_set_key	O
(	O
ctx	*(void)
,	O
key	*(char)
)	O
;	O
}	O
static	O
void	O
des3_set_key_wrapper	(*(void),*(char))->(void)
(	O
void	O
*	O
ctx	*(void)
,	O
const	O
uint8_t	char
*	O
key	*(char)
)	O
{	O
des3_set_key	O
(	O
ctx	*(void)
,	O
key	*(char)
)	O
;	O
}	O
static	O
void	O
blowfish128_set_key_wrapper	(*(void),*(char))->(void)
(	O
void	O
*	O
ctx	*(void)
,	O
const	O
uint8_t	char
*	O
key	*(char)
)	O
{	O
blowfish128_set_key	O
(	O
ctx	*(void)
,	O
key	*(char)
)	O
;	O
}	O
const	O
struct	O
nettle_cipher	struct(*(char),int,int,int,*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)))
nettle_des	struct(*(char),int,int,int,*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)))
=	O
{	O
"des"	*(char)
,	O
sizeof	O
(	O
struct	O
des_ctx	struct(array(int))
)	O
,	O
DES_BLOCK_SIZE	int
,	O
DES_KEY_SIZE	int
,	O
des_set_key_wrapper	(*(void),*(char))->(void)
,	O
des_set_key_wrapper	(*(void),*(char))->(void)
,	O
(	O
nettle_cipher_func	(*(void),long,*(char),*(char))->(void)
*	O
)	O
des_encrypt	O
,	O
(	O
nettle_cipher_func	(*(void),long,*(char),*(char))->(void)
*	O
)	O
des_decrypt	O
}	O
;	O
const	O
struct	O
nettle_cipher	struct(*(char),int,int,int,*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)))
nettle_des3	struct(*(char),int,int,int,*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)))
=	O
{	O
"des3"	*(char)
,	O
sizeof	O
(	O
struct	O
des3_ctx	struct(array(struct(array(int))))
)	O
,	O
DES3_BLOCK_SIZE	O
,	O
DES3_KEY_SIZE	int
,	O
des3_set_key_wrapper	(*(void),*(char))->(void)
,	O
des3_set_key_wrapper	(*(void),*(char))->(void)
,	O
(	O
nettle_cipher_func	(*(void),long,*(char),*(char))->(void)
*	O
)	O
des3_encrypt	O
,	O
(	O
nettle_cipher_func	(*(void),long,*(char),*(char))->(void)
*	O
)	O
des3_decrypt	O
}	O
;	O
const	O
struct	O
nettle_cipher	struct(*(char),int,int,int,*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)))
nettle_blowfish128	struct(*(char),int,int,int,*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)))
=	O
{	O
"blowfish128"	*(char)
,	O
sizeof	O
(	O
struct	O
blowfish_ctx	struct(array(array(int)),array(int))
)	O
,	O
BLOWFISH_BLOCK_SIZE	int
,	O
BLOWFISH128_KEY_SIZE	int
,	O
blowfish128_set_key_wrapper	(*(void),*(char))->(void)
,	O
blowfish128_set_key_wrapper	(*(void),*(char))->(void)
,	O
(	O
nettle_cipher_func	(*(void),long,*(char),*(char))->(void)
*	O
)	O
blowfish_encrypt	O
,	O
(	O
nettle_cipher_func	(*(void),long,*(char),*(char))->(void)
*	O
)	O
blowfish_decrypt	O
}	O
;	O
const	O
struct	O
nettle_aead	struct(*(char),int,int,int,int,int,*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),long,*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char))->(void)))
nettle_arcfour128	struct(*(char),int,int,int,int,int,*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),long,*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char))->(void)))
=	O
{	O
"arcfour128"	*(char)
,	O
sizeof	O
(	O
struct	O
arcfour_ctx	struct(array(char),char,char)
)	O
,	O
1	int
,	O
ARCFOUR128_KEY_SIZE	int
,	O
0	int
,	O
0	int
,	O
(	O
nettle_set_key_func	(*(void),*(char))->(void)
*	O
)	O
arcfour128_set_key	O
,	O
(	O
nettle_set_key_func	(*(void),*(char))->(void)
*	O
)	O
arcfour128_set_key	O
,	O
NULL	O
,	O
NULL	O
,	O
(	O
nettle_crypt_func	(*(void),long,*(char),*(char))->(void)
*	O
)	O
arcfour_crypt	O
,	O
(	O
nettle_crypt_func	(*(void),long,*(char),*(char))->(void)
*	O
)	O
arcfour_crypt	O
,	O
NULL	O
,	O
}	O
;	O
const	O
struct	O
nettle_aead	struct(*(char),int,int,int,int,int,*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),long,*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char))->(void)))
nettle_chacha	struct(*(char),int,int,int,int,int,*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),long,*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char))->(void)))
=	O
{	O
"chacha"	*(char)
,	O
sizeof	O
(	O
struct	O
chacha_ctx	struct(array(int))
)	O
,	O
CHACHA_BLOCK_SIZE	int
,	O
CHACHA_KEY_SIZE	int
,	O
CHACHA_NONCE_SIZE	int
,	O
0	int
,	O
(	O
nettle_set_key_func	(*(void),*(char))->(void)
*	O
)	O
chacha_set_key	O
,	O
(	O
nettle_set_key_func	(*(void),*(char))->(void)
*	O
)	O
chacha_set_key	O
,	O
(	O
nettle_set_key_func	(*(void),*(char))->(void)
*	O
)	O
chacha_set_nonce	O
,	O
NULL	O
,	O
(	O
nettle_crypt_func	(*(void),long,*(char),*(char))->(void)
*	O
)	O
chacha_crypt	O
,	O
(	O
nettle_crypt_func	(*(void),long,*(char),*(char))->(void)
*	O
)	O
chacha_crypt	O
,	O
NULL	O
,	O
}	O
;	O
const	O
struct	O
nettle_aead	struct(*(char),int,int,int,int,int,*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),long,*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char))->(void)))
nettle_salsa20	struct(*(char),int,int,int,int,int,*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),long,*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char))->(void)))
=	O
{	O
"salsa20"	*(char)
,	O
sizeof	O
(	O
struct	O
salsa20_ctx	struct(array(int))
)	O
,	O
SALSA20_BLOCK_SIZE	int
,	O
SALSA20_256_KEY_SIZE	int
,	O
SALSA20_NONCE_SIZE	int
,	O
0	int
,	O
(	O
nettle_set_key_func	(*(void),*(char))->(void)
*	O
)	O
salsa20_256_set_key	O
,	O
(	O
nettle_set_key_func	(*(void),*(char))->(void)
*	O
)	O
salsa20_256_set_key	O
,	O
(	O
nettle_set_key_func	(*(void),*(char))->(void)
*	O
)	O
salsa20_set_nonce	O
,	O
NULL	O
,	O
(	O
nettle_crypt_func	(*(void),long,*(char),*(char))->(void)
*	O
)	O
salsa20_crypt	O
,	O
(	O
nettle_crypt_func	(*(void),long,*(char),*(char))->(void)
*	O
)	O
salsa20_crypt	O
,	O
NULL	O
,	O
}	O
;	O
const	O
struct	O
nettle_aead	struct(*(char),int,int,int,int,int,*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),long,*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char))->(void)))
nettle_salsa20r12	struct(*(char),int,int,int,int,int,*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),long,*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char))->(void)))
=	O
{	O
"salsa20r12"	*(char)
,	O
sizeof	O
(	O
struct	O
salsa20_ctx	struct(array(int))
)	O
,	O
SALSA20_BLOCK_SIZE	int
,	O
SALSA20_256_KEY_SIZE	int
,	O
SALSA20_NONCE_SIZE	int
,	O
0	int
,	O
(	O
nettle_set_key_func	(*(void),*(char))->(void)
*	O
)	O
salsa20_256_set_key	O
,	O
(	O
nettle_set_key_func	(*(void),*(char))->(void)
*	O
)	O
salsa20_256_set_key	O
,	O
(	O
nettle_set_key_func	(*(void),*(char))->(void)
*	O
)	O
salsa20_set_nonce	O
,	O
NULL	O
,	O
(	O
nettle_crypt_func	(*(void),long,*(char),*(char))->(void)
*	O
)	O
salsa20r12_crypt	O
,	O
(	O
nettle_crypt_func	(*(void),long,*(char),*(char))->(void)
*	O
)	O
salsa20r12_crypt	O
,	O
NULL	O
,	O
}	O
;	O
