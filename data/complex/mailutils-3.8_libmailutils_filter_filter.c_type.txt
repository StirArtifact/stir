static	O
mu_list_t	*(struct)
filter_list	*(struct)
;	O
struct	O
mu_monitor	struct(*(void),*(void),int,int)
filter_monitor	struct(*(void),*(void),int,int)
=	O
MU_MONITOR_INITIALIZER	O
;	O
static	O
int	O
filter_name_cmp	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
item	*(void)
,	O
const	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
_mu_filter_record	struct(*(char),*((*(*(void)),int,int,*(*(char)))->(int)),*((*(void),enum(int,int,int,int,int),*(struct(*(char),long,*(char),long,int,int)))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct(*(char),long,*(char),long,int,int)))->(enum(int,int,int,int,int))))
const	O
*	O
rec	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
=	O
item	*(void)
;	O
char	O
const	O
*	O
name	*(char)
=	O
data	*(void)
;	O
return	O
mu_c_strcasecmp	(*(char),*(char))->(int)
(	O
rec	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
->	O
name	*(char)
,	O
name	*(char)
)	O
;	O
}	O
int	O
mu_filter_get_list	(*(*(struct)))->(int)
(	O
mu_list_t	*(struct)
*	O
plist	*(*(struct))
)	O
{	O
if	O
(	O
plist	*(*(struct))
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
mu_monitor_wrlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
&	O
filter_monitor	struct(*(void),*(void),int,int)
)	O
;	O
if	O
(	O
filter_list	*(struct)
==	O
NULL	O
)	O
{	O
int	O
status	int
=	O
mu_list_create	(*(*(struct)))->(int)
(	O
&	O
filter_list	*(struct)
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
mu_list_set_comparator	(*(struct),*((*(void),*(void))->(int)))->(*((*(void),*(void))->(int)))
(	O
filter_list	*(struct)
,	O
filter_name_cmp	(*(void),*(void))->(int)
)	O
;	O
mu_list_append	(*(struct),*(void))->(int)
(	O
filter_list	*(struct)
,	O
mu_base64_filter	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
)	O
;	O
mu_list_append	(*(struct),*(void))->(int)
(	O
filter_list	*(struct)
,	O
mu_qp_filter	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
)	O
;	O
mu_list_append	(*(struct),*(void))->(int)
(	O
filter_list	*(struct)
,	O
mu_binary_filter	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
)	O
;	O
mu_list_append	(*(struct),*(void))->(int)
(	O
filter_list	*(struct)
,	O
mu_bit8_filter	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
)	O
;	O
mu_list_append	(*(struct),*(void))->(int)
(	O
filter_list	*(struct)
,	O
mu_bit7_filter	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
)	O
;	O
mu_list_append	(*(struct),*(void))->(int)
(	O
filter_list	*(struct)
,	O
mu_rfc822_filter	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
)	O
;	O
mu_list_append	(*(struct),*(void))->(int)
(	O
filter_list	*(struct)
,	O
mu_crlf_filter	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
)	O
;	O
mu_list_append	(*(struct),*(void))->(int)
(	O
filter_list	*(struct)
,	O
mu_crlfdot_filter	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
)	O
;	O
mu_list_append	(*(struct),*(void))->(int)
(	O
filter_list	*(struct)
,	O
mu_dot_filter	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
)	O
;	O
mu_list_append	(*(struct),*(void))->(int)
(	O
filter_list	*(struct)
,	O
mu_rfc_2047_Q_filter	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
)	O
;	O
mu_list_append	(*(struct),*(void))->(int)
(	O
filter_list	*(struct)
,	O
mu_rfc_2047_B_filter	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
)	O
;	O
mu_list_append	(*(struct),*(void))->(int)
(	O
filter_list	*(struct)
,	O
mu_from_filter	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
)	O
;	O
mu_list_append	(*(struct),*(void))->(int)
(	O
filter_list	*(struct)
,	O
mu_inline_comment_filter	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
)	O
;	O
mu_list_append	(*(struct),*(void))->(int)
(	O
filter_list	*(struct)
,	O
mu_header_filter	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
)	O
;	O
mu_list_append	(*(struct),*(void))->(int)
(	O
filter_list	*(struct)
,	O
mu_linecon_filter	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
)	O
;	O
mu_list_append	(*(struct),*(void))->(int)
(	O
filter_list	*(struct)
,	O
mu_linelen_filter	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
)	O
;	O
mu_list_append	(*(struct),*(void))->(int)
(	O
filter_list	*(struct)
,	O
mu_iconv_filter	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
)	O
;	O
mu_list_append	(*(struct),*(void))->(int)
(	O
filter_list	*(struct)
,	O
mu_c_escape_filter	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
)	O
;	O
mu_list_append	(*(struct),*(void))->(int)
(	O
filter_list	*(struct)
,	O
mu_htmlent_filter	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
)	O
;	O
mu_list_append	(*(struct),*(void))->(int)
(	O
filter_list	*(struct)
,	O
mu_xml_filter	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
)	O
;	O
mu_list_append	(*(struct),*(void))->(int)
(	O
filter_list	*(struct)
,	O
mu_percent_filter	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
)	O
;	O
mu_list_append	(*(struct),*(void))->(int)
(	O
filter_list	*(struct)
,	O
mu_dq_filter	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
)	O
;	O
}	O
*	O
plist	*(*(struct))
=	O
filter_list	*(struct)
;	O
mu_monitor_unlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
&	O
filter_monitor	struct(*(void),*(void),int,int)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_filter_create_args	(*(*(struct)),*(struct),*(char),int,*(*(char)),int,int)->(int)
(	O
mu_stream_t	*(struct)
*	O
pstream	*(*(struct))
,	O
mu_stream_t	*(struct)
stream	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
,	O
int	O
argc	int
,	O
const	O
char	O
*	O
*	O
argv	*(*(char))
,	O
int	O
mode	int
,	O
int	O
flags	int
)	O
{	O
int	O
status	int
;	O
mu_filter_record_t	*(struct)
frec	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
;	O
mu_list_t	*(struct)
list	*(struct)
;	O
void	O
*	O
xdata	*(void)
=	O
NULL	O
;	O
mu_filter_xcode_t	*((*(void),enum(int,int,int,int,int),*(struct(*(char),long,*(char),long,int,int)))->(enum(int,int,int,int,int)))
xcode	*((*(void),enum(int,int,int,int,int),*(struct(*(char),long,*(char),long,int,int)))->(enum(int,int,int,int,int)))
;	O
if	O
(	O
(	O
flags	int
&	O
MU_STREAM_RDWR	O
)	O
==	O
MU_STREAM_RDWR	O
)	O
return	O
EINVAL	int
;	O
mu_filter_get_list	(*(*(struct)))->(int)
(	O
&	O
list	*(struct)
)	O
;	O
status	int
=	O
mu_list_locate	(*(struct),*(void),*(*(void)))->(int)
(	O
list	*(struct)
,	O
(	O
void	O
*	O
)	O
name	*(char)
,	O
(	O
void	O
*	O
*	O
)	O
&	O
frec	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
xcode	*((*(void),enum(int,int,int,int,int),*(struct(*(char),long,*(char),long,int,int)))->(enum(int,int,int,int,int)))
=	O
mode	int
==	O
MU_FILTER_ENCODE	int
?	O
frec	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
->	O
encoder	*((*(void),enum(int,int,int,int,int),*(struct(*(char),long,*(char),long,int,int)))->(enum(int,int,int,int,int)))
:	O
frec	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
->	O
decoder	*((*(void),enum(int,int,int,int,int),*(struct(*(char),long,*(char),long,int,int)))->(enum(int,int,int,int,int)))
;	O
if	O
(	O
!	O
xcode	*((*(void),enum(int,int,int,int,int),*(struct(*(char),long,*(char),long,int,int)))->(enum(int,int,int,int,int)))
)	O
return	O
MU_ERR_EMPTY_VFN	O
;	O
if	O
(	O
frec	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
->	O
newdata	*((*(*(void)),int,int,*(*(char)))->(int))
)	O
{	O
status	int
=	O
frec	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
->	O
newdata	*((*(*(void)),int,int,*(*(char)))->(int))
(	O
&	O
xdata	*(void)
,	O
mode	int
,	O
argc	int
,	O
argv	*(*(char))
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
}	O
status	int
=	O
mu_filter_stream_create	(*(*(struct)),*(struct),int,*((*(void),enum(int,int,int,int,int),*(struct(*`,long,*`,long,int,int)))->(enum(int,int,int,int,int))),*(void),int)->(int)
(	O
pstream	*(*(struct))
,	O
stream	*(struct)
,	O
mode	int
,	O
xcode	*((*(void),enum(int,int,int,int,int),*(struct(*(char),long,*(char),long,int,int)))->(enum(int,int,int,int,int)))
,	O
xdata	*(void)
,	O
flags	int
)	O
;	O
if	O
(	O
status	int
)	O
free	(*(void))->(void)
(	O
xdata	*(void)
)	O
;	O
return	O
status	int
;	O
}	O
int	O
mu_filter_create	(*(*(struct)),*(struct),*(char),int,int)->(int)
(	O
mu_stream_t	*(struct)
*	O
pstream	*(*(struct))
,	O
mu_stream_t	*(struct)
stream	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
,	O
int	O
mode	int
,	O
int	O
flags	int
)	O
{	O
const	O
char	O
*	O
argv	*(*(char))
[	O
2	int
]	O
;	O
argv	*(*(char))
[	O
0	int
]	O
=	O
name	*(char)
;	O
argv	*(*(char))
[	O
1	int
]	O
=	O
NULL	O
;	O
return	O
mu_filter_create_args	(*(*(struct)),*(struct),*(char),int,*(*(char)),int,int)->(int)
(	O
pstream	*(*(struct))
,	O
stream	*(struct)
,	O
name	*(char)
,	O
1	int
,	O
argv	*(*(char))
,	O
mode	int
,	O
flags	int
)	O
;	O
}	O
