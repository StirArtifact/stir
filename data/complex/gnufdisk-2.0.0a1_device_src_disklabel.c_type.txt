extern	O
struct	O
gnufdisk_partition	O
*	O
gnufdisk_device_internals__allocate_partition	(*(struct),*(struct(*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(*`)),*((*`)->(long long)),*((*`)->(long long)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,long long,*`,long)->(int)),*((*`,long long,*`,long)->(int)),*((*`)->(void)))),*(void))->(*(struct))
(	O
struct	O
gnufdisk_disklabel	struct(struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void))),*(void),*(struct),int)
*	O
_d	*(struct)
,	O
struct	O
gnufdisk_partition_operations	struct(*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(*(struct))),*((*(void))->(long long)),*((*(void))->(long long)),*((*(void))->(int)),*((*(void))->(int)),*((*(void),*(struct(*((*`,*`,*`)->(void)),*((*`)->(*`)),*((*`,long,*`,*`)->(void)),*((*`)->(int)),*((*`,*`,*`,*`,*`,*`)->(void)),*((*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)))),*(*(void)))->(void)),*((*(void),*(struct))->(void)),*((*(void),*(struct))->(void)),*((*(void),long long,*(void),long)->(int)),*((*(void),long long,*(void),long)->(int)),*((*(void))->(void)))
*	O
_operations	*(struct(*((*(void),*(struct`),*(void),long)->(void)),*((*(void),*(struct`),*(void),long)->(void)),*((*(void))->(*(struct`))),*((*(void))->(long long)),*((*(void))->(long long)),*((*(void))->(int)),*((*(void))->(int)),*((*(void),*(struct`),*(*`))->(void)),*((*(void),*(struct`))->(void)),*((*(void),*(struct`))->(void)),*((*(void),long long,*(void),long)->(int)),*((*(void),long long,*(void),long)->(int)),*((*(void))->(void))))
,	O
void	O
*	O
_implementation_data	*(void)
)	O
;	O
struct	O
gnufdisk_disklabel	struct(struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void))),*(void),*(struct),int)
{	O
struct	O
gnufdisk_disklabel_operations	struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)))
operations	struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)))
;	O
void	O
*	O
implementation_data	*(void)
;	O
struct	O
gnufdisk_device	O
*	O
device	*(struct)
;	O
int	O
nref	int
;	O
}	O
;	O
static	O
void	O
check_disklabel	(*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))))->(void)
(	O
struct	O
gnufdisk_disklabel	struct(struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void))),*(void),*(struct),int)
*	O
*	O
_d	*(struct)
)	O
{	O
GNUFDISK_RETRY	O
rp0	array(struct(array(long),int,struct(array(long))))
;	O
union	O
gnufdisk_device_exception_data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
;	O
GNUFDISK_RETRY_SET	O
(	O
rp0	array(struct(array(long),int,struct(array(long))))
)	O
;	O
if	O
(	O
gnufdisk_check_memory	(*(void),long,int)->(int)
(	O
*	O
_d	*(struct)
,	O
sizeof	O
(	O
struct	O
gnufdisk_disklabel	struct(struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void))),*(void),*(struct),int)
)	O
,	O
0	int
)	O
!=	O
0	int
)	O
{	O
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
.	O
edisklabelpointer	*(*(struct))
=	O
_d	*(struct)
;	O
GNUFDISK_THROW	O
(	O
GNUFDISK_EXCEPTION_ALL	int
,	O
&	O
rp0	array(struct(array(long),int,struct(array(long))))
,	O
GNUFDISK_DEVICE_EDISKLABELPOINTER	int
,	O
&	O
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
,	O
"invalid struct gnufdisk_disklabel* NULL"	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
gnufdisk_check_memory	(*(void),long,int)->(int)
(	O
(	O
*	O
_d	*(struct)
)	O
->	O
device	*(struct)
,	O
1	int
,	O
1	int
)	O
!=	O
0	int
)	O
{	O
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
.	O
edevicepointer	*(*(struct))
=	O
&	O
(	O
*	O
_d	*(struct)
)	O
->	O
device	*(struct)
;	O
GNUFDISK_THROW	O
(	O
GNUFDISK_EXCEPTION_ALL	int
,	O
&	O
rp0	array(struct(array(long),int,struct(array(long))))
,	O
GNUFDISK_DEVICE_EDEVICEPOINTER	int
,	O
&	O
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
,	O
"label is not associated with  a device"	*(char)
)	O
;	O
}	O
}	O
static	O
void	O
free_pointer	(*(void))->(void)
(	O
void	O
*	O
_p	*(void)
)	O
{	O
GNUFDISK_LOG	O
(	O
(	O
DISKLABEL	O
,	O
"free pointer %p"	*(char)
,	O
_p	*(void)
)	O
)	O
;	O
free	(*(void))->(void)
(	O
_p	*(void)
)	O
;	O
}	O
struct	O
gnufdisk_disklabel	struct(struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void))),*(void),*(struct),int)
*	O
gnufdisk_device_internals__allocate_disklabel	(*(struct),*(struct(*((*`,*`,*`)->(void)),*((*`)->(*`)),*((*`,long,*`,*`)->(void)),*((*`)->(int)),*((*`,*`,*`,*`,*`,*`)->(void)),*((*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)))),*(void))->(*(struct(struct(*((*`,*`,*`)->(void)),*((*`)->(*`)),*((*`,long,*`,*`)->(void)),*((*`)->(int)),*((*`,*`,*`,*`,*`,*`)->(void)),*((*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void))),*(void),*(struct),int)))
(	O
struct	O
gnufdisk_device	O
*	O
_dev	*(struct)
,	O
struct	O
gnufdisk_disklabel_operations	struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)))
*	O
_operations	*(struct(*((*(void),*(struct`),*(void),long)->(void)),*((*(void),*(struct`),*(void),long)->(void)),*((*(void))->(*(struct`))),*((*(void))->(long long)),*((*(void))->(long long)),*((*(void))->(int)),*((*(void))->(int)),*((*(void),*(struct`),*(*`))->(void)),*((*(void),*(struct`))->(void)),*((*(void),*(struct`))->(void)),*((*(void),long long,*(void),long)->(int)),*((*(void),long long,*(void),long)->(int)),*((*(void))->(void))))
,	O
void	O
*	O
_implementation_data	*(void)
)	O
{	O
struct	O
gnufdisk_disklabel	struct(struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void))),*(void),*(struct),int)
*	O
disk	*(struct(struct(*((*`,*`,*`)->(void)),*((*`)->(*`)),*((*`,long,*`,*`)->(void)),*((*`)->(int)),*((*`,*`,*`,*`,*`,*`)->(void)),*((*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void))),*(void),*(struct),int))
;	O
if	O
(	O
gnufdisk_check_memory	(*(void),long,int)->(int)
(	O
_dev	*(struct)
,	O
1	int
,	O
1	int
)	O
!=	O
0	int
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_EINTERNAL	int
,	O
NULL	O
,	O
"invalid struct gnufdisk_device* %p"	*(char)
,	O
_dev	*(struct)
)	O
;	O
else	O
if	O
(	O
gnufdisk_check_memory	(*(void),long,int)->(int)
(	O
_operations	*(struct(*((*(void),*(struct`),*(void),long)->(void)),*((*(void),*(struct`),*(void),long)->(void)),*((*(void))->(*(struct`))),*((*(void))->(long long)),*((*(void))->(long long)),*((*(void))->(int)),*((*(void))->(int)),*((*(void),*(struct`),*(*`))->(void)),*((*(void),*(struct`))->(void)),*((*(void),*(struct`))->(void)),*((*(void),long long,*(void),long)->(int)),*((*(void),long long,*(void),long)->(int)),*((*(void))->(void))))
,	O
sizeof	O
(	O
struct	O
gnufdisk_disklabel_operations	struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)))
)	O
,	O
1	int
)	O
!=	O
0	int
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_EINTERNAL	int
,	O
NULL	O
,	O
"invalid struct gnufdisk_disklabel_operations* %p"	*(char)
,	O
_operations	*(struct(*((*(void),*(struct`),*(void),long)->(void)),*((*(void),*(struct`),*(void),long)->(void)),*((*(void))->(*(struct`))),*((*(void))->(long long)),*((*(void))->(long long)),*((*(void))->(int)),*((*(void))->(int)),*((*(void),*(struct`),*(*`))->(void)),*((*(void),*(struct`))->(void)),*((*(void),*(struct`))->(void)),*((*(void),long long,*(void),long)->(int)),*((*(void),long long,*(void),long)->(int)),*((*(void))->(void))))
)	O
;	O
if	O
(	O
(	O
disk	*(struct(struct(*((*`,*`,*`)->(void)),*((*`)->(*`)),*((*`,long,*`,*`)->(void)),*((*`)->(int)),*((*`,*`,*`,*`,*`,*`)->(void)),*((*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void))),*(void),*(struct),int))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
gnufdisk_disklabel	struct(struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void))),*(void),*(struct),int)
)	O
)	O
)	O
==	O
NULL	O
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_ENOMEM	int
,	O
NULL	O
,	O
"cannot allocate memory"	*(char)
)	O
;	O
if	O
(	O
gnufdisk_exception_register_unwind_handler	(*((*(void))->(void)),*(void))->(int)
(	O
&	O
free_pointer	(*(void))->(void)
,	O
disk	*(struct(struct(*((*`,*`,*`)->(void)),*((*`)->(*`)),*((*`,long,*`,*`)->(void)),*((*`)->(int)),*((*`,*`,*`,*`,*`,*`)->(void)),*((*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void))),*(void),*(struct),int))
)	O
!=	O
0	int
)	O
GNUFDISK_WARNING	O
(	O
"gnufdisk_exception_register_unwind_handler failed. Missing GNUFDISK_TRY?"	*(char)
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
disk	*(struct(struct(*((*`,*`,*`)->(void)),*((*`)->(*`)),*((*`,long,*`,*`)->(void)),*((*`)->(int)),*((*`,*`,*`,*`,*`,*`)->(void)),*((*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void))),*(void),*(struct),int))
,	O
0	int
,	O
sizeof	O
(	O
struct	O
gnufdisk_disklabel	struct(struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void))),*(void),*(struct),int)
)	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
&	O
disk	*(struct(struct(*((*`,*`,*`)->(void)),*((*`)->(*`)),*((*`,long,*`,*`)->(void)),*((*`)->(int)),*((*`,*`,*`,*`,*`,*`)->(void)),*((*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void))),*(void),*(struct),int))
->	O
operations	struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)))
,	O
_operations	*(struct(*((*(void),*(struct`),*(void),long)->(void)),*((*(void),*(struct`),*(void),long)->(void)),*((*(void))->(*(struct`))),*((*(void))->(long long)),*((*(void))->(long long)),*((*(void))->(int)),*((*(void))->(int)),*((*(void),*(struct`),*(*`))->(void)),*((*(void),*(struct`))->(void)),*((*(void),*(struct`))->(void)),*((*(void),long long,*(void),long)->(int)),*((*(void),long long,*(void),long)->(int)),*((*(void))->(void))))
,	O
sizeof	O
(	O
struct	O
gnufdisk_disklabel_operations	struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)))
)	O
)	O
;	O
disk	*(struct(struct(*((*`,*`,*`)->(void)),*((*`)->(*`)),*((*`,long,*`,*`)->(void)),*((*`)->(int)),*((*`,*`,*`,*`,*`,*`)->(void)),*((*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void))),*(void),*(struct),int))
->	O
implementation_data	*(void)
=	O
_implementation_data	*(void)
;	O
disk	*(struct(struct(*((*`,*`,*`)->(void)),*((*`)->(*`)),*((*`,long,*`,*`)->(void)),*((*`)->(int)),*((*`,*`,*`,*`,*`,*`)->(void)),*((*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void))),*(void),*(struct),int))
->	O
device	*(struct)
=	O
_dev	*(struct)
;	O
gnufdisk_device_ref	(*(struct))->(void)
(	O
_dev	*(struct)
)	O
;	O
disk	*(struct(struct(*((*`,*`,*`)->(void)),*((*`)->(*`)),*((*`,long,*`,*`)->(void)),*((*`)->(int)),*((*`,*`,*`,*`,*`,*`)->(void)),*((*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void))),*(void),*(struct),int))
->	O
nref	int
=	O
1	int
;	O
if	O
(	O
gnufdisk_exception_unregister_unwind_handler	(*((*(void))->(void)),*(void))->(int)
(	O
&	O
free_pointer	(*(void))->(void)
,	O
disk	*(struct(struct(*((*`,*`,*`)->(void)),*((*`)->(*`)),*((*`,long,*`,*`)->(void)),*((*`)->(int)),*((*`,*`,*`,*`,*`,*`)->(void)),*((*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void))),*(void),*(struct),int))
)	O
!=	O
0	int
)	O
GNUFDISK_WARNING	O
(	O
"gnufdisk_exception_unregister_unwind_handler failed. Missing GNUFDISK_TRY?"	*(char)
)	O
;	O
return	O
disk	*(struct(struct(*((*`,*`,*`)->(void)),*((*`)->(*`)),*((*`,long,*`,*`)->(void)),*((*`)->(int)),*((*`,*`,*`,*`,*`,*`)->(void)),*((*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void))),*(void),*(struct),int))
;	O
}	O
void	O
gnufdisk_device_internals__disklabel_set_device	(*(struct(struct(*((*`,*`,*`)->(void)),*((*`)->(*`)),*((*`,long,*`,*`)->(void)),*((*`)->(int)),*((*`,*`,*`,*`,*`,*`)->(void)),*((*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void))),*(void),*(struct),int)),*(struct))->(void)
(	O
struct	O
gnufdisk_disklabel	struct(struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void))),*(void),*(struct),int)
*	O
_d	*(struct)
,	O
struct	O
gnufdisk_device	O
*	O
_dev	*(struct)
)	O
{	O
check_disklabel	(*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))))->(void)
(	O
&	O
_d	*(struct)
)	O
;	O
if	O
(	O
_d	*(struct)
->	O
device	*(struct)
)	O
{	O
gnufdisk_device_delete	(*(struct))->(void)
(	O
_d	*(struct)
->	O
device	*(struct)
)	O
;	O
_d	*(struct)
->	O
device	*(struct)
=	O
NULL	O
;	O
}	O
gnufdisk_device_ref	(*(struct))->(void)
(	O
_dev	*(struct)
)	O
;	O
_d	*(struct)
->	O
device	*(struct)
=	O
_dev	*(struct)
;	O
}	O
struct	O
gnufdisk_device	O
*	O
gnufdisk_device_internals__disklabel_get_device	(*(struct(struct(*((*`,*`,*`)->(void)),*((*`)->(*`)),*((*`,long,*`,*`)->(void)),*((*`)->(int)),*((*`,*`,*`,*`,*`,*`)->(void)),*((*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void))),*(void),*(struct),int)))->(*(struct))
(	O
struct	O
gnufdisk_disklabel	struct(struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void))),*(void),*(struct),int)
*	O
_d	*(struct)
)	O
{	O
check_disklabel	(*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))))->(void)
(	O
&	O
_d	*(struct)
)	O
;	O
return	O
_d	*(struct)
->	O
device	*(struct)
;	O
}	O
void	O
gnufdisk_disklabel_delete	(*(struct))->(void)
(	O
struct	O
gnufdisk_disklabel	struct(struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void))),*(void),*(struct),int)
*	O
_d	*(struct)
)	O
{	O
check_disklabel	(*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))))->(void)
(	O
&	O
_d	*(struct)
)	O
;	O
if	O
(	O
_d	*(struct)
->	O
nref	int
<	O
2	int
)	O
{	O
if	O
(	O
_d	*(struct)
->	O
implementation_data	*(void)
&&	O
_d	*(struct)
->	O
operations	struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)))
.	O
delete	*((*(void))->(void))
!=	O
NULL	O
)	O
{	O
void	O
*	O
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
;	O
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
=	O
_d	*(struct)
->	O
implementation_data	*(void)
;	O
_d	*(struct)
->	O
implementation_data	*(void)
=	O
NULL	O
;	O
(	O
*	O
_d	*(struct)
->	O
operations	struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)))
.	O
delete	*((*(void))->(void))
)	O
(	O
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
)	O
;	O
}	O
if	O
(	O
_d	*(struct)
->	O
device	*(struct)
)	O
{	O
gnufdisk_device_delete	(*(struct))->(void)
(	O
_d	*(struct)
->	O
device	*(struct)
)	O
;	O
_d	*(struct)
->	O
device	*(struct)
=	O
NULL	O
;	O
}	O
free	(*(void))->(void)
(	O
_d	*(struct)
)	O
;	O
}	O
else	O
_d	*(struct)
->	O
nref	int
--	O
;	O
}	O
void	O
gnufdisk_disklabel_ref	(*(struct))->(void)
(	O
struct	O
gnufdisk_disklabel	struct(struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void))),*(void),*(struct),int)
*	O
_d	*(struct)
)	O
{	O
check_disklabel	(*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))))->(void)
(	O
&	O
_d	*(struct)
)	O
;	O
_d	*(struct)
->	O
nref	int
++	O
;	O
}	O
void	O
gnufdisk_disklabel_raw	(*(struct),*(*(void)),*(long))->(void)
(	O
struct	O
gnufdisk_disklabel	struct(struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void))),*(void),*(struct),int)
*	O
_d	*(struct)
,	O
void	O
*	O
*	O
_dest	*(*(char))
,	O
size_t	long
*	O
_size	long
)	O
{	O
GNUFDISK_RETRY	O
rp0	array(struct(array(long),int,struct(array(long))))
;	O
check_disklabel	(*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))))->(void)
(	O
&	O
_d	*(struct)
)	O
;	O
GNUFDISK_RETRY_SET	O
(	O
rp0	array(struct(array(long),int,struct(array(long))))
)	O
;	O
if	O
(	O
gnufdisk_check_memory	(*(void),long,int)->(int)
(	O
_dest	*(*(char))
,	O
1	int
,	O
0	int
)	O
!=	O
0	int
)	O
{	O
union	O
gnufdisk_device_exception_data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
;	O
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
.	O
edestinationpointer	*(*(*(void)))
=	O
&	O
_dest	*(*(char))
;	O
GNUFDISK_THROW	O
(	O
GNUFDISK_EXCEPTION_ALL	int
,	O
&	O
rp0	array(struct(array(long),int,struct(array(long))))
,	O
GNUFDISK_DEVICE_EDESTINATIONPOINTER	int
,	O
&	O
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
,	O
"invalid destination pointer: %p"	*(char)
,	O
_dest	*(*(char))
)	O
;	O
}	O
else	O
if	O
(	O
gnufdisk_check_memory	(*(void),long,int)->(int)
(	O
_size	long
,	O
1	int
,	O
0	int
)	O
!=	O
0	int
)	O
{	O
union	O
gnufdisk_device_exception_data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
;	O
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
.	O
esizepointer	*(*(long))
=	O
&	O
_size	long
;	O
GNUFDISK_THROW	O
(	O
GNUFDISK_EXCEPTION_ALL	int
,	O
&	O
rp0	array(struct(array(long),int,struct(array(long))))
,	O
GNUFDISK_DEVICE_ESIZEPOINTER	int
,	O
&	O
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
,	O
"invalid size pointer: %p"	*(char)
,	O
_size	long
)	O
;	O
GNUFDISK_THROW	O
(	O
GNUFDISK_EXCEPTION_ALL	int
,	O
&	O
rp0	array(struct(array(long),int,struct(array(long))))
,	O
GNUFDISK_DEVICE_ESIZEPOINTER	int
,	O
&	O
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
,	O
"invalid size pointer: %p"	*(char)
,	O
_size	long
)	O
;	O
}	O
else	O
if	O
(	O
_d	*(struct)
->	O
operations	struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)))
.	O
raw	*((*(void),*(*(void)),*(long))->(void))
==	O
NULL	O
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_ENOTSUP	int
,	O
NULL	O
,	O
"operation not supported: `raw'"	*(char)
)	O
;	O
(	O
*	O
_d	*(struct)
->	O
operations	struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)))
.	O
raw	*((*(void),*(*(void)),*(long))->(void))
)	O
(	O
_d	*(struct)
->	O
implementation_data	*(void)
,	O
_dest	*(*(char))
,	O
_size	long
)	O
;	O
}	O
struct	O
gnufdisk_string	O
*	O
gnufdisk_disklabel_system	(*(struct))->(*(struct))
(	O
struct	O
gnufdisk_disklabel	struct(struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void))),*(void),*(struct),int)
*	O
_d	*(struct)
)	O
{	O
check_disklabel	(*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))))->(void)
(	O
&	O
_d	*(struct)
)	O
;	O
if	O
(	O
_d	*(struct)
->	O
operations	struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)))
.	O
system	(*(char))->(int)
==	O
NULL	O
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_ENOTSUP	int
,	O
NULL	O
,	O
"operation not supported `system'"	*(char)
)	O
;	O
return	O
(	O
*	O
_d	*(struct)
->	O
operations	struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)))
.	O
system	(*(char))->(int)
)	O
(	O
_d	*(struct)
->	O
implementation_data	*(void)
)	O
;	O
}	O
struct	O
gnufdisk_partition	O
*	O
gnufdisk_disklabel_partition	(*(struct),long)->(*(struct))
(	O
struct	O
gnufdisk_disklabel	struct(struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void))),*(void),*(struct),int)
*	O
_d	*(struct)
,	O
size_t	long
_n	long
)	O
{	O
struct	O
gnufdisk_partition_operations	struct(*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(*(struct))),*((*(void))->(long long)),*((*(void))->(long long)),*((*(void))->(int)),*((*(void))->(int)),*((*(void),*(struct(*((*`,*`,*`)->(void)),*((*`)->(*`)),*((*`,long,*`,*`)->(void)),*((*`)->(int)),*((*`,*`,*`,*`,*`,*`)->(void)),*((*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)))),*(*(void)))->(void)),*((*(void),*(struct))->(void)),*((*(void),*(struct))->(void)),*((*(void),long long,*(void),long)->(int)),*((*(void),long long,*(void),long)->(int)),*((*(void))->(void)))
operations	struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)))
;	O
void	O
*	O
implementation_data	*(void)
;	O
check_disklabel	(*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))))->(void)
(	O
&	O
_d	*(struct)
)	O
;	O
if	O
(	O
_d	*(struct)
->	O
operations	struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)))
.	O
partition	*((*(void),long,*(struct),*(*(void)))->(void))
==	O
NULL	O
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_ENOTSUP	int
,	O
NULL	O
,	O
"operation not supported `partition'"	*(char)
)	O
;	O
(	O
*	O
_d	*(struct)
->	O
operations	struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)))
.	O
partition	*((*(void),long,*(struct),*(*(void)))->(void))
)	O
(	O
_d	*(struct)
->	O
implementation_data	*(void)
,	O
_n	long
,	O
&	O
operations	struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)))
,	O
&	O
implementation_data	*(void)
)	O
;	O
return	O
gnufdisk_device_internals__allocate_partition	(*(struct),*(struct(*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(*`)),*((*`)->(long long)),*((*`)->(long long)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,long long,*`,long)->(int)),*((*`,long long,*`,long)->(int)),*((*`)->(void)))),*(void))->(*(struct))
(	O
_d	*(struct)
,	O
&	O
operations	struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)))
,	O
implementation_data	*(void)
)	O
;	O
}	O
int	O
gnufdisk_disklabel_count_partitions	(*(struct))->(int)
(	O
struct	O
gnufdisk_disklabel	struct(struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void))),*(void),*(struct),int)
*	O
_d	*(struct)
)	O
{	O
check_disklabel	(*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))))->(void)
(	O
&	O
_d	*(struct)
)	O
;	O
if	O
(	O
_d	*(struct)
->	O
operations	struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)))
.	O
count_partitions	*((*(void))->(int))
==	O
NULL	O
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_ENOTSUP	int
,	O
NULL	O
,	O
"operation not supported `count_partitions'"	*(char)
)	O
;	O
return	O
(	O
*	O
_d	*(struct)
->	O
operations	struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)))
.	O
count_partitions	*((*(void))->(int))
)	O
(	O
_d	*(struct)
->	O
implementation_data	*(void)
)	O
;	O
}	O
struct	O
gnufdisk_partition	O
*	O
gnufdisk_disklabel_create_partition	(*(struct),*(struct),*(struct),*(struct))->(*(struct))
(	O
struct	O
gnufdisk_disklabel	struct(struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void))),*(void),*(struct),int)
*	O
_d	*(struct)
,	O
struct	O
gnufdisk_geometry	O
*	O
_s	*(struct)
,	O
struct	O
gnufdisk_geometry	O
*	O
_e	*(struct)
,	O
struct	O
gnufdisk_string	O
*	O
_type	*(struct)
)	O
{	O
GNUFDISK_RETRY	O
rp0	array(struct(array(long),int,struct(array(long))))
;	O
struct	O
gnufdisk_partition_operations	struct(*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(*(struct))),*((*(void))->(long long)),*((*(void))->(long long)),*((*(void))->(int)),*((*(void))->(int)),*((*(void),*(struct(*((*`,*`,*`)->(void)),*((*`)->(*`)),*((*`,long,*`,*`)->(void)),*((*`)->(int)),*((*`,*`,*`,*`,*`,*`)->(void)),*((*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)))),*(*(void)))->(void)),*((*(void),*(struct))->(void)),*((*(void),*(struct))->(void)),*((*(void),long long,*(void),long)->(int)),*((*(void),long long,*(void),long)->(int)),*((*(void))->(void)))
operations	struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)))
;	O
void	O
*	O
implementation_data	*(void)
;	O
check_disklabel	(*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))))->(void)
(	O
&	O
_d	*(struct)
)	O
;	O
GNUFDISK_RETRY_SET	O
(	O
rp0	array(struct(array(long),int,struct(array(long))))
)	O
;	O
if	O
(	O
gnufdisk_check_memory	(*(void),long,int)->(int)
(	O
_s	*(struct)
,	O
1	int
,	O
1	int
)	O
!=	O
0	int
)	O
{	O
union	O
gnufdisk_device_exception_data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
;	O
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
.	O
egeometrypointer	*(*(struct))
=	O
&	O
_s	*(struct)
;	O
GNUFDISK_THROW	O
(	O
GNUFDISK_EXCEPTION_ALL	int
,	O
&	O
rp0	array(struct(array(long),int,struct(array(long))))
,	O
GNUFDISK_DEVICE_EGEOMETRYPOINTER	int
,	O
&	O
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
,	O
"invalid struct gnufdisk_geometry* %p"	*(char)
,	O
_s	*(struct)
)	O
;	O
}	O
else	O
if	O
(	O
gnufdisk_check_memory	(*(void),long,int)->(int)
(	O
_e	*(struct)
,	O
1	int
,	O
1	int
)	O
!=	O
0	int
)	O
{	O
union	O
gnufdisk_device_exception_data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
;	O
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
.	O
egeometrypointer	*(*(struct))
=	O
&	O
_e	*(struct)
;	O
GNUFDISK_THROW	O
(	O
GNUFDISK_EXCEPTION_ALL	int
,	O
&	O
rp0	array(struct(array(long),int,struct(array(long))))
,	O
GNUFDISK_DEVICE_EGEOMETRYPOINTER	int
,	O
&	O
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
,	O
"invalid struct gnufdisk_geometry* %p"	*(char)
,	O
_e	*(struct)
)	O
;	O
}	O
else	O
if	O
(	O
gnufdisk_check_memory	(*(void),long,int)->(int)
(	O
_type	*(struct)
,	O
1	int
,	O
1	int
)	O
!=	O
0	int
)	O
{	O
union	O
gnufdisk_device_exception_data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
;	O
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
.	O
epartitiontypepointer	*(*(struct))
=	O
&	O
_type	*(struct)
;	O
GNUFDISK_THROW	O
(	O
GNUFDISK_EXCEPTION_ALL	int
,	O
&	O
rp0	array(struct(array(long),int,struct(array(long))))
,	O
GNUFDISK_DEVICE_EPARTITIONTYPEPOINTER	int
,	O
&	O
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
,	O
"invalid struct gnufdisk_string* %p"	*(char)
,	O
_type	*(struct)
)	O
;	O
}	O
else	O
if	O
(	O
_d	*(struct)
->	O
operations	struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)))
.	O
create_partition	*((*(void),*(struct),*(struct),*(struct),*(struct),*(*(void)))->(void))
==	O
NULL	O
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_ENOTSUP	int
,	O
NULL	O
,	O
"operation not supported `create_partition'"	*(char)
)	O
;	O
(	O
*	O
_d	*(struct)
->	O
operations	struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)))
.	O
create_partition	*((*(void),*(struct),*(struct),*(struct),*(struct),*(*(void)))->(void))
)	O
(	O
_d	*(struct)
->	O
implementation_data	*(void)
,	O
_s	*(struct)
,	O
_e	*(struct)
,	O
_type	*(struct)
,	O
&	O
operations	struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)))
,	O
&	O
implementation_data	*(void)
)	O
;	O
return	O
gnufdisk_device_internals__allocate_partition	(*(struct),*(struct(*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(*`)),*((*`)->(long long)),*((*`)->(long long)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,long long,*`,long)->(int)),*((*`,long long,*`,long)->(int)),*((*`)->(void)))),*(void))->(*(struct))
(	O
_d	*(struct)
,	O
&	O
operations	struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)))
,	O
implementation_data	*(void)
)	O
;	O
}	O
void	O
gnufdisk_disklabel_remove_partition	(*(struct),long)->(void)
(	O
struct	O
gnufdisk_disklabel	struct(struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void))),*(void),*(struct),int)
*	O
_d	*(struct)
,	O
size_t	long
_n	long
)	O
{	O
check_disklabel	(*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))))->(void)
(	O
&	O
_d	*(struct)
)	O
;	O
if	O
(	O
_d	*(struct)
->	O
operations	struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)))
.	O
remove_partition	*((*(void),long)->(void))
==	O
NULL	O
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_ENOTSUP	int
,	O
NULL	O
,	O
"operation not supported `remove_partition'"	*(char)
)	O
;	O
(	O
*	O
_d	*(struct)
->	O
operations	struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)))
.	O
remove_partition	*((*(void),long)->(void))
)	O
(	O
_d	*(struct)
->	O
implementation_data	*(void)
,	O
_n	long
)	O
;	O
}	O
void	O
gnufdisk_disklabel_set_parameter	(*(struct),*(struct),*(void),long)->(void)
(	O
struct	O
gnufdisk_disklabel	struct(struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void))),*(void),*(struct),int)
*	O
_d	*(struct)
,	O
struct	O
gnufdisk_string	O
*	O
_parameter	*(struct)
,	O
const	O
void	O
*	O
_data	*(void)
,	O
size_t	long
_size	long
)	O
{	O
check_disklabel	(*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))))->(void)
(	O
&	O
_d	*(struct)
)	O
;	O
if	O
(	O
gnufdisk_check_memory	(*(void),long,int)->(int)
(	O
_parameter	*(struct)
,	O
1	int
,	O
1	int
)	O
!=	O
0	int
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_EPARAMETERPOINTER	int
,	O
NULL	O
,	O
"invalid struct gnufdisk_string* %p"	*(char)
,	O
_parameter	*(struct)
)	O
;	O
else	O
if	O
(	O
gnufdisk_check_memory	(*(void),long,int)->(int)
(	O
(	O
void	O
*	O
)	O
_data	*(void)
,	O
_size	long
,	O
1	int
)	O
!=	O
0	int
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_EPARAMETERDATA	int
,	O
NULL	O
,	O
"invalid parameter data: %p"	*(char)
,	O
_data	*(void)
)	O
;	O
else	O
if	O
(	O
_d	*(struct)
->	O
operations	struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)))
.	O
set_parameter	*((*(void),*(struct),*(void),long)->(void))
==	O
NULL	O
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_ENOTSUP	int
,	O
NULL	O
,	O
"operation not supported `set_parameter'"	*(char)
)	O
;	O
(	O
*	O
_d	*(struct)
->	O
operations	struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)))
.	O
set_parameter	*((*(void),*(struct),*(void),long)->(void))
)	O
(	O
_d	*(struct)
->	O
implementation_data	*(void)
,	O
_parameter	*(struct)
,	O
_data	*(void)
,	O
_size	long
)	O
;	O
}	O
void	O
gnufdisk_disklabel_get_parameter	(*(struct),*(struct),*(void),long)->(void)
(	O
struct	O
gnufdisk_disklabel	struct(struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void))),*(void),*(struct),int)
*	O
_d	*(struct)
,	O
struct	O
gnufdisk_string	O
*	O
_parameter	*(struct)
,	O
void	O
*	O
_data	*(void)
,	O
size_t	long
_size	long
)	O
{	O
check_disklabel	(*(*(struct(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(struct`),int))))->(void)
(	O
&	O
_d	*(struct)
)	O
;	O
if	O
(	O
gnufdisk_check_memory	(*(void),long,int)->(int)
(	O
_parameter	*(struct)
,	O
1	int
,	O
1	int
)	O
!=	O
0	int
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_EPARAMETERPOINTER	int
,	O
NULL	O
,	O
"invalid struct gnufdisk_string* %p"	*(char)
,	O
_parameter	*(struct)
)	O
;	O
else	O
if	O
(	O
gnufdisk_check_memory	(*(void),long,int)->(int)
(	O
_data	*(void)
,	O
_size	long
,	O
0	int
)	O
!=	O
0	int
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_EPARAMETERDATA	int
,	O
NULL	O
,	O
"invalid parameter data: %p"	*(char)
,	O
_data	*(void)
)	O
;	O
else	O
if	O
(	O
_d	*(struct)
->	O
operations	struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)))
.	O
get_parameter	*((*(void),*(struct),*(void),long)->(void))
==	O
NULL	O
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_ENOTSUP	int
,	O
NULL	O
,	O
"operation not supported `get_parameter'"	*(char)
)	O
;	O
(	O
*	O
_d	*(struct)
->	O
operations	struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)))
.	O
get_parameter	*((*(void),*(struct),*(void),long)->(void))
)	O
(	O
_d	*(struct)
->	O
implementation_data	*(void)
,	O
_parameter	*(struct)
,	O
_data	*(void)
,	O
_size	long
)	O
;	O
}	O
