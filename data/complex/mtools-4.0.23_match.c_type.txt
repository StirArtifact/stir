static	O
int	O
casecmp	(int,int)->(int)
(	O
wchar_t	int
a	int
,	O
wchar_t	int
b	int
)	O
{	O
return	O
towupper	(int)->(int)
(	O
(	O
wint_t	int
)	O
a	int
)	O
==	O
towupper	(int)->(int)
(	O
(	O
wint_t	int
)	O
b	int
)	O
;	O
}	O
static	O
int	O
exactcmp	(int,int)->(int)
(	O
wchar_t	int
a	int
,	O
wchar_t	int
b	int
)	O
{	O
return	O
a	int
==	O
b	int
;	O
}	O
static	O
int	O
is_in_range	(int,*(*(int)),*(int))->(int)
(	O
wchar_t	int
ch	char
,	O
const	O
wchar_t	int
*	O
*	O
p	*(*(int))
,	O
int	O
*	O
reverse	*(int)
)	O
{	O
wchar_t	int
first	int
,	O
last	int
;	O
int	O
found	int
=	O
0	int
;	O
if	O
(	O
*	O
*	O
p	*(*(int))
==	O
'^'	O
)	O
{	O
*	O
reverse	*(int)
=	O
1	int
;	O
(	O
*	O
p	*(*(int))
)	O
++	O
;	O
}	O
else	O
*	O
reverse	*(int)
=	O
0	int
;	O
while	O
(	O
(	O
first	int
=	O
*	O
*	O
p	*(*(int))
)	O
!=	O
']'	O
)	O
{	O
if	O
(	O
!	O
first	int
)	O
return	O
0	int
;	O
if	O
(	O
*	O
(	O
++	O
(	O
*	O
p	*(*(int))
)	O
)	O
==	O
'-'	O
)	O
{	O
last	int
=	O
*	O
(	O
++	O
(	O
*	O
p	*(*(int))
)	O
)	O
;	O
if	O
(	O
last	int
==	O
']'	O
)	O
{	O
if	O
(	O
ch	char
==	O
first	int
||	O
ch	char
==	O
'-'	O
)	O
found	int
=	O
1	int
;	O
break	O
;	O
}	O
(	O
*	O
p	*(*(int))
)	O
++	O
;	O
if	O
(	O
ch	char
>=	O
first	int
&&	O
ch	char
<=	O
last	int
)	O
found	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
ch	char
==	O
first	int
)	O
found	int
=	O
1	int
;	O
}	O
return	O
found	int
;	O
}	O
static	O
int	O
parse_range	(*(*(int)),*(int),*(int),*((int,int)->(int)))->(int)
(	O
const	O
wchar_t	int
*	O
*	O
p	*(*(int))
,	O
const	O
wchar_t	int
*	O
s	*(int)
,	O
wchar_t	int
*	O
out	*(int)
,	O
int	O
(	O
*	O
compfn	*((int,int)->(int))
)	O
(	O
wchar_t	int
a	int
,	O
wchar_t	int
b	int
)	O
)	O
{	O
int	O
reverse	*(int)
;	O
const	O
wchar_t	int
*	O
p0	*(int)
=	O
*	O
p	*(*(int))
;	O
const	O
wchar_t	int
*	O
p1	*(int)
=	O
*	O
p	*(*(int))
;	O
if	O
(	O
out	*(int)
)	O
*	O
out	*(int)
=	O
*	O
s	*(int)
;	O
if	O
(	O
is_in_range	(int,*(*(int)),*(int))->(int)
(	O
*	O
s	*(int)
,	O
p	*(*(int))
,	O
&	O
reverse	*(int)
)	O
)	O
return	O
1	int
^	O
reverse	*(int)
;	O
if	O
(	O
compfn	*((int,int)->(int))
==	O
exactcmp	(int,int)->(int)
)	O
return	O
reverse	*(int)
;	O
if	O
(	O
is_in_range	(int,*(*(int)),*(int))->(int)
(	O
(	O
wchar_t	int
)	O
towlower	(int)->(int)
(	O
(	O
wint_t	int
)	O
*	O
s	*(int)
)	O
,	O
&	O
p0	*(int)
,	O
&	O
reverse	*(int)
)	O
)	O
{	O
if	O
(	O
out	*(int)
)	O
*	O
out	*(int)
=	O
(	O
wchar_t	int
)	O
towlower	(int)->(int)
(	O
(	O
wint_t	int
)	O
*	O
s	*(int)
)	O
;	O
return	O
1	int
^	O
reverse	*(int)
;	O
}	O
if	O
(	O
is_in_range	(int,*(*(int)),*(int))->(int)
(	O
(	O
wchar_t	int
)	O
towupper	(int)->(int)
(	O
(	O
wint_t	int
)	O
*	O
s	*(int)
)	O
,	O
&	O
p1	*(int)
,	O
&	O
reverse	*(int)
)	O
)	O
{	O
if	O
(	O
out	*(int)
)	O
*	O
out	*(int)
=	O
(	O
wchar_t	int
)	O
towupper	(int)->(int)
(	O
(	O
wint_t	int
)	O
*	O
s	*(int)
)	O
;	O
return	O
1	int
^	O
reverse	*(int)
;	O
}	O
return	O
reverse	*(int)
;	O
}	O
static	O
int	O
_match	(*(int),*(int),*(int),int,int,*((int,int)->(int)))->(int)
(	O
const	O
wchar_t	int
*	O
s	*(int)
,	O
const	O
wchar_t	int
*	O
p	*(*(int))
,	O
wchar_t	int
*	O
out	*(int)
,	O
int	O
Case	char
,	O
int	O
length	int
,	O
int	O
(	O
*	O
compfn	*((int,int)->(int))
)	O
(	O
wchar_t	int
a	int
,	O
wchar_t	int
b	int
)	O
)	O
{	O
for	O
(	O
;	O
*	O
p	*(*(int))
!=	O
'\0'	O
&&	O
length	int
;	O
)	O
{	O
switch	O
(	O
*	O
p	*(*(int))
)	O
{	O
case	O
'?'	O
:	O
if	O
(	O
*	O
s	*(int)
==	O
'\0'	O
)	O
return	O
(	O
0	int
)	O
;	O
if	O
(	O
out	*(int)
)	O
*	O
(	O
out	*(int)
++	O
)	O
=	O
*	O
s	*(int)
;	O
break	O
;	O
case	O
'*'	O
:	O
while	O
(	O
*	O
p	*(*(int))
==	O
'*'	O
&&	O
length	int
)	O
{	O
p	*(*(int))
++	O
;	O
length	int
--	O
;	O
}	O
while	O
(	O
*	O
s	*(int)
)	O
{	O
if	O
(	O
_match	(*(int),*(int),*(int),int,int,*((int,int)->(int)))->(int)
(	O
s	*(int)
,	O
p	*(*(int))
,	O
out	*(int)
,	O
Case	char
,	O
length	int
,	O
compfn	*((int,int)->(int))
)	O
)	O
return	O
1	int
;	O
if	O
(	O
out	*(int)
)	O
*	O
out	*(int)
++	O
=	O
*	O
s	*(int)
;	O
s	*(int)
++	O
;	O
}	O
continue	O
;	O
case	O
'['	O
:	O
p	*(*(int))
++	O
;	O
length	int
--	O
;	O
if	O
(	O
!	O
parse_range	(*(*(int)),*(int),*(int),*((int,int)->(int)))->(int)
(	O
&	O
p	*(*(int))
,	O
s	*(int)
,	O
out	*(int)
++	O
,	O
compfn	*((int,int)->(int))
)	O
)	O
return	O
0	int
;	O
break	O
;	O
case	O
'\\'	O
:	O
p	*(*(int))
++	O
;	O
length	int
--	O
;	O
default	O
:	O
if	O
(	O
!	O
compfn	*((int,int)->(int))
(	O
*	O
s	*(int)
,	O
*	O
p	*(*(int))
)	O
)	O
return	O
(	O
0	int
)	O
;	O
if	O
(	O
out	*(int)
)	O
*	O
(	O
out	*(int)
++	O
)	O
=	O
*	O
p	*(*(int))
;	O
break	O
;	O
}	O
p	*(*(int))
++	O
;	O
length	int
--	O
;	O
s	*(int)
++	O
;	O
}	O
if	O
(	O
out	*(int)
)	O
*	O
out	*(int)
=	O
'\0'	O
;	O
if	O
(	O
*	O
s	*(int)
!=	O
'\0'	O
)	O
return	O
(	O
0	int
)	O
;	O
else	O
return	O
(	O
1	int
)	O
;	O
}	O
int	O
match	(*(int),*(int),*(int),int,int)->(int)
(	O
const	O
wchar_t	int
*	O
s	*(int)
,	O
const	O
wchar_t	int
*	O
p	*(*(int))
,	O
wchar_t	int
*	O
out	*(int)
,	O
int	O
Case	char
,	O
int	O
length	int
)	O
{	O
int	O
(	O
*	O
compfn	*((int,int)->(int))
)	O
(	O
wchar_t	int
a	int
,	O
wchar_t	int
b	int
)	O
;	O
if	O
(	O
Case	char
)	O
compfn	*((int,int)->(int))
=	O
casecmp	(int,int)->(int)
;	O
else	O
compfn	*((int,int)->(int))
=	O
casecmp	(int,int)->(int)
;	O
return	O
_match	(*(int),*(int),*(int),int,int,*((int,int)->(int)))->(int)
(	O
s	*(int)
,	O
p	*(*(int))
,	O
out	*(int)
,	O
Case	char
,	O
length	int
,	O
compfn	*((int,int)->(int))
)	O
;	O
}	O
