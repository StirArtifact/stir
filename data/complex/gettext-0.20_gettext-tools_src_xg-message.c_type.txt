static	O
void	O
set_format_flags_from_context	O
(	O
enum	O
is_format	enum(int,int,int,int,int,int)
is_format	enum(int,int,int,int,int,int)
[	O
NFORMATS	int
]	O
,	O
flag_context_ty	struct
context	struct(int,int,int,int,int,int)
,	O
const	O
char	O
*	O
string	*(char)
,	O
lex_pos_ty	struct
*	O
pos	struct(*(char),long)
,	O
const	O
char	O
*	O
pretty_msgstr	O
)	O
{	O
size_t	long
i	long
;	O
if	O
(	O
context	struct(int,int,int,int,int,int)
.	O
is_format1	int
!=	O
undecided	int
||	O
context	struct(int,int,int,int,int,int)
.	O
is_format2	int
!=	O
undecided	int
||	O
context	struct(int,int,int,int,int,int)
.	O
is_format3	int
!=	O
undecided	int
)	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NFORMATS	int
;	O
i	long
++	O
)	O
{	O
if	O
(	O
is_format	enum(int,int,int,int,int,int)
[	O
i	long
]	O
==	O
undecided	int
)	O
{	O
if	O
(	O
formatstring_parsers	O
[	O
i	long
]	O
==	O
current_formatstring_parser1	O
&&	O
context	struct(int,int,int,int,int,int)
.	O
is_format1	int
!=	O
undecided	int
)	O
is_format	enum(int,int,int,int,int,int)
[	O
i	long
]	O
=	O
(	O
enum	O
is_format	enum(int,int,int,int,int,int)
)	O
context	struct(int,int,int,int,int,int)
.	O
is_format1	int
;	O
if	O
(	O
formatstring_parsers	O
[	O
i	long
]	O
==	O
current_formatstring_parser2	O
&&	O
context	struct(int,int,int,int,int,int)
.	O
is_format2	int
!=	O
undecided	int
)	O
is_format	enum(int,int,int,int,int,int)
[	O
i	long
]	O
=	O
(	O
enum	O
is_format	enum(int,int,int,int,int,int)
)	O
context	struct(int,int,int,int,int,int)
.	O
is_format2	int
;	O
if	O
(	O
formatstring_parsers	O
[	O
i	long
]	O
==	O
current_formatstring_parser3	O
&&	O
context	struct(int,int,int,int,int,int)
.	O
is_format3	int
!=	O
undecided	int
)	O
is_format	enum(int,int,int,int,int,int)
[	O
i	long
]	O
=	O
(	O
enum	O
is_format	enum(int,int,int,int,int,int)
)	O
context	struct(int,int,int,int,int,int)
.	O
is_format3	int
;	O
}	O
if	O
(	O
possible_format_p	(enum(int,int,int,int,int,int))->(bool)
(	O
is_format	enum(int,int,int,int,int,int)
[	O
i	long
]	O
)	O
)	O
{	O
struct	O
formatstring_parser	O
*	O
parser	O
=	O
formatstring_parsers	O
[	O
i	long
]	O
;	O
char	O
*	O
invalid_reason	O
=	O
NULL	O
;	O
void	O
*	O
descr	O
=	O
parser	O
->	O
parse	O
(	O
string	*(char)
,	O
false	O
,	O
NULL	O
,	O
&	O
invalid_reason	O
)	O
;	O
if	O
(	O
descr	O
!=	O
NULL	O
)	O
parser	O
->	O
free	(*(void))->(void)
(	O
descr	O
)	O
;	O
else	O
{	O
if	O
(	O
is_format	enum(int,int,int,int,int,int)
[	O
i	long
]	O
!=	O
possible	int
)	O
{	O
char	O
buffer	O
[	O
21	int
]	O
;	O
error_with_progname	bool
=	O
false	O
;	O
if	O
(	O
pos	struct(*(char),long)
->	O
line_number	long
==	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
)	O
buffer	O
[	O
0	int
]	O
=	O
'\0'	O
;	O
else	O
sprintf	(*(char),*(char))->(int)
(	O
buffer	O
,	O
":%ld"	*(char)
,	O
(	O
long	O
)	O
pos	struct(*(char),long)
->	O
line_number	long
)	O
;	O
multiline_warning	O
(	O
xasprintf	O
(	O
_	O
(	O
"%s%s: warning: "	*(char)
)	O
,	O
pos	struct(*(char),long)
->	O
file_name	*(char)
,	O
buffer	O
)	O
,	O
xasprintf	O
(	O
is_format	enum(int,int,int,int,int,int)
[	O
i	long
]	O
==	O
yes_according_to_context	int
?	O
_	O
(	O
"Although being used in a format string position, the %s is not a valid %s format string. Reason: %s\n"	*(char)
)	O
:	O
_	O
(	O
"Although declared as such, the %s is not a valid %s format string. Reason: %s\n"	*(char)
)	O
,	O
pretty_msgstr	O
,	O
format_language_pretty	array(*(char))
[	O
i	long
]	O
,	O
invalid_reason	O
)	O
)	O
;	O
error_with_progname	bool
=	O
true	O
;	O
}	O
is_format	enum(int,int,int,int,int,int)
[	O
i	long
]	O
=	O
impossible	int
;	O
free	(*(void))->(void)
(	O
invalid_reason	O
)	O
;	O
}	O
}	O
}	O
}	O
static	O
void	O
warn_format_string	O
(	O
enum	O
is_format	enum(int,int,int,int,int,int)
is_format	enum(int,int,int,int,int,int)
[	O
NFORMATS	int
]	O
,	O
const	O
char	O
*	O
string	*(char)
,	O
lex_pos_ty	struct
*	O
pos	struct(*(char),long)
,	O
const	O
char	O
*	O
pretty_msgstr	O
)	O
{	O
if	O
(	O
possible_format_p	(enum(int,int,int,int,int,int))->(bool)
(	O
is_format	enum(int,int,int,int,int,int)
[	O
format_python	int
]	O
)	O
&&	O
get_python_format_unnamed_arg_count	O
(	O
string	*(char)
)	O
>	O
1	int
)	O
{	O
char	O
buffer	O
[	O
21	int
]	O
;	O
error_with_progname	bool
=	O
false	O
;	O
if	O
(	O
pos	struct(*(char),long)
->	O
line_number	long
==	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
)	O
buffer	O
[	O
0	int
]	O
=	O
'\0'	O
;	O
else	O
sprintf	(*(char),*(char))->(int)
(	O
buffer	O
,	O
":%ld"	*(char)
,	O
(	O
long	O
)	O
pos	struct(*(char),long)
->	O
line_number	long
)	O
;	O
multiline_warning	O
(	O
xasprintf	O
(	O
_	O
(	O
"%s%s: warning: "	*(char)
)	O
,	O
pos	struct(*(char),long)
->	O
file_name	*(char)
,	O
buffer	O
)	O
,	O
xasprintf	O
(	O
_	O
(	O
"'%s' format string with unnamed arguments cannot be properly localized:\nThe translator cannot reorder the arguments.\nPlease consider using a format string with named arguments,\nand a mapping instead of a tuple for the arguments.\n"	*(char)
)	O
,	O
pretty_msgstr	O
)	O
)	O
;	O
error_with_progname	bool
=	O
true	O
;	O
}	O
}	O
message_ty	struct
*	O
remember_a_message	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char),*(char),bool,struct(int,int,int,int,int,int),*(struct(*(char),long)),*(char),*(struct(int,struct(*(*`),long,long))),bool)->(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))
(	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
char	O
*	O
msgctxt	*(char)
,	O
char	O
*	O
msgid	*(char)
,	O
bool	bool
is_utf8	bool
,	O
flag_context_ty	struct
context	struct(int,int,int,int,int,int)
,	O
lex_pos_ty	struct
*	O
pos	struct(*(char),long)
,	O
const	O
char	O
*	O
extracted_comment	*(char)
,	O
refcounted_string_list_ty	struct
*	O
comment	*(struct(*(*(char)),long,long))
,	O
bool	bool
comment_is_utf8	bool
)	O
{	O
enum	O
is_format	enum(int,int,int,int,int,int)
is_format	enum(int,int,int,int,int,int)
[	O
NFORMATS	int
]	O
;	O
struct	O
argument_range	struct(int,int)
range	struct(int,int)
;	O
enum	O
is_wrap	O
do_wrap	enum(int,int,int,int,int,int)
;	O
enum	O
is_syntax_check	O
do_syntax_check	array(enum(int,int,int,int,int,int))
[	O
NSYNTAXCHECKS	int
]	O
;	O
message_ty	struct
*	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
;	O
char	O
*	O
msgstr	*(char)
;	O
size_t	long
i	long
;	O
if	O
(	O
exclude	O
!=	O
NULL	O
&&	O
message_list_search	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char),*(char))->(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))
(	O
exclude	O
,	O
msgctxt	*(char)
,	O
msgid	*(char)
)	O
!=	O
NULL	O
)	O
{	O
xgettext_comment_reset	O
(	O
)	O
;	O
savable_comment_reset	O
(	O
)	O
;	O
if	O
(	O
msgctxt	*(char)
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
msgctxt	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
msgid	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
savable_comment_to_xgettext_comment	O
(	O
comment	*(struct(*(*(char)),long,long))
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NFORMATS	int
;	O
i	long
++	O
)	O
is_format	enum(int,int,int,int,int,int)
[	O
i	long
]	O
=	O
undecided	int
;	O
range	struct(int,int)
.	O
min	int
=	O
-	O
1	int
;	O
range	struct(int,int)
.	O
max	int
=	O
-	O
1	int
;	O
do_wrap	enum(int,int,int,int,int,int)
=	O
undecided	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NSYNTAXCHECKS	int
;	O
i	long
++	O
)	O
do_syntax_check	array(enum(int,int,int,int,int,int))
[	O
i	long
]	O
=	O
undecided	int
;	O
if	O
(	O
!	O
is_utf8	bool
)	O
{	O
if	O
(	O
msgctxt	*(char)
!=	O
NULL	O
)	O
CONVERT_STRING	O
(	O
msgctxt	*(char)
,	O
lc_string	int
)	O
;	O
CONVERT_STRING	O
(	O
msgid	*(char)
,	O
lc_string	int
)	O
;	O
}	O
if	O
(	O
msgctxt	*(char)
==	O
NULL	O
&&	O
msgid	*(char)
[	O
0	int
]	O
==	O
'\0'	O
&&	O
!	O
xgettext_omit_header	O
)	O
{	O
char	O
buffer	O
[	O
21	int
]	O
;	O
error_with_progname	bool
=	O
false	O
;	O
if	O
(	O
pos	struct(*(char),long)
->	O
line_number	long
==	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
)	O
buffer	O
[	O
0	int
]	O
=	O
'\0'	O
;	O
else	O
sprintf	(*(char),*(char))->(int)
(	O
buffer	O
,	O
":%ld"	*(char)
,	O
(	O
long	O
)	O
pos	struct(*(char),long)
->	O
line_number	long
)	O
;	O
multiline_warning	O
(	O
xasprintf	O
(	O
_	O
(	O
"%s%s: warning: "	*(char)
)	O
,	O
pos	struct(*(char),long)
->	O
file_name	*(char)
,	O
buffer	O
)	O
,	O
xstrdup	O
(	O
_	O
(	O
"Empty msgid.  It is reserved by GNU gettext:\ngettext(\"\") returns the header entry with\nmeta information, not the empty string.\n"	*(char)
)	O
)	O
)	O
;	O
error_with_progname	bool
=	O
true	O
;	O
}	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
=	O
message_list_search	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char),*(char))->(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
msgctxt	*(char)
,	O
msgid	*(char)
)	O
;	O
if	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
!=	O
NULL	O
)	O
{	O
if	O
(	O
msgctxt	*(char)
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
msgctxt	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
msgid	*(char)
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NFORMATS	int
;	O
i	long
++	O
)	O
is_format	enum(int,int,int,int,int,int)
[	O
i	long
]	O
=	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_format	enum(int,int,int,int,int,int)
[	O
i	long
]	O
;	O
do_wrap	enum(int,int,int,int,int,int)
=	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
do_wrap	enum(int,int,int,int,int,int)
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NSYNTAXCHECKS	int
;	O
i	long
++	O
)	O
do_syntax_check	array(enum(int,int,int,int,int,int))
[	O
i	long
]	O
=	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
do_syntax_check	array(enum(int,int,int,int,int,int))
[	O
i	long
]	O
;	O
}	O
else	O
{	O
if	O
(	O
msgstr_prefix	O
)	O
msgstr	*(char)
=	O
xasprintf	O
(	O
"%s%s%s"	*(char)
,	O
msgstr_prefix	O
,	O
msgid	*(char)
,	O
msgstr_suffix	O
)	O
;	O
else	O
msgstr	*(char)
=	O
""	*(char)
;	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
=	O
message_alloc	(*(char),*(char),*(char),*(char),long,*(struct(*(char),long)))->(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))
(	O
msgctxt	*(char)
,	O
msgid	*(char)
,	O
NULL	O
,	O
msgstr	*(char)
,	O
strlen	(*(char))->(long)
(	O
msgstr	*(char)
)	O
+	O
1	int
,	O
pos	struct(*(char),long)
)	O
;	O
message_list_append	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))->(void)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
)	O
;	O
}	O
set_format_flags_from_context	O
(	O
is_format	enum(int,int,int,int,int,int)
,	O
context	struct(int,int,int,int,int,int)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgid	*(char)
,	O
pos	struct(*(char),long)
,	O
"msgid"	*(char)
)	O
;	O
{	O
size_t	long
nitems_before	O
;	O
size_t	long
nitems_after	O
;	O
int	O
j	O
;	O
bool	bool
add_all_remaining_comments	O
;	O
const	O
char	O
*	O
comment_tag_prefix	O
=	O
""	*(char)
;	O
size_t	long
comment_tag_prefix_length	O
=	O
0	int
;	O
nitems_before	O
=	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
comment_dot	*(struct(*(*(char)),long,long))
!=	O
NULL	O
?	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
comment_dot	*(struct(*(*(char)),long,long))
->	O
nitems	long
:	O
0	int
)	O
;	O
if	O
(	O
extracted_comment	*(char)
!=	O
NULL	O
)	O
{	O
char	O
*	O
copy	O
=	O
xstrdup	O
(	O
extracted_comment	*(char)
)	O
;	O
char	O
*	O
rest	O
;	O
rest	O
=	O
copy	O
;	O
while	O
(	O
*	O
rest	O
!=	O
'\0'	O
)	O
{	O
char	O
*	O
newline	O
=	O
strchr	(*(char),int)->(*(char))
(	O
rest	O
,	O
'\n'	O
)	O
;	O
if	O
(	O
newline	O
!=	O
NULL	O
)	O
{	O
*	O
newline	O
=	O
'\0'	O
;	O
message_comment_dot_append	(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))),*(char))->(void)
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
rest	O
)	O
;	O
rest	O
=	O
newline	O
+	O
1	int
;	O
}	O
else	O
{	O
message_comment_dot_append	(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))),*(char))->(void)
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
rest	O
)	O
;	O
break	O
;	O
}	O
}	O
free	(*(void))->(void)
(	O
copy	O
)	O
;	O
}	O
add_all_remaining_comments	O
=	O
add_all_comments	O
;	O
for	O
(	O
j	O
=	O
0	int
;	O
;	O
++	O
j	O
)	O
{	O
const	O
char	O
*	O
s	*(char)
=	O
xgettext_comment	O
(	O
j	O
)	O
;	O
const	O
char	O
*	O
t	O
;	O
if	O
(	O
s	*(char)
==	O
NULL	O
)	O
break	O
;	O
if	O
(	O
!	O
comment_is_utf8	bool
)	O
CONVERT_STRING	O
(	O
s	*(char)
,	O
lc_comment	int
)	O
;	O
if	O
(	O
(	O
t	O
=	O
c_strstr	(*(char),*(char))->(*(char))
(	O
s	*(char)
,	O
"xgettext:"	*(char)
)	O
)	O
!=	O
NULL	O
)	O
{	O
bool	bool
tmp_fuzzy	O
;	O
enum	O
is_format	enum(int,int,int,int,int,int)
tmp_format	O
[	O
NFORMATS	int
]	O
;	O
struct	O
argument_range	struct(int,int)
tmp_range	O
;	O
enum	O
is_wrap	O
tmp_wrap	O
;	O
enum	O
is_syntax_check	O
tmp_syntax_check	O
[	O
NSYNTAXCHECKS	int
]	O
;	O
bool	bool
interesting	O
;	O
t	O
+=	O
strlen	(*(char))->(long)
(	O
"xgettext:"	*(char)
)	O
;	O
po_parse_comment_special	O
(	O
t	O
,	O
&	O
tmp_fuzzy	O
,	O
tmp_format	O
,	O
&	O
tmp_range	O
,	O
&	O
tmp_wrap	O
,	O
tmp_syntax_check	O
)	O
;	O
interesting	O
=	O
false	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NFORMATS	int
;	O
i	long
++	O
)	O
if	O
(	O
tmp_format	O
[	O
i	long
]	O
!=	O
undecided	int
)	O
{	O
is_format	enum(int,int,int,int,int,int)
[	O
i	long
]	O
=	O
tmp_format	O
[	O
i	long
]	O
;	O
interesting	O
=	O
true	O
;	O
}	O
if	O
(	O
has_range_p	O
(	O
tmp_range	O
)	O
)	O
{	O
range	struct(int,int)
=	O
tmp_range	O
;	O
interesting	O
=	O
true	O
;	O
}	O
if	O
(	O
tmp_wrap	O
!=	O
undecided	int
)	O
{	O
do_wrap	enum(int,int,int,int,int,int)
=	O
tmp_wrap	O
;	O
interesting	O
=	O
true	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NSYNTAXCHECKS	int
;	O
i	long
++	O
)	O
if	O
(	O
tmp_syntax_check	O
[	O
i	long
]	O
!=	O
undecided	int
)	O
{	O
do_syntax_check	array(enum(int,int,int,int,int,int))
[	O
i	long
]	O
=	O
tmp_syntax_check	O
[	O
i	long
]	O
;	O
interesting	O
=	O
true	O
;	O
}	O
if	O
(	O
interesting	O
)	O
continue	O
;	O
}	O
if	O
(	O
!	O
add_all_remaining_comments	O
&&	O
comment_tag	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
(	O
t	O
=	O
c_strstr	(*(char),*(char))->(*(char))
(	O
s	*(char)
,	O
comment_tag	O
)	O
)	O
!=	O
NULL	O
)	O
{	O
add_all_remaining_comments	O
=	O
true	O
;	O
comment_tag_prefix	O
=	O
s	*(char)
;	O
comment_tag_prefix_length	O
=	O
t	O
-	O
s	*(char)
;	O
}	O
}	O
if	O
(	O
add_all_remaining_comments	O
)	O
{	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
s	*(char)
,	O
comment_tag_prefix	O
,	O
comment_tag_prefix_length	O
)	O
==	O
0	int
)	O
s	*(char)
+=	O
comment_tag_prefix_length	O
;	O
message_comment_dot_append	(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))),*(char))->(void)
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
s	*(char)
)	O
;	O
}	O
}	O
nitems_after	O
=	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
comment_dot	*(struct(*(*(char)),long,long))
!=	O
NULL	O
?	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
comment_dot	*(struct(*(*(char)),long,long))
->	O
nitems	long
:	O
0	int
)	O
;	O
if	O
(	O
nitems_before	O
<	O
nitems_after	O
)	O
{	O
size_t	long
added	O
=	O
nitems_after	O
-	O
nitems_before	O
;	O
if	O
(	O
added	O
<=	O
nitems_before	O
)	O
{	O
bool	bool
repeated	O
=	O
true	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
added	O
;	O
i	long
++	O
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
comment_dot	*(struct(*(*(char)),long,long))
->	O
item	*(*(char))
[	O
nitems_before	O
-	O
added	O
+	O
i	long
]	O
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
comment_dot	*(struct(*(*(char)),long,long))
->	O
item	*(*(char))
[	O
nitems_before	O
+	O
i	long
]	O
)	O
!=	O
0	int
)	O
{	O
repeated	O
=	O
false	O
;	O
break	O
;	O
}	O
if	O
(	O
repeated	O
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
added	O
;	O
i	long
++	O
)	O
free	(*(void))->(void)
(	O
(	O
char	O
*	O
)	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
comment_dot	*(struct(*(*(char)),long,long))
->	O
item	*(*(char))
[	O
nitems_before	O
+	O
i	long
]	O
)	O
;	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
comment_dot	*(struct(*(*(char)),long,long))
->	O
nitems	long
=	O
nitems_before	O
;	O
}	O
}	O
}	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NFORMATS	int
;	O
i	long
++	O
)	O
{	O
if	O
(	O
is_format	enum(int,int,int,int,int,int)
[	O
i	long
]	O
==	O
undecided	int
&&	O
(	O
formatstring_parsers	O
[	O
i	long
]	O
==	O
current_formatstring_parser1	O
||	O
formatstring_parsers	O
[	O
i	long
]	O
==	O
current_formatstring_parser2	O
||	O
formatstring_parsers	O
[	O
i	long
]	O
==	O
current_formatstring_parser3	O
)	O
&&	O
!	O
(	O
i	long
==	O
format_c	int
&&	O
possible_format_p	(enum(int,int,int,int,int,int))->(bool)
(	O
is_format	enum(int,int,int,int,int,int)
[	O
format_objc	int
]	O
)	O
)	O
&&	O
!	O
(	O
i	long
==	O
format_objc	int
&&	O
possible_format_p	(enum(int,int,int,int,int,int))->(bool)
(	O
is_format	enum(int,int,int,int,int,int)
[	O
format_c	int
]	O
)	O
)	O
&&	O
!	O
(	O
i	long
==	O
format_c	int
&&	O
(	O
possible_format_p	(enum(int,int,int,int,int,int))->(bool)
(	O
is_format	enum(int,int,int,int,int,int)
[	O
format_qt	int
]	O
)	O
||	O
possible_format_p	(enum(int,int,int,int,int,int))->(bool)
(	O
is_format	enum(int,int,int,int,int,int)
[	O
format_qt_plural	int
]	O
)	O
||	O
possible_format_p	(enum(int,int,int,int,int,int))->(bool)
(	O
is_format	enum(int,int,int,int,int,int)
[	O
format_kde	int
]	O
)	O
||	O
possible_format_p	(enum(int,int,int,int,int,int))->(bool)
(	O
is_format	enum(int,int,int,int,int,int)
[	O
format_kde_kuit	int
]	O
)	O
||	O
possible_format_p	(enum(int,int,int,int,int,int))->(bool)
(	O
is_format	enum(int,int,int,int,int,int)
[	O
format_boost	int
]	O
)	O
)	O
)	O
&&	O
!	O
(	O
i	long
==	O
format_kde	int
&&	O
possible_format_p	(enum(int,int,int,int,int,int))->(bool)
(	O
is_format	enum(int,int,int,int,int,int)
[	O
format_kde_kuit	int
]	O
)	O
)	O
&&	O
!	O
(	O
i	long
==	O
format_kde_kuit	int
&&	O
possible_format_p	(enum(int,int,int,int,int,int))->(bool)
(	O
is_format	enum(int,int,int,int,int,int)
[	O
format_kde	int
]	O
)	O
)	O
)	O
{	O
struct	O
formatstring_parser	O
*	O
parser	O
=	O
formatstring_parsers	O
[	O
i	long
]	O
;	O
char	O
*	O
invalid_reason	O
=	O
NULL	O
;	O
void	O
*	O
descr	O
=	O
parser	O
->	O
parse	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgid	*(char)
,	O
false	O
,	O
NULL	O
,	O
&	O
invalid_reason	O
)	O
;	O
if	O
(	O
descr	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
parser	O
->	O
get_number_of_directives	O
(	O
descr	O
)	O
>	O
0	int
&&	O
!	O
(	O
parser	O
->	O
is_unlikely_intentional	O
!=	O
NULL	O
&&	O
parser	O
->	O
is_unlikely_intentional	O
(	O
descr	O
)	O
)	O
)	O
is_format	enum(int,int,int,int,int,int)
[	O
i	long
]	O
=	O
possible	int
;	O
parser	O
->	O
free	(*(void))->(void)
(	O
descr	O
)	O
;	O
}	O
else	O
{	O
is_format	enum(int,int,int,int,int,int)
[	O
i	long
]	O
=	O
impossible	int
;	O
free	(*(void))->(void)
(	O
invalid_reason	O
)	O
;	O
}	O
}	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_format	enum(int,int,int,int,int,int)
[	O
i	long
]	O
=	O
is_format	enum(int,int,int,int,int,int)
[	O
i	long
]	O
;	O
}	O
if	O
(	O
has_range_p	O
(	O
range	struct(int,int)
)	O
)	O
{	O
if	O
(	O
has_range_p	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
range	struct(int,int)
)	O
)	O
{	O
if	O
(	O
range	struct(int,int)
.	O
min	int
<	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
range	struct(int,int)
.	O
min	int
)	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
range	struct(int,int)
.	O
min	int
=	O
range	struct(int,int)
.	O
min	int
;	O
if	O
(	O
range	struct(int,int)
.	O
max	int
>	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
range	struct(int,int)
.	O
max	int
)	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
range	struct(int,int)
.	O
max	int
=	O
range	struct(int,int)
.	O
max	int
;	O
}	O
else	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
range	struct(int,int)
=	O
range	struct(int,int)
;	O
}	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
do_wrap	enum(int,int,int,int,int,int)
=	O
do_wrap	enum(int,int,int,int,int,int)
==	O
no	int
?	O
no	int
:	O
yes	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NSYNTAXCHECKS	int
;	O
i	long
++	O
)	O
{	O
if	O
(	O
do_syntax_check	array(enum(int,int,int,int,int,int))
[	O
i	long
]	O
==	O
undecided	int
)	O
do_syntax_check	array(enum(int,int,int,int,int,int))
[	O
i	long
]	O
=	O
default_syntax_check	O
[	O
i	long
]	O
==	O
yes	int
?	O
yes	int
:	O
no	int
;	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
do_syntax_check	array(enum(int,int,int,int,int,int))
[	O
i	long
]	O
=	O
do_syntax_check	array(enum(int,int,int,int,int,int))
[	O
i	long
]	O
;	O
}	O
warn_format_string	O
(	O
is_format	enum(int,int,int,int,int,int)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgid	*(char)
,	O
pos	struct(*(char),long)
,	O
"msgid"	*(char)
)	O
;	O
message_comment_filepos	(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))),*(char),long)->(void)
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
pos	struct(*(char),long)
->	O
file_name	*(char)
,	O
pos	struct(*(char),long)
->	O
line_number	long
)	O
;	O
xgettext_comment_reset	O
(	O
)	O
;	O
savable_comment_reset	O
(	O
)	O
;	O
return	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
;	O
}	O
void	O
remember_a_message_plural	(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))),*(char),bool,struct(int,int,int,int,int,int),*(struct(*(char),long)),*(struct(int,struct(*(*`),long,long))),bool)->(void)
(	O
message_ty	struct
*	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
char	O
*	O
string	*(char)
,	O
bool	bool
is_utf8	bool
,	O
flag_context_ty	struct
context	struct(int,int,int,int,int,int)
,	O
lex_pos_ty	struct
*	O
pos	struct(*(char),long)
,	O
refcounted_string_list_ty	struct
*	O
comment	*(struct(*(*(char)),long,long))
,	O
bool	bool
comment_is_utf8	bool
)	O
{	O
char	O
*	O
msgid_plural	*(char)
;	O
char	O
*	O
msgstr1	O
;	O
size_t	long
msgstr1_len	O
;	O
char	O
*	O
msgstr	*(char)
;	O
size_t	long
i	long
;	O
msgid_plural	*(char)
=	O
string	*(char)
;	O
savable_comment_to_xgettext_comment	O
(	O
comment	*(struct(*(*(char)),long,long))
)	O
;	O
if	O
(	O
!	O
is_utf8	bool
)	O
CONVERT_STRING	O
(	O
msgid_plural	*(char)
,	O
lc_string	int
)	O
;	O
if	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgid_plural	*(char)
==	O
NULL	O
)	O
{	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgid_plural	*(char)
=	O
msgid_plural	*(char)
;	O
if	O
(	O
msgstr_prefix	O
)	O
msgstr1	O
=	O
xasprintf	O
(	O
"%s%s%s"	*(char)
,	O
msgstr_prefix	O
,	O
msgid_plural	*(char)
,	O
msgstr_suffix	O
)	O
;	O
else	O
msgstr1	O
=	O
""	*(char)
;	O
msgstr1_len	O
=	O
strlen	(*(char))->(long)
(	O
msgstr1	O
)	O
+	O
1	int
;	O
msgstr	*(char)
=	O
XNMALLOC	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr_len	long
+	O
msgstr1_len	O
,	O
char	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
msgstr	*(char)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr	*(char)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr_len	long
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
msgstr	*(char)
+	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr_len	long
,	O
msgstr1	O
,	O
msgstr1_len	O
)	O
;	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr	*(char)
=	O
msgstr	*(char)
;	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr_len	long
=	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr_len	long
+	O
msgstr1_len	O
;	O
if	O
(	O
msgstr_prefix	O
)	O
free	(*(void))->(void)
(	O
msgstr1	O
)	O
;	O
set_format_flags_from_context	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_format	enum(int,int,int,int,int,int)
,	O
context	struct(int,int,int,int,int,int)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgid_plural	*(char)
,	O
pos	struct(*(char),long)
,	O
"msgid_plural"	*(char)
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NFORMATS	int
;	O
i	long
++	O
)	O
if	O
(	O
(	O
formatstring_parsers	O
[	O
i	long
]	O
==	O
current_formatstring_parser1	O
||	O
formatstring_parsers	O
[	O
i	long
]	O
==	O
current_formatstring_parser2	O
||	O
formatstring_parsers	O
[	O
i	long
]	O
==	O
current_formatstring_parser3	O
)	O
&&	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_format	enum(int,int,int,int,int,int)
[	O
i	long
]	O
==	O
undecided	int
||	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_format	enum(int,int,int,int,int,int)
[	O
i	long
]	O
==	O
possible	int
)	O
&&	O
!	O
(	O
i	long
==	O
format_c	int
&&	O
possible_format_p	(enum(int,int,int,int,int,int))->(bool)
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_format	enum(int,int,int,int,int,int)
[	O
format_objc	int
]	O
)	O
)	O
&&	O
!	O
(	O
i	long
==	O
format_objc	int
&&	O
possible_format_p	(enum(int,int,int,int,int,int))->(bool)
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_format	enum(int,int,int,int,int,int)
[	O
format_c	int
]	O
)	O
)	O
&&	O
!	O
(	O
i	long
==	O
format_c	int
&&	O
(	O
possible_format_p	(enum(int,int,int,int,int,int))->(bool)
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_format	enum(int,int,int,int,int,int)
[	O
format_qt	int
]	O
)	O
||	O
possible_format_p	(enum(int,int,int,int,int,int))->(bool)
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_format	enum(int,int,int,int,int,int)
[	O
format_qt_plural	int
]	O
)	O
||	O
possible_format_p	(enum(int,int,int,int,int,int))->(bool)
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_format	enum(int,int,int,int,int,int)
[	O
format_kde	int
]	O
)	O
||	O
possible_format_p	(enum(int,int,int,int,int,int))->(bool)
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_format	enum(int,int,int,int,int,int)
[	O
format_kde_kuit	int
]	O
)	O
||	O
possible_format_p	(enum(int,int,int,int,int,int))->(bool)
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_format	enum(int,int,int,int,int,int)
[	O
format_boost	int
]	O
)	O
)	O
)	O
&&	O
!	O
(	O
i	long
==	O
format_kde	int
&&	O
possible_format_p	(enum(int,int,int,int,int,int))->(bool)
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_format	enum(int,int,int,int,int,int)
[	O
format_kde_kuit	int
]	O
)	O
)	O
&&	O
!	O
(	O
i	long
==	O
format_kde_kuit	int
&&	O
possible_format_p	(enum(int,int,int,int,int,int))->(bool)
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_format	enum(int,int,int,int,int,int)
[	O
format_kde	int
]	O
)	O
)	O
)	O
{	O
struct	O
formatstring_parser	O
*	O
parser	O
=	O
formatstring_parsers	O
[	O
i	long
]	O
;	O
char	O
*	O
invalid_reason	O
=	O
NULL	O
;	O
void	O
*	O
descr	O
=	O
parser	O
->	O
parse	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgid_plural	*(char)
,	O
false	O
,	O
NULL	O
,	O
&	O
invalid_reason	O
)	O
;	O
if	O
(	O
descr	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
parser	O
->	O
get_number_of_directives	O
(	O
descr	O
)	O
>	O
0	int
&&	O
!	O
(	O
parser	O
->	O
is_unlikely_intentional	O
!=	O
NULL	O
&&	O
parser	O
->	O
is_unlikely_intentional	O
(	O
descr	O
)	O
)	O
)	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_format	enum(int,int,int,int,int,int)
[	O
i	long
]	O
=	O
possible	int
;	O
parser	O
->	O
free	(*(void))->(void)
(	O
descr	O
)	O
;	O
}	O
else	O
{	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_format	enum(int,int,int,int,int,int)
[	O
i	long
]	O
=	O
impossible	int
;	O
free	(*(void))->(void)
(	O
invalid_reason	O
)	O
;	O
}	O
}	O
warn_format_string	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_format	enum(int,int,int,int,int,int)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgid_plural	*(char)
,	O
pos	struct(*(char),long)
,	O
"msgid_plural"	*(char)
)	O
;	O
}	O
else	O
free	(*(void))->(void)
(	O
msgid_plural	*(char)
)	O
;	O
xgettext_comment_reset	O
(	O
)	O
;	O
savable_comment_reset	O
(	O
)	O
;	O
}	O
