typedef	O
struct	O
{	O
EDMAT_BUFFER	struct(long,long,*(void))
buf	*(struct(long,long,*(void)))
;	O
EUint32	long
ptr	long
;	O
}	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
;	O
ESint32	int
EDMAPROC	O
MEMORY_STREAMopenZZrS32	(int,*(char),*(char))->(int)
(	O
OBJID	int
IdObj	int
,	O
EPChar	*(char)
name	*(char)
,	O
EPChar	*(char)
mode	*(char)
)	O
{	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
*	O
m	*(struct(struct(long,long,*(void)),long))
;	O
m	*(struct(struct(long,long,*(void)),long))
=	O
(	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"%s"	*(char)
,	O
"'open' not supported on memory streams"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
MEMORY_STREAMcloserS32	(int)->(int)
(	O
OBJID	int
IdObj	int
)	O
{	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
*	O
m	*(struct(struct(long,long,*(void)),long))
;	O
m	*(struct(struct(long,long,*(void)),long))
=	O
(	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"%s"	*(char)
,	O
"'close' not supported on memory streams"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
MEMORY_STREAMreadsAsS32rS32	(int,*(struct(long,long,*(void))),*(long))->(int)
(	O
OBJID	int
IdObj	int
,	O
EDMAT_BUFFER	struct(long,long,*(void))
*	O
b	*(struct(long,long,*(void)))
,	O
EPSint32	*(long)
len	int
)	O
{	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
*	O
m	*(struct(struct(long,long,*(void)),long))
;	O
m	*(struct(struct(long,long,*(void)),long))
=	O
(	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
if	O
(	O
*	O
len	int
>	O
(	O
m	*(struct(struct(long,long,*(void)),long))
->	O
buf	*(struct(long,long,*(void)))
.	O
Size	long
-	O
m	*(struct(struct(long,long,*(void)),long))
->	O
ptr	long
)	O
)	O
*	O
len	int
=	O
m	*(struct(struct(long,long,*(void)),long))
->	O
buf	*(struct(long,long,*(void)))
.	O
Size	long
-	O
m	*(struct(struct(long,long,*(void)),long))
->	O
ptr	long
;	O
if	O
(	O
*	O
len	int
<=	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
b	*(struct(long,long,*(void)))
->	O
Size	long
==	O
0	int
)	O
{	O
edma_buffer_alloc	(*(struct(long,long,*(void))),long)->(int)
(	O
b	*(struct(long,long,*(void)))
,	O
*	O
len	int
)	O
;	O
}	O
else	O
if	O
(	O
b	*(struct(long,long,*(void)))
->	O
Size	long
<	O
*	O
len	int
)	O
{	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"** ERROR ** : Not enought space output buffer"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
memcpy	(*(void),*(void),int)->(*(void))
(	O
b	*(struct(long,long,*(void)))
->	O
dat	*(void)
,	O
m	*(struct(struct(long,long,*(void)),long))
->	O
buf	*(struct(long,long,*(void)))
.	O
dat	*(void)
+	O
m	*(struct(struct(long,long,*(void)),long))
->	O
ptr	long
,	O
*	O
len	int
)	O
;	O
m	*(struct(struct(long,long,*(void)),long))
->	O
ptr	long
+=	O
*	O
len	int
;	O
return	O
*	O
len	int
;	O
}	O
ESint32	int
EDMAPROC	O
MEMORY_STREAMwriteAsS32rS32	(int,struct(long,long,*(void)),*(long))->(int)
(	O
OBJID	int
IdObj	int
,	O
EDMAT_BUFFER	struct(long,long,*(void))
b	*(struct(long,long,*(void)))
,	O
EPSint32	*(long)
len	int
)	O
{	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
*	O
m	*(struct(struct(long,long,*(void)),long))
;	O
ESint32	int
new_size	int
,	O
old_size	int
;	O
m	*(struct(struct(long,long,*(void)),long))
=	O
(	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
if	O
(	O
*	O
len	int
<=	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
*	O
len	int
>	O
b	*(struct(long,long,*(void)))
.	O
Size	long
)	O
*	O
len	int
=	O
b	*(struct(long,long,*(void)))
.	O
Size	long
;	O
if	O
(	O
(	O
m	*(struct(struct(long,long,*(void)),long))
->	O
buf	*(struct(long,long,*(void)))
.	O
Size	long
-	O
m	*(struct(struct(long,long,*(void)),long))
->	O
ptr	long
)	O
<	O
*	O
len	int
)	O
{	O
old_size	int
=	O
m	*(struct(struct(long,long,*(void)),long))
->	O
buf	*(struct(long,long,*(void)))
.	O
Size	long
;	O
new_size	int
=	O
m	*(struct(struct(long,long,*(void)),long))
->	O
ptr	long
+	O
*	O
len	int
+	O
1	int
;	O
if	O
(	O
(	O
edma_buffer_realloc	(*(struct(long,long,*(void))),long)->(int)
(	O
&	O
m	*(struct(struct(long,long,*(void)),long))
->	O
buf	*(struct(long,long,*(void)))
,	O
new_size	int
)	O
)	O
==	O
-	O
1	int
)	O
{	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"** ERROR ** : Can't allocate more memory. Write failed"	*(char)
)	O
;	O
*	O
len	int
=	O
0	int
;	O
return	O
-	O
1	int
;	O
}	O
memset	(*(void),int,int)->(*(void))
(	O
m	*(struct(struct(long,long,*(void)),long))
->	O
buf	*(struct(long,long,*(void)))
.	O
dat	*(void)
+	O
old_size	int
,	O
0	int
,	O
new_size	int
-	O
old_size	int
)	O
;	O
}	O
memcpy	(*(void),*(void),int)->(*(void))
(	O
m	*(struct(struct(long,long,*(void)),long))
->	O
buf	*(struct(long,long,*(void)))
.	O
dat	*(void)
+	O
m	*(struct(struct(long,long,*(void)),long))
->	O
ptr	long
,	O
b	*(struct(long,long,*(void)))
.	O
dat	*(void)
,	O
*	O
len	int
)	O
;	O
m	*(struct(struct(long,long,*(void)),long))
->	O
ptr	long
+=	O
*	O
len	int
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
MEMORY_STREAMputsZS32rS32	(int,*(char),int)->(int)
(	O
OBJID	int
IdObj	int
,	O
EPChar	*(char)
s	*(char)
,	O
ESint32	int
len	int
)	O
{	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
*	O
m	*(struct(struct(long,long,*(void)),long))
;	O
m	*(struct(struct(long,long,*(void)),long))
=	O
(	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
MEMORY_STREAMputcCS32rS32	(int,char,int)->(int)
(	O
OBJID	int
IdObj	int
,	O
EChar	char
c	char
,	O
ESint32	int
len	int
)	O
{	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
*	O
m	*(struct(struct(long,long,*(void)),long))
;	O
m	*(struct(struct(long,long,*(void)),long))
=	O
(	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
MEMORY_STREAMgetssZsS32rS32	(int,*(char),*(long))->(int)
(	O
OBJID	int
IdObj	int
,	O
EPChar	*(char)
s	*(char)
,	O
EPSint32	*(long)
len	int
)	O
{	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
*	O
m	*(struct(struct(long,long,*(void)),long))
;	O
m	*(struct(struct(long,long,*(void)),long))
=	O
(	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
MEMORY_STREAMgetcsCrS32	(int,*(char))->(int)
(	O
OBJID	int
IdObj	int
,	O
EPChar	*(char)
c	char
)	O
{	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
*	O
m	*(struct(struct(long,long,*(void)),long))
;	O
m	*(struct(struct(long,long,*(void)),long))
=	O
(	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
MEMORY_STREAMflushrS32	(int)->(int)
(	O
OBJID	int
IdObj	int
)	O
{	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
*	O
m	*(struct(struct(long,long,*(void)),long))
;	O
m	*(struct(struct(long,long,*(void)),long))
=	O
(	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
MEMORY_STREAMseekS32ZrS32	(int,int,*(char))->(int)
(	O
OBJID	int
IdObj	int
,	O
ESint32	int
p	int
,	O
EPChar	*(char)
pos	*(char)
)	O
{	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
*	O
m	*(struct(struct(long,long,*(void)),long))
;	O
m	*(struct(struct(long,long,*(void)),long))
=	O
(	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
MEMORY_STREAMtellsS32rS32	(int,*(long))->(int)
(	O
OBJID	int
IdObj	int
,	O
EPSint32	*(long)
p	int
)	O
{	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
*	O
m	*(struct(struct(long,long,*(void)),long))
;	O
m	*(struct(struct(long,long,*(void)),long))
=	O
(	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
*	O
p	int
=	O
m	*(struct(struct(long,long,*(void)),long))
->	O
ptr	long
;	O
return	O
m	*(struct(struct(long,long,*(void)),long))
->	O
ptr	long
;	O
}	O
ESint32	int
EDMAPROC	O
MEMORY_STREAMrewindrS32	(int)->(int)
(	O
OBJID	int
IdObj	int
)	O
{	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
*	O
m	*(struct(struct(long,long,*(void)),long))
;	O
m	*(struct(struct(long,long,*(void)),long))
=	O
(	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
m	*(struct(struct(long,long,*(void)),long))
->	O
ptr	long
=	O
0	int
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
MEMORY_STREAMeofrS32	(int)->(int)
(	O
OBJID	int
IdObj	int
)	O
{	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
*	O
m	*(struct(struct(long,long,*(void)),long))
;	O
m	*(struct(struct(long,long,*(void)),long))
=	O
(	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
if	O
(	O
m	*(struct(struct(long,long,*(void)),long))
->	O
ptr	long
==	O
(	O
m	*(struct(struct(long,long,*(void)),long))
->	O
buf	*(struct(long,long,*(void)))
.	O
Size	long
-	O
1	int
)	O
)	O
return	O
1	int
;	O
else	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
MEMORY_STREAMerrorrS32	(int,int)->(int)
(	O
OBJID	int
IdObj	int
,	O
ESint32	int
err	int
)	O
{	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
*	O
m	*(struct(struct(long,long,*(void)),long))
;	O
m	*(struct(struct(long,long,*(void)),long))
=	O
(	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
MEMORY_STREAMLoadZsArS32	(int,*(char),*(struct(long,long,*(void))))->(int)
(	O
OBJID	int
IdObj	int
,	O
EPChar	*(char)
fname	*(char)
,	O
EDMAT_BUFFER	struct(long,long,*(void))
*	O
buf	*(struct(long,long,*(void)))
)	O
{	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
*	O
m	*(struct(struct(long,long,*(void)),long))
;	O
m	*(struct(struct(long,long,*(void)),long))
=	O
(	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"%s"	*(char)
,	O
"'Load' not supported on memory streams"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
MEMORY_STREAMSaveZArS32	(int,*(char),struct(long,long,*(void)))->(int)
(	O
OBJID	int
IdObj	int
,	O
EPChar	*(char)
fnmae	*(char)
,	O
EDMAT_BUFFER	struct(long,long,*(void))
buf	*(struct(long,long,*(void)))
)	O
{	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
*	O
m	*(struct(struct(long,long,*(void)),long))
;	O
m	*(struct(struct(long,long,*(void)),long))
=	O
(	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"%s"	*(char)
,	O
"'Save' not supported on memory streams"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
MEMORY_STREAMborn	(int)->(int)
(	O
OBJID	int
IdObj	int
)	O
{	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
*	O
m	*(struct(struct(long,long,*(void)),long))
;	O
m	*(struct(struct(long,long,*(void)),long))
=	O
(	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
m	*(struct(struct(long,long,*(void)),long))
->	O
ptr	long
=	O
0	int
;	O
memset	(*(void),int,int)->(*(void))
(	O
&	O
m	*(struct(struct(long,long,*(void)),long))
->	O
buf	*(struct(long,long,*(void)))
,	O
0	int
,	O
sizeof	O
(	O
EDMAT_BUFFER	struct(long,long,*(void))
)	O
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
MEMORY_STREAMrip	(int)->(int)
(	O
OBJID	int
IdObj	int
)	O
{	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
*	O
m	*(struct(struct(long,long,*(void)),long))
;	O
m	*(struct(struct(long,long,*(void)),long))
=	O
(	O
DtMEMORY_STREAM	struct(struct(long,long,*(void)),long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
edma_buffer_free	(*(struct(long,long,*(void))))->(int)
(	O
&	O
m	*(struct(struct(long,long,*(void)),long))
->	O
buf	*(struct(long,long,*(void)))
)	O
;	O
return	O
0	int
;	O
}	O
