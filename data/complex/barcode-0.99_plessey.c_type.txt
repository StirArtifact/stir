static	O
char	O
*	O
patterns	array(*(char))
[	O
]	O
=	O
{	O
"13"	*(char)
,	O
"31"	*(char)
}	O
;	O
static	O
char	O
alphabet	array(char)
[	O
]	O
=	O
"0123456789"	*(char)
"ABCDEF"	*(char)
;	O
static	O
char	O
*	O
fillers	array(*(char))
[	O
]	O
=	O
{	O
"031311331"	*(char)
,	O
"331311313"	*(char)
}	O
;	O
static	O
int	O
width	int
=	O
16	int
,	O
startpos	int
=	O
16	int
;	O
int	O
Barcode_pls_verify	(*(char))->(int)
(	O
char	O
*	O
text	*(char)
)	O
{	O
int	O
i	int
,	O
upper	int
=	O
0	int
,	O
lower	int
=	O
0	int
;	O
if	O
(	O
!	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
)	O
return	O
-	O
1	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
text	*(char)
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
!	O
strchr	(*(char),int)->(*(char))
(	O
alphabet	array(char)
,	O
toupper	(int)->(int)
(	O
text	*(char)
[	O
i	int
]	O
)	O
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
isupper	(int)->(int)
(	O
text	*(char)
[	O
i	int
]	O
)	O
)	O
upper	int
++	O
;	O
if	O
(	O
islower	(int)->(int)
(	O
text	*(char)
[	O
i	int
]	O
)	O
)	O
lower	int
++	O
;	O
}	O
if	O
(	O
upper	int
&&	O
lower	int
)	O
return	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
add_one	(*(char),int)->(int)
(	O
char	O
*	O
ptr	*(char)
,	O
int	O
code	int
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
ptr	*(char)
,	O
"%s%s%s%s"	*(char)
,	O
patterns	array(*(char))
[	O
code	int
&	O
1	int
]	O
,	O
patterns	array(*(char))
[	O
(	O
code	int
>>	O
1	int
)	O
&	O
1	int
]	O
,	O
patterns	array(*(char))
[	O
(	O
code	int
>>	O
2	int
)	O
&	O
1	int
]	O
,	O
patterns	array(*(char))
[	O
(	O
code	int
>>	O
3	int
)	O
&	O
1	int
]	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
Barcode_pls_encode	(*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int)))->(int)
(	O
struct	O
Barcode_Item	struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int)
*	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
)	O
{	O
static	O
char	O
*	O
text	*(char)
;	O
static	O
char	O
*	O
partial	*(char)
;	O
static	O
char	O
*	O
textinfo	*(char)
;	O
char	O
*	O
c	*(char)
,	O
*	O
ptr	*(char)
,	O
*	O
textptr	*(char)
;	O
unsigned	O
char	O
*	O
checkptr	*(char)
;	O
int	O
i	int
,	O
code	int
,	O
textpos	int
;	O
static	O
char	O
check	array(char)
[	O
9	int
]	O
=	O
{	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
1	int
}	O
;	O
if	O
(	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
partial	*(char)
)	O
free	(*(void))->(void)
(	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
partial	*(char)
)	O
;	O
if	O
(	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
textinfo	*(char)
)	O
free	(*(void))->(void)
(	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
textinfo	*(char)
)	O
;	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
partial	*(char)
=	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
textinfo	*(char)
=	O
NULL	O
;	O
if	O
(	O
!	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
encoding	*(char)
)	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
encoding	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
"plessey"	*(char)
)	O
;	O
text	*(char)
=	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
ascii	*(char)
;	O
if	O
(	O
!	O
text	*(char)
)	O
{	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
error	int
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
partial	*(char)
=	O
malloc	(long)->(*(void))
(	O
(	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
+	O
4	int
)	O
*	O
8	int
+	O
3	int
)	O
;	O
checkptr	*(char)
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
*	O
4	int
+	O
8	int
)	O
;	O
if	O
(	O
!	O
partial	*(char)
||	O
!	O
checkptr	*(char)
)	O
{	O
if	O
(	O
partial	*(char)
)	O
free	(*(void))->(void)
(	O
partial	*(char)
)	O
;	O
if	O
(	O
checkptr	*(char)
)	O
free	(*(void))->(void)
(	O
checkptr	*(char)
)	O
;	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
error	int
=	O
errno	O
;	O
return	O
-	O
1	int
;	O
}	O
textinfo	*(char)
=	O
malloc	(long)->(*(void))
(	O
10	int
*	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
+	O
2	int
)	O
;	O
if	O
(	O
!	O
textinfo	*(char)
)	O
{	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
error	int
=	O
errno	O
;	O
free	(*(void))->(void)
(	O
partial	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
checkptr	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
partial	*(char)
,	O
fillers	array(*(char))
[	O
0	int
]	O
)	O
;	O
ptr	*(char)
=	O
partial	*(char)
+	O
strlen	(*(char))->(long)
(	O
partial	*(char)
)	O
;	O
textptr	*(char)
=	O
textinfo	*(char)
;	O
textpos	int
=	O
startpos	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
;	O
i	int
++	O
)	O
{	O
c	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
alphabet	array(char)
,	O
toupper	(int)->(int)
(	O
text	*(char)
[	O
i	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
c	*(char)
)	O
{	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
error	int
=	O
EINVAL	int
;	O
free	(*(void))->(void)
(	O
partial	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
textinfo	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
checkptr	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
code	int
=	O
c	*(char)
-	O
alphabet	array(char)
;	O
add_one	(*(char),int)->(int)
(	O
ptr	*(char)
,	O
code	int
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
textptr	*(char)
,	O
"%i:12:%c "	*(char)
,	O
textpos	int
,	O
toupper	(int)->(int)
(	O
text	*(char)
[	O
i	int
]	O
)	O
)	O
;	O
textpos	int
+=	O
width	int
;	O
textptr	*(char)
+=	O
strlen	(*(char))->(long)
(	O
textptr	*(char)
)	O
;	O
ptr	*(char)
+=	O
strlen	(*(char))->(long)
(	O
ptr	*(char)
)	O
;	O
checkptr	*(char)
[	O
4	int
*	O
i	int
]	O
=	O
code	int
&	O
1	int
;	O
checkptr	*(char)
[	O
4	int
*	O
i	int
+	O
1	int
]	O
=	O
(	O
code	int
>>	O
1	int
)	O
&	O
1	int
;	O
checkptr	*(char)
[	O
4	int
*	O
i	int
+	O
2	int
]	O
=	O
(	O
code	int
>>	O
2	int
)	O
&	O
1	int
;	O
checkptr	*(char)
[	O
4	int
*	O
i	int
+	O
3	int
]	O
=	O
(	O
code	int
>>	O
3	int
)	O
&	O
1	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4	int
*	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
;	O
i	int
++	O
)	O
{	O
int	O
j	int
;	O
if	O
(	O
checkptr	*(char)
[	O
i	int
]	O
)	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
9	int
;	O
j	int
++	O
)	O
checkptr	*(char)
[	O
i	int
+	O
j	int
]	O
^=	O
check	array(char)
[	O
j	int
]	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
8	int
;	O
i	int
++	O
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
ptr	*(char)
,	O
patterns	array(*(char))
[	O
checkptr	*(char)
[	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
*	O
4	int
+	O
i	int
]	O
]	O
)	O
;	O
ptr	*(char)
+=	O
2	int
;	O
}	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"CRC: "	*(char)
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
8	int
;	O
i	int
++	O
)	O
{	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'0'	O
+	O
checkptr	*(char)
[	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
*	O
4	int
+	O
i	int
]	O
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'\n'	O
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
ptr	*(char)
,	O
fillers	array(*(char))
[	O
1	int
]	O
)	O
;	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
partial	*(char)
=	O
partial	*(char)
;	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
textinfo	*(char)
=	O
textinfo	*(char)
;	O
free	(*(void))->(void)
(	O
checkptr	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
