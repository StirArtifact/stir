static	O
unsigned	O
char	O
dragon_num	array(char)
[	O
BOARDMAX	O
]	O
;	O
static	O
int	O
next_white	int
;	O
static	O
int	O
next_black	int
;	O
static	O
const	O
int	O
colors	enum(int,int,int,int,int,int,int,int)
[	O
3	int
]	O
[	O
5	int
]	O
=	O
{	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
}	O
,	O
{	O
6	int
,	O
2	int
,	O
1	int
,	O
3	int
,	O
5	int
}	O
,	O
{	O
6	int
,	O
2	int
,	O
1	int
,	O
3	int
,	O
5	int
}	O
}	O
;	O
static	O
const	O
int	O
domain_colors	array(int)
[	O
4	int
]	O
=	O
{	O
5	int
,	O
1	int
,	O
2	int
,	O
3	int
}	O
;	O
void	O
start_draw_board	()->(void)
(	O
)	O
{	O
gg_init_color	()->(void)
(	O
)	O
;	O
draw_letter_coordinates	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
void	O
draw_color_char	(int,int,int,int)->(void)
(	O
int	O
m	int
,	O
int	O
n	int
,	O
int	O
c	char
,	O
int	O
color	int
)	O
{	O
if	O
(	O
n	int
==	O
0	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\n%2d"	*(char)
,	O
board_size	int
-	O
m	int
)	O
;	O
if	O
(	O
c	char
==	O
EMPTY	int
)	O
{	O
if	O
(	O
is_hoshi_point	(int,int)->(int)
(	O
m	int
,	O
n	int
)	O
)	O
c	char
=	O
'+'	O
;	O
else	O
c	char
=	O
'.'	O
;	O
}	O
if	O
(	O
color	int
==	O
GG_COLOR_BLACK	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
" %c"	*(char)
,	O
c	char
)	O
;	O
else	O
write_color_char	(int,int)->(void)
(	O
color	int
,	O
c	char
)	O
;	O
if	O
(	O
n	int
==	O
board_size	int
-	O
1	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
" %-2d"	*(char)
,	O
board_size	int
-	O
m	int
)	O
;	O
}	O
void	O
draw_char	(int,int,int)->(void)
(	O
int	O
m	int
,	O
int	O
n	int
,	O
int	O
c	char
)	O
{	O
draw_color_char	(int,int,int,int)->(void)
(	O
m	int
,	O
n	int
,	O
c	char
,	O
GG_COLOR_BLACK	int
)	O
;	O
}	O
void	O
end_draw_board	()->(void)
(	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\n"	*(char)
)	O
;	O
draw_letter_coordinates	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\n"	*(char)
)	O
;	O
}	O
static	O
void	O
showchar	(int,int,int,int)->(void)
(	O
int	O
i	int
,	O
int	O
j	int
,	O
int	O
empty	int
,	O
int	O
xo	int
)	O
{	O
struct	O
dragon_data	struct(int,int,int,int,float,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
*	O
d	int
;	O
struct	O
dragon_data2	struct(int,array(int),int,int,int,float,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),float,float,float,int,struct(char,char,char,char),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,int,int,int,int,int,int)
*	O
d2	int
;	O
int	O
x	int
;	O
ASSERT_ON_BOARD2	O
(	O
i	int
,	O
j	int
)	O
;	O
x	int
=	O
BOARD	O
(	O
i	int
,	O
j	int
)	O
;	O
d	int
=	O
&	O
(	O
dragon	int
[	O
POS	O
(	O
i	int
,	O
j	int
)	O
]	O
)	O
;	O
d2	int
=	O
&	O
(	O
dragon2	*(struct(int,array(int),int,int,int,float,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),float,float,float,int,struct(char,char,char,char),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,int,int,int,int,int,int,int,int,int,int))
[	O
d	int
->	O
id	int
]	O
)	O
;	O
if	O
(	O
x	int
==	O
EMPTY	int
)	O
{	O
if	O
(	O
xo	int
!=	O
2	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
" %c"	*(char)
,	O
empty	int
)	O
;	O
else	O
{	O
int	O
empty_color	int
;	O
char	O
empty_char	char
;	O
if	O
(	O
black_eye	array(struct(int,int,int,int,struct(char,char,char,char),char,char,char))
[	O
POS	O
(	O
i	int
,	O
j	int
)	O
]	O
.	O
color	int
==	O
BLACK	int
)	O
{	O
if	O
(	O
white_eye	array(struct(int,int,int,int,struct(char,char,char,char),char,char,char))
[	O
POS	O
(	O
i	int
,	O
j	int
)	O
]	O
.	O
color	int
==	O
WHITE	int
)	O
empty_color	int
=	O
domain_colors	array(int)
[	O
3	int
]	O
;	O
else	O
empty_color	int
=	O
domain_colors	array(int)
[	O
1	int
]	O
;	O
if	O
(	O
black_eye	array(struct(int,int,int,int,struct(char,char,char,char),char,char,char))
[	O
POS	O
(	O
i	int
,	O
j	int
)	O
]	O
.	O
marginal	char
)	O
empty_char	char
=	O
'!'	O
;	O
else	O
empty_char	char
=	O
'x'	O
;	O
}	O
else	O
if	O
(	O
white_eye	array(struct(int,int,int,int,struct(char,char,char,char),char,char,char))
[	O
POS	O
(	O
i	int
,	O
j	int
)	O
]	O
.	O
color	int
==	O
WHITE	int
)	O
{	O
empty_color	int
=	O
domain_colors	array(int)
[	O
2	int
]	O
;	O
if	O
(	O
white_eye	array(struct(int,int,int,int,struct(char,char,char,char),char,char,char))
[	O
POS	O
(	O
i	int
,	O
j	int
)	O
]	O
.	O
marginal	char
)	O
empty_char	char
=	O
'!'	O
;	O
else	O
empty_char	char
=	O
'o'	O
;	O
}	O
else	O
{	O
empty_color	int
=	O
domain_colors	array(int)
[	O
0	int
]	O
;	O
empty_char	char
=	O
'.'	O
;	O
}	O
write_color_char	(int,int)->(void)
(	O
empty_color	int
,	O
empty_char	char
)	O
;	O
}	O
}	O
else	O
{	O
int	O
w	int
;	O
if	O
(	O
xo	int
==	O
0	int
||	O
!	O
ON_BOARD1	O
(	O
d	int
->	O
origin	int
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
" %c"	*(char)
,	O
BOARD	O
(	O
i	int
,	O
j	int
)	O
==	O
BLACK	int
?	O
'X'	O
:	O
'O'	O
)	O
;	O
return	O
;	O
}	O
w	int
=	O
dragon_num	array(char)
[	O
d	int
->	O
origin	int
]	O
;	O
if	O
(	O
!	O
w	int
)	O
{	O
if	O
(	O
BOARD	O
(	O
i	int
,	O
j	int
)	O
==	O
BLACK	int
)	O
w	int
=	O
dragon_num	array(char)
[	O
d	int
->	O
origin	int
]	O
=	O
next_black	int
++	O
;	O
else	O
w	int
=	O
dragon_num	array(char)
[	O
d	int
->	O
origin	int
]	O
=	O
next_white	int
--	O
;	O
}	O
w	int
=	O
w	int
%	O
26	int
+	O
(	O
BOARD	O
(	O
i	int
,	O
j	int
)	O
==	O
BLACK	int
?	O
'A'	O
:	O
'a'	O
)	O
;	O
if	O
(	O
xo	int
==	O
1	int
)	O
write_color_char	(int,int)->(void)
(	O
colors	enum(int,int,int,int,int,int,int,int)
[	O
BOARD	O
(	O
i	int
,	O
j	int
)	O
]	O
[	O
d	int
->	O
crude_status	(int)->(enum)
]	O
,	O
w	int
)	O
;	O
else	O
if	O
(	O
xo	int
==	O
2	int
)	O
{	O
if	O
(	O
BOARD	O
(	O
i	int
,	O
j	int
)	O
==	O
BLACK	int
)	O
write_color_char	(int,int)->(void)
(	O
domain_colors	array(int)
[	O
1	int
]	O
,	O
'X'	O
)	O
;	O
else	O
write_color_char	(int,int)->(void)
(	O
domain_colors	array(int)
[	O
2	int
]	O
,	O
'O'	O
)	O
;	O
}	O
else	O
if	O
(	O
xo	int
==	O
3	int
)	O
write_color_char	(int,int)->(void)
(	O
colors	enum(int,int,int,int,int,int,int,int)
[	O
BOARD	O
(	O
i	int
,	O
j	int
)	O
]	O
[	O
d2	int
->	O
owl_status	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
]	O
,	O
w	int
)	O
;	O
else	O
if	O
(	O
xo	int
==	O
4	int
)	O
write_color_char	(int,int)->(void)
(	O
colors	enum(int,int,int,int,int,int,int,int)
[	O
BOARD	O
(	O
i	int
,	O
j	int
)	O
]	O
[	O
d	int
->	O
status	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
]	O
,	O
w	int
)	O
;	O
}	O
}	O
void	O
showboard	(int)->(void)
(	O
int	O
xo	int
)	O
{	O
int	O
i	int
,	O
j	int
,	O
ii	int
;	O
gg_init_color	()->(void)
(	O
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
dragon_num	array(char)
,	O
0	int
,	O
sizeof	O
(	O
dragon_num	array(char)
)	O
)	O
;	O
next_white	int
=	O
(	O
259	int
-	O
26	int
)	O
;	O
next_black	int
=	O
26	int
;	O
start_draw_board	()->(void)
(	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
board_size	int
;	O
i	int
++	O
)	O
{	O
ii	int
=	O
board_size	int
-	O
i	int
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\n%2d"	*(char)
,	O
ii	int
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
board_size	int
;	O
j	int
++	O
)	O
showchar	(int,int,int,int)->(void)
(	O
i	int
,	O
j	int
,	O
is_hoshi_point	(int,int)->(int)
(	O
i	int
,	O
j	int
)	O
?	O
'+'	O
:	O
'.'	O
,	O
xo	int
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
" %d"	*(char)
,	O
ii	int
)	O
;	O
if	O
(	O
xo	int
==	O
0	int
&&	O
(	O
(	O
board_size	int
<	O
10	int
&&	O
i	int
==	O
board_size	int
-	O
2	int
)	O
||	O
(	O
board_size	int
>=	O
10	int
&&	O
i	int
==	O
8	int
)	O
)	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"     WHITE (O) has captured %d stones"	*(char)
,	O
black_captured	int
)	O
;	O
if	O
(	O
xo	int
==	O
0	int
&&	O
(	O
(	O
board_size	int
<	O
10	int
&&	O
i	int
==	O
board_size	int
-	O
1	int
)	O
||	O
(	O
board_size	int
>=	O
10	int
&&	O
i	int
==	O
9	int
)	O
)	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"     BLACK (X) has captured %d stones"	*(char)
,	O
white_captured	int
)	O
;	O
if	O
(	O
xo	int
==	O
3	int
)	O
{	O
if	O
(	O
i	int
==	O
board_size	int
-	O
5	int
)	O
write_color_string	(int,*(char))->(void)
(	O
GG_COLOR_GREEN	int
,	O
"    green=alive"	*(char)
)	O
;	O
if	O
(	O
i	int
==	O
board_size	int
-	O
4	int
)	O
write_color_string	(int,*(char))->(void)
(	O
GG_COLOR_CYAN	int
,	O
"    cyan=dead"	*(char)
)	O
;	O
if	O
(	O
i	int
==	O
board_size	int
-	O
3	int
)	O
write_color_string	(int,*(char))->(void)
(	O
GG_COLOR_RED	int
,	O
"    red=critical"	*(char)
)	O
;	O
if	O
(	O
i	int
==	O
board_size	int
-	O
2	int
)	O
write_color_string	(int,*(char))->(void)
(	O
GG_COLOR_YELLOW	int
,	O
"    yellow=unknown"	*(char)
)	O
;	O
if	O
(	O
i	int
==	O
board_size	int
-	O
1	int
)	O
write_color_string	(int,*(char))->(void)
(	O
GG_COLOR_MAGENTA	int
,	O
"    magenta=unchecked"	*(char)
)	O
;	O
}	O
}	O
end_draw_board	()->(void)
(	O
)	O
;	O
}	O
static	O
const	O
char	O
*	O
status_names	array(*(char))
[	O
]	O
=	O
{	O
DRAGON_STATUS_NAMES	O
}	O
;	O
const	O
char	O
*	O
status_to_string	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(*(char))
(	O
enum	O
dragon_status	(int)->(enum)
status	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
{	O
return	O
status_names	array(*(char))
[	O
(	O
int	O
)	O
status	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
]	O
;	O
}	O
const	O
char	O
*	O
result_to_string	(int)->(*(char))
(	O
int	O
result	int
)	O
{	O
switch	O
(	O
result	int
)	O
{	O
case	O
0	int
:	O
return	O
"0"	*(char)
;	O
case	O
KO_B	int
:	O
return	O
"KO_B"	*(char)
;	O
case	O
LOSS	int
:	O
return	O
"LOSS"	*(char)
;	O
case	O
GAIN	int
:	O
return	O
"GAIN"	*(char)
;	O
case	O
KO_A	int
:	O
return	O
"KO_A"	*(char)
;	O
case	O
WIN	int
:	O
return	O
"WIN"	*(char)
;	O
default	O
:	O
return	O
"ERROR"	*(char)
;	O
}	O
}	O
