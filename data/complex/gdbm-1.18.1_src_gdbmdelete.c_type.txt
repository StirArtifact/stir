int	O
gdbm_delete	(*(struct),struct(*(char),int))->(int)
(	O
GDBM_FILE	*(struct)
dbf	*(struct)
,	O
datum	struct(*(char),int)
key	struct(*(char),int)
)	O
{	O
int	O
elem_loc	int
;	O
int	O
last_loc	int
;	O
int	O
home	int
;	O
bucket_element	struct(int,array(char),long,int,int)
elem	struct(int,array(char),long,int,int)
;	O
off_t	long
free_adr	long
;	O
int	O
free_size	int
;	O
GDBM_ASSERT_CONSISTENCY	O
(	O
dbf	*(struct)
,	O
-	O
1	int
)	O
;	O
if	O
(	O
dbf	*(struct)
->	O
read_write	int
==	O
GDBM_READER	int
)	O
{	O
GDBM_SET_ERRNO	O
(	O
dbf	*(struct)
,	O
GDBM_READER_CANT_DELETE	int
,	O
FALSE	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
gdbm_set_errno	(*(struct),int,int)->(void)
(	O
dbf	*(struct)
,	O
GDBM_NO_ERROR	int
,	O
FALSE	int
)	O
;	O
elem_loc	int
=	O
_gdbm_findkey	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),struct(*(char),int),*(*(char)),*(int))->(int)
(	O
dbf	*(struct)
,	O
key	struct(*(char),int)
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
elem_loc	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
elem	struct(int,array(char),long,int,int)
=	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
h_table	array(struct(int,array(char),long,int,int))
[	O
elem_loc	int
]	O
;	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
h_table	array(struct(int,array(char),long,int,int))
[	O
elem_loc	int
]	O
.	O
hash_value	int
=	O
-	O
1	int
;	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
count	int
--	O
;	O
last_loc	int
=	O
elem_loc	int
;	O
elem_loc	int
=	O
(	O
elem_loc	int
+	O
1	int
)	O
%	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
bucket_elems	int
;	O
while	O
(	O
elem_loc	int
!=	O
last_loc	int
&&	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
h_table	array(struct(int,array(char),long,int,int))
[	O
elem_loc	int
]	O
.	O
hash_value	int
!=	O
-	O
1	int
)	O
{	O
home	int
=	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
h_table	array(struct(int,array(char),long,int,int))
[	O
elem_loc	int
]	O
.	O
hash_value	int
%	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
bucket_elems	int
;	O
if	O
(	O
(	O
last_loc	int
<	O
elem_loc	int
&&	O
(	O
home	int
<=	O
last_loc	int
||	O
home	int
>	O
elem_loc	int
)	O
)	O
||	O
(	O
last_loc	int
>	O
elem_loc	int
&&	O
home	int
<=	O
last_loc	int
&&	O
home	int
>	O
elem_loc	int
)	O
)	O
{	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
h_table	array(struct(int,array(char),long,int,int))
[	O
last_loc	int
]	O
=	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
h_table	array(struct(int,array(char),long,int,int))
[	O
elem_loc	int
]	O
;	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
h_table	array(struct(int,array(char),long,int,int))
[	O
elem_loc	int
]	O
.	O
hash_value	int
=	O
-	O
1	int
;	O
last_loc	int
=	O
elem_loc	int
;	O
}	O
elem_loc	int
=	O
(	O
elem_loc	int
+	O
1	int
)	O
%	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
bucket_elems	int
;	O
}	O
free_adr	long
=	O
elem	struct(int,array(char),long,int,int)
.	O
data_pointer	long
;	O
free_size	int
=	O
elem	struct(int,array(char),long,int,int)
.	O
key_size	int
+	O
elem	struct(int,array(char),long,int,int)
.	O
data_size	int
;	O
if	O
(	O
_gdbm_free	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),long,int)->(int)
(	O
dbf	*(struct)
,	O
free_adr	long
,	O
free_size	int
)	O
)	O
return	O
-	O
1	int
;	O
dbf	*(struct)
->	O
bucket_changed	int
=	O
TRUE	int
;	O
dbf	*(struct)
->	O
cache_entry	*(struct(*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),long,char,struct(int,int,int,*(char),long,int)))
->	O
ca_data	struct(int,int,int,*(char),long,int)
.	O
hash_val	int
=	O
-	O
1	int
;	O
dbf	*(struct)
->	O
cache_entry	*(struct(*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),long,char,struct(int,int,int,*(char),long,int)))
->	O
ca_data	struct(int,int,int,*(char),long,int)
.	O
key_size	int
=	O
0	int
;	O
dbf	*(struct)
->	O
cache_entry	*(struct(*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),long,char,struct(int,int,int,*(char),long,int)))
->	O
ca_data	struct(int,int,int,*(char),long,int)
.	O
elem_loc	int
=	O
-	O
1	int
;	O
return	O
_gdbm_end_update	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)))->(int)
(	O
dbf	*(struct)
)	O
;	O
}	O
