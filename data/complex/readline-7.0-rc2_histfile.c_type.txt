extern	O
void	O
_hs_append_history_line	(int,*(char))->(void)
PARAMS	O
(	O
(	O
int	O
,	O
const	O
char	O
*	O
)	O
)	O
;	O
int	O
history_file_version	int
=	O
1	int
;	O
int	O
history_write_timestamps	int
=	O
0	int
;	O
int	O
history_multiline_entries	int
=	O
0	int
;	O
int	O
history_lines_read_from_file	int
=	O
0	int
;	O
int	O
history_lines_written_to_file	int
=	O
0	int
;	O
static	O
char	O
*	O
history_backupfile	(*(char))->(*(char))
PARAMS	O
(	O
(	O
const	O
char	O
*	O
)	O
)	O
;	O
static	O
char	O
*	O
history_tempfile	(*(char))->(*(char))
PARAMS	O
(	O
(	O
const	O
char	O
*	O
)	O
)	O
;	O
static	O
int	O
histfile_backup	(*(char),*(char))->(int)
PARAMS	O
(	O
(	O
const	O
char	O
*	O
,	O
const	O
char	O
*	O
)	O
)	O
;	O
static	O
int	O
histfile_restore	(*(char),*(char))->(int)
PARAMS	O
(	O
(	O
const	O
char	O
*	O
,	O
const	O
char	O
*	O
)	O
)	O
;	O
static	O
char	O
*	O
history_filename	(*(char))->(*(char))
(	O
filename	*(char)
)	O
const	O
char	O
*	O
filename	*(char)
;	O
{	O
char	O
*	O
return_val	*(char)
;	O
const	O
char	O
*	O
home	*(char)
;	O
int	O
home_len	int
;	O
return_val	*(char)
=	O
filename	*(char)
?	O
savestring	O
(	O
filename	*(char)
)	O
:	O
(	O
char	O
*	O
)	O
NULL	O
;	O
if	O
(	O
return_val	*(char)
)	O
return	O
(	O
return_val	*(char)
)	O
;	O
home	*(char)
=	O
sh_get_env_value	(*(char))->(*(char))
(	O
"HOME"	*(char)
)	O
;	O
if	O
(	O
home	*(char)
==	O
0	int
)	O
return	O
(	O
NULL	O
)	O
;	O
else	O
home_len	int
=	O
strlen	(*(char))->(long)
(	O
home	*(char)
)	O
;	O
return_val	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
2	int
+	O
home_len	int
+	O
8	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
return_val	*(char)
,	O
home	*(char)
)	O
;	O
return_val	*(char)
[	O
home_len	int
]	O
=	O
'/'	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
return_val	*(char)
+	O
home_len	int
+	O
1	int
,	O
".history"	*(char)
)	O
;	O
return	O
(	O
return_val	*(char)
)	O
;	O
}	O
static	O
char	O
*	O
history_backupfile	(*(char))->(*(char))
(	O
filename	*(char)
)	O
const	O
char	O
*	O
filename	*(char)
;	O
{	O
const	O
char	O
*	O
fn	*(char)
;	O
char	O
*	O
ret	*(char)
,	O
linkbuf	array(char)
[	O
PATH_MAX	int
+	O
1	int
]	O
;	O
size_t	long
len	long
;	O
ssize_t	long
n	long
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
fs	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
fn	*(char)
=	O
filename	*(char)
;	O
if	O
(	O
(	O
n	long
=	O
readlink	(*(char),*(char),long)->(long)
(	O
filename	*(char)
,	O
linkbuf	array(char)
,	O
sizeof	O
(	O
linkbuf	array(char)
)	O
-	O
1	int
)	O
)	O
>	O
0	int
)	O
{	O
linkbuf	array(char)
[	O
n	long
]	O
=	O
'\0'	O
;	O
fn	*(char)
=	O
linkbuf	array(char)
;	O
}	O
len	long
=	O
strlen	(*(char))->(long)
(	O
fn	*(char)
)	O
;	O
ret	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
len	long
+	O
2	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
ret	*(char)
,	O
fn	*(char)
)	O
;	O
ret	*(char)
[	O
len	long
]	O
=	O
'-'	O
;	O
ret	*(char)
[	O
len	long
+	O
1	int
]	O
=	O
'\0'	O
;	O
return	O
ret	*(char)
;	O
}	O
static	O
char	O
*	O
history_tempfile	(*(char))->(*(char))
(	O
filename	*(char)
)	O
const	O
char	O
*	O
filename	*(char)
;	O
{	O
const	O
char	O
*	O
fn	*(char)
;	O
char	O
*	O
ret	*(char)
,	O
linkbuf	array(char)
[	O
PATH_MAX	int
+	O
1	int
]	O
;	O
size_t	long
len	long
;	O
ssize_t	long
n	long
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
fs	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
int	O
pid	int
;	O
fn	*(char)
=	O
filename	*(char)
;	O
if	O
(	O
(	O
n	long
=	O
readlink	(*(char),*(char),long)->(long)
(	O
filename	*(char)
,	O
linkbuf	array(char)
,	O
sizeof	O
(	O
linkbuf	array(char)
)	O
-	O
1	int
)	O
)	O
>	O
0	int
)	O
{	O
linkbuf	array(char)
[	O
n	long
]	O
=	O
'\0'	O
;	O
fn	*(char)
=	O
linkbuf	array(char)
;	O
}	O
len	long
=	O
strlen	(*(char))->(long)
(	O
fn	*(char)
)	O
;	O
ret	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
len	long
+	O
11	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
ret	*(char)
,	O
fn	*(char)
)	O
;	O
pid	int
=	O
(	O
int	O
)	O
getpid	()->(int)
(	O
)	O
;	O
ret	*(char)
[	O
len	long
]	O
=	O
'-'	O
;	O
ret	*(char)
[	O
len	long
+	O
1	int
]	O
=	O
(	O
pid	int
/	O
10000	int
%	O
10	int
)	O
+	O
'0'	O
;	O
ret	*(char)
[	O
len	long
+	O
2	int
]	O
=	O
(	O
pid	int
/	O
1000	int
%	O
10	int
)	O
+	O
'0'	O
;	O
ret	*(char)
[	O
len	long
+	O
3	int
]	O
=	O
(	O
pid	int
/	O
100	int
%	O
10	int
)	O
+	O
'0'	O
;	O
ret	*(char)
[	O
len	long
+	O
4	int
]	O
=	O
(	O
pid	int
/	O
10	int
%	O
10	int
)	O
+	O
'0'	O
;	O
ret	*(char)
[	O
len	long
+	O
5	int
]	O
=	O
(	O
pid	int
%	O
10	int
)	O
+	O
'0'	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
ret	*(char)
+	O
len	long
+	O
6	int
,	O
".tmp"	*(char)
)	O
;	O
return	O
ret	*(char)
;	O
}	O
int	O
read_history	(*(char))->(int)
(	O
filename	*(char)
)	O
const	O
char	O
*	O
filename	*(char)
;	O
{	O
return	O
(	O
read_history_range	(*(char),int,int)->(int)
(	O
filename	*(char)
,	O
0	int
,	O
-	O
1	int
)	O
)	O
;	O
}	O
int	O
read_history_range	(*(char),int,int)->(int)
(	O
filename	*(char)
,	O
from	int
,	O
to	int
)	O
const	O
char	O
*	O
filename	*(char)
;	O
int	O
from	int
,	O
to	int
;	O
{	O
register	O
char	O
*	O
line_start	*(char)
,	O
*	O
line_end	*(char)
,	O
*	O
p	*(char)
;	O
char	O
*	O
input	*(char)
,	O
*	O
buffer	*(char)
,	O
*	O
bufend	*(char)
,	O
*	O
last_ts	*(char)
;	O
int	O
file	int
,	O
current_line	int
,	O
chars_read	int
,	O
has_timestamps	int
,	O
reset_comment_char	int
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
finfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
size_t	long
file_size	long
;	O
int	O
overflow_errno	int
=	O
EFBIG	int
;	O
history_lines_read_from_file	int
=	O
0	int
;	O
buffer	*(char)
=	O
last_ts	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
input	*(char)
=	O
history_filename	(*(char))->(*(char))
(	O
filename	*(char)
)	O
;	O
file	int
=	O
input	*(char)
?	O
open	(*(char),int)->(int)
(	O
input	*(char)
,	O
O_RDONLY	int
|	O
O_BINARY	int
,	O
0666	int
)	O
:	O
-	O
1	int
;	O
if	O
(	O
(	O
file	int
<	O
0	int
)	O
||	O
(	O
fstat	(int,*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
file	int
,	O
&	O
finfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
==	O
-	O
1	int
)	O
)	O
goto	O
error_and_exit	O
;	O
file_size	long
=	O
(	O
size_t	long
)	O
finfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
;	O
if	O
(	O
file_size	long
!=	O
finfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
||	O
file_size	long
+	O
1	int
<	O
file_size	long
)	O
{	O
errno	O
=	O
overflow_errno	int
;	O
goto	O
error_and_exit	O
;	O
}	O
buffer	*(char)
=	O
(	O
char	O
*	O
)	O
malloc	(long)->(*(void))
(	O
file_size	long
+	O
1	int
)	O
;	O
if	O
(	O
buffer	*(char)
==	O
0	int
)	O
{	O
errno	O
=	O
overflow_errno	int
;	O
goto	O
error_and_exit	O
;	O
}	O
chars_read	int
=	O
read	*((*(void),*(char),long)->(long))
(	O
file	int
,	O
buffer	*(char)
,	O
file_size	long
)	O
;	O
if	O
(	O
chars_read	int
<	O
0	int
)	O
{	O
error_and_exit	O
:	O
if	O
(	O
errno	O
!=	O
0	int
)	O
chars_read	int
=	O
errno	O
;	O
else	O
chars_read	int
=	O
EIO	int
;	O
if	O
(	O
file	int
>=	O
0	int
)	O
close	*((*(void))->(int))
(	O
file	int
)	O
;	O
FREE	O
(	O
input	*(char)
)	O
;	O
FREE	O
(	O
buffer	*(char)
)	O
;	O
return	O
(	O
chars_read	int
)	O
;	O
}	O
close	*((*(void))->(int))
(	O
file	int
)	O
;	O
if	O
(	O
to	int
<	O
0	int
)	O
to	int
=	O
chars_read	int
;	O
bufend	*(char)
=	O
buffer	*(char)
+	O
chars_read	int
;	O
current_line	int
=	O
0	int
;	O
reset_comment_char	int
=	O
0	int
;	O
if	O
(	O
history_comment_char	char
==	O
'\0'	O
&&	O
buffer	*(char)
[	O
0	int
]	O
==	O
'#'	O
&&	O
isdigit	(int)->(int)
(	O
(	O
unsigned	O
char	O
)	O
buffer	*(char)
[	O
1	int
]	O
)	O
)	O
{	O
history_comment_char	char
=	O
'#'	O
;	O
reset_comment_char	int
=	O
1	int
;	O
}	O
has_timestamps	int
=	O
HIST_TIMESTAMP_START	O
(	O
buffer	*(char)
)	O
;	O
history_multiline_entries	int
+=	O
has_timestamps	int
&&	O
history_write_timestamps	int
;	O
for	O
(	O
line_start	*(char)
=	O
line_end	*(char)
=	O
buffer	*(char)
;	O
line_end	*(char)
<	O
bufend	*(char)
&&	O
current_line	int
<	O
from	int
;	O
line_end	*(char)
++	O
)	O
if	O
(	O
*	O
line_end	*(char)
==	O
'\n'	O
)	O
{	O
p	*(char)
=	O
line_end	*(char)
+	O
1	int
;	O
if	O
(	O
HIST_TIMESTAMP_START	O
(	O
p	*(char)
)	O
==	O
0	int
)	O
current_line	int
++	O
;	O
line_start	*(char)
=	O
p	*(char)
;	O
}	O
for	O
(	O
line_end	*(char)
=	O
line_start	*(char)
;	O
line_end	*(char)
<	O
bufend	*(char)
;	O
line_end	*(char)
++	O
)	O
if	O
(	O
*	O
line_end	*(char)
==	O
'\n'	O
)	O
{	O
if	O
(	O
line_end	*(char)
>	O
line_start	*(char)
&&	O
line_end	*(char)
[	O
-	O
1	int
]	O
==	O
'\r'	O
)	O
line_end	*(char)
[	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
else	O
*	O
line_end	*(char)
=	O
'\0'	O
;	O
if	O
(	O
*	O
line_start	*(char)
)	O
{	O
if	O
(	O
HIST_TIMESTAMP_START	O
(	O
line_start	*(char)
)	O
==	O
0	int
)	O
{	O
if	O
(	O
last_ts	*(char)
==	O
NULL	O
&&	O
history_multiline_entries	int
)	O
_hs_append_history_line	(int,*(char))->(void)
(	O
history_length	int
-	O
1	int
,	O
line_start	*(char)
)	O
;	O
else	O
add_history	(*(char))->(void)
(	O
line_start	*(char)
)	O
;	O
if	O
(	O
last_ts	*(char)
)	O
{	O
add_history_time	(*(char))->(void)
(	O
last_ts	*(char)
)	O
;	O
last_ts	*(char)
=	O
NULL	O
;	O
}	O
}	O
else	O
{	O
last_ts	*(char)
=	O
line_start	*(char)
;	O
current_line	int
--	O
;	O
}	O
}	O
current_line	int
++	O
;	O
if	O
(	O
current_line	int
>=	O
to	int
)	O
break	O
;	O
line_start	*(char)
=	O
line_end	*(char)
+	O
1	int
;	O
}	O
history_lines_read_from_file	int
=	O
current_line	int
;	O
if	O
(	O
reset_comment_char	int
)	O
history_comment_char	char
=	O
'\0'	O
;	O
FREE	O
(	O
input	*(char)
)	O
;	O
FREE	O
(	O
buffer	*(char)
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
int	O
histfile_backup	(*(char),*(char))->(int)
(	O
filename	*(char)
,	O
back	*(char)
)	O
const	O
char	O
*	O
filename	*(char)
;	O
const	O
char	O
*	O
back	*(char)
;	O
{	O
char	O
linkbuf	array(char)
[	O
PATH_MAX	int
+	O
1	int
]	O
;	O
ssize_t	long
n	long
;	O
if	O
(	O
(	O
n	long
=	O
readlink	(*(char),*(char),long)->(long)
(	O
filename	*(char)
,	O
linkbuf	array(char)
,	O
sizeof	O
(	O
linkbuf	array(char)
)	O
-	O
1	int
)	O
)	O
>	O
0	int
)	O
{	O
linkbuf	array(char)
[	O
n	long
]	O
=	O
'\0'	O
;	O
return	O
(	O
rename	(*(char),*(char))->(int)
(	O
linkbuf	array(char)
,	O
back	*(char)
)	O
)	O
;	O
}	O
return	O
(	O
rename	(*(char),*(char))->(int)
(	O
filename	*(char)
,	O
back	*(char)
)	O
)	O
;	O
}	O
static	O
int	O
histfile_restore	(*(char),*(char))->(int)
(	O
backup	*(char)
,	O
orig	*(char)
)	O
const	O
char	O
*	O
backup	*(char)
;	O
const	O
char	O
*	O
orig	*(char)
;	O
{	O
char	O
linkbuf	array(char)
[	O
PATH_MAX	int
+	O
1	int
]	O
;	O
ssize_t	long
n	long
;	O
if	O
(	O
(	O
n	long
=	O
readlink	(*(char),*(char),long)->(long)
(	O
orig	*(char)
,	O
linkbuf	array(char)
,	O
sizeof	O
(	O
linkbuf	array(char)
)	O
-	O
1	int
)	O
)	O
>	O
0	int
)	O
{	O
linkbuf	array(char)
[	O
n	long
]	O
=	O
'\0'	O
;	O
return	O
(	O
rename	(*(char),*(char))->(int)
(	O
backup	*(char)
,	O
linkbuf	array(char)
)	O
)	O
;	O
}	O
return	O
(	O
rename	(*(char),*(char))->(int)
(	O
backup	*(char)
,	O
orig	*(char)
)	O
)	O
;	O
}	O
int	O
history_truncate_file	(*(char),int)->(int)
(	O
fname	*(char)
,	O
lines	int
)	O
const	O
char	O
*	O
fname	*(char)
;	O
int	O
lines	int
;	O
{	O
char	O
*	O
buffer	*(char)
,	O
*	O
filename	*(char)
,	O
*	O
tempname	*(char)
,	O
*	O
bp	*(char)
,	O
*	O
bp1	*(char)
;	O
int	O
file	int
,	O
chars_read	int
,	O
rv	int
,	O
orig_lines	int
,	O
exists	int
,	O
r	int
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
finfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
size_t	long
file_size	long
;	O
history_lines_written_to_file	int
=	O
0	int
;	O
buffer	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
filename	*(char)
=	O
history_filename	(*(char))->(*(char))
(	O
fname	*(char)
)	O
;	O
tempname	*(char)
=	O
0	int
;	O
file	int
=	O
filename	*(char)
?	O
open	(*(char),int)->(int)
(	O
filename	*(char)
,	O
O_RDONLY	int
|	O
O_BINARY	int
,	O
0666	int
)	O
:	O
-	O
1	int
;	O
rv	int
=	O
exists	int
=	O
0	int
;	O
if	O
(	O
file	int
==	O
-	O
1	int
||	O
fstat	(int,*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
file	int
,	O
&	O
finfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
==	O
-	O
1	int
)	O
{	O
rv	int
=	O
errno	O
;	O
if	O
(	O
file	int
!=	O
-	O
1	int
)	O
close	*((*(void))->(int))
(	O
file	int
)	O
;	O
goto	O
truncate_exit	O
;	O
}	O
exists	int
=	O
1	int
;	O
if	O
(	O
S_ISREG	O
(	O
finfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
==	O
0	int
)	O
{	O
close	*((*(void))->(int))
(	O
file	int
)	O
;	O
rv	int
=	O
EINVAL	int
;	O
goto	O
truncate_exit	O
;	O
}	O
file_size	long
=	O
(	O
size_t	long
)	O
finfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
;	O
if	O
(	O
file_size	long
!=	O
finfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
||	O
file_size	long
+	O
1	int
<	O
file_size	long
)	O
{	O
close	*((*(void))->(int))
(	O
file	int
)	O
;	O
rv	int
=	O
errno	O
=	O
EFBIG	int
;	O
goto	O
truncate_exit	O
;	O
}	O
buffer	*(char)
=	O
(	O
char	O
*	O
)	O
malloc	(long)->(*(void))
(	O
file_size	long
+	O
1	int
)	O
;	O
if	O
(	O
buffer	*(char)
==	O
0	int
)	O
{	O
rv	int
=	O
errno	O
;	O
close	*((*(void))->(int))
(	O
file	int
)	O
;	O
goto	O
truncate_exit	O
;	O
}	O
chars_read	int
=	O
read	*((*(void),*(char),long)->(long))
(	O
file	int
,	O
buffer	*(char)
,	O
file_size	long
)	O
;	O
close	*((*(void))->(int))
(	O
file	int
)	O
;	O
if	O
(	O
chars_read	int
<=	O
0	int
)	O
{	O
rv	int
=	O
(	O
chars_read	int
<	O
0	int
)	O
?	O
errno	O
:	O
0	int
;	O
goto	O
truncate_exit	O
;	O
}	O
orig_lines	int
=	O
lines	int
;	O
for	O
(	O
bp1	*(char)
=	O
bp	*(char)
=	O
buffer	*(char)
+	O
chars_read	int
-	O
1	int
;	O
lines	int
&&	O
bp	*(char)
>	O
buffer	*(char)
;	O
bp	*(char)
--	O
)	O
{	O
if	O
(	O
*	O
bp	*(char)
==	O
'\n'	O
&&	O
HIST_TIMESTAMP_START	O
(	O
bp1	*(char)
)	O
==	O
0	int
)	O
lines	int
--	O
;	O
bp1	*(char)
=	O
bp	*(char)
;	O
}	O
for	O
(	O
;	O
bp	*(char)
>	O
buffer	*(char)
;	O
bp	*(char)
--	O
)	O
{	O
if	O
(	O
*	O
bp	*(char)
==	O
'\n'	O
&&	O
HIST_TIMESTAMP_START	O
(	O
bp1	*(char)
)	O
==	O
0	int
)	O
{	O
bp	*(char)
++	O
;	O
break	O
;	O
}	O
bp1	*(char)
=	O
bp	*(char)
;	O
}	O
if	O
(	O
bp	*(char)
<=	O
buffer	*(char)
)	O
{	O
rv	int
=	O
0	int
;	O
history_lines_written_to_file	int
=	O
orig_lines	int
-	O
lines	int
;	O
goto	O
truncate_exit	O
;	O
}	O
tempname	*(char)
=	O
history_tempfile	(*(char))->(*(char))
(	O
filename	*(char)
)	O
;	O
if	O
(	O
(	O
file	int
=	O
open	(*(char),int)->(int)
(	O
tempname	*(char)
,	O
O_WRONLY	int
|	O
O_CREAT	int
|	O
O_TRUNC	int
|	O
O_BINARY	int
,	O
0600	int
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
if	O
(	O
write	*((*(void),*(char),long)->(long))
(	O
file	int
,	O
bp	*(char)
,	O
chars_read	int
-	O
(	O
bp	*(char)
-	O
buffer	*(char)
)	O
)	O
<	O
0	int
)	O
rv	int
=	O
errno	O
;	O
if	O
(	O
close	*((*(void))->(int))
(	O
file	int
)	O
<	O
0	int
&&	O
rv	int
==	O
0	int
)	O
rv	int
=	O
errno	O
;	O
}	O
else	O
rv	int
=	O
errno	O
;	O
truncate_exit	O
:	O
FREE	O
(	O
buffer	*(char)
)	O
;	O
history_lines_written_to_file	int
=	O
orig_lines	int
-	O
lines	int
;	O
if	O
(	O
rv	int
==	O
0	int
&&	O
filename	*(char)
&&	O
tempname	*(char)
)	O
rv	int
=	O
histfile_restore	(*(char),*(char))->(int)
(	O
tempname	*(char)
,	O
filename	*(char)
)	O
;	O
if	O
(	O
rv	int
!=	O
0	int
)	O
{	O
if	O
(	O
tempname	*(char)
)	O
unlink	(*(char))->(int)
(	O
tempname	*(char)
)	O
;	O
history_lines_written_to_file	int
=	O
0	int
;	O
}	O
if	O
(	O
rv	int
==	O
0	int
&&	O
exists	int
)	O
r	int
=	O
chown	(*(char),int,int)->(int)
(	O
filename	*(char)
,	O
finfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_uid	int
,	O
finfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_gid	int
)	O
;	O
xfree	(*(void))->(void)
(	O
filename	*(char)
)	O
;	O
FREE	O
(	O
tempname	*(char)
)	O
;	O
return	O
rv	int
;	O
}	O
static	O
int	O
history_do_write	(*(char),int,int)->(int)
(	O
filename	*(char)
,	O
nelements	int
,	O
overwrite	int
)	O
const	O
char	O
*	O
filename	*(char)
;	O
int	O
nelements	int
,	O
overwrite	int
;	O
{	O
register	O
int	O
i	int
;	O
char	O
*	O
output	*(char)
,	O
*	O
tempname	*(char)
,	O
*	O
histname	*(char)
;	O
int	O
file	int
,	O
mode	int
,	O
rv	int
,	O
exists	int
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
finfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
mode	int
=	O
overwrite	int
?	O
O_WRONLY	int
|	O
O_CREAT	int
|	O
O_TRUNC	int
|	O
O_BINARY	int
:	O
O_WRONLY	int
|	O
O_APPEND	int
|	O
O_BINARY	int
;	O
histname	*(char)
=	O
history_filename	(*(char))->(*(char))
(	O
filename	*(char)
)	O
;	O
exists	int
=	O
histname	*(char)
?	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
histname	*(char)
,	O
&	O
finfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
==	O
0	int
)	O
:	O
0	int
;	O
tempname	*(char)
=	O
(	O
overwrite	int
&&	O
exists	int
&&	O
S_ISREG	O
(	O
finfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
)	O
?	O
history_tempfile	(*(char))->(*(char))
(	O
histname	*(char)
)	O
:	O
0	int
;	O
output	*(char)
=	O
tempname	*(char)
?	O
tempname	*(char)
:	O
histname	*(char)
;	O
file	int
=	O
output	*(char)
?	O
open	(*(char),int)->(int)
(	O
output	*(char)
,	O
mode	int
,	O
0600	int
)	O
:	O
-	O
1	int
;	O
rv	int
=	O
0	int
;	O
if	O
(	O
file	int
==	O
-	O
1	int
)	O
{	O
rv	int
=	O
errno	O
;	O
FREE	O
(	O
histname	*(char)
)	O
;	O
FREE	O
(	O
tempname	*(char)
)	O
;	O
return	O
(	O
rv	int
)	O
;	O
}	O
if	O
(	O
nelements	int
>	O
history_length	int
)	O
nelements	int
=	O
history_length	int
;	O
{	O
HIST_ENTRY	struct(*(char),*(char),*(void))
*	O
*	O
the_history	*(*(struct(*(char),*(char),*(void))))
;	O
register	O
int	O
j	int
;	O
int	O
buffer_size	int
;	O
char	O
*	O
buffer	*(char)
;	O
the_history	*(*(struct(*(char),*(char),*(void))))
=	O
history_list	()->(*(*(struct(*(char),*(char),*(void)))))
(	O
)	O
;	O
for	O
(	O
buffer_size	int
=	O
0	int
,	O
i	int
=	O
history_length	int
-	O
nelements	int
;	O
i	int
<	O
history_length	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
history_write_timestamps	int
&&	O
the_history	*(*(struct(*(char),*(char),*(void))))
[	O
i	int
]	O
->	O
timestamp	*(char)
&&	O
the_history	*(*(struct(*(char),*(char),*(void))))
[	O
i	int
]	O
->	O
timestamp	*(char)
[	O
0	int
]	O
)	O
buffer_size	int
+=	O
strlen	(*(char))->(long)
(	O
the_history	*(*(struct(*(char),*(char),*(void))))
[	O
i	int
]	O
->	O
timestamp	*(char)
)	O
+	O
1	int
;	O
buffer_size	int
+=	O
strlen	(*(char))->(long)
(	O
the_history	*(*(struct(*(char),*(char),*(void))))
[	O
i	int
]	O
->	O
line	*(char)
)	O
+	O
1	int
;	O
}	O
buffer	*(char)
=	O
(	O
char	O
*	O
)	O
malloc	(long)->(*(void))
(	O
buffer_size	int
)	O
;	O
if	O
(	O
buffer	*(char)
==	O
0	int
)	O
{	O
rv	int
=	O
errno	O
;	O
close	*((*(void))->(int))
(	O
file	int
)	O
;	O
if	O
(	O
tempname	*(char)
)	O
unlink	(*(char))->(int)
(	O
tempname	*(char)
)	O
;	O
FREE	O
(	O
histname	*(char)
)	O
;	O
FREE	O
(	O
tempname	*(char)
)	O
;	O
return	O
rv	int
;	O
}	O
for	O
(	O
j	int
=	O
0	int
,	O
i	int
=	O
history_length	int
-	O
nelements	int
;	O
i	int
<	O
history_length	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
history_write_timestamps	int
&&	O
the_history	*(*(struct(*(char),*(char),*(void))))
[	O
i	int
]	O
->	O
timestamp	*(char)
&&	O
the_history	*(*(struct(*(char),*(char),*(void))))
[	O
i	int
]	O
->	O
timestamp	*(char)
[	O
0	int
]	O
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
buffer	*(char)
+	O
j	int
,	O
the_history	*(*(struct(*(char),*(char),*(void))))
[	O
i	int
]	O
->	O
timestamp	*(char)
)	O
;	O
j	int
+=	O
strlen	(*(char))->(long)
(	O
the_history	*(*(struct(*(char),*(char),*(void))))
[	O
i	int
]	O
->	O
timestamp	*(char)
)	O
;	O
buffer	*(char)
[	O
j	int
++	O
]	O
=	O
'\n'	O
;	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
buffer	*(char)
+	O
j	int
,	O
the_history	*(*(struct(*(char),*(char),*(void))))
[	O
i	int
]	O
->	O
line	*(char)
)	O
;	O
j	int
+=	O
strlen	(*(char))->(long)
(	O
the_history	*(*(struct(*(char),*(char),*(void))))
[	O
i	int
]	O
->	O
line	*(char)
)	O
;	O
buffer	*(char)
[	O
j	int
++	O
]	O
=	O
'\n'	O
;	O
}	O
if	O
(	O
write	*((*(void),*(char),long)->(long))
(	O
file	int
,	O
buffer	*(char)
,	O
buffer_size	int
)	O
<	O
0	int
)	O
rv	int
=	O
errno	O
;	O
xfree	(*(void))->(void)
(	O
buffer	*(char)
)	O
;	O
}	O
history_lines_written_to_file	int
=	O
nelements	int
;	O
if	O
(	O
close	*((*(void))->(int))
(	O
file	int
)	O
<	O
0	int
&&	O
rv	int
==	O
0	int
)	O
rv	int
=	O
errno	O
;	O
if	O
(	O
rv	int
==	O
0	int
&&	O
histname	*(char)
&&	O
tempname	*(char)
)	O
rv	int
=	O
histfile_restore	(*(char),*(char))->(int)
(	O
tempname	*(char)
,	O
histname	*(char)
)	O
;	O
if	O
(	O
rv	int
!=	O
0	int
)	O
{	O
if	O
(	O
tempname	*(char)
)	O
unlink	(*(char))->(int)
(	O
tempname	*(char)
)	O
;	O
history_lines_written_to_file	int
=	O
0	int
;	O
}	O
if	O
(	O
rv	int
==	O
0	int
&&	O
exists	int
)	O
mode	int
=	O
chown	(*(char),int,int)->(int)
(	O
histname	*(char)
,	O
finfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_uid	int
,	O
finfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_gid	int
)	O
;	O
FREE	O
(	O
histname	*(char)
)	O
;	O
FREE	O
(	O
tempname	*(char)
)	O
;	O
return	O
(	O
rv	int
)	O
;	O
}	O
int	O
append_history	(int,*(char))->(int)
(	O
nelements	int
,	O
filename	*(char)
)	O
int	O
nelements	int
;	O
const	O
char	O
*	O
filename	*(char)
;	O
{	O
return	O
(	O
history_do_write	(*(char),int,int)->(int)
(	O
filename	*(char)
,	O
nelements	int
,	O
HISTORY_APPEND	int
)	O
)	O
;	O
}	O
int	O
write_history	(*(char))->(int)
(	O
filename	*(char)
)	O
const	O
char	O
*	O
filename	*(char)
;	O
{	O
return	O
(	O
history_do_write	(*(char),int,int)->(int)
(	O
filename	*(char)
,	O
history_length	int
,	O
HISTORY_OVERWRITE	int
)	O
)	O
;	O
}	O
