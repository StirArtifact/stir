static	O
void	O
*	O
call_chunkfun	O
(	O
struct	O
obstack	O
*	O
h	*(struct)
,	O
size_t	O
size	O
)	O
{	O
if	O
(	O
h	*(struct)
->	O
use_extra_arg	O
)	O
return	O
h	*(struct)
->	O
chunkfun	O
.	O
extra	O
(	O
h	*(struct)
->	O
extra_arg	O
,	O
size	O
)	O
;	O
else	O
return	O
h	*(struct)
->	O
chunkfun	O
.	O
plain	O
(	O
size	O
)	O
;	O
}	O
static	O
void	O
call_freefun	()->(int)
(	O
struct	O
obstack	O
*	O
h	*(struct)
,	O
void	O
*	O
old_chunk	O
)	O
{	O
if	O
(	O
h	*(struct)
->	O
use_extra_arg	O
)	O
h	*(struct)
->	O
freefun	O
.	O
extra	O
(	O
h	*(struct)
->	O
extra_arg	O
,	O
old_chunk	O
)	O
;	O
else	O
h	*(struct)
->	O
freefun	O
.	O
plain	O
(	O
old_chunk	O
)	O
;	O
}	O
static	O
int	O
_obstack_begin_worker	O
(	O
struct	O
obstack	O
*	O
h	*(struct)
,	O
_OBSTACK_SIZE_T	O
size	O
,	O
_OBSTACK_SIZE_T	O
alignment	O
)	O
{	O
struct	O
_obstack_chunk	O
*	O
chunk	O
;	O
if	O
(	O
alignment	O
==	O
0	int
)	O
alignment	O
=	O
DEFAULT_ALIGNMENT	O
;	O
if	O
(	O
size	O
==	O
0	int
)	O
{	O
int	O
extra	O
=	O
(	O
(	O
(	O
(	O
12	int
+	O
DEFAULT_ROUNDING	O
-	O
1	int
)	O
&	O
~	O
(	O
DEFAULT_ROUNDING	O
-	O
1	int
)	O
)	O
+	O
4	int
+	O
DEFAULT_ROUNDING	O
-	O
1	int
)	O
&	O
~	O
(	O
DEFAULT_ROUNDING	O
-	O
1	int
)	O
)	O
;	O
size	O
=	O
4096	int
-	O
extra	O
;	O
}	O
h	*(struct)
->	O
chunk_size	O
=	O
size	O
;	O
h	*(struct)
->	O
alignment_mask	O
=	O
alignment	O
-	O
1	int
;	O
chunk	O
=	O
h	*(struct)
->	O
chunk	O
=	O
call_chunkfun	O
(	O
h	*(struct)
,	O
h	*(struct)
->	O
chunk_size	O
)	O
;	O
if	O
(	O
!	O
chunk	O
)	O
(	O
*	O
obstack_alloc_failed_handler	O
)	O
(	O
)	O
;	O
h	*(struct)
->	O
next_free	O
=	O
h	*(struct)
->	O
object_base	O
=	O
__PTR_ALIGN	O
(	O
(	O
char	O
*	O
)	O
chunk	O
,	O
chunk	O
->	O
contents	O
,	O
alignment	O
-	O
1	int
)	O
;	O
h	*(struct)
->	O
chunk_limit	O
=	O
chunk	O
->	O
limit	O
=	O
(	O
char	O
*	O
)	O
chunk	O
+	O
h	*(struct)
->	O
chunk_size	O
;	O
chunk	O
->	O
prev	O
=	O
0	int
;	O
h	*(struct)
->	O
maybe_empty_object	O
=	O
0	int
;	O
h	*(struct)
->	O
alloc_failed	O
=	O
0	int
;	O
return	O
1	int
;	O
}	O
int	O
_obstack_begin	O
(	O
struct	O
obstack	O
*	O
h	*(struct)
,	O
_OBSTACK_SIZE_T	O
size	O
,	O
_OBSTACK_SIZE_T	O
alignment	O
,	O
void	O
*	O
(	O
*	O
chunkfun	O
)	O
(	O
size_t	O
)	O
,	O
void	O
(	O
*	O
freefun	O
)	O
(	O
void	O
*	O
)	O
)	O
{	O
h	*(struct)
->	O
chunkfun	O
.	O
plain	O
=	O
chunkfun	O
;	O
h	*(struct)
->	O
freefun	O
.	O
plain	O
=	O
freefun	O
;	O
h	*(struct)
->	O
use_extra_arg	O
=	O
0	int
;	O
return	O
_obstack_begin_worker	O
(	O
h	*(struct)
,	O
size	O
,	O
alignment	O
)	O
;	O
}	O
int	O
_obstack_begin_1	O
(	O
struct	O
obstack	O
*	O
h	*(struct)
,	O
_OBSTACK_SIZE_T	O
size	O
,	O
_OBSTACK_SIZE_T	O
alignment	O
,	O
void	O
*	O
(	O
*	O
chunkfun	O
)	O
(	O
void	O
*	O
,	O
size_t	O
)	O
,	O
void	O
(	O
*	O
freefun	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
arg	O
)	O
{	O
h	*(struct)
->	O
chunkfun	O
.	O
extra	O
=	O
chunkfun	O
;	O
h	*(struct)
->	O
freefun	O
.	O
extra	O
=	O
freefun	O
;	O
h	*(struct)
->	O
extra_arg	O
=	O
arg	O
;	O
h	*(struct)
->	O
use_extra_arg	O
=	O
1	int
;	O
return	O
_obstack_begin_worker	O
(	O
h	*(struct)
,	O
size	O
,	O
alignment	O
)	O
;	O
}	O
void	O
_obstack_newchunk	O
(	O
struct	O
obstack	O
*	O
h	*(struct)
,	O
_OBSTACK_SIZE_T	O
length	O
)	O
{	O
struct	O
_obstack_chunk	O
*	O
old_chunk	O
=	O
h	*(struct)
->	O
chunk	O
;	O
struct	O
_obstack_chunk	O
*	O
new_chunk	O
=	O
0	int
;	O
size_t	O
obj_size	O
=	O
h	*(struct)
->	O
next_free	O
-	O
h	*(struct)
->	O
object_base	O
;	O
char	O
*	O
object_base	O
;	O
size_t	O
sum1	O
=	O
obj_size	O
+	O
length	O
;	O
size_t	O
sum2	O
=	O
sum1	O
+	O
h	*(struct)
->	O
alignment_mask	O
;	O
size_t	O
new_size	O
=	O
sum2	O
+	O
(	O
obj_size	O
>>	O
3	int
)	O
+	O
100	int
;	O
if	O
(	O
new_size	O
<	O
sum2	O
)	O
new_size	O
=	O
sum2	O
;	O
if	O
(	O
new_size	O
<	O
h	*(struct)
->	O
chunk_size	O
)	O
new_size	O
=	O
h	*(struct)
->	O
chunk_size	O
;	O
if	O
(	O
obj_size	O
<=	O
sum1	O
&&	O
sum1	O
<=	O
sum2	O
)	O
new_chunk	O
=	O
call_chunkfun	O
(	O
h	*(struct)
,	O
new_size	O
)	O
;	O
if	O
(	O
!	O
new_chunk	O
)	O
(	O
*	O
obstack_alloc_failed_handler	O
)	O
(	O
)	O
;	O
h	*(struct)
->	O
chunk	O
=	O
new_chunk	O
;	O
new_chunk	O
->	O
prev	O
=	O
old_chunk	O
;	O
new_chunk	O
->	O
limit	O
=	O
h	*(struct)
->	O
chunk_limit	O
=	O
(	O
char	O
*	O
)	O
new_chunk	O
+	O
new_size	O
;	O
object_base	O
=	O
__PTR_ALIGN	O
(	O
(	O
char	O
*	O
)	O
new_chunk	O
,	O
new_chunk	O
->	O
contents	O
,	O
h	*(struct)
->	O
alignment_mask	O
)	O
;	O
memcpy	O
(	O
object_base	O
,	O
h	*(struct)
->	O
object_base	O
,	O
obj_size	O
)	O
;	O
if	O
(	O
!	O
h	*(struct)
->	O
maybe_empty_object	O
&&	O
(	O
h	*(struct)
->	O
object_base	O
==	O
__PTR_ALIGN	O
(	O
(	O
char	O
*	O
)	O
old_chunk	O
,	O
old_chunk	O
->	O
contents	O
,	O
h	*(struct)
->	O
alignment_mask	O
)	O
)	O
)	O
{	O
new_chunk	O
->	O
prev	O
=	O
old_chunk	O
->	O
prev	O
;	O
call_freefun	()->(int)
(	O
h	*(struct)
,	O
old_chunk	O
)	O
;	O
}	O
h	*(struct)
->	O
object_base	O
=	O
object_base	O
;	O
h	*(struct)
->	O
next_free	O
=	O
h	*(struct)
->	O
object_base	O
+	O
obj_size	O
;	O
h	*(struct)
->	O
maybe_empty_object	O
=	O
0	int
;	O
}	O
int	O
_obstack_allocated_p	O
(	O
struct	O
obstack	O
*	O
h	*(struct)
,	O
void	O
*	O
obj	*(void)
)	O
__attribute_pure__	O
;	O
int	O
_obstack_allocated_p	O
(	O
struct	O
obstack	O
*	O
h	*(struct)
,	O
void	O
*	O
obj	*(void)
)	O
{	O
struct	O
_obstack_chunk	O
*	O
lp	*(struct)
;	O
struct	O
_obstack_chunk	O
*	O
plp	*(struct)
;	O
lp	*(struct)
=	O
(	O
h	*(struct)
)	O
->	O
chunk	O
;	O
while	O
(	O
lp	*(struct)
!=	O
0	int
&&	O
(	O
(	O
void	O
*	O
)	O
lp	*(struct)
>=	O
obj	*(void)
||	O
(	O
void	O
*	O
)	O
(	O
lp	*(struct)
)	O
->	O
limit	O
<	O
obj	*(void)
)	O
)	O
{	O
plp	*(struct)
=	O
lp	*(struct)
->	O
prev	O
;	O
lp	*(struct)
=	O
plp	*(struct)
;	O
}	O
return	O
lp	*(struct)
!=	O
0	int
;	O
}	O
void	O
_obstack_free	O
(	O
struct	O
obstack	O
*	O
h	*(struct)
,	O
void	O
*	O
obj	*(void)
)	O
{	O
struct	O
_obstack_chunk	O
*	O
lp	*(struct)
;	O
struct	O
_obstack_chunk	O
*	O
plp	*(struct)
;	O
lp	*(struct)
=	O
h	*(struct)
->	O
chunk	O
;	O
while	O
(	O
lp	*(struct)
!=	O
0	int
&&	O
(	O
(	O
void	O
*	O
)	O
lp	*(struct)
>=	O
obj	*(void)
||	O
(	O
void	O
*	O
)	O
(	O
lp	*(struct)
)	O
->	O
limit	O
<	O
obj	*(void)
)	O
)	O
{	O
plp	*(struct)
=	O
lp	*(struct)
->	O
prev	O
;	O
call_freefun	()->(int)
(	O
h	*(struct)
,	O
lp	*(struct)
)	O
;	O
lp	*(struct)
=	O
plp	*(struct)
;	O
h	*(struct)
->	O
maybe_empty_object	O
=	O
1	int
;	O
}	O
if	O
(	O
lp	*(struct)
)	O
{	O
h	*(struct)
->	O
object_base	O
=	O
h	*(struct)
->	O
next_free	O
=	O
(	O
char	O
*	O
)	O
(	O
obj	*(void)
)	O
;	O
h	*(struct)
->	O
chunk_limit	O
=	O
lp	*(struct)
->	O
limit	O
;	O
h	*(struct)
->	O
chunk	O
=	O
lp	*(struct)
;	O
}	O
else	O
if	O
(	O
obj	*(void)
!=	O
0	int
)	O
abort	O
(	O
)	O
;	O
}	O
_OBSTACK_SIZE_T	O
_obstack_memory_used	O
(	O
struct	O
obstack	O
*	O
h	*(struct)
)	O
{	O
struct	O
_obstack_chunk	O
*	O
lp	*(struct)
;	O
_OBSTACK_SIZE_T	O
nbytes	O
=	O
0	int
;	O
for	O
(	O
lp	*(struct)
=	O
h	*(struct)
->	O
chunk	O
;	O
lp	*(struct)
!=	O
0	int
;	O
lp	*(struct)
=	O
lp	*(struct)
->	O
prev	O
)	O
{	O
nbytes	O
+=	O
lp	*(struct)
->	O
limit	O
-	O
(	O
char	O
*	O
)	O
lp	*(struct)
;	O
}	O
return	O
nbytes	O
;	O
}	O
static	O
_Noreturn	O
void	O
print_and_abort	()->(void)
(	O
void	O
)	O
{	O
fprintf	()->(int)
(	O
stderr	O
,	O
"%s\n"	*(char)
,	O
_	O
(	O
"memory exhausted"	*(char)
)	O
)	O
;	O
exit	O
(	O
obstack_exit_failure	O
)	O
;	O
}	O
__attribute_noreturn__	O
void	O
(	O
*	O
obstack_alloc_failed_handler	O
)	O
(	O
void	O
)	O
=	O
print_and_abort	()->(void)
;	O
