static	O
void	O
make_blocking	(int)->(void)
(	O
MHD_socket	int
fd	int
)	O
{	O
int	O
flags	int
;	O
flags	int
=	O
fcntl	(int,int)->(int)
(	O
fd	int
,	O
F_GETFL	int
)	O
;	O
if	O
(	O
-	O
1	int
==	O
flags	int
)	O
return	O
;	O
if	O
(	O
(	O
flags	int
&	O
~	O
O_NONBLOCK	int
)	O
!=	O
flags	int
)	O
if	O
(	O
-	O
1	int
==	O
fcntl	(int,int)->(int)
(	O
fd	int
,	O
F_SETFL	int
,	O
flags	int
&	O
~	O
O_NONBLOCK	int
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
}	O
static	O
void	O
send_all	(int,*(char),long)->(void)
(	O
MHD_socket	int
sock	int
,	O
const	O
char	O
*	O
buf	*(char)
,	O
size_t	long
len	long
)	O
{	O
ssize_t	long
ret	long
;	O
size_t	long
off	long
;	O
make_blocking	(int)->(void)
(	O
sock	int
)	O
;	O
for	O
(	O
off	long
=	O
0	int
;	O
off	long
<	O
len	long
;	O
off	long
+=	O
ret	long
)	O
{	O
ret	long
=	O
send	(int,*(void),long,int)->(long)
(	O
sock	int
,	O
&	O
buf	*(char)
[	O
off	long
]	O
,	O
len	long
-	O
off	long
,	O
0	int
)	O
;	O
if	O
(	O
0	int
>	O
ret	long
)	O
{	O
if	O
(	O
EAGAIN	int
==	O
errno	O
)	O
{	O
ret	long
=	O
0	int
;	O
continue	O
;	O
}	O
break	O
;	O
}	O
if	O
(	O
0	int
==	O
ret	long
)	O
break	O
;	O
}	O
}	O
struct	O
MyData	struct(*(struct),*(char),long,int)
{	O
struct	O
MHD_UpgradeResponseHandle	O
*	O
urh	*(struct)
;	O
char	O
*	O
extra_in	*(char)
;	O
size_t	long
extra_in_size	long
;	O
MHD_socket	int
sock	int
;	O
}	O
;	O
static	O
void	O
*	O
run_usock	(*(void))->(*(void))
(	O
void	O
*	O
cls	*(void)
)	O
{	O
struct	O
MyData	struct(*(struct),*(char),long,int)
*	O
md	*(struct(*(struct),*(char),long,int))
=	O
cls	*(void)
;	O
struct	O
MHD_UpgradeResponseHandle	O
*	O
urh	*(struct)
=	O
md	*(struct(*(struct),*(char),long,int))
->	O
urh	*(struct)
;	O
char	O
buf	*(char)
[	O
128	int
]	O
;	O
ssize_t	long
got	long
;	O
make_blocking	(int)->(void)
(	O
md	*(struct(*(struct),*(char),long,int))
->	O
sock	int
)	O
;	O
if	O
(	O
0	int
!=	O
md	*(struct(*(struct),*(char),long,int))
->	O
extra_in_size	long
)	O
{	O
send_all	(int,*(char),long)->(void)
(	O
md	*(struct(*(struct),*(char),long,int))
->	O
sock	int
,	O
md	*(struct(*(struct),*(char),long,int))
->	O
extra_in	*(char)
,	O
md	*(struct(*(struct),*(char),long,int))
->	O
extra_in_size	long
)	O
;	O
free	(*(void))->(void)
(	O
md	*(struct(*(struct),*(char),long,int))
->	O
extra_in	*(char)
)	O
;	O
}	O
while	O
(	O
1	int
)	O
{	O
got	long
=	O
recv	(int,*(void),long,int)->(long)
(	O
md	*(struct(*(struct),*(char),long,int))
->	O
sock	int
,	O
buf	*(char)
,	O
sizeof	O
(	O
buf	*(char)
)	O
,	O
0	int
)	O
;	O
if	O
(	O
0	int
>=	O
got	long
)	O
break	O
;	O
send_all	(int,*(char),long)->(void)
(	O
md	*(struct(*(struct),*(char),long,int))
->	O
sock	int
,	O
buf	*(char)
,	O
got	long
)	O
;	O
}	O
free	(*(void))->(void)
(	O
md	*(struct(*(struct),*(char),long,int))
)	O
;	O
MHD_upgrade_action	(*(struct),enum(int,int,int))->(int)
(	O
urh	*(struct)
,	O
MHD_UPGRADE_ACTION_CLOSE	int
)	O
;	O
return	O
NULL	O
;	O
}	O
static	O
void	O
uh_cb	(*(void),*(struct),*(void),*(char),long,int,*(struct))->(void)
(	O
void	O
*	O
cls	*(void)
,	O
struct	O
MHD_Connection	O
*	O
connection	*(struct)
,	O
void	O
*	O
con_cls	*(*(void))
,	O
const	O
char	O
*	O
extra_in	*(char)
,	O
size_t	long
extra_in_size	long
,	O
MHD_socket	int
sock	int
,	O
struct	O
MHD_UpgradeResponseHandle	O
*	O
urh	*(struct)
)	O
{	O
struct	O
MyData	struct(*(struct),*(char),long,int)
*	O
md	*(struct(*(struct),*(char),long,int))
;	O
pthread_t	long
pt	long
;	O
(	O
void	O
)	O
cls	*(void)
;	O
(	O
void	O
)	O
connection	*(struct)
;	O
(	O
void	O
)	O
con_cls	*(*(void))
;	O
md	*(struct(*(struct),*(char),long,int))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
MyData	struct(*(struct),*(char),long,int)
)	O
)	O
;	O
if	O
(	O
NULL	O
==	O
md	*(struct(*(struct),*(char),long,int))
)	O
abort	()->(void)
(	O
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
md	*(struct(*(struct),*(char),long,int))
,	O
0	int
,	O
sizeof	O
(	O
struct	O
MyData	struct(*(struct),*(char),long,int)
)	O
)	O
;	O
if	O
(	O
0	int
!=	O
extra_in_size	long
)	O
{	O
md	*(struct(*(struct),*(char),long,int))
->	O
extra_in	*(char)
=	O
malloc	(long)->(*(void))
(	O
extra_in_size	long
)	O
;	O
if	O
(	O
NULL	O
==	O
md	*(struct(*(struct),*(char),long,int))
->	O
extra_in	*(char)
)	O
abort	()->(void)
(	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
md	*(struct(*(struct),*(char),long,int))
->	O
extra_in	*(char)
,	O
extra_in	*(char)
,	O
extra_in_size	long
)	O
;	O
}	O
md	*(struct(*(struct),*(char),long,int))
->	O
extra_in_size	long
=	O
extra_in_size	long
;	O
md	*(struct(*(struct),*(char),long,int))
->	O
sock	int
=	O
sock	int
;	O
md	*(struct(*(struct),*(char),long,int))
->	O
urh	*(struct)
=	O
urh	*(struct)
;	O
if	O
(	O
0	int
!=	O
pthread_create	(*(long),*(union(array(char),long)),*((*(void))->(*(void))),*(void))->(int)
(	O
&	O
pt	long
,	O
NULL	O
,	O
&	O
run_usock	(*(void))->(*(void))
,	O
md	*(struct(*(struct),*(char),long,int))
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
pthread_detach	(long)->(int)
(	O
pt	long
)	O
;	O
}	O
static	O
int	O
ahc_echo	(*(void),*(struct),*(char),*(char),*(char),*(char),*(long),*(*(void)))->(int)
(	O
void	O
*	O
cls	*(void)
,	O
struct	O
MHD_Connection	O
*	O
connection	*(struct)
,	O
const	O
char	O
*	O
url	*(char)
,	O
const	O
char	O
*	O
method	*(char)
,	O
const	O
char	O
*	O
version	*(char)
,	O
const	O
char	O
*	O
upload_data	*(char)
,	O
size_t	long
*	O
upload_data_size	*(long)
,	O
void	O
*	O
*	O
ptr	*(void)
)	O
{	O
static	O
int	O
aptr	int
;	O
struct	O
MHD_Response	O
*	O
response	*(struct)
;	O
int	O
ret	long
;	O
(	O
void	O
)	O
cls	*(void)
;	O
(	O
void	O
)	O
url	*(char)
;	O
(	O
void	O
)	O
version	*(char)
;	O
(	O
void	O
)	O
upload_data	*(char)
;	O
(	O
void	O
)	O
upload_data_size	*(long)
;	O
if	O
(	O
0	int
!=	O
strcmp	(*(char),*(char))->(int)
(	O
method	*(char)
,	O
"GET"	*(char)
)	O
)	O
return	O
MHD_NO	int
;	O
if	O
(	O
&	O
aptr	int
!=	O
*	O
ptr	*(void)
)	O
{	O
*	O
ptr	*(void)
=	O
&	O
aptr	int
;	O
return	O
MHD_YES	int
;	O
}	O
*	O
ptr	*(void)
=	O
NULL	O
;	O
response	*(struct)
=	O
MHD_create_response_for_upgrade	(*((*(void),*(struct),*(void),*(char),long,int,*(struct))->(void)),*(void))->(*(struct))
(	O
&	O
uh_cb	(*(void),*(struct),*(void),*(char),long,int,*(struct))->(void)
,	O
NULL	O
)	O
;	O
MHD_add_response_header	(*(struct),*(char),*(char))->(int)
(	O
response	*(struct)
,	O
MHD_HTTP_HEADER_UPGRADE	*(char)
,	O
"Echo Server"	*(char)
)	O
;	O
ret	long
=	O
MHD_queue_response	(*(struct),int,*(struct))->(int)
(	O
connection	*(struct)
,	O
MHD_HTTP_SWITCHING_PROTOCOLS	int
,	O
response	*(struct)
)	O
;	O
MHD_destroy_response	(*(struct))->(void)
(	O
response	*(struct)
)	O
;	O
return	O
ret	long
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
const	O
*	O
argv	*(*(char))
)	O
{	O
struct	O
MHD_Daemon	O
*	O
d	*(struct)
;	O
if	O
(	O
argc	int
!=	O
2	int
)	O
{	O
printf	(*(char))->(int)
(	O
"%s PORT\n"	*(char)
,	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
return	O
1	int
;	O
}	O
d	*(struct)
=	O
MHD_start_daemon	(int,short,*((*(void),*(struct(short,array(char))),int)->(int)),*(void),*((*(void),*(struct),*(char),*(char),*(char),*(char),*(long),*(*(void)))->(int)),*(void))->(*(struct))
(	O
MHD_ALLOW_UPGRADE	int
|	O
MHD_USE_AUTO	int
|	O
MHD_USE_INTERNAL_POLLING_THREAD	int
|	O
MHD_USE_ERROR_LOG	int
,	O
atoi	(*(char))->(int)
(	O
argv	*(*(char))
[	O
1	int
]	O
)	O
,	O
NULL	O
,	O
NULL	O
,	O
&	O
ahc_echo	(*(void),*(struct),*(char),*(char),*(char),*(char),*(long),*(*(void)))->(int)
,	O
NULL	O
,	O
MHD_OPTION_CONNECTION_TIMEOUT	int
,	O
(	O
unsigned	O
int	O
)	O
120	int
,	O
MHD_OPTION_END	int
)	O
;	O
if	O
(	O
d	*(struct)
==	O
NULL	O
)	O
return	O
1	int
;	O
(	O
void	O
)	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
MHD_stop_daemon	(*(struct))->(void)
(	O
d	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
