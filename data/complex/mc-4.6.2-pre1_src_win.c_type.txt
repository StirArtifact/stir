int	O
check_movement_keys	(int,int,*(void),*((*(void),int)->(void)),*((*(void),int)->(void)),*((*(void),int)->(void)),*((*(void),int)->(void)))->(int)
(	O
int	O
key	*(void)
,	O
int	O
page_size	int
,	O
void	O
*	O
data	*(void)
,	O
movefn	*((*(void),int)->(void))
backfn	*((*(void),int)->(void))
,	O
movefn	*((*(void),int)->(void))
forfn	*((*(void),int)->(void))
,	O
movefn	*((*(void),int)->(void))
topfn	*((*(void),int)->(void))
,	O
movefn	*((*(void),int)->(void))
bottomfn	*((*(void),int)->(void))
)	O
{	O
switch	O
(	O
key	*(void)
)	O
{	O
case	O
KEY_UP	int
:	O
case	O
XCTRL	O
(	O
'p'	O
)	O
:	O
(	O
*	O
backfn	*((*(void),int)->(void))
)	O
(	O
data	*(void)
,	O
1	int
)	O
;	O
break	O
;	O
case	O
KEY_DOWN	int
:	O
case	O
XCTRL	O
(	O
'n'	O
)	O
:	O
(	O
*	O
forfn	*((*(void),int)->(void))
)	O
(	O
data	*(void)
,	O
1	int
)	O
;	O
break	O
;	O
case	O
KEY_PPAGE	int
:	O
case	O
ALT	O
(	O
'v'	O
)	O
:	O
(	O
*	O
backfn	*((*(void),int)->(void))
)	O
(	O
data	*(void)
,	O
page_size	int
-	O
1	int
)	O
;	O
break	O
;	O
case	O
KEY_NPAGE	int
:	O
case	O
XCTRL	O
(	O
'v'	O
)	O
:	O
(	O
*	O
forfn	*((*(void),int)->(void))
)	O
(	O
data	*(void)
,	O
page_size	int
-	O
1	int
)	O
;	O
break	O
;	O
case	O
KEY_HOME	int
:	O
case	O
KEY_M_CTRL	int
|	O
KEY_HOME	int
:	O
case	O
KEY_M_CTRL	int
|	O
KEY_PPAGE	int
:	O
case	O
KEY_A1	int
:	O
case	O
ALT	O
(	O
'<'	O
)	O
:	O
(	O
*	O
topfn	*((*(void),int)->(void))
)	O
(	O
data	*(void)
,	O
0	int
)	O
;	O
break	O
;	O
case	O
KEY_END	int
:	O
case	O
KEY_M_CTRL	int
|	O
KEY_END	int
:	O
case	O
KEY_M_CTRL	int
|	O
KEY_NPAGE	int
:	O
case	O
KEY_C1	int
:	O
case	O
ALT	O
(	O
'>'	O
)	O
:	O
(	O
*	O
bottomfn	*((*(void),int)->(void))
)	O
(	O
data	*(void)
,	O
0	int
)	O
;	O
break	O
;	O
case	O
'b'	O
:	O
case	O
KEY_BACKSPACE	int
:	O
(	O
*	O
backfn	*((*(void),int)->(void))
)	O
(	O
data	*(void)
,	O
page_size	int
-	O
1	int
)	O
;	O
break	O
;	O
case	O
' '	O
:	O
(	O
*	O
forfn	*((*(void),int)->(void))
)	O
(	O
data	*(void)
,	O
page_size	int
-	O
1	int
)	O
;	O
break	O
;	O
case	O
'u'	O
:	O
(	O
*	O
backfn	*((*(void),int)->(void))
)	O
(	O
data	*(void)
,	O
page_size	int
/	O
2	int
)	O
;	O
break	O
;	O
case	O
'd'	O
:	O
(	O
*	O
forfn	*((*(void),int)->(void))
)	O
(	O
data	*(void)
,	O
page_size	int
/	O
2	int
)	O
;	O
break	O
;	O
case	O
'g'	O
:	O
(	O
*	O
topfn	*((*(void),int)->(void))
)	O
(	O
data	*(void)
,	O
0	int
)	O
;	O
break	O
;	O
case	O
'G'	O
:	O
(	O
*	O
bottomfn	*((*(void),int)->(void))
)	O
(	O
data	*(void)
,	O
0	int
)	O
;	O
break	O
;	O
default	O
:	O
return	O
MSG_NOT_HANDLED	int
;	O
}	O
return	O
MSG_HANDLED	int
;	O
}	O
int	O
is_abort_char	(int)->(int)
(	O
int	O
c	int
)	O
{	O
return	O
(	O
c	int
==	O
XCTRL	O
(	O
'c'	O
)	O
||	O
c	int
==	O
XCTRL	O
(	O
'g'	O
)	O
||	O
c	int
==	O
ESC_CHAR	char
||	O
c	int
==	O
KEY_F	O
(	O
10	int
)	O
)	O
;	O
}	O
void	O
mc_raw_mode	()->(void)
(	O
void	O
)	O
{	O
raw	O
(	O
)	O
;	O
}	O
void	O
mc_noraw_mode	()->(void)
(	O
void	O
)	O
{	O
noraw	O
(	O
)	O
;	O
}	O
int	O
xterm_flag	int
=	O
0	int
;	O
void	O
do_enter_ca_mode	()->(void)
(	O
void	O
)	O
{	O
if	O
(	O
!	O
xterm_flag	int
)	O
return	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
ESC_STR	*(char)
"7"	*(char)
ESC_STR	*(char)
"[?47h"	*(char)
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
void	O
do_exit_ca_mode	()->(void)
(	O
void	O
)	O
{	O
if	O
(	O
!	O
xterm_flag	int
)	O
return	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
ESC_STR	*(char)
"[?47l"	*(char)
ESC_STR	*(char)
"8"	*(char)
ESC_STR	*(char)
"[m"	*(char)
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
key_code_name_t	struct(int,*(char),*(char))
key_name_conv_tab	array(struct(int,*(char),*(char)))
[	O
]	O
=	O
{	O
{	O
KEY_F	O
(	O
1	int
)	O
,	O
"f1"	*(char)
,	O
N_	O
(	O
"Function key 1"	*(char)
)	O
}	O
,	O
{	O
KEY_F	O
(	O
2	int
)	O
,	O
"f2"	*(char)
,	O
N_	O
(	O
"Function key 2"	*(char)
)	O
}	O
,	O
{	O
KEY_F	O
(	O
3	int
)	O
,	O
"f3"	*(char)
,	O
N_	O
(	O
"Function key 3"	*(char)
)	O
}	O
,	O
{	O
KEY_F	O
(	O
4	int
)	O
,	O
"f4"	*(char)
,	O
N_	O
(	O
"Function key 4"	*(char)
)	O
}	O
,	O
{	O
KEY_F	O
(	O
5	int
)	O
,	O
"f5"	*(char)
,	O
N_	O
(	O
"Function key 5"	*(char)
)	O
}	O
,	O
{	O
KEY_F	O
(	O
6	int
)	O
,	O
"f6"	*(char)
,	O
N_	O
(	O
"Function key 6"	*(char)
)	O
}	O
,	O
{	O
KEY_F	O
(	O
7	int
)	O
,	O
"f7"	*(char)
,	O
N_	O
(	O
"Function key 7"	*(char)
)	O
}	O
,	O
{	O
KEY_F	O
(	O
8	int
)	O
,	O
"f8"	*(char)
,	O
N_	O
(	O
"Function key 8"	*(char)
)	O
}	O
,	O
{	O
KEY_F	O
(	O
9	int
)	O
,	O
"f9"	*(char)
,	O
N_	O
(	O
"Function key 9"	*(char)
)	O
}	O
,	O
{	O
KEY_F	O
(	O
10	int
)	O
,	O
"f10"	*(char)
,	O
N_	O
(	O
"Function key 10"	*(char)
)	O
}	O
,	O
{	O
KEY_F	O
(	O
11	int
)	O
,	O
"f11"	*(char)
,	O
N_	O
(	O
"Function key 11"	*(char)
)	O
}	O
,	O
{	O
KEY_F	O
(	O
12	int
)	O
,	O
"f12"	*(char)
,	O
N_	O
(	O
"Function key 12"	*(char)
)	O
}	O
,	O
{	O
KEY_F	O
(	O
13	int
)	O
,	O
"f13"	*(char)
,	O
N_	O
(	O
"Function key 13"	*(char)
)	O
}	O
,	O
{	O
KEY_F	O
(	O
14	int
)	O
,	O
"f14"	*(char)
,	O
N_	O
(	O
"Function key 14"	*(char)
)	O
}	O
,	O
{	O
KEY_F	O
(	O
15	int
)	O
,	O
"f15"	*(char)
,	O
N_	O
(	O
"Function key 15"	*(char)
)	O
}	O
,	O
{	O
KEY_F	O
(	O
16	int
)	O
,	O
"f16"	*(char)
,	O
N_	O
(	O
"Function key 16"	*(char)
)	O
}	O
,	O
{	O
KEY_F	O
(	O
17	int
)	O
,	O
"f17"	*(char)
,	O
N_	O
(	O
"Function key 17"	*(char)
)	O
}	O
,	O
{	O
KEY_F	O
(	O
18	int
)	O
,	O
"f18"	*(char)
,	O
N_	O
(	O
"Function key 18"	*(char)
)	O
}	O
,	O
{	O
KEY_F	O
(	O
19	int
)	O
,	O
"f19"	*(char)
,	O
N_	O
(	O
"Function key 19"	*(char)
)	O
}	O
,	O
{	O
KEY_F	O
(	O
20	int
)	O
,	O
"f20"	*(char)
,	O
N_	O
(	O
"Function key 20"	*(char)
)	O
}	O
,	O
{	O
KEY_BACKSPACE	int
,	O
"bs"	*(char)
,	O
N_	O
(	O
"Backspace key"	*(char)
)	O
}	O
,	O
{	O
KEY_END	int
,	O
"end"	*(char)
,	O
N_	O
(	O
"End key"	*(char)
)	O
}	O
,	O
{	O
KEY_UP	int
,	O
"up"	*(char)
,	O
N_	O
(	O
"Up arrow key"	*(char)
)	O
}	O
,	O
{	O
KEY_DOWN	int
,	O
"down"	*(char)
,	O
N_	O
(	O
"Down arrow key"	*(char)
)	O
}	O
,	O
{	O
KEY_LEFT	int
,	O
"left"	*(char)
,	O
N_	O
(	O
"Left arrow key"	*(char)
)	O
}	O
,	O
{	O
KEY_RIGHT	int
,	O
"right"	*(char)
,	O
N_	O
(	O
"Right arrow key"	*(char)
)	O
}	O
,	O
{	O
KEY_HOME	int
,	O
"home"	*(char)
,	O
N_	O
(	O
"Home key"	*(char)
)	O
}	O
,	O
{	O
KEY_NPAGE	int
,	O
"pgdn"	*(char)
,	O
N_	O
(	O
"Page Down key"	*(char)
)	O
}	O
,	O
{	O
KEY_PPAGE	int
,	O
"pgup"	*(char)
,	O
N_	O
(	O
"Page Up key"	*(char)
)	O
}	O
,	O
{	O
KEY_IC	int
,	O
"insert"	*(char)
,	O
N_	O
(	O
"Insert key"	*(char)
)	O
}	O
,	O
{	O
KEY_DC	int
,	O
"delete"	*(char)
,	O
N_	O
(	O
"Delete key"	*(char)
)	O
}	O
,	O
{	O
ALT	O
(	O
'\t'	O
)	O
,	O
"complete"	*(char)
,	O
N_	O
(	O
"Completion/M-tab"	*(char)
)	O
}	O
,	O
{	O
KEY_KP_ADD	int
,	O
"kpplus"	*(char)
,	O
N_	O
(	O
"+ on keypad"	*(char)
)	O
}	O
,	O
{	O
KEY_KP_SUBTRACT	int
,	O
"kpminus"	*(char)
,	O
N_	O
(	O
"- on keypad"	*(char)
)	O
}	O
,	O
{	O
KEY_KP_MULTIPLY	int
,	O
"kpasterix"	*(char)
,	O
N_	O
(	O
"* on keypad"	*(char)
)	O
}	O
,	O
{	O
KEY_LEFT	int
,	O
"kpleft"	*(char)
,	O
N_	O
(	O
"Left arrow keypad"	*(char)
)	O
}	O
,	O
{	O
KEY_RIGHT	int
,	O
"kpright"	*(char)
,	O
N_	O
(	O
"Right arrow keypad"	*(char)
)	O
}	O
,	O
{	O
KEY_UP	int
,	O
"kpup"	*(char)
,	O
N_	O
(	O
"Up arrow keypad"	*(char)
)	O
}	O
,	O
{	O
KEY_DOWN	int
,	O
"kpdown"	*(char)
,	O
N_	O
(	O
"Down arrow keypad"	*(char)
)	O
}	O
,	O
{	O
KEY_HOME	int
,	O
"kphome"	*(char)
,	O
N_	O
(	O
"Home on keypad"	*(char)
)	O
}	O
,	O
{	O
KEY_END	int
,	O
"kpend"	*(char)
,	O
N_	O
(	O
"End on keypad"	*(char)
)	O
}	O
,	O
{	O
KEY_NPAGE	int
,	O
"kpnpage"	*(char)
,	O
N_	O
(	O
"Page Down keypad"	*(char)
)	O
}	O
,	O
{	O
KEY_PPAGE	int
,	O
"kpppage"	*(char)
,	O
N_	O
(	O
"Page Up keypad"	*(char)
)	O
}	O
,	O
{	O
KEY_IC	int
,	O
"kpinsert"	*(char)
,	O
N_	O
(	O
"Insert on keypad"	*(char)
)	O
}	O
,	O
{	O
KEY_DC	int
,	O
"kpdelete"	*(char)
,	O
N_	O
(	O
"Delete on keypad"	*(char)
)	O
}	O
,	O
{	O
(	O
int	O
)	O
'\n'	O
,	O
"kpenter"	*(char)
,	O
N_	O
(	O
"Enter on keypad"	*(char)
)	O
}	O
,	O
{	O
(	O
int	O
)	O
'/'	O
,	O
"kpslash"	*(char)
,	O
N_	O
(	O
"Slash on keypad"	*(char)
)	O
}	O
,	O
{	O
(	O
int	O
)	O
'#'	O
,	O
"kpnumlock"	*(char)
,	O
N_	O
(	O
"NumLock on keypad"	*(char)
)	O
}	O
,	O
{	O
0	int
,	O
0	int
,	O
0	int
}	O
}	O
;	O
int	O
lookup_key	*(void)
(	O
char	O
*	O
keyname	*(char)
)	O
{	O
int	O
i	array(int)
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
key_name_conv_tab	array(struct(int,*(char),*(char)))
[	O
i	array(int)
]	O
.	O
code	int
;	O
i	array(int)
++	O
)	O
{	O
if	O
(	O
g_strcasecmp	(*(char),*(char))->(int)
(	O
key_name_conv_tab	array(struct(int,*(char),*(char)))
[	O
i	array(int)
]	O
.	O
name	*(char)
,	O
keyname	*(char)
)	O
)	O
continue	O
;	O
return	O
key_name_conv_tab	array(struct(int,*(char),*(char)))
[	O
i	array(int)
]	O
.	O
code	int
;	O
}	O
return	O
0	int
;	O
}	O
