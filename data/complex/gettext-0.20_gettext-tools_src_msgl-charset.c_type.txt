void	O
compare_po_locale_charsets	(*(struct(*(*(struct`)),long,long,bool,*(char))))->(void)
(	O
const	O
msgdomain_list_ty	struct
*	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
)	O
{	O
const	O
char	O
*	O
locale_code	*(char)
;	O
const	O
char	O
*	O
canon_locale_code	*(char)
;	O
bool	bool
warned	bool
;	O
size_t	long
j	long
,	O
k	long
;	O
locale_code	*(char)
=	O
locale_charset	()->(*(char))
(	O
)	O
;	O
canon_locale_code	*(char)
=	O
po_charset_canonicalize	(*(char))->(*(char))
(	O
locale_code	*(char)
)	O
;	O
warned	bool
=	O
false	int
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
->	O
nitems	long
;	O
k	long
++	O
)	O
{	O
const	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
=	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
->	O
item	*(*(char))
[	O
k	long
]	O
->	O
messages	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
nitems	long
;	O
j	long
++	O
)	O
if	O
(	O
is_header	O
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
[	O
j	long
]	O
)	O
&&	O
!	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
[	O
j	long
]	O
->	O
obsolete	bool
)	O
{	O
const	O
char	O
*	O
header	*(char)
=	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
[	O
j	long
]	O
->	O
msgstr	*(char)
;	O
if	O
(	O
header	*(char)
!=	O
NULL	O
)	O
{	O
const	O
char	O
*	O
charsetstr	*(char)
=	O
c_strstr	(*(char),*(char))->(*(char))
(	O
header	*(char)
,	O
"charset="	*(char)
)	O
;	O
if	O
(	O
charsetstr	*(char)
!=	O
NULL	O
)	O
{	O
size_t	long
len	long
;	O
char	O
*	O
charset	*(char)
;	O
const	O
char	O
*	O
canon_charset	*(char)
;	O
charsetstr	*(char)
+=	O
strlen	(*(char))->(long)
(	O
"charset="	*(char)
)	O
;	O
len	long
=	O
strcspn	(*(char),*(char))->(long)
(	O
charsetstr	*(char)
,	O
" \t\n"	*(char)
)	O
;	O
charset	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloca	O
(	O
len	long
+	O
1	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
charset	*(char)
,	O
charsetstr	*(char)
,	O
len	long
)	O
;	O
charset	*(char)
[	O
len	long
]	O
=	O
'\0'	O
;	O
canon_charset	*(char)
=	O
po_charset_canonicalize	(*(char))->(*(char))
(	O
charset	*(char)
)	O
;	O
if	O
(	O
canon_charset	*(char)
==	O
NULL	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"present charset \"%s\" is not a portable encoding name"	*(char)
)	O
,	O
charset	*(char)
)	O
;	O
freea	(*(void))->(void)
(	O
charset	*(char)
)	O
;	O
if	O
(	O
canon_locale_code	*(char)
!=	O
canon_charset	*(char)
)	O
{	O
multiline_warning	(*(char),*(char))->(void)
(	O
xasprintf	(*(char))->(*(char))
(	O
_	O
(	O
"warning: "	*(char)
)	O
)	O
,	O
xasprintf	(*(char))->(*(char))
(	O
_	O
(	O
"Locale charset \"%s\" is different from\ninput file charset \"%s\".\nOutput of '%s' might be incorrect.\nPossible workarounds are:\n"	*(char)
)	O
,	O
locale_code	*(char)
,	O
canon_charset	*(char)
,	O
basename	(*(char))->(*(char))
(	O
program_name	*(char)
)	O
)	O
)	O
;	O
multiline_warning	(*(char),*(char))->(void)
(	O
NULL	O
,	O
xasprintf	(*(char))->(*(char))
(	O
_	O
(	O
"- Set LC_ALL to a locale with encoding %s.\n"	*(char)
)	O
,	O
canon_charset	*(char)
)	O
)	O
;	O
if	O
(	O
canon_locale_code	*(char)
!=	O
NULL	O
)	O
multiline_warning	(*(char),*(char))->(void)
(	O
NULL	O
,	O
xasprintf	(*(char))->(*(char))
(	O
_	O
(	O
"- Convert the translation catalog to %s using 'msgconv',\n  then apply '%s',\n  then convert back to %s using 'msgconv'.\n"	*(char)
)	O
,	O
canon_locale_code	*(char)
,	O
basename	(*(char))->(*(char))
(	O
program_name	*(char)
)	O
,	O
canon_charset	*(char)
)	O
)	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
canon_charset	*(char)
,	O
"UTF-8"	*(char)
)	O
!=	O
0	int
&&	O
(	O
canon_locale_code	*(char)
==	O
NULL	O
||	O
strcmp	(*(char),*(char))->(int)
(	O
canon_locale_code	*(char)
,	O
"UTF-8"	*(char)
)	O
!=	O
0	int
)	O
)	O
multiline_warning	(*(char),*(char))->(void)
(	O
NULL	O
,	O
xasprintf	(*(char))->(*(char))
(	O
_	O
(	O
"- Set LC_ALL to a locale with encoding %s,\n  convert the translation catalog to %s using 'msgconv',\n  then apply '%s',\n  then convert back to %s using 'msgconv'.\n"	*(char)
)	O
,	O
"UTF-8"	*(char)
,	O
"UTF-8"	*(char)
,	O
basename	(*(char))->(*(char))
(	O
program_name	*(char)
)	O
,	O
canon_charset	*(char)
)	O
)	O
;	O
warned	bool
=	O
true	int
;	O
}	O
}	O
}	O
}	O
}	O
if	O
(	O
canon_locale_code	*(char)
==	O
NULL	O
&&	O
!	O
warned	bool
)	O
multiline_warning	(*(char),*(char))->(void)
(	O
xasprintf	(*(char))->(*(char))
(	O
_	O
(	O
"warning: "	*(char)
)	O
)	O
,	O
xasprintf	(*(char))->(*(char))
(	O
_	O
(	O
"Locale charset \"%s\" is not a portable encoding name.\nOutput of '%s' might be incorrect.\nA possible workaround is to set LC_ALL=C.\n"	*(char)
)	O
,	O
locale_code	*(char)
,	O
basename	(*(char))->(*(char))
(	O
program_name	*(char)
)	O
)	O
)	O
;	O
}	O
