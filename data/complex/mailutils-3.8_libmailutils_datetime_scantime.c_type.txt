static	O
int	O
_mu_short_weekday_string	(*(char))->(int)
(	O
const	O
char	O
*	O
str	*(char)
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
7	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
mu_c_strncasecmp	(*(char),*(char),long)->(int)
(	O
str	*(char)
,	O
_mu_datetime_short_wday	array(*(char))
[	O
i	int
]	O
,	O
3	int
)	O
==	O
0	int
)	O
return	O
i	int
;	O
}	O
return	O
-	O
1	int
;	O
}	O
static	O
int	O
_mu_full_weekday_string	(*(char),*(*(char)))->(int)
(	O
const	O
char	O
*	O
str	*(char)
,	O
char	O
*	O
*	O
endp	*(*(char))
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
7	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
mu_c_strcasecmp	(*(char),*(char))->(int)
(	O
str	*(char)
,	O
_mu_datetime_full_wday	array(*(char))
[	O
i	int
]	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
endp	*(*(char))
)	O
*	O
endp	*(*(char))
=	O
(	O
char	O
*	O
)	O
(	O
str	*(char)
+	O
strlen	(*(char))->(long)
(	O
_mu_datetime_full_wday	array(*(char))
[	O
i	int
]	O
)	O
)	O
;	O
return	O
i	int
;	O
}	O
}	O
return	O
-	O
1	int
;	O
}	O
static	O
int	O
_mu_short_month_string	(*(char))->(int)
(	O
const	O
char	O
*	O
str	*(char)
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
12	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
mu_c_strncasecmp	(*(char),*(char),long)->(int)
(	O
str	*(char)
,	O
_mu_datetime_short_month	array(*(char))
[	O
i	int
]	O
,	O
3	int
)	O
==	O
0	int
)	O
return	O
i	int
;	O
}	O
return	O
-	O
1	int
;	O
}	O
static	O
int	O
_mu_full_month_string	(*(char),*(*(char)))->(int)
(	O
const	O
char	O
*	O
str	*(char)
,	O
char	O
*	O
*	O
endp	*(*(char))
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
12	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
mu_c_strcasecmp	(*(char),*(char))->(int)
(	O
str	*(char)
,	O
_mu_datetime_full_month	array(*(char))
[	O
i	int
]	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
endp	*(*(char))
)	O
*	O
endp	*(*(char))
=	O
(	O
char	O
*	O
)	O
(	O
str	*(char)
+	O
strlen	(*(char))->(long)
(	O
_mu_datetime_full_month	array(*(char))
[	O
i	int
]	O
)	O
)	O
;	O
return	O
i	int
;	O
}	O
}	O
return	O
-	O
1	int
;	O
}	O
static	O
int	O
get_num	(*(char),*(*(char)),int,int,int,*(int))->(int)
(	O
const	O
char	O
*	O
str	*(char)
,	O
char	O
*	O
*	O
endp	*(*(char))
,	O
int	O
ndig	int
,	O
int	O
minval	int
,	O
int	O
maxval	int
,	O
int	O
*	O
pn	*(int)
)	O
{	O
int	O
x	int
=	O
0	int
;	O
int	O
i	int
;	O
errno	O
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ndig	int
&&	O
*	O
str	*(char)
&&	O
mu_isdigit	O
(	O
*	O
str	*(char)
)	O
;	O
str	*(char)
++	O
,	O
i	int
++	O
)	O
x	int
=	O
x	int
*	O
10	int
+	O
*	O
str	*(char)
-	O
'0'	O
;	O
*	O
endp	*(*(char))
=	O
(	O
char	O
*	O
)	O
str	*(char)
;	O
if	O
(	O
i	int
==	O
0	int
)	O
return	O
-	O
1	int
;	O
else	O
if	O
(	O
pn	*(int)
)	O
*	O
pn	*(int)
=	O
i	int
;	O
else	O
if	O
(	O
i	int
!=	O
ndig	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
x	int
<	O
minval	int
||	O
x	int
>	O
maxval	int
)	O
return	O
-	O
1	int
;	O
return	O
x	int
;	O
}	O
struct	O
save_input	struct(int,*(char))
{	O
int	O
state	*(int)
;	O
const	O
char	O
*	O
input	*(char)
;	O
}	O
;	O
static	O
int	O
push_input	(*(*(struct)),int,*(char))->(int)
(	O
mu_list_t	*(struct)
*	O
plist	*(*(struct))
,	O
int	O
state	*(int)
,	O
const	O
char	O
*	O
input	*(char)
)	O
{	O
mu_list_t	*(struct)
list	*(struct)
=	O
*	O
plist	*(*(struct))
;	O
struct	O
save_input	struct(int,*(char))
*	O
inp	*(struct(int,*(char)))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
inp	*(struct(int,*(char)))
)	O
)	O
;	O
if	O
(	O
!	O
inp	*(struct(int,*(char)))
)	O
return	O
ENOMEM	int
;	O
if	O
(	O
!	O
list	*(struct)
)	O
{	O
int	O
rc	int
=	O
mu_list_create	(*(*(struct)))->(int)
(	O
&	O
list	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	(*(void))->(void)
(	O
inp	*(struct(int,*(char)))
)	O
;	O
return	O
rc	int
;	O
}	O
mu_list_set_destroy_item	(*(struct),*((*(void))->(void)))->(*((*(void))->(void)))
(	O
list	*(struct)
,	O
mu_list_free_item	(*(void))->(void)
)	O
;	O
*	O
plist	*(*(struct))
=	O
list	*(struct)
;	O
}	O
inp	*(struct(int,*(char)))
->	O
state	*(int)
=	O
state	*(int)
;	O
inp	*(struct(int,*(char)))
->	O
input	*(char)
=	O
input	*(char)
;	O
return	O
mu_list_push	(*(struct),*(void))->(int)
(	O
list	*(struct)
,	O
(	O
void	O
*	O
)	O
inp	*(struct(int,*(char)))
)	O
;	O
}	O
static	O
int	O
peek_state	(*(struct),*(int),*(*(char)))->(int)
(	O
mu_list_t	*(struct)
list	*(struct)
,	O
int	O
*	O
state	*(int)
,	O
const	O
char	O
*	O
*	O
input	*(char)
)	O
{	O
int	O
rc	int
;	O
struct	O
save_input	struct(int,*(char))
*	O
inp	*(struct(int,*(char)))
;	O
rc	int
=	O
mu_list_tail	(*(struct),*(*(void)))->(int)
(	O
list	*(struct)
,	O
(	O
void	O
*	O
*	O
)	O
&	O
inp	*(struct(int,*(char)))
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
*	O
state	*(int)
=	O
inp	*(struct(int,*(char)))
->	O
state	*(int)
;	O
if	O
(	O
input	*(char)
)	O
*	O
input	*(char)
=	O
inp	*(struct(int,*(char)))
->	O
input	*(char)
;	O
return	O
0	int
;	O
}	O
static	O
int	O
pop_input	(*(struct),*(int),*(*(char)))->(int)
(	O
mu_list_t	*(struct)
list	*(struct)
,	O
int	O
*	O
state	*(int)
,	O
const	O
char	O
*	O
*	O
input	*(char)
)	O
{	O
int	O
rc	int
;	O
struct	O
save_input	struct(int,*(char))
*	O
inp	*(struct(int,*(char)))
;	O
rc	int
=	O
mu_list_pop	(*(struct),*(*(void)))->(int)
(	O
list	*(struct)
,	O
(	O
void	O
*	O
*	O
)	O
&	O
inp	*(struct(int,*(char)))
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
*	O
state	*(int)
=	O
inp	*(struct(int,*(char)))
->	O
state	*(int)
;	O
if	O
(	O
input	*(char)
)	O
*	O
input	*(char)
=	O
inp	*(struct(int,*(char)))
->	O
input	*(char)
;	O
return	O
0	int
;	O
}	O
static	O
int	O
bracket_to_state	(int)->(int)
(	O
int	O
c	int
)	O
{	O
switch	O
(	O
c	int
)	O
{	O
case	O
'['	O
:	O
case	O
']'	O
:	O
return	O
ST_OPT	int
;	O
case	O
'('	O
:	O
case	O
')'	O
:	O
return	O
ST_ALT	int
;	O
}	O
return	O
ST_NON	O
;	O
}	O
static	O
int	O
state_to_closing_bracket	(int)->(int)
(	O
int	O
st	*(struct(long,long,long))
)	O
{	O
switch	O
(	O
st	*(struct(long,long,long))
)	O
{	O
case	O
ST_OPT	int
:	O
return	O
']'	O
;	O
case	O
ST_ALT	int
:	O
return	O
')'	O
;	O
}	O
return	O
'?'	O
;	O
}	O
static	O
int	O
scan_recovery	(*(char),*(*(struct)),int,*(*(char)),*(*(char)))->(int)
(	O
const	O
char	O
*	O
fmt	*(char)
,	O
mu_list_t	*(struct)
*	O
plist	*(*(struct))
,	O
int	O
skip_alt	int
,	O
const	O
char	O
*	O
*	O
endp	*(*(char))
,	O
const	O
char	O
*	O
*	O
input	*(char)
)	O
{	O
int	O
c	int
,	O
rc	int
=	O
0	int
;	O
int	O
nesting_level	int
=	O
1	int
;	O
int	O
st	*(struct(long,long,long))
;	O
const	O
char	O
*	O
p	*(char)
;	O
while	O
(	O
*	O
fmt	*(char)
)	O
{	O
c	int
=	O
*	O
fmt	*(char)
++	O
;	O
if	O
(	O
c	int
==	O
'%'	O
)	O
{	O
c	int
=	O
*	O
fmt	*(char)
++	O
;	O
if	O
(	O
!	O
c	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s:%d: error in format: %% at the end of input"	*(char)
,	O
__FILE__	O
,	O
__LINE__	O
)	O
)	O
;	O
rc	int
=	O
MU_ERR_FORMAT	O
;	O
break	O
;	O
}	O
switch	O
(	O
c	int
)	O
{	O
case	O
'['	O
:	O
case	O
'('	O
:	O
nesting_level	int
++	O
;	O
rc	int
=	O
push_input	(*(*(struct)),int,*(char))->(int)
(	O
plist	*(*(struct))
,	O
bracket_to_state	(int)->(int)
(	O
c	int
)	O
,	O
NULL	O
)	O
;	O
break	O
;	O
case	O
')'	O
:	O
case	O
']'	O
:	O
rc	int
=	O
pop_input	(*(struct),*(int),*(*(char)))->(int)
(	O
*	O
plist	*(*(struct))
,	O
&	O
st	*(struct(long,long,long))
,	O
&	O
p	*(char)
)	O
;	O
if	O
(	O
rc	int
||	O
st	*(struct(long,long,long))
!=	O
bracket_to_state	(int)->(int)
(	O
c	int
)	O
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s:%d: error in format: %%%c out of context"	*(char)
,	O
__FILE__	O
,	O
__LINE__	O
,	O
c	int
)	O
)	O
;	O
rc	int
=	O
MU_ERR_FORMAT	O
;	O
break	O
;	O
}	O
if	O
(	O
--	O
nesting_level	int
==	O
0	int
)	O
{	O
*	O
endp	*(*(char))
=	O
fmt	*(char)
;	O
if	O
(	O
skip_alt	int
)	O
return	O
0	int
;	O
*	O
input	*(char)
=	O
p	*(char)
;	O
if	O
(	O
st	*(struct(long,long,long))
==	O
ST_ALT	int
)	O
{	O
if	O
(	O
*	O
fmt	*(char)
==	O
'%'	O
&&	O
(	O
fmt	*(char)
[	O
1	int
]	O
==	O
'|'	O
||	O
fmt	*(char)
[	O
1	int
]	O
==	O
']'	O
)	O
)	O
return	O
0	int
;	O
return	O
MU_ERR_PARSE	O
;	O
}	O
return	O
0	int
;	O
}	O
break	O
;	O
case	O
'|'	O
:	O
if	O
(	O
skip_alt	int
)	O
continue	O
;	O
if	O
(	O
nesting_level	int
==	O
1	int
)	O
{	O
*	O
endp	*(*(char))
=	O
fmt	*(char)
;	O
return	O
peek_state	(*(struct),*(int),*(*(char)))->(int)
(	O
*	O
plist	*(*(struct))
,	O
&	O
st	*(struct(long,long,long))
,	O
input	*(char)
)	O
;	O
}	O
break	O
;	O
case	O
'\\'	O
:	O
if	O
(	O
*	O
++	O
fmt	*(char)
==	O
0	int
)	O
{	O
peek_state	(*(struct),*(int),*(*(char)))->(int)
(	O
*	O
plist	*(*(struct))
,	O
&	O
st	*(struct(long,long,long))
,	O
NULL	O
)	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s:%d: error in format: missing closing %%%c"	*(char)
,	O
__FILE__	O
,	O
__LINE__	O
,	O
state_to_closing_bracket	(int)->(int)
(	O
st	*(struct(long,long,long))
)	O
)	O
)	O
;	O
return	O
MU_ERR_FORMAT	O
;	O
}	O
}	O
}	O
}	O
peek_state	(*(struct),*(int),*(*(char)))->(int)
(	O
*	O
plist	*(*(struct))
,	O
&	O
st	*(struct(long,long,long))
,	O
NULL	O
)	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s:%d: error in format: missing closing %%%c"	*(char)
,	O
__FILE__	O
,	O
__LINE__	O
,	O
state_to_closing_bracket	(int)->(int)
(	O
st	*(struct(long,long,long))
)	O
)	O
)	O
;	O
return	O
MU_ERR_FORMAT	O
;	O
}	O
int	O
mu_scan_datetime	(*(char),*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))),*(struct(int,*(char))),*(*(char)))->(int)
(	O
const	O
char	O
*	O
input	*(char)
,	O
const	O
char	O
*	O
fmt	*(char)
,	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
*	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
,	O
struct	O
mu_timezone	struct(int,*(char))
*	O
tz	*(struct(int,*(char)))
,	O
char	O
*	O
*	O
endp	*(*(char))
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
char	O
*	O
p	*(char)
;	O
int	O
n	int
;	O
int	O
c	int
;	O
int	O
st	*(struct(long,long,long))
;	O
int	O
recovery	int
=	O
0	int
;	O
int	O
eof_ok	int
=	O
0	int
;	O
int	O
datetime_parts	int
=	O
0	int
;	O
mu_list_t	*(struct)
save_input_list	*(struct)
=	O
NULL	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
,	O
0	int
,	O
sizeof	O
*	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
)	O
;	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
->	O
tm_isdst	int
=	O
-	O
1	int
;	O
if	O
(	O
tz	*(struct(int,*(char)))
)	O
mu_datetime_tz_local	(*(struct(int,*(char))))->(void)
(	O
tz	*(struct(int,*(char)))
)	O
;	O
input	*(char)
=	O
mu_str_skip_class	(*(char),int)->(*(char))
(	O
input	*(char)
,	O
MU_CTYPE_BLANK	int
)	O
;	O
for	O
(	O
;	O
*	O
fmt	*(char)
&&	O
rc	int
==	O
0	int
;	O
fmt	*(char)
++	O
)	O
{	O
if	O
(	O
mu_isspace	O
(	O
*	O
fmt	*(char)
)	O
)	O
{	O
fmt	*(char)
=	O
mu_str_skip_class	(*(char),int)->(*(char))
(	O
fmt	*(char)
,	O
MU_CTYPE_BLANK	int
)	O
;	O
input	*(char)
=	O
mu_str_skip_class	(*(char),int)->(*(char))
(	O
input	*(char)
,	O
MU_CTYPE_BLANK	int
)	O
;	O
if	O
(	O
!	O
*	O
fmt	*(char)
)	O
break	O
;	O
}	O
eof_ok	int
=	O
0	int
;	O
if	O
(	O
*	O
fmt	*(char)
==	O
'%'	O
)	O
{	O
c	int
=	O
*	O
++	O
fmt	*(char)
;	O
if	O
(	O
!	O
c	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s:%d: error in format: %% at the end of input"	*(char)
,	O
__FILE__	O
,	O
__LINE__	O
)	O
)	O
;	O
rc	int
=	O
MU_ERR_FORMAT	O
;	O
break	O
;	O
}	O
switch	O
(	O
c	int
)	O
{	O
case	O
'a'	O
:	O
n	int
=	O
_mu_short_weekday_string	(*(char))->(int)
(	O
input	*(char)
)	O
;	O
if	O
(	O
n	int
==	O
-	O
1	int
)	O
rc	int
=	O
MU_ERR_PARSE	O
;	O
else	O
{	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
->	O
tm_wday	int
=	O
n	int
;	O
datetime_parts	int
|=	O
DT_WDAY	int
;	O
input	*(char)
+=	O
3	int
;	O
}	O
break	O
;	O
case	O
'A'	O
:	O
n	int
=	O
_mu_full_weekday_string	(*(char),*(*(char)))->(int)
(	O
input	*(char)
,	O
&	O
p	*(char)
)	O
;	O
if	O
(	O
n	int
==	O
-	O
1	int
)	O
rc	int
=	O
MU_ERR_PARSE	O
;	O
else	O
{	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
->	O
tm_wday	int
=	O
n	int
;	O
datetime_parts	int
|=	O
DT_WDAY	int
;	O
input	*(char)
=	O
p	*(char)
;	O
}	O
break	O
;	O
case	O
'b'	O
:	O
n	int
=	O
_mu_short_month_string	(*(char))->(int)
(	O
input	*(char)
)	O
;	O
if	O
(	O
n	int
==	O
-	O
1	int
)	O
rc	int
=	O
MU_ERR_PARSE	O
;	O
else	O
{	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
->	O
tm_mon	int
=	O
n	int
;	O
datetime_parts	int
|=	O
DT_MONTH	int
;	O
input	*(char)
+=	O
3	int
;	O
}	O
break	O
;	O
case	O
'B'	O
:	O
n	int
=	O
_mu_full_month_string	(*(char),*(*(char)))->(int)
(	O
input	*(char)
,	O
&	O
p	*(char)
)	O
;	O
if	O
(	O
n	int
==	O
-	O
1	int
)	O
rc	int
=	O
MU_ERR_PARSE	O
;	O
else	O
{	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
->	O
tm_mon	int
=	O
n	int
;	O
datetime_parts	int
|=	O
DT_MONTH	int
;	O
input	*(char)
=	O
p	*(char)
;	O
}	O
break	O
;	O
case	O
'd'	O
:	O
n	int
=	O
get_num	(*(char),*(*(char)),int,int,int,*(int))->(int)
(	O
input	*(char)
,	O
&	O
p	*(char)
,	O
2	int
,	O
1	int
,	O
31	int
,	O
NULL	O
)	O
;	O
if	O
(	O
n	int
==	O
-	O
1	int
)	O
rc	int
=	O
MU_ERR_PARSE	O
;	O
else	O
{	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
->	O
tm_mday	int
=	O
n	int
;	O
datetime_parts	int
|=	O
DT_MDAY	int
;	O
input	*(char)
=	O
p	*(char)
;	O
}	O
break	O
;	O
case	O
'e'	O
:	O
{	O
int	O
ndig	int
;	O
if	O
(	O
*	O
input	*(char)
==	O
' '	O
)	O
++	O
input	*(char)
;	O
n	int
=	O
get_num	(*(char),*(*(char)),int,int,int,*(int))->(int)
(	O
input	*(char)
,	O
&	O
p	*(char)
,	O
2	int
,	O
1	int
,	O
31	int
,	O
&	O
ndig	int
)	O
;	O
if	O
(	O
n	int
==	O
-	O
1	int
)	O
rc	int
=	O
MU_ERR_PARSE	O
;	O
else	O
{	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
->	O
tm_mday	int
=	O
n	int
;	O
datetime_parts	int
|=	O
DT_MDAY	int
;	O
input	*(char)
=	O
p	*(char)
;	O
}	O
}	O
break	O
;	O
case	O
'H'	O
:	O
n	int
=	O
get_num	(*(char),*(*(char)),int,int,int,*(int))->(int)
(	O
input	*(char)
,	O
&	O
p	*(char)
,	O
2	int
,	O
0	int
,	O
23	int
,	O
NULL	O
)	O
;	O
if	O
(	O
n	int
==	O
-	O
1	int
)	O
rc	int
=	O
MU_ERR_PARSE	O
;	O
else	O
{	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
->	O
tm_hour	int
=	O
n	int
;	O
datetime_parts	int
|=	O
DT_HOUR	int
;	O
input	*(char)
=	O
p	*(char)
;	O
}	O
break	O
;	O
case	O
'm'	O
:	O
n	int
=	O
get_num	(*(char),*(*(char)),int,int,int,*(int))->(int)
(	O
input	*(char)
,	O
&	O
p	*(char)
,	O
2	int
,	O
1	int
,	O
12	int
,	O
NULL	O
)	O
;	O
if	O
(	O
n	int
==	O
-	O
1	int
)	O
rc	int
=	O
MU_ERR_PARSE	O
;	O
else	O
{	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
->	O
tm_mon	int
=	O
n	int
-	O
1	int
;	O
datetime_parts	int
|=	O
DT_MONTH	int
;	O
input	*(char)
=	O
p	*(char)
;	O
}	O
break	O
;	O
case	O
'M'	O
:	O
n	int
=	O
get_num	(*(char),*(*(char)),int,int,int,*(int))->(int)
(	O
input	*(char)
,	O
&	O
p	*(char)
,	O
2	int
,	O
0	int
,	O
59	int
,	O
NULL	O
)	O
;	O
if	O
(	O
n	int
==	O
-	O
1	int
)	O
rc	int
=	O
MU_ERR_PARSE	O
;	O
else	O
{	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
->	O
tm_min	int
=	O
n	int
;	O
datetime_parts	int
|=	O
DT_MIN	int
;	O
input	*(char)
=	O
p	*(char)
;	O
}	O
break	O
;	O
case	O
'S'	O
:	O
n	int
=	O
get_num	(*(char),*(*(char)),int,int,int,*(int))->(int)
(	O
input	*(char)
,	O
&	O
p	*(char)
,	O
2	int
,	O
0	int
,	O
60	int
,	O
NULL	O
)	O
;	O
if	O
(	O
n	int
==	O
-	O
1	int
)	O
rc	int
=	O
MU_ERR_PARSE	O
;	O
else	O
{	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
->	O
tm_sec	int
=	O
n	int
;	O
datetime_parts	int
|=	O
DT_SEC	int
;	O
input	*(char)
=	O
p	*(char)
;	O
}	O
break	O
;	O
case	O
'Y'	O
:	O
errno	O
=	O
0	int
;	O
n	int
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
input	*(char)
,	O
&	O
p	*(char)
,	O
10	int
)	O
;	O
if	O
(	O
errno	O
||	O
p	*(char)
==	O
input	*(char)
)	O
rc	int
=	O
MU_ERR_PARSE	O
;	O
else	O
{	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
->	O
tm_year	int
=	O
n	int
-	O
1900	int
;	O
datetime_parts	int
|=	O
DT_YEAR	int
;	O
input	*(char)
=	O
p	*(char)
;	O
}	O
break	O
;	O
case	O
'z'	O
:	O
{	O
int	O
sign	int
=	O
1	int
;	O
int	O
hr	int
;	O
if	O
(	O
*	O
input	*(char)
==	O
'+'	O
)	O
input	*(char)
++	O
;	O
else	O
if	O
(	O
*	O
input	*(char)
==	O
'-'	O
)	O
{	O
input	*(char)
++	O
;	O
sign	int
=	O
-	O
1	int
;	O
}	O
n	int
=	O
get_num	(*(char),*(*(char)),int,int,int,*(int))->(int)
(	O
input	*(char)
,	O
&	O
p	*(char)
,	O
2	int
,	O
0	int
,	O
11	int
,	O
NULL	O
)	O
;	O
if	O
(	O
n	int
==	O
-	O
1	int
)	O
rc	int
=	O
MU_ERR_PARSE	O
;	O
else	O
{	O
input	*(char)
=	O
p	*(char)
;	O
hr	int
=	O
n	int
;	O
n	int
=	O
get_num	(*(char),*(*(char)),int,int,int,*(int))->(int)
(	O
input	*(char)
,	O
&	O
p	*(char)
,	O
2	int
,	O
0	int
,	O
59	int
,	O
NULL	O
)	O
;	O
if	O
(	O
n	int
==	O
-	O
1	int
)	O
rc	int
=	O
MU_ERR_PARSE	O
;	O
else	O
{	O
input	*(char)
=	O
p	*(char)
;	O
if	O
(	O
tz	*(struct(int,*(char)))
)	O
tz	*(struct(int,*(char)))
->	O
utc_offset	int
=	O
sign	int
*	O
(	O
hr	int
*	O
60	int
+	O
n	int
)	O
*	O
60	int
;	O
}	O
}	O
}	O
break	O
;	O
case	O
'%'	O
:	O
if	O
(	O
*	O
input	*(char)
==	O
'%'	O
)	O
input	*(char)
++	O
;	O
else	O
rc	int
=	O
MU_ERR_PARSE	O
;	O
break	O
;	O
rc	int
=	O
push_input	(*(*(struct)),int,*(char))->(int)
(	O
&	O
save_input_list	*(struct)
,	O
ST_ALT	int
,	O
(	O
void	O
*	O
)	O
input	*(char)
)	O
;	O
break	O
;	O
case	O
'('	O
:	O
case	O
'['	O
:	O
rc	int
=	O
push_input	(*(*(struct)),int,*(char))->(int)
(	O
&	O
save_input_list	*(struct)
,	O
bracket_to_state	(int)->(int)
(	O
c	int
)	O
,	O
(	O
void	O
*	O
)	O
input	*(char)
)	O
;	O
break	O
;	O
case	O
')'	O
:	O
case	O
']'	O
:	O
if	O
(	O
pop_input	(*(struct),*(int),*(*(char)))->(int)
(	O
save_input_list	*(struct)
,	O
&	O
st	*(struct(long,long,long))
,	O
NULL	O
)	O
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s:%d: error in format: unbalanced %%%c near %s"	*(char)
,	O
__FILE__	O
,	O
__LINE__	O
,	O
c	int
,	O
fmt	*(char)
)	O
)	O
;	O
rc	int
=	O
MU_ERR_FORMAT	O
;	O
}	O
else	O
if	O
(	O
st	*(struct(long,long,long))
!=	O
bracket_to_state	(int)->(int)
(	O
c	int
)	O
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s:%d: error in format: %%%c out of context"	*(char)
,	O
__FILE__	O
,	O
__LINE__	O
,	O
c	int
)	O
)	O
;	O
rc	int
=	O
MU_ERR_FORMAT	O
;	O
}	O
break	O
;	O
case	O
'|'	O
:	O
rc	int
=	O
scan_recovery	(*(char),*(*(struct)),int,*(*(char)),*(*(char)))->(int)
(	O
fmt	*(char)
,	O
&	O
save_input_list	*(struct)
,	O
1	int
,	O
&	O
fmt	*(char)
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
fmt	*(char)
--	O
;	O
break	O
;	O
case	O
'$'	O
:	O
eof_ok	int
=	O
1	int
;	O
break	O
;	O
case	O
'\\'	O
:	O
c	int
=	O
*	O
++	O
fmt	*(char)
;	O
if	O
(	O
!	O
c	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s:%d: error in format: %% at the end of input"	*(char)
,	O
__FILE__	O
,	O
__LINE__	O
)	O
)	O
;	O
rc	int
=	O
MU_ERR_FORMAT	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
*	O
input	*(char)
)	O
input	*(char)
++	O
;	O
else	O
rc	int
=	O
MU_ERR_PARSE	O
;	O
break	O
;	O
case	O
'?'	O
:	O
input	*(char)
++	O
;	O
break	O
;	O
default	O
:	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s:%d: error in format: unrecognized conversion type"	*(char)
" near %s"	*(char)
,	O
__FILE__	O
,	O
__LINE__	O
,	O
fmt	*(char)
)	O
)	O
;	O
rc	int
=	O
MU_ERR_FORMAT	O
;	O
break	O
;	O
}	O
if	O
(	O
eof_ok	int
&&	O
rc	int
==	O
0	int
&&	O
*	O
input	*(char)
==	O
0	int
)	O
break	O
;	O
}	O
else	O
if	O
(	O
!	O
recovery	int
&&	O
*	O
input	*(char)
!=	O
*	O
fmt	*(char)
)	O
rc	int
=	O
MU_ERR_PARSE	O
;	O
else	O
input	*(char)
++	O
;	O
if	O
(	O
rc	int
==	O
MU_ERR_PARSE	O
&&	O
!	O
mu_list_is_empty	(*(struct))->(int)
(	O
save_input_list	*(struct)
)	O
)	O
{	O
rc	int
=	O
scan_recovery	(*(char),*(*(struct)),int,*(*(char)),*(*(char)))->(int)
(	O
fmt	*(char)
,	O
&	O
save_input_list	*(struct)
,	O
0	int
,	O
&	O
fmt	*(char)
,	O
&	O
input	*(char)
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
--	O
fmt	*(char)
;	O
}	O
}	O
if	O
(	O
!	O
mu_list_is_empty	(*(struct))->(int)
(	O
save_input_list	*(struct)
)	O
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s:%d: error in format: closing bracket missing"	*(char)
,	O
__FILE__	O
,	O
__LINE__	O
)	O
)	O
;	O
rc	int
=	O
MU_ERR_FORMAT	O
;	O
}	O
mu_list_destroy	(*(*(struct)))->(void)
(	O
&	O
save_input_list	*(struct)
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
&&	O
recovery	int
)	O
rc	int
=	O
MU_ERR_PARSE	O
;	O
if	O
(	O
!	O
eof_ok	int
&&	O
rc	int
==	O
0	int
&&	O
*	O
input	*(char)
==	O
0	int
&&	O
*	O
fmt	*(char)
)	O
rc	int
=	O
MU_ERR_PARSE	O
;	O
if	O
(	O
(	O
datetime_parts	int
&	O
(	O
DT_YEAR	int
|	O
DT_MONTH	int
|	O
DT_MDAY	int
)	O
)	O
==	O
(	O
DT_YEAR	int
|	O
DT_MONTH	int
|	O
DT_MDAY	int
)	O
)	O
{	O
if	O
(	O
!	O
(	O
datetime_parts	int
&	O
DT_WDAY	int
)	O
)	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
->	O
tm_wday	int
=	O
mu_datetime_dayofweek	(int,int,int)->(int)
(	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
->	O
tm_year	int
+	O
1900	int
,	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
->	O
tm_mon	int
+	O
1	int
,	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
->	O
tm_mday	int
)	O
;	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
->	O
tm_yday	int
=	O
mu_datetime_dayofyear	(int,int,int)->(int)
(	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
->	O
tm_year	int
+	O
1900	int
,	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
->	O
tm_mon	int
+	O
1	int
,	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
->	O
tm_mday	int
)	O
-	O
1	int
;	O
}	O
if	O
(	O
endp	*(*(char))
)	O
*	O
endp	*(*(char))
=	O
(	O
char	O
*	O
)	O
input	*(char)
;	O
return	O
rc	int
;	O
}	O
