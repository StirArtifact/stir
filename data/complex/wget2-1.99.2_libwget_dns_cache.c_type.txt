struct	O
cache_entry	struct(*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))),short)
{	O
const	O
char	O
*	O
host	*(char)
;	O
struct	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
*	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
;	O
uint16_t	short
port	short
;	O
}	O
;	O
struct	O
wget_dns_cache_st	struct(*(struct),*(struct))
{	O
wget_hashmap	struct
*	O
cache	*(*(struct))
;	O
wget_thread_mutex	*(struct)
mutex	*(*(struct))
;	O
}	O
;	O
__attribute__	O
(	O
(	O
no_sanitize	O
(	O
"integer"	*(char)
)	O
)	O
)	O
static	O
unsigned	O
int	O
WGET_GCC_PURE	O
_hash_dns	(*(struct(*(char),*(struct(int,int,int,int,int,*`,*`,*`)),short)))->(int)
(	O
const	O
struct	O
cache_entry	struct(*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))),short)
*	O
entry	*(struct(*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))),short))
)	O
{	O
unsigned	O
int	O
hash	*((*(void))->(int))
=	O
entry	*(struct(*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))),short))
->	O
port	short
;	O
const	O
unsigned	O
char	O
*	O
p	*(char)
=	O
(	O
unsigned	O
char	O
*	O
)	O
entry	*(struct(*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))),short))
->	O
host	*(char)
;	O
while	O
(	O
*	O
p	*(char)
)	O
hash	*((*(void))->(int))
=	O
hash	*((*(void))->(int))
*	O
101	int
+	O
*	O
p	*(char)
++	O
;	O
return	O
hash	*((*(void))->(int))
;	O
}	O
static	O
int	O
WGET_GCC_PURE	O
_compare_dns	(*(struct(*(char),*(struct(int,int,int,int,int,*`,*`,*`)),short)),*(struct(*(char),*(struct(int,int,int,int,int,*`,*`,*`)),short)))->(int)
(	O
const	O
struct	O
cache_entry	struct(*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))),short)
*	O
a1	*(struct(*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))),short))
,	O
const	O
struct	O
cache_entry	struct(*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))),short)
*	O
a2	*(struct(*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))),short))
)	O
{	O
if	O
(	O
a1	*(struct(*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))),short))
->	O
port	short
<	O
a2	*(struct(*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))),short))
->	O
port	short
)	O
return	O
-	O
1	int
;	O
if	O
(	O
a1	*(struct(*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))),short))
->	O
port	short
>	O
a2	*(struct(*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))),short))
->	O
port	short
)	O
return	O
1	int
;	O
return	O
wget_strcasecmp	(*(char),*(char))->(int)
(	O
a1	*(struct(*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))),short))
->	O
host	*(char)
,	O
a2	*(struct(*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))),short))
->	O
host	*(char)
)	O
;	O
}	O
static	O
void	O
_free_dns	(*(struct(*(char),*(struct(int,int,int,int,int,*`,*`,*`)),short)))->(void)
(	O
struct	O
cache_entry	struct(*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))),short)
*	O
entry	*(struct(*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))),short))
)	O
{	O
freeaddrinfo	(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
entry	*(struct(*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))),short))
->	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
)	O
;	O
xfree	O
(	O
entry	*(struct(*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))),short))
)	O
;	O
}	O
int	O
wget_dns_cache_init	(*(*(struct)))->(int)
(	O
wget_dns_cache	struct
*	O
*	O
cache	*(*(struct))
)	O
{	O
wget_dns_cache	struct
*	O
_cache	*(struct(*(struct),*(struct)))
=	O
wget_calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
wget_dns_cache	struct
)	O
)	O
;	O
if	O
(	O
!	O
_cache	*(struct(*(struct),*(struct)))
)	O
return	O
WGET_E_MEMORY	int
;	O
if	O
(	O
wget_thread_mutex_init	(*(*(struct)))->(int)
(	O
&	O
_cache	*(struct(*(struct),*(struct)))
->	O
mutex	*(*(struct))
)	O
)	O
{	O
xfree	O
(	O
_cache	*(struct(*(struct),*(struct)))
)	O
;	O
return	O
WGET_E_INVALID	int
;	O
}	O
if	O
(	O
!	O
(	O
_cache	*(struct(*(struct),*(struct)))
->	O
cache	*(*(struct))
=	O
wget_hashmap_create	(int,*((*(void))->(int)),*((*(void),*(void))->(int)))->(*(struct))
(	O
16	int
,	O
(	O
wget_hashmap_hash_fn	(*(void))->(int)
*	O
)	O
_hash_dns	(*(struct(*(char),*(struct(int,int,int,int,int,*`,*`,*`)),short)))->(int)
,	O
(	O
wget_hashmap_compare_fn	(*(void),*(void))->(int)
*	O
)	O
_compare_dns	(*(struct(*(char),*(struct(int,int,int,int,int,*`,*`,*`)),short)),*(struct(*(char),*(struct(int,int,int,int,int,*`,*`,*`)),short)))->(int)
)	O
)	O
)	O
{	O
wget_dns_cache_free	(*(*(struct)))->(void)
(	O
&	O
_cache	*(struct(*(struct),*(struct)))
)	O
;	O
return	O
WGET_E_MEMORY	int
;	O
}	O
wget_hashmap_set_key_destructor	(*(struct),*((*(void))->(void)))->(void)
(	O
_cache	*(struct(*(struct),*(struct)))
->	O
cache	*(*(struct))
,	O
(	O
wget_hashmap_key_destructor	(*(void))->(void)
*	O
)	O
_free_dns	(*(struct(*(char),*(struct(int,int,int,int,int,*`,*`,*`)),short)))->(void)
)	O
;	O
wget_hashmap_set_value_destructor	(*(struct),*((*(void))->(void)))->(void)
(	O
_cache	*(struct(*(struct),*(struct)))
->	O
cache	*(*(struct))
,	O
(	O
wget_hashmap_value_destructor	(*(void))->(void)
*	O
)	O
_free_dns	(*(struct(*(char),*(struct(int,int,int,int,int,*`,*`,*`)),short)))->(void)
)	O
;	O
*	O
cache	*(*(struct))
=	O
_cache	*(struct(*(struct),*(struct)))
;	O
return	O
WGET_E_SUCCESS	int
;	O
}	O
void	O
wget_dns_cache_free	(*(*(struct)))->(void)
(	O
wget_dns_cache	struct
*	O
*	O
cache	*(*(struct))
)	O
{	O
if	O
(	O
cache	*(*(struct))
&&	O
*	O
cache	*(*(struct))
)	O
{	O
wget_thread_mutex_lock	(*(struct))->(void)
(	O
(	O
*	O
cache	*(*(struct))
)	O
->	O
mutex	*(*(struct))
)	O
;	O
wget_hashmap_free	(*(*(struct)))->(void)
(	O
&	O
(	O
*	O
cache	*(*(struct))
)	O
->	O
cache	*(*(struct))
)	O
;	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
(	O
*	O
cache	*(*(struct))
)	O
->	O
mutex	*(*(struct))
)	O
;	O
wget_thread_mutex_destroy	(*(*(struct)))->(int)
(	O
&	O
(	O
*	O
cache	*(*(struct))
)	O
->	O
mutex	*(*(struct))
)	O
;	O
xfree	O
(	O
*	O
cache	*(*(struct))
)	O
;	O
}	O
}	O
struct	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
*	O
wget_dns_cache_get	(*(struct),*(char),short)->(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
(	O
wget_dns_cache	struct
*	O
cache	*(*(struct))
,	O
const	O
char	O
*	O
host	*(char)
,	O
uint16_t	short
port	short
)	O
{	O
if	O
(	O
cache	*(*(struct))
)	O
{	O
struct	O
cache_entry	struct(*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))),short)
*	O
entryp	*(struct(*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))),short))
,	O
entry	*(struct(*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))),short))
=	O
{	O
.	O
host	*(char)
=	O
host	*(char)
,	O
.	O
port	short
=	O
port	short
}	O
;	O
wget_thread_mutex_lock	(*(struct))->(void)
(	O
cache	*(*(struct))
->	O
mutex	*(*(struct))
)	O
;	O
if	O
(	O
!	O
wget_hashmap_get	(*(struct),*(void),*(*(void)))->(int)
(	O
cache	*(*(struct))
->	O
cache	*(*(struct))
,	O
&	O
entry	*(struct(*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))),short))
,	O
&	O
entryp	*(struct(*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))),short))
)	O
)	O
entryp	*(struct(*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))),short))
=	O
NULL	O
;	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
cache	*(*(struct))
->	O
mutex	*(*(struct))
)	O
;	O
if	O
(	O
entryp	*(struct(*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))),short))
)	O
{	O
debug_printf	O
(	O
"Found dns cache entry %s:%d\n"	*(char)
,	O
entryp	*(struct(*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))),short))
->	O
host	*(char)
,	O
entryp	*(struct(*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))),short))
->	O
port	short
)	O
;	O
return	O
entryp	*(struct(*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))),short))
->	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
;	O
}	O
}	O
return	O
NULL	O
;	O
}	O
int	O
wget_dns_cache_add	(*(struct),*(char),short,*(*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))->(int)
(	O
wget_dns_cache	struct
*	O
cache	*(*(struct))
,	O
const	O
char	O
*	O
host	*(char)
,	O
uint16_t	short
port	short
,	O
struct	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
*	O
*	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
)	O
{	O
if	O
(	O
!	O
cache	*(*(struct))
||	O
!	O
host	*(char)
|	O
!	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
)	O
return	O
WGET_E_INVALID	int
;	O
struct	O
cache_entry	struct(*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))),short)
entry	*(struct(*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))),short))
=	O
{	O
.	O
host	*(char)
=	O
host	*(char)
,	O
.	O
port	short
=	O
port	short
}	O
;	O
struct	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
*	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
;	O
wget_thread_mutex_lock	(*(struct))->(void)
(	O
cache	*(*(struct))
->	O
mutex	*(*(struct))
)	O
;	O
if	O
(	O
wget_hashmap_get	(*(struct),*(void),*(*(void)))->(int)
(	O
cache	*(*(struct))
->	O
cache	*(*(struct))
,	O
&	O
entry	*(struct(*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))),short))
,	O
&	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
)	O
)	O
{	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
cache	*(*(struct))
->	O
mutex	*(*(struct))
)	O
;	O
if	O
(	O
*	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
!=	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
)	O
freeaddrinfo	(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
*	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
)	O
;	O
*	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
=	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
;	O
return	O
WGET_E_SUCCESS	int
;	O
}	O
size_t	long
hostlen	long
=	O
strlen	(*(char))->(long)
(	O
host	*(char)
)	O
+	O
1	int
;	O
struct	O
cache_entry	struct(*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))),short)
*	O
entryp	*(struct(*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))),short))
=	O
wget_malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
cache_entry	struct(*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))),short)
)	O
+	O
hostlen	long
)	O
;	O
if	O
(	O
!	O
entryp	*(struct(*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))),short))
)	O
{	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
cache	*(*(struct))
->	O
mutex	*(*(struct))
)	O
;	O
return	O
WGET_E_MEMORY	int
;	O
}	O
entryp	*(struct(*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))),short))
->	O
port	short
=	O
port	short
;	O
entryp	*(struct(*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))),short))
->	O
host	*(char)
=	O
(	O
(	O
char	O
*	O
)	O
entryp	*(struct(*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))),short))
)	O
+	O
sizeof	O
(	O
struct	O
cache_entry	struct(*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))),short)
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
(	O
char	O
*	O
)	O
entryp	*(struct(*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))),short))
->	O
host	*(char)
,	O
host	*(char)
,	O
hostlen	long
)	O
;	O
entryp	*(struct(*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))),short))
->	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
=	O
*	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
;	O
wget_hashmap_put	(*(struct),*(void),*(void))->(int)
(	O
cache	*(*(struct))
->	O
cache	*(*(struct))
,	O
entryp	*(struct(*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))),short))
,	O
entryp	*(struct(*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))),short))
)	O
;	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
cache	*(*(struct))
->	O
mutex	*(*(struct))
)	O
;	O
return	O
WGET_E_SUCCESS	int
;	O
}	O
