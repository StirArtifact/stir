int	O
mu_list_intersect_dup	(*(*(struct)),*(struct),*(struct),*((*(*(void)),*(void),*(void))->(int)),*(void))->(int)
(	O
mu_list_t	*(struct)
*	O
pdest	*(*(struct(struct(*(void),*(struct`),*(struct`)),long,*(struct(*`,*`,int,int)),*((*`,*`)->(int)),*((*`)->(void)),*(struct))))
,	O
mu_list_t	*(struct)
a	*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct)))
,	O
mu_list_t	*(struct)
b	*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct)))
,	O
int	O
(	O
*	O
dup_item	*((*(*(void)),*(void),*(void))->(int))
)	O
(	O
void	O
*	O
*	O
,	O
void	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
dup_closure	*(void)
)	O
{	O
mu_list_t	*(struct)
dest	*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct)))
;	O
int	O
rc	int
;	O
mu_iterator_t	*(struct)
itr	*(struct)
;	O
rc	int
=	O
mu_list_create	(*(*(struct)))->(int)
(	O
&	O
dest	*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct)))
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mu_list_set_comparator	(*(struct),*((*(void),*(void))->(int)))->(*((*(void),*(void))->(int)))
(	O
dest	*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct)))
,	O
b	*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct)))
->	O
comp	*((*(void),*(void))->(int))
)	O
;	O
if	O
(	O
dup_item	*((*(*(void)),*(void),*(void))->(int))
)	O
mu_list_set_destroy_item	(*(struct),*((*(void))->(void)))->(*((*(void))->(void)))
(	O
dest	*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct)))
,	O
b	*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct)))
->	O
destroy_item	*((*(void))->(void))
)	O
;	O
rc	int
=	O
mu_list_get_iterator	(*(struct),*(*(struct)))->(int)
(	O
a	*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct)))
,	O
&	O
itr	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_list_destroy	(*(*(struct)))->(void)
(	O
&	O
dest	*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct)))
)	O
;	O
return	O
rc	int
;	O
}	O
rc	int
=	O
0	int
;	O
for	O
(	O
mu_iterator_first	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
!	O
mu_iterator_is_done	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
mu_iterator_next	(*(struct))->(int)
(	O
itr	*(struct)
)	O
)	O
{	O
void	O
*	O
data	*(void)
;	O
mu_iterator_current	(*(struct),*(*(void)))->(int)
(	O
itr	*(struct)
,	O
&	O
data	*(void)
)	O
;	O
if	O
(	O
mu_list_locate	(*(struct),*(void),*(*(void)))->(int)
(	O
b	*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct)))
,	O
data	*(void)
,	O
NULL	O
)	O
==	O
0	int
)	O
{	O
void	O
*	O
new_data	*(void)
;	O
if	O
(	O
dup_item	*((*(*(void)),*(void),*(void))->(int))
&&	O
data	*(void)
)	O
{	O
rc	int
=	O
dup_item	*((*(*(void)),*(void),*(void))->(int))
(	O
&	O
new_data	*(void)
,	O
data	*(void)
,	O
dup_closure	*(void)
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
}	O
else	O
new_data	*(void)
=	O
data	*(void)
;	O
mu_list_append	(*(struct),*(void))->(int)
(	O
dest	*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct)))
,	O
new_data	*(void)
)	O
;	O
}	O
}	O
mu_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
itr	*(struct)
)	O
;	O
*	O
pdest	*(*(struct(struct(*(void),*(struct`),*(struct`)),long,*(struct(*`,*`,int,int)),*((*`,*`)->(int)),*((*`)->(void)),*(struct))))
=	O
dest	*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct)))
;	O
return	O
rc	int
;	O
}	O
int	O
mu_list_intersect	(*(*(struct)),*(struct),*(struct))->(int)
(	O
mu_list_t	*(struct)
*	O
pdest	*(*(struct(struct(*(void),*(struct`),*(struct`)),long,*(struct(*`,*`,int,int)),*((*`,*`)->(int)),*((*`)->(void)),*(struct))))
,	O
mu_list_t	*(struct)
a	*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct)))
,	O
mu_list_t	*(struct)
b	*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct)))
)	O
{	O
return	O
mu_list_intersect_dup	(*(*(struct)),*(struct),*(struct),*((*(*(void)),*(void),*(void))->(int)),*(void))->(int)
(	O
pdest	*(*(struct(struct(*(void),*(struct`),*(struct`)),long,*(struct(*`,*`,int,int)),*((*`,*`)->(int)),*((*`)->(void)),*(struct))))
,	O
a	*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct)))
,	O
b	*(struct(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct)))
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
