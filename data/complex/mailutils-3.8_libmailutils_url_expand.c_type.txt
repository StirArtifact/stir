static	O
char	O
*	O
_url_path_default	(*(char),*(char),int)->(*(char))
(	O
const	O
char	O
*	O
spooldir	*(char)
,	O
const	O
char	O
*	O
user	*(char)
,	O
int	O
unused	int
)	O
{	O
return	O
mu_make_file_name	O
(	O
spooldir	*(char)
,	O
user	*(char)
)	O
;	O
}	O
static	O
char	O
*	O
_url_path_hashed	(*(char),*(char),int)->(*(char))
(	O
const	O
char	O
*	O
spooldir	*(char)
,	O
const	O
char	O
*	O
user	*(char)
,	O
int	O
param	*(struct)
)	O
{	O
int	O
i	int
;	O
int	O
ulen	int
=	O
strlen	(*(char))->(long)
(	O
user	*(char)
)	O
;	O
char	O
*	O
mbox	*(char)
;	O
unsigned	O
hash	int
;	O
if	O
(	O
param	*(struct)
>	O
ulen	int
)	O
param	*(struct)
=	O
ulen	int
;	O
for	O
(	O
i	int
=	O
0	int
,	O
hash	int
=	O
0	int
;	O
i	int
<	O
param	*(struct)
;	O
i	int
++	O
)	O
hash	int
+=	O
user	*(char)
[	O
i	int
]	O
;	O
mbox	*(char)
=	O
malloc	(long)->(*(void))
(	O
ulen	int
+	O
strlen	(*(char))->(long)
(	O
spooldir	*(char)
)	O
+	O
5	int
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
mbox	*(char)
,	O
"%s/%02X/%s"	*(char)
,	O
spooldir	*(char)
,	O
hash	int
%	O
256	int
,	O
user	*(char)
)	O
;	O
return	O
mbox	*(char)
;	O
}	O
static	O
int	O
transtab	array(int)
[	O
]	O
=	O
{	O
'a'	O
,	O
'b'	O
,	O
'c'	O
,	O
'd'	O
,	O
'e'	O
,	O
'f'	O
,	O
'g'	O
,	O
'h'	O
,	O
'i'	O
,	O
'j'	O
,	O
'k'	O
,	O
'l'	O
,	O
'm'	O
,	O
'n'	O
,	O
'o'	O
,	O
'p'	O
,	O
'q'	O
,	O
'r'	O
,	O
's'	O
,	O
't'	O
,	O
'u'	O
,	O
'v'	O
,	O
'w'	O
,	O
'x'	O
,	O
'y'	O
,	O
'z'	O
,	O
'a'	O
,	O
'b'	O
,	O
'c'	O
,	O
'd'	O
,	O
'e'	O
,	O
'f'	O
,	O
'g'	O
,	O
'h'	O
,	O
'i'	O
,	O
'j'	O
,	O
'k'	O
,	O
'l'	O
,	O
'm'	O
,	O
'n'	O
,	O
'o'	O
,	O
'p'	O
,	O
'q'	O
,	O
'r'	O
,	O
's'	O
,	O
't'	O
,	O
'u'	O
,	O
'v'	O
,	O
'w'	O
,	O
'x'	O
,	O
'y'	O
,	O
'z'	O
,	O
'a'	O
,	O
'b'	O
,	O
'c'	O
,	O
'd'	O
,	O
'e'	O
,	O
'f'	O
,	O
'g'	O
,	O
'h'	O
,	O
'i'	O
,	O
'j'	O
,	O
'k'	O
,	O
'l'	O
,	O
'm'	O
,	O
'a'	O
,	O
'b'	O
,	O
'c'	O
,	O
'd'	O
,	O
'e'	O
,	O
'f'	O
,	O
'g'	O
,	O
'h'	O
,	O
'i'	O
,	O
'j'	O
,	O
'k'	O
,	O
'l'	O
,	O
'm'	O
,	O
'n'	O
,	O
'o'	O
,	O
'p'	O
,	O
'q'	O
,	O
'r'	O
,	O
's'	O
,	O
't'	O
,	O
'u'	O
,	O
'v'	O
,	O
'w'	O
,	O
'x'	O
,	O
'y'	O
,	O
'z'	O
,	O
'b'	O
,	O
'c'	O
,	O
'd'	O
,	O
'e'	O
,	O
'f'	O
,	O
'g'	O
,	O
'a'	O
,	O
'b'	O
,	O
'c'	O
,	O
'd'	O
,	O
'e'	O
,	O
'f'	O
,	O
'g'	O
,	O
'h'	O
,	O
'i'	O
,	O
'j'	O
,	O
'k'	O
,	O
'l'	O
,	O
'm'	O
,	O
'n'	O
,	O
'o'	O
,	O
'p'	O
,	O
'q'	O
,	O
'r'	O
,	O
's'	O
,	O
't'	O
,	O
'u'	O
,	O
'v'	O
,	O
'w'	O
,	O
'x'	O
,	O
'y'	O
,	O
'z'	O
,	O
'b'	O
,	O
'c'	O
,	O
'd'	O
,	O
'e'	O
,	O
'f'	O
,	O
'b'	O
,	O
'c'	O
,	O
'd'	O
,	O
'e'	O
,	O
'f'	O
,	O
'g'	O
,	O
'h'	O
,	O
'i'	O
,	O
'j'	O
,	O
'k'	O
,	O
'l'	O
,	O
'm'	O
,	O
'n'	O
,	O
'o'	O
,	O
'p'	O
,	O
'q'	O
,	O
'r'	O
,	O
's'	O
,	O
't'	O
,	O
'u'	O
,	O
'v'	O
,	O
'w'	O
,	O
'x'	O
,	O
'y'	O
,	O
'z'	O
,	O
'a'	O
,	O
'b'	O
,	O
'c'	O
,	O
'd'	O
,	O
'e'	O
,	O
'f'	O
,	O
'g'	O
,	O
'h'	O
,	O
'i'	O
,	O
'j'	O
,	O
'k'	O
,	O
'l'	O
,	O
'm'	O
,	O
'n'	O
,	O
'o'	O
,	O
'p'	O
,	O
'q'	O
,	O
'r'	O
,	O
's'	O
,	O
't'	O
,	O
'u'	O
,	O
'v'	O
,	O
'w'	O
,	O
'x'	O
,	O
'y'	O
,	O
'z'	O
,	O
'a'	O
,	O
'b'	O
,	O
'c'	O
,	O
'd'	O
,	O
'e'	O
,	O
'f'	O
,	O
'g'	O
,	O
'h'	O
,	O
'i'	O
,	O
'j'	O
,	O
'k'	O
,	O
'l'	O
,	O
'm'	O
,	O
'a'	O
,	O
'b'	O
,	O
'c'	O
,	O
'd'	O
,	O
'e'	O
,	O
'f'	O
,	O
'g'	O
,	O
'h'	O
,	O
'i'	O
,	O
'j'	O
,	O
'k'	O
,	O
'l'	O
,	O
'm'	O
,	O
'n'	O
,	O
'o'	O
,	O
'p'	O
,	O
'q'	O
,	O
'r'	O
,	O
's'	O
,	O
't'	O
,	O
'u'	O
,	O
'v'	O
,	O
'w'	O
,	O
'x'	O
,	O
'y'	O
,	O
'z'	O
,	O
'b'	O
,	O
'c'	O
,	O
'd'	O
,	O
'e'	O
,	O
'f'	O
,	O
'g'	O
,	O
'a'	O
,	O
'b'	O
,	O
'c'	O
,	O
'd'	O
,	O
'e'	O
,	O
'f'	O
,	O
'g'	O
,	O
'h'	O
,	O
'i'	O
,	O
'j'	O
,	O
'k'	O
,	O
'l'	O
,	O
'm'	O
,	O
'n'	O
,	O
'o'	O
,	O
'p'	O
,	O
'q'	O
,	O
'r'	O
,	O
's'	O
,	O
't'	O
,	O
'u'	O
,	O
'v'	O
,	O
'w'	O
,	O
'x'	O
,	O
'y'	O
,	O
'z'	O
,	O
'b'	O
,	O
'c'	O
,	O
'd'	O
,	O
'e'	O
,	O
'f'	O
,	O
'g'	O
}	O
;	O
static	O
char	O
*	O
_url_path_index	(*(char),*(char),int)->(*(char))
(	O
const	O
char	O
*	O
spooldir	*(char)
,	O
const	O
char	O
*	O
iuser	*(char)
,	O
int	O
index_depth	int
)	O
{	O
const	O
unsigned	O
char	O
*	O
user	*(char)
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
iuser	*(char)
;	O
int	O
i	int
,	O
ulen	int
=	O
strlen	(*(char))->(long)
(	O
iuser	*(char)
)	O
;	O
char	O
*	O
mbox	*(char)
,	O
*	O
p	*(char)
;	O
if	O
(	O
ulen	int
==	O
0	int
)	O
return	O
NULL	O
;	O
mbox	*(char)
=	O
malloc	(long)->(*(void))
(	O
ulen	int
+	O
strlen	(*(char))->(long)
(	O
spooldir	*(char)
)	O
+	O
2	int
*	O
index_depth	int
+	O
2	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
mbox	*(char)
,	O
spooldir	*(char)
)	O
;	O
p	*(char)
=	O
mbox	*(char)
+	O
strlen	(*(char))->(long)
(	O
mbox	*(char)
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
index_depth	int
&&	O
i	int
<	O
ulen	int
;	O
i	int
++	O
)	O
{	O
*	O
p	*(char)
++	O
=	O
'/'	O
;	O
*	O
p	*(char)
++	O
=	O
transtab	array(int)
[	O
user	*(char)
[	O
i	int
]	O
]	O
;	O
}	O
for	O
(	O
;	O
i	int
<	O
index_depth	int
;	O
i	int
++	O
)	O
{	O
*	O
p	*(char)
++	O
=	O
'/'	O
;	O
*	O
p	*(char)
++	O
=	O
transtab	array(int)
[	O
user	*(char)
[	O
ulen	int
-	O
1	int
]	O
]	O
;	O
}	O
*	O
p	*(char)
++	O
=	O
'/'	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
p	*(char)
,	O
iuser	*(char)
)	O
;	O
return	O
mbox	*(char)
;	O
}	O
static	O
char	O
*	O
_url_path_rev_index	(*(char),*(char),int)->(*(char))
(	O
const	O
char	O
*	O
spooldir	*(char)
,	O
const	O
char	O
*	O
iuser	*(char)
,	O
int	O
index_depth	int
)	O
{	O
const	O
unsigned	O
char	O
*	O
user	*(char)
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
iuser	*(char)
;	O
int	O
i	int
,	O
ulen	int
=	O
strlen	(*(char))->(long)
(	O
iuser	*(char)
)	O
;	O
char	O
*	O
mbox	*(char)
,	O
*	O
p	*(char)
;	O
if	O
(	O
ulen	int
==	O
0	int
)	O
return	O
NULL	O
;	O
mbox	*(char)
=	O
malloc	(long)->(*(void))
(	O
ulen	int
+	O
strlen	(*(char))->(long)
(	O
spooldir	*(char)
)	O
+	O
2	int
*	O
index_depth	int
+	O
1	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
mbox	*(char)
,	O
spooldir	*(char)
)	O
;	O
p	*(char)
=	O
mbox	*(char)
+	O
strlen	(*(char))->(long)
(	O
mbox	*(char)
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
index_depth	int
&&	O
i	int
<	O
ulen	int
;	O
i	int
++	O
)	O
{	O
*	O
p	*(char)
++	O
=	O
'/'	O
;	O
*	O
p	*(char)
++	O
=	O
transtab	array(int)
[	O
user	*(char)
[	O
ulen	int
-	O
i	int
-	O
1	int
]	O
]	O
;	O
}	O
for	O
(	O
;	O
i	int
<	O
index_depth	int
;	O
i	int
++	O
)	O
{	O
*	O
p	*(char)
++	O
=	O
'/'	O
;	O
*	O
p	*(char)
++	O
=	O
transtab	array(int)
[	O
user	*(char)
[	O
0	int
]	O
]	O
;	O
}	O
*	O
p	*(char)
++	O
=	O
'/'	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
p	*(char)
,	O
iuser	*(char)
)	O
;	O
return	O
mbox	*(char)
;	O
}	O
static	O
int	O
rmselector	(*(char),*(void))->(int)
(	O
const	O
char	O
*	O
p	*(char)
,	O
void	O
*	O
data	*(void)
MU_ARG_UNUSED	O
)	O
{	O
return	O
strncmp	(*(char),*(char),long)->(int)
(	O
p	*(char)
,	O
"type="	*(char)
,	O
5	int
)	O
==	O
0	int
||	O
strncmp	(*(char),*(char),long)->(int)
(	O
p	*(char)
,	O
"user="	*(char)
,	O
5	int
)	O
==	O
0	int
||	O
strncmp	(*(char),*(char),long)->(int)
(	O
p	*(char)
,	O
"param="	*(char)
,	O
6	int
)	O
==	O
0	int
;	O
}	O
int	O
mu_url_expand_path	(*(struct))->(int)
(	O
mu_url_t	*(struct)
url	*(struct)
)	O
{	O
size_t	long
i	int
;	O
char	O
*	O
user	*(char)
=	O
NULL	O
;	O
int	O
param	*(struct)
=	O
0	int
;	O
char	O
*	O
p	*(char)
;	O
char	O
*	O
(	O
*	O
fun	*((*(char),*(char),int)->(*(char)))
)	O
(	O
const	O
char	O
*	O
,	O
const	O
char	O
*	O
,	O
int	O
)	O
=	O
_url_path_default	(*(char),*(char),int)->(*(char))
;	O
if	O
(	O
url	*(struct)
->	O
fvcount	int
==	O
0	int
)	O
return	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
url	*(struct)
->	O
fvcount	int
;	O
i	int
++	O
)	O
{	O
p	*(char)
=	O
url	*(struct)
->	O
fvpairs	*(*(char))
[	O
i	int
]	O
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
p	*(char)
,	O
"type="	*(char)
,	O
5	int
)	O
==	O
0	int
)	O
{	O
char	O
*	O
type	*(char)
=	O
p	*(char)
+	O
5	int
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
type	*(char)
,	O
"hash"	*(char)
)	O
==	O
0	int
)	O
fun	*((*(char),*(char),int)->(*(char)))
=	O
_url_path_hashed	(*(char),*(char),int)->(*(char))
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
type	*(char)
,	O
"index"	*(char)
)	O
==	O
0	int
)	O
fun	*((*(char),*(char),int)->(*(char)))
=	O
_url_path_index	(*(char),*(char),int)->(*(char))
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
type	*(char)
,	O
"rev-index"	*(char)
)	O
==	O
0	int
)	O
fun	*((*(char),*(char),int)->(*(char)))
=	O
_url_path_rev_index	(*(char),*(char),int)->(*(char))
;	O
else	O
return	O
MU_ERR_NOENT	O
;	O
}	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
p	*(char)
,	O
"user="	*(char)
,	O
5	int
)	O
==	O
0	int
)	O
{	O
user	*(char)
=	O
p	*(char)
+	O
5	int
;	O
}	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
p	*(char)
,	O
"param="	*(char)
,	O
6	int
)	O
==	O
0	int
)	O
{	O
param	*(struct)
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
p	*(char)
+	O
6	int
,	O
NULL	O
,	O
0	int
)	O
;	O
}	O
}	O
if	O
(	O
user	*(char)
)	O
{	O
char	O
*	O
p	*(char)
=	O
fun	*((*(char),*(char),int)->(*(char)))
(	O
url	*(struct)
->	O
path	*(char)
,	O
user	*(char)
,	O
param	*(struct)
)	O
;	O
if	O
(	O
p	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
url	*(struct)
->	O
path	*(char)
)	O
;	O
url	*(struct)
->	O
path	*(char)
=	O
p	*(char)
;	O
}	O
mu_argcv_remove	(*(int),*(*(*(char))),*((*(char),*(void))->(int)),*(void))->(void)
(	O
&	O
url	*(struct)
->	O
fvcount	int
,	O
&	O
url	*(struct)
->	O
fvpairs	*(*(char))
,	O
rmselector	(*(char),*(void))->(int)
,	O
NULL	O
)	O
;	O
}	O
else	O
return	O
MU_ERR_NOENT	O
;	O
return	O
0	int
;	O
}	O
