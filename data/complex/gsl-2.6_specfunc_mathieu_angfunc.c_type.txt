int	O
gsl_sf_mathieu_ce_e	(int,double,double,*(struct(double,double)))->(int)
(	O
int	O
order	enum(int,int)
,	O
double	O
qq	double
,	O
double	O
zz	*(double)
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
int	O
even_odd	int
,	O
ii	int
,	O
status	int
;	O
double	O
coeff	array(double)
[	O
GSL_SF_MATHIEU_COEFF	int
]	O
,	O
norm	double
,	O
fn	double
,	O
factor	double
;	O
gsl_sf_result	struct(double,double)
aa	*(double)
;	O
norm	double
=	O
0.0	int
;	O
even_odd	int
=	O
0	int
;	O
if	O
(	O
order	enum(int,int)
%	O
2	int
!=	O
0	int
)	O
even_odd	int
=	O
1	int
;	O
if	O
(	O
qq	double
==	O
0.0	int
)	O
{	O
norm	double
=	O
1.0	int
;	O
if	O
(	O
order	enum(int,int)
==	O
0	int
)	O
norm	double
=	O
sqrt	(double)->(double)
(	O
2.0	int
)	O
;	O
fn	double
=	O
cos	(double)->(double)
(	O
order	enum(int,int)
*	O
zz	*(double)
)	O
/	O
norm	double
;	O
result	*(struct(double,double))
->	O
val	double
=	O
fn	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
;	O
factor	double
=	O
fabs	(double)->(double)
(	O
fn	double
)	O
;	O
if	O
(	O
factor	double
>	O
1.0	int
)	O
result	*(struct(double,double))
->	O
err	double
*=	O
factor	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
if	O
(	O
order	enum(int,int)
<	O
0	int
)	O
order	enum(int,int)
*=	O
-	O
1	int
;	O
status	int
=	O
gsl_sf_mathieu_a_e	(int,double,*(struct(double,double)))->(int)
(	O
order	enum(int,int)
,	O
qq	double
,	O
&	O
aa	*(double)
)	O
;	O
if	O
(	O
status	int
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
status	int
;	O
}	O
status	int
=	O
gsl_sf_mathieu_a_coeff	(int,double,double,array(double))->(int)
(	O
order	enum(int,int)
,	O
qq	double
,	O
aa	*(double)
.	O
val	double
,	O
coeff	array(double)
)	O
;	O
if	O
(	O
status	int
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
status	int
;	O
}	O
if	O
(	O
even_odd	int
==	O
0	int
)	O
{	O
fn	double
=	O
0.0	int
;	O
norm	double
=	O
coeff	array(double)
[	O
0	int
]	O
*	O
coeff	array(double)
[	O
0	int
]	O
;	O
for	O
(	O
ii	int
=	O
0	int
;	O
ii	int
<	O
GSL_SF_MATHIEU_COEFF	int
;	O
ii	int
++	O
)	O
{	O
fn	double
+=	O
coeff	array(double)
[	O
ii	int
]	O
*	O
cos	(double)->(double)
(	O
2.0	int
*	O
ii	int
*	O
zz	*(double)
)	O
;	O
norm	double
+=	O
coeff	array(double)
[	O
ii	int
]	O
*	O
coeff	array(double)
[	O
ii	int
]	O
;	O
}	O
}	O
else	O
{	O
fn	double
=	O
0.0	int
;	O
for	O
(	O
ii	int
=	O
0	int
;	O
ii	int
<	O
GSL_SF_MATHIEU_COEFF	int
;	O
ii	int
++	O
)	O
{	O
fn	double
+=	O
coeff	array(double)
[	O
ii	int
]	O
*	O
cos	(double)->(double)
(	O
(	O
2.0	int
*	O
ii	int
+	O
1.0	int
)	O
*	O
zz	*(double)
)	O
;	O
norm	double
+=	O
coeff	array(double)
[	O
ii	int
]	O
*	O
coeff	array(double)
[	O
ii	int
]	O
;	O
}	O
}	O
norm	double
=	O
sqrt	(double)->(double)
(	O
norm	double
)	O
;	O
fn	double
/=	O
norm	double
;	O
result	*(struct(double,double))
->	O
val	double
=	O
fn	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
;	O
factor	double
=	O
fabs	(double)->(double)
(	O
fn	double
)	O
;	O
if	O
(	O
factor	double
>	O
1.0	int
)	O
result	*(struct(double,double))
->	O
err	double
*=	O
factor	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_sf_mathieu_se_e	(int,double,double,*(struct(double,double)))->(int)
(	O
int	O
order	enum(int,int)
,	O
double	O
qq	double
,	O
double	O
zz	*(double)
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
int	O
even_odd	int
,	O
ii	int
,	O
status	int
;	O
double	O
coeff	array(double)
[	O
GSL_SF_MATHIEU_COEFF	int
]	O
,	O
norm	double
,	O
fn	double
,	O
factor	double
;	O
gsl_sf_result	struct(double,double)
aa	*(double)
;	O
norm	double
=	O
0.0	int
;	O
even_odd	int
=	O
0	int
;	O
if	O
(	O
order	enum(int,int)
%	O
2	int
!=	O
0	int
)	O
even_odd	int
=	O
1	int
;	O
if	O
(	O
order	enum(int,int)
==	O
0	int
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
0.0	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
if	O
(	O
qq	double
==	O
0.0	int
)	O
{	O
norm	double
=	O
1.0	int
;	O
fn	double
=	O
sin	(double)->(double)
(	O
order	enum(int,int)
*	O
zz	*(double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
fn	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
;	O
factor	double
=	O
fabs	(double)->(double)
(	O
fn	double
)	O
;	O
if	O
(	O
factor	double
>	O
1.0	int
)	O
result	*(struct(double,double))
->	O
err	double
*=	O
factor	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
if	O
(	O
order	enum(int,int)
<	O
0	int
)	O
order	enum(int,int)
*=	O
-	O
1	int
;	O
status	int
=	O
gsl_sf_mathieu_b_e	(int,double,*(struct(double,double)))->(int)
(	O
order	enum(int,int)
,	O
qq	double
,	O
&	O
aa	*(double)
)	O
;	O
if	O
(	O
status	int
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
status	int
;	O
}	O
status	int
=	O
gsl_sf_mathieu_b_coeff	(int,double,double,array(double))->(int)
(	O
order	enum(int,int)
,	O
qq	double
,	O
aa	*(double)
.	O
val	double
,	O
coeff	array(double)
)	O
;	O
if	O
(	O
status	int
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
status	int
;	O
}	O
if	O
(	O
even_odd	int
==	O
0	int
)	O
{	O
fn	double
=	O
0.0	int
;	O
for	O
(	O
ii	int
=	O
0	int
;	O
ii	int
<	O
GSL_SF_MATHIEU_COEFF	int
;	O
ii	int
++	O
)	O
{	O
norm	double
+=	O
coeff	array(double)
[	O
ii	int
]	O
*	O
coeff	array(double)
[	O
ii	int
]	O
;	O
fn	double
+=	O
coeff	array(double)
[	O
ii	int
]	O
*	O
sin	(double)->(double)
(	O
2.0	int
*	O
(	O
ii	int
+	O
1	int
)	O
*	O
zz	*(double)
)	O
;	O
}	O
}	O
else	O
{	O
fn	double
=	O
0.0	int
;	O
for	O
(	O
ii	int
=	O
0	int
;	O
ii	int
<	O
GSL_SF_MATHIEU_COEFF	int
;	O
ii	int
++	O
)	O
{	O
norm	double
+=	O
coeff	array(double)
[	O
ii	int
]	O
*	O
coeff	array(double)
[	O
ii	int
]	O
;	O
fn	double
+=	O
coeff	array(double)
[	O
ii	int
]	O
*	O
sin	(double)->(double)
(	O
(	O
2.0	int
*	O
ii	int
+	O
1	int
)	O
*	O
zz	*(double)
)	O
;	O
}	O
}	O
norm	double
=	O
sqrt	(double)->(double)
(	O
norm	double
)	O
;	O
fn	double
/=	O
norm	double
;	O
result	*(struct(double,double))
->	O
val	double
=	O
fn	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
;	O
factor	double
=	O
fabs	(double)->(double)
(	O
fn	double
)	O
;	O
if	O
(	O
factor	double
>	O
1.0	int
)	O
result	*(struct(double,double))
->	O
err	double
*=	O
factor	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_sf_mathieu_ce_array	(int,int,double,double,*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,*`,*`,*`,*`)))),array(double))->(int)
(	O
int	O
nmin	int
,	O
int	O
nmax	int
,	O
double	O
qq	double
,	O
double	O
zz	*(double)
,	O
gsl_sf_mathieu_workspace	struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(double),*(double),*(double),*(double))))
*	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
double	O
result_array	array(double)
[	O
]	O
)	O
{	O
int	O
even_odd	int
,	O
order	enum(int,int)
,	O
ii	int
,	O
jj	int
,	O
status	int
;	O
double	O
coeff	array(double)
[	O
GSL_SF_MATHIEU_COEFF	int
]	O
,	O
*	O
aa	*(double)
=	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
aa	*(double)
,	O
norm	double
;	O
for	O
(	O
ii	int
=	O
0	int
;	O
ii	int
<	O
nmax	int
-	O
nmin	int
+	O
1	int
;	O
ii	int
++	O
)	O
result_array	array(double)
[	O
ii	int
]	O
=	O
0.0	int
;	O
if	O
(	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
<	O
(	O
unsigned	O
int	O
)	O
nmax	int
)	O
{	O
GSL_ERROR	O
(	O
"Work space not large enough"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
if	O
(	O
nmin	int
<	O
0	int
||	O
nmax	int
<	O
nmin	int
)	O
{	O
GSL_ERROR	O
(	O
"domain error"	*(char)
,	O
GSL_EDOM	int
)	O
;	O
}	O
gsl_sf_mathieu_a_array	(int,int,double,*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,*`,*`,*`,*`)))),array(double))->(int)
(	O
0	int
,	O
nmax	int
,	O
qq	double
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
aa	*(double)
)	O
;	O
for	O
(	O
ii	int
=	O
0	int
,	O
order	enum(int,int)
=	O
nmin	int
;	O
order	enum(int,int)
<=	O
nmax	int
;	O
ii	int
++	O
,	O
order	enum(int,int)
++	O
)	O
{	O
norm	double
=	O
0.0	int
;	O
even_odd	int
=	O
0	int
;	O
if	O
(	O
order	enum(int,int)
%	O
2	int
!=	O
0	int
)	O
even_odd	int
=	O
1	int
;	O
if	O
(	O
qq	double
==	O
0.0	int
)	O
{	O
norm	double
=	O
1.0	int
;	O
if	O
(	O
order	enum(int,int)
==	O
0	int
)	O
norm	double
=	O
sqrt	(double)->(double)
(	O
2.0	int
)	O
;	O
result_array	array(double)
[	O
ii	int
]	O
=	O
cos	(double)->(double)
(	O
order	enum(int,int)
*	O
zz	*(double)
)	O
/	O
norm	double
;	O
continue	O
;	O
}	O
status	int
=	O
gsl_sf_mathieu_a_coeff	(int,double,double,array(double))->(int)
(	O
order	enum(int,int)
,	O
qq	double
,	O
aa	*(double)
[	O
order	enum(int,int)
]	O
,	O
coeff	array(double)
)	O
;	O
if	O
(	O
status	int
!=	O
GSL_SUCCESS	int
)	O
return	O
status	int
;	O
if	O
(	O
even_odd	int
==	O
0	int
)	O
{	O
norm	double
=	O
coeff	array(double)
[	O
0	int
]	O
*	O
coeff	array(double)
[	O
0	int
]	O
;	O
for	O
(	O
jj	int
=	O
0	int
;	O
jj	int
<	O
GSL_SF_MATHIEU_COEFF	int
;	O
jj	int
++	O
)	O
{	O
result_array	array(double)
[	O
ii	int
]	O
+=	O
coeff	array(double)
[	O
jj	int
]	O
*	O
cos	(double)->(double)
(	O
2.0	int
*	O
jj	int
*	O
zz	*(double)
)	O
;	O
norm	double
+=	O
coeff	array(double)
[	O
jj	int
]	O
*	O
coeff	array(double)
[	O
jj	int
]	O
;	O
}	O
}	O
else	O
{	O
for	O
(	O
jj	int
=	O
0	int
;	O
jj	int
<	O
GSL_SF_MATHIEU_COEFF	int
;	O
jj	int
++	O
)	O
{	O
result_array	array(double)
[	O
ii	int
]	O
+=	O
coeff	array(double)
[	O
jj	int
]	O
*	O
cos	(double)->(double)
(	O
(	O
2.0	int
*	O
jj	int
+	O
1.0	int
)	O
*	O
zz	*(double)
)	O
;	O
norm	double
+=	O
coeff	array(double)
[	O
jj	int
]	O
*	O
coeff	array(double)
[	O
jj	int
]	O
;	O
}	O
}	O
norm	double
=	O
sqrt	(double)->(double)
(	O
norm	double
)	O
;	O
result_array	array(double)
[	O
ii	int
]	O
/=	O
norm	double
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_sf_mathieu_se_array	(int,int,double,double,*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,*`,*`,*`,*`)))),array(double))->(int)
(	O
int	O
nmin	int
,	O
int	O
nmax	int
,	O
double	O
qq	double
,	O
double	O
zz	*(double)
,	O
gsl_sf_mathieu_workspace	struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(double),*(double),*(double),*(double))))
*	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
double	O
result_array	array(double)
[	O
]	O
)	O
{	O
int	O
even_odd	int
,	O
order	enum(int,int)
,	O
ii	int
,	O
jj	int
,	O
status	int
;	O
double	O
coeff	array(double)
[	O
GSL_SF_MATHIEU_COEFF	int
]	O
,	O
*	O
bb	*(double)
=	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
bb	*(double)
,	O
norm	double
;	O
for	O
(	O
ii	int
=	O
0	int
;	O
ii	int
<	O
nmax	int
-	O
nmin	int
+	O
1	int
;	O
ii	int
++	O
)	O
result_array	array(double)
[	O
ii	int
]	O
=	O
0.0	int
;	O
if	O
(	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
<	O
(	O
unsigned	O
int	O
)	O
nmax	int
)	O
{	O
GSL_ERROR	O
(	O
"Work space not large enough"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
if	O
(	O
nmin	int
<	O
0	int
||	O
nmax	int
<	O
nmin	int
)	O
{	O
GSL_ERROR	O
(	O
"domain error"	*(char)
,	O
GSL_EDOM	int
)	O
;	O
}	O
gsl_sf_mathieu_b_array	(int,int,double,*(struct(long,long,long,int,double,double,*(double),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,*`,*`,*`,*`)))),array(double))->(int)
(	O
0	int
,	O
nmax	int
,	O
qq	double
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
bb	*(double)
)	O
;	O
for	O
(	O
ii	int
=	O
0	int
,	O
order	enum(int,int)
=	O
nmin	int
;	O
order	enum(int,int)
<=	O
nmax	int
;	O
ii	int
++	O
,	O
order	enum(int,int)
++	O
)	O
{	O
norm	double
=	O
0.0	int
;	O
even_odd	int
=	O
0	int
;	O
if	O
(	O
order	enum(int,int)
%	O
2	int
!=	O
0	int
)	O
even_odd	int
=	O
1	int
;	O
if	O
(	O
order	enum(int,int)
==	O
0	int
)	O
{	O
norm	double
=	O
1.0	int
;	O
result_array	array(double)
[	O
ii	int
]	O
=	O
0.0	int
;	O
continue	O
;	O
}	O
if	O
(	O
qq	double
==	O
0.0	int
)	O
{	O
norm	double
=	O
1.0	int
;	O
result_array	array(double)
[	O
ii	int
]	O
=	O
sin	(double)->(double)
(	O
order	enum(int,int)
*	O
zz	*(double)
)	O
;	O
continue	O
;	O
}	O
status	int
=	O
gsl_sf_mathieu_b_coeff	(int,double,double,array(double))->(int)
(	O
order	enum(int,int)
,	O
qq	double
,	O
bb	*(double)
[	O
order	enum(int,int)
]	O
,	O
coeff	array(double)
)	O
;	O
if	O
(	O
status	int
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
status	int
;	O
}	O
if	O
(	O
even_odd	int
==	O
0	int
)	O
{	O
for	O
(	O
jj	int
=	O
0	int
;	O
jj	int
<	O
GSL_SF_MATHIEU_COEFF	int
;	O
jj	int
++	O
)	O
{	O
result_array	array(double)
[	O
ii	int
]	O
+=	O
coeff	array(double)
[	O
jj	int
]	O
*	O
sin	(double)->(double)
(	O
2.0	int
*	O
(	O
jj	int
+	O
1	int
)	O
*	O
zz	*(double)
)	O
;	O
norm	double
+=	O
coeff	array(double)
[	O
jj	int
]	O
*	O
coeff	array(double)
[	O
jj	int
]	O
;	O
}	O
}	O
else	O
{	O
for	O
(	O
jj	int
=	O
0	int
;	O
jj	int
<	O
GSL_SF_MATHIEU_COEFF	int
;	O
jj	int
++	O
)	O
{	O
result_array	array(double)
[	O
ii	int
]	O
+=	O
coeff	array(double)
[	O
jj	int
]	O
*	O
sin	(double)->(double)
(	O
(	O
2.0	int
*	O
jj	int
+	O
1.0	int
)	O
*	O
zz	*(double)
)	O
;	O
norm	double
+=	O
coeff	array(double)
[	O
jj	int
]	O
*	O
coeff	array(double)
[	O
jj	int
]	O
;	O
}	O
}	O
norm	double
=	O
sqrt	(double)->(double)
(	O
norm	double
)	O
;	O
result_array	array(double)
[	O
ii	int
]	O
/=	O
norm	double
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
double	O
gsl_sf_mathieu_ce	(int,double,double)->(double)
(	O
int	O
order	enum(int,int)
,	O
double	O
qq	double
,	O
double	O
zz	*(double)
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_mathieu_ce_e	(int,double,double,*(struct(double,double)))->(int)
(	O
order	enum(int,int)
,	O
qq	double
,	O
zz	*(double)
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
double	O
gsl_sf_mathieu_se	(int,double,double)->(double)
(	O
int	O
order	enum(int,int)
,	O
double	O
qq	double
,	O
double	O
zz	*(double)
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_mathieu_se_e	(int,double,double,*(struct(double,double)))->(int)
(	O
order	enum(int,int)
,	O
qq	double
,	O
zz	*(double)
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
