size_t	long
mu_sieve_value_create	(*(struct),enum(int,int,int,int,int),*(struct(struct(*(char),int,int),struct(*(char),int,int))),*(void))->(long)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
mu_sieve_data_type	enum(int,int,int,int,int)
type	int
,	O
struct	O
mu_locus_range	struct(struct(*(char),int,int),struct(*(char),int,int))
const	O
*	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
void	O
*	O
data	*(void)
)	O
{	O
size_t	long
idx	long
;	O
mu_sieve_value_t	struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long)))
*	O
val	*(char)
;	O
if	O
(	O
mach	*(struct)
->	O
valcount	long
==	O
mach	*(struct)
->	O
valmax	long
)	O
{	O
mu_i_sv_2nrealloc	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))),*(*(void)),*(long),long)->(void)
(	O
mach	*(struct)
,	O
(	O
void	O
*	O
*	O
)	O
&	O
mach	*(struct)
->	O
valspace	*(struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long))))
,	O
&	O
mach	*(struct)
->	O
valmax	long
,	O
sizeof	O
mach	*(struct)
->	O
valspace	*(struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long))))
[	O
0	int
]	O
)	O
;	O
}	O
idx	long
=	O
mach	*(struct)
->	O
valcount	long
++	O
;	O
val	*(char)
=	O
&	O
mach	*(struct)
->	O
valspace	*(struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long))))
[	O
idx	long
]	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
val	*(char)
,	O
0	int
,	O
sizeof	O
*	O
val	*(char)
)	O
;	O
val	*(char)
->	O
type	int
=	O
type	int
;	O
val	*(char)
->	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
.	O
beg	struct(*(char),int,int)
.	O
mu_file	*(char)
=	O
mu_i_sv_id_str	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))),long)->(*(char))
(	O
mach	*(struct)
,	O
mu_i_sv_id_num	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))),*(char))->(long)
(	O
mach	*(struct)
,	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
->	O
beg	struct(*(char),int,int)
.	O
mu_file	*(char)
)	O
)	O
;	O
val	*(char)
->	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
.	O
beg	struct(*(char),int,int)
.	O
mu_line	int
=	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
->	O
beg	struct(*(char),int,int)
.	O
mu_line	int
;	O
val	*(char)
->	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
.	O
beg	struct(*(char),int,int)
.	O
mu_col	int
=	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
->	O
beg	struct(*(char),int,int)
.	O
mu_col	int
;	O
val	*(char)
->	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
.	O
end	struct(*(char),int,int)
.	O
mu_file	*(char)
=	O
mu_i_sv_id_str	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))),long)->(*(char))
(	O
mach	*(struct)
,	O
mu_i_sv_id_num	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))),*(char))->(long)
(	O
mach	*(struct)
,	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
->	O
end	struct(*(char),int,int)
.	O
mu_file	*(char)
)	O
)	O
;	O
val	*(char)
->	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
.	O
end	struct(*(char),int,int)
.	O
mu_line	int
=	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
->	O
end	struct(*(char),int,int)
.	O
mu_line	int
;	O
val	*(char)
->	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
.	O
end	struct(*(char),int,int)
.	O
mu_col	int
=	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
->	O
end	struct(*(char),int,int)
.	O
mu_col	int
;	O
mu_locus_range_init	(*(struct(struct(*(char),int,int),struct(*(char),int,int))))->(void)
(	O
&	O
val	*(char)
->	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
)	O
;	O
mu_locus_range_copy	(*(struct(struct(*(char),int,int),struct(*(char),int,int))),*(struct(struct(*(char),int,int),struct(*(char),int,int))))->(int)
(	O
&	O
val	*(char)
->	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
)	O
;	O
switch	O
(	O
type	int
)	O
{	O
case	O
SVT_NUMBER	int
:	O
val	*(char)
->	O
v	array(*(char))
.	O
number	long
=	O
*	O
(	O
long	O
*	O
)	O
data	*(void)
;	O
break	O
;	O
case	O
SVT_STRING	int
:	O
val	*(char)
->	O
v	array(*(char))
.	O
list	*(struct)
.	O
first	*((*(void))->(int))
=	O
mu_i_sv_string_create	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))),*(char))->(long)
(	O
mach	*(struct)
,	O
(	O
char	O
*	O
)	O
data	*(void)
)	O
;	O
val	*(char)
->	O
v	array(*(char))
.	O
list	*(struct)
.	O
count	long
=	O
1	int
;	O
break	O
;	O
case	O
SVT_STRING_LIST	int
:	O
val	*(char)
->	O
v	array(*(char))
.	O
list	*(struct)
=	O
*	O
(	O
mu_sieve_slice_t	*(struct(long,long))
)	O
data	*(void)
;	O
break	O
;	O
case	O
SVT_TAG	int
:	O
val	*(char)
->	O
v	array(*(char))
.	O
string	*(*(char))
=	O
data	*(void)
;	O
break	O
;	O
default	O
:	O
mu_error	(*(char))->(int)
(	O
"%s"	*(char)
,	O
_	O
(	O
"invalid data type"	*(char)
)	O
)	O
;	O
abort	()->(void)
(	O
)	O
;	O
}	O
return	O
idx	long
;	O
}	O
mu_sieve_value_t	struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long)))
*	O
mu_sieve_get_arg_untyped	(*(struct),long)->(*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))))
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
size_t	long
index	(*(char),int)->(*(char))
)	O
{	O
if	O
(	O
index	(*(char),int)->(*(char))
>=	O
mach	*(struct)
->	O
argcount	long
)	O
{	O
mu_sieve_error	(*(struct),*(char))->(void)
(	O
mach	*(struct)
,	O
_	O
(	O
"INTERNAL ERROR: %s,%zu,%zu,%zu argument index %zu out of range"	*(char)
)	O
,	O
mach	*(struct)
->	O
identifier	*(char)
,	O
mach	*(struct)
->	O
argstart	long
,	O
mach	*(struct)
->	O
argcount	long
,	O
mach	*(struct)
->	O
tagcount	long
,	O
index	(*(char),int)->(*(char))
)	O
;	O
abort	()->(void)
(	O
)	O
;	O
}	O
return	O
mach	*(struct)
->	O
valspace	*(struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long))))
+	O
mach	*(struct)
->	O
argstart	long
+	O
index	(*(char),int)->(*(char))
;	O
}	O
mu_sieve_value_t	struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long)))
*	O
mu_sieve_get_arg_optional	(*(struct),long)->(*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))))
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
size_t	long
index	(*(char),int)->(*(char))
)	O
{	O
if	O
(	O
index	(*(char),int)->(*(char))
>=	O
mach	*(struct)
->	O
argcount	long
)	O
return	O
NULL	O
;	O
return	O
mach	*(struct)
->	O
valspace	*(struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long))))
+	O
mach	*(struct)
->	O
argstart	long
+	O
index	(*(char),int)->(*(char))
;	O
}	O
void	O
mu_sieve_value_get	(*(struct),*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))),enum(int,int,int,int,int),*(void))->(void)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
mu_sieve_value_t	struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long)))
*	O
val	*(char)
,	O
mu_sieve_data_type	enum(int,int,int,int,int)
type	int
,	O
void	O
*	O
ret	*(*(struct))
)	O
{	O
if	O
(	O
val	*(char)
->	O
type	int
==	O
SVT_STRING	int
&&	O
type	int
==	O
SVT_STRING_LIST	int
)	O
;	O
else	O
if	O
(	O
val	*(char)
->	O
type	int
!=	O
type	int
)	O
{	O
if	O
(	O
val	*(char)
->	O
tag	*(char)
)	O
mu_sieve_error	(*(struct),*(char))->(void)
(	O
mach	*(struct)
,	O
_	O
(	O
"tag :%s has type %s, instead of expected %s"	*(char)
)	O
,	O
val	*(char)
->	O
tag	*(char)
,	O
mu_sieve_type_str	(enum(int,int,int,int,int))->(*(char))
(	O
val	*(char)
->	O
type	int
)	O
,	O
mu_sieve_type_str	(enum(int,int,int,int,int))->(*(char))
(	O
type	int
)	O
)	O
;	O
else	O
{	O
size_t	long
idx	long
=	O
val	*(char)
-	O
mu_sieve_get_arg_untyped	(*(struct),long)->(*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))))
(	O
mach	*(struct)
,	O
0	int
)	O
;	O
if	O
(	O
idx	long
<	O
mach	*(struct)
->	O
argcount	long
)	O
mu_sieve_error	(*(struct),*(char))->(void)
(	O
mach	*(struct)
,	O
_	O
(	O
"argument %zu has type %s, instead of expected %s"	*(char)
)	O
,	O
idx	long
,	O
mu_sieve_type_str	(enum(int,int,int,int,int))->(*(char))
(	O
val	*(char)
->	O
type	int
)	O
,	O
mu_sieve_type_str	(enum(int,int,int,int,int))->(*(char))
(	O
type	int
)	O
)	O
;	O
else	O
abort	()->(void)
(	O
)	O
;	O
}	O
mu_sieve_abort	(*(struct))->(void)
(	O
mach	*(struct)
)	O
;	O
}	O
switch	O
(	O
type	int
)	O
{	O
case	O
SVT_VOID	int
:	O
*	O
(	O
void	O
*	O
*	O
)	O
ret	*(*(struct))
=	O
NULL	O
;	O
break	O
;	O
case	O
SVT_NUMBER	int
:	O
*	O
(	O
size_t	long
*	O
)	O
ret	*(*(struct))
=	O
val	*(char)
->	O
v	array(*(char))
.	O
number	long
;	O
break	O
;	O
case	O
SVT_STRING	int
:	O
*	O
(	O
char	O
*	O
*	O
)	O
ret	*(*(struct))
=	O
mu_sieve_string	struct(int,int,*(char),*(char),*(void))
(	O
mach	*(struct)
,	O
&	O
val	*(char)
->	O
v	array(*(char))
.	O
list	*(struct)
,	O
0	int
)	O
;	O
break	O
;	O
case	O
SVT_STRING_LIST	int
:	O
*	O
(	O
struct	O
mu_sieve_slice	struct(long,long)
*	O
)	O
ret	*(*(struct))
=	O
val	*(char)
->	O
v	array(*(char))
.	O
list	*(struct)
;	O
break	O
;	O
case	O
SVT_TAG	int
:	O
*	O
(	O
char	O
*	O
*	O
)	O
ret	*(*(struct))
=	O
val	*(char)
->	O
v	array(*(char))
.	O
string	*(*(char))
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
}	O
void	O
mu_sieve_get_arg	(*(struct),long,enum(int,int,int,int,int),*(void))->(void)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
size_t	long
index	(*(char),int)->(*(char))
,	O
mu_sieve_data_type	enum(int,int,int,int,int)
type	int
,	O
void	O
*	O
ret	*(*(struct))
)	O
{	O
mu_sieve_value_get	(*(struct),*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))),enum(int,int,int,int,int),*(void))->(void)
(	O
mach	*(struct)
,	O
mu_sieve_get_arg_untyped	(*(struct),long)->(*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))))
(	O
mach	*(struct)
,	O
index	(*(char),int)->(*(char))
)	O
,	O
type	int
,	O
ret	*(*(struct))
)	O
;	O
}	O
mu_sieve_value_t	struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long)))
*	O
mu_sieve_get_tag_untyped	(*(struct),*(char))->(*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))))
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
size_t	long
i	long
;	O
mu_sieve_value_t	struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long)))
*	O
tag	*(char)
=	O
mach	*(struct)
->	O
valspace	*(struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long))))
+	O
mach	*(struct)
->	O
argstart	long
+	O
mach	*(struct)
->	O
argcount	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mach	*(struct)
->	O
tagcount	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
tag	*(char)
[	O
i	long
]	O
.	O
tag	*(char)
,	O
name	*(char)
)	O
==	O
0	int
)	O
return	O
&	O
tag	*(char)
[	O
i	long
]	O
;	O
}	O
return	O
NULL	O
;	O
}	O
mu_sieve_value_t	struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long)))
*	O
mu_sieve_get_tag_n	(*(struct),long)->(*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))))
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
size_t	long
n	*(long)
)	O
{	O
if	O
(	O
n	*(long)
>=	O
mach	*(struct)
->	O
tagcount	long
)	O
abort	()->(void)
(	O
)	O
;	O
return	O
&	O
mach	*(struct)
->	O
valspace	*(struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long))))
[	O
mach	*(struct)
->	O
argstart	long
+	O
mach	*(struct)
->	O
argcount	long
+	O
n	*(long)
]	O
;	O
}	O
int	O
mu_sieve_get_tag	(*(struct),*(char),enum(int,int,int,int,int),*(void))->(int)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
char	O
*	O
name	*(char)
,	O
mu_sieve_data_type	enum(int,int,int,int,int)
type	int
,	O
void	O
*	O
ret	*(*(struct))
)	O
{	O
mu_sieve_value_t	struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long)))
*	O
val	*(char)
=	O
mu_sieve_get_tag_untyped	(*(struct),*(char))->(*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))))
(	O
mach	*(struct)
,	O
name	*(char)
)	O
;	O
if	O
(	O
val	*(char)
)	O
{	O
if	O
(	O
ret	*(*(struct))
)	O
mu_sieve_value_get	(*(struct),*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))),enum(int,int,int,int,int),*(void))->(void)
(	O
mach	*(struct)
,	O
val	*(char)
,	O
type	int
,	O
ret	*(*(struct))
)	O
;	O
}	O
return	O
val	*(char)
!=	O
NULL	O
;	O
}	O
void	O
mu_sieve_error	(*(struct),*(char))->(void)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
const	O
char	O
*	O
fmt	*(char)
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
ap	array(struct(int,int,*(void),*(void)))
;	O
va_start	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
fmt	*(char)
)	O
;	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
mach	*(struct)
->	O
errstream	*(struct)
,	O
"\033s<%d>"	*(char)
,	O
MU_LOG_ERROR	int
)	O
;	O
if	O
(	O
mach	*(struct)
->	O
identifier	*(char)
)	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
mach	*(struct)
->	O
errstream	*(struct)
,	O
"%s: "	*(char)
,	O
mach	*(struct)
->	O
identifier	*(char)
)	O
;	O
mu_stream_vprintf	(*(struct),*(char),array(struct(int,int,*(void),*(void))))->(int)
(	O
mach	*(struct)
->	O
errstream	*(struct)
,	O
fmt	*(char)
,	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
mach	*(struct)
->	O
errstream	*(struct)
,	O
"\n"	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
va_end	O
(	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
}	O
const	O
char	O
*	O
mu_sieve_type_str	(enum(int,int,int,int,int))->(*(char))
(	O
mu_sieve_data_type	enum(int,int,int,int,int)
type	int
)	O
{	O
switch	O
(	O
type	int
)	O
{	O
case	O
SVT_VOID	int
:	O
return	O
"void"	*(char)
;	O
case	O
SVT_NUMBER	int
:	O
return	O
"number"	*(char)
;	O
case	O
SVT_STRING	int
:	O
return	O
"string"	*(char)
;	O
case	O
SVT_STRING_LIST	int
:	O
return	O
"string-list"	*(char)
;	O
case	O
SVT_TAG	int
:	O
return	O
"tag"	*(char)
;	O
}	O
return	O
"unknown"	*(char)
;	O
}	O
void	O
mu_i_sv_debug	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))),long,*(char))->(void)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
size_t	long
pc	long
,	O
const	O
char	O
*	O
fmt	*(char)
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
ap	array(struct(int,int,*(void),*(void)))
;	O
if	O
(	O
mach	*(struct)
->	O
state_flags	int
&	O
MU_SV_SAVED_DBG_STATE	int
)	O
{	O
unsigned	O
severity	int
=	O
MU_LOG_DEBUG	int
;	O
mu_stream_ioctl	(*(struct),int,int,*(void))->(int)
(	O
mach	*(struct)
->	O
dbgstream	*(struct)
,	O
MU_IOCTL_LOGSTREAM	int
,	O
MU_IOCTL_LOGSTREAM_SET_SEVERITY	int
,	O
&	O
severity	int
)	O
;	O
if	O
(	O
mach	*(struct)
->	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
.	O
beg	struct(*(char),int,int)
.	O
mu_file	*(char)
)	O
{	O
int	O
mode	int
=	O
mach	*(struct)
->	O
dbg_mode	int
|	O
MU_LOGMODE_LOCUS	int
;	O
mu_stream_ioctl	(*(struct),int,int,*(void))->(int)
(	O
mach	*(struct)
->	O
dbgstream	*(struct)
,	O
MU_IOCTL_LOGSTREAM	int
,	O
MU_IOCTL_LOGSTREAM_SET_LOCUS_RANGE	int
,	O
&	O
mach	*(struct)
->	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
)	O
;	O
mu_stream_ioctl	(*(struct),int,int,*(void))->(int)
(	O
mach	*(struct)
->	O
dbgstream	*(struct)
,	O
MU_IOCTL_LOGSTREAM	int
,	O
MU_IOCTL_LOGSTREAM_SET_MODE	int
,	O
&	O
mode	int
)	O
;	O
}	O
}	O
va_start	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
fmt	*(char)
)	O
;	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
mach	*(struct)
->	O
dbgstream	*(struct)
,	O
"%4zu: "	*(char)
,	O
pc	long
)	O
;	O
mu_stream_vprintf	(*(struct),*(char),array(struct(int,int,*(void),*(void))))->(int)
(	O
mach	*(struct)
->	O
dbgstream	*(struct)
,	O
fmt	*(char)
,	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
mach	*(struct)
->	O
dbgstream	*(struct)
,	O
"\n"	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
va_end	O
(	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
}	O
void	O
mu_i_sv_debug_command	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))),long,*(char))->(void)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
size_t	long
pc	long
,	O
char	O
const	O
*	O
what	*(char)
)	O
{	O
size_t	long
i	long
;	O
if	O
(	O
mach	*(struct)
->	O
state_flags	int
&	O
MU_SV_SAVED_DBG_STATE	int
)	O
{	O
unsigned	O
severity	int
=	O
MU_LOG_DEBUG	int
;	O
mu_stream_ioctl	(*(struct),int,int,*(void))->(int)
(	O
mach	*(struct)
->	O
dbgstream	*(struct)
,	O
MU_IOCTL_LOGSTREAM	int
,	O
MU_IOCTL_LOGSTREAM_SET_SEVERITY	int
,	O
&	O
severity	int
)	O
;	O
if	O
(	O
mach	*(struct)
->	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
.	O
beg	struct(*(char),int,int)
.	O
mu_file	*(char)
)	O
{	O
int	O
mode	int
=	O
mach	*(struct)
->	O
dbg_mode	int
|	O
MU_LOGMODE_LOCUS	int
;	O
mu_stream_ioctl	(*(struct),int,int,*(void))->(int)
(	O
mach	*(struct)
->	O
dbgstream	*(struct)
,	O
MU_IOCTL_LOGSTREAM	int
,	O
MU_IOCTL_LOGSTREAM_SET_LOCUS_RANGE	int
,	O
&	O
mach	*(struct)
->	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
)	O
;	O
mu_stream_ioctl	(*(struct),int,int,*(void))->(int)
(	O
mach	*(struct)
->	O
dbgstream	*(struct)
,	O
MU_IOCTL_LOGSTREAM	int
,	O
MU_IOCTL_LOGSTREAM_SET_MODE	int
,	O
&	O
mode	int
)	O
;	O
}	O
}	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
mach	*(struct)
->	O
dbgstream	*(struct)
,	O
"%4zu: %s: %s"	*(char)
,	O
pc	long
,	O
what	*(char)
,	O
mach	*(struct)
->	O
identifier	*(char)
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mach	*(struct)
->	O
argcount	long
;	O
i	long
++	O
)	O
mu_i_sv_valf	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))),*(struct),*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))))->(void)
(	O
mach	*(struct)
,	O
mach	*(struct)
->	O
dbgstream	*(struct)
,	O
&	O
mach	*(struct)
->	O
valspace	*(struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long))))
[	O
mach	*(struct)
->	O
argstart	long
+	O
i	long
]	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mach	*(struct)
->	O
tagcount	long
;	O
i	long
++	O
)	O
mu_i_sv_valf	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))),*(struct),*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))))->(void)
(	O
mach	*(struct)
,	O
mach	*(struct)
->	O
dbgstream	*(struct)
,	O
mu_sieve_get_tag_n	(*(struct),long)->(*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))))
(	O
mach	*(struct)
,	O
i	long
)	O
)	O
;	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
mach	*(struct)
->	O
dbgstream	*(struct)
,	O
"\n"	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
}	O
void	O
mu_i_sv_trace	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))),*(char))->(void)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
const	O
char	O
*	O
what	*(char)
)	O
{	O
size_t	long
i	long
;	O
if	O
(	O
!	O
mu_debug_level_p	(int,int)->(int)
(	O
mu_sieve_debug_handle	int
,	O
MU_DEBUG_TRACE4	int
)	O
)	O
return	O
;	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
mach	*(struct)
->	O
errstream	*(struct)
,	O
"\033s<%d>"	*(char)
,	O
MU_LOG_DEBUG	int
)	O
;	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
mach	*(struct)
->	O
errstream	*(struct)
,	O
"%zu: %s %s"	*(char)
,	O
mach	*(struct)
->	O
msgno	long
,	O
what	*(char)
,	O
mach	*(struct)
->	O
identifier	*(char)
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mach	*(struct)
->	O
argcount	long
;	O
i	long
++	O
)	O
mu_i_sv_valf	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))),*(struct),*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))))->(void)
(	O
mach	*(struct)
,	O
mach	*(struct)
->	O
errstream	*(struct)
,	O
mu_sieve_get_arg_untyped	(*(struct),long)->(*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))))
(	O
mach	*(struct)
,	O
i	long
)	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mach	*(struct)
->	O
tagcount	long
;	O
i	long
++	O
)	O
mu_i_sv_valf	(*(struct(struct(struct(*`,int,int),struct(*`,int,int)),int,*(struct),*(struct),*(struct),*(struct),*(*(char)),long,long,*(struct(int,int,*`,*`,*`)),long,long,*(struct(enum(int,int,int,int,int),*`,struct`,union`)),long,long,long,*(union(*`,*`,*`,*`,long,long,long,int,*`,int)),enum(int,int,int,int,int),long,long,*(struct),*(char),*(struct(int,int)),long,long,*(struct),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct),*(struct),long,*(struct),int,int,int,struct(struct(*`,int,int),struct(*`,int,int)),int,struct(struct(*`,int,int),struct(*`,int,int)),*(struct),*(struct),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct),*(char),*(void))),*(struct),*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))))->(void)
(	O
mach	*(struct)
,	O
mach	*(struct)
->	O
errstream	*(struct)
,	O
mu_sieve_get_tag_n	(*(struct),long)->(*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))))
(	O
mach	*(struct)
,	O
i	long
)	O
)	O
;	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
mach	*(struct)
->	O
errstream	*(struct)
,	O
"\n"	*(char)
)	O
;	O
}	O
void	O
mu_sieve_log_action	(*(struct),*(char),*(char))->(void)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
const	O
char	O
*	O
action	*((*(char),*(void),*(void))->(int))
,	O
const	O
char	O
*	O
fmt	*(char)
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
ap	array(struct(int,int,*(void),*(void)))
;	O
if	O
(	O
!	O
mach	*(struct)
->	O
logger	*((*(struct),*(char),*(char),array(struct(int,int,*(void),*(void))))->(void))
)	O
return	O
;	O
va_start	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
fmt	*(char)
)	O
;	O
mach	*(struct)
->	O
logger	*((*(struct),*(char),*(char),array(struct(int,int,*(void),*(void))))->(void))
(	O
mach	*(struct)
,	O
action	*((*(char),*(void),*(void))->(int))
,	O
fmt	*(char)
,	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
va_end	O
(	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
}	O
int	O
mu_sieve_vlist_do	(*(struct),*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))),*((*(void),*(void))->(int)),*(void))->(int)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
mu_sieve_value_t	struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long)))
*	O
val	*(char)
,	O
mu_list_action_t	*((*(void),*(void))->(int))
ac	*((*(void),*(void))->(int))
,	O
void	O
*	O
data	*(void)
)	O
{	O
size_t	long
i	long
;	O
switch	O
(	O
val	*(char)
->	O
type	int
)	O
{	O
case	O
SVT_STRING_LIST	int
:	O
case	O
SVT_STRING	int
:	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
val	*(char)
->	O
v	array(*(char))
.	O
list	*(struct)
.	O
count	long
;	O
i	long
++	O
)	O
{	O
int	O
rc	int
=	O
ac	*((*(void),*(void))->(int))
(	O
mu_sieve_string	struct(int,int,*(char),*(char),*(void))
(	O
mach	*(struct)
,	O
&	O
val	*(char)
->	O
v	array(*(char))
.	O
list	*(struct)
,	O
i	long
)	O
,	O
data	*(void)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
return	O
0	int
;	O
default	O
:	O
mu_error	(*(char))->(int)
(	O
"mu_sieve_vlist_do: unexpected list type %d"	*(char)
,	O
val	*(char)
->	O
type	int
)	O
;	O
return	O
EINVAL	int
;	O
}	O
}	O
int	O
mu_sieve_vlist_compare	(*(struct),*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))),*(struct(enum(int,int,int,int,int),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(char),long,struct(long,long)))),*((*(void),*(void),long,*(*(char)))->(int)),*((*(void),*(void),*(void),*(*(void)))->(int)),*(void))->(int)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
mu_sieve_value_t	struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long)))
*	O
a	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
mu_sieve_value_t	struct(enum(int,int,int,int,int),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(char),long,struct(long,long)))
*	O
b	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
mu_sieve_retrieve_t	*((*(void),*(void),long,*(*(char)))->(int))
retr	*((*(void),*(void),long,*(*(char)))->(int))
,	O
mu_list_folder_t	*((*(void),*(void),*(void),*(*(void)))->(int))
fold	*((*(void),*(void),*(void),*(*(void)))->(int))
,	O
void	O
*	O
data	*(void)
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
size_t	long
i	long
;	O
mu_sieve_comparator_t	*((*(struct),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int))
comp	array(*((*(struct),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int)))
=	O
mu_sieve_get_comparator	(*(struct))->(*((*(struct),*(struct(int,int,*`,*`,*`)),*(char))->(int)))
(	O
mach	*(struct)
)	O
;	O
mu_sieve_relcmp_t	*((int,int)->(int))
test	*(*((int,int)->(int)))
=	O
mu_sieve_get_relcmp	(*(struct))->(*((int,int)->(int)))
(	O
mach	*(struct)
)	O
;	O
char	O
*	O
relcmp	*(char)
;	O
mu_list_t	*(struct)
tmp	*(struct)
;	O
if	O
(	O
!	O
(	O
a	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
->	O
type	int
==	O
SVT_STRING_LIST	int
||	O
a	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
->	O
type	int
==	O
SVT_STRING	int
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
rc	int
=	O
mu_list_create	(*(*(struct)))->(int)
(	O
&	O
tmp	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	(*(struct),*(char))->(void)
(	O
mach	*(struct)
,	O
"mu_list_create: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
mu_sieve_abort	(*(struct))->(void)
(	O
mach	*(struct)
)	O
;	O
}	O
mu_list_set_destroy_item	(*(struct),*((*(void))->(void)))->(*((*(void))->(void)))
(	O
tmp	*(struct)
,	O
mu_list_free_item	(*(void))->(void)
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
a	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
->	O
v	array(*(char))
.	O
list	*(struct)
.	O
count	long
;	O
i	long
++	O
)	O
{	O
char	O
*	O
item	*(void)
=	O
mu_sieve_string	struct(int,int,*(char),*(char),*(void))
(	O
mach	*(struct)
,	O
&	O
a	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
->	O
v	array(*(char))
.	O
list	*(struct)
,	O
i	long
)	O
;	O
char	O
*	O
sample	*(char)
;	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
(	O
rc	int
=	O
retr	*((*(void),*(void),long,*(*(char)))->(int))
(	O
item	*(void)
,	O
data	*(void)
,	O
j	long
,	O
&	O
sample	*(char)
)	O
)	O
==	O
0	int
;	O
j	long
++	O
)	O
{	O
if	O
(	O
!	O
sample	*(char)
)	O
continue	O
;	O
rc	int
=	O
mu_list_append	(*(struct),*(void))->(int)
(	O
tmp	*(struct)
,	O
sample	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	(*(void))->(void)
(	O
sample	*(char)
)	O
;	O
mu_list_destroy	(*(*(struct)))->(void)
(	O
&	O
tmp	*(struct)
)	O
;	O
mu_sieve_error	(*(struct),*(char))->(void)
(	O
mach	*(struct)
,	O
"mu_list_append: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
mu_sieve_abort	(*(struct))->(void)
(	O
mach	*(struct)
)	O
;	O
}	O
}	O
if	O
(	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
{	O
mu_list_destroy	(*(*(struct)))->(void)
(	O
&	O
tmp	*(struct)
)	O
;	O
mu_sieve_error	(*(struct),*(char))->(void)
(	O
mach	*(struct)
,	O
"retriever failure: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
mu_sieve_abort	(*(struct))->(void)
(	O
mach	*(struct)
)	O
;	O
}	O
}	O
if	O
(	O
mu_sieve_get_tag	(*(struct),*(char),enum(int,int,int,int,int),*(void))->(int)
(	O
mach	*(struct)
,	O
"count"	*(char)
,	O
SVT_STRING	int
,	O
&	O
relcmp	*(char)
)	O
)	O
{	O
size_t	long
limit	long
;	O
size_t	long
count	long
;	O
mu_sieve_relcmpn_t	*((long,long)->(int))
stest	*(*((long,long)->(int)))
;	O
struct	O
mu_sieve_slice	struct(long,long)
slice	*(struct(long,long))
;	O
char	O
*	O
str	*(char)
,	O
*	O
p	*(char)
;	O
if	O
(	O
fold	*((*(void),*(void),*(void),*(*(void)))->(int))
)	O
{	O
count	long
=	O
0	int
;	O
rc	int
=	O
mu_list_fold	(*(struct),*((*(void),*(void),*(void),*(*(void)))->(int)),*(void),*(void),*(void))->(int)
(	O
tmp	*(struct)
,	O
fold	*((*(void),*(void),*(void),*(*(void)))->(int))
,	O
data	*(void)
,	O
&	O
count	long
,	O
&	O
count	long
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	(*(struct),*(char))->(void)
(	O
mach	*(struct)
,	O
"mu_list_fold: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
mu_sieve_abort	(*(struct))->(void)
(	O
mach	*(struct)
)	O
;	O
}	O
}	O
else	O
mu_list_count	(*(struct),*(long))->(int)
(	O
tmp	*(struct)
,	O
&	O
count	long
)	O
;	O
mu_sieve_get_arg	(*(struct),long,enum(int,int,int,int,int),*(void))->(void)
(	O
mach	*(struct)
,	O
1	int
,	O
SVT_STRING_LIST	int
,	O
&	O
slice	*(struct(long,long))
)	O
;	O
str	*(char)
=	O
mu_sieve_string	struct(int,int,*(char),*(char),*(void))
(	O
mach	*(struct)
,	O
&	O
slice	*(struct(long,long))
,	O
0	int
)	O
;	O
limit	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
str	*(char)
,	O
&	O
p	*(char)
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	*(char)
)	O
{	O
mu_sieve_error	(*(struct),*(char))->(void)
(	O
mach	*(struct)
,	O
_	O
(	O
"%s: not an integer"	*(char)
)	O
,	O
str	*(char)
)	O
;	O
mu_sieve_abort	(*(struct))->(void)
(	O
mach	*(struct)
)	O
;	O
}	O
mu_sieve_str_to_relcmp	(*(char),*(*((int,int)->(int))),*(*((long,long)->(int))))->(int)
(	O
relcmp	*(char)
,	O
NULL	O
,	O
&	O
stest	*(*((long,long)->(int)))
)	O
;	O
rc	int
=	O
stest	*(*((long,long)->(int)))
(	O
count	long
,	O
limit	long
)	O
;	O
}	O
else	O
{	O
mu_iterator_t	*(struct)
itr	*(struct)
;	O
mu_list_get_iterator	(*(struct),*(*(struct)))->(int)
(	O
tmp	*(struct)
,	O
&	O
itr	*(struct)
)	O
;	O
rc	int
=	O
0	int
;	O
for	O
(	O
mu_iterator_first	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
rc	int
==	O
0	int
&&	O
!	O
mu_iterator_is_done	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
mu_iterator_next	(*(struct))->(int)
(	O
itr	*(struct)
)	O
)	O
{	O
char	O
const	O
*	O
val	*(char)
;	O
mu_iterator_current	(*(struct),*(*(void)))->(int)
(	O
itr	*(struct)
,	O
(	O
void	O
*	O
*	O
)	O
&	O
val	*(char)
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
b	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
v	array(*(char))
.	O
list	*(struct)
.	O
count	long
;	O
i	long
++	O
)	O
{	O
mu_sieve_string_t	struct(int,int,*(char),*(char),*(void))
*	O
s	*(char)
=	O
mu_sieve_string_raw	(*(struct),*(struct(long,long)),long)->(*(struct(int,int,*(char),*(char),*(void))))
(	O
mach	*(struct)
,	O
&	O
b	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
v	array(*(char))
.	O
list	*(struct)
,	O
i	long
)	O
;	O
rc	int
=	O
test	*(*((int,int)->(int)))
(	O
comp	array(*((*(struct),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int)))
(	O
mach	*(struct)
,	O
s	*(char)
,	O
val	*(char)
)	O
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
}	O
}	O
mu_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
itr	*(struct)
)	O
;	O
}	O
mu_list_destroy	(*(*(struct)))->(void)
(	O
&	O
tmp	*(struct)
)	O
;	O
return	O
rc	int
;	O
}	O
void	O
mu_sieve_stream_save	(*(struct))->(void)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
)	O
{	O
if	O
(	O
mach	*(struct)
->	O
state_flags	int
&	O
MU_SV_SAVED_STATE	int
)	O
return	O
;	O
if	O
(	O
mu_stream_ioctl	(*(struct),int,int,*(void))->(int)
(	O
mach	*(struct)
->	O
errstream	*(struct)
,	O
MU_IOCTL_LOGSTREAM	int
,	O
MU_IOCTL_LOGSTREAM_GET_MODE	int
,	O
&	O
mach	*(struct)
->	O
err_mode	int
)	O
==	O
0	int
&&	O
mu_stream_ioctl	(*(struct),int,int,*(void))->(int)
(	O
mach	*(struct)
->	O
errstream	*(struct)
,	O
MU_IOCTL_LOGSTREAM	int
,	O
MU_IOCTL_LOGSTREAM_GET_LOCUS_RANGE	int
,	O
&	O
mach	*(struct)
->	O
err_locus	struct(struct(*(char),int,int),struct(*(char),int,int))
)	O
==	O
0	int
)	O
mach	*(struct)
->	O
state_flags	int
|=	O
MU_SV_SAVED_ERR_STATE	int
;	O
if	O
(	O
mu_stream_ioctl	(*(struct),int,int,*(void))->(int)
(	O
mach	*(struct)
->	O
dbgstream	*(struct)
,	O
MU_IOCTL_LOGSTREAM	int
,	O
MU_IOCTL_LOGSTREAM_GET_MODE	int
,	O
&	O
mach	*(struct)
->	O
dbg_mode	int
)	O
==	O
0	int
&&	O
mu_stream_ioctl	(*(struct),int,int,*(void))->(int)
(	O
mach	*(struct)
->	O
dbgstream	*(struct)
,	O
MU_IOCTL_LOGSTREAM	int
,	O
MU_IOCTL_LOGSTREAM_GET_LOCUS_RANGE	int
,	O
&	O
mach	*(struct)
->	O
dbg_locus	struct(struct(*(char),int,int),struct(*(char),int,int))
)	O
==	O
0	int
)	O
mach	*(struct)
->	O
state_flags	int
|=	O
MU_SV_SAVED_DBG_STATE	int
;	O
mach	*(struct)
->	O
state_flags	int
|=	O
MU_SV_SAVED_STATE	int
;	O
}	O
void	O
mu_sieve_stream_restore	(*(struct))->(void)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
)	O
{	O
if	O
(	O
!	O
(	O
mach	*(struct)
->	O
state_flags	int
&	O
MU_SV_SAVED_STATE	int
)	O
)	O
return	O
;	O
if	O
(	O
mach	*(struct)
->	O
state_flags	int
&	O
MU_SV_SAVED_ERR_STATE	int
)	O
{	O
mu_stream_ioctl	(*(struct),int,int,*(void))->(int)
(	O
mach	*(struct)
->	O
errstream	*(struct)
,	O
MU_IOCTL_LOGSTREAM	int
,	O
MU_IOCTL_LOGSTREAM_SET_MODE	int
,	O
&	O
mach	*(struct)
->	O
err_mode	int
)	O
;	O
mu_stream_ioctl	(*(struct),int,int,*(void))->(int)
(	O
mach	*(struct)
->	O
errstream	*(struct)
,	O
MU_IOCTL_LOGSTREAM	int
,	O
MU_IOCTL_LOGSTREAM_SET_LOCUS_RANGE	int
,	O
&	O
mach	*(struct)
->	O
err_locus	struct(struct(*(char),int,int),struct(*(char),int,int))
)	O
;	O
}	O
if	O
(	O
mach	*(struct)
->	O
dbgstream	*(struct)
!=	O
mach	*(struct)
->	O
errstream	*(struct)
&&	O
(	O
mach	*(struct)
->	O
state_flags	int
&	O
MU_SV_SAVED_DBG_STATE	int
)	O
)	O
{	O
mu_stream_ioctl	(*(struct),int,int,*(void))->(int)
(	O
mach	*(struct)
->	O
dbgstream	*(struct)
,	O
MU_IOCTL_LOGSTREAM	int
,	O
MU_IOCTL_LOGSTREAM_SET_MODE	int
,	O
&	O
mach	*(struct)
->	O
dbg_mode	int
)	O
;	O
mu_stream_ioctl	(*(struct),int,int,*(void))->(int)
(	O
mach	*(struct)
->	O
dbgstream	*(struct)
,	O
MU_IOCTL_LOGSTREAM	int
,	O
MU_IOCTL_LOGSTREAM_SET_LOCUS_RANGE	int
,	O
&	O
mach	*(struct)
->	O
dbg_locus	struct(struct(*(char),int,int),struct(*(char),int,int))
)	O
;	O
}	O
mach	*(struct)
->	O
state_flags	int
=	O
0	int
;	O
}	O
