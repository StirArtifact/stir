struct	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
bst_create	O
(	O
bst_comparison_func	(*(void),*(void),*(void))->(int)
*	O
compare	O
,	O
void	O
*	O
param	O
,	O
struct	O
libavl_allocator	struct(*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),long)->(*(void))),*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),*(void))->(void)))
*	O
allocator	O
)	O
{	O
struct	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
tree	O
;	O
assert	O
(	O
compare	O
!=	O
NULL	O
)	O
;	O
if	O
(	O
allocator	O
==	O
NULL	O
)	O
allocator	O
=	O
&	O
bst_allocator_default	struct(*((*(struct(*`,*`)),long)->(*(void))),*((*(struct(*`,*`)),*(void))->(void)))
;	O
tree	O
=	O
allocator	O
->	O
libavl_malloc	*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),long)->(*(void)))
(	O
allocator	O
,	O
sizeof	O
*	O
tree	O
)	O
;	O
if	O
(	O
tree	O
==	O
NULL	O
)	O
return	O
NULL	O
;	O
tree	O
->	O
bst_root	*(struct)
=	O
NULL	O
;	O
tree	O
->	O
bst_compare	*((*(void),*(void),*(void))->(int))
=	O
compare	O
;	O
tree	O
->	O
bst_param	*(void)
=	O
param	O
;	O
tree	O
->	O
bst_alloc	*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void))))
=	O
allocator	O
;	O
tree	O
->	O
bst_count	long
=	O
0	int
;	O
tree	O
->	O
bst_generation	long
=	O
0	int
;	O
return	O
tree	O
;	O
}	O
void	O
*	O
bst_find	O
(	O
const	O
struct	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
tree	O
,	O
const	O
void	O
*	O
item	O
)	O
{	O
const	O
struct	O
bst_node	O
*	O
p	O
;	O
assert	O
(	O
tree	O
!=	O
NULL	O
&&	O
item	O
!=	O
NULL	O
)	O
;	O
for	O
(	O
p	O
=	O
tree	O
->	O
bst_root	*(struct)
;	O
p	O
!=	O
NULL	O
;	O
)	O
{	O
int	O
cmp	O
=	O
tree	O
->	O
bst_compare	*((*(void),*(void),*(void))->(int))
(	O
item	O
,	O
p	O
->	O
bst_data	O
,	O
tree	O
->	O
bst_param	*(void)
)	O
;	O
if	O
(	O
cmp	O
<	O
0	int
)	O
p	O
=	O
p	O
->	O
bst_link	O
[	O
0	int
]	O
;	O
else	O
if	O
(	O
cmp	O
>	O
0	int
)	O
p	O
=	O
p	O
->	O
bst_link	O
[	O
1	int
]	O
;	O
else	O
return	O
p	O
->	O
bst_data	O
;	O
}	O
return	O
NULL	O
;	O
}	O
void	O
*	O
*	O
bst_probe	O
(	O
struct	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
tree	O
,	O
void	O
*	O
item	O
)	O
{	O
struct	O
bst_node	O
*	O
p	O
,	O
*	O
q	O
;	O
int	O
dir	O
;	O
struct	O
bst_node	O
*	O
n	O
;	O
assert	O
(	O
tree	O
!=	O
NULL	O
&&	O
item	O
!=	O
NULL	O
)	O
;	O
for	O
(	O
q	O
=	O
NULL	O
,	O
p	O
=	O
tree	O
->	O
bst_root	*(struct)
;	O
p	O
!=	O
NULL	O
;	O
q	O
=	O
p	O
,	O
p	O
=	O
p	O
->	O
bst_link	O
[	O
dir	O
]	O
)	O
{	O
int	O
cmp	O
=	O
tree	O
->	O
bst_compare	*((*(void),*(void),*(void))->(int))
(	O
item	O
,	O
p	O
->	O
bst_data	O
,	O
tree	O
->	O
bst_param	*(void)
)	O
;	O
if	O
(	O
cmp	O
==	O
0	int
)	O
return	O
&	O
p	O
->	O
bst_data	O
;	O
dir	O
=	O
cmp	O
>	O
0	int
;	O
}	O
n	O
=	O
tree	O
->	O
bst_alloc	*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void))))
->	O
libavl_malloc	*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),long)->(*(void)))
(	O
tree	O
->	O
bst_alloc	*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void))))
,	O
sizeof	O
*	O
p	O
)	O
;	O
if	O
(	O
n	O
==	O
NULL	O
)	O
return	O
NULL	O
;	O
tree	O
->	O
bst_count	long
++	O
;	O
n	O
->	O
bst_link	O
[	O
0	int
]	O
=	O
n	O
->	O
bst_link	O
[	O
1	int
]	O
=	O
NULL	O
;	O
n	O
->	O
bst_data	O
=	O
item	O
;	O
if	O
(	O
q	O
!=	O
NULL	O
)	O
q	O
->	O
bst_link	O
[	O
dir	O
]	O
=	O
n	O
;	O
else	O
tree	O
->	O
bst_root	*(struct)
=	O
n	O
;	O
return	O
&	O
n	O
->	O
bst_data	O
;	O
}	O
void	O
*	O
bst_insert	O
(	O
struct	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
table	O
,	O
void	O
*	O
item	O
)	O
{	O
void	O
*	O
*	O
p	O
=	O
bst_probe	O
(	O
table	O
,	O
item	O
)	O
;	O
return	O
p	O
==	O
NULL	O
||	O
*	O
p	O
==	O
item	O
?	O
NULL	O
:	O
*	O
p	O
;	O
}	O
void	O
*	O
bst_replace	O
(	O
struct	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
table	O
,	O
void	O
*	O
item	O
)	O
{	O
void	O
*	O
*	O
p	O
=	O
bst_probe	O
(	O
table	O
,	O
item	O
)	O
;	O
if	O
(	O
p	O
==	O
NULL	O
||	O
*	O
p	O
==	O
item	O
)	O
return	O
NULL	O
;	O
else	O
{	O
void	O
*	O
r	O
=	O
*	O
p	O
;	O
*	O
p	O
=	O
item	O
;	O
return	O
r	O
;	O
}	O
}	O
void	O
*	O
bst_delete	O
(	O
struct	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
tree	O
,	O
const	O
void	O
*	O
item	O
)	O
{	O
struct	O
bst_node	O
*	O
p	O
,	O
*	O
q	O
;	O
int	O
cmp	O
;	O
int	O
dir	O
;	O
assert	O
(	O
tree	O
!=	O
NULL	O
&&	O
item	O
!=	O
NULL	O
)	O
;	O
p	O
=	O
(	O
struct	O
bst_node	O
*	O
)	O
&	O
tree	O
->	O
bst_root	*(struct)
;	O
for	O
(	O
cmp	O
=	O
-	O
1	int
;	O
cmp	O
!=	O
0	int
;	O
cmp	O
=	O
tree	O
->	O
bst_compare	*((*(void),*(void),*(void))->(int))
(	O
item	O
,	O
p	O
->	O
bst_data	O
,	O
tree	O
->	O
bst_param	*(void)
)	O
)	O
{	O
dir	O
=	O
cmp	O
>	O
0	int
;	O
q	O
=	O
p	O
;	O
p	O
=	O
p	O
->	O
bst_link	O
[	O
dir	O
]	O
;	O
if	O
(	O
p	O
==	O
NULL	O
)	O
return	O
NULL	O
;	O
}	O
item	O
=	O
p	O
->	O
bst_data	O
;	O
if	O
(	O
p	O
->	O
bst_link	O
[	O
1	int
]	O
==	O
NULL	O
)	O
q	O
->	O
bst_link	O
[	O
dir	O
]	O
=	O
p	O
->	O
bst_link	O
[	O
0	int
]	O
;	O
else	O
{	O
struct	O
bst_node	O
*	O
r	O
=	O
p	O
->	O
bst_link	O
[	O
1	int
]	O
;	O
if	O
(	O
r	O
->	O
bst_link	O
[	O
0	int
]	O
==	O
NULL	O
)	O
{	O
r	O
->	O
bst_link	O
[	O
0	int
]	O
=	O
p	O
->	O
bst_link	O
[	O
0	int
]	O
;	O
q	O
->	O
bst_link	O
[	O
dir	O
]	O
=	O
r	O
;	O
}	O
else	O
{	O
struct	O
bst_node	O
*	O
s	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
s	O
=	O
r	O
->	O
bst_link	O
[	O
0	int
]	O
;	O
if	O
(	O
s	O
->	O
bst_link	O
[	O
0	int
]	O
==	O
NULL	O
)	O
break	O
;	O
r	O
=	O
s	O
;	O
}	O
r	O
->	O
bst_link	O
[	O
0	int
]	O
=	O
s	O
->	O
bst_link	O
[	O
1	int
]	O
;	O
s	O
->	O
bst_link	O
[	O
0	int
]	O
=	O
p	O
->	O
bst_link	O
[	O
0	int
]	O
;	O
s	O
->	O
bst_link	O
[	O
1	int
]	O
=	O
p	O
->	O
bst_link	O
[	O
1	int
]	O
;	O
q	O
->	O
bst_link	O
[	O
dir	O
]	O
=	O
s	O
;	O
}	O
}	O
tree	O
->	O
bst_alloc	*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void))))
->	O
libavl_free	*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),*(void))->(void))
(	O
tree	O
->	O
bst_alloc	*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void))))
,	O
p	O
)	O
;	O
tree	O
->	O
bst_count	long
--	O
;	O
tree	O
->	O
bst_generation	long
++	O
;	O
return	O
(	O
void	O
*	O
)	O
item	O
;	O
}	O
static	O
void	O
trav_refresh	O
(	O
struct	O
bst_traverser	O
*	O
trav	O
)	O
{	O
assert	O
(	O
trav	O
!=	O
NULL	O
)	O
;	O
trav	O
->	O
bst_generation	long
=	O
trav	O
->	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
->	O
bst_generation	long
;	O
if	O
(	O
trav	O
->	O
bst_node	O
!=	O
NULL	O
)	O
{	O
bst_comparison_func	(*(void),*(void),*(void))->(int)
*	O
cmp	O
=	O
trav	O
->	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
->	O
bst_compare	*((*(void),*(void),*(void))->(int))
;	O
void	O
*	O
param	O
=	O
trav	O
->	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
->	O
bst_param	*(void)
;	O
struct	O
bst_node	O
*	O
node	O
=	O
trav	O
->	O
bst_node	O
;	O
struct	O
bst_node	O
*	O
i	O
;	O
trav	O
->	O
bst_height	O
=	O
0	int
;	O
for	O
(	O
i	O
=	O
trav	O
->	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
->	O
bst_root	*(struct)
;	O
i	O
!=	O
node	O
;	O
)	O
{	O
assert	O
(	O
trav	O
->	O
bst_height	O
<	O
BST_MAX_HEIGHT	O
)	O
;	O
assert	O
(	O
i	O
!=	O
NULL	O
)	O
;	O
trav	O
->	O
bst_stack	O
[	O
trav	O
->	O
bst_height	O
++	O
]	O
=	O
i	O
;	O
i	O
=	O
i	O
->	O
bst_link	O
[	O
cmp	O
(	O
node	O
->	O
bst_data	O
,	O
i	O
->	O
bst_data	O
,	O
param	O
)	O
>	O
0	int
]	O
;	O
}	O
}	O
}	O
void	O
bst_t_init	O
(	O
struct	O
bst_traverser	O
*	O
trav	O
,	O
struct	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
tree	O
)	O
{	O
trav	O
->	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
=	O
tree	O
;	O
trav	O
->	O
bst_node	O
=	O
NULL	O
;	O
trav	O
->	O
bst_height	O
=	O
0	int
;	O
trav	O
->	O
bst_generation	long
=	O
tree	O
->	O
bst_generation	long
;	O
}	O
void	O
*	O
bst_t_first	O
(	O
struct	O
bst_traverser	O
*	O
trav	O
,	O
struct	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
tree	O
)	O
{	O
struct	O
bst_node	O
*	O
x	O
;	O
assert	O
(	O
tree	O
!=	O
NULL	O
&&	O
trav	O
!=	O
NULL	O
)	O
;	O
trav	O
->	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
=	O
tree	O
;	O
trav	O
->	O
bst_height	O
=	O
0	int
;	O
trav	O
->	O
bst_generation	long
=	O
tree	O
->	O
bst_generation	long
;	O
x	O
=	O
tree	O
->	O
bst_root	*(struct)
;	O
if	O
(	O
x	O
!=	O
NULL	O
)	O
while	O
(	O
x	O
->	O
bst_link	O
[	O
0	int
]	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
trav	O
->	O
bst_height	O
>=	O
BST_MAX_HEIGHT	O
)	O
{	O
bst_balance	O
(	O
tree	O
)	O
;	O
return	O
bst_t_first	O
(	O
trav	O
,	O
tree	O
)	O
;	O
}	O
trav	O
->	O
bst_stack	O
[	O
trav	O
->	O
bst_height	O
++	O
]	O
=	O
x	O
;	O
x	O
=	O
x	O
->	O
bst_link	O
[	O
0	int
]	O
;	O
}	O
trav	O
->	O
bst_node	O
=	O
x	O
;	O
return	O
x	O
!=	O
NULL	O
?	O
x	O
->	O
bst_data	O
:	O
NULL	O
;	O
}	O
void	O
*	O
bst_t_last	O
(	O
struct	O
bst_traverser	O
*	O
trav	O
,	O
struct	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
tree	O
)	O
{	O
struct	O
bst_node	O
*	O
x	O
;	O
assert	O
(	O
tree	O
!=	O
NULL	O
&&	O
trav	O
!=	O
NULL	O
)	O
;	O
trav	O
->	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
=	O
tree	O
;	O
trav	O
->	O
bst_height	O
=	O
0	int
;	O
trav	O
->	O
bst_generation	long
=	O
tree	O
->	O
bst_generation	long
;	O
x	O
=	O
tree	O
->	O
bst_root	*(struct)
;	O
if	O
(	O
x	O
!=	O
NULL	O
)	O
while	O
(	O
x	O
->	O
bst_link	O
[	O
1	int
]	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
trav	O
->	O
bst_height	O
>=	O
BST_MAX_HEIGHT	O
)	O
{	O
bst_balance	O
(	O
tree	O
)	O
;	O
return	O
bst_t_last	O
(	O
trav	O
,	O
tree	O
)	O
;	O
}	O
trav	O
->	O
bst_stack	O
[	O
trav	O
->	O
bst_height	O
++	O
]	O
=	O
x	O
;	O
x	O
=	O
x	O
->	O
bst_link	O
[	O
1	int
]	O
;	O
}	O
trav	O
->	O
bst_node	O
=	O
x	O
;	O
return	O
x	O
!=	O
NULL	O
?	O
x	O
->	O
bst_data	O
:	O
NULL	O
;	O
}	O
void	O
*	O
bst_t_find	O
(	O
struct	O
bst_traverser	O
*	O
trav	O
,	O
struct	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
tree	O
,	O
void	O
*	O
item	O
)	O
{	O
struct	O
bst_node	O
*	O
p	O
,	O
*	O
q	O
;	O
assert	O
(	O
trav	O
!=	O
NULL	O
&&	O
tree	O
!=	O
NULL	O
&&	O
item	O
!=	O
NULL	O
)	O
;	O
trav	O
->	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
=	O
tree	O
;	O
trav	O
->	O
bst_height	O
=	O
0	int
;	O
trav	O
->	O
bst_generation	long
=	O
tree	O
->	O
bst_generation	long
;	O
for	O
(	O
p	O
=	O
tree	O
->	O
bst_root	*(struct)
;	O
p	O
!=	O
NULL	O
;	O
p	O
=	O
q	O
)	O
{	O
int	O
cmp	O
=	O
tree	O
->	O
bst_compare	*((*(void),*(void),*(void))->(int))
(	O
item	O
,	O
p	O
->	O
bst_data	O
,	O
tree	O
->	O
bst_param	*(void)
)	O
;	O
if	O
(	O
cmp	O
<	O
0	int
)	O
q	O
=	O
p	O
->	O
bst_link	O
[	O
0	int
]	O
;	O
else	O
if	O
(	O
cmp	O
>	O
0	int
)	O
q	O
=	O
p	O
->	O
bst_link	O
[	O
1	int
]	O
;	O
else	O
{	O
trav	O
->	O
bst_node	O
=	O
p	O
;	O
return	O
p	O
->	O
bst_data	O
;	O
}	O
if	O
(	O
trav	O
->	O
bst_height	O
>=	O
BST_MAX_HEIGHT	O
)	O
{	O
bst_balance	O
(	O
trav	O
->	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
)	O
;	O
return	O
bst_t_find	O
(	O
trav	O
,	O
tree	O
,	O
item	O
)	O
;	O
}	O
trav	O
->	O
bst_stack	O
[	O
trav	O
->	O
bst_height	O
++	O
]	O
=	O
p	O
;	O
}	O
trav	O
->	O
bst_height	O
=	O
0	int
;	O
trav	O
->	O
bst_node	O
=	O
NULL	O
;	O
return	O
NULL	O
;	O
}	O
void	O
*	O
bst_t_insert	O
(	O
struct	O
bst_traverser	O
*	O
trav	O
,	O
struct	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
tree	O
,	O
void	O
*	O
item	O
)	O
{	O
struct	O
bst_node	O
*	O
*	O
q	O
;	O
assert	O
(	O
tree	O
!=	O
NULL	O
&&	O
item	O
!=	O
NULL	O
)	O
;	O
trav	O
->	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
=	O
tree	O
;	O
trav	O
->	O
bst_height	O
=	O
0	int
;	O
q	O
=	O
&	O
tree	O
->	O
bst_root	*(struct)
;	O
while	O
(	O
*	O
q	O
!=	O
NULL	O
)	O
{	O
int	O
x	O
=	O
tree	O
->	O
bst_compare	*((*(void),*(void),*(void))->(int))
(	O
item	O
,	O
(	O
*	O
q	O
)	O
->	O
bst_data	O
,	O
tree	O
->	O
bst_param	*(void)
)	O
;	O
if	O
(	O
x	O
==	O
0	int
)	O
{	O
trav	O
->	O
bst_node	O
=	O
*	O
q	O
;	O
trav	O
->	O
bst_generation	long
=	O
tree	O
->	O
bst_generation	long
;	O
return	O
(	O
*	O
q	O
)	O
->	O
bst_data	O
;	O
}	O
if	O
(	O
trav	O
->	O
bst_height	O
>=	O
BST_MAX_HEIGHT	O
)	O
{	O
bst_balance	O
(	O
tree	O
)	O
;	O
return	O
bst_t_insert	O
(	O
trav	O
,	O
tree	O
,	O
item	O
)	O
;	O
}	O
trav	O
->	O
bst_stack	O
[	O
trav	O
->	O
bst_height	O
++	O
]	O
=	O
*	O
q	O
;	O
q	O
=	O
&	O
(	O
*	O
q	O
)	O
->	O
bst_link	O
[	O
x	O
>	O
0	int
]	O
;	O
}	O
trav	O
->	O
bst_node	O
=	O
*	O
q	O
=	O
tree	O
->	O
bst_alloc	*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void))))
->	O
libavl_malloc	*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),long)->(*(void)))
(	O
tree	O
->	O
bst_alloc	*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void))))
,	O
sizeof	O
*	O
*	O
q	O
)	O
;	O
if	O
(	O
*	O
q	O
==	O
NULL	O
)	O
{	O
trav	O
->	O
bst_node	O
=	O
NULL	O
;	O
trav	O
->	O
bst_generation	long
=	O
tree	O
->	O
bst_generation	long
;	O
return	O
NULL	O
;	O
}	O
(	O
*	O
q	O
)	O
->	O
bst_link	O
[	O
0	int
]	O
=	O
(	O
*	O
q	O
)	O
->	O
bst_link	O
[	O
1	int
]	O
=	O
NULL	O
;	O
(	O
*	O
q	O
)	O
->	O
bst_data	O
=	O
item	O
;	O
tree	O
->	O
bst_count	long
++	O
;	O
trav	O
->	O
bst_generation	long
=	O
tree	O
->	O
bst_generation	long
;	O
return	O
(	O
*	O
q	O
)	O
->	O
bst_data	O
;	O
}	O
void	O
*	O
bst_t_copy	O
(	O
struct	O
bst_traverser	O
*	O
trav	O
,	O
const	O
struct	O
bst_traverser	O
*	O
src	O
)	O
{	O
assert	O
(	O
trav	O
!=	O
NULL	O
&&	O
src	O
!=	O
NULL	O
)	O
;	O
if	O
(	O
trav	O
!=	O
src	O
)	O
{	O
trav	O
->	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
=	O
src	O
->	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
;	O
trav	O
->	O
bst_node	O
=	O
src	O
->	O
bst_node	O
;	O
trav	O
->	O
bst_generation	long
=	O
src	O
->	O
bst_generation	long
;	O
if	O
(	O
trav	O
->	O
bst_generation	long
==	O
trav	O
->	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
->	O
bst_generation	long
)	O
{	O
trav	O
->	O
bst_height	O
=	O
src	O
->	O
bst_height	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
trav	O
->	O
bst_stack	O
,	O
(	O
const	O
void	O
*	O
)	O
src	O
->	O
bst_stack	O
,	O
sizeof	O
*	O
trav	O
->	O
bst_stack	O
*	O
trav	O
->	O
bst_height	O
)	O
;	O
}	O
}	O
return	O
trav	O
->	O
bst_node	O
!=	O
NULL	O
?	O
trav	O
->	O
bst_node	O
->	O
bst_data	O
:	O
NULL	O
;	O
}	O
void	O
*	O
bst_t_next	O
(	O
struct	O
bst_traverser	O
*	O
trav	O
)	O
{	O
struct	O
bst_node	O
*	O
x	O
;	O
assert	O
(	O
trav	O
!=	O
NULL	O
)	O
;	O
if	O
(	O
trav	O
->	O
bst_generation	long
!=	O
trav	O
->	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
->	O
bst_generation	long
)	O
trav_refresh	O
(	O
trav	O
)	O
;	O
x	O
=	O
trav	O
->	O
bst_node	O
;	O
if	O
(	O
x	O
==	O
NULL	O
)	O
{	O
return	O
bst_t_first	O
(	O
trav	O
,	O
trav	O
->	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
)	O
;	O
}	O
else	O
if	O
(	O
x	O
->	O
bst_link	O
[	O
1	int
]	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
trav	O
->	O
bst_height	O
>=	O
BST_MAX_HEIGHT	O
)	O
{	O
bst_balance	O
(	O
trav	O
->	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
)	O
;	O
return	O
bst_t_next	O
(	O
trav	O
)	O
;	O
}	O
trav	O
->	O
bst_stack	O
[	O
trav	O
->	O
bst_height	O
++	O
]	O
=	O
x	O
;	O
x	O
=	O
x	O
->	O
bst_link	O
[	O
1	int
]	O
;	O
while	O
(	O
x	O
->	O
bst_link	O
[	O
0	int
]	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
trav	O
->	O
bst_height	O
>=	O
BST_MAX_HEIGHT	O
)	O
{	O
bst_balance	O
(	O
trav	O
->	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
)	O
;	O
return	O
bst_t_next	O
(	O
trav	O
)	O
;	O
}	O
trav	O
->	O
bst_stack	O
[	O
trav	O
->	O
bst_height	O
++	O
]	O
=	O
x	O
;	O
x	O
=	O
x	O
->	O
bst_link	O
[	O
0	int
]	O
;	O
}	O
}	O
else	O
{	O
struct	O
bst_node	O
*	O
y	O
;	O
do	O
{	O
if	O
(	O
trav	O
->	O
bst_height	O
==	O
0	int
)	O
{	O
trav	O
->	O
bst_node	O
=	O
NULL	O
;	O
return	O
NULL	O
;	O
}	O
y	O
=	O
x	O
;	O
x	O
=	O
trav	O
->	O
bst_stack	O
[	O
--	O
trav	O
->	O
bst_height	O
]	O
;	O
}	O
while	O
(	O
y	O
==	O
x	O
->	O
bst_link	O
[	O
1	int
]	O
)	O
;	O
}	O
trav	O
->	O
bst_node	O
=	O
x	O
;	O
return	O
x	O
->	O
bst_data	O
;	O
}	O
void	O
*	O
bst_t_prev	O
(	O
struct	O
bst_traverser	O
*	O
trav	O
)	O
{	O
struct	O
bst_node	O
*	O
x	O
;	O
assert	O
(	O
trav	O
!=	O
NULL	O
)	O
;	O
if	O
(	O
trav	O
->	O
bst_generation	long
!=	O
trav	O
->	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
->	O
bst_generation	long
)	O
trav_refresh	O
(	O
trav	O
)	O
;	O
x	O
=	O
trav	O
->	O
bst_node	O
;	O
if	O
(	O
x	O
==	O
NULL	O
)	O
{	O
return	O
bst_t_last	O
(	O
trav	O
,	O
trav	O
->	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
)	O
;	O
}	O
else	O
if	O
(	O
x	O
->	O
bst_link	O
[	O
0	int
]	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
trav	O
->	O
bst_height	O
>=	O
BST_MAX_HEIGHT	O
)	O
{	O
bst_balance	O
(	O
trav	O
->	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
)	O
;	O
return	O
bst_t_prev	O
(	O
trav	O
)	O
;	O
}	O
trav	O
->	O
bst_stack	O
[	O
trav	O
->	O
bst_height	O
++	O
]	O
=	O
x	O
;	O
x	O
=	O
x	O
->	O
bst_link	O
[	O
0	int
]	O
;	O
while	O
(	O
x	O
->	O
bst_link	O
[	O
1	int
]	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
trav	O
->	O
bst_height	O
>=	O
BST_MAX_HEIGHT	O
)	O
{	O
bst_balance	O
(	O
trav	O
->	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
)	O
;	O
return	O
bst_t_prev	O
(	O
trav	O
)	O
;	O
}	O
trav	O
->	O
bst_stack	O
[	O
trav	O
->	O
bst_height	O
++	O
]	O
=	O
x	O
;	O
x	O
=	O
x	O
->	O
bst_link	O
[	O
1	int
]	O
;	O
}	O
}	O
else	O
{	O
struct	O
bst_node	O
*	O
y	O
;	O
do	O
{	O
if	O
(	O
trav	O
->	O
bst_height	O
==	O
0	int
)	O
{	O
trav	O
->	O
bst_node	O
=	O
NULL	O
;	O
return	O
NULL	O
;	O
}	O
y	O
=	O
x	O
;	O
x	O
=	O
trav	O
->	O
bst_stack	O
[	O
--	O
trav	O
->	O
bst_height	O
]	O
;	O
}	O
while	O
(	O
y	O
==	O
x	O
->	O
bst_link	O
[	O
0	int
]	O
)	O
;	O
}	O
trav	O
->	O
bst_node	O
=	O
x	O
;	O
return	O
x	O
->	O
bst_data	O
;	O
}	O
void	O
*	O
bst_t_cur	O
(	O
struct	O
bst_traverser	O
*	O
trav	O
)	O
{	O
assert	O
(	O
trav	O
!=	O
NULL	O
)	O
;	O
return	O
trav	O
->	O
bst_node	O
!=	O
NULL	O
?	O
trav	O
->	O
bst_node	O
->	O
bst_data	O
:	O
NULL	O
;	O
}	O
void	O
*	O
bst_t_replace	O
(	O
struct	O
bst_traverser	O
*	O
trav	O
,	O
void	O
*	O
new	O
)	O
{	O
struct	O
bst_node	O
*	O
old	O
;	O
assert	O
(	O
trav	O
!=	O
NULL	O
&&	O
trav	O
->	O
bst_node	O
!=	O
NULL	O
&&	O
new	O
!=	O
NULL	O
)	O
;	O
old	O
=	O
trav	O
->	O
bst_node	O
->	O
bst_data	O
;	O
trav	O
->	O
bst_node	O
->	O
bst_data	O
=	O
new	O
;	O
return	O
old	O
;	O
}	O
static	O
void	O
copy_error_recovery	O
(	O
struct	O
bst_node	O
*	O
*	O
stack	O
,	O
int	O
height	O
,	O
struct	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
new	O
,	O
bst_item_func	(*(void),*(void))->(void)
*	O
destroy	O
)	O
{	O
assert	O
(	O
stack	O
!=	O
NULL	O
&&	O
height	O
>=	O
0	int
&&	O
new	O
!=	O
NULL	O
)	O
;	O
for	O
(	O
;	O
height	O
>	O
2	int
;	O
height	O
-=	O
2	int
)	O
stack	O
[	O
height	O
-	O
1	int
]	O
->	O
bst_link	O
[	O
1	int
]	O
=	O
NULL	O
;	O
bst_destroy	O
(	O
new	O
,	O
destroy	O
)	O
;	O
}	O
struct	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
bst_copy	O
(	O
const	O
struct	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
org	O
,	O
bst_copy_func	(*(void),*(void))->(*(void))
*	O
copy	O
,	O
bst_item_func	(*(void),*(void))->(void)
*	O
destroy	O
,	O
struct	O
libavl_allocator	struct(*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),long)->(*(void))),*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),*(void))->(void)))
*	O
allocator	O
)	O
{	O
struct	O
bst_node	O
*	O
stack	O
[	O
2	int
*	O
(	O
BST_MAX_HEIGHT	O
+	O
1	int
)	O
]	O
;	O
int	O
height	O
=	O
0	int
;	O
struct	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
new	O
;	O
const	O
struct	O
bst_node	O
*	O
x	O
;	O
struct	O
bst_node	O
*	O
y	O
;	O
assert	O
(	O
org	O
!=	O
NULL	O
)	O
;	O
new	O
=	O
bst_create	O
(	O
org	O
->	O
bst_compare	*((*(void),*(void),*(void))->(int))
,	O
org	O
->	O
bst_param	*(void)
,	O
allocator	O
!=	O
NULL	O
?	O
allocator	O
:	O
org	O
->	O
bst_alloc	*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void))))
)	O
;	O
if	O
(	O
new	O
==	O
NULL	O
)	O
return	O
NULL	O
;	O
new	O
->	O
bst_count	long
=	O
org	O
->	O
bst_count	long
;	O
if	O
(	O
new	O
->	O
bst_count	long
==	O
0	int
)	O
return	O
new	O
;	O
x	O
=	O
(	O
const	O
struct	O
bst_node	O
*	O
)	O
&	O
org	O
->	O
bst_root	*(struct)
;	O
y	O
=	O
(	O
struct	O
bst_node	O
*	O
)	O
&	O
new	O
->	O
bst_root	*(struct)
;	O
for	O
(	O
;	O
;	O
)	O
{	O
while	O
(	O
x	O
->	O
bst_link	O
[	O
0	int
]	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
height	O
>=	O
2	int
*	O
(	O
BST_MAX_HEIGHT	O
+	O
1	int
)	O
)	O
{	O
y	O
->	O
bst_data	O
=	O
NULL	O
;	O
y	O
->	O
bst_link	O
[	O
0	int
]	O
=	O
y	O
->	O
bst_link	O
[	O
1	int
]	O
=	O
NULL	O
;	O
copy_error_recovery	O
(	O
stack	O
,	O
height	O
,	O
new	O
,	O
destroy	O
)	O
;	O
bst_balance	O
(	O
(	O
struct	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
)	O
org	O
)	O
;	O
return	O
bst_copy	O
(	O
org	O
,	O
copy	O
,	O
destroy	O
,	O
allocator	O
)	O
;	O
}	O
y	O
->	O
bst_link	O
[	O
0	int
]	O
=	O
new	O
->	O
bst_alloc	*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void))))
->	O
libavl_malloc	*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),long)->(*(void)))
(	O
new	O
->	O
bst_alloc	*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void))))
,	O
sizeof	O
*	O
y	O
->	O
bst_link	O
[	O
0	int
]	O
)	O
;	O
if	O
(	O
y	O
->	O
bst_link	O
[	O
0	int
]	O
==	O
NULL	O
)	O
{	O
if	O
(	O
y	O
!=	O
(	O
struct	O
bst_node	O
*	O
)	O
&	O
new	O
->	O
bst_root	*(struct)
)	O
{	O
y	O
->	O
bst_data	O
=	O
NULL	O
;	O
y	O
->	O
bst_link	O
[	O
1	int
]	O
=	O
NULL	O
;	O
}	O
copy_error_recovery	O
(	O
stack	O
,	O
height	O
,	O
new	O
,	O
destroy	O
)	O
;	O
return	O
NULL	O
;	O
}	O
stack	O
[	O
height	O
++	O
]	O
=	O
(	O
struct	O
bst_node	O
*	O
)	O
x	O
;	O
stack	O
[	O
height	O
++	O
]	O
=	O
y	O
;	O
x	O
=	O
x	O
->	O
bst_link	O
[	O
0	int
]	O
;	O
y	O
=	O
y	O
->	O
bst_link	O
[	O
0	int
]	O
;	O
}	O
y	O
->	O
bst_link	O
[	O
0	int
]	O
=	O
NULL	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
copy	O
==	O
NULL	O
)	O
y	O
->	O
bst_data	O
=	O
x	O
->	O
bst_data	O
;	O
else	O
{	O
y	O
->	O
bst_data	O
=	O
copy	O
(	O
x	O
->	O
bst_data	O
,	O
org	O
->	O
bst_param	*(void)
)	O
;	O
if	O
(	O
y	O
->	O
bst_data	O
==	O
NULL	O
)	O
{	O
y	O
->	O
bst_link	O
[	O
1	int
]	O
=	O
NULL	O
;	O
copy_error_recovery	O
(	O
stack	O
,	O
height	O
,	O
new	O
,	O
destroy	O
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
if	O
(	O
x	O
->	O
bst_link	O
[	O
1	int
]	O
!=	O
NULL	O
)	O
{	O
y	O
->	O
bst_link	O
[	O
1	int
]	O
=	O
new	O
->	O
bst_alloc	*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void))))
->	O
libavl_malloc	*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),long)->(*(void)))
(	O
new	O
->	O
bst_alloc	*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void))))
,	O
sizeof	O
*	O
y	O
->	O
bst_link	O
[	O
1	int
]	O
)	O
;	O
if	O
(	O
y	O
->	O
bst_link	O
[	O
1	int
]	O
==	O
NULL	O
)	O
{	O
copy_error_recovery	O
(	O
stack	O
,	O
height	O
,	O
new	O
,	O
destroy	O
)	O
;	O
return	O
NULL	O
;	O
}	O
x	O
=	O
x	O
->	O
bst_link	O
[	O
1	int
]	O
;	O
y	O
=	O
y	O
->	O
bst_link	O
[	O
1	int
]	O
;	O
break	O
;	O
}	O
else	O
y	O
->	O
bst_link	O
[	O
1	int
]	O
=	O
NULL	O
;	O
if	O
(	O
height	O
<=	O
2	int
)	O
return	O
new	O
;	O
y	O
=	O
stack	O
[	O
--	O
height	O
]	O
;	O
x	O
=	O
stack	O
[	O
--	O
height	O
]	O
;	O
}	O
}	O
}	O
void	O
bst_destroy	O
(	O
struct	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
tree	O
,	O
bst_item_func	(*(void),*(void))->(void)
*	O
destroy	O
)	O
{	O
struct	O
bst_node	O
*	O
p	O
,	O
*	O
q	O
;	O
assert	O
(	O
tree	O
!=	O
NULL	O
)	O
;	O
for	O
(	O
p	O
=	O
tree	O
->	O
bst_root	*(struct)
;	O
p	O
!=	O
NULL	O
;	O
p	O
=	O
q	O
)	O
if	O
(	O
p	O
->	O
bst_link	O
[	O
0	int
]	O
==	O
NULL	O
)	O
{	O
q	O
=	O
p	O
->	O
bst_link	O
[	O
1	int
]	O
;	O
if	O
(	O
destroy	O
!=	O
NULL	O
&&	O
p	O
->	O
bst_data	O
!=	O
NULL	O
)	O
destroy	O
(	O
p	O
->	O
bst_data	O
,	O
tree	O
->	O
bst_param	*(void)
)	O
;	O
tree	O
->	O
bst_alloc	*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void))))
->	O
libavl_free	*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),*(void))->(void))
(	O
tree	O
->	O
bst_alloc	*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void))))
,	O
p	O
)	O
;	O
}	O
else	O
{	O
q	O
=	O
p	O
->	O
bst_link	O
[	O
0	int
]	O
;	O
p	O
->	O
bst_link	O
[	O
0	int
]	O
=	O
q	O
->	O
bst_link	O
[	O
1	int
]	O
;	O
q	O
->	O
bst_link	O
[	O
1	int
]	O
=	O
p	O
;	O
}	O
tree	O
->	O
bst_alloc	*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void))))
->	O
libavl_free	*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),*(void))->(void))
(	O
tree	O
->	O
bst_alloc	*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void))))
,	O
tree	O
)	O
;	O
}	O
static	O
void	O
tree_to_vine	O
(	O
struct	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
tree	O
)	O
{	O
struct	O
bst_node	O
*	O
q	O
,	O
*	O
p	O
;	O
q	O
=	O
(	O
struct	O
bst_node	O
*	O
)	O
&	O
tree	O
->	O
bst_root	*(struct)
;	O
p	O
=	O
tree	O
->	O
bst_root	*(struct)
;	O
while	O
(	O
p	O
!=	O
NULL	O
)	O
if	O
(	O
p	O
->	O
bst_link	O
[	O
1	int
]	O
==	O
NULL	O
)	O
{	O
q	O
=	O
p	O
;	O
p	O
=	O
p	O
->	O
bst_link	O
[	O
0	int
]	O
;	O
}	O
else	O
{	O
struct	O
bst_node	O
*	O
r	O
=	O
p	O
->	O
bst_link	O
[	O
1	int
]	O
;	O
p	O
->	O
bst_link	O
[	O
1	int
]	O
=	O
r	O
->	O
bst_link	O
[	O
0	int
]	O
;	O
r	O
->	O
bst_link	O
[	O
0	int
]	O
=	O
p	O
;	O
p	O
=	O
r	O
;	O
q	O
->	O
bst_link	O
[	O
0	int
]	O
=	O
r	O
;	O
}	O
}	O
static	O
void	O
compress	O
(	O
struct	O
bst_node	O
*	O
root	O
,	O
unsigned	O
long	O
count	O
)	O
{	O
assert	O
(	O
root	O
!=	O
NULL	O
)	O
;	O
while	O
(	O
count	O
--	O
)	O
{	O
struct	O
bst_node	O
*	O
red	O
=	O
root	O
->	O
bst_link	O
[	O
0	int
]	O
;	O
struct	O
bst_node	O
*	O
black	O
=	O
red	O
->	O
bst_link	O
[	O
0	int
]	O
;	O
root	O
->	O
bst_link	O
[	O
0	int
]	O
=	O
black	O
;	O
red	O
->	O
bst_link	O
[	O
0	int
]	O
=	O
black	O
->	O
bst_link	O
[	O
1	int
]	O
;	O
black	O
->	O
bst_link	O
[	O
1	int
]	O
=	O
red	O
;	O
root	O
=	O
black	O
;	O
}	O
}	O
static	O
void	O
vine_to_tree	O
(	O
struct	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
tree	O
)	O
{	O
unsigned	O
long	O
vine	O
;	O
unsigned	O
long	O
leaves	O
;	O
int	O
height	O
;	O
leaves	O
=	O
tree	O
->	O
bst_count	long
+	O
1	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
unsigned	O
long	O
next	O
=	O
leaves	O
&	O
(	O
leaves	O
-	O
1	int
)	O
;	O
if	O
(	O
next	O
==	O
0	int
)	O
break	O
;	O
leaves	O
=	O
next	O
;	O
}	O
leaves	O
=	O
tree	O
->	O
bst_count	long
+	O
1	int
-	O
leaves	O
;	O
compress	O
(	O
(	O
struct	O
bst_node	O
*	O
)	O
&	O
tree	O
->	O
bst_root	*(struct)
,	O
leaves	O
)	O
;	O
vine	O
=	O
tree	O
->	O
bst_count	long
-	O
leaves	O
;	O
height	O
=	O
1	int
+	O
(	O
leaves	O
>	O
0	int
)	O
;	O
while	O
(	O
vine	O
>	O
1	int
)	O
{	O
compress	O
(	O
(	O
struct	O
bst_node	O
*	O
)	O
&	O
tree	O
->	O
bst_root	*(struct)
,	O
vine	O
/	O
2	int
)	O
;	O
vine	O
/=	O
2	int
;	O
height	O
++	O
;	O
}	O
if	O
(	O
height	O
>	O
BST_MAX_HEIGHT	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"libavl: Tree too big (%lu nodes) to handle."	*(char)
,	O
(	O
unsigned	O
long	O
)	O
tree	O
->	O
bst_count	long
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	O
)	O
;	O
}	O
}	O
void	O
bst_balance	O
(	O
struct	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
tree	O
)	O
{	O
assert	O
(	O
tree	O
!=	O
NULL	O
)	O
;	O
tree_to_vine	O
(	O
tree	O
)	O
;	O
vine_to_tree	O
(	O
tree	O
)	O
;	O
tree	O
->	O
bst_generation	long
++	O
;	O
}	O
void	O
*	O
bst_malloc	(*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),long)->(*(void))
(	O
struct	O
libavl_allocator	struct(*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),long)->(*(void))),*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),*(void))->(void)))
*	O
allocator	O
,	O
size_t	long
size	O
)	O
{	O
assert	O
(	O
allocator	O
!=	O
NULL	O
&&	O
size	O
>	O
0	int
)	O
;	O
return	O
malloc	(long)->(*(void))
(	O
size	O
)	O
;	O
}	O
void	O
bst_free	(*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),*(void))->(void)
(	O
struct	O
libavl_allocator	struct(*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),long)->(*(void))),*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),*(void))->(void)))
*	O
allocator	O
,	O
void	O
*	O
block	O
)	O
{	O
assert	O
(	O
allocator	O
!=	O
NULL	O
&&	O
block	O
!=	O
NULL	O
)	O
;	O
free	(*(void))->(void)
(	O
block	O
)	O
;	O
}	O
struct	O
libavl_allocator	struct(*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),long)->(*(void))),*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),*(void))->(void)))
bst_allocator_default	struct(*((*(struct(*`,*`)),long)->(*(void))),*((*(struct(*`,*`)),*(void))->(void)))
=	O
{	O
bst_malloc	(*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),long)->(*(void))
,	O
bst_free	(*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),*(void))->(void)
}	O
;	O
void	O
(	O
bst_assert_insert	O
)	O
(	O
struct	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
table	O
,	O
void	O
*	O
item	O
)	O
{	O
void	O
*	O
*	O
p	O
=	O
bst_probe	O
(	O
table	O
,	O
item	O
)	O
;	O
assert	O
(	O
p	O
!=	O
NULL	O
&&	O
*	O
p	O
==	O
item	O
)	O
;	O
}	O
void	O
*	O
(	O
bst_assert_delete	O
)	O
(	O
struct	O
bst_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
table	O
,	O
void	O
*	O
item	O
)	O
{	O
void	O
*	O
p	O
=	O
bst_delete	O
(	O
table	O
,	O
item	O
)	O
;	O
assert	O
(	O
p	O
!=	O
NULL	O
)	O
;	O
return	O
p	O
;	O
}	O
