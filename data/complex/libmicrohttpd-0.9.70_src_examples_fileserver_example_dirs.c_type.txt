static	O
ssize_t	long
file_reader	(*(void),long,*(char),long)->(long)
(	O
void	O
*	O
cls	*(void)
,	O
uint64_t	long
pos	long
,	O
char	O
*	O
buf	*(char)
,	O
size_t	long
max	long
)	O
{	O
FILE	struct
*	O
file	*(char)
=	O
cls	*(void)
;	O
(	O
void	O
)	O
fseek	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),long,int)->(int)
(	O
file	*(char)
,	O
pos	long
,	O
SEEK_SET	int
)	O
;	O
return	O
fread	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
buf	*(char)
,	O
1	int
,	O
max	long
,	O
file	*(char)
)	O
;	O
}	O
static	O
void	O
file_free_callback	(*(void))->(void)
(	O
void	O
*	O
cls	*(void)
)	O
{	O
FILE	struct
*	O
file	*(char)
=	O
cls	*(void)
;	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
file	*(char)
)	O
;	O
}	O
static	O
void	O
dir_free_callback	(*(void))->(void)
(	O
void	O
*	O
cls	*(void)
)	O
{	O
DIR	struct
*	O
dir	*(struct)
=	O
cls	*(void)
;	O
if	O
(	O
dir	*(struct)
!=	O
NULL	O
)	O
closedir	(*(struct))->(int)
(	O
dir	*(struct)
)	O
;	O
}	O
static	O
ssize_t	long
dir_reader	(*(void),long,*(char),long)->(long)
(	O
void	O
*	O
cls	*(void)
,	O
uint64_t	long
pos	long
,	O
char	O
*	O
buf	*(char)
,	O
size_t	long
max	long
)	O
{	O
DIR	struct
*	O
dir	*(struct)
=	O
cls	*(void)
;	O
struct	O
dirent	struct(long,long,short,char,array(char))
*	O
e	*(struct(long,long,short,char,array(char)))
;	O
if	O
(	O
max	long
<	O
512	int
)	O
return	O
0	int
;	O
(	O
void	O
)	O
pos	long
;	O
do	O
{	O
e	*(struct(long,long,short,char,array(char)))
=	O
readdir	(*(struct))->(*(struct(long,long,short,char,array(char))))
(	O
dir	*(struct)
)	O
;	O
if	O
(	O
e	*(struct(long,long,short,char,array(char)))
==	O
NULL	O
)	O
return	O
MHD_CONTENT_READER_END_OF_STREAM	O
;	O
}	O
while	O
(	O
e	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
[	O
0	int
]	O
==	O
'.'	O
)	O
;	O
return	O
snprintf	(*(char),long,*(char))->(int)
(	O
buf	*(char)
,	O
max	long
,	O
"<a href=\"/%s\">%s</a><br>"	*(char)
,	O
e	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
,	O
e	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
)	O
;	O
}	O
static	O
int	O
ahc_echo	(*(void),*(struct),*(char),*(char),*(char),*(char),*(long),*(*(void)))->(int)
(	O
void	O
*	O
cls	*(void)
,	O
struct	O
MHD_Connection	O
*	O
connection	*(struct)
,	O
const	O
char	O
*	O
url	*(char)
,	O
const	O
char	O
*	O
method	*(char)
,	O
const	O
char	O
*	O
version	*(char)
,	O
const	O
char	O
*	O
upload_data	*(char)
,	O
size_t	long
*	O
upload_data_size	*(long)
,	O
void	O
*	O
*	O
ptr	*(void)
)	O
{	O
static	O
int	O
aptr	int
;	O
struct	O
MHD_Response	O
*	O
response	*(struct)
;	O
int	O
ret	int
;	O
FILE	struct
*	O
file	*(char)
;	O
int	O
fd	int
;	O
DIR	struct
*	O
dir	*(struct)
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
buf	*(char)
;	O
char	O
emsg	array(char)
[	O
1024	int
]	O
;	O
(	O
void	O
)	O
cls	*(void)
;	O
(	O
void	O
)	O
version	*(char)
;	O
(	O
void	O
)	O
upload_data	*(char)
;	O
(	O
void	O
)	O
upload_data_size	*(long)
;	O
if	O
(	O
0	int
!=	O
strcmp	(*(char),*(char))->(int)
(	O
method	*(char)
,	O
MHD_HTTP_METHOD_GET	*(char)
)	O
)	O
return	O
MHD_NO	int
;	O
if	O
(	O
&	O
aptr	int
!=	O
*	O
ptr	*(void)
)	O
{	O
*	O
ptr	*(void)
=	O
&	O
aptr	int
;	O
return	O
MHD_YES	int
;	O
}	O
*	O
ptr	*(void)
=	O
NULL	O
;	O
file	*(char)
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
&	O
url	*(char)
[	O
1	int
]	O
,	O
"rb"	*(char)
)	O
;	O
if	O
(	O
NULL	O
!=	O
file	*(char)
)	O
{	O
fd	int
=	O
fileno	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
file	*(char)
)	O
;	O
if	O
(	O
-	O
1	int
==	O
fd	int
)	O
{	O
(	O
void	O
)	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
file	*(char)
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
if	O
(	O
(	O
0	int
!=	O
fstat	(int,*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
fd	int
,	O
&	O
buf	*(char)
)	O
)	O
||	O
(	O
!	O
S_ISREG	O
(	O
buf	*(char)
.	O
st_mode	int
)	O
)	O
)	O
{	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
file	*(char)
)	O
;	O
file	*(char)
=	O
NULL	O
;	O
}	O
}	O
if	O
(	O
NULL	O
==	O
file	*(char)
)	O
{	O
dir	*(struct)
=	O
opendir	(*(char))->(*(struct))
(	O
"."	*(char)
)	O
;	O
if	O
(	O
NULL	O
==	O
dir	*(struct)
)	O
{	O
snprintf	(*(char),long,*(char))->(int)
(	O
emsg	array(char)
,	O
sizeof	O
(	O
emsg	array(char)
)	O
,	O
"Failed to open directory `.': %s\n"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
response	*(struct)
=	O
MHD_create_response_from_buffer	(long,*(void),enum(int,int,int))->(*(struct))
(	O
strlen	(*(char))->(long)
(	O
emsg	array(char)
)	O
,	O
emsg	array(char)
,	O
MHD_RESPMEM_MUST_COPY	int
)	O
;	O
if	O
(	O
NULL	O
==	O
response	*(struct)
)	O
return	O
MHD_NO	int
;	O
ret	int
=	O
MHD_queue_response	(*(struct),int,*(struct))->(int)
(	O
connection	*(struct)
,	O
MHD_HTTP_SERVICE_UNAVAILABLE	int
,	O
response	*(struct)
)	O
;	O
MHD_destroy_response	(*(struct))->(void)
(	O
response	*(struct)
)	O
;	O
}	O
else	O
{	O
response	*(struct)
=	O
MHD_create_response_from_callback	(long,long,*((*(void),long,*(char),long)->(long)),*(void),*((*(void))->(void)))->(*(struct))
(	O
MHD_SIZE_UNKNOWN	O
,	O
32	int
*	O
1024	int
,	O
&	O
dir_reader	(*(void),long,*(char),long)->(long)
,	O
dir	*(struct)
,	O
&	O
dir_free_callback	(*(void))->(void)
)	O
;	O
if	O
(	O
NULL	O
==	O
response	*(struct)
)	O
{	O
closedir	(*(struct))->(int)
(	O
dir	*(struct)
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
ret	int
=	O
MHD_queue_response	(*(struct),int,*(struct))->(int)
(	O
connection	*(struct)
,	O
MHD_HTTP_OK	int
,	O
response	*(struct)
)	O
;	O
MHD_destroy_response	(*(struct))->(void)
(	O
response	*(struct)
)	O
;	O
}	O
}	O
else	O
{	O
response	*(struct)
=	O
MHD_create_response_from_callback	(long,long,*((*(void),long,*(char),long)->(long)),*(void),*((*(void))->(void)))->(*(struct))
(	O
buf	*(char)
.	O
st_size	long
,	O
32	int
*	O
1024	int
,	O
&	O
file_reader	(*(void),long,*(char),long)->(long)
,	O
file	*(char)
,	O
&	O
file_free_callback	(*(void))->(void)
)	O
;	O
if	O
(	O
NULL	O
==	O
response	*(struct)
)	O
{	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
file	*(char)
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
ret	int
=	O
MHD_queue_response	(*(struct),int,*(struct))->(int)
(	O
connection	*(struct)
,	O
MHD_HTTP_OK	int
,	O
response	*(struct)
)	O
;	O
MHD_destroy_response	(*(struct))->(void)
(	O
response	*(struct)
)	O
;	O
}	O
return	O
ret	int
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
const	O
*	O
argv	*(*(char))
)	O
{	O
struct	O
MHD_Daemon	O
*	O
d	*(struct)
;	O
if	O
(	O
argc	int
!=	O
2	int
)	O
{	O
printf	(*(char))->(int)
(	O
"%s PORT\n"	*(char)
,	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
return	O
1	int
;	O
}	O
d	*(struct)
=	O
MHD_start_daemon	(int,short,*((*(void),*(struct(short,array(char))),int)->(int)),*(void),*((*(void),*(struct),*(char),*(char),*(char),*(char),*(long),*(*(void)))->(int)),*(void))->(*(struct))
(	O
MHD_USE_THREAD_PER_CONNECTION	int
|	O
MHD_USE_INTERNAL_POLLING_THREAD	int
|	O
MHD_USE_ERROR_LOG	int
,	O
atoi	(*(char))->(int)
(	O
argv	*(*(char))
[	O
1	int
]	O
)	O
,	O
NULL	O
,	O
NULL	O
,	O
&	O
ahc_echo	(*(void),*(struct),*(char),*(char),*(char),*(char),*(long),*(*(void)))->(int)
,	O
PAGE	*(char)
,	O
MHD_OPTION_END	int
)	O
;	O
if	O
(	O
NULL	O
==	O
d	*(struct)
)	O
return	O
1	int
;	O
(	O
void	O
)	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
MHD_stop_daemon	(*(struct))->(void)
(	O
d	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
