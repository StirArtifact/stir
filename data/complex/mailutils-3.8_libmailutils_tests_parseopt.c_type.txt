char	O
*	O
file_name	*(char)
;	O
char	O
*	O
opt_value	*(char)
=	O
"initial"	*(char)
;	O
char	O
*	O
find_value	*(char)
;	O
int	O
jobs	int
=	O
0	int
;	O
int	O
x_option	int
;	O
int	O
a_option	int
;	O
int	O
headers_option	int
=	O
1	int
;	O
int	O
d_option	int
;	O
int	O
debug_level_value	int
;	O
char	O
*	O
debug_info_value	*(char)
;	O
struct	O
mu_option	struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)),*(char))
group_a	array(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct(int,*`,long,*`,int,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,int,*`,int,int,int,long,*`)),*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`)),*(char))->(void)),*(char)))
[	O
]	O
=	O
{	O
MU_OPTION_GROUP	O
(	O
"Group A"	*(char)
)	O
,	O
{	O
"file"	*(char)
,	O
'f'	O
,	O
"FILE"	*(char)
,	O
MU_OPTION_DEFAULT	int
,	O
"set file name"	*(char)
,	O
mu_c_string	int
,	O
&	O
file_name	*(char)
}	O
,	O
{	O
"optional"	*(char)
,	O
'o'	O
,	O
"FILE"	*(char)
,	O
MU_OPTION_ARG_OPTIONAL	int
,	O
"optional argument"	*(char)
,	O
mu_c_string	int
,	O
&	O
opt_value	*(char)
}	O
,	O
{	O
NULL	O
,	O
'x'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
"short-only option"	*(char)
,	O
mu_c_incr	int
,	O
&	O
x_option	int
}	O
,	O
{	O
"all"	*(char)
,	O
'a'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
"no arguments to this one"	*(char)
,	O
mu_c_bool	int
,	O
&	O
a_option	int
}	O
,	O
{	O
"debug-all"	*(char)
,	O
0	int
,	O
NULL	O
,	O
MU_OPTION_ALIAS	int
}	O
,	O
{	O
"headers"	*(char)
,	O
0	int
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
"show headers"	*(char)
,	O
mu_c_bool	int
,	O
&	O
headers_option	int
}	O
,	O
MU_OPTION_END	O
}	O
;	O
struct	O
mu_option	struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)),*(char))
group_b	array(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct(int,*`,long,*`,int,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,int,*`,int,int,int,long,*`)),*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`)),*(char))->(void)),*(char)))
[	O
]	O
=	O
{	O
MU_OPTION_GROUP	O
(	O
"Group B"	*(char)
)	O
,	O
{	O
"debug"	*(char)
,	O
'd'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
"another option"	*(char)
,	O
mu_c_incr	int
,	O
&	O
d_option	int
}	O
,	O
{	O
"verbose"	*(char)
,	O
'v'	O
,	O
NULL	O
,	O
MU_OPTION_ALIAS	int
}	O
,	O
{	O
"find"	*(char)
,	O
'F'	O
,	O
"VALUE"	*(char)
,	O
MU_OPTION_DEFAULT	int
,	O
"find VALUE"	*(char)
,	O
mu_c_string	int
,	O
&	O
find_value	*(char)
}	O
,	O
{	O
"jobs"	*(char)
,	O
'j'	O
,	O
"N"	*(char)
,	O
MU_OPTION_DEFAULT	int
,	O
"sets numeric value"	*(char)
,	O
mu_c_int	int
,	O
&	O
jobs	int
}	O
,	O
MU_OPTION_END	O
}	O
;	O
struct	O
mu_option	struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)),*(char))
group_c	array(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct(int,*`,long,*`,int,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,int,*`,int,int,int,long,*`)),*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`)),*(char))->(void)),*(char)))
[	O
]	O
=	O
{	O
MU_OPTION_GROUP	O
(	O
"Group C"	*(char)
)	O
,	O
{	O
"debug-level"	*(char)
,	O
0	int
,	O
"NUM"	*(char)
,	O
MU_OPTION_DEFAULT	int
,	O
"debug level option"	*(char)
,	O
mu_c_int	int
,	O
&	O
debug_level_value	int
}	O
,	O
{	O
"debug-info"	*(char)
,	O
0	int
,	O
"S"	*(char)
,	O
MU_OPTION_DEFAULT	int
,	O
"debug information"	*(char)
,	O
mu_c_string	int
,	O
&	O
debug_info_value	*(char)
}	O
,	O
MU_OPTION_END	O
}	O
;	O
struct	O
mu_option	struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)),*(char))
*	O
optv	*(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))))
[	O
]	O
=	O
{	O
group_a	array(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct(int,*`,long,*`,int,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,int,*`,int,int,int,long,*`)),*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`)),*(char))->(void)),*(char)))
,	O
group_b	array(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct(int,*`,long,*`,int,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,int,*`,int,int,int,long,*`)),*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`)),*(char))->(void)),*(char)))
,	O
group_c	array(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct(int,*`,long,*`,int,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,int,*`,int,int,int,long,*`)),*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`)),*(char))->(void)),*(char)))
,	O
NULL	O
}	O
;	O
static	O
void	O
version_hook	(*(struct(int,*(*(char)),long,*(*(struct`)),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)
(	O
struct	O
mu_parseopt	struct(int,*(*(char)),long,*(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char)))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))
*	O
po	*(struct(int,*(*(char)),long,*(*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char)))
,	O
mu_stream_t	*(struct)
str	*(char)
)	O
{	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
str	*(char)
,	O
"version hook called\n"	*(char)
)	O
;	O
}	O
struct	O
parseopt_param	struct(*(char),int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*((*(struct(*(char),int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*((*`,*`,*`)->(void)))),*(char),*(void))->(void)))
{	O
char	O
*	O
name	*(char)
;	O
int	O
flag	int
;	O
mu_c_type_t	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
type	int
;	O
size_t	long
off	long
;	O
void	O
(	O
*	O
setfn	*((*(struct(*(char),int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*((*`,*`,*`)->(void)))),*(char),*(void))->(void))
)	O
(	O
struct	O
parseopt_param	struct(*(char),int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*((*(struct(*(char),int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*((*`,*`,*`)->(void)))),*(char),*(void))->(void)))
*	O
param	*(struct)
,	O
char	O
const	O
*	O
val	*(char)
,	O
void	O
*	O
target	*(void)
)	O
;	O
}	O
;	O
static	O
void	O
set_prog_args	(*(struct(*(char),int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*((*`,*`,*`)->(void)))),*(char),*(void))->(void)
(	O
struct	O
parseopt_param	struct(*(char),int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*((*(struct(*(char),int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*((*`,*`,*`)->(void)))),*(char),*(void))->(void)))
*	O
param	*(struct)
,	O
char	O
const	O
*	O
str	*(char)
,	O
void	O
*	O
target	*(void)
)	O
{	O
char	O
*	O
*	O
*	O
args_ptr	*(*(*(char)))
=	O
target	*(void)
;	O
char	O
*	O
*	O
args	*(long)
;	O
char	O
*	O
p	*(char)
;	O
size_t	long
size	long
,	O
i	long
;	O
size	long
=	O
1	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
str	*(char)
[	O
i	long
]	O
;	O
i	long
++	O
)	O
if	O
(	O
str	*(char)
[	O
i	long
]	O
==	O
'|'	O
)	O
size	long
++	O
;	O
args	*(long)
=	O
mu_calloc	(long,long)->(*(void))
(	O
size	long
+	O
1	int
,	O
sizeof	O
(	O
args	*(long)
[	O
0	int
]	O
)	O
)	O
;	O
i	long
=	O
0	int
;	O
while	O
(	O
1	int
)	O
{	O
size_t	long
len	long
=	O
strcspn	(*(char),*(char))->(long)
(	O
str	*(char)
,	O
"|"	*(char)
)	O
;	O
p	*(char)
=	O
mu_alloc	(long)->(*(void))
(	O
len	long
+	O
1	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
p	*(char)
,	O
str	*(char)
,	O
len	long
)	O
;	O
p	*(char)
[	O
len	long
]	O
=	O
0	int
;	O
args	*(long)
[	O
i	long
++	O
]	O
=	O
p	*(char)
;	O
str	*(char)
+=	O
len	long
;	O
if	O
(	O
str	*(char)
[	O
0	int
]	O
)	O
++	O
str	*(char)
;	O
else	O
break	O
;	O
}	O
args	*(long)
[	O
i	long
]	O
=	O
NULL	O
;	O
*	O
args_ptr	*(*(*(char)))
=	O
args	*(long)
;	O
}	O
static	O
struct	O
parseopt_param	struct(*(char),int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*((*(struct(*(char),int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*((*`,*`,*`)->(void)))),*(char),*(void))->(void)))
parseopt_param	struct(*(char),int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*((*(struct(*(char),int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*((*`,*`,*`)->(void)))),*(char),*(void))->(void)))
[	O
]	O
=	O
{	O
{	O
"MU_PARSEOPT_ARGV0"	*(char)
,	O
MU_PARSEOPT_ARGV0	int
,	O
mu_c_void	int
}	O
,	O
{	O
"MU_PARSEOPT_IGNORE_ERRORS"	*(char)
,	O
MU_PARSEOPT_IGNORE_ERRORS	int
,	O
mu_c_void	int
}	O
,	O
{	O
"MU_PARSEOPT_IN_ORDER"	*(char)
,	O
MU_PARSEOPT_IN_ORDER	int
,	O
mu_c_void	int
}	O
,	O
{	O
"MU_PARSEOPT_NO_STDOPT"	*(char)
,	O
MU_PARSEOPT_NO_STDOPT	int
,	O
mu_c_void	int
}	O
,	O
{	O
"MU_PARSEOPT_NO_ERREXIT"	*(char)
,	O
MU_PARSEOPT_NO_ERREXIT	int
,	O
mu_c_void	int
}	O
,	O
{	O
"MU_PARSEOPT_IMMEDIATE"	*(char)
,	O
MU_PARSEOPT_IMMEDIATE	int
,	O
mu_c_void	int
}	O
,	O
{	O
"MU_PARSEOPT_NO_SORT"	*(char)
,	O
MU_PARSEOPT_NO_SORT	int
,	O
mu_c_void	int
}	O
,	O
{	O
"MU_PARSEOPT_PROG_NAME"	*(char)
,	O
MU_PARSEOPT_PROG_NAME	int
,	O
mu_c_string	int
,	O
mu_offsetof	O
(	O
struct	O
mu_parseopt	struct(int,*(*(char)),long,*(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char)))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))
,	O
po_prog_name	*(char)
)	O
}	O
,	O
{	O
"MU_PARSEOPT_PROG_DOC"	*(char)
,	O
MU_PARSEOPT_PROG_DOC	int
,	O
mu_c_string	int
,	O
mu_offsetof	O
(	O
struct	O
mu_parseopt	struct(int,*(*(char)),long,*(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char)))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))
,	O
po_prog_doc	*(char)
)	O
}	O
,	O
{	O
"MU_PARSEOPT_PROG_ARGS"	*(char)
,	O
MU_PARSEOPT_PROG_ARGS	int
,	O
mu_c_string	int
,	O
mu_offsetof	O
(	O
struct	O
mu_parseopt	struct(int,*(*(char)),long,*(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char)))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))
,	O
po_prog_args	*(*(char))
)	O
,	O
set_prog_args	(*(struct(*(char),int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*((*`,*`,*`)->(void)))),*(char),*(void))->(void)
}	O
,	O
{	O
"MU_PARSEOPT_BUG_ADDRESS"	*(char)
,	O
MU_PARSEOPT_BUG_ADDRESS	int
,	O
mu_c_string	int
,	O
mu_offsetof	O
(	O
struct	O
mu_parseopt	struct(int,*(*(char)),long,*(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char)))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))
,	O
po_bug_address	*(char)
)	O
}	O
,	O
{	O
"MU_PARSEOPT_PACKAGE_NAME"	*(char)
,	O
MU_PARSEOPT_PACKAGE_NAME	int
,	O
mu_c_string	int
,	O
mu_offsetof	O
(	O
struct	O
mu_parseopt	struct(int,*(*(char)),long,*(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char)))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))
,	O
po_package_name	*(char)
)	O
}	O
,	O
{	O
"MU_PARSEOPT_PACKAGE_URL"	*(char)
,	O
MU_PARSEOPT_PACKAGE_URL	int
,	O
mu_c_string	int
,	O
mu_offsetof	O
(	O
struct	O
mu_parseopt	struct(int,*(*(char)),long,*(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char)))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))
,	O
po_package_url	*(char)
)	O
}	O
,	O
{	O
"MU_PARSEOPT_EXTRA_INFO"	*(char)
,	O
MU_PARSEOPT_EXTRA_INFO	int
,	O
mu_c_string	int
,	O
mu_offsetof	O
(	O
struct	O
mu_parseopt	struct(int,*(*(char)),long,*(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char)))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))
,	O
po_extra_info	*(char)
)	O
}	O
,	O
{	O
"MU_PARSEOPT_EXIT_ERROR"	*(char)
,	O
MU_PARSEOPT_EXIT_ERROR	int
,	O
mu_c_int	int
,	O
mu_offsetof	O
(	O
struct	O
mu_parseopt	struct(int,*(*(char)),long,*(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char)))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))
,	O
po_exit_error	int
)	O
}	O
,	O
{	O
"MU_PARSEOPT_VERSION_HOOK"	*(char)
,	O
MU_PARSEOPT_VERSION_HOOK	int
,	O
mu_c_void	int
}	O
,	O
{	O
"MU_PARSEOPT_SINGLE_DASH"	*(char)
,	O
MU_PARSEOPT_SINGLE_DASH	int
,	O
mu_c_void	int
}	O
,	O
{	O
"MU_PARSEOPT_NEGATION"	*(char)
,	O
MU_PARSEOPT_NEGATION	int
,	O
mu_c_string	int
,	O
mu_offsetof	O
(	O
struct	O
mu_parseopt	struct(int,*(*(char)),long,*(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char)))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))
,	O
po_negation	*(char)
)	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
argv	*(*(char))
[	O
]	O
)	O
{	O
struct	O
mu_parseopt	struct(int,*(*(char)),long,*(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char)))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))
po	*(struct(int,*(*(char)),long,*(*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char)))
;	O
int	O
rc	int
;	O
int	O
i	long
;	O
int	O
flags	int
=	O
MU_PARSEOPT_DEFAULT	int
;	O
mu_stdstream_setup	(int)->(void)
(	O
MU_STDSTREAM_RESET_NONE	int
)	O
;	O
if	O
(	O
getenv	(*(char))->(*(char))
(	O
"MU_PARSEOPT_DEFAULT"	*(char)
)	O
)	O
flags	int
=	O
MU_PARSEOPT_DEFAULT	int
;	O
else	O
{	O
struct	O
parseopt_param	struct(*(char),int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*((*(struct(*(char),int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*((*`,*`,*`)->(void)))),*(char),*(void))->(void)))
*	O
param	*(struct)
;	O
for	O
(	O
param	*(struct)
=	O
parseopt_param	struct(*(char),int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*((*(struct(*(char),int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*((*`,*`,*`)->(void)))),*(char),*(void))->(void)))
;	O
param	*(struct)
->	O
name	*(char)
;	O
param	*(struct)
++	O
)	O
{	O
char	O
*	O
val	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
param	*(struct)
->	O
name	*(char)
)	O
;	O
if	O
(	O
val	*(char)
)	O
{	O
flags	int
|=	O
param	*(struct)
->	O
flag	int
;	O
if	O
(	O
param	*(struct)
->	O
setfn	*((*(struct(*(char),int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*((*`,*`,*`)->(void)))),*(char),*(void))->(void))
)	O
{	O
param	*(struct)
->	O
setfn	*((*(struct(*(char),int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*((*`,*`,*`)->(void)))),*(char),*(void))->(void))
(	O
param	*(struct)
,	O
val	*(char)
,	O
(	O
(	O
char	O
*	O
)	O
&	O
po	*(struct(int,*(*(char)),long,*(*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char)))
+	O
param	*(struct)
->	O
off	long
)	O
)	O
;	O
}	O
else	O
if	O
(	O
param	*(struct)
->	O
type	int
!=	O
mu_c_void	int
)	O
{	O
char	O
*	O
errmsg	*(*(char))
;	O
int	O
rc	int
=	O
mu_str_to_c	(*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*(*(char)))->(int)
(	O
val	*(char)
,	O
param	*(struct)
->	O
type	int
,	O
(	O
(	O
char	O
*	O
)	O
&	O
po	*(struct(int,*(*(char)),long,*(*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char)))
+	O
param	*(struct)
->	O
off	long
)	O
,	O
&	O
errmsg	*(*(char))
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"envvar %s: %s\n"	*(char)
,	O
param	*(struct)
->	O
name	*(char)
,	O
errmsg	*(*(char))
?	O
errmsg	*(*(char))
:	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
}	O
}	O
}	O
}	O
if	O
(	O
flags	int
&	O
MU_PARSEOPT_VERSION_HOOK	int
)	O
po	*(struct(int,*(*(char)),long,*(*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char)))
.	O
po_version_hook	*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void))
=	O
version_hook	(*(struct(int,*(*(char)),long,*(*(struct`)),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)
;	O
}	O
rc	int
=	O
mu_parseopt	struct(int,*(*(char)),long,*(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char)))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))
(	O
&	O
po	*(struct(int,*(*(char)),long,*(*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char)))
,	O
argc	long
,	O
argv	*(*(char))
,	O
optv	*(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))))
,	O
flags	int
)	O
;	O
printf	(*(char))->(int)
(	O
"rc=%d\n"	*(char)
,	O
rc	int
)	O
;	O
mu_parseopt_apply	(*(struct(int,*(*(char)),long,*(*(struct`)),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))))->(int)
(	O
&	O
po	*(struct(int,*(*(char)),long,*(*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char)))
)	O
;	O
argc	long
-=	O
po	*(struct(int,*(*(char)),long,*(*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char)))
.	O
po_arg_start	int
;	O
argv	*(*(char))
+=	O
po	*(struct(int,*(*(char)),long,*(*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char)))
.	O
po_arg_start	int
;	O
mu_parseopt_free	(*(struct(int,*(*(char)),long,*(*(struct`)),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))))->(void)
(	O
&	O
po	*(struct(int,*(*(char)),long,*(*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char)))
)	O
;	O
printf	(*(char))->(int)
(	O
"file_name=%s\n"	*(char)
,	O
S	O
(	O
file_name	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"opt_value=%s\n"	*(char)
,	O
S	O
(	O
opt_value	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"x_option=%d\n"	*(char)
,	O
x_option	int
)	O
;	O
printf	(*(char))->(int)
(	O
"a_option=%d\n"	*(char)
,	O
a_option	int
)	O
;	O
printf	(*(char))->(int)
(	O
"headers_option=%d\n"	*(char)
,	O
headers_option	int
)	O
;	O
printf	(*(char))->(int)
(	O
"find_value=%s\n"	*(char)
,	O
S	O
(	O
find_value	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"d_option=%d\n"	*(char)
,	O
d_option	int
)	O
;	O
printf	(*(char))->(int)
(	O
"jobs=%d\n"	*(char)
,	O
jobs	int
)	O
;	O
printf	(*(char))->(int)
(	O
"debug_level_value=%d\n"	*(char)
,	O
debug_level_value	int
)	O
;	O
printf	(*(char))->(int)
(	O
"debug_info_value=%s\n"	*(char)
,	O
S	O
(	O
debug_info_value	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"argv:\n"	*(char)
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
printf	(*(char))->(int)
(	O
"%d: %s\n"	*(char)
,	O
i	long
,	O
argv	*(*(char))
[	O
i	long
]	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
