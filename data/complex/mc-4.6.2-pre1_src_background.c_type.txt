enum	O
ReturnType	enum(int,int)
{	O
Return_String	int
,	O
Return_Integer	int
}	O
;	O
int	O
we_are_background	int
=	O
0	int
;	O
static	O
int	O
parent_fd	int
;	O
struct	O
TaskList	struct(int,int,int,*(char),*(struct(int,int,int,*(char),*(struct(int,int,int,*(char),*(struct`))))))
*	O
task_list	*(struct(int,int,int,*(char),*(struct(int,int,int,*(char),*(struct`)))))
=	O
NULL	O
;	O
static	O
int	O
background_attention	(int,*(void))->(int)
(	O
int	O
fd	int
,	O
void	O
*	O
closure	*(void)
)	O
;	O
static	O
void	O
register_task_running	(*(struct(enum(int,int,int),double,long,long,int,long,double,int,int,long,int,int,*((*`,*`)->(int)),int,int,int,int,*(char),struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)),int,int,int,*(void))),int,int,*(char))->(void)
(	O
FileOpContext	struct(enum(int,int,int),double,long,long,int,long,double,int,int,long,int,int,*((*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)),int,int,int,int,*(char),struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)),int,int,int,*(void))
*	O
ctx	*(struct)
,	O
pid_t	int
pid	int
,	O
int	O
fd	int
,	O
char	O
*	O
info	*(char)
)	O
{	O
TaskList	struct(int,int,int,*(char),*(struct(int,int,int,*(char),*(struct(int,int,int,*(char),*(struct`))))))
*	O
new	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
;	O
new	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
=	O
g_new	O
(	O
TaskList	struct(int,int,int,*(char),*(struct(int,int,int,*(char),*(struct(int,int,int,*(char),*(struct`))))))
,	O
1	int
)	O
;	O
new	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
pid	int
=	O
pid	int
;	O
new	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
info	*(char)
=	O
info	*(char)
;	O
new	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
state	*(int)
=	O
Task_Running	int
;	O
new	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
=	O
task_list	*(struct(int,int,int,*(char),*(struct(int,int,int,*(char),*(struct`)))))
;	O
new	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
fd	int
=	O
fd	int
;	O
task_list	*(struct(int,int,int,*(char),*(struct(int,int,int,*(char),*(struct`)))))
=	O
new	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
;	O
add_select_channel	(int,*((int,*(void))->(int)),*(void))->(void)
(	O
fd	int
,	O
background_attention	(int,*(void))->(int)
,	O
ctx	*(struct)
)	O
;	O
}	O
void	O
unregister_task_running	(int,int)->(void)
(	O
pid_t	int
pid	int
,	O
int	O
fd	int
)	O
{	O
TaskList	struct(int,int,int,*(char),*(struct(int,int,int,*(char),*(struct(int,int,int,*(char),*(struct`))))))
*	O
p	*(void)
=	O
task_list	*(struct(int,int,int,*(char),*(struct(int,int,int,*(char),*(struct`)))))
;	O
TaskList	struct(int,int,int,*(char),*(struct(int,int,int,*(char),*(struct(int,int,int,*(char),*(struct`))))))
*	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
=	O
0	int
;	O
while	O
(	O
p	*(void)
)	O
{	O
if	O
(	O
p	*(void)
->	O
pid	int
==	O
pid	int
)	O
{	O
if	O
(	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
)	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
=	O
p	*(void)
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
else	O
task_list	*(struct(int,int,int,*(char),*(struct(int,int,int,*(char),*(struct`)))))
=	O
p	*(void)
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
g_free	(*(void))->(void)
(	O
p	*(void)
->	O
info	*(char)
)	O
;	O
g_free	(*(void))->(void)
(	O
p	*(void)
)	O
;	O
break	O
;	O
}	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
=	O
p	*(void)
;	O
p	*(void)
=	O
p	*(void)
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
}	O
delete_select_channel	(int)->(void)
(	O
fd	int
)	O
;	O
}	O
int	O
do_background	(*(struct),*(char))->(int)
(	O
struct	O
FileOpContext	struct(enum(int,int,int),double,long,long,int,long,double,int,int,long,int,int,*((*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)),int,int,int,int,*(char),struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)),int,int,int,*(void))
*	O
ctx	*(struct)
,	O
char	O
*	O
info	*(char)
)	O
{	O
int	O
comm	array(int)
[	O
2	int
]	O
;	O
pid_t	int
pid	int
;	O
if	O
(	O
pipe	(array(int))->(int)
(	O
comm	array(int)
)	O
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
pid	int
=	O
fork	()->(int)
(	O
)	O
)	O
==	O
-	O
1	int
)	O
{	O
int	O
saved_errno	int
=	O
errno	O
;	O
(	O
void	O
)	O
close	*((*(void))->(int))
(	O
comm	array(int)
[	O
0	int
]	O
)	O
;	O
(	O
void	O
)	O
close	*((*(void))->(int))
(	O
comm	array(int)
[	O
1	int
]	O
)	O
;	O
errno	O
=	O
saved_errno	int
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
pid	int
==	O
0	int
)	O
{	O
int	O
nullfd	int
;	O
close	*((*(void))->(int))
(	O
comm	array(int)
[	O
0	int
]	O
)	O
;	O
parent_fd	int
=	O
comm	array(int)
[	O
1	int
]	O
;	O
we_are_background	int
=	O
1	int
;	O
current_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
=	O
NULL	O
;	O
close	*((*(void))->(int))
(	O
0	int
)	O
;	O
close	*((*(void))->(int))
(	O
1	int
)	O
;	O
close	*((*(void))->(int))
(	O
2	int
)	O
;	O
if	O
(	O
(	O
nullfd	int
=	O
open	(*(char),int)->(int)
(	O
"/dev/null"	*(char)
,	O
O_RDWR	int
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
while	O
(	O
dup2	(int,int)->(int)
(	O
nullfd	int
,	O
0	int
)	O
==	O
-	O
1	int
&&	O
errno	O
==	O
EINTR	int
)	O
;	O
while	O
(	O
dup2	(int,int)->(int)
(	O
nullfd	int
,	O
1	int
)	O
==	O
-	O
1	int
&&	O
errno	O
==	O
EINTR	int
)	O
;	O
while	O
(	O
dup2	(int,int)->(int)
(	O
nullfd	int
,	O
2	int
)	O
==	O
-	O
1	int
&&	O
errno	O
==	O
EINTR	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
else	O
{	O
close	*((*(void))->(int))
(	O
comm	array(int)
[	O
1	int
]	O
)	O
;	O
ctx	*(struct)
->	O
pid	int
=	O
pid	int
;	O
register_task_running	(*(struct(enum(int,int,int),double,long,long,int,long,double,int,int,long,int,int,*((*`,*`)->(int)),int,int,int,int,*(char),struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)),int,int,int,*(void))),int,int,*(char))->(void)
(	O
ctx	*(struct)
,	O
pid	int
,	O
comm	array(int)
[	O
0	int
]	O
,	O
info	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
}	O
static	O
int	O
background_attention	(int,*(void))->(int)
(	O
int	O
fd	int
,	O
void	O
*	O
closure	*(void)
)	O
{	O
FileOpContext	struct(enum(int,int,int),double,long,long,int,long,double,int,int,long,int,int,*((*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)),int,int,int,int,*(char),struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)),int,int,int,*(void))
*	O
ctx	*(struct)
;	O
int	O
have_ctx	int
;	O
void	O
*	O
routine	*(void)
;	O
int	O
argc	*(int)
,	O
i	array(int)
,	O
result	long
,	O
status	int
;	O
char	O
*	O
data	*(void)
[	O
MAXCALLARGS	int
]	O
;	O
ssize_t	long
bytes	*(struct)
;	O
enum	O
ReturnType	enum(int,int)
type	enum(int,int,int,int)
;	O
ctx	*(struct)
=	O
closure	*(void)
;	O
bytes	*(struct)
=	O
read	*((*(void),*(char),long)->(long))
(	O
fd	int
,	O
&	O
routine	*(void)
,	O
sizeof	O
(	O
routine	*(void)
)	O
)	O
;	O
if	O
(	O
bytes	*(struct)
==	O
-	O
1	int
||	O
(	O
size_t	long
)	O
bytes	*(struct)
<	O
(	O
sizeof	O
(	O
routine	*(void)
)	O
)	O
)	O
{	O
const	O
char	O
*	O
background_process_error	*(char)
=	O
_	O
(	O
" Background process error "	*(char)
)	O
;	O
unregister_task_running	(int,int)->(void)
(	O
ctx	*(struct)
->	O
pid	int
,	O
fd	int
)	O
;	O
if	O
(	O
!	O
waitpid	(int,*(int),int)->(int)
(	O
ctx	*(struct)
->	O
pid	int
,	O
&	O
status	int
,	O
WNOHANG	int
)	O
)	O
{	O
kill	(int,int)->(int)
(	O
ctx	*(struct)
->	O
pid	int
,	O
SIGTERM	int
)	O
;	O
message	*(char)
(	O
1	int
,	O
background_process_error	*(char)
,	O
_	O
(	O
" Unknown error in child "	*(char)
)	O
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
WIFEXITED	O
(	O
status	int
)	O
&&	O
(	O
WEXITSTATUS	O
(	O
status	int
)	O
==	O
0	int
)	O
)	O
return	O
0	int
;	O
message	*(char)
(	O
1	int
,	O
background_process_error	*(char)
,	O
_	O
(	O
" Child died unexpectedly "	*(char)
)	O
)	O
;	O
return	O
0	int
;	O
}	O
read	*((*(void),*(char),long)->(long))
(	O
fd	int
,	O
&	O
argc	*(int)
,	O
sizeof	O
(	O
argc	*(int)
)	O
)	O
;	O
if	O
(	O
argc	*(int)
>	O
MAXCALLARGS	int
)	O
{	O
message	*(char)
(	O
1	int
,	O
_	O
(	O
" Background protocol error "	*(char)
)	O
,	O
_	O
(	O
" Background process sent us a request for more arguments \n"	*(char)
" than we can handle. \n"	*(char)
)	O
)	O
;	O
}	O
read	*((*(void),*(char),long)->(long))
(	O
fd	int
,	O
&	O
type	enum(int,int,int,int)
,	O
sizeof	O
(	O
type	enum(int,int,int,int)
)	O
)	O
;	O
read	*((*(void),*(char),long)->(long))
(	O
fd	int
,	O
&	O
have_ctx	int
,	O
sizeof	O
(	O
have_ctx	int
)	O
)	O
;	O
if	O
(	O
have_ctx	int
)	O
read	*((*(void),*(char),long)->(long))
(	O
fd	int
,	O
ctx	*(struct)
,	O
sizeof	O
(	O
FileOpContext	struct(enum(int,int,int),double,long,long,int,long,double,int,int,long,int,int,*((*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)),int,int,int,int,*(char),struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)),int,int,int,*(void))
)	O
)	O
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
i	array(int)
<	O
argc	*(int)
;	O
i	array(int)
++	O
)	O
{	O
int	O
size	long
;	O
read	*((*(void),*(char),long)->(long))
(	O
fd	int
,	O
&	O
size	long
,	O
sizeof	O
(	O
size	long
)	O
)	O
;	O
data	*(void)
[	O
i	array(int)
]	O
=	O
g_malloc	(long)->(*(void))
(	O
size	long
+	O
1	int
)	O
;	O
read	*((*(void),*(char),long)->(long))
(	O
fd	int
,	O
data	*(void)
[	O
i	array(int)
]	O
,	O
size	long
)	O
;	O
data	*(void)
[	O
i	array(int)
]	O
[	O
size	long
]	O
=	O
0	int
;	O
}	O
if	O
(	O
type	enum(int,int,int,int)
==	O
Return_Integer	int
)	O
{	O
if	O
(	O
!	O
have_ctx	int
)	O
switch	O
(	O
argc	*(int)
)	O
{	O
case	O
1	int
:	O
result	long
=	O
(	O
*	O
(	O
int	O
(	O
*	O
)	O
(	O
int	O
,	O
char	O
*	O
)	O
)	O
routine	*(void)
)	O
(	O
Background	int
,	O
data	*(void)
[	O
0	int
]	O
)	O
;	O
break	O
;	O
case	O
2	int
:	O
result	long
=	O
(	O
*	O
(	O
int	O
(	O
*	O
)	O
(	O
int	O
,	O
char	O
*	O
,	O
char	O
*	O
)	O
)	O
routine	*(void)
)	O
(	O
Background	int
,	O
data	*(void)
[	O
0	int
]	O
,	O
data	*(void)
[	O
1	int
]	O
)	O
;	O
break	O
;	O
case	O
3	int
:	O
result	long
=	O
(	O
*	O
(	O
int	O
(	O
*	O
)	O
(	O
int	O
,	O
char	O
*	O
,	O
char	O
*	O
,	O
char	O
*	O
)	O
)	O
routine	*(void)
)	O
(	O
Background	int
,	O
data	*(void)
[	O
0	int
]	O
,	O
data	*(void)
[	O
1	int
]	O
,	O
data	*(void)
[	O
2	int
]	O
)	O
;	O
break	O
;	O
case	O
4	int
:	O
result	long
=	O
(	O
*	O
(	O
int	O
(	O
*	O
)	O
(	O
int	O
,	O
char	O
*	O
,	O
char	O
*	O
,	O
char	O
*	O
,	O
char	O
*	O
)	O
)	O
routine	*(void)
)	O
(	O
Background	int
,	O
data	*(void)
[	O
0	int
]	O
,	O
data	*(void)
[	O
1	int
]	O
,	O
data	*(void)
[	O
2	int
]	O
,	O
data	*(void)
[	O
3	int
]	O
)	O
;	O
break	O
;	O
}	O
else	O
switch	O
(	O
argc	*(int)
)	O
{	O
case	O
1	int
:	O
result	long
=	O
(	O
*	O
(	O
int	O
(	O
*	O
)	O
(	O
FileOpContext	struct(enum(int,int,int),double,long,long,int,long,double,int,int,long,int,int,*((*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)),int,int,int,int,*(char),struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)),int,int,int,*(void))
*	O
,	O
int	O
,	O
char	O
*	O
)	O
)	O
routine	*(void)
)	O
(	O
ctx	*(struct)
,	O
Background	int
,	O
data	*(void)
[	O
0	int
]	O
)	O
;	O
break	O
;	O
case	O
2	int
:	O
result	long
=	O
(	O
*	O
(	O
int	O
(	O
*	O
)	O
(	O
FileOpContext	struct(enum(int,int,int),double,long,long,int,long,double,int,int,long,int,int,*((*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)),int,int,int,int,*(char),struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)),int,int,int,*(void))
*	O
,	O
int	O
,	O
char	O
*	O
,	O
char	O
*	O
)	O
)	O
routine	*(void)
)	O
(	O
ctx	*(struct)
,	O
Background	int
,	O
data	*(void)
[	O
0	int
]	O
,	O
data	*(void)
[	O
1	int
]	O
)	O
;	O
break	O
;	O
case	O
3	int
:	O
result	long
=	O
(	O
*	O
(	O
int	O
(	O
*	O
)	O
(	O
FileOpContext	struct(enum(int,int,int),double,long,long,int,long,double,int,int,long,int,int,*((*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)),int,int,int,int,*(char),struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)),int,int,int,*(void))
*	O
,	O
int	O
,	O
char	O
*	O
,	O
char	O
*	O
,	O
char	O
*	O
)	O
)	O
routine	*(void)
)	O
(	O
ctx	*(struct)
,	O
Background	int
,	O
data	*(void)
[	O
0	int
]	O
,	O
data	*(void)
[	O
1	int
]	O
,	O
data	*(void)
[	O
2	int
]	O
)	O
;	O
break	O
;	O
case	O
4	int
:	O
result	long
=	O
(	O
*	O
(	O
int	O
(	O
*	O
)	O
(	O
FileOpContext	struct(enum(int,int,int),double,long,long,int,long,double,int,int,long,int,int,*((*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)),int,int,int,int,*(char),struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)),int,int,int,*(void))
*	O
,	O
int	O
,	O
char	O
*	O
,	O
char	O
*	O
,	O
char	O
*	O
,	O
char	O
*	O
)	O
)	O
routine	*(void)
)	O
(	O
ctx	*(struct)
,	O
Background	int
,	O
data	*(void)
[	O
0	int
]	O
,	O
data	*(void)
[	O
1	int
]	O
,	O
data	*(void)
[	O
2	int
]	O
,	O
data	*(void)
[	O
3	int
]	O
)	O
;	O
break	O
;	O
}	O
write	*((*(void),*(char),long)->(long))
(	O
fd	int
,	O
&	O
result	long
,	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
if	O
(	O
have_ctx	int
)	O
write	*((*(void),*(char),long)->(long))
(	O
fd	int
,	O
ctx	*(struct)
,	O
sizeof	O
(	O
FileOpContext	struct(enum(int,int,int),double,long,long,int,long,double,int,int,long,int,int,*((*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)),int,int,int,int,*(char),struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)),int,int,int,*(void))
)	O
)	O
;	O
}	O
else	O
if	O
(	O
type	enum(int,int,int,int)
==	O
Return_String	int
)	O
{	O
int	O
len	int
;	O
char	O
*	O
resstr	*(char)
=	O
NULL	O
;	O
switch	O
(	O
argc	*(int)
)	O
{	O
case	O
1	int
:	O
resstr	*(char)
=	O
(	O
*	O
(	O
char	O
*	O
(	O
*	O
)	O
(	O
char	O
*	O
)	O
)	O
routine	*(void)
)	O
(	O
data	*(void)
[	O
0	int
]	O
)	O
;	O
break	O
;	O
case	O
2	int
:	O
resstr	*(char)
=	O
(	O
*	O
(	O
char	O
*	O
(	O
*	O
)	O
(	O
char	O
*	O
,	O
char	O
*	O
)	O
)	O
routine	*(void)
)	O
(	O
data	*(void)
[	O
0	int
]	O
,	O
data	*(void)
[	O
1	int
]	O
)	O
;	O
break	O
;	O
case	O
3	int
:	O
resstr	*(char)
=	O
(	O
*	O
(	O
char	O
*	O
(	O
*	O
)	O
(	O
char	O
*	O
,	O
char	O
*	O
,	O
char	O
*	O
)	O
)	O
routine	*(void)
)	O
(	O
data	*(void)
[	O
0	int
]	O
,	O
data	*(void)
[	O
1	int
]	O
,	O
data	*(void)
[	O
2	int
]	O
)	O
;	O
break	O
;	O
case	O
4	int
:	O
resstr	*(char)
=	O
(	O
*	O
(	O
char	O
*	O
(	O
*	O
)	O
(	O
char	O
*	O
,	O
char	O
*	O
,	O
char	O
*	O
,	O
char	O
*	O
)	O
)	O
routine	*(void)
)	O
(	O
data	*(void)
[	O
0	int
]	O
,	O
data	*(void)
[	O
1	int
]	O
,	O
data	*(void)
[	O
2	int
]	O
,	O
data	*(void)
[	O
3	int
]	O
)	O
;	O
break	O
;	O
default	O
:	O
g_assert_not_reached	O
(	O
)	O
;	O
}	O
if	O
(	O
resstr	*(char)
)	O
{	O
len	int
=	O
strlen	(*(char))->(long)
(	O
resstr	*(char)
)	O
;	O
write	*((*(void),*(char),long)->(long))
(	O
fd	int
,	O
&	O
len	int
,	O
sizeof	O
(	O
len	int
)	O
)	O
;	O
if	O
(	O
len	int
)	O
{	O
write	*((*(void),*(char),long)->(long))
(	O
fd	int
,	O
resstr	*(char)
,	O
len	int
)	O
;	O
g_free	(*(void))->(void)
(	O
resstr	*(char)
)	O
;	O
}	O
}	O
else	O
{	O
len	int
=	O
0	int
;	O
write	*((*(void),*(char),long)->(long))
(	O
fd	int
,	O
&	O
len	int
,	O
sizeof	O
(	O
len	int
)	O
)	O
;	O
}	O
}	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
i	array(int)
<	O
argc	*(int)
;	O
i	array(int)
++	O
)	O
g_free	(*(void))->(void)
(	O
data	*(void)
[	O
i	array(int)
]	O
)	O
;	O
do_refresh	()->(void)
(	O
)	O
;	O
mc_refresh	()->(void)
(	O
)	O
;	O
doupdate	O
(	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
parent_call_header	(*(void),int,enum(int,int),*(struct(enum(int,int,int),double,long,long,int,long,double,int,int,long,int,int,*((*`,*`)->(int)),int,int,int,int,*(char),struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)),int,int,int,*(void))))->(void)
(	O
void	O
*	O
routine	*(void)
,	O
int	O
argc	*(int)
,	O
enum	O
ReturnType	enum(int,int)
type	enum(int,int,int,int)
,	O
FileOpContext	struct(enum(int,int,int),double,long,long,int,long,double,int,int,long,int,int,*((*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)),int,int,int,int,*(char),struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)),int,int,int,*(void))
*	O
ctx	*(struct)
)	O
{	O
int	O
have_ctx	int
;	O
have_ctx	int
=	O
(	O
ctx	*(struct)
!=	O
NULL	O
)	O
;	O
write	*((*(void),*(char),long)->(long))
(	O
parent_fd	int
,	O
&	O
routine	*(void)
,	O
sizeof	O
(	O
routine	*(void)
)	O
)	O
;	O
write	*((*(void),*(char),long)->(long))
(	O
parent_fd	int
,	O
&	O
argc	*(int)
,	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
write	*((*(void),*(char),long)->(long))
(	O
parent_fd	int
,	O
&	O
type	enum(int,int,int,int)
,	O
sizeof	O
(	O
type	enum(int,int,int,int)
)	O
)	O
;	O
write	*((*(void),*(char),long)->(long))
(	O
parent_fd	int
,	O
&	O
have_ctx	int
,	O
sizeof	O
(	O
have_ctx	int
)	O
)	O
;	O
if	O
(	O
have_ctx	int
)	O
write	*((*(void),*(char),long)->(long))
(	O
parent_fd	int
,	O
ctx	*(struct)
,	O
sizeof	O
(	O
FileOpContext	struct(enum(int,int,int),double,long,long,int,long,double,int,int,long,int,int,*((*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)),int,int,int,int,*(char),struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)),int,int,int,*(void))
)	O
)	O
;	O
}	O
int	O
parent_call	(*(void),*(struct),int)->(int)
(	O
void	O
*	O
routine	*(void)
,	O
struct	O
FileOpContext	struct(enum(int,int,int),double,long,long,int,long,double,int,int,long,int,int,*((*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)),int,int,int,int,*(char),struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)),int,int,int,*(void))
*	O
ctx	*(struct)
,	O
int	O
argc	*(int)
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
ap	array(struct(int,int,*(void),*(void)))
;	O
int	O
i	array(int)
;	O
va_start	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
argc	*(int)
)	O
;	O
parent_call_header	(*(void),int,enum(int,int),*(struct(enum(int,int,int),double,long,long,int,long,double,int,int,long,int,int,*((*`,*`)->(int)),int,int,int,int,*(char),struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)),int,int,int,*(void))))->(void)
(	O
routine	*(void)
,	O
argc	*(int)
,	O
Return_Integer	int
,	O
ctx	*(struct)
)	O
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
i	array(int)
<	O
argc	*(int)
;	O
i	array(int)
++	O
)	O
{	O
int	O
len	int
;	O
void	O
*	O
value	*(void)
;	O
len	int
=	O
va_arg	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
int	O
)	O
;	O
value	*(void)
=	O
va_arg	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
void	O
*	O
)	O
;	O
write	*((*(void),*(char),long)->(long))
(	O
parent_fd	int
,	O
&	O
len	int
,	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
write	*((*(void),*(char),long)->(long))
(	O
parent_fd	int
,	O
value	*(void)
,	O
len	int
)	O
;	O
}	O
read	*((*(void),*(char),long)->(long))
(	O
parent_fd	int
,	O
&	O
i	array(int)
,	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
if	O
(	O
ctx	*(struct)
)	O
read	*((*(void),*(char),long)->(long))
(	O
parent_fd	int
,	O
ctx	*(struct)
,	O
sizeof	O
(	O
FileOpContext	struct(enum(int,int,int),double,long,long,int,long,double,int,int,long,int,int,*((*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)),int,int,int,int,*(char),struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)),int,int,int,*(void))
)	O
)	O
;	O
return	O
i	array(int)
;	O
}	O
char	O
*	O
parent_call_string	(*(void),int)->(*(char))
(	O
void	O
*	O
routine	*(void)
,	O
int	O
argc	*(int)
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
ap	array(struct(int,int,*(void),*(void)))
;	O
char	O
*	O
str	*(char)
;	O
int	O
i	array(int)
;	O
va_start	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
argc	*(int)
)	O
;	O
parent_call_header	(*(void),int,enum(int,int),*(struct(enum(int,int,int),double,long,long,int,long,double,int,int,long,int,int,*((*`,*`)->(int)),int,int,int,int,*(char),struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),struct(int,*(int),*(int)),int,int,int,*(void))))->(void)
(	O
routine	*(void)
,	O
argc	*(int)
,	O
Return_String	int
,	O
NULL	O
)	O
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
i	array(int)
<	O
argc	*(int)
;	O
i	array(int)
++	O
)	O
{	O
int	O
len	int
;	O
void	O
*	O
value	*(void)
;	O
len	int
=	O
va_arg	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
int	O
)	O
;	O
value	*(void)
=	O
va_arg	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
void	O
*	O
)	O
;	O
write	*((*(void),*(char),long)->(long))
(	O
parent_fd	int
,	O
&	O
len	int
,	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
write	*((*(void),*(char),long)->(long))
(	O
parent_fd	int
,	O
value	*(void)
,	O
len	int
)	O
;	O
}	O
read	*((*(void),*(char),long)->(long))
(	O
parent_fd	int
,	O
&	O
i	array(int)
,	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
if	O
(	O
!	O
i	array(int)
)	O
return	O
NULL	O
;	O
str	*(char)
=	O
g_malloc	(long)->(*(void))
(	O
i	array(int)
+	O
1	int
)	O
;	O
read	*((*(void),*(char),long)->(long))
(	O
parent_fd	int
,	O
str	*(char)
,	O
i	array(int)
)	O
;	O
str	*(char)
[	O
i	array(int)
]	O
=	O
0	int
;	O
return	O
str	*(char)
;	O
}	O
