typedef	O
struct	O
{	O
const	O
char	O
*	O
hostname_file	*(char)
;	O
char	O
*	O
hostname_new	*(char)
;	O
short	O
int	O
hostname_alias	short
;	O
short	O
int	O
hostname_fqdn	short
;	O
short	O
int	O
hostname_ip_address	short
;	O
short	O
int	O
hostname_dns_domain	short
;	O
short	O
int	O
hostname_short	short
;	O
}	O
hostname_arguments	struct(*(char),*(char),short,short,short,short,short)
;	O
static	O
char	O
*	O
(	O
*	O
get_name_action	*(()->(*(char)))
)	O
(	O
void	O
)	O
=	O
NULL	O
;	O
static	O
int	O
(	O
*	O
set_name_action	*((*(char),long)->(int))
)	O
(	O
const	O
char	O
*	O
name	*(char)
,	O
size_t	long
size	long
)	O
=	O
NULL	O
;	O
const	O
char	O
args_doc	*(char)
[	O
]	O
=	O
"[NAME]"	*(char)
;	O
const	O
char	O
doc	*(char)
[	O
]	O
=	O
"Show or set the system's host name."	*(char)
;	O
const	O
char	O
*	O
program_authors	array(*(char))
[	O
]	O
=	O
{	O
"Debarshi Ray"	*(char)
,	O
NULL	O
}	O
;	O
static	O
struct	O
argp_option	struct(*(char),int,*(char),int,*(char),int)
argp_options	array(struct(*(char),int,*(char),int,*(char),int))
[	O
]	O
=	O
{	O
{	O
"aliases"	*(char)
,	O
'a'	O
,	O
NULL	O
,	O
0	int
,	O
"alias names"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"domain"	*(char)
,	O
'd'	O
,	O
NULL	O
,	O
0	int
,	O
"DNS domain name"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"file"	*(char)
,	O
'F'	O
,	O
"FILE"	*(char)
,	O
0	int
,	O
"set host name or NIS domain name from FILE"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"fqdn"	*(char)
,	O
'f'	O
,	O
NULL	O
,	O
0	int
,	O
"DNS host name or FQDN"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"long"	*(char)
,	O
'f'	O
,	O
NULL	O
,	O
OPTION_ALIAS	int
,	O
"DNS host name or FQDN"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"ip-addresses"	*(char)
,	O
'i'	O
,	O
NULL	O
,	O
0	int
,	O
"addresses for the host name"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"short"	*(char)
,	O
's'	O
,	O
NULL	O
,	O
0	int
,	O
"short host name"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"yp"	*(char)
,	O
'y'	O
,	O
NULL	O
,	O
0	int
,	O
"NIS/YP domain name"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"nis"	*(char)
,	O
0	int
,	O
NULL	O
,	O
OPTION_ALIAS	int
,	O
NULL	O
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
error_t	int
parse_opt	(int,*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))))->(int)
(	O
int	O
key	int
,	O
char	O
*	O
arg	*(char)
,	O
struct	O
argp_state	struct(*(struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct`))->(int)),*(char),*(char),*(struct(*(struct`),int,*(char),int)),*((int,*(char),*(void))->(*(char))),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(void))
*	O
state	*(struct)
)	O
{	O
hostname_arguments	struct(*(char),*(char),short,short,short,short,short)
*	O
const	O
args	*(struct(*(char),*(char),short,short,short,short,short))
=	O
(	O
hostname_arguments	struct(*(char),*(char),short,short,short,short,short)
*	O
const	O
)	O
state	*(struct)
->	O
input	*(void)
;	O
switch	O
(	O
key	int
)	O
{	O
case	O
'a'	O
:	O
get_name_action	*(()->(*(char)))
=	O
xgethostname	()->(*(char))
;	O
args	*(struct(*(char),*(char),short,short,short,short,short))
->	O
hostname_alias	short
=	O
1	int
;	O
break	O
;	O
case	O
'd'	O
:	O
get_name_action	*(()->(*(char)))
=	O
xgethostname	()->(*(char))
;	O
args	*(struct(*(char),*(char),short,short,short,short,short))
->	O
hostname_fqdn	short
=	O
1	int
;	O
args	*(struct(*(char),*(char),short,short,short,short,short))
->	O
hostname_dns_domain	short
=	O
1	int
;	O
break	O
;	O
case	O
'F'	O
:	O
set_name_action	*((*(char),long)->(int))
=	O
sethostname	(*(char),long)->(int)
;	O
args	*(struct(*(char),*(char),short,short,short,short,short))
->	O
hostname_file	*(char)
=	O
arg	*(char)
;	O
break	O
;	O
case	O
'f'	O
:	O
get_name_action	*(()->(*(char)))
=	O
xgethostname	()->(*(char))
;	O
args	*(struct(*(char),*(char),short,short,short,short,short))
->	O
hostname_fqdn	short
=	O
1	int
;	O
break	O
;	O
case	O
'i'	O
:	O
get_name_action	*(()->(*(char)))
=	O
xgethostname	()->(*(char))
;	O
args	*(struct(*(char),*(char),short,short,short,short,short))
->	O
hostname_ip_address	short
=	O
1	int
;	O
break	O
;	O
case	O
's'	O
:	O
get_name_action	*(()->(*(char)))
=	O
xgethostname	()->(*(char))
;	O
args	*(struct(*(char),*(char),short,short,short,short,short))
->	O
hostname_fqdn	short
=	O
1	int
;	O
args	*(struct(*(char),*(char),short,short,short,short,short))
->	O
hostname_short	short
=	O
1	int
;	O
break	O
;	O
case	O
'y'	O
:	O
get_name_action	*(()->(*(char)))
=	O
xgetdomainname	()->(*(char))
;	O
break	O
;	O
case	O
ARGP_KEY_ARG	int
:	O
set_name_action	*((*(char),long)->(int))
=	O
sethostname	(*(char),long)->(int)
;	O
args	*(struct(*(char),*(char),short,short,short,short,short))
->	O
hostname_new	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
arg	*(char)
)	O
;	O
if	O
(	O
args	*(struct(*(char),*(char),short,short,short,short,short))
->	O
hostname_new	*(char)
==	O
NULL	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"strdup"	*(char)
)	O
;	O
break	O
;	O
default	O
:	O
return	O
ARGP_ERR_UNKNOWN	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
struct	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
=	O
{	O
argp_options	array(struct(*(char),int,*(char),int,*(char),int))
,	O
parse_opt	(int,*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))))->(int)
,	O
args_doc	*(char)
,	O
doc	*(char)
}	O
;	O
static	O
void	O
get_name	(*(struct(*(char),*(char),short,short,short,short,short)))->(void)
(	O
const	O
hostname_arguments	struct(*(char),*(char),short,short,short,short,short)
*	O
const	O
args	*(struct(*(char),*(char),short,short,short,short,short))
)	O
;	O
static	O
void	O
set_name	(*(struct(*(char),*(char),short,short,short,short,short)))->(void)
(	O
const	O
hostname_arguments	struct(*(char),*(char),short,short,short,short,short)
*	O
const	O
args	*(struct(*(char),*(char),short,short,short,short,short))
)	O
;	O
static	O
char	O
*	O
get_aliases	(*(char))->(*(char))
(	O
const	O
char	O
*	O
const	O
host_name	*(char)
)	O
;	O
static	O
char	O
*	O
get_fqdn	(*(char))->(*(char))
(	O
const	O
char	O
*	O
const	O
host_name	*(char)
)	O
;	O
static	O
char	O
*	O
get_ip_addresses	(*(char))->(*(char))
(	O
const	O
char	O
*	O
const	O
host_name	*(char)
)	O
;	O
static	O
char	O
*	O
get_dns_domain_name	(*(char))->(*(char))
(	O
const	O
char	O
*	O
const	O
host_name	*(char)
)	O
;	O
static	O
char	O
*	O
get_short_hostname	(*(char))->(*(char))
(	O
const	O
char	O
*	O
const	O
host_name	*(char)
)	O
;	O
static	O
char	O
*	O
parse_file	(*(char))->(*(char))
(	O
const	O
char	O
*	O
const	O
file_name	*(char)
)	O
;	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	*(*(char))
[	O
]	O
)	O
{	O
hostname_arguments	struct(*(char),*(char),short,short,short,short,short)
args	*(struct(*(char),*(char),short,short,short,short,short))
;	O
set_program_name	(*(char))->(void)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
(	O
void	O
*	O
)	O
&	O
args	*(struct(*(char),*(char),short,short,short,short,short))
,	O
0	int
,	O
sizeof	O
(	O
args	*(struct(*(char),*(char),short,short,short,short,short))
)	O
)	O
;	O
iu_argp_init	O
(	O
"hostname"	*(char)
,	O
program_authors	array(*(char))
)	O
;	O
argp_parse	(*(struct(*(struct(*`,int,*`,int,*`,int)),*((int,*`,*`)->(int)),*(char),*(char),*(struct(*`,int,*`,int)),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,*(int),*(void))->(int)
(	O
&	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
,	O
argc	int
,	O
argv	*(*(char))
,	O
0	int
,	O
NULL	O
,	O
(	O
void	O
*	O
)	O
&	O
args	*(struct(*(char),*(char),short,short,short,short,short))
)	O
;	O
if	O
(	O
get_name_action	*(()->(*(char)))
==	O
NULL	O
&&	O
set_name_action	*((*(char),long)->(int))
==	O
NULL	O
)	O
get_name_action	*(()->(*(char)))
=	O
xgethostname	()->(*(char))
;	O
if	O
(	O
get_name_action	*(()->(*(char)))
==	O
xgetdomainname	()->(*(char))
||	O
get_name_action	*(()->(*(char)))
==	O
xgethostname	()->(*(char))
)	O
get_name	(*(struct(*(char),*(char),short,short,short,short,short)))->(void)
(	O
&	O
args	*(struct(*(char),*(char),short,short,short,short,short))
)	O
;	O
else	O
if	O
(	O
set_name_action	*((*(char),long)->(int))
==	O
sethostname	(*(char),long)->(int)
)	O
set_name	(*(struct(*(char),*(char),short,short,short,short,short)))->(void)
(	O
&	O
args	*(struct(*(char),*(char),short,short,short,short,short))
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
get_name	(*(struct(*(char),*(char),short,short,short,short,short)))->(void)
(	O
const	O
hostname_arguments	struct(*(char),*(char),short,short,short,short,short)
*	O
const	O
args	*(struct(*(char),*(char),short,short,short,short,short))
)	O
{	O
char	O
*	O
sname	*(char)
,	O
*	O
name	*(char)
;	O
sname	*(char)
=	O
(	O
*	O
get_name_action	*(()->(*(char)))
)	O
(	O
)	O
;	O
if	O
(	O
!	O
sname	*(char)
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"cannot determine name"	*(char)
)	O
;	O
if	O
(	O
args	*(struct(*(char),*(char),short,short,short,short,short))
->	O
hostname_alias	short
==	O
1	int
)	O
name	*(char)
=	O
get_aliases	(*(char))->(*(char))
(	O
sname	*(char)
)	O
;	O
else	O
if	O
(	O
args	*(struct(*(char),*(char),short,short,short,short,short))
->	O
hostname_fqdn	short
==	O
1	int
)	O
{	O
name	*(char)
=	O
get_fqdn	(*(char))->(*(char))
(	O
sname	*(char)
)	O
;	O
if	O
(	O
args	*(struct(*(char),*(char),short,short,short,short,short))
->	O
hostname_dns_domain	short
==	O
1	int
||	O
args	*(struct(*(char),*(char),short,short,short,short,short))
->	O
hostname_short	short
==	O
1	int
)	O
{	O
free	(*(void))->(void)
(	O
sname	*(char)
)	O
;	O
sname	*(char)
=	O
name	*(char)
;	O
name	*(char)
=	O
NULL	O
;	O
}	O
if	O
(	O
args	*(struct(*(char),*(char),short,short,short,short,short))
->	O
hostname_dns_domain	short
==	O
1	int
)	O
name	*(char)
=	O
get_dns_domain_name	(*(char))->(*(char))
(	O
sname	*(char)
)	O
;	O
else	O
if	O
(	O
args	*(struct(*(char),*(char),short,short,short,short,short))
->	O
hostname_short	short
==	O
1	int
)	O
name	*(char)
=	O
get_short_hostname	(*(char))->(*(char))
(	O
sname	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
args	*(struct(*(char),*(char),short,short,short,short,short))
->	O
hostname_ip_address	short
==	O
1	int
)	O
name	*(char)
=	O
get_ip_addresses	(*(char))->(*(char))
(	O
sname	*(char)
)	O
;	O
else	O
{	O
name	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
sname	*(char)
)	O
;	O
if	O
(	O
name	*(char)
==	O
NULL	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"strdup"	*(char)
)	O
;	O
}	O
puts	(*(char))->(int)
(	O
name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
sname	*(char)
)	O
;	O
return	O
;	O
}	O
static	O
void	O
set_name	(*(struct(*(char),*(char),short,short,short,short,short)))->(void)
(	O
const	O
hostname_arguments	struct(*(char),*(char),short,short,short,short,short)
*	O
const	O
args	*(struct(*(char),*(char),short,short,short,short,short))
)	O
{	O
char	O
*	O
hostname_new	*(char)
;	O
int	O
status	int
;	O
size_t	long
size	long
;	O
if	O
(	O
args	*(struct(*(char),*(char),short,short,short,short,short))
->	O
hostname_file	*(char)
!=	O
NULL	O
)	O
hostname_new	*(char)
=	O
parse_file	(*(char))->(*(char))
(	O
args	*(struct(*(char),*(char),short,short,short,short,short))
->	O
hostname_file	*(char)
)	O
;	O
else	O
hostname_new	*(char)
=	O
args	*(struct(*(char),*(char),short,short,short,short,short))
->	O
hostname_new	*(char)
;	O
size	long
=	O
strlen	(*(char))->(long)
(	O
hostname_new	*(char)
)	O
;	O
status	int
=	O
(	O
*	O
set_name_action	*((*(char),long)->(int))
)	O
(	O
hostname_new	*(char)
,	O
size	long
)	O
;	O
if	O
(	O
status	int
==	O
-	O
1	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"sethostname"	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
hostname_new	*(char)
)	O
;	O
return	O
;	O
}	O
static	O
char	O
*	O
get_aliases	(*(char))->(*(char))
(	O
const	O
char	O
*	O
const	O
host_name	*(char)
)	O
{	O
char	O
*	O
aliases	*(char)
;	O
unsigned	O
int	O
count	int
=	O
0	int
;	O
unsigned	O
int	O
i	int
;	O
unsigned	O
int	O
size	long
=	O
256	int
;	O
struct	O
hostent	struct(*(char),*(*(char)),int,int,*(*(char)))
*	O
ht	*(struct(*(char),*(*(char)),int,int,*(*(char))))
;	O
aliases	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
char	O
)	O
*	O
size	long
)	O
;	O
aliases	*(char)
[	O
0	int
]	O
=	O
'\0'	O
;	O
ht	*(struct(*(char),*(*(char)),int,int,*(*(char))))
=	O
gethostbyname	(*(char))->(*(struct(*(char),*(*(char)),int,int,*(*(char)))))
(	O
host_name	*(char)
)	O
;	O
if	O
(	O
ht	*(struct(*(char),*(*(char)),int,int,*(*(char))))
==	O
NULL	O
)	O
strcpy	(*(char),*(char))->(*(char))
(	O
aliases	*(char)
,	O
"(none)"	*(char)
)	O
;	O
else	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
ht	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_aliases	*(*(char))
[	O
i	int
]	O
!=	O
NULL	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
ht	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_aliases	*(*(char))
[	O
i	int
+	O
1	int
]	O
!=	O
NULL	O
)	O
count	int
++	O
;	O
count	int
+=	O
strlen	(*(char))->(long)
(	O
ht	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_aliases	*(*(char))
[	O
i	int
]	O
)	O
;	O
if	O
(	O
count	int
>=	O
size	long
)	O
{	O
size	long
*=	O
2	int
;	O
aliases	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
aliases	*(char)
,	O
size	long
)	O
;	O
}	O
strcat	(*(char),*(char))->(*(char))
(	O
aliases	*(char)
,	O
ht	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_aliases	*(*(char))
[	O
i	int
]	O
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
aliases	*(char)
,	O
" "	*(char)
)	O
;	O
}	O
}	O
return	O
aliases	*(char)
;	O
}	O
static	O
char	O
*	O
get_fqdn	(*(char))->(*(char))
(	O
const	O
char	O
*	O
const	O
host_name	*(char)
)	O
{	O
char	O
*	O
fqdn	*(char)
;	O
struct	O
hostent	struct(*(char),*(*(char)),int,int,*(*(char)))
*	O
ht	*(struct(*(char),*(*(char)),int,int,*(*(char))))
;	O
ht	*(struct(*(char),*(*(char)),int,int,*(*(char))))
=	O
gethostbyname	(*(char))->(*(struct(*(char),*(*(char)),int,int,*(*(char)))))
(	O
host_name	*(char)
)	O
;	O
if	O
(	O
ht	*(struct(*(char),*(*(char)),int,int,*(*(char))))
==	O
NULL	O
)	O
fqdn	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
"(none)"	*(char)
)	O
;	O
else	O
fqdn	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
ht	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_name	*(char)
)	O
;	O
if	O
(	O
fqdn	*(char)
==	O
NULL	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"strdup"	*(char)
)	O
;	O
return	O
fqdn	*(char)
;	O
}	O
static	O
char	O
*	O
get_ip_addresses	(*(char))->(*(char))
(	O
const	O
char	O
*	O
const	O
host_name	*(char)
)	O
{	O
char	O
address	array(char)
[	O
16	int
]	O
;	O
char	O
*	O
addresses	*(char)
;	O
unsigned	O
int	O
count	int
=	O
0	int
;	O
unsigned	O
int	O
i	int
;	O
unsigned	O
int	O
size	long
=	O
256	int
;	O
struct	O
hostent	struct(*(char),*(*(char)),int,int,*(*(char)))
*	O
ht	*(struct(*(char),*(*(char)),int,int,*(*(char))))
;	O
addresses	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
char	O
)	O
*	O
size	long
)	O
;	O
addresses	*(char)
[	O
0	int
]	O
=	O
'\0'	O
;	O
ht	*(struct(*(char),*(*(char)),int,int,*(*(char))))
=	O
gethostbyname	(*(char))->(*(struct(*(char),*(*(char)),int,int,*(*(char)))))
(	O
host_name	*(char)
)	O
;	O
if	O
(	O
ht	*(struct(*(char),*(*(char)),int,int,*(*(char))))
==	O
NULL	O
)	O
strcpy	(*(char),*(char))->(*(char))
(	O
addresses	*(char)
,	O
"(none)"	*(char)
)	O
;	O
else	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
ht	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_addr_list	*(*(char))
[	O
i	int
]	O
!=	O
NULL	O
;	O
i	int
++	O
)	O
{	O
inet_ntop	(int,*(void),*(char),int)->(*(char))
(	O
ht	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_addrtype	int
,	O
(	O
void	O
*	O
)	O
ht	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_addr_list	*(*(char))
[	O
i	int
]	O
,	O
address	array(char)
,	O
sizeof	O
(	O
address	array(char)
)	O
)	O
;	O
if	O
(	O
ht	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_addr_list	*(*(char))
[	O
i	int
+	O
1	int
]	O
!=	O
NULL	O
)	O
count	int
++	O
;	O
count	int
+=	O
strlen	(*(char))->(long)
(	O
address	array(char)
)	O
;	O
if	O
(	O
count	int
>=	O
size	long
)	O
{	O
size	long
*=	O
2	int
;	O
addresses	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
addresses	*(char)
,	O
size	long
)	O
;	O
}	O
strcat	(*(char),*(char))->(*(char))
(	O
addresses	*(char)
,	O
address	array(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
addresses	*(char)
,	O
" "	*(char)
)	O
;	O
}	O
}	O
return	O
addresses	*(char)
;	O
}	O
static	O
char	O
*	O
get_dns_domain_name	(*(char))->(*(char))
(	O
const	O
char	O
*	O
const	O
host_name	*(char)
)	O
{	O
char	O
*	O
domain_name	*(char)
;	O
const	O
char	O
*	O
pos	*(char)
;	O
pos	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
host_name	*(char)
,	O
'.'	O
)	O
;	O
if	O
(	O
pos	*(char)
==	O
NULL	O
)	O
domain_name	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
"(none)"	*(char)
)	O
;	O
else	O
domain_name	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
pos	*(char)
+	O
1	int
)	O
;	O
if	O
(	O
domain_name	*(char)
==	O
NULL	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"strdup"	*(char)
)	O
;	O
return	O
domain_name	*(char)
;	O
}	O
static	O
char	O
*	O
get_short_hostname	(*(char))->(*(char))
(	O
const	O
char	O
*	O
const	O
host_name	*(char)
)	O
{	O
size_t	long
size	long
;	O
char	O
*	O
short_hostname	*(char)
;	O
const	O
char	O
*	O
pos	*(char)
;	O
pos	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
host_name	*(char)
,	O
'.'	O
)	O
;	O
if	O
(	O
pos	*(char)
==	O
NULL	O
)	O
short_hostname	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
host_name	*(char)
)	O
;	O
else	O
{	O
size	long
=	O
pos	*(char)
-	O
host_name	*(char)
;	O
short_hostname	*(char)
=	O
strndup	(*(char),long)->(*(char))
(	O
host_name	*(char)
,	O
size	long
)	O
;	O
}	O
if	O
(	O
short_hostname	*(char)
==	O
NULL	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"strdup"	*(char)
)	O
;	O
return	O
short_hostname	*(char)
;	O
}	O
static	O
char	O
*	O
parse_file	(*(char))->(*(char))
(	O
const	O
char	O
*	O
const	O
file_name	*(char)
)	O
{	O
char	O
*	O
buffer	*(char)
=	O
NULL	O
;	O
char	O
*	O
name	*(char)
;	O
FILE	struct
*	O
file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
size_t	long
nread	long
;	O
size_t	long
size	long
=	O
0	int
;	O
file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
file_name	*(char)
,	O
"r"	*(char)
)	O
;	O
if	O
(	O
file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
==	O
NULL	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"fopen"	*(char)
)	O
;	O
do	O
{	O
nread	long
=	O
getline	(*(*(char)),*(long),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
&	O
buffer	*(char)
,	O
&	O
size	long
,	O
file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
nread	long
==	O
-	O
1	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"getline"	*(char)
)	O
;	O
if	O
(	O
buffer	*(char)
[	O
0	int
]	O
!=	O
'#'	O
)	O
{	O
name	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
char	O
)	O
*	O
nread	long
)	O
;	O
sscanf	(*(char),*(char))->(int)
(	O
buffer	*(char)
,	O
"%s"	*(char)
,	O
name	*(char)
)	O
;	O
break	O
;	O
}	O
}	O
while	O
(	O
feof	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
==	O
0	int
)	O
;	O
free	(*(void))->(void)
(	O
buffer	*(char)
)	O
;	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
return	O
name	*(char)
;	O
}	O
