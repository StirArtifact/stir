gsl_integration_workspace	struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long))
*	O
gsl_integration_workspace_alloc	(long)->(*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long))))
(	O
const	O
size_t	long
n	int
)	O
{	O
gsl_integration_workspace	struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long))
*	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
;	O
if	O
(	O
n	int
==	O
0	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"workspace length n must be positive integer"	*(char)
,	O
GSL_EDOM	int
,	O
0	int
)	O
;	O
}	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
=	O
(	O
gsl_integration_workspace	struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long))
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
gsl_integration_workspace	struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long))
)	O
)	O
;	O
if	O
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
==	O
0	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for workspace struct"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
alist	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
n	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
alist	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for alist ranges"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
blist	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
n	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
blist	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
alist	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for blist ranges"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
rlist	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
n	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
rlist	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
blist	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
alist	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for rlist ranges"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
elist	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
n	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
elist	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
rlist	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
blist	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
alist	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for elist ranges"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
order	*(long)
=	O
(	O
size_t	long
*	O
)	O
malloc	(long)->(*(void))
(	O
n	int
*	O
sizeof	O
(	O
size_t	long
)	O
)	O
;	O
if	O
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
order	*(long)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
elist	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
rlist	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
blist	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
alist	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for order ranges"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
level	*(long)
=	O
(	O
size_t	long
*	O
)	O
malloc	(long)->(*(void))
(	O
n	int
*	O
sizeof	O
(	O
size_t	long
)	O
)	O
;	O
if	O
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
level	*(long)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
order	*(long)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
elist	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
rlist	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
blist	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
alist	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for order ranges"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
size	long
=	O
0	int
;	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
limit	long
=	O
n	int
;	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
maximum_level	long
=	O
0	int
;	O
return	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
;	O
}	O
void	O
gsl_integration_workspace_free	(*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long))))->(void)
(	O
gsl_integration_workspace	struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long))
*	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
)	O
{	O
RETURN_IF_NULL	O
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
level	*(long)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
order	*(long)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
elist	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
rlist	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
blist	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
->	O
alist	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,long,long,long,*(double),*(double),*(double),*(double),*(long),*(long)))
)	O
;	O
}	O
