char	O
*	O
ATTRIBUTE_MALLOC	O
htmlescape	(*(char),int)->(*(char))
(	O
const	O
char	O
*	O
restrict	O
src	*(char)
,	O
const	O
int	O
cp	int
)	O
{	O
int	O
len	int
=	O
strlen	(*(char))->(long)
(	O
src	*(char)
)	O
+	O
10	int
;	O
char	O
*	O
dest	*(char)
,	O
*	O
d	*(char)
=	O
malloc	(long)->(*(void))
(	O
len	int
)	O
;	O
unsigned	O
char	O
*	O
s	*(char)
=	O
(	O
unsigned	O
char	O
*	O
)	O
src	*(char)
;	O
dest	*(char)
=	O
d	*(char)
;	O
while	O
(	O
*	O
s	*(char)
++	O
)	O
{	O
const	O
int	O
off	int
=	O
d	*(char)
-	O
dest	*(char)
;	O
if	O
(	O
off	int
>=	O
len	int
-	O
8	int
)	O
{	O
len	int
+=	O
10	int
;	O
dest	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
dest	*(char)
,	O
len	int
)	O
;	O
d	*(char)
=	O
dest	*(char)
+	O
off	int
;	O
}	O
switch	O
(	O
*	O
s	*(char)
)	O
{	O
case	O
'"'	O
:	O
strcat	(*(char),*(char))->(*(char))
(	O
d	*(char)
,	O
"&quot;"	*(char)
)	O
;	O
d	*(char)
+=	O
6	int
;	O
break	O
;	O
case	O
'\''	O
:	O
strcat	(*(char),*(char))->(*(char))
(	O
d	*(char)
,	O
"&#39;"	*(char)
)	O
;	O
d	*(char)
+=	O
5	int
;	O
break	O
;	O
case	O
'`'	O
:	O
strcat	(*(char),*(char))->(*(char))
(	O
d	*(char)
,	O
"&#96;"	*(char)
)	O
;	O
d	*(char)
+=	O
5	int
;	O
break	O
;	O
case	O
'&'	O
:	O
strcat	(*(char),*(char))->(*(char))
(	O
d	*(char)
,	O
"&amp;"	*(char)
)	O
;	O
d	*(char)
+=	O
5	int
;	O
break	O
;	O
case	O
'<'	O
:	O
strcat	(*(char),*(char))->(*(char))
(	O
d	*(char)
,	O
"&lt;"	*(char)
)	O
;	O
d	*(char)
+=	O
4	int
;	O
break	O
;	O
case	O
'>'	O
:	O
strcat	(*(char),*(char))->(*(char))
(	O
d	*(char)
,	O
"&gt;"	*(char)
)	O
;	O
d	*(char)
+=	O
4	int
;	O
break	O
;	O
case	O
'{'	O
:	O
strcat	(*(char),*(char))->(*(char))
(	O
d	*(char)
,	O
"&#123;"	*(char)
)	O
;	O
d	*(char)
+=	O
6	int
;	O
break	O
;	O
case	O
'}'	O
:	O
strcat	(*(char),*(char))->(*(char))
(	O
d	*(char)
,	O
"&#125;"	*(char)
)	O
;	O
d	*(char)
+=	O
6	int
;	O
break	O
;	O
default	O
:	O
if	O
(	O
*	O
s	*(char)
>=	O
127	int
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
d	*(char)
,	O
"&#x%X;"	*(char)
,	O
*	O
s	*(char)
)	O
;	O
d	*(char)
+=	O
strlen	(*(char))->(long)
(	O
d	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
*	O
s	*(char)
>=	O
20	int
)	O
*	O
d	*(char)
++	O
=	O
*	O
s	*(char)
;	O
}	O
}	O
*	O
d	*(char)
=	O
0	int
;	O
return	O
dest	*(char)
;	O
}	O
char	O
*	O
ATTRIBUTE_MALLOC	O
htmlwescape	(*(short))->(*(char))
(	O
BITCODE_TU	*(short)
wstr	*(short)
)	O
{	O
int	O
len	int
=	O
0	int
;	O
char	O
*	O
dest	*(char)
,	O
*	O
d	*(char)
;	O
BITCODE_TU	*(short)
tmp	*(short)
=	O
wstr	*(short)
;	O
BITCODE_RS	short
c	short
;	O
if	O
(	O
!	O
wstr	*(short)
)	O
return	O
NULL	O
;	O
while	O
(	O
(	O
c	short
=	O
*	O
tmp	*(short)
++	O
)	O
)	O
len	int
++	O
;	O
len	int
+=	O
16	int
;	O
d	*(char)
=	O
dest	*(char)
=	O
malloc	(long)->(*(void))
(	O
len	int
)	O
;	O
while	O
(	O
*	O
wstr	*(short)
++	O
)	O
{	O
const	O
int	O
off	int
=	O
d	*(char)
-	O
dest	*(char)
;	O
if	O
(	O
off	int
>=	O
len	int
-	O
8	int
)	O
{	O
len	int
+=	O
16	int
;	O
dest	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
dest	*(char)
,	O
len	int
)	O
;	O
d	*(char)
=	O
dest	*(char)
+	O
off	int
;	O
}	O
switch	O
(	O
*	O
wstr	*(short)
)	O
{	O
case	O
34	int
:	O
strcat	(*(char),*(char))->(*(char))
(	O
d	*(char)
,	O
"&quot;"	*(char)
)	O
;	O
d	*(char)
+=	O
6	int
;	O
break	O
;	O
case	O
39	int
:	O
strcat	(*(char),*(char))->(*(char))
(	O
d	*(char)
,	O
"&#39;"	*(char)
)	O
;	O
d	*(char)
+=	O
5	int
;	O
break	O
;	O
case	O
38	int
:	O
strcat	(*(char),*(char))->(*(char))
(	O
d	*(char)
,	O
"&amp;"	*(char)
)	O
;	O
d	*(char)
+=	O
5	int
;	O
break	O
;	O
case	O
60	int
:	O
strcat	(*(char),*(char))->(*(char))
(	O
d	*(char)
,	O
"&lt;"	*(char)
)	O
;	O
d	*(char)
+=	O
4	int
;	O
break	O
;	O
case	O
62	int
:	O
strcat	(*(char),*(char))->(*(char))
(	O
d	*(char)
,	O
"&gt;"	*(char)
)	O
;	O
d	*(char)
+=	O
4	int
;	O
break	O
;	O
case	O
96	int
:	O
strcat	(*(char),*(char))->(*(char))
(	O
d	*(char)
,	O
"&#96;"	*(char)
)	O
;	O
d	*(char)
+=	O
5	int
;	O
break	O
;	O
case	O
123	int
:	O
strcat	(*(char),*(char))->(*(char))
(	O
d	*(char)
,	O
"&#123;"	*(char)
)	O
;	O
d	*(char)
+=	O
6	int
;	O
break	O
;	O
case	O
125	int
:	O
strcat	(*(char),*(char))->(*(char))
(	O
d	*(char)
,	O
"&#125;"	*(char)
)	O
;	O
d	*(char)
+=	O
6	int
;	O
break	O
;	O
default	O
:	O
if	O
(	O
*	O
wstr	*(short)
>=	O
127	int
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
d	*(char)
,	O
"&#x%X;"	*(char)
,	O
*	O
wstr	*(short)
)	O
;	O
d	*(char)
+=	O
strlen	(*(char))->(long)
(	O
d	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
*	O
wstr	*(short)
>=	O
20	int
)	O
*	O
d	*(char)
++	O
=	O
*	O
wstr	*(short)
;	O
}	O
}	O
*	O
d	*(char)
=	O
0	int
;	O
return	O
dest	*(char)
;	O
}	O
