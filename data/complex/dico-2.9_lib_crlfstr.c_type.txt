enum	O
crlf_state	enum(int,int)
{	O
state_init	int
,	O
state_cr	int
}	O
;	O
struct	O
_crlfstr	struct(*(struct),int,enum(int,int),char)
{	O
dico_stream_t	*(struct)
transport	*(struct)
;	O
int	O
noclose	int
;	O
enum	O
crlf_state	enum(int,int)
state	*(int)
;	O
char	O
cb	char
;	O
}	O
;	O
static	O
int	O
_crlfstr_write	(*(void),*(char),long,*(long))->(int)
(	O
void	O
*	O
data	*(void)
,	O
const	O
char	O
*	O
buf	*(void)
,	O
size_t	long
size	long
,	O
size_t	long
*	O
pret	*(*(void))
)	O
{	O
struct	O
_crlfstr	struct(*(struct),int,enum(int,int),char)
*	O
s	*(char)
=	O
data	*(void)
;	O
const	O
char	O
*	O
p	*(char)
,	O
*	O
q	*(char)
;	O
for	O
(	O
p	*(char)
=	O
buf	*(void)
,	O
q	*(char)
=	O
buf	*(void)
+	O
size	long
;	O
p	*(char)
<	O
q	*(char)
;	O
p	*(char)
++	O
)	O
{	O
switch	O
(	O
*	O
p	*(char)
)	O
{	O
case	O
'\n'	O
:	O
if	O
(	O
s	*(char)
->	O
state	*(int)
==	O
state_cr	int
)	O
s	*(char)
->	O
state	*(int)
=	O
state_init	int
;	O
else	O
{	O
if	O
(	O
p	*(char)
>	O
buf	*(void)
)	O
dico_stream_write	(*(struct),*(void),long)->(int)
(	O
s	*(char)
->	O
transport	*(struct)
,	O
buf	*(void)
,	O
p	*(char)
-	O
buf	*(void)
)	O
;	O
dico_stream_write	(*(struct),*(void),long)->(int)
(	O
s	*(char)
->	O
transport	*(struct)
,	O
"\r\n"	*(char)
,	O
2	int
)	O
;	O
buf	*(void)
=	O
p	*(char)
+	O
1	int
;	O
}	O
break	O
;	O
case	O
'\r'	O
:	O
s	*(char)
->	O
state	*(int)
=	O
state_cr	int
;	O
break	O
;	O
default	O
:	O
s	*(char)
->	O
state	*(int)
=	O
state_init	int
;	O
}	O
}	O
if	O
(	O
p	*(char)
>	O
buf	*(void)
)	O
dico_stream_write	(*(struct),*(void),long)->(int)
(	O
s	*(char)
->	O
transport	*(struct)
,	O
buf	*(void)
,	O
p	*(char)
-	O
buf	*(void)
)	O
;	O
*	O
pret	*(*(void))
=	O
size	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_crlfstr_read	(*(void),*(char),long,*(long))->(int)
(	O
void	O
*	O
data	*(void)
,	O
char	O
*	O
buf	*(void)
,	O
size_t	long
size	long
,	O
size_t	long
*	O
pret	*(*(void))
)	O
{	O
struct	O
_crlfstr	struct(*(struct),int,enum(int,int),char)
*	O
s	*(char)
=	O
data	*(void)
;	O
size_t	long
sz	long
=	O
0	int
;	O
size_t	long
total	long
=	O
0	int
;	O
char	O
*	O
p	*(char)
;	O
if	O
(	O
s	*(char)
->	O
cb	char
)	O
{	O
buf	*(void)
[	O
sz	long
++	O
]	O
=	O
s	*(char)
->	O
cb	char
;	O
s	*(char)
->	O
cb	char
=	O
0	int
;	O
}	O
while	O
(	O
total	long
<	O
size	long
)	O
{	O
int	O
i	int
;	O
if	O
(	O
sz	long
==	O
0	int
)	O
{	O
int	O
rc	int
=	O
dico_stream_read	(*(struct),*(void),long,*(long))->(int)
(	O
s	*(char)
->	O
transport	*(struct)
,	O
buf	*(void)
+	O
total	long
,	O
size	long
-	O
total	long
,	O
&	O
sz	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
sz	long
==	O
0	int
)	O
break	O
;	O
}	O
p	*(char)
=	O
buf	*(void)
+	O
total	long
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
sz	long
;	O
i	int
++	O
,	O
p	*(char)
++	O
)	O
{	O
switch	O
(	O
*	O
p	*(char)
)	O
{	O
case	O
'\r'	O
:	O
if	O
(	O
s	*(char)
->	O
cb	char
)	O
buf	*(void)
[	O
total	long
++	O
]	O
=	O
s	*(char)
->	O
cb	char
;	O
s	*(char)
->	O
cb	char
=	O
'\r'	O
;	O
break	O
;	O
case	O
'\n'	O
:	O
s	*(char)
->	O
cb	char
=	O
0	int
;	O
buf	*(void)
[	O
total	long
++	O
]	O
=	O
*	O
p	*(char)
;	O
break	O
;	O
default	O
:	O
if	O
(	O
s	*(char)
->	O
cb	char
)	O
{	O
buf	*(void)
[	O
total	long
++	O
]	O
=	O
s	*(char)
->	O
cb	char
;	O
s	*(char)
->	O
cb	char
=	O
0	int
;	O
}	O
if	O
(	O
total	long
==	O
size	long
)	O
s	*(char)
->	O
cb	char
=	O
*	O
p	*(char)
;	O
else	O
buf	*(void)
[	O
total	long
++	O
]	O
=	O
*	O
p	*(char)
;	O
}	O
}	O
sz	long
=	O
0	int
;	O
}	O
*	O
pret	*(*(void))
=	O
total	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_crlfstr_destroy	(*(void))->(int)
(	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
_crlfstr	struct(*(struct),int,enum(int,int),char)
*	O
s	*(char)
=	O
data	*(void)
;	O
if	O
(	O
!	O
s	*(char)
->	O
noclose	int
)	O
dico_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
s	*(char)
->	O
transport	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_crlfstr_flush	(*(void))->(int)
(	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
_crlfstr	struct(*(struct),int,enum(int,int),char)
*	O
s	*(char)
=	O
data	*(void)
;	O
return	O
dico_stream_flush	(*(struct))->(int)
(	O
s	*(char)
->	O
transport	*(struct)
)	O
;	O
}	O
static	O
int	O
_crlfstr_close	(*(void))->(int)
(	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
_crlfstr	struct(*(struct),int,enum(int,int),char)
*	O
s	*(char)
=	O
data	*(void)
;	O
if	O
(	O
s	*(char)
->	O
noclose	int
)	O
return	O
0	int
;	O
return	O
dico_stream_close	(*(struct))->(int)
(	O
s	*(char)
->	O
transport	*(struct)
)	O
;	O
}	O
static	O
int	O
_crlfstr_ioctl	(*(void),int,*(void))->(int)
(	O
void	O
*	O
data	*(void)
,	O
int	O
code	int
,	O
void	O
*	O
call_data	*(void)
)	O
{	O
struct	O
_crlfstr	struct(*(struct),int,enum(int,int),char)
*	O
s	*(char)
=	O
data	*(void)
;	O
switch	O
(	O
code	int
)	O
{	O
case	O
DICO_IOCTL_GET_TRANSPORT	int
:	O
*	O
(	O
dico_stream_t	*(struct)
*	O
)	O
call_data	*(void)
=	O
s	*(char)
->	O
transport	*(struct)
;	O
break	O
;	O
case	O
DICO_IOCTL_SET_TRANSPORT	int
:	O
s	*(char)
->	O
transport	*(struct)
=	O
call_data	*(void)
;	O
break	O
;	O
case	O
DICO_IOCTL_BYTES_IN	int
:	O
*	O
(	O
off_t	long
*	O
)	O
call_data	*(void)
=	O
dico_stream_bytes_in	(*(struct))->(long)
(	O
s	*(char)
->	O
transport	*(struct)
)	O
;	O
break	O
;	O
case	O
DICO_IOCTL_BYTES_OUT	int
:	O
*	O
(	O
off_t	long
*	O
)	O
call_data	*(void)
=	O
dico_stream_bytes_out	(*(struct))->(long)
(	O
s	*(char)
->	O
transport	*(struct)
)	O
;	O
break	O
;	O
default	O
:	O
errno	O
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
dico_stream_t	*(struct)
dico_crlf_stream	(*(struct),int,int)->(*(struct))
(	O
dico_stream_t	*(struct)
transport	*(struct)
,	O
int	O
flags	int
,	O
int	O
noclose	int
)	O
{	O
int	O
rc	int
;	O
struct	O
_crlfstr	struct(*(struct),int,enum(int,int),char)
*	O
s	*(char)
;	O
dico_stream_t	*(struct)
str	*(struct)
;	O
s	*(char)
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
s	*(char)
)	O
)	O
;	O
if	O
(	O
!	O
s	*(char)
)	O
return	O
NULL	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
s	*(char)
,	O
0	int
,	O
sizeof	O
(	O
*	O
s	*(char)
)	O
)	O
;	O
rc	int
=	O
dico_stream_create	(*(*(struct)),int,*(void))->(int)
(	O
&	O
str	*(struct)
,	O
flags	int
&	O
(	O
DICO_STREAM_READ	int
|	O
DICO_STREAM_WRITE	int
)	O
,	O
s	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	(*(void))->(void)
(	O
s	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
s	*(char)
->	O
transport	*(struct)
=	O
transport	*(struct)
;	O
s	*(char)
->	O
noclose	int
=	O
noclose	int
;	O
dico_stream_set_write	(*(struct),*((*(void),*(char),long,*(long))->(int)))->(void)
(	O
str	*(struct)
,	O
_crlfstr_write	(*(void),*(char),long,*(long))->(int)
)	O
;	O
dico_stream_set_read	(*(struct),*((*(void),*(char),long,*(long))->(int)))->(void)
(	O
str	*(struct)
,	O
_crlfstr_read	(*(void),*(char),long,*(long))->(int)
)	O
;	O
dico_stream_set_flush	(*(struct),*((*(void))->(int)))->(void)
(	O
str	*(struct)
,	O
_crlfstr_flush	(*(void))->(int)
)	O
;	O
dico_stream_set_close	(*(struct),*((*(void))->(int)))->(void)
(	O
str	*(struct)
,	O
_crlfstr_close	(*(void))->(int)
)	O
;	O
dico_stream_set_destroy	(*(struct),*((*(void))->(int)))->(void)
(	O
str	*(struct)
,	O
_crlfstr_destroy	(*(void))->(int)
)	O
;	O
dico_stream_set_ioctl	(*(struct),*((*(void),int,*(void))->(int)))->(void)
(	O
str	*(struct)
,	O
_crlfstr_ioctl	(*(void),int,*(void))->(int)
)	O
;	O
dico_stream_set_buffer	(*(struct),enum(int,int,int),long)->(int)
(	O
str	*(struct)
,	O
dico_buffer_line	int
,	O
1024	int
)	O
;	O
return	O
str	*(struct)
;	O
}	O
