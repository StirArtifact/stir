u_char	char
*	O
asn_decode_length	(*(char),*(int))->(*(char))
(	O
u_char	char
*	O
data	*(char)
,	O
u_int	int
*	O
length	*(int)
)	O
{	O
u_char	char
size	char
=	O
*	O
data	*(char)
++	O
;	O
if	O
(	O
size	char
&	O
ASN_LONG_LEN	O
)	O
{	O
u_int	int
len	int
;	O
size	char
&=	O
~	O
ASN_LONG_LEN	O
;	O
if	O
(	O
!	O
size	char
||	O
size	char
>	O
sizeof	O
(	O
int	O
)	O
)	O
{	O
SNMP_SET_ERRNO	O
(	O
E_ASN_DECODE	int
)	O
;	O
return	O
NULL	O
;	O
}	O
len	int
=	O
0	int
;	O
while	O
(	O
size	char
--	O
)	O
{	O
len	int
<<=	O
8	int
;	O
len	int
|=	O
*	O
data	*(char)
++	O
;	O
}	O
*	O
length	*(int)
=	O
len	int
;	O
}	O
else	O
*	O
length	*(int)
=	O
size	char
;	O
return	O
data	*(char)
;	O
}	O
u_char	char
*	O
asn_encode_length	(*(char),*(int),int)->(*(char))
(	O
u_char	char
*	O
data	*(char)
,	O
int	O
*	O
datalength	*(int)
,	O
u_int	int
length	*(int)
)	O
{	O
if	O
(	O
*	O
datalength	*(int)
<	O
1	int
)	O
{	O
SNMP_SET_ERRNO	O
(	O
E_ASN_ENCODE	int
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
length	*(int)
<	O
0x80	int
)	O
{	O
*	O
data	*(char)
++	O
=	O
(	O
u_char	char
)	O
length	*(int)
;	O
}	O
else	O
if	O
(	O
length	*(int)
<	O
0xff	int
)	O
{	O
if	O
(	O
*	O
datalength	*(int)
<	O
2	int
)	O
{	O
SNMP_SET_ERRNO	O
(	O
E_ASN_ENCODE	int
)	O
;	O
return	O
NULL	O
;	O
}	O
*	O
data	*(char)
++	O
=	O
(	O
u_char	char
)	O
(	O
ASN_LONG_LEN	O
|	O
0x01	int
)	O
;	O
*	O
data	*(char)
++	O
=	O
(	O
u_char	char
)	O
length	*(int)
;	O
}	O
else	O
{	O
if	O
(	O
*	O
datalength	*(int)
<	O
3	int
)	O
{	O
SNMP_SET_ERRNO	O
(	O
E_ASN_ENCODE	int
)	O
;	O
return	O
NULL	O
;	O
}	O
*	O
data	*(char)
++	O
=	O
(	O
u_char	char
)	O
(	O
ASN_LONG_LEN	O
|	O
0x02	int
)	O
;	O
*	O
data	*(char)
++	O
=	O
(	O
u_char	char
)	O
(	O
(	O
length	*(int)
>>	O
8	int
)	O
&	O
0xff	int
)	O
;	O
*	O
data	*(char)
++	O
=	O
(	O
u_char	char
)	O
(	O
length	*(int)
&	O
0xff	int
)	O
;	O
}	O
return	O
data	*(char)
;	O
}	O
u_char	char
*	O
asn_recode_length	(*(char),int)->(*(char))
(	O
u_char	char
*	O
data	*(char)
,	O
u_int	int
length	*(int)
)	O
{	O
*	O
data	*(char)
++	O
=	O
(	O
u_char	char
)	O
(	O
ASN_LONG_LEN	O
|	O
0x02	int
)	O
;	O
*	O
data	*(char)
++	O
=	O
(	O
u_char	char
)	O
(	O
(	O
length	*(int)
>>	O
8	int
)	O
&	O
0xff	int
)	O
;	O
*	O
data	*(char)
++	O
=	O
(	O
u_char	char
)	O
(	O
length	*(int)
&	O
0xff	int
)	O
;	O
return	O
data	*(char)
;	O
}	O
u_char	char
*	O
asn_encode_header	(*(char),*(int),char,int)->(*(char))
(	O
u_char	char
*	O
data	*(char)
,	O
int	O
*	O
datalength	*(int)
,	O
u_char	char
type	*(char)
,	O
int	O
length	*(int)
)	O
{	O
if	O
(	O
*	O
datalength	*(int)
<	O
1	int
)	O
{	O
SNMP_SET_ERRNO	O
(	O
E_ASN_ENCODE	int
)	O
;	O
return	O
(	O
NULL	O
)	O
;	O
}	O
*	O
data	*(char)
++	O
=	O
type	*(char)
;	O
--	O
*	O
datalength	*(int)
;	O
return	O
asn_encode_length	(*(char),*(int),int)->(*(char))
(	O
data	*(char)
,	O
datalength	*(int)
,	O
length	*(int)
)	O
;	O
}	O
u_char	char
*	O
asn_decode_header	(*(char),*(int),*(char))->(*(char))
(	O
u_char	char
*	O
data	*(char)
,	O
int	O
*	O
datalength	*(int)
,	O
u_char	char
*	O
type	*(char)
)	O
{	O
if	O
(	O
*	O
datalength	*(int)
<	O
1	int
)	O
{	O
SNMP_SET_ERRNO	O
(	O
E_ASN_DECODE	int
)	O
;	O
return	O
(	O
NULL	O
)	O
;	O
}	O
*	O
type	*(char)
=	O
*	O
data	*(char)
++	O
;	O
--	O
*	O
datalength	*(int)
;	O
return	O
asn_decode_length	(*(char),*(int))->(*(char))
(	O
data	*(char)
,	O
datalength	*(int)
)	O
;	O
}	O
u_char	char
*	O
asn_encode_null	(*(char),*(int),char)->(*(char))
(	O
u_char	char
*	O
data	*(char)
,	O
int	O
*	O
datalength	*(int)
,	O
u_char	char
type	*(char)
)	O
{	O
return	O
asn_encode_header	(*(char),*(int),char,int)->(*(char))
(	O
data	*(char)
,	O
datalength	*(int)
,	O
type	*(char)
,	O
0	int
)	O
;	O
}	O
u_char	char
*	O
asn_decode_int	(*(char),*(int),*(char),*(int),int)->(*(char))
(	O
u_char	char
*	O
data	*(char)
,	O
int	O
*	O
datalength	*(int)
,	O
u_char	char
*	O
type	*(char)
,	O
int	O
*	O
intp	*(int)
,	O
int	O
intsize	int
)	O
{	O
u_int	int
count	int
;	O
u_char	char
*	O
buf	*(char)
=	O
data	*(char)
;	O
int	O
value	int
;	O
if	O
(	O
intsize	int
!=	O
sizeof	O
(	O
int	O
)	O
)	O
{	O
SNMP_SET_ERRNO	O
(	O
E_ASN_DECODE	int
)	O
;	O
return	O
NULL	O
;	O
}	O
*	O
type	*(char)
=	O
*	O
buf	*(char)
++	O
;	O
buf	*(char)
=	O
asn_decode_length	(*(char),*(int))->(*(char))
(	O
buf	*(char)
,	O
&	O
count	int
)	O
;	O
if	O
(	O
!	O
buf	*(char)
)	O
return	O
buf	*(char)
;	O
if	O
(	O
count	int
+	O
(	O
buf	*(char)
-	O
data	*(char)
)	O
>	O
*	O
datalength	*(int)
)	O
{	O
SNMP_SET_ERRNO	O
(	O
E_ASN_DECODE	int
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
*	O
buf	*(char)
&	O
0x80	int
)	O
value	int
=	O
-	O
1	int
;	O
else	O
value	int
=	O
0	int
;	O
while	O
(	O
count	int
--	O
)	O
{	O
value	int
<<=	O
8	int
;	O
value	int
|=	O
*	O
buf	*(char)
++	O
;	O
}	O
*	O
datalength	*(int)
-=	O
buf	*(char)
-	O
data	*(char)
;	O
*	O
intp	*(int)
=	O
value	int
;	O
return	O
buf	*(char)
;	O
}	O
u_char	char
*	O
asn_encode_int	(*(char),*(int),char,int)->(*(char))
(	O
u_char	char
*	O
data	*(char)
,	O
int	O
*	O
datalength	*(int)
,	O
u_char	char
type	*(char)
,	O
int	O
intval	int
)	O
{	O
u_int	int
mask	int
;	O
u_int	int
intsize	int
=	O
sizeof	O
(	O
int	O
)	O
;	O
mask	int
=	O
(	O
u_int	int
)	O
0x1FF	int
<<	O
(	O
(	O
8	int
*	O
(	O
sizeof	O
(	O
int	O
)	O
-	O
1	int
)	O
)	O
-	O
1	int
)	O
;	O
while	O
(	O
(	O
(	O
(	O
intval	int
&	O
mask	int
)	O
==	O
0	int
)	O
||	O
(	O
(	O
intval	int
&	O
mask	int
)	O
==	O
mask	int
)	O
)	O
&&	O
intsize	int
>	O
1	int
)	O
{	O
intsize	int
--	O
;	O
intval	int
<<=	O
8	int
;	O
}	O
if	O
(	O
!	O
(	O
data	*(char)
=	O
asn_encode_header	(*(char),*(int),char,int)->(*(char))
(	O
data	*(char)
,	O
datalength	*(int)
,	O
type	*(char)
,	O
intsize	int
)	O
)	O
||	O
*	O
datalength	*(int)
<	O
intsize	int
)	O
{	O
SNMP_SET_ERRNO	O
(	O
E_ASN_ENCODE	int
)	O
;	O
return	O
NULL	O
;	O
}	O
*	O
datalength	*(int)
-=	O
intsize	int
;	O
mask	int
=	O
(	O
u_int	int
)	O
0xff	int
<<	O
(	O
8	int
*	O
(	O
sizeof	O
(	O
int	O
)	O
-	O
1	int
)	O
)	O
;	O
while	O
(	O
intsize	int
--	O
)	O
{	O
*	O
data	*(char)
++	O
=	O
(	O
u_char	char
)	O
(	O
(	O
intval	int
&	O
mask	int
)	O
>>	O
(	O
8	int
*	O
(	O
sizeof	O
(	O
int	O
)	O
-	O
1	int
)	O
)	O
)	O
;	O
intval	int
<<=	O
8	int
;	O
}	O
return	O
data	*(char)
;	O
}	O
u_char	char
*	O
asn_decode_string	(*(char),*(int),*(char),*(char),*(int))->(*(char))
(	O
u_char	char
*	O
data	*(char)
,	O
int	O
*	O
datalength	*(int)
,	O
u_char	char
*	O
type	*(char)
,	O
u_char	char
*	O
string	*(char)
,	O
int	O
*	O
strlength	*(int)
)	O
{	O
u_char	char
*	O
buf	*(char)
=	O
data	*(char)
;	O
u_int	int
count	int
;	O
*	O
type	*(char)
=	O
*	O
buf	*(char)
++	O
;	O
if	O
(	O
(	O
buf	*(char)
=	O
asn_decode_length	(*(char),*(int))->(*(char))
(	O
buf	*(char)
,	O
&	O
count	int
)	O
)	O
==	O
NULL	O
||	O
count	int
+	O
(	O
buf	*(char)
-	O
data	*(char)
)	O
>	O
*	O
datalength	*(int)
||	O
count	int
>	O
*	O
strlength	*(int)
)	O
{	O
SNMP_SET_ERRNO	O
(	O
E_ASN_DECODE	int
)	O
;	O
return	O
NULL	O
;	O
}	O
*	O
strlength	*(int)
=	O
count	int
;	O
while	O
(	O
count	int
--	O
)	O
*	O
string	*(char)
++	O
=	O
*	O
buf	*(char)
++	O
;	O
*	O
datalength	*(int)
-=	O
buf	*(char)
-	O
data	*(char)
;	O
return	O
buf	*(char)
;	O
}	O
u_char	char
*	O
asn_encode_string	(*(char),*(int),char,*(char),int)->(*(char))
(	O
u_char	char
*	O
data	*(char)
,	O
int	O
*	O
datalength	*(int)
,	O
u_char	char
type	*(char)
,	O
u_char	char
*	O
string	*(char)
,	O
int	O
strlength	*(int)
)	O
{	O
data	*(char)
=	O
asn_encode_header	(*(char),*(int),char,int)->(*(char))
(	O
data	*(char)
,	O
datalength	*(int)
,	O
type	*(char)
,	O
strlength	*(int)
)	O
;	O
if	O
(	O
!	O
data	*(char)
||	O
*	O
datalength	*(int)
<	O
strlength	*(int)
)	O
{	O
SNMP_SET_ERRNO	O
(	O
E_ASN_ENCODE	int
)	O
;	O
return	O
NULL	O
;	O
}	O
*	O
datalength	*(int)
-=	O
strlength	*(int)
;	O
while	O
(	O
strlength	*(int)
--	O
)	O
*	O
data	*(char)
++	O
=	O
*	O
string	*(char)
++	O
;	O
return	O
data	*(char)
;	O
}	O
u_char	char
*	O
asn_decode_oid	(*(char),*(int),*(char),*(int),*(int))->(*(char))
(	O
u_char	char
*	O
data	*(char)
,	O
int	O
*	O
datalength	*(int)
,	O
u_char	char
*	O
type	*(char)
,	O
oid_t	*(int)
obid	*(int)
,	O
int	O
*	O
obidlength	*(int)
)	O
{	O
u_char	char
*	O
buf	*(char)
=	O
data	*(char)
;	O
u_int	int
count	int
;	O
u_int	int
subid	*(int)
;	O
oid_t	*(int)
oidp	*(int)
=	O
obid	*(int)
+	O
1	int
;	O
*	O
type	*(char)
=	O
*	O
buf	*(char)
++	O
;	O
buf	*(char)
=	O
asn_decode_length	(*(char),*(int))->(*(char))
(	O
buf	*(char)
,	O
&	O
count	int
)	O
;	O
if	O
(	O
!	O
buf	*(char)
||	O
count	int
+	O
(	O
buf	*(char)
-	O
data	*(char)
)	O
>	O
*	O
datalength	*(int)
)	O
{	O
SNMP_SET_ERRNO	O
(	O
E_ASN_DECODE	int
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
count	int
==	O
0	int
)	O
obid	*(int)
[	O
0	int
]	O
=	O
obid	*(int)
[	O
1	int
]	O
=	O
0	int
;	O
--	O
*	O
obidlength	*(int)
;	O
while	O
(	O
count	int
>	O
0	int
&&	O
(	O
*	O
obidlength	*(int)
)	O
--	O
>	O
0	int
)	O
{	O
subid	*(int)
=	O
0	int
;	O
do	O
{	O
subid	*(int)
=	O
(	O
subid	*(int)
<<	O
7	int
)	O
+	O
(	O
*	O
buf	*(char)
&	O
~	O
ASN_BIT8	O
)	O
;	O
count	int
--	O
;	O
}	O
while	O
(	O
*	O
buf	*(char)
++	O
&	O
ASN_BIT8	O
)	O
;	O
if	O
(	O
subid	*(int)
>	O
MAX_SUBID	int
)	O
{	O
SNMP_SET_ERRNO	O
(	O
E_ASN_DECODE	int
)	O
;	O
return	O
NULL	O
;	O
}	O
*	O
oidp	*(int)
++	O
=	O
(	O
subid_t	int
)	O
subid	*(int)
;	O
}	O
subid	*(int)
=	O
(	O
u_int	int
)	O
obid	*(int)
[	O
1	int
]	O
;	O
obid	*(int)
[	O
1	int
]	O
=	O
(	O
u_char	char
)	O
(	O
subid	*(int)
%	O
40	int
)	O
;	O
obid	*(int)
[	O
0	int
]	O
=	O
(	O
u_char	char
)	O
(	O
(	O
subid	*(int)
-	O
obid	*(int)
[	O
1	int
]	O
)	O
/	O
40	int
)	O
;	O
*	O
obidlength	*(int)
=	O
(	O
int	O
)	O
(	O
oidp	*(int)
-	O
obid	*(int)
)	O
;	O
*	O
datalength	*(int)
-=	O
(	O
buf	*(char)
-	O
data	*(char)
)	O
;	O
return	O
buf	*(char)
;	O
}	O
u_char	char
*	O
asn_encode_oid	(*(char),*(int),char,*(int),int)->(*(char))
(	O
u_char	char
*	O
data	*(char)
,	O
int	O
*	O
datalength	*(int)
,	O
u_char	char
type	*(char)
,	O
oid_t	*(int)
obid	*(int)
,	O
int	O
obidlength	*(int)
)	O
{	O
int	O
length	*(int)
;	O
u_char	char
*	O
buf	*(char)
,	O
*	O
bp	*(char)
;	O
u_int	int
subid	*(int)
;	O
length	*(int)
=	O
*	O
datalength	*(int)
;	O
buf	*(char)
=	O
asn_encode_header	(*(char),*(int),char,int)->(*(char))
(	O
data	*(char)
,	O
&	O
length	*(int)
,	O
type	*(char)
,	O
0xffff	int
)	O
;	O
if	O
(	O
!	O
buf	*(char)
)	O
{	O
err	O
:	O
SNMP_SET_ERRNO	O
(	O
E_ASN_ENCODE	int
)	O
;	O
return	O
NULL	O
;	O
}	O
bp	*(char)
=	O
buf	*(char)
;	O
if	O
(	O
obidlength	*(int)
<	O
2	int
)	O
{	O
*	O
bp	*(char)
++	O
=	O
0	int
;	O
obidlength	*(int)
=	O
0	int
;	O
}	O
else	O
{	O
*	O
bp	*(char)
++	O
=	O
obid	*(int)
[	O
1	int
]	O
+	O
(	O
obid	*(int)
[	O
0	int
]	O
*	O
40	int
)	O
;	O
obidlength	*(int)
-=	O
2	int
;	O
obid	*(int)
+=	O
2	int
;	O
}	O
while	O
(	O
obidlength	*(int)
--	O
)	O
{	O
subid	*(int)
=	O
*	O
obid	*(int)
++	O
;	O
if	O
(	O
subid	*(int)
<	O
0x7f	int
)	O
{	O
CHKLEN	O
(	O
)	O
;	O
*	O
bp	*(char)
++	O
=	O
subid	*(int)
;	O
}	O
else	O
{	O
register	O
u_char	char
*	O
p	*(char)
,	O
*	O
q	*(char)
,	O
tb	char
;	O
p	*(char)
=	O
bp	*(char)
;	O
for	O
(	O
;	O
subid	*(int)
>	O
0x7f	int
;	O
subid	*(int)
>>=	O
7	int
)	O
{	O
CHKLEN	O
(	O
)	O
;	O
*	O
bp	*(char)
++	O
=	O
(	O
u_char	char
)	O
(	O
(	O
subid	*(int)
&	O
0x7f	int
)	O
|	O
ASN_BIT8	O
)	O
;	O
}	O
CHKLEN	O
(	O
)	O
;	O
*	O
bp	*(char)
++	O
=	O
(	O
u_char	char
)	O
subid	*(int)
|	O
ASN_BIT8	O
;	O
for	O
(	O
q	*(char)
=	O
bp	*(char)
-	O
1	int
;	O
q	*(char)
>	O
p	*(char)
;	O
q	*(char)
--	O
,	O
p	*(char)
++	O
)	O
{	O
tb	char
=	O
*	O
q	*(char)
;	O
*	O
q	*(char)
=	O
*	O
p	*(char)
;	O
*	O
p	*(char)
=	O
tb	char
;	O
}	O
bp	*(char)
[	O
-	O
1	int
]	O
&=	O
~	O
ASN_BIT8	O
;	O
}	O
}	O
asn_recode_length	(*(char),int)->(*(char))
(	O
data	*(char)
+	O
1	int
,	O
bp	*(char)
-	O
buf	*(char)
)	O
;	O
*	O
datalength	*(int)
=	O
length	*(int)
;	O
return	O
bp	*(char)
;	O
}	O
