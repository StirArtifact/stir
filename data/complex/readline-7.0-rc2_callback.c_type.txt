_rl_callback_func_t	(*(struct(int,int,int)))->(int)
*	O
_rl_callback_func	*((*(struct(int,int,int)))->(int))
=	O
0	int
;	O
_rl_callback_generic_arg	struct(int,int,int)
*	O
_rl_callback_data	*(struct(int,int,int))
=	O
0	int
;	O
int	O
rl_persistent_signal_handlers	int
=	O
0	int
;	O
rl_vcpfunc_t	(*(char))->(void)
*	O
rl_linefunc	*((*(char))->(void))
;	O
static	O
int	O
in_handler	int
;	O
static	O
void	O
_rl_callback_newline	()->(void)
(	O
)	O
{	O
rl_initialize	()->(int)
(	O
)	O
;	O
if	O
(	O
in_handler	int
==	O
0	int
)	O
{	O
in_handler	int
=	O
1	int
;	O
if	O
(	O
rl_prep_term_function	*((int)->(void))
)	O
(	O
*	O
rl_prep_term_function	*((int)->(void))
)	O
(	O
_rl_meta_flag	int
)	O
;	O
if	O
(	O
rl_persistent_signal_handlers	int
)	O
rl_set_signals	()->(int)
(	O
)	O
;	O
}	O
readline_internal_setup	()->(void)
(	O
)	O
;	O
RL_CHECK_SIGNALS	O
(	O
)	O
;	O
}	O
void	O
rl_callback_handler_install	(*(char),*((*(char))->(void)))->(void)
(	O
prompt	*(char)
,	O
linefunc	*((*(char))->(void))
)	O
const	O
char	O
*	O
prompt	*(char)
;	O
rl_vcpfunc_t	(*(char))->(void)
*	O
linefunc	*((*(char))->(void))
;	O
{	O
rl_set_prompt	(*(char))->(int)
(	O
prompt	*(char)
)	O
;	O
RL_SETSTATE	O
(	O
RL_STATE_CALLBACK	int
)	O
;	O
rl_linefunc	*((*(char))->(void))
=	O
linefunc	*((*(char))->(void))
;	O
_rl_callback_newline	()->(void)
(	O
)	O
;	O
}	O
void	O
rl_callback_read_char	()->(void)
(	O
)	O
{	O
char	O
*	O
line	*(char)
;	O
int	O
eof	int
,	O
jcode	int
;	O
static	O
procenv_t	O
olevel	array(struct(array(long),int,struct(array(long))))
;	O
if	O
(	O
rl_linefunc	*((*(char))->(void))
==	O
NULL	O
)	O
{	O
_rl_errmsg	(*(char))->(void)
(	O
"readline_callback_read_char() called with no handler!"	*(char)
)	O
;	O
abort	()->(void)
(	O
)	O
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
(	O
void	O
*	O
)	O
olevel	array(struct(array(long),int,struct(array(long))))
,	O
(	O
void	O
*	O
)	O
_rl_top_level	array(struct(array(long),int,struct(array(long))))
,	O
sizeof	O
(	O
procenv_t	O
)	O
)	O
;	O
jcode	int
=	O
sigsetjmp	O
(	O
_rl_top_level	array(struct(array(long),int,struct(array(long))))
,	O
0	int
)	O
;	O
if	O
(	O
jcode	int
)	O
{	O
(	O
*	O
rl_redisplay_function	*(()->(void))
)	O
(	O
)	O
;	O
_rl_want_redisplay	int
=	O
0	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
(	O
void	O
*	O
)	O
_rl_top_level	array(struct(array(long),int,struct(array(long))))
,	O
(	O
void	O
*	O
)	O
olevel	array(struct(array(long),int,struct(array(long))))
,	O
sizeof	O
(	O
procenv_t	O
)	O
)	O
;	O
CALLBACK_READ_RETURN	O
(	O
)	O
;	O
}	O
if	O
(	O
rl_persistent_signal_handlers	int
==	O
0	int
)	O
rl_set_signals	()->(int)
(	O
)	O
;	O
do	O
{	O
RL_CHECK_SIGNALS	O
(	O
)	O
;	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_ISEARCH	int
)	O
)	O
{	O
eof	int
=	O
_rl_isearch_callback	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,*(char),int,int,*(char))))->(int)
(	O
_rl_iscxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,*(char),int,int,*(char)))
)	O
;	O
if	O
(	O
eof	int
==	O
0	int
&&	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_ISEARCH	int
)	O
==	O
0	int
)	O
&&	O
RL_ISSTATE	O
(	O
RL_STATE_INPUTPENDING	int
)	O
)	O
rl_callback_read_char	()->(void)
(	O
)	O
;	O
CALLBACK_READ_RETURN	O
(	O
)	O
;	O
}	O
else	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_NSEARCH	int
)	O
)	O
{	O
eof	int
=	O
_rl_nsearch_callback	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,*(char),int,int,*(char))))->(int)
(	O
_rl_nscxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,*(char),int,int,*(char)))
)	O
;	O
CALLBACK_READ_RETURN	O
(	O
)	O
;	O
}	O
else	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_CHARSEARCH	int
)	O
)	O
{	O
int	O
k	int
;	O
k	int
=	O
_rl_callback_data	*(struct(int,int,int))
->	O
i2	int
;	O
eof	int
=	O
(	O
*	O
_rl_callback_func	*((*(struct(int,int,int)))->(int))
)	O
(	O
_rl_callback_data	*(struct(int,int,int))
)	O
;	O
if	O
(	O
_rl_callback_func	*((*(struct(int,int,int)))->(int))
==	O
0	int
)	O
{	O
if	O
(	O
_rl_callback_data	*(struct(int,int,int))
)	O
{	O
_rl_callback_data_dispose	(*(struct(int,int,int)))->(void)
(	O
_rl_callback_data	*(struct(int,int,int))
)	O
;	O
_rl_callback_data	*(struct(int,int,int))
=	O
0	int
;	O
}	O
}	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_VIMOTION	int
)	O
)	O
{	O
_rl_vi_domove_motion_cleanup	(int,*(struct(int,int,int,int,int,int,int,int,int)))->(int)
(	O
k	int
,	O
_rl_vimvcxt	*(struct(int,int,int,int,int,int,int,int,int))
)	O
;	O
_rl_internal_char_cleanup	()->(void)
(	O
)	O
;	O
CALLBACK_READ_RETURN	O
(	O
)	O
;	O
}	O
_rl_internal_char_cleanup	()->(void)
(	O
)	O
;	O
}	O
else	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_VIMOTION	int
)	O
)	O
{	O
eof	int
=	O
_rl_vi_domove_callback	(*(struct(int,int,int,int,int,int,int,int,int)))->(int)
(	O
_rl_vimvcxt	*(struct(int,int,int,int,int,int,int,int,int))
)	O
;	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_NUMERICARG	int
)	O
==	O
0	int
)	O
_rl_internal_char_cleanup	()->(void)
(	O
)	O
;	O
CALLBACK_READ_RETURN	O
(	O
)	O
;	O
}	O
else	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_NUMERICARG	int
)	O
)	O
{	O
eof	int
=	O
_rl_arg_callback	(int)->(int)
(	O
_rl_argcxt	int
)	O
;	O
if	O
(	O
eof	int
==	O
0	int
&&	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_NUMERICARG	int
)	O
==	O
0	int
)	O
&&	O
RL_ISSTATE	O
(	O
RL_STATE_INPUTPENDING	int
)	O
)	O
rl_callback_read_char	()->(void)
(	O
)	O
;	O
else	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_NUMERICARG	int
)	O
==	O
0	int
)	O
_rl_internal_char_cleanup	()->(void)
(	O
)	O
;	O
CALLBACK_READ_RETURN	O
(	O
)	O
;	O
}	O
else	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_MULTIKEY	int
)	O
)	O
{	O
eof	int
=	O
_rl_dispatch_callback	(*(struct(int,int,int,int,*(struct(char,*`)),*(struct(char,*`)),*(struct(int,int,int,int,*`,*`,*`,int)),int)))->(int)
(	O
_rl_kscxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
)	O
;	O
while	O
(	O
(	O
eof	int
==	O
-	O
1	int
||	O
eof	int
==	O
-	O
2	int
)	O
&&	O
RL_ISSTATE	O
(	O
RL_STATE_MULTIKEY	int
)	O
&&	O
_rl_kscxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
&&	O
(	O
_rl_kscxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
->	O
flags	int
&	O
KSEQ_DISPATCHED	int
)	O
)	O
eof	int
=	O
_rl_dispatch_callback	(*(struct(int,int,int,int,*(struct(char,*`)),*(struct(char,*`)),*(struct(int,int,int,int,*`,*`,*`,int)),int)))->(int)
(	O
_rl_kscxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
)	O
;	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_MULTIKEY	int
)	O
==	O
0	int
)	O
{	O
_rl_internal_char_cleanup	()->(void)
(	O
)	O
;	O
_rl_want_redisplay	int
=	O
1	int
;	O
}	O
}	O
else	O
if	O
(	O
_rl_callback_func	*((*(struct(int,int,int)))->(int))
)	O
{	O
eof	int
=	O
(	O
*	O
_rl_callback_func	*((*(struct(int,int,int)))->(int))
)	O
(	O
_rl_callback_data	*(struct(int,int,int))
)	O
;	O
if	O
(	O
_rl_callback_func	*((*(struct(int,int,int)))->(int))
==	O
0	int
)	O
{	O
if	O
(	O
_rl_callback_data	*(struct(int,int,int))
)	O
{	O
_rl_callback_data_dispose	(*(struct(int,int,int)))->(void)
(	O
_rl_callback_data	*(struct(int,int,int))
)	O
;	O
_rl_callback_data	*(struct(int,int,int))
=	O
0	int
;	O
}	O
_rl_internal_char_cleanup	()->(void)
(	O
)	O
;	O
}	O
}	O
else	O
eof	int
=	O
readline_internal_char	()->(int)
(	O
)	O
;	O
RL_CHECK_SIGNALS	O
(	O
)	O
;	O
if	O
(	O
rl_done	int
==	O
0	int
&&	O
_rl_want_redisplay	int
)	O
{	O
(	O
*	O
rl_redisplay_function	*(()->(void))
)	O
(	O
)	O
;	O
_rl_want_redisplay	int
=	O
0	int
;	O
}	O
if	O
(	O
rl_done	int
)	O
{	O
line	*(char)
=	O
readline_internal_teardown	(int)->(*(char))
(	O
eof	int
)	O
;	O
if	O
(	O
rl_deprep_term_function	*(()->(void))
)	O
(	O
*	O
rl_deprep_term_function	*(()->(void))
)	O
(	O
)	O
;	O
rl_clear_signals	()->(int)
(	O
)	O
;	O
in_handler	int
=	O
0	int
;	O
(	O
*	O
rl_linefunc	*((*(char))->(void))
)	O
(	O
line	*(char)
)	O
;	O
if	O
(	O
rl_line_buffer	*(char)
[	O
0	int
]	O
)	O
_rl_init_line_state	()->(void)
(	O
)	O
;	O
if	O
(	O
in_handler	int
==	O
0	int
&&	O
rl_linefunc	*((*(char))->(void))
)	O
_rl_callback_newline	()->(void)
(	O
)	O
;	O
}	O
}	O
while	O
(	O
rl_pending_input	int
||	O
_rl_pushed_input_available	()->(int)
(	O
)	O
||	O
RL_ISSTATE	O
(	O
RL_STATE_MACROINPUT	int
)	O
)	O
;	O
CALLBACK_READ_RETURN	O
(	O
)	O
;	O
}	O
void	O
rl_callback_handler_remove	()->(void)
(	O
)	O
{	O
rl_linefunc	*((*(char))->(void))
=	O
NULL	O
;	O
RL_UNSETSTATE	O
(	O
RL_STATE_CALLBACK	int
)	O
;	O
RL_CHECK_SIGNALS	O
(	O
)	O
;	O
if	O
(	O
in_handler	int
)	O
{	O
in_handler	int
=	O
0	int
;	O
if	O
(	O
rl_deprep_term_function	*(()->(void))
)	O
(	O
*	O
rl_deprep_term_function	*(()->(void))
)	O
(	O
)	O
;	O
rl_clear_signals	()->(int)
(	O
)	O
;	O
}	O
}	O
_rl_callback_generic_arg	struct(int,int,int)
*	O
_rl_callback_data_alloc	(int)->(*(struct(int,int,int)))
(	O
count	int
)	O
int	O
count	int
;	O
{	O
_rl_callback_generic_arg	struct(int,int,int)
*	O
arg	*(struct(int,int,int))
;	O
arg	*(struct(int,int,int))
=	O
(	O
_rl_callback_generic_arg	struct(int,int,int)
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
_rl_callback_generic_arg	struct(int,int,int)
)	O
)	O
;	O
arg	*(struct(int,int,int))
->	O
count	int
=	O
count	int
;	O
arg	*(struct(int,int,int))
->	O
i1	int
=	O
arg	*(struct(int,int,int))
->	O
i2	int
=	O
0	int
;	O
return	O
arg	*(struct(int,int,int))
;	O
}	O
void	O
_rl_callback_data_dispose	(*(struct(int,int,int)))->(void)
(	O
arg	*(struct(int,int,int))
)	O
_rl_callback_generic_arg	struct(int,int,int)
*	O
arg	*(struct(int,int,int))
;	O
{	O
xfree	(*(void))->(void)
(	O
arg	*(struct(int,int,int))
)	O
;	O
}	O
void	O
rl_callback_sigcleanup	()->(void)
(	O
)	O
{	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_CALLBACK	int
)	O
==	O
0	int
)	O
return	O
;	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_ISEARCH	int
)	O
)	O
_rl_isearch_cleanup	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,*(char),int,int,*(char))),int)->(int)
(	O
_rl_iscxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,*(char),int,int,*(char)))
,	O
0	int
)	O
;	O
else	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_NSEARCH	int
)	O
)	O
_rl_nsearch_cleanup	(*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(struct(char,*`)),*(struct(char,*`)),int,int,int,int,*(char),int,int,*(char))),int)->(int)
(	O
_rl_nscxt	*(struct(int,int,*(char),int,int,*(*(char)),*(char),int,int,int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),int,int,int,int,*(char),int,int,*(char)))
,	O
0	int
)	O
;	O
else	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_VIMOTION	int
)	O
)	O
RL_UNSETSTATE	O
(	O
RL_STATE_VIMOTION	int
)	O
;	O
else	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_NUMERICARG	int
)	O
)	O
{	O
_rl_argcxt	int
=	O
0	int
;	O
RL_UNSETSTATE	O
(	O
RL_STATE_NUMERICARG	int
)	O
;	O
}	O
else	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_MULTIKEY	int
)	O
)	O
RL_UNSETSTATE	O
(	O
RL_STATE_MULTIKEY	int
)	O
;	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_CHARSEARCH	int
)	O
)	O
RL_UNSETSTATE	O
(	O
RL_STATE_CHARSEARCH	int
)	O
;	O
_rl_callback_func	*((*(struct(int,int,int)))->(int))
=	O
0	int
;	O
}	O
