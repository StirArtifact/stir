static	O
grad_list_t	struct
*	O
naslist	*(struct)
;	O
static	O
int	O
_nas_mem_free	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
ARG_UNUSED	O
)	O
{	O
grad_nas_t	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
*	O
p	*(struct)
=	O
item	*(void)
;	O
grad_envar_free_list	(*(*(struct)))->(void)
(	O
&	O
p	*(struct)
->	O
args	*(struct)
)	O
;	O
grad_free	(*(void))->(void)
(	O
p	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
read_naslist_entry	(*(void),int,*(*(char)),*(struct(*(char),long)))->(int)
(	O
void	O
*	O
unused	*(void)
ARG_UNUSED	O
,	O
int	O
fc	int
,	O
char	O
*	O
*	O
fv	*(*(char))
,	O
grad_locus_t	struct(*(char),long)
*	O
loc	struct(*(char),long)
)	O
{	O
int	O
i	int
;	O
grad_nas_t	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
,	O
*	O
nasp	*(struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void)))
;	O
if	O
(	O
fc	int
<	O
2	int
)	O
{	O
grad_log_loc	(int,*(struct(*(char),long)),*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
loc	struct(*(char),long)
,	O
"%s"	*(char)
,	O
_	O
(	O
"too few fields"	*(char)
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
,	O
0	int
,	O
sizeof	O
(	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
)	O
)	O
;	O
GRAD_STRING_COPY	O
(	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
.	O
shortname	array(char)
,	O
fv	*(*(char))
[	O
1	int
]	O
)	O
;	O
if	O
(	O
!	O
fv	*(*(char))
[	O
2	int
]	O
)	O
GRAD_STRING_COPY	O
(	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
.	O
nastype	array(char)
,	O
"true"	*(char)
)	O
;	O
else	O
GRAD_STRING_COPY	O
(	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
.	O
nastype	array(char)
,	O
fv	*(*(char))
[	O
2	int
]	O
)	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
fv	*(*(char))
[	O
0	int
]	O
,	O
"DEFAULT"	*(char)
)	O
==	O
0	int
)	O
{	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
.	O
netdef	struct(int,int)
.	O
ipaddr	int
=	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
.	O
netdef	struct(int,int)
.	O
netmask	int
=	O
0	int
;	O
GRAD_STRING_COPY	O
(	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
.	O
longname	array(char)
,	O
fv	*(*(char))
[	O
0	int
]	O
)	O
;	O
}	O
else	O
{	O
grad_ip_getnetaddr	(*(char),*(struct(int,int)))->(int)
(	O
fv	*(*(char))
[	O
0	int
]	O
,	O
&	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
.	O
netdef	struct(int,int)
)	O
;	O
grad_ip_gethostname	(int,*(char),long)->(*(char))
(	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
.	O
netdef	struct(int,int)
.	O
ipaddr	int
,	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
.	O
longname	array(char)
,	O
sizeof	O
(	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
.	O
longname	array(char)
)	O
)	O
;	O
if	O
(	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
.	O
longname	array(char)
[	O
0	int
]	O
)	O
GRAD_STRING_COPY	O
(	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
.	O
longname	array(char)
,	O
fv	*(*(char))
[	O
0	int
]	O
)	O
;	O
}	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
.	O
args	*(struct)
=	O
NULL	O
;	O
for	O
(	O
i	int
=	O
3	int
;	O
i	int
<	O
fc	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
fv	*(*(char))
[	O
i	int
]	O
[	O
0	int
]	O
==	O
','	O
)	O
continue	O
;	O
if	O
(	O
fc	int
-	O
i	int
>	O
2	int
&&	O
fv	*(*(char))
[	O
i	int
+	O
1	int
]	O
[	O
0	int
]	O
==	O
'='	O
)	O
{	O
grad_envar_assign	()->(int)
(	O
fv	*(*(char))
[	O
i	int
]	O
,	O
fv	*(*(char))
[	O
i	int
+	O
2	int
]	O
,	O
&	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
.	O
args	*(struct)
)	O
;	O
i	int
+=	O
2	int
;	O
}	O
else	O
{	O
grad_envar_assign	()->(int)
(	O
fv	*(*(char))
[	O
i	int
]	O
,	O
NULL	O
,	O
&	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
.	O
args	*(struct)
)	O
;	O
}	O
}	O
nasp	*(struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void)))
=	O
grad_emalloc	(long)->(*(void))
(	O
sizeof	O
(	O
grad_nas_t	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
)	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
nasp	*(struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void)))
,	O
&	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
,	O
sizeof	O
(	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
)	O
)	O
;	O
if	O
(	O
!	O
naslist	*(struct)
)	O
naslist	*(struct)
=	O
grad_list_create	()->(*(struct))
(	O
)	O
;	O
grad_list_prepend	(*(struct),*(void))->(void)
(	O
naslist	*(struct)
,	O
nasp	*(struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void)))
)	O
;	O
return	O
0	int
;	O
}	O
int	O
grad_nas_read_file	(*(char))->(int)
(	O
char	O
*	O
file	*(char)
)	O
{	O
grad_list_destroy	(*(*(struct)),*((*(void),*(void))->(int)),*(void))->(void)
(	O
&	O
naslist	*(struct)
,	O
_nas_mem_free	(*(void),*(void))->(int)
,	O
NULL	O
)	O
;	O
return	O
grad_read_raddb_file	(*(char),int,*(char),*((*(void),int,*(*(char)),*(struct(*`,long)))->(int)),*(void))->(int)
(	O
file	*(char)
,	O
1	int
,	O
",="	*(char)
,	O
read_naslist_entry	(*(void),int,*(*(char)),*(struct(*(char),long)))->(int)
,	O
NULL	O
)	O
;	O
}	O
grad_nas_t	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
*	O
grad_nas_lookup_name	(*(char))->(*(struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))))
(	O
char	O
*	O
name	*(char)
)	O
{	O
grad_nas_t	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
*	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
;	O
grad_nas_t	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
*	O
defnas	*(struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void)))
=	O
NULL	O
;	O
grad_iterator_t	struct
*	O
itr	*((*(void),*(void))->(int))
=	O
grad_iterator_create	(*(struct))->(*(struct))
(	O
naslist	*(struct)
)	O
;	O
if	O
(	O
!	O
itr	*((*(void),*(void))->(int))
)	O
return	O
NULL	O
;	O
for	O
(	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
=	O
grad_iterator_first	(*(struct))->(*(void))
(	O
itr	*((*(void),*(void))->(int))
)	O
;	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
;	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
=	O
grad_iterator_next	(*(struct))->(*(void))
(	O
itr	*((*(void),*(void))->(int))
)	O
)	O
{	O
if	O
(	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
->	O
netdef	struct(int,int)
.	O
ipaddr	int
==	O
0	int
&&	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
->	O
netdef	struct(int,int)
.	O
netmask	int
==	O
0	int
)	O
defnas	*(struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void)))
=	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
->	O
shortname	array(char)
,	O
name	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
->	O
longname	array(char)
,	O
name	*(char)
)	O
==	O
0	int
)	O
break	O
;	O
}	O
grad_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
itr	*((*(void),*(void))->(int))
)	O
;	O
return	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
?	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
:	O
defnas	*(struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void)))
;	O
}	O
grad_nas_t	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
*	O
grad_nas_lookup_ip	(int)->(*(struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))))
(	O
grad_uint32_t	int
ipaddr	int
)	O
{	O
grad_nas_t	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
*	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
=	O
NULL	O
;	O
grad_nas_t	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
*	O
defnas	*(struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void)))
=	O
NULL	O
;	O
grad_iterator_t	struct
*	O
itr	*((*(void),*(void))->(int))
=	O
grad_iterator_create	(*(struct))->(*(struct))
(	O
naslist	*(struct)
)	O
;	O
if	O
(	O
!	O
itr	*((*(void),*(void))->(int))
)	O
return	O
NULL	O
;	O
for	O
(	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
=	O
grad_iterator_first	(*(struct))->(*(void))
(	O
itr	*((*(void),*(void))->(int))
)	O
;	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
;	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
=	O
grad_iterator_next	(*(struct))->(*(void))
(	O
itr	*((*(void),*(void))->(int))
)	O
)	O
{	O
if	O
(	O
grad_ip_in_net_p	(*(struct(int,int)),int)->(int)
(	O
&	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
->	O
netdef	struct(int,int)
,	O
ipaddr	int
)	O
)	O
{	O
if	O
(	O
!	O
defnas	*(struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void)))
||	O
(	O
defnas	*(struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void)))
->	O
netdef	struct(int,int)
.	O
netmask	int
&	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
->	O
netdef	struct(int,int)
.	O
netmask	int
)	O
==	O
defnas	*(struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void)))
->	O
netdef	struct(int,int)
.	O
netmask	int
)	O
defnas	*(struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void)))
=	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
;	O
}	O
}	O
grad_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
itr	*((*(void),*(void))->(int))
)	O
;	O
return	O
defnas	*(struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void)))
;	O
}	O
char	O
*	O
grad_nas_ip_to_name	(int,*(char),long)->(*(char))
(	O
grad_uint32_t	int
ipaddr	int
,	O
char	O
*	O
buf	*(char)
,	O
size_t	long
size	int
)	O
{	O
grad_nas_t	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
*	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
;	O
if	O
(	O
(	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
=	O
grad_nas_lookup_ip	(int)->(*(struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))))
(	O
ipaddr	int
)	O
)	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
->	O
shortname	array(char)
[	O
0	int
]	O
)	O
return	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
->	O
shortname	array(char)
;	O
else	O
return	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
->	O
longname	array(char)
;	O
}	O
return	O
grad_ip_gethostname	(int,*(char),long)->(*(char))
(	O
ipaddr	int
,	O
buf	*(char)
,	O
size	int
)	O
;	O
}	O
grad_nas_t	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
*	O
grad_nas_request_to_nas	(*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))))->(*(struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))))
(	O
const	O
grad_request_t	struct(int,short,char,char,array(char),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
radreq	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
{	O
grad_uint32_t	int
ipaddr	int
;	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
if	O
(	O
(	O
pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
grad_avl_find	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int)->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
radreq	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
avlist	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
DA_NAS_IP_ADDRESS	int
)	O
)	O
!=	O
NULL	O
)	O
ipaddr	int
=	O
pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_lvalue	O
;	O
else	O
ipaddr	int
=	O
radreq	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
ipaddr	int
;	O
return	O
grad_nas_lookup_ip	(int)->(*(struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))))
(	O
ipaddr	int
)	O
;	O
}	O
char	O
*	O
grad_nas_request_to_name	(*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(char),long)->(*(char))
(	O
const	O
grad_request_t	struct(int,short,char,char,array(char),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
radreq	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
char	O
*	O
buf	*(char)
,	O
size_t	long
size	int
)	O
{	O
grad_uint32_t	int
ipaddr	int
;	O
grad_nas_t	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
*	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
;	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
if	O
(	O
(	O
pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
grad_avl_find	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int)->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
radreq	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
avlist	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
DA_NAS_IP_ADDRESS	int
)	O
)	O
!=	O
NULL	O
)	O
ipaddr	int
=	O
pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_lvalue	O
;	O
else	O
ipaddr	int
=	O
radreq	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
ipaddr	int
;	O
if	O
(	O
(	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
=	O
grad_nas_lookup_ip	(int)->(*(struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))))
(	O
ipaddr	int
)	O
)	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
->	O
shortname	array(char)
[	O
0	int
]	O
)	O
return	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
->	O
shortname	array(char)
;	O
else	O
return	O
nas	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
->	O
longname	array(char)
;	O
}	O
return	O
grad_ip_gethostname	(int,*(char),long)->(*(char))
(	O
ipaddr	int
,	O
buf	*(char)
,	O
size	int
)	O
;	O
}	O
grad_iterator_t	struct
*	O
grad_nas_iterator	()->(*(struct))
(	O
)	O
{	O
return	O
grad_iterator_create	(*(struct))->(*(struct))
(	O
naslist	*(struct)
)	O
;	O
}	O
