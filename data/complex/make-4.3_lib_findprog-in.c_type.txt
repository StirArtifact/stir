static	O
const	O
char	O
*	O
const	O
suffixes	array(*(char))
[	O
]	O
=	O
{	O
""	*(char)
}	O
;	O
const	O
char	O
*	O
find_in_given_path	(*(char),*(char),bool)->(*(char))
(	O
const	O
char	O
*	O
progname	*(char)
,	O
const	O
char	O
*	O
path	*(char)
,	O
bool	bool
optimize_for_exec	bool
)	O
{	O
{	O
bool	bool
has_slash	bool
=	O
false	int
;	O
{	O
const	O
char	O
*	O
p	*(void)
;	O
for	O
(	O
p	*(void)
=	O
progname	*(char)
;	O
*	O
p	*(void)
!=	O
'\0'	O
;	O
p	*(void)
++	O
)	O
if	O
(	O
ISSLASH	O
(	O
*	O
p	*(void)
)	O
)	O
{	O
has_slash	bool
=	O
true	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
has_slash	bool
)	O
{	O
if	O
(	O
optimize_for_exec	bool
)	O
return	O
progname	*(char)
;	O
else	O
{	O
int	O
failure_errno	int
;	O
size_t	long
i	long
;	O
failure_errno	int
=	O
ENOENT	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
sizeof	O
(	O
suffixes	array(*(char))
)	O
/	O
sizeof	O
(	O
suffixes	array(*(char))
[	O
0	int
]	O
)	O
;	O
i	long
++	O
)	O
{	O
const	O
char	O
*	O
suffix	*(char)
=	O
suffixes	array(*(char))
[	O
i	long
]	O
;	O
{	O
char	O
*	O
progpathname	*(char)
=	O
xconcatenated_filename	(*(char),*(char),*(char))->(*(char))
(	O
""	*(char)
,	O
progname	*(char)
,	O
suffix	*(char)
)	O
;	O
if	O
(	O
eaccess	(*(char),int)->(int)
(	O
progpathname	*(char)
,	O
X_OK	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
progpathname	*(char)
,	O
progname	*(char)
)	O
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
progpathname	*(char)
)	O
;	O
return	O
progname	*(char)
;	O
}	O
else	O
return	O
progpathname	*(char)
;	O
}	O
if	O
(	O
errno	O
!=	O
ENOENT	int
)	O
failure_errno	int
=	O
errno	O
;	O
free	(*(void))->(void)
(	O
progpathname	*(char)
)	O
;	O
}	O
}	O
errno	O
=	O
failure_errno	int
;	O
return	O
NULL	O
;	O
}	O
}	O
}	O
if	O
(	O
path	*(char)
==	O
NULL	O
)	O
path	*(char)
=	O
""	*(char)
;	O
{	O
int	O
failure_errno	int
;	O
char	O
*	O
path_copy	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
path	*(char)
)	O
;	O
char	O
*	O
path_rest	*(char)
;	O
char	O
*	O
cp	*(char)
;	O
failure_errno	int
=	O
ENOENT	int
;	O
for	O
(	O
path_rest	*(char)
=	O
path_copy	*(char)
;	O
;	O
path_rest	*(char)
=	O
cp	*(char)
+	O
1	int
)	O
{	O
const	O
char	O
*	O
dir	*(char)
;	O
bool	bool
last	bool
;	O
size_t	long
i	long
;	O
dir	*(char)
=	O
path_rest	*(char)
;	O
for	O
(	O
cp	*(char)
=	O
path_rest	*(char)
;	O
*	O
cp	*(char)
!=	O
'\0'	O
&&	O
*	O
cp	*(char)
!=	O
PATH_SEPARATOR	char
;	O
cp	*(char)
++	O
)	O
;	O
last	bool
=	O
(	O
*	O
cp	*(char)
==	O
'\0'	O
)	O
;	O
*	O
cp	*(char)
=	O
'\0'	O
;	O
if	O
(	O
dir	*(char)
==	O
cp	*(char)
)	O
dir	*(char)
=	O
"."	*(char)
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
sizeof	O
(	O
suffixes	array(*(char))
)	O
/	O
sizeof	O
(	O
suffixes	array(*(char))
[	O
0	int
]	O
)	O
;	O
i	long
++	O
)	O
{	O
const	O
char	O
*	O
suffix	*(char)
=	O
suffixes	array(*(char))
[	O
i	long
]	O
;	O
{	O
char	O
*	O
progpathname	*(char)
=	O
xconcatenated_filename	(*(char),*(char),*(char))->(*(char))
(	O
dir	*(char)
,	O
progname	*(char)
,	O
suffix	*(char)
)	O
;	O
if	O
(	O
eaccess	(*(char),int)->(int)
(	O
progpathname	*(char)
,	O
X_OK	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
progpathname	*(char)
,	O
progname	*(char)
)	O
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
progpathname	*(char)
)	O
;	O
progpathname	*(char)
=	O
XNMALLOC	O
(	O
2	int
+	O
strlen	(*(char))->(long)
(	O
progname	*(char)
)	O
+	O
1	int
,	O
char	O
)	O
;	O
progpathname	*(char)
[	O
0	int
]	O
=	O
'.'	O
;	O
progpathname	*(char)
[	O
1	int
]	O
=	O
NATIVE_SLASH	char
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
progpathname	*(char)
+	O
2	int
,	O
progname	*(char)
,	O
strlen	(*(char))->(long)
(	O
progname	*(char)
)	O
+	O
1	int
)	O
;	O
}	O
free	(*(void))->(void)
(	O
path_copy	*(char)
)	O
;	O
return	O
progpathname	*(char)
;	O
}	O
if	O
(	O
errno	O
!=	O
ENOENT	int
)	O
failure_errno	int
=	O
errno	O
;	O
free	(*(void))->(void)
(	O
progpathname	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
last	bool
)	O
break	O
;	O
}	O
free	(*(void))->(void)
(	O
path_copy	*(char)
)	O
;	O
errno	O
=	O
failure_errno	int
;	O
return	O
NULL	O
;	O
}	O
}	O
