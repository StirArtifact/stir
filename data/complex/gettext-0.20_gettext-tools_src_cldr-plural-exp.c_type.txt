void	O
cldr_plural_range_free	O
(	O
struct	O
cldr_plural_range_ty	struct(*(struct(enum(int,int),union(int,struct(double,int)))),*(struct(enum(int,int),union(int,struct(double,int)))))
*	O
range	O
)	O
{	O
if	O
(	O
range	O
->	O
start	*(char)
!=	O
range	O
->	O
end	*(struct(enum(int,int),union(int,struct(double,int))))
)	O
free	(*(void))->(void)
(	O
range	O
->	O
start	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
range	O
->	O
end	*(struct(enum(int,int),union(int,struct(double,int))))
)	O
;	O
free	(*(void))->(void)
(	O
range	O
)	O
;	O
}	O
void	O
cldr_plural_range_list_free	O
(	O
struct	O
cldr_plural_range_list_ty	struct(*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`))))),long,long)
*	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
)	O
{	O
while	O
(	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
nitems	long
--	O
>	O
0	int
)	O
cldr_plural_range_free	O
(	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
items	*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`)))))
[	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
nitems	long
]	O
)	O
;	O
free	(*(void))->(void)
(	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
items	*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`)))))
)	O
;	O
free	(*(void))->(void)
(	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
)	O
;	O
}	O
void	O
cldr_plural_condition_free	O
(	O
struct	O
cldr_plural_condition_ty	O
*	O
condition	O
)	O
{	O
if	O
(	O
condition	O
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_CONDITION_AND	int
||	O
condition	O
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_CONDITION_OR	int
)	O
{	O
cldr_plural_condition_free	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
0	int
]	O
)	O
;	O
cldr_plural_condition_free	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
1	int
]	O
)	O
;	O
}	O
else	O
if	O
(	O
condition	O
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_CONDITION_RELATION	int
)	O
cldr_plural_relation_free	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
)	O
;	O
free	(*(void))->(void)
(	O
condition	O
)	O
;	O
}	O
void	O
cldr_plural_relation_free	O
(	O
struct	O
cldr_plural_relation_ty	struct(*(struct(int,int)),enum(int,int),*(struct(*(*(struct(*`,*`))),long,long)))
*	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
)	O
{	O
free	(*(void))->(void)
(	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
expression	*(struct(int,int))
)	O
;	O
cldr_plural_range_list_free	O
(	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
)	O
;	O
free	(*(void))->(void)
(	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
)	O
;	O
}	O
static	O
void	O
cldr_plural_rule_free	O
(	O
struct	O
cldr_plural_rule_ty	O
*	O
rule	O
)	O
{	O
free	(*(void))->(void)
(	O
rule	O
->	O
name	O
)	O
;	O
cldr_plural_condition_free	O
(	O
rule	O
->	O
condition	O
)	O
;	O
free	(*(void))->(void)
(	O
rule	O
)	O
;	O
}	O
void	O
cldr_plural_rule_list_free	O
(	O
struct	O
cldr_plural_rule_list_ty	O
*	O
rules	O
)	O
{	O
while	O
(	O
rules	O
->	O
nitems	long
--	O
>	O
0	int
)	O
cldr_plural_rule_free	O
(	O
rules	O
->	O
items	*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`)))))
[	O
rules	O
->	O
nitems	long
]	O
)	O
;	O
free	(*(void))->(void)
(	O
rules	O
->	O
items	*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`)))))
)	O
;	O
free	(*(void))->(void)
(	O
rules	O
)	O
;	O
}	O
struct	O
cldr_plural_rule_list_ty	O
*	O
cldr_plural_parse	O
(	O
const	O
char	O
*	O
input	O
)	O
{	O
struct	O
cldr_plural_parse_args	O
arg	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
arg	O
,	O
0	int
,	O
sizeof	O
(	O
struct	O
cldr_plural_parse_args	O
)	O
)	O
;	O
arg	O
.	O
cp	O
=	O
input	O
;	O
arg	O
.	O
cp_end	O
=	O
input	O
+	O
strlen	(*(char))->(long)
(	O
input	O
)	O
;	O
arg	O
.	O
result	O
=	O
XMALLOC	O
(	O
struct	O
cldr_plural_rule_list_ty	O
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
arg	O
.	O
result	O
,	O
0	int
,	O
sizeof	O
(	O
struct	O
cldr_plural_rule_list_ty	O
)	O
)	O
;	O
if	O
(	O
yyparse	O
(	O
&	O
arg	O
)	O
!=	O
0	int
)	O
return	O
NULL	O
;	O
return	O
arg	O
.	O
result	O
;	O
}	O
static	O
enum	O
cldr_plural_condition	enum(int,int,int,int,int)
eval_relation	O
(	O
struct	O
cldr_plural_relation_ty	struct(*(struct(int,int)),enum(int,int),*(struct(*(*(struct(*`,*`))),long,long)))
*	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
)	O
{	O
switch	O
(	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
expression	*(struct(int,int))
->	O
operand	int
)	O
{	O
case	O
'n'	O
:	O
case	O
'i'	O
:	O
{	O
size_t	long
i	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
nitems	long
;	O
i	O
++	O
)	O
{	O
struct	O
cldr_plural_range_ty	struct(*(struct(enum(int,int),union(int,struct(double,int)))),*(struct(enum(int,int),union(int,struct(double,int)))))
*	O
range	O
=	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
items	*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`)))))
[	O
i	O
]	O
;	O
if	O
(	O
range	O
->	O
start	*(char)
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_OPERAND_DECIMAL	int
)	O
{	O
int	O
truncated	O
=	O
(	O
int	O
)	O
range	O
->	O
start	*(char)
->	O
value	union(int,struct(double,int))
.	O
dval	struct(double,int)
.	O
d	double
;	O
range	O
->	O
start	*(char)
->	O
type	enum(int,int)
=	O
CLDR_PLURAL_OPERAND_INTEGER	int
;	O
range	O
->	O
start	*(char)
->	O
value	union(int,struct(double,int))
.	O
ival	int
=	O
range	O
->	O
start	*(char)
->	O
value	union(int,struct(double,int))
.	O
dval	struct(double,int)
.	O
d	double
==	O
truncated	O
?	O
truncated	O
:	O
truncated	O
+	O
1	int
;	O
}	O
if	O
(	O
range	O
->	O
end	*(struct(enum(int,int),union(int,struct(double,int))))
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_OPERAND_DECIMAL	int
)	O
{	O
range	O
->	O
end	*(struct(enum(int,int),union(int,struct(double,int))))
->	O
type	enum(int,int)
=	O
CLDR_PLURAL_OPERAND_INTEGER	int
;	O
range	O
->	O
end	*(struct(enum(int,int),union(int,struct(double,int))))
->	O
value	union(int,struct(double,int))
.	O
ival	int
=	O
(	O
int	O
)	O
(	O
range	O
->	O
end	*(struct(enum(int,int),union(int,struct(double,int))))
->	O
value	union(int,struct(double,int))
.	O
dval	struct(double,int)
.	O
d	double
)	O
;	O
}	O
}	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
expression	*(struct(int,int))
->	O
operand	int
=	O
'i'	O
;	O
}	O
break	O
;	O
case	O
'f'	O
:	O
case	O
't'	O
:	O
case	O
'v'	O
:	O
case	O
'w'	O
:	O
{	O
size_t	long
i	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
nitems	long
;	O
i	O
++	O
)	O
{	O
struct	O
cldr_plural_range_ty	struct(*(struct(enum(int,int),union(int,struct(double,int)))),*(struct(enum(int,int),union(int,struct(double,int)))))
*	O
range	O
=	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
items	*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`)))))
[	O
i	O
]	O
;	O
if	O
(	O
(	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_RELATION_EQUAL	int
&&	O
(	O
!	O
OPERAND_ZERO_P	O
(	O
range	O
->	O
start	*(char)
)	O
||	O
!	O
OPERAND_ZERO_P	O
(	O
range	O
->	O
end	*(struct(enum(int,int),union(int,struct(double,int))))
)	O
)	O
)	O
||	O
(	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_RELATION_NOT_EQUAL	int
&&	O
(	O
OPERAND_ZERO_P	O
(	O
range	O
->	O
start	*(char)
)	O
||	O
OPERAND_ZERO_P	O
(	O
range	O
->	O
end	*(struct(enum(int,int),union(int,struct(double,int))))
)	O
)	O
)	O
)	O
return	O
CLDR_PLURAL_CONDITION_FALSE	int
;	O
}	O
return	O
CLDR_PLURAL_CONDITION_TRUE	int
;	O
}	O
break	O
;	O
}	O
return	O
CLDR_PLURAL_CONDITION_RELATION	int
;	O
}	O
static	O
void	O
eval_condition	O
(	O
struct	O
cldr_plural_condition_ty	O
*	O
condition	O
)	O
{	O
if	O
(	O
condition	O
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_CONDITION_AND	int
)	O
{	O
eval_condition	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
0	int
]	O
)	O
;	O
eval_condition	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
1	int
]	O
)	O
;	O
if	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
0	int
]	O
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_CONDITION_FALSE	int
||	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
1	int
]	O
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_CONDITION_FALSE	int
)	O
{	O
cldr_plural_condition_free	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
0	int
]	O
)	O
;	O
cldr_plural_condition_free	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
1	int
]	O
)	O
;	O
condition	O
->	O
type	enum(int,int)
=	O
CLDR_PLURAL_CONDITION_FALSE	int
;	O
}	O
else	O
if	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
0	int
]	O
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_CONDITION_TRUE	int
&&	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
1	int
]	O
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_CONDITION_TRUE	int
)	O
{	O
cldr_plural_condition_free	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
0	int
]	O
)	O
;	O
cldr_plural_condition_free	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
1	int
]	O
)	O
;	O
condition	O
->	O
type	enum(int,int)
=	O
CLDR_PLURAL_CONDITION_TRUE	int
;	O
}	O
else	O
if	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
0	int
]	O
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_CONDITION_TRUE	int
)	O
{	O
struct	O
cldr_plural_condition_ty	O
*	O
original	O
=	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
1	int
]	O
;	O
cldr_plural_condition_free	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
0	int
]	O
)	O
;	O
condition	O
->	O
type	enum(int,int)
=	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
1	int
]	O
->	O
type	enum(int,int)
;	O
condition	O
->	O
value	union(int,struct(double,int))
=	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
1	int
]	O
->	O
value	union(int,struct(double,int))
;	O
free	(*(void))->(void)
(	O
original	O
)	O
;	O
}	O
else	O
if	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
1	int
]	O
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_CONDITION_TRUE	int
)	O
{	O
struct	O
cldr_plural_condition_ty	O
*	O
original	O
=	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
0	int
]	O
;	O
cldr_plural_condition_free	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
1	int
]	O
)	O
;	O
condition	O
->	O
type	enum(int,int)
=	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
0	int
]	O
->	O
type	enum(int,int)
;	O
condition	O
->	O
value	union(int,struct(double,int))
=	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
0	int
]	O
->	O
value	union(int,struct(double,int))
;	O
free	(*(void))->(void)
(	O
original	O
)	O
;	O
}	O
}	O
else	O
if	O
(	O
condition	O
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_CONDITION_OR	int
)	O
{	O
eval_condition	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
0	int
]	O
)	O
;	O
eval_condition	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
1	int
]	O
)	O
;	O
if	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
0	int
]	O
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_CONDITION_TRUE	int
||	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
1	int
]	O
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_CONDITION_TRUE	int
)	O
{	O
cldr_plural_condition_free	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
0	int
]	O
)	O
;	O
cldr_plural_condition_free	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
1	int
]	O
)	O
;	O
condition	O
->	O
type	enum(int,int)
=	O
CLDR_PLURAL_CONDITION_TRUE	int
;	O
}	O
else	O
if	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
0	int
]	O
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_CONDITION_FALSE	int
&&	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
1	int
]	O
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_CONDITION_FALSE	int
)	O
{	O
cldr_plural_condition_free	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
0	int
]	O
)	O
;	O
cldr_plural_condition_free	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
1	int
]	O
)	O
;	O
condition	O
->	O
type	enum(int,int)
=	O
CLDR_PLURAL_CONDITION_FALSE	int
;	O
}	O
else	O
if	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
0	int
]	O
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_CONDITION_FALSE	int
)	O
{	O
struct	O
cldr_plural_condition_ty	O
*	O
original	O
=	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
1	int
]	O
;	O
cldr_plural_condition_free	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
0	int
]	O
)	O
;	O
condition	O
->	O
type	enum(int,int)
=	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
1	int
]	O
->	O
type	enum(int,int)
;	O
condition	O
->	O
value	union(int,struct(double,int))
=	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
1	int
]	O
->	O
value	union(int,struct(double,int))
;	O
free	(*(void))->(void)
(	O
original	O
)	O
;	O
}	O
else	O
if	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
1	int
]	O
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_CONDITION_FALSE	int
)	O
{	O
struct	O
cldr_plural_condition_ty	O
*	O
original	O
=	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
0	int
]	O
;	O
cldr_plural_condition_free	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
1	int
]	O
)	O
;	O
condition	O
->	O
type	enum(int,int)
=	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
0	int
]	O
->	O
type	enum(int,int)
;	O
condition	O
->	O
value	union(int,struct(double,int))
=	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
0	int
]	O
->	O
value	union(int,struct(double,int))
;	O
free	(*(void))->(void)
(	O
original	O
)	O
;	O
}	O
}	O
else	O
{	O
enum	O
cldr_plural_condition	enum(int,int,int,int,int)
value	union(int,struct(double,int))
=	O
eval_relation	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
)	O
;	O
if	O
(	O
value	union(int,struct(double,int))
==	O
CLDR_PLURAL_CONDITION_TRUE	int
||	O
value	union(int,struct(double,int))
==	O
CLDR_PLURAL_CONDITION_FALSE	int
)	O
{	O
cldr_plural_relation_free	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
)	O
;	O
condition	O
->	O
type	enum(int,int)
=	O
value	union(int,struct(double,int))
;	O
}	O
}	O
}	O
static	O
int	O
find_largest_modulus	O
(	O
struct	O
cldr_plural_condition_ty	O
*	O
condition	O
)	O
{	O
if	O
(	O
condition	O
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_CONDITION_AND	int
||	O
condition	O
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_CONDITION_OR	int
)	O
{	O
int	O
modulus0	O
=	O
find_largest_modulus	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
0	int
]	O
)	O
;	O
int	O
modulus1	O
=	O
find_largest_modulus	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
1	int
]	O
)	O
;	O
return	O
MAX	O
(	O
modulus0	O
,	O
modulus1	O
)	O
;	O
}	O
else	O
if	O
(	O
condition	O
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_CONDITION_RELATION	int
)	O
return	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
expression	*(struct(int,int))
->	O
mod	int
;	O
else	O
return	O
0	int
;	O
}	O
static	O
int	O
find_largest_number	O
(	O
struct	O
cldr_plural_condition_ty	O
*	O
condition	O
)	O
{	O
if	O
(	O
condition	O
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_CONDITION_AND	int
||	O
condition	O
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_CONDITION_OR	int
)	O
{	O
int	O
number0	O
=	O
find_largest_number	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
0	int
]	O
)	O
;	O
int	O
number1	O
=	O
find_largest_number	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
1	int
]	O
)	O
;	O
return	O
MAX	O
(	O
number0	O
,	O
number1	O
)	O
;	O
}	O
else	O
if	O
(	O
condition	O
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_CONDITION_RELATION	int
)	O
{	O
int	O
number	O
=	O
0	int
;	O
size_t	long
i	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
nitems	long
;	O
i	O
++	O
)	O
{	O
struct	O
cldr_plural_operand_ty	struct(enum(int,int),union(int,struct(double,int)))
*	O
operand	int
;	O
operand	int
=	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
items	*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`)))))
[	O
i	O
]	O
->	O
end	*(struct(enum(int,int),union(int,struct(double,int))))
;	O
if	O
(	O
operand	int
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_OPERAND_INTEGER	int
&&	O
operand	int
->	O
value	union(int,struct(double,int))
.	O
ival	int
>	O
number	O
)	O
number	O
=	O
operand	int
->	O
value	union(int,struct(double,int))
.	O
ival	int
;	O
else	O
if	O
(	O
operand	int
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_OPERAND_DECIMAL	int
&&	O
operand	int
->	O
value	union(int,struct(double,int))
.	O
dval	struct(double,int)
.	O
d	double
>	O
number	O
)	O
number	O
=	O
(	O
int	O
)	O
operand	int
->	O
value	union(int,struct(double,int))
.	O
dval	struct(double,int)
.	O
d	double
;	O
}	O
return	O
number	O
;	O
}	O
else	O
return	O
0	int
;	O
}	O
static	O
bool	bool
apply_condition	O
(	O
struct	O
cldr_plural_condition_ty	O
*	O
condition	O
,	O
int	O
value	union(int,struct(double,int))
)	O
{	O
if	O
(	O
condition	O
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_CONDITION_AND	int
)	O
return	O
apply_condition	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
0	int
]	O
,	O
value	union(int,struct(double,int))
)	O
&&	O
apply_condition	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
1	int
]	O
,	O
value	union(int,struct(double,int))
)	O
;	O
else	O
if	O
(	O
condition	O
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_CONDITION_OR	int
)	O
return	O
apply_condition	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
0	int
]	O
,	O
value	union(int,struct(double,int))
)	O
||	O
apply_condition	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
1	int
]	O
,	O
value	union(int,struct(double,int))
)	O
;	O
else	O
if	O
(	O
condition	O
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_CONDITION_RELATION	int
)	O
{	O
struct	O
cldr_plural_relation_ty	struct(*(struct(int,int)),enum(int,int),*(struct(*(*(struct(*`,*`))),long,long)))
*	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
=	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
;	O
int	O
number	O
=	O
value	union(int,struct(double,int))
;	O
size_t	long
i	O
;	O
if	O
(	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
expression	*(struct(int,int))
->	O
mod	int
>	O
0	int
)	O
number	O
%=	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
expression	*(struct(int,int))
->	O
mod	int
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
nitems	long
;	O
i	O
++	O
)	O
{	O
struct	O
cldr_plural_range_ty	struct(*(struct(enum(int,int),union(int,struct(double,int)))),*(struct(enum(int,int),union(int,struct(double,int)))))
*	O
range	O
=	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
items	*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`)))))
[	O
i	O
]	O
;	O
if	O
(	O
range	O
->	O
start	*(char)
->	O
value	union(int,struct(double,int))
.	O
ival	int
<=	O
number	O
&&	O
number	O
<=	O
range	O
->	O
end	*(struct(enum(int,int),union(int,struct(double,int))))
->	O
value	union(int,struct(double,int))
.	O
ival	int
)	O
return	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_RELATION_EQUAL	int
;	O
}	O
return	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
type	enum(int,int)
!=	O
CLDR_PLURAL_RELATION_EQUAL	int
;	O
}	O
return	O
false	O
;	O
}	O
static	O
void	O
print_expression	O
(	O
struct	O
cldr_plural_expression_ty	struct(int,int)
*	O
expression	*(struct(int,int))
,	O
bool	bool
space	O
,	O
FILE	struct
*	O
fp	O
)	O
{	O
if	O
(	O
expression	*(struct(int,int))
->	O
mod	int
==	O
0	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	O
,	O
"n"	*(char)
)	O
;	O
else	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	O
,	O
space	O
?	O
"n %% %d"	*(char)
:	O
"n%%%d"	*(char)
,	O
expression	*(struct(int,int))
->	O
mod	int
)	O
;	O
}	O
static	O
void	O
print_relation	O
(	O
struct	O
cldr_plural_relation_ty	struct(*(struct(int,int)),enum(int,int),*(struct(*(*(struct(*`,*`))),long,long)))
*	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
,	O
enum	O
cldr_plural_condition	enum(int,int,int,int,int)
parent	O
,	O
bool	bool
space	O
,	O
FILE	struct
*	O
fp	O
)	O
{	O
if	O
(	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_RELATION_EQUAL	int
)	O
{	O
size_t	long
i	O
;	O
if	O
(	O
parent	O
==	O
CLDR_PLURAL_CONDITION_AND	int
&&	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
nitems	long
>	O
1	int
)	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'('	O
,	O
fp	O
)	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
nitems	long
;	O
i	O
++	O
)	O
{	O
struct	O
cldr_plural_range_ty	struct(*(struct(enum(int,int),union(int,struct(double,int)))),*(struct(enum(int,int),union(int,struct(double,int)))))
*	O
range	O
=	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
items	*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`)))))
[	O
i	O
]	O
;	O
if	O
(	O
i	O
>	O
0	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	O
,	O
" || "	*(char)
)	O
;	O
if	O
(	O
range	O
->	O
start	*(char)
->	O
value	union(int,struct(double,int))
.	O
ival	int
==	O
range	O
->	O
end	*(struct(enum(int,int),union(int,struct(double,int))))
->	O
value	union(int,struct(double,int))
.	O
ival	int
)	O
{	O
print_expression	O
(	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
expression	*(struct(int,int))
,	O
space	O
,	O
fp	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	O
,	O
space	O
&&	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
nitems	long
==	O
1	int
?	O
" == %d"	*(char)
:	O
"==%d"	*(char)
,	O
range	O
->	O
start	*(char)
->	O
value	union(int,struct(double,int))
.	O
ival	int
)	O
;	O
}	O
else	O
if	O
(	O
range	O
->	O
start	*(char)
->	O
value	union(int,struct(double,int))
.	O
ival	int
==	O
0	int
)	O
{	O
print_expression	O
(	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
expression	*(struct(int,int))
,	O
false	O
,	O
fp	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	O
,	O
"<=%d"	*(char)
,	O
range	O
->	O
end	*(struct(enum(int,int),union(int,struct(double,int))))
->	O
value	union(int,struct(double,int))
.	O
ival	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
parent	O
==	O
CLDR_PLURAL_CONDITION_OR	int
||	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
nitems	long
>	O
1	int
)	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'('	O
,	O
fp	O
)	O
;	O
print_expression	O
(	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
expression	*(struct(int,int))
,	O
false	O
,	O
fp	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	O
,	O
">=%d"	*(char)
,	O
range	O
->	O
start	*(char)
->	O
value	union(int,struct(double,int))
.	O
ival	int
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	O
,	O
" && "	*(char)
)	O
;	O
print_expression	O
(	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
expression	*(struct(int,int))
,	O
false	O
,	O
fp	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	O
,	O
"<=%d"	*(char)
,	O
range	O
->	O
end	*(struct(enum(int,int),union(int,struct(double,int))))
->	O
value	union(int,struct(double,int))
.	O
ival	int
)	O
;	O
if	O
(	O
parent	O
==	O
CLDR_PLURAL_CONDITION_OR	int
||	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
nitems	long
>	O
1	int
)	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
')'	O
,	O
fp	O
)	O
;	O
}	O
}	O
if	O
(	O
parent	O
==	O
CLDR_PLURAL_CONDITION_AND	int
&&	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
nitems	long
>	O
1	int
)	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
')'	O
,	O
fp	O
)	O
;	O
}	O
else	O
{	O
size_t	long
i	O
;	O
if	O
(	O
parent	O
==	O
CLDR_PLURAL_CONDITION_OR	int
&&	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
nitems	long
>	O
1	int
)	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'('	O
,	O
fp	O
)	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
nitems	long
;	O
i	O
++	O
)	O
{	O
struct	O
cldr_plural_range_ty	struct(*(struct(enum(int,int),union(int,struct(double,int)))),*(struct(enum(int,int),union(int,struct(double,int)))))
*	O
range	O
=	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
items	*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`)))))
[	O
i	O
]	O
;	O
if	O
(	O
i	O
>	O
0	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	O
,	O
" && "	*(char)
)	O
;	O
if	O
(	O
range	O
->	O
start	*(char)
->	O
value	union(int,struct(double,int))
.	O
ival	int
==	O
range	O
->	O
end	*(struct(enum(int,int),union(int,struct(double,int))))
->	O
value	union(int,struct(double,int))
.	O
ival	int
)	O
{	O
print_expression	O
(	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
expression	*(struct(int,int))
,	O
space	O
,	O
fp	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	O
,	O
space	O
&&	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
nitems	long
==	O
1	int
?	O
" != %d"	*(char)
:	O
"!=%d"	*(char)
,	O
range	O
->	O
start	*(char)
->	O
value	union(int,struct(double,int))
.	O
ival	int
)	O
;	O
}	O
else	O
if	O
(	O
range	O
->	O
start	*(char)
->	O
value	union(int,struct(double,int))
.	O
ival	int
==	O
0	int
)	O
{	O
print_expression	O
(	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
expression	*(struct(int,int))
,	O
false	O
,	O
fp	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	O
,	O
">%d"	*(char)
,	O
range	O
->	O
end	*(struct(enum(int,int),union(int,struct(double,int))))
->	O
value	union(int,struct(double,int))
.	O
ival	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
parent	O
==	O
CLDR_PLURAL_CONDITION_AND	int
||	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
nitems	long
>	O
1	int
)	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'('	O
,	O
fp	O
)	O
;	O
print_expression	O
(	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
expression	*(struct(int,int))
,	O
false	O
,	O
fp	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	O
,	O
"<%d"	*(char)
,	O
range	O
->	O
start	*(char)
->	O
value	union(int,struct(double,int))
.	O
ival	int
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	O
,	O
" || "	*(char)
)	O
;	O
print_expression	O
(	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
expression	*(struct(int,int))
,	O
false	O
,	O
fp	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	O
,	O
">%d"	*(char)
,	O
range	O
->	O
end	*(struct(enum(int,int),union(int,struct(double,int))))
->	O
value	union(int,struct(double,int))
.	O
ival	int
)	O
;	O
if	O
(	O
parent	O
==	O
CLDR_PLURAL_CONDITION_AND	int
||	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
nitems	long
>	O
1	int
)	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
')'	O
,	O
fp	O
)	O
;	O
}	O
}	O
if	O
(	O
parent	O
==	O
CLDR_PLURAL_CONDITION_OR	int
&&	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
nitems	long
>	O
1	int
)	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
')'	O
,	O
fp	O
)	O
;	O
}	O
}	O
static	O
bool	bool
print_condition	O
(	O
struct	O
cldr_plural_condition_ty	O
*	O
condition	O
,	O
enum	O
cldr_plural_condition	enum(int,int,int,int,int)
parent	O
,	O
bool	bool
space	O
,	O
FILE	struct
*	O
fp	O
)	O
{	O
if	O
(	O
condition	O
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_CONDITION_AND	int
)	O
{	O
if	O
(	O
parent	O
==	O
CLDR_PLURAL_CONDITION_OR	int
)	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'('	O
,	O
fp	O
)	O
;	O
print_condition	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
0	int
]	O
,	O
CLDR_PLURAL_CONDITION_AND	int
,	O
false	O
,	O
fp	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	O
,	O
" && "	*(char)
)	O
;	O
print_condition	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
1	int
]	O
,	O
CLDR_PLURAL_CONDITION_AND	int
,	O
false	O
,	O
fp	O
)	O
;	O
if	O
(	O
parent	O
==	O
CLDR_PLURAL_CONDITION_OR	int
)	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
')'	O
,	O
fp	O
)	O
;	O
return	O
true	O
;	O
}	O
else	O
if	O
(	O
condition	O
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_CONDITION_OR	int
)	O
{	O
if	O
(	O
parent	O
==	O
CLDR_PLURAL_CONDITION_AND	int
)	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'('	O
,	O
fp	O
)	O
;	O
print_condition	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
0	int
]	O
,	O
CLDR_PLURAL_CONDITION_OR	int
,	O
false	O
,	O
fp	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	O
,	O
" || "	*(char)
)	O
;	O
print_condition	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
1	int
]	O
,	O
CLDR_PLURAL_CONDITION_OR	int
,	O
false	O
,	O
fp	O
)	O
;	O
if	O
(	O
parent	O
==	O
CLDR_PLURAL_CONDITION_AND	int
)	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
')'	O
,	O
fp	O
)	O
;	O
return	O
true	O
;	O
}	O
else	O
if	O
(	O
condition	O
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_CONDITION_RELATION	int
)	O
{	O
print_relation	O
(	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
,	O
parent	O
,	O
space	O
,	O
fp	O
)	O
;	O
return	O
true	O
;	O
}	O
return	O
false	O
;	O
}	O
static	O
bool	bool
print_condition_negation	O
(	O
struct	O
cldr_plural_condition_ty	O
*	O
condition	O
,	O
FILE	struct
*	O
fp	O
)	O
{	O
if	O
(	O
condition	O
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_CONDITION_RELATION	int
&&	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_RELATION_EQUAL	int
&&	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
nitems	long
==	O
1	int
&&	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
items	*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`)))))
[	O
0	int
]	O
->	O
start	*(char)
==	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
items	*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`)))))
[	O
0	int
]	O
->	O
end	*(struct(enum(int,int),union(int,struct(double,int))))
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	O
,	O
"nplurals=2; plural=(n != %d);\n"	*(char)
,	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
items	*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`)))))
[	O
0	int
]	O
->	O
start	*(char)
->	O
value	union(int,struct(double,int))
.	O
ival	int
)	O
;	O
return	O
true	O
;	O
}	O
return	O
false	O
;	O
}	O
static	O
bool	bool
print_condition_greater	O
(	O
struct	O
cldr_plural_condition_ty	O
*	O
condition	O
,	O
FILE	struct
*	O
fp	O
)	O
{	O
if	O
(	O
condition	O
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_CONDITION_RELATION	int
&&	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
type	enum(int,int)
==	O
CLDR_PLURAL_RELATION_EQUAL	int
)	O
{	O
int	O
last	O
=	O
-	O
1	int
;	O
size_t	long
i	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
nitems	long
;	O
i	O
++	O
)	O
{	O
struct	O
cldr_plural_range_ty	struct(*(struct(enum(int,int),union(int,struct(double,int)))),*(struct(enum(int,int),union(int,struct(double,int)))))
*	O
range	O
=	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
items	*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`)))))
[	O
i	O
]	O
;	O
if	O
(	O
range	O
->	O
start	*(char)
->	O
type	enum(int,int)
!=	O
CLDR_PLURAL_OPERAND_INTEGER	int
||	O
range	O
->	O
end	*(struct(enum(int,int),union(int,struct(double,int))))
->	O
type	enum(int,int)
!=	O
CLDR_PLURAL_OPERAND_INTEGER	int
||	O
range	O
->	O
start	*(char)
->	O
value	union(int,struct(double,int))
.	O
ival	int
!=	O
last	O
+	O
1	int
)	O
break	O
;	O
last	O
=	O
range	O
->	O
end	*(struct(enum(int,int),union(int,struct(double,int))))
->	O
value	union(int,struct(double,int))
.	O
ival	int
;	O
}	O
if	O
(	O
i	O
==	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
nitems	long
)	O
{	O
struct	O
cldr_plural_range_ty	struct(*(struct(enum(int,int),union(int,struct(double,int)))),*(struct(enum(int,int),union(int,struct(double,int)))))
*	O
range	O
=	O
condition	O
->	O
value	union(int,struct(double,int))
.	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
->	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
items	*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`)))))
[	O
i	O
-	O
1	int
]	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	O
,	O
"nplurals=2; plural=(n > %d);\n"	*(char)
,	O
range	O
->	O
end	*(struct(enum(int,int),union(int,struct(double,int))))
->	O
value	union(int,struct(double,int))
.	O
ival	int
)	O
;	O
return	O
true	O
;	O
}	O
}	O
return	O
false	O
;	O
}	O
typedef	O
bool	bool
(	O
*	O
print_condition_function_ty	O
)	O
(	O
struct	O
cldr_plural_condition_ty	O
*	O
,	O
FILE	struct
*	O
)	O
;	O
static	O
print_condition_function_ty	O
print_condition_functions	O
[	O
]	O
=	O
{	O
print_condition_negation	O
,	O
print_condition_greater	O
}	O
;	O
void	O
cldr_plural_rule_list_print	O
(	O
struct	O
cldr_plural_rule_list_ty	O
*	O
rules	O
,	O
FILE	struct
*	O
fp	O
)	O
{	O
size_t	long
i	O
;	O
size_t	long
count	O
;	O
size_t	long
nplurals	O
;	O
int	O
modulus_max	O
=	O
0	int
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
rules	O
->	O
nitems	long
;	O
i	O
++	O
)	O
{	O
struct	O
cldr_plural_rule_ty	O
*	O
rule	O
=	O
rules	O
->	O
items	*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`)))))
[	O
i	O
]	O
;	O
eval_condition	O
(	O
rule	O
->	O
condition	O
)	O
;	O
}	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
rules	O
->	O
nitems	long
;	O
i	O
++	O
)	O
{	O
struct	O
cldr_plural_rule_ty	O
*	O
rule	O
=	O
rules	O
->	O
items	*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`)))))
[	O
i	O
]	O
;	O
int	O
modulus	O
=	O
find_largest_modulus	O
(	O
rule	O
->	O
condition	O
)	O
;	O
int	O
number	O
=	O
find_largest_number	O
(	O
rule	O
->	O
condition	O
)	O
;	O
if	O
(	O
modulus	O
>=	O
number	O
&&	O
modulus	O
>	O
modulus_max	O
)	O
modulus_max	O
=	O
modulus	O
;	O
}	O
if	O
(	O
modulus_max	O
>	O
0	int
)	O
{	O
bool	bool
*	O
values	O
=	O
XNMALLOC	O
(	O
modulus_max	O
,	O
bool	bool
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
values	O
,	O
0	int
,	O
sizeof	O
(	O
bool	bool
)	O
*	O
modulus_max	O
)	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
rules	O
->	O
nitems	long
;	O
i	O
++	O
)	O
{	O
struct	O
cldr_plural_rule_ty	O
*	O
rule	O
=	O
rules	O
->	O
items	*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`)))))
[	O
i	O
]	O
;	O
int	O
j	O
;	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
modulus_max	O
;	O
j	O
++	O
)	O
{	O
bool	bool
result	O
=	O
apply_condition	O
(	O
rule	O
->	O
condition	O
,	O
j	O
+	O
1	int
)	O
;	O
if	O
(	O
result	O
)	O
values	O
[	O
j	O
]	O
=	O
true	O
;	O
}	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
modulus_max	O
;	O
j	O
++	O
)	O
if	O
(	O
values	O
[	O
j	O
]	O
==	O
false	O
)	O
break	O
;	O
if	O
(	O
j	O
==	O
modulus_max	O
)	O
break	O
;	O
}	O
free	(*(void))->(void)
(	O
values	O
)	O
;	O
while	O
(	O
i	O
<	O
rules	O
->	O
nitems	long
)	O
cldr_plural_rule_free	O
(	O
rules	O
->	O
items	*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`)))))
[	O
--	O
rules	O
->	O
nitems	long
]	O
)	O
;	O
}	O
for	O
(	O
i	O
=	O
0	int
,	O
nplurals	O
=	O
1	int
;	O
i	O
<	O
rules	O
->	O
nitems	long
;	O
i	O
++	O
)	O
if	O
(	O
RULE_PRINTABLE_P	O
(	O
rules	O
->	O
items	*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`)))))
[	O
i	O
]	O
)	O
)	O
nplurals	O
++	O
;	O
if	O
(	O
nplurals	O
==	O
1	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	O
,	O
"nplurals=1; plural=0;\n"	*(char)
)	O
;	O
return	O
;	O
}	O
if	O
(	O
nplurals	O
==	O
2	int
)	O
{	O
struct	O
cldr_plural_condition_ty	O
*	O
condition	O
;	O
size_t	long
j	O
;	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
rules	O
->	O
nitems	long
;	O
j	O
++	O
)	O
if	O
(	O
RULE_PRINTABLE_P	O
(	O
rules	O
->	O
items	*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`)))))
[	O
j	O
]	O
)	O
)	O
break	O
;	O
condition	O
=	O
rules	O
->	O
items	*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`)))))
[	O
j	O
]	O
->	O
condition	O
;	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
SIZEOF	O
(	O
print_condition_functions	O
)	O
;	O
j	O
++	O
)	O
if	O
(	O
print_condition_functions	O
[	O
j	O
]	O
(	O
condition	O
,	O
fp	O
)	O
)	O
return	O
;	O
}	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	O
,	O
"nplurals=%lu; plural=("	*(char)
,	O
(	O
unsigned	O
long	O
)	O
nplurals	O
)	O
;	O
for	O
(	O
i	O
=	O
0	int
,	O
count	O
=	O
0	int
;	O
i	O
<	O
rules	O
->	O
nitems	long
;	O
i	O
++	O
)	O
{	O
struct	O
cldr_plural_rule_ty	O
*	O
rule	O
=	O
rules	O
->	O
items	*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`)))))
[	O
i	O
]	O
;	O
if	O
(	O
print_condition	O
(	O
rule	O
->	O
condition	O
,	O
CLDR_PLURAL_CONDITION_FALSE	int
,	O
nplurals	O
==	O
2	int
,	O
fp	O
)	O
&&	O
rules	O
->	O
nitems	long
>	O
1	int
)	O
{	O
bool	bool
printable_left	O
=	O
false	O
;	O
size_t	long
j	O
;	O
for	O
(	O
j	O
=	O
i	O
+	O
1	int
;	O
j	O
<	O
rules	O
->	O
nitems	long
;	O
j	O
++	O
)	O
if	O
(	O
RULE_PRINTABLE_P	O
(	O
rules	O
->	O
items	*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`)))))
[	O
j	O
]	O
)	O
)	O
printable_left	O
=	O
true	O
;	O
if	O
(	O
i	O
<	O
rules	O
->	O
nitems	long
-	O
1	int
&&	O
printable_left	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	O
,	O
" ? %lu : "	*(char)
,	O
(	O
unsigned	O
long	O
)	O
count	O
++	O
)	O
;	O
}	O
}	O
if	O
(	O
rules	O
->	O
nitems	long
>	O
1	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	O
,	O
" ? %lu : %lu"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
count	O
,	O
(	O
unsigned	O
long	O
)	O
(	O
count	O
+	O
1	int
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	O
,	O
");\n"	*(char)
)	O
;	O
}	O
