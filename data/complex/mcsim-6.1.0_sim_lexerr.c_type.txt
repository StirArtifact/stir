void	O
ReportError	O
(	O
PINPUTBUF	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),*(char),int,int,int,*(void)))
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),*(char),int,int,int,*(void)))
,	O
WORD	int
wCode	O
,	O
PSTR	*(char)
szMsg	O
,	O
PSTR	*(char)
szAltMsg	O
)	O
{	O
char	O
cNull	O
=	O
'\0'	O
;	O
BOOL	int
bFatal	O
=	O
wCode	O
&	O
RE_FATAL	O
;	O
BOOL	int
bWarning	O
=	O
wCode	O
&	O
RE_WARNING	O
;	O
wCode	O
&=	O
~	O
(	O
RE_FATAL	O
|	O
RE_WARNING	O
)	O
;	O
if	O
(	O
!	O
szMsg	O
)	O
szMsg	O
=	O
&	O
cNull	O
;	O
if	O
(	O
wCode	O
)	O
{	O
if	O
(	O
bWarning	O
)	O
printf	(*(char))->(int)
(	O
"Warning: "	*(char)
)	O
;	O
else	O
{	O
printf	(*(char))->(int)
(	O
"Error: "	*(char)
)	O
;	O
bFatal	O
|=	O
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),*(char),int,int,int,*(void)))
&&	O
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),*(char),int,int,int,*(void)))
->	O
cErrors	int
++	O
>	O
MAX_ERRORS	O
)	O
)	O
;	O
}	O
}	O
if	O
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),*(char),int,int,int,*(void)))
)	O
{	O
if	O
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),*(char),int,int,int,*(void)))
->	O
pfileIn	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
||	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),*(char),int,int,int,*(void)))
->	O
iLNPrev	int
)	O
{	O
printf	(*(char))->(int)
(	O
"line %d: "	*(char)
,	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),*(char),int,int,int,*(void)))
->	O
iLineNum	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
wCode	O
!=	O
RE_FILENOTFOUND	O
)	O
{	O
PSTRLEX	array(char)
szTmp	O
;	O
szTmp	O
[	O
MAX_LEX	int
-	O
1	int
]	O
=	O
'\0'	O
;	O
printf	(*(char))->(int)
(	O
"'%s'...\n  "	*(char)
,	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
szTmp	O
,	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),*(char),int,int,int,*(void)))
->	O
pbufOrg	*(char)
,	O
MAX_LEX	int
-	O
1	int
)	O
)	O
;	O
}	O
}	O
}	O
switch	O
(	O
wCode	O
)	O
{	O
case	O
0	int
:	O
break	O
;	O
default	O
:	O
printf	(*(char))->(int)
(	O
"Unknown error code %x: %s"	*(char)
,	O
wCode	O
,	O
szMsg	O
)	O
;	O
case	O
RE_INIT	O
:	O
printf	(*(char))->(int)
(	O
"Initialization error."	*(char)
)	O
;	O
break	O
;	O
case	O
RE_FILENOTFOUND	O
:	O
printf	(*(char))->(int)
(	O
"File not found \"%s\"."	*(char)
,	O
szMsg	O
)	O
;	O
break	O
;	O
case	O
RE_CANNOTOPEN	O
:	O
printf	(*(char))->(int)
(	O
"Cannot open file \"%s\"."	*(char)
,	O
szMsg	O
)	O
;	O
break	O
;	O
case	O
RE_OUTOFMEM	O
:	O
printf	(*(char))->(int)
(	O
"Out of memory in %s()."	*(char)
,	O
szMsg	O
)	O
;	O
break	O
;	O
case	O
RE_READERROR	O
:	O
printf	(*(char))->(int)
(	O
"%s file cannot be read\n"	*(char)
,	O
szMsg	O
)	O
;	O
break	O
;	O
case	O
RE_UNEXPECTED	O
:	O
printf	(*(char))->(int)
(	O
"Unexpected character '%c' in input file."	*(char)
,	O
*	O
szMsg	O
)	O
;	O
break	O
;	O
case	O
RE_UNEXPNUMBER	O
:	O
printf	(*(char))->(int)
(	O
"Unexpected number %s in input file."	*(char)
,	O
szMsg	O
)	O
;	O
break	O
;	O
case	O
RE_EXPECTED	O
:	O
printf	(*(char))->(int)
(	O
"Expected '%c' before '%c'."	*(char)
,	O
szMsg	O
[	O
1	int
]	O
,	O
szMsg	O
[	O
0	int
]	O
)	O
;	O
break	O
;	O
case	O
RE_LEXEXPECTED	O
:	O
printf	(*(char))->(int)
(	O
"Expected <%s>"	*(char)
,	O
szMsg	O
)	O
;	O
if	O
(	O
szAltMsg	O
)	O
printf	(*(char))->(int)
(	O
" before '%s'"	*(char)
,	O
szAltMsg	O
)	O
;	O
break	O
;	O
case	O
RE_SYNTAXERR	O
:	O
printf	(*(char))->(int)
(	O
"Syntax error %s"	*(char)
,	O
szMsg	O
)	O
;	O
break	O
;	O
case	O
RE_BADCONTEXT	O
:	O
printf	(*(char))->(int)
(	O
"'%s' used in invalid context."	*(char)
,	O
szMsg	O
)	O
;	O
break	O
;	O
case	O
RE_TOOMANYLEVELS	O
:	O
printf	(*(char))->(int)
(	O
"Too many levels"	*(char)
)	O
;	O
break	O
;	O
case	O
RE_TOOMANYINST	O
:	O
printf	(*(char))->(int)
(	O
"Too many instances at level %s"	*(char)
,	O
szMsg	O
)	O
;	O
break	O
;	O
case	O
RE_OPENLEVEL	O
:	O
printf	(*(char))->(int)
(	O
"Unclosed level statement"	*(char)
)	O
;	O
break	O
;	O
case	O
RE_LEVINEXPT	O
:	O
printf	(*(char))->(int)
(	O
"Level statement enclosed in Simulation (Experiment) statement"	*(char)
)	O
;	O
break	O
;	O
case	O
RE_TOOMANYPVARS	O
:	O
printf	(*(char))->(int)
(	O
"Too many variables in 'Print(...)' statement"	*(char)
)	O
;	O
break	O
;	O
case	O
RE_EQNTOOLONG	O
:	O
printf	(*(char))->(int)
(	O
"Equation is too long.  Possibly missing terminator."	*(char)
)	O
;	O
break	O
;	O
case	O
RE_UNDEFINED	O
:	O
printf	(*(char))->(int)
(	O
"Undefined identifier '%s'."	*(char)
,	O
szMsg	O
)	O
;	O
break	O
;	O
case	O
RE_TYPENOTMCMC	O
:	O
printf	(*(char))->(int)
(	O
"The level statement is permitted only in MCMC simulations.\n"	*(char)
)	O
;	O
break	O
;	O
case	O
RE_ERRORSINEXP	O
:	O
printf	(*(char))->(int)
(	O
"Bad definition of experiment %d\n"	*(char)
,	O
*	O
(	O
PINT	*(int)
)	O
szMsg	O
)	O
;	O
break	O
;	O
case	O
RE_NOOUTPUTS	O
:	O
printf	(*(char))->(int)
(	O
"Simulation (Experiment) %d has no outputs specified\n"	*(char)
,	O
*	O
(	O
PINT	*(int)
)	O
szMsg	O
)	O
;	O
break	O
;	O
case	O
RE_POSITIVE	O
:	O
printf	(*(char))->(int)
(	O
"Positive number expected."	*(char)
)	O
;	O
break	O
;	O
case	O
RE_SPECERR	O
:	O
printf	(*(char))->(int)
(	O
"in specification: %s"	*(char)
,	O
szMsg	O
)	O
;	O
break	O
;	O
case	O
RE_INSUF_POINTS	O
:	O
printf	(*(char))->(int)
(	O
"Insufficient points in file \"%s\"\n"	*(char)
,	O
szMsg	O
)	O
;	O
break	O
;	O
case	O
RE_MAXMIN_RANGE	O
:	O
printf	(*(char))->(int)
(	O
"Max is less than min\n"	*(char)
)	O
;	O
break	O
;	O
case	O
RE_OUTISRESTART	O
:	O
printf	(*(char))->(int)
(	O
"Output and restart files have the same name\n"	*(char)
)	O
;	O
break	O
;	O
}	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
if	O
(	O
szAltMsg	O
&&	O
wCode	O
!=	O
RE_LEXEXPECTED	O
)	O
printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
szAltMsg	O
)	O
;	O
if	O
(	O
bFatal	O
)	O
{	O
if	O
(	O
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),*(char),int,int,int,*(void)))
!=	O
NULL	O
)	O
&&	O
(	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),*(char),int,int,int,*(void)))
->	O
pInfo	*(void)
!=	O
NULL	O
)	O
)	O
FreeLevels	O
(	O
(	O
PANALYSIS	O
)	O
pibIn	*(struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),*(char),int,int,int,*(void)))
->	O
pInfo	*(void)
)	O
;	O
printf	(*(char))->(int)
(	O
"\nFatal errors.  Exiting.\n\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
wCode	O
)	O
;	O
}	O
}	O
void	O
ReportRunTimeError	O
(	O
PANALYSIS	O
panal	O
,	O
WORD	int
wCode	O
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
ap	O
;	O
PSTR	*(char)
szMsg1	O
,	O
szMsg2	O
,	O
szMsg3	O
;	O
BOOL	int
bFatal	O
=	O
wCode	O
&	O
RE_FATAL	O
;	O
BOOL	int
bWarning	O
=	O
wCode	O
&	O
RE_WARNING	O
;	O
wCode	O
&=	O
~	O
(	O
RE_FATAL	O
|	O
RE_WARNING	O
)	O
;	O
if	O
(	O
wCode	O
)	O
bWarning	O
?	O
(	O
printf	(*(char))->(int)
(	O
"Warning: "	*(char)
)	O
)	O
:	O
(	O
printf	(*(char))->(int)
(	O
"Fatal error: "	*(char)
)	O
)	O
;	O
va_start	O
(	O
ap	O
,	O
wCode	O
)	O
;	O
switch	O
(	O
wCode	O
)	O
{	O
case	O
0	int
:	O
break	O
;	O
default	O
:	O
printf	(*(char))->(int)
(	O
"Unknown error code %x"	*(char)
,	O
wCode	O
)	O
;	O
break	O
;	O
case	O
RE_OUTOFMEM	O
:	O
szMsg1	O
=	O
va_arg	O
(	O
ap	O
,	O
PSTR	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"Out of memory in %s()."	*(char)
,	O
szMsg1	O
)	O
;	O
break	O
;	O
case	O
RE_CANNOTOPEN	O
:	O
szMsg1	O
=	O
va_arg	O
(	O
ap	O
,	O
PSTR	*(char)
)	O
;	O
szMsg2	O
=	O
va_arg	O
(	O
ap	O
,	O
PSTR	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"Cannot open file \"%s\" in %s()."	*(char)
,	O
szMsg1	O
,	O
szMsg2	O
)	O
;	O
break	O
;	O
case	O
RE_BADNORMALSD	O
:	O
szMsg1	O
=	O
va_arg	O
(	O
ap	O
,	O
PSTR	*(char)
)	O
;	O
szMsg2	O
=	O
va_arg	O
(	O
ap	O
,	O
PSTR	*(char)
)	O
;	O
szMsg3	O
=	O
va_arg	O
(	O
ap	O
,	O
PSTR	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"SD of normal variate %s = %s in %s()."	*(char)
,	O
szMsg1	O
,	O
szMsg2	O
,	O
szMsg3	O
)	O
;	O
break	O
;	O
case	O
RE_BADLOGNORMALSD	O
:	O
szMsg1	O
=	O
va_arg	O
(	O
ap	O
,	O
PSTR	*(char)
)	O
;	O
szMsg2	O
=	O
va_arg	O
(	O
ap	O
,	O
PSTR	*(char)
)	O
;	O
szMsg3	O
=	O
va_arg	O
(	O
ap	O
,	O
PSTR	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"SD of lognormal variate %s = %s in %s()."	*(char)
,	O
szMsg1	O
,	O
szMsg2	O
,	O
szMsg3	O
)	O
;	O
break	O
;	O
case	O
RE_BADLOGNORMALMEAN	O
:	O
szMsg1	O
=	O
va_arg	O
(	O
ap	O
,	O
PSTR	*(char)
)	O
;	O
szMsg2	O
=	O
va_arg	O
(	O
ap	O
,	O
PSTR	*(char)
)	O
;	O
szMsg3	O
=	O
va_arg	O
(	O
ap	O
,	O
PSTR	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"Mean of lognormal variate %s = %s in %s()."	*(char)
,	O
szMsg1	O
,	O
szMsg2	O
,	O
szMsg3	O
)	O
;	O
break	O
;	O
case	O
RE_BADUNIFORMDIST	O
:	O
szMsg1	O
=	O
va_arg	O
(	O
ap	O
,	O
PSTR	*(char)
)	O
;	O
szMsg2	O
=	O
va_arg	O
(	O
ap	O
,	O
PSTR	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"Max and min of uniform variate %s are equal or inverted in %s()."	*(char)
,	O
szMsg1	O
,	O
szMsg2	O
)	O
;	O
break	O
;	O
case	O
RE_UNKNOWNDIST	O
:	O
szMsg1	O
=	O
va_arg	O
(	O
ap	O
,	O
PSTR	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"Unknown distribution in %s()."	*(char)
,	O
szMsg1	O
)	O
;	O
break	O
;	O
case	O
RE_BADMODEL	O
:	O
printf	(*(char))->(int)
(	O
"Bad value in output; model is not computable.\n"	*(char)
)	O
;	O
break	O
;	O
case	O
RE_DUPVARINEXPRT	O
:	O
szMsg1	O
=	O
va_arg	O
(	O
ap	O
,	O
PSTR	*(char)
)	O
;	O
szMsg2	O
=	O
va_arg	O
(	O
ap	O
,	O
PSTR	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"Variable %s appears in two or more '%s' statements.\n"	*(char)
,	O
szMsg1	O
,	O
szMsg2	O
)	O
;	O
break	O
;	O
}	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
va_end	O
(	O
ap	O
)	O
;	O
if	O
(	O
bFatal	O
)	O
{	O
if	O
(	O
panal	O
!=	O
NULL	O
)	O
FreeLevels	O
(	O
panal	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\nFatal errors.  Exiting.\n\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
wCode	O
)	O
;	O
}	O
}	O
