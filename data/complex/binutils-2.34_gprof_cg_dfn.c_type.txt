typedef	O
struct	O
{	O
Sym	O
*	O
sym	*(struct)
;	O
int	O
cycle_top	O
;	O
}	O
DFN_Stack	O
;	O
static	O
bfd_boolean	int
is_numbered	O
(	O
Sym	O
*	O
)	O
;	O
static	O
bfd_boolean	int
is_busy	O
(	O
Sym	O
*	O
)	O
;	O
static	O
void	O
find_cycle	O
(	O
Sym	O
*	O
)	O
;	O
static	O
void	O
pre_visit	O
(	O
Sym	O
*	O
)	O
;	O
static	O
void	O
post_visit	O
(	O
Sym	O
*	O
)	O
;	O
DFN_Stack	O
*	O
dfn_stack	O
=	O
NULL	O
;	O
int	O
dfn_maxdepth	O
=	O
0	int
;	O
int	O
dfn_depth	O
=	O
0	int
;	O
int	O
dfn_counter	O
=	O
DFN_NAN	O
;	O
static	O
bfd_boolean	int
is_numbered	O
(	O
Sym	O
*	O
child	O
)	O
{	O
return	O
child	O
->	O
cg	O
.	O
top_order	O
!=	O
DFN_NAN	O
&&	O
child	O
->	O
cg	O
.	O
top_order	O
!=	O
DFN_BUSY	O
;	O
}	O
static	O
bfd_boolean	int
is_busy	O
(	O
Sym	O
*	O
child	O
)	O
{	O
if	O
(	O
child	O
->	O
cg	O
.	O
top_order	O
==	O
DFN_NAN	O
)	O
{	O
return	O
FALSE	O
;	O
}	O
return	O
TRUE	int
;	O
}	O
static	O
void	O
find_cycle	O
(	O
Sym	O
*	O
child	O
)	O
{	O
Sym	O
*	O
head	O
=	O
0	int
;	O
Sym	O
*	O
tail	O
;	O
int	O
cycle_top	O
;	O
int	O
cycle_index	O
;	O
for	O
(	O
cycle_top	O
=	O
dfn_depth	O
;	O
cycle_top	O
>	O
0	int
;	O
--	O
cycle_top	O
)	O
{	O
head	O
=	O
dfn_stack	O
[	O
cycle_top	O
]	O
.	O
sym	*(struct)
;	O
if	O
(	O
child	O
==	O
head	O
)	O
{	O
break	O
;	O
}	O
if	O
(	O
child	O
->	O
cg	O
.	O
cyc	O
.	O
head	O
!=	O
child	O
&&	O
child	O
->	O
cg	O
.	O
cyc	O
.	O
head	O
==	O
head	O
)	O
{	O
break	O
;	O
}	O
}	O
if	O
(	O
cycle_top	O
<=	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"[find_cycle] couldn't find head of cycle\n"	*(char)
)	O
;	O
done	O
(	O
1	int
)	O
;	O
}	O
if	O
(	O
debug_level	O
&	O
DFNDEBUG	O
)	O
{	O
printf	(*(char))->(int)
(	O
"[find_cycle] dfn_depth %d cycle_top %d "	*(char)
,	O
dfn_depth	O
,	O
cycle_top	O
)	O
;	O
if	O
(	O
head	O
)	O
{	O
print_name	O
(	O
head	O
)	O
;	O
}	O
else	O
{	O
printf	(*(char))->(int)
(	O
"<unknown>"	*(char)
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
}	O
if	O
(	O
cycle_top	O
==	O
dfn_depth	O
)	O
{	O
DBG	O
(	O
DFNDEBUG	O
,	O
printf	(*(char))->(int)
(	O
"[find_cycle] "	*(char)
)	O
;	O
print_name	O
(	O
child	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
)	O
;	O
}	O
else	O
{	O
for	O
(	O
tail	O
=	O
head	O
;	O
tail	O
->	O
cg	O
.	O
cyc	O
.	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
tail	O
=	O
tail	O
->	O
cg	O
.	O
cyc	O
.	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
{	O
DBG	O
(	O
DFNDEBUG	O
,	O
printf	(*(char))->(int)
(	O
"[find_cycle] tail "	*(char)
)	O
;	O
print_name	O
(	O
tail	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
)	O
;	O
}	O
if	O
(	O
head	O
->	O
cg	O
.	O
cyc	O
.	O
head	O
!=	O
head	O
)	O
{	O
head	O
=	O
head	O
->	O
cg	O
.	O
cyc	O
.	O
head	O
;	O
DBG	O
(	O
DFNDEBUG	O
,	O
printf	(*(char))->(int)
(	O
"[find_cycle] new cyclehead "	*(char)
)	O
;	O
print_name	O
(	O
head	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
)	O
;	O
}	O
for	O
(	O
cycle_index	O
=	O
cycle_top	O
+	O
1	int
;	O
cycle_index	O
<=	O
dfn_depth	O
;	O
++	O
cycle_index	O
)	O
{	O
child	O
=	O
dfn_stack	O
[	O
cycle_index	O
]	O
.	O
sym	*(struct)
;	O
if	O
(	O
child	O
->	O
cg	O
.	O
cyc	O
.	O
head	O
==	O
child	O
)	O
{	O
tail	O
->	O
cg	O
.	O
cyc	O
.	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
=	O
child	O
;	O
child	O
->	O
cg	O
.	O
cyc	O
.	O
head	O
=	O
head	O
;	O
DBG	O
(	O
DFNDEBUG	O
,	O
printf	(*(char))->(int)
(	O
"[find_cycle] glomming "	*(char)
)	O
;	O
print_name	O
(	O
child	O
)	O
;	O
printf	(*(char))->(int)
(	O
" onto "	*(char)
)	O
;	O
print_name	O
(	O
head	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
)	O
;	O
for	O
(	O
tail	O
=	O
child	O
;	O
tail	O
->	O
cg	O
.	O
cyc	O
.	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
tail	O
=	O
tail	O
->	O
cg	O
.	O
cyc	O
.	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
{	O
tail	O
->	O
cg	O
.	O
cyc	O
.	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
->	O
cg	O
.	O
cyc	O
.	O
head	O
=	O
head	O
;	O
DBG	O
(	O
DFNDEBUG	O
,	O
printf	(*(char))->(int)
(	O
"[find_cycle] and its tail "	*(char)
)	O
;	O
print_name	O
(	O
tail	O
->	O
cg	O
.	O
cyc	O
.	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
;	O
printf	(*(char))->(int)
(	O
" onto "	*(char)
)	O
;	O
print_name	O
(	O
head	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
)	O
;	O
}	O
}	O
else	O
if	O
(	O
child	O
->	O
cg	O
.	O
cyc	O
.	O
head	O
!=	O
head	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"[find_cycle] glommed, but not to head\n"	*(char)
)	O
;	O
done	O
(	O
1	int
)	O
;	O
}	O
}	O
}	O
}	O
static	O
void	O
pre_visit	O
(	O
Sym	O
*	O
parent	O
)	O
{	O
++	O
dfn_depth	O
;	O
if	O
(	O
dfn_depth	O
>=	O
dfn_maxdepth	O
)	O
{	O
dfn_maxdepth	O
+=	O
DFN_INCR_DEPTH	O
;	O
dfn_stack	O
=	O
(	O
DFN_Stack	O
*	O
)	O
xrealloc	O
(	O
dfn_stack	O
,	O
dfn_maxdepth	O
*	O
sizeof	O
*	O
dfn_stack	O
)	O
;	O
}	O
dfn_stack	O
[	O
dfn_depth	O
]	O
.	O
sym	*(struct)
=	O
parent	O
;	O
dfn_stack	O
[	O
dfn_depth	O
]	O
.	O
cycle_top	O
=	O
dfn_depth	O
;	O
parent	O
->	O
cg	O
.	O
top_order	O
=	O
DFN_BUSY	O
;	O
DBG	O
(	O
DFNDEBUG	O
,	O
printf	(*(char))->(int)
(	O
"[pre_visit]\t\t%d:"	*(char)
,	O
dfn_depth	O
)	O
;	O
print_name	O
(	O
parent	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
)	O
;	O
}	O
static	O
void	O
post_visit	O
(	O
Sym	O
*	O
parent	O
)	O
{	O
Sym	O
*	O
member	O
;	O
DBG	O
(	O
DFNDEBUG	O
,	O
printf	(*(char))->(int)
(	O
"[post_visit]\t%d: "	*(char)
,	O
dfn_depth	O
)	O
;	O
print_name	O
(	O
parent	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
)	O
;	O
if	O
(	O
parent	O
->	O
cg	O
.	O
cyc	O
.	O
head	O
==	O
parent	O
)	O
{	O
++	O
dfn_counter	O
;	O
for	O
(	O
member	O
=	O
parent	O
;	O
member	O
;	O
member	O
=	O
member	O
->	O
cg	O
.	O
cyc	O
.	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
{	O
member	O
->	O
cg	O
.	O
top_order	O
=	O
dfn_counter	O
;	O
DBG	O
(	O
DFNDEBUG	O
,	O
printf	(*(char))->(int)
(	O
"[post_visit]\t\tmember "	*(char)
)	O
;	O
print_name	O
(	O
member	O
)	O
;	O
printf	(*(char))->(int)
(	O
"-> cg.top_order = %d\n"	*(char)
,	O
dfn_counter	O
)	O
)	O
;	O
}	O
}	O
else	O
{	O
DBG	O
(	O
DFNDEBUG	O
,	O
printf	(*(char))->(int)
(	O
"[post_visit]\t\tis part of a cycle\n"	*(char)
)	O
)	O
;	O
}	O
--	O
dfn_depth	O
;	O
}	O
void	O
cg_dfn	O
(	O
Sym	O
*	O
parent	O
)	O
{	O
Arc	O
*	O
arc	O
;	O
DBG	O
(	O
DFNDEBUG	O
,	O
printf	(*(char))->(int)
(	O
"[dfn] dfn( "	*(char)
)	O
;	O
print_name	O
(	O
parent	O
)	O
;	O
printf	(*(char))->(int)
(	O
")\n"	*(char)
)	O
)	O
;	O
if	O
(	O
is_numbered	O
(	O
parent	O
)	O
)	O
{	O
return	O
;	O
}	O
if	O
(	O
is_busy	O
(	O
parent	O
)	O
)	O
{	O
find_cycle	O
(	O
parent	O
)	O
;	O
return	O
;	O
}	O
pre_visit	O
(	O
parent	O
)	O
;	O
for	O
(	O
arc	O
=	O
parent	O
->	O
cg	O
.	O
children	O
;	O
arc	O
;	O
arc	O
=	O
arc	O
->	O
next_child	O
)	O
{	O
cg_dfn	O
(	O
arc	O
->	O
child	O
)	O
;	O
}	O
post_visit	O
(	O
parent	O
)	O
;	O
}	O
