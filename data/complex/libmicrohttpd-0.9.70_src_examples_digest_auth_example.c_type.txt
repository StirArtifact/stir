static	O
int	O
ahc_echo	(*(void),*(struct),*(char),*(char),*(char),*(char),*(long),*(*(void)))->(int)
(	O
void	O
*	O
cls	*(void)
,	O
struct	O
MHD_Connection	O
*	O
connection	*(struct)
,	O
const	O
char	O
*	O
url	*(char)
,	O
const	O
char	O
*	O
method	*(char)
,	O
const	O
char	O
*	O
version	*(char)
,	O
const	O
char	O
*	O
upload_data	*(char)
,	O
size_t	long
*	O
upload_data_size	*(long)
,	O
void	O
*	O
*	O
ptr	*(void)
)	O
{	O
struct	O
MHD_Response	O
*	O
response	*(struct)
;	O
char	O
*	O
username	*(char)
;	O
const	O
char	O
*	O
password	*(char)
=	O
"testpass"	*(char)
;	O
const	O
char	O
*	O
realm	*(char)
=	O
"test@example.com"	*(char)
;	O
int	O
ret	int
;	O
(	O
void	O
)	O
cls	*(void)
;	O
(	O
void	O
)	O
url	*(char)
;	O
(	O
void	O
)	O
method	*(char)
;	O
(	O
void	O
)	O
version	*(char)
;	O
(	O
void	O
)	O
upload_data	*(char)
;	O
(	O
void	O
)	O
upload_data_size	*(long)
;	O
(	O
void	O
)	O
ptr	*(void)
;	O
username	*(char)
=	O
MHD_digest_auth_get_username	(*(struct))->(*(char))
(	O
connection	*(struct)
)	O
;	O
if	O
(	O
NULL	O
==	O
username	*(char)
)	O
{	O
response	*(struct)
=	O
MHD_create_response_from_buffer	(long,*(void),enum(int,int,int))->(*(struct))
(	O
strlen	(*(char))->(long)
(	O
DENIED	*(char)
)	O
,	O
DENIED	*(char)
,	O
MHD_RESPMEM_PERSISTENT	int
)	O
;	O
ret	int
=	O
MHD_queue_auth_fail_response	(*(struct),*(char),*(char),*(struct),int)->(int)
(	O
connection	*(struct)
,	O
realm	*(char)
,	O
MY_OPAQUE_STR	*(char)
,	O
response	*(struct)
,	O
MHD_NO	int
)	O
;	O
MHD_destroy_response	(*(struct))->(void)
(	O
response	*(struct)
)	O
;	O
return	O
ret	int
;	O
}	O
ret	int
=	O
MHD_digest_auth_check	(*(struct),*(char),*(char),*(char),int)->(int)
(	O
connection	*(struct)
,	O
realm	*(char)
,	O
username	*(char)
,	O
password	*(char)
,	O
300	int
)	O
;	O
MHD_free	(*(void))->(void)
(	O
username	*(char)
)	O
;	O
if	O
(	O
(	O
ret	int
==	O
MHD_INVALID_NONCE	O
)	O
||	O
(	O
ret	int
==	O
MHD_NO	int
)	O
)	O
{	O
response	*(struct)
=	O
MHD_create_response_from_buffer	(long,*(void),enum(int,int,int))->(*(struct))
(	O
strlen	(*(char))->(long)
(	O
DENIED	*(char)
)	O
,	O
DENIED	*(char)
,	O
MHD_RESPMEM_PERSISTENT	int
)	O
;	O
if	O
(	O
NULL	O
==	O
response	*(struct)
)	O
return	O
MHD_NO	int
;	O
ret	int
=	O
MHD_queue_auth_fail_response	(*(struct),*(char),*(char),*(struct),int)->(int)
(	O
connection	*(struct)
,	O
realm	*(char)
,	O
MY_OPAQUE_STR	*(char)
,	O
response	*(struct)
,	O
(	O
ret	int
==	O
MHD_INVALID_NONCE	O
)	O
?	O
MHD_YES	int
:	O
MHD_NO	int
)	O
;	O
MHD_destroy_response	(*(struct))->(void)
(	O
response	*(struct)
)	O
;	O
return	O
ret	int
;	O
}	O
response	*(struct)
=	O
MHD_create_response_from_buffer	(long,*(void),enum(int,int,int))->(*(struct))
(	O
strlen	(*(char))->(long)
(	O
PAGE	*(char)
)	O
,	O
PAGE	*(char)
,	O
MHD_RESPMEM_PERSISTENT	int
)	O
;	O
ret	int
=	O
MHD_queue_response	(*(struct),int,*(struct))->(int)
(	O
connection	*(struct)
,	O
MHD_HTTP_OK	int
,	O
response	*(struct)
)	O
;	O
MHD_destroy_response	(*(struct))->(void)
(	O
response	*(struct)
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
const	O
*	O
argv	*(*(char))
)	O
{	O
int	O
fd	int
;	O
char	O
rnd	array(char)
[	O
8	int
]	O
;	O
ssize_t	long
len	long
;	O
size_t	long
off	long
;	O
struct	O
MHD_Daemon	O
*	O
d	*(struct)
;	O
if	O
(	O
argc	int
!=	O
2	int
)	O
{	O
printf	(*(char))->(int)
(	O
"%s PORT\n"	*(char)
,	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
return	O
1	int
;	O
}	O
fd	int
=	O
open	(*(char),int)->(int)
(	O
"/dev/urandom"	*(char)
,	O
O_RDONLY	int
)	O
;	O
if	O
(	O
-	O
1	int
==	O
fd	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Failed to open `%s': %s\n"	*(char)
,	O
"/dev/urandom"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
return	O
1	int
;	O
}	O
off	long
=	O
0	int
;	O
while	O
(	O
off	long
<	O
8	int
)	O
{	O
len	long
=	O
read	*((*(void),*(char),long)->(long))
(	O
fd	int
,	O
rnd	array(char)
,	O
8	int
)	O
;	O
if	O
(	O
len	long
==	O
-	O
1	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Failed to read `%s': %s\n"	*(char)
,	O
"/dev/urandom"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
(	O
void	O
)	O
close	*((*(void))->(int))
(	O
fd	int
)	O
;	O
return	O
1	int
;	O
}	O
off	long
+=	O
len	long
;	O
}	O
(	O
void	O
)	O
close	*((*(void))->(int))
(	O
fd	int
)	O
;	O
d	*(struct)
=	O
MHD_start_daemon	(int,short,*((*(void),*(struct(short,array(char))),int)->(int)),*(void),*((*(void),*(struct),*(char),*(char),*(char),*(char),*(long),*(*(void)))->(int)),*(void))->(*(struct))
(	O
MHD_USE_THREAD_PER_CONNECTION	int
|	O
MHD_USE_INTERNAL_POLLING_THREAD	int
|	O
MHD_USE_ERROR_LOG	int
,	O
atoi	(*(char))->(int)
(	O
argv	*(*(char))
[	O
1	int
]	O
)	O
,	O
NULL	O
,	O
NULL	O
,	O
&	O
ahc_echo	(*(void),*(struct),*(char),*(char),*(char),*(char),*(long),*(*(void)))->(int)
,	O
PAGE	*(char)
,	O
MHD_OPTION_DIGEST_AUTH_RANDOM	int
,	O
sizeof	O
(	O
rnd	array(char)
)	O
,	O
rnd	array(char)
,	O
MHD_OPTION_NONCE_NC_SIZE	int
,	O
300	int
,	O
MHD_OPTION_CONNECTION_TIMEOUT	int
,	O
(	O
unsigned	O
int	O
)	O
120	int
,	O
MHD_OPTION_END	int
)	O
;	O
if	O
(	O
d	*(struct)
==	O
NULL	O
)	O
return	O
1	int
;	O
(	O
void	O
)	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
MHD_stop_daemon	(*(struct))->(void)
(	O
d	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
