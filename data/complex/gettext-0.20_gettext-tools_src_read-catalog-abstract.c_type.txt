static	O
abstract_catalog_reader_ty	struct
*	O
callback_arg	*(struct(*(struct(long,*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`,*`)->(void)),*((*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,bool,bool)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`,long)->(void)),*((*`,*`)->(void))))))
;	O
abstract_catalog_reader_ty	struct
*	O
catalog_reader_alloc	(*(struct(long,*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`,*`)->(void)),*((*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,bool,bool)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`,long)->(void)),*((*`,*`)->(void)))))->(*(struct(*(struct(long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))))
(	O
abstract_catalog_reader_class_ty	struct
*	O
method_table	*(struct(long,*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),*(char),*(struct`),*(char),*(char),long,*(struct`),*(char),*(char),*(char),bool,bool)->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),long)->(void)),*((*(struct`),*(char))->(void))))
)	O
{	O
abstract_catalog_reader_ty	struct
*	O
pop	*(struct)
;	O
pop	*(struct)
=	O
(	O
abstract_catalog_reader_ty	struct
*	O
)	O
xmalloc	(long)->(*(void))
(	O
method_table	*(struct(long,*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),*(char),*(struct`),*(char),*(char),long,*(struct`),*(char),*(char),*(char),bool,bool)->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),long)->(void)),*((*(struct`),*(char))->(void))))
->	O
size	long
)	O
;	O
pop	*(struct)
->	O
methods	*(struct(long,*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),*(char),*(struct`),*(char),*(char),long,*(struct`),*(char),*(char),*(char),bool,bool)->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),long)->(void)),*((*(struct`),*(char))->(void))))
=	O
method_table	*(struct(long,*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),*(char),*(struct`),*(char),*(char),long,*(struct`),*(char),*(char),*(char),bool,bool)->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),long)->(void)),*((*(struct`),*(char))->(void))))
;	O
if	O
(	O
method_table	*(struct(long,*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),*(char),*(struct`),*(char),*(char),long,*(struct`),*(char),*(char),*(char),bool,bool)->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),long)->(void)),*((*(struct`),*(char))->(void))))
->	O
constructor	*((*(struct))->(void))
)	O
method_table	*(struct(long,*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),*(char),*(struct`),*(char),*(char),long,*(struct`),*(char),*(char),*(char),bool,bool)->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),long)->(void)),*((*(struct`),*(char))->(void))))
->	O
constructor	*((*(struct))->(void))
(	O
pop	*(struct)
)	O
;	O
return	O
pop	*(struct)
;	O
}	O
void	O
catalog_reader_free	(*(struct(*(struct(long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))))->(void)
(	O
abstract_catalog_reader_ty	struct
*	O
pop	*(struct)
)	O
{	O
if	O
(	O
pop	*(struct)
->	O
methods	*(struct(long,*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),*(char),*(struct`),*(char),*(char),long,*(struct`),*(char),*(char),*(char),bool,bool)->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),long)->(void)),*((*(struct`),*(char))->(void))))
->	O
destructor	*((*(struct))->(void))
)	O
pop	*(struct)
->	O
methods	*(struct(long,*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),*(char),*(struct`),*(char),*(char),long,*(struct`),*(char),*(char),*(char),bool,bool)->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),long)->(void)),*((*(struct`),*(char))->(void))))
->	O
destructor	*((*(struct))->(void))
(	O
pop	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
pop	*(struct)
)	O
;	O
}	O
static	O
inline	O
void	O
call_parse_brief	(*(struct(*(struct(long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))))->(void)
(	O
abstract_catalog_reader_ty	struct
*	O
pop	*(struct)
)	O
{	O
if	O
(	O
pop	*(struct)
->	O
methods	*(struct(long,*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),*(char),*(struct`),*(char),*(char),long,*(struct`),*(char),*(char),*(char),bool,bool)->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),long)->(void)),*((*(struct`),*(char))->(void))))
->	O
parse_brief	*((*(struct))->(void))
)	O
pop	*(struct)
->	O
methods	*(struct(long,*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),*(char),*(struct`),*(char),*(char),long,*(struct`),*(char),*(char),*(char),bool,bool)->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),long)->(void)),*((*(struct`),*(char))->(void))))
->	O
parse_brief	*((*(struct))->(void))
(	O
pop	*(struct)
)	O
;	O
}	O
static	O
inline	O
void	O
call_parse_debrief	(*(struct(*(struct(long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))))->(void)
(	O
abstract_catalog_reader_ty	struct
*	O
pop	*(struct)
)	O
{	O
if	O
(	O
pop	*(struct)
->	O
methods	*(struct(long,*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),*(char),*(struct`),*(char),*(char),long,*(struct`),*(char),*(char),*(char),bool,bool)->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),long)->(void)),*((*(struct`),*(char))->(void))))
->	O
parse_debrief	*((*(struct))->(void))
)	O
pop	*(struct)
->	O
methods	*(struct(long,*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),*(char),*(struct`),*(char),*(char),long,*(struct`),*(char),*(char),*(char),bool,bool)->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),long)->(void)),*((*(struct`),*(char))->(void))))
->	O
parse_debrief	*((*(struct))->(void))
(	O
pop	*(struct)
)	O
;	O
}	O
static	O
inline	O
void	O
call_directive_domain	(*(struct(*(struct(long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),*(char))->(void)
(	O
abstract_catalog_reader_ty	struct
*	O
pop	*(struct)
,	O
char	O
*	O
name	*(char)
)	O
{	O
if	O
(	O
pop	*(struct)
->	O
methods	*(struct(long,*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),*(char),*(struct`),*(char),*(char),long,*(struct`),*(char),*(char),*(char),bool,bool)->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),long)->(void)),*((*(struct`),*(char))->(void))))
->	O
directive_domain	*((*(struct),*(char))->(void))
)	O
pop	*(struct)
->	O
methods	*(struct(long,*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),*(char),*(struct`),*(char),*(char),long,*(struct`),*(char),*(char),*(char),bool,bool)->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),long)->(void)),*((*(struct`),*(char))->(void))))
->	O
directive_domain	*((*(struct),*(char))->(void))
(	O
pop	*(struct)
,	O
name	*(char)
)	O
;	O
}	O
static	O
inline	O
void	O
call_directive_message	(*(struct(*(struct(long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),*(char),*(char),*(struct(*(char),long)),*(char),*(char),long,*(struct(*(char),long)),*(char),*(char),*(char),bool,bool)->(void)
(	O
abstract_catalog_reader_ty	struct
*	O
pop	*(struct)
,	O
char	O
*	O
msgctxt	*(char)
,	O
char	O
*	O
msgid	*(char)
,	O
lex_pos_ty	struct
*	O
msgid_pos	*(struct(*(char),long))
,	O
char	O
*	O
msgid_plural	*(char)
,	O
char	O
*	O
msgstr	*(char)
,	O
size_t	long
msgstr_len	long
,	O
lex_pos_ty	struct
*	O
msgstr_pos	*(struct(*(char),long))
,	O
char	O
*	O
prev_msgctxt	*(char)
,	O
char	O
*	O
prev_msgid	*(char)
,	O
char	O
*	O
prev_msgid_plural	*(char)
,	O
bool	bool
force_fuzzy	bool
,	O
bool	bool
obsolete	bool
)	O
{	O
if	O
(	O
pop	*(struct)
->	O
methods	*(struct(long,*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),*(char),*(struct`),*(char),*(char),long,*(struct`),*(char),*(char),*(char),bool,bool)->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),long)->(void)),*((*(struct`),*(char))->(void))))
->	O
directive_message	*((*(struct),*(char),*(char),*(struct(*(char),long)),*(char),*(char),long,*(struct(*(char),long)),*(char),*(char),*(char),bool,bool)->(void))
)	O
pop	*(struct)
->	O
methods	*(struct(long,*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),*(char),*(struct`),*(char),*(char),long,*(struct`),*(char),*(char),*(char),bool,bool)->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),long)->(void)),*((*(struct`),*(char))->(void))))
->	O
directive_message	*((*(struct),*(char),*(char),*(struct(*(char),long)),*(char),*(char),long,*(struct(*(char),long)),*(char),*(char),*(char),bool,bool)->(void))
(	O
pop	*(struct)
,	O
msgctxt	*(char)
,	O
msgid	*(char)
,	O
msgid_pos	*(struct(*(char),long))
,	O
msgid_plural	*(char)
,	O
msgstr	*(char)
,	O
msgstr_len	long
,	O
msgstr_pos	*(struct(*(char),long))
,	O
prev_msgctxt	*(char)
,	O
prev_msgid	*(char)
,	O
prev_msgid_plural	*(char)
,	O
force_fuzzy	bool
,	O
obsolete	bool
)	O
;	O
}	O
static	O
inline	O
void	O
call_comment	(*(struct(*(struct(long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),*(char))->(void)
(	O
abstract_catalog_reader_ty	struct
*	O
pop	*(struct)
,	O
const	O
char	O
*	O
s	*(char)
)	O
{	O
if	O
(	O
pop	*(struct)
->	O
methods	*(struct(long,*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),*(char),*(struct`),*(char),*(char),long,*(struct`),*(char),*(char),*(char),bool,bool)->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),long)->(void)),*((*(struct`),*(char))->(void))))
->	O
comment	*(struct(*(*(char)),long,long))
!=	O
NULL	O
)	O
pop	*(struct)
->	O
methods	*(struct(long,*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),*(char),*(struct`),*(char),*(char),long,*(struct`),*(char),*(char),*(char),bool,bool)->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),long)->(void)),*((*(struct`),*(char))->(void))))
->	O
comment	*(struct(*(*(char)),long,long))
(	O
pop	*(struct)
,	O
s	*(char)
)	O
;	O
}	O
static	O
inline	O
void	O
call_comment_dot	(*(struct(*(struct(long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),*(char))->(void)
(	O
abstract_catalog_reader_ty	struct
*	O
pop	*(struct)
,	O
const	O
char	O
*	O
s	*(char)
)	O
{	O
if	O
(	O
pop	*(struct)
->	O
methods	*(struct(long,*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),*(char),*(struct`),*(char),*(char),long,*(struct`),*(char),*(char),*(char),bool,bool)->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),long)->(void)),*((*(struct`),*(char))->(void))))
->	O
comment_dot	*(struct(*(*(char)),long,long))
!=	O
NULL	O
)	O
pop	*(struct)
->	O
methods	*(struct(long,*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),*(char),*(struct`),*(char),*(char),long,*(struct`),*(char),*(char),*(char),bool,bool)->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),long)->(void)),*((*(struct`),*(char))->(void))))
->	O
comment_dot	*(struct(*(*(char)),long,long))
(	O
pop	*(struct)
,	O
s	*(char)
)	O
;	O
}	O
static	O
inline	O
void	O
call_comment_filepos	(*(struct(*(struct(long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),*(char),long)->(void)
(	O
abstract_catalog_reader_ty	struct
*	O
pop	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
,	O
size_t	long
line	long
)	O
{	O
if	O
(	O
pop	*(struct)
->	O
methods	*(struct(long,*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),*(char),*(struct`),*(char),*(char),long,*(struct`),*(char),*(char),*(char),bool,bool)->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),long)->(void)),*((*(struct`),*(char))->(void))))
->	O
comment_filepos	*((*(struct),*(char),long)->(void))
)	O
pop	*(struct)
->	O
methods	*(struct(long,*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),*(char),*(struct`),*(char),*(char),long,*(struct`),*(char),*(char),*(char),bool,bool)->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),long)->(void)),*((*(struct`),*(char))->(void))))
->	O
comment_filepos	*((*(struct),*(char),long)->(void))
(	O
pop	*(struct)
,	O
name	*(char)
,	O
line	long
)	O
;	O
}	O
static	O
inline	O
void	O
call_comment_special	(*(struct(*(struct(long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),*(char))->(void)
(	O
abstract_catalog_reader_ty	struct
*	O
pop	*(struct)
,	O
const	O
char	O
*	O
s	*(char)
)	O
{	O
if	O
(	O
pop	*(struct)
->	O
methods	*(struct(long,*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),*(char),*(struct`),*(char),*(char),long,*(struct`),*(char),*(char),*(char),bool,bool)->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),long)->(void)),*((*(struct`),*(char))->(void))))
->	O
comment_special	*((*(struct),*(char))->(void))
!=	O
NULL	O
)	O
pop	*(struct)
->	O
methods	*(struct(long,*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),*(char),*(struct`),*(char),*(char),long,*(struct`),*(char),*(char),*(char),bool,bool)->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char))->(void)),*((*(struct`),*(char),long)->(void)),*((*(struct`),*(char))->(void))))
->	O
comment_special	*((*(struct),*(char))->(void))
(	O
pop	*(struct)
,	O
s	*(char)
)	O
;	O
}	O
static	O
inline	O
void	O
parse_start	(*(struct(*(struct(long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))))->(void)
(	O
abstract_catalog_reader_ty	struct
*	O
pop	*(struct)
)	O
{	O
callback_arg	*(struct(*(struct(long,*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`,*`)->(void)),*((*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,bool,bool)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`,long)->(void)),*((*`,*`)->(void))))))
=	O
pop	*(struct)
;	O
call_parse_brief	(*(struct(*(struct(long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))))->(void)
(	O
pop	*(struct)
)	O
;	O
}	O
static	O
inline	O
void	O
parse_end	(*(struct(*(struct(long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))))->(void)
(	O
abstract_catalog_reader_ty	struct
*	O
pop	*(struct)
)	O
{	O
call_parse_debrief	(*(struct(*(struct(long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))))->(void)
(	O
pop	*(struct)
)	O
;	O
callback_arg	*(struct(*(struct(long,*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`,*`)->(void)),*((*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,bool,bool)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`,long)->(void)),*((*`,*`)->(void))))))
=	O
NULL	O
;	O
}	O
void	O
catalog_reader_parse	(*(struct(*(struct(long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),*(char),*(struct(*((*`,*`,*`,*`)->(void)),bool)))->(void)
(	O
abstract_catalog_reader_ty	struct
*	O
pop	*(struct)
,	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
const	O
char	O
*	O
real_filename	*(char)
,	O
const	O
char	O
*	O
logical_filename	*(char)
,	O
catalog_input_format_ty	*(struct(*((*(struct`),*(struct`),*(char),*(char))->(void)),bool))
input_syntax	*(struct(*((*(struct`),*(struct`),*(char),*(char))->(void)),bool))
)	O
{	O
error_message_count	int
=	O
0	int
;	O
parse_start	(*(struct(*(struct(long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))))->(void)
(	O
pop	*(struct)
)	O
;	O
input_syntax	*(struct(*((*(struct`),*(struct`),*(char),*(char))->(void)),bool))
->	O
parse	*((*(struct(*(struct`))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),*(char))->(void))
(	O
pop	*(struct)
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
real_filename	*(char)
,	O
logical_filename	*(char)
)	O
;	O
parse_end	(*(struct(*(struct(long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))))->(void)
(	O
pop	*(struct)
)	O
;	O
if	O
(	O
error_message_count	int
>	O
0	int
)	O
po_xerror	*((int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),*(char),long,long,int,*(char))->(void))
(	O
PO_SEVERITY_FATAL_ERROR	int
,	O
NULL	O
,	O
NULL	O
,	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
,	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
,	O
false	int
,	O
xasprintf	(*(char))->(*(char))
(	O
ngettext	(*(char),*(char),long)->(*(char))
(	O
"found %d fatal error"	*(char)
,	O
"found %d fatal errors"	*(char)
,	O
error_message_count	int
)	O
,	O
error_message_count	int
)	O
)	O
;	O
}	O
void	O
po_callback_domain	(*(char))->(void)
(	O
char	O
*	O
name	*(char)
)	O
{	O
call_directive_domain	(*(struct(*(struct(long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),*(char))->(void)
(	O
callback_arg	*(struct(*(struct(long,*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`,*`)->(void)),*((*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,bool,bool)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`,long)->(void)),*((*`,*`)->(void))))))
,	O
name	*(char)
)	O
;	O
}	O
void	O
po_callback_message	(*(char),*(char),*(struct(*(char),long)),*(char),*(char),long,*(struct(*(char),long)),*(char),*(char),*(char),bool,bool)->(void)
(	O
char	O
*	O
msgctxt	*(char)
,	O
char	O
*	O
msgid	*(char)
,	O
lex_pos_ty	struct
*	O
msgid_pos	*(struct(*(char),long))
,	O
char	O
*	O
msgid_plural	*(char)
,	O
char	O
*	O
msgstr	*(char)
,	O
size_t	long
msgstr_len	long
,	O
lex_pos_ty	struct
*	O
msgstr_pos	*(struct(*(char),long))
,	O
char	O
*	O
prev_msgctxt	*(char)
,	O
char	O
*	O
prev_msgid	*(char)
,	O
char	O
*	O
prev_msgid_plural	*(char)
,	O
bool	bool
force_fuzzy	bool
,	O
bool	bool
obsolete	bool
)	O
{	O
call_directive_message	(*(struct(*(struct(long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),*(char),*(char),*(struct(*(char),long)),*(char),*(char),long,*(struct(*(char),long)),*(char),*(char),*(char),bool,bool)->(void)
(	O
callback_arg	*(struct(*(struct(long,*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`,*`)->(void)),*((*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,bool,bool)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`,long)->(void)),*((*`,*`)->(void))))))
,	O
msgctxt	*(char)
,	O
msgid	*(char)
,	O
msgid_pos	*(struct(*(char),long))
,	O
msgid_plural	*(char)
,	O
msgstr	*(char)
,	O
msgstr_len	long
,	O
msgstr_pos	*(struct(*(char),long))
,	O
prev_msgctxt	*(char)
,	O
prev_msgid	*(char)
,	O
prev_msgid_plural	*(char)
,	O
force_fuzzy	bool
,	O
obsolete	bool
)	O
;	O
}	O
void	O
po_callback_comment	(*(char))->(void)
(	O
const	O
char	O
*	O
s	*(char)
)	O
{	O
call_comment	(*(struct(*(struct(long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),*(char))->(void)
(	O
callback_arg	*(struct(*(struct(long,*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`,*`)->(void)),*((*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,bool,bool)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`,long)->(void)),*((*`,*`)->(void))))))
,	O
s	*(char)
)	O
;	O
}	O
void	O
po_callback_comment_dot	(*(char))->(void)
(	O
const	O
char	O
*	O
s	*(char)
)	O
{	O
call_comment_dot	(*(struct(*(struct(long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),*(char))->(void)
(	O
callback_arg	*(struct(*(struct(long,*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`,*`)->(void)),*((*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,bool,bool)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`,long)->(void)),*((*`,*`)->(void))))))
,	O
s	*(char)
)	O
;	O
}	O
void	O
po_callback_comment_filepos	(*(char),long)->(void)
(	O
const	O
char	O
*	O
name	*(char)
,	O
size_t	long
line	long
)	O
{	O
call_comment_filepos	(*(struct(*(struct(long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),*(char),long)->(void)
(	O
callback_arg	*(struct(*(struct(long,*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`,*`)->(void)),*((*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,bool,bool)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`,long)->(void)),*((*`,*`)->(void))))))
,	O
name	*(char)
,	O
line	long
)	O
;	O
}	O
void	O
po_callback_comment_special	(*(char))->(void)
(	O
const	O
char	O
*	O
s	*(char)
)	O
{	O
call_comment_special	(*(struct(*(struct(long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),*(char))->(void)
(	O
callback_arg	*(struct(*(struct(long,*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`,*`)->(void)),*((*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,bool,bool)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`,long)->(void)),*((*`,*`)->(void))))))
,	O
s	*(char)
)	O
;	O
}	O
void	O
po_parse_comment_special	(*(char),*(bool),array(enum(int,int,int,int,int,int)),*(struct(int,int)),*(enum(int,int,int,int,int,int)),array(enum(int,int,int,int,int,int)))->(void)
(	O
const	O
char	O
*	O
s	*(char)
,	O
bool	bool
*	O
fuzzyp	*(bool)
,	O
enum	O
is_format	enum(int,int,int,int,int,int)
formatp	array(enum(int,int,int,int,int,int))
[	O
NFORMATS	int
]	O
,	O
struct	O
argument_range	struct(int,int)
*	O
rangep	*(struct(int,int))
,	O
enum	O
is_wrap	O
*	O
wrapp	*(enum(int,int,int,int,int,int))
,	O
enum	O
is_syntax_check	O
scp	array(enum(int,int,int,int,int,int))
[	O
NSYNTAXCHECKS	int
]	O
)	O
{	O
size_t	long
i	long
;	O
*	O
fuzzyp	*(bool)
=	O
false	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NFORMATS	int
;	O
i	long
++	O
)	O
formatp	array(enum(int,int,int,int,int,int))
[	O
i	long
]	O
=	O
undecided	int
;	O
rangep	*(struct(int,int))
->	O
min	int
=	O
-	O
1	int
;	O
rangep	*(struct(int,int))
->	O
max	int
=	O
-	O
1	int
;	O
*	O
wrapp	*(enum(int,int,int,int,int,int))
=	O
undecided	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NSYNTAXCHECKS	int
;	O
i	long
++	O
)	O
scp	array(enum(int,int,int,int,int,int))
[	O
i	long
]	O
=	O
undecided	int
;	O
while	O
(	O
*	O
s	*(char)
!=	O
'\0'	O
)	O
{	O
const	O
char	O
*	O
t	*(char)
;	O
while	O
(	O
*	O
s	*(char)
!=	O
'\0'	O
&&	O
strchr	(*(char),int)->(*(char))
(	O
"\n \t\r\f\v,"	*(char)
,	O
*	O
s	*(char)
)	O
!=	O
NULL	O
)	O
s	*(char)
++	O
;	O
t	*(char)
=	O
s	*(char)
;	O
while	O
(	O
*	O
s	*(char)
!=	O
'\0'	O
&&	O
strchr	(*(char),int)->(*(char))
(	O
"\n \t\r\f\v,"	*(char)
,	O
*	O
s	*(char)
)	O
==	O
NULL	O
)	O
s	*(char)
++	O
;	O
if	O
(	O
s	*(char)
!=	O
t	*(char)
)	O
{	O
size_t	long
len	long
=	O
s	*(char)
-	O
t	*(char)
;	O
if	O
(	O
len	long
==	O
5	int
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
t	*(char)
,	O
"fuzzy"	*(char)
,	O
5	int
)	O
==	O
0	int
)	O
{	O
*	O
fuzzyp	*(bool)
=	O
true	int
;	O
continue	O
;	O
}	O
if	O
(	O
len	long
>=	O
7	int
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
t	*(char)
+	O
len	long
-	O
7	int
,	O
"-format"	*(char)
,	O
7	int
)	O
==	O
0	int
)	O
{	O
const	O
char	O
*	O
p	*(void)
;	O
size_t	long
n	long
;	O
enum	O
is_format	enum(int,int,int,int,int,int)
value	enum(int,int,int,int,int,int)
;	O
p	*(void)
=	O
t	*(char)
;	O
n	long
=	O
len	long
-	O
7	int
;	O
if	O
(	O
n	long
>=	O
3	int
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
p	*(void)
,	O
"no-"	*(char)
,	O
3	int
)	O
==	O
0	int
)	O
{	O
p	*(void)
+=	O
3	int
;	O
n	long
-=	O
3	int
;	O
value	enum(int,int,int,int,int,int)
=	O
no	int
;	O
}	O
else	O
if	O
(	O
n	long
>=	O
9	int
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
p	*(void)
,	O
"possible-"	*(char)
,	O
9	int
)	O
==	O
0	int
)	O
{	O
p	*(void)
+=	O
9	int
;	O
n	long
-=	O
9	int
;	O
value	enum(int,int,int,int,int,int)
=	O
possible	int
;	O
}	O
else	O
if	O
(	O
n	long
>=	O
11	int
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
p	*(void)
,	O
"impossible-"	*(char)
,	O
11	int
)	O
==	O
0	int
)	O
{	O
p	*(void)
+=	O
11	int
;	O
n	long
-=	O
11	int
;	O
value	enum(int,int,int,int,int,int)
=	O
impossible	int
;	O
}	O
else	O
value	enum(int,int,int,int,int,int)
=	O
yes	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NFORMATS	int
;	O
i	long
++	O
)	O
if	O
(	O
strlen	(*(char))->(long)
(	O
format_language	array(*(char))
[	O
i	long
]	O
)	O
==	O
n	long
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
format_language	array(*(char))
[	O
i	long
]	O
,	O
p	*(void)
,	O
n	long
)	O
==	O
0	int
)	O
{	O
formatp	array(enum(int,int,int,int,int,int))
[	O
i	long
]	O
=	O
value	enum(int,int,int,int,int,int)
;	O
break	O
;	O
}	O
if	O
(	O
i	long
<	O
NFORMATS	int
)	O
continue	O
;	O
}	O
if	O
(	O
len	long
==	O
6	int
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
t	*(char)
,	O
"range:"	*(char)
,	O
6	int
)	O
==	O
0	int
)	O
{	O
while	O
(	O
*	O
s	*(char)
!=	O
'\0'	O
&&	O
strchr	(*(char),int)->(*(char))
(	O
"\n \t\r\f\v,"	*(char)
,	O
*	O
s	*(char)
)	O
!=	O
NULL	O
)	O
s	*(char)
++	O
;	O
t	*(char)
=	O
s	*(char)
;	O
while	O
(	O
*	O
s	*(char)
!=	O
'\0'	O
&&	O
strchr	(*(char),int)->(*(char))
(	O
"\n \t\r\f\v,"	*(char)
,	O
*	O
s	*(char)
)	O
==	O
NULL	O
)	O
s	*(char)
++	O
;	O
if	O
(	O
*	O
t	*(char)
>=	O
'0'	O
&&	O
*	O
t	*(char)
<=	O
'9'	O
)	O
{	O
unsigned	O
int	O
min	int
=	O
0	int
;	O
for	O
(	O
;	O
*	O
t	*(char)
>=	O
'0'	O
&&	O
*	O
t	*(char)
<=	O
'9'	O
;	O
t	*(char)
++	O
)	O
{	O
if	O
(	O
min	int
<=	O
INT_MAX	O
/	O
10	int
)	O
{	O
min	int
=	O
10	int
*	O
min	int
+	O
(	O
*	O
t	*(char)
-	O
'0'	O
)	O
;	O
if	O
(	O
min	int
>	O
INT_MAX	O
)	O
min	int
=	O
INT_MAX	O
;	O
}	O
else	O
min	int
=	O
INT_MAX	O
;	O
}	O
if	O
(	O
*	O
t	*(char)
++	O
==	O
'.'	O
)	O
if	O
(	O
*	O
t	*(char)
++	O
==	O
'.'	O
)	O
if	O
(	O
*	O
t	*(char)
>=	O
'0'	O
&&	O
*	O
t	*(char)
<=	O
'9'	O
)	O
{	O
unsigned	O
int	O
max	int
=	O
0	int
;	O
for	O
(	O
;	O
*	O
t	*(char)
>=	O
'0'	O
&&	O
*	O
t	*(char)
<=	O
'9'	O
;	O
t	*(char)
++	O
)	O
{	O
if	O
(	O
max	int
<=	O
INT_MAX	O
/	O
10	int
)	O
{	O
max	int
=	O
10	int
*	O
max	int
+	O
(	O
*	O
t	*(char)
-	O
'0'	O
)	O
;	O
if	O
(	O
max	int
>	O
INT_MAX	O
)	O
max	int
=	O
INT_MAX	O
;	O
}	O
else	O
max	int
=	O
INT_MAX	O
;	O
}	O
if	O
(	O
min	int
<=	O
max	int
)	O
{	O
rangep	*(struct(int,int))
->	O
min	int
=	O
min	int
;	O
rangep	*(struct(int,int))
->	O
max	int
=	O
max	int
;	O
continue	O
;	O
}	O
}	O
}	O
}	O
if	O
(	O
len	long
==	O
4	int
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
t	*(char)
,	O
"wrap"	*(char)
,	O
4	int
)	O
==	O
0	int
)	O
{	O
*	O
wrapp	*(enum(int,int,int,int,int,int))
=	O
yes	int
;	O
continue	O
;	O
}	O
if	O
(	O
len	long
==	O
7	int
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
t	*(char)
,	O
"no-wrap"	*(char)
,	O
7	int
)	O
==	O
0	int
)	O
{	O
*	O
wrapp	*(enum(int,int,int,int,int,int))
=	O
no	int
;	O
continue	O
;	O
}	O
if	O
(	O
len	long
>=	O
6	int
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
t	*(char)
+	O
len	long
-	O
6	int
,	O
"-check"	*(char)
,	O
6	int
)	O
==	O
0	int
)	O
{	O
const	O
char	O
*	O
p	*(void)
;	O
size_t	long
n	long
;	O
enum	O
is_syntax_check	O
value	enum(int,int,int,int,int,int)
;	O
p	*(void)
=	O
t	*(char)
;	O
n	long
=	O
len	long
-	O
6	int
;	O
if	O
(	O
n	long
>=	O
3	int
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
p	*(void)
,	O
"no-"	*(char)
,	O
3	int
)	O
==	O
0	int
)	O
{	O
p	*(void)
+=	O
3	int
;	O
n	long
-=	O
3	int
;	O
value	enum(int,int,int,int,int,int)
=	O
no	int
;	O
}	O
else	O
value	enum(int,int,int,int,int,int)
=	O
yes	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NSYNTAXCHECKS	int
;	O
i	long
++	O
)	O
if	O
(	O
strlen	(*(char))->(long)
(	O
syntax_check_name	array(*(char))
[	O
i	long
]	O
)	O
==	O
n	long
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
syntax_check_name	array(*(char))
[	O
i	long
]	O
,	O
p	*(void)
,	O
n	long
)	O
==	O
0	int
)	O
{	O
scp	array(enum(int,int,int,int,int,int))
[	O
i	long
]	O
=	O
value	enum(int,int,int,int,int,int)
;	O
break	O
;	O
}	O
if	O
(	O
i	long
<	O
NSYNTAXCHECKS	int
)	O
continue	O
;	O
}	O
}	O
}	O
}	O
static	O
void	O
po_parse_comment_filepos	(*(char))->(void)
(	O
const	O
char	O
*	O
s	*(char)
)	O
{	O
while	O
(	O
*	O
s	*(char)
!=	O
'\0'	O
)	O
{	O
while	O
(	O
*	O
s	*(char)
==	O
' '	O
||	O
*	O
s	*(char)
==	O
'\t'	O
||	O
*	O
s	*(char)
==	O
'\n'	O
)	O
s	*(char)
++	O
;	O
if	O
(	O
*	O
s	*(char)
!=	O
'\0'	O
)	O
{	O
const	O
char	O
*	O
string_start	*(char)
=	O
s	*(char)
;	O
do	O
s	*(char)
++	O
;	O
while	O
(	O
!	O
(	O
*	O
s	*(char)
==	O
'\0'	O
||	O
*	O
s	*(char)
==	O
' '	O
||	O
*	O
s	*(char)
==	O
'\t'	O
||	O
*	O
s	*(char)
==	O
'\n'	O
)	O
)	O
;	O
{	O
const	O
char	O
*	O
p	*(void)
=	O
s	*(char)
;	O
while	O
(	O
*	O
p	*(void)
==	O
' '	O
||	O
*	O
p	*(void)
==	O
'\t'	O
||	O
*	O
p	*(void)
==	O
'\n'	O
)	O
p	*(void)
++	O
;	O
if	O
(	O
*	O
p	*(void)
==	O
':'	O
)	O
{	O
p	*(void)
++	O
;	O
while	O
(	O
*	O
p	*(void)
==	O
' '	O
||	O
*	O
p	*(void)
==	O
'\t'	O
||	O
*	O
p	*(void)
==	O
'\n'	O
)	O
p	*(void)
++	O
;	O
if	O
(	O
*	O
p	*(void)
>=	O
'0'	O
&&	O
*	O
p	*(void)
<=	O
'9'	O
)	O
{	O
size_t	long
n	long
=	O
0	int
;	O
do	O
{	O
n	long
=	O
n	long
*	O
10	int
+	O
(	O
*	O
p	*(void)
-	O
'0'	O
)	O
;	O
p	*(void)
++	O
;	O
}	O
while	O
(	O
*	O
p	*(void)
>=	O
'0'	O
&&	O
*	O
p	*(void)
<=	O
'9'	O
)	O
;	O
if	O
(	O
*	O
p	*(void)
==	O
'\0'	O
||	O
*	O
p	*(void)
==	O
' '	O
||	O
*	O
p	*(void)
==	O
'\t'	O
||	O
*	O
p	*(void)
==	O
'\n'	O
)	O
{	O
const	O
char	O
*	O
string_end	*(char)
=	O
s	*(char)
;	O
size_t	long
string_length	long
=	O
string_end	*(char)
-	O
string_start	*(char)
;	O
char	O
*	O
string	*(char)
=	O
XNMALLOC	O
(	O
string_length	long
+	O
1	int
,	O
char	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
string	*(char)
,	O
string_start	*(char)
,	O
string_length	long
)	O
;	O
string	*(char)
[	O
string_length	long
]	O
=	O
'\0'	O
;	O
po_callback_comment_filepos	(*(char),long)->(void)
(	O
string	*(char)
,	O
n	long
)	O
;	O
free	(*(void))->(void)
(	O
string	*(char)
)	O
;	O
s	*(char)
=	O
p	*(void)
;	O
continue	O
;	O
}	O
}	O
}	O
}	O
if	O
(	O
s	*(char)
[	O
-	O
1	int
]	O
==	O
':'	O
)	O
{	O
const	O
char	O
*	O
p	*(void)
=	O
s	*(char)
;	O
while	O
(	O
*	O
p	*(void)
==	O
' '	O
||	O
*	O
p	*(void)
==	O
'\t'	O
||	O
*	O
p	*(void)
==	O
'\n'	O
)	O
p	*(void)
++	O
;	O
if	O
(	O
*	O
p	*(void)
>=	O
'0'	O
&&	O
*	O
p	*(void)
<=	O
'9'	O
)	O
{	O
size_t	long
n	long
=	O
0	int
;	O
do	O
{	O
n	long
=	O
n	long
*	O
10	int
+	O
(	O
*	O
p	*(void)
-	O
'0'	O
)	O
;	O
p	*(void)
++	O
;	O
}	O
while	O
(	O
*	O
p	*(void)
>=	O
'0'	O
&&	O
*	O
p	*(void)
<=	O
'9'	O
)	O
;	O
if	O
(	O
*	O
p	*(void)
==	O
'\0'	O
||	O
*	O
p	*(void)
==	O
' '	O
||	O
*	O
p	*(void)
==	O
'\t'	O
||	O
*	O
p	*(void)
==	O
'\n'	O
)	O
{	O
const	O
char	O
*	O
string_end	*(char)
=	O
s	*(char)
-	O
1	int
;	O
size_t	long
string_length	long
=	O
string_end	*(char)
-	O
string_start	*(char)
;	O
char	O
*	O
string	*(char)
=	O
XNMALLOC	O
(	O
string_length	long
+	O
1	int
,	O
char	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
string	*(char)
,	O
string_start	*(char)
,	O
string_length	long
)	O
;	O
string	*(char)
[	O
string_length	long
]	O
=	O
'\0'	O
;	O
po_callback_comment_filepos	(*(char),long)->(void)
(	O
string	*(char)
,	O
n	long
)	O
;	O
free	(*(void))->(void)
(	O
string	*(char)
)	O
;	O
s	*(char)
=	O
p	*(void)
;	O
continue	O
;	O
}	O
}	O
}	O
{	O
const	O
char	O
*	O
p	*(void)
=	O
s	*(char)
;	O
while	O
(	O
p	*(void)
>	O
string_start	*(char)
)	O
{	O
p	*(void)
--	O
;	O
if	O
(	O
!	O
(	O
*	O
p	*(void)
>=	O
'0'	O
&&	O
*	O
p	*(void)
<=	O
'9'	O
)	O
)	O
{	O
p	*(void)
++	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
p	*(void)
<	O
s	*(char)
&&	O
p	*(void)
>	O
string_start	*(char)
+	O
1	int
&&	O
p	*(void)
[	O
-	O
1	int
]	O
==	O
':'	O
)	O
{	O
const	O
char	O
*	O
string_end	*(char)
=	O
p	*(void)
-	O
1	int
;	O
{	O
size_t	long
n	long
=	O
0	int
;	O
do	O
{	O
n	long
=	O
n	long
*	O
10	int
+	O
(	O
*	O
p	*(void)
-	O
'0'	O
)	O
;	O
p	*(void)
++	O
;	O
}	O
while	O
(	O
p	*(void)
<	O
s	*(char)
)	O
;	O
{	O
size_t	long
string_length	long
=	O
string_end	*(char)
-	O
string_start	*(char)
;	O
char	O
*	O
string	*(char)
=	O
XNMALLOC	O
(	O
string_length	long
+	O
1	int
,	O
char	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
string	*(char)
,	O
string_start	*(char)
,	O
string_length	long
)	O
;	O
string	*(char)
[	O
string_length	long
]	O
=	O
'\0'	O
;	O
po_callback_comment_filepos	(*(char),long)->(void)
(	O
string	*(char)
,	O
n	long
)	O
;	O
free	(*(void))->(void)
(	O
string	*(char)
)	O
;	O
continue	O
;	O
}	O
}	O
}	O
}	O
{	O
const	O
char	O
*	O
string_end	*(char)
=	O
s	*(char)
;	O
size_t	long
string_length	long
=	O
string_end	*(char)
-	O
string_start	*(char)
;	O
char	O
*	O
string	*(char)
=	O
XNMALLOC	O
(	O
string_length	long
+	O
1	int
,	O
char	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
string	*(char)
,	O
string_start	*(char)
,	O
string_length	long
)	O
;	O
string	*(char)
[	O
string_length	long
]	O
=	O
'\0'	O
;	O
po_callback_comment_filepos	(*(char),long)->(void)
(	O
string	*(char)
,	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
)	O
;	O
free	(*(void))->(void)
(	O
string	*(char)
)	O
;	O
}	O
}	O
}	O
}	O
static	O
bool	bool
po_parse_comment_solaris_filepos	(*(char))->(bool)
(	O
const	O
char	O
*	O
s	*(char)
)	O
{	O
if	O
(	O
s	*(char)
[	O
0	int
]	O
==	O
' '	O
&&	O
(	O
s	*(char)
[	O
1	int
]	O
==	O
'F'	O
||	O
s	*(char)
[	O
1	int
]	O
==	O
'f'	O
)	O
&&	O
s	*(char)
[	O
2	int
]	O
==	O
'i'	O
&&	O
s	*(char)
[	O
3	int
]	O
==	O
'l'	O
&&	O
s	*(char)
[	O
4	int
]	O
==	O
'e'	O
&&	O
s	*(char)
[	O
5	int
]	O
==	O
':'	O
)	O
{	O
const	O
char	O
*	O
string_start	*(char)
;	O
const	O
char	O
*	O
string_end	*(char)
;	O
{	O
const	O
char	O
*	O
p	*(void)
=	O
s	*(char)
+	O
6	int
;	O
while	O
(	O
*	O
p	*(void)
==	O
' '	O
||	O
*	O
p	*(void)
==	O
'\t'	O
)	O
p	*(void)
++	O
;	O
string_start	*(char)
=	O
p	*(void)
;	O
}	O
for	O
(	O
string_end	*(char)
=	O
string_start	*(char)
;	O
*	O
string_end	*(char)
!=	O
'\0'	O
;	O
string_end	*(char)
++	O
)	O
{	O
const	O
char	O
*	O
p	*(void)
=	O
string_end	*(char)
;	O
while	O
(	O
*	O
p	*(void)
==	O
' '	O
||	O
*	O
p	*(void)
==	O
'\t'	O
)	O
p	*(void)
++	O
;	O
if	O
(	O
*	O
p	*(void)
==	O
','	O
)	O
{	O
p	*(void)
++	O
;	O
while	O
(	O
*	O
p	*(void)
==	O
' '	O
||	O
*	O
p	*(void)
==	O
'\t'	O
)	O
p	*(void)
++	O
;	O
if	O
(	O
p	*(void)
[	O
0	int
]	O
==	O
'l'	O
&&	O
p	*(void)
[	O
1	int
]	O
==	O
'i'	O
&&	O
p	*(void)
[	O
2	int
]	O
==	O
'n'	O
&&	O
p	*(void)
[	O
3	int
]	O
==	O
'e'	O
)	O
{	O
p	*(void)
+=	O
4	int
;	O
while	O
(	O
*	O
p	*(void)
==	O
' '	O
||	O
*	O
p	*(void)
==	O
'\t'	O
)	O
p	*(void)
++	O
;	O
if	O
(	O
p	*(void)
[	O
0	int
]	O
==	O
'n'	O
&&	O
p	*(void)
[	O
1	int
]	O
==	O
'u'	O
&&	O
p	*(void)
[	O
2	int
]	O
==	O
'm'	O
&&	O
p	*(void)
[	O
3	int
]	O
==	O
'b'	O
&&	O
p	*(void)
[	O
4	int
]	O
==	O
'e'	O
&&	O
p	*(void)
[	O
5	int
]	O
==	O
'r'	O
)	O
{	O
p	*(void)
+=	O
6	int
;	O
while	O
(	O
*	O
p	*(void)
==	O
' '	O
||	O
*	O
p	*(void)
==	O
'\t'	O
)	O
p	*(void)
++	O
;	O
}	O
if	O
(	O
*	O
p	*(void)
==	O
':'	O
)	O
{	O
p	*(void)
++	O
;	O
if	O
(	O
*	O
p	*(void)
>=	O
'0'	O
&&	O
*	O
p	*(void)
<=	O
'9'	O
)	O
{	O
size_t	long
n	long
=	O
0	int
;	O
do	O
{	O
n	long
=	O
n	long
*	O
10	int
+	O
(	O
*	O
p	*(void)
-	O
'0'	O
)	O
;	O
p	*(void)
++	O
;	O
}	O
while	O
(	O
*	O
p	*(void)
>=	O
'0'	O
&&	O
*	O
p	*(void)
<=	O
'9'	O
)	O
;	O
while	O
(	O
*	O
p	*(void)
==	O
' '	O
||	O
*	O
p	*(void)
==	O
'\t'	O
||	O
*	O
p	*(void)
==	O
'\n'	O
)	O
p	*(void)
++	O
;	O
if	O
(	O
*	O
p	*(void)
==	O
'\0'	O
)	O
{	O
size_t	long
string_length	long
=	O
string_end	*(char)
-	O
string_start	*(char)
;	O
char	O
*	O
string	*(char)
=	O
XNMALLOC	O
(	O
string_length	long
+	O
1	int
,	O
char	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
string	*(char)
,	O
string_start	*(char)
,	O
string_length	long
)	O
;	O
string	*(char)
[	O
string_length	long
]	O
=	O
'\0'	O
;	O
po_callback_comment_filepos	(*(char),long)->(void)
(	O
string	*(char)
,	O
n	long
)	O
;	O
free	(*(void))->(void)
(	O
string	*(char)
)	O
;	O
return	O
true	int
;	O
}	O
}	O
}	O
}	O
}	O
}	O
}	O
return	O
false	int
;	O
}	O
void	O
po_callback_comment_dispatcher	(*(char))->(void)
(	O
const	O
char	O
*	O
s	*(char)
)	O
{	O
if	O
(	O
*	O
s	*(char)
==	O
'.'	O
)	O
{	O
s	*(char)
++	O
;	O
if	O
(	O
*	O
s	*(char)
==	O
' '	O
)	O
s	*(char)
++	O
;	O
po_callback_comment_dot	(*(char))->(void)
(	O
s	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
*	O
s	*(char)
==	O
':'	O
)	O
{	O
po_parse_comment_filepos	(*(char))->(void)
(	O
s	*(char)
+	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
*	O
s	*(char)
==	O
','	O
||	O
*	O
s	*(char)
==	O
'!'	O
)	O
{	O
po_callback_comment_special	(*(char))->(void)
(	O
s	*(char)
+	O
1	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
po_parse_comment_solaris_filepos	(*(char))->(bool)
(	O
s	*(char)
)	O
)	O
;	O
else	O
{	O
if	O
(	O
*	O
s	*(char)
==	O
' '	O
)	O
s	*(char)
++	O
;	O
po_callback_comment	(*(char))->(void)
(	O
s	*(char)
)	O
;	O
}	O
}	O
}	O
