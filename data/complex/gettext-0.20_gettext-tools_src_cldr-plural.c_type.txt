static	O
int	O
yylex	O
(	O
YYSTYPE	O
*	O
lval	O
,	O
struct	O
cldr_plural_parse_args	O
*	O
arg	O
)	O
;	O
static	O
void	O
yyerror	O
(	O
struct	O
cldr_plural_parse_args	O
*	O
arg	O
,	O
const	O
char	O
*	O
str	*(char)
)	O
;	O
static	O
struct	O
cldr_plural_rule_ty	O
*	O
new_rule	O
(	O
char	O
*	O
name	O
,	O
struct	O
cldr_plural_condition_ty	O
*	O
condition	O
)	O
{	O
struct	O
cldr_plural_rule_ty	O
*	O
result	O
=	O
XMALLOC	O
(	O
struct	O
cldr_plural_rule_ty	O
)	O
;	O
result	O
->	O
name	O
=	O
name	O
;	O
result	O
->	O
condition	O
=	O
condition	O
;	O
return	O
result	O
;	O
}	O
static	O
struct	O
cldr_plural_condition_ty	O
*	O
new_leaf_condition	O
(	O
struct	O
cldr_plural_relation_ty	struct(*(struct(int,int)),enum(int,int),*(struct(*(*(struct(*`,*`))),long,long)))
*	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
)	O
{	O
struct	O
cldr_plural_condition_ty	O
*	O
result	O
=	O
XMALLOC	O
(	O
struct	O
cldr_plural_condition_ty	O
)	O
;	O
result	O
->	O
type	enum(int,int)
=	O
CLDR_PLURAL_CONDITION_RELATION	int
;	O
result	O
->	O
value	union(int,struct(double,int))
.	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
=	O
relation	*(struct(*(struct(int,int)),enum(int,int),*(struct(*(*`),long,long))))
;	O
return	O
result	O
;	O
}	O
static	O
struct	O
cldr_plural_condition_ty	O
*	O
new_branch_condition	O
(	O
enum	O
cldr_plural_condition	enum(int,int,int,int,int)
type	enum(int,int)
,	O
struct	O
cldr_plural_condition_ty	O
*	O
condition0	O
,	O
struct	O
cldr_plural_condition_ty	O
*	O
condition1	O
)	O
{	O
struct	O
cldr_plural_condition_ty	O
*	O
result	O
=	O
XMALLOC	O
(	O
struct	O
cldr_plural_condition_ty	O
)	O
;	O
result	O
->	O
type	enum(int,int)
=	O
type	enum(int,int)
;	O
result	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
0	int
]	O
=	O
condition0	O
;	O
result	O
->	O
value	union(int,struct(double,int))
.	O
conditions	array(*(struct(enum(int,int,int,int,int))))
[	O
1	int
]	O
=	O
condition1	O
;	O
return	O
result	O
;	O
}	O
static	O
struct	O
cldr_plural_relation_ty	struct(*(struct(int,int)),enum(int,int),*(struct(*(*(struct(*`,*`))),long,long)))
*	O
new_relation	O
(	O
struct	O
cldr_plural_expression_ty	struct(int,int)
*	O
expression	*(struct(int,int))
,	O
enum	O
cldr_plural_relation	enum(int,int)
type	enum(int,int)
,	O
struct	O
cldr_plural_range_list_ty	struct(*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`))))),long,long)
*	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
)	O
{	O
struct	O
cldr_plural_relation_ty	struct(*(struct(int,int)),enum(int,int),*(struct(*(*(struct(*`,*`))),long,long)))
*	O
result	O
=	O
XMALLOC	O
(	O
struct	O
cldr_plural_relation_ty	struct(*(struct(int,int)),enum(int,int),*(struct(*(*(struct(*`,*`))),long,long)))
)	O
;	O
result	O
->	O
expression	*(struct(int,int))
=	O
expression	*(struct(int,int))
;	O
result	O
->	O
type	enum(int,int)
=	O
type	enum(int,int)
;	O
result	O
->	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
=	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
;	O
return	O
result	O
;	O
}	O
static	O
struct	O
cldr_plural_expression_ty	struct(int,int)
*	O
new_expression	O
(	O
int	O
operand	int
,	O
int	O
mod	int
)	O
{	O
struct	O
cldr_plural_expression_ty	struct(int,int)
*	O
result	O
=	O
XMALLOC	O
(	O
struct	O
cldr_plural_expression_ty	struct(int,int)
)	O
;	O
result	O
->	O
operand	int
=	O
operand	int
;	O
result	O
->	O
mod	int
=	O
mod	int
;	O
return	O
result	O
;	O
}	O
static	O
struct	O
cldr_plural_range_list_ty	struct(*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`))))),long,long)
*	O
add_range	O
(	O
struct	O
cldr_plural_range_list_ty	struct(*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`))))),long,long)
*	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
,	O
struct	O
cldr_plural_range_ty	struct(*(struct(enum(int,int),union(int,struct(double,int)))),*(struct(enum(int,int),union(int,struct(double,int)))))
*	O
range	O
)	O
{	O
if	O
(	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
nitems	long
==	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
nitems_max	long
)	O
{	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
nitems_max	long
=	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
nitems_max	long
*	O
2	int
+	O
1	int
;	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
items	*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`)))))
=	O
xrealloc	(*(void),long)->(*(void))
(	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
items	*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`)))))
,	O
sizeof	O
(	O
struct	O
cldr_plural_range_ty	struct(*(struct(enum(int,int),union(int,struct(double,int)))),*(struct(enum(int,int),union(int,struct(double,int)))))
*	O
)	O
*	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
nitems_max	long
)	O
;	O
}	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
items	*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`)))))
[	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
->	O
nitems	long
++	O
]	O
=	O
range	O
;	O
return	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
;	O
}	O
static	O
struct	O
cldr_plural_range_ty	struct(*(struct(enum(int,int),union(int,struct(double,int)))),*(struct(enum(int,int),union(int,struct(double,int)))))
*	O
new_range	O
(	O
struct	O
cldr_plural_operand_ty	struct(enum(int,int),union(int,struct(double,int)))
*	O
start	*(char)
,	O
struct	O
cldr_plural_operand_ty	struct(enum(int,int),union(int,struct(double,int)))
*	O
end	*(struct(enum(int,int),union(int,struct(double,int))))
)	O
{	O
struct	O
cldr_plural_range_ty	struct(*(struct(enum(int,int),union(int,struct(double,int)))),*(struct(enum(int,int),union(int,struct(double,int)))))
*	O
result	O
=	O
XMALLOC	O
(	O
struct	O
cldr_plural_range_ty	struct(*(struct(enum(int,int),union(int,struct(double,int)))),*(struct(enum(int,int),union(int,struct(double,int)))))
)	O
;	O
result	O
->	O
start	*(char)
=	O
start	*(char)
;	O
result	O
->	O
end	*(struct(enum(int,int),union(int,struct(double,int))))
=	O
end	*(struct(enum(int,int),union(int,struct(double,int))))
;	O
return	O
result	O
;	O
}	O
typedef	O
unsigned	O
char	O
yytype_uint8	O
;	O
typedef	O
signed	O
char	O
yytype_int8	O
;	O
typedef	O
unsigned	O
short	O
yytype_uint16	O
;	O
typedef	O
short	O
yytype_int16	O
;	O
union	O
yyalloc	O
{	O
yytype_int16	O
yyss_alloc	O
;	O
YYSTYPE	O
yyvs_alloc	O
;	O
}	O
;	O
static	O
const	O
yytype_uint8	O
yytranslate	O
[	O
]	O
=	O
{	O
0	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
17	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
18	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
19	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
15	int
,	O
14	int
,	O
2	int
,	O
16	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
20	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
1	int
,	O
2	int
,	O
3	int
,	O
4	int
,	O
5	int
,	O
6	int
,	O
7	int
,	O
8	int
,	O
9	int
,	O
10	int
,	O
11	int
,	O
12	int
,	O
13	int
}	O
;	O
static	O
const	O
yytype_int8	O
yypact	O
[	O
]	O
=	O
{	O
3	int
,	O
-	O
11	int
,	O
-	O
7	int
,	O
0	int
,	O
-	O
20	int
,	O
4	int
,	O
-	O
2	int
,	O
-	O
20	int
,	O
3	int
,	O
-	O
9	int
,	O
-	O
20	int
,	O
8	int
,	O
2	int
,	O
1	int
,	O
15	int
,	O
-	O
20	int
,	O
-	O
1	int
,	O
-	O
20	int
,	O
5	int
,	O
6	int
,	O
-	O
20	int
,	O
9	int
,	O
-	O
20	int
,	O
-	O
9	int
,	O
-	O
20	int
,	O
10	int
,	O
-	O
2	int
,	O
-	O
20	int
,	O
-	O
2	int
,	O
11	int
,	O
11	int
,	O
12	int
,	O
7	int
,	O
-	O
5	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
15	int
,	O
-	O
20	int
,	O
19	int
,	O
13	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
13	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
16	int
,	O
11	int
,	O
-	O
20	int
,	O
-	O
20	int
}	O
;	O
static	O
const	O
yytype_uint8	O
yydefact	O
[	O
]	O
=	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
2	int
,	O
20	int
,	O
0	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
5	int
,	O
22	int
,	O
12	int
,	O
20	int
,	O
6	int
,	O
8	int
,	O
0	int
,	O
3	int
,	O
31	int
,	O
29	int
,	O
21	int
,	O
27	int
,	O
25	int
,	O
0	int
,	O
19	int
,	O
0	int
,	O
0	int
,	O
4	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
24	int
,	O
23	int
,	O
13	int
,	O
7	int
,	O
9	int
,	O
17	int
,	O
10	int
,	O
14	int
,	O
16	int
,	O
11	int
,	O
32	int
,	O
30	int
,	O
28	int
,	O
26	int
,	O
0	int
,	O
0	int
,	O
18	int
,	O
15	int
}	O
;	O
static	O
const	O
yytype_int8	O
yypgoto	O
[	O
]	O
=	O
{	O
-	O
20	int
,	O
-	O
20	int
,	O
21	int
,	O
-	O
20	int
,	O
14	int
,	O
17	int
,	O
-	O
20	int
,	O
18	int
,	O
-	O
19	int
,	O
-	O
20	int
,	O
20	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
23	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
22	int
}	O
;	O
static	O
const	O
yytype_int8	O
yydefgoto	O
[	O
]	O
=	O
{	O
-	O
1	int
,	O
3	int
,	O
4	int
,	O
13	int
,	O
14	int
,	O
15	int
,	O
16	int
,	O
40	int
,	O
41	int
,	O
42	int
,	O
10	int
,	O
11	int
,	O
24	int
,	O
20	int
,	O
21	int
,	O
34	int
,	O
22	int
}	O
;	O
static	O
const	O
yytype_uint8	O
yytable	O
[	O
]	O
=	O
{	O
7	int
,	O
46	int
,	O
18	int
,	O
19	int
,	O
5	int
,	O
26	int
,	O
18	int
,	O
19	int
,	O
6	int
,	O
9	int
,	O
1	int
,	O
12	int
,	O
9	int
,	O
2	int
,	O
8	int
,	O
29	int
,	O
30	int
,	O
23	int
,	O
28	int
,	O
45	int
,	O
25	int
,	O
36	int
,	O
39	int
,	O
44	int
,	O
48	int
,	O
31	int
,	O
32	int
,	O
50	int
,	O
33	int
,	O
17	int
,	O
51	int
,	O
0	int
,	O
49	int
,	O
27	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
37	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
38	int
,	O
35	int
,	O
0	int
,	O
43	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
47	int
}	O
;	O
static	O
const	O
yytype_int8	O
yycheck	O
[	O
]	O
=	O
{	O
0	int
,	O
6	int
,	O
11	int
,	O
12	int
,	O
15	int
,	O
4	int
,	O
11	int
,	O
12	int
,	O
15	int
,	O
8	int
,	O
7	int
,	O
13	int
,	O
8	int
,	O
10	int
,	O
14	int
,	O
16	int
,	O
17	int
,	O
9	int
,	O
3	int
,	O
12	int
,	O
18	int
,	O
11	int
,	O
11	int
,	O
11	int
,	O
5	int
,	O
20	int
,	O
20	int
,	O
11	int
,	O
19	int
,	O
8	int
,	O
49	int
,	O
-	O
1	int
,	O
19	int
,	O
13	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
26	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
28	int
,	O
23	int
,	O
-	O
1	int
,	O
30	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
33	int
}	O
;	O
static	O
const	O
yytype_uint8	O
yystos	O
[	O
]	O
=	O
{	O
0	int
,	O
7	int
,	O
10	int
,	O
22	int
,	O
23	int
,	O
15	int
,	O
15	int
,	O
0	int
,	O
14	int
,	O
8	int
,	O
31	int
,	O
32	int
,	O
13	int
,	O
24	int
,	O
25	int
,	O
26	int
,	O
27	int
,	O
23	int
,	O
11	int
,	O
12	int
,	O
34	int
,	O
35	int
,	O
37	int
,	O
9	int
,	O
33	int
,	O
18	int
,	O
4	int
,	O
31	int
,	O
3	int
,	O
16	int
,	O
17	int
,	O
20	int
,	O
20	int
,	O
19	int
,	O
36	int
,	O
34	int
,	O
11	int
,	O
25	int
,	O
26	int
,	O
11	int
,	O
28	int
,	O
29	int
,	O
30	int
,	O
28	int
,	O
11	int
,	O
12	int
,	O
6	int
,	O
37	int
,	O
5	int
,	O
19	int
,	O
11	int
,	O
29	int
}	O
;	O
static	O
const	O
yytype_uint8	O
yyr1	O
[	O
]	O
=	O
{	O
0	int
,	O
21	int
,	O
22	int
,	O
22	int
,	O
23	int
,	O
23	int
,	O
24	int
,	O
24	int
,	O
25	int
,	O
25	int
,	O
26	int
,	O
26	int
,	O
27	int
,	O
27	int
,	O
28	int
,	O
28	int
,	O
29	int
,	O
29	int
,	O
30	int
,	O
31	int
,	O
32	int
,	O
32	int
,	O
33	int
,	O
33	int
,	O
34	int
,	O
35	int
,	O
35	int
,	O
36	int
,	O
36	int
,	O
37	int
,	O
37	int
,	O
37	int
,	O
37	int
}	O
;	O
static	O
const	O
yytype_uint8	O
yyr2	O
[	O
]	O
=	O
{	O
0	int
,	O
2	int
,	O
1	int
,	O
3	int
,	O
4	int
,	O
3	int
,	O
1	int
,	O
3	int
,	O
1	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
1	int
,	O
3	int
,	O
1	int
,	O
3	int
,	O
1	int
,	O
1	int
,	O
3	int
,	O
2	int
,	O
0	int
,	O
2	int
,	O
0	int
,	O
2	int
,	O
2	int
,	O
1	int
,	O
3	int
,	O
0	int
,	O
2	int
,	O
1	int
,	O
3	int
,	O
1	int
,	O
3	int
}	O
;	O
static	O
void	O
yydestruct	O
(	O
const	O
char	O
*	O
yymsg	O
,	O
int	O
yytype	O
,	O
YYSTYPE	O
*	O
yyvaluep	O
,	O
struct	O
cldr_plural_parse_args	O
*	O
arg	O
)	O
{	O
YYUSE	O
(	O
yyvaluep	O
)	O
;	O
YYUSE	O
(	O
arg	O
)	O
;	O
if	O
(	O
!	O
yymsg	O
)	O
yymsg	O
=	O
"Deleting"	*(char)
;	O
YY_SYMBOL_PRINT	O
(	O
yymsg	O
,	O
yytype	O
,	O
yyvaluep	O
,	O
yylocationp	O
)	O
;	O
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	O
switch	O
(	O
yytype	O
)	O
{	O
case	O
10	int
:	O
{	O
free	(*(void))->(void)
(	O
(	O
(	O
*	O
yyvaluep	O
)	O
.	O
sval	O
)	O
)	O
;	O
}	O
break	O
;	O
case	O
11	int
:	O
{	O
free	(*(void))->(void)
(	O
(	O
(	O
*	O
yyvaluep	O
)	O
.	O
oval	O
)	O
)	O
;	O
}	O
break	O
;	O
case	O
12	int
:	O
{	O
free	(*(void))->(void)
(	O
(	O
(	O
*	O
yyvaluep	O
)	O
.	O
oval	O
)	O
)	O
;	O
}	O
break	O
;	O
case	O
13	int
:	O
{	O
}	O
break	O
;	O
case	O
24	int
:	O
{	O
cldr_plural_condition_free	O
(	O
(	O
(	O
*	O
yyvaluep	O
)	O
.	O
cval	O
)	O
)	O
;	O
}	O
break	O
;	O
case	O
25	int
:	O
{	O
cldr_plural_condition_free	O
(	O
(	O
(	O
*	O
yyvaluep	O
)	O
.	O
cval	O
)	O
)	O
;	O
}	O
break	O
;	O
case	O
26	int
:	O
{	O
cldr_plural_relation_free	O
(	O
(	O
(	O
*	O
yyvaluep	O
)	O
.	O
lval	O
)	O
)	O
;	O
}	O
break	O
;	O
case	O
27	int
:	O
{	O
free	(*(void))->(void)
(	O
(	O
(	O
*	O
yyvaluep	O
)	O
.	O
eval	O
)	O
)	O
;	O
}	O
break	O
;	O
case	O
28	int
:	O
{	O
cldr_plural_range_list_free	O
(	O
(	O
(	O
*	O
yyvaluep	O
)	O
.	O
rval	O
)	O
)	O
;	O
}	O
break	O
;	O
case	O
29	int
:	O
{	O
cldr_plural_range_free	O
(	O
(	O
(	O
*	O
yyvaluep	O
)	O
.	O
gval	O
)	O
)	O
;	O
}	O
break	O
;	O
case	O
30	int
:	O
{	O
cldr_plural_range_free	O
(	O
(	O
(	O
*	O
yyvaluep	O
)	O
.	O
gval	O
)	O
)	O
;	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
YY_IGNORE_MAYBE_UNINITIALIZED_END	O
}	O
int	O
yyparse	O
(	O
struct	O
cldr_plural_parse_args	O
*	O
arg	O
)	O
{	O
int	O
yychar	O
;	O
YY_INITIAL_VALUE	O
(	O
static	O
YYSTYPE	O
yyval_default	O
;	O
)	O
YYSTYPE	O
yylval	O
YY_INITIAL_VALUE	O
(	O
=	O
yyval_default	O
)	O
;	O
int	O
yynerrs	O
;	O
int	O
yystate	O
;	O
int	O
yyerrstatus	O
;	O
yytype_int16	O
yyssa	O
[	O
YYINITDEPTH	O
]	O
;	O
yytype_int16	O
*	O
yyss	O
;	O
yytype_int16	O
*	O
yyssp	O
;	O
YYSTYPE	O
yyvsa	O
[	O
YYINITDEPTH	O
]	O
;	O
YYSTYPE	O
*	O
yyvs	O
;	O
YYSTYPE	O
*	O
yyvsp	O
;	O
YYSIZE_T	O
yystacksize	O
;	O
int	O
yyn	O
;	O
int	O
yyresult	O
;	O
int	O
yytoken	O
=	O
0	int
;	O
YYSTYPE	O
yyval	O
;	O
int	O
yylen	O
=	O
0	int
;	O
yyssp	O
=	O
yyss	O
=	O
yyssa	O
;	O
yyvsp	O
=	O
yyvs	O
=	O
yyvsa	O
;	O
yystacksize	O
=	O
YYINITDEPTH	O
;	O
YYDPRINTF	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Starting parse\n"	*(char)
)	O
)	O
;	O
yystate	O
=	O
0	int
;	O
yyerrstatus	O
=	O
0	int
;	O
yynerrs	O
=	O
0	int
;	O
yychar	O
=	O
YYEMPTY	O
;	O
goto	O
yysetstate	O
;	O
yynewstate	O
:	O
yyssp	O
++	O
;	O
yysetstate	O
:	O
*	O
yyssp	O
=	O
(	O
yytype_int16	O
)	O
yystate	O
;	O
if	O
(	O
yyss	O
+	O
yystacksize	O
-	O
1	int
<=	O
yyssp	O
)	O
{	O
YYSIZE_T	O
yysize	O
=	O
(	O
YYSIZE_T	O
)	O
(	O
yyssp	O
-	O
yyss	O
+	O
1	int
)	O
;	O
if	O
(	O
YYMAXDEPTH	O
<=	O
yystacksize	O
)	O
goto	O
yyexhaustedlab	O
;	O
yystacksize	O
*=	O
2	int
;	O
if	O
(	O
YYMAXDEPTH	O
<	O
yystacksize	O
)	O
yystacksize	O
=	O
YYMAXDEPTH	O
;	O
{	O
yytype_int16	O
*	O
yyss1	O
=	O
yyss	O
;	O
union	O
yyalloc	O
*	O
yyptr	O
=	O
(	O
union	O
yyalloc	O
*	O
)	O
YYSTACK_ALLOC	O
(	O
YYSTACK_BYTES	O
(	O
yystacksize	O
)	O
)	O
;	O
if	O
(	O
!	O
yyptr	O
)	O
goto	O
yyexhaustedlab	O
;	O
YYSTACK_RELOCATE	O
(	O
yyss_alloc	O
,	O
yyss	O
)	O
;	O
YYSTACK_RELOCATE	O
(	O
yyvs_alloc	O
,	O
yyvs	O
)	O
;	O
if	O
(	O
yyss1	O
!=	O
yyssa	O
)	O
YYSTACK_FREE	O
(	O
yyss1	O
)	O
;	O
}	O
yyssp	O
=	O
yyss	O
+	O
yysize	O
-	O
1	int
;	O
yyvsp	O
=	O
yyvs	O
+	O
yysize	O
-	O
1	int
;	O
YYDPRINTF	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Stack size increased to %lu\n"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
yystacksize	O
)	O
)	O
;	O
if	O
(	O
yyss	O
+	O
yystacksize	O
-	O
1	int
<=	O
yyssp	O
)	O
YYABORT	O
;	O
}	O
YYDPRINTF	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Entering state %d\n"	*(char)
,	O
yystate	O
)	O
)	O
;	O
if	O
(	O
yystate	O
==	O
YYFINAL	O
)	O
YYACCEPT	O
;	O
goto	O
yybackup	O
;	O
yybackup	O
:	O
yyn	O
=	O
yypact	O
[	O
yystate	O
]	O
;	O
if	O
(	O
yypact_value_is_default	O
(	O
yyn	O
)	O
)	O
goto	O
yydefault	O
;	O
if	O
(	O
yychar	O
==	O
YYEMPTY	O
)	O
{	O
YYDPRINTF	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Reading a token: "	*(char)
)	O
)	O
;	O
yychar	O
=	O
yylex	O
(	O
&	O
yylval	O
,	O
arg	O
)	O
;	O
}	O
if	O
(	O
yychar	O
<=	O
YYEOF	O
)	O
{	O
yychar	O
=	O
yytoken	O
=	O
YYEOF	O
;	O
YYDPRINTF	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Now at end of input.\n"	*(char)
)	O
)	O
;	O
}	O
else	O
{	O
yytoken	O
=	O
YYTRANSLATE	O
(	O
yychar	O
)	O
;	O
YY_SYMBOL_PRINT	O
(	O
"Next token is"	*(char)
,	O
yytoken	O
,	O
&	O
yylval	O
,	O
&	O
yylloc	O
)	O
;	O
}	O
yyn	O
+=	O
yytoken	O
;	O
if	O
(	O
yyn	O
<	O
0	int
||	O
YYLAST	O
<	O
yyn	O
||	O
yycheck	O
[	O
yyn	O
]	O
!=	O
yytoken	O
)	O
goto	O
yydefault	O
;	O
yyn	O
=	O
yytable	O
[	O
yyn	O
]	O
;	O
if	O
(	O
yyn	O
<=	O
0	int
)	O
{	O
if	O
(	O
yytable_value_is_error	O
(	O
yyn	O
)	O
)	O
goto	O
yyerrlab	O
;	O
yyn	O
=	O
-	O
yyn	O
;	O
goto	O
yyreduce	O
;	O
}	O
if	O
(	O
yyerrstatus	O
)	O
yyerrstatus	O
--	O
;	O
YY_SYMBOL_PRINT	O
(	O
"Shifting"	*(char)
,	O
yytoken	O
,	O
&	O
yylval	O
,	O
&	O
yylloc	O
)	O
;	O
yychar	O
=	O
YYEMPTY	O
;	O
yystate	O
=	O
yyn	O
;	O
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	O
*	O
++	O
yyvsp	O
=	O
yylval	O
;	O
YY_IGNORE_MAYBE_UNINITIALIZED_END	O
goto	O
yynewstate	O
;	O
yydefault	O
:	O
yyn	O
=	O
yydefact	O
[	O
yystate	O
]	O
;	O
if	O
(	O
yyn	O
==	O
0	int
)	O
goto	O
yyerrlab	O
;	O
goto	O
yyreduce	O
;	O
yyreduce	O
:	O
yylen	O
=	O
yyr2	O
[	O
yyn	O
]	O
;	O
yyval	O
=	O
yyvsp	O
[	O
1	int
-	O
yylen	O
]	O
;	O
YY_REDUCE_PRINT	O
(	O
yyn	O
)	O
;	O
switch	O
(	O
yyn	O
)	O
{	O
case	O
4	int
:	O
{	O
struct	O
cldr_plural_rule_ty	O
*	O
rule	O
=	O
new_rule	O
(	O
(	O
yyvsp	O
[	O
-	O
3	int
]	O
.	O
sval	O
)	O
,	O
(	O
yyvsp	O
[	O
-	O
1	int
]	O
.	O
cval	O
)	O
)	O
;	O
struct	O
cldr_plural_rule_list_ty	O
*	O
result	O
=	O
arg	O
->	O
result	O
;	O
if	O
(	O
result	O
->	O
nitems	long
==	O
result	O
->	O
nitems_max	long
)	O
{	O
result	O
->	O
nitems_max	long
=	O
result	O
->	O
nitems_max	long
*	O
2	int
+	O
1	int
;	O
result	O
->	O
items	*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`)))))
=	O
xrealloc	(*(void),long)->(*(void))
(	O
result	O
->	O
items	*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`)))))
,	O
sizeof	O
(	O
struct	O
cldr_plural_rule_ty	O
*	O
)	O
*	O
result	O
->	O
nitems_max	long
)	O
;	O
}	O
result	O
->	O
items	*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`)))))
[	O
result	O
->	O
nitems	long
++	O
]	O
=	O
rule	O
;	O
}	O
break	O
;	O
case	O
6	int
:	O
{	O
(	O
yyval	O
.	O
cval	O
)	O
=	O
(	O
yyvsp	O
[	O
0	int
]	O
.	O
cval	O
)	O
;	O
}	O
break	O
;	O
case	O
7	int
:	O
{	O
(	O
yyval	O
.	O
cval	O
)	O
=	O
new_branch_condition	O
(	O
CLDR_PLURAL_CONDITION_OR	int
,	O
(	O
yyvsp	O
[	O
-	O
2	int
]	O
.	O
cval	O
)	O
,	O
(	O
yyvsp	O
[	O
0	int
]	O
.	O
cval	O
)	O
)	O
;	O
}	O
break	O
;	O
case	O
8	int
:	O
{	O
(	O
yyval	O
.	O
cval	O
)	O
=	O
new_leaf_condition	O
(	O
(	O
yyvsp	O
[	O
0	int
]	O
.	O
lval	O
)	O
)	O
;	O
}	O
break	O
;	O
case	O
9	int
:	O
{	O
(	O
yyval	O
.	O
cval	O
)	O
=	O
new_branch_condition	O
(	O
CLDR_PLURAL_CONDITION_AND	int
,	O
(	O
yyvsp	O
[	O
-	O
2	int
]	O
.	O
cval	O
)	O
,	O
new_leaf_condition	O
(	O
(	O
yyvsp	O
[	O
0	int
]	O
.	O
lval	O
)	O
)	O
)	O
;	O
}	O
break	O
;	O
case	O
10	int
:	O
{	O
(	O
yyval	O
.	O
lval	O
)	O
=	O
new_relation	O
(	O
(	O
yyvsp	O
[	O
-	O
2	int
]	O
.	O
eval	O
)	O
,	O
CLDR_PLURAL_RELATION_EQUAL	int
,	O
(	O
yyvsp	O
[	O
0	int
]	O
.	O
rval	O
)	O
)	O
;	O
}	O
break	O
;	O
case	O
11	int
:	O
{	O
(	O
yyval	O
.	O
lval	O
)	O
=	O
new_relation	O
(	O
(	O
yyvsp	O
[	O
-	O
2	int
]	O
.	O
eval	O
)	O
,	O
CLDR_PLURAL_RELATION_NOT_EQUAL	int
,	O
(	O
yyvsp	O
[	O
0	int
]	O
.	O
rval	O
)	O
)	O
;	O
}	O
break	O
;	O
case	O
12	int
:	O
{	O
(	O
yyval	O
.	O
eval	O
)	O
=	O
new_expression	O
(	O
(	O
yyvsp	O
[	O
0	int
]	O
.	O
ival	int
)	O
,	O
0	int
)	O
;	O
}	O
break	O
;	O
case	O
13	int
:	O
{	O
(	O
yyval	O
.	O
eval	O
)	O
=	O
new_expression	O
(	O
(	O
yyvsp	O
[	O
-	O
2	int
]	O
.	O
ival	int
)	O
,	O
(	O
yyvsp	O
[	O
0	int
]	O
.	O
oval	O
)	O
->	O
value	union(int,struct(double,int))
.	O
ival	int
)	O
;	O
}	O
break	O
;	O
case	O
14	int
:	O
{	O
struct	O
cldr_plural_range_list_ty	struct(*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`))))),long,long)
*	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
=	O
XMALLOC	O
(	O
struct	O
cldr_plural_range_list_ty	struct(*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`))))),long,long)
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
,	O
0	int
,	O
sizeof	O
(	O
struct	O
cldr_plural_range_list_ty	struct(*(*(struct(*(struct(enum(int,int),union`)),*(struct(enum(int,int),union`))))),long,long)
)	O
)	O
;	O
(	O
yyval	O
.	O
rval	O
)	O
=	O
add_range	O
(	O
ranges	*(struct(*(*(struct(*`,*`))),long,long))
,	O
(	O
yyvsp	O
[	O
0	int
]	O
.	O
gval	O
)	O
)	O
;	O
}	O
break	O
;	O
case	O
15	int
:	O
{	O
(	O
yyval	O
.	O
rval	O
)	O
=	O
add_range	O
(	O
(	O
yyvsp	O
[	O
-	O
2	int
]	O
.	O
rval	O
)	O
,	O
(	O
yyvsp	O
[	O
0	int
]	O
.	O
gval	O
)	O
)	O
;	O
}	O
break	O
;	O
case	O
16	int
:	O
{	O
(	O
yyval	O
.	O
gval	O
)	O
=	O
(	O
yyvsp	O
[	O
0	int
]	O
.	O
gval	O
)	O
;	O
}	O
break	O
;	O
case	O
17	int
:	O
{	O
(	O
yyval	O
.	O
gval	O
)	O
=	O
new_range	O
(	O
(	O
yyvsp	O
[	O
0	int
]	O
.	O
oval	O
)	O
,	O
(	O
yyvsp	O
[	O
0	int
]	O
.	O
oval	O
)	O
)	O
;	O
}	O
break	O
;	O
case	O
18	int
:	O
{	O
(	O
yyval	O
.	O
gval	O
)	O
=	O
new_range	O
(	O
(	O
yyvsp	O
[	O
-	O
2	int
]	O
.	O
oval	O
)	O
,	O
(	O
yyvsp	O
[	O
0	int
]	O
.	O
oval	O
)	O
)	O
;	O
}	O
break	O
;	O
case	O
29	int
:	O
{	O
free	(*(void))->(void)
(	O
(	O
yyvsp	O
[	O
0	int
]	O
.	O
oval	O
)	O
)	O
;	O
}	O
break	O
;	O
case	O
30	int
:	O
{	O
free	(*(void))->(void)
(	O
(	O
yyvsp	O
[	O
-	O
2	int
]	O
.	O
oval	O
)	O
)	O
;	O
free	(*(void))->(void)
(	O
(	O
yyvsp	O
[	O
0	int
]	O
.	O
oval	O
)	O
)	O
;	O
}	O
break	O
;	O
case	O
31	int
:	O
{	O
free	(*(void))->(void)
(	O
(	O
yyvsp	O
[	O
0	int
]	O
.	O
oval	O
)	O
)	O
;	O
}	O
break	O
;	O
case	O
32	int
:	O
{	O
free	(*(void))->(void)
(	O
(	O
yyvsp	O
[	O
-	O
2	int
]	O
.	O
oval	O
)	O
)	O
;	O
free	(*(void))->(void)
(	O
(	O
yyvsp	O
[	O
0	int
]	O
.	O
oval	O
)	O
)	O
;	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
YY_SYMBOL_PRINT	O
(	O
"-> $$ ="	*(char)
,	O
yyr1	O
[	O
yyn	O
]	O
,	O
&	O
yyval	O
,	O
&	O
yyloc	O
)	O
;	O
YYPOPSTACK	O
(	O
yylen	O
)	O
;	O
yylen	O
=	O
0	int
;	O
YY_STACK_PRINT	O
(	O
yyss	O
,	O
yyssp	O
)	O
;	O
*	O
++	O
yyvsp	O
=	O
yyval	O
;	O
{	O
const	O
int	O
yylhs	O
=	O
yyr1	O
[	O
yyn	O
]	O
-	O
YYNTOKENS	O
;	O
const	O
int	O
yyi	O
=	O
yypgoto	O
[	O
yylhs	O
]	O
+	O
*	O
yyssp	O
;	O
yystate	O
=	O
(	O
0	int
<=	O
yyi	O
&&	O
yyi	O
<=	O
YYLAST	O
&&	O
yycheck	O
[	O
yyi	O
]	O
==	O
*	O
yyssp	O
?	O
yytable	O
[	O
yyi	O
]	O
:	O
yydefgoto	O
[	O
yylhs	O
]	O
)	O
;	O
}	O
goto	O
yynewstate	O
;	O
yyerrlab	O
:	O
yytoken	O
=	O
yychar	O
==	O
YYEMPTY	O
?	O
YYEMPTY	O
:	O
YYTRANSLATE	O
(	O
yychar	O
)	O
;	O
if	O
(	O
!	O
yyerrstatus	O
)	O
{	O
++	O
yynerrs	O
;	O
yyerror	O
(	O
arg	O
,	O
YY_	O
(	O
"syntax error"	*(char)
)	O
)	O
;	O
}	O
if	O
(	O
yyerrstatus	O
==	O
3	int
)	O
{	O
if	O
(	O
yychar	O
<=	O
YYEOF	O
)	O
{	O
if	O
(	O
yychar	O
==	O
YYEOF	O
)	O
YYABORT	O
;	O
}	O
else	O
{	O
yydestruct	O
(	O
"Error: discarding"	*(char)
,	O
yytoken	O
,	O
&	O
yylval	O
,	O
arg	O
)	O
;	O
yychar	O
=	O
YYEMPTY	O
;	O
}	O
}	O
goto	O
yyerrlab1	O
;	O
yyerrorlab	O
:	O
if	O
(	O
0	int
)	O
goto	O
yyerrorlab	O
;	O
YYPOPSTACK	O
(	O
yylen	O
)	O
;	O
yylen	O
=	O
0	int
;	O
YY_STACK_PRINT	O
(	O
yyss	O
,	O
yyssp	O
)	O
;	O
yystate	O
=	O
*	O
yyssp	O
;	O
goto	O
yyerrlab1	O
;	O
yyerrlab1	O
:	O
yyerrstatus	O
=	O
3	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
yyn	O
=	O
yypact	O
[	O
yystate	O
]	O
;	O
if	O
(	O
!	O
yypact_value_is_default	O
(	O
yyn	O
)	O
)	O
{	O
yyn	O
+=	O
YYTERROR	O
;	O
if	O
(	O
0	int
<=	O
yyn	O
&&	O
yyn	O
<=	O
YYLAST	O
&&	O
yycheck	O
[	O
yyn	O
]	O
==	O
YYTERROR	O
)	O
{	O
yyn	O
=	O
yytable	O
[	O
yyn	O
]	O
;	O
if	O
(	O
0	int
<	O
yyn	O
)	O
break	O
;	O
}	O
}	O
if	O
(	O
yyssp	O
==	O
yyss	O
)	O
YYABORT	O
;	O
yydestruct	O
(	O
"Error: popping"	*(char)
,	O
yystos	O
[	O
yystate	O
]	O
,	O
yyvsp	O
,	O
arg	O
)	O
;	O
YYPOPSTACK	O
(	O
1	int
)	O
;	O
yystate	O
=	O
*	O
yyssp	O
;	O
YY_STACK_PRINT	O
(	O
yyss	O
,	O
yyssp	O
)	O
;	O
}	O
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	O
*	O
++	O
yyvsp	O
=	O
yylval	O
;	O
YY_IGNORE_MAYBE_UNINITIALIZED_END	O
YY_SYMBOL_PRINT	O
(	O
"Shifting"	*(char)
,	O
yystos	O
[	O
yyn	O
]	O
,	O
yyvsp	O
,	O
yylsp	O
)	O
;	O
yystate	O
=	O
yyn	O
;	O
goto	O
yynewstate	O
;	O
yyacceptlab	O
:	O
yyresult	O
=	O
0	int
;	O
goto	O
yyreturn	O
;	O
yyabortlab	O
:	O
yyresult	O
=	O
1	int
;	O
goto	O
yyreturn	O
;	O
yyexhaustedlab	O
:	O
yyerror	O
(	O
arg	O
,	O
YY_	O
(	O
"memory exhausted"	*(char)
)	O
)	O
;	O
yyresult	O
=	O
2	int
;	O
yyreturn	O
:	O
if	O
(	O
yychar	O
!=	O
YYEMPTY	O
)	O
{	O
yytoken	O
=	O
YYTRANSLATE	O
(	O
yychar	O
)	O
;	O
yydestruct	O
(	O
"Cleanup: discarding lookahead"	*(char)
,	O
yytoken	O
,	O
&	O
yylval	O
,	O
arg	O
)	O
;	O
}	O
YYPOPSTACK	O
(	O
yylen	O
)	O
;	O
YY_STACK_PRINT	O
(	O
yyss	O
,	O
yyssp	O
)	O
;	O
while	O
(	O
yyssp	O
!=	O
yyss	O
)	O
{	O
yydestruct	O
(	O
"Cleanup: popping"	*(char)
,	O
yystos	O
[	O
*	O
yyssp	O
]	O
,	O
yyvsp	O
,	O
arg	O
)	O
;	O
YYPOPSTACK	O
(	O
1	int
)	O
;	O
}	O
if	O
(	O
yyss	O
!=	O
yyssa	O
)	O
YYSTACK_FREE	O
(	O
yyss	O
)	O
;	O
return	O
yyresult	O
;	O
}	O
static	O
int	O
yylex	O
(	O
YYSTYPE	O
*	O
lval	O
,	O
struct	O
cldr_plural_parse_args	O
*	O
arg	O
)	O
{	O
const	O
char	O
*	O
exp	O
=	O
arg	O
->	O
cp	O
;	O
ucs4_t	int
uc	int
;	O
int	O
length	O
;	O
int	O
result	O
;	O
static	O
char	O
*	O
buffer	O
;	O
static	O
size_t	long
bufmax	O
;	O
size_t	long
bufpos	O
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
exp	O
[	O
0	int
]	O
==	O
'\0'	O
)	O
{	O
arg	O
->	O
cp	O
=	O
exp	O
;	O
return	O
YYEOF	O
;	O
}	O
if	O
(	O
exp	O
[	O
0	int
]	O
!=	O
' '	O
&&	O
exp	O
[	O
0	int
]	O
!=	O
'\t'	O
)	O
break	O
;	O
++	O
exp	O
;	O
}	O
length	O
=	O
u8_mbtouc	(*(int),*(char),long)->(int)
(	O
&	O
uc	int
,	O
(	O
const	O
uint8_t	char
*	O
)	O
exp	O
,	O
arg	O
->	O
cp_end	O
-	O
exp	O
)	O
;	O
if	O
(	O
uc	int
==	O
0x2026	int
)	O
{	O
arg	O
->	O
cp	O
=	O
exp	O
+	O
length	O
;	O
return	O
ELLIPSIS	O
;	O
}	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
"..."	*(char)
,	O
exp	O
,	O
3	int
)	O
==	O
0	int
)	O
{	O
arg	O
->	O
cp	O
=	O
exp	O
+	O
3	int
;	O
return	O
ELLIPSIS	O
;	O
}	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
".."	*(char)
,	O
exp	O
,	O
2	int
)	O
==	O
0	int
)	O
{	O
arg	O
->	O
cp	O
=	O
exp	O
+	O
2	int
;	O
return	O
RANGE	O
;	O
}	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
"other"	*(char)
,	O
exp	O
,	O
5	int
)	O
==	O
0	int
)	O
{	O
arg	O
->	O
cp	O
=	O
exp	O
+	O
5	int
;	O
return	O
OTHER	O
;	O
}	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
"@integer"	*(char)
,	O
exp	O
,	O
8	int
)	O
==	O
0	int
)	O
{	O
arg	O
->	O
cp	O
=	O
exp	O
+	O
8	int
;	O
return	O
AT_INTEGER	O
;	O
}	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
"@decimal"	*(char)
,	O
exp	O
,	O
8	int
)	O
==	O
0	int
)	O
{	O
arg	O
->	O
cp	O
=	O
exp	O
+	O
8	int
;	O
return	O
AT_DECIMAL	O
;	O
}	O
result	O
=	O
*	O
exp	O
++	O
;	O
switch	O
(	O
result	O
)	O
{	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
{	O
unsigned	O
long	O
int	O
ival	int
=	O
result	O
-	O
'0'	O
;	O
while	O
(	O
exp	O
[	O
0	int
]	O
>=	O
'0'	O
&&	O
exp	O
[	O
0	int
]	O
<=	O
'9'	O
)	O
{	O
ival	int
*=	O
10	int
;	O
ival	int
+=	O
exp	O
[	O
0	int
]	O
-	O
'0'	O
;	O
++	O
exp	O
;	O
}	O
lval	O
->	O
oval	O
=	O
XMALLOC	O
(	O
struct	O
cldr_plural_operand_ty	struct(enum(int,int),union(int,struct(double,int)))
)	O
;	O
if	O
(	O
exp	O
[	O
0	int
]	O
==	O
'.'	O
&&	O
exp	O
[	O
1	int
]	O
>=	O
'0'	O
&&	O
exp	O
[	O
1	int
]	O
<=	O
'9'	O
)	O
{	O
double	O
dval	struct(double,int)
=	O
ival	int
;	O
int	O
denominator	O
=	O
10	int
,	O
nfractions	int
=	O
0	int
;	O
++	O
exp	O
;	O
while	O
(	O
exp	O
[	O
0	int
]	O
>=	O
'0'	O
&&	O
exp	O
[	O
0	int
]	O
<=	O
'9'	O
)	O
{	O
dval	struct(double,int)
+=	O
(	O
exp	O
[	O
0	int
]	O
-	O
'0'	O
)	O
/	O
(	O
double	O
)	O
denominator	O
;	O
denominator	O
*=	O
10	int
;	O
++	O
nfractions	int
;	O
++	O
exp	O
;	O
}	O
lval	O
->	O
oval	O
->	O
type	enum(int,int)
=	O
CLDR_PLURAL_OPERAND_DECIMAL	int
;	O
lval	O
->	O
oval	O
->	O
value	union(int,struct(double,int))
.	O
dval	struct(double,int)
.	O
d	double
=	O
dval	struct(double,int)
;	O
lval	O
->	O
oval	O
->	O
value	union(int,struct(double,int))
.	O
dval	struct(double,int)
.	O
nfractions	int
=	O
nfractions	int
;	O
result	O
=	O
DECIMAL	O
;	O
}	O
else	O
{	O
lval	O
->	O
oval	O
->	O
type	enum(int,int)
=	O
CLDR_PLURAL_OPERAND_INTEGER	int
;	O
lval	O
->	O
oval	O
->	O
value	union(int,struct(double,int))
.	O
ival	int
=	O
ival	int
;	O
result	O
=	O
INTEGER	O
;	O
}	O
}	O
break	O
;	O
case	O
'a'	O
:	O
case	O
'b'	O
:	O
case	O
'c'	O
:	O
case	O
'd'	O
:	O
case	O
'e'	O
:	O
case	O
'f'	O
:	O
case	O
'g'	O
:	O
case	O
'h'	O
:	O
case	O
'i'	O
:	O
case	O
'j'	O
:	O
case	O
'k'	O
:	O
case	O
'l'	O
:	O
case	O
'm'	O
:	O
case	O
'n'	O
:	O
case	O
'o'	O
:	O
case	O
'p'	O
:	O
case	O
'q'	O
:	O
case	O
'r'	O
:	O
case	O
's'	O
:	O
case	O
't'	O
:	O
case	O
'u'	O
:	O
case	O
'v'	O
:	O
case	O
'w'	O
:	O
case	O
'x'	O
:	O
case	O
'y'	O
:	O
case	O
'z'	O
:	O
bufpos	O
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
bufpos	O
>=	O
bufmax	O
)	O
{	O
bufmax	O
=	O
2	int
*	O
bufmax	O
+	O
10	int
;	O
buffer	O
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	O
,	O
bufmax	O
)	O
;	O
}	O
buffer	O
[	O
bufpos	O
++	O
]	O
=	O
result	O
;	O
result	O
=	O
*	O
exp	O
;	O
switch	O
(	O
result	O
)	O
{	O
case	O
'a'	O
:	O
case	O
'b'	O
:	O
case	O
'c'	O
:	O
case	O
'd'	O
:	O
case	O
'e'	O
:	O
case	O
'f'	O
:	O
case	O
'g'	O
:	O
case	O
'h'	O
:	O
case	O
'i'	O
:	O
case	O
'j'	O
:	O
case	O
'k'	O
:	O
case	O
'l'	O
:	O
case	O
'm'	O
:	O
case	O
'n'	O
:	O
case	O
'o'	O
:	O
case	O
'p'	O
:	O
case	O
'q'	O
:	O
case	O
'r'	O
:	O
case	O
's'	O
:	O
case	O
't'	O
:	O
case	O
'u'	O
:	O
case	O
'v'	O
:	O
case	O
'w'	O
:	O
case	O
'x'	O
:	O
case	O
'y'	O
:	O
case	O
'z'	O
:	O
++	O
exp	O
;	O
continue	O
;	O
default	O
:	O
break	O
;	O
}	O
break	O
;	O
}	O
if	O
(	O
bufpos	O
>=	O
bufmax	O
)	O
{	O
bufmax	O
=	O
2	int
*	O
bufmax	O
+	O
10	int
;	O
buffer	O
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	O
,	O
bufmax	O
)	O
;	O
}	O
buffer	O
[	O
bufpos	O
]	O
=	O
'\0'	O
;	O
if	O
(	O
bufpos	O
==	O
1	int
)	O
{	O
switch	O
(	O
buffer	O
[	O
0	int
]	O
)	O
{	O
case	O
'n'	O
:	O
case	O
'i'	O
:	O
case	O
'f'	O
:	O
case	O
't'	O
:	O
case	O
'v'	O
:	O
case	O
'w'	O
:	O
arg	O
->	O
cp	O
=	O
exp	O
;	O
lval	O
->	O
ival	int
=	O
buffer	O
[	O
0	int
]	O
;	O
return	O
OPERAND	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
buffer	O
,	O
"and"	*(char)
)	O
==	O
0	int
)	O
{	O
arg	O
->	O
cp	O
=	O
exp	O
;	O
return	O
AND	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
buffer	O
,	O
"or"	*(char)
)	O
==	O
0	int
)	O
{	O
arg	O
->	O
cp	O
=	O
exp	O
;	O
return	O
OR	O
;	O
}	O
lval	O
->	O
sval	O
=	O
xstrdup	(*(char))->(*(char))
(	O
buffer	O
)	O
;	O
result	O
=	O
KEYWORD	O
;	O
break	O
;	O
case	O
'!'	O
:	O
if	O
(	O
exp	O
[	O
0	int
]	O
==	O
'='	O
)	O
{	O
++	O
exp	O
;	O
result	O
=	O
'!'	O
;	O
}	O
else	O
result	O
=	O
YYERRCODE	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
arg	O
->	O
cp	O
=	O
exp	O
;	O
return	O
result	O
;	O
}	O
static	O
void	O
yyerror	O
(	O
struct	O
cldr_plural_parse_args	O
*	O
arg	O
,	O
char	O
const	O
*	O
s	*(char)
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s\n"	*(char)
,	O
s	*(char)
)	O
;	O
}	O
