static	O
void	O
parse_args	(int,*(*(char)))->(void)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
;	O
static	O
rec_db_t	*(struct)
process_csv	()->(*(struct))
(	O
void	O
)	O
;	O
static	O
int	O
is_space	*((char)->(int))
(	O
unsigned	O
char	O
c	char
)	O
;	O
static	O
int	O
is_term	*((char)->(int))
(	O
unsigned	O
char	O
c	char
)	O
;	O
static	O
void	O
field_cb	(*(void),long,*(void))->(void)
(	O
void	O
*	O
s	long
,	O
size_t	long
len	long
,	O
void	O
*	O
data	*(void)
)	O
;	O
static	O
void	O
record_cb	(int,*(void))->(void)
(	O
int	O
c	char
,	O
void	O
*	O
data	*(void)
)	O
;	O
struct	O
csv2rec_ctx	struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char)))
{	O
rec_db_t	*(struct)
db	*(struct)
;	O
rec_rset_t	*(struct)
rset	*(struct)
;	O
rec_record_t	*(struct)
record	*(struct)
;	O
size_t	long
num_fields	long
;	O
size_t	long
lineno	long
;	O
bool	bool
header_p	bool
;	O
size_t	long
num_field_names	long
;	O
char	O
*	O
*	O
field_names	*(struct)
;	O
}	O
;	O
char	O
*	O
csv2rec_record_type	*(char)
=	O
NULL	O
;	O
char	O
*	O
csv2rec_csv_file	*(char)
=	O
NULL	O
;	O
bool	bool
csv2rec_strict	bool
=	O
false	int
;	O
bool	bool
csv2rec_omit_empty	bool
=	O
false	int
;	O
enum	O
{	O
COMMON_ARGS	O
,	O
RECORD_TYPE_ARG	int
,	O
STRICT_ARG	int
,	O
OMIT_EMPTY_ARG	int
}	O
;	O
static	O
const	O
struct	O
option	struct(*(char),int,*(int),int)
GNU_longOptions	array(struct(*(char),int,*(int),int))
[	O
]	O
=	O
{	O
COMMON_LONG_ARGS	O
,	O
{	O
"type"	*(char)
,	O
required_argument	int
,	O
NULL	O
,	O
RECORD_TYPE_ARG	int
}	O
,	O
{	O
"strict"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
STRICT_ARG	int
}	O
,	O
{	O
"omit-empty"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
OMIT_EMPTY_ARG	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
void	O
recutl_print_help	()->(void)
(	O
void	O
)	O
{	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Usage: csv2rec [OPTIONS]... [CSV_FILE]\n"	*(char)
)	O
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
_	O
(	O
"Convert csv data into rec data.\n"	*(char)
)	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
puts	(*(char))->(int)
(	O
""	*(char)
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
_	O
(	O
"  -t, --type=TYPE                     type name for the converted records; if this\n                                        parameter is ommited then no type is used.\n  -s, --strict                        be strict parsing the csv file.\n  -e, --omit-empty                    omit empty fields.\n"	*(char)
)	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
recutl_print_help_common	()->(void)
(	O
)	O
;	O
puts	(*(char))->(int)
(	O
""	*(char)
)	O
;	O
recutl_print_help_footer	()->(void)
(	O
)	O
;	O
}	O
static	O
void	O
parse_args	(int,*(*(char)))->(void)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
ret	int
;	O
char	O
c	char
;	O
while	O
(	O
(	O
ret	int
=	O
getopt_long	(int,*(*(char)),*(char),*(struct(*(char),int,*(int),int)),*(int))->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
"t:se"	*(char)
,	O
GNU_longOptions	array(struct(*(char),int,*(int),int))
,	O
NULL	O
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
c	char
=	O
ret	int
;	O
switch	O
(	O
c	char
)	O
{	O
COMMON_ARGS_CASES	O
case	O
RECORD_TYPE_ARG	int
:	O
case	O
't'	O
:	O
{	O
csv2rec_record_type	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
optarg	*(char)
)	O
;	O
break	O
;	O
}	O
case	O
STRICT_ARG	int
:	O
case	O
's'	O
:	O
{	O
csv2rec_strict	bool
=	O
true	int
;	O
break	O
;	O
}	O
case	O
OMIT_EMPTY_ARG	int
:	O
case	O
'e'	O
:	O
{	O
csv2rec_omit_empty	bool
=	O
true	int
;	O
break	O
;	O
}	O
default	O
:	O
{	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
}	O
if	O
(	O
optind	int
<	O
argc	int
)	O
{	O
if	O
(	O
(	O
argc	int
-	O
optind	int
)	O
!=	O
1	int
)	O
{	O
recutl_print_help	()->(void)
(	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
csv2rec_csv_file	*(char)
=	O
argv	*(*(char))
[	O
optind	int
++	O
]	O
;	O
}	O
}	O
static	O
int	O
is_space	*((char)->(int))
(	O
unsigned	O
char	O
c	char
)	O
{	O
return	O
(	O
c	char
==	O
CSV_SPACE	int
)	O
||	O
(	O
c	char
==	O
CSV_TAB	int
)	O
;	O
}	O
static	O
int	O
is_term	*((char)->(int))
(	O
unsigned	O
char	O
c	char
)	O
{	O
return	O
(	O
c	char
==	O
CSV_CR	int
)	O
||	O
(	O
c	char
==	O
CSV_LF	int
)	O
;	O
}	O
void	O
field_cb	(*(void),long,*(void))->(void)
(	O
void	O
*	O
s	long
,	O
size_t	long
len	long
,	O
void	O
*	O
data	*(void)
)	O
{	O
char	O
*	O
str	*(char)
;	O
char	O
*	O
field_name	*(char)
;	O
rec_field_t	*(struct)
field	*(struct)
;	O
struct	O
csv2rec_ctx	struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char)))
*	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
;	O
size_t	long
i	long
;	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
=	O
(	O
struct	O
csv2rec_ctx	struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char)))
*	O
)	O
data	*(void)
;	O
str	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
len	long
+	O
1	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
str	*(char)
,	O
s	long
,	O
len	long
)	O
;	O
str	*(char)
[	O
len	long
]	O
=	O
'\0'	O
;	O
if	O
(	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
->	O
header_p	bool
)	O
{	O
if	O
(	O
(	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
->	O
num_field_names	long
%	O
ALLOC_FIELDS	int
)	O
==	O
0	int
)	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
->	O
field_names	*(struct)
=	O
realloc	(*(void),long)->(*(void))
(	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
->	O
field_names	*(struct)
,	O
(	O
(	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
->	O
num_field_names	long
/	O
ALLOC_FIELDS	int
)	O
+	O
1	int
)	O
*	O
(	O
sizeof	O
(	O
char	O
*	O
)	O
*	O
ALLOC_FIELDS	int
)	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
strlen	(*(char))->(long)
(	O
str	*(char)
)	O
;	O
i	long
++	O
)	O
{	O
if	O
(	O
(	O
str	*(char)
[	O
i	long
]	O
==	O
' '	O
)	O
||	O
(	O
str	*(char)
[	O
i	long
]	O
==	O
'\t'	O
)	O
)	O
{	O
str	*(char)
[	O
i	long
]	O
=	O
'_'	O
;	O
}	O
}	O
field_name	*(char)
=	O
str	*(char)
;	O
if	O
(	O
!	O
rec_field_name_p	(*(char))->(bool)
(	O
field_name	*(char)
)	O
)	O
{	O
recutl_fatal	(*(char))->(void)
(	O
_	O
(	O
"invalid field name '%s' in header\n"	*(char)
)	O
,	O
str	*(char)
)	O
;	O
}	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
->	O
field_names	*(struct)
[	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
->	O
num_field_names	long
++	O
]	O
=	O
str	*(char)
;	O
}	O
else	O
{	O
if	O
(	O
!	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
->	O
record	*(struct)
)	O
{	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
->	O
record	*(struct)
=	O
rec_record_new	()->(*(struct))
(	O
)	O
;	O
if	O
(	O
!	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
->	O
record	*(struct)
)	O
recutl_out_of_memory	()->(void)
(	O
)	O
;	O
}	O
if	O
(	O
!	O
csv2rec_omit_empty	bool
||	O
(	O
strlen	(*(char))->(long)
(	O
str	*(char)
)	O
>	O
0	int
)	O
)	O
{	O
if	O
(	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
->	O
num_fields	long
>	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
->	O
num_field_names	long
)	O
{	O
char	O
*	O
source	*(char)
=	O
csv2rec_csv_file	*(char)
;	O
if	O
(	O
!	O
source	*(char)
)	O
{	O
source	*(char)
=	O
"stdin"	*(char)
;	O
}	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"%s: %lu: this line contains %lu fields, but %lu header fields were read\n"	*(char)
)	O
,	O
source	*(char)
,	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
->	O
lineno	long
,	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
->	O
num_field_names	long
,	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
->	O
num_fields	long
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
field	*(struct)
=	O
rec_field_new	(*(char),*(char))->(*(struct))
(	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
->	O
field_names	*(struct)
[	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
->	O
num_fields	long
]	O
,	O
str	*(char)
)	O
;	O
rec_mset_append	(*(struct),int,*(void),int)->(*(struct))
(	O
rec_record_mset	(*(struct))->(*(struct))
(	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
->	O
record	*(struct)
)	O
,	O
MSET_FIELD	int
,	O
(	O
void	O
*	O
)	O
field	*(struct)
,	O
MSET_ANY	int
)	O
;	O
}	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
->	O
num_fields	long
++	O
;	O
}	O
}	O
void	O
record_cb	(int,*(void))->(void)
(	O
int	O
c	char
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
csv2rec_ctx	struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char)))
*	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
;	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
=	O
(	O
struct	O
csv2rec_ctx	struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char)))
*	O
)	O
data	*(void)
;	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
->	O
lineno	long
++	O
;	O
if	O
(	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
->	O
header_p	bool
)	O
{	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
->	O
header_p	bool
=	O
false	int
;	O
}	O
else	O
{	O
if	O
(	O
!	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
->	O
rset	*(struct)
)	O
{	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
->	O
rset	*(struct)
=	O
rec_rset_new	()->(*(struct))
(	O
)	O
;	O
if	O
(	O
!	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
->	O
rset	*(struct)
)	O
recutl_out_of_memory	()->(void)
(	O
)	O
;	O
if	O
(	O
csv2rec_record_type	*(char)
)	O
{	O
rec_rset_set_type	(*(struct),*(char))->(void)
(	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
->	O
rset	*(struct)
,	O
csv2rec_record_type	*(char)
)	O
;	O
}	O
if	O
(	O
!	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
->	O
db	*(struct)
)	O
{	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
->	O
db	*(struct)
=	O
rec_db_new	()->(*(struct))
(	O
)	O
;	O
if	O
(	O
!	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
->	O
db	*(struct)
)	O
recutl_out_of_memory	()->(void)
(	O
)	O
;	O
}	O
rec_db_insert_rset	(*(struct),*(struct),long)->(bool)
(	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
->	O
db	*(struct)
,	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
->	O
rset	*(struct)
,	O
rec_db_size	(*(struct))->(long)
(	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
->	O
db	*(struct)
)	O
)	O
;	O
}	O
rec_mset_append	(*(struct),int,*(void),int)->(*(struct))
(	O
rec_rset_mset	(*(struct))->(*(struct))
(	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
->	O
rset	*(struct)
)	O
,	O
MSET_RECORD	int
,	O
(	O
void	O
*	O
)	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
->	O
record	*(struct)
,	O
MSET_ANY	int
)	O
;	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
->	O
record	*(struct)
=	O
NULL	O
;	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
->	O
num_fields	long
=	O
0	int
;	O
}	O
}	O
static	O
rec_db_t	*(struct)
process_csv	()->(*(struct))
(	O
void	O
)	O
{	O
struct	O
csv2rec_ctx	struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char)))
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
;	O
FILE	struct
*	O
in	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
struct	O
csv_parser	struct(int,int,long,*(char),long,long,int,char,char,char,*((char)->(int)),*((char)->(int)),long,*((long)->(*(void))),*((*(void),long)->(*(void))),*((*(void))->(void)))
p	*(void)
;	O
unsigned	O
char	O
options	char
=	O
0	int
;	O
char	O
buf	*(struct)
[	O
1024	int
]	O
;	O
size_t	long
bytes_read	long
=	O
0	int
;	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
.	O
db	*(struct)
=	O
NULL	O
;	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
.	O
rset	*(struct)
=	O
NULL	O
;	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
.	O
record	*(struct)
=	O
NULL	O
;	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
.	O
header_p	bool
=	O
true	int
;	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
.	O
field_names	*(struct)
=	O
NULL	O
;	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
.	O
num_field_names	long
=	O
0	int
;	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
.	O
num_fields	long
=	O
0	int
;	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
.	O
lineno	long
=	O
0	int
;	O
if	O
(	O
csv2rec_csv_file	*(char)
)	O
{	O
if	O
(	O
!	O
(	O
in	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
csv2rec_csv_file	*(char)
,	O
"r"	*(char)
)	O
)	O
)	O
{	O
recutl_fatal	(*(char))->(void)
(	O
_	O
(	O
"cannot read file %s\n"	*(char)
)	O
,	O
csv2rec_csv_file	*(char)
)	O
;	O
}	O
}	O
else	O
{	O
in	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
}	O
if	O
(	O
csv_init	(*(struct(int,int,long,*(char),long,long,int,char,char,char,*((char)->(int)),*((char)->(int)),long,*((long)->(*`)),*((*`,long)->(*`)),*((*`)->(void)))),char)->(int)
(	O
&	O
p	*(void)
,	O
options	char
)	O
!=	O
0	int
)	O
{	O
recutl_fatal	(*(char))->(void)
(	O
_	O
(	O
"failed to initialize csv parser\n"	*(char)
)	O
)	O
;	O
}	O
if	O
(	O
csv2rec_strict	bool
)	O
{	O
options	char
|=	O
CSV_STRICT	int
;	O
csv_set_opts	(*(struct(int,int,long,*(char),long,long,int,char,char,char,*((char)->(int)),*((char)->(int)),long,*((long)->(*`)),*((*`,long)->(*`)),*((*`)->(void)))),char)->(int)
(	O
&	O
p	*(void)
,	O
options	char
)	O
;	O
}	O
csv_set_space_func	(*(struct(int,int,long,*(char),long,long,int,char,char,char,*((char)->(int)),*((char)->(int)),long,*((long)->(*`)),*((*`,long)->(*`)),*((*`)->(void)))),*((char)->(int)))->(void)
(	O
&	O
p	*(void)
,	O
is_space	*((char)->(int))
)	O
;	O
csv_set_term_func	(*(struct(int,int,long,*(char),long,long,int,char,char,char,*((char)->(int)),*((char)->(int)),long,*((long)->(*`)),*((*`,long)->(*`)),*((*`)->(void)))),*((char)->(int)))->(void)
(	O
&	O
p	*(void)
,	O
is_term	*((char)->(int))
)	O
;	O
while	O
(	O
(	O
bytes_read	long
=	O
fread	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
buf	*(struct)
,	O
1	int
,	O
1024	int
,	O
in	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
>	O
0	int
)	O
{	O
if	O
(	O
csv_parse	(*(struct(int,int,long,*(char),long,long,int,char,char,char,*((char)->(int)),*((char)->(int)),long,*((long)->(*`)),*((*`,long)->(*`)),*((*`)->(void)))),*(void),long,*((*(void),long,*(void))->(void)),*((int,*(void))->(void)),*(void))->(long)
(	O
&	O
p	*(void)
,	O
buf	*(struct)
,	O
bytes_read	long
,	O
field_cb	(*(void),long,*(void))->(void)
,	O
record_cb	(int,*(void))->(void)
,	O
&	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
)	O
!=	O
bytes_read	long
)	O
{	O
recutl_fatal	(*(char))->(void)
(	O
_	O
(	O
"error while parsing CSV file: %s\n"	*(char)
)	O
,	O
csv_strerror	(int)->(*(char))
(	O
csv_error	(*(struct(int,int,long,*(char),long,long,int,char,char,char,*((char)->(int)),*((char)->(int)),long,*((long)->(*`)),*((*`,long)->(*`)),*((*`)->(void)))))->(int)
(	O
&	O
p	*(void)
)	O
)	O
)	O
;	O
}	O
}	O
return	O
ctx	*(struct(*(struct),*(struct),*(struct),long,long,bool,long,*(*(char))))
.	O
db	*(struct)
;	O
}	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	*(*(char))
[	O
]	O
)	O
{	O
int	O
ret	int
;	O
rec_db_t	*(struct)
db	*(struct)
;	O
rec_writer_t	*(struct)
writer	*(struct)
;	O
recutl_init	(*(char))->(void)
(	O
"csv2rec"	*(char)
)	O
;	O
parse_args	(int,*(*(char)))->(void)
(	O
argc	int
,	O
argv	*(*(char))
)	O
;	O
db	*(struct)
=	O
process_csv	()->(*(struct))
(	O
)	O
;	O
ret	int
=	O
EXIT_SUCCESS	int
;	O
if	O
(	O
db	*(struct)
)	O
{	O
writer	*(struct)
=	O
rec_writer_new	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(struct))
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
rec_write_db	(*(struct),*(struct))->(bool)
(	O
writer	*(struct)
,	O
db	*(struct)
)	O
;	O
rec_writer_destroy	(*(struct))->(void)
(	O
writer	*(struct)
)	O
;	O
rec_db_destroy	(*(struct))->(void)
(	O
db	*(struct)
)	O
;	O
}	O
else	O
{	O
ret	int
=	O
EXIT_FAILURE	int
;	O
}	O
return	O
ret	int
;	O
}	O
