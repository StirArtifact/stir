void	O
initialize_info_signal_handler	()->(void)
(	O
void	O
)	O
;	O
static	O
void	O
mask_termsig	(*(struct(array(long))))->(void)
(	O
sigset_t	struct(array(long))
*	O
set	*(struct(array(long)))
)	O
{	O
sigaddset	(*(struct(array(long))),int)->(int)
(	O
set	*(struct(array(long)))
,	O
SIGTSTP	int
)	O
;	O
sigaddset	(*(struct(array(long))),int)->(int)
(	O
set	*(struct(array(long)))
,	O
SIGTTOU	int
)	O
;	O
sigaddset	(*(struct(array(long))),int)->(int)
(	O
set	*(struct(array(long)))
,	O
SIGTTIN	int
)	O
;	O
sigaddset	(*(struct(array(long))),int)->(int)
(	O
set	*(struct(array(long)))
,	O
SIGWINCH	int
)	O
;	O
sigaddset	(*(struct(array(long))),int)->(int)
(	O
set	*(struct(array(long)))
,	O
SIGQUIT	int
)	O
;	O
sigaddset	(*(struct(array(long))),int)->(int)
(	O
set	*(struct(array(long)))
,	O
SIGINT	int
)	O
;	O
sigaddset	(*(struct(array(long))),int)->(int)
(	O
set	*(struct(array(long)))
,	O
SIGTERM	int
)	O
;	O
sigaddset	(*(struct(array(long))),int)->(int)
(	O
set	*(struct(array(long)))
,	O
SIGUSR1	int
)	O
;	O
}	O
static	O
void	O
info_signal_proc	(int)->(void)
(	O
int	O
sig	int
)	O
;	O
typedef	O
struct	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
signal_info	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
signal_info	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
info_signal_handler	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
static	O
void	O
set_termsig	(int,*(struct(union(*((int)->(void)),*((int,*`,*`)->(void))),struct(array(long)),int,*(()->(void)))))->(void)
(	O
int	O
sig	int
,	O
signal_info	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
*	O
old	*(struct(union(*((int)->(void)),*((int,*`,*`)->(void))),struct(array(long)),int,*(()->(void))))
)	O
{	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
(	O
sig	int
,	O
&	O
info_signal_handler	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
old	*(struct(union(*((int)->(void)),*((int,*`,*`)->(void))),struct(array(long)),int,*(()->(void))))
)	O
;	O
}	O
static	O
void	O
restore_termsig	(int,*(struct(union(*((int)->(void)),*((int,*`,*`)->(void))),struct(array(long)),int,*(()->(void)))))->(void)
(	O
int	O
sig	int
,	O
const	O
signal_info	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
*	O
saved	*(struct(union(*((int)->(void)),*((int,*`,*`)->(void))),struct(array(long)),int,*(()->(void))))
)	O
{	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
(	O
sig	int
,	O
saved	*(struct(union(*((int)->(void)),*((int,*`,*`)->(void))),struct(array(long)),int,*(()->(void))))
,	O
NULL	O
)	O
;	O
}	O
static	O
signal_info	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
old_TSTP	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
old_TTOU	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
old_TTIN	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
static	O
signal_info	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
old_WINCH	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
old_INT	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
old_TERM	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
old_USR1	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
static	O
signal_info	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
old_QUIT	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
void	O
initialize_info_signal_handler	()->(void)
(	O
void	O
)	O
{	O
info_signal_handler	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
.	O
sa_handler	*((int)->(void))
=	O
info_signal_proc	(int)->(void)
;	O
info_signal_handler	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
.	O
sa_flags	int
=	O
0	int
;	O
mask_termsig	(*(struct(array(long))))->(void)
(	O
&	O
info_signal_handler	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
.	O
sa_mask	struct(array(long))
)	O
;	O
set_termsig	(int,*(struct(union(*((int)->(void)),*((int,*`,*`)->(void))),struct(array(long)),int,*(()->(void)))))->(void)
(	O
SIGTSTP	int
,	O
&	O
old_TSTP	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
)	O
;	O
set_termsig	(int,*(struct(union(*((int)->(void)),*((int,*`,*`)->(void))),struct(array(long)),int,*(()->(void)))))->(void)
(	O
SIGTTOU	int
,	O
&	O
old_TTOU	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
)	O
;	O
set_termsig	(int,*(struct(union(*((int)->(void)),*((int,*`,*`)->(void))),struct(array(long)),int,*(()->(void)))))->(void)
(	O
SIGTTIN	int
,	O
&	O
old_TTIN	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
)	O
;	O
set_termsig	(int,*(struct(union(*((int)->(void)),*((int,*`,*`)->(void))),struct(array(long)),int,*(()->(void)))))->(void)
(	O
SIGWINCH	int
,	O
&	O
old_WINCH	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
)	O
;	O
set_termsig	(int,*(struct(union(*((int)->(void)),*((int,*`,*`)->(void))),struct(array(long)),int,*(()->(void)))))->(void)
(	O
SIGQUIT	int
,	O
&	O
old_QUIT	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
)	O
;	O
set_termsig	(int,*(struct(union(*((int)->(void)),*((int,*`,*`)->(void))),struct(array(long)),int,*(()->(void)))))->(void)
(	O
SIGINT	int
,	O
&	O
old_INT	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
)	O
;	O
set_termsig	(int,*(struct(union(*((int)->(void)),*((int,*`,*`)->(void))),struct(array(long)),int,*(()->(void)))))->(void)
(	O
SIGTERM	int
,	O
&	O
old_TERM	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
)	O
;	O
set_termsig	(int,*(struct(union(*((int)->(void)),*((int,*`,*`)->(void))),struct(array(long)),int,*(()->(void)))))->(void)
(	O
SIGUSR1	int
,	O
&	O
old_USR1	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
)	O
;	O
}	O
void	O
redisplay_after_signal	()->(void)
(	O
void	O
)	O
{	O
terminal_clear_screen	()->(void)
(	O
)	O
;	O
display_clear_display	(*(*(struct(*(char),int,int))))->(void)
(	O
the_display	*(*(struct(*(char),int,int)))
)	O
;	O
if	O
(	O
auto_footnotes_p	int
)	O
info_get_or_remove_footnotes	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)))->(int)
(	O
active_window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
)	O
;	O
window_mark_chain	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),int)->(void)
(	O
windows	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
,	O
W_UpdateWindow	int
)	O
;	O
display_update_display	()->(void)
(	O
)	O
;	O
display_cursor_at_point	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)))->(void)
(	O
active_window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
void	O
reset_info_window_sizes	()->(void)
(	O
void	O
)	O
{	O
terminal_get_screen_size	()->(void)
(	O
)	O
;	O
display_initialize_display	(int,int)->(void)
(	O
screenwidth	int
,	O
screenheight	int
)	O
;	O
window_new_screen_size	(int,int)->(void)
(	O
screenwidth	int
,	O
screenheight	int
)	O
;	O
redisplay_after_signal	()->(void)
(	O
)	O
;	O
}	O
static	O
int	O
sigwinch_block_count	int
=	O
0	int
;	O
void	O
signal_block_winch	()->(void)
(	O
void	O
)	O
{	O
if	O
(	O
sigwinch_block_count	int
==	O
0	int
)	O
BLOCK_SIGNAL	O
(	O
SIGWINCH	int
)	O
;	O
sigwinch_block_count	int
++	O
;	O
}	O
void	O
signal_unblock_winch	()->(void)
(	O
void	O
)	O
{	O
sigwinch_block_count	int
--	O
;	O
if	O
(	O
sigwinch_block_count	int
==	O
0	int
)	O
UNBLOCK_SIGNAL	O
(	O
SIGWINCH	int
)	O
;	O
}	O
static	O
void	O
info_signal_proc	(int)->(void)
(	O
int	O
sig	int
)	O
{	O
signal_info	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
*	O
old_signal_handler	*(struct(union(*((int)->(void)),*((int,*`,*`)->(void))),struct(array(long)),int,*(()->(void))))
=	O
NULL	O
;	O
switch	O
(	O
sig	int
)	O
{	O
case	O
SIGTSTP	int
:	O
case	O
SIGTTOU	int
:	O
case	O
SIGTTIN	int
:	O
case	O
SIGQUIT	int
:	O
case	O
SIGINT	int
:	O
case	O
SIGTERM	int
:	O
{	O
if	O
(	O
sig	int
==	O
SIGTSTP	int
)	O
old_signal_handler	*(struct(union(*((int)->(void)),*((int,*`,*`)->(void))),struct(array(long)),int,*(()->(void))))
=	O
&	O
old_TSTP	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
if	O
(	O
sig	int
==	O
SIGTTOU	int
)	O
old_signal_handler	*(struct(union(*((int)->(void)),*((int,*`,*`)->(void))),struct(array(long)),int,*(()->(void))))
=	O
&	O
old_TTOU	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
if	O
(	O
sig	int
==	O
SIGTTIN	int
)	O
old_signal_handler	*(struct(union(*((int)->(void)),*((int,*`,*`)->(void))),struct(array(long)),int,*(()->(void))))
=	O
&	O
old_TTIN	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
if	O
(	O
sig	int
==	O
SIGQUIT	int
)	O
old_signal_handler	*(struct(union(*((int)->(void)),*((int,*`,*`)->(void))),struct(array(long)),int,*(()->(void))))
=	O
&	O
old_QUIT	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
if	O
(	O
sig	int
==	O
SIGINT	int
)	O
old_signal_handler	*(struct(union(*((int)->(void)),*((int,*`,*`)->(void))),struct(array(long)),int,*(()->(void))))
=	O
&	O
old_INT	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
if	O
(	O
sig	int
==	O
SIGTERM	int
)	O
old_signal_handler	*(struct(union(*((int)->(void)),*((int,*`,*`)->(void))),struct(array(long)),int,*(()->(void))))
=	O
&	O
old_TERM	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
terminal_goto_xy	(int,int)->(void)
(	O
0	int
,	O
screenheight	int
-	O
1	int
)	O
;	O
terminal_clear_to_eol	()->(void)
(	O
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
terminal_unprep_terminal	()->(void)
(	O
)	O
;	O
restore_termsig	(int,*(struct(union(*((int)->(void)),*((int,*`,*`)->(void))),struct(array(long)),int,*(()->(void)))))->(void)
(	O
sig	int
,	O
old_signal_handler	*(struct(union(*((int)->(void)),*((int,*`,*`)->(void))),struct(array(long)),int,*(()->(void))))
)	O
;	O
UNBLOCK_SIGNAL	O
(	O
sig	int
)	O
;	O
kill	(int,int)->(int)
(	O
getpid	()->(int)
(	O
)	O
,	O
sig	int
)	O
;	O
terminal_prep_terminal	()->(int)
(	O
)	O
;	O
set_termsig	(int,*(struct(union(*((int)->(void)),*((int,*`,*`)->(void))),struct(array(long)),int,*(()->(void)))))->(void)
(	O
sig	int
,	O
old_signal_handler	*(struct(union(*((int)->(void)),*((int,*`,*`)->(void))),struct(array(long)),int,*(()->(void))))
)	O
;	O
reset_info_window_sizes	()->(void)
(	O
)	O
;	O
}	O
break	O
;	O
case	O
SIGWINCH	int
:	O
case	O
SIGUSR1	int
:	O
{	O
if	O
(	O
sig	int
==	O
SIGWINCH	int
)	O
old_signal_handler	*(struct(union(*((int)->(void)),*((int,*`,*`)->(void))),struct(array(long)),int,*(()->(void))))
=	O
&	O
old_WINCH	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
if	O
(	O
sig	int
==	O
SIGUSR1	int
)	O
old_signal_handler	*(struct(union(*((int)->(void)),*((int,*`,*`)->(void))),struct(array(long)),int,*(()->(void))))
=	O
&	O
old_USR1	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
set_termsig	(int,*(struct(union(*((int)->(void)),*((int,*`,*`)->(void))),struct(array(long)),int,*(()->(void)))))->(void)
(	O
sig	int
,	O
old_signal_handler	*(struct(union(*((int)->(void)),*((int,*`,*`)->(void))),struct(array(long)),int,*(()->(void))))
)	O
;	O
if	O
(	O
sigwinch_block_count	int
!=	O
0	int
)	O
abort	()->(void)
(	O
)	O
;	O
sigwinch_block_count	int
++	O
;	O
reset_info_window_sizes	()->(void)
(	O
)	O
;	O
sigwinch_block_count	int
--	O
;	O
UNBLOCK_SIGNAL	O
(	O
sig	int
)	O
;	O
}	O
break	O
;	O
}	O
}	O
