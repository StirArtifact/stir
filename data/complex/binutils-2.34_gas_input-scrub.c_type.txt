static	O
char	O
*	O
buffer_start	O
;	O
static	O
char	O
*	O
partial_where	O
;	O
static	O
size_t	long
partial_size	O
;	O
static	O
char	O
save_source	O
[	O
AFTER_SIZE	O
]	O
;	O
static	O
size_t	long
buffer_length	O
;	O
static	O
size_t	long
sb_index	O
=	O
-	O
1	int
;	O
static	O
sb	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
from_sb	O
;	O
static	O
int	O
from_sb_is_expansion	O
=	O
1	int
;	O
int	O
macro_nest	O
;	O
static	O
const	O
char	O
*	O
physical_input_file	O
;	O
static	O
const	O
char	O
*	O
logical_input_file	O
;	O
static	O
unsigned	O
int	O
physical_input_line	O
;	O
static	O
int	O
logical_input_line	O
;	O
struct	O
input_save	O
{	O
char	O
*	O
buffer_start	O
;	O
char	O
*	O
partial_where	O
;	O
size_t	long
partial_size	O
;	O
char	O
save_source	O
[	O
AFTER_SIZE	O
]	O
;	O
size_t	long
buffer_length	O
;	O
const	O
char	O
*	O
physical_input_file	O
;	O
const	O
char	O
*	O
logical_input_file	O
;	O
unsigned	O
int	O
physical_input_line	O
;	O
int	O
logical_input_line	O
;	O
size_t	long
sb_index	O
;	O
sb	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
from_sb	O
;	O
int	O
from_sb_is_expansion	O
;	O
struct	O
input_save	O
*	O
next_saved_file	O
;	O
char	O
*	O
input_file_save	O
;	O
char	O
*	O
saved_position	O
;	O
}	O
;	O
static	O
struct	O
input_save	O
*	O
input_scrub_push	O
(	O
char	O
*	O
saved_position	O
)	O
;	O
static	O
char	O
*	O
input_scrub_pop	O
(	O
struct	O
input_save	O
*	O
arg	*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*(char),*(char),int,int,*((*(struct`),*(struct`))->(*(struct`))),*((*(struct`),*(char))->(int)),*((long,int,int)->(*(void))),*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*(char),*(char),int,int,*((*`,*`)->(*`)),*((*`,*`)->(int)),*((long,int,int)->(*`)),*(struct`),int)),int))
)	O
;	O
static	O
struct	O
input_save	O
*	O
next_saved_file	O
;	O
static	O
void	O
input_scrub_reinit	O
(	O
void	O
)	O
{	O
input_file_begin	O
(	O
)	O
;	O
logical_input_line	O
=	O
-	O
1	int
;	O
logical_input_file	O
=	O
NULL	O
;	O
buffer_length	O
=	O
input_file_buffer_size	O
(	O
)	O
*	O
2	int
;	O
buffer_start	O
=	O
XNEWVEC	O
(	O
char	O
,	O
BEFORE_SIZE	O
+	O
AFTER_SIZE	O
+	O
1	int
+	O
buffer_length	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
buffer_start	O
,	O
BEFORE_STRING	O
,	O
(	O
int	O
)	O
BEFORE_SIZE	O
)	O
;	O
}	O
static	O
struct	O
input_save	O
*	O
input_scrub_push	O
(	O
char	O
*	O
saved_position	O
)	O
{	O
struct	O
input_save	O
*	O
saved	O
;	O
saved	O
=	O
XNEW	O
(	O
struct	O
input_save	O
)	O
;	O
saved	O
->	O
saved_position	O
=	O
saved_position	O
;	O
saved	O
->	O
buffer_start	O
=	O
buffer_start	O
;	O
saved	O
->	O
partial_where	O
=	O
partial_where	O
;	O
saved	O
->	O
partial_size	O
=	O
partial_size	O
;	O
saved	O
->	O
buffer_length	O
=	O
buffer_length	O
;	O
saved	O
->	O
physical_input_file	O
=	O
physical_input_file	O
;	O
saved	O
->	O
logical_input_file	O
=	O
logical_input_file	O
;	O
saved	O
->	O
physical_input_line	O
=	O
physical_input_line	O
;	O
saved	O
->	O
logical_input_line	O
=	O
logical_input_line	O
;	O
saved	O
->	O
sb_index	O
=	O
sb_index	O
;	O
saved	O
->	O
from_sb	O
=	O
from_sb	O
;	O
saved	O
->	O
from_sb_is_expansion	O
=	O
from_sb_is_expansion	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
saved	O
->	O
save_source	O
,	O
save_source	O
,	O
sizeof	O
(	O
save_source	O
)	O
)	O
;	O
saved	O
->	O
next_saved_file	O
=	O
next_saved_file	O
;	O
saved	O
->	O
input_file_save	O
=	O
input_file_push	O
(	O
)	O
;	O
sb_index	O
=	O
-	O
1	int
;	O
input_scrub_reinit	O
(	O
)	O
;	O
return	O
saved	O
;	O
}	O
static	O
char	O
*	O
input_scrub_pop	O
(	O
struct	O
input_save	O
*	O
saved	O
)	O
{	O
char	O
*	O
saved_position	O
;	O
input_scrub_end	O
(	O
)	O
;	O
input_file_pop	O
(	O
saved	O
->	O
input_file_save	O
)	O
;	O
saved_position	O
=	O
saved	O
->	O
saved_position	O
;	O
buffer_start	O
=	O
saved	O
->	O
buffer_start	O
;	O
buffer_length	O
=	O
saved	O
->	O
buffer_length	O
;	O
physical_input_file	O
=	O
saved	O
->	O
physical_input_file	O
;	O
logical_input_file	O
=	O
saved	O
->	O
logical_input_file	O
;	O
physical_input_line	O
=	O
saved	O
->	O
physical_input_line	O
;	O
logical_input_line	O
=	O
saved	O
->	O
logical_input_line	O
;	O
sb_index	O
=	O
saved	O
->	O
sb_index	O
;	O
from_sb	O
=	O
saved	O
->	O
from_sb	O
;	O
from_sb_is_expansion	O
=	O
saved	O
->	O
from_sb_is_expansion	O
;	O
partial_where	O
=	O
saved	O
->	O
partial_where	O
;	O
partial_size	O
=	O
saved	O
->	O
partial_size	O
;	O
next_saved_file	O
=	O
saved	O
->	O
next_saved_file	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
save_source	O
,	O
saved	O
->	O
save_source	O
,	O
sizeof	O
(	O
save_source	O
)	O
)	O
;	O
free	(*(void))->(void)
(	O
saved	O
)	O
;	O
return	O
saved_position	O
;	O
}	O
void	O
input_scrub_begin	O
(	O
void	O
)	O
{	O
know	O
(	O
strlen	(*(char))->(long)
(	O
BEFORE_STRING	O
)	O
==	O
BEFORE_SIZE	O
)	O
;	O
know	O
(	O
strlen	(*(char))->(long)
(	O
AFTER_STRING	O
)	O
==	O
AFTER_SIZE	O
||	O
(	O
AFTER_STRING	O
[	O
0	int
]	O
==	O
'\0'	O
&&	O
AFTER_SIZE	O
==	O
1	int
)	O
)	O
;	O
physical_input_file	O
=	O
NULL	O
;	O
next_saved_file	O
=	O
NULL	O
;	O
input_scrub_reinit	O
(	O
)	O
;	O
do_scrub_begin	O
(	O
flag_m68k_mri	O
)	O
;	O
}	O
void	O
input_scrub_end	O
(	O
void	O
)	O
{	O
if	O
(	O
buffer_start	O
)	O
{	O
free	(*(void))->(void)
(	O
buffer_start	O
)	O
;	O
buffer_start	O
=	O
0	int
;	O
input_file_end	O
(	O
)	O
;	O
}	O
}	O
char	O
*	O
input_scrub_new_file	O
(	O
const	O
char	O
*	O
filename	*(char)
)	O
{	O
input_file_open	O
(	O
filename	*(char)
,	O
!	O
flag_no_comments	O
)	O
;	O
physical_input_file	O
=	O
filename	*(char)
[	O
0	int
]	O
?	O
filename	*(char)
:	O
_	O
(	O
"{standard input}"	*(char)
)	O
;	O
physical_input_line	O
=	O
0	int
;	O
partial_size	O
=	O
0	int
;	O
return	O
(	O
buffer_start	O
+	O
BEFORE_SIZE	O
)	O
;	O
}	O
char	O
*	O
input_scrub_include_file	O
(	O
const	O
char	O
*	O
filename	*(char)
,	O
char	O
*	O
position	O
)	O
{	O
next_saved_file	O
=	O
input_scrub_push	O
(	O
position	O
)	O
;	O
return	O
input_scrub_new_file	O
(	O
filename	*(char)
)	O
;	O
}	O
void	O
input_scrub_include_sb	O
(	O
sb	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
*	O
from	O
,	O
char	O
*	O
position	O
,	O
int	O
is_expansion	O
)	O
{	O
int	O
newline	O
;	O
if	O
(	O
macro_nest	O
>	O
max_macro_nest	O
)	O
as_fatal	O
(	O
_	O
(	O
"macros nested too deeply"	*(char)
)	O
)	O
;	O
++	O
macro_nest	O
;	O
next_saved_file	O
=	O
input_scrub_push	O
(	O
position	O
)	O
;	O
newline	O
=	O
from	O
->	O
len	long
>=	O
1	int
&&	O
from	O
->	O
ptr	*(*(char))
[	O
0	int
]	O
!=	O
'\n'	O
;	O
sb_build	O
(	O
&	O
from_sb	O
,	O
from	O
->	O
len	long
+	O
newline	O
)	O
;	O
from_sb_is_expansion	O
=	O
is_expansion	O
;	O
if	O
(	O
newline	O
)	O
{	O
sb_add_char	O
(	O
&	O
from_sb	O
,	O
'\n'	O
)	O
;	O
}	O
sb_scrub_and_add_sb	O
(	O
&	O
from_sb	O
,	O
from	O
)	O
;	O
sb_terminate	O
(	O
&	O
from_sb	O
)	O
;	O
sb_index	O
=	O
1	int
;	O
logical_input_line	O
=	O
next_saved_file	O
->	O
logical_input_line	O
;	O
logical_input_file	O
=	O
next_saved_file	O
->	O
logical_input_file	O
;	O
}	O
void	O
input_scrub_close	O
(	O
void	O
)	O
{	O
input_file_close	O
(	O
)	O
;	O
physical_input_line	O
=	O
0	int
;	O
logical_input_line	O
=	O
-	O
1	int
;	O
}	O
char	O
*	O
input_scrub_next_buffer	O
(	O
char	O
*	O
*	O
bufp	O
)	O
{	O
char	O
*	O
limit	O
;	O
if	O
(	O
sb_index	O
!=	O
(	O
size_t	long
)	O
-	O
1	int
)	O
{	O
if	O
(	O
sb_index	O
>=	O
from_sb	O
.	O
len	long
)	O
{	O
sb_kill	O
(	O
&	O
from_sb	O
)	O
;	O
if	O
(	O
from_sb_is_expansion	O
)	O
{	O
cond_finish_check	O
(	O
macro_nest	O
)	O
;	O
}	O
--	O
macro_nest	O
;	O
partial_where	O
=	O
NULL	O
;	O
partial_size	O
=	O
0	int
;	O
if	O
(	O
next_saved_file	O
!=	O
NULL	O
)	O
*	O
bufp	O
=	O
input_scrub_pop	O
(	O
next_saved_file	O
)	O
;	O
return	O
partial_where	O
;	O
}	O
partial_where	O
=	O
from_sb	O
.	O
ptr	*(*(char))
+	O
from_sb	O
.	O
len	long
;	O
partial_size	O
=	O
0	int
;	O
*	O
bufp	O
=	O
from_sb	O
.	O
ptr	*(*(char))
+	O
sb_index	O
;	O
sb_index	O
=	O
from_sb	O
.	O
len	long
;	O
return	O
partial_where	O
;	O
}	O
if	O
(	O
partial_size	O
)	O
{	O
memmove	(*(void),*(void),long)->(*(void))
(	O
buffer_start	O
+	O
BEFORE_SIZE	O
,	O
partial_where	O
,	O
partial_size	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
buffer_start	O
+	O
BEFORE_SIZE	O
,	O
save_source	O
,	O
AFTER_SIZE	O
)	O
;	O
}	O
while	O
(	O
1	int
)	O
{	O
char	O
*	O
p	*(void)
;	O
char	O
*	O
start	O
=	O
buffer_start	O
+	O
BEFORE_SIZE	O
+	O
partial_size	O
;	O
*	O
bufp	O
=	O
buffer_start	O
+	O
BEFORE_SIZE	O
;	O
limit	O
=	O
input_file_give_next_buffer	O
(	O
start	O
)	O
;	O
if	O
(	O
!	O
limit	O
)	O
{	O
if	O
(	O
!	O
partial_size	O
)	O
break	O
;	O
as_warn	O
(	O
_	O
(	O
"end of file not at end of a line; newline inserted"	*(char)
)	O
)	O
;	O
p	*(void)
=	O
buffer_start	O
+	O
BEFORE_SIZE	O
+	O
partial_size	O
;	O
*	O
p	*(void)
++	O
=	O
'\n'	O
;	O
limit	O
=	O
p	*(void)
;	O
}	O
else	O
{	O
*	O
limit	O
=	O
'\0'	O
;	O
for	O
(	O
p	*(void)
=	O
limit	O
-	O
1	int
;	O
*	O
p	*(void)
!=	O
'\n'	O
||	O
TC_EOL_IN_INSN	O
(	O
p	*(void)
)	O
;	O
--	O
p	*(void)
)	O
if	O
(	O
p	*(void)
<	O
start	O
)	O
goto	O
read_more	O
;	O
++	O
p	*(void)
;	O
}	O
partial_where	O
=	O
p	*(void)
;	O
partial_size	O
=	O
limit	O
-	O
p	*(void)
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
save_source	O
,	O
partial_where	O
,	O
(	O
int	O
)	O
AFTER_SIZE	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
partial_where	O
,	O
AFTER_STRING	O
,	O
(	O
int	O
)	O
AFTER_SIZE	O
)	O
;	O
return	O
partial_where	O
;	O
read_more	O
:	O
partial_size	O
=	O
limit	O
-	O
(	O
buffer_start	O
+	O
BEFORE_SIZE	O
)	O
;	O
if	O
(	O
buffer_length	O
-	O
input_file_buffer_size	O
(	O
)	O
<	O
partial_size	O
)	O
{	O
buffer_length	O
*=	O
2	int
;	O
buffer_start	O
=	O
XRESIZEVEC	O
(	O
char	O
,	O
buffer_start	O
,	O
(	O
buffer_length	O
+	O
BEFORE_SIZE	O
+	O
AFTER_SIZE	O
+	O
1	int
)	O
)	O
;	O
}	O
}	O
LISTING_EOF	O
(	O
)	O
;	O
partial_where	O
=	O
NULL	O
;	O
if	O
(	O
next_saved_file	O
)	O
*	O
bufp	O
=	O
input_scrub_pop	O
(	O
next_saved_file	O
)	O
;	O
return	O
partial_where	O
;	O
}	O
int	O
seen_at_least_1_file	O
(	O
void	O
)	O
{	O
return	O
(	O
physical_input_file	O
!=	O
NULL	O
)	O
;	O
}	O
void	O
bump_line_counters	O
(	O
void	O
)	O
{	O
if	O
(	O
sb_index	O
==	O
(	O
size_t	long
)	O
-	O
1	int
)	O
{	O
++	O
physical_input_line	O
;	O
if	O
(	O
logical_input_line	O
>=	O
0	int
)	O
++	O
logical_input_line	O
;	O
}	O
}	O
int	O
new_logical_line_flags	O
(	O
const	O
char	O
*	O
fname	O
,	O
int	O
line_number	int
,	O
int	O
flags	int
)	O
{	O
switch	O
(	O
flags	int
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
1	int
:	O
if	O
(	O
line_number	int
!=	O
-	O
1	int
)	O
abort	()->(void)
(	O
)	O
;	O
break	O
;	O
case	O
1	int
<<	O
1	int
:	O
case	O
1	int
<<	O
2	int
:	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
if	O
(	O
line_number	int
>=	O
0	int
)	O
logical_input_line	O
=	O
line_number	int
;	O
else	O
if	O
(	O
line_number	int
==	O
-	O
1	int
&&	O
fname	O
&&	O
!	O
*	O
fname	O
&&	O
(	O
flags	int
&	O
(	O
1	int
<<	O
2	int
)	O
)	O
)	O
{	O
logical_input_file	O
=	O
physical_input_file	O
;	O
logical_input_line	O
=	O
physical_input_line	O
;	O
fname	O
=	O
NULL	O
;	O
}	O
if	O
(	O
fname	O
&&	O
(	O
logical_input_file	O
==	O
NULL	O
||	O
filename_cmp	O
(	O
logical_input_file	O
,	O
fname	O
)	O
)	O
)	O
{	O
logical_input_file	O
=	O
fname	O
;	O
return	O
1	int
;	O
}	O
else	O
return	O
0	int
;	O
}	O
int	O
new_logical_line	O
(	O
const	O
char	O
*	O
fname	O
,	O
int	O
line_number	int
)	O
{	O
return	O
new_logical_line_flags	O
(	O
fname	O
,	O
line_number	int
,	O
0	int
)	O
;	O
}	O
const	O
char	O
*	O
as_where_physical	O
(	O
unsigned	O
int	O
*	O
linep	O
)	O
{	O
if	O
(	O
physical_input_file	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
linep	O
!=	O
NULL	O
)	O
*	O
linep	O
=	O
physical_input_line	O
;	O
return	O
physical_input_file	O
;	O
}	O
if	O
(	O
linep	O
!=	O
NULL	O
)	O
*	O
linep	O
=	O
0	int
;	O
return	O
NULL	O
;	O
}	O
const	O
char	O
*	O
as_where	O
(	O
unsigned	O
int	O
*	O
linep	O
)	O
{	O
if	O
(	O
logical_input_file	O
!=	O
NULL	O
&&	O
(	O
linep	O
==	O
NULL	O
||	O
logical_input_line	O
>=	O
0	int
)	O
)	O
{	O
if	O
(	O
linep	O
!=	O
NULL	O
)	O
*	O
linep	O
=	O
logical_input_line	O
;	O
return	O
logical_input_file	O
;	O
}	O
return	O
as_where_physical	O
(	O
linep	O
)	O
;	O
}	O
