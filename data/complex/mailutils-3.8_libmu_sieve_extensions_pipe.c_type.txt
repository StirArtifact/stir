int	O
sieve_pipe	(*(struct),int)->(int)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
int	O
test	*(*((int,int)->(int)))
)	O
{	O
int	O
retval	*(*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct),*(char),*(void))))
=	O
0	int
;	O
int	O
rc	int
,	O
result	*(struct)
;	O
mu_message_t	*(struct)
msg	*(struct)
;	O
char	O
*	O
cmd	enum(int,int,int,int,int)
;	O
mu_stream_t	*(struct)
pstr	*(*(char))
;	O
mu_envelope_t	*(struct)
env	*(struct)
;	O
const	O
char	O
*	O
error_diag	*(char)
=	O
NULL	O
;	O
const	O
char	O
*	O
error_arg	*(char)
=	O
NULL	O
;	O
int	O
pipe_mask	int
=	O
0	int
;	O
mu_sieve_get_arg	(*(struct),long,enum(int,int,int,int,int),*(void))->(void)
(	O
mach	*(struct)
,	O
0	int
,	O
SVT_STRING	int
,	O
&	O
cmd	enum(int,int,int,int,int)
)	O
;	O
if	O
(	O
mu_sieve_is_dry_run	(*(struct))->(int)
(	O
mach	*(struct)
)	O
)	O
return	O
0	int
;	O
msg	*(struct)
=	O
mu_sieve_get_message	(*(struct))->(*(struct))
(	O
mach	*(struct)
)	O
;	O
mu_message_get_envelope	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
env	*(struct)
)	O
;	O
if	O
(	O
mu_sieve_get_tag	(*(struct),*(char),enum(int,int,int,int,int),*(void))->(int)
(	O
mach	*(struct)
,	O
"envelope"	*(char)
,	O
SVT_VOID	int
,	O
NULL	O
)	O
)	O
pipe_mask	int
|=	O
PIPE_ENVELOPE	int
;	O
if	O
(	O
mu_sieve_get_tag	(*(struct),*(char),enum(int,int,int,int,int),*(void))->(int)
(	O
mach	*(struct)
,	O
"header"	*(char)
,	O
SVT_VOID	int
,	O
NULL	O
)	O
)	O
pipe_mask	int
|=	O
PIPE_HEADERS	int
;	O
if	O
(	O
mu_sieve_get_tag	(*(struct),*(char),enum(int,int,int,int,int),*(void))->(int)
(	O
mach	*(struct)
,	O
"body"	*(char)
,	O
SVT_VOID	int
,	O
NULL	O
)	O
)	O
pipe_mask	int
|=	O
PIPE_BODY	int
;	O
if	O
(	O
pipe_mask	int
==	O
0	int
)	O
pipe_mask	int
=	O
PIPE_ALL	O
;	O
do	O
{	O
mu_stream_t	*(struct)
mstr	*(struct)
=	O
NULL	O
;	O
rc	int
=	O
mu_command_stream_create	(*(*(struct)),*(char),int)->(int)
(	O
&	O
pstr	*(*(char))
,	O
cmd	enum(int,int,int,int,int)
,	O
MU_STREAM_WRITE	int
)	O
;	O
ONERR	O
(	O
rc	int
,	O
_	O
(	O
"cannot create command stream"	*(char)
)	O
,	O
cmd	enum(int,int,int,int,int)
)	O
;	O
if	O
(	O
pipe_mask	int
&	O
PIPE_ENVELOPE	int
)	O
{	O
char	O
*	O
p	*(char)
;	O
rc	int
=	O
mu_envelope_aget_sender	(*(struct),*(*(char)))->(int)
(	O
env	*(struct)
,	O
&	O
p	*(char)
)	O
;	O
ONERR	O
(	O
rc	int
,	O
_	O
(	O
"cannot get envelope sender"	*(char)
)	O
,	O
NULL	O
)	O
;	O
rc	int
=	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
pstr	*(*(char))
,	O
"From "	*(char)
,	O
5	int
,	O
NULL	O
)	O
;	O
ONERR	O
(	O
rc	int
,	O
_	O
(	O
"stream write failed"	*(char)
)	O
,	O
NULL	O
)	O
;	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
pstr	*(*(char))
,	O
p	*(char)
,	O
strlen	(*(char))->(long)
(	O
p	*(char)
)	O
,	O
NULL	O
)	O
;	O
free	(*(void))->(void)
(	O
p	*(char)
)	O
;	O
rc	int
=	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
pstr	*(*(char))
,	O
" "	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
ONERR	O
(	O
rc	int
,	O
_	O
(	O
"stream write failed"	*(char)
)	O
,	O
NULL	O
)	O
;	O
rc	int
=	O
mu_envelope_aget_date	(*(struct),*(*(char)))->(int)
(	O
env	*(struct)
,	O
&	O
p	*(char)
)	O
;	O
ONERR	O
(	O
rc	int
,	O
_	O
(	O
"cannot get envelope date"	*(char)
)	O
,	O
NULL	O
)	O
;	O
rc	int
=	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
pstr	*(*(char))
,	O
p	*(char)
,	O
strlen	(*(char))->(long)
(	O
p	*(char)
)	O
,	O
NULL	O
)	O
;	O
ONERR	O
(	O
rc	int
,	O
_	O
(	O
"stream write failed"	*(char)
)	O
,	O
NULL	O
)	O
;	O
free	(*(void))->(void)
(	O
p	*(char)
)	O
;	O
rc	int
=	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
pstr	*(*(char))
,	O
"\n"	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
ONERR	O
(	O
rc	int
,	O
_	O
(	O
"stream write failed"	*(char)
)	O
,	O
NULL	O
)	O
;	O
}	O
if	O
(	O
pipe_mask	int
&	O
PIPE_HEADERS	int
)	O
{	O
mu_header_t	*(struct)
hdr	*(struct)
;	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
hdr	*(struct)
)	O
;	O
mu_header_get_streamref	(*(struct),*(*(struct)))->(int)
(	O
hdr	*(struct)
,	O
&	O
mstr	*(struct)
)	O
;	O
rc	int
=	O
mu_stream_copy	(*(struct),*(struct),long,*(long))->(int)
(	O
pstr	*(*(char))
,	O
mstr	*(struct)
,	O
0	int
,	O
NULL	O
)	O
;	O
ONERR	O
(	O
rc	int
,	O
_	O
(	O
"copying headers failed"	*(char)
)	O
,	O
cmd	enum(int,int,int,int,int)
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
mstr	*(struct)
)	O
;	O
}	O
if	O
(	O
pipe_mask	int
&	O
PIPE_BODY	int
)	O
{	O
mu_body_t	*(struct)
body	*(struct)
;	O
mu_message_get_body	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
body	*(struct)
)	O
;	O
mu_body_get_streamref	(*(struct),*(*(struct)))->(int)
(	O
body	*(struct)
,	O
&	O
mstr	*(struct)
)	O
;	O
rc	int
=	O
mu_stream_copy	(*(struct),*(struct),long,*(long))->(int)
(	O
pstr	*(*(char))
,	O
mstr	*(struct)
,	O
0	int
,	O
NULL	O
)	O
;	O
ONERR	O
(	O
rc	int
,	O
_	O
(	O
"copying body failed"	*(char)
)	O
,	O
cmd	enum(int,int,int,int,int)
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
mstr	*(struct)
)	O
;	O
}	O
}	O
while	O
(	O
0	int
)	O
;	O
result	*(struct)
=	O
mu_stream_close	(*(struct))->(int)
(	O
pstr	*(*(char))
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
if	O
(	O
error_arg	*(char)
)	O
mu_sieve_error	(*(struct),*(char))->(void)
(	O
mach	*(struct)
,	O
"%lu: %s: %s: %s"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	(*(struct))->(long)
(	O
mach	*(struct)
)	O
,	O
error_diag	*(char)
,	O
error_arg	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
else	O
mu_sieve_error	(*(struct),*(char))->(void)
(	O
mach	*(struct)
,	O
"%lu: %s: %s"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	(*(struct))->(long)
(	O
mach	*(struct)
)	O
,	O
error_diag	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
pstr	*(*(char))
)	O
;	O
mu_sieve_abort	(*(struct))->(void)
(	O
mach	*(struct)
)	O
;	O
}	O
if	O
(	O
test	*(*((int,int)->(int)))
)	O
{	O
int	O
code	int
=	O
0	int
;	O
int	O
status	int
;	O
size_t	long
n	*(long)
;	O
rc	int
=	O
mu_stream_ioctl	(*(struct),int,int,*(void))->(int)
(	O
pstr	*(*(char))
,	O
MU_IOCTL_PROGSTREAM	int
,	O
MU_IOCTL_PROG_STATUS	int
,	O
&	O
status	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
pstr	*(*(char))
)	O
;	O
mu_sieve_abort	(*(struct))->(void)
(	O
mach	*(struct)
)	O
;	O
}	O
if	O
(	O
mu_sieve_get_tag	(*(struct),*(char),enum(int,int,int,int,int),*(void))->(int)
(	O
mach	*(struct)
,	O
"exit"	*(char)
,	O
SVT_NUMBER	int
,	O
&	O
n	*(long)
)	O
)	O
code	int
=	O
n	*(long)
;	O
if	O
(	O
result	*(struct)
==	O
0	int
)	O
retval	*(*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct),*(char),*(void))))
=	O
code	int
==	O
0	int
;	O
else	O
if	O
(	O
result	*(struct)
==	O
MU_ERR_PROCESS_EXITED	O
)	O
retval	*(*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct),*(char),*(void))))
=	O
code	int
==	O
WEXITSTATUS	O
(	O
status	int
)	O
;	O
else	O
if	O
(	O
result	*(struct)
==	O
MU_ERR_PROCESS_SIGNALED	O
)	O
{	O
int	O
signo	int
=	O
WTERMSIG	O
(	O
status	int
)	O
;	O
size_t	long
n	*(long)
;	O
if	O
(	O
mu_sieve_get_tag	(*(struct),*(char),enum(int,int,int,int,int),*(void))->(int)
(	O
mach	*(struct)
,	O
"signal"	*(char)
,	O
SVT_NUMBER	int
,	O
&	O
n	*(long)
)	O
)	O
retval	*(*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct),*(char),*(void))))
=	O
signo	int
==	O
n	*(long)
;	O
else	O
{	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
pstr	*(*(char))
)	O
;	O
mu_sieve_abort	(*(struct))->(void)
(	O
mach	*(struct)
)	O
;	O
}	O
}	O
else	O
{	O
mu_sieve_error	(*(struct),*(char))->(void)
(	O
mach	*(struct)
,	O
"%lu: %s"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	(*(struct))->(long)
(	O
mach	*(struct)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
result	*(struct)
)	O
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
pstr	*(*(char))
)	O
;	O
mu_sieve_abort	(*(struct))->(void)
(	O
mach	*(struct)
)	O
;	O
}	O
}	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
pstr	*(*(char))
)	O
;	O
return	O
retval	*(*(struct(*(char),*(char),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*(void),long,*(struct),*(char),*(void))))
;	O
}	O
int	O
sieve_action_pipe	(*(struct))->(int)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
)	O
{	O
mu_sieve_log_action	(*(struct),*(char),*(char))->(void)
(	O
mach	*(struct)
,	O
"PIPE"	*(char)
,	O
NULL	O
)	O
;	O
return	O
sieve_pipe	(*(struct),int)->(int)
(	O
mach	*(struct)
,	O
0	int
)	O
;	O
}	O
int	O
sieve_test_pipe	(*(struct))->(int)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
)	O
{	O
return	O
sieve_pipe	(*(struct),int)->(int)
(	O
mach	*(struct)
,	O
1	int
)	O
;	O
}	O
static	O
mu_sieve_tag_def_t	struct(*(char),enum(int,int,int,int,int))
pipe_tags	array(struct(*(char),enum(int,int,int,int,int)))
[	O
]	O
=	O
{	O
{	O
"envelope"	*(char)
,	O
SVT_VOID	int
}	O
,	O
{	O
"body"	*(char)
,	O
SVT_VOID	int
}	O
,	O
{	O
"header"	*(char)
,	O
SVT_VOID	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
mu_sieve_tag_group_t	struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct))->(int)))
pipe_action_tag_groups	array(struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct))->(int))))
[	O
]	O
=	O
{	O
{	O
pipe_tags	array(struct(*(char),enum(int,int,int,int,int)))
,	O
NULL	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
mu_sieve_tag_def_t	struct(*(char),enum(int,int,int,int,int))
pipe_test_tags	array(struct(*(char),enum(int,int,int,int,int)))
[	O
]	O
=	O
{	O
{	O
"exit"	*(char)
,	O
SVT_NUMBER	int
}	O
,	O
{	O
"signal"	*(char)
,	O
SVT_NUMBER	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
mu_sieve_tag_group_t	struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct))->(int)))
pipe_test_tag_groups	array(struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct))->(int))))
[	O
]	O
=	O
{	O
{	O
pipe_tags	array(struct(*(char),enum(int,int,int,int,int)))
,	O
NULL	O
}	O
,	O
{	O
pipe_test_tags	array(struct(*(char),enum(int,int,int,int,int)))
,	O
NULL	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
mu_sieve_data_type	enum(int,int,int,int,int)
pipe_args	array(enum(int,int,int,int,int))
[	O
]	O
=	O
{	O
SVT_STRING	int
,	O
SVT_VOID	int
}	O
;	O
int	O
SIEVE_EXPORT	O
(	O
pipe	(array(int))->(int)
,	O
init	O
)	O
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
)	O
{	O
mu_sieve_register_action	(*(struct),*(char),*((*(struct))->(int)),*(enum(int,int,int,int,int)),*(struct(*(struct(*`,enum(int,int,int,int,int))),*((*`)->(int)))),int)->(void)
(	O
mach	*(struct)
,	O
"pipe"	*(char)
,	O
sieve_action_pipe	(*(struct))->(int)
,	O
pipe_args	array(enum(int,int,int,int,int))
,	O
pipe_action_tag_groups	array(struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct))->(int))))
,	O
1	int
)	O
;	O
mu_sieve_register_test	(*(struct),*(char),*((*(struct))->(int)),*(enum(int,int,int,int,int)),*(struct(*(struct(*`,enum(int,int,int,int,int))),*((*`)->(int)))),int)->(void)
(	O
mach	*(struct)
,	O
"pipe"	*(char)
,	O
sieve_test_pipe	(*(struct))->(int)
,	O
pipe_args	array(enum(int,int,int,int,int))
,	O
pipe_test_tag_groups	array(struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct))->(int))))
,	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
