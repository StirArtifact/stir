int	O
gsl_spblas_dgemv	O
(	O
const	O
CBLAS_TRANSPOSE_t	O
TransA	O
,	O
const	O
double	O
alpha	long double
,	O
const	O
gsl_spmatrix	O
*	O
A	O
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
const	O
double	O
beta	long double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
y	double
)	O
{	O
const	O
size_t	long
M	O
=	O
A	O
->	O
size1	O
;	O
const	O
size_t	long
N	O
=	O
A	O
->	O
size2	O
;	O
if	O
(	O
(	O
TransA	O
==	O
CblasNoTrans	O
&&	O
N	O
!=	O
x	double
->	O
size	long
)	O
||	O
(	O
TransA	O
==	O
CblasTrans	O
&&	O
M	O
!=	O
x	double
->	O
size	long
)	O
)	O
{	O
GSL_ERROR	O
(	O
"invalid length of x vector"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
(	O
TransA	O
==	O
CblasNoTrans	O
&&	O
M	O
!=	O
y	double
->	O
size	long
)	O
||	O
(	O
TransA	O
==	O
CblasTrans	O
&&	O
N	O
!=	O
y	double
->	O
size	long
)	O
)	O
{	O
GSL_ERROR	O
(	O
"invalid length of y vector"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
size_t	long
j	long
;	O
size_t	long
incX	O
,	O
incY	O
;	O
size_t	long
lenX	O
,	O
lenY	O
;	O
double	O
*	O
X	O
,	O
*	O
Y	O
;	O
double	O
*	O
Ad	O
;	O
int	O
*	O
Ap	O
,	O
*	O
Ai	O
,	O
*	O
Aj	O
;	O
int	O
p	O
;	O
if	O
(	O
TransA	O
==	O
CblasNoTrans	O
)	O
{	O
lenX	O
=	O
N	O
;	O
lenY	O
=	O
M	O
;	O
}	O
else	O
{	O
lenX	O
=	O
M	O
;	O
lenY	O
=	O
N	O
;	O
}	O
Y	O
=	O
y	double
->	O
data	*(long double)
;	O
incY	O
=	O
y	double
->	O
stride	long
;	O
if	O
(	O
beta	long double
==	O
0.0	int
)	O
{	O
size_t	long
jy	O
=	O
0	int
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
lenY	O
;	O
++	O
j	long
)	O
{	O
Y	O
[	O
jy	O
]	O
=	O
0.0	int
;	O
jy	O
+=	O
incY	O
;	O
}	O
}	O
else	O
if	O
(	O
beta	long double
!=	O
1.0	int
)	O
{	O
size_t	long
jy	O
=	O
0	int
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
lenY	O
;	O
++	O
j	long
)	O
{	O
Y	O
[	O
jy	O
]	O
*=	O
beta	long double
;	O
jy	O
+=	O
incY	O
;	O
}	O
}	O
if	O
(	O
alpha	long double
==	O
0.0	int
)	O
return	O
GSL_SUCCESS	int
;	O
Ap	O
=	O
A	O
->	O
p	O
;	O
Ad	O
=	O
A	O
->	O
data	*(long double)
;	O
X	O
=	O
x	double
->	O
data	*(long double)
;	O
incX	O
=	O
x	double
->	O
stride	long
;	O
if	O
(	O
(	O
GSL_SPMATRIX_ISCCS	O
(	O
A	O
)	O
&&	O
(	O
TransA	O
==	O
CblasNoTrans	O
)	O
)	O
||	O
(	O
GSL_SPMATRIX_ISCRS	O
(	O
A	O
)	O
&&	O
(	O
TransA	O
==	O
CblasTrans	O
)	O
)	O
)	O
{	O
Ai	O
=	O
A	O
->	O
i	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
lenX	O
;	O
++	O
j	long
)	O
{	O
for	O
(	O
p	O
=	O
Ap	O
[	O
j	long
]	O
;	O
p	O
<	O
Ap	O
[	O
j	long
+	O
1	int
]	O
;	O
++	O
p	O
)	O
{	O
Y	O
[	O
Ai	O
[	O
p	O
]	O
*	O
incY	O
]	O
+=	O
alpha	long double
*	O
Ad	O
[	O
p	O
]	O
*	O
X	O
[	O
j	long
*	O
incX	O
]	O
;	O
}	O
}	O
}	O
else	O
if	O
(	O
(	O
GSL_SPMATRIX_ISCCS	O
(	O
A	O
)	O
&&	O
(	O
TransA	O
==	O
CblasTrans	O
)	O
)	O
||	O
(	O
GSL_SPMATRIX_ISCRS	O
(	O
A	O
)	O
&&	O
(	O
TransA	O
==	O
CblasNoTrans	O
)	O
)	O
)	O
{	O
Ai	O
=	O
A	O
->	O
i	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
lenY	O
;	O
++	O
j	long
)	O
{	O
for	O
(	O
p	O
=	O
Ap	O
[	O
j	long
]	O
;	O
p	O
<	O
Ap	O
[	O
j	long
+	O
1	int
]	O
;	O
++	O
p	O
)	O
{	O
Y	O
[	O
j	long
*	O
incY	O
]	O
+=	O
alpha	long double
*	O
Ad	O
[	O
p	O
]	O
*	O
X	O
[	O
Ai	O
[	O
p	O
]	O
*	O
incX	O
]	O
;	O
}	O
}	O
}	O
else	O
if	O
(	O
GSL_SPMATRIX_ISTRIPLET	O
(	O
A	O
)	O
)	O
{	O
if	O
(	O
TransA	O
==	O
CblasNoTrans	O
)	O
{	O
Ai	O
=	O
A	O
->	O
i	long
;	O
Aj	O
=	O
A	O
->	O
p	O
;	O
}	O
else	O
{	O
Ai	O
=	O
A	O
->	O
p	O
;	O
Aj	O
=	O
A	O
->	O
i	long
;	O
}	O
for	O
(	O
p	O
=	O
0	int
;	O
p	O
<	O
(	O
int	O
)	O
A	O
->	O
nz	O
;	O
++	O
p	O
)	O
{	O
Y	O
[	O
Ai	O
[	O
p	O
]	O
*	O
incY	O
]	O
+=	O
alpha	long double
*	O
Ad	O
[	O
p	O
]	O
*	O
X	O
[	O
Aj	O
[	O
p	O
]	O
*	O
incX	O
]	O
;	O
}	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"unsupported matrix type"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
