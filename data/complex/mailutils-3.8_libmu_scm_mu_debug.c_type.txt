SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_debug_parse	O
,	O
"mu-debug-parse"	*(char)
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
spec	*(char)
)	O
,	O
"Parses @var{spec} and sets MU debugging level according to it."	*(char)
)	O
{	O
char	O
*	O
s	*(char)
;	O
SCM_ASSERT	()->(int)
(	O
scm_is_string	()->(int)
(	O
spec	*(char)
)	O
,	O
spec	*(char)
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
s	*(char)
=	O
scm_to_locale_string	()->(int)
(	O
spec	*(char)
)	O
;	O
mu_debug_parse_spec	(*(char))->(void)
(	O
s	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
s	*(char)
)	O
;	O
return	O
SCM_UNSPECIFIED	O
;	O
}	O
static	O
int	O
string_member_p	(int,int)->(int)
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
list	*(struct)
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
x	int
)	O
{	O
return	O
scm_member	()->(int)
(	O
x	int
,	O
list	*(struct)
)	O
!=	O
SCM_BOOL_F	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_debug_set	O
,	O
"mu-debug-set"	*(char)
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
catlist	O
)	O
,	O
"Sets MU debug level according to @var{catlist}, which is a list of\n"	*(char)
"conses: (cons category level)\n"	*(char)
)	O
{	O
SCM_ASSERT	()->(int)
(	O
scm_is_pair	()->(int)
(	O
catlist	O
)	O
,	O
catlist	O
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
for	O
(	O
;	O
!	O
scm_is_null	()->(int)
(	O
catlist	O
)	O
;	O
catlist	O
=	O
SCM_CDR	()->(int)
(	O
catlist	O
)	O
)	O
{	O
SCM	(*(int))->((*(void),*(struct))->(int))
cell	O
=	O
SCM_CAR	O
(	O
catlist	O
)	O
;	O
SCM	(*(int))->((*(void),*(struct))->(int))
x	int
;	O
char	O
*	O
name	*(char)
;	O
mu_debug_level_t	int
lev	int
;	O
SCM_ASSERT	()->(int)
(	O
scm_is_pair	()->(int)
(	O
cell	O
)	O
,	O
cell	O
,	O
SCM_ARGn	O
,	O
FUNC_NAME	O
)	O
;	O
x	int
=	O
scm_car	()->(int)
(	O
cell	O
)	O
;	O
SCM_ASSERT	()->(int)
(	O
scm_is_string	()->(int)
(	O
x	int
)	O
,	O
x	int
,	O
SCM_ARGn	O
,	O
FUNC_NAME	O
)	O
;	O
name	*(char)
=	O
scm_to_locale_string	()->(int)
(	O
x	int
)	O
;	O
x	int
=	O
scm_cdr	()->(int)
(	O
cell	O
)	O
;	O
SCM_ASSERT	()->(int)
(	O
scm_is_integer	()->(int)
(	O
x	int
)	O
,	O
x	int
,	O
SCM_ARGn	O
,	O
FUNC_NAME	O
)	O
;	O
lev	int
=	O
scm_to_int	()->(int)
(	O
x	int
)	O
;	O
if	O
(	O
lev	int
==	O
0	int
)	O
mu_debug_disable_category	(*(char),long)->(void)
(	O
name	*(char)
,	O
strlen	(*(char))->(long)
(	O
name	*(char)
)	O
)	O
;	O
else	O
mu_debug_enable_category	(*(char),long,int)->(void)
(	O
name	*(char)
,	O
strlen	(*(char))->(long)
(	O
name	*(char)
)	O
,	O
lev	int
)	O
;	O
free	(*(void))->(void)
(	O
name	*(char)
)	O
;	O
}	O
return	O
SCM_UNSPECIFIED	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_debug_get	O
,	O
"mu-debug-get"	*(char)
,	O
0	int
,	O
2	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
catlist	O
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
skipunset	int
)	O
,	O
"Returns a list of MU debugging categories with corresponding levels.\n"	*(char)
"If @var{catlist} is supplied, it is a list of category names.  In this case\n"	*(char)
"only categories from this list are returned"	*(char)
)	O
{	O
int	O
skipunset_flag	int
=	O
0	int
;	O
mu_iterator_t	*(struct)
itr	*(struct)
;	O
SCM	(*(int))->((*(void),*(struct))->(int))
head	O
=	O
SCM_EOL	O
,	O
tail	O
=	O
SCM_EOL	O
;	O
int	O
(	O
*	O
member_p	*((int,int)->(int))
)	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
list	*(struct)
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
needle	*(char)
)	O
;	O
if	O
(	O
SCM_UNBNDP	()->(int)
(	O
catlist	O
)	O
||	O
catlist	O
==	O
SCM_BOOL_F	O
)	O
member_p	*((int,int)->(int))
=	O
NULL	O
;	O
else	O
{	O
SCM_ASSERT	()->(int)
(	O
scm_is_pair	()->(int)
(	O
catlist	O
)	O
,	O
catlist	O
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
member_p	*((int,int)->(int))
=	O
string_member_p	(int,int)->(int)
;	O
}	O
if	O
(	O
!	O
SCM_UNBNDP	()->(int)
(	O
skipunset	int
)	O
)	O
{	O
SCM_ASSERT	()->(int)
(	O
scm_is_bool	()->(int)
(	O
skipunset	int
)	O
,	O
skipunset	int
,	O
SCM_ARG2	O
,	O
FUNC_NAME	O
)	O
;	O
skipunset_flag	int
=	O
skipunset	int
==	O
SCM_BOOL_T	O
;	O
}	O
mu_debug_get_iterator	(*(*(struct)),int)->(int)
(	O
&	O
itr	*(struct)
,	O
skipunset_flag	int
)	O
;	O
for	O
(	O
mu_iterator_first	()->(int)
(	O
itr	*(struct)
)	O
;	O
!	O
mu_iterator_is_done	()->(int)
(	O
itr	*(struct)
)	O
;	O
mu_iterator_next	()->(int)
(	O
itr	*(struct)
)	O
)	O
{	O
const	O
char	O
*	O
name	*(char)
;	O
mu_debug_level_t	int
level	int
;	O
SCM	(*(int))->((*(void),*(struct))->(int))
scm_name	O
;	O
mu_iterator_current_kv	()->(int)
(	O
itr	*(struct)
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
name	*(char)
,	O
(	O
void	O
*	O
*	O
)	O
&	O
level	int
)	O
;	O
scm_name	O
=	O
scm_from_locale_string	()->(int)
(	O
name	*(char)
)	O
;	O
if	O
(	O
!	O
member_p	*((int,int)->(int))
||	O
member_p	*((int,int)->(int))
(	O
catlist	O
,	O
scm_name	O
)	O
)	O
{	O
SCM	(*(int))->((*(void),*(struct))->(int))
scm_new	O
=	O
scm_cons	O
(	O
scm_cons	O
(	O
scm_name	O
,	O
scm_from_uintmax	O
(	O
level	int
)	O
)	O
,	O
SCM_EOL	O
)	O
;	O
if	O
(	O
scm_is_null	()->(int)
(	O
head	O
)	O
)	O
head	O
=	O
tail	O
=	O
scm_new	O
;	O
else	O
{	O
SCM_SETCDR	()->(int)
(	O
tail	O
,	O
scm_new	O
)	O
;	O
tail	O
=	O
scm_new	O
;	O
}	O
}	O
}	O
mu_iterator_destroy	()->(int)
(	O
&	O
itr	*(struct)
)	O
;	O
return	O
head	O
;	O
}	O
void	O
mu_scm_debug_init	()->(void)
(	O
)	O
{	O
}	O
