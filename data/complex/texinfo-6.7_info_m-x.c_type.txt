char	O
*	O
read_function_name	(*(char),*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)))->(*(char))
(	O
char	O
*	O
prompt	*(char)
,	O
WINDOW	struct(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct`)),*(char),*(char),*(char),int)),long,long,struct(*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*(struct`),long,long))),long,long)
*	O
window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
)	O
{	O
register	O
int	O
i	int
;	O
char	O
*	O
line	*(char)
;	O
REFERENCE	struct(*(char),*(char),*(char),int,int,long,int)
*	O
*	O
array	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
=	O
NULL	O
;	O
size_t	long
array_index	long
=	O
0	int
,	O
array_slots	long
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
function_doc_array	array(struct(*(()->(void)),*(char),*(struct(*(struct(*`,*`,*`)),*(struct),*(int))),*(char)))
[	O
i	int
]	O
.	O
func	*(()->(void))
;	O
i	int
++	O
)	O
{	O
REFERENCE	struct(*(char),*(char),*(char),int,int,long,int)
*	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
;	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
=	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
REFERENCE	struct(*(char),*(char),*(char),int,int,long,int)
)	O
)	O
;	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
label	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
function_doc_array	array(struct(*(()->(void)),*(char),*(struct(*(struct(*`,*`,*`)),*(struct),*(int))),*(char)))
[	O
i	int
]	O
.	O
func_name	*(char)
)	O
;	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
nodename	*(char)
=	O
NULL	O
;	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
filename	*(char)
=	O
NULL	O
;	O
add_pointer_to_array	O
(	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
,	O
array_index	long
,	O
array	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
,	O
array_slots	long
,	O
200	int
)	O
;	O
}	O
line	*(char)
=	O
info_read_completing_in_echo_area	(*(char),*(*(struct(*(char),*(char),*(char),int,int,long,int))))->(*(char))
(	O
prompt	*(char)
,	O
array	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
)	O
;	O
info_free_references	(*(*(struct(*(char),*(char),*(char),int,int,long,int))))->(void)
(	O
array	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
)	O
;	O
return	O
line	*(char)
;	O
}	O
DECLARE_INFO_COMMAND	O
(	O
describe_command	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),int)->(void)
,	O
_	O
(	O
"Read the name of an Info command and describe it"	*(char)
)	O
)	O
{	O
char	O
*	O
line	*(char)
;	O
line	*(char)
=	O
read_function_name	(*(char),*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)))->(*(char))
(	O
_	O
(	O
"Describe command: "	*(char)
)	O
,	O
window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
)	O
;	O
if	O
(	O
!	O
line	*(char)
)	O
{	O
info_abort_key	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),int)->(void)
(	O
active_window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
,	O
count	*(int)
)	O
;	O
return	O
;	O
}	O
if	O
(	O
*	O
line	*(char)
)	O
{	O
InfoCommand	struct(*(()->(void)),*(char),*(struct(*(struct(*`,*`,*`)),*(struct),*(int))),*(char))
*	O
cmd	*(struct(*(()->(void)),*(char),*(struct(*(struct`),*(struct`),*(int))),*(char)))
=	O
named_function	(*(char))->(*(struct(*(()->(void)),*(char),*(struct(*`,*`,*`)),*(char))))
(	O
line	*(char)
)	O
;	O
if	O
(	O
!	O
cmd	*(struct(*(()->(void)),*(char),*(struct(*(struct`),*(struct`),*(int))),*(char)))
)	O
return	O
;	O
window_message_in_echo_area	(*(char))->(void)
(	O
"%s: %s."	*(char)
,	O
line	*(char)
,	O
function_documentation	(*(struct(*(()->(void)),*(char),*(struct(*`,*`,*`)),*(char))))->(*(char))
(	O
cmd	*(struct(*(()->(void)),*(char),*(struct(*(struct`),*(struct`),*(int))),*(char)))
)	O
)	O
;	O
}	O
free	(*(void))->(void)
(	O
line	*(char)
)	O
;	O
}	O
DECLARE_INFO_COMMAND	O
(	O
info_execute_command	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),int)->(void)
,	O
_	O
(	O
"Read a command name in the echo area and execute it"	*(char)
)	O
)	O
{	O
char	O
*	O
line	*(char)
;	O
char	O
*	O
keys	*(struct(*(struct(*(struct`),*(struct`),*(int))),*(struct),*(int)))
;	O
char	O
*	O
prompt	*(char)
;	O
keys	*(struct(*(struct(*(struct`),*(struct`),*(int))),*(struct),*(int)))
=	O
where_is	(*(struct(char,union(*(struct`),*(struct`)))),*(struct(*(()->(void)),*(char),*(struct(*`,*`,*`)),*(char))))->(*(char))
(	O
info_keymap	*(struct(char,union(*(struct(*`,*`,*`,*`)),*(struct(char,union`)))))
,	O
InfoCmd	O
(	O
info_execute_command	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),int)->(void)
)	O
)	O
;	O
if	O
(	O
!	O
keys	*(struct(*(struct(*(struct`),*(struct`),*(int))),*(struct),*(int)))
)	O
abort	()->(void)
(	O
)	O
;	O
if	O
(	O
info_explicit_arg	int
||	O
count	*(int)
!=	O
1	int
)	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
prompt	*(char)
,	O
"%d %s "	*(char)
,	O
count	*(int)
,	O
keys	*(struct(*(struct(*(struct`),*(struct`),*(int))),*(struct),*(int)))
)	O
;	O
else	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
prompt	*(char)
,	O
"%s "	*(char)
,	O
keys	*(struct(*(struct(*(struct`),*(struct`),*(int))),*(struct),*(int)))
)	O
;	O
line	*(char)
=	O
read_function_name	(*(char),*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)))->(*(char))
(	O
prompt	*(char)
,	O
window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
)	O
;	O
free	(*(void))->(void)
(	O
prompt	*(char)
)	O
;	O
if	O
(	O
!	O
line	*(char)
)	O
{	O
info_abort_key	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),int)->(void)
(	O
active_window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
,	O
count	*(int)
)	O
;	O
return	O
;	O
}	O
if	O
(	O
!	O
*	O
line	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
line	*(char)
)	O
;	O
return	O
;	O
}	O
{	O
InfoCommand	struct(*(()->(void)),*(char),*(struct(*(struct(*`,*`,*`)),*(struct),*(int))),*(char))
*	O
command	*(struct(*(()->(void)),*(char),*(struct(*(struct`),*(struct`),*(int))),*(char)))
;	O
if	O
(	O
(	O
active_window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
!=	O
the_echo_area	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
)	O
&&	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
line	*(char)
,	O
"echo-area-"	*(char)
,	O
10	int
)	O
==	O
0	int
)	O
)	O
{	O
free	(*(void))->(void)
(	O
line	*(char)
)	O
;	O
info_error	(*(char))->(void)
(	O
_	O
(	O
"Cannot execute an 'echo-area' command here"	*(char)
)	O
)	O
;	O
return	O
;	O
}	O
command	*(struct(*(()->(void)),*(char),*(struct(*(struct`),*(struct`),*(int))),*(char)))
=	O
named_function	(*(char))->(*(struct(*(()->(void)),*(char),*(struct(*`,*`,*`)),*(char))))
(	O
line	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
line	*(char)
)	O
;	O
if	O
(	O
command	*(struct(*(()->(void)),*(char),*(struct(*(struct`),*(struct`),*(int))),*(char)))
&&	O
command	*(struct(*(()->(void)),*(char),*(struct(*(struct`),*(struct`),*(int))),*(char)))
->	O
func	*(()->(void))
)	O
(	O
*	O
command	*(struct(*(()->(void)),*(char),*(struct(*(struct`),*(struct`),*(int))),*(char)))
->	O
func	*(()->(void))
)	O
(	O
active_window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
,	O
count	*(int)
,	O
0	int
)	O
;	O
}	O
}	O
DECLARE_INFO_COMMAND	O
(	O
set_screen_height	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),int)->(void)
,	O
_	O
(	O
"Set the height of the displayed window"	*(char)
)	O
)	O
{	O
int	O
new_height	int
,	O
old_height	int
=	O
screenheight	int
;	O
if	O
(	O
info_explicit_arg	int
||	O
count	*(int)
!=	O
1	int
)	O
new_height	int
=	O
count	*(int)
;	O
else	O
{	O
char	O
prompt	*(char)
[	O
80	int
]	O
;	O
char	O
*	O
line	*(char)
;	O
new_height	int
=	O
screenheight	int
;	O
sprintf	(*(char),*(char))->(int)
(	O
prompt	*(char)
,	O
_	O
(	O
"Set screen height to (%d): "	*(char)
)	O
,	O
new_height	int
)	O
;	O
line	*(char)
=	O
info_read_in_echo_area	(*(char))->(*(char))
(	O
prompt	*(char)
)	O
;	O
if	O
(	O
!	O
line	*(char)
)	O
{	O
info_abort_key	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),int)->(void)
(	O
active_window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
,	O
count	*(int)
)	O
;	O
return	O
;	O
}	O
if	O
(	O
*	O
line	*(char)
)	O
new_height	int
=	O
atoi	(*(char))->(int)
(	O
line	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
line	*(char)
)	O
;	O
}	O
terminal_clear_screen	()->(void)
(	O
)	O
;	O
display_clear_display	(*(*(struct(*(char),int,int))))->(void)
(	O
the_display	*(*(struct(*(char),int,int)))
)	O
;	O
screenheight	int
=	O
new_height	int
;	O
if	O
(	O
screenheight	int
==	O
old_height	int
)	O
{	O
window_mark_chain	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),int)->(void)
(	O
windows	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
,	O
W_UpdateWindow	int
)	O
;	O
display_update_display	()->(void)
(	O
)	O
;	O
}	O
else	O
{	O
display_initialize_display	(int,int)->(void)
(	O
screenwidth	int
,	O
screenheight	int
)	O
;	O
window_new_screen_size	(int,int)->(void)
(	O
screenwidth	int
,	O
screenheight	int
)	O
;	O
}	O
}	O
