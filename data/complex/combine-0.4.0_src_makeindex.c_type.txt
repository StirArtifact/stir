int	O
create_file_index	(*(char),*(char),*(struct(long,enum(int,int,int),*(char))),long,*(struct(long,enum(int,int,int),*(char))),int,*(*(struct(long,long,int,*(char)))),int,int)->(int)
(	O
filename	*(char)
,	O
indexname	*(char)
,	O
record_delimiter	*(struct(long,enum(int,int,int),*(char)))
,	O
record_length	long long
,	O
field_delimiter	*(struct(long,enum(int,int,int),*(char)))
,	O
field_delimiter_repeat	int
,	O
keys	*(*(struct(long,long,int,*(char))))
,	O
key_count	int
,	O
unique	int
)	O
char	O
*	O
filename	*(char)
;	O
char	O
*	O
indexname	*(char)
;	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
record_delimiter	*(struct(long,enum(int,int,int),*(char)))
;	O
size_t	long
record_length	long long
;	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
field_delimiter	*(struct(long,enum(int,int,int),*(char)))
;	O
int	O
field_delimiter_repeat	int
;	O
field_range	struct(long,long,int,*(char))
*	O
*	O
keys	*(*(struct(long,long,int,*(char))))
;	O
int	O
key_count	int
;	O
int	O
unique	int
;	O
{	O
FILE	struct
*	O
input_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
FILE	struct
*	O
index_files	array(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))))
[	O
2	int
]	O
;	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
input_record	*(struct(long,enum(int,int,int),*(char)))
;	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
*	O
input_fields	*(*(struct(long,enum(int,int,int),*(char))))
;	O
unsigned	O
char	O
*	O
input_buffer	*(char)
;	O
size_t	long
input_buffer_pos	long
;	O
size_t	long
input_buffer_size	long
;	O
int	O
record_count	int
;	O
int	O
return_code	int
;	O
int	O
i	int
;	O
INDEXNUM	O
data_file_position	long long
;	O
INDEXNUM	O
data_record_length	long long
;	O
input_buffer_size	long
=	O
0	int
;	O
input_buffer_pos	long
=	O
0	int
;	O
input_buffer	*(char)
=	O
NULL	O
;	O
input_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
filename	*(char)
,	O
"r"	*(char)
)	O
;	O
if	O
(	O
input_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
==	O
NULL	O
)	O
return	O
EXIT_FAILURE	int
;	O
return_code	int
=	O
open_index_file	(*(char),*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))),int)->(int)
(	O
indexname	*(char)
,	O
index_files	array(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))))
,	O
1	int
)	O
;	O
if	O
(	O
return_code	int
!=	O
EXIT_SUCCESS	int
)	O
return	O
EXIT_FAILURE	int
;	O
return_code	int
=	O
initialize_index_file	(*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))->(int)
(	O
index_files	array(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))))
)	O
;	O
if	O
(	O
return_code	int
!=	O
EXIT_SUCCESS	int
)	O
return	O
EXIT_FAILURE	int
;	O
record_count	int
=	O
0	int
;	O
data_file_position	long long
=	O
0	int
;	O
input_record	*(struct(long,enum(int,int,int),*(char)))
=	O
df_get_next_record	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(*(char)),*(long),*(long),*(struct(long,enum(int,int,int),*(char))),long)->(*(struct(long,enum(int,int,int),*(char))))
(	O
input_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
&	O
input_buffer	*(char)
,	O
&	O
input_buffer_pos	long
,	O
&	O
input_buffer_size	long
,	O
record_delimiter	*(struct(long,enum(int,int,int),*(char)))
,	O
record_length	long long
)	O
;	O
while	O
(	O
input_record	*(struct(long,enum(int,int,int),*(char)))
!=	O
NULL	O
)	O
{	O
record_count	int
++	O
;	O
data_record_length	long long
=	O
input_record	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
;	O
return_code	int
=	O
a_find_input_ranges	(*(*(*(struct(long,enum(int,int,int),*`)))),*(struct(long,enum(int,int,int),*(char))),*(struct(long,long,int,*(char))),int,long,*(struct(long,enum(int,int,int),*(char))),int,enum(int,int,int),*(struct(long,enum(int,int,int),*(char))),*(struct(long,enum(int,int,int),*(char))))->(int)
(	O
&	O
(	O
input_fields	*(*(struct(long,enum(int,int,int),*(char))))
)	O
,	O
input_record	*(struct(long,enum(int,int,int),*(char)))
,	O
*	O
keys	*(*(struct(long,long,int,*(char))))
,	O
key_count	int
,	O
0	int
,	O
field_delimiter	*(struct(long,enum(int,int,int),*(char)))
,	O
field_delimiter_repeat	int
,	O
DStr_not_own	int
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
return_code	int
!=	O
EXIT_SUCCESS	int
)	O
FATAL_ERROR	O
(	O
_	O
(	O
"unable to allocate memory"	*(char)
)	O
)	O
;	O
return_code	int
=	O
add_index_record_entry	(*(*(struct(long,enum(int,int,int),*(char)))),int,long long,long long,*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))->(int)
(	O
input_fields	*(*(struct(long,enum(int,int,int),*(char))))
,	O
key_count	int
,	O
data_file_position	long long
,	O
data_record_length	long long
,	O
index_files	array(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))))
)	O
;	O
if	O
(	O
return_code	int
!=	O
EXIT_SUCCESS	int
)	O
return	O
EXIT_FAILURE	int
;	O
data_file_position	long long
+=	O
data_record_length	long long
;	O
dstrfree	(*(struct(long,enum(int,int,int),*(char))))->(void)
(	O
input_record	*(struct(long,enum(int,int,int),*(char)))
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
key_count	int
;	O
i	int
++	O
)	O
dstrfree	(*(struct(long,enum(int,int,int),*(char))))->(void)
(	O
input_fields	*(*(struct(long,enum(int,int,int),*(char))))
[	O
i	int
]	O
)	O
;	O
free	(*(void))->(void)
(	O
input_fields	*(*(struct(long,enum(int,int,int),*(char))))
)	O
;	O
input_record	*(struct(long,enum(int,int,int),*(char)))
=	O
df_get_next_record	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(*(char)),*(long),*(long),*(struct(long,enum(int,int,int),*(char))),long)->(*(struct(long,enum(int,int,int),*(char))))
(	O
input_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
&	O
input_buffer	*(char)
,	O
&	O
input_buffer_pos	long
,	O
&	O
input_buffer_size	long
,	O
record_delimiter	*(struct(long,enum(int,int,int),*(char)))
,	O
record_length	long long
)	O
;	O
}	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
input_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
close_index_file	(*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))->(int)
(	O
index_files	array(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))))
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
