static	O
int	O
sdp_message_parse_v	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp_message_t	struct
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
char	O
*	O
buf	*(char)
,	O
char	O
*	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
;	O
static	O
int	O
sdp_message_parse_o	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp_message_t	struct
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
char	O
*	O
buf	*(char)
,	O
char	O
*	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
;	O
static	O
int	O
sdp_message_parse_s	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp_message_t	struct
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
char	O
*	O
buf	*(char)
,	O
char	O
*	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
;	O
static	O
int	O
sdp_message_parse_i	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp_message_t	struct
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
char	O
*	O
buf	*(char)
,	O
char	O
*	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
;	O
static	O
int	O
sdp_message_parse_u	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp_message_t	struct
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
char	O
*	O
buf	*(char)
,	O
char	O
*	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
;	O
static	O
int	O
sdp_message_parse_e	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp_message_t	struct
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
char	O
*	O
buf	*(char)
,	O
char	O
*	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
;	O
static	O
int	O
sdp_message_parse_p	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp_message_t	struct
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
char	O
*	O
buf	*(char)
,	O
char	O
*	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
;	O
static	O
int	O
sdp_message_parse_c	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp_message_t	struct
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
char	O
*	O
buf	*(char)
,	O
char	O
*	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
;	O
static	O
int	O
sdp_message_parse_b	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp_message_t	struct
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
char	O
*	O
buf	*(char)
,	O
char	O
*	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
;	O
static	O
int	O
sdp_message_parse_t	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp_message_t	struct
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
char	O
*	O
buf	*(char)
,	O
char	O
*	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
;	O
static	O
int	O
sdp_message_parse_r	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp_message_t	struct
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
char	O
*	O
buf	*(char)
,	O
char	O
*	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
;	O
static	O
int	O
sdp_message_parse_z	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp_message_t	struct
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
char	O
*	O
buf	*(char)
,	O
char	O
*	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
;	O
static	O
int	O
sdp_message_parse_k	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp_message_t	struct
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
char	O
*	O
buf	*(char)
,	O
char	O
*	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
;	O
static	O
int	O
sdp_message_parse_a	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp_message_t	struct
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
char	O
*	O
buf	*(char)
,	O
char	O
*	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
;	O
static	O
int	O
sdp_message_parse_m	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp_message_t	struct
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
char	O
*	O
buf	*(char)
,	O
char	O
*	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
;	O
static	O
int	O
sdp_append_media	(*(*(char)),*(int),*(char),*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct`)),*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)))),*(*(char)))->(int)
(	O
char	O
*	O
*	O
string	*(char)
,	O
int	O
*	O
size	long
,	O
char	O
*	O
tmp	*(char)
,	O
sdp_media_t	struct
*	O
media	*(char)
,	O
char	O
*	O
*	O
next_tmp	*(*(char))
)	O
;	O
static	O
int	O
sdp_append_attribute	(*(*(char)),*(int),*(char),*(struct(*(char),*(char))),*(*(char)))->(int)
(	O
char	O
*	O
*	O
string	*(char)
,	O
int	O
*	O
size	long
,	O
char	O
*	O
tmp	*(char)
,	O
sdp_attribute_t	struct
*	O
attribute	*(struct(*(char),*(char)))
,	O
char	O
*	O
*	O
next_tmp	*(*(char))
)	O
;	O
static	O
int	O
sdp_append_key	(*(*(char)),*(int),*(char),*(struct(*(char),*(char))),*(*(char)))->(int)
(	O
char	O
*	O
*	O
string	*(char)
,	O
int	O
*	O
size	long
,	O
char	O
*	O
tmp	*(char)
,	O
sdp_key_t	struct
*	O
key	*(struct(*(char),*(char)))
,	O
char	O
*	O
*	O
next_tmp	*(*(char))
)	O
;	O
static	O
int	O
sdp_append_time_descr	(*(*(char)),*(int),*(char),*(struct(*(char),*(char),struct(int,*(struct`)))),*(*(char)))->(int)
(	O
char	O
*	O
*	O
string	*(char)
,	O
int	O
*	O
size	long
,	O
char	O
*	O
tmp	*(char)
,	O
sdp_time_descr_t	struct
*	O
time_descr	*(struct(*(char),*(char),struct(int,*(struct(*`,*`)))))
,	O
char	O
*	O
*	O
next_tmp	*(*(char))
)	O
;	O
static	O
int	O
sdp_append_bandwidth	(*(*(char)),*(int),*(char),*(struct(*(char),*(char))),*(*(char)))->(int)
(	O
char	O
*	O
*	O
string	*(char)
,	O
int	O
*	O
size	long
,	O
char	O
*	O
tmp	*(char)
,	O
sdp_bandwidth_t	struct
*	O
bandwidth	*(char)
,	O
char	O
*	O
*	O
next_tmp	*(*(char))
)	O
;	O
static	O
int	O
sdp_append_connection	(*(*(char)),*(int),*(char),*(struct(*(char),*(char),*(char),*(char),*(char))),*(*(char)))->(int)
(	O
char	O
*	O
*	O
string	*(char)
,	O
int	O
*	O
size	long
,	O
char	O
*	O
tmp	*(char)
,	O
sdp_connection_t	struct
*	O
conn	*(struct(*(char),*(char),*(char),*(char),*(char)))
,	O
char	O
*	O
*	O
next_tmp	*(*(char))
)	O
;	O
static	O
char	O
*	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
char	O
*	O
*	O
string	*(char)
,	O
int	O
*	O
size	long
,	O
char	O
*	O
cur	*(char)
,	O
char	O
*	O
string_osip_to_append	*(char)
)	O
;	O
int	O
sdp_bandwidth_init	(*(*(struct(*(char),*(char)))))->(int)
(	O
sdp_bandwidth_t	struct
*	O
*	O
b	*(*(struct(*(char),*(char))))
)	O
{	O
*	O
b	*(*(struct(*(char),*(char))))
=	O
(	O
sdp_bandwidth_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
sdp_bandwidth_t	struct
)	O
)	O
;	O
if	O
(	O
*	O
b	*(*(struct(*(char),*(char))))
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
(	O
*	O
b	*(*(struct(*(char),*(char))))
)	O
->	O
b_bwtype	*(char)
=	O
NULL	O
;	O
(	O
*	O
b	*(*(struct(*(char),*(char))))
)	O
->	O
b_bandwidth	*(char)
=	O
NULL	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
sdp_bandwidth_free	(*(struct(*(char),*(char))))->(void)
(	O
sdp_bandwidth_t	struct
*	O
b	*(*(struct(*(char),*(char))))
)	O
{	O
if	O
(	O
b	*(*(struct(*(char),*(char))))
==	O
NULL	O
)	O
return	O
;	O
osip_free	O
(	O
b	*(*(struct(*(char),*(char))))
->	O
b_bwtype	*(char)
)	O
;	O
osip_free	O
(	O
b	*(*(struct(*(char),*(char))))
->	O
b_bandwidth	*(char)
)	O
;	O
osip_free	O
(	O
b	*(*(struct(*(char),*(char))))
)	O
;	O
}	O
int	O
sdp_time_descr_init	(*(*(struct(*(char),*(char),struct(int,*`)))))->(int)
(	O
sdp_time_descr_t	struct
*	O
*	O
td	*(*(struct(*(char),*(char),struct(int,*(struct`)))))
)	O
{	O
*	O
td	*(*(struct(*(char),*(char),struct(int,*(struct`)))))
=	O
(	O
sdp_time_descr_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
sdp_time_descr_t	struct
)	O
)	O
;	O
if	O
(	O
*	O
td	*(*(struct(*(char),*(char),struct(int,*(struct`)))))
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
(	O
*	O
td	*(*(struct(*(char),*(char),struct(int,*(struct`)))))
)	O
->	O
t_start_time	*(char)
=	O
NULL	O
;	O
(	O
*	O
td	*(*(struct(*(char),*(char),struct(int,*(struct`)))))
)	O
->	O
t_stop_time	*(char)
=	O
NULL	O
;	O
osip_list_init	(*(struct(int,*(struct(*`,*`)))))->(int)
(	O
&	O
(	O
*	O
td	*(*(struct(*(char),*(char),struct(int,*(struct`)))))
)	O
->	O
r_repeats	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
sdp_time_descr_free	(*(struct(*(char),*(char),struct(int,*(struct`)))))->(void)
(	O
sdp_time_descr_t	struct
*	O
td	*(*(struct(*(char),*(char),struct(int,*(struct`)))))
)	O
{	O
if	O
(	O
td	*(*(struct(*(char),*(char),struct(int,*(struct`)))))
==	O
NULL	O
)	O
return	O
;	O
osip_free	O
(	O
td	*(*(struct(*(char),*(char),struct(int,*(struct`)))))
->	O
t_start_time	*(char)
)	O
;	O
osip_free	O
(	O
td	*(*(struct(*(char),*(char),struct(int,*(struct`)))))
->	O
t_stop_time	*(char)
)	O
;	O
osip_list_ofchar_free	(*(struct(int,*(struct(*`,*`)))))->(void)
(	O
&	O
td	*(*(struct(*(char),*(char),struct(int,*(struct`)))))
->	O
r_repeats	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
osip_free	O
(	O
td	*(*(struct(*(char),*(char),struct(int,*(struct`)))))
)	O
;	O
}	O
int	O
sdp_key_init	(*(*(struct(*(char),*(char)))))->(int)
(	O
sdp_key_t	struct
*	O
*	O
key	*(struct(*(char),*(char)))
)	O
{	O
*	O
key	*(struct(*(char),*(char)))
=	O
(	O
sdp_key_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
sdp_key_t	struct
)	O
)	O
;	O
if	O
(	O
*	O
key	*(struct(*(char),*(char)))
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
(	O
*	O
key	*(struct(*(char),*(char)))
)	O
->	O
k_keytype	*(char)
=	O
NULL	O
;	O
(	O
*	O
key	*(struct(*(char),*(char)))
)	O
->	O
k_keydata	*(char)
=	O
NULL	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
sdp_key_free	(*(struct(*(char),*(char))))->(void)
(	O
sdp_key_t	struct
*	O
key	*(struct(*(char),*(char)))
)	O
{	O
if	O
(	O
key	*(struct(*(char),*(char)))
==	O
NULL	O
)	O
return	O
;	O
osip_free	O
(	O
key	*(struct(*(char),*(char)))
->	O
k_keytype	*(char)
)	O
;	O
osip_free	O
(	O
key	*(struct(*(char),*(char)))
->	O
k_keydata	*(char)
)	O
;	O
osip_free	O
(	O
key	*(struct(*(char),*(char)))
)	O
;	O
}	O
int	O
sdp_attribute_init	(*(*(struct(*(char),*(char)))))->(int)
(	O
sdp_attribute_t	struct
*	O
*	O
attribute	*(struct(*(char),*(char)))
)	O
{	O
*	O
attribute	*(struct(*(char),*(char)))
=	O
(	O
sdp_attribute_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
sdp_attribute_t	struct
)	O
)	O
;	O
if	O
(	O
*	O
attribute	*(struct(*(char),*(char)))
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
(	O
*	O
attribute	*(struct(*(char),*(char)))
)	O
->	O
a_att_field	*(char)
=	O
NULL	O
;	O
(	O
*	O
attribute	*(struct(*(char),*(char)))
)	O
->	O
a_att_value	*(char)
=	O
NULL	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
sdp_attribute_free	(*(struct(*(char),*(char))))->(void)
(	O
sdp_attribute_t	struct
*	O
attribute	*(struct(*(char),*(char)))
)	O
{	O
if	O
(	O
attribute	*(struct(*(char),*(char)))
==	O
NULL	O
)	O
return	O
;	O
osip_free	O
(	O
attribute	*(struct(*(char),*(char)))
->	O
a_att_field	*(char)
)	O
;	O
osip_free	O
(	O
attribute	*(struct(*(char),*(char)))
->	O
a_att_value	*(char)
)	O
;	O
osip_free	O
(	O
attribute	*(struct(*(char),*(char)))
)	O
;	O
}	O
int	O
sdp_connection_init	(*(*(struct(*(char),*(char),*(char),*(char),*(char)))))->(int)
(	O
sdp_connection_t	struct
*	O
*	O
connection	*(*(struct(*(char),*(char),*(char),*(char),*(char))))
)	O
{	O
*	O
connection	*(*(struct(*(char),*(char),*(char),*(char),*(char))))
=	O
(	O
sdp_connection_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
sdp_connection_t	struct
)	O
)	O
;	O
if	O
(	O
*	O
connection	*(*(struct(*(char),*(char),*(char),*(char),*(char))))
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
(	O
*	O
connection	*(*(struct(*(char),*(char),*(char),*(char),*(char))))
)	O
->	O
c_nettype	*(char)
=	O
NULL	O
;	O
(	O
*	O
connection	*(*(struct(*(char),*(char),*(char),*(char),*(char))))
)	O
->	O
c_addrtype	*(char)
=	O
NULL	O
;	O
(	O
*	O
connection	*(*(struct(*(char),*(char),*(char),*(char),*(char))))
)	O
->	O
c_addr	*(char)
=	O
NULL	O
;	O
(	O
*	O
connection	*(*(struct(*(char),*(char),*(char),*(char),*(char))))
)	O
->	O
c_addr_multicast_ttl	*(char)
=	O
NULL	O
;	O
(	O
*	O
connection	*(*(struct(*(char),*(char),*(char),*(char),*(char))))
)	O
->	O
c_addr_multicast_int	*(char)
=	O
NULL	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
sdp_connection_free	(*(struct(*(char),*(char),*(char),*(char),*(char))))->(void)
(	O
sdp_connection_t	struct
*	O
connection	*(*(struct(*(char),*(char),*(char),*(char),*(char))))
)	O
{	O
if	O
(	O
connection	*(*(struct(*(char),*(char),*(char),*(char),*(char))))
==	O
NULL	O
)	O
return	O
;	O
osip_free	O
(	O
connection	*(*(struct(*(char),*(char),*(char),*(char),*(char))))
->	O
c_nettype	*(char)
)	O
;	O
osip_free	O
(	O
connection	*(*(struct(*(char),*(char),*(char),*(char),*(char))))
->	O
c_addrtype	*(char)
)	O
;	O
osip_free	O
(	O
connection	*(*(struct(*(char),*(char),*(char),*(char),*(char))))
->	O
c_addr	*(char)
)	O
;	O
osip_free	O
(	O
connection	*(*(struct(*(char),*(char),*(char),*(char),*(char))))
->	O
c_addr_multicast_ttl	*(char)
)	O
;	O
osip_free	O
(	O
connection	*(*(struct(*(char),*(char),*(char),*(char),*(char))))
->	O
c_addr_multicast_int	*(char)
)	O
;	O
osip_free	O
(	O
connection	*(*(struct(*(char),*(char),*(char),*(char),*(char))))
)	O
;	O
}	O
int	O
sdp_media_init	(*(*(struct(*(char),*(char),*(char),*(char),struct(int,*`),*(char),struct(int,*`),struct(int,*`),struct(int,*`),*(struct`)))))->(int)
(	O
sdp_media_t	struct
*	O
*	O
media	*(char)
)	O
{	O
int	O
i	int
;	O
*	O
media	*(char)
=	O
(	O
sdp_media_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
sdp_media_t	struct
)	O
)	O
;	O
if	O
(	O
*	O
media	*(char)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
(	O
*	O
media	*(char)
)	O
->	O
m_media	*(char)
=	O
NULL	O
;	O
(	O
*	O
media	*(char)
)	O
->	O
m_port	*(char)
=	O
NULL	O
;	O
(	O
*	O
media	*(char)
)	O
->	O
m_number_of_port	*(char)
=	O
NULL	O
;	O
(	O
*	O
media	*(char)
)	O
->	O
m_proto	*(char)
=	O
NULL	O
;	O
i	int
=	O
osip_list_init	(*(struct(int,*(struct(*`,*`)))))->(int)
(	O
&	O
(	O
*	O
media	*(char)
)	O
->	O
m_payloads	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_free	O
(	O
*	O
media	*(char)
)	O
;	O
*	O
media	*(char)
=	O
NULL	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
(	O
*	O
media	*(char)
)	O
->	O
i_info	*(char)
=	O
NULL	O
;	O
i	int
=	O
osip_list_init	(*(struct(int,*(struct(*`,*`)))))->(int)
(	O
&	O
(	O
*	O
media	*(char)
)	O
->	O
c_connections	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_list_ofchar_free	(*(struct(int,*(struct(*`,*`)))))->(void)
(	O
&	O
(	O
*	O
media	*(char)
)	O
->	O
m_payloads	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
osip_free	O
(	O
*	O
media	*(char)
)	O
;	O
*	O
media	*(char)
=	O
NULL	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
i	int
=	O
osip_list_init	(*(struct(int,*(struct(*`,*`)))))->(int)
(	O
&	O
(	O
*	O
media	*(char)
)	O
->	O
b_bandwidths	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_list_ofchar_free	(*(struct(int,*(struct(*`,*`)))))->(void)
(	O
&	O
(	O
*	O
media	*(char)
)	O
->	O
m_payloads	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
osip_list_special_free	(*(struct(int,*(struct(*`,*`)))),*((*(void))->(void)))->(void)
(	O
&	O
(	O
*	O
media	*(char)
)	O
->	O
c_connections	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
&	O
sdp_connection_free	(*(struct(*(char),*(char),*(char),*(char),*(char))))->(void)
)	O
;	O
osip_free	O
(	O
*	O
media	*(char)
)	O
;	O
*	O
media	*(char)
=	O
NULL	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
i	int
=	O
osip_list_init	(*(struct(int,*(struct(*`,*`)))))->(int)
(	O
&	O
(	O
*	O
media	*(char)
)	O
->	O
a_attributes	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_list_ofchar_free	(*(struct(int,*(struct(*`,*`)))))->(void)
(	O
&	O
(	O
*	O
media	*(char)
)	O
->	O
m_payloads	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
osip_list_special_free	(*(struct(int,*(struct(*`,*`)))),*((*(void))->(void)))->(void)
(	O
&	O
(	O
*	O
media	*(char)
)	O
->	O
c_connections	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
&	O
sdp_connection_free	(*(struct(*(char),*(char),*(char),*(char),*(char))))->(void)
)	O
;	O
osip_list_special_free	(*(struct(int,*(struct(*`,*`)))),*((*(void))->(void)))->(void)
(	O
&	O
(	O
*	O
media	*(char)
)	O
->	O
b_bandwidths	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
&	O
sdp_bandwidth_free	(*(struct(*(char),*(char))))->(void)
)	O
;	O
osip_free	O
(	O
*	O
media	*(char)
)	O
;	O
*	O
media	*(char)
=	O
NULL	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
(	O
*	O
media	*(char)
)	O
->	O
k_key	*(struct(*(char),*(char)))
=	O
NULL	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
sdp_media_free	(*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct`)),*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)))))->(void)
(	O
sdp_media_t	struct
*	O
media	*(char)
)	O
{	O
if	O
(	O
media	*(char)
==	O
NULL	O
)	O
return	O
;	O
osip_free	O
(	O
media	*(char)
->	O
m_media	*(char)
)	O
;	O
osip_free	O
(	O
media	*(char)
->	O
m_port	*(char)
)	O
;	O
osip_free	O
(	O
media	*(char)
->	O
m_number_of_port	*(char)
)	O
;	O
osip_free	O
(	O
media	*(char)
->	O
m_proto	*(char)
)	O
;	O
osip_list_ofchar_free	(*(struct(int,*(struct(*`,*`)))))->(void)
(	O
&	O
media	*(char)
->	O
m_payloads	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
osip_free	O
(	O
media	*(char)
->	O
i_info	*(char)
)	O
;	O
osip_list_special_free	(*(struct(int,*(struct(*`,*`)))),*((*(void))->(void)))->(void)
(	O
&	O
media	*(char)
->	O
c_connections	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
&	O
sdp_connection_free	(*(struct(*(char),*(char),*(char),*(char),*(char))))->(void)
)	O
;	O
osip_list_special_free	(*(struct(int,*(struct(*`,*`)))),*((*(void))->(void)))->(void)
(	O
&	O
media	*(char)
->	O
b_bandwidths	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
&	O
sdp_bandwidth_free	(*(struct(*(char),*(char))))->(void)
)	O
;	O
osip_list_special_free	(*(struct(int,*(struct(*`,*`)))),*((*(void))->(void)))->(void)
(	O
&	O
media	*(char)
->	O
a_attributes	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
&	O
sdp_attribute_free	(*(struct(*(char),*(char))))->(void)
)	O
;	O
sdp_key_free	(*(struct(*(char),*(char))))->(void)
(	O
media	*(char)
->	O
k_key	*(struct(*(char),*(char)))
)	O
;	O
osip_free	O
(	O
media	*(char)
)	O
;	O
}	O
int	O
sdp_message_init	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*`),struct(int,*`),*(struct`),struct(int,*`),struct(int,*`),*(char),*(struct`),struct(int,*`),struct(int,*`)))))->(int)
(	O
sdp_message_t	struct
*	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
{	O
int	O
i	int
;	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
=	O
(	O
sdp_message_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
sdp_message_t	struct
)	O
)	O
;	O
if	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
->	O
v_version	*(char)
=	O
NULL	O
;	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
->	O
o_username	*(char)
=	O
NULL	O
;	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
->	O
o_sess_id	*(char)
=	O
NULL	O
;	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
->	O
o_sess_version	*(char)
=	O
NULL	O
;	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
->	O
o_nettype	*(char)
=	O
NULL	O
;	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
->	O
o_addrtype	*(char)
=	O
NULL	O
;	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
->	O
o_addr	*(char)
=	O
NULL	O
;	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
->	O
s_name	*(char)
=	O
NULL	O
;	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
->	O
i_info	*(char)
=	O
NULL	O
;	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
->	O
u_uri	*(char)
=	O
NULL	O
;	O
i	int
=	O
osip_list_init	(*(struct(int,*(struct(*`,*`)))))->(int)
(	O
&	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
->	O
e_emails	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_list_ofchar_free	(*(struct(int,*(struct(*`,*`)))))->(void)
(	O
&	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
->	O
e_emails	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
osip_free	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
;	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
=	O
NULL	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
i	int
=	O
osip_list_init	(*(struct(int,*(struct(*`,*`)))))->(int)
(	O
&	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
->	O
p_phones	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_list_ofchar_free	(*(struct(int,*(struct(*`,*`)))))->(void)
(	O
&	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
->	O
e_emails	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
osip_free	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
;	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
=	O
NULL	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
->	O
c_connection	*(struct(*(char),*(char),*(char),*(char),*(char)))
=	O
NULL	O
;	O
i	int
=	O
osip_list_init	(*(struct(int,*(struct(*`,*`)))))->(int)
(	O
&	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
->	O
b_bandwidths	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_list_ofchar_free	(*(struct(int,*(struct(*`,*`)))))->(void)
(	O
&	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
->	O
e_emails	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
osip_list_ofchar_free	(*(struct(int,*(struct(*`,*`)))))->(void)
(	O
&	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
->	O
p_phones	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
osip_free	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
;	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
=	O
NULL	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
i	int
=	O
osip_list_init	(*(struct(int,*(struct(*`,*`)))))->(int)
(	O
&	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
->	O
t_descrs	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_list_ofchar_free	(*(struct(int,*(struct(*`,*`)))))->(void)
(	O
&	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
->	O
e_emails	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
osip_list_ofchar_free	(*(struct(int,*(struct(*`,*`)))))->(void)
(	O
&	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
->	O
p_phones	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
osip_list_special_free	(*(struct(int,*(struct(*`,*`)))),*((*(void))->(void)))->(void)
(	O
&	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
->	O
b_bandwidths	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
&	O
sdp_bandwidth_free	(*(struct(*(char),*(char))))->(void)
)	O
;	O
osip_free	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
;	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
=	O
NULL	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
->	O
z_adjustments	*(char)
=	O
NULL	O
;	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
->	O
k_key	*(struct(*(char),*(char)))
=	O
NULL	O
;	O
i	int
=	O
osip_list_init	(*(struct(int,*(struct(*`,*`)))))->(int)
(	O
&	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
->	O
a_attributes	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_list_ofchar_free	(*(struct(int,*(struct(*`,*`)))))->(void)
(	O
&	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
->	O
e_emails	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
osip_list_ofchar_free	(*(struct(int,*(struct(*`,*`)))))->(void)
(	O
&	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
->	O
p_phones	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
osip_list_special_free	(*(struct(int,*(struct(*`,*`)))),*((*(void))->(void)))->(void)
(	O
&	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
->	O
b_bandwidths	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
&	O
sdp_bandwidth_free	(*(struct(*(char),*(char))))->(void)
)	O
;	O
osip_list_special_free	(*(struct(int,*(struct(*`,*`)))),*((*(void))->(void)))->(void)
(	O
&	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
->	O
t_descrs	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
&	O
sdp_time_descr_free	(*(struct(*(char),*(char),struct(int,*(struct`)))))->(void)
)	O
;	O
osip_free	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
;	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
=	O
NULL	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
i	int
=	O
osip_list_init	(*(struct(int,*(struct(*`,*`)))))->(int)
(	O
&	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
->	O
m_medias	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_list_ofchar_free	(*(struct(int,*(struct(*`,*`)))))->(void)
(	O
&	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
->	O
e_emails	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
osip_list_ofchar_free	(*(struct(int,*(struct(*`,*`)))))->(void)
(	O
&	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
->	O
p_phones	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
osip_list_special_free	(*(struct(int,*(struct(*`,*`)))),*((*(void))->(void)))->(void)
(	O
&	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
->	O
b_bandwidths	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
&	O
sdp_bandwidth_free	(*(struct(*(char),*(char))))->(void)
)	O
;	O
osip_list_special_free	(*(struct(int,*(struct(*`,*`)))),*((*(void))->(void)))->(void)
(	O
&	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
->	O
t_descrs	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
&	O
sdp_time_descr_free	(*(struct(*(char),*(char),struct(int,*(struct`)))))->(void)
)	O
;	O
osip_list_special_free	(*(struct(int,*(struct(*`,*`)))),*((*(void))->(void)))->(void)
(	O
&	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
->	O
a_attributes	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
&	O
sdp_attribute_free	(*(struct(*(char),*(char))))->(void)
)	O
;	O
osip_free	O
(	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
;	O
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
=	O
NULL	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
return	O
OSIP_SUCCESS	int
;	O
}	O
static	O
char	O
*	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
char	O
*	O
*	O
string	*(char)
,	O
int	O
*	O
size	long
,	O
char	O
*	O
cur	*(char)
,	O
char	O
*	O
string_osip_to_append	*(char)
)	O
{	O
int	O
length	long
=	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
string_osip_to_append	*(char)
)	O
;	O
if	O
(	O
cur	*(char)
-	O
(	O
*	O
string	*(char)
)	O
+	O
length	long
+	O
1	int
>	O
*	O
size	long
)	O
{	O
int	O
length2	int
;	O
length2	int
=	O
(	O
int	O
)	O
(	O
cur	*(char)
-	O
*	O
string	*(char)
)	O
;	O
(	O
*	O
string	*(char)
)	O
=	O
osip_realloc	O
(	O
(	O
*	O
string	*(char)
)	O
,	O
*	O
size	long
+	O
length	long
+	O
500	int
)	O
;	O
*	O
size	long
=	O
*	O
size	long
+	O
length	long
+	O
500	int
;	O
cur	*(char)
=	O
(	O
*	O
string	*(char)
)	O
+	O
length2	int
;	O
}	O
osip_strncpy	(*(char),*(char),long)->(*(char))
(	O
cur	*(char)
,	O
string_osip_to_append	*(char)
,	O
length	long
)	O
;	O
return	O
cur	*(char)
+	O
strlen	(*(char))->(long)
(	O
cur	*(char)
)	O
;	O
}	O
static	O
int	O
sdp_message_parse_v	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp_message_t	struct
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
char	O
*	O
buf	*(char)
,	O
char	O
*	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
{	O
char	O
*	O
equal	*(char)
;	O
char	O
*	O
crlf	*(char)
;	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
buf	*(char)
;	O
equal	*(char)
=	O
buf	*(char)
;	O
while	O
(	O
(	O
*	O
equal	*(char)
!=	O
'='	O
)	O
&&	O
(	O
*	O
equal	*(char)
!=	O
'\0'	O
)	O
)	O
equal	*(char)
++	O
;	O
if	O
(	O
*	O
equal	*(char)
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
equal	*(char)
==	O
buf	*(char)
)	O
return	O
ERR_DISCARD	int
;	O
if	O
(	O
equal	*(char)
[	O
-	O
1	int
]	O
!=	O
'v'	O
)	O
return	O
ERR_DISCARD	int
;	O
crlf	*(char)
=	O
equal	*(char)
+	O
1	int
;	O
while	O
(	O
(	O
*	O
crlf	*(char)
!=	O
'\r'	O
)	O
&&	O
(	O
*	O
crlf	*(char)
!=	O
'\n'	O
)	O
&&	O
(	O
*	O
crlf	*(char)
!=	O
'\0'	O
)	O
)	O
crlf	*(char)
++	O
;	O
if	O
(	O
*	O
crlf	*(char)
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
crlf	*(char)
==	O
equal	*(char)
+	O
1	int
)	O
return	O
ERR_ERROR	O
;	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
v_version	*(char)
=	O
osip_malloc	O
(	O
crlf	*(char)
-	O
(	O
equal	*(char)
+	O
1	int
)	O
+	O
1	int
)	O
;	O
if	O
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
v_version	*(char)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	(*(char),*(char),long)->(*(char))
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
v_version	*(char)
,	O
equal	*(char)
+	O
1	int
,	O
crlf	*(char)
-	O
(	O
equal	*(char)
+	O
1	int
)	O
)	O
;	O
if	O
(	O
crlf	*(char)
[	O
1	int
]	O
==	O
'\n'	O
)	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
crlf	*(char)
+	O
2	int
;	O
else	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
crlf	*(char)
+	O
1	int
;	O
return	O
OSIP_WF	int
;	O
}	O
static	O
int	O
sdp_message_parse_o	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp_message_t	struct
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
char	O
*	O
buf	*(char)
,	O
char	O
*	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
{	O
char	O
*	O
equal	*(char)
;	O
char	O
*	O
crlf	*(char)
;	O
char	O
*	O
tmp	*(char)
;	O
char	O
*	O
tmp_next	*(char)
;	O
int	O
i	int
;	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
buf	*(char)
;	O
equal	*(char)
=	O
buf	*(char)
;	O
while	O
(	O
(	O
*	O
equal	*(char)
!=	O
'='	O
)	O
&&	O
(	O
*	O
equal	*(char)
!=	O
'\0'	O
)	O
)	O
equal	*(char)
++	O
;	O
if	O
(	O
*	O
equal	*(char)
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
equal	*(char)
[	O
-	O
1	int
]	O
!=	O
'o'	O
)	O
return	O
ERR_DISCARD	int
;	O
crlf	*(char)
=	O
equal	*(char)
+	O
1	int
;	O
while	O
(	O
(	O
*	O
crlf	*(char)
!=	O
'\r'	O
)	O
&&	O
(	O
*	O
crlf	*(char)
!=	O
'\n'	O
)	O
&&	O
(	O
*	O
crlf	*(char)
!=	O
'\0'	O
)	O
)	O
crlf	*(char)
++	O
;	O
if	O
(	O
*	O
crlf	*(char)
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
crlf	*(char)
==	O
equal	*(char)
+	O
1	int
)	O
return	O
ERR_ERROR	O
;	O
tmp	*(char)
=	O
equal	*(char)
+	O
1	int
;	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
o_username	*(char)
)	O
,	O
tmp	*(char)
,	O
' '	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
-	O
1	int
;	O
tmp	*(char)
=	O
tmp_next	*(char)
;	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
o_sess_id	*(char)
)	O
,	O
tmp	*(char)
,	O
' '	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
-	O
1	int
;	O
tmp	*(char)
=	O
tmp_next	*(char)
;	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
o_sess_version	*(char)
)	O
,	O
tmp	*(char)
,	O
' '	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
-	O
1	int
;	O
tmp	*(char)
=	O
tmp_next	*(char)
;	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
o_nettype	*(char)
)	O
,	O
tmp	*(char)
,	O
' '	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
-	O
1	int
;	O
tmp	*(char)
=	O
tmp_next	*(char)
;	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
o_addrtype	*(char)
)	O
,	O
tmp	*(char)
,	O
' '	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
-	O
1	int
;	O
tmp	*(char)
=	O
tmp_next	*(char)
;	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
o_addr	*(char)
)	O
,	O
tmp	*(char)
,	O
'\r'	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
o_addr	*(char)
)	O
,	O
tmp	*(char)
,	O
'\n'	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
crlf	*(char)
[	O
1	int
]	O
==	O
'\n'	O
)	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
crlf	*(char)
+	O
2	int
;	O
else	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
crlf	*(char)
+	O
1	int
;	O
return	O
OSIP_WF	int
;	O
}	O
static	O
int	O
sdp_message_parse_s	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp_message_t	struct
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
char	O
*	O
buf	*(char)
,	O
char	O
*	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
{	O
char	O
*	O
equal	*(char)
;	O
char	O
*	O
crlf	*(char)
;	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
buf	*(char)
;	O
equal	*(char)
=	O
buf	*(char)
;	O
while	O
(	O
(	O
*	O
equal	*(char)
!=	O
'='	O
)	O
&&	O
(	O
*	O
equal	*(char)
!=	O
'\0'	O
)	O
)	O
equal	*(char)
++	O
;	O
if	O
(	O
*	O
equal	*(char)
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
equal	*(char)
[	O
-	O
1	int
]	O
!=	O
's'	O
)	O
return	O
ERR_DISCARD	int
;	O
crlf	*(char)
=	O
equal	*(char)
+	O
1	int
;	O
while	O
(	O
(	O
*	O
crlf	*(char)
!=	O
'\r'	O
)	O
&&	O
(	O
*	O
crlf	*(char)
!=	O
'\n'	O
)	O
&&	O
(	O
*	O
crlf	*(char)
!=	O
'\0'	O
)	O
)	O
crlf	*(char)
++	O
;	O
if	O
(	O
*	O
crlf	*(char)
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
crlf	*(char)
==	O
equal	*(char)
+	O
1	int
)	O
return	O
ERR_ERROR	O
;	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
s_name	*(char)
=	O
osip_malloc	O
(	O
crlf	*(char)
-	O
(	O
equal	*(char)
+	O
1	int
)	O
+	O
1	int
)	O
;	O
if	O
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
s_name	*(char)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	(*(char),*(char),long)->(*(char))
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
s_name	*(char)
,	O
equal	*(char)
+	O
1	int
,	O
crlf	*(char)
-	O
(	O
equal	*(char)
+	O
1	int
)	O
)	O
;	O
if	O
(	O
crlf	*(char)
[	O
1	int
]	O
==	O
'\n'	O
)	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
crlf	*(char)
+	O
2	int
;	O
else	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
crlf	*(char)
+	O
1	int
;	O
return	O
OSIP_WF	int
;	O
}	O
static	O
int	O
sdp_message_parse_i	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp_message_t	struct
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
char	O
*	O
buf	*(char)
,	O
char	O
*	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
{	O
char	O
*	O
equal	*(char)
;	O
char	O
*	O
crlf	*(char)
;	O
int	O
i	int
;	O
char	O
*	O
i_info	*(char)
;	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
buf	*(char)
;	O
equal	*(char)
=	O
buf	*(char)
;	O
while	O
(	O
(	O
*	O
equal	*(char)
!=	O
'='	O
)	O
&&	O
(	O
*	O
equal	*(char)
!=	O
'\0'	O
)	O
)	O
equal	*(char)
++	O
;	O
if	O
(	O
*	O
equal	*(char)
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
equal	*(char)
[	O
-	O
1	int
]	O
!=	O
'i'	O
)	O
return	O
ERR_DISCARD	int
;	O
crlf	*(char)
=	O
equal	*(char)
+	O
1	int
;	O
while	O
(	O
(	O
*	O
crlf	*(char)
!=	O
'\r'	O
)	O
&&	O
(	O
*	O
crlf	*(char)
!=	O
'\n'	O
)	O
&&	O
(	O
*	O
crlf	*(char)
!=	O
'\0'	O
)	O
)	O
crlf	*(char)
++	O
;	O
if	O
(	O
*	O
crlf	*(char)
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
crlf	*(char)
==	O
equal	*(char)
+	O
1	int
)	O
return	O
ERR_ERROR	O
;	O
i_info	*(char)
=	O
osip_malloc	O
(	O
crlf	*(char)
-	O
(	O
equal	*(char)
+	O
1	int
)	O
+	O
1	int
)	O
;	O
if	O
(	O
i_info	*(char)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	(*(char),*(char),long)->(*(char))
(	O
i_info	*(char)
,	O
equal	*(char)
+	O
1	int
,	O
crlf	*(char)
-	O
(	O
equal	*(char)
+	O
1	int
)	O
)	O
;	O
i	int
=	O
osip_list_size	(*(struct(int,*(struct(*`,*`)))))->(int)
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
m_medias	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
if	O
(	O
i	int
==	O
0	int
)	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
i_info	*(char)
=	O
i_info	*(char)
;	O
else	O
{	O
sdp_media_t	struct
*	O
last_sdp_media	*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(struct(*(char),*(char)))))
=	O
(	O
sdp_media_t	struct
*	O
)	O
osip_list_get	(*(struct(int,*(struct(*`,*`)))),int)->(*(void))
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
m_medias	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
i	int
-	O
1	int
)	O
;	O
last_sdp_media	*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(struct(*(char),*(char)))))
->	O
i_info	*(char)
=	O
i_info	*(char)
;	O
}	O
if	O
(	O
crlf	*(char)
[	O
1	int
]	O
==	O
'\n'	O
)	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
crlf	*(char)
+	O
2	int
;	O
else	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
crlf	*(char)
+	O
1	int
;	O
return	O
OSIP_WF	int
;	O
}	O
static	O
int	O
sdp_message_parse_u	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp_message_t	struct
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
char	O
*	O
buf	*(char)
,	O
char	O
*	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
{	O
char	O
*	O
equal	*(char)
;	O
char	O
*	O
crlf	*(char)
;	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
buf	*(char)
;	O
equal	*(char)
=	O
buf	*(char)
;	O
while	O
(	O
(	O
*	O
equal	*(char)
!=	O
'='	O
)	O
&&	O
(	O
*	O
equal	*(char)
!=	O
'\0'	O
)	O
)	O
equal	*(char)
++	O
;	O
if	O
(	O
*	O
equal	*(char)
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
equal	*(char)
[	O
-	O
1	int
]	O
!=	O
'u'	O
)	O
return	O
ERR_DISCARD	int
;	O
crlf	*(char)
=	O
equal	*(char)
+	O
1	int
;	O
while	O
(	O
(	O
*	O
crlf	*(char)
!=	O
'\r'	O
)	O
&&	O
(	O
*	O
crlf	*(char)
!=	O
'\n'	O
)	O
&&	O
(	O
*	O
crlf	*(char)
!=	O
'\0'	O
)	O
)	O
crlf	*(char)
++	O
;	O
if	O
(	O
*	O
crlf	*(char)
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
crlf	*(char)
==	O
equal	*(char)
+	O
1	int
)	O
return	O
ERR_ERROR	O
;	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
u_uri	*(char)
=	O
osip_malloc	O
(	O
crlf	*(char)
-	O
(	O
equal	*(char)
+	O
1	int
)	O
+	O
1	int
)	O
;	O
if	O
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
u_uri	*(char)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	(*(char),*(char),long)->(*(char))
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
u_uri	*(char)
,	O
equal	*(char)
+	O
1	int
,	O
crlf	*(char)
-	O
(	O
equal	*(char)
+	O
1	int
)	O
)	O
;	O
if	O
(	O
crlf	*(char)
[	O
1	int
]	O
==	O
'\n'	O
)	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
crlf	*(char)
+	O
2	int
;	O
else	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
crlf	*(char)
+	O
1	int
;	O
return	O
OSIP_WF	int
;	O
}	O
static	O
int	O
sdp_message_parse_e	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp_message_t	struct
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
char	O
*	O
buf	*(char)
,	O
char	O
*	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
{	O
char	O
*	O
equal	*(char)
;	O
char	O
*	O
crlf	*(char)
;	O
char	O
*	O
e_email	*(char)
;	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
buf	*(char)
;	O
equal	*(char)
=	O
buf	*(char)
;	O
while	O
(	O
(	O
*	O
equal	*(char)
!=	O
'='	O
)	O
&&	O
(	O
*	O
equal	*(char)
!=	O
'\0'	O
)	O
)	O
equal	*(char)
++	O
;	O
if	O
(	O
*	O
equal	*(char)
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
equal	*(char)
[	O
-	O
1	int
]	O
!=	O
'e'	O
)	O
return	O
ERR_DISCARD	int
;	O
crlf	*(char)
=	O
equal	*(char)
+	O
1	int
;	O
while	O
(	O
(	O
*	O
crlf	*(char)
!=	O
'\r'	O
)	O
&&	O
(	O
*	O
crlf	*(char)
!=	O
'\n'	O
)	O
&&	O
(	O
*	O
crlf	*(char)
!=	O
'\0'	O
)	O
)	O
crlf	*(char)
++	O
;	O
if	O
(	O
*	O
crlf	*(char)
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
crlf	*(char)
==	O
equal	*(char)
+	O
1	int
)	O
return	O
ERR_ERROR	O
;	O
e_email	*(char)
=	O
osip_malloc	O
(	O
crlf	*(char)
-	O
(	O
equal	*(char)
+	O
1	int
)	O
+	O
1	int
)	O
;	O
if	O
(	O
e_email	*(char)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	(*(char),*(char),long)->(*(char))
(	O
e_email	*(char)
,	O
equal	*(char)
+	O
1	int
,	O
crlf	*(char)
-	O
(	O
equal	*(char)
+	O
1	int
)	O
)	O
;	O
osip_list_add	(*(struct(int,*(struct(*`,*`)))),*(void),int)->(int)
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
e_emails	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
e_email	*(char)
,	O
-	O
1	int
)	O
;	O
if	O
(	O
crlf	*(char)
[	O
1	int
]	O
==	O
'\n'	O
)	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
crlf	*(char)
+	O
2	int
;	O
else	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
crlf	*(char)
+	O
1	int
;	O
return	O
OSIP_WF	int
;	O
}	O
static	O
int	O
sdp_message_parse_p	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp_message_t	struct
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
char	O
*	O
buf	*(char)
,	O
char	O
*	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
{	O
char	O
*	O
equal	*(char)
;	O
char	O
*	O
crlf	*(char)
;	O
char	O
*	O
p_phone	*(char)
;	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
buf	*(char)
;	O
equal	*(char)
=	O
buf	*(char)
;	O
while	O
(	O
(	O
*	O
equal	*(char)
!=	O
'='	O
)	O
&&	O
(	O
*	O
equal	*(char)
!=	O
'\0'	O
)	O
)	O
equal	*(char)
++	O
;	O
if	O
(	O
*	O
equal	*(char)
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
equal	*(char)
[	O
-	O
1	int
]	O
!=	O
'p'	O
)	O
return	O
ERR_DISCARD	int
;	O
crlf	*(char)
=	O
equal	*(char)
+	O
1	int
;	O
while	O
(	O
(	O
*	O
crlf	*(char)
!=	O
'\r'	O
)	O
&&	O
(	O
*	O
crlf	*(char)
!=	O
'\n'	O
)	O
&&	O
(	O
*	O
crlf	*(char)
!=	O
'\0'	O
)	O
)	O
crlf	*(char)
++	O
;	O
if	O
(	O
*	O
crlf	*(char)
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
crlf	*(char)
==	O
equal	*(char)
+	O
1	int
)	O
return	O
ERR_ERROR	O
;	O
p_phone	*(char)
=	O
osip_malloc	O
(	O
crlf	*(char)
-	O
(	O
equal	*(char)
+	O
1	int
)	O
+	O
1	int
)	O
;	O
if	O
(	O
p_phone	*(char)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	(*(char),*(char),long)->(*(char))
(	O
p_phone	*(char)
,	O
equal	*(char)
+	O
1	int
,	O
crlf	*(char)
-	O
(	O
equal	*(char)
+	O
1	int
)	O
)	O
;	O
osip_list_add	(*(struct(int,*(struct(*`,*`)))),*(void),int)->(int)
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
p_phones	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
p_phone	*(char)
,	O
-	O
1	int
)	O
;	O
if	O
(	O
crlf	*(char)
[	O
1	int
]	O
==	O
'\n'	O
)	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
crlf	*(char)
+	O
2	int
;	O
else	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
crlf	*(char)
+	O
1	int
;	O
return	O
OSIP_WF	int
;	O
}	O
static	O
int	O
sdp_message_parse_c	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp_message_t	struct
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
char	O
*	O
buf	*(char)
,	O
char	O
*	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
{	O
char	O
*	O
equal	*(char)
;	O
char	O
*	O
crlf	*(char)
;	O
char	O
*	O
tmp	*(char)
;	O
char	O
*	O
tmp_next	*(char)
;	O
sdp_connection_t	struct
*	O
c_header	*(struct(*(char),*(char),*(char),*(char),*(char)))
;	O
int	O
i	int
;	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
buf	*(char)
;	O
equal	*(char)
=	O
buf	*(char)
;	O
while	O
(	O
(	O
*	O
equal	*(char)
!=	O
'='	O
)	O
&&	O
(	O
*	O
equal	*(char)
!=	O
'\0'	O
)	O
)	O
equal	*(char)
++	O
;	O
if	O
(	O
*	O
equal	*(char)
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
equal	*(char)
[	O
-	O
1	int
]	O
!=	O
'c'	O
)	O
return	O
ERR_DISCARD	int
;	O
crlf	*(char)
=	O
equal	*(char)
+	O
1	int
;	O
while	O
(	O
(	O
*	O
crlf	*(char)
!=	O
'\r'	O
)	O
&&	O
(	O
*	O
crlf	*(char)
!=	O
'\n'	O
)	O
&&	O
(	O
*	O
crlf	*(char)
!=	O
'\0'	O
)	O
)	O
crlf	*(char)
++	O
;	O
if	O
(	O
*	O
crlf	*(char)
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
crlf	*(char)
==	O
equal	*(char)
+	O
1	int
)	O
return	O
ERR_ERROR	O
;	O
tmp	*(char)
=	O
equal	*(char)
+	O
1	int
;	O
i	int
=	O
sdp_connection_init	(*(*(struct(*(char),*(char),*(char),*(char),*(char)))))->(int)
(	O
&	O
c_header	*(struct(*(char),*(char),*(char),*(char),*(char)))
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
ERR_ERROR	O
;	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
c_header	*(struct(*(char),*(char),*(char),*(char),*(char)))
->	O
c_nettype	*(char)
)	O
,	O
tmp	*(char)
,	O
' '	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_connection_free	(*(struct(*(char),*(char),*(char),*(char),*(char))))->(void)
(	O
c_header	*(struct(*(char),*(char),*(char),*(char),*(char)))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	*(char)
=	O
tmp_next	*(char)
;	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
c_header	*(struct(*(char),*(char),*(char),*(char),*(char)))
->	O
c_addrtype	*(char)
)	O
,	O
tmp	*(char)
,	O
' '	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_connection_free	(*(struct(*(char),*(char),*(char),*(char),*(char))))->(void)
(	O
c_header	*(struct(*(char),*(char),*(char),*(char),*(char)))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	*(char)
=	O
tmp_next	*(char)
;	O
{	O
char	O
*	O
slash	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
tmp	*(char)
,	O
'/'	O
)	O
;	O
if	O
(	O
slash	*(char)
!=	O
NULL	O
&&	O
slash	*(char)
<	O
crlf	*(char)
)	O
{	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
c_header	*(struct(*(char),*(char),*(char),*(char),*(char)))
->	O
c_addr	*(char)
)	O
,	O
tmp	*(char)
,	O
'/'	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_connection_free	(*(struct(*(char),*(char),*(char),*(char),*(char))))->(void)
(	O
c_header	*(struct(*(char),*(char),*(char),*(char),*(char)))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	*(char)
=	O
tmp_next	*(char)
;	O
slash	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
slash	*(char)
+	O
1	int
,	O
'/'	O
)	O
;	O
if	O
(	O
slash	*(char)
!=	O
NULL	O
&&	O
slash	*(char)
<	O
crlf	*(char)
)	O
{	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
c_header	*(struct(*(char),*(char),*(char),*(char),*(char)))
->	O
c_addr_multicast_ttl	*(char)
)	O
,	O
tmp	*(char)
,	O
'/'	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_connection_free	(*(struct(*(char),*(char),*(char),*(char),*(char))))->(void)
(	O
c_header	*(struct(*(char),*(char),*(char),*(char),*(char)))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	*(char)
=	O
tmp_next	*(char)
;	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
c_header	*(struct(*(char),*(char),*(char),*(char),*(char)))
->	O
c_addr_multicast_int	*(char)
)	O
,	O
tmp	*(char)
,	O
'\r'	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
c_header	*(struct(*(char),*(char),*(char),*(char),*(char)))
->	O
c_addr_multicast_int	*(char)
)	O
,	O
tmp	*(char)
,	O
'\n'	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_connection_free	(*(struct(*(char),*(char),*(char),*(char),*(char))))->(void)
(	O
c_header	*(struct(*(char),*(char),*(char),*(char),*(char)))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
}	O
else	O
{	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
c_header	*(struct(*(char),*(char),*(char),*(char),*(char)))
->	O
c_addr_multicast_ttl	*(char)
)	O
,	O
tmp	*(char)
,	O
'\r'	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
c_header	*(struct(*(char),*(char),*(char),*(char),*(char)))
->	O
c_addr_multicast_ttl	*(char)
)	O
,	O
tmp	*(char)
,	O
'\n'	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_connection_free	(*(struct(*(char),*(char),*(char),*(char),*(char))))->(void)
(	O
c_header	*(struct(*(char),*(char),*(char),*(char),*(char)))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
}	O
}	O
else	O
{	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
c_header	*(struct(*(char),*(char),*(char),*(char),*(char)))
->	O
c_addr	*(char)
)	O
,	O
tmp	*(char)
,	O
'\r'	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
c_header	*(struct(*(char),*(char),*(char),*(char),*(char)))
->	O
c_addr	*(char)
)	O
,	O
tmp	*(char)
,	O
'\n'	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_connection_free	(*(struct(*(char),*(char),*(char),*(char),*(char))))->(void)
(	O
c_header	*(struct(*(char),*(char),*(char),*(char),*(char)))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
}	O
}	O
i	int
=	O
osip_list_size	(*(struct(int,*(struct(*`,*`)))))->(int)
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
m_medias	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
if	O
(	O
i	int
==	O
0	int
)	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
c_connection	*(struct(*(char),*(char),*(char),*(char),*(char)))
=	O
c_header	*(struct(*(char),*(char),*(char),*(char),*(char)))
;	O
else	O
{	O
sdp_media_t	struct
*	O
last_sdp_media	*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(struct(*(char),*(char)))))
=	O
(	O
sdp_media_t	struct
*	O
)	O
osip_list_get	(*(struct(int,*(struct(*`,*`)))),int)->(*(void))
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
m_medias	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
i	int
-	O
1	int
)	O
;	O
osip_list_add	(*(struct(int,*(struct(*`,*`)))),*(void),int)->(int)
(	O
&	O
last_sdp_media	*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(struct(*(char),*(char)))))
->	O
c_connections	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
c_header	*(struct(*(char),*(char),*(char),*(char),*(char)))
,	O
-	O
1	int
)	O
;	O
}	O
if	O
(	O
crlf	*(char)
[	O
1	int
]	O
==	O
'\n'	O
)	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
crlf	*(char)
+	O
2	int
;	O
else	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
crlf	*(char)
+	O
1	int
;	O
return	O
OSIP_WF	int
;	O
}	O
static	O
int	O
sdp_message_parse_b	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp_message_t	struct
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
char	O
*	O
buf	*(char)
,	O
char	O
*	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
{	O
char	O
*	O
equal	*(char)
;	O
char	O
*	O
crlf	*(char)
;	O
char	O
*	O
tmp	*(char)
;	O
char	O
*	O
tmp_next	*(char)
;	O
int	O
i	int
;	O
sdp_bandwidth_t	struct
*	O
b_header	*(struct(*(char),*(char)))
;	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
buf	*(char)
;	O
equal	*(char)
=	O
buf	*(char)
;	O
while	O
(	O
(	O
*	O
equal	*(char)
!=	O
'='	O
)	O
&&	O
(	O
*	O
equal	*(char)
!=	O
'\0'	O
)	O
)	O
equal	*(char)
++	O
;	O
if	O
(	O
*	O
equal	*(char)
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
equal	*(char)
[	O
-	O
1	int
]	O
!=	O
'b'	O
)	O
return	O
ERR_DISCARD	int
;	O
crlf	*(char)
=	O
equal	*(char)
+	O
1	int
;	O
while	O
(	O
(	O
*	O
crlf	*(char)
!=	O
'\r'	O
)	O
&&	O
(	O
*	O
crlf	*(char)
!=	O
'\n'	O
)	O
&&	O
(	O
*	O
crlf	*(char)
!=	O
'\0'	O
)	O
)	O
crlf	*(char)
++	O
;	O
if	O
(	O
*	O
crlf	*(char)
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
crlf	*(char)
==	O
equal	*(char)
+	O
1	int
)	O
return	O
ERR_ERROR	O
;	O
tmp	*(char)
=	O
equal	*(char)
+	O
1	int
;	O
i	int
=	O
sdp_bandwidth_init	(*(*(struct(*(char),*(char)))))->(int)
(	O
&	O
b_header	*(struct(*(char),*(char)))
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
ERR_ERROR	O
;	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
b_header	*(struct(*(char),*(char)))
->	O
b_bwtype	*(char)
)	O
,	O
tmp	*(char)
,	O
':'	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_bandwidth_free	(*(struct(*(char),*(char))))->(void)
(	O
b_header	*(struct(*(char),*(char)))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	*(char)
=	O
tmp_next	*(char)
;	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
b_header	*(struct(*(char),*(char)))
->	O
b_bandwidth	*(char)
)	O
,	O
tmp	*(char)
,	O
'\r'	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
b_header	*(struct(*(char),*(char)))
->	O
b_bandwidth	*(char)
)	O
,	O
tmp	*(char)
,	O
'\n'	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_bandwidth_free	(*(struct(*(char),*(char))))->(void)
(	O
b_header	*(struct(*(char),*(char)))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
i	int
=	O
osip_list_size	(*(struct(int,*(struct(*`,*`)))))->(int)
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
m_medias	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
if	O
(	O
i	int
==	O
0	int
)	O
osip_list_add	(*(struct(int,*(struct(*`,*`)))),*(void),int)->(int)
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
b_bandwidths	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
b_header	*(struct(*(char),*(char)))
,	O
-	O
1	int
)	O
;	O
else	O
{	O
sdp_media_t	struct
*	O
last_sdp_media	*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(struct(*(char),*(char)))))
=	O
(	O
sdp_media_t	struct
*	O
)	O
osip_list_get	(*(struct(int,*(struct(*`,*`)))),int)->(*(void))
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
m_medias	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
i	int
-	O
1	int
)	O
;	O
osip_list_add	(*(struct(int,*(struct(*`,*`)))),*(void),int)->(int)
(	O
&	O
last_sdp_media	*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(struct(*(char),*(char)))))
->	O
b_bandwidths	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
b_header	*(struct(*(char),*(char)))
,	O
-	O
1	int
)	O
;	O
}	O
if	O
(	O
crlf	*(char)
[	O
1	int
]	O
==	O
'\n'	O
)	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
crlf	*(char)
+	O
2	int
;	O
else	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
crlf	*(char)
+	O
1	int
;	O
return	O
OSIP_WF	int
;	O
}	O
static	O
int	O
sdp_message_parse_t	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp_message_t	struct
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
char	O
*	O
buf	*(char)
,	O
char	O
*	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
{	O
char	O
*	O
equal	*(char)
;	O
char	O
*	O
crlf	*(char)
;	O
char	O
*	O
tmp	*(char)
;	O
char	O
*	O
tmp_next	*(char)
;	O
int	O
i	int
;	O
sdp_time_descr_t	struct
*	O
t_header	*(struct(*(char),*(char),struct(int,*(struct(*`,*`)))))
;	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
buf	*(char)
;	O
equal	*(char)
=	O
buf	*(char)
;	O
while	O
(	O
(	O
*	O
equal	*(char)
!=	O
'='	O
)	O
&&	O
(	O
*	O
equal	*(char)
!=	O
'\0'	O
)	O
)	O
equal	*(char)
++	O
;	O
if	O
(	O
*	O
equal	*(char)
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
equal	*(char)
[	O
-	O
1	int
]	O
!=	O
't'	O
)	O
return	O
ERR_DISCARD	int
;	O
crlf	*(char)
=	O
equal	*(char)
+	O
1	int
;	O
while	O
(	O
(	O
*	O
crlf	*(char)
!=	O
'\r'	O
)	O
&&	O
(	O
*	O
crlf	*(char)
!=	O
'\n'	O
)	O
&&	O
(	O
*	O
crlf	*(char)
!=	O
'\0'	O
)	O
)	O
crlf	*(char)
++	O
;	O
if	O
(	O
*	O
crlf	*(char)
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
crlf	*(char)
==	O
equal	*(char)
+	O
1	int
)	O
return	O
ERR_ERROR	O
;	O
tmp	*(char)
=	O
equal	*(char)
+	O
1	int
;	O
i	int
=	O
sdp_time_descr_init	(*(*(struct(*(char),*(char),struct(int,*`)))))->(int)
(	O
&	O
t_header	*(struct(*(char),*(char),struct(int,*(struct(*`,*`)))))
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
ERR_ERROR	O
;	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
t_header	*(struct(*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
t_start_time	*(char)
)	O
,	O
tmp	*(char)
,	O
' '	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_time_descr_free	(*(struct(*(char),*(char),struct(int,*(struct`)))))->(void)
(	O
t_header	*(struct(*(char),*(char),struct(int,*(struct(*`,*`)))))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	*(char)
=	O
tmp_next	*(char)
;	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
t_header	*(struct(*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
t_stop_time	*(char)
)	O
,	O
tmp	*(char)
,	O
'\r'	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
t_header	*(struct(*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
t_stop_time	*(char)
)	O
,	O
tmp	*(char)
,	O
'\n'	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_time_descr_free	(*(struct(*(char),*(char),struct(int,*(struct`)))))->(void)
(	O
t_header	*(struct(*(char),*(char),struct(int,*(struct(*`,*`)))))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
osip_list_add	(*(struct(int,*(struct(*`,*`)))),*(void),int)->(int)
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
t_descrs	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
t_header	*(struct(*(char),*(char),struct(int,*(struct(*`,*`)))))
,	O
-	O
1	int
)	O
;	O
if	O
(	O
crlf	*(char)
[	O
1	int
]	O
==	O
'\n'	O
)	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
crlf	*(char)
+	O
2	int
;	O
else	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
crlf	*(char)
+	O
1	int
;	O
return	O
OSIP_WF	int
;	O
}	O
static	O
int	O
sdp_message_parse_r	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp_message_t	struct
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
char	O
*	O
buf	*(char)
,	O
char	O
*	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
{	O
char	O
*	O
equal	*(char)
;	O
char	O
*	O
crlf	*(char)
;	O
int	O
index	(*(char),int)->(*(char))
;	O
char	O
*	O
r_header	*(char)
;	O
sdp_time_descr_t	struct
*	O
t_descr	*(struct(*(char),*(char),struct(int,*(struct(*`,*`)))))
;	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
buf	*(char)
;	O
equal	*(char)
=	O
buf	*(char)
;	O
while	O
(	O
(	O
*	O
equal	*(char)
!=	O
'='	O
)	O
&&	O
(	O
*	O
equal	*(char)
!=	O
'\0'	O
)	O
)	O
equal	*(char)
++	O
;	O
if	O
(	O
*	O
equal	*(char)
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
equal	*(char)
[	O
-	O
1	int
]	O
!=	O
'r'	O
)	O
return	O
ERR_DISCARD	int
;	O
index	(*(char),int)->(*(char))
=	O
osip_list_size	(*(struct(int,*(struct(*`,*`)))))->(int)
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
t_descrs	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
if	O
(	O
index	(*(char),int)->(*(char))
==	O
0	int
)	O
return	O
ERR_ERROR	O
;	O
crlf	*(char)
=	O
equal	*(char)
+	O
1	int
;	O
while	O
(	O
(	O
*	O
crlf	*(char)
!=	O
'\r'	O
)	O
&&	O
(	O
*	O
crlf	*(char)
!=	O
'\n'	O
)	O
&&	O
(	O
*	O
crlf	*(char)
!=	O
'\0'	O
)	O
)	O
crlf	*(char)
++	O
;	O
if	O
(	O
*	O
crlf	*(char)
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
crlf	*(char)
==	O
equal	*(char)
+	O
1	int
)	O
return	O
ERR_ERROR	O
;	O
r_header	*(char)
=	O
osip_malloc	O
(	O
crlf	*(char)
-	O
(	O
equal	*(char)
+	O
1	int
)	O
+	O
1	int
)	O
;	O
if	O
(	O
r_header	*(char)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	(*(char),*(char),long)->(*(char))
(	O
r_header	*(char)
,	O
equal	*(char)
+	O
1	int
,	O
crlf	*(char)
-	O
(	O
equal	*(char)
+	O
1	int
)	O
)	O
;	O
t_descr	*(struct(*(char),*(char),struct(int,*(struct(*`,*`)))))
=	O
(	O
sdp_time_descr_t	struct
*	O
)	O
osip_list_get	(*(struct(int,*(struct(*`,*`)))),int)->(*(void))
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
t_descrs	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
index	(*(char),int)->(*(char))
-	O
1	int
)	O
;	O
osip_list_add	(*(struct(int,*(struct(*`,*`)))),*(void),int)->(int)
(	O
&	O
t_descr	*(struct(*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
r_repeats	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
r_header	*(char)
,	O
-	O
1	int
)	O
;	O
if	O
(	O
crlf	*(char)
[	O
1	int
]	O
==	O
'\n'	O
)	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
crlf	*(char)
+	O
2	int
;	O
else	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
crlf	*(char)
+	O
1	int
;	O
return	O
OSIP_WF	int
;	O
}	O
static	O
int	O
sdp_message_parse_z	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp_message_t	struct
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
char	O
*	O
buf	*(char)
,	O
char	O
*	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
{	O
char	O
*	O
equal	*(char)
;	O
char	O
*	O
crlf	*(char)
;	O
char	O
*	O
z_header	*(char)
;	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
buf	*(char)
;	O
equal	*(char)
=	O
buf	*(char)
;	O
while	O
(	O
(	O
*	O
equal	*(char)
!=	O
'='	O
)	O
&&	O
(	O
*	O
equal	*(char)
!=	O
'\0'	O
)	O
)	O
equal	*(char)
++	O
;	O
if	O
(	O
*	O
equal	*(char)
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
equal	*(char)
[	O
-	O
1	int
]	O
!=	O
'z'	O
)	O
return	O
ERR_DISCARD	int
;	O
crlf	*(char)
=	O
equal	*(char)
+	O
1	int
;	O
while	O
(	O
(	O
*	O
crlf	*(char)
!=	O
'\r'	O
)	O
&&	O
(	O
*	O
crlf	*(char)
!=	O
'\n'	O
)	O
&&	O
(	O
*	O
crlf	*(char)
!=	O
'\0'	O
)	O
)	O
crlf	*(char)
++	O
;	O
if	O
(	O
*	O
crlf	*(char)
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
crlf	*(char)
==	O
equal	*(char)
+	O
1	int
)	O
return	O
ERR_ERROR	O
;	O
z_header	*(char)
=	O
osip_malloc	O
(	O
crlf	*(char)
-	O
(	O
equal	*(char)
+	O
1	int
)	O
+	O
1	int
)	O
;	O
if	O
(	O
z_header	*(char)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	(*(char),*(char),long)->(*(char))
(	O
z_header	*(char)
,	O
equal	*(char)
+	O
1	int
,	O
crlf	*(char)
-	O
(	O
equal	*(char)
+	O
1	int
)	O
)	O
;	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
z_adjustments	*(char)
=	O
z_header	*(char)
;	O
if	O
(	O
crlf	*(char)
[	O
1	int
]	O
==	O
'\n'	O
)	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
crlf	*(char)
+	O
2	int
;	O
else	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
crlf	*(char)
+	O
1	int
;	O
return	O
OSIP_WF	int
;	O
}	O
static	O
int	O
sdp_message_parse_k	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp_message_t	struct
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
char	O
*	O
buf	*(char)
,	O
char	O
*	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
{	O
char	O
*	O
equal	*(char)
;	O
char	O
*	O
crlf	*(char)
;	O
int	O
i	int
;	O
char	O
*	O
colon	*(char)
;	O
sdp_key_t	struct
*	O
k_header	*(struct(*(char),*(char)))
;	O
char	O
*	O
tmp	*(char)
;	O
char	O
*	O
tmp_next	*(char)
;	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
buf	*(char)
;	O
equal	*(char)
=	O
buf	*(char)
;	O
while	O
(	O
(	O
*	O
equal	*(char)
!=	O
'='	O
)	O
&&	O
(	O
*	O
equal	*(char)
!=	O
'\0'	O
)	O
)	O
equal	*(char)
++	O
;	O
if	O
(	O
*	O
equal	*(char)
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
equal	*(char)
[	O
-	O
1	int
]	O
!=	O
'k'	O
)	O
return	O
ERR_DISCARD	int
;	O
crlf	*(char)
=	O
equal	*(char)
+	O
1	int
;	O
while	O
(	O
(	O
*	O
crlf	*(char)
!=	O
'\r'	O
)	O
&&	O
(	O
*	O
crlf	*(char)
!=	O
'\n'	O
)	O
&&	O
(	O
*	O
crlf	*(char)
!=	O
'\0'	O
)	O
)	O
crlf	*(char)
++	O
;	O
if	O
(	O
*	O
crlf	*(char)
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
crlf	*(char)
==	O
equal	*(char)
+	O
1	int
)	O
return	O
ERR_ERROR	O
;	O
tmp	*(char)
=	O
equal	*(char)
+	O
1	int
;	O
i	int
=	O
sdp_key_init	(*(*(struct(*(char),*(char)))))->(int)
(	O
&	O
k_header	*(struct(*(char),*(char)))
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
ERR_ERROR	O
;	O
colon	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
equal	*(char)
+	O
1	int
,	O
':'	O
)	O
;	O
if	O
(	O
(	O
colon	*(char)
!=	O
NULL	O
)	O
&&	O
(	O
colon	*(char)
<	O
crlf	*(char)
)	O
)	O
{	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
k_header	*(struct(*(char),*(char)))
->	O
k_keytype	*(char)
)	O
,	O
tmp	*(char)
,	O
':'	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_key_free	(*(struct(*(char),*(char))))->(void)
(	O
k_header	*(struct(*(char),*(char)))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	*(char)
=	O
tmp_next	*(char)
;	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
k_header	*(struct(*(char),*(char)))
->	O
k_keydata	*(char)
)	O
,	O
tmp	*(char)
,	O
'\r'	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
k_header	*(struct(*(char),*(char)))
->	O
k_keydata	*(char)
)	O
,	O
tmp	*(char)
,	O
'\n'	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_key_free	(*(struct(*(char),*(char))))->(void)
(	O
k_header	*(struct(*(char),*(char)))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
}	O
else	O
{	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
k_header	*(struct(*(char),*(char)))
->	O
k_keytype	*(char)
)	O
,	O
tmp	*(char)
,	O
'\r'	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
k_header	*(struct(*(char),*(char)))
->	O
k_keytype	*(char)
)	O
,	O
tmp	*(char)
,	O
'\n'	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_key_free	(*(struct(*(char),*(char))))->(void)
(	O
k_header	*(struct(*(char),*(char)))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
}	O
i	int
=	O
osip_list_size	(*(struct(int,*(struct(*`,*`)))))->(int)
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
m_medias	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
if	O
(	O
i	int
==	O
0	int
)	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
k_key	*(struct(*(char),*(char)))
=	O
k_header	*(struct(*(char),*(char)))
;	O
else	O
{	O
sdp_media_t	struct
*	O
last_sdp_media	*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(struct(*(char),*(char)))))
=	O
(	O
sdp_media_t	struct
*	O
)	O
osip_list_get	(*(struct(int,*(struct(*`,*`)))),int)->(*(void))
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
m_medias	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
i	int
-	O
1	int
)	O
;	O
if	O
(	O
last_sdp_media	*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(struct(*(char),*(char)))))
!=	O
NULL	O
)	O
{	O
sdp_key_free	(*(struct(*(char),*(char))))->(void)
(	O
k_header	*(struct(*(char),*(char)))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
last_sdp_media	*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(struct(*(char),*(char)))))
->	O
k_key	*(struct(*(char),*(char)))
=	O
k_header	*(struct(*(char),*(char)))
;	O
}	O
if	O
(	O
crlf	*(char)
[	O
1	int
]	O
==	O
'\n'	O
)	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
crlf	*(char)
+	O
2	int
;	O
else	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
crlf	*(char)
+	O
1	int
;	O
return	O
OSIP_WF	int
;	O
}	O
static	O
int	O
sdp_message_parse_a	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp_message_t	struct
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
char	O
*	O
buf	*(char)
,	O
char	O
*	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
{	O
char	O
*	O
equal	*(char)
;	O
char	O
*	O
crlf	*(char)
;	O
char	O
*	O
tmp	*(char)
;	O
char	O
*	O
tmp_next	*(char)
;	O
int	O
i	int
;	O
sdp_attribute_t	struct
*	O
a_attribute	*(struct(*(char),*(char)))
;	O
char	O
*	O
colon	*(char)
;	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
buf	*(char)
;	O
equal	*(char)
=	O
buf	*(char)
;	O
while	O
(	O
(	O
*	O
equal	*(char)
!=	O
'='	O
)	O
&&	O
(	O
*	O
equal	*(char)
!=	O
'\0'	O
)	O
)	O
equal	*(char)
++	O
;	O
if	O
(	O
*	O
equal	*(char)
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
equal	*(char)
[	O
-	O
1	int
]	O
!=	O
'a'	O
)	O
return	O
ERR_DISCARD	int
;	O
crlf	*(char)
=	O
equal	*(char)
+	O
1	int
;	O
while	O
(	O
(	O
*	O
crlf	*(char)
!=	O
'\r'	O
)	O
&&	O
(	O
*	O
crlf	*(char)
!=	O
'\n'	O
)	O
&&	O
(	O
*	O
crlf	*(char)
!=	O
'\0'	O
)	O
)	O
crlf	*(char)
++	O
;	O
if	O
(	O
*	O
crlf	*(char)
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
crlf	*(char)
==	O
equal	*(char)
+	O
1	int
)	O
return	O
ERR_ERROR	O
;	O
tmp	*(char)
=	O
equal	*(char)
+	O
1	int
;	O
i	int
=	O
sdp_attribute_init	(*(*(struct(*(char),*(char)))))->(int)
(	O
&	O
a_attribute	*(struct(*(char),*(char)))
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
ERR_ERROR	O
;	O
colon	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
equal	*(char)
+	O
1	int
,	O
':'	O
)	O
;	O
if	O
(	O
(	O
colon	*(char)
!=	O
NULL	O
)	O
&&	O
(	O
colon	*(char)
<	O
crlf	*(char)
)	O
)	O
{	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
a_attribute	*(struct(*(char),*(char)))
->	O
a_att_field	*(char)
)	O
,	O
tmp	*(char)
,	O
':'	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_attribute_free	(*(struct(*(char),*(char))))->(void)
(	O
a_attribute	*(struct(*(char),*(char)))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	*(char)
=	O
tmp_next	*(char)
;	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
a_attribute	*(struct(*(char),*(char)))
->	O
a_att_value	*(char)
)	O
,	O
tmp	*(char)
,	O
'\r'	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
a_attribute	*(struct(*(char),*(char)))
->	O
a_att_value	*(char)
)	O
,	O
tmp	*(char)
,	O
'\n'	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_attribute_free	(*(struct(*(char),*(char))))->(void)
(	O
a_attribute	*(struct(*(char),*(char)))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
}	O
else	O
{	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
a_attribute	*(struct(*(char),*(char)))
->	O
a_att_field	*(char)
)	O
,	O
tmp	*(char)
,	O
'\r'	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
a_attribute	*(struct(*(char),*(char)))
->	O
a_att_field	*(char)
)	O
,	O
tmp	*(char)
,	O
'\n'	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_attribute_free	(*(struct(*(char),*(char))))->(void)
(	O
a_attribute	*(struct(*(char),*(char)))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
}	O
i	int
=	O
osip_list_size	(*(struct(int,*(struct(*`,*`)))))->(int)
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
m_medias	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
if	O
(	O
i	int
==	O
0	int
)	O
osip_list_add	(*(struct(int,*(struct(*`,*`)))),*(void),int)->(int)
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
a_attributes	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
a_attribute	*(struct(*(char),*(char)))
,	O
-	O
1	int
)	O
;	O
else	O
{	O
sdp_media_t	struct
*	O
last_sdp_media	*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(struct(*(char),*(char)))))
=	O
(	O
sdp_media_t	struct
*	O
)	O
osip_list_get	(*(struct(int,*(struct(*`,*`)))),int)->(*(void))
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
m_medias	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
i	int
-	O
1	int
)	O
;	O
osip_list_add	(*(struct(int,*(struct(*`,*`)))),*(void),int)->(int)
(	O
&	O
last_sdp_media	*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(struct(*(char),*(char)))))
->	O
a_attributes	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
a_attribute	*(struct(*(char),*(char)))
,	O
-	O
1	int
)	O
;	O
}	O
if	O
(	O
crlf	*(char)
[	O
1	int
]	O
==	O
'\n'	O
)	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
crlf	*(char)
+	O
2	int
;	O
else	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
crlf	*(char)
+	O
1	int
;	O
return	O
OSIP_WF	int
;	O
}	O
static	O
int	O
sdp_message_parse_m	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp_message_t	struct
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
char	O
*	O
buf	*(char)
,	O
char	O
*	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
{	O
char	O
*	O
equal	*(char)
;	O
char	O
*	O
crlf	*(char)
;	O
char	O
*	O
tmp	*(char)
;	O
char	O
*	O
tmp_next	*(char)
;	O
int	O
i	int
;	O
sdp_media_t	struct
*	O
m_header	*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(struct(*(char),*(char)))))
;	O
char	O
*	O
slash	*(char)
;	O
char	O
*	O
space	*(char)
;	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
buf	*(char)
;	O
equal	*(char)
=	O
buf	*(char)
;	O
while	O
(	O
(	O
*	O
equal	*(char)
!=	O
'='	O
)	O
&&	O
(	O
*	O
equal	*(char)
!=	O
'\0'	O
)	O
)	O
equal	*(char)
++	O
;	O
if	O
(	O
*	O
equal	*(char)
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
equal	*(char)
[	O
-	O
1	int
]	O
!=	O
'm'	O
)	O
return	O
ERR_ERROR	O
;	O
crlf	*(char)
=	O
equal	*(char)
+	O
1	int
;	O
while	O
(	O
(	O
*	O
crlf	*(char)
!=	O
'\r'	O
)	O
&&	O
(	O
*	O
crlf	*(char)
!=	O
'\n'	O
)	O
&&	O
(	O
*	O
crlf	*(char)
!=	O
'\0'	O
)	O
)	O
crlf	*(char)
++	O
;	O
if	O
(	O
*	O
crlf	*(char)
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
crlf	*(char)
==	O
equal	*(char)
+	O
1	int
)	O
return	O
ERR_ERROR	O
;	O
tmp	*(char)
=	O
equal	*(char)
+	O
1	int
;	O
i	int
=	O
sdp_media_init	(*(*(struct(*(char),*(char),*(char),*(char),struct(int,*`),*(char),struct(int,*`),struct(int,*`),struct(int,*`),*(struct`)))))->(int)
(	O
&	O
m_header	*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(struct(*(char),*(char)))))
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
ERR_ERROR	O
;	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
m_header	*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(struct(*(char),*(char)))))
->	O
m_media	*(char)
)	O
,	O
tmp	*(char)
,	O
' '	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_media_free	(*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct`)),*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)))))->(void)
(	O
m_header	*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(struct(*(char),*(char)))))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	*(char)
=	O
tmp_next	*(char)
;	O
slash	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
tmp	*(char)
,	O
'/'	O
)	O
;	O
space	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
tmp	*(char)
,	O
' '	O
)	O
;	O
if	O
(	O
space	*(char)
==	O
NULL	O
)	O
{	O
sdp_media_free	(*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct`)),*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)))))->(void)
(	O
m_header	*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(struct(*(char),*(char)))))
)	O
;	O
return	O
ERR_ERROR	O
;	O
}	O
if	O
(	O
(	O
slash	*(char)
!=	O
NULL	O
)	O
&&	O
(	O
slash	*(char)
<	O
space	*(char)
)	O
)	O
{	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
m_header	*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(struct(*(char),*(char)))))
->	O
m_port	*(char)
)	O
,	O
tmp	*(char)
,	O
'/'	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_media_free	(*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct`)),*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)))))->(void)
(	O
m_header	*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(struct(*(char),*(char)))))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	*(char)
=	O
tmp_next	*(char)
;	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
m_header	*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(struct(*(char),*(char)))))
->	O
m_number_of_port	*(char)
)	O
,	O
tmp	*(char)
,	O
' '	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_media_free	(*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct`)),*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)))))->(void)
(	O
m_header	*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(struct(*(char),*(char)))))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	*(char)
=	O
tmp_next	*(char)
;	O
}	O
else	O
{	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
m_header	*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(struct(*(char),*(char)))))
->	O
m_port	*(char)
)	O
,	O
tmp	*(char)
,	O
' '	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_media_free	(*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct`)),*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)))))->(void)
(	O
m_header	*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(struct(*(char),*(char)))))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	*(char)
=	O
tmp_next	*(char)
;	O
}	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
m_header	*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(struct(*(char),*(char)))))
->	O
m_proto	*(char)
)	O
,	O
tmp	*(char)
,	O
' '	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
m_header	*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(struct(*(char),*(char)))))
->	O
m_proto	*(char)
)	O
,	O
tmp	*(char)
,	O
'\r'	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
(	O
m_header	*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(struct(*(char),*(char)))))
->	O
m_proto	*(char)
)	O
,	O
tmp	*(char)
,	O
'\n'	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_media_free	(*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct`)),*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)))))->(void)
(	O
m_header	*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(struct(*(char),*(char)))))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
}	O
tmp	*(char)
=	O
tmp_next	*(char)
;	O
{	O
char	O
*	O
str	*(char)
;	O
int	O
more_space_before_crlf	int
;	O
space	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
tmp	*(char)
+	O
1	int
,	O
' '	O
)	O
;	O
if	O
(	O
space	*(char)
==	O
NULL	O
)	O
more_space_before_crlf	int
=	O
1	int
;	O
else	O
if	O
(	O
(	O
space	*(char)
!=	O
NULL	O
)	O
&&	O
(	O
space	*(char)
>	O
crlf	*(char)
)	O
)	O
more_space_before_crlf	int
=	O
1	int
;	O
else	O
more_space_before_crlf	int
=	O
0	int
;	O
while	O
(	O
more_space_before_crlf	int
==	O
0	int
)	O
{	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
str	*(char)
,	O
tmp	*(char)
,	O
' '	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_media_free	(*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct`)),*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)))))->(void)
(	O
m_header	*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(struct(*(char),*(char)))))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	*(char)
=	O
tmp_next	*(char)
;	O
osip_list_add	(*(struct(int,*(struct(*`,*`)))),*(void),int)->(int)
(	O
&	O
m_header	*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(struct(*(char),*(char)))))
->	O
m_payloads	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
str	*(char)
,	O
-	O
1	int
)	O
;	O
space	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
tmp	*(char)
+	O
1	int
,	O
' '	O
)	O
;	O
if	O
(	O
space	*(char)
==	O
NULL	O
)	O
more_space_before_crlf	int
=	O
1	int
;	O
else	O
if	O
(	O
(	O
space	*(char)
!=	O
NULL	O
)	O
&&	O
(	O
space	*(char)
>	O
crlf	*(char)
)	O
)	O
more_space_before_crlf	int
=	O
1	int
;	O
else	O
more_space_before_crlf	int
=	O
0	int
;	O
}	O
if	O
(	O
tmp_next	*(char)
<	O
crlf	*(char)
)	O
{	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
str	*(char)
,	O
tmp	*(char)
,	O
'\r'	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
i	int
=	O
__osip_set_next_token	(*(*(char)),*(char),int,*(*(char)))->(int)
(	O
&	O
str	*(char)
,	O
tmp	*(char)
,	O
'\n'	O
,	O
&	O
tmp_next	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_media_free	(*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct`)),*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)))))->(void)
(	O
m_header	*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(struct(*(char),*(char)))))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
osip_list_add	(*(struct(int,*(struct(*`,*`)))),*(void),int)->(int)
(	O
&	O
m_header	*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(struct(*(char),*(char)))))
->	O
m_payloads	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
str	*(char)
,	O
-	O
1	int
)	O
;	O
}	O
}	O
osip_list_add	(*(struct(int,*(struct(*`,*`)))),*(void),int)->(int)
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
m_medias	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
m_header	*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`))),*(char),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),struct(int,*(struct(*`,*`))),*(struct(*(char),*(char)))))
,	O
-	O
1	int
)	O
;	O
if	O
(	O
crlf	*(char)
[	O
1	int
]	O
==	O
'\n'	O
)	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
crlf	*(char)
+	O
2	int
;	O
else	O
*	O
next	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
crlf	*(char)
+	O
1	int
;	O
return	O
OSIP_WF	int
;	O
}	O
int	O
sdp_message_parse	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char))->(int)
(	O
sdp_message_t	struct
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
const	O
char	O
*	O
buf	*(char)
)	O
{	O
char	O
*	O
next_buf	*(char)
;	O
char	O
*	O
ptr	*(void)
;	O
int	O
i	int
;	O
ptr	*(void)
=	O
(	O
char	O
*	O
)	O
buf	*(char)
;	O
i	int
=	O
sdp_message_parse_v	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
ptr	*(void)
,	O
&	O
next_buf	*(char)
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
else	O
if	O
(	O
0	int
==	O
i	int
)	O
return	O
-	O
1	int
;	O
ptr	*(void)
=	O
next_buf	*(char)
;	O
i	int
=	O
sdp_message_parse_s	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
ptr	*(void)
,	O
&	O
next_buf	*(char)
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	*(void)
=	O
next_buf	*(char)
;	O
i	int
=	O
sdp_message_parse_o	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
ptr	*(void)
,	O
&	O
next_buf	*(char)
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
else	O
if	O
(	O
0	int
==	O
i	int
)	O
return	O
-	O
1	int
;	O
ptr	*(void)
=	O
next_buf	*(char)
;	O
if	O
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
s_name	*(char)
==	O
NULL	O
)	O
{	O
i	int
=	O
sdp_message_parse_s	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
ptr	*(void)
,	O
&	O
next_buf	*(char)
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
else	O
if	O
(	O
0	int
==	O
i	int
)	O
{	O
OSIP_TRACE	O
(	O
osip_trace	(*(char),int,enum(int,int,int,int,int,int,int,int,int),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_INFO4	O
,	O
NULL	O
,	O
"The \"s\" parameter is mandatory, but this packet does not contain any! - anyway, we don't mind about it.\n"	*(char)
)	O
)	O
;	O
}	O
ptr	*(void)
=	O
next_buf	*(char)
;	O
}	O
i	int
=	O
sdp_message_parse_i	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
ptr	*(void)
,	O
&	O
next_buf	*(char)
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	*(void)
=	O
next_buf	*(char)
;	O
i	int
=	O
sdp_message_parse_u	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
ptr	*(void)
,	O
&	O
next_buf	*(char)
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	*(void)
=	O
next_buf	*(char)
;	O
i	int
=	O
1	int
;	O
while	O
(	O
i	int
==	O
1	int
)	O
{	O
i	int
=	O
sdp_message_parse_e	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
ptr	*(void)
,	O
&	O
next_buf	*(char)
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	*(void)
=	O
next_buf	*(char)
;	O
}	O
i	int
=	O
1	int
;	O
while	O
(	O
i	int
==	O
1	int
)	O
{	O
i	int
=	O
sdp_message_parse_p	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
ptr	*(void)
,	O
&	O
next_buf	*(char)
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	*(void)
=	O
next_buf	*(char)
;	O
}	O
if	O
(	O
osip_list_size	(*(struct(int,*(struct(*`,*`)))))->(int)
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
e_emails	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
==	O
0	int
&&	O
osip_list_size	(*(struct(int,*(struct(*`,*`)))))->(int)
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
p_phones	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
==	O
0	int
)	O
{	O
OSIP_TRACE	O
(	O
osip_trace	(*(char),int,enum(int,int,int,int,int,int,int,int,int),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_INFO4	O
,	O
NULL	O
,	O
"The rfc2327 says there should be at least an email or a phone header!- anyway, we don't mind about it.\n"	*(char)
)	O
)	O
;	O
}	O
i	int
=	O
sdp_message_parse_c	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
ptr	*(void)
,	O
&	O
next_buf	*(char)
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	*(void)
=	O
next_buf	*(char)
;	O
i	int
=	O
1	int
;	O
while	O
(	O
i	int
==	O
1	int
)	O
{	O
i	int
=	O
sdp_message_parse_b	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
ptr	*(void)
,	O
&	O
next_buf	*(char)
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	*(void)
=	O
next_buf	*(char)
;	O
}	O
i	int
=	O
sdp_message_parse_t	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
ptr	*(void)
,	O
&	O
next_buf	*(char)
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
else	O
if	O
(	O
i	int
==	O
ERR_DISCARD	int
)	O
return	O
-	O
1	int
;	O
ptr	*(void)
=	O
next_buf	*(char)
;	O
if	O
(	O
*	O
ptr	*(void)
==	O
'\0'	O
||	O
(	O
*	O
ptr	*(void)
==	O
'\r'	O
)	O
||	O
(	O
*	O
ptr	*(void)
==	O
'\n'	O
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
i	int
=	O
1	int
;	O
while	O
(	O
i	int
==	O
1	int
)	O
{	O
i	int
=	O
sdp_message_parse_r	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
ptr	*(void)
,	O
&	O
next_buf	*(char)
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	*(void)
=	O
next_buf	*(char)
;	O
if	O
(	O
*	O
ptr	*(void)
==	O
'\0'	O
||	O
(	O
*	O
ptr	*(void)
==	O
'\r'	O
)	O
||	O
(	O
*	O
ptr	*(void)
==	O
'\n'	O
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
}	O
{	O
int	O
more_t_header	int
=	O
1	int
;	O
i	int
=	O
sdp_message_parse_t	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
ptr	*(void)
,	O
&	O
next_buf	*(char)
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	*(void)
=	O
next_buf	*(char)
;	O
if	O
(	O
*	O
ptr	*(void)
==	O
'\0'	O
||	O
(	O
*	O
ptr	*(void)
==	O
'\r'	O
)	O
||	O
(	O
*	O
ptr	*(void)
==	O
'\n'	O
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
while	O
(	O
more_t_header	int
==	O
1	int
)	O
{	O
i	int
=	O
1	int
;	O
while	O
(	O
i	int
==	O
1	int
)	O
{	O
i	int
=	O
sdp_message_parse_r	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
ptr	*(void)
,	O
&	O
next_buf	*(char)
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	*(void)
=	O
next_buf	*(char)
;	O
if	O
(	O
*	O
ptr	*(void)
==	O
'\0'	O
||	O
(	O
*	O
ptr	*(void)
==	O
'\r'	O
)	O
||	O
(	O
*	O
ptr	*(void)
==	O
'\n'	O
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
}	O
i	int
=	O
sdp_message_parse_t	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
ptr	*(void)
,	O
&	O
next_buf	*(char)
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
else	O
if	O
(	O
i	int
==	O
ERR_DISCARD	int
)	O
more_t_header	int
=	O
0	int
;	O
else	O
more_t_header	int
=	O
1	int
;	O
ptr	*(void)
=	O
next_buf	*(char)
;	O
if	O
(	O
*	O
ptr	*(void)
==	O
'\0'	O
||	O
(	O
*	O
ptr	*(void)
==	O
'\r'	O
)	O
||	O
(	O
*	O
ptr	*(void)
==	O
'\n'	O
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
}	O
}	O
i	int
=	O
sdp_message_parse_z	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
ptr	*(void)
,	O
&	O
next_buf	*(char)
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	*(void)
=	O
next_buf	*(char)
;	O
if	O
(	O
*	O
ptr	*(void)
==	O
'\0'	O
||	O
(	O
*	O
ptr	*(void)
==	O
'\r'	O
)	O
||	O
(	O
*	O
ptr	*(void)
==	O
'\n'	O
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
i	int
=	O
sdp_message_parse_k	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
ptr	*(void)
,	O
&	O
next_buf	*(char)
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	*(void)
=	O
next_buf	*(char)
;	O
if	O
(	O
*	O
ptr	*(void)
==	O
'\0'	O
||	O
(	O
*	O
ptr	*(void)
==	O
'\r'	O
)	O
||	O
(	O
*	O
ptr	*(void)
==	O
'\n'	O
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
i	int
=	O
1	int
;	O
while	O
(	O
i	int
==	O
1	int
)	O
{	O
i	int
=	O
sdp_message_parse_a	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
ptr	*(void)
,	O
&	O
next_buf	*(char)
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	*(void)
=	O
next_buf	*(char)
;	O
if	O
(	O
*	O
ptr	*(void)
==	O
'\0'	O
||	O
(	O
*	O
ptr	*(void)
==	O
'\r'	O
)	O
||	O
(	O
*	O
ptr	*(void)
==	O
'\n'	O
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
}	O
{	O
int	O
more_m_header	int
=	O
1	int
;	O
while	O
(	O
more_m_header	int
==	O
1	int
)	O
{	O
more_m_header	int
=	O
sdp_message_parse_m	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
ptr	*(void)
,	O
&	O
next_buf	*(char)
)	O
;	O
if	O
(	O
more_m_header	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	*(void)
=	O
next_buf	*(char)
;	O
if	O
(	O
*	O
ptr	*(void)
==	O
'\0'	O
||	O
(	O
*	O
ptr	*(void)
==	O
'\r'	O
)	O
||	O
(	O
*	O
ptr	*(void)
==	O
'\n'	O
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
i	int
=	O
sdp_message_parse_i	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
ptr	*(void)
,	O
&	O
next_buf	*(char)
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	*(void)
=	O
next_buf	*(char)
;	O
if	O
(	O
*	O
ptr	*(void)
==	O
'\0'	O
||	O
(	O
*	O
ptr	*(void)
==	O
'\r'	O
)	O
||	O
(	O
*	O
ptr	*(void)
==	O
'\n'	O
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
i	int
=	O
1	int
;	O
while	O
(	O
i	int
==	O
1	int
)	O
{	O
i	int
=	O
sdp_message_parse_c	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
ptr	*(void)
,	O
&	O
next_buf	*(char)
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	*(void)
=	O
next_buf	*(char)
;	O
if	O
(	O
*	O
ptr	*(void)
==	O
'\0'	O
||	O
(	O
*	O
ptr	*(void)
==	O
'\r'	O
)	O
||	O
(	O
*	O
ptr	*(void)
==	O
'\n'	O
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
}	O
i	int
=	O
1	int
;	O
while	O
(	O
i	int
==	O
1	int
)	O
{	O
i	int
=	O
sdp_message_parse_b	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
ptr	*(void)
,	O
&	O
next_buf	*(char)
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	*(void)
=	O
next_buf	*(char)
;	O
if	O
(	O
*	O
ptr	*(void)
==	O
'\0'	O
||	O
(	O
*	O
ptr	*(void)
==	O
'\r'	O
)	O
||	O
(	O
*	O
ptr	*(void)
==	O
'\n'	O
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
}	O
i	int
=	O
sdp_message_parse_k	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
ptr	*(void)
,	O
&	O
next_buf	*(char)
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	*(void)
=	O
next_buf	*(char)
;	O
if	O
(	O
*	O
ptr	*(void)
==	O
'\0'	O
||	O
(	O
*	O
ptr	*(void)
==	O
'\r'	O
)	O
||	O
(	O
*	O
ptr	*(void)
==	O
'\n'	O
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
i	int
=	O
1	int
;	O
while	O
(	O
i	int
==	O
1	int
)	O
{	O
i	int
=	O
sdp_message_parse_a	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char),*(*(char)))->(int)
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
ptr	*(void)
,	O
&	O
next_buf	*(char)
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	*(void)
=	O
next_buf	*(char)
;	O
if	O
(	O
*	O
ptr	*(void)
==	O
'\0'	O
||	O
(	O
*	O
ptr	*(void)
==	O
'\r'	O
)	O
||	O
(	O
*	O
ptr	*(void)
==	O
'\n'	O
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
}	O
}	O
}	O
return	O
OSIP_SUCCESS	int
;	O
}	O
static	O
int	O
sdp_append_connection	(*(*(char)),*(int),*(char),*(struct(*(char),*(char),*(char),*(char),*(char))),*(*(char)))->(int)
(	O
char	O
*	O
*	O
string	*(char)
,	O
int	O
*	O
size	long
,	O
char	O
*	O
tmp	*(char)
,	O
sdp_connection_t	struct
*	O
conn	*(struct(*(char),*(char),*(char),*(char),*(char)))
,	O
char	O
*	O
*	O
next_tmp	*(*(char))
)	O
{	O
if	O
(	O
conn	*(struct(*(char),*(char),*(char),*(char),*(char)))
->	O
c_nettype	*(char)
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
conn	*(struct(*(char),*(char),*(char),*(char),*(char)))
->	O
c_addrtype	*(char)
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
conn	*(struct(*(char),*(char),*(char),*(char),*(char)))
->	O
c_addr	*(char)
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
"c="	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
conn	*(struct(*(char),*(char),*(char),*(char),*(char)))
->	O
c_nettype	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
" "	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
conn	*(struct(*(char),*(char),*(char),*(char),*(char)))
->	O
c_addrtype	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
" "	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
conn	*(struct(*(char),*(char),*(char),*(char),*(char)))
->	O
c_addr	*(char)
)	O
;	O
if	O
(	O
conn	*(struct(*(char),*(char),*(char),*(char),*(char)))
->	O
c_addr_multicast_ttl	*(char)
!=	O
NULL	O
)	O
{	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
"/"	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
conn	*(struct(*(char),*(char),*(char),*(char),*(char)))
->	O
c_addr_multicast_ttl	*(char)
)	O
;	O
}	O
if	O
(	O
conn	*(struct(*(char),*(char),*(char),*(char),*(char)))
->	O
c_addr_multicast_int	*(char)
!=	O
NULL	O
)	O
{	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
"/"	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
conn	*(struct(*(char),*(char),*(char),*(char),*(char)))
->	O
c_addr_multicast_int	*(char)
)	O
;	O
}	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
OSIP_CRLF	*(char)
)	O
;	O
*	O
next_tmp	*(*(char))
=	O
tmp	*(char)
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
static	O
int	O
sdp_append_bandwidth	(*(*(char)),*(int),*(char),*(struct(*(char),*(char))),*(*(char)))->(int)
(	O
char	O
*	O
*	O
string	*(char)
,	O
int	O
*	O
size	long
,	O
char	O
*	O
tmp	*(char)
,	O
sdp_bandwidth_t	struct
*	O
bandwidth	*(char)
,	O
char	O
*	O
*	O
next_tmp	*(*(char))
)	O
{	O
if	O
(	O
bandwidth	*(char)
->	O
b_bwtype	*(char)
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
bandwidth	*(char)
->	O
b_bandwidth	*(char)
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
"b="	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
bandwidth	*(char)
->	O
b_bwtype	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
":"	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
bandwidth	*(char)
->	O
b_bandwidth	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
OSIP_CRLF	*(char)
)	O
;	O
*	O
next_tmp	*(*(char))
=	O
tmp	*(char)
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
static	O
int	O
sdp_append_time_descr	(*(*(char)),*(int),*(char),*(struct(*(char),*(char),struct(int,*(struct`)))),*(*(char)))->(int)
(	O
char	O
*	O
*	O
string	*(char)
,	O
int	O
*	O
size	long
,	O
char	O
*	O
tmp	*(char)
,	O
sdp_time_descr_t	struct
*	O
time_descr	*(struct(*(char),*(char),struct(int,*(struct(*`,*`)))))
,	O
char	O
*	O
*	O
next_tmp	*(*(char))
)	O
{	O
int	O
pos	int
;	O
if	O
(	O
time_descr	*(struct(*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
t_start_time	*(char)
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
time_descr	*(struct(*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
t_stop_time	*(char)
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
"t="	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
time_descr	*(struct(*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
t_start_time	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
" "	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
time_descr	*(struct(*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
t_stop_time	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
OSIP_CRLF	*(char)
)	O
;	O
pos	int
=	O
0	int
;	O
while	O
(	O
!	O
osip_list_eol	(*(struct(int,*(struct(*`,*`)))),int)->(int)
(	O
&	O
time_descr	*(struct(*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
r_repeats	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
pos	int
)	O
)	O
{	O
char	O
*	O
str	*(char)
=	O
(	O
char	O
*	O
)	O
osip_list_get	(*(struct(int,*(struct(*`,*`)))),int)->(*(void))
(	O
&	O
time_descr	*(struct(*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
r_repeats	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
pos	int
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
"r="	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
str	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
OSIP_CRLF	*(char)
)	O
;	O
pos	int
++	O
;	O
}	O
*	O
next_tmp	*(*(char))
=	O
tmp	*(char)
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
static	O
int	O
sdp_append_key	(*(*(char)),*(int),*(char),*(struct(*(char),*(char))),*(*(char)))->(int)
(	O
char	O
*	O
*	O
string	*(char)
,	O
int	O
*	O
size	long
,	O
char	O
*	O
tmp	*(char)
,	O
sdp_key_t	struct
*	O
key	*(struct(*(char),*(char)))
,	O
char	O
*	O
*	O
next_tmp	*(*(char))
)	O
{	O
if	O
(	O
key	*(struct(*(char),*(char)))
->	O
k_keytype	*(char)
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
"k="	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
key	*(struct(*(char),*(char)))
->	O
k_keytype	*(char)
)	O
;	O
if	O
(	O
key	*(struct(*(char),*(char)))
->	O
k_keydata	*(char)
!=	O
NULL	O
)	O
{	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
":"	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
key	*(struct(*(char),*(char)))
->	O
k_keydata	*(char)
)	O
;	O
}	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
OSIP_CRLF	*(char)
)	O
;	O
*	O
next_tmp	*(*(char))
=	O
tmp	*(char)
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
static	O
int	O
sdp_append_attribute	(*(*(char)),*(int),*(char),*(struct(*(char),*(char))),*(*(char)))->(int)
(	O
char	O
*	O
*	O
string	*(char)
,	O
int	O
*	O
size	long
,	O
char	O
*	O
tmp	*(char)
,	O
sdp_attribute_t	struct
*	O
attribute	*(struct(*(char),*(char)))
,	O
char	O
*	O
*	O
next_tmp	*(*(char))
)	O
{	O
if	O
(	O
attribute	*(struct(*(char),*(char)))
->	O
a_att_field	*(char)
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
"a="	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
attribute	*(struct(*(char),*(char)))
->	O
a_att_field	*(char)
)	O
;	O
if	O
(	O
attribute	*(struct(*(char),*(char)))
->	O
a_att_value	*(char)
!=	O
NULL	O
)	O
{	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
":"	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
attribute	*(struct(*(char),*(char)))
->	O
a_att_value	*(char)
)	O
;	O
}	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
OSIP_CRLF	*(char)
)	O
;	O
*	O
next_tmp	*(*(char))
=	O
tmp	*(char)
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
static	O
int	O
sdp_append_media	(*(*(char)),*(int),*(char),*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct`)),*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)))),*(*(char)))->(int)
(	O
char	O
*	O
*	O
string	*(char)
,	O
int	O
*	O
size	long
,	O
char	O
*	O
tmp	*(char)
,	O
sdp_media_t	struct
*	O
media	*(char)
,	O
char	O
*	O
*	O
next_tmp	*(*(char))
)	O
{	O
int	O
pos	int
;	O
if	O
(	O
media	*(char)
->	O
m_media	*(char)
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
media	*(char)
->	O
m_port	*(char)
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
media	*(char)
->	O
m_proto	*(char)
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
"m="	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
media	*(char)
->	O
m_media	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
" "	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
media	*(char)
->	O
m_port	*(char)
)	O
;	O
if	O
(	O
media	*(char)
->	O
m_number_of_port	*(char)
!=	O
NULL	O
)	O
{	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
"/"	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
media	*(char)
->	O
m_number_of_port	*(char)
)	O
;	O
}	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
" "	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
media	*(char)
->	O
m_proto	*(char)
)	O
;	O
pos	int
=	O
0	int
;	O
while	O
(	O
!	O
osip_list_eol	(*(struct(int,*(struct(*`,*`)))),int)->(int)
(	O
&	O
media	*(char)
->	O
m_payloads	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
pos	int
)	O
)	O
{	O
char	O
*	O
str	*(char)
=	O
(	O
char	O
*	O
)	O
osip_list_get	(*(struct(int,*(struct(*`,*`)))),int)->(*(void))
(	O
&	O
media	*(char)
->	O
m_payloads	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
pos	int
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
" "	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
str	*(char)
)	O
;	O
pos	int
++	O
;	O
}	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
OSIP_CRLF	*(char)
)	O
;	O
if	O
(	O
media	*(char)
->	O
i_info	*(char)
!=	O
NULL	O
)	O
{	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
"i="	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
media	*(char)
->	O
i_info	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
OSIP_CRLF	*(char)
)	O
;	O
}	O
pos	int
=	O
0	int
;	O
while	O
(	O
!	O
osip_list_eol	(*(struct(int,*(struct(*`,*`)))),int)->(int)
(	O
&	O
media	*(char)
->	O
c_connections	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
pos	int
)	O
)	O
{	O
sdp_connection_t	struct
*	O
conn	*(struct(*(char),*(char),*(char),*(char),*(char)))
=	O
(	O
sdp_connection_t	struct
*	O
)	O
osip_list_get	(*(struct(int,*(struct(*`,*`)))),int)->(*(void))
(	O
&	O
media	*(char)
->	O
c_connections	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
pos	int
)	O
;	O
char	O
*	O
next_tmp2	*(char)
;	O
int	O
i	int
;	O
i	int
=	O
sdp_append_connection	(*(*(char)),*(int),*(char),*(struct(*(char),*(char),*(char),*(char),*(char))),*(*(char)))->(int)
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
conn	*(struct(*(char),*(char),*(char),*(char),*(char)))
,	O
&	O
next_tmp2	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
-	O
1	int
;	O
tmp	*(char)
=	O
next_tmp2	*(char)
;	O
pos	int
++	O
;	O
}	O
pos	int
=	O
0	int
;	O
while	O
(	O
!	O
osip_list_eol	(*(struct(int,*(struct(*`,*`)))),int)->(int)
(	O
&	O
media	*(char)
->	O
b_bandwidths	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
pos	int
)	O
)	O
{	O
sdp_bandwidth_t	struct
*	O
band	*(struct(*(char),*(char)))
=	O
(	O
sdp_bandwidth_t	struct
*	O
)	O
osip_list_get	(*(struct(int,*(struct(*`,*`)))),int)->(*(void))
(	O
&	O
media	*(char)
->	O
b_bandwidths	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
pos	int
)	O
;	O
char	O
*	O
next_tmp2	*(char)
;	O
int	O
i	int
;	O
i	int
=	O
sdp_append_bandwidth	(*(*(char)),*(int),*(char),*(struct(*(char),*(char))),*(*(char)))->(int)
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
band	*(struct(*(char),*(char)))
,	O
&	O
next_tmp2	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
-	O
1	int
;	O
tmp	*(char)
=	O
next_tmp2	*(char)
;	O
pos	int
++	O
;	O
}	O
if	O
(	O
media	*(char)
->	O
k_key	*(struct(*(char),*(char)))
!=	O
NULL	O
)	O
{	O
char	O
*	O
next_tmp2	*(char)
;	O
int	O
i	int
;	O
i	int
=	O
sdp_append_key	(*(*(char)),*(int),*(char),*(struct(*(char),*(char))),*(*(char)))->(int)
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
media	*(char)
->	O
k_key	*(struct(*(char),*(char)))
,	O
&	O
next_tmp2	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
-	O
1	int
;	O
tmp	*(char)
=	O
next_tmp2	*(char)
;	O
}	O
pos	int
=	O
0	int
;	O
while	O
(	O
!	O
osip_list_eol	(*(struct(int,*(struct(*`,*`)))),int)->(int)
(	O
&	O
media	*(char)
->	O
a_attributes	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
pos	int
)	O
)	O
{	O
sdp_attribute_t	struct
*	O
attr	*(struct(*(char),*(char)))
=	O
(	O
sdp_attribute_t	struct
*	O
)	O
osip_list_get	(*(struct(int,*(struct(*`,*`)))),int)->(*(void))
(	O
&	O
media	*(char)
->	O
a_attributes	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
pos	int
)	O
;	O
char	O
*	O
next_tmp2	*(char)
;	O
int	O
i	int
;	O
i	int
=	O
sdp_append_attribute	(*(*(char)),*(int),*(char),*(struct(*(char),*(char))),*(*(char)))->(int)
(	O
string	*(char)
,	O
size	long
,	O
tmp	*(char)
,	O
attr	*(struct(*(char),*(char)))
,	O
&	O
next_tmp2	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
-	O
1	int
;	O
tmp	*(char)
=	O
next_tmp2	*(char)
;	O
pos	int
++	O
;	O
}	O
*	O
next_tmp	*(*(char))
=	O
tmp	*(char)
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
sdp_message_to_str	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(*(char)))->(int)
(	O
sdp_message_t	struct
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
char	O
*	O
*	O
dest	*(*(char))
)	O
{	O
int	O
size	long
;	O
int	O
pos	int
;	O
char	O
*	O
tmp	*(char)
;	O
char	O
*	O
string	*(char)
;	O
*	O
dest	*(*(char))
=	O
NULL	O
;	O
if	O
(	O
!	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
||	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
v_version	*(char)
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
o_username	*(char)
==	O
NULL	O
||	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
o_sess_id	*(char)
==	O
NULL	O
||	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
o_sess_version	*(char)
==	O
NULL	O
||	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
o_nettype	*(char)
==	O
NULL	O
||	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
o_addrtype	*(char)
==	O
NULL	O
||	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
o_addr	*(char)
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
size	long
=	O
BODY_MESSAGE_MAX_SIZE	int
;	O
tmp	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
size	long
)	O
;	O
if	O
(	O
tmp	*(char)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
string	*(char)
=	O
tmp	*(char)
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
"v="	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
v_version	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
OSIP_CRLF	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
"o="	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
o_username	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
" "	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
o_sess_id	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
" "	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
o_sess_version	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
" "	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
o_nettype	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
" "	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
o_addrtype	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
" "	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
o_addr	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
OSIP_CRLF	*(char)
)	O
;	O
if	O
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
s_name	*(char)
!=	O
NULL	O
)	O
{	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
"s="	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
s_name	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
OSIP_CRLF	*(char)
)	O
;	O
}	O
if	O
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
i_info	*(char)
!=	O
NULL	O
)	O
{	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
"i="	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
i_info	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
OSIP_CRLF	*(char)
)	O
;	O
}	O
if	O
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
u_uri	*(char)
!=	O
NULL	O
)	O
{	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
"u="	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
u_uri	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
OSIP_CRLF	*(char)
)	O
;	O
}	O
pos	int
=	O
0	int
;	O
while	O
(	O
!	O
osip_list_eol	(*(struct(int,*(struct(*`,*`)))),int)->(int)
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
e_emails	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
pos	int
)	O
)	O
{	O
char	O
*	O
email	*(char)
=	O
(	O
char	O
*	O
)	O
osip_list_get	(*(struct(int,*(struct(*`,*`)))),int)->(*(void))
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
e_emails	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
pos	int
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
"e="	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
email	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
OSIP_CRLF	*(char)
)	O
;	O
pos	int
++	O
;	O
}	O
pos	int
=	O
0	int
;	O
while	O
(	O
!	O
osip_list_eol	(*(struct(int,*(struct(*`,*`)))),int)->(int)
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
p_phones	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
pos	int
)	O
)	O
{	O
char	O
*	O
phone	*(char)
=	O
(	O
char	O
*	O
)	O
osip_list_get	(*(struct(int,*(struct(*`,*`)))),int)->(*(void))
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
p_phones	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
pos	int
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
"p="	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
phone	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
OSIP_CRLF	*(char)
)	O
;	O
pos	int
++	O
;	O
}	O
if	O
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
c_connection	*(struct(*(char),*(char),*(char),*(char),*(char)))
!=	O
NULL	O
)	O
{	O
char	O
*	O
next_tmp	*(*(char))
;	O
int	O
i	int
;	O
i	int
=	O
sdp_append_connection	(*(*(char)),*(int),*(char),*(struct(*(char),*(char),*(char),*(char),*(char))),*(*(char)))->(int)
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
c_connection	*(struct(*(char),*(char),*(char),*(char),*(char)))
,	O
&	O
next_tmp	*(*(char))
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_free	O
(	O
string	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	*(char)
=	O
next_tmp	*(*(char))
;	O
}	O
pos	int
=	O
0	int
;	O
while	O
(	O
!	O
osip_list_eol	(*(struct(int,*(struct(*`,*`)))),int)->(int)
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
b_bandwidths	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
pos	int
)	O
)	O
{	O
sdp_bandwidth_t	struct
*	O
header	*(*(struct(*(char),*(char))))
=	O
(	O
sdp_bandwidth_t	struct
*	O
)	O
osip_list_get	(*(struct(int,*(struct(*`,*`)))),int)->(*(void))
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
b_bandwidths	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
pos	int
)	O
;	O
char	O
*	O
next_tmp	*(*(char))
;	O
int	O
i	int
;	O
i	int
=	O
sdp_append_bandwidth	(*(*(char)),*(int),*(char),*(struct(*(char),*(char))),*(*(char)))->(int)
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
header	*(*(struct(*(char),*(char))))
,	O
&	O
next_tmp	*(*(char))
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_free	O
(	O
string	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	*(char)
=	O
next_tmp	*(*(char))
;	O
pos	int
++	O
;	O
}	O
pos	int
=	O
0	int
;	O
while	O
(	O
!	O
osip_list_eol	(*(struct(int,*(struct(*`,*`)))),int)->(int)
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
t_descrs	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
pos	int
)	O
)	O
{	O
sdp_time_descr_t	struct
*	O
header	*(*(struct(*(char),*(char))))
=	O
(	O
sdp_time_descr_t	struct
*	O
)	O
osip_list_get	(*(struct(int,*(struct(*`,*`)))),int)->(*(void))
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
t_descrs	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
pos	int
)	O
;	O
char	O
*	O
next_tmp	*(*(char))
;	O
int	O
i	int
;	O
i	int
=	O
sdp_append_time_descr	(*(*(char)),*(int),*(char),*(struct(*(char),*(char),struct(int,*(struct`)))),*(*(char)))->(int)
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
header	*(*(struct(*(char),*(char))))
,	O
&	O
next_tmp	*(*(char))
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_free	O
(	O
string	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	*(char)
=	O
next_tmp	*(*(char))
;	O
pos	int
++	O
;	O
}	O
if	O
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
z_adjustments	*(char)
!=	O
NULL	O
)	O
{	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
"z="	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
z_adjustments	*(char)
)	O
;	O
tmp	*(char)
=	O
__osip_sdp_append_string	(*(*(char)),*(int),*(char),*(char))->(*(char))
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
OSIP_CRLF	*(char)
)	O
;	O
}	O
if	O
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
k_key	*(struct(*(char),*(char)))
!=	O
NULL	O
)	O
{	O
char	O
*	O
next_tmp	*(*(char))
;	O
int	O
i	int
;	O
i	int
=	O
sdp_append_key	(*(*(char)),*(int),*(char),*(struct(*(char),*(char))),*(*(char)))->(int)
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
k_key	*(struct(*(char),*(char)))
,	O
&	O
next_tmp	*(*(char))
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_free	O
(	O
string	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	*(char)
=	O
next_tmp	*(*(char))
;	O
}	O
pos	int
=	O
0	int
;	O
while	O
(	O
!	O
osip_list_eol	(*(struct(int,*(struct(*`,*`)))),int)->(int)
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
a_attributes	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
pos	int
)	O
)	O
{	O
sdp_attribute_t	struct
*	O
header	*(*(struct(*(char),*(char))))
=	O
(	O
sdp_attribute_t	struct
*	O
)	O
osip_list_get	(*(struct(int,*(struct(*`,*`)))),int)->(*(void))
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
a_attributes	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
pos	int
)	O
;	O
char	O
*	O
next_tmp	*(*(char))
;	O
int	O
i	int
;	O
i	int
=	O
sdp_append_attribute	(*(*(char)),*(int),*(char),*(struct(*(char),*(char))),*(*(char)))->(int)
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
header	*(*(struct(*(char),*(char))))
,	O
&	O
next_tmp	*(*(char))
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_free	O
(	O
string	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	*(char)
=	O
next_tmp	*(*(char))
;	O
pos	int
++	O
;	O
}	O
pos	int
=	O
0	int
;	O
while	O
(	O
!	O
osip_list_eol	(*(struct(int,*(struct(*`,*`)))),int)->(int)
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
m_medias	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
pos	int
)	O
)	O
{	O
sdp_media_t	struct
*	O
header	*(*(struct(*(char),*(char))))
=	O
(	O
sdp_media_t	struct
*	O
)	O
osip_list_get	(*(struct(int,*(struct(*`,*`)))),int)->(*(void))
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
m_medias	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
pos	int
)	O
;	O
char	O
*	O
next_tmp	*(*(char))
;	O
int	O
i	int
;	O
i	int
=	O
sdp_append_media	(*(*(char)),*(int),*(char),*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct`)),*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)))),*(*(char)))->(int)
(	O
&	O
string	*(char)
,	O
&	O
size	long
,	O
tmp	*(char)
,	O
header	*(*(struct(*(char),*(char))))
,	O
&	O
next_tmp	*(*(char))
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_free	O
(	O
string	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	*(char)
=	O
next_tmp	*(*(char))
;	O
pos	int
++	O
;	O
}	O
*	O
dest	*(*(char))
=	O
string	*(char)
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
sdp_message_free	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))->(void)
(	O
sdp_message_t	struct
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
{	O
if	O
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
==	O
NULL	O
)	O
return	O
;	O
osip_free	O
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
v_version	*(char)
)	O
;	O
osip_free	O
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
o_username	*(char)
)	O
;	O
osip_free	O
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
o_sess_id	*(char)
)	O
;	O
osip_free	O
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
o_sess_version	*(char)
)	O
;	O
osip_free	O
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
o_nettype	*(char)
)	O
;	O
osip_free	O
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
o_addrtype	*(char)
)	O
;	O
osip_free	O
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
o_addr	*(char)
)	O
;	O
osip_free	O
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
s_name	*(char)
)	O
;	O
osip_free	O
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
i_info	*(char)
)	O
;	O
osip_free	O
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
u_uri	*(char)
)	O
;	O
osip_list_ofchar_free	(*(struct(int,*(struct(*`,*`)))))->(void)
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
e_emails	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
osip_list_ofchar_free	(*(struct(int,*(struct(*`,*`)))))->(void)
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
p_phones	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
sdp_connection_free	(*(struct(*(char),*(char),*(char),*(char),*(char))))->(void)
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
c_connection	*(struct(*(char),*(char),*(char),*(char),*(char)))
)	O
;	O
osip_list_special_free	(*(struct(int,*(struct(*`,*`)))),*((*(void))->(void)))->(void)
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
b_bandwidths	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
&	O
sdp_bandwidth_free	(*(struct(*(char),*(char))))->(void)
)	O
;	O
osip_list_special_free	(*(struct(int,*(struct(*`,*`)))),*((*(void))->(void)))->(void)
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
t_descrs	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
&	O
sdp_time_descr_free	(*(struct(*(char),*(char),struct(int,*(struct`)))))->(void)
)	O
;	O
osip_free	O
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
z_adjustments	*(char)
)	O
;	O
sdp_key_free	(*(struct(*(char),*(char))))->(void)
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
k_key	*(struct(*(char),*(char)))
)	O
;	O
osip_list_special_free	(*(struct(int,*(struct(*`,*`)))),*((*(void))->(void)))->(void)
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
a_attributes	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
&	O
sdp_attribute_free	(*(struct(*(char),*(char))))->(void)
)	O
;	O
osip_list_special_free	(*(struct(int,*(struct(*`,*`)))),*((*(void))->(void)))->(void)
(	O
&	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
->	O
m_medias	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
&	O
sdp_media_free	(*(struct(*(char),*(char),*(char),*(char),struct(int,*(struct`)),*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)))))->(void)
)	O
;	O
osip_free	O
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
)	O
;	O
}	O
int	O
sdp_message_clone	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*`),struct(int,*`),*(struct`),struct(int,*`),struct(int,*`),*(char),*(struct`),struct(int,*`),struct(int,*`)))))->(int)
(	O
sdp_message_t	struct
*	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
sdp_message_t	struct
*	O
*	O
dest	*(*(char))
)	O
{	O
int	O
i	int
;	O
char	O
*	O
body	*(char)
;	O
i	int
=	O
sdp_message_init	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*`),struct(int,*`),*(struct`),struct(int,*`),struct(int,*`),*(char),*(struct`),struct(int,*`),struct(int,*`)))))->(int)
(	O
dest	*(*(char))
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
-	O
1	int
;	O
i	int
=	O
sdp_message_to_str	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(*(char)))->(int)
(	O
sdp	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))
,	O
&	O
body	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
goto	O
error_sc1	O
;	O
i	int
=	O
sdp_message_parse	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))),*(char))->(int)
(	O
*	O
dest	*(*(char))
,	O
body	*(char)
)	O
;	O
osip_free	O
(	O
body	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
goto	O
error_sc1	O
;	O
return	O
OSIP_SUCCESS	int
;	O
error_sc1	O
:	O
sdp_message_free	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,*`,*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),*(char),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)))))->(void)
(	O
*	O
dest	*(*(char))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
