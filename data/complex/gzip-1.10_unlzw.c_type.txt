typedef	O
unsigned	O
char	O
char_type	char
;	O
typedef	O
long	O
code_int	long
;	O
typedef	O
unsigned	O
long	O
count_int	long
;	O
typedef	O
unsigned	O
short	O
count_short	short
;	O
typedef	O
unsigned	O
long	O
cmp_code_int	long
;	O
union	O
bytes	union(long,struct(int))
{	O
long	O
word	long
;	O
struct	O
{	O
int	O
dummy	int
;	O
}	O
bytes	union(long,struct(int))
;	O
}	O
;	O
int	O
block_mode	int
=	O
BLOCK_MODE	int
;	O
int	O
unlzw	(int,int)->(int)
(	O
in	int
,	O
out	int
)	O
int	O
in	int
,	O
out	int
;	O
{	O
char_type	char
*	O
stackp	*(char)
;	O
code_int	long
code	long
;	O
int	O
finchar	int
;	O
code_int	long
oldcode	long
;	O
code_int	long
incode	long
;	O
long	O
inbits	long
;	O
long	O
posbits	long
;	O
int	O
outpos	int
;	O
unsigned	O
bitmask	int
;	O
code_int	long
free_ent	long
;	O
code_int	long
maxcode	long
;	O
code_int	long
maxmaxcode	long
;	O
int	O
n_bits	int
;	O
int	O
rsize	int
;	O
maxbits	int
=	O
get_byte	O
(	O
)	O
;	O
block_mode	int
=	O
maxbits	int
&	O
BLOCK_MODE	int
;	O
if	O
(	O
(	O
maxbits	int
&	O
LZW_RESERVED	int
)	O
!=	O
0	int
)	O
{	O
WARN	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\n%s: %s: warning, unknown flags 0x%x\n"	*(char)
,	O
program_name	*(char)
,	O
ifname	array(char)
,	O
(	O
unsigned	O
int	O
)	O
maxbits	int
&	O
LZW_RESERVED	int
)	O
)	O
;	O
}	O
maxbits	int
&=	O
BIT_MASK	int
;	O
maxmaxcode	long
=	O
MAXCODE	O
(	O
maxbits	int
)	O
;	O
if	O
(	O
maxbits	int
>	O
BITS	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\n%s: %s: compressed with %d bits, can only handle %d bits\n"	*(char)
,	O
program_name	*(char)
,	O
ifname	array(char)
,	O
maxbits	int
,	O
BITS	int
)	O
;	O
exit_code	int
=	O
ERROR	int
;	O
return	O
ERROR	int
;	O
}	O
rsize	int
=	O
insize	int
;	O
maxcode	long
=	O
MAXCODE	O
(	O
n_bits	int
=	O
INIT_BITS	int
)	O
-	O
1	int
;	O
bitmask	int
=	O
(	O
1	int
<<	O
n_bits	int
)	O
-	O
1	int
;	O
oldcode	long
=	O
-	O
1	int
;	O
finchar	int
=	O
0	int
;	O
outpos	int
=	O
0	int
;	O
posbits	long
=	O
inptr	int
<<	O
3	int
;	O
free_ent	long
=	O
(	O
(	O
block_mode	int
)	O
?	O
FIRST	O
:	O
256	int
)	O
;	O
clear_tab_prefixof	O
(	O
)	O
;	O
for	O
(	O
code	long
=	O
255	int
;	O
code	long
>=	O
0	int
;	O
--	O
code	long
)	O
{	O
tab_suffixof	O
(	O
code	long
)	O
=	O
(	O
char_type	char
)	O
code	long
;	O
}	O
do	O
{	O
int	O
i	int
;	O
int	O
e	int
;	O
int	O
o	int
;	O
resetbuf	O
:	O
o	int
=	O
posbits	long
>>	O
3	int
;	O
e	int
=	O
o	int
<=	O
insize	int
?	O
insize	int
-	O
o	int
:	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
e	int
;	O
++	O
i	int
)	O
{	O
inbuf	array(char)
[	O
i	int
]	O
=	O
inbuf	array(char)
[	O
i	int
+	O
o	int
]	O
;	O
}	O
insize	int
=	O
e	int
;	O
posbits	long
=	O
0	int
;	O
if	O
(	O
insize	int
<	O
INBUF_EXTRA	int
)	O
{	O
rsize	int
=	O
read_buffer	(int,*(void),int)->(int)
(	O
in	int
,	O
(	O
char	O
*	O
)	O
inbuf	array(char)
+	O
insize	int
,	O
INBUFSIZ	int
)	O
;	O
if	O
(	O
rsize	int
==	O
-	O
1	int
)	O
{	O
read_error	()->(void)
(	O
)	O
;	O
}	O
insize	int
+=	O
rsize	int
;	O
bytes_in	long
+=	O
(	O
off_t	long
)	O
rsize	int
;	O
}	O
inbits	long
=	O
(	O
(	O
rsize	int
!=	O
0	int
)	O
?	O
(	O
(	O
long	O
)	O
insize	int
-	O
insize	int
%	O
n_bits	int
)	O
<<	O
3	int
:	O
(	O
(	O
long	O
)	O
insize	int
<<	O
3	int
)	O
-	O
(	O
n_bits	int
-	O
1	int
)	O
)	O
;	O
while	O
(	O
inbits	long
>	O
posbits	long
)	O
{	O
if	O
(	O
free_ent	long
>	O
maxcode	long
)	O
{	O
posbits	long
=	O
(	O
(	O
posbits	long
-	O
1	int
)	O
+	O
(	O
(	O
n_bits	int
<<	O
3	int
)	O
-	O
(	O
posbits	long
-	O
1	int
+	O
(	O
n_bits	int
<<	O
3	int
)	O
)	O
%	O
(	O
n_bits	int
<<	O
3	int
)	O
)	O
)	O
;	O
++	O
n_bits	int
;	O
if	O
(	O
n_bits	int
==	O
maxbits	int
)	O
{	O
maxcode	long
=	O
maxmaxcode	long
;	O
}	O
else	O
{	O
maxcode	long
=	O
MAXCODE	O
(	O
n_bits	int
)	O
-	O
1	int
;	O
}	O
bitmask	int
=	O
(	O
1	int
<<	O
n_bits	int
)	O
-	O
1	int
;	O
goto	O
resetbuf	O
;	O
}	O
input	O
(	O
inbuf	array(char)
,	O
posbits	long
,	O
code	long
,	O
n_bits	int
,	O
bitmask	int
)	O
;	O
Tracev	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%ld "	*(char)
,	O
code	long
)	O
)	O
;	O
if	O
(	O
oldcode	long
==	O
-	O
1	int
)	O
{	O
if	O
(	O
256	int
<=	O
code	long
)	O
gzip_error	(*(char))->(void)
(	O
"corrupt input."	*(char)
)	O
;	O
outbuf	array(char)
[	O
outpos	int
++	O
]	O
=	O
(	O
char_type	char
)	O
(	O
finchar	int
=	O
(	O
int	O
)	O
(	O
oldcode	long
=	O
code	long
)	O
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
code	long
==	O
CLEAR	int
&&	O
block_mode	int
)	O
{	O
clear_tab_prefixof	O
(	O
)	O
;	O
free_ent	long
=	O
FIRST	O
-	O
1	int
;	O
posbits	long
=	O
(	O
(	O
posbits	long
-	O
1	int
)	O
+	O
(	O
(	O
n_bits	int
<<	O
3	int
)	O
-	O
(	O
posbits	long
-	O
1	int
+	O
(	O
n_bits	int
<<	O
3	int
)	O
)	O
%	O
(	O
n_bits	int
<<	O
3	int
)	O
)	O
)	O
;	O
maxcode	long
=	O
MAXCODE	O
(	O
n_bits	int
=	O
INIT_BITS	int
)	O
-	O
1	int
;	O
bitmask	int
=	O
(	O
1	int
<<	O
n_bits	int
)	O
-	O
1	int
;	O
goto	O
resetbuf	O
;	O
}	O
incode	long
=	O
code	long
;	O
stackp	*(char)
=	O
de_stack	O
;	O
if	O
(	O
code	long
>=	O
free_ent	long
)	O
{	O
if	O
(	O
code	long
>	O
free_ent	long
)	O
{	O
if	O
(	O
!	O
test	int
&&	O
outpos	int
>	O
0	int
)	O
{	O
write_buf	(int,*(void),int)->(void)
(	O
out	int
,	O
(	O
char	O
*	O
)	O
outbuf	array(char)
,	O
outpos	int
)	O
;	O
bytes_out	long
+=	O
(	O
off_t	long
)	O
outpos	int
;	O
}	O
gzip_error	(*(char))->(void)
(	O
to_stdout	int
?	O
"corrupt input."	*(char)
:	O
"corrupt input. Use zcat to recover some data."	*(char)
)	O
;	O
}	O
*	O
--	O
stackp	*(char)
=	O
(	O
char_type	char
)	O
finchar	int
;	O
code	long
=	O
oldcode	long
;	O
}	O
while	O
(	O
(	O
cmp_code_int	long
)	O
code	long
>=	O
(	O
cmp_code_int	long
)	O
256	int
)	O
{	O
*	O
--	O
stackp	*(char)
=	O
tab_suffixof	O
(	O
code	long
)	O
;	O
code	long
=	O
tab_prefixof	O
(	O
code	long
)	O
;	O
}	O
*	O
--	O
stackp	*(char)
=	O
(	O
char_type	char
)	O
(	O
finchar	int
=	O
tab_suffixof	O
(	O
code	long
)	O
)	O
;	O
{	O
int	O
i	int
;	O
if	O
(	O
outpos	int
+	O
(	O
i	int
=	O
(	O
de_stack	O
-	O
stackp	*(char)
)	O
)	O
>=	O
OUTBUFSIZ	int
)	O
{	O
do	O
{	O
if	O
(	O
i	int
>	O
OUTBUFSIZ	int
-	O
outpos	int
)	O
i	int
=	O
OUTBUFSIZ	int
-	O
outpos	int
;	O
if	O
(	O
i	int
>	O
0	int
)	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
outbuf	array(char)
+	O
outpos	int
,	O
stackp	*(char)
,	O
i	int
)	O
;	O
outpos	int
+=	O
i	int
;	O
}	O
if	O
(	O
outpos	int
>=	O
OUTBUFSIZ	int
)	O
{	O
if	O
(	O
!	O
test	int
)	O
{	O
write_buf	(int,*(void),int)->(void)
(	O
out	int
,	O
(	O
char	O
*	O
)	O
outbuf	array(char)
,	O
outpos	int
)	O
;	O
bytes_out	long
+=	O
(	O
off_t	long
)	O
outpos	int
;	O
}	O
outpos	int
=	O
0	int
;	O
}	O
stackp	*(char)
+=	O
i	int
;	O
}	O
while	O
(	O
(	O
i	int
=	O
(	O
de_stack	O
-	O
stackp	*(char)
)	O
)	O
>	O
0	int
)	O
;	O
}	O
else	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
outbuf	array(char)
+	O
outpos	int
,	O
stackp	*(char)
,	O
i	int
)	O
;	O
outpos	int
+=	O
i	int
;	O
}	O
}	O
if	O
(	O
(	O
code	long
=	O
free_ent	long
)	O
<	O
maxmaxcode	long
)	O
{	O
tab_prefixof	O
(	O
code	long
)	O
=	O
(	O
unsigned	O
short	O
)	O
oldcode	long
;	O
tab_suffixof	O
(	O
code	long
)	O
=	O
(	O
char_type	char
)	O
finchar	int
;	O
free_ent	long
=	O
code	long
+	O
1	int
;	O
}	O
oldcode	long
=	O
incode	long
;	O
}	O
}	O
while	O
(	O
rsize	int
!=	O
0	int
)	O
;	O
if	O
(	O
!	O
test	int
&&	O
outpos	int
>	O
0	int
)	O
{	O
write_buf	(int,*(void),int)->(void)
(	O
out	int
,	O
(	O
char	O
*	O
)	O
outbuf	array(char)
,	O
outpos	int
)	O
;	O
bytes_out	long
+=	O
(	O
off_t	long
)	O
outpos	int
;	O
}	O
return	O
OK	int
;	O
}	O
