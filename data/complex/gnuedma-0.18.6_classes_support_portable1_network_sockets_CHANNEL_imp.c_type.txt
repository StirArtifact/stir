typedef	O
struct	O
{	O
ESint32	int
Specialized	int
;	O
EPChar	*(char)
Implementation	*(char)
;	O
EPChar	*(char)
Resource	*(char)
;	O
EPChar	*(char)
Target	*(char)
;	O
EPChar	*(char)
Access	*(char)
;	O
}	O
DtCHANNEL	struct(int,*(char),*(char),*(char),*(char))
;	O
EPChar	*(char)
access_type	array(*(char))
[	O
]	O
=	O
{	O
"Read"	*(char)
,	O
"Write"	*(char)
,	O
"Append"	*(char)
}	O
;	O
ESint32	int
EDMAPROC	O
CHANNELopenZrS32	(int,*(char))->(int)
(	O
OBJID	int
IdObj	int
,	O
EPChar	*(char)
res	*(char)
)	O
{	O
DtCHANNEL	struct(int,*(char),*(char),*(char),*(char))
*	O
m	*(struct(int,*(char),*(char),*(char),*(char)))
;	O
EPChar	*(char)
aux	*(char)
,	O
aux1	*(char)
;	O
EChar	char
cImpl	array(char)
[	O
50	int
]	O
;	O
EChar	char
cTarget	array(char)
[	O
1024	int
]	O
;	O
EChar	char
temp	array(char)
[	O
1024	int
]	O
;	O
ESint32	int
access	int
=	O
0	int
,	O
r	int
;	O
m	*(struct(int,*(char),*(char),*(char),*(char)))
=	O
(	O
DtCHANNEL	struct(int,*(char),*(char),*(char),*(char))
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
access	int
=	O
0	int
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
temp	array(char)
,	O
res	*(char)
)	O
;	O
if	O
(	O
temp	array(char)
[	O
0	int
]	O
==	O
'>'	O
)	O
{	O
access	int
++	O
;	O
if	O
(	O
temp	array(char)
[	O
1	int
]	O
==	O
'>'	O
)	O
access	int
++	O
;	O
}	O
aux1	*(char)
=	O
temp	array(char)
;	O
aux1	*(char)
+=	O
access	int
;	O
aux	*(char)
=	O
strstr	(*(char),*(char))->(*(char))
(	O
aux1	*(char)
,	O
"://"	*(char)
)	O
;	O
if	O
(	O
aux	*(char)
==	O
NULL	O
)	O
{	O
if	O
(	O
m	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
Specialized	int
==	O
0	int
)	O
{	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"%s"	*(char)
,	O
"[ERROR] Resource Name Incomplete. "	*(char)
"No Implementation specified"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
else	O
{	O
*	O
aux	*(char)
=	O
0	int
;	O
aux	*(char)
+=	O
2	int
;	O
*	O
aux	*(char)
=	O
0	int
;	O
aux	*(char)
++	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
cImpl	array(char)
,	O
aux1	*(char)
)	O
;	O
edma_wprop3	(int,*(char))->(int)
(	O
IdObj	int
,	O
"Implementation"	*(char)
,	O
cImpl	array(char)
)	O
;	O
edma_wprop3	(int,*(char))->(int)
(	O
IdObj	int
,	O
"Target"	*(char)
,	O
aux	*(char)
)	O
;	O
edma_wprop3	(int,*(char))->(int)
(	O
IdObj	int
,	O
"Resource"	*(char)
,	O
res	*(char)
)	O
;	O
edma_wprop3	(int,*(char))->(int)
(	O
IdObj	int
,	O
"Access"	*(char)
,	O
access	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
cTarget	array(char)
,	O
aux	*(char)
)	O
;	O
}	O
edma_add_subclass	(int,int,*(char),*(char))->(int)
(	O
IdObj	int
,	O
edma_get_class_id	(*(char))->(int)
(	O
cImpl	array(char)
)	O
,	O
"IMP"	*(char)
,	O
"SUPER"	*(char)
)	O
;	O
m	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
Specialized	int
=	O
1	int
;	O
r	int
=	O
(	O
ESint32	int
)	O
edma_met3	(int,*(char))->(int)
(	O
IdObj	int
,	O
"Open"	*(char)
,	O
cTarget	array(char)
,	O
access	int
)	O
;	O
return	O
r	int
;	O
}	O
ESint32	int
EDMAPROC	O
CHANNELcloserS32	(int)->(int)
(	O
OBJID	int
IdObj	int
)	O
{	O
DtCHANNEL	struct(int,*(char),*(char),*(char),*(char))
*	O
m	*(struct(int,*(char),*(char),*(char),*(char)))
;	O
m	*(struct(int,*(char),*(char),*(char),*(char)))
=	O
(	O
DtCHANNEL	struct(int,*(char),*(char),*(char),*(char))
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
return	O
(	O
ESint32	int
)	O
edma_met3	(int,*(char))->(int)
(	O
IdObj	int
,	O
"Close"	*(char)
)	O
;	O
}	O
ESint32	int
EDMAPROC	O
CHANNELsendAS32rS32	(int,struct(long,long,*(void)),int)->(int)
(	O
OBJID	int
IdObj	int
,	O
EDMAT_BUFFER	struct(long,long,*(void))
buf	*(struct(long,long,*(void)))
,	O
ESint32	int
len	int
)	O
{	O
DtCHANNEL	struct(int,*(char),*(char),*(char),*(char))
*	O
m	*(struct(int,*(char),*(char),*(char),*(char)))
;	O
m	*(struct(int,*(char),*(char),*(char),*(char)))
=	O
(	O
DtCHANNEL	struct(int,*(char),*(char),*(char),*(char))
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
return	O
(	O
ESint32	int
)	O
edma_met3	(int,*(char))->(int)
(	O
IdObj	int
,	O
"Send"	*(char)
,	O
buf	*(struct(long,long,*(void)))
,	O
len	int
)	O
;	O
}	O
ESint32	int
EDMAPROC	O
CHANNELrecvsAsS32rS32	(int,*(struct(long,long,*(void))),*(long))->(int)
(	O
OBJID	int
IdObj	int
,	O
EDMAT_BUFFER	struct(long,long,*(void))
*	O
buf	*(struct(long,long,*(void)))
,	O
EPSint32	*(long)
len	int
)	O
{	O
DtCHANNEL	struct(int,*(char),*(char),*(char),*(char))
*	O
m	*(struct(int,*(char),*(char),*(char),*(char)))
;	O
m	*(struct(int,*(char),*(char),*(char),*(char)))
=	O
(	O
DtCHANNEL	struct(int,*(char),*(char),*(char),*(char))
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
return	O
(	O
ESint32	int
)	O
edma_met3	(int,*(char))->(int)
(	O
IdObj	int
,	O
"Recv"	*(char)
,	O
buf	*(struct(long,long,*(void)))
,	O
len	int
)	O
;	O
}	O
ESint32	int
EDMAPROC	O
CHANNELwaitsOrS32	(int,*(int))->(int)
(	O
OBJID	int
IdObj	int
,	O
OBJID	int
*	O
id	int
)	O
{	O
DtCHANNEL	struct(int,*(char),*(char),*(char),*(char))
*	O
m	*(struct(int,*(char),*(char),*(char),*(char)))
;	O
OBJID	int
my_id	int
;	O
ESint32	int
r	int
;	O
EChar	char
impl	array(char)
[	O
256	int
]	O
,	O
res	*(char)
[	O
1024	int
]	O
;	O
m	*(struct(int,*(char),*(char),*(char),*(char)))
=	O
(	O
DtCHANNEL	struct(int,*(char),*(char),*(char),*(char))
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
edma_rprop3	(int,*(char))->(int)
(	O
IdObj	int
,	O
"Implementation"	*(char)
,	O
impl	array(char)
)	O
;	O
my_id	int
=	O
edma_new_obj	(*(char))->(int)
(	O
"CHANNEL"	*(char)
)	O
;	O
edma_wprop3	(int,*(char))->(int)
(	O
my_id	int
,	O
"Implementation"	*(char)
,	O
impl	array(char)
)	O
;	O
edma_add_subclass	(int,int,*(char),*(char))->(int)
(	O
my_id	int
,	O
edma_get_class_id	(*(char))->(int)
(	O
impl	array(char)
)	O
,	O
"IMP"	*(char)
,	O
"SUPER"	*(char)
)	O
;	O
r	int
=	O
(	O
ESint32	int
)	O
edma_met3	(int,*(char))->(int)
(	O
IdObj	int
,	O
"Wait"	*(char)
,	O
&	O
my_id	int
)	O
;	O
if	O
(	O
r	int
==	O
-	O
1	int
)	O
{	O
edma_free_obj	(int)->(long)
(	O
my_id	int
)	O
;	O
return	O
r	int
;	O
}	O
edma_wprop3	(int,*(char))->(int)
(	O
my_id	int
,	O
"Specialized"	*(char)
,	O
1	int
)	O
;	O
*	O
id	int
=	O
my_id	int
;	O
edma_rprop3	(int,*(char))->(int)
(	O
my_id	int
,	O
"resource"	*(char)
,	O
res	*(char)
)	O
;	O
edma_wprop3	(int,*(char))->(int)
(	O
my_id	int
,	O
"Implementation"	*(char)
,	O
impl	array(char)
)	O
;	O
edma_wprop3	(int,*(char))->(int)
(	O
my_id	int
,	O
"Resource"	*(char)
,	O
res	*(char)
)	O
;	O
edma_wprop3	(int,*(char))->(int)
(	O
my_id	int
,	O
"Target"	*(char)
,	O
""	*(char)
)	O
;	O
edma_wprop3	(int,*(char))->(int)
(	O
my_id	int
,	O
"Access"	*(char)
,	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
CHANNELborn	(int)->(int)
(	O
OBJID	int
IdObj	int
)	O
{	O
DtCHANNEL	struct(int,*(char),*(char),*(char),*(char))
*	O
m	*(struct(int,*(char),*(char),*(char),*(char)))
;	O
m	*(struct(int,*(char),*(char),*(char),*(char)))
=	O
(	O
DtCHANNEL	struct(int,*(char),*(char),*(char),*(char))
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
m	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
Specialized	int
=	O
0	int
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
CHANNELrip	(int)->(int)
(	O
OBJID	int
IdObj	int
)	O
{	O
DtCHANNEL	struct(int,*(char),*(char),*(char),*(char))
*	O
m	*(struct(int,*(char),*(char),*(char),*(char)))
;	O
m	*(struct(int,*(char),*(char),*(char),*(char)))
=	O
(	O
DtCHANNEL	struct(int,*(char),*(char),*(char),*(char))
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
if	O
(	O
m	*(struct(int,*(char),*(char),*(char),*(char)))
->	O
Specialized	int
)	O
edma_met3	(int,*(char))->(int)
(	O
IdObj	int
,	O
"close"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
