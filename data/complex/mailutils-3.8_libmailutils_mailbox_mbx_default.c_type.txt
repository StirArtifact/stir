char	O
*	O
mu_ticket_file	*(char)
=	O
"~/.mu-tickets"	*(char)
;	O
static	O
char	O
*	O
_mu_mailbox_pattern	*(char)
;	O
static	O
char	O
*	O
_default_folder_dir	*(char)
=	O
"Mail"	*(char)
;	O
static	O
char	O
*	O
_mu_folder_dir	*(char)
;	O
static	O
int	O
mu_normalize_mailbox_url	(*(*(char)),*(char))->(int)
(	O
char	O
*	O
*	O
pout	*(*(char))
,	O
const	O
char	O
*	O
dir	*(char)
)	O
{	O
int	O
len	int
;	O
if	O
(	O
!	O
pout	*(*(char))
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
dir	*(char)
)	O
;	O
if	O
(	O
dir	*(char)
[	O
len	int
-	O
1	int
]	O
==	O
'='	O
)	O
{	O
if	O
(	O
!	O
(	O
len	int
>	O
5	int
&&	O
strcmp	(*(char),*(char))->(int)
(	O
dir	*(char)
+	O
len	int
-	O
5	int
,	O
"user="	*(char)
)	O
==	O
0	int
)	O
)	O
return	O
MU_ERR_BAD_FILENAME	O
;	O
else	O
{	O
int	O
rc	int
=	O
mu_asprintf	(*(*(char)),*(char))->(int)
(	O
pout	*(*(char))
,	O
"%s%s"	*(char)
,	O
dir	*(char)
,	O
USERSUFFIX	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
}	O
else	O
{	O
*	O
pout	*(*(char))
=	O
mu_make_file_name	O
(	O
dir	*(char)
,	O
USERSUFFIX	*(char)
)	O
;	O
if	O
(	O
!	O
*	O
pout	*(*(char))
)	O
return	O
errno	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
mu_set_mail_directory	(*(char))->(int)
(	O
const	O
char	O
*	O
p	*(char)
)	O
{	O
if	O
(	O
_mu_mailbox_pattern	*(char)
)	O
free	(*(void))->(void)
(	O
_mu_mailbox_pattern	*(char)
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
{	O
_mu_mailbox_pattern	*(char)
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
return	O
mu_normalize_mailbox_url	(*(*(char)),*(char))->(int)
(	O
&	O
_mu_mailbox_pattern	*(char)
,	O
p	*(char)
)	O
;	O
}	O
int	O
mu_set_mailbox_pattern	(*(char))->(int)
(	O
const	O
char	O
*	O
pat	*(char)
)	O
{	O
char	O
*	O
p	*(char)
;	O
if	O
(	O
pat	*(char)
)	O
{	O
p	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
pat	*(char)
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
return	O
ENOMEM	int
;	O
}	O
else	O
p	*(char)
=	O
NULL	O
;	O
if	O
(	O
_mu_mailbox_pattern	*(char)
)	O
free	(*(void))->(void)
(	O
_mu_mailbox_pattern	*(char)
)	O
;	O
_mu_mailbox_pattern	*(char)
=	O
p	*(char)
;	O
return	O
0	int
;	O
}	O
int	O
mu_set_folder_directory	(*(char))->(int)
(	O
const	O
char	O
*	O
p	*(char)
)	O
{	O
char	O
*	O
fdir	*(char)
;	O
if	O
(	O
p	*(char)
)	O
{	O
fdir	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
p	*(char)
)	O
;	O
if	O
(	O
!	O
fdir	*(char)
)	O
return	O
ENOMEM	int
;	O
}	O
else	O
fdir	*(char)
=	O
NULL	O
;	O
if	O
(	O
_mu_folder_dir	*(char)
!=	O
_default_folder_dir	*(char)
)	O
free	(*(void))->(void)
(	O
_mu_folder_dir	*(char)
)	O
;	O
_mu_folder_dir	*(char)
=	O
fdir	*(char)
;	O
return	O
0	int
;	O
}	O
const	O
char	O
*	O
mu_mailbox_url	()->(*(char))
(	O
void	O
)	O
{	O
if	O
(	O
_mu_mailbox_pattern	*(char)
)	O
return	O
_mu_mailbox_pattern	*(char)
;	O
return	O
MU_PATH_MAILDIR	O
"/"	*(char)
USERSUFFIX	*(char)
;	O
}	O
const	O
char	O
*	O
mu_folder_directory	()->(*(char))
(	O
void	O
)	O
{	O
if	O
(	O
!	O
_mu_folder_dir	*(char)
&&	O
_default_folder_dir	*(char)
)	O
{	O
mu_set_folder_directory	(*(char))->(int)
(	O
_default_folder_dir	*(char)
)	O
;	O
_default_folder_dir	*(char)
=	O
NULL	O
;	O
}	O
return	O
_mu_folder_dir	*(char)
;	O
}	O
int	O
mu_construct_user_mailbox_url	(*(*(char)),*(char))->(int)
(	O
char	O
*	O
*	O
pout	*(*(char))
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
int	O
rc	int
;	O
const	O
char	O
*	O
pat	*(char)
=	O
mu_mailbox_url	()->(*(char))
(	O
)	O
;	O
char	O
*	O
result	*(struct)
;	O
rc	int
=	O
mu_str_vexpand	(*(*(char)),*(char))->(int)
(	O
&	O
result	*(struct)
,	O
pat	*(char)
,	O
"user"	*(char)
,	O
name	*(char)
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
if	O
(	O
rc	int
==	O
MU_ERR_FAILURE	O
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"cannot expand line `%s': %s"	*(char)
)	O
,	O
pat	*(char)
,	O
result	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
result	*(struct)
)	O
;	O
}	O
else	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"cannot expand line `%s': %s"	*(char)
)	O
,	O
pat	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
*	O
pout	*(*(char))
=	O
result	*(struct)
;	O
return	O
0	int
;	O
}	O
static	O
int	O
split_shortcut	(*(char),array(char),*(*(char)),*(*(char)))->(int)
(	O
const	O
char	O
*	O
file	*(char)
,	O
const	O
char	O
pfx	*(char)
[	O
]	O
,	O
char	O
*	O
*	O
user	*(char)
,	O
char	O
*	O
*	O
rest	*(*(char))
)	O
{	O
*	O
user	*(char)
=	O
NULL	O
;	O
*	O
rest	*(*(char))
=	O
NULL	O
;	O
if	O
(	O
!	O
strchr	(*(char),int)->(*(char))
(	O
pfx	*(char)
,	O
file	*(char)
[	O
0	int
]	O
)	O
)	O
return	O
0	int
;	O
if	O
(	O
*	O
++	O
file	*(char)
==	O
0	int
)	O
return	O
0	int
;	O
else	O
{	O
char	O
*	O
p	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
file	*(char)
,	O
'/'	O
)	O
;	O
int	O
len	int
;	O
if	O
(	O
p	*(char)
)	O
len	int
=	O
p	*(char)
-	O
file	*(char)
+	O
1	int
;	O
else	O
len	int
=	O
strlen	(*(char))->(long)
(	O
file	*(char)
)	O
+	O
1	int
;	O
if	O
(	O
len	int
==	O
1	int
)	O
*	O
user	*(char)
=	O
NULL	O
;	O
else	O
{	O
*	O
user	*(char)
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
len	int
)	O
;	O
if	O
(	O
!	O
*	O
user	*(char)
)	O
return	O
ENOMEM	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
*	O
user	*(char)
,	O
file	*(char)
,	O
len	int
)	O
;	O
(	O
*	O
user	*(char)
)	O
[	O
len	int
-	O
1	int
]	O
=	O
0	int
;	O
}	O
file	*(char)
+=	O
len	int
-	O
1	int
;	O
if	O
(	O
file	*(char)
[	O
0	int
]	O
==	O
'/'	O
)	O
file	*(char)
++	O
;	O
}	O
if	O
(	O
file	*(char)
[	O
0	int
]	O
)	O
{	O
*	O
rest	*(*(char))
=	O
strdup	(*(char))->(*(char))
(	O
file	*(char)
)	O
;	O
if	O
(	O
!	O
*	O
rest	*(*(char))
)	O
{	O
free	(*(void))->(void)
(	O
*	O
user	*(char)
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
char	O
*	O
get_homedir	(*(char))->(*(char))
(	O
const	O
char	O
*	O
user	*(char)
)	O
{	O
char	O
*	O
homedir	*(char)
=	O
NULL	O
;	O
struct	O
mu_auth_data	struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)
*	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
=	O
NULL	O
;	O
if	O
(	O
user	*(char)
)	O
{	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
=	O
mu_get_auth_by_name	(*(char))->(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
(	O
user	*(char)
)	O
;	O
if	O
(	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
)	O
homedir	*(char)
=	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
->	O
dir	*(char)
;	O
}	O
else	O
{	O
homedir	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"HOME"	*(char)
)	O
;	O
if	O
(	O
homedir	*(char)
==	O
NULL	O
)	O
{	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
=	O
mu_get_auth_by_name	(*(char))->(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
(	O
user	*(char)
)	O
;	O
if	O
(	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
)	O
homedir	*(char)
=	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
->	O
dir	*(char)
;	O
}	O
}	O
if	O
(	O
homedir	*(char)
)	O
homedir	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
homedir	*(char)
)	O
;	O
mu_auth_data_free	(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))->(void)
(	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
)	O
;	O
return	O
homedir	*(char)
;	O
}	O
static	O
int	O
user_mailbox_name	(*(char),*(*(char)))->(int)
(	O
const	O
char	O
*	O
user	*(char)
,	O
char	O
*	O
*	O
mailbox_name	*(*(char))
)	O
{	O
if	O
(	O
!	O
user	*(char)
)	O
user	*(char)
=	O
(	O
getenv	(*(char))->(*(char))
(	O
"LOGNAME"	*(char)
)	O
)	O
?	O
getenv	(*(char))->(*(char))
(	O
"LOGNAME"	*(char)
)	O
:	O
getenv	(*(char))->(*(char))
(	O
"USER"	*(char)
)	O
;	O
if	O
(	O
user	*(char)
)	O
{	O
int	O
rc	int
=	O
mu_construct_user_mailbox_url	(*(*(char)),*(char))->(int)
(	O
mailbox_name	*(*(char))
,	O
user	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
else	O
{	O
struct	O
mu_auth_data	struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)
*	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
=	O
mu_get_auth_by_uid	(int)->(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
(	O
getuid	()->(int)
(	O
)	O
)	O
;	O
if	O
(	O
!	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
)	O
{	O
mu_error	(*(char))->(int)
(	O
"Who am I?"	*(char)
)	O
;	O
return	O
EINVAL	int
;	O
}	O
*	O
mailbox_name	*(*(char))
=	O
strdup	(*(char))->(*(char))
(	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
->	O
mailbox	*(char)
)	O
;	O
mu_auth_data_free	(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))->(void)
(	O
auth	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
plus_expand	(*(char),*(*(char)))->(int)
(	O
const	O
char	O
*	O
file	*(char)
,	O
char	O
*	O
*	O
buf	*(char)
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
const	O
char	O
*	O
folder_dir	*(char)
=	O
mu_folder_directory	()->(*(char))
(	O
)	O
;	O
if	O
(	O
!	O
folder_dir	*(char)
)	O
{	O
char	O
*	O
p	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
file	*(char)
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
return	O
ENOMEM	int
;	O
*	O
buf	*(char)
=	O
p	*(char)
;	O
}	O
else	O
{	O
file	*(char)
++	O
;	O
if	O
(	O
folder_dir	*(char)
[	O
0	int
]	O
==	O
'/'	O
||	O
mu_is_proto	(*(char))->(int)
(	O
folder_dir	*(char)
)	O
)	O
{	O
char	O
*	O
p	*(char)
=	O
mu_make_file_name	O
(	O
folder_dir	*(char)
,	O
file	*(char)
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
return	O
errno	O
;	O
*	O
buf	*(char)
=	O
p	*(char)
;	O
}	O
else	O
{	O
char	O
*	O
home	*(char)
=	O
get_homedir	(*(char))->(*(char))
(	O
NULL	O
)	O
;	O
if	O
(	O
!	O
home	*(char)
)	O
return	O
ENOENT	int
;	O
rc	int
=	O
mu_asprintf	(*(*(char)),*(char))->(int)
(	O
buf	*(char)
,	O
"%s/%s/%s"	*(char)
,	O
home	*(char)
,	O
folder_dir	*(char)
,	O
file	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
home	*(char)
)	O
;	O
}	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
percent_expand	(*(char),*(*(char)))->(int)
(	O
const	O
char	O
*	O
file	*(char)
,	O
char	O
*	O
*	O
mbox	*(struct)
)	O
{	O
char	O
*	O
user	*(char)
=	O
NULL	O
;	O
char	O
*	O
path	*(char)
=	O
NULL	O
;	O
int	O
status	int
;	O
if	O
(	O
(	O
status	int
=	O
split_shortcut	(*(char),array(char),*(*(char)),*(*(char)))->(int)
(	O
file	*(char)
,	O
"%"	*(char)
,	O
&	O
user	*(char)
,	O
&	O
path	*(char)
)	O
)	O
)	O
return	O
status	int
;	O
if	O
(	O
path	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
user	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
path	*(char)
)	O
;	O
return	O
ENOENT	int
;	O
}	O
status	int
=	O
user_mailbox_name	(*(char),*(*(char)))->(int)
(	O
user	*(char)
,	O
mbox	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
user	*(char)
)	O
;	O
return	O
status	int
;	O
}	O
int	O
mu_mailbox_attach_ticket	(*(struct))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
)	O
{	O
int	O
rc	int
;	O
mu_folder_t	*(struct)
folder	*(struct)
=	O
NULL	O
;	O
if	O
(	O
(	O
rc	int
=	O
mu_mailbox_get_folder	(*(struct),*(*(struct)))->(int)
(	O
mbox	*(struct)
,	O
&	O
folder	*(struct)
)	O
)	O
==	O
0	int
)	O
rc	int
=	O
mu_folder_attach_ticket	(*(struct))->(int)
(	O
folder	*(struct)
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_mailbox_expand_name	(*(char),*(*(char)))->(int)
(	O
const	O
char	O
*	O
name	*(char)
,	O
char	O
*	O
*	O
expansion	*(*(char))
)	O
{	O
int	O
status	int
=	O
0	int
;	O
char	O
*	O
p	*(char)
;	O
char	O
*	O
mbox	*(struct)
=	O
NULL	O
;	O
if	O
(	O
!	O
name	*(char)
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
expansion	*(*(char))
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
p	*(char)
=	O
mu_tilde_expansion	(*(char),int,*(char))->(*(char))
(	O
name	*(char)
,	O
MU_HIERARCHY_DELIMITER	char
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
return	O
errno	O
;	O
switch	O
(	O
p	*(char)
[	O
0	int
]	O
)	O
{	O
case	O
'%'	O
:	O
status	int
=	O
percent_expand	(*(char),*(*(char)))->(int)
(	O
p	*(char)
,	O
&	O
mbox	*(struct)
)	O
;	O
break	O
;	O
case	O
'+'	O
:	O
case	O
'='	O
:	O
status	int
=	O
plus_expand	(*(char),*(*(char)))->(int)
(	O
p	*(char)
,	O
&	O
mbox	*(struct)
)	O
;	O
break	O
;	O
case	O
'/'	O
:	O
mbox	*(struct)
=	O
p	*(char)
;	O
p	*(char)
=	O
NULL	O
;	O
break	O
;	O
default	O
:	O
if	O
(	O
!	O
mu_is_proto	(*(char))->(int)
(	O
p	*(char)
)	O
)	O
{	O
char	O
*	O
dir	*(char)
=	O
mu_getcwd	()->(*(char))
(	O
)	O
;	O
mbox	*(struct)
=	O
mu_make_file_name	O
(	O
dir	*(char)
,	O
p	*(char)
)	O
;	O
if	O
(	O
!	O
mbox	*(struct)
)	O
status	int
=	O
errno	O
;	O
free	(*(void))->(void)
(	O
dir	*(char)
)	O
;	O
}	O
else	O
{	O
mbox	*(struct)
=	O
p	*(char)
;	O
p	*(char)
=	O
NULL	O
;	O
}	O
}	O
free	(*(void))->(void)
(	O
p	*(char)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
*	O
expansion	*(*(char))
=	O
mbox	*(struct)
;	O
return	O
status	int
;	O
}	O
int	O
mu_mailbox_create_default	(*(*(struct)),*(char))->(int)
(	O
mu_mailbox_t	*(struct)
*	O
pmbox	*(*(struct))
,	O
const	O
char	O
*	O
mail	*(char)
)	O
{	O
char	O
*	O
mboxname	*(char)
=	O
NULL	O
;	O
char	O
*	O
name_ptr	*(char)
=	O
NULL	O
;	O
int	O
status	int
=	O
0	int
;	O
if	O
(	O
pmbox	*(*(struct))
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
mail	*(char)
&&	O
*	O
mail	*(char)
==	O
0	int
)	O
mail	*(char)
=	O
NULL	O
;	O
if	O
(	O
mail	*(char)
==	O
NULL	O
)	O
{	O
if	O
(	O
!	O
_mu_mailbox_pattern	*(char)
)	O
{	O
mail	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"FOLDER"	*(char)
)	O
;	O
if	O
(	O
!	O
mail	*(char)
)	O
mail	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"MAIL"	*(char)
)	O
;	O
}	O
if	O
(	O
!	O
mail	*(char)
)	O
{	O
if	O
(	O
(	O
status	int
=	O
user_mailbox_name	(*(char),*(*(char)))->(int)
(	O
NULL	O
,	O
&	O
name_ptr	*(char)
)	O
)	O
)	O
return	O
status	int
;	O
mail	*(char)
=	O
name_ptr	*(char)
;	O
}	O
}	O
status	int
=	O
mu_mailbox_expand_name	(*(char),*(*(char)))->(int)
(	O
mail	*(char)
,	O
&	O
mboxname	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
name_ptr	*(char)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
mu_mailbox_create	(*(*(struct)),*(char))->(int)
(	O
pmbox	*(*(struct))
,	O
mboxname	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
mboxname	*(char)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
mu_mailbox_attach_ticket	(*(struct))->(int)
(	O
*	O
pmbox	*(*(struct))
)	O
;	O
return	O
status	int
;	O
}	O
