typedef	O
struct	O
{	O
ESint32	int
s	int
;	O
}	O
DtSOCKET_RAW	struct(int)
;	O
ESint32	int
EDMAPROC	O
SOCKET_RAWinitZ	(int,*(char))->(int)
(	O
OBJID	int
IdObj	int
,	O
EPChar	*(char)
proto_name	*(char)
)	O
{	O
DtSOCKET_RAW	struct(int)
*	O
m	*(struct(int))
;	O
ESint32	int
proto	int
;	O
m	*(struct(int))
=	O
(	O
DtSOCKET_RAW	struct(int)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
proto	int
=	O
-	O
1	int
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
proto_name	*(char)
,	O
"TCP"	*(char)
)	O
==	O
0	int
)	O
{	O
proto	int
=	O
IPPROTO_TCP	int
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
proto_name	*(char)
,	O
"UDP"	*(char)
)	O
==	O
0	int
)	O
{	O
proto	int
=	O
IPPROTO_UDP	int
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
proto_name	*(char)
,	O
"ICMP"	*(char)
)	O
==	O
0	int
)	O
{	O
proto	int
=	O
IPPROTO_ICMP	int
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
proto_name	*(char)
,	O
"IP"	*(char)
)	O
==	O
0	int
)	O
proto	int
=	O
IPPROTO_IP	int
;	O
if	O
(	O
proto	int
!=	O
-	O
1	int
)	O
{	O
m	*(struct(int))
->	O
s	int
=	O
socket	(int,int,int)->(int)
(	O
PF_INET	int
,	O
SOCK_RAW	int
,	O
proto	int
)	O
;	O
}	O
else	O
return	O
-	O
1	int
;	O
if	O
(	O
m	*(struct(int))
->	O
s	int
==	O
-	O
1	int
)	O
{	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"[ERROR] Can't create %s raw socket"	*(char)
,	O
proto_name	*(char)
)	O
;	O
}	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
SOCKET_RAWreadsAsS32	(int,struct(long,long,*(void)),*(long))->(int)
(	O
OBJID	int
IdObj	int
,	O
EDMAT_BUFFER	struct(long,long,*(void))
datos	struct(long,long,*(void))
,	O
EPSint32	*(long)
len	int
)	O
{	O
DtSOCKET_RAW	struct(int)
*	O
m	*(struct(int))
;	O
ESint32	int
r	int
;	O
m	*(struct(int))
=	O
(	O
DtSOCKET_RAW	struct(int)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
memset	(*(void),int,int)->(*(void))
(	O
datos	struct(long,long,*(void))
.	O
dat	*(void)
,	O
0	int
,	O
datos	struct(long,long,*(void))
.	O
Size	long
)	O
;	O
r	int
=	O
read	(int,*(void),int)->(int)
(	O
m	*(struct(int))
->	O
s	int
,	O
datos	struct(long,long,*(void))
.	O
dat	*(void)
,	O
datos	struct(long,long,*(void))
.	O
Size	long
)	O
;	O
*	O
len	int
=	O
r	int
;	O
if	O
(	O
r	int
==	O
-	O
1	int
)	O
{	O
*	O
len	int
=	O
-	O
1	int
;	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"%s"	*(char)
,	O
"[Error] read: Can't read data"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
SOCKET_RAWclose	(int)->(int)
(	O
OBJID	int
IdObj	int
)	O
{	O
DtSOCKET_RAW	struct(int)
*	O
m	*(struct(int))
;	O
m	*(struct(int))
=	O
(	O
DtSOCKET_RAW	struct(int)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
close	(int)->(int)
(	O
m	*(struct(int))
->	O
s	int
)	O
;	O
return	O
0	int
;	O
}	O
