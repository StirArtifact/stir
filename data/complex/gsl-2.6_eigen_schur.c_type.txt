int	O
gsl_schur_gen_eigvals	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),*(double),*(double),*(double))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
B	*(float)
,	O
double	O
*	O
wr1	*(double)
,	O
double	O
*	O
wr2	*(double)
,	O
double	O
*	O
wi	*(double)
,	O
double	O
*	O
scale1	*(double)
,	O
double	O
*	O
scale2	*(double)
)	O
{	O
const	O
double	O
safemin	double
=	O
GSL_DBL_MIN	int
*	O
1.0e2	int
;	O
const	O
double	O
safemax	double
=	O
1.0	int
/	O
safemin	double
;	O
const	O
double	O
rtmin	double
=	O
sqrt	(double)->(double)
(	O
safemin	double
)	O
;	O
const	O
double	O
rtmax	double
=	O
1.0	int
/	O
rtmin	double
;	O
double	O
anorm	double
,	O
bnorm	double
;	O
double	O
ascale	double
,	O
bscale	double
,	O
bsize	double
;	O
double	O
s1	double
,	O
s2	double
;	O
double	O
A11	double
,	O
A12	double
,	O
A21	double
,	O
A22	double
;	O
double	O
B11	double
,	O
B12	double
,	O
B22	double
;	O
double	O
binv11	double
,	O
binv22	double
;	O
double	O
bmin	double
;	O
double	O
as11	double
,	O
as12	double
,	O
as22	double
,	O
abi22	double
;	O
double	O
pp	double
,	O
qq	double
,	O
shift	double
,	O
ss	double
,	O
discr	double
,	O
r	double
;	O
anorm	double
=	O
GSL_MAX	O
(	O
GSL_MAX	O
(	O
fabs	(double)->(double)
(	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
A	*(float)
,	O
0	int
,	O
0	int
)	O
)	O
+	O
fabs	(double)->(double)
(	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
A	*(float)
,	O
1	int
,	O
0	int
)	O
)	O
,	O
fabs	(double)->(double)
(	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
A	*(float)
,	O
0	int
,	O
1	int
)	O
)	O
+	O
fabs	(double)->(double)
(	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
A	*(float)
,	O
1	int
,	O
1	int
)	O
)	O
)	O
,	O
safemin	double
)	O
;	O
ascale	double
=	O
1.0	int
/	O
anorm	double
;	O
A11	double
=	O
ascale	double
*	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
A	*(float)
,	O
0	int
,	O
0	int
)	O
;	O
A12	double
=	O
ascale	double
*	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
A	*(float)
,	O
0	int
,	O
1	int
)	O
;	O
A21	double
=	O
ascale	double
*	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
A	*(float)
,	O
1	int
,	O
0	int
)	O
;	O
A22	double
=	O
ascale	double
*	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
A	*(float)
,	O
1	int
,	O
1	int
)	O
;	O
B11	double
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
B	*(float)
,	O
0	int
,	O
0	int
)	O
;	O
B12	double
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
B	*(float)
,	O
0	int
,	O
1	int
)	O
;	O
B22	double
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
B	*(float)
,	O
1	int
,	O
1	int
)	O
;	O
bmin	double
=	O
rtmin	double
*	O
GSL_MAX	O
(	O
fabs	(double)->(double)
(	O
B11	double
)	O
,	O
GSL_MAX	O
(	O
fabs	(double)->(double)
(	O
B12	double
)	O
,	O
GSL_MAX	O
(	O
fabs	(double)->(double)
(	O
B22	double
)	O
,	O
rtmin	double
)	O
)	O
)	O
;	O
if	O
(	O
fabs	(double)->(double)
(	O
B11	double
)	O
<	O
bmin	double
)	O
B11	double
=	O
GSL_SIGN	O
(	O
B11	double
)	O
*	O
bmin	double
;	O
if	O
(	O
fabs	(double)->(double)
(	O
B22	double
)	O
<	O
bmin	double
)	O
B22	double
=	O
GSL_SIGN	O
(	O
B22	double
)	O
*	O
bmin	double
;	O
bnorm	double
=	O
GSL_MAX	O
(	O
fabs	(double)->(double)
(	O
B11	double
)	O
,	O
GSL_MAX	O
(	O
fabs	(double)->(double)
(	O
B12	double
)	O
+	O
fabs	(double)->(double)
(	O
B22	double
)	O
,	O
safemin	double
)	O
)	O
;	O
bsize	double
=	O
GSL_MAX	O
(	O
fabs	(double)->(double)
(	O
B11	double
)	O
,	O
fabs	(double)->(double)
(	O
B22	double
)	O
)	O
;	O
bscale	double
=	O
1.0	int
/	O
bsize	double
;	O
B11	double
*=	O
bscale	double
;	O
B12	double
*=	O
bscale	double
;	O
B22	double
*=	O
bscale	double
;	O
binv11	double
=	O
1.0	int
/	O
B11	double
;	O
binv22	double
=	O
1.0	int
/	O
B22	double
;	O
s1	double
=	O
A11	double
*	O
binv11	double
;	O
s2	double
=	O
A22	double
*	O
binv22	double
;	O
if	O
(	O
fabs	(double)->(double)
(	O
s1	double
)	O
<=	O
fabs	(double)->(double)
(	O
s2	double
)	O
)	O
{	O
as12	double
=	O
A12	double
-	O
s1	double
*	O
B12	double
;	O
as22	double
=	O
A22	double
-	O
s1	double
*	O
B22	double
;	O
ss	double
=	O
A21	double
*	O
(	O
binv11	double
*	O
binv22	double
)	O
;	O
abi22	double
=	O
as22	double
*	O
binv22	double
-	O
ss	double
*	O
B12	double
;	O
pp	double
=	O
0.5	int
*	O
abi22	double
;	O
shift	double
=	O
s1	double
;	O
}	O
else	O
{	O
as12	double
=	O
A12	double
-	O
s2	double
*	O
B12	double
;	O
as11	double
=	O
A11	double
-	O
s2	double
*	O
B11	double
;	O
ss	double
=	O
A21	double
*	O
(	O
binv11	double
*	O
binv22	double
)	O
;	O
abi22	double
=	O
-	O
ss	double
*	O
B12	double
;	O
pp	double
=	O
0.5	int
*	O
(	O
as11	double
*	O
binv11	double
+	O
abi22	double
)	O
;	O
shift	double
=	O
s2	double
;	O
}	O
qq	double
=	O
ss	double
*	O
as12	double
;	O
if	O
(	O
fabs	(double)->(double)
(	O
pp	double
*	O
rtmin	double
)	O
>=	O
1.0	int
)	O
{	O
discr	double
=	O
(	O
rtmin	double
*	O
pp	double
)	O
*	O
(	O
rtmin	double
*	O
pp	double
)	O
+	O
qq	double
*	O
safemin	double
;	O
r	double
=	O
sqrt	(double)->(double)
(	O
fabs	(double)->(double)
(	O
discr	double
)	O
)	O
*	O
rtmax	double
;	O
}	O
else	O
if	O
(	O
pp	double
*	O
pp	double
+	O
fabs	(double)->(double)
(	O
qq	double
)	O
<=	O
safemin	double
)	O
{	O
discr	double
=	O
(	O
rtmax	double
*	O
pp	double
)	O
*	O
(	O
rtmax	double
*	O
pp	double
)	O
+	O
qq	double
*	O
safemax	double
;	O
r	double
=	O
sqrt	(double)->(double)
(	O
fabs	(double)->(double)
(	O
discr	double
)	O
)	O
*	O
rtmin	double
;	O
}	O
else	O
{	O
discr	double
=	O
pp	double
*	O
pp	double
+	O
qq	double
;	O
r	double
=	O
sqrt	(double)->(double)
(	O
fabs	(double)->(double)
(	O
discr	double
)	O
)	O
;	O
}	O
if	O
(	O
discr	double
>=	O
0.0	int
||	O
r	double
==	O
0.0	int
)	O
{	O
double	O
sum	double
=	O
pp	double
+	O
GSL_SIGN	O
(	O
pp	double
)	O
*	O
r	double
;	O
double	O
diff	double
=	O
pp	double
-	O
GSL_SIGN	O
(	O
pp	double
)	O
*	O
r	double
;	O
double	O
wbig	double
=	O
shift	double
+	O
sum	double
;	O
double	O
wsmall	double
=	O
shift	double
+	O
diff	double
;	O
if	O
(	O
0.5	int
*	O
fabs	(double)->(double)
(	O
wbig	double
)	O
>	O
GSL_MAX	O
(	O
fabs	(double)->(double)
(	O
wsmall	double
)	O
,	O
safemin	double
)	O
)	O
{	O
double	O
wdet	double
=	O
(	O
A11	double
*	O
A22	double
-	O
A12	double
*	O
A21	double
)	O
*	O
(	O
binv11	double
*	O
binv22	double
)	O
;	O
wsmall	double
=	O
wdet	double
/	O
wbig	double
;	O
}	O
if	O
(	O
pp	double
>	O
abi22	double
)	O
{	O
*	O
wr1	*(double)
=	O
GSL_MIN	O
(	O
wbig	double
,	O
wsmall	double
)	O
;	O
*	O
wr2	*(double)
=	O
GSL_MAX	O
(	O
wbig	double
,	O
wsmall	double
)	O
;	O
}	O
else	O
{	O
*	O
wr1	*(double)
=	O
GSL_MAX	O
(	O
wbig	double
,	O
wsmall	double
)	O
;	O
*	O
wr2	*(double)
=	O
GSL_MIN	O
(	O
wbig	double
,	O
wsmall	double
)	O
;	O
}	O
*	O
wi	*(double)
=	O
0.0	int
;	O
}	O
else	O
{	O
*	O
wr1	*(double)
=	O
shift	double
+	O
pp	double
;	O
*	O
wr2	*(double)
=	O
*	O
wr1	*(double)
;	O
*	O
wi	*(double)
=	O
r	double
;	O
}	O
{	O
const	O
double	O
fuzzy1	double
=	O
1.0	int
+	O
1.0e-5	int
;	O
double	O
c1	double
,	O
c2	double
,	O
c3	double
,	O
c4	double
,	O
c5	double
;	O
double	O
wabs	double
,	O
wsize	double
,	O
wscale	double
;	O
c1	double
=	O
bsize	double
*	O
(	O
safemin	double
*	O
GSL_MAX	O
(	O
1.0	int
,	O
ascale	double
)	O
)	O
;	O
c2	double
=	O
safemin	double
*	O
GSL_MAX	O
(	O
1.0	int
,	O
bnorm	double
)	O
;	O
c3	double
=	O
bsize	double
*	O
safemin	double
;	O
if	O
(	O
ascale	double
<=	O
1.0	int
&&	O
bsize	double
<=	O
1.0	int
)	O
c4	double
=	O
GSL_MIN	O
(	O
1.0	int
,	O
(	O
ascale	double
/	O
safemin	double
)	O
*	O
bsize	double
)	O
;	O
else	O
c4	double
=	O
1.0	int
;	O
if	O
(	O
ascale	double
<=	O
1.0	int
||	O
bsize	double
<=	O
1.0	int
)	O
c5	double
=	O
GSL_MIN	O
(	O
1.0	int
,	O
ascale	double
*	O
bsize	double
)	O
;	O
else	O
c5	double
=	O
1.0	int
;	O
wabs	double
=	O
fabs	(double)->(double)
(	O
*	O
wr1	*(double)
)	O
+	O
fabs	(double)->(double)
(	O
*	O
wi	*(double)
)	O
;	O
wsize	double
=	O
GSL_MAX	O
(	O
safemin	double
,	O
GSL_MAX	O
(	O
c1	double
,	O
GSL_MAX	O
(	O
fuzzy1	double
*	O
(	O
wabs	double
*	O
c2	double
+	O
c3	double
)	O
,	O
GSL_MIN	O
(	O
c4	double
,	O
0.5	int
*	O
GSL_MAX	O
(	O
wabs	double
,	O
c5	double
)	O
)	O
)	O
)	O
)	O
;	O
if	O
(	O
wsize	double
!=	O
1.0	int
)	O
{	O
wscale	double
=	O
1.0	int
/	O
wsize	double
;	O
if	O
(	O
wsize	double
>	O
1.0	int
)	O
{	O
*	O
scale1	*(double)
=	O
(	O
GSL_MAX	O
(	O
ascale	double
,	O
bsize	double
)	O
*	O
wscale	double
)	O
*	O
GSL_MIN	O
(	O
ascale	double
,	O
bsize	double
)	O
;	O
}	O
else	O
{	O
*	O
scale1	*(double)
=	O
(	O
GSL_MIN	O
(	O
ascale	double
,	O
bsize	double
)	O
*	O
wscale	double
)	O
*	O
GSL_MAX	O
(	O
ascale	double
,	O
bsize	double
)	O
;	O
}	O
*	O
wr1	*(double)
*=	O
wscale	double
;	O
if	O
(	O
*	O
wi	*(double)
!=	O
0.0	int
)	O
{	O
*	O
wi	*(double)
*=	O
wscale	double
;	O
*	O
wr2	*(double)
=	O
*	O
wr1	*(double)
;	O
*	O
scale2	*(double)
=	O
*	O
scale1	*(double)
;	O
}	O
}	O
else	O
{	O
*	O
scale1	*(double)
=	O
ascale	double
*	O
bsize	double
;	O
*	O
scale2	*(double)
=	O
*	O
scale1	*(double)
;	O
}	O
if	O
(	O
*	O
wi	*(double)
==	O
0.0	int
)	O
{	O
wsize	double
=	O
GSL_MAX	O
(	O
safemin	double
,	O
GSL_MAX	O
(	O
c1	double
,	O
GSL_MAX	O
(	O
fuzzy1	double
*	O
(	O
fabs	(double)->(double)
(	O
*	O
wr2	*(double)
)	O
*	O
c2	double
+	O
c3	double
)	O
,	O
GSL_MIN	O
(	O
c4	double
,	O
0.5	int
*	O
GSL_MAX	O
(	O
fabs	(double)->(double)
(	O
*	O
wr2	*(double)
)	O
,	O
c5	double
)	O
)	O
)	O
)	O
)	O
;	O
if	O
(	O
wsize	double
!=	O
1.0	int
)	O
{	O
wscale	double
=	O
1.0	int
/	O
wsize	double
;	O
if	O
(	O
wsize	double
>	O
1.0	int
)	O
{	O
*	O
scale2	*(double)
=	O
(	O
GSL_MAX	O
(	O
ascale	double
,	O
bsize	double
)	O
*	O
wscale	double
)	O
*	O
GSL_MIN	O
(	O
ascale	double
,	O
bsize	double
)	O
;	O
}	O
else	O
{	O
*	O
scale2	*(double)
=	O
(	O
GSL_MIN	O
(	O
ascale	double
,	O
bsize	double
)	O
*	O
wscale	double
)	O
*	O
GSL_MAX	O
(	O
ascale	double
,	O
bsize	double
)	O
;	O
}	O
*	O
wr2	*(double)
*=	O
wscale	double
;	O
}	O
else	O
{	O
*	O
scale2	*(double)
=	O
ascale	double
*	O
bsize	double
;	O
}	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_schur_solve_equation	(double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double,double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),double)->(int)
(	O
double	O
ca	double
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
double	O
z	struct(array(long double))
,	O
double	O
d1	*(float)
,	O
double	O
d2	*(float)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
b	*(struct(long,*(long double)))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	long double
,	O
double	O
*	O
s	*(float)
,	O
double	O
*	O
xnorm	*(double)
,	O
double	O
smin	double
)	O
{	O
size_t	long
N	int
=	O
A	*(float)
->	O
size1	long
;	O
double	O
bnorm	double
;	O
double	O
scale	double
=	O
1.0	int
;	O
if	O
(	O
N	int
==	O
1	int
)	O
{	O
double	O
c	*(float)
,	O
cnorm	double
;	O
c	*(float)
=	O
ca	double
*	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
A	*(float)
,	O
0	int
,	O
0	int
)	O
-	O
z	struct(array(long double))
*	O
d1	*(float)
;	O
cnorm	double
=	O
fabs	(double)->(double)
(	O
c	*(float)
)	O
;	O
if	O
(	O
cnorm	double
<	O
smin	double
)	O
{	O
c	*(float)
=	O
smin	double
;	O
cnorm	double
=	O
smin	double
;	O
}	O
bnorm	double
=	O
fabs	(double)->(double)
(	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
b	*(struct(long,*(long double)))
,	O
0	int
)	O
)	O
;	O
if	O
(	O
cnorm	double
<	O
1.0	int
&&	O
bnorm	double
>	O
1.0	int
)	O
{	O
if	O
(	O
bnorm	double
>	O
GSL_SCHUR_BIGNUM	O
*	O
cnorm	double
)	O
scale	double
=	O
1.0	int
/	O
bnorm	double
;	O
}	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
x	long double
,	O
0	int
,	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
b	*(struct(long,*(long double)))
,	O
0	int
)	O
*	O
scale	double
/	O
c	*(float)
)	O
;	O
*	O
xnorm	*(double)
=	O
fabs	(double)->(double)
(	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
x	long double
,	O
0	int
)	O
)	O
;	O
}	O
else	O
{	O
double	O
cr	array(array(double))
[	O
2	int
]	O
[	O
2	int
]	O
;	O
double	O
*	O
crv	*(double)
;	O
double	O
cmax	double
;	O
size_t	long
icmax	long
,	O
j	long
;	O
double	O
bval1	double
,	O
bval2	double
;	O
double	O
ur11	double
,	O
ur12	double
,	O
ur22	double
,	O
ur11r	double
;	O
double	O
cr21	double
,	O
cr22	double
;	O
double	O
lr21	double
;	O
double	O
b1	*(float)
,	O
b2	float
,	O
bbnd	double
;	O
double	O
x1	double
,	O
x2	double
;	O
double	O
temp	double
;	O
size_t	long
ipivot	array(array(long))
[	O
4	int
]	O
[	O
4	int
]	O
=	O
{	O
{	O
0	int
,	O
1	int
,	O
2	int
,	O
3	int
}	O
,	O
{	O
1	int
,	O
0	int
,	O
3	int
,	O
2	int
}	O
,	O
{	O
2	int
,	O
3	int
,	O
0	int
,	O
1	int
}	O
,	O
{	O
3	int
,	O
2	int
,	O
1	int
,	O
0	int
}	O
}	O
;	O
int	O
rswap	array(int)
[	O
4	int
]	O
=	O
{	O
0	int
,	O
1	int
,	O
0	int
,	O
1	int
}	O
;	O
int	O
zswap	array(int)
[	O
4	int
]	O
=	O
{	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
}	O
;	O
crv	*(double)
=	O
(	O
double	O
*	O
)	O
cr	array(array(double))
;	O
cr	array(array(double))
[	O
0	int
]	O
[	O
0	int
]	O
=	O
ca	double
*	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
A	*(float)
,	O
0	int
,	O
0	int
)	O
-	O
z	struct(array(long double))
*	O
d1	*(float)
;	O
cr	array(array(double))
[	O
1	int
]	O
[	O
1	int
]	O
=	O
ca	double
*	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
A	*(float)
,	O
1	int
,	O
1	int
)	O
-	O
z	struct(array(long double))
*	O
d2	*(float)
;	O
cr	array(array(double))
[	O
0	int
]	O
[	O
1	int
]	O
=	O
ca	double
*	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
A	*(float)
,	O
1	int
,	O
0	int
)	O
;	O
cr	array(array(double))
[	O
1	int
]	O
[	O
0	int
]	O
=	O
ca	double
*	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
A	*(float)
,	O
0	int
,	O
1	int
)	O
;	O
cmax	double
=	O
0.0	int
;	O
icmax	long
=	O
0	int
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
4	int
;	O
++	O
j	long
)	O
{	O
if	O
(	O
fabs	(double)->(double)
(	O
crv	*(double)
[	O
j	long
]	O
)	O
>	O
cmax	double
)	O
{	O
cmax	double
=	O
fabs	(double)->(double)
(	O
crv	*(double)
[	O
j	long
]	O
)	O
;	O
icmax	long
=	O
j	long
;	O
}	O
}	O
bval1	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
b	*(struct(long,*(long double)))
,	O
0	int
)	O
;	O
bval2	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
b	*(struct(long,*(long double)))
,	O
1	int
)	O
;	O
if	O
(	O
cmax	double
<	O
smin	double
)	O
{	O
bnorm	double
=	O
GSL_MAX	O
(	O
fabs	(double)->(double)
(	O
bval1	double
)	O
,	O
fabs	(double)->(double)
(	O
bval2	double
)	O
)	O
;	O
if	O
(	O
smin	double
<	O
1.0	int
&&	O
bnorm	double
>	O
1.0	int
)	O
{	O
if	O
(	O
bnorm	double
>	O
GSL_SCHUR_BIGNUM	O
*	O
smin	double
)	O
scale	double
=	O
1.0	int
/	O
bnorm	double
;	O
}	O
temp	double
=	O
scale	double
/	O
smin	double
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
x	long double
,	O
0	int
,	O
temp	double
*	O
bval1	double
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
x	long double
,	O
1	int
,	O
temp	double
*	O
bval2	double
)	O
;	O
*	O
xnorm	*(double)
=	O
temp	double
*	O
bnorm	double
;	O
*	O
s	*(float)
=	O
scale	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
ur11	double
=	O
crv	*(double)
[	O
icmax	long
]	O
;	O
cr21	double
=	O
crv	*(double)
[	O
ipivot	array(array(long))
[	O
1	int
]	O
[	O
icmax	long
]	O
]	O
;	O
ur12	double
=	O
crv	*(double)
[	O
ipivot	array(array(long))
[	O
2	int
]	O
[	O
icmax	long
]	O
]	O
;	O
cr22	double
=	O
crv	*(double)
[	O
ipivot	array(array(long))
[	O
3	int
]	O
[	O
icmax	long
]	O
]	O
;	O
ur11r	double
=	O
1.0	int
/	O
ur11	double
;	O
lr21	double
=	O
ur11r	double
*	O
cr21	double
;	O
ur22	double
=	O
cr22	double
-	O
ur12	double
*	O
lr21	double
;	O
if	O
(	O
fabs	(double)->(double)
(	O
ur22	double
)	O
<	O
smin	double
)	O
ur22	double
=	O
smin	double
;	O
if	O
(	O
rswap	array(int)
[	O
icmax	long
]	O
)	O
{	O
b1	*(float)
=	O
bval2	double
;	O
b2	float
=	O
bval1	double
;	O
}	O
else	O
{	O
b1	*(float)
=	O
bval1	double
;	O
b2	float
=	O
bval2	double
;	O
}	O
b2	float
-=	O
lr21	double
*	O
b1	*(float)
;	O
bbnd	double
=	O
GSL_MAX	O
(	O
fabs	(double)->(double)
(	O
b1	*(float)
*	O
(	O
ur22	double
*	O
ur11r	double
)	O
)	O
,	O
fabs	(double)->(double)
(	O
b2	float
)	O
)	O
;	O
if	O
(	O
bbnd	double
>	O
1.0	int
&&	O
fabs	(double)->(double)
(	O
ur22	double
)	O
<	O
1.0	int
)	O
{	O
if	O
(	O
bbnd	double
>=	O
GSL_SCHUR_BIGNUM	O
*	O
fabs	(double)->(double)
(	O
ur22	double
)	O
)	O
scale	double
=	O
1.0	int
/	O
bbnd	double
;	O
}	O
x2	double
=	O
(	O
b2	float
*	O
scale	double
)	O
/	O
ur22	double
;	O
x1	double
=	O
(	O
scale	double
*	O
b1	*(float)
)	O
*	O
ur11r	double
-	O
x2	double
*	O
(	O
ur11r	double
*	O
ur12	double
)	O
;	O
if	O
(	O
zswap	array(int)
[	O
icmax	long
]	O
)	O
{	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
x	long double
,	O
0	int
,	O
x2	double
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
x	long double
,	O
1	int
,	O
x1	double
)	O
;	O
}	O
else	O
{	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
x	long double
,	O
0	int
,	O
x1	double
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
x	long double
,	O
1	int
,	O
x2	double
)	O
;	O
}	O
*	O
xnorm	*(double)
=	O
GSL_MAX	O
(	O
fabs	(double)->(double)
(	O
x1	double
)	O
,	O
fabs	(double)->(double)
(	O
x2	double
)	O
)	O
;	O
if	O
(	O
*	O
xnorm	*(double)
>	O
1.0	int
&&	O
cmax	double
>	O
1.0	int
)	O
{	O
if	O
(	O
*	O
xnorm	*(double)
>	O
GSL_SCHUR_BIGNUM	O
/	O
cmax	double
)	O
{	O
temp	double
=	O
cmax	double
/	O
GSL_SCHUR_BIGNUM	O
;	O
gsl_blas_dscal	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
temp	double
,	O
x	long double
)	O
;	O
*	O
xnorm	*(double)
*=	O
temp	double
;	O
scale	double
*=	O
temp	double
;	O
}	O
}	O
}	O
*	O
s	*(float)
=	O
scale	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_schur_solve_equation_z	(double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(array(double))),double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),double)->(int)
(	O
double	O
ca	double
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
gsl_complex	struct(array(double))
*	O
z	struct(array(long double))
,	O
double	O
d1	*(float)
,	O
double	O
d2	*(float)
,	O
const	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
b	*(struct(long,*(long double)))
,	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	long double
,	O
double	O
*	O
s	*(float)
,	O
double	O
*	O
xnorm	*(double)
,	O
double	O
smin	double
)	O
{	O
size_t	long
N	int
=	O
A	*(float)
->	O
size1	long
;	O
double	O
scale	double
=	O
1.0	int
;	O
double	O
bnorm	double
;	O
if	O
(	O
N	int
==	O
1	int
)	O
{	O
double	O
cr	array(array(double))
,	O
ci	double
,	O
cnorm	double
;	O
gsl_complex	struct(array(double))
bval	struct(array(double))
,	O
c	*(float)
,	O
xval	struct(array(double))
,	O
tmp	struct(array(double))
;	O
cr	array(array(double))
=	O
ca	double
*	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
A	*(float)
,	O
0	int
,	O
0	int
)	O
-	O
GSL_REAL	O
(	O
*	O
z	struct(array(long double))
)	O
*	O
d1	*(float)
;	O
ci	double
=	O
-	O
GSL_IMAG	O
(	O
*	O
z	struct(array(long double))
)	O
*	O
d1	*(float)
;	O
cnorm	double
=	O
fabs	(double)->(double)
(	O
cr	array(array(double))
)	O
+	O
fabs	(double)->(double)
(	O
ci	double
)	O
;	O
if	O
(	O
cnorm	double
<	O
smin	double
)	O
{	O
cr	array(array(double))
=	O
smin	double
;	O
ci	double
=	O
0.0	int
;	O
cnorm	double
=	O
smin	double
;	O
}	O
bval	struct(array(double))
=	O
gsl_vector_complex_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(struct(array(double)))
(	O
b	*(struct(long,*(long double)))
,	O
0	int
)	O
;	O
bnorm	double
=	O
fabs	(double)->(double)
(	O
GSL_REAL	O
(	O
bval	struct(array(double))
)	O
)	O
+	O
fabs	(double)->(double)
(	O
GSL_IMAG	O
(	O
bval	struct(array(double))
)	O
)	O
;	O
if	O
(	O
cnorm	double
<	O
1.0	int
&&	O
bnorm	double
>	O
1.0	int
)	O
{	O
if	O
(	O
bnorm	double
>	O
GSL_SCHUR_BIGNUM	O
*	O
cnorm	double
)	O
scale	double
=	O
1.0	int
/	O
bnorm	double
;	O
}	O
GSL_SET_COMPLEX	O
(	O
&	O
tmp	struct(array(double))
,	O
scale	double
*	O
GSL_REAL	O
(	O
bval	struct(array(double))
)	O
,	O
scale	double
*	O
GSL_IMAG	O
(	O
bval	struct(array(double))
)	O
)	O
;	O
GSL_SET_COMPLEX	O
(	O
&	O
c	*(float)
,	O
cr	array(array(double))
,	O
ci	double
)	O
;	O
xval	struct(array(double))
=	O
gsl_complex_div	(struct(array(double)),struct(array(double)))->(struct(array(double)))
(	O
tmp	struct(array(double))
,	O
c	*(float)
)	O
;	O
gsl_vector_complex_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,struct(array(double)))->(void)
(	O
x	long double
,	O
0	int
,	O
xval	struct(array(double))
)	O
;	O
*	O
xnorm	*(double)
=	O
fabs	(double)->(double)
(	O
GSL_REAL	O
(	O
xval	struct(array(double))
)	O
)	O
+	O
fabs	(double)->(double)
(	O
GSL_IMAG	O
(	O
xval	struct(array(double))
)	O
)	O
;	O
}	O
else	O
{	O
double	O
cr	array(array(double))
[	O
2	int
]	O
[	O
2	int
]	O
,	O
ci	double
[	O
2	int
]	O
[	O
2	int
]	O
;	O
double	O
*	O
civ	*(double)
,	O
*	O
crv	*(double)
;	O
double	O
cmax	double
;	O
gsl_complex	struct(array(double))
bval1	double
,	O
bval2	double
;	O
gsl_complex	struct(array(double))
xval1	struct(array(double))
,	O
xval2	struct(array(double))
;	O
double	O
xr1	double
,	O
xi1	double
;	O
size_t	long
icmax	long
;	O
size_t	long
j	long
;	O
double	O
temp	double
;	O
double	O
ur11	double
,	O
ur12	double
,	O
ur22	double
,	O
ui11	double
,	O
ui12	double
,	O
ui22	double
,	O
ur11r	double
,	O
ui11r	double
;	O
double	O
ur12s	double
,	O
ui12s	double
;	O
double	O
u22abs	double
;	O
double	O
lr21	double
,	O
li21	double
;	O
double	O
cr21	double
,	O
cr22	double
,	O
ci21	double
,	O
ci22	double
;	O
double	O
br1	double
,	O
bi1	double
,	O
br2	double
,	O
bi2	double
,	O
bbnd	double
;	O
gsl_complex	struct(array(double))
b1	*(float)
,	O
b2	float
;	O
size_t	long
ipivot	array(array(long))
[	O
4	int
]	O
[	O
4	int
]	O
=	O
{	O
{	O
0	int
,	O
1	int
,	O
2	int
,	O
3	int
}	O
,	O
{	O
1	int
,	O
0	int
,	O
3	int
,	O
2	int
}	O
,	O
{	O
2	int
,	O
3	int
,	O
0	int
,	O
1	int
}	O
,	O
{	O
3	int
,	O
2	int
,	O
1	int
,	O
0	int
}	O
}	O
;	O
int	O
rswap	array(int)
[	O
4	int
]	O
=	O
{	O
0	int
,	O
1	int
,	O
0	int
,	O
1	int
}	O
;	O
int	O
zswap	array(int)
[	O
4	int
]	O
=	O
{	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
}	O
;	O
civ	*(double)
=	O
(	O
double	O
*	O
)	O
ci	double
;	O
crv	*(double)
=	O
(	O
double	O
*	O
)	O
cr	array(array(double))
;	O
cr	array(array(double))
[	O
0	int
]	O
[	O
0	int
]	O
=	O
ca	double
*	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
A	*(float)
,	O
0	int
,	O
0	int
)	O
-	O
GSL_REAL	O
(	O
*	O
z	struct(array(long double))
)	O
*	O
d1	*(float)
;	O
cr	array(array(double))
[	O
1	int
]	O
[	O
1	int
]	O
=	O
ca	double
*	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
A	*(float)
,	O
1	int
,	O
1	int
)	O
-	O
GSL_REAL	O
(	O
*	O
z	struct(array(long double))
)	O
*	O
d2	*(float)
;	O
cr	array(array(double))
[	O
0	int
]	O
[	O
1	int
]	O
=	O
ca	double
*	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
A	*(float)
,	O
1	int
,	O
0	int
)	O
;	O
cr	array(array(double))
[	O
1	int
]	O
[	O
0	int
]	O
=	O
ca	double
*	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
A	*(float)
,	O
0	int
,	O
1	int
)	O
;	O
ci	double
[	O
0	int
]	O
[	O
0	int
]	O
=	O
-	O
GSL_IMAG	O
(	O
*	O
z	struct(array(long double))
)	O
*	O
d1	*(float)
;	O
ci	double
[	O
0	int
]	O
[	O
1	int
]	O
=	O
0.0	int
;	O
ci	double
[	O
1	int
]	O
[	O
0	int
]	O
=	O
0.0	int
;	O
ci	double
[	O
1	int
]	O
[	O
1	int
]	O
=	O
-	O
GSL_IMAG	O
(	O
*	O
z	struct(array(long double))
)	O
*	O
d2	*(float)
;	O
cmax	double
=	O
0.0	int
;	O
icmax	long
=	O
0	int
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
4	int
;	O
++	O
j	long
)	O
{	O
if	O
(	O
fabs	(double)->(double)
(	O
crv	*(double)
[	O
j	long
]	O
)	O
+	O
fabs	(double)->(double)
(	O
civ	*(double)
[	O
j	long
]	O
)	O
>	O
cmax	double
)	O
{	O
cmax	double
=	O
fabs	(double)->(double)
(	O
crv	*(double)
[	O
j	long
]	O
)	O
+	O
fabs	(double)->(double)
(	O
civ	*(double)
[	O
j	long
]	O
)	O
;	O
icmax	long
=	O
j	long
;	O
}	O
}	O
bval1	double
=	O
gsl_vector_complex_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(struct(array(double)))
(	O
b	*(struct(long,*(long double)))
,	O
0	int
)	O
;	O
bval2	double
=	O
gsl_vector_complex_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(struct(array(double)))
(	O
b	*(struct(long,*(long double)))
,	O
1	int
)	O
;	O
if	O
(	O
cmax	double
<	O
smin	double
)	O
{	O
bnorm	double
=	O
GSL_MAX	O
(	O
fabs	(double)->(double)
(	O
GSL_REAL	O
(	O
bval1	double
)	O
)	O
+	O
fabs	(double)->(double)
(	O
GSL_IMAG	O
(	O
bval1	double
)	O
)	O
,	O
fabs	(double)->(double)
(	O
GSL_REAL	O
(	O
bval2	double
)	O
)	O
+	O
fabs	(double)->(double)
(	O
GSL_IMAG	O
(	O
bval2	double
)	O
)	O
)	O
;	O
if	O
(	O
smin	double
<	O
1.0	int
&&	O
bnorm	double
>	O
1.0	int
)	O
{	O
if	O
(	O
bnorm	double
>	O
GSL_SCHUR_BIGNUM	O
*	O
smin	double
)	O
scale	double
=	O
1.0	int
/	O
bnorm	double
;	O
}	O
temp	double
=	O
scale	double
/	O
smin	double
;	O
xval1	struct(array(double))
=	O
gsl_complex_mul_real	(struct(array(double)),double)->(struct(array(double)))
(	O
bval1	double
,	O
temp	double
)	O
;	O
xval2	struct(array(double))
=	O
gsl_complex_mul_real	(struct(array(double)),double)->(struct(array(double)))
(	O
bval2	double
,	O
temp	double
)	O
;	O
gsl_vector_complex_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,struct(array(double)))->(void)
(	O
x	long double
,	O
0	int
,	O
xval1	struct(array(double))
)	O
;	O
gsl_vector_complex_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,struct(array(double)))->(void)
(	O
x	long double
,	O
1	int
,	O
xval2	struct(array(double))
)	O
;	O
*	O
xnorm	*(double)
=	O
temp	double
*	O
bnorm	double
;	O
*	O
s	*(float)
=	O
scale	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
ur11	double
=	O
crv	*(double)
[	O
icmax	long
]	O
;	O
ui11	double
=	O
civ	*(double)
[	O
icmax	long
]	O
;	O
cr21	double
=	O
crv	*(double)
[	O
ipivot	array(array(long))
[	O
1	int
]	O
[	O
icmax	long
]	O
]	O
;	O
ci21	double
=	O
civ	*(double)
[	O
ipivot	array(array(long))
[	O
1	int
]	O
[	O
icmax	long
]	O
]	O
;	O
ur12	double
=	O
crv	*(double)
[	O
ipivot	array(array(long))
[	O
2	int
]	O
[	O
icmax	long
]	O
]	O
;	O
ui12	double
=	O
civ	*(double)
[	O
ipivot	array(array(long))
[	O
2	int
]	O
[	O
icmax	long
]	O
]	O
;	O
cr22	double
=	O
crv	*(double)
[	O
ipivot	array(array(long))
[	O
3	int
]	O
[	O
icmax	long
]	O
]	O
;	O
ci22	double
=	O
civ	*(double)
[	O
ipivot	array(array(long))
[	O
3	int
]	O
[	O
icmax	long
]	O
]	O
;	O
if	O
(	O
icmax	long
==	O
0	int
||	O
icmax	long
==	O
3	int
)	O
{	O
if	O
(	O
fabs	(double)->(double)
(	O
ur11	double
)	O
>	O
fabs	(double)->(double)
(	O
ui11	double
)	O
)	O
{	O
temp	double
=	O
ui11	double
/	O
ur11	double
;	O
ur11r	double
=	O
1.0	int
/	O
(	O
ur11	double
*	O
(	O
1.0	int
+	O
temp	double
*	O
temp	double
)	O
)	O
;	O
ui11r	double
=	O
-	O
temp	double
*	O
ur11r	double
;	O
}	O
else	O
{	O
temp	double
=	O
ur11	double
/	O
ui11	double
;	O
ui11r	double
=	O
-	O
1.0	int
/	O
(	O
ui11	double
*	O
(	O
1.0	int
+	O
temp	double
*	O
temp	double
)	O
)	O
;	O
ur11r	double
=	O
-	O
temp	double
*	O
ui11r	double
;	O
}	O
lr21	double
=	O
cr21	double
*	O
ur11r	double
;	O
li21	double
=	O
cr21	double
*	O
ui11r	double
;	O
ur12s	double
=	O
ur12	double
*	O
ur11r	double
;	O
ui12s	double
=	O
ur12	double
*	O
ui11r	double
;	O
ur22	double
=	O
cr22	double
-	O
ur12	double
*	O
lr21	double
;	O
ui22	double
=	O
ci22	double
-	O
ur12	double
*	O
li21	double
;	O
}	O
else	O
{	O
ur11r	double
=	O
1.0	int
/	O
ur11	double
;	O
ui11r	double
=	O
0.0	int
;	O
lr21	double
=	O
cr21	double
*	O
ur11r	double
;	O
li21	double
=	O
ci21	double
*	O
ur11r	double
;	O
ur12s	double
=	O
ur12	double
*	O
ur11r	double
;	O
ui12s	double
=	O
ui12	double
*	O
ur11r	double
;	O
ur22	double
=	O
cr22	double
-	O
ur12	double
*	O
lr21	double
+	O
ui12	double
*	O
li21	double
;	O
ui22	double
=	O
-	O
ur12	double
*	O
li21	double
-	O
ui12	double
*	O
lr21	double
;	O
}	O
u22abs	double
=	O
fabs	(double)->(double)
(	O
ur22	double
)	O
+	O
fabs	(double)->(double)
(	O
ui22	double
)	O
;	O
if	O
(	O
u22abs	double
<	O
smin	double
)	O
{	O
ur22	double
=	O
smin	double
;	O
ui22	double
=	O
0.0	int
;	O
}	O
if	O
(	O
rswap	array(int)
[	O
icmax	long
]	O
)	O
{	O
br2	double
=	O
GSL_REAL	O
(	O
bval1	double
)	O
;	O
bi2	double
=	O
GSL_IMAG	O
(	O
bval1	double
)	O
;	O
br1	double
=	O
GSL_REAL	O
(	O
bval2	double
)	O
;	O
bi1	double
=	O
GSL_IMAG	O
(	O
bval2	double
)	O
;	O
}	O
else	O
{	O
br1	double
=	O
GSL_REAL	O
(	O
bval1	double
)	O
;	O
bi1	double
=	O
GSL_IMAG	O
(	O
bval1	double
)	O
;	O
br2	double
=	O
GSL_REAL	O
(	O
bval2	double
)	O
;	O
bi2	double
=	O
GSL_IMAG	O
(	O
bval2	double
)	O
;	O
}	O
br2	double
+=	O
li21	double
*	O
bi1	double
-	O
lr21	double
*	O
br1	double
;	O
bi2	double
-=	O
li21	double
*	O
br1	double
+	O
lr21	double
*	O
bi1	double
;	O
bbnd	double
=	O
GSL_MAX	O
(	O
(	O
fabs	(double)->(double)
(	O
br1	double
)	O
+	O
fabs	(double)->(double)
(	O
bi1	double
)	O
)	O
*	O
(	O
u22abs	double
*	O
(	O
fabs	(double)->(double)
(	O
ur11r	double
)	O
+	O
fabs	(double)->(double)
(	O
ui11r	double
)	O
)	O
)	O
,	O
fabs	(double)->(double)
(	O
br2	double
)	O
+	O
fabs	(double)->(double)
(	O
bi2	double
)	O
)	O
;	O
if	O
(	O
bbnd	double
>	O
1.0	int
&&	O
u22abs	double
<	O
1.0	int
)	O
{	O
if	O
(	O
bbnd	double
>=	O
GSL_SCHUR_BIGNUM	O
*	O
u22abs	double
)	O
{	O
scale	double
=	O
1.0	int
/	O
bbnd	double
;	O
br1	double
*=	O
scale	double
;	O
bi1	double
*=	O
scale	double
;	O
br2	double
*=	O
scale	double
;	O
bi2	double
*=	O
scale	double
;	O
}	O
}	O
GSL_SET_COMPLEX	O
(	O
&	O
b1	*(float)
,	O
br2	double
,	O
bi2	double
)	O
;	O
GSL_SET_COMPLEX	O
(	O
&	O
b2	float
,	O
ur22	double
,	O
ui22	double
)	O
;	O
xval2	struct(array(double))
=	O
gsl_complex_div	(struct(array(double)),struct(array(double)))->(struct(array(double)))
(	O
b1	*(float)
,	O
b2	float
)	O
;	O
xr1	double
=	O
ur11r	double
*	O
br1	double
-	O
ui11r	double
*	O
bi1	double
-	O
ur12s	double
*	O
GSL_REAL	O
(	O
xval2	struct(array(double))
)	O
+	O
ui12s	double
*	O
GSL_IMAG	O
(	O
xval2	struct(array(double))
)	O
;	O
xi1	double
=	O
ui11r	double
*	O
br1	double
+	O
ur11r	double
*	O
bi1	double
-	O
ui12s	double
*	O
GSL_REAL	O
(	O
xval2	struct(array(double))
)	O
-	O
ur12s	double
*	O
GSL_IMAG	O
(	O
xval2	struct(array(double))
)	O
;	O
GSL_SET_COMPLEX	O
(	O
&	O
xval1	struct(array(double))
,	O
xr1	double
,	O
xi1	double
)	O
;	O
if	O
(	O
zswap	array(int)
[	O
icmax	long
]	O
)	O
{	O
gsl_vector_complex_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,struct(array(double)))->(void)
(	O
x	long double
,	O
0	int
,	O
xval2	struct(array(double))
)	O
;	O
gsl_vector_complex_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,struct(array(double)))->(void)
(	O
x	long double
,	O
1	int
,	O
xval1	struct(array(double))
)	O
;	O
}	O
else	O
{	O
gsl_vector_complex_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,struct(array(double)))->(void)
(	O
x	long double
,	O
0	int
,	O
xval1	struct(array(double))
)	O
;	O
gsl_vector_complex_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,struct(array(double)))->(void)
(	O
x	long double
,	O
1	int
,	O
xval2	struct(array(double))
)	O
;	O
}	O
*	O
xnorm	*(double)
=	O
GSL_MAX	O
(	O
fabs	(double)->(double)
(	O
GSL_REAL	O
(	O
xval1	struct(array(double))
)	O
)	O
+	O
fabs	(double)->(double)
(	O
GSL_IMAG	O
(	O
xval1	struct(array(double))
)	O
)	O
,	O
fabs	(double)->(double)
(	O
GSL_REAL	O
(	O
xval2	struct(array(double))
)	O
)	O
+	O
fabs	(double)->(double)
(	O
GSL_IMAG	O
(	O
xval2	struct(array(double))
)	O
)	O
)	O
;	O
if	O
(	O
*	O
xnorm	*(double)
>	O
1.0	int
&&	O
cmax	double
>	O
1.0	int
)	O
{	O
if	O
(	O
*	O
xnorm	*(double)
>	O
GSL_SCHUR_BIGNUM	O
/	O
cmax	double
)	O
{	O
temp	double
=	O
cmax	double
/	O
GSL_SCHUR_BIGNUM	O
;	O
gsl_blas_zdscal	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
temp	double
,	O
x	long double
)	O
;	O
*	O
xnorm	*(double)
*=	O
temp	double
;	O
scale	double
*=	O
temp	double
;	O
}	O
}	O
}	O
*	O
s	*(float)
=	O
scale	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
