int	O
getaline_old	(*(*(char)),*(int),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
unsigned	O
char	O
*	O
*	O
line	*(char)
,	O
int	O
*	O
size	long
,	O
FILE	struct
*	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
unsigned	O
char	O
*	O
p	*(*(void))
,	O
*	O
q	*(char)
,	O
ret	char
;	O
int	O
offset	long
,	O
n	long
,	O
D	int
=	O
256	int
;	O
if	O
(	O
*	O
size	long
<=	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
*	O
line	*(char)
==	O
NULL	O
)	O
{	O
p	*(*(void))
=	O
xmalloc	(long)->(*(void))
(	O
*	O
size	long
)	O
;	O
}	O
else	O
{	O
p	*(*(void))
=	O
*	O
line	*(char)
;	O
}	O
offset	long
=	O
0	int
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
offset	long
+	O
2	int
>	O
*	O
size	long
)	O
{	O
*	O
size	long
+=	O
D	int
;	O
q	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
(	O
void	O
*	O
)	O
p	*(*(void))
,	O
*	O
size	long
)	O
;	O
*	O
line	*(char)
=	O
p	*(*(void))
;	O
p	*(*(void))
=	O
q	*(char)
;	O
}	O
n	long
=	O
fread	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
p	*(*(void))
+	O
offset	long
,	O
1	int
,	O
1	int
,	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
n	long
!=	O
1	int
)	O
{	O
*	O
line	*(char)
=	O
p	*(*(void))
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
p	*(*(void))
[	O
offset	long
]	O
==	O
'\n'	O
)	O
{	O
p	*(*(void))
[	O
offset	long
+	O
1	int
]	O
=	O
'\0'	O
;	O
*	O
line	*(char)
=	O
p	*(*(void))
;	O
return	O
(	O
offset	long
+	O
1	int
)	O
;	O
}	O
offset	long
++	O
;	O
}	O
}	O
int	O
getaline	(*(*(char)),*(int),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
unsigned	O
char	O
*	O
*	O
line	*(char)
,	O
int	O
*	O
size	long
,	O
FILE	struct
*	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
unsigned	O
char	O
*	O
p	*(*(void))
,	O
*	O
q	*(char)
;	O
int	O
offset	long
,	O
n	long
,	O
D	int
=	O
256	int
;	O
int	O
psize	int
;	O
psize	int
=	O
D	int
;	O
p	*(*(void))
=	O
xmalloc	(long)->(*(void))
(	O
psize	int
)	O
;	O
offset	long
=	O
0	int
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
offset	long
+	O
2	int
>	O
psize	int
)	O
{	O
psize	int
+=	O
D	int
;	O
q	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
(	O
void	O
*	O
)	O
p	*(*(void))
,	O
psize	int
)	O
;	O
p	*(*(void))
=	O
q	*(char)
;	O
}	O
n	long
=	O
fread	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
p	*(*(void))
+	O
offset	long
,	O
1	int
,	O
1	int
,	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
n	long
!=	O
1	int
)	O
{	O
xfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
*	O
)	O
&	O
p	*(*(void))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
p	*(*(void))
[	O
offset	long
]	O
==	O
'\n'	O
)	O
{	O
p	*(*(void))
[	O
offset	long
+	O
1	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
*	O
line	*(char)
!=	O
NULL	O
)	O
xfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
*	O
)	O
line	*(char)
)	O
;	O
*	O
line	*(char)
=	O
p	*(*(void))
;	O
*	O
size	long
=	O
psize	int
;	O
return	O
(	O
offset	long
+	O
1	int
)	O
;	O
}	O
offset	long
++	O
;	O
}	O
}	O
int	O
getaline_r	(*(*(char)),*(int),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(int)
(	O
char	O
*	O
*	O
line	*(char)
,	O
int	O
*	O
size	long
,	O
FILE	struct
*	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
struct	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
*	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
{	O
char	O
*	O
p	*(*(void))
,	O
*	O
q	*(char)
,	O
*	O
s	*(*(char))
;	O
int	O
offset	long
,	O
n	long
,	O
D	int
=	O
256	int
,	O
linelen	int
=	O
80	int
;	O
size_t	long
len	long
;	O
int	O
psize	int
;	O
psize	int
=	O
D	int
;	O
p	*(*(void))
=	O
pmalloc	(long,*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(*(void))
(	O
*	O
size	long
,	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
;	O
if	O
(	O
p	*(*(void))
==	O
NULL	O
)	O
return	O
PROXYKNIFE_THREAD_EXIT	O
;	O
offset	long
=	O
0	int
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
offset	long
+	O
linelen	int
>	O
psize	int
)	O
{	O
psize	int
=	O
offset	long
+	O
linelen	int
+	O
D	int
;	O
q	*(char)
=	O
prealloc	(*(void),long,*(struct(*(char),struct(*(char),struct(short,short,struct`,array(char)),*(char),int),*(char),*(char))))->(*(void))
(	O
p	*(*(void))
,	O
psize	int
,	O
thread_mem	struct(*(char),struct(*(char),struct(short,short,struct(int),array(char)),*(char),int),*(char),*(char))
)	O
;	O
if	O
(	O
q	*(char)
==	O
NULL	O
)	O
{	O
if	O
(	O
p	*(*(void))
!=	O
NULL	O
)	O
{	O
pxfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
*	O
)	O
&	O
p	*(*(void))
)	O
;	O
}	O
return	O
PROXYKNIFE_THREAD_EXIT	O
;	O
}	O
p	*(*(void))
=	O
q	*(char)
;	O
}	O
s	*(*(char))
=	O
fgets	(*(char),int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(char))
(	O
p	*(*(void))
+	O
offset	long
,	O
linelen	int
,	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
s	*(*(char))
==	O
NULL	O
)	O
{	O
pxfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
*	O
)	O
&	O
p	*(*(void))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
{	O
len	long
=	O
strlen	(*(char))->(long)
(	O
p	*(*(void))
+	O
offset	long
)	O
;	O
if	O
(	O
*	O
(	O
p	*(*(void))
+	O
offset	long
+	O
len	long
-	O
1	int
)	O
==	O
'\n'	O
)	O
{	O
if	O
(	O
*	O
line	*(char)
!=	O
NULL	O
)	O
pxfree	(*(*(void)))->(void)
(	O
(	O
void	O
*	O
*	O
)	O
line	*(char)
)	O
;	O
*	O
line	*(char)
=	O
p	*(*(void))
;	O
*	O
size	long
=	O
psize	int
;	O
return	O
(	O
offset	long
+	O
len	long
)	O
;	O
}	O
else	O
{	O
offset	long
+=	O
len	long
;	O
}	O
}	O
}	O
}	O
