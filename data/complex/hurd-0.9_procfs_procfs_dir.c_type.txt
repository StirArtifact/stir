struct	O
procfs_dir_node	struct(*(struct),*(void))
{	O
const	O
struct	O
procfs_dir_ops	O
*	O
ops	*(struct((*(int))->((*(void),*(*`),*(long))->(int)),*((*(void),*(char),long)->(void)),*((*(void))->(void))))
;	O
void	O
*	O
hook	*(void)
;	O
}	O
;	O
static	O
int	O
entry_exists	(*(struct(*(struct),*(void))),*(struct))->(int)
(	O
struct	O
procfs_dir_node	struct(*(struct),*(void))
*	O
dir	*(struct(*(struct),*(void)))
,	O
const	O
struct	O
procfs_dir_entry	O
*	O
ent	*(struct)
)	O
{	O
if	O
(	O
ent	*(struct)
->	O
ops	*(struct((*(int))->((*(void),*(*`),*(long))->(int)),*((*(void),*(char),long)->(void)),*((*(void))->(void))))
.	O
exists	O
)	O
return	O
ent	*(struct)
->	O
ops	*(struct((*(int))->((*(void),*(*`),*(long))->(int)),*((*(void),*(char),long)->(void)),*((*(void))->(void))))
.	O
exists	O
(	O
dir	*(struct(*(struct),*(void)))
->	O
hook	*(void)
,	O
ent	*(struct)
->	O
hook	*(void)
)	O
;	O
if	O
(	O
dir	*(struct(*(struct),*(void)))
->	O
ops	*(struct((*(int))->((*(void),*(*`),*(long))->(int)),*((*(void),*(char),long)->(void)),*((*(void))->(void))))
->	O
entry_ops	O
.	O
exists	O
)	O
return	O
dir	*(struct(*(struct),*(void)))
->	O
ops	*(struct((*(int))->((*(void),*(*`),*(long))->(int)),*((*(void),*(char),long)->(void)),*((*(void))->(void))))
->	O
entry_ops	O
.	O
exists	O
(	O
dir	*(struct(*(struct),*(void)))
->	O
hook	*(void)
,	O
ent	*(struct)
->	O
hook	*(void)
)	O
;	O
return	O
1	int
;	O
}	O
static	O
error_t	(*(int))->((*(void),*(*(char)),*(long))->(int))
procfs_dir_get_contents	(*(void),*(*(char)),*(long))->(int)
(	O
void	O
*	O
hook	*(void)
,	O
char	O
*	O
*	O
contents	*(*(char))
,	O
ssize_t	long
*	O
contents_len	*(long)
)	O
{	O
static	O
const	O
char	O
dot_dotdot	array(char)
[	O
]	O
=	O
".\0.."	*(char)
;	O
struct	O
procfs_dir_node	struct(*(struct),*(void))
*	O
dir	*(struct(*(struct),*(void)))
=	O
hook	*(void)
;	O
const	O
struct	O
procfs_dir_entry	O
*	O
ent	*(struct)
;	O
int	O
pos	int
;	O
pos	int
=	O
sizeof	O
dot_dotdot	array(char)
;	O
for	O
(	O
ent	*(struct)
=	O
dir	*(struct(*(struct),*(void)))
->	O
ops	*(struct((*(int))->((*(void),*(*`),*(long))->(int)),*((*(void),*(char),long)->(void)),*((*(void))->(void))))
->	O
entries	O
;	O
ent	*(struct)
->	O
name	*(char)
;	O
ent	*(struct)
++	O
)	O
pos	int
+=	O
strlen	(*(char))->(long)
(	O
ent	*(struct)
->	O
name	*(char)
)	O
+	O
1	int
;	O
*	O
contents	*(*(char))
=	O
malloc	(long)->(*(void))
(	O
pos	int
)	O
;	O
if	O
(	O
!	O
*	O
contents	*(*(char))
)	O
return	O
ENOMEM	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
*	O
contents	*(*(char))
,	O
dot_dotdot	array(char)
,	O
sizeof	O
dot_dotdot	array(char)
)	O
;	O
pos	int
=	O
sizeof	O
dot_dotdot	array(char)
;	O
for	O
(	O
ent	*(struct)
=	O
dir	*(struct(*(struct),*(void)))
->	O
ops	*(struct((*(int))->((*(void),*(*`),*(long))->(int)),*((*(void),*(char),long)->(void)),*((*(void))->(void))))
->	O
entries	O
;	O
ent	*(struct)
->	O
name	*(char)
;	O
ent	*(struct)
++	O
)	O
{	O
if	O
(	O
!	O
entry_exists	(*(struct(*(struct),*(void))),*(struct))->(int)
(	O
dir	*(struct(*(struct),*(void)))
,	O
ent	*(struct)
)	O
)	O
continue	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
*	O
contents	*(*(char))
+	O
pos	int
,	O
ent	*(struct)
->	O
name	*(char)
)	O
;	O
pos	int
+=	O
strlen	(*(char))->(long)
(	O
ent	*(struct)
->	O
name	*(char)
)	O
+	O
1	int
;	O
}	O
*	O
contents_len	*(long)
=	O
pos	int
;	O
return	O
0	int
;	O
}	O
static	O
error_t	(*(int))->((*(void),*(*(char)),*(long))->(int))
procfs_dir_lookup	(*(void),*(char),*(*(struct)))->(int)
(	O
void	O
*	O
hook	*(void)
,	O
const	O
char	O
*	O
name	*(char)
,	O
struct	O
node	O
*	O
*	O
np	*(*(struct))
)	O
{	O
struct	O
procfs_dir_node	struct(*(struct),*(void))
*	O
dir	*(struct(*(struct),*(void)))
=	O
hook	*(void)
;	O
const	O
struct	O
procfs_dir_entry	O
*	O
ent	*(struct)
;	O
for	O
(	O
ent	*(struct)
=	O
dir	*(struct(*(struct),*(void)))
->	O
ops	*(struct((*(int))->((*(void),*(*`),*(long))->(int)),*((*(void),*(char),long)->(void)),*((*(void))->(void))))
->	O
entries	O
;	O
ent	*(struct)
->	O
name	*(char)
&&	O
strcmp	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
ent	*(struct)
->	O
name	*(char)
)	O
;	O
ent	*(struct)
++	O
)	O
;	O
if	O
(	O
!	O
ent	*(struct)
->	O
name	*(char)
)	O
return	O
ENOENT	O
;	O
if	O
(	O
ent	*(struct)
->	O
ops	*(struct((*(int))->((*(void),*(*`),*(long))->(int)),*((*(void),*(char),long)->(void)),*((*(void))->(void))))
.	O
make_node	O
)	O
*	O
np	*(*(struct))
=	O
ent	*(struct)
->	O
ops	*(struct((*(int))->((*(void),*(*`),*(long))->(int)),*((*(void),*(char),long)->(void)),*((*(void))->(void))))
.	O
make_node	O
(	O
dir	*(struct(*(struct),*(void)))
->	O
hook	*(void)
,	O
ent	*(struct)
->	O
hook	*(void)
)	O
;	O
else	O
if	O
(	O
dir	*(struct(*(struct),*(void)))
->	O
ops	*(struct((*(int))->((*(void),*(*`),*(long))->(int)),*((*(void),*(char),long)->(void)),*((*(void))->(void))))
->	O
entry_ops	O
.	O
make_node	O
)	O
*	O
np	*(*(struct))
=	O
dir	*(struct(*(struct),*(void)))
->	O
ops	*(struct((*(int))->((*(void),*(*`),*(long))->(int)),*((*(void),*(char),long)->(void)),*((*(void))->(void))))
->	O
entry_ops	O
.	O
make_node	O
(	O
dir	*(struct(*(struct),*(void)))
->	O
hook	*(void)
,	O
ent	*(struct)
->	O
hook	*(void)
)	O
;	O
else	O
return	O
EGRATUITOUS	O
;	O
if	O
(	O
!	O
*	O
np	*(*(struct))
)	O
return	O
ENOMEM	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
procfs_dir_cleanup	(*(void))->(void)
(	O
void	O
*	O
hook	*(void)
)	O
{	O
struct	O
procfs_dir_node	struct(*(struct),*(void))
*	O
dir	*(struct(*(struct),*(void)))
=	O
hook	*(void)
;	O
if	O
(	O
dir	*(struct(*(struct),*(void)))
->	O
ops	*(struct((*(int))->((*(void),*(*`),*(long))->(int)),*((*(void),*(char),long)->(void)),*((*(void))->(void))))
->	O
cleanup	*((*(void))->(void))
)	O
dir	*(struct(*(struct),*(void)))
->	O
ops	*(struct((*(int))->((*(void),*(*`),*(long))->(int)),*((*(void),*(char),long)->(void)),*((*(void))->(void))))
->	O
cleanup	*((*(void))->(void))
(	O
dir	*(struct(*(struct),*(void)))
->	O
hook	*(void)
)	O
;	O
free	(*(void))->(void)
(	O
dir	*(struct(*(struct),*(void)))
)	O
;	O
}	O
struct	O
node	O
*	O
procfs_dir_make_node	(*(struct),*(void))->(*(struct))
(	O
const	O
struct	O
procfs_dir_ops	O
*	O
dir_ops	*(struct)
,	O
void	O
*	O
dir_hook	*(void)
)	O
{	O
static	O
const	O
struct	O
procfs_node_ops	struct((*(int))->((*(void),*(*(char)),*(long))->(int)),*((*(void),*(char),long)->(void)),*((*(void))->(void)))
ops	*(struct((*(int))->((*(void),*(*`),*(long))->(int)),*((*(void),*(char),long)->(void)),*((*(void))->(void))))
=	O
{	O
.	O
get_contents	*(int)
=	O
procfs_dir_get_contents	(*(void),*(*(char)),*(long))->(int)
,	O
.	O
lookup	*(int)
=	O
procfs_dir_lookup	(*(void),*(char),*(*(struct)))->(int)
,	O
.	O
cleanup_contents	*((*(void),*(char),long)->(void))
=	O
procfs_cleanup_contents_with_free	(*(void),*(char),long)->(void)
,	O
.	O
cleanup	*((*(void))->(void))
=	O
procfs_dir_cleanup	(*(void))->(void)
,	O
}	O
;	O
struct	O
procfs_dir_node	struct(*(struct),*(void))
*	O
dir	*(struct(*(struct),*(void)))
;	O
dir	*(struct(*(struct),*(void)))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
*	O
dir	*(struct(*(struct),*(void)))
)	O
;	O
if	O
(	O
!	O
dir	*(struct(*(struct),*(void)))
)	O
{	O
if	O
(	O
dir_ops	*(struct)
->	O
cleanup	*((*(void))->(void))
)	O
dir_ops	*(struct)
->	O
cleanup	*((*(void))->(void))
(	O
dir_hook	*(void)
)	O
;	O
return	O
NULL	O
;	O
}	O
dir	*(struct(*(struct),*(void)))
->	O
ops	*(struct((*(int))->((*(void),*(*`),*(long))->(int)),*((*(void),*(char),long)->(void)),*((*(void))->(void))))
=	O
dir_ops	*(struct)
;	O
dir	*(struct(*(struct),*(void)))
->	O
hook	*(void)
=	O
dir_hook	*(void)
;	O
return	O
procfs_make_node	(*(struct((*(int))->((*`,*`,*`)->(int)),*((*`,*`,long)->(void)),*((*`)->(void)))),*(void))->(*(struct))
(	O
&	O
ops	*(struct((*(int))->((*(void),*(*`),*(long))->(int)),*((*(void),*(char),long)->(void)),*((*(void))->(void))))
,	O
dir	*(struct(*(struct),*(void)))
)	O
;	O
}	O
