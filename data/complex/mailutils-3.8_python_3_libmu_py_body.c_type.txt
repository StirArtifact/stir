static	O
PyObject	O
*	O
_repr	(*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
)	O
{	O
char	O
buf	*(char)
[	O
80	int
]	O
;	O
sprintf	O
(	O
buf	*(char)
,	O
"<"	*(char)
PY_MODULE	*(char)
"."	*(char)
PY_CSNAME	*(char)
" instance at %p>"	*(char)
,	O
self	*(int)
)	O
;	O
return	O
PyUnicode_FromString	()->(int)
(	O
buf	*(char)
)	O
;	O
}	O
static	O
PyTypeObject	O
PyBodyType	int
=	O
{	O
.	O
ob_base	O
=	O
{	O
PyObject_HEAD_INIT	()->(int)
(	O
NULL	O
)	O
}	O
,	O
.	O
tp_name	O
=	O
PY_MODULE	*(char)
"."	*(char)
PY_CSNAME	*(char)
,	O
.	O
tp_basicsize	O
=	O
sizeof	O
(	O
PyBody	O
)	O
,	O
.	O
tp_dealloc	O
=	O
(	O
destructor	O
)	O
_py_dealloc	(*(int))->(void)
,	O
.	O
tp_repr	O
=	O
_repr	(*(int))->(*(int))
,	O
.	O
tp_str	O
=	O
_repr	(*(int))->(*(int))
,	O
.	O
tp_flags	O
=	O
Py_TPFLAGS_DEFAULT	O
,	O
.	O
tp_doc	O
=	O
""	*(char)
,	O
}	O
;	O
PyBody	O
*	O
PyBody_NEW	()->(*(int))
(	O
)	O
{	O
return	O
(	O
PyBody	O
*	O
)	O
PyObject_NEW	O
(	O
PyBody	O
,	O
&	O
PyBodyType	int
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_body_size	(*(int),*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
,	O
PyObject	O
*	O
args	*(int)
)	O
{	O
int	O
status	int
;	O
size_t	int
size	O
;	O
PyBody	O
*	O
py_body	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	()->(int)
(	O
args	*(int)
,	O
"O!"	*(char)
,	O
&	O
PyBodyType	int
,	O
&	O
py_body	O
)	O
)	O
return	O
NULL	O
;	O
status	int
=	O
mu_body_size	()->(int)
(	O
py_body	O
->	O
body	O
,	O
&	O
size	O
)	O
;	O
return	O
status_object	(int,*(int))->(*(int))
(	O
status	int
,	O
PyLong_FromSize_t	()->(int)
(	O
size	O
)	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_body_lines	(*(int),*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
,	O
PyObject	O
*	O
args	*(int)
)	O
{	O
int	O
status	int
;	O
size_t	int
lines	O
;	O
PyBody	O
*	O
py_body	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	()->(int)
(	O
args	*(int)
,	O
"O!"	*(char)
,	O
&	O
PyBodyType	int
,	O
&	O
py_body	O
)	O
)	O
return	O
NULL	O
;	O
status	int
=	O
mu_body_lines	()->(int)
(	O
py_body	O
->	O
body	O
,	O
&	O
lines	O
)	O
;	O
return	O
status_object	(int,*(int))->(*(int))
(	O
status	int
,	O
PyLong_FromSize_t	()->(int)
(	O
lines	O
)	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_body_get_stream	(*(int),*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
,	O
PyObject	O
*	O
args	*(int)
)	O
{	O
int	O
status	int
;	O
PyBody	O
*	O
py_body	O
;	O
PyStream	O
*	O
py_stm	O
=	O
PyStream_NEW	()->(int)
(	O
)	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	()->(int)
(	O
args	*(int)
,	O
"O!"	*(char)
,	O
&	O
PyBodyType	int
,	O
&	O
py_body	O
)	O
)	O
return	O
NULL	O
;	O
Py_INCREF	()->(int)
(	O
py_stm	O
)	O
;	O
status	int
=	O
mu_body_get_streamref	()->(int)
(	O
py_body	O
->	O
body	O
,	O
&	O
py_stm	O
->	O
stm	O
)	O
;	O
return	O
status_object	(int,*(int))->(*(int))
(	O
status	int
,	O
(	O
PyObject	O
*	O
)	O
py_stm	O
)	O
;	O
}	O
static	O
PyMethodDef	O
methods	array(int)
[	O
]	O
=	O
{	O
{	O
"size"	*(char)
,	O
(	O
PyCFunction	O
)	O
api_body_size	(*(int),*(int))->(*(int))
,	O
METH_VARARGS	O
,	O
"Retrieve 'body' size."	*(char)
}	O
,	O
{	O
"lines"	*(char)
,	O
(	O
PyCFunction	O
)	O
api_body_lines	(*(int),*(int))->(*(int))
,	O
METH_VARARGS	O
,	O
"Retrieve 'body' number of lines."	*(char)
}	O
,	O
{	O
"get_stream"	*(char)
,	O
(	O
PyCFunction	O
)	O
api_body_get_stream	(*(int),*(int))->(*(int))
,	O
METH_VARARGS	O
,	O
""	*(char)
}	O
,	O
{	O
NULL	O
,	O
NULL	O
,	O
0	int
,	O
NULL	O
}	O
}	O
;	O
static	O
struct	O
PyModuleDef	O
moduledef	struct
=	O
{	O
PyModuleDef_HEAD_INIT	O
,	O
PY_MODULE	*(char)
,	O
NULL	O
,	O
-	O
1	int
,	O
methods	array(int)
}	O
;	O
int	O
mu_py_init_body	()->(int)
(	O
void	O
)	O
{	O
PyBodyType	int
.	O
tp_new	O
=	O
PyType_GenericNew	O
;	O
return	O
PyType_Ready	()->(int)
(	O
&	O
PyBodyType	int
)	O
;	O
}	O
void	O
_mu_py_attach_body	()->(void)
(	O
void	O
)	O
{	O
PyObject	O
*	O
m	O
;	O
if	O
(	O
(	O
m	O
=	O
_mu_py_attach_module	(*(struct))->(*(int))
(	O
&	O
moduledef	struct
)	O
)	O
)	O
{	O
Py_INCREF	()->(int)
(	O
&	O
PyBodyType	int
)	O
;	O
PyModule_AddObject	()->(int)
(	O
m	O
,	O
PY_CSNAME	*(char)
,	O
(	O
PyObject	O
*	O
)	O
&	O
PyBodyType	int
)	O
;	O
}	O
}	O
