char	O
*	O
new_classpath	(*(*(char)),int,bool)->(*(char))
(	O
const	O
char	O
*	O
const	O
*	O
classpaths	*(*(char))
,	O
unsigned	O
int	O
classpaths_count	int
,	O
bool	bool
use_minimal_classpath	bool
)	O
{	O
const	O
char	O
*	O
old_classpath	*(char)
;	O
unsigned	O
int	O
length	int
;	O
unsigned	O
int	O
i	int
;	O
char	O
*	O
result	*(char)
;	O
char	O
*	O
p	*(void)
;	O
old_classpath	*(char)
=	O
(	O
use_minimal_classpath	bool
?	O
NULL	O
:	O
getenv	(*(char))->(*(char))
(	O
CLASSPATHVAR	*(char)
)	O
)	O
;	O
if	O
(	O
old_classpath	*(char)
==	O
NULL	O
)	O
old_classpath	*(char)
=	O
""	*(char)
;	O
length	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
classpaths_count	int
;	O
i	int
++	O
)	O
length	int
+=	O
strlen	(*(char))->(long)
(	O
classpaths	*(*(char))
[	O
i	int
]	O
)	O
+	O
1	int
;	O
length	int
+=	O
strlen	(*(char))->(long)
(	O
old_classpath	*(char)
)	O
;	O
if	O
(	O
classpaths_count	int
>	O
0	int
&&	O
old_classpath	*(char)
[	O
0	int
]	O
==	O
'\0'	O
)	O
length	int
--	O
;	O
result	*(char)
=	O
XNMALLOC	O
(	O
length	int
+	O
1	int
,	O
char	O
)	O
;	O
p	*(void)
=	O
result	*(char)
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
classpaths_count	int
;	O
i	int
++	O
)	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
p	*(void)
,	O
classpaths	*(*(char))
[	O
i	int
]	O
,	O
strlen	(*(char))->(long)
(	O
classpaths	*(*(char))
[	O
i	int
]	O
)	O
)	O
;	O
p	*(void)
+=	O
strlen	(*(char))->(long)
(	O
classpaths	*(*(char))
[	O
i	int
]	O
)	O
;	O
*	O
p	*(void)
++	O
=	O
PATH_SEPARATOR	char
;	O
}	O
if	O
(	O
old_classpath	*(char)
[	O
0	int
]	O
!=	O
'\0'	O
)	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
p	*(void)
,	O
old_classpath	*(char)
,	O
strlen	(*(char))->(long)
(	O
old_classpath	*(char)
)	O
)	O
;	O
p	*(void)
+=	O
strlen	(*(char))->(long)
(	O
old_classpath	*(char)
)	O
;	O
}	O
else	O
{	O
if	O
(	O
classpaths_count	int
>	O
0	int
)	O
p	*(void)
--	O
;	O
}	O
*	O
p	*(void)
=	O
'\0'	O
;	O
return	O
result	*(char)
;	O
}	O
char	O
*	O
set_classpath	(*(*(char)),int,bool,bool)->(*(char))
(	O
const	O
char	O
*	O
const	O
*	O
classpaths	*(*(char))
,	O
unsigned	O
int	O
classpaths_count	int
,	O
bool	bool
use_minimal_classpath	bool
,	O
bool	bool
verbose	bool
)	O
{	O
const	O
char	O
*	O
old_CLASSPATH	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
CLASSPATHVAR	*(char)
)	O
;	O
char	O
*	O
result	*(char)
=	O
(	O
old_CLASSPATH	*(char)
!=	O
NULL	O
?	O
xstrdup	(*(char))->(*(char))
(	O
old_CLASSPATH	*(char)
)	O
:	O
NULL	O
)	O
;	O
char	O
*	O
new_CLASSPATH	*(char)
=	O
new_classpath	(*(*(char)),int,bool)->(*(char))
(	O
classpaths	*(*(char))
,	O
classpaths_count	int
,	O
use_minimal_classpath	bool
)	O
;	O
if	O
(	O
verbose	bool
)	O
printf	(*(char))->(int)
(	O
CLASSPATHVAR	*(char)
"=%s "	*(char)
,	O
new_CLASSPATH	*(char)
)	O
;	O
xsetenv	(*(char),*(char),int)->(void)
(	O
CLASSPATHVAR	*(char)
,	O
new_CLASSPATH	*(char)
,	O
1	int
)	O
;	O
free	(*(void))->(void)
(	O
new_CLASSPATH	*(char)
)	O
;	O
return	O
result	*(char)
;	O
}	O
void	O
reset_classpath	(*(char))->(void)
(	O
char	O
*	O
old_classpath	*(char)
)	O
{	O
if	O
(	O
old_classpath	*(char)
!=	O
NULL	O
)	O
{	O
xsetenv	(*(char),*(char),int)->(void)
(	O
CLASSPATHVAR	*(char)
,	O
old_classpath	*(char)
,	O
1	int
)	O
;	O
free	(*(void))->(void)
(	O
old_classpath	*(char)
)	O
;	O
}	O
else	O
unsetenv	(*(char))->(int)
(	O
CLASSPATHVAR	*(char)
)	O
;	O
}	O
