static	O
double	O
aclaus_data	array(double)
[	O
15	int
]	O
=	O
{	O
2.142694363766688447e+00	int
,	O
0.723324281221257925e-01	int
,	O
0.101642475021151164e-02	int
,	O
0.3245250328531645e-04	int
,	O
0.133315187571472e-05	int
,	O
0.6213240591653e-07	int
,	O
0.313004135337e-08	int
,	O
0.16635723056e-09	int
,	O
0.919659293e-11	int
,	O
0.52400462e-12	int
,	O
0.3058040e-13	int
,	O
0.18197e-14	int
,	O
0.1100e-15	int
,	O
0.68e-17	int
,	O
0.4e-18	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
aclaus_cs	struct(*(double),int,double,double,int)
=	O
{	O
aclaus_data	array(double)
,	O
14	int
,	O
-	O
1	int
,	O
1	int
,	O
8	int
}	O
;	O
int	O
gsl_sf_clausen_e	(double,*(struct(double,double)))->(int)
(	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
const	O
double	O
x_cut	double
=	O
M_PI	int
*	O
GSL_SQRT_DBL_EPSILON	int
;	O
double	O
sgn	double
=	O
1.0	int
;	O
int	O
status_red	int
;	O
if	O
(	O
x	double
<	O
0.0	int
)	O
{	O
x	double
=	O
-	O
x	double
;	O
sgn	double
=	O
-	O
1.0	int
;	O
}	O
status_red	int
=	O
gsl_sf_angle_restrict_pos_e	(*(double))->(int)
(	O
&	O
x	double
)	O
;	O
if	O
(	O
x	double
>	O
M_PI	int
)	O
{	O
const	O
double	O
p0	double
=	O
6.28125	int
;	O
const	O
double	O
p1	double
=	O
0.19353071795864769253e-02	int
;	O
x	double
=	O
(	O
p0	double
-	O
x	double
)	O
+	O
p1	double
;	O
sgn	double
=	O
-	O
sgn	double
;	O
}	O
if	O
(	O
x	double
==	O
0.0	int
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
0.0	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
0.0	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
x_cut	double
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
x	double
*	O
(	O
1.0	int
-	O
log	(double)->(double)
(	O
x	double
)	O
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
x	double
*	O
GSL_DBL_EPSILON	int
;	O
}	O
else	O
{	O
const	O
double	O
t	double
=	O
2.0	int
*	O
(	O
x	double
*	O
x	double
/	O
(	O
M_PI	int
*	O
M_PI	int
)	O
-	O
0.5	int
)	O
;	O
gsl_sf_result	struct(double,double)
result_c	struct(double,double)
;	O
cheb_eval_e	(*(struct(*(double),int,double,double,int)),double,*(struct(double,double)))->(int)
(	O
&	O
aclaus_cs	struct(*(double),int,double,double,int)
,	O
t	double
,	O
&	O
result_c	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
x	double
*	O
(	O
result_c	struct(double,double)
.	O
val	double
-	O
log	(double)->(double)
(	O
x	double
)	O
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
x	double
*	O
(	O
result_c	struct(double,double)
.	O
err	double
+	O
GSL_DBL_EPSILON	int
)	O
;	O
}	O
result	*(struct(double,double))
->	O
val	double
*=	O
sgn	double
;	O
return	O
status_red	int
;	O
}	O
double	O
gsl_sf_clausen	(double)->(double)
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_clausen_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
