static	O
error_t	O
lookup_user	(*(struct(*(struct(*`,*`,*`)),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int)),*(char),*(*(struct)))->(int)
(	O
struct	O
usermux	struct(*(struct),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int)
*	O
mux	*(struct(*(struct(*(char),*(struct`),*(struct`))),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int))
,	O
const	O
char	O
*	O
user	*(char)
,	O
struct	O
node	*(struct)
*	O
*	O
node	*(struct)
)	O
;	O
error_t	O
netfs_attempt_lookup	(*(struct),*(struct),*(char),*(*(struct)))->(int)
(	O
struct	O
iouser	O
*	O
user	*(char)
,	O
struct	O
node	*(struct)
*	O
dir	*(struct)
,	O
char	O
*	O
name	*(char)
,	O
struct	O
node	*(struct)
*	O
*	O
node	*(struct)
)	O
{	O
error_t	O
err	O
;	O
if	O
(	O
dir	*(struct)
->	O
nn	O
->	O
name	*(char)
)	O
err	O
=	O
ENOTDIR	O
;	O
else	O
err	O
=	O
lookup_user	(*(struct(*(struct(*`,*`,*`)),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int)),*(char),*(*(struct)))->(int)
(	O
dir	*(struct)
->	O
nn	O
->	O
mux	*(struct(*(struct(*(char),*(struct`),*(struct`))),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int))
,	O
name	*(char)
,	O
node	*(struct)
)	O
;	O
fshelp_touch	()->(int)
(	O
&	O
dir	*(struct)
->	O
nn_stat	O
,	O
TOUCH_ATIME	O
,	O
usermux_maptime	*(struct)
)	O
;	O
pthread_mutex_unlock	(*(union(struct(int,int,int,int,int,short,short,struct(*`,*`)),array(char),long)))->(int)
(	O
&	O
dir	*(struct)
->	O
lock	O
)	O
;	O
if	O
(	O
!	O
err	O
)	O
pthread_mutex_lock	(*(union(struct(int,int,int,int,int,short,short,struct(*`,*`)),array(char),long)))->(int)
(	O
&	O
(	O
*	O
node	*(struct)
)	O
->	O
lock	O
)	O
;	O
return	O
err	O
;	O
}	O
static	O
error_t	O
get_dirents	(*(struct),int,int,*(*(char)),*(int),int,*(int))->(int)
(	O
struct	O
node	*(struct)
*	O
dir	*(struct)
,	O
int	O
first_entry	int
,	O
int	O
max_entries	int
,	O
char	O
*	O
*	O
data	*(*(char))
,	O
mach_msg_type_number_t	O
*	O
data_len	*(int)
,	O
vm_size_t	O
max_data_len	int
,	O
int	O
*	O
data_entries	*(int)
)	O
{	O
error_t	O
err	O
=	O
0	int
;	O
if	O
(	O
dir	*(struct)
->	O
nn	O
->	O
name	*(char)
)	O
return	O
ENOTDIR	O
;	O
setpwent	()->(void)
(	O
)	O
;	O
while	O
(	O
first_entry	int
--	O
>	O
0	int
)	O
if	O
(	O
!	O
getpwent	()->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
)	O
)	O
{	O
max_entries	int
=	O
0	int
;	O
break	O
;	O
}	O
if	O
(	O
max_entries	int
!=	O
0	int
)	O
{	O
size_t	long
size	long
=	O
(	O
max_data_len	int
==	O
0	int
?	O
DIRENTS_CHUNK_SIZE	O
:	O
max_data_len	int
)	O
;	O
*	O
data	*(*(char))
=	O
mmap	(*(void),long,int,int,int,long)->(*(void))
(	O
0	int
,	O
size	long
,	O
PROT_READ	int
|	O
PROT_WRITE	int
,	O
MAP_ANON	O
,	O
0	int
,	O
0	int
)	O
;	O
err	O
=	O
(	O
data	*(*(char))
!=	O
(	O
void	O
*	O
)	O
-	O
1	int
)	O
?	O
errno	O
:	O
0	int
;	O
if	O
(	O
!	O
err	O
)	O
{	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
;	O
char	O
*	O
p	*(char)
=	O
*	O
data	*(*(char))
;	O
int	O
count	int
=	O
0	int
;	O
int	O
entry_type	int
=	O
(	O
S_ISLNK	()->(int)
(	O
dir	*(struct)
->	O
nn	O
->	O
mux	*(struct(*(struct(*(char),*(struct`),*(struct`))),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int))
->	O
stat_template	struct
.	O
st_mode	O
)	O
?	O
DT_LNK	int
:	O
DT_REG	int
)	O
;	O
while	O
(	O
(	O
max_entries	int
==	O
-	O
1	int
||	O
count	int
<	O
max_entries	int
)	O
&&	O
(	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
getpwent	()->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
)	O
)	O
)	O
{	O
struct	O
dirent	struct(long,long,short,char,array(char))
hdr	struct(long,long,short,char,array(char))
;	O
size_t	long
name_len	long
=	O
strlen	(*(char))->(long)
(	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
)	O
;	O
size_t	long
sz	long
=	O
DIRENT_LEN	O
(	O
name_len	long
)	O
;	O
if	O
(	O
(	O
p	*(char)
-	O
*	O
data	*(*(char))
)	O
+	O
sz	long
>	O
size	long
)	O
{	O
if	O
(	O
max_data_len	int
>	O
0	int
)	O
break	O
;	O
else	O
{	O
vm_address_t	O
extension	O
=	O
(	O
vm_address_t	O
)	O
(	O
*	O
data	*(*(char))
+	O
size	long
)	O
;	O
err	O
=	O
vm_allocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
&	O
extension	O
,	O
DIRENTS_CHUNK_SIZE	O
,	O
0	int
)	O
;	O
if	O
(	O
err	O
)	O
break	O
;	O
size	long
+=	O
DIRENTS_CHUNK_SIZE	O
;	O
}	O
}	O
hdr	struct(long,long,short,char,array(char))
.	O
d_namlen	O
=	O
name_len	long
;	O
hdr	struct(long,long,short,char,array(char))
.	O
d_fileno	O
=	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_uid	int
+	O
USERMUX_FILENO_UID_OFFSET	int
;	O
hdr	struct(long,long,short,char,array(char))
.	O
d_reclen	short
=	O
sz	long
;	O
hdr	struct(long,long,short,char,array(char))
.	O
d_type	char
=	O
entry_type	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
p	*(char)
,	O
&	O
hdr	struct(long,long,short,char,array(char))
,	O
DIRENT_NAME_OFFS	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
p	*(char)
+	O
DIRENT_NAME_OFFS	O
,	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
)	O
;	O
p	*(char)
+=	O
sz	long
;	O
count	int
++	O
;	O
}	O
if	O
(	O
err	O
)	O
munmap	(*(void),long)->(int)
(	O
*	O
data	*(*(char))
,	O
size	long
)	O
;	O
else	O
{	O
vm_address_t	O
alloc_end	O
=	O
(	O
vm_address_t	O
)	O
(	O
*	O
data	*(*(char))
+	O
size	long
)	O
;	O
vm_address_t	O
real_end	O
=	O
round_page	O
(	O
p	*(char)
)	O
;	O
if	O
(	O
alloc_end	O
>	O
real_end	O
)	O
munmap	(*(void),long)->(int)
(	O
(	O
caddr_t	O
)	O
real_end	O
,	O
alloc_end	O
-	O
real_end	O
)	O
;	O
*	O
data_len	*(int)
=	O
p	*(char)
-	O
*	O
data	*(*(char))
;	O
*	O
data_entries	*(int)
=	O
count	int
;	O
}	O
}	O
}	O
endpwent	()->(void)
(	O
)	O
;	O
return	O
err	O
;	O
}	O
error_t	O
netfs_get_dirents	(*(struct),*(struct),int,int,*(*(char)),*(int),int,*(int))->(int)
(	O
struct	O
iouser	O
*	O
cred	*(struct)
,	O
struct	O
node	*(struct)
*	O
dir	*(struct)
,	O
int	O
first_entry	int
,	O
int	O
max_entries	int
,	O
char	O
*	O
*	O
data	*(*(char))
,	O
mach_msg_type_number_t	O
*	O
data_len	*(int)
,	O
vm_size_t	O
max_data_len	int
,	O
int	O
*	O
data_entries	*(int)
)	O
{	O
error_t	O
err	O
;	O
static	O
time_t	long
cache_timestamp	long
=	O
0	int
;	O
static	O
pthread_rwlock_t	union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long)
cache_lock	union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long)
=	O
PTHREAD_RWLOCK_INITIALIZER	O
;	O
static	O
char	O
*	O
cached_data	*(char)
=	O
0	int
;	O
static	O
mach_msg_type_number_t	O
cached_data_len	int
=	O
0	int
;	O
static	O
int	O
cached_data_entries	int
=	O
0	int
;	O
struct	O
timeval	struct(long,long)
tv	struct(long,long)
;	O
char	O
*	O
first	*(char)
;	O
size_t	long
bytes_left	long
,	O
entries_left	long
;	O
maptime_read	()->(int)
(	O
usermux_maptime	*(struct)
,	O
&	O
tv	struct(long,long)
)	O
;	O
if	O
(	O
tv	struct(long,long)
.	O
tv_sec	long
>	O
cache_timestamp	long
+	O
DIRENTS_CACHE_TIME	int
)	O
{	O
pthread_rwlock_wrlock	(*(union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long)))->(int)
(	O
&	O
cache_lock	union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long)
)	O
;	O
if	O
(	O
cached_data_len	int
>	O
0	int
)	O
{	O
munmap	(*(void),long)->(int)
(	O
cached_data	*(char)
,	O
cached_data_len	int
)	O
;	O
cached_data	*(char)
=	O
0	int
;	O
cached_data_len	int
=	O
0	int
;	O
}	O
err	O
=	O
get_dirents	(*(struct),int,int,*(*(char)),*(int),int,*(int))->(int)
(	O
dir	*(struct)
,	O
0	int
,	O
-	O
1	int
,	O
&	O
cached_data	*(char)
,	O
&	O
cached_data_len	int
,	O
0	int
,	O
&	O
cached_data_entries	int
)	O
;	O
if	O
(	O
!	O
err	O
)	O
cache_timestamp	long
=	O
tv	struct(long,long)
.	O
tv_sec	long
;	O
pthread_rwlock_unlock	(*(union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long)))->(int)
(	O
&	O
cache_lock	union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long)
)	O
;	O
if	O
(	O
err	O
)	O
return	O
err	O
;	O
}	O
pthread_rwlock_rdlock	(*(union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long)))->(int)
(	O
&	O
cache_lock	union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long)
)	O
;	O
first	*(char)
=	O
cached_data	*(char)
;	O
bytes_left	long
=	O
cached_data_len	int
;	O
entries_left	long
=	O
cached_data_entries	int
;	O
while	O
(	O
first_entry	int
>	O
0	int
)	O
{	O
struct	O
dirent	struct(long,long,short,char,array(char))
*	O
e	*(struct(long,long,short,char,array(char)))
=	O
(	O
struct	O
dirent	struct(long,long,short,char,array(char))
*	O
)	O
first	*(char)
;	O
if	O
(	O
entries_left	long
==	O
0	int
)	O
{	O
pthread_rwlock_unlock	(*(union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long)))->(int)
(	O
&	O
cache_lock	union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long)
)	O
;	O
return	O
EINVAL	O
;	O
}	O
first	*(char)
+=	O
e	*(struct(long,long,short,char,array(char)))
->	O
d_reclen	short
;	O
bytes_left	long
-=	O
e	*(struct(long,long,short,char,array(char)))
->	O
d_reclen	short
;	O
entries_left	long
--	O
;	O
}	O
if	O
(	O
(	O
max_data_len	int
>	O
0	int
&&	O
max_data_len	int
<	O
bytes_left	long
)	O
||	O
(	O
max_entries	int
>	O
0	int
&&	O
max_entries	int
<	O
entries_left	long
)	O
)	O
{	O
char	O
*	O
lim	*(char)
=	O
first	*(char)
;	O
int	O
entries	int
=	O
0	int
;	O
while	O
(	O
entries_left	long
>	O
0	int
&&	O
max_entries	int
>	O
0	int
&&	O
max_data_len	int
>	O
(	O
(	O
struct	O
dirent	struct(long,long,short,char,array(char))
*	O
)	O
lim	*(char)
)	O
->	O
d_reclen	short
)	O
{	O
size_t	long
reclen	long
=	O
(	O
(	O
struct	O
dirent	struct(long,long,short,char,array(char))
*	O
)	O
lim	*(char)
)	O
->	O
d_reclen	short
;	O
max_data_len	int
-=	O
reclen	long
;	O
max_entries	int
--	O
;	O
entries	int
++	O
;	O
lim	*(char)
+=	O
reclen	long
;	O
}	O
bytes_left	long
=	O
(	O
lim	*(char)
-	O
first	*(char)
)	O
;	O
entries_left	long
=	O
entries	int
;	O
}	O
*	O
data_len	*(int)
=	O
bytes_left	long
;	O
*	O
data_entries	*(int)
=	O
entries_left	long
;	O
*	O
data	*(*(char))
=	O
mmap	(*(void),long,int,int,int,long)->(*(void))
(	O
0	int
,	O
bytes_left	long
,	O
PROT_READ	int
|	O
PROT_WRITE	int
,	O
MAP_ANON	O
,	O
0	int
,	O
0	int
)	O
;	O
err	O
=	O
(	O
*	O
data	*(*(char))
==	O
(	O
void	O
*	O
)	O
-	O
1	int
)	O
?	O
errno	O
:	O
0	int
;	O
if	O
(	O
!	O
err	O
)	O
bcopy	(*(void),*(void),long)->(void)
(	O
cached_data	*(char)
,	O
*	O
data	*(*(char))
,	O
bytes_left	long
)	O
;	O
pthread_rwlock_unlock	(*(union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long)))->(int)
(	O
&	O
cache_lock	union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long)
)	O
;	O
fshelp_touch	()->(int)
(	O
&	O
dir	*(struct)
->	O
nn_stat	O
,	O
TOUCH_ATIME	O
,	O
usermux_maptime	*(struct)
)	O
;	O
return	O
err	O
;	O
}	O
static	O
void	O
free_name	(*(struct(*(char),*(struct),*(struct(*`,*`,*`)))))->(void)
(	O
struct	O
usermux_name	struct(*(char),*(struct),*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`))))))
*	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
)	O
{	O
free	()->(int)
(	O
(	O
char	O
*	O
)	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
->	O
name	*(char)
)	O
;	O
free	()->(int)
(	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
)	O
;	O
}	O
static	O
int	O
lookup_cached	(*(struct(*(struct(*`,*`,*`)),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int)),*(char),int,*(*(struct)))->(int)
(	O
struct	O
usermux	struct(*(struct),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int)
*	O
mux	*(struct(*(struct(*(char),*(struct`),*(struct`))),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int))
,	O
const	O
char	O
*	O
user	*(char)
,	O
int	O
purge	int
,	O
struct	O
node	*(struct)
*	O
*	O
node	*(struct)
)	O
{	O
struct	O
usermux_name	struct(*(char),*(struct),*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`))))))
*	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
=	O
mux	*(struct(*(struct(*(char),*(struct`),*(struct`))),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int))
->	O
names	*(struct)
,	O
*	O
*	O
prevl	*(*(struct(*(char),*(struct),*(struct(*`,*`,*`)))))
=	O
&	O
mux	*(struct(*(struct(*(char),*(struct`),*(struct`))),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int))
->	O
names	*(struct)
;	O
while	O
(	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
)	O
{	O
struct	O
usermux_name	struct(*(char),*(struct),*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`))))))
*	O
next	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
=	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
->	O
next	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
;	O
if	O
(	O
strcasecmp	(*(char),*(char))->(int)
(	O
user	*(char)
,	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
->	O
name	*(char)
)	O
==	O
0	int
)	O
{	O
if	O
(	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
->	O
node	*(struct)
)	O
netfs_nref	()->(int)
(	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
->	O
node	*(struct)
)	O
;	O
if	O
(	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
->	O
node	*(struct)
)	O
{	O
*	O
node	*(struct)
=	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
->	O
node	*(struct)
;	O
return	O
1	int
;	O
}	O
}	O
if	O
(	O
purge	int
&&	O
!	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
->	O
node	*(struct)
)	O
{	O
*	O
prevl	*(*(struct(*(char),*(struct),*(struct(*`,*`,*`)))))
=	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
->	O
next	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
;	O
free_name	(*(struct(*(char),*(struct),*(struct(*`,*`,*`)))))->(void)
(	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
)	O
;	O
}	O
else	O
prevl	*(*(struct(*(char),*(struct),*(struct(*`,*`,*`)))))
=	O
&	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
->	O
next	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
;	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
=	O
next	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
;	O
}	O
return	O
0	int
;	O
}	O
static	O
error_t	O
lookup_pwent	(*(struct(*(struct(*`,*`,*`)),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int)),*(char),*(struct(*(char),*(char),int,int,*(char),*(char),*(char))),*(*(struct)))->(int)
(	O
struct	O
usermux	struct(*(struct),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int)
*	O
mux	*(struct(*(struct(*(char),*(struct`),*(struct`))),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int))
,	O
const	O
char	O
*	O
user	*(char)
,	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
,	O
struct	O
node	*(struct)
*	O
*	O
node	*(struct)
)	O
{	O
error_t	O
err	O
;	O
struct	O
usermux_name	struct(*(char),*(struct),*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`))))))
*	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
=	O
malloc	O
(	O
sizeof	O
(	O
struct	O
usermux_name	struct(*(char),*(struct),*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`))))))
)	O
)	O
;	O
if	O
(	O
!	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
)	O
return	O
ENOMEM	O
;	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
->	O
name	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
user	*(char)
)	O
;	O
err	O
=	O
create_user_node	(*(struct(*(struct(*`,*`,*`)),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int)),*(struct(*(char),*(struct),*(struct(*`,*`,*`)))),*(struct(*(char),*(char),int,int,*(char),*(char),*(char))),*(*(struct)))->(int)
(	O
mux	*(struct(*(struct(*(char),*(struct`),*(struct`))),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int))
,	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
,	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
,	O
node	*(struct)
)	O
;	O
if	O
(	O
err	O
)	O
{	O
free_name	(*(struct(*(char),*(struct),*(struct(*`,*`,*`)))))->(void)
(	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
)	O
;	O
return	O
err	O
;	O
}	O
pthread_rwlock_wrlock	(*(union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long)))->(int)
(	O
&	O
mux	*(struct(*(struct(*(char),*(struct`),*(struct`))),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int))
->	O
names_lock	union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long)
)	O
;	O
if	O
(	O
lookup_cached	(*(struct(*(struct(*`,*`,*`)),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int)),*(char),int,*(*(struct)))->(int)
(	O
mux	*(struct(*(struct(*(char),*(struct`),*(struct`))),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int))
,	O
user	*(char)
,	O
1	int
,	O
node	*(struct)
)	O
)	O
{	O
pthread_rwlock_unlock	(*(union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long)))->(int)
(	O
&	O
mux	*(struct(*(struct(*(char),*(struct`),*(struct`))),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int))
->	O
names_lock	union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long)
)	O
;	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
->	O
node	*(struct)
->	O
nn	O
->	O
name	*(char)
=	O
0	int
;	O
netfs_nrele	()->(int)
(	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
->	O
node	*(struct)
)	O
;	O
free_name	(*(struct(*(char),*(struct),*(struct(*`,*`,*`)))))->(void)
(	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
)	O
;	O
}	O
else	O
{	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
->	O
next	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
=	O
mux	*(struct(*(struct(*(char),*(struct`),*(struct`))),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int))
->	O
names	*(struct)
;	O
mux	*(struct(*(struct(*(char),*(struct`),*(struct`))),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int))
->	O
names	*(struct)
=	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
;	O
pthread_rwlock_unlock	(*(union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long)))->(int)
(	O
&	O
mux	*(struct(*(struct(*(char),*(struct`),*(struct`))),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int))
->	O
names_lock	union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long)
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
error_t	O
lookup_user	(*(struct(*(struct(*`,*`,*`)),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int)),*(char),*(*(struct)))->(int)
(	O
struct	O
usermux	struct(*(struct),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int)
*	O
mux	*(struct(*(struct(*(char),*(struct`),*(struct`))),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int))
,	O
const	O
char	O
*	O
user	*(char)
,	O
struct	O
node	*(struct)
*	O
*	O
node	*(struct)
)	O
{	O
int	O
was_cached	int
;	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
_pw	struct(*(char),*(char),int,int,*(char),*(char),*(char))
,	O
*	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
;	O
char	O
pwent_data	array(char)
[	O
2048	int
]	O
;	O
pthread_rwlock_rdlock	(*(union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long)))->(int)
(	O
&	O
mux	*(struct(*(struct(*(char),*(struct`),*(struct`))),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int))
->	O
names_lock	union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long)
)	O
;	O
was_cached	int
=	O
lookup_cached	(*(struct(*(struct(*`,*`,*`)),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int)),*(char),int,*(*(struct)))->(int)
(	O
mux	*(struct(*(struct(*(char),*(struct`),*(struct`))),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int))
,	O
user	*(char)
,	O
0	int
,	O
node	*(struct)
)	O
;	O
pthread_rwlock_unlock	(*(union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long)))->(int)
(	O
&	O
mux	*(struct(*(struct(*(char),*(struct`),*(struct`))),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int))
->	O
names_lock	union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long)
)	O
;	O
if	O
(	O
was_cached	int
)	O
return	O
0	int
;	O
else	O
{	O
if	O
(	O
getpwnam_r	(*(char),*(struct(*(char),*(char),int,int,*(char),*(char),*(char))),*(char),long,*(*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))))->(int)
(	O
user	*(char)
,	O
&	O
_pw	struct(*(char),*(char),int,int,*(char),*(char),*(char))
,	O
pwent_data	array(char)
,	O
sizeof	O
pwent_data	array(char)
,	O
&	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
)	O
)	O
return	O
ENOENT	O
;	O
if	O
(	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
==	O
NULL	O
)	O
return	O
ENOENT	O
;	O
return	O
lookup_pwent	(*(struct(*(struct(*`,*`,*`)),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int)),*(char),*(struct(*(char),*(char),int,int,*(char),*(char),*(char))),*(*(struct)))->(int)
(	O
mux	*(struct(*(struct(*(char),*(struct`),*(struct`))),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int))
,	O
user	*(char)
,	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
,	O
node	*(struct)
)	O
;	O
}	O
}	O
error_t	O
netfs_attempt_syncfs	(*(struct),int)->(int)
(	O
struct	O
iouser	O
*	O
cred	*(struct)
,	O
int	O
wait	int
)	O
{	O
return	O
0	int
;	O
}	O
error_t	O
netfs_attempt_chown	(*(struct),*(struct),int,int)->(int)
(	O
struct	O
iouser	O
*	O
cred	*(struct)
,	O
struct	O
node	*(struct)
*	O
node	*(struct)
,	O
uid_t	int
uid	int
,	O
uid_t	int
gid	int
)	O
{	O
if	O
(	O
node	*(struct)
->	O
nn	O
->	O
name	*(char)
)	O
return	O
EOPNOTSUPP	O
;	O
else	O
{	O
struct	O
usermux	struct(*(struct),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int)
*	O
mux	*(struct(*(struct(*(char),*(struct`),*(struct`))),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int))
=	O
node	*(struct)
->	O
nn	O
->	O
mux	*(struct(*(struct(*(char),*(struct`),*(struct`))),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int))
;	O
error_t	O
err	O
=	O
file_chown	O
(	O
mux	*(struct(*(struct(*(char),*(struct`),*(struct`))),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int))
->	O
underlying	int
,	O
uid	int
,	O
gid	int
)	O
;	O
if	O
(	O
!	O
err	O
)	O
{	O
struct	O
usermux_name	struct(*(char),*(struct),*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`))))))
*	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
;	O
mux	*(struct(*(struct(*(char),*(struct`),*(struct`))),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int))
->	O
stat_template	struct
.	O
st_uid	O
=	O
uid	int
;	O
mux	*(struct(*(struct(*(char),*(struct`),*(struct`))),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int))
->	O
stat_template	struct
.	O
st_gid	O
=	O
gid	int
;	O
node	*(struct)
->	O
nn_stat	O
.	O
st_uid	O
=	O
uid	int
;	O
node	*(struct)
->	O
nn_stat	O
.	O
st_gid	O
=	O
gid	int
;	O
pthread_rwlock_rdlock	(*(union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long)))->(int)
(	O
&	O
mux	*(struct(*(struct(*(char),*(struct`),*(struct`))),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int))
->	O
names_lock	union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long)
)	O
;	O
for	O
(	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
=	O
mux	*(struct(*(struct(*(char),*(struct`),*(struct`))),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int))
->	O
names	*(struct)
;	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
;	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
=	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
->	O
next	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
)	O
if	O
(	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
->	O
node	*(struct)
)	O
{	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
->	O
node	*(struct)
->	O
nn_stat	O
.	O
st_uid	O
=	O
uid	int
;	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
->	O
node	*(struct)
->	O
nn_stat	O
.	O
st_gid	O
=	O
gid	int
;	O
}	O
pthread_rwlock_unlock	(*(union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long)))->(int)
(	O
&	O
mux	*(struct(*(struct(*(char),*(struct`),*(struct`))),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int))
->	O
names_lock	union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long)
)	O
;	O
fshelp_touch	()->(int)
(	O
&	O
node	*(struct)
->	O
nn_stat	O
,	O
TOUCH_CTIME	O
,	O
usermux_maptime	*(struct)
)	O
;	O
}	O
return	O
err	O
;	O
}	O
}	O
error_t	O
netfs_attempt_chauthor	(*(struct),*(struct),int)->(int)
(	O
struct	O
iouser	O
*	O
cred	*(struct)
,	O
struct	O
node	*(struct)
*	O
node	*(struct)
,	O
uid_t	int
author	int
)	O
{	O
if	O
(	O
node	*(struct)
->	O
nn	O
->	O
name	*(char)
)	O
return	O
EOPNOTSUPP	O
;	O
else	O
{	O
struct	O
usermux	struct(*(struct),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int)
*	O
mux	*(struct(*(struct(*(char),*(struct`),*(struct`))),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int))
=	O
node	*(struct)
->	O
nn	O
->	O
mux	*(struct(*(struct(*(char),*(struct`),*(struct`))),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int))
;	O
error_t	O
err	O
=	O
file_chauthor	O
(	O
mux	*(struct(*(struct(*(char),*(struct`),*(struct`))),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int))
->	O
underlying	int
,	O
author	int
)	O
;	O
if	O
(	O
!	O
err	O
)	O
{	O
struct	O
usermux_name	struct(*(char),*(struct),*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`))))))
*	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
;	O
mux	*(struct(*(struct(*(char),*(struct`),*(struct`))),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int))
->	O
stat_template	struct
.	O
st_author	O
=	O
author	int
;	O
node	*(struct)
->	O
nn_stat	O
.	O
st_author	O
=	O
author	int
;	O
pthread_rwlock_rdlock	(*(union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long)))->(int)
(	O
&	O
mux	*(struct(*(struct(*(char),*(struct`),*(struct`))),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int))
->	O
names_lock	union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long)
)	O
;	O
for	O
(	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
=	O
mux	*(struct(*(struct(*(char),*(struct`),*(struct`))),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int))
->	O
names	*(struct)
;	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
;	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
=	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
->	O
next	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
)	O
if	O
(	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
->	O
node	*(struct)
)	O
nm	*(struct(*(char),*(struct),*(struct(*(char),*(struct`),*(struct`)))))
->	O
node	*(struct)
->	O
nn_stat	O
.	O
st_author	O
=	O
author	int
;	O
pthread_rwlock_unlock	(*(union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long)))->(int)
(	O
&	O
mux	*(struct(*(struct(*(char),*(struct`),*(struct`))),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int))
->	O
names_lock	union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long)
)	O
;	O
fshelp_touch	()->(int)
(	O
&	O
node	*(struct)
->	O
nn_stat	O
,	O
TOUCH_CTIME	O
,	O
usermux_maptime	*(struct)
)	O
;	O
}	O
return	O
err	O
;	O
}	O
}	O
error_t	O
netfs_attempt_chmod	(*(struct),*(struct),int)->(int)
(	O
struct	O
iouser	O
*	O
cred	*(struct)
,	O
struct	O
node	*(struct)
*	O
node	*(struct)
,	O
mode_t	int
mode	int
)	O
{	O
mode	int
&=	O
~	O
S_ITRANS	O
;	O
if	O
(	O
(	O
mode	int
&	O
S_IFMT	O
)	O
==	O
0	int
)	O
mode	int
|=	O
(	O
node	*(struct)
->	O
nn_stat	O
.	O
st_mode	O
&	O
S_IFMT	O
)	O
;	O
if	O
(	O
node	*(struct)
->	O
nn	O
->	O
name	*(char)
||	O
(	O
(	O
mode	int
&	O
S_IFMT	O
)	O
!=	O
(	O
node	*(struct)
->	O
nn_stat	O
.	O
st_mode	O
&	O
S_IFMT	O
)	O
)	O
)	O
return	O
EOPNOTSUPP	O
;	O
else	O
{	O
error_t	O
err	O
=	O
file_chmod	O
(	O
node	*(struct)
->	O
nn	O
->	O
mux	*(struct(*(struct(*(char),*(struct`),*(struct`))),union(struct(int,int,int,int,int,int,int,int,char,array(char),long,int),array(char),long),*(char),long,*(char),*(char),*(char),struct,int))
->	O
underlying	int
,	O
mode	int
&	O
~	O
S_IFMT	O
)	O
;	O
if	O
(	O
!	O
err	O
)	O
{	O
node	*(struct)
->	O
nn_stat	O
.	O
st_mode	O
=	O
mode	int
;	O
fshelp_touch	()->(int)
(	O
&	O
node	*(struct)
->	O
nn_stat	O
,	O
TOUCH_CTIME	O
,	O
usermux_maptime	*(struct)
)	O
;	O
}	O
return	O
err	O
;	O
}	O
}	O
