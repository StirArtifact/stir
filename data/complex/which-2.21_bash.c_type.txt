static	O
char	O
*	O
extract_colon_unit	(*(char),*(int))->(*(char))
(	O
char	O
const	O
*	O
string	*(char)
,	O
int	O
*	O
p_index	*(int)
)	O
;	O
struct	O
user_info	struct(int,int,int,int,*(char),*(char),*(char))
{	O
uid_t	int
uid	int
,	O
euid	int
;	O
GID_T	O
gid	int
,	O
egid	int
;	O
char	O
*	O
user_name	*(char)
;	O
char	O
*	O
shell	*(char)
;	O
char	O
*	O
home_dir	*(char)
;	O
}	O
;	O
struct	O
user_info	struct(int,int,int,int,*(char),*(char),*(char))
current_user	struct(int,int,int,int,*(char),*(char),*(char))
=	O
{	O
(	O
uid_t	int
)	O
-	O
1	int
,	O
(	O
uid_t	int
)	O
-	O
1	int
,	O
(	O
GID_T	O
)	O
-	O
1	int
,	O
(	O
GID_T	O
)	O
-	O
1	int
,	O
(	O
char	O
*	O
)	O
NULL	O
,	O
(	O
char	O
*	O
)	O
NULL	O
,	O
(	O
char	O
*	O
)	O
NULL	O
}	O
;	O
int	O
uidget	()->(int)
(	O
)	O
{	O
uid_t	int
u	int
;	O
u	int
=	O
getuid	()->(int)
(	O
)	O
;	O
if	O
(	O
current_user	struct(int,int,int,int,*(char),*(char),*(char))
.	O
uid	int
!=	O
u	int
)	O
{	O
FREE	O
(	O
current_user	struct(int,int,int,int,*(char),*(char),*(char))
.	O
user_name	*(char)
)	O
;	O
FREE	O
(	O
current_user	struct(int,int,int,int,*(char),*(char),*(char))
.	O
shell	*(char)
)	O
;	O
FREE	O
(	O
current_user	struct(int,int,int,int,*(char),*(char),*(char))
.	O
home_dir	*(char)
)	O
;	O
current_user	struct(int,int,int,int,*(char),*(char),*(char))
.	O
user_name	*(char)
=	O
current_user	struct(int,int,int,int,*(char),*(char),*(char))
.	O
shell	*(char)
=	O
current_user	struct(int,int,int,int,*(char),*(char),*(char))
.	O
home_dir	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
}	O
current_user	struct(int,int,int,int,*(char),*(char),*(char))
.	O
uid	int
=	O
u	int
;	O
current_user	struct(int,int,int,int,*(char),*(char),*(char))
.	O
gid	int
=	O
getgid	()->(int)
(	O
)	O
;	O
current_user	struct(int,int,int,int,*(char),*(char),*(char))
.	O
euid	int
=	O
geteuid	()->(int)
(	O
)	O
;	O
current_user	struct(int,int,int,int,*(char),*(char),*(char))
.	O
egid	int
=	O
getegid	()->(int)
(	O
)	O
;	O
return	O
(	O
current_user	struct(int,int,int,int,*(char),*(char),*(char))
.	O
uid	int
!=	O
current_user	struct(int,int,int,int,*(char),*(char),*(char))
.	O
euid	int
)	O
||	O
(	O
current_user	struct(int,int,int,int,*(char),*(char),*(char))
.	O
gid	int
!=	O
current_user	struct(int,int,int,int,*(char),*(char),*(char))
.	O
egid	int
)	O
;	O
}	O
static	O
int	O
ngroups	int
,	O
maxgroups	int
;	O
static	O
GETGROUPS_T	O
*	O
group_array	*(int)
=	O
(	O
GETGROUPS_T	O
*	O
)	O
NULL	O
;	O
int	O
getmaxgroups	()->(int)
(	O
)	O
{	O
static	O
int	O
maxgroups	int
=	O
-	O
1	int
;	O
if	O
(	O
maxgroups	int
>	O
0	int
)	O
return	O
maxgroups	int
;	O
maxgroups	int
=	O
sysconf	(int)->(long)
(	O
_SC_NGROUPS_MAX	int
)	O
;	O
if	O
(	O
maxgroups	int
<=	O
0	int
)	O
maxgroups	int
=	O
DEFAULT_MAXGROUPS	int
;	O
return	O
maxgroups	int
;	O
}	O
static	O
void	O
initialize_group_array	()->(void)
(	O
)	O
{	O
register	O
int	O
i	int
;	O
if	O
(	O
maxgroups	int
==	O
0	int
)	O
maxgroups	int
=	O
getmaxgroups	()->(int)
(	O
)	O
;	O
ngroups	int
=	O
0	int
;	O
group_array	*(int)
=	O
(	O
GETGROUPS_T	O
*	O
)	O
xrealloc	(*(void),long)->(*(void))
(	O
group_array	*(int)
,	O
maxgroups	int
*	O
sizeof	O
(	O
GETGROUPS_T	O
)	O
)	O
;	O
ngroups	int
=	O
getgroups	(int,array(int))->(int)
(	O
maxgroups	int
,	O
group_array	*(int)
)	O
;	O
if	O
(	O
ngroups	int
==	O
0	int
)	O
{	O
group_array	*(int)
[	O
0	int
]	O
=	O
current_user	struct(int,int,int,int,*(char),*(char),*(char))
.	O
gid	int
;	O
ngroups	int
=	O
1	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ngroups	int
;	O
i	int
++	O
)	O
if	O
(	O
current_user	struct(int,int,int,int,*(char),*(char),*(char))
.	O
gid	int
==	O
(	O
GID_T	O
)	O
group_array	*(int)
[	O
i	int
]	O
)	O
break	O
;	O
if	O
(	O
i	int
==	O
ngroups	int
&&	O
ngroups	int
<	O
maxgroups	int
)	O
{	O
for	O
(	O
i	int
=	O
ngroups	int
;	O
i	int
>	O
0	int
;	O
i	int
--	O
)	O
group_array	*(int)
[	O
i	int
]	O
=	O
group_array	*(int)
[	O
i	int
-	O
1	int
]	O
;	O
group_array	*(int)
[	O
0	int
]	O
=	O
current_user	struct(int,int,int,int,*(char),*(char),*(char))
.	O
gid	int
;	O
ngroups	int
++	O
;	O
}	O
if	O
(	O
group_array	*(int)
[	O
0	int
]	O
!=	O
current_user	struct(int,int,int,int,*(char),*(char),*(char))
.	O
gid	int
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ngroups	int
;	O
i	int
++	O
)	O
if	O
(	O
group_array	*(int)
[	O
i	int
]	O
==	O
current_user	struct(int,int,int,int,*(char),*(char),*(char))
.	O
gid	int
)	O
break	O
;	O
if	O
(	O
i	int
<	O
ngroups	int
)	O
{	O
group_array	*(int)
[	O
i	int
]	O
=	O
group_array	*(int)
[	O
0	int
]	O
;	O
group_array	*(int)
[	O
0	int
]	O
=	O
current_user	struct(int,int,int,int,*(char),*(char),*(char))
.	O
gid	int
;	O
}	O
}	O
}	O
int	O
group_member	(int)->(int)
(	O
GID_T	O
gid	int
)	O
{	O
register	O
int	O
i	int
;	O
if	O
(	O
gid	int
==	O
current_user	struct(int,int,int,int,*(char),*(char),*(char))
.	O
gid	int
||	O
gid	int
==	O
current_user	struct(int,int,int,int,*(char),*(char),*(char))
.	O
egid	int
)	O
return	O
(	O
1	int
)	O
;	O
if	O
(	O
ngroups	int
==	O
0	int
)	O
initialize_group_array	()->(void)
(	O
)	O
;	O
if	O
(	O
ngroups	int
<=	O
0	int
)	O
return	O
(	O
0	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ngroups	int
;	O
i	int
++	O
)	O
if	O
(	O
gid	int
==	O
(	O
GID_T	O
)	O
group_array	*(int)
[	O
i	int
]	O
)	O
return	O
(	O
1	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
file_status	(*(char))->(int)
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
finfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
int	O
r	int
;	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
name	*(char)
,	O
&	O
finfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
<	O
0	int
)	O
return	O
(	O
0	int
)	O
;	O
if	O
(	O
S_ISDIR	O
(	O
finfo	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
)	O
return	O
(	O
FS_EXISTS	int
|	O
FS_DIRECTORY	int
)	O
;	O
r	int
=	O
FS_EXISTS	int
;	O
if	O
(	O
eaccess	(*(char),int)->(int)
(	O
name	*(char)
,	O
X_OK	int
)	O
==	O
0	int
)	O
r	int
|=	O
FS_EXECABLE	int
;	O
if	O
(	O
eaccess	(*(char),int)->(int)
(	O
name	*(char)
,	O
R_OK	int
)	O
==	O
0	int
)	O
r	int
|=	O
FS_READABLE	int
;	O
return	O
r	int
;	O
}	O
int	O
absolute_program	(*(char))->(int)
(	O
char	O
const	O
*	O
string	*(char)
)	O
{	O
return	O
(	O
(	O
char	O
*	O
)	O
strchr	(*(char),int)->(*(char))
(	O
string	*(char)
,	O
'/'	O
)	O
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
char	O
*	O
substring	(*(char),int,int)->(*(char))
(	O
char	O
const	O
*	O
string	*(char)
,	O
int	O
start	int
,	O
int	O
end	int
)	O
{	O
register	O
int	O
len	int
;	O
register	O
char	O
*	O
result	*(char)
;	O
len	int
=	O
end	int
-	O
start	int
;	O
result	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
len	int
+	O
1	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
result	*(char)
,	O
string	*(char)
+	O
start	int
,	O
len	int
)	O
;	O
result	*(char)
[	O
len	int
]	O
=	O
'\0'	O
;	O
return	O
(	O
result	*(char)
)	O
;	O
}	O
char	O
*	O
extract_colon_unit	(*(char),*(int))->(*(char))
(	O
char	O
const	O
*	O
string	*(char)
,	O
int	O
*	O
p_index	*(int)
)	O
{	O
int	O
i	int
,	O
start	int
,	O
len	int
;	O
char	O
*	O
value	*(char)
;	O
if	O
(	O
string	*(char)
==	O
0	int
)	O
return	O
NULL	O
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
string	*(char)
)	O
;	O
if	O
(	O
*	O
p_index	*(int)
>=	O
len	int
)	O
return	O
(	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
i	int
=	O
*	O
p_index	*(int)
;	O
if	O
(	O
i	int
&&	O
string	*(char)
[	O
i	int
]	O
==	O
':'	O
)	O
i	int
++	O
;	O
for	O
(	O
start	int
=	O
i	int
;	O
string	*(char)
[	O
i	int
]	O
&&	O
string	*(char)
[	O
i	int
]	O
!=	O
':'	O
;	O
i	int
++	O
)	O
;	O
*	O
p_index	*(int)
=	O
i	int
;	O
if	O
(	O
i	int
==	O
start	int
)	O
{	O
if	O
(	O
string	*(char)
[	O
i	int
]	O
)	O
(	O
*	O
p_index	*(int)
)	O
++	O
;	O
value	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
1	int
)	O
;	O
value	*(char)
[	O
0	int
]	O
=	O
'\0'	O
;	O
}	O
else	O
value	*(char)
=	O
substring	(*(char),int,int)->(*(char))
(	O
string	*(char)
,	O
start	int
,	O
i	int
)	O
;	O
return	O
(	O
value	*(char)
)	O
;	O
}	O
char	O
*	O
get_next_path_element	(*(char),*(int))->(*(char))
(	O
char	O
const	O
*	O
path_list	*(char)
,	O
int	O
*	O
path_index_pointer	*(int)
)	O
{	O
char	O
*	O
path	*(char)
;	O
path	*(char)
=	O
extract_colon_unit	(*(char),*(int))->(*(char))
(	O
path_list	*(char)
,	O
path_index_pointer	*(int)
)	O
;	O
if	O
(	O
path	*(char)
==	O
0	int
)	O
return	O
(	O
path	*(char)
)	O
;	O
if	O
(	O
*	O
path	*(char)
==	O
'\0'	O
)	O
{	O
free	(*(void))->(void)
(	O
path	*(char)
)	O
;	O
path	*(char)
=	O
savestring	O
(	O
"."	*(char)
)	O
;	O
}	O
return	O
(	O
path	*(char)
)	O
;	O
}	O
char	O
*	O
make_full_pathname	(*(char),*(char),int)->(*(char))
(	O
const	O
char	O
*	O
path	*(char)
,	O
const	O
char	O
*	O
name	*(char)
,	O
int	O
name_len	int
)	O
{	O
char	O
*	O
full_path	*(char)
;	O
int	O
path_len	int
;	O
path_len	int
=	O
strlen	(*(char))->(long)
(	O
path	*(char)
)	O
;	O
full_path	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
2	int
+	O
path_len	int
+	O
name_len	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
full_path	*(char)
,	O
path	*(char)
)	O
;	O
full_path	*(char)
[	O
path_len	int
]	O
=	O
'/'	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
full_path	*(char)
+	O
path_len	int
+	O
1	int
,	O
name	*(char)
)	O
;	O
return	O
(	O
full_path	*(char)
)	O
;	O
}	O
void	O
get_current_user_info	()->(void)
(	O
)	O
{	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
entry	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
;	O
if	O
(	O
current_user	struct(int,int,int,int,*(char),*(char),*(char))
.	O
user_name	*(char)
==	O
0	int
)	O
{	O
entry	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
getpwuid	(int)->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
current_user	struct(int,int,int,int,*(char),*(char),*(char))
.	O
uid	int
)	O
;	O
if	O
(	O
entry	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
)	O
{	O
current_user	struct(int,int,int,int,*(char),*(char),*(char))
.	O
user_name	*(char)
=	O
savestring	O
(	O
entry	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
)	O
;	O
current_user	struct(int,int,int,int,*(char),*(char),*(char))
.	O
shell	*(char)
=	O
(	O
entry	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_shell	*(char)
&&	O
entry	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_shell	*(char)
[	O
0	int
]	O
)	O
?	O
savestring	O
(	O
entry	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_shell	*(char)
)	O
:	O
savestring	O
(	O
"/bin/sh"	*(char)
)	O
;	O
current_user	struct(int,int,int,int,*(char),*(char),*(char))
.	O
home_dir	*(char)
=	O
savestring	O
(	O
entry	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_dir	*(char)
)	O
;	O
}	O
else	O
{	O
current_user	struct(int,int,int,int,*(char),*(char),*(char))
.	O
user_name	*(char)
=	O
"I have no name!"	*(char)
;	O
current_user	struct(int,int,int,int,*(char),*(char),*(char))
.	O
user_name	*(char)
=	O
savestring	O
(	O
current_user	struct(int,int,int,int,*(char),*(char),*(char))
.	O
user_name	*(char)
)	O
;	O
current_user	struct(int,int,int,int,*(char),*(char),*(char))
.	O
shell	*(char)
=	O
savestring	O
(	O
"/bin/sh"	*(char)
)	O
;	O
current_user	struct(int,int,int,int,*(char),*(char),*(char))
.	O
home_dir	*(char)
=	O
savestring	O
(	O
"/"	*(char)
)	O
;	O
}	O
endpwent	()->(void)
(	O
)	O
;	O
}	O
}	O
char	O
*	O
sh_get_env_value	(*(char))->(*(char))
(	O
const	O
char	O
*	O
v	*(char)
)	O
{	O
return	O
getenv	(*(char))->(*(char))
(	O
v	*(char)
)	O
;	O
}	O
char	O
*	O
sh_get_home_dir	()->(*(char))
(	O
void	O
)	O
{	O
if	O
(	O
current_user	struct(int,int,int,int,*(char),*(char),*(char))
.	O
home_dir	*(char)
==	O
NULL	O
)	O
get_current_user_info	()->(void)
(	O
)	O
;	O
return	O
current_user	struct(int,int,int,int,*(char),*(char),*(char))
.	O
home_dir	*(char)
;	O
}	O
