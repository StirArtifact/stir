static	O
int	O
capa_comp	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
item	*(void)
,	O
const	O
void	O
*	O
value	*(void)
)	O
{	O
const	O
char	O
*	O
capa	*(struct)
=	O
item	*(void)
;	O
const	O
char	O
*	O
needle	*(char)
=	O
value	*(void)
;	O
for	O
(	O
;	O
*	O
needle	*(char)
;	O
capa	*(struct)
++	O
,	O
needle	*(char)
++	O
)	O
{	O
if	O
(	O
!	O
*	O
capa	*(struct)
)	O
return	O
1	int
;	O
if	O
(	O
mu_tolower	O
(	O
*	O
capa	*(struct)
)	O
!=	O
mu_tolower	O
(	O
*	O
needle	*(char)
)	O
)	O
return	O
1	int
;	O
}	O
return	O
!	O
(	O
*	O
capa	*(struct)
==	O
0	int
||	O
*	O
capa	*(struct)
==	O
'='	O
)	O
;	O
}	O
static	O
int	O
_map_capa	(*(*(void)),long,*(void))->(int)
(	O
void	O
*	O
*	O
itmv	*(*(void))
,	O
size_t	long
itmc	long
,	O
void	O
*	O
call_data	*(void)
)	O
{	O
int	O
*	O
n	long
=	O
call_data	*(void)
;	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
=	O
itmv	*(*(void))
[	O
0	int
]	O
;	O
if	O
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
MU_LIST_MAP_STOP	int
;	O
if	O
(	O
*	O
n	long
==	O
0	int
)	O
{	O
*	O
n	long
=	O
1	int
;	O
return	O
MU_LIST_MAP_SKIP	int
;	O
}	O
itmv	*(*(void))
[	O
0	int
]	O
=	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	union(*(struct),*(char))
.	O
string	*(char)
;	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	union(*(struct),*(char))
.	O
string	*(char)
=	O
NULL	O
;	O
return	O
MU_LIST_MAP_OK	int
;	O
}	O
static	O
void	O
_capability_response_action	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)
(	O
mu_imap_t	*(struct)
imap	*(struct)
,	O
mu_list_t	*(struct)
response	enum(int,int,int)
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
=	O
_mu_imap_list_at	(*(struct),int)->(*(struct(enum(int,int),union(*(struct`),*(char)))))
(	O
response	enum(int,int,int)
,	O
0	int
)	O
;	O
if	O
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
&&	O
_mu_imap_list_element_is_string	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(char))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
"CAPABILITY"	*(char)
)	O
)	O
{	O
int	O
n	long
=	O
0	int
;	O
mu_list_map	(*(struct),*((*(*(void)),long,*(void))->(int)),*(void),long,*(*(struct)))->(int)
(	O
response	enum(int,int,int)
,	O
_map_capa	(*(*(void)),long,*(void))->(int)
,	O
&	O
n	long
,	O
1	int
,	O
&	O
imap	*(struct)
->	O
capa	*(struct)
)	O
;	O
}	O
}	O
int	O
mu_imap_capability	(*(struct),int,*(*(struct)))->(int)
(	O
mu_imap_t	*(struct)
imap	*(struct)
,	O
int	O
reread	int
,	O
mu_iterator_t	*(struct)
*	O
piter	*(*(struct))
)	O
{	O
int	O
status	int
;	O
if	O
(	O
imap	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
imap	*(struct)
->	O
io	*(struct)
)	O
return	O
MU_ERR_NO_TRANSPORT	O
;	O
if	O
(	O
imap	*(struct)
->	O
session_state	enum(int,int,int,int)
==	O
MU_IMAP_SESSION_INIT	int
||	O
imap	*(struct)
->	O
client_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
!=	O
MU_IMAP_CLIENT_READY	int
)	O
return	O
MU_ERR_SEQ	O
;	O
if	O
(	O
imap	*(struct)
->	O
capa	*(struct)
)	O
{	O
if	O
(	O
!	O
reread	int
)	O
{	O
if	O
(	O
!	O
piter	*(*(struct))
)	O
return	O
0	int
;	O
return	O
mu_list_get_iterator	(*(struct),*(*(struct)))->(int)
(	O
imap	*(struct)
->	O
capa	*(struct)
,	O
piter	*(*(struct))
)	O
;	O
}	O
mu_list_destroy	(*(*(struct)))->(void)
(	O
&	O
imap	*(struct)
->	O
capa	*(struct)
)	O
;	O
}	O
switch	O
(	O
imap	*(struct)
->	O
client_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
{	O
case	O
MU_IMAP_CLIENT_READY	int
:	O
status	int
=	O
_mu_imap_tag_next	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(int)
(	O
imap	*(struct)
)	O
;	O
MU_IMAP_CHECK_EAGAIN	O
(	O
imap	*(struct)
,	O
status	int
)	O
;	O
status	int
=	O
mu_imapio_send_command	(*(struct),*(char),*(struct),*(char))->(int)
(	O
imap	*(struct)
->	O
io	*(struct)
,	O
imap	*(struct)
->	O
tag_str	*(char)
,	O
NULL	O
,	O
"CAPABILITY"	*(char)
,	O
NULL	O
)	O
;	O
MU_IMAP_CHECK_EAGAIN	O
(	O
imap	*(struct)
,	O
status	int
)	O
;	O
MU_IMAP_FCLR	O
(	O
imap	*(struct)
,	O
MU_IMAP_RESP	int
)	O
;	O
imap	*(struct)
->	O
client_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
MU_IMAP_CLIENT_CAPABILITY_RX	int
;	O
case	O
MU_IMAP_CLIENT_CAPABILITY_RX	int
:	O
status	int
=	O
_mu_imap_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),*(void))->(int)
(	O
imap	*(struct)
,	O
_capability_response_action	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)
,	O
NULL	O
)	O
;	O
imap	*(struct)
->	O
client_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
MU_IMAP_CLIENT_READY	int
;	O
MU_IMAP_CHECK_EAGAIN	O
(	O
imap	*(struct)
,	O
status	int
)	O
;	O
if	O
(	O
imap	*(struct)
->	O
response	enum(int,int,int)
!=	O
MU_IMAP_OK	int
)	O
return	O
MU_ERR_REPLY	O
;	O
else	O
{	O
mu_list_set_comparator	(*(struct),*((*(void),*(void))->(int)))->(*((*(void),*(void))->(int)))
(	O
imap	*(struct)
->	O
capa	*(struct)
,	O
capa_comp	(*(void),*(void))->(int)
)	O
;	O
mu_list_set_destroy_item	(*(struct),*((*(void))->(void)))->(*((*(void))->(void)))
(	O
imap	*(struct)
->	O
capa	*(struct)
,	O
mu_list_free_item	(*(void))->(void)
)	O
;	O
if	O
(	O
piter	*(*(struct))
)	O
status	int
=	O
mu_list_get_iterator	(*(struct),*(*(struct)))->(int)
(	O
imap	*(struct)
->	O
capa	*(struct)
,	O
piter	*(*(struct))
)	O
;	O
else	O
status	int
=	O
0	int
;	O
}	O
break	O
;	O
case	O
MU_IMAP_CLIENT_ERROR	int
:	O
status	int
=	O
ECANCELED	int
;	O
break	O
;	O
default	O
:	O
status	int
=	O
EINPROGRESS	int
;	O
}	O
return	O
status	int
;	O
}	O
