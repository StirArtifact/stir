__ptr_t	O
(	O
*	O
__morecore	*((long)->(*(void)))
)	O
__P	O
(	O
(	O
ptrdiff_t	long
__size	long
)	O
)	O
=	O
__default_morecore	(long)->(*(void))
;	O
__ptr_t	O
(	O
*	O
__malloc_hook	*((long)->(*(void)))
)	O
__P	O
(	O
(	O
__malloc_size_t	O
__size	long
)	O
)	O
;	O
char	O
*	O
_heapbase	*(char)
;	O
malloc_info	union(struct(int,union(struct(long,long),long)),struct(long,long,long))
*	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
;	O
static	O
__malloc_size_t	O
heapsize	long
;	O
__malloc_size_t	O
_heapindex	long
;	O
__malloc_size_t	O
_heaplimit	long
;	O
struct	O
list	struct(*(struct(*(struct(*(struct`),*(struct`))),*(struct(*(struct`),*(struct`))))),*(struct(*(struct(*(struct`),*(struct`))),*(struct(*(struct`),*(struct`))))))
_fraghead	array(struct(*(struct(*(struct(*`,*`)),*(struct(*`,*`)))),*(struct(*(struct(*`,*`)),*(struct(*`,*`))))))
[	O
BLOCKLOG	O
]	O
;	O
__malloc_size_t	O
_chunks_used	long
;	O
__malloc_size_t	O
_bytes_used	long
;	O
__malloc_size_t	O
_chunks_free	long
;	O
__malloc_size_t	O
_bytes_free	long
;	O
int	O
__malloc_initialized	int
;	O
__malloc_size_t	O
__malloc_extra_blocks	long
;	O
void	O
(	O
*	O
__malloc_initialize_hook	*(()->(void))
)	O
__P	O
(	O
(	O
void	O
)	O
)	O
;	O
void	O
(	O
*	O
__after_morecore_hook	*(()->(void))
)	O
__P	O
(	O
(	O
void	O
)	O
)	O
;	O
static	O
__ptr_t	O
align	(long)->(*(void))
__P	O
(	O
(	O
__malloc_size_t	O
)	O
)	O
;	O
static	O
__ptr_t	O
align	(long)->(*(void))
(	O
size	long
)	O
__malloc_size_t	O
size	long
;	O
{	O
__ptr_t	O
result	*(void)
;	O
unsigned	O
long	O
int	O
adj	long
;	O
result	*(void)
=	O
(	O
*	O
__morecore	*((long)->(*(void)))
)	O
(	O
size	long
)	O
;	O
adj	long
=	O
(	O
unsigned	O
long	O
int	O
)	O
(	O
(	O
unsigned	O
long	O
int	O
)	O
(	O
(	O
char	O
*	O
)	O
result	*(void)
-	O
(	O
char	O
*	O
)	O
NULL	O
)	O
)	O
%	O
BLOCKSIZE	O
;	O
if	O
(	O
adj	long
!=	O
0	int
)	O
{	O
__ptr_t	O
new	*(void)
;	O
adj	long
=	O
BLOCKSIZE	O
-	O
adj	long
;	O
new	*(void)
=	O
(	O
*	O
__morecore	*((long)->(*(void)))
)	O
(	O
adj	long
)	O
;	O
result	*(void)
=	O
(	O
char	O
*	O
)	O
result	*(void)
+	O
adj	long
;	O
}	O
if	O
(	O
__after_morecore_hook	*(()->(void))
)	O
(	O
*	O
__after_morecore_hook	*(()->(void))
)	O
(	O
)	O
;	O
return	O
result	*(void)
;	O
}	O
static	O
__ptr_t	O
get_contiguous_space	(long,*(void))->(*(void))
__P	O
(	O
(	O
__malloc_ptrdiff_t	O
,	O
__ptr_t	O
)	O
)	O
;	O
static	O
__ptr_t	O
get_contiguous_space	(long,*(void))->(*(void))
(	O
size	long
,	O
position	*(void)
)	O
__malloc_ptrdiff_t	O
size	long
;	O
__ptr_t	O
position	*(void)
;	O
{	O
__ptr_t	O
before	*(void)
;	O
__ptr_t	O
after	*(void)
;	O
before	*(void)
=	O
(	O
*	O
__morecore	*((long)->(*(void)))
)	O
(	O
0	int
)	O
;	O
if	O
(	O
before	*(void)
!=	O
position	*(void)
)	O
return	O
0	int
;	O
after	*(void)
=	O
(	O
*	O
__morecore	*((long)->(*(void)))
)	O
(	O
size	long
)	O
;	O
if	O
(	O
!	O
after	*(void)
)	O
return	O
0	int
;	O
if	O
(	O
after	*(void)
!=	O
position	*(void)
)	O
{	O
(	O
*	O
__morecore	*((long)->(*(void)))
)	O
(	O
-	O
size	long
)	O
;	O
return	O
0	int
;	O
}	O
return	O
after	*(void)
;	O
}	O
static	O
void	O
register_heapinfo	()->(void)
__P	O
(	O
(	O
void	O
)	O
)	O
;	O
__inline__	O
static	O
void	O
register_heapinfo	()->(void)
(	O
)	O
{	O
__malloc_size_t	O
block	long
,	O
blocks	long
;	O
block	long
=	O
BLOCK	O
(	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
)	O
;	O
blocks	long
=	O
BLOCKIFY	O
(	O
heapsize	long
*	O
sizeof	O
(	O
malloc_info	union(struct(int,union(struct(long,long),long)),struct(long,long,long))
)	O
)	O
;	O
_bytes_used	long
+=	O
blocks	long
*	O
BLOCKSIZE	O
;	O
++	O
_chunks_used	long
;	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
block	long
]	O
.	O
busy	struct(int,union(struct(long,long),long))
.	O
type	int
=	O
0	int
;	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
block	long
]	O
.	O
busy	struct(int,union(struct(long,long),long))
.	O
info	union(struct(long,long),long)
.	O
size	long
=	O
blocks	long
;	O
while	O
(	O
--	O
blocks	long
>	O
0	int
)	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
block	long
+	O
blocks	long
]	O
.	O
busy	struct(int,union(struct(long,long),long))
.	O
info	union(struct(long,long),long)
.	O
size	long
=	O
-	O
blocks	long
;	O
}	O
int	O
__malloc_initialize	()->(int)
(	O
)	O
{	O
if	O
(	O
__malloc_initialized	int
)	O
return	O
0	int
;	O
if	O
(	O
__malloc_initialize_hook	*(()->(void))
)	O
(	O
*	O
__malloc_initialize_hook	*(()->(void))
)	O
(	O
)	O
;	O
heapsize	long
=	O
HEAP	O
/	O
BLOCKSIZE	O
;	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
=	O
(	O
malloc_info	union(struct(int,union(struct(long,long),long)),struct(long,long,long))
*	O
)	O
align	(long)->(*(void))
(	O
heapsize	long
*	O
sizeof	O
(	O
malloc_info	union(struct(int,union(struct(long,long),long)),struct(long,long,long))
)	O
)	O
;	O
if	O
(	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
==	O
NULL	O
)	O
return	O
0	int
;	O
memset	O
(	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
,	O
0	int
,	O
heapsize	long
*	O
sizeof	O
(	O
malloc_info	union(struct(int,union(struct(long,long),long)),struct(long,long,long))
)	O
)	O
;	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
0	int
]	O
.	O
free	(*(void))->(void)
.	O
size	long
=	O
0	int
;	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
0	int
]	O
.	O
free	(*(void))->(void)
.	O
next	long
=	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
0	int
]	O
.	O
free	(*(void))->(void)
.	O
prev	long
=	O
0	int
;	O
_heapindex	long
=	O
0	int
;	O
_heapbase	*(char)
=	O
(	O
char	O
*	O
)	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
;	O
_heaplimit	long
=	O
BLOCK	O
(	O
_heapbase	*(char)
+	O
heapsize	long
*	O
sizeof	O
(	O
malloc_info	union(struct(int,union(struct(long,long),long)),struct(long,long,long))
)	O
)	O
;	O
register_heapinfo	()->(void)
(	O
)	O
;	O
__malloc_initialized	int
=	O
1	int
;	O
return	O
1	int
;	O
}	O
static	O
int	O
morecore_recursing	int
;	O
static	O
__ptr_t	O
morecore	(long)->(*(void))
__P	O
(	O
(	O
__malloc_size_t	O
)	O
)	O
;	O
static	O
__ptr_t	O
morecore	(long)->(*(void))
(	O
size	long
)	O
__malloc_size_t	O
size	long
;	O
{	O
__ptr_t	O
result	*(void)
;	O
malloc_info	union(struct(int,union(struct(long,long),long)),struct(long,long,long))
*	O
newinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
,	O
*	O
oldinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
;	O
__malloc_size_t	O
newsize	long
;	O
if	O
(	O
morecore_recursing	int
)	O
return	O
NULL	O
;	O
result	*(void)
=	O
align	(long)->(*(void))
(	O
size	long
)	O
;	O
if	O
(	O
result	*(void)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
(	O
__malloc_size_t	O
)	O
BLOCK	O
(	O
(	O
char	O
*	O
)	O
result	*(void)
+	O
size	long
)	O
>	O
heapsize	long
)	O
{	O
newsize	long
=	O
heapsize	long
;	O
do	O
newsize	long
*=	O
2	int
;	O
while	O
(	O
(	O
__malloc_size_t	O
)	O
BLOCK	O
(	O
(	O
char	O
*	O
)	O
result	*(void)
+	O
size	long
)	O
>	O
newsize	long
)	O
;	O
{	O
int	O
save	int
=	O
errno	O
;	O
morecore_recursing	int
=	O
1	int
;	O
newinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
=	O
(	O
malloc_info	union(struct(int,union(struct(long,long),long)),struct(long,long,long))
*	O
)	O
_realloc_internal	(*(void),long)->(*(void))
(	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
,	O
newsize	long
*	O
sizeof	O
(	O
malloc_info	union(struct(int,union(struct(long,long),long)),struct(long,long,long))
)	O
)	O
;	O
morecore_recursing	int
=	O
0	int
;	O
if	O
(	O
newinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
==	O
NULL	O
)	O
errno	O
=	O
save	int
;	O
else	O
{	O
memset	O
(	O
&	O
newinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
heapsize	long
]	O
,	O
0	int
,	O
(	O
newsize	long
-	O
heapsize	long
)	O
*	O
sizeof	O
(	O
malloc_info	union(struct(int,union(struct(long,long),long)),struct(long,long,long))
)	O
)	O
;	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
=	O
newinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
;	O
heapsize	long
=	O
newsize	long
;	O
goto	O
got_heap	O
;	O
}	O
}	O
while	O
(	O
1	int
)	O
{	O
newinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
=	O
(	O
malloc_info	union(struct(int,union(struct(long,long),long)),struct(long,long,long))
*	O
)	O
align	(long)->(*(void))
(	O
newsize	long
*	O
sizeof	O
(	O
malloc_info	union(struct(int,union(struct(long,long),long)),struct(long,long,long))
)	O
)	O
;	O
if	O
(	O
newinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
==	O
NULL	O
)	O
{	O
(	O
*	O
__morecore	*((long)->(*(void)))
)	O
(	O
-	O
size	long
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
(	O
__malloc_size_t	O
)	O
BLOCK	O
(	O
(	O
char	O
*	O
)	O
newinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
+	O
newsize	long
*	O
sizeof	O
(	O
malloc_info	union(struct(int,union(struct(long,long),long)),struct(long,long,long))
)	O
)	O
<	O
newsize	long
)	O
break	O
;	O
(	O
*	O
__morecore	*((long)->(*(void)))
)	O
(	O
-	O
newsize	long
*	O
sizeof	O
(	O
malloc_info	union(struct(int,union(struct(long,long),long)),struct(long,long,long))
)	O
)	O
;	O
newsize	long
*=	O
2	int
;	O
}	O
memcpy	O
(	O
newinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
,	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
,	O
heapsize	long
*	O
sizeof	O
(	O
malloc_info	union(struct(int,union(struct(long,long),long)),struct(long,long,long))
)	O
)	O
;	O
memset	O
(	O
&	O
newinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
heapsize	long
]	O
,	O
0	int
,	O
(	O
newsize	long
-	O
heapsize	long
)	O
*	O
sizeof	O
(	O
malloc_info	union(struct(int,union(struct(long,long),long)),struct(long,long,long))
)	O
)	O
;	O
oldinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
=	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
;	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
=	O
newinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
;	O
heapsize	long
=	O
newsize	long
;	O
register_heapinfo	()->(void)
(	O
)	O
;	O
_heaplimit	long
=	O
0	int
;	O
_free_internal	(*(void))->(void)
(	O
oldinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
)	O
;	O
_heaplimit	long
=	O
BLOCK	O
(	O
(	O
char	O
*	O
)	O
newinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
+	O
heapsize	long
*	O
sizeof	O
(	O
malloc_info	union(struct(int,union(struct(long,long),long)),struct(long,long,long))
)	O
)	O
;	O
return	O
result	*(void)
;	O
}	O
got_heap	O
:	O
_heaplimit	long
=	O
BLOCK	O
(	O
(	O
char	O
*	O
)	O
result	*(void)
+	O
size	long
)	O
;	O
return	O
result	*(void)
;	O
}	O
__ptr_t	O
_malloc_internal	(long)->(*(void))
(	O
size	long
)	O
__malloc_size_t	O
size	long
;	O
{	O
__ptr_t	O
result	*(void)
;	O
__malloc_size_t	O
block	long
,	O
blocks	long
,	O
lastblocks	long
,	O
start	long
;	O
register	O
__malloc_size_t	O
i	long
;	O
struct	O
list	struct(*(struct(*(struct(*(struct`),*(struct`))),*(struct(*(struct`),*(struct`))))),*(struct(*(struct(*(struct`),*(struct`))),*(struct(*(struct`),*(struct`))))))
*	O
next	long
;	O
if	O
(	O
size	long
<	O
sizeof	O
(	O
struct	O
list	struct(*(struct(*(struct(*(struct`),*(struct`))),*(struct(*(struct`),*(struct`))))),*(struct(*(struct(*(struct`),*(struct`))),*(struct(*(struct`),*(struct`))))))
)	O
)	O
size	long
=	O
sizeof	O
(	O
struct	O
list	struct(*(struct(*(struct(*(struct`),*(struct`))),*(struct(*(struct`),*(struct`))))),*(struct(*(struct(*(struct`),*(struct`))),*(struct(*(struct`),*(struct`))))))
)	O
;	O
if	O
(	O
size	long
<=	O
BLOCKSIZE	O
/	O
2	int
)	O
{	O
register	O
__malloc_size_t	O
log	long
=	O
1	int
;	O
--	O
size	long
;	O
while	O
(	O
(	O
size	long
/=	O
2	int
)	O
!=	O
0	int
)	O
++	O
log	long
;	O
next	long
=	O
_fraghead	array(struct(*(struct(*(struct(*`,*`)),*(struct(*`,*`)))),*(struct(*(struct(*`,*`)),*(struct(*`,*`))))))
[	O
log	long
]	O
.	O
next	long
;	O
if	O
(	O
next	long
!=	O
NULL	O
)	O
{	O
result	*(void)
=	O
(	O
__ptr_t	O
)	O
next	long
;	O
next	long
->	O
prev	long
->	O
next	long
=	O
next	long
->	O
next	long
;	O
if	O
(	O
next	long
->	O
next	long
!=	O
NULL	O
)	O
next	long
->	O
next	long
->	O
prev	long
=	O
next	long
->	O
prev	long
;	O
block	long
=	O
BLOCK	O
(	O
result	*(void)
)	O
;	O
if	O
(	O
--	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
block	long
]	O
.	O
busy	struct(int,union(struct(long,long),long))
.	O
info	union(struct(long,long),long)
.	O
frag	struct(long,long)
.	O
nfree	long
!=	O
0	int
)	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
block	long
]	O
.	O
busy	struct(int,union(struct(long,long),long))
.	O
info	union(struct(long,long),long)
.	O
frag	struct(long,long)
.	O
first	long
=	O
(	O
unsigned	O
long	O
int	O
)	O
(	O
(	O
unsigned	O
long	O
int	O
)	O
(	O
(	O
char	O
*	O
)	O
next	long
->	O
next	long
-	O
(	O
char	O
*	O
)	O
NULL	O
)	O
%	O
BLOCKSIZE	O
)	O
>>	O
log	long
;	O
++	O
_chunks_used	long
;	O
_bytes_used	long
+=	O
1	int
<<	O
log	long
;	O
--	O
_chunks_free	long
;	O
_bytes_free	long
-=	O
1	int
<<	O
log	long
;	O
}	O
else	O
{	O
result	*(void)
=	O
malloc	(long)->(*(void))
(	O
BLOCKSIZE	O
)	O
;	O
if	O
(	O
result	*(void)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
next	long
=	O
(	O
struct	O
list	struct(*(struct(*(struct(*(struct`),*(struct`))),*(struct(*(struct`),*(struct`))))),*(struct(*(struct(*(struct`),*(struct`))),*(struct(*(struct`),*(struct`))))))
*	O
)	O
(	O
(	O
char	O
*	O
)	O
result	*(void)
+	O
(	O
1	int
<<	O
log	long
)	O
)	O
;	O
next	long
->	O
next	long
=	O
NULL	O
;	O
next	long
->	O
prev	long
=	O
&	O
_fraghead	array(struct(*(struct(*(struct(*`,*`)),*(struct(*`,*`)))),*(struct(*(struct(*`,*`)),*(struct(*`,*`))))))
[	O
log	long
]	O
;	O
_fraghead	array(struct(*(struct(*(struct(*`,*`)),*(struct(*`,*`)))),*(struct(*(struct(*`,*`)),*(struct(*`,*`))))))
[	O
log	long
]	O
.	O
next	long
=	O
next	long
;	O
for	O
(	O
i	long
=	O
2	int
;	O
i	long
<	O
(	O
__malloc_size_t	O
)	O
(	O
BLOCKSIZE	O
>>	O
log	long
)	O
;	O
++	O
i	long
)	O
{	O
next	long
=	O
(	O
struct	O
list	struct(*(struct(*(struct(*(struct`),*(struct`))),*(struct(*(struct`),*(struct`))))),*(struct(*(struct(*(struct`),*(struct`))),*(struct(*(struct`),*(struct`))))))
*	O
)	O
(	O
(	O
char	O
*	O
)	O
result	*(void)
+	O
(	O
i	long
<<	O
log	long
)	O
)	O
;	O
next	long
->	O
next	long
=	O
_fraghead	array(struct(*(struct(*(struct(*`,*`)),*(struct(*`,*`)))),*(struct(*(struct(*`,*`)),*(struct(*`,*`))))))
[	O
log	long
]	O
.	O
next	long
;	O
next	long
->	O
prev	long
=	O
&	O
_fraghead	array(struct(*(struct(*(struct(*`,*`)),*(struct(*`,*`)))),*(struct(*(struct(*`,*`)),*(struct(*`,*`))))))
[	O
log	long
]	O
;	O
next	long
->	O
prev	long
->	O
next	long
=	O
next	long
;	O
next	long
->	O
next	long
->	O
prev	long
=	O
next	long
;	O
}	O
block	long
=	O
BLOCK	O
(	O
result	*(void)
)	O
;	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
block	long
]	O
.	O
busy	struct(int,union(struct(long,long),long))
.	O
type	int
=	O
log	long
;	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
block	long
]	O
.	O
busy	struct(int,union(struct(long,long),long))
.	O
info	union(struct(long,long),long)
.	O
frag	struct(long,long)
.	O
nfree	long
=	O
i	long
-	O
1	int
;	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
block	long
]	O
.	O
busy	struct(int,union(struct(long,long),long))
.	O
info	union(struct(long,long),long)
.	O
frag	struct(long,long)
.	O
first	long
=	O
i	long
-	O
1	int
;	O
_chunks_free	long
+=	O
(	O
BLOCKSIZE	O
>>	O
log	long
)	O
-	O
1	int
;	O
_bytes_free	long
+=	O
BLOCKSIZE	O
-	O
(	O
1	int
<<	O
log	long
)	O
;	O
_bytes_used	long
-=	O
BLOCKSIZE	O
-	O
(	O
1	int
<<	O
log	long
)	O
;	O
}	O
}	O
else	O
{	O
blocks	long
=	O
BLOCKIFY	O
(	O
size	long
)	O
;	O
start	long
=	O
block	long
=	O
_heapindex	long
;	O
while	O
(	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
block	long
]	O
.	O
free	(*(void))->(void)
.	O
size	long
<	O
blocks	long
)	O
{	O
block	long
=	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
block	long
]	O
.	O
free	(*(void))->(void)
.	O
next	long
;	O
if	O
(	O
block	long
==	O
start	long
)	O
{	O
__malloc_size_t	O
wantblocks	long
=	O
blocks	long
+	O
__malloc_extra_blocks	long
;	O
block	long
=	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
0	int
]	O
.	O
free	(*(void))->(void)
.	O
prev	long
;	O
lastblocks	long
=	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
block	long
]	O
.	O
free	(*(void))->(void)
.	O
size	long
;	O
if	O
(	O
_heaplimit	long
!=	O
0	int
&&	O
block	long
+	O
lastblocks	long
==	O
_heaplimit	long
&&	O
block	long
+	O
wantblocks	long
<=	O
heapsize	long
&&	O
get_contiguous_space	(long,*(void))->(*(void))
(	O
(	O
wantblocks	long
-	O
lastblocks	long
)	O
*	O
BLOCKSIZE	O
,	O
ADDRESS	O
(	O
block	long
+	O
lastblocks	long
)	O
)	O
)	O
{	O
block	long
=	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
0	int
]	O
.	O
free	(*(void))->(void)
.	O
prev	long
;	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
block	long
]	O
.	O
free	(*(void))->(void)
.	O
size	long
+=	O
(	O
wantblocks	long
-	O
lastblocks	long
)	O
;	O
_bytes_free	long
+=	O
(	O
wantblocks	long
-	O
lastblocks	long
)	O
*	O
BLOCKSIZE	O
;	O
_heaplimit	long
+=	O
wantblocks	long
-	O
lastblocks	long
;	O
continue	O
;	O
}	O
result	*(void)
=	O
morecore	(long)->(*(void))
(	O
wantblocks	long
*	O
BLOCKSIZE	O
)	O
;	O
if	O
(	O
result	*(void)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
block	long
=	O
BLOCK	O
(	O
result	*(void)
)	O
;	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
block	long
]	O
.	O
free	(*(void))->(void)
.	O
size	long
=	O
wantblocks	long
;	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
block	long
]	O
.	O
free	(*(void))->(void)
.	O
prev	long
=	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
0	int
]	O
.	O
free	(*(void))->(void)
.	O
prev	long
;	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
block	long
]	O
.	O
free	(*(void))->(void)
.	O
next	long
=	O
0	int
;	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
0	int
]	O
.	O
free	(*(void))->(void)
.	O
prev	long
=	O
block	long
;	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
block	long
]	O
.	O
free	(*(void))->(void)
.	O
prev	long
]	O
.	O
free	(*(void))->(void)
.	O
next	long
=	O
block	long
;	O
++	O
_chunks_free	long
;	O
}	O
}	O
result	*(void)
=	O
ADDRESS	O
(	O
block	long
)	O
;	O
if	O
(	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
block	long
]	O
.	O
free	(*(void))->(void)
.	O
size	long
>	O
blocks	long
)	O
{	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
block	long
+	O
blocks	long
]	O
.	O
free	(*(void))->(void)
.	O
size	long
=	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
block	long
]	O
.	O
free	(*(void))->(void)
.	O
size	long
-	O
blocks	long
;	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
block	long
+	O
blocks	long
]	O
.	O
free	(*(void))->(void)
.	O
next	long
=	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
block	long
]	O
.	O
free	(*(void))->(void)
.	O
next	long
;	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
block	long
+	O
blocks	long
]	O
.	O
free	(*(void))->(void)
.	O
prev	long
=	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
block	long
]	O
.	O
free	(*(void))->(void)
.	O
prev	long
;	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
block	long
]	O
.	O
free	(*(void))->(void)
.	O
prev	long
]	O
.	O
free	(*(void))->(void)
.	O
next	long
=	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
block	long
]	O
.	O
free	(*(void))->(void)
.	O
next	long
]	O
.	O
free	(*(void))->(void)
.	O
prev	long
=	O
_heapindex	long
=	O
block	long
+	O
blocks	long
;	O
}	O
else	O
{	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
block	long
]	O
.	O
free	(*(void))->(void)
.	O
next	long
]	O
.	O
free	(*(void))->(void)
.	O
prev	long
=	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
block	long
]	O
.	O
free	(*(void))->(void)
.	O
prev	long
;	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
block	long
]	O
.	O
free	(*(void))->(void)
.	O
prev	long
]	O
.	O
free	(*(void))->(void)
.	O
next	long
=	O
_heapindex	long
=	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
block	long
]	O
.	O
free	(*(void))->(void)
.	O
next	long
;	O
--	O
_chunks_free	long
;	O
}	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
block	long
]	O
.	O
busy	struct(int,union(struct(long,long),long))
.	O
type	int
=	O
0	int
;	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
block	long
]	O
.	O
busy	struct(int,union(struct(long,long),long))
.	O
info	union(struct(long,long),long)
.	O
size	long
=	O
blocks	long
;	O
++	O
_chunks_used	long
;	O
_bytes_used	long
+=	O
blocks	long
*	O
BLOCKSIZE	O
;	O
_bytes_free	long
-=	O
blocks	long
*	O
BLOCKSIZE	O
;	O
while	O
(	O
--	O
blocks	long
>	O
0	int
)	O
_heapinfo	*(union(struct(int,union(struct(long,long),long)),struct(long,long,long)))
[	O
block	long
+	O
blocks	long
]	O
.	O
busy	struct(int,union(struct(long,long),long))
.	O
info	union(struct(long,long),long)
.	O
size	long
=	O
-	O
blocks	long
;	O
}	O
return	O
result	*(void)
;	O
}	O
__ptr_t	O
malloc	(long)->(*(void))
(	O
size	long
)	O
__malloc_size_t	O
size	long
;	O
{	O
if	O
(	O
!	O
__malloc_initialized	int
&&	O
!	O
__malloc_initialize	()->(int)
(	O
)	O
)	O
return	O
NULL	O
;	O
return	O
(	O
__malloc_hook	*((long)->(*(void)))
!=	O
NULL	O
?	O
*	O
__malloc_hook	*((long)->(*(void)))
:	O
_malloc_internal	(long)->(*(void))
)	O
(	O
size	long
)	O
;	O
}	O
__ptr_t	O
_malloc	(long)->(*(void))
(	O
__malloc_size_t	O
size	long
)	O
{	O
return	O
malloc	(long)->(*(void))
(	O
size	long
)	O
;	O
}	O
void	O
_free	(*(void))->(void)
(	O
__ptr_t	O
ptr	*(void)
)	O
{	O
free	(*(void))->(void)
(	O
ptr	*(void)
)	O
;	O
}	O
__ptr_t	O
_realloc	(*(void),long)->(*(void))
(	O
__ptr_t	O
ptr	*(void)
,	O
__malloc_size_t	O
size	long
)	O
{	O
return	O
realloc	(*(void),long)->(*(void))
(	O
ptr	*(void)
,	O
size	long
)	O
;	O
}	O
