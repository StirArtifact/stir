int	O
mu_list_rfold	(*(struct),*((*(void),*(void),*(void),*(*(void)))->(int)),*(void),*(void),*(void))->(int)
(	O
mu_list_t	*(struct)
list	*(struct)
,	O
mu_list_folder_t	*((*(void),*(void),*(void),*(*(void)))->(int))
fold	*((*(void),*(void),*(void),*(*(void)))->(int))
,	O
void	O
*	O
data	*(void)
,	O
void	O
*	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
,	O
void	O
*	O
return_value	*(void)
)	O
{	O
struct	O
list_data	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))))
*	O
current	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
int	O
status	int
=	O
0	int
;	O
if	O
(	O
list	*(struct)
==	O
NULL	O
||	O
fold	*((*(void),*(void),*(void),*(*(void)))->(int))
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
return_value	*(void)
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
for	O
(	O
current	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
current	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
!=	O
&	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
;	O
current	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
current	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
)	O
{	O
status	int
=	O
fold	*((*(void),*(void),*(void),*(*(void)))->(int))
(	O
current	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
item	*(void)
,	O
data	*(void)
,	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
,	O
&	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
}	O
*	O
(	O
void	O
*	O
*	O
)	O
return_value	*(void)
=	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
return	O
status	int
;	O
}	O
