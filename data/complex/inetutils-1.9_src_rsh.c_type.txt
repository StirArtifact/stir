int	O
debug_option	int
=	O
0	int
;	O
int	O
null_input_option	int
=	O
0	int
;	O
char	O
*	O
user	*(char)
=	O
NULL	O
;	O
int	O
rfd2	int
;	O
char	O
*	O
copyargs	(*(*(char)))->(*(char))
(	O
char	O
*	O
*	O
)	O
;	O
void	O
sendsig	(int)->(void)
(	O
int	O
)	O
;	O
void	O
talk	(int,*(struct(array(long))),int,int)->(void)
(	O
int	O
,	O
sigset_t	struct(array(long))
*	O
,	O
pid_t	int
,	O
int	O
)	O
;	O
void	O
warning	(*(char))->(void)
(	O
const	O
char	O
*	O
,	O
...	O
)	O
;	O
const	O
char	O
args_doc	*(char)
[	O
]	O
=	O
"[USER@]HOST [COMMAND [ARG...]]"	*(char)
;	O
const	O
char	O
doc	*(char)
[	O
]	O
=	O
"remote shell"	*(char)
;	O
static	O
struct	O
argp_option	struct(*(char),int,*(char),int,*(char),int)
options	*(struct(*(char),int,*(char),int,*(char),int))
[	O
]	O
=	O
{	O
{	O
"debug"	*(char)
,	O
'd'	O
,	O
NULL	O
,	O
0	int
,	O
"turns on socket debugging (see setsockopt(2))"	*(char)
}	O
,	O
{	O
"user"	*(char)
,	O
'l'	O
,	O
"USER"	*(char)
,	O
0	int
,	O
"run as USER on the remote system"	*(char)
}	O
,	O
{	O
"escape"	*(char)
,	O
'e'	O
,	O
"CHAR"	*(char)
,	O
0	int
,	O
"allows user specification of the escape character (``~'' by default)"	*(char)
}	O
,	O
{	O
"8-bit"	*(char)
,	O
'8'	O
,	O
NULL	O
,	O
0	int
,	O
"allows an eight-bit input data path at all times"	*(char)
}	O
,	O
{	O
"no-input"	*(char)
,	O
'n'	O
,	O
NULL	O
,	O
0	int
,	O
"use /dev/null as input"	*(char)
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
error_t	int
parse_opt	(int,*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))))->(int)
(	O
int	O
key	int
,	O
char	O
*	O
arg	*(char)
,	O
struct	O
argp_state	struct(*(struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct`))->(int)),*(char),*(char),*(struct(*(struct`),int,*(char),int)),*((int,*(char),*(void))->(*(char))),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(void))
*	O
state	*(int)
)	O
{	O
switch	O
(	O
key	int
)	O
{	O
case	O
'L'	O
:	O
case	O
'e'	O
:	O
case	O
'w'	O
:	O
case	O
'8'	O
:	O
break	O
;	O
case	O
'd'	O
:	O
debug_option	int
=	O
1	int
;	O
break	O
;	O
case	O
'l'	O
:	O
user	*(char)
=	O
arg	*(char)
;	O
break	O
;	O
case	O
'n'	O
:	O
null_input_option	int
=	O
1	int
;	O
break	O
;	O
default	O
:	O
return	O
ARGP_ERR_UNKNOWN	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
struct	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
=	O
{	O
options	*(struct(*(char),int,*(char),int,*(char),int))
,	O
parse_opt	(int,*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))))->(int)
,	O
args_doc	*(char)
,	O
doc	*(char)
}	O
;	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
index	(*(char),int)->(*(char))
;	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
;	O
struct	O
servent	struct(*(char),*(*(char)),int,*(char))
*	O
sp	*(struct(*(char),*(*(char)),int,*(char)))
;	O
sigset_t	struct(array(long))
sigs	struct(array(long))
,	O
osigs	struct(array(long))
;	O
int	O
asrsh	int
,	O
rem	int
;	O
pid_t	int
pid	int
=	O
0	int
;	O
uid_t	int
uid	int
;	O
char	O
*	O
args	*(char)
,	O
*	O
host	*(char)
;	O
set_program_name	(*(char))->(void)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
asrsh	int
=	O
0	int
;	O
host	*(char)
=	O
user	*(char)
=	O
NULL	O
;	O
{	O
char	O
*	O
p	*(void)
=	O
strrchr	(*(char),int)->(*(char))
(	O
argv	*(*(char))
[	O
0	int
]	O
,	O
'/'	O
)	O
;	O
if	O
(	O
p	*(void)
)	O
++	O
p	*(void)
;	O
else	O
p	*(void)
=	O
argv	*(*(char))
[	O
0	int
]	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
p	*(void)
,	O
"rsh"	*(char)
)	O
)	O
host	*(char)
=	O
p	*(void)
;	O
else	O
asrsh	int
=	O
1	int
;	O
}	O
iu_argp_init	O
(	O
"rsh"	*(char)
,	O
default_program_authors	array(*(char))
)	O
;	O
argp_parse	(*(struct(*(struct(*`,int,*`,int,*`,int)),*((int,*`,*`)->(int)),*(char),*(char),*(struct(*`,int,*`,int)),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,*(int),*(void))->(int)
(	O
&	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
,	O
argc	int
,	O
argv	*(*(char))
,	O
ARGP_IN_ORDER	int
,	O
&	O
index	(*(char),int)->(*(char))
,	O
NULL	O
)	O
;	O
if	O
(	O
index	(*(char),int)->(*(char))
<	O
argc	int
)	O
host	*(char)
=	O
argv	*(*(char))
[	O
index	(*(char),int)->(*(char))
++	O
]	O
;	O
if	O
(	O
!	O
host	*(char)
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"host not specified"	*(char)
)	O
;	O
if	O
(	O
!	O
argv	*(*(char))
[	O
index	(*(char),int)->(*(char))
]	O
)	O
{	O
if	O
(	O
asrsh	int
)	O
*	O
argv	*(*(char))
=	O
(	O
char	O
*	O
)	O
"rlogin"	*(char)
;	O
seteuid	(int)->(int)
(	O
getuid	()->(int)
(	O
)	O
)	O
;	O
setuid	(int)->(int)
(	O
getuid	()->(int)
(	O
)	O
)	O
;	O
execv	(*(char),array(*(char)))->(int)
(	O
PATH_RLOGIN	O
,	O
argv	*(*(char))
)	O
;	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"cannot execute %s"	*(char)
,	O
PATH_RLOGIN	O
)	O
;	O
}	O
argc	int
-=	O
index	(*(char),int)->(*(char))
;	O
argv	*(*(char))
+=	O
index	(*(char),int)->(*(char))
;	O
if	O
(	O
geteuid	()->(int)
(	O
)	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"must be setuid root.\n"	*(char)
)	O
;	O
if	O
(	O
!	O
(	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
getpwuid	(int)->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
uid	int
=	O
getuid	()->(int)
(	O
)	O
)	O
)	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"unknown user id"	*(char)
)	O
;	O
{	O
char	O
*	O
p	*(void)
=	O
strchr	(*(char),int)->(*(char))
(	O
host	*(char)
,	O
'@'	O
)	O
;	O
if	O
(	O
p	*(void)
)	O
{	O
*	O
p	*(void)
=	O
'\0'	O
;	O
if	O
(	O
!	O
user	*(char)
&&	O
p	*(void)
>	O
host	*(char)
)	O
user	*(char)
=	O
host	*(char)
;	O
host	*(char)
=	O
p	*(void)
+	O
1	int
;	O
if	O
(	O
*	O
host	*(char)
==	O
'\0'	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"empty host name"	*(char)
)	O
;	O
}	O
}	O
args	*(char)
=	O
copyargs	(*(*(char)))->(*(char))
(	O
argv	*(*(char))
)	O
;	O
sp	*(struct(*(char),*(*(char)),int,*(char)))
=	O
NULL	O
;	O
if	O
(	O
sp	*(struct(*(char),*(*(char)),int,*(char)))
==	O
NULL	O
)	O
sp	*(struct(*(char),*(*(char)),int,*(char)))
=	O
getservbyname	(*(char),*(char))->(*(struct(*(char),*(*(char)),int,*(char))))
(	O
"shell"	*(char)
,	O
"tcp"	*(char)
)	O
;	O
if	O
(	O
sp	*(struct(*(char),*(*(char)),int,*(char)))
==	O
NULL	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"shell/tcp: unknown service"	*(char)
)	O
;	O
if	O
(	O
!	O
user	*(char)
)	O
user	*(char)
=	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
;	O
rem	int
=	O
rcmd	(*(*(char)),short,*(char),*(char),*(char),*(int))->(int)
(	O
&	O
host	*(char)
,	O
sp	*(struct(*(char),*(*(char)),int,*(char)))
->	O
s_port	int
,	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
,	O
user	*(char)
,	O
args	*(char)
,	O
&	O
rfd2	int
)	O
;	O
if	O
(	O
rem	int
<	O
0	int
)	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
if	O
(	O
rfd2	int
<	O
0	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"can't establish stderr"	*(char)
)	O
;	O
if	O
(	O
debug_option	int
)	O
{	O
int	O
one	int
=	O
1	int
;	O
if	O
(	O
setsockopt	(int,int,int,*(void),int)->(int)
(	O
rem	int
,	O
SOL_SOCKET	int
,	O
SO_DEBUG	int
,	O
(	O
char	O
*	O
)	O
&	O
one	int
,	O
sizeof	O
one	int
)	O
<	O
0	int
)	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
errno	O
,	O
"setsockopt"	*(char)
)	O
;	O
if	O
(	O
setsockopt	(int,int,int,*(void),int)->(int)
(	O
rfd2	int
,	O
SOL_SOCKET	int
,	O
SO_DEBUG	int
,	O
(	O
char	O
*	O
)	O
&	O
one	int
,	O
sizeof	O
one	int
)	O
<	O
0	int
)	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
errno	O
,	O
"setsockopt"	*(char)
)	O
;	O
}	O
seteuid	(int)->(int)
(	O
uid	int
)	O
;	O
setuid	(int)->(int)
(	O
uid	int
)	O
;	O
sigemptyset	(*(struct(array(long))))->(int)
(	O
&	O
sigs	struct(array(long))
)	O
;	O
sigaddset	(*(struct(array(long))),int)->(int)
(	O
&	O
sigs	struct(array(long))
,	O
SIGINT	int
)	O
;	O
sigaddset	(*(struct(array(long))),int)->(int)
(	O
&	O
sigs	struct(array(long))
,	O
SIGQUIT	int
)	O
;	O
sigaddset	(*(struct(array(long))),int)->(int)
(	O
&	O
sigs	struct(array(long))
,	O
SIGTERM	int
)	O
;	O
sigprocmask	(int,*(struct(array(long))),*(struct(array(long))))->(int)
(	O
SIG_BLOCK	int
,	O
&	O
sigs	struct(array(long))
,	O
&	O
osigs	struct(array(long))
)	O
;	O
if	O
(	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGINT	int
,	O
SIG_IGN	O
)	O
!=	O
SIG_IGN	O
)	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGINT	int
,	O
sendsig	(int)->(void)
)	O
;	O
if	O
(	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGQUIT	int
,	O
SIG_IGN	O
)	O
!=	O
SIG_IGN	O
)	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGQUIT	int
,	O
sendsig	(int)->(void)
)	O
;	O
if	O
(	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGTERM	int
,	O
SIG_IGN	O
)	O
!=	O
SIG_IGN	O
)	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGTERM	int
,	O
sendsig	(int)->(void)
)	O
;	O
if	O
(	O
!	O
null_input_option	int
)	O
{	O
pid	int
=	O
fork	()->(int)
(	O
)	O
;	O
if	O
(	O
pid	int
<	O
0	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"fork"	*(char)
)	O
;	O
}	O
{	O
int	O
one	int
=	O
1	int
;	O
ioctl	(int,long)->(int)
(	O
rfd2	int
,	O
FIONBIO	int
,	O
&	O
one	int
)	O
;	O
ioctl	(int,long)->(int)
(	O
rem	int
,	O
FIONBIO	int
,	O
&	O
one	int
)	O
;	O
}	O
talk	(int,*(struct(array(long))),int,int)->(void)
(	O
null_input_option	int
,	O
&	O
osigs	struct(array(long))
,	O
pid	int
,	O
rem	int
)	O
;	O
if	O
(	O
!	O
null_input_option	int
)	O
kill	(int,int)->(int)
(	O
pid	int
,	O
SIGKILL	int
)	O
;	O
return	O
0	int
;	O
}	O
void	O
talk	(int,*(struct(array(long))),int,int)->(void)
(	O
int	O
null_input_option	int
,	O
sigset_t	struct(array(long))
*	O
osigs	struct(array(long))
,	O
pid_t	int
pid	int
,	O
int	O
rem	int
)	O
{	O
int	O
cc	int
,	O
wc	int
;	O
fd_set	struct(array(long))
readfrom	struct(array(long))
,	O
ready	struct(array(long))
,	O
rembits	struct(array(long))
;	O
char	O
*	O
bp	*(char)
,	O
buf	array(char)
[	O
BUFSIZ	int
]	O
;	O
if	O
(	O
!	O
null_input_option	int
&&	O
pid	int
==	O
0	int
)	O
{	O
close	*((*(void))->(int))
(	O
rfd2	int
)	O
;	O
reread	O
:	O
errno	O
=	O
0	int
;	O
if	O
(	O
(	O
cc	int
=	O
read	*((*(void),*(char),long)->(long))
(	O
STDIN_FILENO	int
,	O
buf	array(char)
,	O
sizeof	O
buf	array(char)
)	O
)	O
<=	O
0	int
)	O
goto	O
done	O
;	O
bp	*(char)
=	O
buf	array(char)
;	O
rewrite	O
:	O
FD_ZERO	O
(	O
&	O
rembits	struct(array(long))
)	O
;	O
FD_SET	O
(	O
rem	int
,	O
&	O
rembits	struct(array(long))
)	O
;	O
if	O
(	O
select	(int,*(struct(array(long))),*(struct(array(long))),*(struct(array(long))),*(struct(long,long)))->(int)
(	O
rem	int
+	O
1	int
,	O
0	int
,	O
&	O
rembits	struct(array(long))
,	O
0	int
,	O
0	int
)	O
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
!=	O
EINTR	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"select"	*(char)
)	O
;	O
goto	O
rewrite	O
;	O
}	O
if	O
(	O
!	O
FD_ISSET	O
(	O
rem	int
,	O
&	O
rembits	struct(array(long))
)	O
)	O
goto	O
rewrite	O
;	O
wc	int
=	O
write	*((*(void),*(char),long)->(long))
(	O
rem	int
,	O
bp	*(char)
,	O
cc	int
)	O
;	O
if	O
(	O
wc	int
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
EWOULDBLOCK	O
)	O
goto	O
rewrite	O
;	O
goto	O
done	O
;	O
}	O
bp	*(char)
+=	O
wc	int
;	O
cc	int
-=	O
wc	int
;	O
if	O
(	O
cc	int
==	O
0	int
)	O
goto	O
reread	O
;	O
goto	O
rewrite	O
;	O
done	O
:	O
shutdown	(int,int)->(int)
(	O
rem	int
,	O
1	int
)	O
;	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
sigprocmask	(int,*(struct(array(long))),*(struct(array(long))))->(int)
(	O
SIG_SETMASK	int
,	O
osigs	struct(array(long))
,	O
NULL	O
)	O
;	O
FD_ZERO	O
(	O
&	O
readfrom	struct(array(long))
)	O
;	O
FD_SET	O
(	O
rfd2	int
,	O
&	O
readfrom	struct(array(long))
)	O
;	O
FD_SET	O
(	O
rem	int
,	O
&	O
readfrom	struct(array(long))
)	O
;	O
do	O
{	O
int	O
maxfd	int
=	O
rem	int
;	O
if	O
(	O
rfd2	int
>	O
maxfd	int
)	O
maxfd	int
=	O
rfd2	int
;	O
ready	struct(array(long))
=	O
readfrom	struct(array(long))
;	O
if	O
(	O
select	(int,*(struct(array(long))),*(struct(array(long))),*(struct(array(long))),*(struct(long,long)))->(int)
(	O
maxfd	int
+	O
1	int
,	O
&	O
ready	struct(array(long))
,	O
0	int
,	O
0	int
,	O
0	int
)	O
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
!=	O
EINTR	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"select"	*(char)
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
FD_ISSET	O
(	O
rfd2	int
,	O
&	O
ready	struct(array(long))
)	O
)	O
{	O
errno	O
=	O
0	int
;	O
cc	int
=	O
read	*((*(void),*(char),long)->(long))
(	O
rfd2	int
,	O
buf	array(char)
,	O
sizeof	O
buf	array(char)
)	O
;	O
if	O
(	O
cc	int
<=	O
0	int
)	O
{	O
if	O
(	O
errno	O
!=	O
EWOULDBLOCK	O
)	O
FD_CLR	O
(	O
rfd2	int
,	O
&	O
readfrom	struct(array(long))
)	O
;	O
}	O
else	O
write	*((*(void),*(char),long)->(long))
(	O
2	int
,	O
buf	array(char)
,	O
cc	int
)	O
;	O
}	O
if	O
(	O
FD_ISSET	O
(	O
rem	int
,	O
&	O
ready	struct(array(long))
)	O
)	O
{	O
errno	O
=	O
0	int
;	O
cc	int
=	O
read	*((*(void),*(char),long)->(long))
(	O
rem	int
,	O
buf	array(char)
,	O
sizeof	O
buf	array(char)
)	O
;	O
if	O
(	O
cc	int
<=	O
0	int
)	O
{	O
if	O
(	O
errno	O
!=	O
EWOULDBLOCK	O
)	O
FD_CLR	O
(	O
rem	int
,	O
&	O
readfrom	struct(array(long))
)	O
;	O
}	O
else	O
write	*((*(void),*(char),long)->(long))
(	O
1	int
,	O
buf	array(char)
,	O
cc	int
)	O
;	O
}	O
}	O
while	O
(	O
FD_ISSET	O
(	O
rfd2	int
,	O
&	O
readfrom	struct(array(long))
)	O
||	O
FD_ISSET	O
(	O
rem	int
,	O
&	O
readfrom	struct(array(long))
)	O
)	O
;	O
}	O
void	O
sendsig	(int)->(void)
(	O
int	O
sig	int
)	O
{	O
char	O
signo	char
;	O
signo	char
=	O
sig	int
;	O
write	*((*(void),*(char),long)->(long))
(	O
rfd2	int
,	O
&	O
signo	char
,	O
1	int
)	O
;	O
}	O
char	O
*	O
copyargs	(*(*(char)))->(*(char))
(	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
cc	int
;	O
char	O
*	O
*	O
ap	*(*(char))
,	O
*	O
args	*(char)
,	O
*	O
p	*(void)
;	O
cc	int
=	O
0	int
;	O
for	O
(	O
ap	*(*(char))
=	O
argv	*(*(char))
;	O
*	O
ap	*(*(char))
;	O
++	O
ap	*(*(char))
)	O
cc	int
+=	O
strlen	(*(char))->(long)
(	O
*	O
ap	*(*(char))
)	O
+	O
1	int
;	O
if	O
(	O
!	O
(	O
args	*(char)
=	O
malloc	(long)->(*(void))
(	O
(	O
u_int	int
)	O
cc	int
)	O
)	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"copyargs"	*(char)
)	O
;	O
for	O
(	O
p	*(void)
=	O
args	*(char)
,	O
ap	*(*(char))
=	O
argv	*(*(char))
;	O
*	O
ap	*(*(char))
;	O
++	O
ap	*(*(char))
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
p	*(void)
,	O
*	O
ap	*(*(char))
)	O
;	O
for	O
(	O
p	*(void)
=	O
strcpy	(*(char),*(char))->(*(char))
(	O
p	*(void)
,	O
*	O
ap	*(*(char))
)	O
;	O
*	O
p	*(void)
;	O
++	O
p	*(void)
)	O
;	O
if	O
(	O
ap	*(*(char))
[	O
1	int
]	O
)	O
*	O
p	*(void)
++	O
=	O
' '	O
;	O
}	O
return	O
args	*(char)
;	O
}	O
