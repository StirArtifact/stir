static	O
unsigned	O
int_len	(int)->(int)
(	O
unsigned	O
n	int
)	O
{	O
unsigned	O
len	int
=	O
1	int
;	O
while	O
(	O
n	int
>=	O
10	int
)	O
{	O
n	int
/=	O
10	int
;	O
len	int
++	O
;	O
}	O
return	O
len	int
;	O
}	O
static	O
unsigned	O
tv_div	(*(struct(long,long)),*(struct(long,long)))->(int)
(	O
struct	O
timeval	struct(long,long)
*	O
tv1	*(struct(long,long))
,	O
struct	O
timeval	struct(long,long)
*	O
tv2	*(struct(long,long))
)	O
{	O
return	O
tv2	*(struct(long,long))
->	O
tv_sec	long
?	O
tv1	*(struct(long,long))
->	O
tv_sec	long
/	O
tv2	*(struct(long,long))
->	O
tv_sec	long
:	O
(	O
tv1	*(struct(long,long))
->	O
tv_usec	long
/	O
tv2	*(struct(long,long))
->	O
tv_usec	long
+	O
(	O
tv1	*(struct(long,long))
->	O
tv_sec	long
?	O
tv1	*(struct(long,long))
->	O
tv_sec	long
*	O
1000000	int
/	O
tv2	*(struct(long,long))
->	O
tv_usec	long
:	O
0	int
)	O
)	O
;	O
}	O
static	O
inline	O
int	O
tv_is_zero	(*(struct(long,long)))->(int)
(	O
struct	O
timeval	struct(long,long)
*	O
tv	*(struct(long,long))
)	O
{	O
return	O
tv	*(struct(long,long))
->	O
tv_sec	long
==	O
0	int
&&	O
tv	*(struct(long,long))
->	O
tv_usec	long
==	O
0	int
;	O
}	O
static	O
inline	O
int	O
tv_is_ge	(*(struct(long,long)),*(struct(long,long)))->(int)
(	O
struct	O
timeval	struct(long,long)
*	O
tv1	*(struct(long,long))
,	O
struct	O
timeval	struct(long,long)
*	O
tv2	*(struct(long,long))
)	O
{	O
return	O
tv1	*(struct(long,long))
->	O
tv_sec	long
>	O
tv2	*(struct(long,long))
->	O
tv_sec	long
||	O
(	O
tv1	*(struct(long,long))
->	O
tv_sec	long
==	O
tv2	*(struct(long,long))
->	O
tv_sec	long
&&	O
tv1	*(struct(long,long))
->	O
tv_usec	long
>=	O
tv2	*(struct(long,long))
->	O
tv_usec	long
)	O
;	O
}	O
size_t	long
fmt_named_interval	(*(struct(long,long)),long,*(char),long)->(long)
(	O
struct	O
timeval	struct(long,long)
*	O
tv	*(struct(long,long))
,	O
size_t	long
width	long
,	O
char	O
*	O
buf	*(char)
,	O
size_t	long
buf_len	long
)	O
{	O
struct	O
tscale	struct(struct(long,long),struct(long,long),struct(long,long),array(*(char)))
{	O
struct	O
timeval	struct(long,long)
thresh	struct(long,long)
;	O
struct	O
timeval	struct(long,long)
unit	struct(long,long)
;	O
struct	O
timeval	struct(long,long)
frac_thresh	struct(long,long)
;	O
char	O
*	O
sfxs	array(*(char))
[	O
5	int
]	O
;	O
}	O
time_scales	array(struct(struct(long,long),struct(long,long),struct(long,long),array(*(char))))
[	O
]	O
=	O
{	O
{	O
{	O
2	int
*	O
YEAR	O
,	O
0	int
}	O
,	O
{	O
YEAR	O
,	O
0	int
}	O
,	O
{	O
MONTH	O
,	O
0	int
}	O
,	O
{	O
" years"	*(char)
,	O
"years"	*(char)
,	O
"yrs"	*(char)
,	O
"y"	*(char)
,	O
0	int
}	O
}	O
,	O
{	O
{	O
3	int
*	O
MONTH	O
,	O
0	int
}	O
,	O
{	O
MONTH	O
,	O
0	int
}	O
,	O
{	O
WEEK	O
,	O
0	int
}	O
,	O
{	O
" months"	*(char)
,	O
"months"	*(char)
,	O
"mo"	*(char)
,	O
0	int
}	O
}	O
,	O
{	O
{	O
2	int
*	O
WEEK	O
,	O
0	int
}	O
,	O
{	O
WEEK	O
,	O
0	int
}	O
,	O
{	O
DAY	O
,	O
0	int
}	O
,	O
{	O
" weeks"	*(char)
,	O
"weeks"	*(char)
,	O
"wks"	*(char)
,	O
"w"	*(char)
,	O
0	int
}	O
}	O
,	O
{	O
{	O
2	int
*	O
DAY	O
,	O
0	int
}	O
,	O
{	O
DAY	O
,	O
0	int
}	O
,	O
{	O
HOUR	O
,	O
0	int
}	O
,	O
{	O
" days"	*(char)
,	O
"days"	*(char)
,	O
"dys"	*(char)
,	O
"d"	*(char)
,	O
0	int
}	O
}	O
,	O
{	O
{	O
2	int
*	O
HOUR	O
,	O
0	int
}	O
,	O
{	O
HOUR	O
,	O
0	int
}	O
,	O
{	O
MINUTE	int
,	O
0	int
}	O
,	O
{	O
" hours"	*(char)
,	O
"hours"	*(char)
,	O
"hrs"	*(char)
,	O
"h"	*(char)
,	O
0	int
}	O
}	O
,	O
{	O
{	O
2	int
*	O
MINUTE	int
,	O
0	int
}	O
,	O
{	O
MINUTE	int
,	O
0	int
}	O
,	O
{	O
1	int
,	O
0	int
}	O
,	O
{	O
" minutes"	*(char)
,	O
"min"	*(char)
,	O
"mi"	*(char)
,	O
"m"	*(char)
,	O
0	int
}	O
}	O
,	O
{	O
{	O
1	int
,	O
100000	int
}	O
,	O
{	O
1	int
,	O
0	int
}	O
,	O
{	O
0	int
,	O
100000	int
}	O
,	O
{	O
" seconds"	*(char)
,	O
"sec"	*(char)
,	O
"s"	*(char)
,	O
0	int
}	O
}	O
,	O
{	O
{	O
1	int
,	O
0	int
}	O
,	O
{	O
1	int
,	O
0	int
}	O
,	O
{	O
0	int
,	O
0	int
}	O
,	O
{	O
" second"	*(char)
,	O
"sec"	*(char)
,	O
"s"	*(char)
,	O
0	int
}	O
}	O
,	O
{	O
{	O
0	int
,	O
1100	int
}	O
,	O
{	O
0	int
,	O
1000	int
}	O
,	O
{	O
0	int
,	O
100	int
}	O
,	O
{	O
" milliseconds"	*(char)
,	O
"ms"	*(char)
,	O
0	int
}	O
}	O
,	O
{	O
{	O
0	int
,	O
1000	int
}	O
,	O
{	O
0	int
,	O
1000	int
}	O
,	O
{	O
0	int
,	O
0	int
}	O
,	O
{	O
" millisecond"	*(char)
,	O
"ms"	*(char)
,	O
0	int
}	O
}	O
,	O
{	O
{	O
0	int
,	O
2	int
}	O
,	O
{	O
0	int
,	O
1	int
}	O
,	O
{	O
0	int
,	O
0	int
}	O
,	O
{	O
" microseconds"	*(char)
,	O
"us"	*(char)
,	O
0	int
}	O
}	O
,	O
{	O
{	O
0	int
,	O
1	int
}	O
,	O
{	O
0	int
,	O
1	int
}	O
,	O
{	O
0	int
,	O
0	int
}	O
,	O
{	O
" microsecond"	*(char)
,	O
"us"	*(char)
,	O
0	int
}	O
}	O
,	O
{	O
{	O
0	int
,	O
0	int
}	O
}	O
}	O
;	O
struct	O
tscale	struct(struct(long,long),struct(long,long),struct(long,long),array(*(char)))
*	O
ts	*(struct(struct(long,long),struct(long,long),struct(long,long),array(*(char))))
;	O
if	O
(	O
width	long
<=	O
0	int
||	O
width	long
>=	O
buf_len	long
)	O
width	long
=	O
buf_len	long
-	O
1	int
;	O
for	O
(	O
ts	*(struct(struct(long,long),struct(long,long),struct(long,long),array(*(char))))
=	O
time_scales	array(struct(struct(long,long),struct(long,long),struct(long,long),array(*(char))))
;	O
!	O
tv_is_zero	(*(struct(long,long)))->(int)
(	O
&	O
ts	*(struct(struct(long,long),struct(long,long),struct(long,long),array(*(char))))
->	O
thresh	struct(long,long)
)	O
;	O
ts	*(struct(struct(long,long),struct(long,long),struct(long,long),array(*(char))))
++	O
)	O
if	O
(	O
tv_is_ge	(*(struct(long,long)),*(struct(long,long)))->(int)
(	O
tv	*(struct(long,long))
,	O
&	O
ts	*(struct(struct(long,long),struct(long,long),struct(long,long),array(*(char))))
->	O
thresh	struct(long,long)
)	O
)	O
{	O
char	O
*	O
*	O
sfx	*(*(char))
;	O
struct	O
timeval	struct(long,long)
*	O
u	*(struct(long,long))
=	O
&	O
ts	*(struct(struct(long,long),struct(long,long),struct(long,long),array(*(char))))
->	O
unit	struct(long,long)
;	O
unsigned	O
num	int
=	O
tv_div	(*(struct(long,long)),*(struct(long,long)))->(int)
(	O
tv	*(struct(long,long))
,	O
u	*(struct(long,long))
)	O
;	O
unsigned	O
frac	int
=	O
0	int
;	O
unsigned	O
num_len	int
=	O
int_len	(int)->(int)
(	O
num	int
)	O
;	O
if	O
(	O
num	int
<	O
10	int
&&	O
!	O
tv_is_zero	(*(struct(long,long)))->(int)
(	O
&	O
ts	*(struct(struct(long,long),struct(long,long),struct(long,long),array(*(char))))
->	O
frac_thresh	struct(long,long)
)	O
&&	O
tv_is_ge	(*(struct(long,long)),*(struct(long,long)))->(int)
(	O
tv	*(struct(long,long))
,	O
&	O
ts	*(struct(struct(long,long),struct(long,long),struct(long,long),array(*(char))))
->	O
frac_thresh	struct(long,long)
)	O
)	O
{	O
struct	O
timeval	struct(long,long)
tv10	struct(long,long)
=	O
{	O
tv	*(struct(long,long))
->	O
tv_sec	long
*	O
10	int
+	O
tv	*(struct(long,long))
->	O
tv_usec	long
/	O
100000	int
,	O
(	O
tv	*(struct(long,long))
->	O
tv_usec	long
%	O
100000	int
)	O
*	O
10	int
}	O
;	O
frac	int
=	O
tv_div	(*(struct(long,long)),*(struct(long,long)))->(int)
(	O
&	O
tv10	struct(long,long)
,	O
u	*(struct(long,long))
)	O
-	O
num	int
*	O
10	int
;	O
if	O
(	O
frac	int
)	O
num_len	int
+=	O
2	int
;	O
}	O
for	O
(	O
sfx	*(*(char))
=	O
ts	*(struct(struct(long,long),struct(long,long),struct(long,long),array(*(char))))
->	O
sfxs	array(*(char))
;	O
sfx	*(*(char))
[	O
1	int
]	O
;	O
sfx	*(*(char))
++	O
)	O
if	O
(	O
num_len	int
+	O
strlen	(*(char))->(long)
(	O
*	O
sfx	*(*(char))
)	O
<=	O
width	long
)	O
break	O
;	O
if	O
(	O
!	O
sfx	*(*(char))
[	O
1	int
]	O
&&	O
frac	int
)	O
{	O
num_len	int
-=	O
2	int
;	O
frac	int
=	O
0	int
;	O
for	O
(	O
sfx	*(*(char))
=	O
ts	*(struct(struct(long,long),struct(long,long),struct(long,long),array(*(char))))
->	O
sfxs	array(*(char))
;	O
sfx	*(*(char))
[	O
1	int
]	O
;	O
sfx	*(*(char))
++	O
)	O
if	O
(	O
num_len	int
+	O
strlen	(*(char))->(long)
(	O
*	O
sfx	*(*(char))
)	O
<=	O
width	long
)	O
break	O
;	O
}	O
if	O
(	O
!	O
sfx	*(*(char))
[	O
1	int
]	O
)	O
sfx	*(*(char))
--	O
;	O
if	O
(	O
frac	int
)	O
return	O
snprintf	(*(char),long,*(char))->(int)
(	O
buf	*(char)
,	O
buf_len	long
,	O
"%d.%d%s"	*(char)
,	O
num	int
,	O
frac	int
,	O
*	O
sfx	*(*(char))
)	O
;	O
else	O
return	O
snprintf	(*(char),long,*(char))->(int)
(	O
buf	*(char)
,	O
buf_len	long
,	O
"%d%s"	*(char)
,	O
num	int
,	O
*	O
sfx	*(*(char))
)	O
;	O
}	O
return	O
sprintf	(*(char),*(char))->(int)
(	O
buf	*(char)
,	O
"0"	*(char)
)	O
;	O
}	O
static	O
size_t	long
add_field	(*(int),int,*(int),long,*(char),long,*(char))->(long)
(	O
int	O
*	O
secs	*(int)
,	O
int	O
unit	struct(long,long)
,	O
int	O
*	O
leading_zeros	int
,	O
size_t	long
min_width	long
,	O
char	O
*	O
suffix	*(char)
,	O
size_t	long
width	long
,	O
char	O
*	O
buf	*(char)
)	O
{	O
int	O
units	int
=	O
*	O
secs	*(int)
/	O
unit	struct(long,long)
;	O
if	O
(	O
units	int
||	O
(	O
width	long
>=	O
min_width	long
&&	O
*	O
leading_zeros	int
)	O
)	O
{	O
*	O
secs	*(int)
-=	O
units	int
*	O
unit	struct(long,long)
;	O
*	O
leading_zeros	int
=	O
1	int
;	O
return	O
sprintf	(*(char),*(char))->(int)
(	O
buf	*(char)
,	O
(	O
width	long
==	O
min_width	long
?	O
"%d%s"	*(char)
:	O
width	long
==	O
min_width	long
+	O
1	int
?	O
"%2d%s"	*(char)
:	O
"%02d%s"	*(char)
)	O
,	O
units	int
,	O
suffix	*(char)
)	O
;	O
}	O
else	O
return	O
0	int
;	O
}	O
size_t	long
fmt_seconds	(*(struct(long,long)),int,int,long,*(char),long)->(long)
(	O
struct	O
timeval	struct(long,long)
*	O
tv	*(struct(long,long))
,	O
int	O
leading_zeros	int
,	O
int	O
frac_places	int
,	O
size_t	long
width	long
,	O
char	O
*	O
buf	*(char)
,	O
size_t	long
buf_len	long
)	O
{	O
char	O
*	O
p	*(char)
=	O
buf	*(char)
;	O
int	O
secs	*(int)
=	O
tv	*(struct(long,long))
->	O
tv_sec	long
;	O
if	O
(	O
width	long
<=	O
0	int
||	O
width	long
>=	O
buf_len	long
)	O
width	long
=	O
buf_len	long
-	O
1	int
;	O
if	O
(	O
tv	*(struct(long,long))
->	O
tv_sec	long
>	O
DAY	O
)	O
return	O
fmt_named_interval	(*(struct(long,long)),long,*(char),long)->(long)
(	O
tv	*(struct(long,long))
,	O
width	long
,	O
buf	*(char)
,	O
buf_len	long
)	O
;	O
if	O
(	O
frac_places	int
>	O
0	int
)	O
width	long
-=	O
frac_places	int
+	O
1	int
;	O
if	O
(	O
(	O
secs	*(int)
>	O
10	int
*	O
HOUR	O
&&	O
width	long
<	O
8	int
)	O
||	O
(	O
secs	*(int)
>	O
HOUR	O
&&	O
width	long
<	O
7	int
)	O
||	O
(	O
secs	*(int)
>	O
10	int
*	O
MINUTE	int
&&	O
width	long
<	O
5	int
)	O
||	O
(	O
secs	*(int)
>	O
MINUTE	int
&&	O
width	long
<	O
4	int
)	O
||	O
(	O
secs	*(int)
>	O
10	int
&&	O
width	long
<	O
2	int
)	O
||	O
width	long
<	O
1	int
)	O
return	O
fmt_named_interval	(*(struct(long,long)),long,*(char),long)->(long)
(	O
tv	*(struct(long,long))
,	O
width	long
,	O
buf	*(char)
,	O
buf_len	long
)	O
;	O
p	*(char)
+=	O
add_field	(*(int),int,*(int),long,*(char),long,*(char))->(long)
(	O
&	O
secs	*(int)
,	O
HOUR	O
,	O
&	O
leading_zeros	int
,	O
7	int
,	O
":"	*(char)
,	O
width	long
,	O
p	*(char)
)	O
;	O
p	*(char)
+=	O
add_field	(*(int),int,*(int),long,*(char),long,*(char))->(long)
(	O
&	O
secs	*(int)
,	O
MINUTE	int
,	O
&	O
leading_zeros	int
,	O
4	int
,	O
":"	*(char)
,	O
width	long
,	O
p	*(char)
)	O
;	O
p	*(char)
+=	O
add_field	(*(int),int,*(int),long,*(char),long,*(char))->(long)
(	O
&	O
secs	*(int)
,	O
SECOND	int
,	O
&	O
leading_zeros	int
,	O
1	int
,	O
""	*(char)
,	O
width	long
,	O
p	*(char)
)	O
;	O
if	O
(	O
frac_places	int
<	O
0	int
&&	O
(	O
p	*(char)
-	O
buf	*(char)
)	O
<	O
(	O
int	O
)	O
width	long
-	O
2	int
)	O
frac_places	int
=	O
width	long
-	O
(	O
p	*(char)
-	O
buf	*(char)
)	O
-	O
1	int
;	O
if	O
(	O
frac_places	int
>	O
0	int
)	O
{	O
int	O
frac	int
=	O
tv	*(struct(long,long))
->	O
tv_usec	long
,	O
i	int
;	O
for	O
(	O
i	int
=	O
6	int
;	O
i	int
>	O
frac_places	int
;	O
i	int
--	O
)	O
frac	int
/=	O
10	int
;	O
return	O
(	O
p	*(char)
-	O
buf	*(char)
)	O
+	O
sprintf	(*(char),*(char))->(int)
(	O
p	*(char)
,	O
".%0*d"	*(char)
,	O
frac_places	int
,	O
frac	int
)	O
;	O
}	O
else	O
return	O
(	O
p	*(char)
-	O
buf	*(char)
)	O
;	O
}	O
size_t	long
fmt_minutes	(*(struct(long,long)),int,long,*(char),long)->(long)
(	O
struct	O
timeval	struct(long,long)
*	O
tv	*(struct(long,long))
,	O
int	O
leading_zeros	int
,	O
size_t	long
width	long
,	O
char	O
*	O
buf	*(char)
,	O
size_t	long
buf_len	long
)	O
{	O
char	O
*	O
p	*(char)
=	O
buf	*(char)
;	O
int	O
secs	*(int)
=	O
tv	*(struct(long,long))
->	O
tv_sec	long
;	O
if	O
(	O
width	long
<=	O
0	int
||	O
width	long
>=	O
buf_len	long
)	O
width	long
=	O
buf_len	long
-	O
1	int
;	O
if	O
(	O
secs	*(int)
>	O
DAY	O
)	O
return	O
fmt_named_interval	(*(struct(long,long)),long,*(char),long)->(long)
(	O
tv	*(struct(long,long))
,	O
width	long
,	O
buf	*(char)
,	O
buf_len	long
)	O
;	O
if	O
(	O
(	O
secs	*(int)
>	O
10	int
*	O
HOUR	O
&&	O
width	long
<	O
5	int
)	O
||	O
(	O
secs	*(int)
>	O
HOUR	O
&&	O
width	long
<	O
4	int
)	O
||	O
(	O
secs	*(int)
>	O
10	int
*	O
MINUTE	int
&&	O
width	long
<	O
2	int
)	O
||	O
width	long
<	O
1	int
)	O
return	O
fmt_named_interval	(*(struct(long,long)),long,*(char),long)->(long)
(	O
tv	*(struct(long,long))
,	O
width	long
,	O
buf	*(char)
,	O
buf_len	long
)	O
;	O
p	*(char)
+=	O
add_field	(*(int),int,*(int),long,*(char),long,*(char))->(long)
(	O
&	O
secs	*(int)
,	O
HOUR	O
,	O
&	O
leading_zeros	int
,	O
4	int
,	O
":"	*(char)
,	O
width	long
,	O
p	*(char)
)	O
;	O
p	*(char)
+=	O
add_field	(*(int),int,*(int),long,*(char),long,*(char))->(long)
(	O
&	O
secs	*(int)
,	O
MINUTE	int
,	O
&	O
leading_zeros	int
,	O
1	int
,	O
""	*(char)
,	O
width	long
,	O
p	*(char)
)	O
;	O
return	O
p	*(char)
-	O
buf	*(char)
;	O
}	O
size_t	long
fmt_past_time	(*(struct(long,long)),*(struct(long,long)),long,*(char),long)->(long)
(	O
struct	O
timeval	struct(long,long)
*	O
tv	*(struct(long,long))
,	O
struct	O
timeval	struct(long,long)
*	O
now	*(struct(long,long))
,	O
size_t	long
width	long
,	O
char	O
*	O
buf	*(char)
,	O
size_t	long
buf_len	long
)	O
{	O
static	O
char	O
*	O
time_fmts	array(*(char))
[	O
]	O
=	O
{	O
"%-r"	*(char)
,	O
"%-l:%M%p"	*(char)
,	O
"%-l%p"	*(char)
,	O
0	int
}	O
;	O
static	O
char	O
*	O
week_fmts	array(*(char))
[	O
]	O
=	O
{	O
"%A"	*(char)
,	O
"%a"	*(char)
,	O
0	int
}	O
;	O
static	O
char	O
*	O
month_fmts	array(*(char))
[	O
]	O
=	O
{	O
"%A %-d"	*(char)
,	O
"%a %-d"	*(char)
,	O
"%a%-d"	*(char)
,	O
0	int
}	O
;	O
static	O
char	O
*	O
date_fmts	array(*(char))
[	O
]	O
=	O
{	O
"%A, %-d %B"	*(char)
,	O
"%a, %-d %b"	*(char)
,	O
"%-d %B"	*(char)
,	O
"%-d %b"	*(char)
,	O
"%-d%b"	*(char)
,	O
0	int
}	O
;	O
static	O
char	O
*	O
year_fmts	array(*(char))
[	O
]	O
=	O
{	O
"%A, %-d %B %Y"	*(char)
,	O
"%a, %-d %b %Y"	*(char)
,	O
"%a, %-d %b %y"	*(char)
,	O
"%-d %b %y"	*(char)
,	O
"%-d%b%y"	*(char)
,	O
0	int
}	O
;	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
;	O
int	O
used	int
=	O
0	int
;	O
long	O
diff	long
=	O
now	*(struct(long,long))
?	O
(	O
now	*(struct(long,long))
->	O
tv_sec	long
-	O
tv	*(struct(long,long))
->	O
tv_sec	long
)	O
:	O
tv	*(struct(long,long))
->	O
tv_sec	long
;	O
if	O
(	O
diff	long
<	O
0	int
)	O
diff	long
=	O
-	O
diff	long
;	O
bcopy	(*(void),*(void),long)->(void)
(	O
localtime	(*(long))->(*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))
(	O
(	O
time_t	long
*	O
)	O
&	O
tv	*(struct(long,long))
->	O
tv_sec	long
)	O
,	O
&	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
,	O
sizeof	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
)	O
;	O
if	O
(	O
width	long
<=	O
0	int
||	O
width	long
>=	O
buf_len	long
)	O
width	long
=	O
buf_len	long
-	O
1	int
;	O
if	O
(	O
diff	long
<	O
DAY	O
)	O
{	O
char	O
*	O
*	O
fmt	*(*(char))
;	O
for	O
(	O
fmt	*(*(char))
=	O
time_fmts	array(*(char))
;	O
*	O
fmt	*(*(char))
&&	O
!	O
used	int
;	O
fmt	*(*(char))
++	O
)	O
used	int
=	O
strftime	(*(char),long,*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(long)
(	O
buf	*(char)
,	O
width	long
+	O
1	int
,	O
*	O
fmt	*(*(char))
,	O
&	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
)	O
;	O
if	O
(	O
!	O
used	int
)	O
used	int
=	O
strftime	(*(char),long,*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(long)
(	O
buf	*(char)
,	O
buf_len	long
,	O
fmt	*(*(char))
[	O
-	O
1	int
]	O
,	O
&	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
)	O
;	O
}	O
else	O
{	O
static	O
char	O
*	O
seps	array(*(char))
[	O
]	O
=	O
{	O
", "	*(char)
,	O
" "	*(char)
,	O
""	*(char)
,	O
0	int
}	O
;	O
char	O
*	O
*	O
fmt	*(*(char))
,	O
*	O
*	O
dfmt	*(*(char))
,	O
*	O
*	O
dfmts	*(*(char))
,	O
*	O
*	O
sep	*(*(char))
;	O
if	O
(	O
diff	long
<	O
WEEK	O
)	O
dfmts	*(*(char))
=	O
week_fmts	array(*(char))
;	O
else	O
if	O
(	O
diff	long
<	O
MONTH	O
)	O
dfmts	*(*(char))
=	O
month_fmts	array(*(char))
;	O
else	O
if	O
(	O
diff	long
<	O
YEAR	O
)	O
dfmts	*(*(char))
=	O
date_fmts	array(*(char))
;	O
else	O
dfmts	*(*(char))
=	O
year_fmts	array(*(char))
;	O
for	O
(	O
fmt	*(*(char))
=	O
time_fmts	array(*(char))
;	O
*	O
fmt	*(*(char))
&&	O
!	O
used	int
;	O
fmt	*(*(char))
++	O
)	O
for	O
(	O
sep	*(*(char))
=	O
seps	array(*(char))
;	O
*	O
sep	*(*(char))
&&	O
!	O
used	int
;	O
sep	*(*(char))
++	O
)	O
for	O
(	O
dfmt	*(*(char))
=	O
dfmts	*(*(char))
;	O
*	O
dfmt	*(*(char))
&&	O
!	O
used	int
;	O
dfmt	*(*(char))
++	O
)	O
{	O
char	O
whole_fmt	O
[	O
strlen	(*(char))->(long)
(	O
*	O
dfmt	*(*(char))
)	O
+	O
strlen	(*(char))->(long)
(	O
*	O
sep	*(*(char))
)	O
+	O
strlen	(*(char))->(long)
(	O
*	O
fmt	*(*(char))
)	O
+	O
1	int
]	O
;	O
char	O
*	O
end	*(char)
=	O
whole_fmt	O
;	O
end	*(char)
=	O
stpcpy	(*(char),*(char))->(*(char))
(	O
end	*(char)
,	O
*	O
dfmt	*(*(char))
)	O
;	O
end	*(char)
=	O
stpcpy	(*(char),*(char))->(*(char))
(	O
end	*(char)
,	O
*	O
sep	*(*(char))
)	O
;	O
stpcpy	(*(char),*(char))->(*(char))
(	O
end	*(char)
,	O
*	O
fmt	*(*(char))
)	O
;	O
used	int
=	O
strftime	(*(char),long,*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(long)
(	O
buf	*(char)
,	O
width	long
+	O
1	int
,	O
whole_fmt	O
,	O
&	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
)	O
;	O
}	O
if	O
(	O
!	O
used	int
)	O
for	O
(	O
dfmt	*(*(char))
=	O
dfmts	*(*(char))
;	O
*	O
dfmt	*(*(char))
&&	O
!	O
used	int
;	O
dfmt	*(*(char))
++	O
)	O
used	int
=	O
strftime	(*(char),long,*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(long)
(	O
buf	*(char)
,	O
width	long
+	O
1	int
,	O
*	O
dfmt	*(*(char))
,	O
&	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
)	O
;	O
if	O
(	O
!	O
used	int
)	O
used	int
=	O
strftime	(*(char),long,*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(long)
(	O
buf	*(char)
,	O
buf_len	long
,	O
dfmt	*(*(char))
[	O
-	O
1	int
]	O
,	O
&	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
)	O
;	O
}	O
return	O
used	int
;	O
}	O
