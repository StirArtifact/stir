static	O
int	O
mailbox_folder_create	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,*`,*`,*`,*`,int,int,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(char),*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
,	O
mu_record_t	*(struct)
record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
)	O
{	O
int	O
rc	int
;	O
mu_url_t	*(struct)
url	*(struct)
;	O
if	O
(	O
(	O
rc	int
=	O
mu_url_uplevel	(*(struct),*(*(struct)))->(int)
(	O
mbox	*(struct)
->	O
url	*(struct)
,	O
&	O
url	*(struct)
)	O
)	O
)	O
{	O
if	O
(	O
rc	int
==	O
MU_ERR_NOENT	O
)	O
{	O
rc	int
=	O
mu_url_dup	(*(struct),*(*(struct)))->(int)
(	O
mbox	*(struct)
->	O
url	*(struct)
,	O
&	O
url	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
else	O
return	O
rc	int
;	O
}	O
rc	int
=	O
mu_folder_create_from_record	(*(*(struct)),*(struct),*(struct))->(int)
(	O
&	O
mbox	*(struct)
->	O
folder	*(struct)
,	O
url	*(struct)
,	O
record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
)	O
;	O
if	O
(	O
rc	int
)	O
mu_url_destroy	(*(*(struct)))->(void)
(	O
&	O
url	*(struct)
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
_mailbox_create_from_record	(*(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int))))),*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(struct(int,*(char),*(char),*(char),*(struct),*(char),*(char),short,*(char),*(char),*(*(char)),int,*(*(char)),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(struct),*(struct),*(struct),*(struct(*`,*`,int,int)),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(char))->(int)
(	O
mu_mailbox_t	*(struct)
*	O
pmbox	*(*(struct))
,	O
mu_record_t	*(struct)
record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
,	O
mu_url_t	*(struct)
url	*(struct)
,	O
mu_folder_t	*(struct)
folder	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
int	O
(	O
*	O
m_init	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int))
)	O
(	O
mu_mailbox_t	*(struct)
)	O
=	O
NULL	O
;	O
mu_record_get_mailbox	(*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(*((*(struct`))->(int))))->(int)
(	O
record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
,	O
&	O
m_init	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int))
)	O
;	O
if	O
(	O
m_init	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int))
)	O
{	O
int	O
status	int
;	O
int	O
(	O
*	O
u_init	*((*(struct(int,*(char),*(char),*(char),*(struct`),*(char),*(char),short,*(char),*(char),*(*`),int,*(*`),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)))))->(int))
)	O
(	O
mu_url_t	*(struct)
)	O
=	O
NULL	O
;	O
mu_mailbox_t	*(struct)
mbox	*(struct)
;	O
mbox	*(struct)
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
mbox	*(struct)
)	O
)	O
;	O
if	O
(	O
mbox	*(struct)
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
mbox	*(struct)
->	O
notify_fd	int
=	O
-	O
1	int
;	O
status	int
=	O
mu_monitor_create	(*(*(struct(*(void),*(void),int,int))),int,*(void))->(int)
(	O
&	O
mbox	*(struct)
->	O
monitor	*(struct(*(void),*(void),int,int))
,	O
0	int
,	O
mbox	*(struct)
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
{	O
mu_mailbox_destroy	(*(*(struct)))->(void)
(	O
&	O
mbox	*(struct)
)	O
;	O
return	O
status	int
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
url	*(struct)
->	O
scheme	*(char)
,	O
record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
->	O
scheme	*(char)
)	O
)	O
{	O
char	O
*	O
p	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
->	O
scheme	*(char)
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
{	O
mu_mailbox_destroy	(*(*(struct)))->(void)
(	O
&	O
mbox	*(struct)
)	O
;	O
return	O
errno	O
;	O
}	O
free	(*(void))->(void)
(	O
url	*(struct)
->	O
scheme	*(char)
)	O
;	O
url	*(struct)
->	O
scheme	*(char)
=	O
p	*(char)
;	O
}	O
mu_record_get_url	(*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(*((*(struct`))->(int))))->(int)
(	O
record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
,	O
&	O
u_init	*((*(struct(int,*(char),*(char),*(char),*(struct`),*(char),*(char),short,*(char),*(char),*(*`),int,*(*`),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)))))->(int))
)	O
;	O
if	O
(	O
u_init	*((*(struct(int,*(char),*(char),*(char),*(struct`),*(char),*(char),short,*(char),*(char),*(*`),int,*(*`),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)))))->(int))
&&	O
(	O
status	int
=	O
u_init	*((*(struct(int,*(char),*(char),*(char),*(struct`),*(char),*(char),short,*(char),*(char),*(*`),int,*(*`),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)))))->(int))
(	O
url	*(struct)
)	O
)	O
!=	O
0	int
)	O
{	O
mu_mailbox_destroy	(*(*(struct)))->(void)
(	O
&	O
mbox	*(struct)
)	O
;	O
return	O
status	int
;	O
}	O
mbox	*(struct)
->	O
url	*(struct)
=	O
url	*(struct)
;	O
if	O
(	O
folder	*(struct)
)	O
{	O
folder	*(struct)
->	O
ref	*(char)
++	O
;	O
mbox	*(struct)
->	O
folder	*(struct)
=	O
folder	*(struct)
;	O
}	O
else	O
status	int
=	O
mailbox_folder_create	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,*`,*`,*`,*`,int,int,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(char),*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))))->(int)
(	O
mbox	*(struct)
,	O
name	*(char)
,	O
record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
status	int
=	O
m_init	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int))
(	O
mbox	*(struct)
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
{	O
mbox	*(struct)
->	O
url	*(struct)
=	O
NULL	O
;	O
mu_mailbox_destroy	(*(*(struct)))->(void)
(	O
&	O
mbox	*(struct)
)	O
;	O
}	O
else	O
*	O
pmbox	*(*(struct))
=	O
mbox	*(struct)
;	O
return	O
status	int
;	O
}	O
return	O
ENOSYS	int
;	O
}	O
static	O
int	O
_create_mailbox0	(*(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int))))),*(struct(int,*(char),*(char),*(char),*(struct),*(char),*(char),short,*(char),*(char),*(*(char)),int,*(*(char)),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)))),*(char))->(int)
(	O
mu_mailbox_t	*(struct)
*	O
pmbox	*(*(struct))
,	O
mu_url_t	*(struct)
url	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
mu_record_t	*(struct)
record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
=	O
NULL	O
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_registrar_lookup_url	(*(struct),int,*(*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int))))),*(int))->(int)
(	O
url	*(struct)
,	O
MU_FOLDER_ATTRIBUTE_FILE	int
,	O
&	O
record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
rc	int
=	O
_mailbox_create_from_record	(*(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int))))),*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(struct(int,*(char),*(char),*(char),*(struct),*(char),*(char),short,*(char),*(char),*(*(char)),int,*(*(char)),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(struct),*(struct),*(struct),*(struct(*`,*`,int,int)),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(char))->(int)
(	O
pmbox	*(*(struct))
,	O
record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
,	O
url	*(struct)
,	O
NULL	O
,	O
name	*(char)
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_create_mailbox	(*(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int))))),*(char))->(int)
(	O
mu_mailbox_t	*(struct)
*	O
pmbox	*(*(struct))
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
int	O
status	int
;	O
mu_url_t	*(struct)
url	*(struct)
;	O
status	int
=	O
mu_url_create	(*(*(struct)),*(char))->(int)
(	O
&	O
url	*(struct)
,	O
name	*(char)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
_create_mailbox0	(*(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int))))),*(struct(int,*(char),*(char),*(char),*(struct),*(char),*(char),short,*(char),*(char),*(*(char)),int,*(*(char)),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)))),*(char))->(int)
(	O
pmbox	*(*(struct))
,	O
url	*(struct)
,	O
name	*(char)
)	O
;	O
if	O
(	O
status	int
)	O
mu_url_destroy	(*(*(struct)))->(void)
(	O
&	O
url	*(struct)
)	O
;	O
return	O
status	int
;	O
}	O
int	O
mu_mailbox_create	(*(*(struct)),*(char))->(int)
(	O
mu_mailbox_t	*(struct)
*	O
pmbox	*(*(struct))
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
if	O
(	O
pmbox	*(*(struct))
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
return	O
_create_mailbox	(*(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int))))),*(char))->(int)
(	O
pmbox	*(*(struct))
,	O
name	*(char)
)	O
;	O
}	O
int	O
mu_mailbox_create_from_url	(*(*(struct)),*(struct))->(int)
(	O
mu_mailbox_t	*(struct)
*	O
pmbox	*(*(struct))
,	O
mu_url_t	*(struct)
url	*(struct)
)	O
{	O
if	O
(	O
pmbox	*(*(struct))
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
return	O
_create_mailbox0	(*(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int))))),*(struct(int,*(char),*(char),*(char),*(struct),*(char),*(char),short,*(char),*(char),*(*(char)),int,*(*(char)),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)))),*(char))->(int)
(	O
pmbox	*(*(struct))
,	O
url	*(struct)
,	O
mu_url_to_string	(*(struct))->(*(char))
(	O
url	*(struct)
)	O
)	O
;	O
}	O
int	O
mu_mailbox_create_from_record	(*(*(struct)),*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(char))->(int)
(	O
mu_mailbox_t	*(struct)
*	O
pmbox	*(*(struct))
,	O
mu_record_t	*(struct)
record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
mu_url_t	*(struct)
url	*(struct)
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_url_create	(*(*(struct)),*(char))->(int)
(	O
&	O
url	*(struct)
,	O
name	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
_mailbox_create_from_record	(*(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int))))),*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(struct(int,*(char),*(char),*(char),*(struct),*(char),*(char),short,*(char),*(char),*(*(char)),int,*(*(char)),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(struct),*(struct),*(struct),*(struct(*`,*`,int,int)),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(char))->(int)
(	O
pmbox	*(*(struct))
,	O
record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
,	O
url	*(struct)
,	O
NULL	O
,	O
name	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
mu_url_destroy	(*(*(struct)))->(void)
(	O
&	O
url	*(struct)
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_mailbox_create_at	(*(*(struct)),*(struct),*(char))->(int)
(	O
mu_mailbox_t	*(struct)
*	O
pmbox	*(*(struct))
,	O
mu_folder_t	*(struct)
folder	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
int	O
rc	int
;	O
mu_url_t	*(struct)
url	*(struct)
;	O
const	O
char	O
*	O
oldpath	*(char)
;	O
rc	int
=	O
mu_url_dup	(*(struct),*(*(struct)))->(int)
(	O
folder	*(struct)
->	O
url	*(struct)
,	O
&	O
url	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
do	O
{	O
char	O
*	O
path	*(char)
;	O
size_t	long
oldlen	long
,	O
len	int
;	O
mu_record_t	*(struct)
record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
;	O
rc	int
=	O
mu_url_sget_path	(*(struct),*(*(char)))->(int)
(	O
url	*(struct)
,	O
&	O
oldpath	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
oldlen	long
=	O
strlen	(*(char))->(long)
(	O
oldpath	*(char)
)	O
;	O
if	O
(	O
oldlen	long
==	O
0	int
)	O
{	O
path	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
name	*(char)
)	O
;	O
if	O
(	O
!	O
path	*(char)
)	O
{	O
rc	int
=	O
ENOMEM	int
;	O
break	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
oldpath	*(char)
[	O
oldlen	long
-	O
1	int
]	O
==	O
'/'	O
)	O
oldlen	long
--	O
;	O
len	int
=	O
oldlen	long
+	O
1	int
+	O
strlen	(*(char))->(long)
(	O
name	*(char)
)	O
+	O
1	int
;	O
path	*(char)
=	O
malloc	(long)->(*(void))
(	O
len	int
)	O
;	O
if	O
(	O
!	O
path	*(char)
)	O
{	O
rc	int
=	O
ENOMEM	int
;	O
break	O
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
path	*(char)
,	O
oldpath	*(char)
,	O
oldlen	long
)	O
;	O
path	*(char)
[	O
oldlen	long
++	O
]	O
=	O
'/'	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
path	*(char)
+	O
oldlen	long
,	O
name	*(char)
)	O
;	O
}	O
rc	int
=	O
mu_url_set_path	(*(struct),*(char))->(int)
(	O
url	*(struct)
,	O
path	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
path	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
rc	int
=	O
mu_registrar_lookup_url	(*(struct),int,*(*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int))))),*(int))->(int)
(	O
url	*(struct)
,	O
MU_FOLDER_ATTRIBUTE_FILE	int
,	O
&	O
record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
rc	int
=	O
_mailbox_create_from_record	(*(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int))))),*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(struct(int,*(char),*(char),*(char),*(struct),*(char),*(char),short,*(char),*(char),*(*(char)),int,*(*(char)),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(struct),*(struct),*(struct),*(struct(*`,*`,int,int)),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(char))->(int)
(	O
pmbox	*(*(struct))
,	O
record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
,	O
url	*(struct)
,	O
folder	*(struct)
,	O
name	*(char)
)	O
;	O
}	O
while	O
(	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
mu_url_destroy	(*(*(struct)))->(void)
(	O
&	O
url	*(struct)
)	O
;	O
return	O
rc	int
;	O
}	O
void	O
mu_mailbox_destroy	(*(*(struct)))->(void)
(	O
mu_mailbox_t	*(struct)
*	O
pmbox	*(*(struct))
)	O
{	O
if	O
(	O
pmbox	*(*(struct))
&&	O
*	O
pmbox	*(*(struct))
)	O
{	O
mu_mailbox_t	*(struct)
mbox	*(struct)
=	O
*	O
pmbox	*(*(struct))
;	O
mu_monitor_t	*(struct(*(void),*(void),int,int))
monitor	*(struct(*(void),*(void),int,int))
=	O
mbox	*(struct)
->	O
monitor	*(struct(*(void),*(void),int,int))
;	O
if	O
(	O
mbox	*(struct)
->	O
observable	*(struct)
)	O
{	O
mu_observable_notify	(*(struct),int,*(void))->(int)
(	O
mbox	*(struct)
->	O
observable	*(struct)
,	O
MU_EVT_MAILBOX_DESTROY	int
,	O
mbox	*(struct)
)	O
;	O
mu_observable_destroy	(*(*(struct)),*(void))->(void)
(	O
&	O
mbox	*(struct)
->	O
observable	*(struct)
,	O
mbox	*(struct)
)	O
;	O
}	O
if	O
(	O
mbox	*(struct)
->	O
_destroy	*((*(struct),*(void))->(int))
)	O
mbox	*(struct)
->	O
_destroy	*((*(struct),*(void))->(int))
(	O
mbox	*(struct)
)	O
;	O
mu_monitor_wrlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
if	O
(	O
mbox	*(struct)
->	O
stream	*(struct)
)	O
{	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
mbox	*(struct)
->	O
stream	*(struct)
)	O
;	O
}	O
mu_url_destroy	(*(*(struct)))->(void)
(	O
&	O
mbox	*(struct)
->	O
url	*(struct)
)	O
;	O
mu_locker_destroy	(*(*(struct)))->(void)
(	O
&	O
mbox	*(struct)
->	O
locker	*(struct)
)	O
;	O
mu_folder_destroy	(*(*(struct)))->(void)
(	O
&	O
mbox	*(struct)
->	O
folder	*(struct)
)	O
;	O
mu_property_destroy	(*(*(struct)))->(void)
(	O
&	O
mbox	*(struct)
->	O
property	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
mbox	*(struct)
->	O
notify_user	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
mbox	*(struct)
->	O
notify_sa	*(struct(short,array(char)))
)	O
;	O
free	(*(void))->(void)
(	O
mbox	*(struct)
)	O
;	O
*	O
pmbox	*(*(struct))
=	O
NULL	O
;	O
mu_monitor_unlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
mu_monitor_destroy	(*(*(struct(*(void),*(void),int,int))),*(void))->(void)
(	O
&	O
monitor	*(struct(*(void),*(void),int,int))
,	O
mbox	*(struct)
)	O
;	O
}	O
}	O
int	O
mu_mailbox_open	(*(struct),int)->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
int	O
flag	int
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
!	O
mbox	*(struct)
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mbox	*(struct)
->	O
_open	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),int)->(int))
==	O
NULL	O
)	O
return	O
MU_ERR_EMPTY_VFN	O
;	O
if	O
(	O
mbox	*(struct)
->	O
flags	int
&	O
_MU_MAILBOX_OPEN	int
)	O
return	O
MU_ERR_OPEN	O
;	O
if	O
(	O
flag	int
&	O
MU_STREAM_QACCESS	int
)	O
{	O
if	O
(	O
flag	int
&	O
(	O
MU_STREAM_WRITE	int
|	O
MU_STREAM_APPEND	int
|	O
MU_STREAM_CREAT	int
)	O
)	O
return	O
EACCES	int
;	O
}	O
rc	int
=	O
mbox	*(struct)
->	O
_open	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),int)->(int))
(	O
mbox	*(struct)
,	O
flag	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
mbox	*(struct)
->	O
flags	int
|=	O
_MU_MAILBOX_OPEN	int
;	O
return	O
rc	int
;	O
}	O
int	O
mu_mailbox_close	(*(struct))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
!	O
mbox	*(struct)
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
(	O
mbox	*(struct)
->	O
flags	int
&	O
_MU_MAILBOX_OPEN	int
)	O
)	O
return	O
MU_ERR_NOT_OPEN	O
;	O
if	O
(	O
mbox	*(struct)
==	O
NULL	O
||	O
mbox	*(struct)
->	O
_close	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int))
==	O
NULL	O
)	O
return	O
MU_ERR_EMPTY_VFN	O
;	O
rc	int
=	O
mbox	*(struct)
->	O
_close	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int))
(	O
mbox	*(struct)
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
mbox	*(struct)
->	O
notify_fd	int
>=	O
0	int
)	O
close	(int)->(int)
(	O
mbox	*(struct)
->	O
notify_fd	int
)	O
;	O
mbox	*(struct)
->	O
flags	int
&=	O
~	O
_MU_MAILBOX_OPEN	int
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_mailbox_remove	(*(struct))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
)	O
{	O
if	O
(	O
!	O
mbox	*(struct)
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mbox	*(struct)
->	O
flags	int
&	O
_MU_MAILBOX_OPEN	int
)	O
return	O
MU_ERR_OPEN	O
;	O
if	O
(	O
mbox	*(struct)
->	O
flags	int
&	O
_MU_MAILBOX_REMOVED	int
)	O
return	O
MU_ERR_MBX_REMOVED	O
;	O
if	O
(	O
!	O
mbox	*(struct)
->	O
_remove	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int))
)	O
{	O
int	O
rc	int
;	O
const	O
char	O
*	O
path	*(char)
;	O
rc	int
=	O
mu_url_sget_path	(*(struct),*(*(char)))->(int)
(	O
mbox	*(struct)
->	O
url	*(struct)
,	O
&	O
path	*(char)
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mbox	*(struct)
->	O
flags	int
|=	O
_MU_MAILBOX_REMOVED	int
;	O
rc	int
=	O
mu_folder_delete	(*(struct),*(char))->(int)
(	O
mbox	*(struct)
->	O
folder	*(struct)
,	O
path	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
mbox	*(struct)
->	O
flags	int
&=	O
~	O
_MU_MAILBOX_REMOVED	int
;	O
}	O
return	O
rc	int
;	O
}	O
return	O
mbox	*(struct)
->	O
_remove	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int))
(	O
mbox	*(struct)
)	O
;	O
}	O
int	O
mu_mailbox_flush	(*(struct),int)->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
int	O
expunge	int
)	O
{	O
if	O
(	O
!	O
mbox	*(struct)
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mbox	*(struct)
->	O
flags	int
&	O
_MU_MAILBOX_REMOVED	int
)	O
return	O
MU_ERR_MBX_REMOVED	O
;	O
if	O
(	O
!	O
(	O
mbox	*(struct)
->	O
flags	int
&	O
_MU_MAILBOX_OPEN	int
)	O
)	O
return	O
_MU_MAILBOX_OPEN	int
;	O
if	O
(	O
!	O
(	O
mbox	*(struct)
->	O
flags	int
&	O
(	O
MU_STREAM_WRITE	int
|	O
MU_STREAM_APPEND	int
)	O
)	O
)	O
return	O
0	int
;	O
if	O
(	O
!	O
(	O
mbox	*(struct)
->	O
flags	int
&	O
MU_STREAM_APPEND	int
)	O
)	O
{	O
size_t	long
i	long
,	O
total	long
=	O
0	int
;	O
mu_mailbox_messages_count	(*(struct),*(long))->(int)
(	O
mbox	*(struct)
,	O
&	O
total	long
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
total	long
;	O
i	long
++	O
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
=	O
NULL	O
;	O
mu_attribute_t	*(struct)
attr	*(struct)
=	O
NULL	O
;	O
mu_mailbox_get_message	(*(struct),long,*(*(struct)))->(int)
(	O
mbox	*(struct)
,	O
i	long
,	O
&	O
msg	*(struct)
)	O
;	O
mu_message_get_attribute	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
attr	*(struct)
)	O
;	O
mu_attribute_set_seen	(*(struct))->(int)
(	O
attr	*(struct)
)	O
;	O
}	O
if	O
(	O
expunge	int
)	O
return	O
mu_mailbox_expunge	(*(struct))->(int)
(	O
mbox	*(struct)
)	O
;	O
}	O
return	O
mu_mailbox_sync	(*(struct))->(int)
(	O
mbox	*(struct)
)	O
;	O
}	O
int	O
mu_mailbox_append_message	(*(struct),*(struct))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
mu_message_t	*(struct)
msg	*(struct)
)	O
{	O
_MBOX_CHECK_Q	O
(	O
mbox	*(struct)
,	O
_append_message	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(struct))->(int))
)	O
;	O
if	O
(	O
!	O
(	O
mbox	*(struct)
->	O
flags	int
&	O
(	O
MU_STREAM_WRITE	int
|	O
MU_STREAM_APPEND	int
)	O
)	O
)	O
return	O
EACCES	int
;	O
return	O
mbox	*(struct)
->	O
_append_message	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(struct))->(int))
(	O
mbox	*(struct)
,	O
msg	*(struct)
)	O
;	O
}	O
int	O
mu_mailbox_get_message	(*(struct),long,*(*(struct)))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
size_t	long
msgno	long
,	O
mu_message_t	*(struct)
*	O
pmsg	*(*(struct))
)	O
{	O
_MBOX_CHECK_Q	O
(	O
mbox	*(struct)
,	O
_get_message	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long,*(*(struct)))->(int))
)	O
;	O
return	O
mbox	*(struct)
->	O
_get_message	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long,*(*(struct)))->(int))
(	O
mbox	*(struct)
,	O
msgno	long
,	O
pmsg	*(*(struct))
)	O
;	O
}	O
int	O
mu_mailbox_quick_get_message	(*(struct),*(char),*(*(struct)))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
mu_message_qid_t	*(char)
qid	*(char)
,	O
mu_message_t	*(struct)
*	O
pmsg	*(*(struct))
)	O
{	O
_MBOX_CHECK	O
(	O
mbox	*(struct)
,	O
_quick_get_message	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(char),*(*(struct)))->(int))
)	O
;	O
if	O
(	O
!	O
(	O
mbox	*(struct)
->	O
flags	int
&	O
MU_STREAM_QACCESS	int
)	O
)	O
return	O
MU_ERR_BADOP	O
;	O
return	O
mbox	*(struct)
->	O
_quick_get_message	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(char),*(*(struct)))->(int))
(	O
mbox	*(struct)
,	O
qid	*(char)
,	O
pmsg	*(*(struct))
)	O
;	O
}	O
int	O
mu_mailbox_messages_count	(*(struct),*(long))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
size_t	long
*	O
num	*(long)
)	O
{	O
_MBOX_CHECK_Q	O
(	O
mbox	*(struct)
,	O
_messages_count	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int))
)	O
;	O
return	O
mbox	*(struct)
->	O
_messages_count	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int))
(	O
mbox	*(struct)
,	O
num	*(long)
)	O
;	O
}	O
int	O
mu_mailbox_messages_recent	(*(struct),*(long))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
size_t	long
*	O
num	*(long)
)	O
{	O
size_t	long
i	long
,	O
count	long
,	O
n	int
;	O
int	O
rc	int
;	O
_MBOX_CHECK_FLAGS	O
(	O
mbox	*(struct)
)	O
;	O
if	O
(	O
mbox	*(struct)
->	O
flags	int
&	O
MU_STREAM_QACCESS	int
)	O
return	O
MU_ERR_BADOP	O
;	O
if	O
(	O
mbox	*(struct)
->	O
_messages_recent	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int))
)	O
return	O
mbox	*(struct)
->	O
_messages_recent	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int))
(	O
mbox	*(struct)
,	O
num	*(long)
)	O
;	O
rc	int
=	O
mu_mailbox_messages_count	(*(struct),*(long))->(int)
(	O
mbox	*(struct)
,	O
&	O
count	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
n	int
=	O
0	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
count	long
;	O
i	long
++	O
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
;	O
mu_attribute_t	*(struct)
attr	*(struct)
;	O
rc	int
=	O
mu_mailbox_get_message	(*(struct),long,*(*(struct)))->(int)
(	O
mbox	*(struct)
,	O
i	long
,	O
&	O
msg	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_message_get_attribute	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
attr	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
mu_attribute_is_recent	(*(struct))->(int)
(	O
attr	*(struct)
)	O
)	O
n	int
++	O
;	O
}	O
*	O
num	*(long)
=	O
n	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailbox_message_unseen	(*(struct),*(long))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
size_t	long
*	O
num	*(long)
)	O
{	O
int	O
rc	int
;	O
size_t	long
i	long
,	O
count	long
;	O
_MBOX_CHECK_FLAGS	O
(	O
mbox	*(struct)
)	O
;	O
if	O
(	O
mbox	*(struct)
->	O
flags	int
&	O
MU_STREAM_QACCESS	int
)	O
return	O
MU_ERR_BADOP	O
;	O
if	O
(	O
mbox	*(struct)
->	O
_message_unseen	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int))
)	O
return	O
mbox	*(struct)
->	O
_message_unseen	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int))
(	O
mbox	*(struct)
,	O
num	*(long)
)	O
;	O
rc	int
=	O
mu_mailbox_messages_count	(*(struct),*(long))->(int)
(	O
mbox	*(struct)
,	O
&	O
count	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
count	long
;	O
i	long
++	O
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
;	O
mu_attribute_t	*(struct)
attr	*(struct)
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_mailbox_get_message	(*(struct),long,*(*(struct)))->(int)
(	O
mbox	*(struct)
,	O
i	long
,	O
&	O
msg	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_message_get_attribute	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
attr	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
!	O
mu_attribute_is_seen	(*(struct))->(int)
(	O
attr	*(struct)
)	O
)	O
{	O
*	O
num	*(long)
=	O
i	long
;	O
return	O
0	int
;	O
}	O
}	O
*	O
num	*(long)
=	O
0	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailbox_sync	(*(struct))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
)	O
{	O
_MBOX_CHECK_Q	O
(	O
mbox	*(struct)
,	O
_sync	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int))
)	O
;	O
if	O
(	O
!	O
(	O
mbox	*(struct)
->	O
flags	int
&	O
(	O
MU_STREAM_WRITE	int
|	O
MU_STREAM_APPEND	int
)	O
)	O
)	O
return	O
0	int
;	O
return	O
mbox	*(struct)
->	O
_sync	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int))
(	O
mbox	*(struct)
)	O
;	O
}	O
int	O
mu_mailbox_save_attributes	(*(struct))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
)	O
{	O
return	O
mu_mailbox_sync	(*(struct))->(int)
(	O
mbox	*(struct)
)	O
;	O
}	O
int	O
mu_mailbox_expunge	(*(struct))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
)	O
{	O
_MBOX_CHECK_Q	O
(	O
mbox	*(struct)
,	O
_expunge	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int))
)	O
;	O
if	O
(	O
!	O
(	O
mbox	*(struct)
->	O
flags	int
&	O
(	O
MU_STREAM_WRITE	int
|	O
MU_STREAM_APPEND	int
)	O
)	O
)	O
return	O
EACCES	int
;	O
return	O
mbox	*(struct)
->	O
_expunge	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int))
(	O
mbox	*(struct)
)	O
;	O
}	O
int	O
mu_mailbox_is_updated	(*(struct))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
)	O
{	O
if	O
(	O
mbox	*(struct)
==	O
NULL	O
||	O
!	O
(	O
mbox	*(struct)
->	O
flags	int
&	O
_MU_MAILBOX_OPEN	int
)	O
||	O
(	O
mbox	*(struct)
->	O
flags	int
&	O
_MU_MAILBOX_REMOVED	int
)	O
||	O
mbox	*(struct)
->	O
_is_updated	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int))
==	O
NULL	O
)	O
return	O
1	int
;	O
if	O
(	O
mbox	*(struct)
->	O
flags	int
&	O
MU_STREAM_QACCESS	int
)	O
return	O
1	int
;	O
return	O
mbox	*(struct)
->	O
_is_updated	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int))
(	O
mbox	*(struct)
)	O
;	O
}	O
int	O
mu_mailbox_scan	(*(struct),long,*(long))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
size_t	long
msgno	long
,	O
size_t	long
*	O
pcount	*(long)
)	O
{	O
_MBOX_CHECK_Q	O
(	O
mbox	*(struct)
,	O
_scan	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long,*(long))->(int))
)	O
;	O
return	O
mbox	*(struct)
->	O
_scan	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long,*(long))->(int))
(	O
mbox	*(struct)
,	O
msgno	long
,	O
pcount	*(long)
)	O
;	O
}	O
int	O
mu_mailbox_get_size	(*(struct),*(long))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
mu_off_t	long
*	O
psize	*(long)
)	O
{	O
int	O
status	int
;	O
_MBOX_CHECK_FLAGS	O
(	O
mbox	*(struct)
)	O
;	O
if	O
(	O
mbox	*(struct)
->	O
flags	int
&	O
MU_STREAM_QACCESS	int
)	O
return	O
MU_ERR_BADOP	O
;	O
if	O
(	O
mbox	*(struct)
->	O
_get_size	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int))
==	O
NULL	O
||	O
(	O
status	int
=	O
mbox	*(struct)
->	O
_get_size	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int))
(	O
mbox	*(struct)
,	O
psize	*(long)
)	O
)	O
==	O
ENOSYS	int
)	O
{	O
size_t	long
i	long
,	O
total	long
;	O
mu_off_t	long
size	long
=	O
0	int
;	O
status	int
=	O
mu_mailbox_messages_count	(*(struct),*(long))->(int)
(	O
mbox	*(struct)
,	O
&	O
total	long
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
total	long
;	O
i	long
++	O
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
;	O
size_t	long
msgsize	long
;	O
status	int
=	O
mu_mailbox_get_message	(*(struct),long,*(*(struct)))->(int)
(	O
mbox	*(struct)
,	O
i	long
,	O
&	O
msg	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
mu_message_size	(*(struct),*(long))->(int)
(	O
msg	*(struct)
,	O
&	O
msgsize	long
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
size	long
+=	O
msgsize	long
;	O
}	O
*	O
psize	*(long)
=	O
size	long
;	O
}	O
return	O
status	int
;	O
}	O
int	O
mu_mailbox_uidvalidity	(*(struct),*(long))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
unsigned	O
long	O
*	O
pvalid	*(long)
)	O
{	O
_MBOX_CHECK_Q	O
(	O
mbox	*(struct)
,	O
_uidvalidity	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int))
)	O
;	O
return	O
mbox	*(struct)
->	O
_uidvalidity	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int))
(	O
mbox	*(struct)
,	O
pvalid	*(long)
)	O
;	O
}	O
int	O
mu_mailbox_uidnext	(*(struct),*(long))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
size_t	long
*	O
puidnext	*(long)
)	O
{	O
_MBOX_CHECK_Q	O
(	O
mbox	*(struct)
,	O
_uidnext	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int))
)	O
;	O
return	O
mbox	*(struct)
->	O
_uidnext	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int))
(	O
mbox	*(struct)
,	O
puidnext	*(long)
)	O
;	O
}	O
int	O
mu_mailbox_set_locker	(*(struct),*(struct))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
mu_locker_t	*(struct)
locker	*(struct)
)	O
{	O
if	O
(	O
mbox	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mbox	*(struct)
->	O
locker	*(struct)
)	O
mu_locker_destroy	(*(*(struct)))->(void)
(	O
&	O
mbox	*(struct)
->	O
locker	*(struct)
)	O
;	O
mbox	*(struct)
->	O
locker	*(struct)
=	O
locker	*(struct)
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailbox_get_locker	(*(struct),*(*(struct)))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
mu_locker_t	*(struct)
*	O
plocker	*(*(struct))
)	O
{	O
if	O
(	O
mbox	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
plocker	*(*(struct))
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
*	O
plocker	*(*(struct))
=	O
mbox	*(struct)
->	O
locker	*(struct)
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailbox_get_flags	(*(struct),*(int))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
int	O
*	O
flags	int
)	O
{	O
if	O
(	O
mbox	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
flags	int
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
*	O
flags	int
=	O
mbox	*(struct)
->	O
flags	int
&	O
~	O
_MU_MAILBOX_MASK	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailbox_set_stream	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,*`,*`,*`,*`,int,int,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(struct))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
mu_stream_t	*(struct)
stream	*(struct)
)	O
{	O
if	O
(	O
mbox	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mbox	*(struct)
->	O
flags	int
&	O
MU_STREAM_QACCESS	int
)	O
return	O
MU_ERR_BADOP	O
;	O
if	O
(	O
mbox	*(struct)
->	O
stream	*(struct)
)	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
mbox	*(struct)
->	O
stream	*(struct)
)	O
;	O
mbox	*(struct)
->	O
stream	*(struct)
=	O
stream	*(struct)
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailbox_get_observable	(*(struct),*(*(struct)))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
mu_observable_t	*(struct)
*	O
pobservable	*(*(struct))
)	O
{	O
if	O
(	O
mbox	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
pobservable	*(*(struct))
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
mbox	*(struct)
->	O
observable	*(struct)
==	O
NULL	O
)	O
{	O
int	O
status	int
=	O
mu_observable_create	(*(*(struct)),*(void))->(int)
(	O
&	O
mbox	*(struct)
->	O
observable	*(struct)
,	O
mbox	*(struct)
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
}	O
*	O
pobservable	*(*(struct))
=	O
mbox	*(struct)
->	O
observable	*(struct)
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailbox_set_property	(*(struct),*(struct))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
mu_property_t	*(struct)
property	*(struct)
)	O
{	O
if	O
(	O
mbox	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mbox	*(struct)
->	O
property	*(struct)
)	O
mu_property_unref	(*(struct))->(void)
(	O
mbox	*(struct)
->	O
property	*(struct)
)	O
;	O
mbox	*(struct)
->	O
property	*(struct)
=	O
property	*(struct)
;	O
mu_property_ref	(*(struct))->(void)
(	O
property	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailbox_get_property	(*(struct),*(*(struct)))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
mu_property_t	*(struct)
*	O
pproperty	*(*(struct))
)	O
{	O
if	O
(	O
mbox	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
pproperty	*(*(struct))
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
mbox	*(struct)
->	O
property	*(struct)
==	O
NULL	O
)	O
{	O
int	O
status	int
;	O
if	O
(	O
mbox	*(struct)
->	O
_get_property	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(*(struct)))->(int))
)	O
status	int
=	O
mbox	*(struct)
->	O
_get_property	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(*(struct)))->(int))
(	O
mbox	*(struct)
,	O
&	O
mbox	*(struct)
->	O
property	*(struct)
)	O
;	O
else	O
status	int
=	O
mu_property_create_init	(*(*(struct)),*((*(struct))->(int)),*(void))->(int)
(	O
&	O
mbox	*(struct)
->	O
property	*(struct)
,	O
mu_assoc_property_init	(*(struct))->(int)
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
}	O
*	O
pproperty	*(*(struct))
=	O
mbox	*(struct)
->	O
property	*(struct)
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailbox_get_url	(*(struct),*(*(struct)))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
mu_url_t	*(struct)
*	O
purl	*(*(struct))
)	O
{	O
if	O
(	O
mbox	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
purl	*(*(struct))
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
*	O
purl	*(*(struct))
=	O
mbox	*(struct)
->	O
url	*(struct)
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailbox_get_folder	(*(struct),*(*(struct)))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
mu_folder_t	*(struct)
*	O
pfolder	*(*(struct(*(struct),*(struct),*(struct),*(struct(*`,*`,int,int)),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))))
)	O
{	O
if	O
(	O
mbox	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
pfolder	*(*(struct(*(struct),*(struct),*(struct),*(struct(*`,*`,int,int)),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))))
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
*	O
pfolder	*(*(struct(*(struct),*(struct),*(struct),*(struct(*`,*`,int,int)),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,int,long,*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)))))
=	O
mbox	*(struct)
->	O
folder	*(struct)
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailbox_set_folder	(*(struct),*(struct))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
mu_folder_t	*(struct)
folder	*(struct)
)	O
{	O
if	O
(	O
mbox	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
mbox	*(struct)
->	O
folder	*(struct)
=	O
folder	*(struct)
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailbox_lock	(*(struct))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
)	O
{	O
mu_locker_t	*(struct)
lock	*(struct)
=	O
NULL	O
;	O
mu_mailbox_get_locker	(*(struct),*(*(struct)))->(int)
(	O
mbox	*(struct)
,	O
&	O
lock	*(struct)
)	O
;	O
return	O
mu_locker_lock	(*(struct))->(int)
(	O
lock	*(struct)
)	O
;	O
}	O
int	O
mu_mailbox_unlock	(*(struct))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
)	O
{	O
mu_locker_t	*(struct)
lock	*(struct)
=	O
NULL	O
;	O
mu_mailbox_get_locker	(*(struct),*(*(struct)))->(int)
(	O
mbox	*(struct)
,	O
&	O
lock	*(struct)
)	O
;	O
return	O
mu_locker_unlock	(*(struct))->(int)
(	O
lock	*(struct)
)	O
;	O
}	O
int	O
mu_mailbox_get_uidls	(*(struct),*(*(struct)))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
mu_list_t	*(struct)
*	O
plist	*(*(struct))
)	O
{	O
mu_list_t	*(struct)
list	*(struct)
;	O
int	O
status	int
;	O
if	O
(	O
mbox	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
plist	*(*(struct))
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
status	int
=	O
mu_list_create	(*(*(struct)))->(int)
(	O
&	O
list	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
mu_list_set_destroy_item	(*(struct),*((*(void))->(void)))->(*((*(void))->(void)))
(	O
list	*(struct)
,	O
mu_list_free_item	(*(void))->(void)
)	O
;	O
if	O
(	O
mbox	*(struct)
->	O
_get_uidls	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(struct))->(int))
)	O
status	int
=	O
mbox	*(struct)
->	O
_get_uidls	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(struct))->(int))
(	O
mbox	*(struct)
,	O
list	*(struct)
)	O
;	O
else	O
{	O
size_t	long
i	long
,	O
total	long
;	O
status	int
=	O
mu_mailbox_messages_count	(*(struct),*(long))->(int)
(	O
mbox	*(struct)
,	O
&	O
total	long
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
total	long
;	O
i	long
++	O
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
=	O
NULL	O
;	O
char	O
buf	*(void)
[	O
MU_UIDL_BUFFER_SIZE	O
]	O
;	O
size_t	long
n	int
;	O
struct	O
mu_uidl	struct(long,array(char))
*	O
uidl	array(char)
;	O
status	int
=	O
mu_mailbox_get_message	(*(struct),long,*(*(struct)))->(int)
(	O
mbox	*(struct)
,	O
i	long
,	O
&	O
msg	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
status	int
=	O
mu_message_get_uidl	(*(struct),*(char),long,*(long))->(int)
(	O
msg	*(struct)
,	O
buf	*(void)
,	O
sizeof	O
(	O
buf	*(void)
)	O
,	O
&	O
n	int
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
uidl	array(char)
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
uidl	array(char)
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
uidl	array(char)
)	O
{	O
status	int
=	O
ENOMEM	int
;	O
break	O
;	O
}	O
uidl	array(char)
->	O
msgno	long
=	O
i	long
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
uidl	array(char)
->	O
uidl	array(char)
,	O
buf	*(void)
,	O
MU_UIDL_BUFFER_SIZE	O
)	O
;	O
status	int
=	O
mu_list_append	(*(struct),*(void))->(int)
(	O
list	*(struct)
,	O
uidl	array(char)
)	O
;	O
if	O
(	O
status	int
)	O
{	O
free	(*(void))->(void)
(	O
uidl	array(char)
)	O
;	O
break	O
;	O
}	O
}	O
}	O
*	O
plist	*(*(struct))
=	O
list	*(struct)
;	O
return	O
status	int
;	O
}	O
static	O
int	O
_uid_bsearch	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,*`,*`,*`,*`,int,int,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long,long,long,*(long))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
size_t	long
start	long
,	O
size_t	long
stop	long
,	O
size_t	long
uid	int
,	O
size_t	long
*	O
msgno	long
)	O
{	O
mu_message_t	*(struct)
mid_msg	*(struct)
=	O
NULL	O
;	O
size_t	long
num	*(long)
=	O
0	int
,	O
middle	long
;	O
int	O
rc	int
;	O
middle	long
=	O
(	O
start	long
+	O
stop	long
)	O
/	O
2	int
;	O
rc	int
=	O
mu_mailbox_get_message	(*(struct),long,*(*(struct)))->(int)
(	O
mbox	*(struct)
,	O
middle	long
,	O
&	O
mid_msg	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_message_get_uid	(*(struct),*(long))->(int)
(	O
mid_msg	*(struct)
,	O
&	O
num	*(long)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
num	*(long)
==	O
uid	int
)	O
{	O
*	O
msgno	long
=	O
middle	long
;	O
return	O
0	int
;	O
}	O
if	O
(	O
start	long
>=	O
stop	long
)	O
return	O
MU_ERR_NOENT	O
;	O
if	O
(	O
num	*(long)
>	O
uid	int
)	O
return	O
_uid_bsearch	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,*`,*`,*`,*`,int,int,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long,long,long,*(long))->(int)
(	O
mbox	*(struct)
,	O
start	long
,	O
middle	long
-	O
1	int
,	O
uid	int
,	O
msgno	long
)	O
;	O
else	O
return	O
_uid_bsearch	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,*`,*`,*`,*`,int,int,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long,long,long,*(long))->(int)
(	O
mbox	*(struct)
,	O
middle	long
+	O
1	int
,	O
stop	long
,	O
uid	int
,	O
msgno	long
)	O
;	O
}	O
static	O
int	O
_search_message_uid	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,*`,*`,*`,*`,int,int,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long,*(long))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
size_t	long
uid	int
,	O
size_t	long
*	O
result	*(struct)
)	O
{	O
int	O
rc	int
;	O
size_t	long
num	*(long)
,	O
count	long
;	O
mu_message_t	*(struct)
msg	*(struct)
;	O
rc	int
=	O
mu_mailbox_get_message	(*(struct),long,*(*(struct)))->(int)
(	O
mbox	*(struct)
,	O
1	int
,	O
&	O
msg	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_message_get_uid	(*(struct),*(long))->(int)
(	O
msg	*(struct)
,	O
&	O
num	*(long)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
uid	int
<	O
num	*(long)
)	O
return	O
MU_ERR_NOENT	O
;	O
else	O
if	O
(	O
uid	int
==	O
num	*(long)
)	O
{	O
*	O
result	*(struct)
=	O
1	int
;	O
return	O
0	int
;	O
}	O
rc	int
=	O
mu_mailbox_messages_count	(*(struct),*(long))->(int)
(	O
mbox	*(struct)
,	O
&	O
count	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_mailbox_get_message	(*(struct),long,*(*(struct)))->(int)
(	O
mbox	*(struct)
,	O
count	long
,	O
&	O
msg	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_message_get_uid	(*(struct),*(long))->(int)
(	O
msg	*(struct)
,	O
&	O
num	*(long)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
uid	int
>	O
num	*(long)
)	O
return	O
MU_ERR_NOENT	O
;	O
else	O
if	O
(	O
uid	int
==	O
num	*(long)
)	O
{	O
*	O
result	*(struct)
=	O
count	long
;	O
return	O
0	int
;	O
}	O
return	O
_uid_bsearch	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,*`,*`,*`,*`,int,int,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long,long,long,*(long))->(int)
(	O
mbox	*(struct)
,	O
1	int
,	O
count	long
,	O
uid	int
,	O
result	*(struct)
)	O
;	O
}	O
int	O
mu_mailbox_translate	(*(struct),int,long,*(long))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
int	O
cmd	enum(int,int,int,int,int)
,	O
size_t	long
from	*(struct)
,	O
size_t	long
*	O
to	int
)	O
{	O
int	O
rc	int
=	O
ENOSYS	int
;	O
mu_message_t	*(struct)
msg	*(struct)
;	O
if	O
(	O
mbox	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
to	int
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
mbox	*(struct)
->	O
flags	int
&	O
MU_STREAM_QACCESS	int
)	O
return	O
MU_ERR_BADOP	O
;	O
if	O
(	O
mbox	*(struct)
->	O
_translate	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),int,long,*(long))->(int))
)	O
rc	int
=	O
mbox	*(struct)
->	O
_translate	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),int,long,*(long))->(int))
(	O
mbox	*(struct)
,	O
cmd	enum(int,int,int,int,int)
,	O
from	*(struct)
,	O
to	int
)	O
;	O
if	O
(	O
rc	int
==	O
ENOSYS	int
)	O
{	O
switch	O
(	O
cmd	enum(int,int,int,int,int)
)	O
{	O
case	O
MU_MAILBOX_UID_TO_MSGNO	int
:	O
rc	int
=	O
_search_message_uid	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,*`,*`,*`,*`,int,int,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),long,*(long))->(int)
(	O
mbox	*(struct)
,	O
from	*(struct)
,	O
to	int
)	O
;	O
break	O
;	O
case	O
MU_MAILBOX_MSGNO_TO_UID	int
:	O
rc	int
=	O
mu_mailbox_get_message	(*(struct),long,*(*(struct)))->(int)
(	O
mbox	*(struct)
,	O
from	*(struct)
,	O
&	O
msg	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_message_get_uid	(*(struct),*(long))->(int)
(	O
msg	*(struct)
,	O
to	int
)	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_mailbox_access_time	(*(struct),*(long))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
time_t	long
*	O
return_time	*(long)
)	O
{	O
_MBOX_CHECK_Q	O
(	O
mbox	*(struct)
,	O
_get_atime	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int))
)	O
;	O
if	O
(	O
!	O
return_time	*(long)
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
return	O
mbox	*(struct)
->	O
_get_atime	*((*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(struct`),*(char),int,*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))),*(long))->(int))
(	O
mbox	*(struct)
,	O
return_time	*(long)
)	O
;	O
}	O
