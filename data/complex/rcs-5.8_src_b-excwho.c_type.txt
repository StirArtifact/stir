static	O
uid_t	int
ruid	int
(	O
void	O
)	O
{	O
cacheid	O
(	O
ruid	int
,	O
getuid	()->(int)
(	O
)	O
)	O
;	O
}	O
bool	bool
stat_mine_p	(*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(bool)
(	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
*	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
{	O
return	O
ruid	int
(	O
)	O
==	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_uid	int
;	O
}	O
static	O
uid_t	int
euid	int
(	O
void	O
)	O
{	O
cacheid	O
(	O
euid	int
,	O
geteuid	()->(int)
(	O
)	O
)	O
;	O
}	O
bool	bool
currently_setuid_p	()->(bool)
(	O
void	O
)	O
{	O
return	O
euid	int
(	O
)	O
!=	O
ruid	int
(	O
)	O
;	O
}	O
static	O
void	O
set_uid_to	(int)->(void)
(	O
uid_t	int
u	struct(*(char),*(char))
)	O
{	O
if	O
(	O
!	O
currently_setuid_p	()->(bool)
(	O
)	O
)	O
return	O
;	O
if	O
(	O
PROB	O
(	O
seteuid	(int)->(int)
(	O
u	struct(*(char),*(char))
)	O
)	O
)	O
fatal_sys	(*(char))->(void)
(	O
"setuid"	*(char)
)	O
;	O
if	O
(	O
geteuid	()->(int)
(	O
)	O
!=	O
u	struct(*(char),*(char))
)	O
{	O
if	O
(	O
BE	O
(	O
already_setuid	bool
)	O
)	O
return	O
;	O
BE	O
(	O
already_setuid	bool
)	O
=	O
true	int
;	O
PFATAL	O
(	O
"root setuid not supported"	*(char)
+	O
(	O
u	struct(*(char),*(char))
?	O
5	int
:	O
0	int
)	O
)	O
;	O
}	O
}	O
void	O
nosetid	()->(void)
(	O
void	O
)	O
{	O
BE	O
(	O
stick_with_euid	bool
)	O
=	O
true	int
;	O
}	O
void	O
seteid	()->(void)
(	O
void	O
)	O
{	O
if	O
(	O
!	O
BE	O
(	O
stick_with_euid	bool
)	O
)	O
set_uid_to	(int)->(void)
(	O
euid	int
(	O
)	O
)	O
;	O
}	O
void	O
setrid	()->(void)
(	O
void	O
)	O
{	O
if	O
(	O
!	O
BE	O
(	O
stick_with_euid	bool
)	O
)	O
set_uid_to	(int)->(void)
(	O
ruid	int
(	O
)	O
)	O
;	O
}	O
char	O
const	O
*	O
getusername	(bool)->(*(char))
(	O
bool	bool
suspicious	bool
)	O
{	O
if	O
(	O
!	O
BE	O
(	O
username	*(char)
)	O
)	O
{	O
char	O
buf	*(char)
[	O
BUFSIZ	int
]	O
;	O
if	O
(	O
suspicious	bool
||	O
(	O
!	O
JAM	O
(	O
cgetenv	(*(char))->(*(char))
(	O
"LOGNAME"	*(char)
)	O
)	O
&&	O
!	O
JAM	O
(	O
cgetenv	(*(char))->(*(char))
(	O
"USER"	*(char)
)	O
)	O
&&	O
!	O
(	O
0	int
==	O
getlogin_r	(*(char),long)->(int)
(	O
buf	*(char)
,	O
BUFSIZ	int
)	O
&&	O
JAM	O
(	O
str_save	(*(char))->(*(char))
(	O
buf	*(char)
)	O
)	O
)	O
)	O
)	O
{	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
pwbuf	struct(*(char),*(char),int,int,*(char),*(char),*(char))
,	O
*	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
NULL	O
;	O
if	O
(	O
getpwuid_r	(int,*(struct(*(char),*(char),int,int,*(char),*(char),*(char))),*(char),long,*(*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))))->(int)
(	O
ruid	int
(	O
)	O
,	O
&	O
pwbuf	struct(*(char),*(char),int,int,*(char),*(char),*(char))
,	O
buf	*(char)
,	O
BUFSIZ	int
,	O
&	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
)	O
||	O
&	O
pwbuf	struct(*(char),*(char),int,int,*(char),*(char),*(char))
!=	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
||	O
!	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
)	O
PFATAL	O
(	O
"no password entry for userid %d"	*(char)
,	O
ruid	int
(	O
)	O
)	O
;	O
JAM	O
(	O
str_save	(*(char))->(*(char))
(	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
)	O
)	O
;	O
}	O
checksid	(*(char))->(void)
(	O
BE	O
(	O
username	*(char)
)	O
)	O
;	O
}	O
return	O
BE	O
(	O
username	*(char)
)	O
;	O
}	O
char	O
const	O
*	O
getcaller	()->(*(char))
(	O
void	O
)	O
{	O
return	O
getusername	(bool)->(*(char))
(	O
currently_setuid_p	()->(bool)
(	O
)	O
)	O
;	O
}	O
bool	bool
caller_login_p	(*(char))->(bool)
(	O
char	O
const	O
*	O
login	*(char)
)	O
{	O
return	O
STR_SAME	O
(	O
getcaller	()->(*(char))
(	O
)	O
,	O
login	*(char)
)	O
;	O
}	O
struct	O
link	(*(char),*(char))->(int)
*	O
lock_memq	(*(struct(*(void),*(struct(*`,*`)))),bool,*(void))->(*(struct(*(void),*(struct(*`,*`)))))
(	O
struct	O
link	(*(char),*(char))->(int)
*	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
bool	bool
loginp	bool
,	O
void	O
const	O
*	O
x	*(struct(*(char),long))
)	O
{	O
struct	O
rcslock	struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)))
const	O
*	O
rl	*(struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))
;	O
for	O
(	O
;	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
{	O
rl	*(struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))
=	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
;	O
if	O
(	O
loginp	bool
?	O
STR_SAME	O
(	O
x	*(struct(*(char),long))
,	O
rl	*(struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))
->	O
login	*(char)
)	O
:	O
x	*(struct(*(char),long))
==	O
rl	*(struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))
->	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
)	O
return	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
}	O
return	O
NULL	O
;	O
}	O
struct	O
rcslock	struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)))
const	O
*	O
lock_on	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)))))
(	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
const	O
*	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
)	O
{	O
for	O
(	O
struct	O
link	(*(char),*(char))->(int)
*	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
GROK	O
(	O
locks	*(struct)
)	O
;	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
{	O
struct	O
rcslock	struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)))
const	O
*	O
rl	*(struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))
=	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
;	O
if	O
(	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
==	O
rl	*(struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))
->	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
)	O
return	O
rl	*(struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))
;	O
}	O
return	O
NULL	O
;	O
}	O
void	O
lock_drop	(*(struct(*(void),*(struct(*`,*`)))),*(struct(*(void),*(struct(*`,*`)))))->(void)
(	O
struct	O
link	(*(char),*(char))->(int)
*	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
struct	O
link	(*(char),*(char))->(int)
*	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
{	O
struct	O
rcslock	struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)))
const	O
*	O
rl	*(struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))
=	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
;	O
rl	*(struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))
->	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
->	O
lockedby	*(char)
=	O
NULL	O
;	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
GROK	O
(	O
locks	*(struct)
)	O
=	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
}	O
int	O
addlock	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool)->(int)
(	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
,	O
bool	bool
verbose	bool
)	O
{	O
register	O
struct	O
rcslock	struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)))
*	O
rl	*(struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))
;	O
struct	O
rcslock	struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)))
const	O
*	O
was	*(struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))
=	O
lock_on	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)))))
(	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
)	O
;	O
if	O
(	O
was	*(struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))
)	O
{	O
if	O
(	O
caller_login_p	(*(char))->(bool)
(	O
was	*(struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))
->	O
login	*(char)
)	O
)	O
return	O
0	int
;	O
if	O
(	O
verbose	bool
)	O
RERR	O
(	O
"Revision %s is already locked by %s."	*(char)
,	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
->	O
num	*(char)
,	O
was	*(struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))
->	O
login	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
rl	*(struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))
=	O
FALLOC	O
(	O
struct	O
rcslock	struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)))
)	O
;	O
rl	*(struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))
->	O
login	*(char)
=	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
->	O
lockedby	*(char)
=	O
getcaller	()->(*(char))
(	O
)	O
;	O
rl	*(struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))
->	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
=	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
;	O
GROK	O
(	O
locks	*(struct)
)	O
=	O
prepend	(*(void),*(struct(*(void),*(struct(*`,*`)))),*(struct(*(char),*(struct),*(void),long)))->(*(struct(*(void),*(struct(*`,*`)))))
(	O
rl	*(struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))
,	O
GROK	O
(	O
locks	*(struct)
)	O
,	O
SINGLE	O
)	O
;	O
return	O
1	int
;	O
}	O
