vbuf	struct(int,int,*(char))
vb	*(struct(int,int,*(char)))
;	O
FILE	struct
*	O
Toutputfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
0	int
;	O
struct	O
timeval	struct(long,long)
currenttime	struct(long,long)
;	O
const	O
struct	O
Terrno	struct(*(char),int)
Terrnos	array(struct(*(char),int))
[	O
]	O
=	O
{	O
{	O
"EBADF"	*(char)
,	O
EBADF	int
}	O
,	O
{	O
"EAGAIN"	*(char)
,	O
EAGAIN	int
}	O
,	O
{	O
"EINPROGRESS"	*(char)
,	O
EINPROGRESS	int
}	O
,	O
{	O
"EINTR"	*(char)
,	O
EINTR	int
}	O
,	O
{	O
"EINVAL"	*(char)
,	O
EINVAL	int
}	O
,	O
{	O
"EMSGSIZE"	*(char)
,	O
EMSGSIZE	int
}	O
,	O
{	O
"ENOBUFS"	*(char)
,	O
ENOBUFS	int
}	O
,	O
{	O
"ENOENT"	*(char)
,	O
ENOENT	int
}	O
,	O
{	O
"ENOPROTOOPT"	*(char)
,	O
ENOPROTOOPT	int
}	O
,	O
{	O
"ENOSPC"	*(char)
,	O
ENOSPC	int
}	O
,	O
{	O
"EWOULDBLOCK"	*(char)
,	O
EWOULDBLOCK	O
}	O
,	O
{	O
"EHOSTUNREACH"	*(char)
,	O
EHOSTUNREACH	int
}	O
,	O
{	O
"ECONNRESET"	*(char)
,	O
ECONNRESET	int
}	O
,	O
{	O
"ECONNREFUSED"	*(char)
,	O
ECONNREFUSED	int
}	O
,	O
{	O
"EPIPE"	*(char)
,	O
EPIPE	int
}	O
,	O
{	O
"ENOTSOCK"	*(char)
,	O
ENOTSOCK	int
}	O
,	O
{	O
0	int
,	O
0	int
}	O
}	O
;	O
static	O
vbuf	struct(int,int,*(char))
vbw	struct(int,int,*(char))
;	O
int	O
Hgettimeofday	(*(struct(long,long)),*(struct(int,int)))->(int)
(	O
struct	O
timeval	struct(long,long)
*	O
tv	*(struct(long,long))
,	O
struct	O
timezone	struct(int,int)
*	O
tz	*(struct(int,int))
)	O
{	O
Tensurerecordfile	()->(void)
(	O
)	O
;	O
Tmust	(*(char),*(char),int)->(void)
(	O
"gettimeofday"	*(char)
,	O
"tz"	*(char)
,	O
!	O
tz	*(struct(int,int))
)	O
;	O
*	O
tv	*(struct(long,long))
=	O
currenttime	struct(long,long)
;	O
return	O
0	int
;	O
}	O
int	O
Hwritev	(int,*(struct(*(void),long)),long)->(int)
(	O
int	O
fd	int
,	O
const	O
struct	O
iovec	struct(*(void),long)
*	O
vector	*(struct(*(void),long))
,	O
size_t	long
count	long
)	O
{	O
size_t	long
i	int
;	O
vbw	struct(int,int,*(char))
.	O
used	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
count	long
;	O
i	int
++	O
,	O
vector	*(struct(*(void),long))
++	O
)	O
{	O
if	O
(	O
!	O
adns__vbuf_append	(*(struct(int,int,*(char))),*(char),int)->(int)
(	O
&	O
vbw	struct(int,int,*(char))
,	O
vector	*(struct(*(void),long))
->	O
iov_base	*(void)
,	O
vector	*(struct(*(void),long))
->	O
iov_len	long
)	O
)	O
Tnomem	()->(void)
(	O
)	O
;	O
}	O
return	O
Hwrite	(int,*(void),long)->(int)
(	O
fd	int
,	O
vbw	struct(int,int,*(char))
.	O
buf	*(char)
,	O
vbw	struct(int,int,*(char))
.	O
used	int
)	O
;	O
}	O
void	O
Qselect	(int,*(struct(array(long))),*(struct(array(long))),*(struct(array(long))),*(struct(long,long)))->(void)
(	O
int	O
max	int
,	O
const	O
fd_set	struct(array(long))
*	O
rfds	*(struct(array(long)))
,	O
const	O
fd_set	struct(array(long))
*	O
wfds	*(struct(array(long)))
,	O
const	O
fd_set	struct(array(long))
*	O
efds	*(struct(array(long)))
,	O
struct	O
timeval	struct(long,long)
*	O
to	*(struct(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(void),int,struct(*`,*`),struct(*`,*`),struct(*`,*`),struct(*`,*`),*(struct`),int,int,int,struct(int,int,*`),struct(int,int,*`),int,int,int,int,int,int,enum(int,int,int,int),struct(long,long),struct(union`,struct`,int,*`),struct(array(long)),array(struct(int,short,short)),array(struct(struct(int))),array(struct(struct(int),struct(int))),*(*`),array(short))),enum(int,int,int,int),*(struct(*(struct`),enum(int,int,int,int),*(struct`),*(struct`),*(struct`),struct(*`,*`),struct(*`,*`),struct(*`,*`),int,int,*(void),*(struct`),*(char),int,struct(int,int,*`),*(struct`),*(char),int,int,struct(int,int,*`),int,int,int,int,int,int,int,long,struct(long,long),long,struct(*`,*`,union`))),*(struct(*(struct`),enum(int,int,int,int),*(struct`),*(struct`),*(struct`),struct(*`,*`),struct(*`,*`),struct(*`,*`),int,int,*(void),*(struct`),*(char),int,struct(int,int,*`),*(struct`),*(char),int,int,struct(int,int,*`),int,int,int,int,int,int,int,long,struct(long,long),long,struct(*`,*`,union`))),*(struct(*(struct`),enum(int,int,int,int),*(struct`),*(struct`),*(struct`),struct(*`,*`),struct(*`,*`),struct(*`,*`),int,int,*(void),*(struct`),*(char),int,struct(int,int,*`),*(struct`),*(char),int,int,struct(int,int,*`),int,int,int,int,int,int,int,long,struct(long,long),long,struct(*`,*`,union`))),struct(*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`))),struct(*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`))),struct(*(struct(*`,*`)),*(struct(*`,*`))),int,int,*(void),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),int,*((*`,*`)->(void)),*((*`,*`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*`,int,int,*`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*`,*`,*`)->(int)),*((*`,*`,*`,int,array(char),*`,enum(int,int,int,int,int,int,int,int,int,int,int),*`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*`,*`,int,*`)->(void)))),*(char),int,struct(int,int,*(char)),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`))),*(char),int,int,struct(int,int,*(char)),int,int,int,int,int,int,int,long,struct(long,long),long,struct(*(void),*((*`,*`)->(void)),union(struct(int,union`),*(struct`)))))
)	O
{	O
vb	*(struct(int,int,*(char)))
.	O
used	int
=	O
0	int
;	O
Tvba	(*(char))->(void)
(	O
"select"	*(char)
)	O
;	O
Tvbf	(*(char))->(void)
(	O
" max=%d"	*(char)
,	O
max	int
)	O
;	O
Tvbf	(*(char))->(void)
(	O
" rfds="	*(char)
)	O
;	O
Tvbfdset	(int,*(struct(array(long))))->(void)
(	O
max	int
,	O
rfds	*(struct(array(long)))
)	O
;	O
Tvbf	(*(char))->(void)
(	O
" wfds="	*(char)
)	O
;	O
Tvbfdset	(int,*(struct(array(long))))->(void)
(	O
max	int
,	O
wfds	*(struct(array(long)))
)	O
;	O
Tvbf	(*(char))->(void)
(	O
" efds="	*(char)
)	O
;	O
Tvbfdset	(int,*(struct(array(long))))->(void)
(	O
max	int
,	O
efds	*(struct(array(long)))
)	O
;	O
if	O
(	O
to	*(struct(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(void),int,struct(*`,*`),struct(*`,*`),struct(*`,*`),struct(*`,*`),*(struct`),int,int,int,struct(int,int,*`),struct(int,int,*`),int,int,int,int,int,int,enum(int,int,int,int),struct(long,long),struct(union`,struct`,int,*`),struct(array(long)),array(struct(int,short,short)),array(struct(struct(int))),array(struct(struct(int),struct(int))),*(*`),array(short))),enum(int,int,int,int),*(struct(*(struct`),enum(int,int,int,int),*(struct`),*(struct`),*(struct`),struct(*`,*`),struct(*`,*`),struct(*`,*`),int,int,*(void),*(struct`),*(char),int,struct(int,int,*`),*(struct`),*(char),int,int,struct(int,int,*`),int,int,int,int,int,int,int,long,struct(long,long),long,struct(*`,*`,union`))),*(struct(*(struct`),enum(int,int,int,int),*(struct`),*(struct`),*(struct`),struct(*`,*`),struct(*`,*`),struct(*`,*`),int,int,*(void),*(struct`),*(char),int,struct(int,int,*`),*(struct`),*(char),int,int,struct(int,int,*`),int,int,int,int,int,int,int,long,struct(long,long),long,struct(*`,*`,union`))),*(struct(*(struct`),enum(int,int,int,int),*(struct`),*(struct`),*(struct`),struct(*`,*`),struct(*`,*`),struct(*`,*`),int,int,*(void),*(struct`),*(char),int,struct(int,int,*`),*(struct`),*(char),int,int,struct(int,int,*`),int,int,int,int,int,int,int,long,struct(long,long),long,struct(*`,*`,union`))),struct(*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`))),struct(*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`))),struct(*(struct(*`,*`)),*(struct(*`,*`))),int,int,*(void),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),int,*((*`,*`)->(void)),*((*`,*`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*`,int,int,*`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*`,*`,*`)->(int)),*((*`,*`,*`,int,array(char),*`,enum(int,int,int,int,int,int,int,int,int,int,int),*`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*`,*`,int,*`)->(void)))),*(char),int,struct(int,int,*(char)),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`))),*(char),int,int,struct(int,int,*(char)),int,int,int,int,int,int,int,long,struct(long,long),long,struct(*(void),*((*`,*`)->(void)),union(struct(int,union`),*(struct`)))))
)	O
Tvbf	(*(char))->(void)
(	O
" to=%ld.%06ld"	*(char)
,	O
(	O
long	O
)	O
to	*(struct(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(void),int,struct(*`,*`),struct(*`,*`),struct(*`,*`),struct(*`,*`),*(struct`),int,int,int,struct(int,int,*`),struct(int,int,*`),int,int,int,int,int,int,enum(int,int,int,int),struct(long,long),struct(union`,struct`,int,*`),struct(array(long)),array(struct(int,short,short)),array(struct(struct(int))),array(struct(struct(int),struct(int))),*(*`),array(short))),enum(int,int,int,int),*(struct(*(struct`),enum(int,int,int,int),*(struct`),*(struct`),*(struct`),struct(*`,*`),struct(*`,*`),struct(*`,*`),int,int,*(void),*(struct`),*(char),int,struct(int,int,*`),*(struct`),*(char),int,int,struct(int,int,*`),int,int,int,int,int,int,int,long,struct(long,long),long,struct(*`,*`,union`))),*(struct(*(struct`),enum(int,int,int,int),*(struct`),*(struct`),*(struct`),struct(*`,*`),struct(*`,*`),struct(*`,*`),int,int,*(void),*(struct`),*(char),int,struct(int,int,*`),*(struct`),*(char),int,int,struct(int,int,*`),int,int,int,int,int,int,int,long,struct(long,long),long,struct(*`,*`,union`))),*(struct(*(struct`),enum(int,int,int,int),*(struct`),*(struct`),*(struct`),struct(*`,*`),struct(*`,*`),struct(*`,*`),int,int,*(void),*(struct`),*(char),int,struct(int,int,*`),*(struct`),*(char),int,int,struct(int,int,*`),int,int,int,int,int,int,int,long,struct(long,long),long,struct(*`,*`,union`))),struct(*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`))),struct(*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`))),struct(*(struct(*`,*`)),*(struct(*`,*`))),int,int,*(void),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),int,*((*`,*`)->(void)),*((*`,*`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*`,int,int,*`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*`,*`,*`)->(int)),*((*`,*`,*`,int,array(char),*`,enum(int,int,int,int,int,int,int,int,int,int,int),*`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*`,*`,int,*`)->(void)))),*(char),int,struct(int,int,*(char)),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`))),*(char),int,int,struct(int,int,*(char)),int,int,int,int,int,int,int,long,struct(long,long),long,struct(*(void),*((*`,*`)->(void)),union(struct(int,union`),*(struct`)))))
->	O
tv_sec	long
,	O
(	O
long	O
)	O
to	*(struct(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(void),int,struct(*`,*`),struct(*`,*`),struct(*`,*`),struct(*`,*`),*(struct`),int,int,int,struct(int,int,*`),struct(int,int,*`),int,int,int,int,int,int,enum(int,int,int,int),struct(long,long),struct(union`,struct`,int,*`),struct(array(long)),array(struct(int,short,short)),array(struct(struct(int))),array(struct(struct(int),struct(int))),*(*`),array(short))),enum(int,int,int,int),*(struct(*(struct`),enum(int,int,int,int),*(struct`),*(struct`),*(struct`),struct(*`,*`),struct(*`,*`),struct(*`,*`),int,int,*(void),*(struct`),*(char),int,struct(int,int,*`),*(struct`),*(char),int,int,struct(int,int,*`),int,int,int,int,int,int,int,long,struct(long,long),long,struct(*`,*`,union`))),*(struct(*(struct`),enum(int,int,int,int),*(struct`),*(struct`),*(struct`),struct(*`,*`),struct(*`,*`),struct(*`,*`),int,int,*(void),*(struct`),*(char),int,struct(int,int,*`),*(struct`),*(char),int,int,struct(int,int,*`),int,int,int,int,int,int,int,long,struct(long,long),long,struct(*`,*`,union`))),*(struct(*(struct`),enum(int,int,int,int),*(struct`),*(struct`),*(struct`),struct(*`,*`),struct(*`,*`),struct(*`,*`),int,int,*(void),*(struct`),*(char),int,struct(int,int,*`),*(struct`),*(char),int,int,struct(int,int,*`),int,int,int,int,int,int,int,long,struct(long,long),long,struct(*`,*`,union`))),struct(*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`))),struct(*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`)),*(struct(*`,enum(int,int,int,int),*`,*`,*`,struct`,struct`,struct`,int,int,*`,*`,*`,int,struct`,*`,*`,int,int,struct`,int,int,int,int,int,int,int,long,struct`,long,struct`))),struct(*(struct(*`,*`)),*(struct(*`,*`))),int,int,*(void),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),int,*((*`,*`)->(void)),*((*`,*`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*`,int,int,*`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*`,*`,*`)->(int)),*((*`,*`,*`,int,array(char),*`,enum(int,int,int,int,int,int,int,int,int,int,int),*`)->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))),*((*`,*`,int,*`)->(void)))),*(char),int,struct(int,int,*(char)),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`))),*(char),int,int,struct(int,int,*(char)),int,int,int,int,int,int,int,long,struct(long,long),long,struct(*(void),*((*`,*`)->(void)),union(struct(int,union`),*(struct`)))))
->	O
tv_usec	long
)	O
;	O
else	O
Tvba	(*(char))->(void)
(	O
" to=null"	*(char)
)	O
;	O
Q_vb	()->(void)
(	O
)	O
;	O
}	O
void	O
Qpoll	(*(struct(int,short,short)),int,int)->(void)
(	O
const	O
struct	O
pollfd	struct(int,short,short)
*	O
fds	*(struct(int,short,short))
,	O
int	O
nfds	int
,	O
int	O
timeout	struct(long,long)
)	O
{	O
vb	*(struct(int,int,*(char)))
.	O
used	int
=	O
0	int
;	O
Tvba	(*(char))->(void)
(	O
"poll"	*(char)
)	O
;	O
Tvbf	(*(char))->(void)
(	O
" fds="	*(char)
)	O
;	O
Tvbpollfds	(*(struct(int,short,short)),int)->(void)
(	O
fds	*(struct(int,short,short))
,	O
nfds	int
)	O
;	O
Tvbf	(*(char))->(void)
(	O
" timeout=%d"	*(char)
,	O
timeout	struct(long,long)
)	O
;	O
Q_vb	()->(void)
(	O
)	O
;	O
}	O
void	O
Qsocket	(int)->(void)
(	O
int	O
type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
{	O
vb	*(struct(int,int,*(char)))
.	O
used	int
=	O
0	int
;	O
Tvba	(*(char))->(void)
(	O
"socket"	*(char)
)	O
;	O
Tvbf	(*(char))->(void)
(	O
type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
SOCK_STREAM	int
?	O
" type=SOCK_STREAM"	*(char)
:	O
" type=SOCK_DGRAM"	*(char)
)	O
;	O
Q_vb	()->(void)
(	O
)	O
;	O
}	O
void	O
Qfcntl	(int,int,long)->(void)
(	O
int	O
fd	int
,	O
int	O
cmd	int
,	O
long	O
arg	long
)	O
{	O
vb	*(struct(int,int,*(char)))
.	O
used	int
=	O
0	int
;	O
Tvba	(*(char))->(void)
(	O
"fcntl"	*(char)
)	O
;	O
Tvbf	(*(char))->(void)
(	O
" fd=%d"	*(char)
,	O
fd	int
)	O
;	O
if	O
(	O
cmd	int
==	O
F_SETFL	int
)	O
{	O
Tvbf	(*(char))->(void)
(	O
" cmd=F_SETFL %s"	*(char)
,	O
arg	long
&	O
O_NONBLOCK	int
?	O
"O_NONBLOCK|..."	*(char)
:	O
"~O_NONBLOCK&..."	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
cmd	int
==	O
F_GETFL	int
)	O
{	O
Tvba	(*(char))->(void)
(	O
" cmd=F_GETFL"	*(char)
)	O
;	O
}	O
else	O
{	O
Tmust	(*(char),*(char),int)->(void)
(	O
"cmd"	*(char)
,	O
"F_GETFL/F_SETFL"	*(char)
,	O
0	int
)	O
;	O
}	O
Q_vb	()->(void)
(	O
)	O
;	O
}	O
void	O
Qconnect	(int,*(struct(short,array(char))),int)->(void)
(	O
int	O
fd	int
,	O
const	O
struct	O
sockaddr	struct(short,array(char))
*	O
addr	union(struct(short,array(char)),struct(short,short,struct(int),array(char)))
,	O
int	O
addrlen	int
)	O
{	O
vb	*(struct(int,int,*(char)))
.	O
used	int
=	O
0	int
;	O
Tvba	(*(char))->(void)
(	O
"connect"	*(char)
)	O
;	O
Tvbf	(*(char))->(void)
(	O
" fd=%d"	*(char)
,	O
fd	int
)	O
;	O
Tvba	(*(char))->(void)
(	O
" addr="	*(char)
)	O
;	O
Tvbaddr	(*(struct(short,array(char))),int)->(void)
(	O
addr	union(struct(short,array(char)),struct(short,short,struct(int),array(char)))
,	O
addrlen	int
)	O
;	O
Q_vb	()->(void)
(	O
)	O
;	O
}	O
void	O
Qbind	(int,*(struct(short,array(char))),int)->(void)
(	O
int	O
fd	int
,	O
const	O
struct	O
sockaddr	struct(short,array(char))
*	O
addr	union(struct(short,array(char)),struct(short,short,struct(int),array(char)))
,	O
int	O
addrlen	int
)	O
{	O
vb	*(struct(int,int,*(char)))
.	O
used	int
=	O
0	int
;	O
Tvba	(*(char))->(void)
(	O
"bind"	*(char)
)	O
;	O
Tvbf	(*(char))->(void)
(	O
" fd=%d"	*(char)
,	O
fd	int
)	O
;	O
Tvba	(*(char))->(void)
(	O
" addr="	*(char)
)	O
;	O
Tvbaddr	(*(struct(short,array(char))),int)->(void)
(	O
addr	union(struct(short,array(char)),struct(short,short,struct(int),array(char)))
,	O
addrlen	int
)	O
;	O
Q_vb	()->(void)
(	O
)	O
;	O
}	O
void	O
Qlisten	(int,int)->(void)
(	O
int	O
fd	int
,	O
int	O
backlog	int
)	O
{	O
vb	*(struct(int,int,*(char)))
.	O
used	int
=	O
0	int
;	O
Tvba	(*(char))->(void)
(	O
"listen"	*(char)
)	O
;	O
Tvbf	(*(char))->(void)
(	O
" fd=%d"	*(char)
,	O
fd	int
)	O
;	O
Tvbf	(*(char))->(void)
(	O
" backlog=%d"	*(char)
,	O
backlog	int
)	O
;	O
Q_vb	()->(void)
(	O
)	O
;	O
}	O
void	O
Qclose	(int)->(void)
(	O
int	O
fd	int
)	O
{	O
vb	*(struct(int,int,*(char)))
.	O
used	int
=	O
0	int
;	O
Tvba	(*(char))->(void)
(	O
"close"	*(char)
)	O
;	O
Tvbf	(*(char))->(void)
(	O
" fd=%d"	*(char)
,	O
fd	int
)	O
;	O
Q_vb	()->(void)
(	O
)	O
;	O
}	O
void	O
Qsendto	(int,*(void),int,*(struct(short,array(char))),int)->(void)
(	O
int	O
fd	int
,	O
const	O
void	O
*	O
msg	*(void)
,	O
int	O
msglen	int
,	O
const	O
struct	O
sockaddr	struct(short,array(char))
*	O
addr	union(struct(short,array(char)),struct(short,short,struct(int),array(char)))
,	O
int	O
addrlen	int
)	O
{	O
vb	*(struct(int,int,*(char)))
.	O
used	int
=	O
0	int
;	O
Tvba	(*(char))->(void)
(	O
"sendto"	*(char)
)	O
;	O
Tvbf	(*(char))->(void)
(	O
" fd=%d"	*(char)
,	O
fd	int
)	O
;	O
Tvba	(*(char))->(void)
(	O
" addr="	*(char)
)	O
;	O
Tvbaddr	(*(struct(short,array(char))),int)->(void)
(	O
addr	union(struct(short,array(char)),struct(short,short,struct(int),array(char)))
,	O
addrlen	int
)	O
;	O
Tvbbytes	(*(void),int)->(void)
(	O
msg	*(void)
,	O
msglen	int
)	O
;	O
Q_vb	()->(void)
(	O
)	O
;	O
}	O
void	O
Qrecvfrom	(int,int,int)->(void)
(	O
int	O
fd	int
,	O
int	O
buflen	int
,	O
int	O
addrlen	int
)	O
{	O
vb	*(struct(int,int,*(char)))
.	O
used	int
=	O
0	int
;	O
Tvba	(*(char))->(void)
(	O
"recvfrom"	*(char)
)	O
;	O
Tvbf	(*(char))->(void)
(	O
" fd=%d"	*(char)
,	O
fd	int
)	O
;	O
Tvbf	(*(char))->(void)
(	O
" buflen=%lu"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
buflen	int
)	O
;	O
Tvbf	(*(char))->(void)
(	O
" *addrlen=%d"	*(char)
,	O
addrlen	int
)	O
;	O
Q_vb	()->(void)
(	O
)	O
;	O
}	O
void	O
Qread	(int,long)->(void)
(	O
int	O
fd	int
,	O
size_t	long
buflen	int
)	O
{	O
vb	*(struct(int,int,*(char)))
.	O
used	int
=	O
0	int
;	O
Tvba	(*(char))->(void)
(	O
"read"	*(char)
)	O
;	O
Tvbf	(*(char))->(void)
(	O
" fd=%d"	*(char)
,	O
fd	int
)	O
;	O
Tvbf	(*(char))->(void)
(	O
" buflen=%lu"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
buflen	int
)	O
;	O
Q_vb	()->(void)
(	O
)	O
;	O
}	O
void	O
Qwrite	(int,*(void),long)->(void)
(	O
int	O
fd	int
,	O
const	O
void	O
*	O
buf	*(char)
,	O
size_t	long
len	int
)	O
{	O
vb	*(struct(int,int,*(char)))
.	O
used	int
=	O
0	int
;	O
Tvba	(*(char))->(void)
(	O
"write"	*(char)
)	O
;	O
Tvbf	(*(char))->(void)
(	O
" fd=%d"	*(char)
,	O
fd	int
)	O
;	O
Tvbbytes	(*(void),int)->(void)
(	O
buf	*(char)
,	O
len	int
)	O
;	O
Q_vb	()->(void)
(	O
)	O
;	O
}	O
void	O
Tvbaddr	(*(struct(short,array(char))),int)->(void)
(	O
const	O
struct	O
sockaddr	struct(short,array(char))
*	O
addr	union(struct(short,array(char)),struct(short,short,struct(int),array(char)))
,	O
int	O
len	int
)	O
{	O
const	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
*	O
ai	*(struct(short,short,struct(int),array(char)))
=	O
(	O
const	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
*	O
)	O
addr	union(struct(short,array(char)),struct(short,short,struct(int),array(char)))
;	O
assert	O
(	O
len	int
==	O
sizeof	O
(	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
)	O
)	O
;	O
assert	O
(	O
ai	*(struct(short,short,struct(int),array(char)))
->	O
sin_family	short
==	O
AF_INET	O
)	O
;	O
Tvbf	(*(char))->(void)
(	O
"%s:%u"	*(char)
,	O
inet_ntoa	(struct(int))->(*(char))
(	O
ai	*(struct(short,short,struct(int),array(char)))
->	O
sin_addr	struct(int)
)	O
,	O
htons	(short)->(short)
(	O
ai	*(struct(short,short,struct(int),array(char)))
->	O
sin_port	short
)	O
)	O
;	O
}	O
void	O
Tvbbytes	(*(void),int)->(void)
(	O
const	O
void	O
*	O
buf	*(char)
,	O
int	O
len	int
)	O
{	O
const	O
byte	char
*	O
bp	*(char)
;	O
int	O
i	int
;	O
if	O
(	O
!	O
len	int
)	O
{	O
Tvba	(*(char))->(void)
(	O
"\n     ."	*(char)
)	O
;	O
return	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
,	O
bp	*(char)
=	O
buf	*(char)
;	O
i	int
<	O
len	int
;	O
i	int
++	O
,	O
bp	*(char)
++	O
)	O
{	O
if	O
(	O
!	O
(	O
i	int
&	O
31	int
)	O
)	O
Tvba	(*(char))->(void)
(	O
"\n     "	*(char)
)	O
;	O
else	O
if	O
(	O
!	O
(	O
i	int
&	O
3	int
)	O
)	O
Tvba	(*(char))->(void)
(	O
" "	*(char)
)	O
;	O
Tvbf	(*(char))->(void)
(	O
"%02x"	*(char)
,	O
*	O
bp	*(char)
)	O
;	O
}	O
Tvba	(*(char))->(void)
(	O
"."	*(char)
)	O
;	O
}	O
void	O
Tvbfdset	(int,*(struct(array(long))))->(void)
(	O
int	O
max	int
,	O
const	O
fd_set	struct(array(long))
*	O
fds	*(struct(int,short,short))
)	O
{	O
int	O
i	int
;	O
const	O
char	O
*	O
comma	*(char)
=	O
""	*(char)
;	O
Tvba	(*(char))->(void)
(	O
"["	*(char)
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
max	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
!	O
FD_ISSET	O
(	O
i	int
,	O
fds	*(struct(int,short,short))
)	O
)	O
continue	O
;	O
Tvba	(*(char))->(void)
(	O
comma	*(char)
)	O
;	O
Tvbf	(*(char))->(void)
(	O
"%d"	*(char)
,	O
i	int
)	O
;	O
comma	*(char)
=	O
","	*(char)
;	O
}	O
Tvba	(*(char))->(void)
(	O
"]"	*(char)
)	O
;	O
}	O
static	O
void	O
Tvbpollevents	(int)->(void)
(	O
int	O
events	short
)	O
{	O
const	O
char	O
*	O
delim	*(char)
=	O
""	*(char)
;	O
events	short
&=	O
(	O
POLLIN	int
|	O
POLLOUT	int
|	O
POLLPRI	int
)	O
;	O
if	O
(	O
!	O
events	short
)	O
{	O
Tvba	(*(char))->(void)
(	O
"0"	*(char)
)	O
;	O
return	O
;	O
}	O
if	O
(	O
events	short
&	O
POLLIN	int
)	O
{	O
Tvba	(*(char))->(void)
(	O
"POLLIN"	*(char)
)	O
;	O
delim	*(char)
=	O
"|"	*(char)
;	O
}	O
if	O
(	O
events	short
&	O
POLLOUT	int
)	O
{	O
Tvba	(*(char))->(void)
(	O
delim	*(char)
)	O
;	O
Tvba	(*(char))->(void)
(	O
"POLLOUT"	*(char)
)	O
;	O
delim	*(char)
=	O
"|"	*(char)
;	O
}	O
if	O
(	O
events	short
&	O
POLLPRI	int
)	O
{	O
Tvba	(*(char))->(void)
(	O
delim	*(char)
)	O
;	O
Tvba	(*(char))->(void)
(	O
"POLLPRI"	*(char)
)	O
;	O
}	O
}	O
void	O
Tvbpollfds	(*(struct(int,short,short)),int)->(void)
(	O
const	O
struct	O
pollfd	struct(int,short,short)
*	O
fds	*(struct(int,short,short))
,	O
int	O
nfds	int
)	O
{	O
const	O
char	O
*	O
comma	*(char)
=	O
""	*(char)
;	O
Tvba	(*(char))->(void)
(	O
"["	*(char)
)	O
;	O
while	O
(	O
nfds	int
>	O
0	int
)	O
{	O
Tvba	(*(char))->(void)
(	O
comma	*(char)
)	O
;	O
Tvbf	(*(char))->(void)
(	O
"{fd=%d, events="	*(char)
,	O
fds	*(struct(int,short,short))
->	O
fd	int
)	O
;	O
Tvbpollevents	(int)->(void)
(	O
fds	*(struct(int,short,short))
->	O
events	short
)	O
;	O
Tvba	(*(char))->(void)
(	O
", revents="	*(char)
)	O
;	O
Tvbpollevents	(int)->(void)
(	O
fds	*(struct(int,short,short))
->	O
revents	short
)	O
;	O
Tvba	(*(char))->(void)
(	O
"}"	*(char)
)	O
;	O
comma	*(char)
=	O
", "	*(char)
;	O
nfds	int
--	O
;	O
fds	*(struct(int,short,short))
++	O
;	O
}	O
Tvba	(*(char))->(void)
(	O
"]"	*(char)
)	O
;	O
}	O
void	O
Tvberrno	(int)->(void)
(	O
int	O
e	int
)	O
{	O
const	O
struct	O
Terrno	struct(*(char),int)
*	O
te	*(struct(*(char),int))
;	O
for	O
(	O
te	*(struct(*(char),int))
=	O
Terrnos	array(struct(*(char),int))
;	O
te	*(struct(*(char),int))
->	O
n	*(char)
&&	O
te	*(struct(*(char),int))
->	O
v	int
!=	O
e	int
;	O
te	*(struct(*(char),int))
++	O
)	O
;	O
assert	O
(	O
te	*(struct(*(char),int))
->	O
n	*(char)
)	O
;	O
Tvba	(*(char))->(void)
(	O
te	*(struct(*(char),int))
->	O
n	*(char)
)	O
;	O
}	O
void	O
Tvba	(*(char))->(void)
(	O
const	O
char	O
*	O
str	*(char)
)	O
{	O
if	O
(	O
!	O
adns__vbuf_appendstr	(*(struct(int,int,*(char))),*(char))->(int)
(	O
&	O
vb	*(struct(int,int,*(char)))
,	O
str	*(char)
)	O
)	O
Tnomem	()->(void)
(	O
)	O
;	O
}	O
void	O
Tvbvf	(*(char),array(struct(int,int,*(void),*(void))))->(void)
(	O
const	O
char	O
*	O
fmt	*(char)
,	O
va_list	array(struct(int,int,*(void),*(void)))
al	array(struct(int,int,*(void),*(void)))
)	O
{	O
char	O
buf	*(char)
[	O
1000	int
]	O
;	O
buf	*(char)
[	O
sizeof	O
(	O
buf	*(char)
)	O
-	O
2	int
]	O
=	O
'\t'	O
;	O
vsnprintf	(*(char),long,*(char),array(struct(int,int,*(void),*(void))))->(int)
(	O
buf	*(char)
,	O
sizeof	O
(	O
buf	*(char)
)	O
,	O
fmt	*(char)
,	O
al	array(struct(int,int,*(void),*(void)))
)	O
;	O
assert	O
(	O
buf	*(char)
[	O
sizeof	O
(	O
buf	*(char)
)	O
-	O
2	int
]	O
==	O
'\t'	O
)	O
;	O
Tvba	(*(char))->(void)
(	O
buf	*(char)
)	O
;	O
}	O
void	O
Tvbf	(*(char))->(void)
(	O
const	O
char	O
*	O
fmt	*(char)
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
al	array(struct(int,int,*(void),*(void)))
;	O
va_start	O
(	O
al	array(struct(int,int,*(void),*(void)))
,	O
fmt	*(char)
)	O
;	O
Tvbvf	(*(char),array(struct(int,int,*(void),*(void))))->(void)
(	O
fmt	*(char)
,	O
al	array(struct(int,int,*(void),*(void)))
)	O
;	O
va_end	O
(	O
al	array(struct(int,int,*(void),*(void)))
)	O
;	O
}	O
void	O
Tmust	(*(char),*(char),int)->(void)
(	O
const	O
char	O
*	O
call	*(char)
,	O
const	O
char	O
*	O
arg	long
,	O
int	O
cond	int
)	O
{	O
if	O
(	O
cond	int
)	O
return	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"adns test harness: case not handled: system call %s, arg %s"	*(char)
,	O
call	*(char)
,	O
arg	long
)	O
;	O
exit	(int)->(void)
(	O
-	O
1	int
)	O
;	O
}	O
void	O
Tfailed	(*(char))->(void)
(	O
const	O
char	O
*	O
why	*(char)
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"adns test harness: failure: %s: %s\n"	*(char)
,	O
why	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
exit	(int)->(void)
(	O
-	O
1	int
)	O
;	O
}	O
void	O
Tnomem	()->(void)
(	O
void	O
)	O
{	O
Tfailed	(*(char))->(void)
(	O
"unable to malloc/realloc"	*(char)
)	O
;	O
}	O
void	O
Toutputerr	()->(void)
(	O
void	O
)	O
{	O
Tfailed	(*(char))->(void)
(	O
"write error on test harness output"	*(char)
)	O
;	O
}	O
struct	O
malloced	struct(*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void))))),*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void))))),long,long,struct(double,long,*(void),*(()->(void))))
{	O
struct	O
malloced	struct(*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void))))),*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void))))),long,long,struct(double,long,*(void),*(()->(void))))
*	O
next	*(struct(*(struct(*(struct`),*(struct`))),*(struct(*(struct`),*(struct`)))))
,	O
*	O
back	*(struct(*(struct(*(struct`),*(struct`))),*(struct(*(struct`),*(struct`)))))
;	O
size_t	long
sz	int
;	O
unsigned	O
long	O
count	long
;	O
struct	O
{	O
double	O
d	array(char)
;	O
long	O
ul	long
;	O
void	O
*	O
p	*(void)
;	O
void	O
(	O
*	O
fp	*(()->(void))
)	O
(	O
void	O
)	O
;	O
}	O
data	*(char)
;	O
}	O
;	O
static	O
unsigned	O
long	O
malloccount	long
,	O
mallocfailat	long
;	O
static	O
struct	O
{	O
struct	O
malloced	struct(*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void))))),*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void))))),long,long,struct(double,long,*(void),*(()->(void))))
*	O
head	*(struct(*(struct),enum(int,int,int,int),*(struct(*(struct`),enum(int,int,int,int),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),enum(int,int,int,int),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),enum(int,int,int,int),*(struct`),*(struct`),*(struct`)))))
,	O
*	O
tail	*(struct(*(struct),enum(int,int,int,int),*(struct(*(struct`),enum(int,int,int,int),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),enum(int,int,int,int),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),enum(int,int,int,int),*(struct`),*(struct`),*(struct`)))))
;	O
}	O
mallocedlist	struct(*(struct(*(struct(*`,*`,long,long,struct`)),*(struct(*`,*`,long,long,struct`)),long,long,struct(double,long,*(void),*(()->(void))))),*(struct(*(struct(*`,*`,long,long,struct`)),*(struct(*`,*`,long,long,struct`)),long,long,struct(double,long,*(void),*(()->(void))))))
;	O
void	O
*	O
Hmalloc	(long)->(*(void))
(	O
size_t	long
sz	int
)	O
{	O
struct	O
malloced	struct(*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void))))),*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void))))),long,long,struct(double,long,*(void),*(()->(void))))
*	O
newnode	*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void)))))
;	O
const	O
char	O
*	O
mfavar	*(char)
;	O
char	O
*	O
ep	*(char)
;	O
assert	O
(	O
sz	int
)	O
;	O
newnode	*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void)))))
=	O
malloc	(long)->(*(void))
(	O
MALLOCHSZ	O
+	O
sz	int
)	O
;	O
if	O
(	O
!	O
newnode	*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void)))))
)	O
Tnomem	()->(void)
(	O
)	O
;	O
LIST_LINK_TAIL	O
(	O
mallocedlist	struct(*(struct(*(struct(*`,*`,long,long,struct`)),*(struct(*`,*`,long,long,struct`)),long,long,struct(double,long,*(void),*(()->(void))))),*(struct(*(struct(*`,*`,long,long,struct`)),*(struct(*`,*`,long,long,struct`)),long,long,struct(double,long,*(void),*(()->(void))))))
,	O
newnode	*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void)))))
)	O
;	O
newnode	*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void)))))
->	O
sz	int
=	O
sz	int
;	O
newnode	*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void)))))
->	O
count	long
=	O
++	O
malloccount	long
;	O
if	O
(	O
!	O
mallocfailat	long
)	O
{	O
mfavar	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"ADNS_REGRESS_MALLOCFAILAT"	*(char)
)	O
;	O
if	O
(	O
mfavar	*(char)
)	O
{	O
mallocfailat	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
mfavar	*(char)
,	O
&	O
ep	*(char)
,	O
10	int
)	O
;	O
if	O
(	O
!	O
mallocfailat	long
||	O
*	O
ep	*(char)
)	O
Tfailed	(*(char))->(void)
(	O
"ADNS_REGRESS_MALLOCFAILAT bad value"	*(char)
)	O
;	O
}	O
else	O
{	O
mallocfailat	long
=	O
~	O
0UL	int
;	O
}	O
}	O
assert	O
(	O
newnode	*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void)))))
->	O
count	long
!=	O
mallocfailat	long
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
newnode	*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void)))))
->	O
data	*(char)
,	O
0xc7	int
,	O
sz	int
)	O
;	O
return	O
&	O
newnode	*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void)))))
->	O
data	*(char)
;	O
}	O
void	O
Hfree	(*(void))->(void)
(	O
void	O
*	O
ptr	*(void)
)	O
{	O
struct	O
malloced	struct(*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void))))),*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void))))),long,long,struct(double,long,*(void),*(()->(void))))
*	O
oldnode	*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void)))))
;	O
if	O
(	O
!	O
ptr	*(void)
)	O
return	O
;	O
oldnode	*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void)))))
=	O
(	O
void	O
*	O
)	O
(	O
(	O
char	O
*	O
)	O
ptr	*(void)
-	O
MALLOCHSZ	O
)	O
;	O
LIST_UNLINK	O
(	O
mallocedlist	struct(*(struct(*(struct(*`,*`,long,long,struct`)),*(struct(*`,*`,long,long,struct`)),long,long,struct(double,long,*(void),*(()->(void))))),*(struct(*(struct(*`,*`,long,long,struct`)),*(struct(*`,*`,long,long,struct`)),long,long,struct(double,long,*(void),*(()->(void))))))
,	O
oldnode	*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void)))))
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
oldnode	*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void)))))
->	O
data	*(char)
,	O
0x38	int
,	O
oldnode	*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void)))))
->	O
sz	int
)	O
;	O
free	(*(void))->(void)
(	O
oldnode	*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void)))))
)	O
;	O
}	O
void	O
*	O
Hrealloc	(*(void),long)->(*(void))
(	O
void	O
*	O
op	*(void)
,	O
size_t	long
nsz	long
)	O
{	O
struct	O
malloced	struct(*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void))))),*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void))))),long,long,struct(double,long,*(void),*(()->(void))))
*	O
oldnode	*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void)))))
;	O
void	O
*	O
np	*(void)
;	O
size_t	long
osz	long
;	O
if	O
(	O
op	*(void)
)	O
{	O
oldnode	*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void)))))
=	O
(	O
void	O
*	O
)	O
(	O
(	O
char	O
*	O
)	O
op	*(void)
-	O
MALLOCHSZ	O
)	O
;	O
osz	long
=	O
oldnode	*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void)))))
->	O
sz	int
;	O
}	O
else	O
{	O
osz	long
=	O
0	int
;	O
}	O
np	*(void)
=	O
Hmalloc	(long)->(*(void))
(	O
nsz	long
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
np	*(void)
,	O
op	*(void)
,	O
osz	long
>	O
nsz	long
?	O
nsz	long
:	O
osz	long
)	O
;	O
Hfree	(*(void))->(void)
(	O
op	*(void)
)	O
;	O
return	O
np	*(void)
;	O
}	O
void	O
Hexit	(int)->(void)
(	O
int	O
rv	int
)	O
{	O
struct	O
malloced	struct(*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void))))),*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void))))),long,long,struct(double,long,*(void),*(()->(void))))
*	O
loopnode	*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void)))))
;	O
Tshutdown	()->(void)
(	O
)	O
;	O
adns__vbuf_free	(*(struct(int,int,*(char))))->(void)
(	O
&	O
vb	*(struct(int,int,*(char)))
)	O
;	O
adns__vbuf_free	(*(struct(int,int,*(char))))->(void)
(	O
&	O
vbw	struct(int,int,*(char))
)	O
;	O
if	O
(	O
mallocedlist	struct(*(struct(*(struct(*`,*`,long,long,struct`)),*(struct(*`,*`,long,long,struct`)),long,long,struct(double,long,*(void),*(()->(void))))),*(struct(*(struct(*`,*`,long,long,struct`)),*(struct(*`,*`,long,long,struct`)),long,long,struct(double,long,*(void),*(()->(void))))))
.	O
head	*(struct(*(struct),enum(int,int,int,int),*(struct(*(struct`),enum(int,int,int,int),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),enum(int,int,int,int),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),enum(int,int,int,int),*(struct`),*(struct`),*(struct`)))))
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"adns test harness: memory leaked:"	*(char)
)	O
;	O
for	O
(	O
loopnode	*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void)))))
=	O
mallocedlist	struct(*(struct(*(struct(*`,*`,long,long,struct`)),*(struct(*`,*`,long,long,struct`)),long,long,struct(double,long,*(void),*(()->(void))))),*(struct(*(struct(*`,*`,long,long,struct`)),*(struct(*`,*`,long,long,struct`)),long,long,struct(double,long,*(void),*(()->(void))))))
.	O
head	*(struct(*(struct),enum(int,int,int,int),*(struct(*(struct`),enum(int,int,int,int),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),enum(int,int,int,int),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),enum(int,int,int,int),*(struct`),*(struct`),*(struct`)))))
;	O
loopnode	*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void)))))
;	O
loopnode	*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void)))))
=	O
loopnode	*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void)))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`))),*(struct(*(struct`),*(struct`)))))
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
" %lu"	*(char)
,	O
loopnode	*(struct(*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),*(struct(*(struct`),*(struct`),long,long,struct(double,long,*`,*`))),long,long,struct(double,long,*(void),*(()->(void)))))
->	O
count	long
)	O
;	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'\n'	O
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
ferror	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
exit	(int)->(void)
(	O
-	O
1	int
)	O
;	O
}	O
exit	(int)->(void)
(	O
rv	int
)	O
;	O
}	O
pid_t	int
Hgetpid	()->(int)
(	O
void	O
)	O
{	O
return	O
2264	int
;	O
}	O
