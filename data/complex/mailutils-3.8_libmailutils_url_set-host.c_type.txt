int	O
mu_url_set_host	(*(struct),*(char))->(int)
(	O
mu_url_t	*(struct)
url	*(struct)
,	O
const	O
char	O
*	O
host	*(char)
)	O
{	O
char	O
*	O
copy	*(char)
;	O
if	O
(	O
!	O
url	*(struct)
)	O
return	O
EINVAL	int
;	O
if	O
(	O
host	*(char)
)	O
{	O
size_t	long
len	long
;	O
int	O
flag	int
=	O
MU_URL_HOST	int
;	O
len	long
=	O
strlen	(*(char))->(long)
(	O
host	*(char)
)	O
;	O
if	O
(	O
len	long
==	O
0	int
)	O
return	O
EINVAL	int
;	O
if	O
(	O
host	*(char)
[	O
0	int
]	O
==	O
'['	O
&&	O
host	*(char)
[	O
len	long
-	O
1	int
]	O
==	O
']'	O
)	O
{	O
flag	int
|=	O
MU_URL_IPV6	int
;	O
host	*(char)
++	O
;	O
len	long
-=	O
2	int
;	O
}	O
copy	*(char)
=	O
malloc	(long)->(*(void))
(	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
copy	*(char)
)	O
return	O
ENOMEM	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
copy	*(char)
,	O
host	*(char)
,	O
len	long
)	O
;	O
copy	*(char)
[	O
len	long
]	O
=	O
0	int
;	O
url	*(struct)
->	O
flags	int
|=	O
flag	int
;	O
}	O
else	O
{	O
url	*(struct)
->	O
flags	int
&=	O
~	O
(	O
MU_URL_HOST	int
|	O
MU_URL_IPV6	int
)	O
;	O
copy	*(char)
=	O
NULL	O
;	O
}	O
url	*(struct)
->	O
_get_host	*((*(struct(int,*(char),*(char),*(char),*(struct`),*(char),*(char),short,*(char),*(char),*(*`),int,*(*`),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)))),*(char),long,*(long))->(int))
=	O
NULL	O
;	O
free	(*(void))->(void)
(	O
url	*(struct)
->	O
host	*(char)
)	O
;	O
url	*(struct)
->	O
host	*(char)
=	O
copy	*(char)
;	O
mu_url_invalidate	(*(struct))->(int)
(	O
url	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
