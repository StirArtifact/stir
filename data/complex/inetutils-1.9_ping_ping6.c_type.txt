static	O
PING	struct
*	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
;	O
bool	bool
is_root	bool
=	O
false	int
;	O
unsigned	O
char	O
*	O
data_buffer	*(char)
;	O
unsigned	O
char	O
*	O
patptr	*(char)
;	O
int	O
one	int
=	O
1	int
;	O
int	O
pattern_len	*(int)
=	O
16	int
;	O
size_t	long
data_length	long
=	O
PING_DATALEN	O
;	O
size_t	long
count	long
=	O
DEFAULT_PING_COUNT	int
;	O
size_t	long
interval	long
;	O
int	O
socket_type	int
;	O
int	O
timeout	int
=	O
-	O
1	int
;	O
static	O
unsigned	O
int	O
options	*(struct(*(char),int,*(char),int,*(char),int))
;	O
static	O
unsigned	O
long	O
preload	long
=	O
0	int
;	O
static	O
int	O
ping_echo	(*(char))->(int)
(	O
char	O
*	O
hostname	*(char)
)	O
;	O
static	O
void	O
ping_reset	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)))->(void)
(	O
PING	struct
*	O
p	*(void)
)	O
;	O
static	O
int	O
send_echo	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)))->(int)
(	O
PING	struct
*	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
)	O
;	O
const	O
char	O
args_doc	*(char)
[	O
]	O
=	O
"HOST ..."	*(char)
;	O
const	O
char	O
doc	*(char)
[	O
]	O
=	O
"Send ICMP ECHO_REQUEST packets to network hosts."	*(char)
"\vOptions marked with (root only) are available only to "	*(char)
"superuser."	*(char)
;	O
const	O
char	O
*	O
program_authors	array(*(char))
[	O
]	O
=	O
{	O
"Jeroen Dekkers"	*(char)
,	O
NULL	O
}	O
;	O
static	O
struct	O
argp_option	struct(*(char),int,*(char),int,*(char),int)
argp_options	array(struct(*(char),int,*(char),int,*(char),int))
[	O
]	O
=	O
{	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
"Options valid for all request types:"	*(char)
,	O
GRP	int
}	O
,	O
{	O
"count"	*(char)
,	O
'c'	O
,	O
"NUMBER"	*(char)
,	O
0	int
,	O
"stop after sending NUMBER packets"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"debug"	*(char)
,	O
'd'	O
,	O
NULL	O
,	O
0	int
,	O
"set the SO_DEBUG option"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"interval"	*(char)
,	O
'i'	O
,	O
"NUMBER"	*(char)
,	O
0	int
,	O
"wait NUMBER seconds between sending each "	*(char)
"packet"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"numeric"	*(char)
,	O
'n'	O
,	O
NULL	O
,	O
0	int
,	O
"do not resolve host addresses"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"ignore-routing"	*(char)
,	O
'r'	O
,	O
NULL	O
,	O
0	int
,	O
"send directly to a host on an attached "	*(char)
"network"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"timeout"	*(char)
,	O
'w'	O
,	O
"N"	*(char)
,	O
0	int
,	O
"stop after N seconds"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
"Options valid for --echo requests:"	*(char)
,	O
GRP	int
}	O
,	O
{	O
"flood"	*(char)
,	O
'f'	O
,	O
NULL	O
,	O
0	int
,	O
"flood ping (root only)"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"preload"	*(char)
,	O
'l'	O
,	O
"NUMBER"	*(char)
,	O
0	int
,	O
"send NUMBER packets as fast as possible "	*(char)
"before falling into normal mode of behavior (root only)"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"pattern"	*(char)
,	O
'p'	O
,	O
"PATTERN"	*(char)
,	O
0	int
,	O
"fill ICMP packet with given pattern (hex)"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"quiet"	*(char)
,	O
'q'	O
,	O
NULL	O
,	O
0	int
,	O
"quiet output"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"size"	*(char)
,	O
's'	O
,	O
"NUMBER"	*(char)
,	O
0	int
,	O
"send NUMBER data octets"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
error_t	int
parse_opt	(int,*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))))->(int)
(	O
int	O
key	int
,	O
char	O
*	O
arg	*(char)
,	O
struct	O
argp_state	struct(*(struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct`))->(int)),*(char),*(char),*(struct(*(struct`),int,*(char),int)),*((int,*(char),*(void))->(*(char))),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(void))
*	O
state	*(int)
)	O
{	O
char	O
*	O
endptr	*(*(char))
;	O
static	O
unsigned	O
char	O
pattern	array(char)
[	O
16	int
]	O
;	O
switch	O
(	O
key	int
)	O
{	O
case	O
'c'	O
:	O
count	long
=	O
ping_cvt_number	(*(char),long,int)->(long)
(	O
arg	*(char)
,	O
0	int
,	O
0	int
)	O
;	O
break	O
;	O
case	O
'd'	O
:	O
socket_type	int
|=	O
SO_DEBUG	int
;	O
break	O
;	O
case	O
'f'	O
:	O
if	O
(	O
!	O
is_root	bool
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"flooding needs root privilege"	*(char)
)	O
;	O
options	*(struct(*(char),int,*(char),int,*(char),int))
|=	O
OPT_FLOOD	int
;	O
setbuf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(void)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
break	O
;	O
case	O
'i'	O
:	O
options	*(struct(*(char),int,*(char),int,*(char),int))
|=	O
OPT_INTERVAL	int
;	O
interval	long
=	O
ping_cvt_number	(*(char),long,int)->(long)
(	O
arg	*(char)
,	O
0	int
,	O
0	int
)	O
;	O
break	O
;	O
case	O
'l'	O
:	O
if	O
(	O
!	O
is_root	bool
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"preloading needs root privilege"	*(char)
)	O
;	O
preload	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
arg	*(char)
,	O
&	O
endptr	*(*(char))
,	O
0	int
)	O
;	O
if	O
(	O
*	O
endptr	*(*(char))
||	O
preload	long
>	O
INT_MAX	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"preload size too large"	*(char)
)	O
;	O
break	O
;	O
case	O
'n'	O
:	O
options	*(struct(*(char),int,*(char),int,*(char),int))
|=	O
OPT_NUMERIC	int
;	O
break	O
;	O
case	O
'p'	O
:	O
decode_pattern	(*(char),*(int),*(char))->(void)
(	O
arg	*(char)
,	O
&	O
pattern_len	*(int)
,	O
pattern	array(char)
)	O
;	O
patptr	*(char)
=	O
pattern	array(char)
;	O
break	O
;	O
case	O
'q'	O
:	O
options	*(struct(*(char),int,*(char),int,*(char),int))
|=	O
OPT_QUIET	int
;	O
break	O
;	O
case	O
'r'	O
:	O
socket_type	int
|=	O
SO_DONTROUTE	int
;	O
break	O
;	O
case	O
'w'	O
:	O
timeout	int
=	O
ping_cvt_number	(*(char),long,int)->(long)
(	O
arg	*(char)
,	O
INT_MAX	O
,	O
0	int
)	O
;	O
break	O
;	O
case	O
's'	O
:	O
data_length	long
=	O
ping_cvt_number	(*(char),long,int)->(long)
(	O
arg	*(char)
,	O
PING_MAX_DATALEN	O
,	O
1	int
)	O
;	O
break	O
;	O
case	O
ARGP_KEY_NO_ARGS	int
:	O
argp_error	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))),*(char))->(void)
(	O
state	*(int)
,	O
"missing host operand"	*(char)
)	O
;	O
default	O
:	O
return	O
ARGP_ERR_UNKNOWN	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
struct	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
=	O
{	O
argp_options	array(struct(*(char),int,*(char),int,*(char),int))
,	O
parse_opt	(int,*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))))->(int)
,	O
args_doc	*(char)
,	O
doc	*(char)
}	O
;	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
index	(*(char),int)->(*(char))
;	O
int	O
status	int
=	O
0	int
;	O
set_program_name	(*(char))->(void)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
if	O
(	O
getuid	()->(int)
(	O
)	O
==	O
0	int
)	O
is_root	bool
=	O
true	int
;	O
iu_argp_init	O
(	O
"ping6"	*(char)
,	O
program_authors	array(*(char))
)	O
;	O
argp_parse	(*(struct(*(struct(*`,int,*`,int,*`,int)),*((int,*`,*`)->(int)),*(char),*(char),*(struct(*`,int,*`,int)),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,*(int),*(void))->(int)
(	O
&	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
,	O
argc	int
,	O
argv	*(*(char))
,	O
0	int
,	O
&	O
index	(*(char),int)->(*(char))
,	O
NULL	O
)	O
;	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
=	O
ping_init	(int,int)->(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)))
(	O
0	int
,	O
getpid	()->(int)
(	O
)	O
)	O
;	O
if	O
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
==	O
NULL	O
)	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
setsockopt	(int,int,int,*(void),int)->(int)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_fd	int
,	O
SOL_SOCKET	int
,	O
SO_BROADCAST	int
,	O
(	O
char	O
*	O
)	O
&	O
one	int
,	O
sizeof	O
(	O
one	int
)	O
)	O
;	O
setuid	(int)->(int)
(	O
getuid	()->(int)
(	O
)	O
)	O
;	O
argc	int
-=	O
index	(*(char),int)->(*(char))
;	O
argv	*(*(char))
+=	O
index	(*(char),int)->(*(char))
;	O
if	O
(	O
count	long
!=	O
0	int
)	O
ping_set_count	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)),long)->(void)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
,	O
count	long
)	O
;	O
if	O
(	O
socket_type	int
!=	O
0	int
)	O
ping_set_sockopt	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)),int,*(void),int)->(void)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
,	O
socket_type	int
,	O
&	O
one	int
,	O
sizeof	O
(	O
one	int
)	O
)	O
;	O
if	O
(	O
options	*(struct(*(char),int,*(char),int,*(char),int))
&	O
OPT_INTERVAL	int
)	O
ping_set_interval	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)),long)->(void)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
,	O
interval	long
)	O
;	O
init_data_buffer	(*(char),int)->(void)
(	O
patptr	*(char)
,	O
pattern_len	*(int)
)	O
;	O
while	O
(	O
argc	int
--	O
)	O
{	O
status	int
|=	O
ping_echo	(*(char))->(int)
(	O
*	O
argv	*(*(char))
++	O
)	O
;	O
ping_reset	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)))->(void)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
)	O
;	O
}	O
return	O
status	int
;	O
}	O
static	O
char	O
*	O
ipaddr2str	(*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int)))->(*(char))
(	O
struct	O
sockaddr_in6	struct(short,short,int,struct(union(array(char),array(short),array(int))),int)
*	O
from	*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
)	O
{	O
int	O
err	long
;	O
size_t	long
len	char
;	O
char	O
*	O
buf	*(char)
,	O
ipstr	array(char)
[	O
256	int
]	O
,	O
hoststr	array(char)
[	O
256	int
]	O
;	O
err	long
=	O
getnameinfo	(*(struct(short,array(char))),int,*(char),int,*(char),int,int)->(int)
(	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
from	*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
,	O
sizeof	O
(	O
*	O
from	*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
)	O
,	O
ipstr	array(char)
,	O
sizeof	O
(	O
ipstr	array(char)
)	O
,	O
NULL	O
,	O
0	int
,	O
NI_NUMERICHOST	int
)	O
;	O
if	O
(	O
err	long
)	O
{	O
const	O
char	O
*	O
errmsg	*(char)
;	O
if	O
(	O
err	long
==	O
EAI_SYSTEM	O
)	O
errmsg	*(char)
=	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
;	O
else	O
errmsg	*(char)
=	O
gai_strerror	(int)->(*(char))
(	O
err	long
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"ping: getnameinfo: %s\n"	*(char)
,	O
errmsg	*(char)
)	O
;	O
return	O
xstrdup	(*(char))->(*(char))
(	O
"unknown"	*(char)
)	O
;	O
}	O
if	O
(	O
options	*(struct(*(char),int,*(char),int,*(char),int))
&	O
OPT_NUMERIC	int
)	O
return	O
xstrdup	(*(char))->(*(char))
(	O
ipstr	array(char)
)	O
;	O
err	long
=	O
getnameinfo	(*(struct(short,array(char))),int,*(char),int,*(char),int,int)->(int)
(	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
from	*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
,	O
sizeof	O
(	O
*	O
from	*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
)	O
,	O
hoststr	array(char)
,	O
sizeof	O
(	O
hoststr	array(char)
)	O
,	O
NULL	O
,	O
0	int
,	O
NI_NAMEREQD	int
)	O
;	O
if	O
(	O
err	long
)	O
return	O
xstrdup	(*(char))->(*(char))
(	O
ipstr	array(char)
)	O
;	O
len	char
=	O
strlen	(*(char))->(long)
(	O
ipstr	array(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
hoststr	array(char)
)	O
+	O
4	int
;	O
buf	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
len	char
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
buf	*(char)
,	O
"%s (%s)"	*(char)
,	O
hoststr	array(char)
,	O
ipstr	array(char)
)	O
;	O
return	O
buf	*(char)
;	O
}	O
static	O
volatile	O
int	O
stop	int
=	O
0	int
;	O
static	O
void	O
sig_int	(int)->(void)
(	O
int	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
)	O
{	O
stop	int
=	O
1	int
;	O
}	O
static	O
int	O
ping_run	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)),*(()->(int)))->(int)
(	O
PING	struct
*	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
,	O
int	O
(	O
*	O
finish	*(()->(int))
)	O
(	O
)	O
)	O
{	O
fd_set	struct(array(long))
fdset	struct(array(long))
;	O
int	O
fdmax	int
;	O
struct	O
timeval	struct(long,long)
resp_time	struct(long,long)
;	O
struct	O
timeval	struct(long,long)
last	struct(long,long)
,	O
intvl	struct(long,long)
,	O
now	struct(long,long)
;	O
struct	O
timeval	struct(long,long)
*	O
t	*(struct(long,long))
=	O
NULL	O
;	O
int	O
finishing	int
=	O
0	int
;	O
int	O
nresp	int
=	O
0	int
;	O
int	O
i	int
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGINT	int
,	O
sig_int	(int)->(void)
)	O
;	O
fdmax	int
=	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_fd	int
+	O
1	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
preload	long
;	O
i	int
++	O
)	O
send_echo	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)))->(int)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
)	O
;	O
if	O
(	O
options	*(struct(*(char),int,*(char),int,*(char),int))
&	O
OPT_FLOOD	int
)	O
{	O
intvl	struct(long,long)
.	O
tv_sec	long
=	O
0	int
;	O
intvl	struct(long,long)
.	O
tv_usec	long
=	O
10000	int
;	O
}	O
else	O
PING_SET_INTERVAL	O
(	O
intvl	struct(long,long)
,	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_interval	long
)	O
;	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
&	O
last	struct(long,long)
,	O
NULL	O
)	O
;	O
send_echo	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)))->(int)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
)	O
;	O
while	O
(	O
!	O
stop	int
)	O
{	O
int	O
n	long
;	O
FD_ZERO	O
(	O
&	O
fdset	struct(array(long))
)	O
;	O
FD_SET	O
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_fd	int
,	O
&	O
fdset	struct(array(long))
)	O
;	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
&	O
now	struct(long,long)
,	O
NULL	O
)	O
;	O
resp_time	struct(long,long)
.	O
tv_sec	long
=	O
last	struct(long,long)
.	O
tv_sec	long
+	O
intvl	struct(long,long)
.	O
tv_sec	long
-	O
now	struct(long,long)
.	O
tv_sec	long
;	O
resp_time	struct(long,long)
.	O
tv_usec	long
=	O
last	struct(long,long)
.	O
tv_usec	long
+	O
intvl	struct(long,long)
.	O
tv_usec	long
-	O
now	struct(long,long)
.	O
tv_usec	long
;	O
while	O
(	O
resp_time	struct(long,long)
.	O
tv_usec	long
<	O
0	int
)	O
{	O
resp_time	struct(long,long)
.	O
tv_usec	long
+=	O
1000000	int
;	O
resp_time	struct(long,long)
.	O
tv_sec	long
--	O
;	O
}	O
while	O
(	O
resp_time	struct(long,long)
.	O
tv_usec	long
>=	O
1000000	int
)	O
{	O
resp_time	struct(long,long)
.	O
tv_usec	long
-=	O
1000000	int
;	O
resp_time	struct(long,long)
.	O
tv_sec	long
++	O
;	O
}	O
if	O
(	O
resp_time	struct(long,long)
.	O
tv_sec	long
<	O
0	int
)	O
resp_time	struct(long,long)
.	O
tv_sec	long
=	O
resp_time	struct(long,long)
.	O
tv_usec	long
=	O
0	int
;	O
n	long
=	O
select	(int,*(struct(array(long))),*(struct(array(long))),*(struct(array(long))),*(struct(long,long)))->(int)
(	O
fdmax	int
,	O
&	O
fdset	struct(array(long))
,	O
NULL	O
,	O
NULL	O
,	O
&	O
resp_time	struct(long,long)
)	O
;	O
if	O
(	O
n	long
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
!=	O
EINTR	int
)	O
perror	(*(char))->(void)
(	O
"select"	*(char)
)	O
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
n	long
==	O
1	int
)	O
{	O
if	O
(	O
ping_recv	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)))->(int)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
)	O
==	O
0	int
)	O
nresp	int
++	O
;	O
if	O
(	O
t	*(struct(long,long))
==	O
0	int
)	O
{	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
&	O
now	struct(long,long)
,	O
NULL	O
)	O
;	O
t	*(struct(long,long))
=	O
&	O
now	struct(long,long)
;	O
}	O
if	O
(	O
ping_timeout_p	(*(struct(long,long)),int)->(int)
(	O
&	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_start_time	struct(long,long)
,	O
timeout	int
)	O
)	O
break	O
;	O
if	O
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_count	long
&&	O
nresp	int
>=	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_count	long
)	O
break	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_count	long
||	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_num_xmit	long
<	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_count	long
)	O
{	O
send_echo	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)))->(int)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
)	O
;	O
if	O
(	O
!	O
(	O
options	*(struct(*(char),int,*(char),int,*(char),int))
&	O
OPT_QUIET	int
)	O
&&	O
options	*(struct(*(char),int,*(char),int,*(char),int))
&	O
OPT_FLOOD	int
)	O
{	O
putchar	(int)->(int)
(	O
'.'	O
)	O
;	O
}	O
if	O
(	O
ping_timeout_p	(*(struct(long,long)),int)->(int)
(	O
&	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_start_time	struct(long,long)
,	O
timeout	int
)	O
)	O
break	O
;	O
}	O
else	O
if	O
(	O
finishing	int
)	O
break	O
;	O
else	O
{	O
finishing	int
=	O
1	int
;	O
intvl	struct(long,long)
.	O
tv_sec	long
=	O
MAXWAIT	int
;	O
}	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
&	O
last	struct(long,long)
,	O
NULL	O
)	O
;	O
}	O
}	O
ping_unset_data	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)))->(void)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
)	O
;	O
if	O
(	O
finish	*(()->(int))
)	O
return	O
(	O
*	O
finish	*(()->(int))
)	O
(	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
send_echo	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)))->(int)
(	O
PING	struct
*	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
)	O
{	O
int	O
off	long
=	O
0	int
;	O
if	O
(	O
PING_TIMING	O
(	O
data_length	long
)	O
)	O
{	O
struct	O
timeval	struct(long,long)
tv	struct(long,long)
;	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
&	O
tv	struct(long,long)
,	O
NULL	O
)	O
;	O
ping_set_data	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)),*(void),long,long,bool)->(int)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
,	O
&	O
tv	struct(long,long)
,	O
0	int
,	O
sizeof	O
(	O
tv	struct(long,long)
)	O
,	O
USE_IPV6	bool
)	O
;	O
off	long
+=	O
sizeof	O
(	O
tv	struct(long,long)
)	O
;	O
}	O
if	O
(	O
data_buffer	*(char)
)	O
ping_set_data	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)),*(void),long,long,bool)->(int)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
,	O
data_buffer	*(char)
,	O
off	long
,	O
data_length	long
>	O
PING_HEADER_LEN	O
?	O
data_length	long
-	O
PING_HEADER_LEN	O
:	O
data_length	long
,	O
USE_IPV6	bool
)	O
;	O
return	O
ping_xmit	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)))->(int)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
)	O
;	O
}	O
static	O
int	O
ping_finish	()->(int)
(	O
void	O
)	O
{	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
printf	(*(char))->(int)
(	O
"--- %s ping statistics ---\n"	*(char)
,	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_hostname	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"%ld packets transmitted, "	*(char)
,	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_num_xmit	long
)	O
;	O
printf	(*(char))->(int)
(	O
"%ld packets received, "	*(char)
,	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_num_recv	long
)	O
;	O
if	O
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_num_rept	long
)	O
printf	(*(char))->(int)
(	O
"+%ld duplicates, "	*(char)
,	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_num_rept	long
)	O
;	O
if	O
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_num_xmit	long
)	O
{	O
if	O
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_num_recv	long
>	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_num_xmit	long
)	O
printf	(*(char))->(int)
(	O
"-- somebody's printing up packets!"	*(char)
)	O
;	O
else	O
printf	(*(char))->(int)
(	O
"%d%% packet loss"	*(char)
,	O
(	O
int	O
)	O
(	O
(	O
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_num_xmit	long
-	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_num_recv	long
)	O
*	O
100	int
)	O
/	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_num_xmit	long
)	O
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
print_echo	(int,int,*(struct(double,double,double,double)),*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int)),*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int)),*(struct(char,char,short,union(array(int),array(short),array(char)))),int)->(int)
(	O
int	O
dup	(int)->(int)
,	O
int	O
hops	int
,	O
struct	O
ping_stat	struct(double,double,double,double)
*	O
stat	*(struct(double,double,double,double))
,	O
struct	O
sockaddr_in6	struct(short,short,int,struct(union(array(char),array(short),array(int))),int)
*	O
dest	*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
,	O
struct	O
sockaddr_in6	struct(short,short,int,struct(union(array(char),array(short),array(int))),int)
*	O
from	*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
,	O
struct	O
icmp6_hdr	struct(char,char,short,union(array(int),array(short),array(char)))
*	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
,	O
int	O
datalen	int
)	O
;	O
static	O
void	O
print_icmp_error	(*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int)),*(struct(char,char,short,union(array(int),array(short),array(char)))),int)->(void)
(	O
struct	O
sockaddr_in6	struct(short,short,int,struct(union(array(char),array(short),array(int))),int)
*	O
from	*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
,	O
struct	O
icmp6_hdr	struct(char,char,short,union(array(int),array(short),array(char)))
*	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
,	O
int	O
len	char
)	O
;	O
static	O
int	O
echo_finish	()->(int)
(	O
void	O
)	O
;	O
static	O
int	O
ping_echo	(*(char))->(int)
(	O
char	O
*	O
hostname	*(char)
)	O
{	O
int	O
err	long
;	O
char	O
buffer	*(char)
[	O
256	int
]	O
;	O
struct	O
ping_stat	struct(double,double,double,double)
ping_stat	struct(double,double,double,double)
;	O
int	O
status	int
;	O
if	O
(	O
options	*(struct(*(char),int,*(char),int,*(char),int))
&	O
OPT_FLOOD	int
&&	O
options	*(struct(*(char),int,*(char),int,*(char),int))
&	O
OPT_INTERVAL	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"-f and -i incompatible options"	*(char)
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
ping_stat	struct(double,double,double,double)
,	O
0	int
,	O
sizeof	O
(	O
ping_stat	struct(double,double,double,double)
)	O
)	O
;	O
ping_stat	struct(double,double,double,double)
.	O
tmin	double
=	O
999999999.0	int
;	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_datalen	long
=	O
data_length	long
;	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_closure	*(void)
=	O
&	O
ping_stat	struct(double,double,double,double)
;	O
if	O
(	O
ping_set_dest	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)),*(char))->(int)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
,	O
hostname	*(char)
)	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"unknown host %s"	*(char)
,	O
hostname	*(char)
)	O
;	O
err	long
=	O
getnameinfo	(*(struct(short,array(char))),int,*(char),int,*(char),int,int)->(int)
(	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_dest	union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
.	O
ping_sockaddr6	struct(short,short,int,struct(union(array(char),array(short),array(int))),int)
,	O
sizeof	O
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_dest	union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
.	O
ping_sockaddr6	struct(short,short,int,struct(union(array(char),array(short),array(int))),int)
)	O
,	O
buffer	*(char)
,	O
sizeof	O
(	O
buffer	*(char)
)	O
,	O
NULL	O
,	O
0	int
,	O
NI_NUMERICHOST	int
)	O
;	O
if	O
(	O
err	long
)	O
{	O
const	O
char	O
*	O
errmsg	*(char)
;	O
if	O
(	O
err	long
==	O
EAI_SYSTEM	O
)	O
errmsg	*(char)
=	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
;	O
else	O
errmsg	*(char)
=	O
gai_strerror	(int)->(*(char))
(	O
err	long
)	O
;	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"getnameinfo: %s"	*(char)
,	O
errmsg	*(char)
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"PING %s (%s): %d data bytes\n"	*(char)
,	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_hostname	*(char)
,	O
buffer	*(char)
,	O
data_length	long
)	O
;	O
status	int
=	O
ping_run	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)),*(()->(int)))->(int)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
,	O
echo_finish	()->(int)
)	O
;	O
free	(*(void))->(void)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_hostname	*(char)
)	O
;	O
return	O
status	int
;	O
}	O
static	O
void	O
ping_reset	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)))->(void)
(	O
PING	struct
*	O
p	*(void)
)	O
{	O
p	*(void)
->	O
ping_num_xmit	long
=	O
0	int
;	O
p	*(void)
->	O
ping_num_recv	long
=	O
0	int
;	O
p	*(void)
->	O
ping_num_rept	long
=	O
0	int
;	O
}	O
static	O
int	O
print_echo	(int,int,*(struct(double,double,double,double)),*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int)),*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int)),*(struct(char,char,short,union(array(int),array(short),array(char)))),int)->(int)
(	O
int	O
dupflag	int
,	O
int	O
hops	int
,	O
struct	O
ping_stat	struct(double,double,double,double)
*	O
ping_stat	struct(double,double,double,double)
,	O
struct	O
sockaddr_in6	struct(short,short,int,struct(union(array(char),array(short),array(int))),int)
*	O
dest	*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
,	O
struct	O
sockaddr_in6	struct(short,short,int,struct(union(array(char),array(short),array(int))),int)
*	O
from	*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
,	O
struct	O
icmp6_hdr	struct(char,char,short,union(array(int),array(short),array(char)))
*	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
,	O
int	O
datalen	int
)	O
{	O
int	O
err	long
;	O
char	O
buf	*(char)
[	O
256	int
]	O
;	O
struct	O
timeval	struct(long,long)
tv	struct(long,long)
;	O
int	O
timing	int
=	O
0	int
;	O
double	O
triptime	double
=	O
0.0	int
;	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
&	O
tv	struct(long,long)
,	O
NULL	O
)	O
;	O
if	O
(	O
PING_TIMING	O
(	O
datalen	int
-	O
sizeof	O
(	O
struct	O
icmp6_hdr	struct(char,char,short,union(array(int),array(short),array(char)))
)	O
)	O
)	O
{	O
struct	O
timeval	struct(long,long)
tv1	struct(long,long)
,	O
*	O
tp	*(struct(long,long))
;	O
timing	int
++	O
;	O
tp	*(struct(long,long))
=	O
(	O
struct	O
timeval	struct(long,long)
*	O
)	O
(	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
+	O
1	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
&	O
tv1	struct(long,long)
,	O
tp	*(struct(long,long))
,	O
sizeof	O
(	O
tv1	struct(long,long)
)	O
)	O
;	O
tvsub	(*(struct(long,long)),*(struct(long,long)))->(void)
(	O
&	O
tv	struct(long,long)
,	O
&	O
tv1	struct(long,long)
)	O
;	O
triptime	double
=	O
(	O
(	O
double	O
)	O
tv	struct(long,long)
.	O
tv_sec	long
)	O
*	O
1000.0	int
+	O
(	O
(	O
double	O
)	O
tv	struct(long,long)
.	O
tv_usec	long
)	O
/	O
1000.0	int
;	O
ping_stat	struct(double,double,double,double)
->	O
tsum	double
+=	O
triptime	double
;	O
ping_stat	struct(double,double,double,double)
->	O
tsumsq	double
+=	O
triptime	double
*	O
triptime	double
;	O
if	O
(	O
triptime	double
<	O
ping_stat	struct(double,double,double,double)
->	O
tmin	double
)	O
ping_stat	struct(double,double,double,double)
->	O
tmin	double
=	O
triptime	double
;	O
if	O
(	O
triptime	double
>	O
ping_stat	struct(double,double,double,double)
->	O
tmax	double
)	O
ping_stat	struct(double,double,double,double)
->	O
tmax	double
=	O
triptime	double
;	O
}	O
if	O
(	O
options	*(struct(*(char),int,*(char),int,*(char),int))
&	O
OPT_QUIET	int
)	O
return	O
0	int
;	O
if	O
(	O
options	*(struct(*(char),int,*(char),int,*(char),int))
&	O
OPT_FLOOD	int
)	O
{	O
putchar	(int)->(int)
(	O
'\b'	O
)	O
;	O
return	O
0	int
;	O
}	O
err	long
=	O
getnameinfo	(*(struct(short,array(char))),int,*(char),int,*(char),int,int)->(int)
(	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
from	*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
,	O
sizeof	O
(	O
*	O
from	*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
)	O
,	O
buf	*(char)
,	O
sizeof	O
(	O
buf	*(char)
)	O
,	O
NULL	O
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
err	long
)	O
{	O
const	O
char	O
*	O
errmsg	*(char)
;	O
if	O
(	O
err	long
==	O
EAI_SYSTEM	O
)	O
errmsg	*(char)
=	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
;	O
else	O
errmsg	*(char)
=	O
gai_strerror	(int)->(*(char))
(	O
err	long
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"ping: getnameinfo: %s\n"	*(char)
,	O
errmsg	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
buf	*(char)
,	O
"unknown"	*(char)
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"%d bytes from %s: icmp_seq=%u"	*(char)
,	O
datalen	int
,	O
buf	*(char)
,	O
htons	(short)->(short)
(	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
->	O
icmp6_seq	O
)	O
)	O
;	O
if	O
(	O
hops	int
>=	O
0	int
)	O
printf	(*(char))->(int)
(	O
" ttl=%d"	*(char)
,	O
hops	int
)	O
;	O
if	O
(	O
timing	int
)	O
printf	(*(char))->(int)
(	O
" time=%.3f ms"	*(char)
,	O
triptime	double
)	O
;	O
if	O
(	O
dupflag	int
)	O
printf	(*(char))->(int)
(	O
" (DUP!)"	*(char)
)	O
;	O
putchar	(int)->(int)
(	O
'\n'	O
)	O
;	O
return	O
0	int
;	O
}	O
struct	O
icmp_code_descr	struct(int,*(char))
{	O
int	O
code	int
;	O
char	O
*	O
diag	*(char)
;	O
}	O
;	O
static	O
struct	O
icmp_code_descr	struct(int,*(char))
icmp_dest_unreach_desc	array(struct(int,*(char)))
[	O
]	O
=	O
{	O
{	O
ICMP6_DST_UNREACH_NOROUTE	int
,	O
"No route to destination"	*(char)
}	O
,	O
{	O
ICMP6_DST_UNREACH_ADMIN	int
,	O
"Destination administratively prohibited"	*(char)
}	O
,	O
{	O
ICMP6_DST_UNREACH_BEYONDSCOPE	int
,	O
"Beyond scope of source address"	*(char)
}	O
,	O
{	O
ICMP6_DST_UNREACH_ADDR	int
,	O
"Address unreachable"	*(char)
}	O
,	O
{	O
ICMP6_DST_UNREACH_NOPORT	int
,	O
"Port unreachable"	*(char)
}	O
,	O
}	O
;	O
static	O
void	O
print_dst_unreach	(*(struct(char,char,short,union(array(int),array(short),array(char)))))->(void)
(	O
struct	O
icmp6_hdr	struct(char,char,short,union(array(int),array(short),array(char)))
*	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
)	O
{	O
struct	O
icmp_code_descr	struct(int,*(char))
*	O
p	*(void)
;	O
printf	(*(char))->(int)
(	O
"Destination unreachable: "	*(char)
)	O
;	O
for	O
(	O
p	*(void)
=	O
icmp_dest_unreach_desc	array(struct(int,*(char)))
;	O
p	*(void)
<	O
icmp_dest_unreach_desc	array(struct(int,*(char)))
+	O
NITEMS	O
(	O
icmp_dest_unreach_desc	array(struct(int,*(char)))
)	O
;	O
p	*(void)
++	O
)	O
{	O
if	O
(	O
p	*(void)
->	O
code	int
==	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
->	O
icmp6_code	char
)	O
{	O
puts	(*(char))->(int)
(	O
p	*(void)
->	O
diag	*(char)
)	O
;	O
return	O
;	O
}	O
}	O
printf	(*(char))->(int)
(	O
"Unknown code %d\n"	*(char)
,	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
->	O
icmp6_code	char
)	O
;	O
}	O
static	O
void	O
print_packet_too_big	(*(struct(char,char,short,union(array(int),array(short),array(char)))))->(void)
(	O
struct	O
icmp6_hdr	struct(char,char,short,union(array(int),array(short),array(char)))
*	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
)	O
{	O
printf	(*(char))->(int)
(	O
"Packet too big, mtu=%d\n"	*(char)
,	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
->	O
icmp6_mtu	O
)	O
;	O
}	O
static	O
struct	O
icmp_code_descr	struct(int,*(char))
icmp_time_exceeded_desc	array(struct(int,*(char)))
[	O
]	O
=	O
{	O
{	O
ICMP6_TIME_EXCEED_TRANSIT	int
,	O
"Hop limit exceeded"	*(char)
}	O
,	O
{	O
ICMP6_TIME_EXCEED_REASSEMBLY	int
,	O
"Fragment reassembly timeout"	*(char)
}	O
,	O
}	O
;	O
static	O
void	O
print_time_exceeded	(*(struct(char,char,short,union(array(int),array(short),array(char)))))->(void)
(	O
struct	O
icmp6_hdr	struct(char,char,short,union(array(int),array(short),array(char)))
*	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
)	O
{	O
struct	O
icmp_code_descr	struct(int,*(char))
*	O
p	*(void)
;	O
printf	(*(char))->(int)
(	O
"Time exceeded: "	*(char)
)	O
;	O
for	O
(	O
p	*(void)
=	O
icmp_time_exceeded_desc	array(struct(int,*(char)))
;	O
p	*(void)
<	O
icmp_time_exceeded_desc	array(struct(int,*(char)))
+	O
NITEMS	O
(	O
icmp_time_exceeded_desc	array(struct(int,*(char)))
)	O
;	O
p	*(void)
++	O
)	O
{	O
if	O
(	O
p	*(void)
->	O
code	int
==	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
->	O
icmp6_code	char
)	O
{	O
puts	(*(char))->(int)
(	O
p	*(void)
->	O
diag	*(char)
)	O
;	O
return	O
;	O
}	O
}	O
printf	(*(char))->(int)
(	O
"Unknown code %d\n"	*(char)
,	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
->	O
icmp6_code	char
)	O
;	O
}	O
static	O
struct	O
icmp_code_descr	struct(int,*(char))
icmp_param_prob_desc	array(struct(int,*(char)))
[	O
]	O
=	O
{	O
{	O
ICMP6_PARAMPROB_HEADER	int
,	O
"Erroneous header field"	*(char)
}	O
,	O
{	O
ICMP6_PARAMPROB_NEXTHEADER	int
,	O
"Unrecognized Next Header type"	*(char)
}	O
,	O
{	O
ICMP6_PARAMPROB_OPTION	int
,	O
"Unrecognized IPv6 option"	*(char)
}	O
,	O
}	O
;	O
static	O
void	O
print_param_prob	(*(struct(char,char,short,union(array(int),array(short),array(char)))))->(void)
(	O
struct	O
icmp6_hdr	struct(char,char,short,union(array(int),array(short),array(char)))
*	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
)	O
{	O
struct	O
icmp_code_descr	struct(int,*(char))
*	O
p	*(void)
;	O
printf	(*(char))->(int)
(	O
"Parameter problem: "	*(char)
)	O
;	O
for	O
(	O
p	*(void)
=	O
icmp_param_prob_desc	array(struct(int,*(char)))
;	O
p	*(void)
<	O
icmp_param_prob_desc	array(struct(int,*(char)))
+	O
NITEMS	O
(	O
icmp_param_prob_desc	array(struct(int,*(char)))
)	O
;	O
p	*(void)
++	O
)	O
{	O
if	O
(	O
p	*(void)
->	O
code	int
==	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
->	O
icmp6_code	char
)	O
{	O
puts	(*(char))->(int)
(	O
p	*(void)
->	O
diag	*(char)
)	O
;	O
return	O
;	O
}	O
}	O
printf	(*(char))->(int)
(	O
"Unknown code %d\n"	*(char)
,	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
->	O
icmp6_code	char
)	O
;	O
}	O
static	O
struct	O
icmp_diag	struct(int,*((*(struct(char,char,short,union(array(int),array(short),array(char)))))->(void)))
{	O
int	O
type	int
;	O
void	O
(	O
*	O
func	*((*(struct(char,char,short,union(array(int),array(short),array(char)))))->(void))
)	O
(	O
struct	O
icmp6_hdr	struct(char,char,short,union(array(int),array(short),array(char)))
*	O
)	O
;	O
}	O
icmp_diag	struct(int,*((*(struct(char,char,short,union(array(int),array(short),array(char)))))->(void)))
[	O
]	O
=	O
{	O
{	O
ICMP6_DST_UNREACH	int
,	O
print_dst_unreach	(*(struct(char,char,short,union(array(int),array(short),array(char)))))->(void)
}	O
,	O
{	O
ICMP6_PACKET_TOO_BIG	int
,	O
print_packet_too_big	(*(struct(char,char,short,union(array(int),array(short),array(char)))))->(void)
}	O
,	O
{	O
ICMP6_TIME_EXCEEDED	int
,	O
print_time_exceeded	(*(struct(char,char,short,union(array(int),array(short),array(char)))))->(void)
}	O
,	O
{	O
ICMP6_PARAM_PROB	int
,	O
print_param_prob	(*(struct(char,char,short,union(array(int),array(short),array(char)))))->(void)
}	O
,	O
}	O
;	O
static	O
void	O
print_icmp_error	(*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int)),*(struct(char,char,short,union(array(int),array(short),array(char)))),int)->(void)
(	O
struct	O
sockaddr_in6	struct(short,short,int,struct(union(array(char),array(short),array(int))),int)
*	O
from	*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
,	O
struct	O
icmp6_hdr	struct(char,char,short,union(array(int),array(short),array(char)))
*	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
,	O
int	O
len	char
)	O
{	O
char	O
*	O
s	long
;	O
struct	O
icmp_diag	struct(int,*((*(struct(char,char,short,union(array(int),array(short),array(char)))))->(void)))
*	O
p	*(void)
;	O
s	long
=	O
ipaddr2str	(*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int)))->(*(char))
(	O
from	*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
)	O
;	O
printf	(*(char))->(int)
(	O
"%d bytes from %s: "	*(char)
,	O
len	char
,	O
s	long
)	O
;	O
free	(*(void))->(void)
(	O
s	long
)	O
;	O
for	O
(	O
p	*(void)
=	O
icmp_diag	struct(int,*((*(struct(char,char,short,union(array(int),array(short),array(char)))))->(void)))
;	O
p	*(void)
<	O
icmp_diag	struct(int,*((*(struct(char,char,short,union(array(int),array(short),array(char)))))->(void)))
+	O
NITEMS	O
(	O
icmp_diag	struct(int,*((*(struct(char,char,short,union(array(int),array(short),array(char)))))->(void)))
)	O
;	O
p	*(void)
++	O
)	O
{	O
if	O
(	O
p	*(void)
->	O
type	int
==	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
->	O
icmp6_type	char
)	O
{	O
p	*(void)
->	O
func	*((*(struct(char,char,short,union(array(int),array(short),array(char)))))->(void))
(	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
)	O
;	O
return	O
;	O
}	O
}	O
printf	(*(char))->(int)
(	O
"Unknown ICMP type: %d\n"	*(char)
,	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
->	O
icmp6_type	char
)	O
;	O
}	O
static	O
int	O
echo_finish	()->(int)
(	O
void	O
)	O
{	O
ping_finish	()->(int)
(	O
)	O
;	O
if	O
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_num_recv	long
&&	O
PING_TIMING	O
(	O
data_length	long
)	O
)	O
{	O
struct	O
ping_stat	struct(double,double,double,double)
*	O
ping_stat	struct(double,double,double,double)
=	O
(	O
struct	O
ping_stat	struct(double,double,double,double)
*	O
)	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_closure	*(void)
;	O
double	O
total	double
=	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_num_recv	long
+	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_num_rept	long
;	O
double	O
avg	double
=	O
ping_stat	struct(double,double,double,double)
->	O
tsum	double
/	O
total	double
;	O
double	O
vari	double
=	O
ping_stat	struct(double,double,double,double)
->	O
tsumsq	double
/	O
total	double
-	O
avg	double
*	O
avg	double
;	O
printf	(*(char))->(int)
(	O
"round-trip min/avg/max/stddev = %.3f/%.3f/%.3f/%.3f ms\n"	*(char)
,	O
ping_stat	struct(double,double,double,double)
->	O
tmin	double
,	O
avg	double
,	O
ping_stat	struct(double,double,double,double)
->	O
tmax	double
,	O
nsqrt	(double,double)->(double)
(	O
vari	double
,	O
0.0005	int
)	O
)	O
;	O
}	O
return	O
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_num_recv	long
==	O
0	int
)	O
;	O
}	O
static	O
PING	struct
*	O
ping_init	(int,int)->(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)))
(	O
int	O
type	int
,	O
int	O
ident	int
)	O
{	O
int	O
fd	int
,	O
err	long
;	O
const	O
int	O
on	int
=	O
1	int
;	O
PING	struct
*	O
p	*(void)
;	O
struct	O
icmp6_filter	struct(array(int))
filter	struct(array(int))
;	O
fd	int
=	O
socket	(int,int,int)->(int)
(	O
PF_INET6	int
,	O
SOCK_RAW	int
,	O
IPPROTO_ICMPV6	int
)	O
;	O
if	O
(	O
fd	int
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
EPERM	int
||	O
errno	O
==	O
EACCES	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"raw socket"	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
ICMP6_FILTER_SETBLOCKALL	O
(	O
&	O
filter	struct(array(int))
)	O
;	O
ICMP6_FILTER_SETPASS	O
(	O
ICMP6_ECHO_REPLY	int
,	O
&	O
filter	struct(array(int))
)	O
;	O
ICMP6_FILTER_SETPASS	O
(	O
ICMP6_DST_UNREACH	int
,	O
&	O
filter	struct(array(int))
)	O
;	O
ICMP6_FILTER_SETPASS	O
(	O
ICMP6_PACKET_TOO_BIG	int
,	O
&	O
filter	struct(array(int))
)	O
;	O
ICMP6_FILTER_SETPASS	O
(	O
ICMP6_TIME_EXCEEDED	int
,	O
&	O
filter	struct(array(int))
)	O
;	O
ICMP6_FILTER_SETPASS	O
(	O
ICMP6_PARAM_PROB	int
,	O
&	O
filter	struct(array(int))
)	O
;	O
err	long
=	O
setsockopt	(int,int,int,*(void),int)->(int)
(	O
fd	int
,	O
IPPROTO_ICMPV6	int
,	O
ICMP6_FILTER	int
,	O
&	O
filter	struct(array(int))
,	O
sizeof	O
(	O
filter	struct(array(int))
)	O
)	O
;	O
if	O
(	O
err	long
)	O
{	O
close	(int)->(int)
(	O
fd	int
)	O
;	O
return	O
NULL	O
;	O
}	O
err	long
=	O
setsockopt	(int,int,int,*(void),int)->(int)
(	O
fd	int
,	O
IPPROTO_IPV6	int
,	O
IPV6_RECVHOPLIMIT	int
,	O
&	O
on	int
,	O
sizeof	O
(	O
on	int
)	O
)	O
;	O
if	O
(	O
err	long
)	O
{	O
close	(int)->(int)
(	O
fd	int
)	O
;	O
return	O
NULL	O
;	O
}	O
p	*(void)
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
p	*(void)
)	O
)	O
;	O
if	O
(	O
!	O
p	*(void)
)	O
{	O
close	(int)->(int)
(	O
fd	int
)	O
;	O
return	O
NULL	O
;	O
}	O
memset	(*(void),int,long)->(*(void))
(	O
p	*(void)
,	O
0	int
,	O
sizeof	O
(	O
*	O
p	*(void)
)	O
)	O
;	O
p	*(void)
->	O
ping_fd	int
=	O
fd	int
;	O
p	*(void)
->	O
ping_count	long
=	O
DEFAULT_PING_COUNT	int
;	O
p	*(void)
->	O
ping_interval	long
=	O
PING_DEFAULT_INTERVAL	int
;	O
p	*(void)
->	O
ping_datalen	long
=	O
sizeof	O
(	O
struct	O
icmp6_hdr	struct(char,char,short,union(array(int),array(short),array(char)))
)	O
;	O
p	*(void)
->	O
ping_ident	int
=	O
ident	int
&	O
0xFFFF	int
;	O
p	*(void)
->	O
ping_cktab_size	int
=	O
PING_CKTABSIZE	int
;	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
&	O
p	*(void)
->	O
ping_start_time	struct(long,long)
,	O
NULL	O
)	O
;	O
return	O
p	*(void)
;	O
}	O
static	O
int	O
ping_xmit	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)))->(int)
(	O
PING	struct
*	O
p	*(void)
)	O
{	O
int	O
i	int
,	O
buflen	int
;	O
struct	O
icmp6_hdr	struct(char,char,short,union(array(int),array(short),array(char)))
*	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
;	O
if	O
(	O
_ping_setbuf	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)),bool)->(int)
(	O
p	*(void)
,	O
USE_IPV6	bool
)	O
)	O
return	O
-	O
1	int
;	O
buflen	int
=	O
p	*(void)
->	O
ping_datalen	long
+	O
sizeof	O
(	O
struct	O
icmp6_hdr	struct(char,char,short,union(array(int),array(short),array(char)))
)	O
;	O
_PING_CLR	O
(	O
p	*(void)
,	O
p	*(void)
->	O
ping_num_xmit	long
)	O
;	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
=	O
(	O
struct	O
icmp6_hdr	struct(char,char,short,union(array(int),array(short),array(char)))
*	O
)	O
p	*(void)
->	O
ping_buffer	*(char)
;	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
->	O
icmp6_type	char
=	O
ICMP6_ECHO_REQUEST	int
;	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
->	O
icmp6_code	char
=	O
0	int
;	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
->	O
icmp6_cksum	short
=	O
0	int
;	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
->	O
icmp6_id	O
=	O
htons	(short)->(short)
(	O
p	*(void)
->	O
ping_ident	int
)	O
;	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
->	O
icmp6_seq	O
=	O
htons	(short)->(short)
(	O
p	*(void)
->	O
ping_num_xmit	long
)	O
;	O
i	int
=	O
sendto	(int,*(void),long,int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(long)
(	O
p	*(void)
->	O
ping_fd	int
,	O
(	O
char	O
*	O
)	O
p	*(void)
->	O
ping_buffer	*(char)
,	O
buflen	int
,	O
0	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
p	*(void)
->	O
ping_dest	union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
.	O
ping_sockaddr6	struct(short,short,int,struct(union(array(char),array(short),array(int))),int)
,	O
sizeof	O
(	O
p	*(void)
->	O
ping_dest	union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
.	O
ping_sockaddr6	struct(short,short,int,struct(union(array(char),array(short),array(int))),int)
)	O
)	O
;	O
if	O
(	O
i	int
<	O
0	int
)	O
perror	(*(char))->(void)
(	O
"ping: sendto"	*(char)
)	O
;	O
else	O
{	O
p	*(void)
->	O
ping_num_xmit	long
++	O
;	O
if	O
(	O
i	int
!=	O
buflen	int
)	O
printf	(*(char))->(int)
(	O
"ping: wrote %s %d chars, ret=%d\n"	*(char)
,	O
p	*(void)
->	O
ping_hostname	*(char)
,	O
buflen	int
,	O
i	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
my_echo_reply	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)),*(struct(char,char,short,union(array(int),array(short),array(char)))))->(int)
(	O
PING	struct
*	O
p	*(void)
,	O
struct	O
icmp6_hdr	struct(char,char,short,union(array(int),array(short),array(char)))
*	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
)	O
{	O
struct	O
ip6_hdr	struct(union(struct(int,short,char,char),char),struct(union(array(char),array(short),array(int))),struct(union(array(char),array(short),array(int))))
*	O
orig_ip	*(struct(union(struct(int,short,char,char),char),struct(union(array(char),array(short),array(int))),struct(union(array(char),array(short),array(int)))))
=	O
(	O
struct	O
ip6_hdr	struct(union(struct(int,short,char,char),char),struct(union(array(char),array(short),array(int))),struct(union(array(char),array(short),array(int))))
*	O
)	O
(	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
+	O
1	int
)	O
;	O
struct	O
icmp6_hdr	struct(char,char,short,union(array(int),array(short),array(char)))
*	O
orig_icmp	*(struct(char,char,short,union(array(int),array(short),array(char))))
=	O
(	O
struct	O
icmp6_hdr	struct(char,char,short,union(array(int),array(short),array(char)))
*	O
)	O
(	O
orig_ip	*(struct(union(struct(int,short,char,char),char),struct(union(array(char),array(short),array(int))),struct(union(array(char),array(short),array(int)))))
+	O
1	int
)	O
;	O
return	O
IN6_ARE_ADDR_EQUAL	O
(	O
&	O
orig_ip	*(struct(union(struct(int,short,char,char),char),struct(union(array(char),array(short),array(int))),struct(union(array(char),array(short),array(int)))))
->	O
ip6_dst	struct(union(array(char),array(short),array(int)))
,	O
&	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_dest	union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
.	O
ping_sockaddr6	struct(short,short,int,struct(union(array(char),array(short),array(int))),int)
.	O
sin6_addr	struct(union(array(char),array(short),array(int)))
)	O
&&	O
orig_ip	*(struct(union(struct(int,short,char,char),char),struct(union(array(char),array(short),array(int))),struct(union(array(char),array(short),array(int)))))
->	O
ip6_nxt	O
==	O
IPPROTO_ICMPV6	int
&&	O
orig_icmp	*(struct(char,char,short,union(array(int),array(short),array(char))))
->	O
icmp6_type	char
==	O
ICMP6_ECHO_REQUEST	int
&&	O
orig_icmp	*(struct(char,char,short,union(array(int),array(short),array(char))))
->	O
icmp6_id	O
==	O
htons	(short)->(short)
(	O
p	*(void)
->	O
ping_ident	int
)	O
;	O
}	O
static	O
int	O
ping_recv	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)))->(int)
(	O
PING	struct
*	O
p	*(void)
)	O
{	O
int	O
dupflag	int
,	O
n	long
;	O
int	O
hops	int
=	O
-	O
1	int
;	O
struct	O
msghdr	struct(*(void),int,*(struct(*(void),long)),long,*(void),long,int)
msg	struct(*(void),int,*(struct(*(void),long)),long,*(void),long,int)
;	O
struct	O
iovec	struct(*(void),long)
iov	struct(*(void),long)
;	O
struct	O
icmp6_hdr	struct(char,char,short,union(array(int),array(short),array(char)))
*	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
;	O
struct	O
cmsghdr	struct(long,int,int,array(char))
*	O
cmsg	*(struct(long,int,int,array(char)))
;	O
char	O
cmsg_data	array(char)
[	O
1024	int
]	O
;	O
iov	struct(*(void),long)
.	O
iov_base	*(void)
=	O
p	*(void)
->	O
ping_buffer	*(char)
;	O
iov	struct(*(void),long)
.	O
iov_len	long
=	O
_PING_BUFLEN	O
(	O
p	*(void)
,	O
USE_IPV6	bool
)	O
;	O
msg	struct(*(void),int,*(struct(*(void),long)),long,*(void),long,int)
.	O
msg_name	*(void)
=	O
&	O
p	*(void)
->	O
ping_from	union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
.	O
ping_sockaddr6	struct(short,short,int,struct(union(array(char),array(short),array(int))),int)
;	O
msg	struct(*(void),int,*(struct(*(void),long)),long,*(void),long,int)
.	O
msg_namelen	int
=	O
sizeof	O
(	O
p	*(void)
->	O
ping_from	union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
.	O
ping_sockaddr6	struct(short,short,int,struct(union(array(char),array(short),array(int))),int)
)	O
;	O
msg	struct(*(void),int,*(struct(*(void),long)),long,*(void),long,int)
.	O
msg_iov	*(struct(*(void),long))
=	O
&	O
iov	struct(*(void),long)
;	O
msg	struct(*(void),int,*(struct(*(void),long)),long,*(void),long,int)
.	O
msg_iovlen	long
=	O
1	int
;	O
msg	struct(*(void),int,*(struct(*(void),long)),long,*(void),long,int)
.	O
msg_control	*(void)
=	O
cmsg_data	array(char)
;	O
msg	struct(*(void),int,*(struct(*(void),long)),long,*(void),long,int)
.	O
msg_controllen	long
=	O
sizeof	O
(	O
cmsg_data	array(char)
)	O
;	O
msg	struct(*(void),int,*(struct(*(void),long)),long,*(void),long,int)
.	O
msg_flags	int
=	O
0	int
;	O
n	long
=	O
recvmsg	(int,*(struct(*(void),int,*(struct(*`,long)),long,*(void),long,int)),int)->(long)
(	O
p	*(void)
->	O
ping_fd	int
,	O
&	O
msg	struct(*(void),int,*(struct(*(void),long)),long,*(void),long,int)
,	O
0	int
)	O
;	O
if	O
(	O
n	long
<	O
0	int
)	O
return	O
-	O
1	int
;	O
for	O
(	O
cmsg	*(struct(long,int,int,array(char)))
=	O
CMSG_FIRSTHDR	O
(	O
&	O
msg	struct(*(void),int,*(struct(*(void),long)),long,*(void),long,int)
)	O
;	O
cmsg	*(struct(long,int,int,array(char)))
;	O
cmsg	*(struct(long,int,int,array(char)))
=	O
CMSG_NXTHDR	O
(	O
&	O
msg	struct(*(void),int,*(struct(*(void),long)),long,*(void),long,int)
,	O
cmsg	*(struct(long,int,int,array(char)))
)	O
)	O
{	O
if	O
(	O
cmsg	*(struct(long,int,int,array(char)))
->	O
cmsg_level	int
==	O
IPPROTO_IPV6	int
&&	O
cmsg	*(struct(long,int,int,array(char)))
->	O
cmsg_type	int
==	O
IPV6_HOPLIMIT	int
)	O
{	O
hops	int
=	O
*	O
(	O
int	O
*	O
)	O
CMSG_DATA	O
(	O
cmsg	*(struct(long,int,int,array(char)))
)	O
;	O
break	O
;	O
}	O
}	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
=	O
(	O
struct	O
icmp6_hdr	struct(char,char,short,union(array(int),array(short),array(char)))
*	O
)	O
p	*(void)
->	O
ping_buffer	*(char)
;	O
if	O
(	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
->	O
icmp6_type	char
==	O
ICMP6_ECHO_REPLY	int
)	O
{	O
if	O
(	O
ntohs	(short)->(short)
(	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
->	O
icmp6_id	O
)	O
!=	O
p	*(void)
->	O
ping_ident	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
_PING_TST	O
(	O
p	*(void)
,	O
ntohs	(short)->(short)
(	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
->	O
icmp6_seq	O
)	O
)	O
)	O
{	O
p	*(void)
->	O
ping_num_rept	long
++	O
;	O
dupflag	int
=	O
1	int
;	O
}	O
else	O
{	O
_PING_SET	O
(	O
p	*(void)
,	O
ntohs	(short)->(short)
(	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
->	O
icmp6_seq	O
)	O
)	O
;	O
p	*(void)
->	O
ping_num_recv	long
++	O
;	O
dupflag	int
=	O
0	int
;	O
}	O
print_echo	(int,int,*(struct(double,double,double,double)),*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int)),*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int)),*(struct(char,char,short,union(array(int),array(short),array(char)))),int)->(int)
(	O
dupflag	int
,	O
hops	int
,	O
p	*(void)
->	O
ping_closure	*(void)
,	O
&	O
p	*(void)
->	O
ping_dest	union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
.	O
ping_sockaddr6	struct(short,short,int,struct(union(array(char),array(short),array(int))),int)
,	O
&	O
p	*(void)
->	O
ping_from	union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
.	O
ping_sockaddr6	struct(short,short,int,struct(union(array(char),array(short),array(int))),int)
,	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
,	O
n	long
)	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
my_echo_reply	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)),*(struct(char,char,short,union(array(int),array(short),array(char)))))->(int)
(	O
p	*(void)
,	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
)	O
)	O
return	O
-	O
1	int
;	O
print_icmp_error	(*(struct(short,short,int,struct(union(array(char),array(short),array(int))),int)),*(struct(char,char,short,union(array(int),array(short),array(char)))),int)->(void)
(	O
&	O
p	*(void)
->	O
ping_from	union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
.	O
ping_sockaddr6	struct(short,short,int,struct(union(array(char),array(short),array(int))),int)
,	O
icmp6	*(struct(char,char,short,union(array(int),array(short),array(char))))
,	O
n	long
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
ping_set_dest	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)),*(char))->(int)
(	O
PING	struct
*	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
,	O
char	O
*	O
host	*(char)
)	O
{	O
int	O
err	long
;	O
struct	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
*	O
result	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
,	O
hints	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
hints	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
,	O
0	int
,	O
sizeof	O
(	O
hints	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
)	O
)	O
;	O
hints	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
.	O
ai_family	int
=	O
AF_INET6	O
;	O
err	long
=	O
getaddrinfo	(*(char),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))->(int)
(	O
host	*(char)
,	O
NULL	O
,	O
&	O
hints	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
,	O
&	O
result	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
)	O
;	O
if	O
(	O
err	long
)	O
return	O
1	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
&	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_dest	union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
.	O
ping_sockaddr6	struct(short,short,int,struct(union(array(char),array(short),array(int))),int)
,	O
result	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_addr	*(struct(short,array(char)))
,	O
result	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_addrlen	int
)	O
;	O
freeaddrinfo	(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
result	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
)	O
;	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_hostname	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
host	*(char)
)	O
;	O
if	O
(	O
!	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_hostname	*(char)
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
