static	O
int	O
cod_RZ	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
tau	double
)	O
;	O
static	O
double	O
cod_householder_transform	(*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
double	O
*	O
alpha	long double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
static	O
int	O
cod_householder_mh	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
double	O
tau	double
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
static	O
int	O
cod_householder_hv	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
double	O
tau	double
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
static	O
int	O
cod_householder_Zvec	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),long,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
QRZT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
tau_Z	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
size_t	long
rank	long
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
static	O
int	O
cod_trireg_solve	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
R	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
double	O
lambda	double
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
b	double
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
S	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
int	O
gsl_linalg_COD_decomp_e	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),double,*(long),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
tau_Q	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
tau_Z	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_permutation	struct(long,*(long))
*	O
p	int
,	O
double	O
tol	double
,	O
size_t	long
*	O
rank	long
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
const	O
size_t	long
M	int
=	O
A	*(float)
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	*(float)
->	O
size2	long
;	O
if	O
(	O
tau_Q	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"size of tau_Q must be MIN(M,N)"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
tau_Z	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"size of tau_Z must be MIN(M,N)"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
p	int
->	O
size	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"permutation size must be N"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"work size must be N"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
,	O
signum	*(int)
;	O
size_t	long
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
status	int
=	O
gsl_linalg_QRPT_decomp	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),*(int),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
A	*(float)
,	O
tau_Q	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
p	int
,	O
&	O
signum	*(int)
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_linalg_QRPT_rank	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double)->(long)
(	O
A	*(float)
,	O
tol	double
)	O
;	O
if	O
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
<	O
N	int
)	O
{	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
R_upper	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
0	int
,	O
0	int
,	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
N	int
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
t	double
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
tau_Z	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
cod_RZ	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
R_upper	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
t	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
*	O
rank	long
=	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_COD_decomp	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),*(long),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
tau_Q	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
tau_Z	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_permutation	struct(long,*(long))
*	O
p	int
,	O
size_t	long
*	O
rank	long
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
return	O
gsl_linalg_COD_decomp_e	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),double,*(long),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
A	*(float)
,	O
tau_Q	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
tau_Z	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
p	int
,	O
-	O
1.0	int
,	O
rank	long
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
int	O
gsl_linalg_COD_lssolve	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
QRZT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
tau_Q	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
tau_Z	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_permutation	struct(long,*(long))
*	O
perm	*(struct(long,*(long)))
,	O
const	O
size_t	long
rank	long
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
b	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
residual	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
const	O
size_t	long
M	int
=	O
QRZT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
QRZT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
;	O
if	O
(	O
M	int
<	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"QRZT matrix must have M>=N"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
M	int
!=	O
b	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match b size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
rank	long
>	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"rank must be <= MIN(M,N)"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match solution size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
M	int
!=	O
residual	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match residual size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
R11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
QRZT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
,	O
rank	long
,	O
rank	long
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
QTb1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
residual	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
rank	long
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
x1	double
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
x	double
,	O
0	int
,	O
rank	long
)	O
;	O
gsl_vector_set_zero	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
x	double
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
residual	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
b	double
)	O
;	O
gsl_linalg_QR_QTvec	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
QRZT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
tau_Q	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
residual	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
(	O
x1	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
,	O
&	O
(	O
QTb1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
)	O
;	O
gsl_blas_dtrsv	(enum(int,int),enum(int,int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
&	O
(	O
R11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
,	O
&	O
(	O
x1	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
)	O
;	O
cod_householder_Zvec	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),long,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
QRZT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
tau_Z	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
rank	long
,	O
x	double
)	O
;	O
gsl_permute_vector_inverse	(*(struct(long,*(long))),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
perm	*(struct(long,*(long)))
,	O
x	double
)	O
;	O
gsl_vector_set_zero	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
&	O
(	O
QTb1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
)	O
;	O
gsl_linalg_QR_Qvec	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
QRZT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
tau_Q	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
residual	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_COD_lssolve2	(double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
double	O
lambda	double
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
QRZT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
tau_Q	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
tau_Z	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_permutation	struct(long,*(long))
*	O
perm	*(struct(long,*(long)))
,	O
const	O
size_t	long
rank	long
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
b	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
residual	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
S	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
const	O
size_t	long
M	int
=	O
QRZT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
QRZT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
;	O
if	O
(	O
M	int
<	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"QRZT matrix must have M>=N"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
M	int
!=	O
b	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match b size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
rank	long
>	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"rank must be <= MIN(M,N)"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match solution size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
M	int
!=	O
residual	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match residual size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
S	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
rank	long
||	O
S	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
!=	O
rank	long
)	O
{	O
GSL_ERROR	O
(	O
"S must be rank-by-rank"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
rank	long
)	O
{	O
GSL_ERROR	O
(	O
"work must be length rank"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
R11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
QRZT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
,	O
rank	long
,	O
rank	long
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
c1	double
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
residual	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
rank	long
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
y1	(double)->(double)
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
x	double
,	O
0	int
,	O
rank	long
)	O
;	O
gsl_vector_set_zero	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
x	double
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
residual	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
b	double
)	O
;	O
gsl_linalg_QR_QTvec	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
QRZT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
tau_Q	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
residual	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
cod_trireg_solve	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
(	O
R11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
,	O
lambda	double
,	O
&	O
(	O
c1	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
,	O
S	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
&	O
(	O
y1	(double)->(double)
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
&	O
(	O
y1	(double)->(double)
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
)	O
;	O
cod_householder_Zvec	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),long,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
QRZT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
tau_Z	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
rank	long
,	O
x	double
)	O
;	O
gsl_permute_vector_inverse	(*(struct(long,*(long))),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
perm	*(struct(long,*(long)))
,	O
x	double
)	O
;	O
gsl_blas_dtrmv	(enum(int,int),enum(int,int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
&	O
(	O
R11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_sub	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
(	O
c1	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_linalg_QR_Qvec	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
QRZT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
tau_Q	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
residual	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_COD_unpack	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
QRZT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
tau_Q	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
tau_Z	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
size_t	long
rank	long
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
Q	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
R	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
const	O
size_t	long
M	int
=	O
QRZT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
QRZT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
;	O
if	O
(	O
tau_Q	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"size of tau_Q must be MIN(M,N)"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
tau_Z	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"size of tau_Z must be MIN(M,N)"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
rank	long
>	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"rank must be <= MIN(M,N)"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
Q	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
M	int
||	O
Q	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"Q must by M-by-M"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
R	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
M	int
||	O
R	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"R must by M-by-N"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
N	int
||	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"Z must by N-by-N"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
R11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
R	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
,	O
rank	long
,	O
rank	long
)	O
;	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
QRZT11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
QRZT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
,	O
rank	long
,	O
rank	long
)	O
;	O
gsl_matrix_set_identity	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
Q	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
for	O
(	O
i	long
=	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
;	O
i	long
--	O
>	O
0	int
;	O
)	O
{	O
gsl_vector_const_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
h	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_subcolumn	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
QRZT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
i	long
,	O
M	int
-	O
i	long
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
Q	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
i	long
,	O
M	int
-	O
i	long
,	O
M	int
-	O
i	long
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_subcolumn	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
R	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
,	O
M	int
-	O
i	long
)	O
;	O
double	O
ti	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
tau_Q	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
gsl_linalg_householder_left	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
ti	double
,	O
&	O
h	*(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
gsl_matrix_set_identity	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
rank	long
<	O
N	int
)	O
{	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_row	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
R	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
)	O
;	O
gsl_linalg_COD_matZ	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
QRZT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
tau_Z	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
rank	long
,	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
&	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
gsl_matrix_set_zero	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
R	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_matrix_tricpy	(enum(int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasUpper	int
,	O
CblasNonUnit	int
,	O
&	O
R11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
QRZT11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_COD_matZ	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),long,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
QRZT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
tau_Z	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
size_t	long
rank	long
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
const	O
size_t	long
M	int
=	O
A	*(float)
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	*(float)
->	O
size2	long
;	O
if	O
(	O
tau_Z	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
GSL_MIN	O
(	O
QRZT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
,	O
QRZT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
)	O
{	O
GSL_ERROR	O
(	O
"tau_Z must be GSL_MIN(M,N)"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
QRZT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"QRZT must have N columns"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"workspace must be length M"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
rank	long
<	O
N	int
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
rank	long
;	O
i	long
>	O
0	int
&&	O
i	long
--	O
;	O
)	O
{	O
gsl_vector_const_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
h	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_subrow	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
QRZT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
rank	long
,	O
N	int
-	O
rank	long
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
0	int
,	O
i	long
,	O
M	int
,	O
N	int
-	O
i	long
)	O
;	O
double	O
ti	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
tau_Z	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
cod_householder_mh	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
ti	double
,	O
&	O
h	*(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
cod_RZ	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
tau	double
)	O
{	O
const	O
size_t	long
M	int
=	O
A	*(float)
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	*(float)
->	O
size2	long
;	O
if	O
(	O
tau	double
->	O
size	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"tau has wrong size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
<	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"N must be >= M"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
else	O
if	O
(	O
M	int
==	O
N	int
)	O
{	O
gsl_vector_set_all	(*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(void)
(	O
tau	double
,	O
0.0	int
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
size_t	long
k	long
;	O
for	O
(	O
k	long
=	O
M	int
;	O
k	long
>	O
0	int
&&	O
k	long
--	O
;	O
)	O
{	O
double	O
*	O
alpha	long double
=	O
gsl_matrix_ptr	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(*(double))
(	O
A	*(float)
,	O
k	long
,	O
k	long
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
z	double
=	O
gsl_matrix_subrow	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
k	long
,	O
M	int
,	O
N	int
-	O
M	int
)	O
;	O
double	O
tauk	double
;	O
tauk	double
=	O
cod_householder_transform	(*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
alpha	long double
,	O
&	O
z	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
tau	double
,	O
k	long
,	O
tauk	double
)	O
;	O
if	O
(	O
(	O
tauk	double
!=	O
0	int
)	O
&&	O
(	O
k	long
>	O
0	int
)	O
)	O
{	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
tau	double
,	O
0	int
,	O
k	long
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
B	*(float)
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
0	int
,	O
k	long
,	O
k	long
,	O
N	int
-	O
k	long
)	O
;	O
cod_householder_mh	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
tauk	double
,	O
&	O
z	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
B	*(float)
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
double	O
cod_householder_transform	(*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
double	O
*	O
alpha	long double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
double	O
beta	long double
,	O
tau	double
;	O
double	O
xnorm	double
=	O
gsl_blas_dnrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
if	O
(	O
xnorm	double
==	O
0	int
)	O
{	O
return	O
0.0	int
;	O
}	O
beta	long double
=	O
-	O
(	O
*	O
alpha	long double
>=	O
0.0	int
?	O
+	O
1.0	int
:	O
-	O
1.0	int
)	O
*	O
gsl_hypot	(double,double)->(double)
(	O
*	O
alpha	long double
,	O
xnorm	double
)	O
;	O
tau	double
=	O
(	O
beta	long double
-	O
*	O
alpha	long double
)	O
/	O
beta	long double
;	O
{	O
double	O
s	*(float)
=	O
(	O
*	O
alpha	long double
-	O
beta	long double
)	O
;	O
if	O
(	O
fabs	(double)->(double)
(	O
s	*(float)
)	O
>	O
GSL_DBL_MIN	int
)	O
{	O
gsl_blas_dscal	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
1.0	int
/	O
s	*(float)
,	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
}	O
else	O
{	O
gsl_blas_dscal	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
GSL_DBL_EPSILON	int
/	O
s	*(float)
,	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
gsl_blas_dscal	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
1.0	int
/	O
GSL_DBL_EPSILON	int
,	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
}	O
*	O
alpha	long double
=	O
beta	long double
;	O
}	O
return	O
tau	double
;	O
}	O
static	O
int	O
cod_householder_hv	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
double	O
tau	double
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
if	O
(	O
tau	double
==	O
0	int
)	O
{	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
const	O
size_t	long
M	int
=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
size	long
;	O
const	O
size_t	long
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
size	long
;	O
double	O
w0	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
0	int
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
w1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
M	int
-	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
double	O
d1	*(float)
,	O
d	double
;	O
gsl_blas_ddot	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double))->(int)
(	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
&	O
w1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
d1	*(float)
)	O
;	O
d	double
=	O
w0	double
+	O
d1	*(float)
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
0	int
,	O
w0	double
-	O
tau	double
*	O
d	double
)	O
;	O
gsl_blas_daxpy	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
-	O
tau	double
*	O
d	double
,	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
&	O
w1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
cod_householder_mh	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
double	O
tau	double
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
if	O
(	O
tau	double
==	O
0	int
)	O
{	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
const	O
size_t	long
M	int
=	O
A	*(float)
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	*(float)
->	O
size2	long
;	O
const	O
size_t	long
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
size	long
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
A1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_subcolumn	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
0	int
,	O
0	int
,	O
M	int
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
C	*(float)
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
0	int
,	O
N	int
-	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
M	int
,	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
&	O
A1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_dgemv	(enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasNoTrans	int
,	O
1.0	int
,	O
&	O
C	*(float)
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
1.0	int
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_blas_daxpy	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
-	O
tau	double
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
&	O
A1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_dger	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
-	O
tau	double
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
&	O
C	*(float)
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
cod_householder_Zvec	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),long,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
QRZT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
tau_Z	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
size_t	long
rank	long
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
const	O
size_t	long
M	int
=	O
QRZT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
QRZT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
;	O
if	O
(	O
tau_Z	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"tau_Z must be GSL_MIN(M,N)"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
size	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"v must be length N"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
rank	long
<	O
N	int
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rank	long
;	O
++	O
i	long
)	O
{	O
gsl_vector_const_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
h	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_subrow	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
QRZT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
rank	long
,	O
N	int
-	O
rank	long
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
i	long
,	O
N	int
-	O
i	long
)	O
;	O
double	O
ti	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
tau_Z	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
cod_householder_hv	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
ti	double
,	O
&	O
h	*(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
cod_trireg_solve	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
R	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
double	O
lambda	double
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
b	double
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
S	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
const	O
size_t	long
N	int
=	O
R	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
;	O
gsl_vector_const_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_diagonal	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
R	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
size_t	long
i	long
,	O
j	long
,	O
k	long
;	O
if	O
(	O
lambda	double
<=	O
0.0	int
)	O
{	O
GSL_ERROR	O
(	O
"lambda must be positive"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
gsl_matrix_transpose_tricpy	(enum(int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasUpper	int
,	O
CblasUnit	int
,	O
S	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
R	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
&	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
x	double
,	O
b	double
)	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
N	int
;	O
j	long
++	O
)	O
{	O
double	O
bj	double
=	O
0.0	int
;	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
S	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
j	long
,	O
j	long
,	O
lambda	double
)	O
;	O
for	O
(	O
k	long
=	O
j	long
+	O
1	int
;	O
k	long
<	O
N	int
;	O
k	long
++	O
)	O
{	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
S	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
k	long
,	O
k	long
,	O
0.0	int
)	O
;	O
}	O
for	O
(	O
k	long
=	O
j	long
;	O
k	long
<	O
N	int
;	O
k	long
++	O
)	O
{	O
double	O
sine	double
,	O
cosine	double
;	O
double	O
xk	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
x	double
,	O
k	long
)	O
;	O
double	O
rkk	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
k	long
)	O
;	O
double	O
skk	double
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
S	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
k	long
,	O
k	long
)	O
;	O
if	O
(	O
skk	double
==	O
0	int
)	O
{	O
continue	O
;	O
}	O
if	O
(	O
fabs	(double)->(double)
(	O
rkk	double
)	O
<	O
fabs	(double)->(double)
(	O
skk	double
)	O
)	O
{	O
double	O
cotangent	double
=	O
rkk	double
/	O
skk	double
;	O
sine	double
=	O
0.5	int
/	O
sqrt	(double)->(double)
(	O
0.25	int
+	O
0.25	int
*	O
cotangent	double
*	O
cotangent	double
)	O
;	O
cosine	double
=	O
sine	double
*	O
cotangent	double
;	O
}	O
else	O
{	O
double	O
tangent	double
=	O
skk	double
/	O
rkk	double
;	O
cosine	double
=	O
0.5	int
/	O
sqrt	(double)->(double)
(	O
0.25	int
+	O
0.25	int
*	O
tangent	double
*	O
tangent	double
)	O
;	O
sine	double
=	O
cosine	double
*	O
tangent	double
;	O
}	O
{	O
double	O
new_rkk	double
=	O
cosine	double
*	O
rkk	double
+	O
sine	double
*	O
skk	double
;	O
double	O
new_xk	double
=	O
cosine	double
*	O
xk	double
+	O
sine	double
*	O
bj	double
;	O
bj	double
=	O
-	O
sine	double
*	O
xk	double
+	O
cosine	double
*	O
bj	double
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
k	long
,	O
new_rkk	double
)	O
;	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
S	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
k	long
,	O
k	long
,	O
new_rkk	double
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
x	double
,	O
k	long
,	O
new_xk	double
)	O
;	O
}	O
for	O
(	O
i	long
=	O
k	long
+	O
1	int
;	O
i	long
<	O
N	int
;	O
i	long
++	O
)	O
{	O
double	O
sik	double
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
S	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
k	long
)	O
;	O
double	O
sii	double
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
S	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
i	long
)	O
;	O
double	O
new_sik	double
=	O
cosine	double
*	O
sik	double
+	O
sine	double
*	O
sii	double
;	O
double	O
new_sii	double
=	O
-	O
sine	double
*	O
sik	double
+	O
cosine	double
*	O
sii	double
;	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
S	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
k	long
,	O
new_sik	double
)	O
;	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
S	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
i	long
,	O
new_sii	double
)	O
;	O
}	O
}	O
}	O
gsl_blas_dtrsv	(enum(int,int),enum(int,int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLower	int
,	O
CblasTrans	int
,	O
CblasNonUnit	int
,	O
S	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
x	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
