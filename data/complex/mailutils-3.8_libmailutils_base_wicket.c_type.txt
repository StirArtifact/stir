int	O
mu_wicket_create	(*(*(struct)))->(int)
(	O
mu_wicket_t	*(struct)
*	O
pwicket	*(*(struct))
)	O
{	O
mu_wicket_t	*(struct)
wicket	*(struct)
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
wicket	*(struct)
)	O
)	O
;	O
if	O
(	O
!	O
wicket	*(struct)
)	O
return	O
ENOMEM	int
;	O
wicket	*(struct)
->	O
refcnt	int
=	O
1	int
;	O
*	O
pwicket	*(*(struct))
=	O
wicket	*(struct)
;	O
return	O
0	int
;	O
}	O
int	O
mu_wicket_get_ticket	(*(struct),*(char),*(*(struct)))->(int)
(	O
mu_wicket_t	*(struct)
wicket	*(struct)
,	O
const	O
char	O
*	O
user	*(char)
,	O
mu_ticket_t	*(struct)
*	O
pticket	*(*(struct))
)	O
{	O
if	O
(	O
!	O
wicket	*(struct)
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
pticket	*(*(struct))
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
wicket	*(struct)
->	O
_get_ticket	*((*(struct),*(void),*(char),*(*(struct)))->(int))
)	O
return	O
ENOSYS	int
;	O
return	O
wicket	*(struct)
->	O
_get_ticket	*((*(struct),*(void),*(char),*(*(struct)))->(int))
(	O
wicket	*(struct)
,	O
wicket	*(struct)
->	O
data	*(void)
,	O
user	*(char)
,	O
pticket	*(*(struct))
)	O
;	O
}	O
int	O
mu_wicket_ref	(*(struct))->(int)
(	O
mu_wicket_t	*(struct)
wicket	*(struct)
)	O
{	O
if	O
(	O
!	O
wicket	*(struct)
)	O
return	O
EINVAL	int
;	O
wicket	*(struct)
->	O
refcnt	int
++	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_wicket_unref	(*(struct))->(int)
(	O
mu_wicket_t	*(struct)
wicket	*(struct)
)	O
{	O
if	O
(	O
!	O
wicket	*(struct)
)	O
return	O
EINVAL	int
;	O
if	O
(	O
wicket	*(struct)
->	O
refcnt	int
)	O
wicket	*(struct)
->	O
refcnt	int
--	O
;	O
if	O
(	O
wicket	*(struct)
->	O
refcnt	int
==	O
0	int
)	O
{	O
if	O
(	O
wicket	*(struct)
->	O
_destroy	*((*(struct))->(void))
)	O
wicket	*(struct)
->	O
_destroy	*((*(struct))->(void))
(	O
wicket	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
wicket	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
return	O
MU_ERR_EXISTS	O
;	O
}	O
void	O
mu_wicket_destroy	(*(*(struct)))->(void)
(	O
mu_wicket_t	*(struct)
*	O
pwicket	*(*(struct))
)	O
{	O
if	O
(	O
pwicket	*(*(struct))
&&	O
*	O
pwicket	*(*(struct))
&&	O
mu_wicket_unref	(*(struct))->(int)
(	O
*	O
pwicket	*(*(struct))
)	O
==	O
0	int
)	O
*	O
pwicket	*(*(struct))
=	O
NULL	O
;	O
}	O
int	O
mu_wicket_set_destroy	(*(struct),*((*(struct))->(void)))->(int)
(	O
mu_wicket_t	*(struct)
wicket	*(struct)
,	O
void	O
(	O
*	O
_destroy	*((*(struct))->(void))
)	O
(	O
mu_wicket_t	*(struct)
)	O
)	O
{	O
if	O
(	O
!	O
wicket	*(struct)
)	O
return	O
EINVAL	int
;	O
wicket	*(struct)
->	O
_destroy	*((*(struct))->(void))
=	O
_destroy	*((*(struct))->(void))
;	O
return	O
0	int
;	O
}	O
int	O
mu_wicket_set_data	(*(struct),*(void))->(int)
(	O
mu_wicket_t	*(struct)
wicket	*(struct)
,	O
void	O
*	O
data	*(void)
)	O
{	O
if	O
(	O
!	O
wicket	*(struct)
)	O
return	O
EINVAL	int
;	O
wicket	*(struct)
->	O
data	*(void)
=	O
data	*(void)
;	O
return	O
0	int
;	O
}	O
void	O
*	O
mu_wicket_get_data	(*(struct))->(*(void))
(	O
mu_wicket_t	*(struct)
wicket	*(struct)
)	O
{	O
if	O
(	O
!	O
wicket	*(struct)
)	O
return	O
NULL	O
;	O
return	O
wicket	*(struct)
->	O
data	*(void)
;	O
}	O
int	O
mu_wicket_set_get_ticket	(*(struct),*((*(struct),*(void),*(char),*(*(struct`)))->(int)))->(int)
(	O
mu_wicket_t	*(struct)
wicket	*(struct)
,	O
int	O
(	O
*	O
_get_ticket	*((*(struct),*(void),*(char),*(*(struct)))->(int))
)	O
(	O
mu_wicket_t	*(struct)
,	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
mu_ticket_t	*(struct)
*	O
)	O
)	O
{	O
if	O
(	O
!	O
wicket	*(struct)
)	O
return	O
EINVAL	int
;	O
wicket	*(struct)
->	O
_get_ticket	*((*(struct),*(void),*(char),*(*(struct)))->(int))
=	O
_get_ticket	*((*(struct),*(void),*(char),*(*(struct)))->(int))
;	O
return	O
0	int
;	O
}	O
