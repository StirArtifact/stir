int	O
linebuffer_reset	(*(struct(*(char),long)))->(int)
(	O
linebuffer	struct(*(char),long)
*	O
lb	*(struct(*(char),long))
)	O
{	O
lb	*(struct(*(char),long))
->	O
buffer	*(char)
=	O
NULL	O
;	O
lb	*(struct(*(char),long))
->	O
length	long
=	O
0	int
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
linebuffer_free	(*(struct(*(char),long)))->(int)
(	O
linebuffer	struct(*(char),long)
*	O
lb	*(struct(*(char),long))
)	O
{	O
if	O
(	O
lb	*(struct(*(char),long))
->	O
buffer	*(char)
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
lb	*(struct(*(char),long))
->	O
buffer	*(char)
)	O
;	O
linebuffer_reset	(*(struct(*(char),long)))->(int)
(	O
lb	*(struct(*(char),long))
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
linebuffer_concatenate	(*(struct(*(char),long)),*(char),long)->(int)
(	O
linebuffer	struct(*(char),long)
*	O
lb	*(struct(*(char),long))
,	O
char	O
*	O
buff	*(char)
,	O
size_t	long
size	long
)	O
{	O
if	O
(	O
buff	*(char)
==	O
NULL	O
||	O
size	long
<=	O
0	int
)	O
return	O
(	O
0	int
)	O
;	O
lb	*(struct(*(char),long))
->	O
buffer	*(char)
=	O
(	O
char	O
*	O
)	O
realloc	(*(void),long)->(*(void))
(	O
lb	*(struct(*(char),long))
->	O
buffer	*(char)
,	O
lb	*(struct(*(char),long))
->	O
length	long
+	O
size	long
+	O
1	int
)	O
;	O
malloc_check	O
(	O
lb	*(struct(*(char),long))
->	O
buffer	*(char)
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
lb	*(struct(*(char),long))
->	O
buffer	*(char)
+	O
lb	*(struct(*(char),long))
->	O
length	long
,	O
buff	*(char)
,	O
size	long
)	O
;	O
lb	*(struct(*(char),long))
->	O
length	long
+=	O
size	long
;	O
lb	*(struct(*(char),long))
->	O
buffer	*(char)
[	O
lb	*(struct(*(char),long))
->	O
length	long
]	O
=	O
0	int
;	O
return	O
(	O
0	int
)	O
;	O
}	O
char	O
*	O
linebuffer_read_line	(int,*(struct(*(char),long)),int)->(*(char))
(	O
int	O
fd	int
,	O
linebuffer	struct(*(char),long)
*	O
lb	*(struct(*(char),long))
,	O
int	O
timeout	int
)	O
{	O
char	O
*	O
line	*(char)
,	O
*	O
eoc	*(char)
,	O
buff	*(char)
[	O
256	int
]	O
;	O
int	O
length	long
,	O
n	int
;	O
struct	O
timeval	struct(long,long)
tv	struct(long,long)
,	O
*	O
ptv	*(struct(long,long))
,	O
tn	struct(long,long)
;	O
fd_set	struct(array(long))
set	struct(array(long))
;	O
if	O
(	O
timeout	int
>	O
0	int
)	O
{	O
tv	struct(long,long)
.	O
tv_sec	long
=	O
timeout	int
;	O
tv	struct(long,long)
.	O
tv_usec	long
=	O
0	int
;	O
ptv	*(struct(long,long))
=	O
&	O
tv	struct(long,long)
;	O
}	O
else	O
ptv	*(struct(long,long))
=	O
NULL	O
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
lb	*(struct(*(char),long))
->	O
buffer	*(char)
!=	O
NULL	O
)	O
eoc	*(char)
=	O
memchr	(*(void),int,long)->(*(void))
(	O
lb	*(struct(*(char),long))
->	O
buffer	*(char)
,	O
10	int
,	O
lb	*(struct(*(char),long))
->	O
length	long
)	O
;	O
else	O
eoc	*(char)
=	O
NULL	O
;	O
if	O
(	O
eoc	*(char)
!=	O
NULL	O
)	O
{	O
length	long
=	O
(	O
int	O
)	O
(	O
eoc	*(char)
-	O
lb	*(struct(*(char),long))
->	O
buffer	*(char)
)	O
;	O
line	*(char)
=	O
(	O
char	O
*	O
)	O
malloc	(long)->(*(void))
(	O
1	int
+	O
length	long
)	O
;	O
malloc_check	O
(	O
line	*(char)
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
line	*(char)
,	O
lb	*(struct(*(char),long))
->	O
buffer	*(char)
,	O
length	long
)	O
;	O
line	*(char)
[	O
length	long
]	O
=	O
0	int
;	O
length	long
++	O
;	O
if	O
(	O
length	long
>=	O
lb	*(struct(*(char),long))
->	O
length	long
)	O
{	O
free	(*(void))->(void)
(	O
lb	*(struct(*(char),long))
->	O
buffer	*(char)
)	O
;	O
lb	*(struct(*(char),long))
->	O
buffer	*(char)
=	O
NULL	O
;	O
lb	*(struct(*(char),long))
->	O
length	long
=	O
0	int
;	O
}	O
else	O
{	O
memmove	(*(void),*(void),long)->(*(void))
(	O
lb	*(struct(*(char),long))
->	O
buffer	*(char)
,	O
lb	*(struct(*(char),long))
->	O
buffer	*(char)
+	O
length	long
,	O
lb	*(struct(*(char),long))
->	O
length	long
-	O
length	long
)	O
;	O
lb	*(struct(*(char),long))
->	O
length	long
-=	O
length	long
;	O
}	O
return	O
(	O
line	*(char)
)	O
;	O
}	O
FD_ZERO	O
(	O
&	O
set	struct(array(long))
)	O
;	O
FD_SET	O
(	O
fd	int
,	O
&	O
set	struct(array(long))
)	O
;	O
tn	struct(long,long)
.	O
tv_sec	long
=	O
0	int
;	O
tn	struct(long,long)
.	O
tv_usec	long
=	O
0	int
;	O
select	(int,*(struct(array(long))),*(struct(array(long))),*(struct(array(long))),*(struct(long,long)))->(int)
(	O
fd	int
+	O
1	int
,	O
&	O
set	struct(array(long))
,	O
NULL	O
,	O
NULL	O
,	O
&	O
tn	struct(long,long)
)	O
;	O
if	O
(	O
FD_ISSET	O
(	O
fd	int
,	O
&	O
set	struct(array(long))
)	O
)	O
{	O
n	int
=	O
read	*((*(void),*(char),long)->(long))
(	O
fd	int
,	O
buff	*(char)
,	O
256	int
)	O
;	O
if	O
(	O
n	int
>	O
0	int
)	O
linebuffer_concatenate	(*(struct(*(char),long)),*(char),long)->(int)
(	O
lb	*(struct(*(char),long))
,	O
buff	*(char)
,	O
n	int
)	O
;	O
else	O
if	O
(	O
!	O
(	O
n	int
<	O
0	int
&&	O
errno	O
==	O
EINTR	int
)	O
)	O
return	O
(	O
NULL	O
)	O
;	O
}	O
else	O
{	O
FD_ZERO	O
(	O
&	O
set	struct(array(long))
)	O
;	O
FD_SET	O
(	O
fd	int
,	O
&	O
set	struct(array(long))
)	O
;	O
select	(int,*(struct(array(long))),*(struct(array(long))),*(struct(array(long))),*(struct(long,long)))->(int)
(	O
fd	int
+	O
1	int
,	O
&	O
set	struct(array(long))
,	O
NULL	O
,	O
NULL	O
,	O
ptv	*(struct(long,long))
)	O
;	O
if	O
(	O
FD_ISSET	O
(	O
fd	int
,	O
&	O
set	struct(array(long))
)	O
)	O
{	O
n	int
=	O
read	*((*(void),*(char),long)->(long))
(	O
fd	int
,	O
buff	*(char)
,	O
256	int
)	O
;	O
if	O
(	O
n	int
>	O
0	int
)	O
linebuffer_concatenate	(*(struct(*(char),long)),*(char),long)->(int)
(	O
lb	*(struct(*(char),long))
,	O
buff	*(char)
,	O
n	int
)	O
;	O
else	O
if	O
(	O
!	O
(	O
n	int
<	O
0	int
&&	O
errno	O
==	O
EINTR	int
)	O
)	O
return	O
(	O
NULL	O
)	O
;	O
}	O
else	O
return	O
(	O
NULL	O
)	O
;	O
}	O
}	O
return	O
(	O
NULL	O
)	O
;	O
}	O
char	O
*	O
linebuffer_fetch	(*(struct(*(char),long)))->(*(char))
(	O
linebuffer	struct(*(char),long)
*	O
lb	*(struct(*(char),long))
)	O
{	O
char	O
*	O
eoc	*(char)
,	O
*	O
line	*(char)
;	O
size_t	long
length	long
;	O
if	O
(	O
lb	*(struct(*(char),long))
->	O
buffer	*(char)
!=	O
NULL	O
&&	O
lb	*(struct(*(char),long))
->	O
length	long
>	O
0	int
)	O
eoc	*(char)
=	O
memchr	(*(void),int,long)->(*(void))
(	O
lb	*(struct(*(char),long))
->	O
buffer	*(char)
,	O
10	int
,	O
lb	*(struct(*(char),long))
->	O
length	long
)	O
;	O
else	O
eoc	*(char)
=	O
NULL	O
;	O
if	O
(	O
eoc	*(char)
!=	O
NULL	O
)	O
{	O
length	long
=	O
(	O
size_t	long
)	O
(	O
eoc	*(char)
-	O
lb	*(struct(*(char),long))
->	O
buffer	*(char)
)	O
;	O
line	*(char)
=	O
(	O
char	O
*	O
)	O
malloc	(long)->(*(void))
(	O
1	int
+	O
length	long
)	O
;	O
malloc_check	O
(	O
line	*(char)
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
line	*(char)
,	O
lb	*(struct(*(char),long))
->	O
buffer	*(char)
,	O
length	long
)	O
;	O
line	*(char)
[	O
length	long
]	O
=	O
0	int
;	O
length	long
++	O
;	O
if	O
(	O
length	long
>=	O
lb	*(struct(*(char),long))
->	O
length	long
)	O
{	O
free	(*(void))->(void)
(	O
lb	*(struct(*(char),long))
->	O
buffer	*(char)
)	O
;	O
lb	*(struct(*(char),long))
->	O
buffer	*(char)
=	O
NULL	O
;	O
lb	*(struct(*(char),long))
->	O
length	long
=	O
0	int
;	O
}	O
else	O
{	O
memmove	(*(void),*(void),long)->(*(void))
(	O
lb	*(struct(*(char),long))
->	O
buffer	*(char)
,	O
lb	*(struct(*(char),long))
->	O
buffer	*(char)
+	O
length	long
,	O
lb	*(struct(*(char),long))
->	O
length	long
-	O
length	long
)	O
;	O
lb	*(struct(*(char),long))
->	O
length	long
-=	O
length	long
;	O
}	O
return	O
(	O
line	*(char)
)	O
;	O
}	O
else	O
return	O
(	O
NULL	O
)	O
;	O
}	O
char	O
*	O
linebuffer_flush	(*(struct(*(char),long)))->(*(char))
(	O
linebuffer	struct(*(char),long)
*	O
lb	*(struct(*(char),long))
)	O
{	O
char	O
*	O
line	*(char)
;	O
size_t	long
length	long
;	O
if	O
(	O
lb	*(struct(*(char),long))
->	O
buffer	*(char)
!=	O
NULL	O
&&	O
lb	*(struct(*(char),long))
->	O
length	long
>	O
0	int
)	O
{	O
line	*(char)
=	O
(	O
char	O
*	O
)	O
malloc	(long)->(*(void))
(	O
lb	*(struct(*(char),long))
->	O
length	long
+	O
1	int
)	O
;	O
malloc_check	O
(	O
line	*(char)
)	O
;	O
length	long
=	O
lb	*(struct(*(char),long))
->	O
length	long
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
line	*(char)
,	O
lb	*(struct(*(char),long))
->	O
buffer	*(char)
,	O
length	long
)	O
;	O
line	*(char)
[	O
length	long
]	O
=	O
0	int
;	O
free	(*(void))->(void)
(	O
lb	*(struct(*(char),long))
->	O
buffer	*(char)
)	O
;	O
linebuffer_reset	(*(struct(*(char),long)))->(int)
(	O
lb	*(struct(*(char),long))
)	O
;	O
return	O
(	O
line	*(char)
)	O
;	O
}	O
else	O
{	O
if	O
(	O
lb	*(struct(*(char),long))
->	O
buffer	*(char)
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
lb	*(struct(*(char),long))
->	O
buffer	*(char)
)	O
;	O
linebuffer_reset	(*(struct(*(char),long)))->(int)
(	O
lb	*(struct(*(char),long))
)	O
;	O
return	O
(	O
NULL	O
)	O
;	O
}	O
}	O
