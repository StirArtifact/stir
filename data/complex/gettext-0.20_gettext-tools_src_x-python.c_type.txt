static	O
bool	bool
extract_all	bool
=	O
false	int
;	O
static	O
hash_table	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct(*`,*`,array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*(void))),*((*(void),long)->(*(void)))),union(*((*(void))->(void)),*((*(void),*(void))->(void))),*(void),int,int,int))
keywords	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
;	O
static	O
bool	bool
default_keywords	bool
=	O
true	int
;	O
void	O
x_python_extract_all	()->(void)
(	O
)	O
{	O
extract_all	bool
=	O
true	int
;	O
}	O
void	O
x_python_keyword	(*(char))->(void)
(	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
if	O
(	O
name	*(char)
==	O
NULL	O
)	O
default_keywords	bool
=	O
false	int
;	O
else	O
{	O
const	O
char	O
*	O
end	*(char)
;	O
struct	O
callshape	struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))
shape	*(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
;	O
const	O
char	O
*	O
colon	*(char)
;	O
if	O
(	O
keywords	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
.	O
table	*(struct)
==	O
NULL	O
)	O
hash_init	(*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),long)->(int)
(	O
&	O
keywords	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
,	O
100	int
)	O
;	O
split_keywordspec	(*(char),*(*(char)),*(struct(int,int,int,bool,bool,int,struct(*(*`),long,long))))->(void)
(	O
name	*(char)
,	O
&	O
end	*(char)
,	O
&	O
shape	*(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
)	O
;	O
colon	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
name	*(char)
,	O
':'	O
)	O
;	O
if	O
(	O
colon	*(char)
==	O
NULL	O
||	O
colon	*(char)
>=	O
end	*(char)
)	O
insert_keyword_callshape	(*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),*(char),long,*(struct(int,int,int,bool,bool,int,struct(*(*`),long,long))))->(void)
(	O
&	O
keywords	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
,	O
name	*(char)
,	O
end	*(char)
-	O
name	*(char)
,	O
&	O
shape	*(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))
)	O
;	O
}	O
}	O
static	O
void	O
init_keywords	()->(void)
(	O
)	O
{	O
if	O
(	O
default_keywords	bool
)	O
{	O
x_python_keyword	(*(char))->(void)
(	O
"gettext"	*(char)
)	O
;	O
x_python_keyword	(*(char))->(void)
(	O
"ugettext"	*(char)
)	O
;	O
x_python_keyword	(*(char))->(void)
(	O
"dgettext:2"	*(char)
)	O
;	O
x_python_keyword	(*(char))->(void)
(	O
"ngettext:1,2"	*(char)
)	O
;	O
x_python_keyword	(*(char))->(void)
(	O
"ungettext:1,2"	*(char)
)	O
;	O
x_python_keyword	(*(char))->(void)
(	O
"dngettext:2,3"	*(char)
)	O
;	O
x_python_keyword	(*(char))->(void)
(	O
"_"	*(char)
)	O
;	O
default_keywords	bool
=	O
false	int
;	O
}	O
}	O
void	O
init_flag_table_python	()->(void)
(	O
)	O
{	O
xgettext_record_flag	(*(char))->(void)
(	O
"gettext:1:pass-python-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"ugettext:1:pass-python-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"dgettext:2:pass-python-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"ngettext:1:pass-python-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"ngettext:2:pass-python-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"ungettext:1:pass-python-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"ungettext:2:pass-python-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"dngettext:2:pass-python-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"dngettext:3:pass-python-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"_:1:pass-python-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"gettext:1:pass-python-brace-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"ugettext:1:pass-python-brace-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"dgettext:2:pass-python-brace-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"ngettext:1:pass-python-brace-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"ngettext:2:pass-python-brace-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"ungettext:1:pass-python-brace-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"ungettext:2:pass-python-brace-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"dngettext:2:pass-python-brace-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"dngettext:3:pass-python-brace-format"	*(char)
)	O
;	O
xgettext_record_flag	(*(char))->(void)
(	O
"_:1:pass-python-brace-format"	*(char)
)	O
;	O
}	O
static	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
static	O
int	O
phase0_getc	()->(int)
(	O
)	O
{	O
int	O
c	int
;	O
c	int
=	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
{	O
if	O
(	O
ferror	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"error while reading \"%s\""	*(char)
)	O
,	O
real_file_name	*(char)
)	O
;	O
return	O
EOF	O
;	O
}	O
if	O
(	O
c	int
==	O
'\r'	O
)	O
{	O
int	O
c1	int
=	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
c1	int
!=	O
EOF	O
&&	O
c1	int
!=	O
'\n'	O
)	O
ungetc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
c1	int
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
return	O
'\n'	O
;	O
}	O
return	O
c	int
;	O
}	O
static	O
inline	O
void	O
phase0_ungetc	(int)->(void)
(	O
int	O
c	int
)	O
{	O
if	O
(	O
c	int
!=	O
EOF	O
)	O
ungetc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
c	int
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
static	O
unsigned	O
char	O
phase1_pushback	array(char)
[	O
MAX_PHASE1_PUSHBACK	int
]	O
;	O
static	O
int	O
phase1_pushback_length	int
;	O
static	O
int	O
phase1_getc	()->(int)
(	O
)	O
{	O
int	O
c	int
;	O
if	O
(	O
phase1_pushback_length	int
)	O
c	int
=	O
phase1_pushback	array(char)
[	O
--	O
phase1_pushback_length	int
]	O
;	O
else	O
c	int
=	O
phase0_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
++	O
line_number	long
;	O
return	O
c	int
;	O
}	O
static	O
void	O
phase1_ungetc	(int)->(void)
(	O
int	O
c	int
)	O
{	O
if	O
(	O
c	int
!=	O
EOF	O
)	O
{	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
--	O
line_number	long
;	O
if	O
(	O
phase1_pushback_length	int
==	O
SIZEOF	O
(	O
phase1_pushback	array(char)
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
phase1_pushback	array(char)
[	O
phase1_pushback_length	int
++	O
]	O
=	O
c	int
;	O
}	O
}	O
static	O
lexical_context_ty	enum(int,int,int,int,int,int)
lexical_context	enum(int,int,int,int,int,int)
;	O
static	O
int	O
phase2_pushback	array(int)
[	O
max	int
(	O
9	int
,	O
UNINAME_MAX	int
+	O
3	int
)	O
]	O
;	O
static	O
int	O
phase2_pushback_length	int
;	O
static	O
int	O
phase2_getc	()->(int)
(	O
)	O
{	O
if	O
(	O
phase2_pushback_length	int
)	O
return	O
phase2_pushback	array(int)
[	O
--	O
phase2_pushback_length	int
]	O
;	O
if	O
(	O
xgettext_current_source_encoding	*(char)
==	O
po_charset_ascii	*(char)
)	O
{	O
int	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
return	O
UEOF	O
;	O
if	O
(	O
!	O
c_isascii	(int)->(bool)
(	O
c	int
)	O
)	O
{	O
multiline_error	(*(char),*(char))->(void)
(	O
xstrdup	(*(char))->(*(char))
(	O
""	*(char)
)	O
,	O
xasprintf	(*(char))->(*(char))
(	O
"%s\n%s\n"	*(char)
,	O
non_ascii_error_message	(enum(int,int,int,int,int,int),*(char),long)->(*(char))
(	O
lexical_context	enum(int,int,int,int,int,int)
,	O
real_file_name	*(char)
,	O
line_number	long
)	O
,	O
_	O
(	O
"Please specify the source encoding through --from-code or through a comment\nas specified in https://www.python.org/peps/pep-0263.html.\n"	*(char)
)	O
)	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
return	O
c	int
;	O
}	O
else	O
if	O
(	O
xgettext_current_source_encoding	*(char)
!=	O
po_charset_utf8	*(char)
)	O
{	O
unsigned	O
char	O
buf	*(char)
[	O
MAX_PHASE1_PUSHBACK	int
]	O
;	O
size_t	long
bufcount	long
;	O
int	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
return	O
UEOF	O
;	O
buf	*(char)
[	O
0	int
]	O
=	O
(	O
unsigned	O
char	O
)	O
c	int
;	O
bufcount	long
=	O
1	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
unsigned	O
char	O
scratchbuf	array(char)
[	O
6	int
]	O
;	O
const	O
char	O
*	O
inptr	*(char)
=	O
(	O
const	O
char	O
*	O
)	O
&	O
buf	*(char)
[	O
0	int
]	O
;	O
size_t	long
insize	long
=	O
bufcount	long
;	O
char	O
*	O
outptr	*(char)
=	O
(	O
char	O
*	O
)	O
&	O
scratchbuf	array(char)
[	O
0	int
]	O
;	O
size_t	long
outsize	long
=	O
sizeof	O
(	O
scratchbuf	array(char)
)	O
;	O
size_t	long
res	long
=	O
iconv	(*(void),*(*(char)),*(long),*(*(char)),*(long))->(long)
(	O
xgettext_current_source_iconv	*(void)
,	O
(	O
ICONV_CONST	O
char	O
*	O
*	O
)	O
&	O
inptr	*(char)
,	O
&	O
insize	long
,	O
&	O
outptr	*(char)
,	O
&	O
outsize	long
)	O
;	O
if	O
(	O
(	O
insize	long
<	O
bufcount	long
)	O
!=	O
(	O
outsize	long
<	O
sizeof	O
(	O
scratchbuf	array(char)
)	O
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
if	O
(	O
outsize	long
==	O
sizeof	O
(	O
scratchbuf	array(char)
)	O
)	O
{	O
if	O
(	O
res	long
!=	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
if	O
(	O
errno	O
==	O
EILSEQ	int
)	O
{	O
multiline_error	(*(char),*(char))->(void)
(	O
xstrdup	(*(char))->(*(char))
(	O
""	*(char)
)	O
,	O
xasprintf	(*(char))->(*(char))
(	O
_	O
(	O
"%s:%d: Invalid multibyte sequence.\nPlease specify the correct source encoding through --from-code or through a\ncomment as specified in https://www.python.org/peps/pep-0263.html.\n"	*(char)
)	O
,	O
real_file_name	*(char)
,	O
line_number	long
)	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
else	O
if	O
(	O
errno	O
==	O
EINVAL	int
)	O
{	O
int	O
c	int
;	O
if	O
(	O
bufcount	long
==	O
MAX_PHASE1_PUSHBACK	int
)	O
{	O
multiline_error	(*(char),*(char))->(void)
(	O
xstrdup	(*(char))->(*(char))
(	O
""	*(char)
)	O
,	O
xasprintf	(*(char))->(*(char))
(	O
_	O
(	O
"%s:%d: Long incomplete multibyte sequence.\nPlease specify the correct source encoding through --from-code or through a\ncomment as specified in https://www.python.org/peps/pep-0263.html.\n"	*(char)
)	O
,	O
real_file_name	*(char)
,	O
line_number	long
)	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
{	O
multiline_error	(*(char),*(char))->(void)
(	O
xstrdup	(*(char))->(*(char))
(	O
""	*(char)
)	O
,	O
xasprintf	(*(char))->(*(char))
(	O
_	O
(	O
"%s:%d: Incomplete multibyte sequence at end of file.\nPlease specify the correct source encoding through --from-code or through a\ncomment as specified in https://www.python.org/peps/pep-0263.html.\n"	*(char)
)	O
,	O
real_file_name	*(char)
,	O
line_number	long
)	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
{	O
multiline_error	(*(char),*(char))->(void)
(	O
xstrdup	(*(char))->(*(char))
(	O
""	*(char)
)	O
,	O
xasprintf	(*(char))->(*(char))
(	O
_	O
(	O
"%s:%d: Incomplete multibyte sequence at end of line.\nPlease specify the correct source encoding through --from-code or through a\ncomment as specified in https://www.python.org/peps/pep-0263.html.\n"	*(char)
)	O
,	O
real_file_name	*(char)
,	O
line_number	long
-	O
1	int
)	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
buf	*(char)
[	O
bufcount	long
++	O
]	O
=	O
(	O
unsigned	O
char	O
)	O
c	int
;	O
}	O
else	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"%s:%d: iconv failure"	*(char)
)	O
,	O
real_file_name	*(char)
,	O
line_number	long
)	O
;	O
}	O
else	O
{	O
size_t	long
outbytes	long
=	O
sizeof	O
(	O
scratchbuf	array(char)
)	O
-	O
outsize	long
;	O
size_t	long
bytes	long
=	O
bufcount	long
-	O
insize	long
;	O
ucs4_t	int
uc	int
;	O
if	O
(	O
bytes	long
==	O
0	int
)	O
abort	()->(void)
(	O
)	O
;	O
if	O
(	O
outbytes	long
==	O
0	int
)	O
abort	()->(void)
(	O
)	O
;	O
while	O
(	O
insize	long
>	O
0	int
)	O
phase1_ungetc	(int)->(void)
(	O
buf	*(char)
[	O
--	O
insize	long
]	O
)	O
;	O
if	O
(	O
u8_mbtoucr	(*(int),*(char),long)->(int)
(	O
&	O
uc	int
,	O
scratchbuf	array(char)
,	O
outbytes	long
)	O
<	O
(	O
int	O
)	O
outbytes	long
)	O
{	O
multiline_error	(*(char),*(char))->(void)
(	O
xstrdup	(*(char))->(*(char))
(	O
""	*(char)
)	O
,	O
xasprintf	(*(char))->(*(char))
(	O
_	O
(	O
"%s:%d: Invalid multibyte sequence.\nPlease specify the source encoding through --from-code or through a comment\nas specified in https://www.python.org/peps/pep-0263.html.\n"	*(char)
)	O
,	O
real_file_name	*(char)
,	O
line_number	long
)	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
return	O
uc	int
;	O
}	O
}	O
}	O
else	O
{	O
unsigned	O
char	O
buf	*(char)
[	O
6	int
]	O
;	O
unsigned	O
int	O
count	int
;	O
int	O
c	int
;	O
ucs4_t	int
uc	int
;	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
return	O
UEOF	O
;	O
buf	*(char)
[	O
0	int
]	O
=	O
c	int
;	O
count	int
=	O
1	int
;	O
if	O
(	O
buf	*(char)
[	O
0	int
]	O
>=	O
0xc0	int
)	O
{	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
return	O
UEOF	O
;	O
buf	*(char)
[	O
1	int
]	O
=	O
c	int
;	O
count	int
=	O
2	int
;	O
}	O
if	O
(	O
buf	*(char)
[	O
0	int
]	O
>=	O
0xe0	int
&&	O
(	O
(	O
buf	*(char)
[	O
1	int
]	O
^	O
0x80	int
)	O
<	O
0x40	int
)	O
)	O
{	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
return	O
UEOF	O
;	O
buf	*(char)
[	O
2	int
]	O
=	O
c	int
;	O
count	int
=	O
3	int
;	O
}	O
if	O
(	O
buf	*(char)
[	O
0	int
]	O
>=	O
0xf0	int
&&	O
(	O
(	O
buf	*(char)
[	O
1	int
]	O
^	O
0x80	int
)	O
<	O
0x40	int
)	O
&&	O
(	O
(	O
buf	*(char)
[	O
2	int
]	O
^	O
0x80	int
)	O
<	O
0x40	int
)	O
)	O
{	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
return	O
UEOF	O
;	O
buf	*(char)
[	O
3	int
]	O
=	O
c	int
;	O
count	int
=	O
4	int
;	O
}	O
if	O
(	O
buf	*(char)
[	O
0	int
]	O
>=	O
0xf8	int
&&	O
(	O
(	O
buf	*(char)
[	O
1	int
]	O
^	O
0x80	int
)	O
<	O
0x40	int
)	O
&&	O
(	O
(	O
buf	*(char)
[	O
2	int
]	O
^	O
0x80	int
)	O
<	O
0x40	int
)	O
&&	O
(	O
(	O
buf	*(char)
[	O
3	int
]	O
^	O
0x80	int
)	O
<	O
0x40	int
)	O
)	O
{	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
return	O
UEOF	O
;	O
buf	*(char)
[	O
4	int
]	O
=	O
c	int
;	O
count	int
=	O
5	int
;	O
}	O
if	O
(	O
buf	*(char)
[	O
0	int
]	O
>=	O
0xfc	int
&&	O
(	O
(	O
buf	*(char)
[	O
1	int
]	O
^	O
0x80	int
)	O
<	O
0x40	int
)	O
&&	O
(	O
(	O
buf	*(char)
[	O
2	int
]	O
^	O
0x80	int
)	O
<	O
0x40	int
)	O
&&	O
(	O
(	O
buf	*(char)
[	O
3	int
]	O
^	O
0x80	int
)	O
<	O
0x40	int
)	O
&&	O
(	O
(	O
buf	*(char)
[	O
4	int
]	O
^	O
0x80	int
)	O
<	O
0x40	int
)	O
)	O
{	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
return	O
UEOF	O
;	O
buf	*(char)
[	O
5	int
]	O
=	O
c	int
;	O
count	int
=	O
6	int
;	O
}	O
u8_mbtouc	(*(int),*(char),long)->(int)
(	O
&	O
uc	int
,	O
buf	*(char)
,	O
count	int
)	O
;	O
return	O
uc	int
;	O
}	O
}	O
static	O
void	O
phase2_ungetc	(int)->(void)
(	O
int	O
c	int
)	O
{	O
if	O
(	O
c	int
!=	O
UEOF	O
)	O
{	O
if	O
(	O
phase2_pushback_length	int
==	O
SIZEOF	O
(	O
phase2_pushback	array(int)
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
phase2_pushback	array(int)
[	O
phase2_pushback_length	int
++	O
]	O
=	O
c	int
;	O
}	O
}	O
static	O
struct	O
mixed_string_buffer	struct(*(*(struct(char,long,array(char)))),long,long,int,*(char),long,long,short,enum(int,int,int,int,int,int),*(char),int)
comment_buffer	struct(*(*(struct(char,long,array(char)))),long,long,int,*(char),long,long,short,enum(int,int,int,int,int,int),*(char),int)
;	O
static	O
inline	O
void	O
comment_start	()->(void)
(	O
)	O
{	O
mixed_string_buffer_init	(*(struct(*(*(struct`)),long,long,int,*(char),long,long,short,enum(int,int,int,int,int,int),*(char),int)),enum(int,int,int,int,int,int),*(char),int)->(void)
(	O
&	O
comment_buffer	struct(*(*(struct(char,long,array(char)))),long,long,int,*(char),long,long,short,enum(int,int,int,int,int,int),*(char),int)
,	O
lc_comment	int
,	O
logical_file_name	*(char)
,	O
line_number	long
)	O
;	O
}	O
static	O
inline	O
bool	bool
comment_at_start	()->(bool)
(	O
)	O
{	O
return	O
mixed_string_buffer_is_empty	(*(struct(*(*(struct`)),long,long,int,*(char),long,long,short,enum(int,int,int,int,int,int),*(char),int)))->(bool)
(	O
&	O
comment_buffer	struct(*(*(struct(char,long,array(char)))),long,long,int,*(char),long,long,short,enum(int,int,int,int,int,int),*(char),int)
)	O
;	O
}	O
static	O
inline	O
void	O
comment_add	(int)->(void)
(	O
int	O
c	int
)	O
{	O
mixed_string_buffer_append_unicode	(*(struct(*(*(struct`)),long,long,int,*(char),long,long,short,enum(int,int,int,int,int,int),*(char),int)),int)->(void)
(	O
&	O
comment_buffer	struct(*(*(struct(char,long,array(char)))),long,long,int,*(char),long,long,short,enum(int,int,int,int,int,int),*(char),int)
,	O
c	int
)	O
;	O
}	O
static	O
inline	O
const	O
char	O
*	O
comment_line_end	()->(*(char))
(	O
)	O
{	O
char	O
*	O
buffer	*(char)
=	O
mixed_string_contents_free1	(*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)))->(*(char))
(	O
mixed_string_buffer_result	(*(struct(*(*(struct`)),long,long,int,*(char),long,long,short,enum(int,int,int,int,int,int),*(char),int)))->(*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)))
(	O
&	O
comment_buffer	struct(*(*(struct(char,long,array(char)))),long,long,int,*(char),long,long,short,enum(int,int,int,int,int,int),*(char),int)
)	O
)	O
;	O
size_t	long
buflen	long
=	O
strlen	(*(char))->(long)
(	O
buffer	*(char)
)	O
;	O
while	O
(	O
buflen	long
>=	O
1	int
&&	O
(	O
buffer	*(char)
[	O
buflen	long
-	O
1	int
]	O
==	O
' '	O
||	O
buffer	*(char)
[	O
buflen	long
-	O
1	int
]	O
==	O
'\t'	O
)	O
)	O
--	O
buflen	long
;	O
buffer	*(char)
[	O
buflen	long
]	O
=	O
'\0'	O
;	O
savable_comment_add	(*(char))->(void)
(	O
buffer	*(char)
)	O
;	O
lexical_context	enum(int,int,int,int,int,int)
=	O
lc_outside	int
;	O
return	O
buffer	*(char)
;	O
}	O
static	O
int	O
last_comment_line	int
;	O
static	O
int	O
last_non_comment_line	int
;	O
static	O
const	O
char	O
*	O
xgettext_current_file_source_encoding	*(char)
;	O
static	O
iconv_t	*(void)
xgettext_current_file_source_iconv	*(void)
;	O
static	O
inline	O
void	O
set_current_file_source_encoding	(*(char))->(void)
(	O
const	O
char	O
*	O
canon_encoding	*(char)
)	O
{	O
xgettext_current_file_source_encoding	*(char)
=	O
canon_encoding	*(char)
;	O
if	O
(	O
xgettext_current_file_source_encoding	*(char)
!=	O
po_charset_ascii	*(char)
&&	O
xgettext_current_file_source_encoding	*(char)
!=	O
po_charset_utf8	*(char)
)	O
{	O
iconv_t	*(void)
cd	*(void)
;	O
cd	*(void)
=	O
iconv_open	(*(char),*(char))->(*(void))
(	O
po_charset_utf8	*(char)
,	O
xgettext_current_file_source_encoding	*(char)
)	O
;	O
if	O
(	O
cd	*(void)
==	O
(	O
iconv_t	*(void)
)	O
(	O
-	O
1	int
)	O
)	O
error_at_line	(int,int,*(char),int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
logical_file_name	*(char)
,	O
line_number	long
-	O
1	int
,	O
_	O
(	O
"Cannot convert from \"%s\" to \"%s\". %s relies on iconv(), and iconv() does not support this conversion."	*(char)
)	O
,	O
xgettext_current_file_source_encoding	*(char)
,	O
po_charset_utf8	*(char)
,	O
basename	(*(char))->(*(char))
(	O
program_name	*(char)
)	O
)	O
;	O
xgettext_current_file_source_iconv	*(void)
=	O
cd	*(void)
;	O
}	O
xgettext_current_source_encoding	*(char)
=	O
xgettext_current_file_source_encoding	*(char)
;	O
xgettext_current_source_iconv	*(void)
=	O
xgettext_current_file_source_iconv	*(void)
;	O
}	O
static	O
inline	O
void	O
try_to_extract_coding	(*(char))->(void)
(	O
const	O
char	O
*	O
comment	*(struct(*(*(char)),long,long))
)	O
{	O
const	O
char	O
*	O
p	*(void)
=	O
c_strstr	(*(char),*(char))->(*(char))
(	O
comment	*(struct(*(*(char)),long,long))
,	O
"coding"	*(char)
)	O
;	O
if	O
(	O
p	*(void)
!=	O
NULL	O
)	O
{	O
p	*(void)
+=	O
6	int
;	O
if	O
(	O
*	O
p	*(void)
==	O
':'	O
||	O
*	O
p	*(void)
==	O
'='	O
)	O
{	O
p	*(void)
++	O
;	O
while	O
(	O
*	O
p	*(void)
==	O
' '	O
||	O
*	O
p	*(void)
==	O
'\t'	O
)	O
p	*(void)
++	O
;	O
{	O
const	O
char	O
*	O
encoding_start	*(char)
=	O
p	*(void)
;	O
while	O
(	O
c_isalnum	(int)->(bool)
(	O
*	O
p	*(void)
)	O
||	O
*	O
p	*(void)
==	O
'-'	O
||	O
*	O
p	*(void)
==	O
'_'	O
||	O
*	O
p	*(void)
==	O
'.'	O
)	O
p	*(void)
++	O
;	O
{	O
const	O
char	O
*	O
encoding_end	*(char)
=	O
p	*(void)
;	O
if	O
(	O
encoding_end	*(char)
>	O
encoding_start	*(char)
)	O
{	O
size_t	long
encoding_len	long
=	O
encoding_end	*(char)
-	O
encoding_start	*(char)
;	O
char	O
*	O
encoding	*(char)
=	O
XNMALLOC	O
(	O
encoding_len	long
+	O
1	int
,	O
char	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
encoding	*(char)
,	O
encoding_start	*(char)
,	O
encoding_len	long
)	O
;	O
encoding	*(char)
[	O
encoding_len	long
]	O
=	O
'\0'	O
;	O
{	O
const	O
char	O
*	O
canon_encoding	*(char)
=	O
po_charset_canonicalize	(*(char))->(*(char))
(	O
encoding	*(char)
)	O
;	O
if	O
(	O
canon_encoding	*(char)
==	O
NULL	O
)	O
{	O
error_at_line	(int,int,*(char),int,*(char))->(void)
(	O
0	int
,	O
0	int
,	O
logical_file_name	*(char)
,	O
line_number	long
-	O
1	int
,	O
_	O
(	O
"Unknown encoding \"%s\". Proceeding with ASCII instead."	*(char)
)	O
,	O
encoding	*(char)
)	O
;	O
canon_encoding	*(char)
=	O
po_charset_ascii	*(char)
;	O
}	O
set_current_file_source_encoding	(*(char))->(void)
(	O
canon_encoding	*(char)
)	O
;	O
}	O
free	(*(void))->(void)
(	O
encoding	*(char)
)	O
;	O
}	O
}	O
}	O
}	O
}	O
}	O
static	O
bool	bool
continuation_or_nonblank_line	bool
=	O
false	int
;	O
static	O
int	O
phase3_getc	()->(int)
(	O
)	O
{	O
int	O
c	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'\\'	O
)	O
{	O
c	int
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
'\n'	O
)	O
{	O
phase2_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
return	O
'\\'	O
;	O
}	O
continuation_or_nonblank_line	bool
=	O
true	int
;	O
}	O
else	O
if	O
(	O
c	int
==	O
'#'	O
)	O
{	O
const	O
char	O
*	O
comment	*(struct(*(*(char)),long,long))
;	O
last_comment_line	int
=	O
line_number	long
;	O
comment_start	()->(void)
(	O
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
UEOF	O
||	O
c	int
==	O
'\n'	O
)	O
break	O
;	O
if	O
(	O
!	O
(	O
comment_at_start	()->(bool)
(	O
)	O
&&	O
(	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
)	O
)	O
)	O
comment_add	(int)->(void)
(	O
c	int
)	O
;	O
}	O
comment	*(struct(*(*(char)),long,long))
=	O
comment_line_end	()->(*(char))
(	O
)	O
;	O
if	O
(	O
line_number	long
-	O
1	int
<=	O
2	int
&&	O
!	O
continuation_or_nonblank_line	bool
)	O
try_to_extract_coding	(*(char))->(void)
(	O
comment	*(struct(*(*(char)),long,long))
)	O
;	O
continuation_or_nonblank_line	bool
=	O
false	int
;	O
return	O
c	int
;	O
}	O
else	O
{	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
continuation_or_nonblank_line	bool
=	O
false	int
;	O
else	O
if	O
(	O
!	O
(	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\f'	O
)	O
)	O
continuation_or_nonblank_line	bool
=	O
true	int
;	O
return	O
c	int
;	O
}	O
}	O
}	O
static	O
void	O
phase3_ungetc	(int)->(void)
(	O
int	O
c	int
)	O
{	O
phase2_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
}	O
enum	O
token_type_ty	enum(int,int,int,int,int,int,int,int,int,int)
{	O
token_type_eof	int
,	O
token_type_lparen	int
,	O
token_type_rparen	int
,	O
token_type_comma	int
,	O
token_type_lbracket	int
,	O
token_type_rbracket	int
,	O
token_type_string	int
,	O
token_type_symbol	int
,	O
token_type_plus	int
,	O
token_type_other	int
}	O
;	O
typedef	O
enum	O
token_type_ty	enum(int,int,int,int,int,int,int,int,int,int)
token_type_ty	enum(int,int,int,int,int,int,int,int,int,int)
;	O
typedef	O
struct	O
token_ty	struct
token_ty	struct
;	O
struct	O
token_ty	struct
{	O
token_type_ty	enum(int,int,int,int,int,int,int,int,int,int)
type	char
;	O
char	O
*	O
string	*(char)
;	O
mixed_string_ty	struct
*	O
mixed_string	struct(*(*(struct(char,long,array(char)))),long,enum(int,int,int,int,int,int),*(char),int)
;	O
refcounted_string_list_ty	struct
*	O
comment	*(struct(*(*(char)),long,long))
;	O
int	O
line_number	long
;	O
}	O
;	O
static	O
inline	O
void	O
free_token	(*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,long,enum(int,int,int,int,int,int),*`,int)),*(struct(int,struct`)),int)))->(void)
(	O
token_ty	struct
*	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
)	O
{	O
if	O
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
==	O
token_type_symbol	int
)	O
free	(*(void))->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
)	O
;	O
if	O
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
==	O
token_type_string	int
)	O
{	O
mixed_string_free	(*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)))->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
->	O
mixed_string	struct(*(*(struct(char,long,array(char)))),long,enum(int,int,int,int,int,int),*(char),int)
)	O
;	O
drop_reference	(*(struct(int,struct(*(*`),long,long))))->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
->	O
comment	*(struct(*(*(char)),long,long))
)	O
;	O
}	O
}	O
static	O
int	O
phase7_getuc	(int,bool,bool,bool,*(int))->(int)
(	O
int	O
quote_char	int
,	O
bool	bool
triple	bool
,	O
bool	bool
interpret_ansic	bool
,	O
bool	bool
interpret_unicode	bool
,	O
unsigned	O
int	O
*	O
backslash_counter	*(int)
)	O
{	O
int	O
c	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
UEOF	O
)	O
return	O
P7_EOF	O
;	O
if	O
(	O
c	int
==	O
quote_char	int
&&	O
(	O
interpret_ansic	bool
||	O
(	O
*	O
backslash_counter	*(int)
&	O
1	int
)	O
==	O
0	int
)	O
)	O
{	O
if	O
(	O
triple	bool
)	O
{	O
int	O
c1	int
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c1	int
==	O
quote_char	int
)	O
{	O
int	O
c2	int
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
==	O
quote_char	int
)	O
return	O
P7_STRING_END	O
;	O
phase2_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
}	O
phase2_ungetc	(int)->(void)
(	O
c1	int
)	O
;	O
return	O
UNICODE	O
(	O
c	int
)	O
;	O
}	O
else	O
return	O
P7_STRING_END	O
;	O
}	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
{	O
if	O
(	O
triple	bool
)	O
{	O
*	O
backslash_counter	*(int)
=	O
0	int
;	O
return	O
UNICODE	O
(	O
'\n'	O
)	O
;	O
}	O
if	O
(	O
!	O
(	O
interpret_ansic	bool
||	O
(	O
*	O
backslash_counter	*(int)
&	O
1	int
)	O
==	O
0	int
)	O
)	O
{	O
*	O
backslash_counter	*(int)
=	O
0	int
;	O
return	O
UNICODE	O
(	O
'\n'	O
)	O
;	O
}	O
phase2_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
error_with_progname	bool
=	O
false	int
;	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"%s:%d: warning: unterminated string"	*(char)
)	O
,	O
logical_file_name	*(char)
,	O
line_number	long
)	O
;	O
error_with_progname	bool
=	O
true	int
;	O
return	O
P7_STRING_END	O
;	O
}	O
if	O
(	O
c	int
!=	O
'\\'	O
)	O
{	O
*	O
backslash_counter	*(int)
=	O
0	int
;	O
return	O
UNICODE	O
(	O
c	int
)	O
;	O
}	O
if	O
(	O
!	O
interpret_ansic	bool
&&	O
!	O
interpret_unicode	bool
)	O
{	O
++	O
*	O
backslash_counter	*(int)
;	O
return	O
UNICODE	O
(	O
'\\'	O
)	O
;	O
}	O
c	int
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
UEOF	O
)	O
{	O
++	O
*	O
backslash_counter	*(int)
;	O
return	O
UNICODE	O
(	O
'\\'	O
)	O
;	O
}	O
if	O
(	O
interpret_ansic	bool
)	O
switch	O
(	O
c	int
)	O
{	O
case	O
'\n'	O
:	O
continue	O
;	O
case	O
'\\'	O
:	O
++	O
*	O
backslash_counter	*(int)
;	O
return	O
UNICODE	O
(	O
c	int
)	O
;	O
case	O
'\''	O
:	O
case	O
'"'	O
:	O
*	O
backslash_counter	*(int)
=	O
0	int
;	O
return	O
UNICODE	O
(	O
c	int
)	O
;	O
case	O
'a'	O
:	O
*	O
backslash_counter	*(int)
=	O
0	int
;	O
return	O
UNICODE	O
(	O
'\a'	O
)	O
;	O
case	O
'b'	O
:	O
*	O
backslash_counter	*(int)
=	O
0	int
;	O
return	O
UNICODE	O
(	O
'\b'	O
)	O
;	O
case	O
'f'	O
:	O
*	O
backslash_counter	*(int)
=	O
0	int
;	O
return	O
UNICODE	O
(	O
'\f'	O
)	O
;	O
case	O
'n'	O
:	O
*	O
backslash_counter	*(int)
=	O
0	int
;	O
return	O
UNICODE	O
(	O
'\n'	O
)	O
;	O
case	O
'r'	O
:	O
*	O
backslash_counter	*(int)
=	O
0	int
;	O
return	O
UNICODE	O
(	O
'\r'	O
)	O
;	O
case	O
't'	O
:	O
*	O
backslash_counter	*(int)
=	O
0	int
;	O
return	O
UNICODE	O
(	O
'\t'	O
)	O
;	O
case	O
'v'	O
:	O
*	O
backslash_counter	*(int)
=	O
0	int
;	O
return	O
UNICODE	O
(	O
'\v'	O
)	O
;	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
{	O
int	O
n	long
=	O
c	int
-	O
'0'	O
;	O
c	int
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
UEOF	O
)	O
{	O
if	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'7'	O
)	O
{	O
n	long
=	O
(	O
n	long
<<	O
3	int
)	O
+	O
(	O
c	int
-	O
'0'	O
)	O
;	O
c	int
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
UEOF	O
)	O
{	O
if	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'7'	O
)	O
n	long
=	O
(	O
n	long
<<	O
3	int
)	O
+	O
(	O
c	int
-	O
'0'	O
)	O
;	O
else	O
phase2_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
}	O
}	O
else	O
phase2_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
}	O
*	O
backslash_counter	*(int)
=	O
0	int
;	O
if	O
(	O
interpret_unicode	bool
)	O
return	O
UNICODE	O
(	O
n	long
)	O
;	O
else	O
return	O
(	O
unsigned	O
char	O
)	O
n	long
;	O
}	O
case	O
'x'	O
:	O
{	O
int	O
c1	int
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
int	O
n1	long
;	O
if	O
(	O
c1	int
>=	O
'0'	O
&&	O
c1	int
<=	O
'9'	O
)	O
n1	long
=	O
c1	int
-	O
'0'	O
;	O
else	O
if	O
(	O
c1	int
>=	O
'A'	O
&&	O
c1	int
<=	O
'F'	O
)	O
n1	long
=	O
c1	int
-	O
'A'	O
+	O
10	int
;	O
else	O
if	O
(	O
c1	int
>=	O
'a'	O
&&	O
c1	int
<=	O
'f'	O
)	O
n1	long
=	O
c1	int
-	O
'a'	O
+	O
10	int
;	O
else	O
n1	long
=	O
-	O
1	int
;	O
if	O
(	O
n1	long
>=	O
0	int
)	O
{	O
int	O
c2	int
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
int	O
n2	long
;	O
if	O
(	O
c2	int
>=	O
'0'	O
&&	O
c2	int
<=	O
'9'	O
)	O
n2	long
=	O
c2	int
-	O
'0'	O
;	O
else	O
if	O
(	O
c2	int
>=	O
'A'	O
&&	O
c2	int
<=	O
'F'	O
)	O
n2	long
=	O
c2	int
-	O
'A'	O
+	O
10	int
;	O
else	O
if	O
(	O
c2	int
>=	O
'a'	O
&&	O
c2	int
<=	O
'f'	O
)	O
n2	long
=	O
c2	int
-	O
'a'	O
+	O
10	int
;	O
else	O
n2	long
=	O
-	O
1	int
;	O
if	O
(	O
n2	long
>=	O
0	int
)	O
{	O
int	O
n	long
=	O
(	O
n1	long
<<	O
4	int
)	O
+	O
n2	long
;	O
*	O
backslash_counter	*(int)
=	O
0	int
;	O
if	O
(	O
interpret_unicode	bool
)	O
return	O
UNICODE	O
(	O
n	long
)	O
;	O
else	O
return	O
(	O
unsigned	O
char	O
)	O
n	long
;	O
}	O
phase2_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
}	O
phase2_ungetc	(int)->(void)
(	O
c1	int
)	O
;	O
phase2_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
++	O
*	O
backslash_counter	*(int)
;	O
return	O
UNICODE	O
(	O
'\\'	O
)	O
;	O
}	O
}	O
if	O
(	O
interpret_unicode	bool
)	O
{	O
if	O
(	O
c	int
==	O
'u'	O
)	O
{	O
unsigned	O
char	O
buf	*(char)
[	O
4	int
]	O
;	O
unsigned	O
int	O
n	long
=	O
0	int
;	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
4	int
;	O
i	long
++	O
)	O
{	O
int	O
c1	int
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c1	int
>=	O
'0'	O
&&	O
c1	int
<=	O
'9'	O
)	O
n	long
=	O
(	O
n	long
<<	O
4	int
)	O
+	O
(	O
c1	int
-	O
'0'	O
)	O
;	O
else	O
if	O
(	O
c1	int
>=	O
'A'	O
&&	O
c1	int
<=	O
'F'	O
)	O
n	long
=	O
(	O
n	long
<<	O
4	int
)	O
+	O
(	O
c1	int
-	O
'A'	O
+	O
10	int
)	O
;	O
else	O
if	O
(	O
c1	int
>=	O
'a'	O
&&	O
c1	int
<=	O
'f'	O
)	O
n	long
=	O
(	O
n	long
<<	O
4	int
)	O
+	O
(	O
c1	int
-	O
'a'	O
+	O
10	int
)	O
;	O
else	O
{	O
phase2_ungetc	(int)->(void)
(	O
c1	int
)	O
;	O
while	O
(	O
--	O
i	long
>=	O
0	int
)	O
phase2_ungetc	(int)->(void)
(	O
buf	*(char)
[	O
i	long
]	O
)	O
;	O
phase2_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
++	O
*	O
backslash_counter	*(int)
;	O
return	O
UNICODE	O
(	O
'\\'	O
)	O
;	O
}	O
buf	*(char)
[	O
i	long
]	O
=	O
c1	int
;	O
}	O
*	O
backslash_counter	*(int)
=	O
0	int
;	O
return	O
UNICODE	O
(	O
n	long
)	O
;	O
}	O
if	O
(	O
interpret_ansic	bool
)	O
{	O
if	O
(	O
c	int
==	O
'U'	O
)	O
{	O
unsigned	O
char	O
buf	*(char)
[	O
8	int
]	O
;	O
unsigned	O
int	O
n	long
=	O
0	int
;	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
8	int
;	O
i	long
++	O
)	O
{	O
int	O
c1	int
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c1	int
>=	O
'0'	O
&&	O
c1	int
<=	O
'9'	O
)	O
n	long
=	O
(	O
n	long
<<	O
4	int
)	O
+	O
(	O
c1	int
-	O
'0'	O
)	O
;	O
else	O
if	O
(	O
c1	int
>=	O
'A'	O
&&	O
c1	int
<=	O
'F'	O
)	O
n	long
=	O
(	O
n	long
<<	O
4	int
)	O
+	O
(	O
c1	int
-	O
'A'	O
+	O
10	int
)	O
;	O
else	O
if	O
(	O
c1	int
>=	O
'a'	O
&&	O
c1	int
<=	O
'f'	O
)	O
n	long
=	O
(	O
n	long
<<	O
4	int
)	O
+	O
(	O
c1	int
-	O
'a'	O
+	O
10	int
)	O
;	O
else	O
{	O
phase2_ungetc	(int)->(void)
(	O
c1	int
)	O
;	O
while	O
(	O
--	O
i	long
>=	O
0	int
)	O
phase2_ungetc	(int)->(void)
(	O
buf	*(char)
[	O
i	long
]	O
)	O
;	O
phase2_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
++	O
*	O
backslash_counter	*(int)
;	O
return	O
UNICODE	O
(	O
'\\'	O
)	O
;	O
}	O
buf	*(char)
[	O
i	long
]	O
=	O
c1	int
;	O
}	O
if	O
(	O
n	long
<	O
0x110000	int
)	O
{	O
*	O
backslash_counter	*(int)
=	O
0	int
;	O
return	O
UNICODE	O
(	O
n	long
)	O
;	O
}	O
error_with_progname	bool
=	O
false	int
;	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"%s:%d: warning: invalid Unicode character"	*(char)
)	O
,	O
logical_file_name	*(char)
,	O
line_number	long
)	O
;	O
error_with_progname	bool
=	O
true	int
;	O
while	O
(	O
--	O
i	long
>=	O
0	int
)	O
phase2_ungetc	(int)->(void)
(	O
buf	*(char)
[	O
i	long
]	O
)	O
;	O
phase2_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
++	O
*	O
backslash_counter	*(int)
;	O
return	O
UNICODE	O
(	O
'\\'	O
)	O
;	O
}	O
if	O
(	O
c	int
==	O
'N'	O
)	O
{	O
int	O
c1	int
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c1	int
==	O
'{'	O
)	O
{	O
unsigned	O
char	O
buf	*(char)
[	O
UNINAME_MAX	int
+	O
1	int
]	O
;	O
int	O
i	long
;	O
unsigned	O
int	O
n	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
UNINAME_MAX	int
;	O
i	long
++	O
)	O
{	O
int	O
c2	int
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
!	O
(	O
c2	int
>=	O
' '	O
&&	O
c2	int
<=	O
'~'	O
)	O
)	O
{	O
phase2_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
while	O
(	O
--	O
i	long
>=	O
0	int
)	O
phase2_ungetc	(int)->(void)
(	O
buf	*(char)
[	O
i	long
]	O
)	O
;	O
phase2_ungetc	(int)->(void)
(	O
c1	int
)	O
;	O
phase2_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
++	O
*	O
backslash_counter	*(int)
;	O
return	O
UNICODE	O
(	O
'\\'	O
)	O
;	O
}	O
if	O
(	O
c2	int
==	O
'}'	O
)	O
break	O
;	O
buf	*(char)
[	O
i	long
]	O
=	O
c2	int
;	O
}	O
buf	*(char)
[	O
i	long
]	O
=	O
'\0'	O
;	O
n	long
=	O
unicode_name_character	(*(char))->(int)
(	O
(	O
char	O
*	O
)	O
buf	*(char)
)	O
;	O
if	O
(	O
n	long
!=	O
UNINAME_INVALID	O
)	O
{	O
*	O
backslash_counter	*(int)
=	O
0	int
;	O
return	O
UNICODE	O
(	O
n	long
)	O
;	O
}	O
phase2_ungetc	(int)->(void)
(	O
'}'	O
)	O
;	O
while	O
(	O
--	O
i	long
>=	O
0	int
)	O
phase2_ungetc	(int)->(void)
(	O
buf	*(char)
[	O
i	long
]	O
)	O
;	O
}	O
phase2_ungetc	(int)->(void)
(	O
c1	int
)	O
;	O
phase2_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
++	O
*	O
backslash_counter	*(int)
;	O
return	O
UNICODE	O
(	O
'\\'	O
)	O
;	O
}	O
}	O
}	O
phase2_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
++	O
*	O
backslash_counter	*(int)
;	O
return	O
UNICODE	O
(	O
'\\'	O
)	O
;	O
}	O
}	O
static	O
int	O
open_pbb	int
;	O
static	O
token_ty	struct
phase5_pushback	array(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*(*`),long,long))),int))
[	O
2	int
]	O
;	O
static	O
int	O
phase5_pushback_length	int
;	O
static	O
void	O
phase5_get	(*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,long,enum(int,int,int,int,int,int),*`,int)),*(struct(int,struct`)),int)))->(void)
(	O
token_ty	struct
*	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
)	O
{	O
int	O
c	int
;	O
if	O
(	O
phase5_pushback_length	int
)	O
{	O
*	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
=	O
phase5_pushback	array(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*(*`),long,long))),int))
[	O
--	O
phase5_pushback_length	int
]	O
;	O
return	O
;	O
}	O
for	O
(	O
;	O
;	O
)	O
{	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
->	O
line_number	long
=	O
line_number	long
;	O
c	int
=	O
phase3_getc	()->(int)
(	O
)	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
UEOF	O
:	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_eof	int
;	O
return	O
;	O
case	O
' '	O
:	O
case	O
'\t'	O
:	O
case	O
'\f'	O
:	O
continue	O
;	O
case	O
'\n'	O
:	O
if	O
(	O
last_non_comment_line	int
>	O
last_comment_line	int
)	O
savable_comment_reset	()->(void)
(	O
)	O
;	O
if	O
(	O
open_pbb	int
>	O
0	int
)	O
continue	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_other	int
;	O
return	O
;	O
}	O
last_non_comment_line	int
=	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
->	O
line_number	long
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
'.'	O
:	O
{	O
int	O
c1	int
=	O
phase3_getc	()->(int)
(	O
)	O
;	O
phase3_ungetc	(int)->(void)
(	O
c1	int
)	O
;	O
if	O
(	O
!	O
(	O
c1	int
>=	O
'0'	O
&&	O
c1	int
<=	O
'9'	O
)	O
)	O
{	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_other	int
;	O
return	O
;	O
}	O
}	O
case	O
'A'	O
:	O
case	O
'B'	O
:	O
case	O
'C'	O
:	O
case	O
'D'	O
:	O
case	O
'E'	O
:	O
case	O
'F'	O
:	O
case	O
'G'	O
:	O
case	O
'H'	O
:	O
case	O
'I'	O
:	O
case	O
'J'	O
:	O
case	O
'K'	O
:	O
case	O
'L'	O
:	O
case	O
'M'	O
:	O
case	O
'N'	O
:	O
case	O
'O'	O
:	O
case	O
'P'	O
:	O
case	O
'Q'	O
:	O
case	O
'S'	O
:	O
case	O
'T'	O
:	O
case	O
'V'	O
:	O
case	O
'W'	O
:	O
case	O
'X'	O
:	O
case	O
'Y'	O
:	O
case	O
'Z'	O
:	O
case	O
'_'	O
:	O
case	O
'a'	O
:	O
case	O
'b'	O
:	O
case	O
'c'	O
:	O
case	O
'd'	O
:	O
case	O
'e'	O
:	O
case	O
'f'	O
:	O
case	O
'g'	O
:	O
case	O
'h'	O
:	O
case	O
'i'	O
:	O
case	O
'j'	O
:	O
case	O
'k'	O
:	O
case	O
'l'	O
:	O
case	O
'm'	O
:	O
case	O
'n'	O
:	O
case	O
'o'	O
:	O
case	O
'p'	O
:	O
case	O
'q'	O
:	O
case	O
's'	O
:	O
case	O
't'	O
:	O
case	O
'v'	O
:	O
case	O
'w'	O
:	O
case	O
'x'	O
:	O
case	O
'y'	O
:	O
case	O
'z'	O
:	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
symbol	O
:	O
{	O
static	O
char	O
*	O
buffer	*(char)
;	O
static	O
int	O
bufmax	int
;	O
int	O
bufpos	int
;	O
bufpos	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
bufpos	int
>=	O
bufmax	int
)	O
{	O
bufmax	int
=	O
2	int
*	O
bufmax	int
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	int
)	O
;	O
}	O
buffer	*(char)
[	O
bufpos	int
++	O
]	O
=	O
c	int
;	O
c	int
=	O
phase3_getc	()->(int)
(	O
)	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
'A'	O
:	O
case	O
'B'	O
:	O
case	O
'C'	O
:	O
case	O
'D'	O
:	O
case	O
'E'	O
:	O
case	O
'F'	O
:	O
case	O
'G'	O
:	O
case	O
'H'	O
:	O
case	O
'I'	O
:	O
case	O
'J'	O
:	O
case	O
'K'	O
:	O
case	O
'L'	O
:	O
case	O
'M'	O
:	O
case	O
'N'	O
:	O
case	O
'O'	O
:	O
case	O
'P'	O
:	O
case	O
'Q'	O
:	O
case	O
'R'	O
:	O
case	O
'S'	O
:	O
case	O
'T'	O
:	O
case	O
'U'	O
:	O
case	O
'V'	O
:	O
case	O
'W'	O
:	O
case	O
'X'	O
:	O
case	O
'Y'	O
:	O
case	O
'Z'	O
:	O
case	O
'_'	O
:	O
case	O
'a'	O
:	O
case	O
'b'	O
:	O
case	O
'c'	O
:	O
case	O
'd'	O
:	O
case	O
'e'	O
:	O
case	O
'f'	O
:	O
case	O
'g'	O
:	O
case	O
'h'	O
:	O
case	O
'i'	O
:	O
case	O
'j'	O
:	O
case	O
'k'	O
:	O
case	O
'l'	O
:	O
case	O
'm'	O
:	O
case	O
'n'	O
:	O
case	O
'o'	O
:	O
case	O
'p'	O
:	O
case	O
'q'	O
:	O
case	O
'r'	O
:	O
case	O
's'	O
:	O
case	O
't'	O
:	O
case	O
'u'	O
:	O
case	O
'v'	O
:	O
case	O
'w'	O
:	O
case	O
'x'	O
:	O
case	O
'y'	O
:	O
case	O
'z'	O
:	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
continue	O
;	O
default	O
:	O
phase3_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
break	O
;	O
}	O
break	O
;	O
}	O
if	O
(	O
bufpos	int
>=	O
bufmax	int
)	O
{	O
bufmax	int
=	O
2	int
*	O
bufmax	int
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	int
)	O
;	O
}	O
buffer	*(char)
[	O
bufpos	int
]	O
=	O
'\0'	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
->	O
string	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
buffer	*(char)
)	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_symbol	int
;	O
return	O
;	O
}	O
{	O
int	O
quote_char	int
;	O
bool	bool
interpret_ansic	bool
;	O
bool	bool
interpret_unicode	bool
;	O
bool	bool
triple	bool
;	O
unsigned	O
int	O
backslash_counter	*(int)
;	O
case	O
'R'	O
:	O
case	O
'r'	O
:	O
{	O
int	O
c1	int
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c1	int
==	O
'"'	O
||	O
c1	int
==	O
'\''	O
)	O
{	O
quote_char	int
=	O
c1	int
;	O
interpret_ansic	bool
=	O
false	int
;	O
interpret_unicode	bool
=	O
false	int
;	O
goto	O
string	*(char)
;	O
}	O
phase2_ungetc	(int)->(void)
(	O
c1	int
)	O
;	O
goto	O
symbol	O
;	O
}	O
case	O
'U'	O
:	O
case	O
'u'	O
:	O
{	O
int	O
c1	int
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c1	int
==	O
'"'	O
||	O
c1	int
==	O
'\''	O
)	O
{	O
quote_char	int
=	O
c1	int
;	O
interpret_ansic	bool
=	O
true	int
;	O
interpret_unicode	bool
=	O
true	int
;	O
goto	O
string	*(char)
;	O
}	O
if	O
(	O
c1	int
==	O
'R'	O
||	O
c1	int
==	O
'r'	O
)	O
{	O
int	O
c2	int
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
==	O
'"'	O
||	O
c2	int
==	O
'\''	O
)	O
{	O
quote_char	int
=	O
c2	int
;	O
interpret_ansic	bool
=	O
false	int
;	O
interpret_unicode	bool
=	O
true	int
;	O
goto	O
string	*(char)
;	O
}	O
phase2_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
}	O
phase2_ungetc	(int)->(void)
(	O
c1	int
)	O
;	O
goto	O
symbol	O
;	O
}	O
case	O
'"'	O
:	O
case	O
'\''	O
:	O
quote_char	int
=	O
c	int
;	O
interpret_ansic	bool
=	O
true	int
;	O
interpret_unicode	bool
=	O
false	int
;	O
string	*(char)
:	O
triple	bool
=	O
false	int
;	O
lexical_context	enum(int,int,int,int,int,int)
=	O
lc_string	int
;	O
{	O
int	O
c1	int
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c1	int
==	O
quote_char	int
)	O
{	O
int	O
c2	int
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
==	O
quote_char	int
)	O
triple	bool
=	O
true	int
;	O
else	O
{	O
phase2_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
phase2_ungetc	(int)->(void)
(	O
c1	int
)	O
;	O
}	O
}	O
else	O
phase2_ungetc	(int)->(void)
(	O
c1	int
)	O
;	O
}	O
backslash_counter	*(int)
=	O
0	int
;	O
{	O
struct	O
mixed_string_buffer	struct(*(*(struct(char,long,array(char)))),long,long,int,*(char),long,long,short,enum(int,int,int,int,int,int),*(char),int)
msb	struct(*(*(struct(char,long,array(char)))),long,long,int,*(char),long,long,short,enum(int,int,int,int,int,int),*(char),int)
;	O
mixed_string_buffer_init	(*(struct(*(*(struct`)),long,long,int,*(char),long,long,short,enum(int,int,int,int,int,int),*(char),int)),enum(int,int,int,int,int,int),*(char),int)->(void)
(	O
&	O
msb	struct(*(*(struct(char,long,array(char)))),long,long,int,*(char),long,long,short,enum(int,int,int,int,int,int),*(char),int)
,	O
lexical_context	enum(int,int,int,int,int,int)
,	O
logical_file_name	*(char)
,	O
line_number	long
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
int	O
uc	int
=	O
phase7_getuc	(int,bool,bool,bool,*(int))->(int)
(	O
quote_char	int
,	O
triple	bool
,	O
interpret_ansic	bool
,	O
interpret_unicode	bool
,	O
&	O
backslash_counter	*(int)
)	O
;	O
msb	struct(*(*(struct(char,long,array(char)))),long,long,int,*(char),long,long,short,enum(int,int,int,int,int,int),*(char),int)
.	O
line_number	long
=	O
line_number	long
;	O
if	O
(	O
uc	int
==	O
P7_EOF	O
||	O
uc	int
==	O
P7_STRING_END	O
)	O
break	O
;	O
if	O
(	O
IS_UNICODE	O
(	O
uc	int
)	O
)	O
{	O
assert	O
(	O
UNICODE_VALUE	O
(	O
uc	int
)	O
>=	O
0	int
&&	O
UNICODE_VALUE	O
(	O
uc	int
)	O
<	O
0x110000	int
)	O
;	O
mixed_string_buffer_append_unicode	(*(struct(*(*(struct`)),long,long,int,*(char),long,long,short,enum(int,int,int,int,int,int),*(char),int)),int)->(void)
(	O
&	O
msb	struct(*(*(struct(char,long,array(char)))),long,long,int,*(char),long,long,short,enum(int,int,int,int,int,int),*(char),int)
,	O
UNICODE_VALUE	O
(	O
uc	int
)	O
)	O
;	O
}	O
else	O
mixed_string_buffer_append_char	(*(struct(*(*(struct`)),long,long,int,*(char),long,long,short,enum(int,int,int,int,int,int),*(char),int)),int)->(void)
(	O
&	O
msb	struct(*(*(struct(char,long,array(char)))),long,long,int,*(char),long,long,short,enum(int,int,int,int,int,int),*(char),int)
,	O
uc	int
)	O
;	O
}	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
->	O
mixed_string	struct(*(*(struct(char,long,array(char)))),long,enum(int,int,int,int,int,int),*(char),int)
=	O
mixed_string_buffer_result	(*(struct(*(*(struct`)),long,long,int,*(char),long,long,short,enum(int,int,int,int,int,int),*(char),int)))->(*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)))
(	O
&	O
msb	struct(*(*(struct(char,long,array(char)))),long,long,int,*(char),long,long,short,enum(int,int,int,int,int,int),*(char),int)
)	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
->	O
comment	*(struct(*(*(char)),long,long))
=	O
add_reference	(*(struct(int,struct(*(*`),long,long))))->(*(struct(int,struct(*(*`),long,long))))
(	O
savable_comment	*(struct(int,struct(*(*(char)),long,long)))
)	O
;	O
lexical_context	enum(int,int,int,int,int,int)
=	O
lc_outside	int
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_string	int
;	O
}	O
return	O
;	O
}	O
case	O
'('	O
:	O
open_pbb	int
++	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_lparen	int
;	O
return	O
;	O
case	O
')'	O
:	O
if	O
(	O
open_pbb	int
>	O
0	int
)	O
open_pbb	int
--	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_rparen	int
;	O
return	O
;	O
case	O
','	O
:	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_comma	int
;	O
return	O
;	O
case	O
'['	O
:	O
case	O
'{'	O
:	O
open_pbb	int
++	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
(	O
c	int
==	O
'['	O
?	O
token_type_lbracket	int
:	O
token_type_other	int
)	O
;	O
return	O
;	O
case	O
']'	O
:	O
case	O
'}'	O
:	O
if	O
(	O
open_pbb	int
>	O
0	int
)	O
open_pbb	int
--	O
;	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
(	O
c	int
==	O
']'	O
?	O
token_type_rbracket	int
:	O
token_type_other	int
)	O
;	O
return	O
;	O
case	O
'+'	O
:	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_plus	int
;	O
return	O
;	O
default	O
:	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
=	O
token_type_other	int
;	O
return	O
;	O
}	O
}	O
}	O
static	O
void	O
phase5_unget	(*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,long,enum(int,int,int,int,int,int),*`,int)),*(struct(int,struct`)),int)))->(void)
(	O
token_ty	struct
*	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
)	O
{	O
if	O
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
!=	O
token_type_eof	int
)	O
{	O
if	O
(	O
phase5_pushback_length	int
==	O
SIZEOF	O
(	O
phase5_pushback	array(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*(*`),long,long))),int))
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
phase5_pushback	array(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*(*`),long,long))),int))
[	O
phase5_pushback_length	int
++	O
]	O
=	O
*	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
;	O
}	O
}	O
static	O
void	O
x_python_lex	(*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,long,enum(int,int,int,int,int,int),*`,int)),*(struct(int,struct`)),int)))->(void)
(	O
token_ty	struct
*	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
)	O
{	O
phase5_get	(*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,long,enum(int,int,int,int,int,int),*`,int)),*(struct(int,struct`)),int)))->(void)
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
)	O
;	O
if	O
(	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
->	O
type	char
==	O
token_type_string	int
)	O
{	O
mixed_string_ty	struct
*	O
sum	*(struct(*(*(struct(char,long,array(char)))),long,enum(int,int,int,int,int,int),*(char),int))
=	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
->	O
mixed_string	struct(*(*(struct(char,long,array(char)))),long,enum(int,int,int,int,int,int),*(char),int)
;	O
for	O
(	O
;	O
;	O
)	O
{	O
token_ty	struct
token2	struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*(*`),long,long))),int)
;	O
token_ty	struct
token3	struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*(*`),long,long))),int)
;	O
token_ty	struct
*	O
tp2	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
=	O
NULL	O
;	O
phase5_get	(*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,long,enum(int,int,int,int,int,int),*`,int)),*(struct(int,struct`)),int)))->(void)
(	O
&	O
token2	struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*(*`),long,long))),int)
)	O
;	O
switch	O
(	O
token2	struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*(*`),long,long))),int)
.	O
type	char
)	O
{	O
case	O
token_type_plus	int
:	O
{	O
phase5_get	(*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,long,enum(int,int,int,int,int,int),*`,int)),*(struct(int,struct`)),int)))->(void)
(	O
&	O
token3	struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*(*`),long,long))),int)
)	O
;	O
if	O
(	O
token3	struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*(*`),long,long))),int)
.	O
type	char
==	O
token_type_string	int
)	O
{	O
free_token	(*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,long,enum(int,int,int,int,int,int),*`,int)),*(struct(int,struct`)),int)))->(void)
(	O
&	O
token2	struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*(*`),long,long))),int)
)	O
;	O
tp2	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
=	O
&	O
token3	struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*(*`),long,long))),int)
;	O
}	O
else	O
phase5_unget	(*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,long,enum(int,int,int,int,int,int),*`,int)),*(struct(int,struct`)),int)))->(void)
(	O
&	O
token3	struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*(*`),long,long))),int)
)	O
;	O
}	O
break	O
;	O
case	O
token_type_string	int
:	O
tp2	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
=	O
&	O
token2	struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*(*`),long,long))),int)
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
if	O
(	O
tp2	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
)	O
{	O
sum	*(struct(*(*(struct(char,long,array(char)))),long,enum(int,int,int,int,int,int),*(char),int))
=	O
mixed_string_concat_free1	(*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)))->(*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)))
(	O
sum	*(struct(*(*(struct(char,long,array(char)))),long,enum(int,int,int,int,int,int),*(char),int))
,	O
tp2	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
->	O
mixed_string	struct(*(*(struct(char,long,array(char)))),long,enum(int,int,int,int,int,int),*(char),int)
)	O
;	O
free_token	(*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,long,enum(int,int,int,int,int,int),*`,int)),*(struct(int,struct`)),int)))->(void)
(	O
tp2	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
)	O
;	O
continue	O
;	O
}	O
phase5_unget	(*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,long,enum(int,int,int,int,int,int),*`,int)),*(struct(int,struct`)),int)))->(void)
(	O
&	O
token2	struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*(*`),long,long))),int)
)	O
;	O
break	O
;	O
}	O
tp	*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*`),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*`,long,long))),int))
->	O
mixed_string	struct(*(*(struct(char,long,array(char)))),long,enum(int,int,int,int,int,int),*(char),int)
=	O
sum	*(struct(*(*(struct(char,long,array(char)))),long,enum(int,int,int,int,int,int),*(char),int))
;	O
}	O
}	O
static	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
*	O
flag_context_list_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
;	O
static	O
bool	bool
extract_balanced	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),enum(int,int,int,int,int,int,int,int,int,int),struct(int,int,int,int,int,int),struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct`)))),*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))->(bool)
(	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
token_type_ty	enum(int,int,int,int,int,int,int,int,int,int)
delim	*(char)
,	O
flag_context_ty	struct
outer_context	struct(int,int,int,int,int,int)
,	O
flag_context_list_iterator_ty	struct
context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
,	O
struct	O
arglist_parser	struct(*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int)))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))
*	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
)	O
{	O
int	O
arg	int
=	O
1	int
;	O
int	O
state	*(int)
;	O
const	O
struct	O
callshapes	struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))))
*	O
next_shapes	*(struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))))
=	O
NULL	O
;	O
flag_context_list_iterator_ty	struct
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
passthrough_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
flag_context_ty	struct
inner_context	struct(int,int,int,int,int,int)
=	O
inherited_context	(struct(int,int,int,int,int,int),struct(int,int,int,int,int,int))->(struct(int,int,int,int,int,int))
(	O
outer_context	struct(int,int,int,int,int,int)
,	O
flag_context_list_iterator_advance	(*(struct(int,*(struct(int,struct`,*`)))))->(struct(int,int,int,int,int,int))
(	O
&	O
context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
)	O
)	O
;	O
state	*(int)
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
token_ty	struct
token	struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*(*`),long,long))),int)
;	O
x_python_lex	(*(struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,long,enum(int,int,int,int,int,int),*`,int)),*(struct(int,struct`)),int)))->(void)
(	O
&	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*(*`),long,long))),int)
)	O
;	O
switch	O
(	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*(*`),long,long))),int)
.	O
type	char
)	O
{	O
case	O
token_type_symbol	int
:	O
{	O
void	O
*	O
keyword_value	*(void)
;	O
if	O
(	O
hash_find_entry	(*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),*(void),long,*(*(void)))->(int)
(	O
&	O
keywords	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
,	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*(*`),long,long))),int)
.	O
string	*(char)
,	O
strlen	(*(char))->(long)
(	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*(*`),long,long))),int)
.	O
string	*(char)
)	O
,	O
&	O
keyword_value	*(void)
)	O
==	O
0	int
)	O
{	O
next_shapes	*(struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))))
=	O
(	O
const	O
struct	O
callshapes	struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))))
*	O
)	O
keyword_value	*(void)
;	O
state	*(int)
=	O
1	int
;	O
}	O
else	O
state	*(int)
=	O
0	int
;	O
}	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
flag_context_list_iterator	(*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))->(struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct`)))))
(	O
flag_context_list_table_lookup	(*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),*(void),long)->(*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
(	O
flag_context_list_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
,	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*(*`),long,long))),int)
.	O
string	*(char)
,	O
strlen	(*(char))->(long)
(	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*(*`),long,long))),int)
.	O
string	*(char)
)	O
)	O
)	O
;	O
free	(*(void))->(void)
(	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*(*`),long,long))),int)
.	O
string	*(char)
)	O
;	O
continue	O
;	O
case	O
token_type_lparen	int
:	O
if	O
(	O
extract_balanced	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),enum(int,int,int,int,int,int,int,int,int,int),struct(int,int,int,int,int,int),struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct`)))),*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))->(bool)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
token_type_rparen	int
,	O
inner_context	struct(int,int,int,int,int,int)
,	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
,	O
arglist_parser_alloc	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))))))->(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
state	*(int)
?	O
next_shapes	*(struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long)))))
:	O
NULL	O
)	O
)	O
)	O
{	O
arglist_parser_done	(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))),int)->(void)
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
,	O
arg	int
)	O
;	O
return	O
true	int
;	O
}	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
state	*(int)
=	O
0	int
;	O
continue	O
;	O
case	O
token_type_rparen	int
:	O
if	O
(	O
delim	*(char)
==	O
token_type_rparen	int
||	O
delim	*(char)
==	O
token_type_eof	int
)	O
{	O
arglist_parser_done	(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))),int)->(void)
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
,	O
arg	int
)	O
;	O
return	O
false	int
;	O
}	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
state	*(int)
=	O
0	int
;	O
continue	O
;	O
case	O
token_type_comma	int
:	O
arg	int
++	O
;	O
inner_context	struct(int,int,int,int,int,int)
=	O
inherited_context	(struct(int,int,int,int,int,int),struct(int,int,int,int,int,int))->(struct(int,int,int,int,int,int))
(	O
outer_context	struct(int,int,int,int,int,int)
,	O
flag_context_list_iterator_advance	(*(struct(int,*(struct(int,struct`,*`)))))->(struct(int,int,int,int,int,int))
(	O
&	O
context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
)	O
)	O
;	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
passthrough_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
state	*(int)
=	O
0	int
;	O
continue	O
;	O
case	O
token_type_lbracket	int
:	O
if	O
(	O
extract_balanced	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),enum(int,int,int,int,int,int,int,int,int,int),struct(int,int,int,int,int,int),struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct`)))),*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))->(bool)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
token_type_rbracket	int
,	O
null_context	struct(int,int,int,int,int,int)
,	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
,	O
arglist_parser_alloc	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))))))->(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
NULL	O
)	O
)	O
)	O
{	O
arglist_parser_done	(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))),int)->(void)
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
,	O
arg	int
)	O
;	O
return	O
true	int
;	O
}	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
state	*(int)
=	O
0	int
;	O
continue	O
;	O
case	O
token_type_rbracket	int
:	O
if	O
(	O
delim	*(char)
==	O
token_type_rbracket	int
||	O
delim	*(char)
==	O
token_type_eof	int
)	O
{	O
arglist_parser_done	(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))),int)->(void)
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
,	O
arg	int
)	O
;	O
return	O
false	int
;	O
}	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
state	*(int)
=	O
0	int
;	O
continue	O
;	O
case	O
token_type_string	int
:	O
{	O
lex_pos_ty	struct
pos	struct(*(char),long)
;	O
pos	struct(*(char),long)
.	O
file_name	*(char)
=	O
logical_file_name	*(char)
;	O
pos	struct(*(char),long)
.	O
line_number	long
=	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*(*`),long,long))),int)
.	O
line_number	long
;	O
if	O
(	O
extract_all	bool
)	O
{	O
char	O
*	O
string	*(char)
=	O
mixed_string_contents	(*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)))->(*(char))
(	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*(*`),long,long))),int)
.	O
mixed_string	struct(*(*(struct(char,long,array(char)))),long,enum(int,int,int,int,int,int),*(char),int)
)	O
;	O
mixed_string_free	(*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)))->(void)
(	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*(*`),long,long))),int)
.	O
mixed_string	struct(*(*(struct(char,long,array(char)))),long,enum(int,int,int,int,int,int),*(char),int)
)	O
;	O
remember_a_message	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char),*(char),bool,struct(int,int,int,int,int,int),*(struct(*(char),long)),*(char),*(struct(int,struct(*(*`),long,long))),bool)->(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
NULL	O
,	O
string	*(char)
,	O
true	int
,	O
inner_context	struct(int,int,int,int,int,int)
,	O
&	O
pos	struct(*(char),long)
,	O
NULL	O
,	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*(*`),long,long))),int)
.	O
comment	*(struct(*(*(char)),long,long))
,	O
true	int
)	O
;	O
}	O
else	O
arglist_parser_remember	(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))),int,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),*(char),long,*(struct(int,struct(*(*`),long,long))),bool)->(void)
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
,	O
arg	int
,	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*(*`),long,long))),int)
.	O
mixed_string	struct(*(*(struct(char,long,array(char)))),long,enum(int,int,int,int,int,int),*(char),int)
,	O
inner_context	struct(int,int,int,int,int,int)
,	O
pos	struct(*(char),long)
.	O
file_name	*(char)
,	O
pos	struct(*(char),long)
.	O
line_number	long
,	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*(*`),long,long))),int)
.	O
comment	*(struct(*(*(char)),long,long))
,	O
true	int
)	O
;	O
}	O
drop_reference	(*(struct(int,struct(*(*`),long,long))))->(void)
(	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),*(struct(int,struct(*(*`),long,long))),int)
.	O
comment	*(struct(*(*(char)),long,long))
)	O
;	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
state	*(int)
=	O
0	int
;	O
continue	O
;	O
case	O
token_type_eof	int
:	O
arglist_parser_done	(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))),int)->(void)
(	O
argparser	*(struct(*(struct(*(*`),long,long,bool,struct(long,long,*`,*`,struct`))),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long)))))
,	O
arg	int
)	O
;	O
return	O
true	int
;	O
case	O
token_type_plus	int
:	O
case	O
token_type_other	int
:	O
next_context_iter	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
=	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
;	O
state	*(int)
=	O
0	int
;	O
continue	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
}	O
}	O
void	O
extract_python	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),*(char),*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),*(struct(*(*(struct`)),long,long,bool,*(char))))->(void)
(	O
FILE	struct
*	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
const	O
char	O
*	O
real_filename	*(char)
,	O
const	O
char	O
*	O
logical_filename	*(char)
,	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
*	O
flag_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
,	O
msgdomain_list_ty	struct
*	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
)	O
{	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
=	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
->	O
item	*(*(char))
[	O
0	int
]	O
->	O
messages	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
;	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
real_file_name	*(char)
=	O
real_filename	*(char)
;	O
logical_file_name	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
logical_filename	*(char)
)	O
;	O
line_number	long
=	O
1	int
;	O
lexical_context	enum(int,int,int,int,int,int)
=	O
lc_outside	int
;	O
last_comment_line	int
=	O
-	O
1	int
;	O
last_non_comment_line	int
=	O
-	O
1	int
;	O
xgettext_current_file_source_encoding	*(char)
=	O
xgettext_global_source_encoding	*(char)
;	O
xgettext_current_file_source_iconv	*(void)
=	O
xgettext_global_source_iconv	*(void)
;	O
xgettext_current_source_encoding	*(char)
=	O
xgettext_current_file_source_encoding	*(char)
;	O
xgettext_current_source_iconv	*(void)
=	O
xgettext_current_file_source_iconv	*(void)
;	O
continuation_or_nonblank_line	bool
=	O
false	int
;	O
open_pbb	int
=	O
0	int
;	O
flag_context_list_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
=	O
flag_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
;	O
init_keywords	()->(void)
(	O
)	O
;	O
while	O
(	O
!	O
extract_balanced	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),enum(int,int,int,int,int,int,int,int,int,int),struct(int,int,int,int,int,int),struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct`)))),*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))->(bool)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
token_type_eof	int
,	O
null_context	struct(int,int,int,int,int,int)
,	O
null_context_list_iterator	struct(int,*(struct(int,struct(int,int,int,int,int,int),*(struct(int,struct`,*`)))))
,	O
arglist_parser_alloc	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(*(char),long,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long))))))->(*(struct(*(struct(*`,long,long,bool,struct`)),*(char),long,bool,long,array(struct(int,int,int,bool,bool,int,struct(*(*(char)),long,long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(*(char),long),*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long),*(struct(int,struct(*(*`),long,long))),bool,*(struct(*(*(struct`)),long,enum(int,int,int,int,int,int),*(char),int)),struct(int,int,int,int,int,int),struct(*(char),long))))))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
NULL	O
)	O
)	O
)	O
;	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
NULL	O
;	O
real_file_name	*(char)
=	O
NULL	O
;	O
logical_file_name	*(char)
=	O
NULL	O
;	O
line_number	long
=	O
0	int
;	O
}	O
