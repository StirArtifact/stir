static	O
wget_hashmap	struct
*	O
blacklist	*(struct)
;	O
static	O
wget_thread_mutex	*(struct)
mutex	*(*(struct))
;	O
void	O
blacklist_init	()->(void)
(	O
void	O
)	O
{	O
wget_thread_mutex_init	(*(*(struct)))->(int)
(	O
&	O
mutex	*(*(struct))
)	O
;	O
}	O
void	O
blacklist_exit	()->(void)
(	O
void	O
)	O
{	O
wget_thread_mutex_destroy	(*(*(struct)))->(int)
(	O
&	O
mutex	*(*(struct))
)	O
;	O
}	O
__attribute__	O
(	O
(	O
no_sanitize	O
(	O
"integer"	*(char)
)	O
)	O
)	O
static	O
unsigned	O
int	O
WGET_GCC_NONNULL_ALL	O
hash_iri	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))->(int)
(	O
const	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
{	O
unsigned	O
int	O
h	*(struct)
=	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
port	short
;	O
const	O
unsigned	O
char	O
*	O
p	*(char)
;	O
h	*(struct)
=	O
h	*(struct)
*	O
101	int
+	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
scheme	enum(int,int)
;	O
for	O
(	O
p	*(char)
=	O
(	O
unsigned	O
char	O
*	O
)	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
host	*(char)
;	O
p	*(char)
&&	O
*	O
p	*(char)
;	O
p	*(char)
++	O
)	O
h	*(struct)
=	O
h	*(struct)
*	O
101	int
+	O
*	O
p	*(char)
;	O
for	O
(	O
p	*(char)
=	O
(	O
unsigned	O
char	O
*	O
)	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
path	*(char)
;	O
p	*(char)
&&	O
*	O
p	*(char)
;	O
p	*(char)
++	O
)	O
h	*(struct)
=	O
h	*(struct)
*	O
101	int
+	O
*	O
p	*(char)
;	O
for	O
(	O
p	*(char)
=	O
(	O
unsigned	O
char	O
*	O
)	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
query	*(char)
;	O
p	*(char)
&&	O
*	O
p	*(char)
;	O
p	*(char)
++	O
)	O
h	*(struct)
=	O
h	*(struct)
*	O
101	int
+	O
*	O
p	*(char)
;	O
return	O
h	*(struct)
;	O
}	O
static	O
int	O
WGET_GCC_NONNULL_ALL	O
blacklist_print_entry	(*(void),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))->(int)
(	O
WGET_GCC_UNUSED	O
void	O
*	O
ctx	*(void)
,	O
const	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
{	O
debug_printf	O
(	O
"blacklist %s\n"	*(char)
,	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
uri	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
void	O
blacklist_print	()->(void)
(	O
void	O
)	O
{	O
wget_thread_mutex_lock	(*(struct))->(void)
(	O
mutex	*(*(struct))
)	O
;	O
wget_hashmap_browse	(*(struct),*((*(void),*(void),*(void))->(int)),*(void))->(int)
(	O
blacklist	*(struct)
,	O
(	O
wget_hashmap_browse_fn	(*(void),*(void),*(void))->(int)
*	O
)	O
blacklist_print_entry	(*(void),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))->(int)
,	O
NULL	O
)	O
;	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
mutex	*(*(struct))
)	O
;	O
}	O
int	O
blacklist_size	()->(int)
(	O
void	O
)	O
{	O
return	O
wget_hashmap_size	(*(struct))->(int)
(	O
blacklist	*(struct)
)	O
;	O
}	O
static	O
void	O
_free_entry	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))->(void)
(	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
{	O
wget_iri_free	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))))->(void)
(	O
&	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
;	O
}	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
blacklist_add	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
(	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
{	O
if	O
(	O
!	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
return	O
NULL	O
;	O
if	O
(	O
wget_iri_supported	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))->(bool)
(	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
)	O
{	O
wget_thread_mutex_lock	(*(struct))->(void)
(	O
mutex	*(*(struct))
)	O
;	O
if	O
(	O
!	O
blacklist	*(struct)
)	O
{	O
blacklist	*(struct)
=	O
wget_hashmap_create	(int,*((*(void))->(int)),*((*(void),*(void))->(int)))->(*(struct))
(	O
128	int
,	O
(	O
wget_hashmap_hash_fn	(*(void))->(int)
*	O
)	O
hash_iri	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))->(int)
,	O
(	O
wget_hashmap_compare_fn	(*(void),*(void))->(int)
*	O
)	O
wget_iri_compare	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))->(int)
)	O
;	O
wget_hashmap_set_key_destructor	(*(struct),*((*(void))->(void)))->(void)
(	O
blacklist	*(struct)
,	O
(	O
wget_hashmap_key_destructor	(*(void))->(void)
*	O
)	O
_free_entry	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))->(void)
)	O
;	O
}	O
if	O
(	O
!	O
wget_hashmap_contains	(*(struct),*(void))->(int)
(	O
blacklist	*(struct)
,	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
)	O
{	O
wget_hashmap_put	(*(struct),*(void),*(void))->(int)
(	O
blacklist	*(struct)
,	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
,	O
NULL	O
)	O
;	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
mutex	*(*(struct))
)	O
;	O
return	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
;	O
}	O
else	O
{	O
debug_printf	O
(	O
"not requesting '%s'. (Already Seen)\n"	*(char)
,	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
uri	*(char)
)	O
;	O
}	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
mutex	*(*(struct))
)	O
;	O
}	O
wget_iri_free	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))))->(void)
(	O
&	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
;	O
return	O
NULL	O
;	O
}	O
void	O
blacklist_free	()->(void)
(	O
void	O
)	O
{	O
wget_thread_mutex_lock	(*(struct))->(void)
(	O
mutex	*(*(struct))
)	O
;	O
wget_hashmap_free	(*(*(struct)))->(void)
(	O
&	O
blacklist	*(struct)
)	O
;	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
mutex	*(*(struct))
)	O
;	O
}	O
