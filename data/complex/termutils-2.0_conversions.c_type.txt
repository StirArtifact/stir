static	O
struct	O
conversion	struct(*(char),*(char),char)
conversions	array(struct(*(char),*(char),char))
[	O
]	O
=	O
{	O
{	O
"acsc"	*(char)
,	O
"ac"	*(char)
,	O
STR	int
}	O
,	O
{	O
"am"	*(char)
,	O
"am"	*(char)
,	O
BOOL	int
}	O
,	O
{	O
"bel"	*(char)
,	O
"bl"	*(char)
,	O
STR	int
}	O
,	O
{	O
"blink"	*(char)
,	O
"mb"	*(char)
,	O
STR	int
}	O
,	O
{	O
"bold"	*(char)
,	O
"md"	*(char)
,	O
STR	int
}	O
,	O
{	O
"bw"	*(char)
,	O
"bw"	*(char)
,	O
BOOL	int
}	O
,	O
{	O
"cbt"	*(char)
,	O
"bt"	*(char)
,	O
STR	int
}	O
,	O
{	O
"chts"	*(char)
,	O
"HC"	*(char)
,	O
BOOL	int
}	O
,	O
{	O
"civis"	*(char)
,	O
"vi"	*(char)
,	O
STR	int
}	O
,	O
{	O
"clear"	*(char)
,	O
"cl"	*(char)
,	O
STR	int
|	O
PAD	int
}	O
,	O
{	O
"cmdch"	*(char)
,	O
"CC"	*(char)
,	O
STR	int
}	O
,	O
{	O
"cnorm"	*(char)
,	O
"ve"	*(char)
,	O
STR	int
}	O
,	O
{	O
"cols"	*(char)
,	O
"co"	*(char)
,	O
NUM	int
}	O
,	O
{	O
"cr"	*(char)
,	O
"cr"	*(char)
,	O
STR	int
}	O
,	O
{	O
"csr"	*(char)
,	O
"cs"	*(char)
,	O
STR	int
}	O
,	O
{	O
"cub"	*(char)
,	O
"LE"	*(char)
,	O
STR	int
}	O
,	O
{	O
"cub1"	*(char)
,	O
"le"	*(char)
,	O
STR	int
}	O
,	O
{	O
"cud"	*(char)
,	O
"DO"	*(char)
,	O
STR	int
|	O
PAD	int
}	O
,	O
{	O
"cud1"	*(char)
,	O
"do"	*(char)
,	O
STR	int
}	O
,	O
{	O
"cuf"	*(char)
,	O
"RI"	*(char)
,	O
STR	int
}	O
,	O
{	O
"cuf1"	*(char)
,	O
"nd"	*(char)
,	O
STR	int
}	O
,	O
{	O
"cup"	*(char)
,	O
"cm"	*(char)
,	O
STR	int
}	O
,	O
{	O
"cuu"	*(char)
,	O
"UP"	*(char)
,	O
STR	int
}	O
,	O
{	O
"cuu1"	*(char)
,	O
"up"	*(char)
,	O
STR	int
}	O
,	O
{	O
"cvvis"	*(char)
,	O
"vs"	*(char)
,	O
STR	int
}	O
,	O
{	O
"da"	*(char)
,	O
"da"	*(char)
,	O
BOOL	int
}	O
,	O
{	O
"db"	*(char)
,	O
"db"	*(char)
,	O
BOOL	int
}	O
,	O
{	O
"dch"	*(char)
,	O
"DC"	*(char)
,	O
STR	int
}	O
,	O
{	O
"dch1"	*(char)
,	O
"dc"	*(char)
,	O
STR	int
}	O
,	O
{	O
"dim"	*(char)
,	O
"mh"	*(char)
,	O
STR	int
}	O
,	O
{	O
"dl"	*(char)
,	O
"DL"	*(char)
,	O
STR	int
|	O
PAD	int
}	O
,	O
{	O
"dl1"	*(char)
,	O
"dl"	*(char)
,	O
STR	int
}	O
,	O
{	O
"dsl"	*(char)
,	O
"ds"	*(char)
,	O
STR	int
}	O
,	O
{	O
"ech"	*(char)
,	O
"ec"	*(char)
,	O
STR	int
}	O
,	O
{	O
"ed"	*(char)
,	O
"cd"	*(char)
,	O
STR	int
|	O
PAD	int
}	O
,	O
{	O
"el"	*(char)
,	O
"ce"	*(char)
,	O
STR	int
}	O
,	O
{	O
"el1"	*(char)
,	O
"cb"	*(char)
,	O
STR	int
}	O
,	O
{	O
"enacs"	*(char)
,	O
"eA"	*(char)
,	O
STR	int
}	O
,	O
{	O
"eo"	*(char)
,	O
"eo"	*(char)
,	O
BOOL	int
}	O
,	O
{	O
"eslok"	*(char)
,	O
"es"	*(char)
,	O
BOOL	int
}	O
,	O
{	O
"ff"	*(char)
,	O
"ff"	*(char)
,	O
STR	int
}	O
,	O
{	O
"flash"	*(char)
,	O
"vb"	*(char)
,	O
STR	int
}	O
,	O
{	O
"fsl"	*(char)
,	O
"fs"	*(char)
,	O
STR	int
}	O
,	O
{	O
"gn"	*(char)
,	O
"gn"	*(char)
,	O
BOOL	int
}	O
,	O
{	O
"hc"	*(char)
,	O
"hc"	*(char)
,	O
BOOL	int
}	O
,	O
{	O
"hd"	*(char)
,	O
"hd"	*(char)
,	O
STR	int
}	O
,	O
{	O
"home"	*(char)
,	O
"ho"	*(char)
,	O
STR	int
}	O
,	O
{	O
"hpa"	*(char)
,	O
"ch"	*(char)
,	O
STR	int
}	O
,	O
{	O
"hs"	*(char)
,	O
"hs"	*(char)
,	O
BOOL	int
}	O
,	O
{	O
"ht"	*(char)
,	O
"ta"	*(char)
,	O
STR	int
}	O
,	O
{	O
"hts"	*(char)
,	O
"st"	*(char)
,	O
STR	int
}	O
,	O
{	O
"hu"	*(char)
,	O
"hu"	*(char)
,	O
STR	int
}	O
,	O
{	O
"hz"	*(char)
,	O
"hz"	*(char)
,	O
BOOL	int
}	O
,	O
{	O
"ich"	*(char)
,	O
"IC"	*(char)
,	O
STR	int
}	O
,	O
{	O
"ich1"	*(char)
,	O
"ic"	*(char)
,	O
STR	int
}	O
,	O
{	O
"if"	*(char)
,	O
"if"	*(char)
,	O
STR	int
}	O
,	O
{	O
"il"	*(char)
,	O
"AL"	*(char)
,	O
STR	int
|	O
PAD	int
}	O
,	O
{	O
"il1"	*(char)
,	O
"al"	*(char)
,	O
STR	int
}	O
,	O
{	O
"in"	*(char)
,	O
"in"	*(char)
,	O
BOOL	int
}	O
,	O
{	O
"ind"	*(char)
,	O
"sf"	*(char)
,	O
STR	int
}	O
,	O
{	O
"indn"	*(char)
,	O
"SF"	*(char)
,	O
STR	int
|	O
PAD	int
}	O
,	O
{	O
"invis"	*(char)
,	O
"mk"	*(char)
,	O
STR	int
}	O
,	O
{	O
"ip"	*(char)
,	O
"ip"	*(char)
,	O
STR	int
}	O
,	O
{	O
"iprog"	*(char)
,	O
"iP"	*(char)
,	O
STR	int
}	O
,	O
{	O
"is1"	*(char)
,	O
"i1"	*(char)
,	O
STR	int
}	O
,	O
{	O
"is2"	*(char)
,	O
"is"	*(char)
,	O
STR	int
}	O
,	O
{	O
"is3"	*(char)
,	O
"i3"	*(char)
,	O
STR	int
}	O
,	O
{	O
"it"	*(char)
,	O
"it"	*(char)
,	O
NUM	int
}	O
,	O
{	O
"kBEG"	*(char)
,	O
"&9"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kCAN"	*(char)
,	O
"&0"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kCMD"	*(char)
,	O
"*1"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kCPY"	*(char)
,	O
"*2"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kCRT"	*(char)
,	O
"*3"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kDC"	*(char)
,	O
"*4"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kDL"	*(char)
,	O
"*5"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kEND"	*(char)
,	O
"*7"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kEOL"	*(char)
,	O
"*8"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kEXT"	*(char)
,	O
"*9"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kFND"	*(char)
,	O
"*0"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kHLP"	*(char)
,	O
"#1"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kHOM"	*(char)
,	O
"#2"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kIC"	*(char)
,	O
"#3"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kLFT"	*(char)
,	O
"#4"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kMOV"	*(char)
,	O
"%b"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kMSG"	*(char)
,	O
"%a"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kNXT"	*(char)
,	O
"%c"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kOPT"	*(char)
,	O
"%d"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kPRT"	*(char)
,	O
"%f"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kPRV"	*(char)
,	O
"%e"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kRDO"	*(char)
,	O
"%g"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kRES"	*(char)
,	O
"%j"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kRIT"	*(char)
,	O
"%i"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kRPL"	*(char)
,	O
"%h"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kSAV"	*(char)
,	O
"!1"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kSPD"	*(char)
,	O
"!2"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kUND"	*(char)
,	O
"!3"	*(char)
,	O
STR	int
}	O
,	O
{	O
"ka1"	*(char)
,	O
"K1"	*(char)
,	O
STR	int
}	O
,	O
{	O
"ka3"	*(char)
,	O
"K3"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kb2"	*(char)
,	O
"K2"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kbeg"	*(char)
,	O
"@1"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kbs"	*(char)
,	O
"kb"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kc1"	*(char)
,	O
"K4"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kc3"	*(char)
,	O
"K5"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kcan"	*(char)
,	O
"@2"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kcbt"	*(char)
,	O
"kB"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kclo"	*(char)
,	O
"@3"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kclr"	*(char)
,	O
"kC"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kcmd"	*(char)
,	O
"@4"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kcpy"	*(char)
,	O
"@5"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kcrt"	*(char)
,	O
"@6"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kctab"	*(char)
,	O
"kt"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kcub1"	*(char)
,	O
"kl"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kcud1"	*(char)
,	O
"kd"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kcuf1"	*(char)
,	O
"kr"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kcuu1"	*(char)
,	O
"ku"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kdch1"	*(char)
,	O
"kD"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kdl1"	*(char)
,	O
"kL"	*(char)
,	O
STR	int
}	O
,	O
{	O
"ked"	*(char)
,	O
"kS"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kel"	*(char)
,	O
"kE"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kend"	*(char)
,	O
"@7"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kent"	*(char)
,	O
"@8"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kext"	*(char)
,	O
"@9"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf0"	*(char)
,	O
"k0"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf1"	*(char)
,	O
"k1"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf10"	*(char)
,	O
"k;"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf11"	*(char)
,	O
"F1"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf12"	*(char)
,	O
"F2"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf13"	*(char)
,	O
"F3"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf14"	*(char)
,	O
"F4"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf15"	*(char)
,	O
"F5"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf16"	*(char)
,	O
"F6"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf17"	*(char)
,	O
"F7"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf18"	*(char)
,	O
"F8"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf19"	*(char)
,	O
"F9"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf2"	*(char)
,	O
"k2"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf20"	*(char)
,	O
"FA"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf21"	*(char)
,	O
"FB"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf22"	*(char)
,	O
"FC"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf23"	*(char)
,	O
"FD"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf24"	*(char)
,	O
"FE"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf25"	*(char)
,	O
"FF"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf26"	*(char)
,	O
"FG"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf27"	*(char)
,	O
"FH"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf28"	*(char)
,	O
"FI"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf29"	*(char)
,	O
"FJ"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf3"	*(char)
,	O
"k3"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf30"	*(char)
,	O
"FK"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf31"	*(char)
,	O
"FL"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf32"	*(char)
,	O
"FM"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf33"	*(char)
,	O
"FN"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf34"	*(char)
,	O
"FO"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf35"	*(char)
,	O
"FP"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf36"	*(char)
,	O
"FQ"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf37"	*(char)
,	O
"FR"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf38"	*(char)
,	O
"FS"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf39"	*(char)
,	O
"FT"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf4"	*(char)
,	O
"k4"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf40"	*(char)
,	O
"FU"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf41"	*(char)
,	O
"FV"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf42"	*(char)
,	O
"FW"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf43"	*(char)
,	O
"FX"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf44"	*(char)
,	O
"FY"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf45"	*(char)
,	O
"FZ"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf46"	*(char)
,	O
"Fa"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf47"	*(char)
,	O
"Fb"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf48"	*(char)
,	O
"Fc"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf49"	*(char)
,	O
"Fd"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf5"	*(char)
,	O
"k5"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf50"	*(char)
,	O
"Fe"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf51"	*(char)
,	O
"Ff"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf52"	*(char)
,	O
"Fg"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf53"	*(char)
,	O
"Fh"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf54"	*(char)
,	O
"Fi"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf55"	*(char)
,	O
"Fj"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf56"	*(char)
,	O
"Fk"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf57"	*(char)
,	O
"Fl"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf58"	*(char)
,	O
"Fm"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf59"	*(char)
,	O
"Fn"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf6"	*(char)
,	O
"k6"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf60"	*(char)
,	O
"Fo"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf61"	*(char)
,	O
"Fp"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf62"	*(char)
,	O
"Fq"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf63"	*(char)
,	O
"Fr"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf7"	*(char)
,	O
"k7"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf8"	*(char)
,	O
"k8"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kf9"	*(char)
,	O
"k9"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kfnd"	*(char)
,	O
"@0"	*(char)
,	O
STR	int
}	O
,	O
{	O
"khlp"	*(char)
,	O
"%1"	*(char)
,	O
STR	int
}	O
,	O
{	O
"khome"	*(char)
,	O
"kh"	*(char)
,	O
STR	int
}	O
,	O
{	O
"khts"	*(char)
,	O
"kT"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kich1"	*(char)
,	O
"kI"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kil1"	*(char)
,	O
"kA"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kind"	*(char)
,	O
"kF"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kll"	*(char)
,	O
"kH"	*(char)
,	O
STR	int
}	O
,	O
{	O
"km"	*(char)
,	O
"km"	*(char)
,	O
BOOL	int
}	O
,	O
{	O
"kmov"	*(char)
,	O
"%4"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kmrk"	*(char)
,	O
"%2"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kmsg"	*(char)
,	O
"%3"	*(char)
,	O
STR	int
}	O
,	O
{	O
"knp"	*(char)
,	O
"kN"	*(char)
,	O
STR	int
}	O
,	O
{	O
"knxt"	*(char)
,	O
"%5"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kopn"	*(char)
,	O
"%6"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kopt"	*(char)
,	O
"%7"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kpp"	*(char)
,	O
"kP"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kprt"	*(char)
,	O
"%9"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kprv"	*(char)
,	O
"%8"	*(char)
,	O
STR	int
}	O
,	O
{	O
"krdo"	*(char)
,	O
"%0"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kref"	*(char)
,	O
"&1"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kres"	*(char)
,	O
"&5"	*(char)
,	O
STR	int
}	O
,	O
{	O
"krfr"	*(char)
,	O
"&2"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kri"	*(char)
,	O
"kR"	*(char)
,	O
STR	int
}	O
,	O
{	O
"krmir"	*(char)
,	O
"kM"	*(char)
,	O
STR	int
}	O
,	O
{	O
"krpl"	*(char)
,	O
"&3"	*(char)
,	O
STR	int
}	O
,	O
{	O
"krst"	*(char)
,	O
"&4"	*(char)
,	O
STR	int
}	O
,	O
{	O
"ksav"	*(char)
,	O
"&6"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kslt"	*(char)
,	O
"*6"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kspd"	*(char)
,	O
"&7"	*(char)
,	O
STR	int
}	O
,	O
{	O
"ktbc"	*(char)
,	O
"ka"	*(char)
,	O
STR	int
}	O
,	O
{	O
"kund"	*(char)
,	O
"&8"	*(char)
,	O
STR	int
}	O
,	O
{	O
"lf0"	*(char)
,	O
"l0"	*(char)
,	O
STR	int
}	O
,	O
{	O
"lf1"	*(char)
,	O
"l1"	*(char)
,	O
STR	int
}	O
,	O
{	O
"lf10"	*(char)
,	O
"la"	*(char)
,	O
STR	int
}	O
,	O
{	O
"lf2"	*(char)
,	O
"l2"	*(char)
,	O
STR	int
}	O
,	O
{	O
"lf3"	*(char)
,	O
"l3"	*(char)
,	O
STR	int
}	O
,	O
{	O
"lf4"	*(char)
,	O
"l4"	*(char)
,	O
STR	int
}	O
,	O
{	O
"lf5"	*(char)
,	O
"l5"	*(char)
,	O
STR	int
}	O
,	O
{	O
"lf6"	*(char)
,	O
"l6"	*(char)
,	O
STR	int
}	O
,	O
{	O
"lf7"	*(char)
,	O
"l7"	*(char)
,	O
STR	int
}	O
,	O
{	O
"lf8"	*(char)
,	O
"l8"	*(char)
,	O
STR	int
}	O
,	O
{	O
"lf9"	*(char)
,	O
"l9"	*(char)
,	O
STR	int
}	O
,	O
{	O
"lh"	*(char)
,	O
"lh"	*(char)
,	O
NUM	int
}	O
,	O
{	O
"lines"	*(char)
,	O
"li"	*(char)
,	O
NUM	int
}	O
,	O
{	O
"ll"	*(char)
,	O
"ll"	*(char)
,	O
STR	int
}	O
,	O
{	O
"lm"	*(char)
,	O
"lm"	*(char)
,	O
NUM	int
}	O
,	O
{	O
"lw"	*(char)
,	O
"lw"	*(char)
,	O
NUM	int
}	O
,	O
{	O
"mc0"	*(char)
,	O
"ps"	*(char)
,	O
STR	int
}	O
,	O
{	O
"mc4"	*(char)
,	O
"pf"	*(char)
,	O
STR	int
}	O
,	O
{	O
"mc5"	*(char)
,	O
"po"	*(char)
,	O
STR	int
}	O
,	O
{	O
"mc5i"	*(char)
,	O
"5i"	*(char)
,	O
BOOL	int
}	O
,	O
{	O
"mc5p"	*(char)
,	O
"pO"	*(char)
,	O
STR	int
}	O
,	O
{	O
"mgc"	*(char)
,	O
"MC"	*(char)
,	O
STR	int
}	O
,	O
{	O
"mir"	*(char)
,	O
"mi"	*(char)
,	O
BOOL	int
}	O
,	O
{	O
"mrcup"	*(char)
,	O
"CM"	*(char)
,	O
STR	int
}	O
,	O
{	O
"msgr"	*(char)
,	O
"ms"	*(char)
,	O
BOOL	int
}	O
,	O
{	O
"nel"	*(char)
,	O
"nw"	*(char)
,	O
STR	int
}	O
,	O
{	O
"nlab"	*(char)
,	O
"Nl"	*(char)
,	O
NUM	int
}	O
,	O
{	O
"npc"	*(char)
,	O
"NP"	*(char)
,	O
BOOL	int
}	O
,	O
{	O
"nrrmc"	*(char)
,	O
"NR"	*(char)
,	O
BOOL	int
}	O
,	O
{	O
"nxon"	*(char)
,	O
"nx"	*(char)
,	O
BOOL	int
}	O
,	O
{	O
"os"	*(char)
,	O
"os"	*(char)
,	O
BOOL	int
}	O
,	O
{	O
"pad"	*(char)
,	O
"pc"	*(char)
,	O
STR	int
}	O
,	O
{	O
"pb"	*(char)
,	O
"pb"	*(char)
,	O
NUM	int
}	O
,	O
{	O
"pfkey"	*(char)
,	O
"pk"	*(char)
,	O
STR	int
}	O
,	O
{	O
"pfloc"	*(char)
,	O
"pl"	*(char)
,	O
STR	int
}	O
,	O
{	O
"pfx"	*(char)
,	O
"px"	*(char)
,	O
STR	int
}	O
,	O
{	O
"pln"	*(char)
,	O
"pn"	*(char)
,	O
STR	int
}	O
,	O
{	O
"prot"	*(char)
,	O
"mp"	*(char)
,	O
STR	int
}	O
,	O
{	O
"rc"	*(char)
,	O
"rc"	*(char)
,	O
STR	int
}	O
,	O
{	O
"rep"	*(char)
,	O
"rp"	*(char)
,	O
STR	int
}	O
,	O
{	O
"rev"	*(char)
,	O
"mr"	*(char)
,	O
STR	int
}	O
,	O
{	O
"rf"	*(char)
,	O
"rf"	*(char)
,	O
STR	int
}	O
,	O
{	O
"rfi"	*(char)
,	O
"RF"	*(char)
,	O
STR	int
}	O
,	O
{	O
"ri"	*(char)
,	O
"sr"	*(char)
,	O
STR	int
}	O
,	O
{	O
"rin"	*(char)
,	O
"SR"	*(char)
,	O
STR	int
|	O
PAD	int
}	O
,	O
{	O
"rmacs"	*(char)
,	O
"ae"	*(char)
,	O
STR	int
}	O
,	O
{	O
"rmam"	*(char)
,	O
"RA"	*(char)
,	O
STR	int
}	O
,	O
{	O
"rmcup"	*(char)
,	O
"te"	*(char)
,	O
STR	int
}	O
,	O
{	O
"rmdc"	*(char)
,	O
"ed"	*(char)
,	O
STR	int
}	O
,	O
{	O
"rmir"	*(char)
,	O
"ei"	*(char)
,	O
STR	int
}	O
,	O
{	O
"rmkx"	*(char)
,	O
"ke"	*(char)
,	O
STR	int
}	O
,	O
{	O
"rmln"	*(char)
,	O
"LF"	*(char)
,	O
STR	int
}	O
,	O
{	O
"rmm"	*(char)
,	O
"mo"	*(char)
,	O
STR	int
}	O
,	O
{	O
"rmp"	*(char)
,	O
"rP"	*(char)
,	O
STR	int
}	O
,	O
{	O
"rmso"	*(char)
,	O
"se"	*(char)
,	O
STR	int
}	O
,	O
{	O
"rmul"	*(char)
,	O
"ue"	*(char)
,	O
STR	int
}	O
,	O
{	O
"rmxon"	*(char)
,	O
"RX"	*(char)
,	O
STR	int
}	O
,	O
{	O
"rs1"	*(char)
,	O
"r1"	*(char)
,	O
STR	int
}	O
,	O
{	O
"rs2"	*(char)
,	O
"r2"	*(char)
,	O
STR	int
}	O
,	O
{	O
"rs3"	*(char)
,	O
"r3"	*(char)
,	O
STR	int
}	O
,	O
{	O
"sc"	*(char)
,	O
"sc"	*(char)
,	O
STR	int
}	O
,	O
{	O
"sgr"	*(char)
,	O
"sa"	*(char)
,	O
STR	int
}	O
,	O
{	O
"sgr0"	*(char)
,	O
"me"	*(char)
,	O
STR	int
}	O
,	O
{	O
"smacs"	*(char)
,	O
"as"	*(char)
,	O
STR	int
}	O
,	O
{	O
"smam"	*(char)
,	O
"SA"	*(char)
,	O
STR	int
}	O
,	O
{	O
"smcup"	*(char)
,	O
"ti"	*(char)
,	O
STR	int
}	O
,	O
{	O
"smdc"	*(char)
,	O
"dm"	*(char)
,	O
STR	int
}	O
,	O
{	O
"smgl"	*(char)
,	O
"ML"	*(char)
,	O
STR	int
}	O
,	O
{	O
"smgr"	*(char)
,	O
"MR"	*(char)
,	O
STR	int
}	O
,	O
{	O
"smir"	*(char)
,	O
"im"	*(char)
,	O
STR	int
}	O
,	O
{	O
"smkx"	*(char)
,	O
"ks"	*(char)
,	O
STR	int
}	O
,	O
{	O
"smln"	*(char)
,	O
"LO"	*(char)
,	O
STR	int
}	O
,	O
{	O
"smm"	*(char)
,	O
"mm"	*(char)
,	O
STR	int
}	O
,	O
{	O
"smso"	*(char)
,	O
"so"	*(char)
,	O
STR	int
}	O
,	O
{	O
"smul"	*(char)
,	O
"us"	*(char)
,	O
STR	int
}	O
,	O
{	O
"smxon"	*(char)
,	O
"SX"	*(char)
,	O
STR	int
}	O
,	O
{	O
"tbc"	*(char)
,	O
"ct"	*(char)
,	O
STR	int
}	O
,	O
{	O
"tsl"	*(char)
,	O
"ts"	*(char)
,	O
STR	int
}	O
,	O
{	O
"uc"	*(char)
,	O
"uc"	*(char)
,	O
STR	int
}	O
,	O
{	O
"ul"	*(char)
,	O
"ul"	*(char)
,	O
BOOL	int
}	O
,	O
{	O
"vpa"	*(char)
,	O
"cv"	*(char)
,	O
STR	int
}	O
,	O
{	O
"vt"	*(char)
,	O
"vt"	*(char)
,	O
NUM	int
}	O
,	O
{	O
"wind"	*(char)
,	O
"wi"	*(char)
,	O
STR	int
}	O
,	O
{	O
"wsl"	*(char)
,	O
"ws"	*(char)
,	O
NUM	int
}	O
,	O
{	O
"xenl"	*(char)
,	O
"xn"	*(char)
,	O
BOOL	int
}	O
,	O
{	O
"xhp"	*(char)
,	O
"xs"	*(char)
,	O
BOOL	int
}	O
,	O
{	O
"xmc"	*(char)
,	O
"sg"	*(char)
,	O
NUM	int
}	O
,	O
{	O
"xoffc"	*(char)
,	O
"XF"	*(char)
,	O
STR	int
}	O
,	O
{	O
"xon"	*(char)
,	O
"xo"	*(char)
,	O
BOOL	int
}	O
,	O
{	O
"xonc"	*(char)
,	O
"XN"	*(char)
,	O
STR	int
}	O
,	O
{	O
"xsb"	*(char)
,	O
"xb"	*(char)
,	O
BOOL	int
}	O
,	O
{	O
"xt"	*(char)
,	O
"xt"	*(char)
,	O
BOOL	int
}	O
}	O
;	O
char	O
*	O
bsearch	()->(*(char))
(	O
)	O
;	O
static	O
int	O
info_compare	(*(struct(*(char),*(char),char)),*(struct(*(char),*(char),char)))->(int)
(	O
conv1	*(struct(*(char),*(char),char))
,	O
conv2	*(struct(*(char),*(char),char))
)	O
struct	O
conversion	struct(*(char),*(char),char)
*	O
conv1	*(struct(*(char),*(char),char))
,	O
*	O
conv2	*(struct(*(char),*(char),char))
;	O
{	O
return	O
strcmp	O
(	O
conv1	*(struct(*(char),*(char),char))
->	O
info	*(char)
,	O
conv2	*(struct(*(char),*(char),char))
->	O
info	*(char)
)	O
;	O
}	O
struct	O
conversion	struct(*(char),*(char),char)
*	O
find_info	()->(*(struct(*(char),*(char),char)))
(	O
infoname	*(char)
,	O
termcap_only	int
)	O
char	O
*	O
infoname	*(char)
;	O
int	O
termcap_only	int
;	O
{	O
struct	O
conversion	struct(*(char),*(char),char)
conv	struct(*(char),*(char),char)
,	O
*	O
found	*(struct(*(char),*(char),char))
;	O
conv	struct(*(char),*(char),char)
.	O
info	*(char)
=	O
infoname	*(char)
;	O
found	*(struct(*(char),*(char),char))
=	O
0	int
;	O
if	O
(	O
termcap_only	int
==	O
0	int
)	O
found	*(struct(*(char),*(char),char))
=	O
(	O
struct	O
conversion	struct(*(char),*(char),char)
*	O
)	O
bsearch	()->(*(char))
(	O
(	O
char	O
*	O
)	O
&	O
conv	struct(*(char),*(char),char)
,	O
(	O
char	O
*	O
)	O
conversions	array(struct(*(char),*(char),char))
,	O
CAPABILITIES	O
,	O
sizeof	O
(	O
struct	O
conversion	struct(*(char),*(char),char)
)	O
,	O
info_compare	(*(struct(*(char),*(char),char)),*(struct(*(char),*(char),char)))->(int)
)	O
;	O
if	O
(	O
found	*(struct(*(char),*(char),char))
)	O
return	O
found	*(struct(*(char),*(char),char))
;	O
for	O
(	O
found	*(struct(*(char),*(char),char))
=	O
conversions	array(struct(*(char),*(char),char))
;	O
found	*(struct(*(char),*(char),char))
<	O
&	O
conversions	array(struct(*(char),*(char),char))
[	O
CAPABILITIES	O
]	O
;	O
found	*(struct(*(char),*(char),char))
++	O
)	O
if	O
(	O
strcmp	O
(	O
infoname	*(char)
,	O
found	*(struct(*(char),*(char),char))
->	O
cap	*(char)
)	O
==	O
0	int
)	O
return	O
found	*(struct(*(char),*(char),char))
;	O
return	O
0	int
;	O
}	O
