extern	O
char	O
*	O
malloc	(long)->(*(char))
(	O
size_t	long
)	O
;	O
void	O
AX11AllocBufferedSegments	(*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*`,*`,int)),*(struct(*`,*`,int)),*(struct(*`,*`,int)),*(struct(*`)),*(struct(*`)),*(struct(short,long,long,*`,*`,*`)),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int)),short)->(void)
(	O
AWindow	struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct(short,short,short)),*(struct(short,short,short)),int)),*(struct(*(struct(short,short,short)),*(struct(short,short,short)),int)),*(struct(*(struct(short,short,short)),*(struct(short,short,short)),int)),*(struct(*(struct(short,long,long,*`,*`,*`)))),*(struct(*(struct(short,long,long,*`,*`,*`)))),*(struct(short,long,long,*(struct(short,long,*`,*`)),*(struct(short,long,long,*`,*`,*`)),*(struct(short,long,long,*`,*`,*`)))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int)
*	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
,	O
Color	short
c	*(struct(long,short,short,short,char,char))
)	O
;	O
void	O
AX11FlushBufferedSegments	(*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*`,*`,int)),*(struct(*`,*`,int)),*(struct(*`,*`,int)),*(struct(*`)),*(struct(*`)),*(struct(short,long,long,*`,*`,*`)),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int)))->(void)
(	O
AWindow	struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct(short,short,short)),*(struct(short,short,short)),int)),*(struct(*(struct(short,short,short)),*(struct(short,short,short)),int)),*(struct(*(struct(short,short,short)),*(struct(short,short,short)),int)),*(struct(*(struct(short,long,long,*`,*`,*`)))),*(struct(*(struct(short,long,long,*`,*`,*`)))),*(struct(short,long,long,*(struct(short,long,*`,*`)),*(struct(short,long,long,*`,*`,*`)),*(struct(short,long,long,*`,*`,*`)))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int)
*	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
)	O
{	O
register	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
AMaxPixelValue	int
;	O
++	O
i	int
)	O
{	O
if	O
(	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
->	O
bseg	array(struct(*(struct(short,short,short,short)),int))
[	O
i	int
]	O
.	O
count	int
>	O
0	int
)	O
{	O
if	O
(	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
->	O
flags	char
&	O
AMonoMode	int
)	O
{	O
XSetStipple	(*(struct),*(struct),long)->(int)
(	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
->	O
display	*(struct)
,	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
->	O
gc	*(struct)
,	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
->	O
stipple	long
[	O
i	int
]	O
)	O
;	O
}	O
else	O
{	O
XSetForeground	(*(struct),*(struct),long)->(int)
(	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
->	O
display	*(struct)
,	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
->	O
gc	*(struct)
,	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
->	O
color_to_pixel_map	array(long)
[	O
i	int
]	O
)	O
;	O
}	O
XDrawSegments	(*(struct),long,*(struct),*(struct(short,short,short,short)),int)->(int)
(	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
->	O
display	*(struct)
,	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
->	O
d	long
,	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
->	O
gc	*(struct)
,	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
->	O
bseg	array(struct(*(struct(short,short,short,short)),int))
[	O
i	int
]	O
.	O
head	*(struct(short,long,long,*(struct(short,long,*(struct`),*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`)))))
,	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
->	O
bseg	array(struct(*(struct(short,short,short,short)),int))
[	O
i	int
]	O
.	O
count	int
)	O
;	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
->	O
bseg	array(struct(*(struct(short,short,short,short)),int))
[	O
i	int
]	O
.	O
count	int
=	O
0	int
;	O
}	O
}	O
}	O
void	O
AX11AllocBufferedSegments	(*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*`,*`,int)),*(struct(*`,*`,int)),*(struct(*`,*`,int)),*(struct(*`)),*(struct(*`)),*(struct(short,long,long,*`,*`,*`)),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int)),short)->(void)
(	O
AWindow	struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct(short,short,short)),*(struct(short,short,short)),int)),*(struct(*(struct(short,short,short)),*(struct(short,short,short)),int)),*(struct(*(struct(short,short,short)),*(struct(short,short,short)),int)),*(struct(*(struct(short,long,long,*`,*`,*`)))),*(struct(*(struct(short,long,long,*`,*`,*`)))),*(struct(short,long,long,*(struct(short,long,*`,*`)),*(struct(short,long,long,*`,*`,*`)),*(struct(short,long,long,*`,*`,*`)))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int)
*	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
,	O
Color	short
c	*(struct(long,short,short,short,char,char))
)	O
{	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
->	O
bseg	array(struct(*(struct(short,short,short,short)),int))
[	O
c	*(struct(long,short,short,short,char,char))
]	O
.	O
head	*(struct(short,long,long,*(struct(short,long,*(struct`),*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`)))))
=	O
(	O
XSegment	struct(short,short,short,short)
*	O
)	O
malloc	(long)->(*(char))
(	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
->	O
bsegSize	int
*	O
sizeof	O
(	O
XSegment	struct(short,short,short,short)
)	O
)	O
;	O
if	O
(	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
->	O
bseg	array(struct(*(struct(short,short,short,short)),int))
[	O
c	*(struct(long,short,short,short,char,char))
]	O
.	O
head	*(struct(short,long,long,*(struct(short,long,*(struct`),*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`)))))
==	O
(	O
XSegment	struct(short,short,short,short)
*	O
)	O
NULL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Error allocating A library buffered segments\n"	*(char)
)	O
;	O
exit	O
(	O
1	int
)	O
;	O
}	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
->	O
bseg	array(struct(*(struct(short,short,short,short)),int))
[	O
c	*(struct(long,short,short,short,char,char))
]	O
.	O
count	int
=	O
0	int
;	O
}	O
void	O
ScanLineDifference	(*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*`,*`,int)),*(struct(*`,*`,int)),*(struct(*`,*`,int)),*(struct(*`)),*(struct(*`)),*(struct(short,long,long,*`,*`,*`)),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int)))->(void)
(	O
AWindow	struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct(short,short,short)),*(struct(short,short,short)),int)),*(struct(*(struct(short,short,short)),*(struct(short,short,short)),int)),*(struct(*(struct(short,short,short)),*(struct(short,short,short)),int)),*(struct(*(struct(short,long,long,*`,*`,*`)))),*(struct(*(struct(short,long,long,*`,*`,*`)))),*(struct(short,long,long,*(struct(short,long,*`,*`)),*(struct(short,long,long,*`,*`,*`)),*(struct(short,long,long,*`,*`,*`)))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int)
*	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
)	O
{	O
register	O
ColorSegment	struct(short,short,short)
*	O
cur	*(struct(short,short,short))
,	O
*	O
last	*(struct(short,short,short))
;	O
register	O
int	O
len	int
,	O
curX	int
=	O
0	int
,	O
curLength	int
=	O
0	int
,	O
curCount	int
,	O
lastCount	int
,	O
y	int
;	O
for	O
(	O
y	int
=	O
0	int
;	O
y	int
<	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
->	O
height	int
;	O
++	O
y	int
)	O
{	O
cur	*(struct(short,short,short))
=	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
->	O
scanLine	*(struct(*(struct(short,short,short)),*(struct(short,short,short)),int))
[	O
y	int
]	O
.	O
head	*(struct(short,long,long,*(struct(short,long,*(struct`),*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`)))))
;	O
curCount	int
=	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
->	O
scanLine	*(struct(*(struct(short,short,short)),*(struct(short,short,short)),int))
[	O
y	int
]	O
.	O
count	int
;	O
if	O
(	O
curCount	int
>	O
0	int
)	O
{	O
curX	int
=	O
cur	*(struct(short,short,short))
->	O
x	int
;	O
curLength	int
=	O
cur	*(struct(short,short,short))
->	O
length	int
;	O
}	O
last	*(struct(short,short,short))
=	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
->	O
lastScanLine	*(struct(*(struct(short,short,short)),*(struct(short,short,short)),int))
[	O
y	int
]	O
.	O
head	*(struct(short,long,long,*(struct(short,long,*(struct`),*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`)))))
;	O
lastCount	int
=	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
->	O
lastScanLine	*(struct(*(struct(short,short,short)),*(struct(short,short,short)),int))
[	O
y	int
]	O
.	O
count	int
;	O
while	O
(	O
curCount	int
!=	O
0	int
)	O
{	O
if	O
(	O
lastCount	int
==	O
0	int
)	O
{	O
if	O
(	O
cur	*(struct(short,short,short))
->	O
color	short
!=	O
UnchangedColor	int
)	O
{	O
OutputSegment	O
(	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
,	O
y	int
,	O
curX	int
,	O
curX	int
+	O
curLength	int
-	O
1	int
,	O
cur	*(struct(short,short,short))
->	O
color	short
)	O
;	O
}	O
++	O
cur	*(struct(short,short,short))
;	O
curX	int
=	O
cur	*(struct(short,short,short))
->	O
x	int
;	O
curLength	int
=	O
cur	*(struct(short,short,short))
->	O
length	int
;	O
--	O
curCount	int
;	O
}	O
else	O
if	O
(	O
curX	int
==	O
last	*(struct(short,short,short))
->	O
x	int
)	O
{	O
if	O
(	O
curLength	int
==	O
last	*(struct(short,short,short))
->	O
length	int
)	O
{	O
if	O
(	O
cur	*(struct(short,short,short))
->	O
color	short
!=	O
last	*(struct(short,short,short))
->	O
color	short
)	O
{	O
if	O
(	O
cur	*(struct(short,short,short))
->	O
color	short
!=	O
UnchangedColor	int
)	O
{	O
OutputSegment	O
(	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
,	O
y	int
,	O
curX	int
,	O
curX	int
+	O
curLength	int
-	O
1	int
,	O
cur	*(struct(short,short,short))
->	O
color	short
)	O
;	O
}	O
}	O
++	O
last	*(struct(short,short,short))
;	O
++	O
cur	*(struct(short,short,short))
;	O
curX	int
=	O
cur	*(struct(short,short,short))
->	O
x	int
;	O
curLength	int
=	O
cur	*(struct(short,short,short))
->	O
length	int
;	O
--	O
curCount	int
;	O
--	O
lastCount	int
;	O
}	O
else	O
if	O
(	O
curLength	int
<	O
last	*(struct(short,short,short))
->	O
length	int
)	O
{	O
if	O
(	O
cur	*(struct(short,short,short))
->	O
color	short
!=	O
last	*(struct(short,short,short))
->	O
color	short
)	O
{	O
if	O
(	O
cur	*(struct(short,short,short))
->	O
color	short
!=	O
UnchangedColor	int
)	O
{	O
OutputSegment	O
(	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
,	O
y	int
,	O
curX	int
,	O
curX	int
+	O
curLength	int
-	O
1	int
,	O
cur	*(struct(short,short,short))
->	O
color	short
)	O
;	O
}	O
}	O
last	*(struct(short,short,short))
->	O
x	int
+=	O
curLength	int
;	O
last	*(struct(short,short,short))
->	O
length	int
-=	O
curLength	int
;	O
++	O
cur	*(struct(short,short,short))
;	O
curX	int
=	O
cur	*(struct(short,short,short))
->	O
x	int
;	O
curLength	int
=	O
cur	*(struct(short,short,short))
->	O
length	int
;	O
--	O
curCount	int
;	O
}	O
else	O
{	O
if	O
(	O
cur	*(struct(short,short,short))
->	O
color	short
!=	O
last	*(struct(short,short,short))
->	O
color	short
)	O
{	O
if	O
(	O
cur	*(struct(short,short,short))
->	O
color	short
!=	O
UnchangedColor	int
)	O
{	O
OutputSegment	O
(	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
,	O
y	int
,	O
curX	int
,	O
curX	int
+	O
last	*(struct(short,short,short))
->	O
length	int
-	O
1	int
,	O
cur	*(struct(short,short,short))
->	O
color	short
)	O
;	O
}	O
}	O
curX	int
+=	O
last	*(struct(short,short,short))
->	O
length	int
;	O
curLength	int
-=	O
last	*(struct(short,short,short))
->	O
length	int
;	O
++	O
last	*(struct(short,short,short))
;	O
--	O
lastCount	int
;	O
}	O
}	O
else	O
if	O
(	O
curX	int
<	O
last	*(struct(short,short,short))
->	O
x	int
)	O
{	O
if	O
(	O
curX	int
+	O
curLength	int
>	O
last	*(struct(short,short,short))
->	O
x	int
)	O
len	int
=	O
last	*(struct(short,short,short))
->	O
x	int
-	O
curX	int
;	O
else	O
len	int
=	O
curLength	int
;	O
if	O
(	O
cur	*(struct(short,short,short))
->	O
color	short
!=	O
UnchangedColor	int
)	O
{	O
OutputSegment	O
(	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
,	O
y	int
,	O
curX	int
,	O
curX	int
+	O
len	int
-	O
1	int
,	O
cur	*(struct(short,short,short))
->	O
color	short
)	O
;	O
}	O
curX	int
+=	O
len	int
;	O
curLength	int
-=	O
len	int
;	O
if	O
(	O
curLength	int
==	O
0	int
)	O
{	O
++	O
cur	*(struct(short,short,short))
;	O
curX	int
=	O
cur	*(struct(short,short,short))
->	O
x	int
;	O
curLength	int
=	O
cur	*(struct(short,short,short))
->	O
length	int
;	O
--	O
curCount	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
last	*(struct(short,short,short))
->	O
x	int
+	O
last	*(struct(short,short,short))
->	O
length	int
>	O
curX	int
)	O
len	int
=	O
curX	int
-	O
last	*(struct(short,short,short))
->	O
x	int
;	O
else	O
len	int
=	O
last	*(struct(short,short,short))
->	O
length	int
;	O
last	*(struct(short,short,short))
->	O
x	int
+=	O
len	int
;	O
last	*(struct(short,short,short))
->	O
length	int
-=	O
len	int
;	O
if	O
(	O
last	*(struct(short,short,short))
->	O
length	int
==	O
0	int
)	O
{	O
++	O
last	*(struct(short,short,short))
;	O
--	O
lastCount	int
;	O
}	O
}	O
}	O
}	O
}	O
