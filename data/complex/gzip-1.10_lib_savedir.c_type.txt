typedef	O
struct	O
{	O
char	O
*	O
name	*(char)
;	O
}	O
direntry_t	struct(*(char))
;	O
static	O
int	O
direntry_cmp_name	(*(void),*(void))->(int)
(	O
void	O
const	O
*	O
a	*(void)
,	O
void	O
const	O
*	O
b	*(void)
)	O
{	O
direntry_t	struct(*(char))
const	O
*	O
dea	*(struct(*(char)))
=	O
a	*(void)
;	O
direntry_t	struct(*(char))
const	O
*	O
deb	*(struct(*(char)))
=	O
b	*(void)
;	O
return	O
strcmp	(*(char),*(char))->(int)
(	O
dea	*(struct(*(char)))
->	O
name	*(char)
,	O
deb	*(struct(*(char)))
->	O
name	*(char)
)	O
;	O
}	O
typedef	O
int	O
(	O
*	O
comparison_function	*((*(void),*(void))->(int))
)	O
(	O
void	O
const	O
*	O
,	O
void	O
const	O
*	O
)	O
;	O
static	O
comparison_function	*((*(void),*(void))->(int))
const	O
comparison_function_table	array(*((*(void),*(void))->(int)))
[	O
]	O
=	O
{	O
0	int
,	O
direntry_cmp_name	(*(void),*(void))->(int)
}	O
;	O
char	O
*	O
streamsavedir	(*(struct),enum(int,int,int))->(*(char))
(	O
DIR	struct
*	O
dirp	*(struct)
,	O
enum	O
savedir_option	enum(int,int,int)
option	enum(int,int,int)
)	O
{	O
char	O
*	O
name_space	*(char)
=	O
NULL	O
;	O
size_t	long
allocated	long
=	O
0	int
;	O
direntry_t	struct(*(char))
*	O
entries	*(struct(*(char)))
=	O
NULL	O
;	O
size_t	long
entries_allocated	long
=	O
0	int
;	O
size_t	long
entries_used	long
=	O
0	int
;	O
size_t	long
used	long
=	O
0	int
;	O
int	O
readdir_errno	int
;	O
comparison_function	*((*(void),*(void))->(int))
cmp	*((*(void),*(void))->(int))
=	O
comparison_function_table	array(*((*(void),*(void))->(int)))
[	O
option	enum(int,int,int)
]	O
;	O
if	O
(	O
dirp	*(struct)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
struct	O
dirent	struct(long,long,short,char,array(char))
const	O
*	O
dp	*(struct(long,long,short,char,array(char)))
;	O
char	O
const	O
*	O
entry	*(char)
;	O
errno	O
=	O
0	int
;	O
dp	*(struct(long,long,short,char,array(char)))
=	O
readdir	(*(struct))->(*(struct(long,long,short,char,array(char))))
(	O
dirp	*(struct)
)	O
;	O
if	O
(	O
!	O
dp	*(struct(long,long,short,char,array(char)))
)	O
break	O
;	O
entry	*(char)
=	O
dp	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
;	O
if	O
(	O
entry	*(char)
[	O
entry	*(char)
[	O
0	int
]	O
!=	O
'.'	O
?	O
0	int
:	O
entry	*(char)
[	O
1	int
]	O
!=	O
'.'	O
?	O
1	int
:	O
2	int
]	O
!=	O
'\0'	O
)	O
{	O
size_t	long
entry_size	long
=	O
_D_EXACT_NAMLEN	O
(	O
dp	*(struct(long,long,short,char,array(char)))
)	O
+	O
1	int
;	O
if	O
(	O
cmp	*((*(void),*(void))->(int))
)	O
{	O
if	O
(	O
entries_allocated	long
==	O
entries_used	long
)	O
{	O
size_t	long
n	long
=	O
entries_allocated	long
;	O
entries	*(struct(*(char)))
=	O
x2nrealloc	(*(void),*(long),long)->(*(void))
(	O
entries	*(struct(*(char)))
,	O
&	O
n	long
,	O
sizeof	O
*	O
entries	*(struct(*(char)))
)	O
;	O
entries_allocated	long
=	O
n	long
;	O
}	O
entries	*(struct(*(char)))
[	O
entries_used	long
]	O
.	O
name	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
entry	*(char)
)	O
;	O
entries_used	long
++	O
;	O
}	O
else	O
{	O
if	O
(	O
allocated	long
-	O
used	long
<=	O
entry_size	long
)	O
{	O
size_t	long
n	long
=	O
used	long
+	O
entry_size	long
;	O
if	O
(	O
n	long
<	O
used	long
)	O
xalloc_die	()->(void)
(	O
)	O
;	O
name_space	*(char)
=	O
x2nrealloc	(*(void),*(long),long)->(*(void))
(	O
name_space	*(char)
,	O
&	O
n	long
,	O
1	int
)	O
;	O
allocated	long
=	O
n	long
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
name_space	*(char)
+	O
used	long
,	O
entry	*(char)
,	O
entry_size	long
)	O
;	O
}	O
used	long
+=	O
entry_size	long
;	O
}	O
}	O
readdir_errno	int
=	O
errno	O
;	O
if	O
(	O
readdir_errno	int
!=	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
entries	*(struct(*(char)))
)	O
;	O
free	(*(void))->(void)
(	O
name_space	*(char)
)	O
;	O
errno	O
=	O
readdir_errno	int
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
cmp	*((*(void),*(void))->(int))
)	O
{	O
size_t	long
i	long
;	O
if	O
(	O
entries_used	long
)	O
qsort	(*(void),long,long,*((*(void),*(void))->(int)))->(void)
(	O
entries	*(struct(*(char)))
,	O
entries_used	long
,	O
sizeof	O
*	O
entries	*(struct(*(char)))
,	O
cmp	*((*(void),*(void))->(int))
)	O
;	O
name_space	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
used	long
+	O
1	int
)	O
;	O
used	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
entries_used	long
;	O
i	long
++	O
)	O
{	O
char	O
*	O
dest	*(char)
=	O
name_space	*(char)
+	O
used	long
;	O
used	long
+=	O
stpcpy	(*(char),*(char))->(*(char))
(	O
dest	*(char)
,	O
entries	*(struct(*(char)))
[	O
i	long
]	O
.	O
name	*(char)
)	O
-	O
dest	*(char)
+	O
1	int
;	O
free	(*(void))->(void)
(	O
entries	*(struct(*(char)))
[	O
i	long
]	O
.	O
name	*(char)
)	O
;	O
}	O
free	(*(void))->(void)
(	O
entries	*(struct(*(char)))
)	O
;	O
}	O
else	O
if	O
(	O
used	long
==	O
allocated	long
)	O
name_space	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
name_space	*(char)
,	O
used	long
+	O
1	int
)	O
;	O
name_space	*(char)
[	O
used	long
]	O
=	O
'\0'	O
;	O
return	O
name_space	*(char)
;	O
}	O
char	O
*	O
savedir	(*(char),enum(int,int,int))->(*(char))
(	O
char	O
const	O
*	O
dir	*(char)
,	O
enum	O
savedir_option	enum(int,int,int)
option	enum(int,int,int)
)	O
{	O
DIR	struct
*	O
dirp	*(struct)
=	O
opendir	(*(char))->(*(struct))
(	O
dir	*(char)
)	O
;	O
if	O
(	O
!	O
dirp	*(struct)
)	O
return	O
NULL	O
;	O
else	O
{	O
char	O
*	O
name_space	*(char)
=	O
streamsavedir	(*(struct),enum(int,int,int))->(*(char))
(	O
dirp	*(struct)
,	O
option	enum(int,int,int)
)	O
;	O
if	O
(	O
closedir	(*(struct))->(int)
(	O
dirp	*(struct)
)	O
!=	O
0	int
)	O
{	O
int	O
closedir_errno	int
=	O
errno	O
;	O
free	(*(void))->(void)
(	O
name_space	*(char)
)	O
;	O
errno	O
=	O
closedir_errno	int
;	O
return	O
NULL	O
;	O
}	O
return	O
name_space	*(char)
;	O
}	O
}	O
