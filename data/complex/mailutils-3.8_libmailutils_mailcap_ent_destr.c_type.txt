void	O
mu_mailcap_entry_destroy	(*(*(struct)))->(void)
(	O
mu_mailcap_entry_t	*(struct)
*	O
pent	*(*(struct))
)	O
{	O
if	O
(	O
pent	*(*(struct))
&&	O
*	O
pent	*(*(struct))
)	O
{	O
mu_mailcap_entry_t	*(struct)
ent	*(struct)
=	O
*	O
pent	*(*(struct))
;	O
free	(*(void))->(void)
(	O
ent	*(struct)
->	O
type	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
ent	*(struct)
->	O
command	*(char)
)	O
;	O
mu_assoc_destroy	(*(*(struct)))->(void)
(	O
&	O
ent	*(struct)
->	O
fields	*(struct)
)	O
;	O
if	O
(	O
ent	*(struct)
->	O
lrp	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
)	O
{	O
mu_locus_range_deinit	(*(struct(struct(*(char),int,int),struct(*(char),int,int))))->(void)
(	O
ent	*(struct)
->	O
lrp	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
)	O
;	O
free	(*(void))->(void)
(	O
ent	*(struct)
->	O
lrp	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
)	O
;	O
}	O
free	(*(void))->(void)
(	O
ent	*(struct)
)	O
;	O
*	O
pent	*(*(struct))
=	O
NULL	O
;	O
}	O
}	O
void	O
mu_mailcap_entry_destroy_item	(*(void))->(void)
(	O
void	O
*	O
ptr	*(*(char))
)	O
{	O
mu_mailcap_entry_t	*(struct)
ent	*(struct)
=	O
ptr	*(*(char))
;	O
mu_mailcap_entry_destroy	(*(*(struct)))->(void)
(	O
&	O
ent	*(struct)
)	O
;	O
}	O
