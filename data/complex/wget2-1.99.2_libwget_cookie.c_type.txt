struct	O
wget_cookie_db_st	struct(*(struct),*(struct),int,bool)
{	O
wget_vector	struct
*	O
cookies	*(struct)
;	O
wget_thread_mutex	*(struct)
mutex	*(*(struct))
;	O
unsigned	O
int	O
age	int
;	O
bool	bool
keep_session_cookies	bool
:	O
1	int
;	O
}	O
;	O
int	O
wget_cookie_db_load_psl	(*(struct),*(char))->(int)
(	O
wget_cookie_db	struct
*	O
cookie_db	*(struct)
,	O
const	O
char	O
*	O
fname	*(char)
)	O
{	O
(	O
void	O
)	O
cookie_db	*(struct)
;	O
(	O
void	O
)	O
fname	*(char)
;	O
return	O
-	O
1	int
;	O
}	O
WGET_GCC_NONNULL_ALL	O
WGET_GCC_PURE	O
static	O
int	O
compare_cookie	(*(struct(*(char),*(char),*(char),*(char),long,long,long,long,int,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),long,long,long,long,int,bool,bool,bool,bool,bool,bool)))->(int)
(	O
const	O
wget_cookie	struct
*	O
c1	*(struct(*(char),*(char),*(char),*(char),long,long,long,long,int,bool,bool,bool,bool,bool,bool))
,	O
const	O
wget_cookie	struct
*	O
c2	*(struct(*(char),*(char),*(char),*(char),long,long,long,long,int,bool,bool,bool,bool,bool,bool))
)	O
{	O
int	O
n	long
;	O
if	O
(	O
!	O
(	O
n	long
=	O
wget_strcmp	(*(char),*(char))->(int)
(	O
c1	*(struct(*(char),*(char),*(char),*(char),long,long,long,long,int,bool,bool,bool,bool,bool,bool))
->	O
domain	*(char)
,	O
c2	*(struct(*(char),*(char),*(char),*(char),long,long,long,long,int,bool,bool,bool,bool,bool,bool))
->	O
domain	*(char)
)	O
)	O
)	O
{	O
if	O
(	O
!	O
(	O
n	long
=	O
wget_strcmp	(*(char),*(char))->(int)
(	O
c1	*(struct(*(char),*(char),*(char),*(char),long,long,long,long,int,bool,bool,bool,bool,bool,bool))
->	O
name	*(char)
,	O
c2	*(struct(*(char),*(char),*(char),*(char),long,long,long,long,int,bool,bool,bool,bool,bool,bool))
->	O
name	*(char)
)	O
)	O
)	O
{	O
n	long
=	O
wget_strcmp	(*(char),*(char))->(int)
(	O
c1	*(struct(*(char),*(char),*(char),*(char),long,long,long,long,int,bool,bool,bool,bool,bool,bool))
->	O
path	*(char)
,	O
c2	*(struct(*(char),*(char),*(char),*(char),long,long,long,long,int,bool,bool,bool,bool,bool,bool))
->	O
path	*(char)
)	O
;	O
}	O
}	O
return	O
n	long
;	O
}	O
WGET_GCC_NONNULL_ALL	O
WGET_GCC_PURE	O
static	O
int	O
compare_cookie2	(*(struct(*(char),*(char),*(char),*(char),long,long,long,long,int,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),long,long,long,long,int,bool,bool,bool,bool,bool,bool)))->(int)
(	O
const	O
wget_cookie	struct
*	O
c1	*(struct(*(char),*(char),*(char),*(char),long,long,long,long,int,bool,bool,bool,bool,bool,bool))
,	O
const	O
wget_cookie	struct
*	O
c2	*(struct(*(char),*(char),*(char),*(char),long,long,long,long,int,bool,bool,bool,bool,bool,bool))
)	O
{	O
size_t	long
len1	long
=	O
strlen	(*(char))->(long)
(	O
c1	*(struct(*(char),*(char),*(char),*(char),long,long,long,long,int,bool,bool,bool,bool,bool,bool))
->	O
path	*(char)
)	O
;	O
size_t	long
len2	long
=	O
strlen	(*(char))->(long)
(	O
c2	*(struct(*(char),*(char),*(char),*(char),long,long,long,long,int,bool,bool,bool,bool,bool,bool))
->	O
path	*(char)
)	O
;	O
if	O
(	O
len1	long
<	O
len2	long
)	O
return	O
1	int
;	O
if	O
(	O
len1	long
>	O
len2	long
)	O
return	O
-	O
1	int
;	O
if	O
(	O
c1	*(struct(*(char),*(char),*(char),*(char),long,long,long,long,int,bool,bool,bool,bool,bool,bool))
->	O
sort_age	int
<	O
c2	*(struct(*(char),*(char),*(char),*(char),long,long,long,long,int,bool,bool,bool,bool,bool,bool))
->	O
sort_age	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
c1	*(struct(*(char),*(char),*(char),*(char),long,long,long,long,int,bool,bool,bool,bool,bool,bool))
->	O
sort_age	int
>	O
c2	*(struct(*(char),*(char),*(char),*(char),long,long,long,long,int,bool,bool,bool,bool,bool,bool))
->	O
sort_age	int
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
wget_cookie_check_psl	(*(struct),*(struct))->(int)
(	O
const	O
wget_cookie_db	struct
*	O
cookie_db	*(struct)
,	O
const	O
wget_cookie	struct
*	O
cookie	*(struct)
)	O
{	O
(	O
void	O
)	O
cookie_db	*(struct)
;	O
(	O
void	O
)	O
cookie	*(struct)
;	O
int	O
ret	int
=	O
0	int
;	O
return	O
ret	int
;	O
}	O
int	O
wget_cookie_store_cookie	(*(struct),*(struct))->(int)
(	O
wget_cookie_db	struct
*	O
cookie_db	*(struct)
,	O
wget_cookie	struct
*	O
cookie	*(struct)
)	O
{	O
wget_cookie	struct
*	O
old	*(struct(*(char),*(char),*(char),*(char),long,long,long,long,int,bool,bool,bool,bool,bool,bool))
;	O
int	O
pos	int
;	O
if	O
(	O
!	O
cookie	*(struct)
)	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
!	O
cookie_db	*(struct)
)	O
{	O
wget_cookie_free	(*(*(struct)))->(void)
(	O
&	O
cookie	*(struct)
)	O
;	O
return	O
WGET_E_INVALID	int
;	O
}	O
debug_printf	O
(	O
"got cookie %s=%s\n"	*(char)
,	O
cookie	*(struct)
->	O
name	*(char)
,	O
cookie	*(struct)
->	O
value	*(void)
)	O
;	O
if	O
(	O
!	O
cookie	*(struct)
->	O
normalized	bool
)	O
{	O
debug_printf	O
(	O
"cookie '%s' dropped, it wasn't normalized\n"	*(char)
,	O
cookie	*(struct)
->	O
name	*(char)
)	O
;	O
wget_cookie_free	(*(*(struct)))->(void)
(	O
&	O
cookie	*(struct)
)	O
;	O
return	O
WGET_E_INVALID	int
;	O
}	O
if	O
(	O
wget_cookie_check_psl	(*(struct),*(struct))->(int)
(	O
cookie_db	*(struct)
,	O
cookie	*(struct)
)	O
!=	O
0	int
)	O
{	O
debug_printf	O
(	O
"cookie '%s' dropped, domain '%s' is a public suffix\n"	*(char)
,	O
cookie	*(struct)
->	O
name	*(char)
,	O
cookie	*(struct)
->	O
domain	*(char)
)	O
;	O
wget_cookie_free	(*(*(struct)))->(void)
(	O
&	O
cookie	*(struct)
)	O
;	O
return	O
WGET_E_INVALID	int
;	O
}	O
wget_thread_mutex_lock	(*(struct))->(void)
(	O
cookie_db	*(struct)
->	O
mutex	*(*(struct))
)	O
;	O
old	*(struct(*(char),*(char),*(char),*(char),long,long,long,long,int,bool,bool,bool,bool,bool,bool))
=	O
wget_vector_get	(*(struct),int)->(*(void))
(	O
cookie_db	*(struct)
->	O
cookies	*(struct)
,	O
pos	int
=	O
wget_vector_find	(*(struct),*(void))->(int)
(	O
cookie_db	*(struct)
->	O
cookies	*(struct)
,	O
cookie	*(struct)
)	O
)	O
;	O
if	O
(	O
old	*(struct(*(char),*(char),*(char),*(char),long,long,long,long,int,bool,bool,bool,bool,bool,bool))
)	O
{	O
debug_printf	O
(	O
"replace old cookie %s=%s\n"	*(char)
,	O
cookie	*(struct)
->	O
name	*(char)
,	O
cookie	*(struct)
->	O
value	*(void)
)	O
;	O
cookie	*(struct)
->	O
creation	long
=	O
old	*(struct(*(char),*(char),*(char),*(char),long,long,long,long,int,bool,bool,bool,bool,bool,bool))
->	O
creation	long
;	O
cookie	*(struct)
->	O
sort_age	int
=	O
old	*(struct(*(char),*(char),*(char),*(char),long,long,long,long,int,bool,bool,bool,bool,bool,bool))
->	O
sort_age	int
;	O
wget_vector_replace	(*(struct),*(void),int)->(int)
(	O
cookie_db	*(struct)
->	O
cookies	*(struct)
,	O
cookie	*(struct)
,	O
pos	int
)	O
;	O
}	O
else	O
{	O
debug_printf	O
(	O
"store new cookie %s=%s\n"	*(char)
,	O
cookie	*(struct)
->	O
name	*(char)
,	O
cookie	*(struct)
->	O
value	*(void)
)	O
;	O
cookie	*(struct)
->	O
sort_age	int
=	O
++	O
cookie_db	*(struct)
->	O
age	int
;	O
wget_vector_insert_sorted	(*(struct),*(void))->(int)
(	O
cookie_db	*(struct)
->	O
cookies	*(struct)
,	O
cookie	*(struct)
)	O
;	O
}	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
cookie_db	*(struct)
->	O
mutex	*(*(struct))
)	O
;	O
return	O
WGET_E_SUCCESS	int
;	O
}	O
void	O
wget_cookie_store_cookies	(*(struct),*(struct))->(void)
(	O
wget_cookie_db	struct
*	O
cookie_db	*(struct)
,	O
wget_vector	struct
*	O
cookies	*(struct)
)	O
{	O
if	O
(	O
cookie_db	*(struct)
)	O
{	O
int	O
it	int
;	O
for	O
(	O
it	int
=	O
0	int
;	O
it	int
<	O
wget_vector_size	(*(struct))->(int)
(	O
cookies	*(struct)
)	O
;	O
it	int
++	O
)	O
{	O
wget_cookie	struct
*	O
cookie	*(struct)
=	O
wget_vector_get	(*(struct),int)->(*(void))
(	O
cookies	*(struct)
,	O
it	int
)	O
;	O
wget_cookie_store_cookie	(*(struct),*(struct))->(int)
(	O
cookie_db	*(struct)
,	O
cookie	*(struct)
)	O
;	O
}	O
wget_vector_clear_nofree	(*(struct))->(void)
(	O
cookies	*(struct)
)	O
;	O
}	O
}	O
char	O
*	O
wget_cookie_create_request_header	(*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))->(*(char))
(	O
wget_cookie_db	struct
*	O
cookie_db	*(struct)
,	O
const	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
{	O
int	O
it	int
,	O
init	*((*(struct),*(char))->(*(struct)))
=	O
0	int
;	O
time_t	long
now	long
=	O
time	struct(long,long)
(	O
NULL	O
)	O
;	O
wget_vector	struct
*	O
cookies	*(struct)
=	O
NULL	O
;	O
wget_buffer	struct(*(char),long,long,bool,bool,bool)
buf	*(char)
;	O
if	O
(	O
!	O
cookie_db	*(struct)
||	O
!	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
return	O
NULL	O
;	O
debug_printf	O
(	O
"cookie_create_request_header for host=%s path=%s\n"	*(char)
,	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
host	*(char)
,	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
path	*(char)
)	O
;	O
wget_thread_mutex_lock	(*(struct))->(void)
(	O
cookie_db	*(struct)
->	O
mutex	*(*(struct))
)	O
;	O
for	O
(	O
it	int
=	O
0	int
;	O
it	int
<	O
wget_vector_size	(*(struct))->(int)
(	O
cookie_db	*(struct)
->	O
cookies	*(struct)
)	O
;	O
it	int
++	O
)	O
{	O
wget_cookie	struct
*	O
cookie	*(struct)
=	O
wget_vector_get	(*(struct),int)->(*(void))
(	O
cookie_db	*(struct)
->	O
cookies	*(struct)
,	O
it	int
)	O
;	O
if	O
(	O
cookie	*(struct)
->	O
host_only	bool
&&	O
strcmp	(*(char),*(char))->(int)
(	O
cookie	*(struct)
->	O
domain	*(char)
,	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
host	*(char)
)	O
)	O
{	O
debug_printf	O
(	O
"cookie host match failed (%s,%s)\n"	*(char)
,	O
cookie	*(struct)
->	O
domain	*(char)
,	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
host	*(char)
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
!	O
cookie	*(struct)
->	O
host_only	bool
&&	O
!	O
cookie_domain_match	(*(char),*(char))->(bool)
(	O
cookie	*(struct)
->	O
domain	*(char)
,	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
host	*(char)
)	O
)	O
{	O
debug_printf	O
(	O
"cookie domain match failed (%s,%s)\n"	*(char)
,	O
cookie	*(struct)
->	O
domain	*(char)
,	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
host	*(char)
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
cookie	*(struct)
->	O
expires	long
&&	O
cookie	*(struct)
->	O
expires	long
<=	O
now	long
)	O
{	O
debug_printf	O
(	O
"cookie expired (%lld <= %lld)\n"	*(char)
,	O
(	O
long	O
long	O
)	O
cookie	*(struct)
->	O
expires	long
,	O
(	O
long	O
long	O
)	O
now	long
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
cookie	*(struct)
->	O
secure_only	bool
&&	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
scheme	enum(int,int)
!=	O
WGET_IRI_SCHEME_HTTPS	int
)	O
{	O
debug_printf	O
(	O
"cookie ignored, not secure\n"	*(char)
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
!	O
cookie_path_match	(*(char),*(char))->(bool)
(	O
cookie	*(struct)
->	O
path	*(char)
,	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
path	*(char)
)	O
)	O
{	O
debug_printf	O
(	O
"cookie path doesn't match (%s, %s)\n"	*(char)
,	O
cookie	*(struct)
->	O
path	*(char)
,	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
path	*(char)
)	O
;	O
continue	O
;	O
}	O
debug_printf	O
(	O
"found %s=%s\n"	*(char)
,	O
cookie	*(struct)
->	O
name	*(char)
,	O
cookie	*(struct)
->	O
value	*(void)
)	O
;	O
if	O
(	O
!	O
cookies	*(struct)
)	O
cookies	*(struct)
=	O
wget_vector_create	(int,*((*(void),*(void))->(int)))->(*(struct))
(	O
16	int
,	O
(	O
wget_vector_compare_fn	(*(void),*(void))->(int)
*	O
)	O
compare_cookie2	(*(struct(*(char),*(char),*(char),*(char),long,long,long,long,int,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),long,long,long,long,int,bool,bool,bool,bool,bool,bool)))->(int)
)	O
;	O
wget_vector_add	(*(struct),*(void))->(int)
(	O
cookies	*(struct)
,	O
cookie	*(struct)
)	O
;	O
}	O
wget_vector_sort	(*(struct))->(void)
(	O
cookies	*(struct)
)	O
;	O
for	O
(	O
it	int
=	O
0	int
;	O
it	int
<	O
wget_vector_size	(*(struct))->(int)
(	O
cookies	*(struct)
)	O
;	O
it	int
++	O
)	O
{	O
wget_cookie	struct
*	O
cookie	*(struct)
=	O
wget_vector_get	(*(struct),int)->(*(void))
(	O
cookies	*(struct)
,	O
it	int
)	O
;	O
if	O
(	O
!	O
init	*((*(struct),*(char))->(*(struct)))
)	O
{	O
wget_buffer_init	(*(struct(*(char),long,long,bool,bool,bool)),*(char),long)->(int)
(	O
&	O
buf	*(char)
,	O
NULL	O
,	O
128	int
)	O
;	O
init	*((*(struct),*(char))->(*(struct)))
=	O
1	int
;	O
}	O
if	O
(	O
buf	*(char)
.	O
length	long
)	O
wget_buffer_printf_append	(*(struct(*(char),long,long,bool,bool,bool)),*(char))->(long)
(	O
&	O
buf	*(char)
,	O
"; %s=%s"	*(char)
,	O
cookie	*(struct)
->	O
name	*(char)
,	O
cookie	*(struct)
->	O
value	*(void)
)	O
;	O
else	O
wget_buffer_printf_append	(*(struct(*(char),long,long,bool,bool,bool)),*(char))->(long)
(	O
&	O
buf	*(char)
,	O
"%s=%s"	*(char)
,	O
cookie	*(struct)
->	O
name	*(char)
,	O
cookie	*(struct)
->	O
value	*(void)
)	O
;	O
}	O
wget_vector_clear_nofree	(*(struct))->(void)
(	O
cookies	*(struct)
)	O
;	O
wget_vector_free	(*(*(struct)))->(void)
(	O
&	O
cookies	*(struct)
)	O
;	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
cookie_db	*(struct)
->	O
mutex	*(*(struct))
)	O
;	O
return	O
init	*((*(struct),*(char))->(*(struct)))
?	O
buf	*(char)
.	O
data	*(void)
:	O
NULL	O
;	O
}	O
wget_cookie_db	struct
*	O
wget_cookie_db_init	(*(struct))->(*(struct))
(	O
wget_cookie_db	struct
*	O
cookie_db	*(struct)
)	O
{	O
if	O
(	O
!	O
cookie_db	*(struct)
)	O
{	O
cookie_db	*(struct)
=	O
wget_malloc	(long)->(*(void))
(	O
sizeof	O
(	O
wget_cookie_db	struct
)	O
)	O
;	O
if	O
(	O
!	O
cookie_db	*(struct)
)	O
return	O
NULL	O
;	O
}	O
memset	(*(void),int,long)->(*(void))
(	O
cookie_db	*(struct)
,	O
0	int
,	O
sizeof	O
(	O
*	O
cookie_db	*(struct)
)	O
)	O
;	O
cookie_db	*(struct)
->	O
cookies	*(struct)
=	O
wget_vector_create	(int,*((*(void),*(void))->(int)))->(*(struct))
(	O
32	int
,	O
(	O
wget_vector_compare_fn	(*(void),*(void))->(int)
*	O
)	O
compare_cookie	(*(struct(*(char),*(char),*(char),*(char),long,long,long,long,int,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),long,long,long,long,int,bool,bool,bool,bool,bool,bool)))->(int)
)	O
;	O
wget_vector_set_destructor	(*(struct),*((*(void))->(void)))->(void)
(	O
cookie_db	*(struct)
->	O
cookies	*(struct)
,	O
cookie_free	(*(void))->(void)
)	O
;	O
wget_thread_mutex_init	(*(*(struct)))->(int)
(	O
&	O
cookie_db	*(struct)
->	O
mutex	*(*(struct))
)	O
;	O
return	O
cookie_db	*(struct)
;	O
}	O
void	O
wget_cookie_db_deinit	(*(struct))->(void)
(	O
wget_cookie_db	struct
*	O
cookie_db	*(struct)
)	O
{	O
if	O
(	O
cookie_db	*(struct)
)	O
{	O
wget_thread_mutex_lock	(*(struct))->(void)
(	O
cookie_db	*(struct)
->	O
mutex	*(*(struct))
)	O
;	O
wget_vector_free	(*(*(struct)))->(void)
(	O
&	O
cookie_db	*(struct)
->	O
cookies	*(struct)
)	O
;	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
cookie_db	*(struct)
->	O
mutex	*(*(struct))
)	O
;	O
wget_thread_mutex_destroy	(*(*(struct)))->(int)
(	O
&	O
cookie_db	*(struct)
->	O
mutex	*(*(struct))
)	O
;	O
}	O
}	O
void	O
wget_cookie_db_free	(*(*(struct)))->(void)
(	O
wget_cookie_db	struct
*	O
*	O
cookie_db	*(struct)
)	O
{	O
if	O
(	O
cookie_db	*(struct)
)	O
{	O
wget_cookie_db_deinit	(*(struct))->(void)
(	O
*	O
cookie_db	*(struct)
)	O
;	O
xfree	O
(	O
*	O
cookie_db	*(struct)
)	O
;	O
}	O
}	O
void	O
wget_cookie_set_keep_session_cookies	(*(struct),int)->(void)
(	O
wget_cookie_db	struct
*	O
cookie_db	*(struct)
,	O
int	O
keep	int
)	O
{	O
if	O
(	O
cookie_db	*(struct)
)	O
cookie_db	*(struct)
->	O
keep_session_cookies	bool
=	O
!	O
!	O
keep	int
;	O
}	O
static	O
int	O
cookie_db_load	(*(struct(*(struct),*(struct),int,bool)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
wget_cookie_db	struct
*	O
cookie_db	*(struct)
,	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
wget_cookie	struct
cookie	*(struct)
;	O
int	O
ncookies	int
=	O
0	int
;	O
char	O
*	O
buf	*(char)
=	O
NULL	O
,	O
*	O
linep	*(char)
,	O
*	O
p	*(char)
;	O
size_t	long
bufsize	long
=	O
0	int
;	O
ssize_t	long
buflen	long
;	O
time_t	long
now	long
=	O
time	struct(long,long)
(	O
NULL	O
)	O
;	O
wget_cookie_init	(*(struct))->(*(struct))
(	O
&	O
cookie	*(struct)
)	O
;	O
while	O
(	O
(	O
buflen	long
=	O
wget_getline	(*(*(char)),*(long),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
&	O
buf	*(char)
,	O
&	O
bufsize	long
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
>=	O
0	int
)	O
{	O
linep	*(char)
=	O
buf	*(char)
;	O
while	O
(	O
isspace	(int)->(int)
(	O
*	O
linep	*(char)
)	O
)	O
linep	*(char)
++	O
;	O
if	O
(	O
!	O
*	O
linep	*(char)
)	O
continue	O
;	O
if	O
(	O
*	O
linep	*(char)
==	O
'#'	O
)	O
{	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
linep	*(char)
,	O
"#HttpOnly_"	*(char)
,	O
10	int
)	O
)	O
continue	O
;	O
linep	*(char)
=	O
linep	*(char)
+	O
10	int
;	O
cookie	*(struct)
.	O
http_only	bool
=	O
1	int
;	O
}	O
else	O
{	O
cookie	*(struct)
.	O
http_only	bool
=	O
0	int
;	O
}	O
while	O
(	O
buflen	long
>	O
0	int
&&	O
(	O
buf	*(char)
[	O
buflen	long
]	O
==	O
'\n'	O
||	O
buf	*(char)
[	O
buflen	long
]	O
==	O
'\r'	O
)	O
)	O
buf	*(char)
[	O
--	O
buflen	long
]	O
=	O
0	int
;	O
for	O
(	O
p	*(char)
=	O
linep	*(char)
;	O
*	O
linep	*(char)
&&	O
*	O
linep	*(char)
!=	O
'\t'	O
;	O
)	O
linep	*(char)
++	O
;	O
if	O
(	O
*	O
p	*(char)
==	O
'.'	O
)	O
{	O
p	*(char)
++	O
;	O
cookie	*(struct)
.	O
domain_dot	bool
=	O
1	int
;	O
}	O
cookie	*(struct)
.	O
domain	*(char)
=	O
wget_strmemdup	(*(void),long)->(*(char))
(	O
p	*(char)
,	O
linep	*(char)
-	O
p	*(char)
)	O
;	O
for	O
(	O
p	*(char)
=	O
*	O
linep	*(char)
?	O
++	O
linep	*(char)
:	O
linep	*(char)
;	O
*	O
linep	*(char)
&&	O
*	O
linep	*(char)
!=	O
'\t'	O
;	O
)	O
linep	*(char)
++	O
;	O
cookie	*(struct)
.	O
host_only	bool
=	O
wget_strncasecmp_ascii	(*(char),*(char),long)->(int)
(	O
p	*(char)
,	O
"TRUE"	*(char)
,	O
4	int
)	O
;	O
for	O
(	O
p	*(char)
=	O
*	O
linep	*(char)
?	O
++	O
linep	*(char)
:	O
linep	*(char)
;	O
*	O
linep	*(char)
&&	O
*	O
linep	*(char)
!=	O
'\t'	O
;	O
)	O
linep	*(char)
++	O
;	O
if	O
(	O
p	*(char)
!=	O
linep	*(char)
)	O
cookie	*(struct)
.	O
path	*(char)
=	O
wget_strmemdup	(*(void),long)->(*(char))
(	O
p	*(char)
,	O
linep	*(char)
-	O
p	*(char)
)	O
;	O
else	O
cookie	*(struct)
.	O
path	*(char)
=	O
wget_strmemdup	(*(void),long)->(*(char))
(	O
"/"	*(char)
,	O
1	int
)	O
;	O
for	O
(	O
p	*(char)
=	O
*	O
linep	*(char)
?	O
++	O
linep	*(char)
:	O
linep	*(char)
;	O
*	O
linep	*(char)
&&	O
*	O
linep	*(char)
!=	O
'\t'	O
;	O
)	O
linep	*(char)
++	O
;	O
cookie	*(struct)
.	O
secure_only	bool
=	O
!	O
wget_strncasecmp_ascii	(*(char),*(char),long)->(int)
(	O
p	*(char)
,	O
"TRUE"	*(char)
,	O
4	int
)	O
;	O
for	O
(	O
p	*(char)
=	O
*	O
linep	*(char)
?	O
++	O
linep	*(char)
:	O
linep	*(char)
;	O
*	O
linep	*(char)
&&	O
*	O
linep	*(char)
!=	O
'\t'	O
;	O
)	O
linep	*(char)
++	O
;	O
cookie	*(struct)
.	O
expires	long
=	O
(	O
time_t	long
)	O
atoll	(*(char))->(long long)
(	O
p	*(char)
)	O
;	O
if	O
(	O
cookie	*(struct)
.	O
expires	long
&&	O
cookie	*(struct)
.	O
expires	long
<=	O
now	long
)	O
{	O
wget_cookie_deinit	(*(struct))->(void)
(	O
&	O
cookie	*(struct)
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
!	O
cookie	*(struct)
.	O
expires	long
&&	O
!	O
cookie_db	*(struct)
->	O
keep_session_cookies	bool
)	O
{	O
wget_cookie_deinit	(*(struct))->(void)
(	O
&	O
cookie	*(struct)
)	O
;	O
continue	O
;	O
}	O
for	O
(	O
p	*(char)
=	O
*	O
linep	*(char)
?	O
++	O
linep	*(char)
:	O
linep	*(char)
;	O
*	O
linep	*(char)
&&	O
*	O
linep	*(char)
!=	O
'\t'	O
;	O
)	O
linep	*(char)
++	O
;	O
if	O
(	O
linep	*(char)
==	O
p	*(char)
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Incomplete cookie entry: %s\n"	*(char)
)	O
,	O
buf	*(char)
)	O
;	O
wget_cookie_deinit	(*(struct))->(void)
(	O
&	O
cookie	*(struct)
)	O
;	O
continue	O
;	O
}	O
cookie	*(struct)
.	O
name	*(char)
=	O
wget_strmemdup	(*(void),long)->(*(char))
(	O
p	*(char)
,	O
linep	*(char)
-	O
p	*(char)
)	O
;	O
for	O
(	O
p	*(char)
=	O
*	O
linep	*(char)
?	O
++	O
linep	*(char)
:	O
linep	*(char)
;	O
*	O
linep	*(char)
;	O
)	O
linep	*(char)
++	O
;	O
cookie	*(struct)
.	O
value	*(void)
=	O
wget_strmemdup	(*(void),long)->(*(char))
(	O
p	*(char)
,	O
linep	*(char)
-	O
p	*(char)
)	O
;	O
if	O
(	O
wget_cookie_normalize	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct))->(int)
(	O
NULL	O
,	O
&	O
cookie	*(struct)
)	O
==	O
0	int
&&	O
wget_cookie_check_psl	(*(struct),*(struct))->(int)
(	O
cookie_db	*(struct)
,	O
&	O
cookie	*(struct)
)	O
==	O
0	int
)	O
{	O
ncookies	int
++	O
;	O
wget_cookie_store_cookie	(*(struct),*(struct))->(int)
(	O
cookie_db	*(struct)
,	O
wget_memdup	(*(void),long)->(*(void))
(	O
&	O
cookie	*(struct)
,	O
sizeof	O
(	O
cookie	*(struct)
)	O
)	O
)	O
;	O
}	O
else	O
wget_cookie_deinit	(*(struct))->(void)
(	O
&	O
cookie	*(struct)
)	O
;	O
}	O
xfree	O
(	O
buf	*(char)
)	O
;	O
if	O
(	O
ferror	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
{	O
return	O
-	O
1	int
;	O
}	O
return	O
ncookies	int
;	O
}	O
int	O
wget_cookie_db_load	(*(struct),*(char))->(int)
(	O
wget_cookie_db	struct
*	O
cookie_db	*(struct)
,	O
const	O
char	O
*	O
fname	*(char)
)	O
{	O
if	O
(	O
!	O
cookie_db	*(struct)
||	O
!	O
fname	*(char)
||	O
!	O
*	O
fname	*(char)
)	O
return	O
0	int
;	O
if	O
(	O
wget_update_file	(*(char),*((*(void),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))))->(int)),*((*(void),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))))->(int)),*(void))->(int)
(	O
fname	*(char)
,	O
(	O
wget_update_load_fn	(*(void),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
*	O
)	O
cookie_db_load	(*(struct(*(struct),*(struct),int,bool)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
,	O
NULL	O
,	O
cookie_db	*(struct)
)	O
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to read cookies\n"	*(char)
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
{	O
debug_printf	O
(	O
"Fetched cookies from '%s'\n"	*(char)
,	O
fname	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
}	O
static	O
int	O
cookie_db_save	(*(struct(*(struct),*(struct),int,bool)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
wget_cookie_db	struct
*	O
cookie_db	*(struct)
,	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
if	O
(	O
wget_vector_size	(*(struct))->(int)
(	O
cookie_db	*(struct)
->	O
cookies	*(struct)
)	O
>	O
0	int
)	O
{	O
int	O
it	int
;	O
time_t	long
now	long
=	O
time	struct(long,long)
(	O
NULL	O
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"# HTTP cookie file\n"	*(char)
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"#Generated by Wget "	*(char)
PACKAGE_VERSION	*(char)
". Edit at your own risk.\n\n"	*(char)
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
for	O
(	O
it	int
=	O
0	int
;	O
it	int
<	O
wget_vector_size	(*(struct))->(int)
(	O
cookie_db	*(struct)
->	O
cookies	*(struct)
)	O
;	O
it	int
++	O
)	O
{	O
wget_cookie	struct
*	O
cookie	*(struct)
=	O
wget_vector_get	(*(struct),int)->(*(void))
(	O
cookie_db	*(struct)
->	O
cookies	*(struct)
,	O
it	int
)	O
;	O
if	O
(	O
cookie	*(struct)
->	O
persistent	bool
)	O
{	O
if	O
(	O
cookie	*(struct)
->	O
expires	long
<=	O
now	long
)	O
continue	O
;	O
}	O
else	O
if	O
(	O
!	O
cookie_db	*(struct)
->	O
keep_session_cookies	bool
)	O
continue	O
;	O
wget_fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(long)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s%s%s\t%s\t%s\t%s\t%lld\t%s\t%s\n"	*(char)
,	O
cookie	*(struct)
->	O
http_only	bool
?	O
"#HttpOnly_"	*(char)
:	O
""	*(char)
,	O
cookie	*(struct)
->	O
domain_dot	bool
?	O
"."	*(char)
:	O
""	*(char)
,	O
cookie	*(struct)
->	O
domain	*(char)
,	O
cookie	*(struct)
->	O
host_only	bool
?	O
"FALSE"	*(char)
:	O
"TRUE"	*(char)
,	O
cookie	*(struct)
->	O
path	*(char)
,	O
cookie	*(struct)
->	O
secure_only	bool
?	O
"TRUE"	*(char)
:	O
"FALSE"	*(char)
,	O
(	O
long	O
long	O
)	O
cookie	*(struct)
->	O
expires	long
,	O
cookie	*(struct)
->	O
name	*(char)
,	O
cookie	*(struct)
->	O
value	*(void)
)	O
;	O
if	O
(	O
ferror	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
return	O
-	O
1	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
wget_cookie_db_save	(*(struct),*(char))->(int)
(	O
wget_cookie_db	struct
*	O
cookie_db	*(struct)
,	O
const	O
char	O
*	O
fname	*(char)
)	O
{	O
int	O
size	*(long)
;	O
if	O
(	O
!	O
cookie_db	*(struct)
||	O
!	O
fname	*(char)
||	O
!	O
*	O
fname	*(char)
)	O
return	O
-	O
1	int
;	O
if	O
(	O
wget_update_file	(*(char),*((*(void),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))))->(int)),*((*(void),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))))->(int)),*(void))->(int)
(	O
fname	*(char)
,	O
(	O
wget_update_load_fn	(*(void),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
*	O
)	O
cookie_db_load	(*(struct(*(struct),*(struct),int,bool)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
,	O
(	O
wget_update_save_fn	(*(void),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
*	O
)	O
cookie_db_save	(*(struct(*(struct),*(struct),int,bool)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
,	O
cookie_db	*(struct)
)	O
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to write cookie file '%s'\n"	*(char)
)	O
,	O
fname	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
(	O
size	*(long)
=	O
wget_vector_size	(*(struct))->(int)
(	O
cookie_db	*(struct)
->	O
cookies	*(struct)
)	O
)	O
)	O
debug_printf	O
(	O
"Saved %d cookie%s into '%s'\n"	*(char)
,	O
size	*(long)
,	O
size	*(long)
!=	O
1	int
?	O
"s"	*(char)
:	O
""	*(char)
,	O
fname	*(char)
)	O
;	O
else	O
debug_printf	O
(	O
"No cookies to save. Table is empty.\n"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
