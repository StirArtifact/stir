int	O
hotlist_has_dot_dot	int
=	O
1	int
;	O
static	O
WListbox	struct
*	O
l_hotlist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
;	O
static	O
WListbox	struct
*	O
l_movelist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
;	O
static	O
Dlg_head	struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))))))
*	O
hotlist_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
;	O
static	O
Dlg_head	struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))))))
*	O
movelist_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
;	O
static	O
WLabel	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))),int,*(char),int)
*	O
pname	*(*(char))
,	O
*	O
pname_group	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
,	O
*	O
movelist_group	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
;	O
enum	O
HotListType	enum(int,int,int,int)
{	O
HL_TYPE_GROUP	int
,	O
HL_TYPE_ENTRY	int
,	O
HL_TYPE_COMMENT	int
,	O
HL_TYPE_DOTDOT	int
}	O
;	O
static	O
struct	O
{	O
int	O
expanded	int
;	O
int	O
loaded	int
;	O
int	O
readonly	int
;	O
int	O
file_error	int
;	O
int	O
running	int
;	O
int	O
moving	int
;	O
int	O
modified	long
;	O
int	O
type	enum(int,int,int,int)
;	O
}	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
;	O
static	O
struct	O
_hotlist_but	struct(int,int,int,int,*(char),int)
{	O
int	O
ret_cmd	int
,	O
flags	enum(int,int,int,int)
,	O
y	short
,	O
x	array(long)
;	O
const	O
char	O
*	O
text	*(char)
;	O
int	O
type	enum(int,int,int,int)
;	O
}	O
hotlist_but	array(struct(int,int,int,int,*(char),int))
[	O
]	O
=	O
{	O
{	O
B_MOVE	O
,	O
NORMAL_BUTTON	int
,	O
1	int
,	O
42	int
,	O
N_	O
(	O
"&Move"	*(char)
)	O
,	O
LIST_HOTLIST	int
}	O
,	O
{	O
B_REMOVE	O
,	O
NORMAL_BUTTON	int
,	O
1	int
,	O
30	int
,	O
N_	O
(	O
"&Remove"	*(char)
)	O
,	O
LIST_HOTLIST	int
}	O
,	O
{	O
B_APPEND	O
,	O
NORMAL_BUTTON	int
,	O
1	int
,	O
15	int
,	O
N_	O
(	O
"&Append"	*(char)
)	O
,	O
LIST_MOVELIST	int
}	O
,	O
{	O
B_INSERT	O
,	O
NORMAL_BUTTON	int
,	O
1	int
,	O
0	int
,	O
N_	O
(	O
"&Insert"	*(char)
)	O
,	O
LIST_MOVELIST	int
}	O
,	O
{	O
B_NEW_ENTRY	O
,	O
NORMAL_BUTTON	int
,	O
1	int
,	O
15	int
,	O
N_	O
(	O
"New &Entry"	*(char)
)	O
,	O
LIST_HOTLIST	int
}	O
,	O
{	O
B_NEW_GROUP	O
,	O
NORMAL_BUTTON	int
,	O
1	int
,	O
0	int
,	O
N_	O
(	O
"New &Group"	*(char)
)	O
,	O
LIST_HOTLIST	int
}	O
,	O
{	O
B_CANCEL	int
,	O
NORMAL_BUTTON	int
,	O
0	int
,	O
53	int
,	O
N_	O
(	O
"&Cancel"	*(char)
)	O
,	O
LIST_HOTLIST	int
|	O
LIST_VFSLIST	int
|	O
LIST_MOVELIST	int
}	O
,	O
{	O
B_UP_GROUP	O
,	O
NORMAL_BUTTON	int
,	O
0	int
,	O
42	int
,	O
N_	O
(	O
"&Up"	*(char)
)	O
,	O
LIST_HOTLIST	int
|	O
LIST_MOVELIST	int
}	O
,	O
{	O
B_ADD_CURRENT	O
,	O
NORMAL_BUTTON	int
,	O
0	int
,	O
20	int
,	O
N_	O
(	O
"&Add current"	*(char)
)	O
,	O
LIST_HOTLIST	int
}	O
,	O
{	O
B_REFRESH_VFS	O
,	O
NORMAL_BUTTON	int
,	O
0	int
,	O
43	int
,	O
N_	O
(	O
"&Refresh"	*(char)
)	O
,	O
LIST_VFSLIST	int
}	O
,	O
{	O
B_FREE_ALL_VFS	O
,	O
NORMAL_BUTTON	int
,	O
0	int
,	O
20	int
,	O
N_	O
(	O
"Fr&ee VFSs now"	*(char)
)	O
,	O
LIST_VFSLIST	int
}	O
,	O
{	O
B_ENTER	int
,	O
DEFPUSH_BUTTON	int
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"Change &To"	*(char)
)	O
,	O
LIST_HOTLIST	int
|	O
LIST_VFSLIST	int
|	O
LIST_MOVELIST	int
}	O
,	O
}	O
;	O
static	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
{	O
enum	O
HotListType	enum(int,int,int,int)
type	enum(int,int,int,int)
;	O
char	O
*	O
directory	enum(int,int,int,int,int,int,int,int,int)
;	O
char	O
*	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
;	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
head	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
up	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
;	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
}	O
*	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
=	O
NULL	O
;	O
static	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
current_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
;	O
static	O
void	O
init_movelist	(int,*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))->(void)
(	O
int	O
,	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
)	O
;	O
static	O
void	O
add_new_group_cmd	()->(void)
(	O
void	O
)	O
;	O
static	O
void	O
add_new_entry_cmd	()->(void)
(	O
void	O
)	O
;	O
static	O
void	O
remove_from_hotlist	(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))->(void)
(	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
entry	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
)	O
;	O
static	O
void	O
load_hotlist	()->(void)
(	O
void	O
)	O
;	O
static	O
void	O
add_dotdot_to_list	()->(void)
(	O
void	O
)	O
;	O
static	O
void	O
hotlist_refresh	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
Dlg_head	struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))))))
*	O
dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
)	O
{	O
common_dialog_repaint	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
)	O
;	O
attrset	(int)->(void)
(	O
COLOR_NORMAL	O
)	O
;	O
draw_box	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),int,int,int,int)->(void)
(	O
dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
2	int
,	O
5	int
,	O
dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
lines	*(int)
-	O
(	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
moving	int
?	O
6	int
:	O
10	int
)	O
,	O
dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
cols	int
-	O
(	O
UX	int
*	O
2	int
)	O
)	O
;	O
if	O
(	O
!	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
moving	int
)	O
draw_box	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),int,int,int,int)->(void)
(	O
dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
lines	*(int)
-	O
8	int
,	O
5	int
,	O
3	int
,	O
dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
cols	int
-	O
(	O
UX	int
*	O
2	int
)	O
)	O
;	O
}	O
static	O
inline	O
void	O
update_path_name	()->(void)
(	O
void	O
)	O
{	O
const	O
char	O
*	O
text	*(char)
=	O
""	*(char)
;	O
char	O
*	O
p	*(void)
;	O
WListbox	struct
*	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
moving	int
?	O
l_movelist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
:	O
l_hotlist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
;	O
Dlg_head	struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))))))
*	O
dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
=	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
widget	*(struct)
.	O
parent	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
if	O
(	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
current	*(struct)
)	O
{	O
if	O
(	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
current	*(struct)
->	O
data	*(void)
!=	O
0	int
)	O
{	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
hlp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
=	O
(	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
)	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
current	*(struct)
->	O
data	*(void)
;	O
if	O
(	O
hlp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
type	enum(int,int,int,int)
==	O
HL_TYPE_ENTRY	int
||	O
hlp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
type	enum(int,int,int,int)
==	O
HL_TYPE_DOTDOT	int
)	O
text	*(char)
=	O
hlp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
directory	enum(int,int,int,int,int,int,int,int,int)
;	O
else	O
if	O
(	O
hlp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
type	enum(int,int,int,int)
==	O
HL_TYPE_GROUP	int
)	O
text	*(char)
=	O
_	O
(	O
"Subgroup - press ENTER to see list"	*(char)
)	O
;	O
}	O
else	O
{	O
text	*(char)
=	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
current	*(struct)
->	O
text	*(char)
;	O
}	O
}	O
if	O
(	O
!	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
moving	int
)	O
label_set_text	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,*(char),int)),*(char))->(void)
(	O
pname	*(*(char))
,	O
name_trunc	(*(char),int)->(*(char))
(	O
text	*(char)
,	O
dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
cols	int
-	O
(	O
UX	int
*	O
2	int
+	O
4	int
)	O
)	O
)	O
;	O
p	*(void)
=	O
g_strconcat	(*(char))->(*(char))
(	O
" "	*(char)
,	O
current_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
,	O
" "	*(char)
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
!	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
moving	int
)	O
label_set_text	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,*(char),int)),*(char))->(void)
(	O
pname_group	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
,	O
name_trunc	(*(char),int)->(*(char))
(	O
p	*(void)
,	O
dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
cols	int
-	O
(	O
UX	int
*	O
2	int
+	O
4	int
)	O
)	O
)	O
;	O
else	O
label_set_text	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,*(char),int)),*(char))->(void)
(	O
movelist_group	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
,	O
name_trunc	(*(char),int)->(*(char))
(	O
p	*(void)
,	O
dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
cols	int
-	O
(	O
UX	int
*	O
2	int
+	O
4	int
)	O
)	O
)	O
;	O
g_free	(*(void))->(void)
(	O
p	*(void)
)	O
;	O
dlg_redraw	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
)	O
;	O
}	O
static	O
void	O
fill_listbox	()->(void)
(	O
void	O
)	O
{	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
current	*(struct)
=	O
current_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
head	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
static	O
char	O
*	O
buf	*(char)
;	O
static	O
int	O
buflen	int
;	O
if	O
(	O
!	O
buf	*(char)
)	O
buf	*(char)
=	O
g_malloc	(long)->(*(void))
(	O
buflen	int
=	O
1024	int
)	O
;	O
buf	*(char)
[	O
0	int
]	O
=	O
'\0'	O
;	O
while	O
(	O
current	*(struct)
)	O
{	O
switch	O
(	O
current	*(struct)
->	O
type	enum(int,int,int,int)
)	O
{	O
case	O
HL_TYPE_GROUP	int
:	O
{	O
CHECK_BUFFER	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
strcat	(*(char),*(char))->(*(char))
(	O
buf	*(char)
,	O
"->"	*(char)
)	O
,	O
current	*(struct)
->	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
)	O
;	O
if	O
(	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
moving	int
)	O
listbox_add_item	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)),enum(int,int,int),int,*(char),*(void))->(*(char))
(	O
l_movelist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
,	O
0	int
,	O
0	int
,	O
buf	*(char)
,	O
current	*(struct)
)	O
;	O
else	O
listbox_add_item	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)),enum(int,int,int),int,*(char),*(void))->(*(char))
(	O
l_hotlist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
,	O
0	int
,	O
0	int
,	O
buf	*(char)
,	O
current	*(struct)
)	O
;	O
}	O
break	O
;	O
case	O
HL_TYPE_DOTDOT	int
:	O
case	O
HL_TYPE_ENTRY	int
:	O
if	O
(	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
moving	int
)	O
listbox_add_item	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)),enum(int,int,int),int,*(char),*(void))->(*(char))
(	O
l_movelist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
,	O
0	int
,	O
0	int
,	O
current	*(struct)
->	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
,	O
current	*(struct)
)	O
;	O
else	O
listbox_add_item	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)),enum(int,int,int),int,*(char),*(void))->(*(char))
(	O
l_hotlist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
,	O
0	int
,	O
0	int
,	O
current	*(struct)
->	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
,	O
current	*(struct)
)	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
current	*(struct)
=	O
current	*(struct)
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
}	O
}	O
static	O
void	O
unlink_entry	(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))->(void)
(	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
entry	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
)	O
{	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
current	*(struct)
=	O
current_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
head	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
if	O
(	O
current	*(struct)
==	O
entry	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
)	O
current_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
head	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
entry	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
else	O
{	O
while	O
(	O
current	*(struct)
&&	O
current	*(struct)
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
!=	O
entry	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
)	O
current	*(struct)
=	O
current	*(struct)
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
if	O
(	O
current	*(struct)
)	O
current	*(struct)
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
=	O
entry	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
}	O
entry	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
=	O
entry	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
up	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
=	O
0	int
;	O
}	O
static	O
void	O
add_name_to_list	(*(char))->(void)
(	O
const	O
char	O
*	O
path	*(char)
)	O
{	O
listbox_add_item	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)),enum(int,int,int),int,*(char),*(void))->(*(char))
(	O
l_hotlist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
,	O
0	int
,	O
0	int
,	O
path	*(char)
,	O
0	int
)	O
;	O
}	O
static	O
int	O
hotlist_button_callback	(int)->(int)
(	O
int	O
action	int
)	O
{	O
switch	O
(	O
action	int
)	O
{	O
case	O
B_MOVE	O
:	O
{	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
saved	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
=	O
current_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
;	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
item	*(void)
;	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
moveto_item	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
=	O
0	int
;	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
moveto_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
=	O
0	int
;	O
int	O
ret	int
;	O
if	O
(	O
!	O
l_hotlist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
->	O
current	*(struct)
)	O
return	O
MSG_NOT_HANDLED	int
;	O
item	*(void)
=	O
l_hotlist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
->	O
current	*(struct)
->	O
data	*(void)
;	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
moving	int
=	O
1	int
;	O
init_movelist	(int,*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))->(void)
(	O
LIST_MOVELIST	int
,	O
item	*(void)
)	O
;	O
run_dlg	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(int)
(	O
movelist_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
)	O
;	O
ret	int
=	O
movelist_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
ret_value	int
;	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
moving	int
=	O
0	int
;	O
if	O
(	O
l_movelist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
->	O
current	*(struct)
)	O
moveto_item	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
=	O
l_movelist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
->	O
current	*(struct)
->	O
data	*(void)
;	O
moveto_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
=	O
current_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
;	O
destroy_dlg	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
movelist_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
)	O
;	O
current_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
=	O
saved	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
;	O
if	O
(	O
ret	int
==	O
B_CANCEL	int
)	O
return	O
MSG_NOT_HANDLED	int
;	O
if	O
(	O
moveto_item	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
==	O
item	*(void)
)	O
return	O
MSG_NOT_HANDLED	int
;	O
unlink_entry	(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))->(void)
(	O
item	*(void)
)	O
;	O
listbox_remove_current	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)),int)->(void)
(	O
l_hotlist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
,	O
1	int
)	O
;	O
item	*(void)
->	O
up	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
=	O
moveto_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
;	O
if	O
(	O
!	O
moveto_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
head	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
)	O
moveto_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
head	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
item	*(void)
;	O
else	O
if	O
(	O
!	O
moveto_item	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
)	O
{	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
p	*(void)
=	O
moveto_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
head	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
while	O
(	O
p	*(void)
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
)	O
p	*(void)
=	O
p	*(void)
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
p	*(void)
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
=	O
item	*(void)
;	O
}	O
else	O
if	O
(	O
ret	int
==	O
B_ENTER	int
||	O
ret	int
==	O
B_APPEND	O
)	O
if	O
(	O
!	O
moveto_item	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
)	O
moveto_item	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
=	O
item	*(void)
;	O
else	O
{	O
item	*(void)
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
=	O
moveto_item	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
moveto_item	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
=	O
item	*(void)
;	O
}	O
else	O
if	O
(	O
moveto_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
head	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
==	O
moveto_item	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
)	O
{	O
moveto_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
head	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
item	*(void)
;	O
item	*(void)
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
=	O
moveto_item	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
;	O
}	O
else	O
{	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
p	*(void)
=	O
moveto_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
head	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
while	O
(	O
p	*(void)
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
!=	O
moveto_item	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
)	O
p	*(void)
=	O
p	*(void)
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
item	*(void)
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
=	O
p	*(void)
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
p	*(void)
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
=	O
item	*(void)
;	O
}	O
listbox_remove_list	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)))->(void)
(	O
l_hotlist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
)	O
;	O
fill_listbox	()->(void)
(	O
)	O
;	O
repaint_screen	()->(void)
(	O
)	O
;	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
modified	long
=	O
1	int
;	O
return	O
MSG_NOT_HANDLED	int
;	O
break	O
;	O
}	O
case	O
B_REMOVE	O
:	O
if	O
(	O
l_hotlist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
->	O
current	*(struct)
&&	O
l_hotlist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
->	O
current	*(struct)
->	O
data	*(void)
)	O
remove_from_hotlist	(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))->(void)
(	O
l_hotlist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
->	O
current	*(struct)
->	O
data	*(void)
)	O
;	O
return	O
MSG_NOT_HANDLED	int
;	O
break	O
;	O
case	O
B_NEW_GROUP	O
:	O
add_new_group_cmd	()->(void)
(	O
)	O
;	O
return	O
MSG_NOT_HANDLED	int
;	O
break	O
;	O
case	O
B_ADD_CURRENT	O
:	O
add2hotlist_cmd	()->(void)
(	O
)	O
;	O
return	O
MSG_NOT_HANDLED	int
;	O
break	O
;	O
case	O
B_NEW_ENTRY	O
:	O
add_new_entry_cmd	()->(void)
(	O
)	O
;	O
return	O
MSG_NOT_HANDLED	int
;	O
break	O
;	O
case	O
B_ENTER	int
:	O
{	O
WListbox	struct
*	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
moving	int
?	O
l_movelist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
:	O
l_hotlist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
;	O
if	O
(	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
current	*(struct)
)	O
{	O
if	O
(	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
current	*(struct)
->	O
data	*(void)
)	O
{	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
hlp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
=	O
(	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
)	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
current	*(struct)
->	O
data	*(void)
;	O
if	O
(	O
hlp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
type	enum(int,int,int,int)
==	O
HL_TYPE_ENTRY	int
)	O
return	O
MSG_HANDLED	int
;	O
else	O
if	O
(	O
hlp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
type	enum(int,int,int,int)
==	O
HL_TYPE_DOTDOT	int
)	O
{	O
;	O
}	O
else	O
{	O
listbox_remove_list	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)))->(void)
(	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
)	O
;	O
current_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
=	O
hlp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
;	O
fill_listbox	()->(void)
(	O
)	O
;	O
return	O
MSG_NOT_HANDLED	int
;	O
}	O
}	O
else	O
return	O
MSG_HANDLED	int
;	O
}	O
}	O
case	O
B_UP_GROUP	O
:	O
{	O
WListbox	struct
*	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
moving	int
?	O
l_movelist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
:	O
l_hotlist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
;	O
listbox_remove_list	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)))->(void)
(	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
)	O
;	O
current_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
=	O
current_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
up	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
;	O
fill_listbox	()->(void)
(	O
)	O
;	O
return	O
MSG_NOT_HANDLED	int
;	O
break	O
;	O
}	O
case	O
B_FREE_ALL_VFS	O
:	O
vfs_expire	(int)->(void)
(	O
1	int
)	O
;	O
case	O
B_REFRESH_VFS	O
:	O
listbox_remove_list	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)))->(void)
(	O
l_hotlist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
)	O
;	O
listbox_add_item	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)),enum(int,int,int),int,*(char),*(void))->(*(char))
(	O
l_hotlist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
,	O
0	int
,	O
0	int
,	O
home_dir	*(char)
,	O
0	int
)	O
;	O
vfs_fill_names	(*((*(char))->(void)))->(void)
(	O
add_name_to_list	(*(char))->(void)
)	O
;	O
return	O
MSG_NOT_HANDLED	int
;	O
default	O
:	O
return	O
MSG_HANDLED	int
;	O
break	O
;	O
}	O
}	O
static	O
cb_ret_t	enum(int,int)
hotlist_callback	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))
(	O
Dlg_head	struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))))))
*	O
h	*(struct)
,	O
dlg_msg_t	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
msg	*(char)
,	O
int	O
parm	int
)	O
{	O
switch	O
(	O
msg	*(char)
)	O
{	O
case	O
DLG_DRAW	int
:	O
hotlist_refresh	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
h	*(struct)
)	O
;	O
return	O
MSG_HANDLED	int
;	O
case	O
DLG_UNHANDLED_KEY	int
:	O
switch	O
(	O
parm	int
)	O
{	O
case	O
KEY_M_CTRL	int
|	O
'\n'	O
:	O
goto	O
l1	O
;	O
case	O
'\n'	O
:	O
case	O
KEY_ENTER	int
:	O
case	O
KEY_RIGHT	int
:	O
if	O
(	O
hotlist_button_callback	(int)->(int)
(	O
B_ENTER	int
)	O
)	O
{	O
h	*(struct)
->	O
ret_value	int
=	O
B_ENTER	int
;	O
dlg_stop	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
h	*(struct)
)	O
;	O
}	O
;	O
return	O
MSG_HANDLED	int
;	O
break	O
;	O
case	O
KEY_LEFT	int
:	O
if	O
(	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
type	enum(int,int,int,int)
!=	O
LIST_VFSLIST	int
)	O
return	O
!	O
hotlist_button_callback	(int)->(int)
(	O
B_UP_GROUP	O
)	O
;	O
else	O
return	O
MSG_NOT_HANDLED	int
;	O
break	O
;	O
case	O
KEY_DC	int
:	O
if	O
(	O
!	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
moving	int
)	O
{	O
hotlist_button_callback	(int)->(int)
(	O
B_REMOVE	O
)	O
;	O
return	O
MSG_HANDLED	int
;	O
}	O
break	O
;	O
l1	O
:	O
case	O
ALT	O
(	O
'\n'	O
)	O
:	O
case	O
ALT	O
(	O
'\r'	O
)	O
:	O
if	O
(	O
!	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
moving	int
)	O
{	O
if	O
(	O
l_hotlist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
->	O
current	*(struct)
)	O
{	O
if	O
(	O
l_hotlist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
->	O
current	*(struct)
->	O
data	*(void)
)	O
{	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
hlp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
=	O
(	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
)	O
l_hotlist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
->	O
current	*(struct)
->	O
data	*(void)
;	O
if	O
(	O
hlp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
type	enum(int,int,int,int)
==	O
HL_TYPE_ENTRY	int
)	O
{	O
char	O
*	O
tmp	*(char)
=	O
g_strconcat	(*(char))->(*(char))
(	O
"cd "	*(char)
,	O
hlp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
directory	enum(int,int,int,int,int,int,int,int,int)
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
stuff	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,int,int,int,int,int,int,*(char),*(struct(*`,*`,*`)),int,*(*(char)),int,*(char))),*(char),int)->(void)
(	O
cmdline	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,int,int,int,int,int,*(char),*(struct(*(void),*(struct`),*(struct`))),int,*(*(char)),int,*(char)))
,	O
tmp	*(char)
,	O
0	int
)	O
;	O
g_free	(*(void))->(void)
(	O
tmp	*(char)
)	O
;	O
dlg_stop	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
h	*(struct)
)	O
;	O
h	*(struct)
->	O
ret_value	int
=	O
B_CANCEL	int
;	O
return	O
MSG_HANDLED	int
;	O
}	O
}	O
}	O
}	O
return	O
MSG_HANDLED	int
;	O
}	O
return	O
MSG_NOT_HANDLED	int
;	O
case	O
DLG_POST_KEY	int
:	O
if	O
(	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
moving	int
)	O
dlg_select_widget	(*(void))->(void)
(	O
l_movelist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
)	O
;	O
else	O
dlg_select_widget	(*(void))->(void)
(	O
l_hotlist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
)	O
;	O
case	O
DLG_INIT	int
:	O
attrset	(int)->(void)
(	O
MENU_ENTRY_COLOR	O
)	O
;	O
update_path_name	()->(void)
(	O
)	O
;	O
return	O
MSG_HANDLED	int
;	O
default	O
:	O
return	O
default_dlg_callback	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))
(	O
h	*(struct)
,	O
msg	*(char)
,	O
parm	int
)	O
;	O
}	O
}	O
static	O
int	O
l_call	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)))->(int)
(	O
WListbox	struct
*	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
)	O
{	O
Dlg_head	struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))))))
*	O
dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
=	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
widget	*(struct)
.	O
parent	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
if	O
(	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
current	*(struct)
)	O
{	O
if	O
(	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
current	*(struct)
->	O
data	*(void)
)	O
{	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
hlp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
=	O
(	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
)	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
current	*(struct)
->	O
data	*(void)
;	O
if	O
(	O
hlp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
type	enum(int,int,int,int)
==	O
HL_TYPE_ENTRY	int
)	O
{	O
dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
ret_value	int
=	O
B_ENTER	int
;	O
dlg_stop	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
)	O
;	O
return	O
LISTBOX_DONE	int
;	O
}	O
else	O
{	O
hotlist_button_callback	(int)->(int)
(	O
B_ENTER	int
)	O
;	O
hotlist_callback	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))
(	O
dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
DLG_POST_KEY	int
,	O
'\n'	O
)	O
;	O
return	O
LISTBOX_CONT	int
;	O
}	O
}	O
else	O
{	O
dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
ret_value	int
=	O
B_ENTER	int
;	O
dlg_stop	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
)	O
;	O
return	O
LISTBOX_DONE	int
;	O
}	O
}	O
hotlist_button_callback	(int)->(int)
(	O
B_UP_GROUP	O
)	O
;	O
hotlist_callback	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))
(	O
dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
DLG_POST_KEY	int
,	O
'u'	O
)	O
;	O
return	O
LISTBOX_CONT	int
;	O
}	O
static	O
int	O
init_i18n_stuff	(int,int)->(int)
(	O
int	O
list_type	int
,	O
int	O
cols	int
)	O
{	O
register	O
int	O
i	array(int)
;	O
static	O
const	O
char	O
*	O
cancel_but	*(char)
=	O
N_	O
(	O
"&Cancel"	*(char)
)	O
;	O
static	O
int	O
hotlist_i18n_flag	int
=	O
0	int
;	O
if	O
(	O
!	O
hotlist_i18n_flag	int
)	O
{	O
i	array(int)
=	O
sizeof	O
(	O
hotlist_but	array(struct(int,int,int,int,*(char),int))
)	O
/	O
sizeof	O
(	O
hotlist_but	array(struct(int,int,int,int,*(char),int))
[	O
0	int
]	O
)	O
;	O
while	O
(	O
i	array(int)
--	O
)	O
hotlist_but	array(struct(int,int,int,int,*(char),int))
[	O
i	array(int)
]	O
.	O
text	*(char)
=	O
_	O
(	O
hotlist_but	array(struct(int,int,int,int,*(char),int))
[	O
i	array(int)
]	O
.	O
text	*(char)
)	O
;	O
cancel_but	*(char)
=	O
_	O
(	O
cancel_but	*(char)
)	O
;	O
hotlist_i18n_flag	int
=	O
1	int
;	O
}	O
{	O
int	O
len	int
[	O
2	int
]	O
,	O
count	int
[	O
2	int
]	O
;	O
int	O
cur_x	array(int)
[	O
2	int
]	O
,	O
row	int
;	O
i	array(int)
=	O
sizeof	O
(	O
hotlist_but	array(struct(int,int,int,int,*(char),int))
)	O
/	O
sizeof	O
(	O
hotlist_but	array(struct(int,int,int,int,*(char),int))
[	O
0	int
]	O
)	O
;	O
len	int
[	O
0	int
]	O
=	O
len	int
[	O
1	int
]	O
=	O
count	int
[	O
0	int
]	O
=	O
count	int
[	O
1	int
]	O
=	O
0	int
;	O
while	O
(	O
i	array(int)
--	O
)	O
{	O
if	O
(	O
!	O
(	O
hotlist_but	array(struct(int,int,int,int,*(char),int))
[	O
i	array(int)
]	O
.	O
type	enum(int,int,int,int)
&	O
list_type	int
)	O
)	O
continue	O
;	O
row	int
=	O
hotlist_but	array(struct(int,int,int,int,*(char),int))
[	O
i	array(int)
]	O
.	O
y	short
;	O
++	O
count	int
[	O
row	int
]	O
;	O
len	int
[	O
row	int
]	O
+=	O
strlen	(*(char))->(long)
(	O
hotlist_but	array(struct(int,int,int,int,*(char),int))
[	O
i	array(int)
]	O
.	O
text	*(char)
)	O
+	O
5	int
;	O
if	O
(	O
hotlist_but	array(struct(int,int,int,int,*(char),int))
[	O
i	array(int)
]	O
.	O
flags	enum(int,int,int,int)
==	O
DEFPUSH_BUTTON	int
)	O
len	int
[	O
row	int
]	O
+=	O
2	int
;	O
}	O
len	int
[	O
0	int
]	O
-=	O
2	int
;	O
len	int
[	O
1	int
]	O
-=	O
2	int
;	O
cols	int
=	O
max	long
(	O
cols	int
,	O
max	long
(	O
len	int
[	O
0	int
]	O
,	O
len	int
[	O
1	int
]	O
)	O
)	O
;	O
cur_x	array(int)
[	O
0	int
]	O
=	O
cur_x	array(int)
[	O
1	int
]	O
=	O
0	int
;	O
i	array(int)
=	O
sizeof	O
(	O
hotlist_but	array(struct(int,int,int,int,*(char),int))
)	O
/	O
sizeof	O
(	O
hotlist_but	array(struct(int,int,int,int,*(char),int))
[	O
0	int
]	O
)	O
;	O
while	O
(	O
i	array(int)
--	O
)	O
{	O
if	O
(	O
!	O
(	O
hotlist_but	array(struct(int,int,int,int,*(char),int))
[	O
i	array(int)
]	O
.	O
type	enum(int,int,int,int)
&	O
list_type	int
)	O
)	O
continue	O
;	O
row	int
=	O
hotlist_but	array(struct(int,int,int,int,*(char),int))
[	O
i	array(int)
]	O
.	O
y	short
;	O
if	O
(	O
hotlist_but	array(struct(int,int,int,int,*(char),int))
[	O
i	array(int)
]	O
.	O
x	array(long)
!=	O
0	int
)	O
{	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
hotlist_but	array(struct(int,int,int,int,*(char),int))
[	O
i	array(int)
]	O
.	O
text	*(char)
,	O
cancel_but	*(char)
)	O
)	O
hotlist_but	array(struct(int,int,int,int,*(char),int))
[	O
i	array(int)
]	O
.	O
x	array(long)
=	O
cols	int
-	O
strlen	(*(char))->(long)
(	O
hotlist_but	array(struct(int,int,int,int,*(char),int))
[	O
i	array(int)
]	O
.	O
text	*(char)
)	O
-	O
13	int
;	O
else	O
hotlist_but	array(struct(int,int,int,int,*(char),int))
[	O
i	array(int)
]	O
.	O
x	array(long)
=	O
cur_x	array(int)
[	O
row	int
]	O
;	O
}	O
cur_x	array(int)
[	O
row	int
]	O
+=	O
strlen	(*(char))->(long)
(	O
hotlist_but	array(struct(int,int,int,int,*(char),int))
[	O
i	array(int)
]	O
.	O
text	*(char)
)	O
+	O
2	int
+	O
(	O
hotlist_but	array(struct(int,int,int,int,*(char),int))
[	O
i	array(int)
]	O
.	O
flags	enum(int,int,int,int)
==	O
DEFPUSH_BUTTON	int
?	O
5	int
:	O
3	int
)	O
;	O
}	O
}	O
return	O
cols	int
;	O
}	O
static	O
void	O
init_hotlist	(int)->(void)
(	O
int	O
list_type	int
)	O
{	O
size_t	long
i	array(int)
;	O
const	O
char	O
*	O
title	*(char)
,	O
*	O
help_node	*(char)
;	O
int	O
hotlist_cols	int
;	O
hotlist_cols	int
=	O
init_i18n_stuff	(int,int)->(int)
(	O
list_type	int
,	O
COLS	O
-	O
6	int
)	O
;	O
do_refresh	()->(void)
(	O
)	O
;	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
expanded	int
=	O
GetPrivateProfileInt	(*(char),*(char),int,*(char))->(int)
(	O
"HotlistConfig"	*(char)
,	O
"expanded_view_of_groups"	*(char)
,	O
0	int
,	O
profile_name	*(char)
)	O
;	O
if	O
(	O
list_type	int
==	O
LIST_VFSLIST	int
)	O
{	O
title	*(char)
=	O
_	O
(	O
"Active VFS directories"	*(char)
)	O
;	O
help_node	*(char)
=	O
"[vfshot]"	*(char)
;	O
}	O
else	O
{	O
title	*(char)
=	O
_	O
(	O
"Directory hotlist"	*(char)
)	O
;	O
help_node	*(char)
=	O
"[Hotlist]"	*(char)
;	O
}	O
hotlist_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
=	O
create_dlg	(int,int,int,int,*(int),*((*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(char),*(char),int)->(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))
(	O
0	int
,	O
0	int
,	O
LINES	O
-	O
2	int
,	O
hotlist_cols	int
,	O
dialog_colors	array(int)
,	O
hotlist_callback	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))
,	O
help_node	*(char)
,	O
title	*(char)
,	O
DLG_CENTER	O
|	O
DLG_REVERSE	O
)	O
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
i	array(int)
<	O
BUTTONS	O
;	O
i	array(int)
++	O
)	O
{	O
if	O
(	O
hotlist_but	array(struct(int,int,int,int,*(char),int))
[	O
i	array(int)
]	O
.	O
type	enum(int,int,int,int)
&	O
list_type	int
)	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
hotlist_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
button_new	(int,int,int,int,*(char),*((int)->(int)))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,*(char),int,int,*((int)->(int)))))
(	O
BY	O
+	O
hotlist_but	array(struct(int,int,int,int,*(char),int))
[	O
i	array(int)
]	O
.	O
y	short
,	O
BX	O
+	O
hotlist_but	array(struct(int,int,int,int,*(char),int))
[	O
i	array(int)
]	O
.	O
x	array(long)
,	O
hotlist_but	array(struct(int,int,int,int,*(char),int))
[	O
i	array(int)
]	O
.	O
ret_cmd	int
,	O
hotlist_but	array(struct(int,int,int,int,*(char),int))
[	O
i	array(int)
]	O
.	O
flags	enum(int,int,int,int)
,	O
hotlist_but	array(struct(int,int,int,int,*(char),int))
[	O
i	array(int)
]	O
.	O
text	*(char)
,	O
hotlist_button_callback	(int)->(int)
)	O
)	O
;	O
}	O
pname	*(*(char))
=	O
label_new	(int,int,*(char))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,*(char),int)))
(	O
UY	int
-	O
11	int
+	O
LINES	O
,	O
UX	int
+	O
2	int
,	O
""	*(char)
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
hotlist_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
pname	*(*(char))
)	O
;	O
if	O
(	O
!	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
moving	int
)	O
{	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
hotlist_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
label_new	(int,int,*(char))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,*(char),int)))
(	O
UY	int
-	O
12	int
+	O
LINES	O
,	O
UX	int
+	O
1	int
,	O
_	O
(	O
" Directory path "	*(char)
)	O
)	O
)	O
;	O
pname_group	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
=	O
label_new	(int,int,*(char))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,*(char),int)))
(	O
UY	int
,	O
UX	int
+	O
1	int
,	O
_	O
(	O
" Directory label "	*(char)
)	O
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
hotlist_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
pname_group	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
)	O
;	O
}	O
l_hotlist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
=	O
listbox_new	(int,int,int,int,*((*(struct(struct`,*`,*`,*`,int,int,int,int,int,int,*`,int,int)))->(int)))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)))
(	O
UY	int
+	O
1	int
,	O
UX	int
+	O
1	int
,	O
COLS	O
-	O
2	int
*	O
UX	int
-	O
8	int
,	O
LINES	O
-	O
14	int
,	O
l_call	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)))->(int)
)	O
;	O
if	O
(	O
list_type	int
==	O
LIST_VFSLIST	int
)	O
{	O
listbox_add_item	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)),enum(int,int,int),int,*(char),*(void))->(*(char))
(	O
l_hotlist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
,	O
0	int
,	O
0	int
,	O
home_dir	*(char)
,	O
0	int
)	O
;	O
vfs_fill_names	(*((*(char))->(void)))->(void)
(	O
add_name_to_list	(*(char))->(void)
)	O
;	O
}	O
else	O
fill_listbox	()->(void)
(	O
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
hotlist_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
l_hotlist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
)	O
;	O
}	O
static	O
void	O
init_movelist	(int,*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))->(void)
(	O
int	O
list_type	int
,	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
item	*(void)
)	O
{	O
size_t	long
i	array(int)
;	O
char	O
*	O
hdr	*(char)
=	O
g_strdup_printf	(*(char))->(*(char))
(	O
_	O
(	O
"Moving %s"	*(char)
)	O
,	O
item	*(void)
->	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
)	O
;	O
int	O
movelist_cols	int
=	O
init_i18n_stuff	(int,int)->(int)
(	O
list_type	int
,	O
COLS	O
-	O
6	int
)	O
;	O
do_refresh	()->(void)
(	O
)	O
;	O
movelist_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
=	O
create_dlg	(int,int,int,int,*(int),*((*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(char),*(char),int)->(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))
(	O
0	int
,	O
0	int
,	O
LINES	O
-	O
6	int
,	O
movelist_cols	int
,	O
dialog_colors	array(int)
,	O
hotlist_callback	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))
,	O
"[Hotlist]"	*(char)
,	O
hdr	*(char)
,	O
DLG_CENTER	O
|	O
DLG_REVERSE	O
)	O
;	O
g_free	(*(void))->(void)
(	O
hdr	*(char)
)	O
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
i	array(int)
<	O
BUTTONS	O
;	O
i	array(int)
++	O
)	O
{	O
if	O
(	O
hotlist_but	array(struct(int,int,int,int,*(char),int))
[	O
i	array(int)
]	O
.	O
type	enum(int,int,int,int)
&	O
list_type	int
)	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
movelist_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
button_new	(int,int,int,int,*(char),*((int)->(int)))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,*(char),int,int,*((int)->(int)))))
(	O
BY	O
-	O
4	int
+	O
hotlist_but	array(struct(int,int,int,int,*(char),int))
[	O
i	array(int)
]	O
.	O
y	short
,	O
BX	O
+	O
hotlist_but	array(struct(int,int,int,int,*(char),int))
[	O
i	array(int)
]	O
.	O
x	array(long)
,	O
hotlist_but	array(struct(int,int,int,int,*(char),int))
[	O
i	array(int)
]	O
.	O
ret_cmd	int
,	O
hotlist_but	array(struct(int,int,int,int,*(char),int))
[	O
i	array(int)
]	O
.	O
flags	enum(int,int,int,int)
,	O
hotlist_but	array(struct(int,int,int,int,*(char),int))
[	O
i	array(int)
]	O
.	O
text	*(char)
,	O
hotlist_button_callback	(int)->(int)
)	O
)	O
;	O
}	O
movelist_group	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
=	O
label_new	(int,int,*(char))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,*(char),int)))
(	O
UY	int
,	O
UX	int
+	O
1	int
,	O
_	O
(	O
" Directory label "	*(char)
)	O
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
movelist_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
movelist_group	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
)	O
;	O
l_movelist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
=	O
listbox_new	(int,int,int,int,*((*(struct(struct`,*`,*`,*`,int,int,int,int,int,int,*`,int,int)))->(int)))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)))
(	O
UY	int
+	O
1	int
,	O
UX	int
+	O
1	int
,	O
movelist_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
cols	int
-	O
2	int
*	O
UX	int
-	O
2	int
,	O
movelist_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
lines	*(int)
-	O
8	int
,	O
l_call	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)))->(int)
)	O
;	O
fill_listbox	()->(void)
(	O
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
movelist_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
l_movelist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
)	O
;	O
}	O
static	O
void	O
hotlist_done	()->(void)
(	O
void	O
)	O
{	O
destroy_dlg	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
hotlist_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
)	O
;	O
l_hotlist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
=	O
NULL	O
;	O
if	O
(	O
0	int
)	O
update_panels	(int,*(char))->(void)
(	O
UP_OPTIMIZE	int
,	O
UP_KEEPSEL	O
)	O
;	O
repaint_screen	()->(void)
(	O
)	O
;	O
}	O
static	O
inline	O
char	O
*	O
find_group_section	(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))->(*(char))
(	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
grp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
)	O
{	O
return	O
g_strconcat	(*(char))->(*(char))
(	O
grp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
directory	enum(int,int,int,int,int,int,int,int,int)
,	O
".Group"	*(char)
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
enum	O
{	O
HL_BEFORE_CURRENT	int
=	O
1	int
,	O
HL_AFTER_CURRENT	int
=	O
2	int
}	O
;	O
static	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
add2hotlist	(*(char),*(char),enum(int,int,int,int),int)->(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))
(	O
char	O
*	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
,	O
char	O
*	O
directory	enum(int,int,int,int,int,int,int,int,int)
,	O
enum	O
HotListType	enum(int,int,int,int)
type	enum(int,int,int,int)
,	O
int	O
pos	*(char)
)	O
{	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
new	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
;	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
current	*(struct)
=	O
NULL	O
;	O
if	O
(	O
!	O
current_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
)	O
load_hotlist	()->(void)
(	O
)	O
;	O
if	O
(	O
l_hotlist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
&&	O
l_hotlist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
->	O
current	*(struct)
)	O
{	O
current	*(struct)
=	O
l_hotlist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
->	O
current	*(struct)
->	O
data	*(void)
;	O
if	O
(	O
current	*(struct)
->	O
type	enum(int,int,int,int)
==	O
HL_TYPE_DOTDOT	int
)	O
pos	*(char)
=	O
HL_AFTER_CURRENT	int
;	O
}	O
new	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
=	O
new_hotlist	O
(	O
)	O
;	O
new	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
type	enum(int,int,int,int)
=	O
type	enum(int,int,int,int)
;	O
new	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
=	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
;	O
new	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
directory	enum(int,int,int,int,int,int,int,int,int)
=	O
directory	enum(int,int,int,int,int,int,int,int,int)
;	O
new	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
up	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
=	O
current_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
;	O
if	O
(	O
type	enum(int,int,int,int)
==	O
HL_TYPE_GROUP	int
)	O
{	O
current_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
=	O
new	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
;	O
add_dotdot_to_list	()->(void)
(	O
)	O
;	O
current_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
=	O
new	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
up	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
;	O
}	O
if	O
(	O
!	O
current_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
head	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
)	O
{	O
current_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
head	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
new	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
;	O
}	O
else	O
if	O
(	O
pos	*(char)
==	O
HL_AFTER_CURRENT	int
)	O
{	O
new	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
=	O
current	*(struct)
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
current	*(struct)
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
=	O
new	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
;	O
}	O
else	O
if	O
(	O
pos	*(char)
==	O
HL_BEFORE_CURRENT	int
&&	O
current	*(struct)
==	O
current_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
head	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
)	O
{	O
new	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
=	O
current	*(struct)
;	O
current_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
head	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
new	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
;	O
}	O
else	O
if	O
(	O
pos	*(char)
==	O
HL_BEFORE_CURRENT	int
)	O
{	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
p	*(void)
=	O
current_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
head	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
while	O
(	O
p	*(void)
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
!=	O
current	*(struct)
)	O
p	*(void)
=	O
p	*(void)
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
new	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
=	O
current	*(struct)
;	O
p	*(void)
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
=	O
new	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
;	O
}	O
else	O
{	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
p	*(void)
=	O
current_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
head	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
while	O
(	O
p	*(void)
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
)	O
p	*(void)
=	O
p	*(void)
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
p	*(void)
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
=	O
new	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
;	O
}	O
if	O
(	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
running	int
&&	O
type	enum(int,int,int,int)
!=	O
HL_TYPE_COMMENT	int
&&	O
type	enum(int,int,int,int)
!=	O
HL_TYPE_DOTDOT	int
)	O
{	O
if	O
(	O
type	enum(int,int,int,int)
==	O
HL_TYPE_GROUP	int
)	O
{	O
char	O
*	O
lbl	*(char)
=	O
g_strconcat	(*(char))->(*(char))
(	O
"->"	*(char)
,	O
new	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
listbox_add_item	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)),enum(int,int,int),int,*(char),*(void))->(*(char))
(	O
l_hotlist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
,	O
pos	*(char)
,	O
0	int
,	O
lbl	*(char)
,	O
new	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
)	O
;	O
g_free	(*(void))->(void)
(	O
lbl	*(char)
)	O
;	O
}	O
else	O
listbox_add_item	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)),enum(int,int,int),int,*(char),*(void))->(*(char))
(	O
l_hotlist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
,	O
pos	*(char)
,	O
0	int
,	O
new	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
,	O
new	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
)	O
;	O
listbox_select_entry	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)),*(struct(*(char),int,*(void),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)))))->(void)
(	O
l_hotlist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
,	O
l_hotlist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
->	O
current	*(struct)
)	O
;	O
}	O
return	O
new	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
;	O
}	O
static	O
void	O
add_widgets_i18n	(*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)->(void)
(	O
QuickWidget	struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))
*	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
,	O
int	O
len	int
)	O
{	O
int	O
i	array(int)
,	O
l	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
[	O
3	int
]	O
,	O
space	int
,	O
cur_x	array(int)
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
i	array(int)
<	O
3	int
;	O
i	array(int)
++	O
)	O
{	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
i	array(int)
]	O
.	O
text	*(char)
=	O
_	O
(	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
i	array(int)
]	O
.	O
text	*(char)
)	O
;	O
l	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
[	O
i	array(int)
]	O
=	O
strlen	(*(char))->(long)
(	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
i	array(int)
]	O
.	O
text	*(char)
)	O
+	O
3	int
;	O
}	O
space	int
=	O
(	O
len	int
-	O
4	int
-	O
l	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
[	O
0	int
]	O
-	O
l	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
[	O
1	int
]	O
-	O
l	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
[	O
2	int
]	O
)	O
/	O
4	int
;	O
for	O
(	O
cur_x	array(int)
=	O
2	int
+	O
space	int
,	O
i	array(int)
=	O
3	int
;	O
i	array(int)
--	O
;	O
cur_x	array(int)
+=	O
l	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
[	O
i	array(int)
]	O
+	O
space	int
)	O
{	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
i	array(int)
]	O
.	O
relative_x	int
=	O
cur_x	array(int)
;	O
qw	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
i	array(int)
]	O
.	O
x_divisions	int
=	O
len	int
;	O
}	O
}	O
static	O
int	O
add_new_entry_input	(*(char),*(char),*(char),*(char),*(*(char)),*(*(char)))->(int)
(	O
const	O
char	O
*	O
header	*(char)
,	O
const	O
char	O
*	O
text1	*(char)
,	O
const	O
char	O
*	O
text2	*(char)
,	O
const	O
char	O
*	O
help	*(char)
,	O
char	O
*	O
*	O
r1	*(*(char))
,	O
char	O
*	O
*	O
r2	*(*(char))
)	O
{	O
QuickDialog	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
;	O
static	O
QuickWidget	struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
]	O
=	O
{	O
{	O
quick_button	int
,	O
55	int
,	O
80	int
,	O
RELATIVE_Y_BUTTONS	int
,	O
0	int
,	O
N_	O
(	O
"&Cancel"	*(char)
)	O
,	O
0	int
,	O
B_CANCEL	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_button	int
,	O
30	int
,	O
80	int
,	O
RELATIVE_Y_BUTTONS	int
,	O
0	int
,	O
N_	O
(	O
"&Insert"	*(char)
)	O
,	O
0	int
,	O
B_INSERT	O
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_button	int
,	O
10	int
,	O
80	int
,	O
RELATIVE_Y_BUTTONS	int
,	O
0	int
,	O
N_	O
(	O
"&Append"	*(char)
)	O
,	O
0	int
,	O
B_APPEND	O
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_input	int
,	O
4	int
,	O
80	int
,	O
RELATIVE_Y_INPUT_PTH	int
,	O
0	int
,	O
""	*(char)
,	O
58	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
"input-pth"	*(char)
}	O
,	O
{	O
quick_label	int
,	O
RELATIVE_Y_LABEL_PTH	int
,	O
80	int
,	O
3	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_input	int
,	O
4	int
,	O
80	int
,	O
3	int
,	O
0	int
,	O
""	*(char)
,	O
58	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
"input-lbl"	*(char)
}	O
,	O
{	O
quick_label	int
,	O
3	int
,	O
80	int
,	O
2	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
NULL_QuickWidget	O
}	O
;	O
int	O
len	int
;	O
int	O
i	array(int)
;	O
int	O
lines1	int
,	O
lines2	int
;	O
int	O
cols1	int
,	O
cols2	int
;	O
static	O
int	O
i18n_flag	int
=	O
0	int
;	O
msglen	(*(char),*(int),*(int))->(void)
(	O
text1	*(char)
,	O
&	O
lines1	int
,	O
&	O
cols1	int
)	O
;	O
msglen	(*(char),*(int),*(int))->(void)
(	O
text2	*(char)
,	O
&	O
lines2	int
,	O
&	O
cols2	int
)	O
;	O
len	int
=	O
max	long
(	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
header	*(char)
)	O
,	O
cols1	int
)	O
;	O
len	int
=	O
max	long
(	O
len	int
,	O
cols2	int
)	O
+	O
4	int
;	O
len	int
=	O
max	long
(	O
len	int
,	O
64	int
)	O
;	O
if	O
(	O
!	O
i18n_flag	int
)	O
{	O
add_widgets_i18n	(*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)->(void)
(	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
,	O
len	int
)	O
;	O
i18n_flag	int
=	O
1	int
;	O
}	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
xlen	int
=	O
len	int
;	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
xpos	int
=	O
-	O
1	int
;	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
title	*(char)
=	O
header	*(char)
;	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
help	*(char)
=	O
help	*(char)
;	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
i18n	int
=	O
0	int
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
6	int
]	O
.	O
text	*(char)
=	O
text1	*(char)
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
4	int
]	O
.	O
text	*(char)
=	O
text2	*(char)
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
5	int
]	O
.	O
text	*(char)
=	O
*	O
r1	*(*(char))
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
3	int
]	O
.	O
text	*(char)
=	O
*	O
r2	*(*(char))
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
i	array(int)
<	O
7	int
;	O
i	array(int)
++	O
)	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
i	array(int)
]	O
.	O
y_divisions	int
=	O
lines1	int
+	O
lines2	int
+	O
7	int
;	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
ylen	int
=	O
lines1	int
+	O
lines2	int
+	O
7	int
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
0	int
]	O
.	O
relative_y	int
=	O
RELATIVE_Y_BUTTONS	int
+	O
(	O
lines1	int
+	O
lines2	int
)	O
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
1	int
]	O
.	O
relative_y	int
=	O
RELATIVE_Y_BUTTONS	int
+	O
(	O
lines1	int
+	O
lines2	int
)	O
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
2	int
]	O
.	O
relative_y	int
=	O
RELATIVE_Y_BUTTONS	int
+	O
(	O
lines1	int
+	O
lines2	int
)	O
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
3	int
]	O
.	O
relative_y	int
=	O
RELATIVE_Y_INPUT_PTH	int
+	O
(	O
lines1	int
)	O
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
4	int
]	O
.	O
relative_y	int
=	O
RELATIVE_Y_LABEL_PTH	int
+	O
(	O
lines1	int
)	O
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
5	int
]	O
.	O
str_result	*(*(char))
=	O
r1	*(*(char))
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
3	int
]	O
.	O
str_result	*(*(char))
=	O
r2	*(*(char))
;	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
widgets	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
=	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
;	O
if	O
(	O
(	O
i	array(int)
=	O
quick_dialog	(*(struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*`,int,int,*`,*`,*`)),int)))->(int)
(	O
&	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
)	O
)	O
!=	O
B_CANCEL	int
)	O
{	O
return	O
i	array(int)
;	O
}	O
else	O
return	O
0	int
;	O
}	O
static	O
void	O
add_new_entry_cmd	()->(void)
(	O
void	O
)	O
{	O
char	O
*	O
title	*(char)
,	O
*	O
url	*(char)
,	O
*	O
to_free	*(char)
;	O
int	O
ret	int
;	O
to_free	*(char)
=	O
title	*(char)
=	O
url	*(char)
=	O
strip_password	(*(char),int)->(*(char))
(	O
g_strdup	(*(char))->(*(char))
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
cwd	short
)	O
,	O
1	int
)	O
;	O
ret	int
=	O
add_new_entry_input	(*(char),*(char),*(char),*(char),*(*(char)),*(*(char)))->(int)
(	O
_	O
(	O
"New hotlist entry"	*(char)
)	O
,	O
_	O
(	O
"Directory label"	*(char)
)	O
,	O
_	O
(	O
"Directory path"	*(char)
)	O
,	O
"[Hotlist]"	*(char)
,	O
&	O
title	*(char)
,	O
&	O
url	*(char)
)	O
;	O
g_free	(*(void))->(void)
(	O
to_free	*(char)
)	O
;	O
if	O
(	O
!	O
ret	int
)	O
return	O
;	O
if	O
(	O
!	O
title	*(char)
||	O
!	O
*	O
title	*(char)
||	O
!	O
url	*(char)
||	O
!	O
*	O
url	*(char)
)	O
{	O
g_free	(*(void))->(void)
(	O
title	*(char)
)	O
;	O
g_free	(*(void))->(void)
(	O
url	*(char)
)	O
;	O
return	O
;	O
}	O
if	O
(	O
ret	int
==	O
B_ENTER	int
||	O
ret	int
==	O
B_APPEND	O
)	O
add2hotlist	(*(char),*(char),enum(int,int,int,int),int)->(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))
(	O
title	*(char)
,	O
url	*(char)
,	O
HL_TYPE_ENTRY	int
,	O
HL_AFTER_CURRENT	int
)	O
;	O
else	O
add2hotlist	(*(char),*(char),enum(int,int,int,int),int)->(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))
(	O
title	*(char)
,	O
url	*(char)
,	O
HL_TYPE_ENTRY	int
,	O
HL_BEFORE_CURRENT	int
)	O
;	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
modified	long
=	O
1	int
;	O
}	O
static	O
int	O
add_new_group_input	(*(char),*(char),*(*(char)))->(int)
(	O
const	O
char	O
*	O
header	*(char)
,	O
const	O
char	O
*	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
,	O
char	O
*	O
*	O
result	long
)	O
{	O
int	O
ret	int
;	O
QuickDialog	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
;	O
static	O
QuickWidget	struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
]	O
=	O
{	O
{	O
quick_button	int
,	O
55	int
,	O
80	int
,	O
1	int
,	O
0	int
,	O
N_	O
(	O
"&Cancel"	*(char)
)	O
,	O
0	int
,	O
B_CANCEL	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_button	int
,	O
30	int
,	O
80	int
,	O
1	int
,	O
0	int
,	O
N_	O
(	O
"&Insert"	*(char)
)	O
,	O
0	int
,	O
B_INSERT	O
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_button	int
,	O
10	int
,	O
80	int
,	O
1	int
,	O
0	int
,	O
N_	O
(	O
"&Append"	*(char)
)	O
,	O
0	int
,	O
B_APPEND	O
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_input	int
,	O
4	int
,	O
80	int
,	O
0	int
,	O
0	int
,	O
""	*(char)
,	O
58	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
"input"	*(char)
}	O
,	O
{	O
quick_label	int
,	O
3	int
,	O
80	int
,	O
2	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
NULL_QuickWidget	O
}	O
;	O
int	O
relative_y	int
[	O
]	O
=	O
{	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
2	int
}	O
;	O
int	O
len	int
;	O
int	O
i	array(int)
;	O
int	O
lines	*(int)
,	O
cols	int
;	O
static	O
int	O
i18n_flag	int
=	O
0	int
;	O
msglen	(*(char),*(int),*(int))->(void)
(	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
,	O
&	O
lines	*(int)
,	O
&	O
cols	int
)	O
;	O
len	int
=	O
max	long
(	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
header	*(char)
)	O
,	O
cols	int
)	O
+	O
4	int
;	O
len	int
=	O
max	long
(	O
len	int
,	O
64	int
)	O
;	O
if	O
(	O
!	O
i18n_flag	int
)	O
{	O
add_widgets_i18n	(*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)->(void)
(	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
,	O
len	int
)	O
;	O
i18n_flag	int
=	O
1	int
;	O
}	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
xlen	int
=	O
len	int
;	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
xpos	int
=	O
-	O
1	int
;	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
title	*(char)
=	O
header	*(char)
;	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
help	*(char)
=	O
"[Hotlist]"	*(char)
;	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
i18n	int
=	O
0	int
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
4	int
]	O
.	O
text	*(char)
=	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
i	array(int)
<	O
5	int
;	O
i	array(int)
++	O
)	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
i	array(int)
]	O
.	O
y_divisions	int
=	O
lines	*(int)
+	O
6	int
;	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
ylen	int
=	O
lines	*(int)
+	O
6	int
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
i	array(int)
<	O
4	int
;	O
i	array(int)
++	O
)	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
i	array(int)
]	O
.	O
relative_y	int
=	O
relative_y	int
[	O
i	array(int)
]	O
+	O
2	int
+	O
lines	*(int)
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
3	int
]	O
.	O
str_result	*(*(char))
=	O
result	long
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
3	int
]	O
.	O
text	*(char)
=	O
""	*(char)
;	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
widgets	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
=	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
;	O
if	O
(	O
(	O
ret	int
=	O
quick_dialog	(*(struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*`,int,int,*`,*`,*`)),int)))->(int)
(	O
&	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
)	O
)	O
!=	O
B_CANCEL	int
)	O
{	O
return	O
ret	int
;	O
}	O
else	O
return	O
0	int
;	O
}	O
static	O
void	O
add_new_group_cmd	()->(void)
(	O
void	O
)	O
{	O
char	O
*	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
;	O
int	O
ret	int
;	O
ret	int
=	O
add_new_group_input	(*(char),*(char),*(*(char)))->(int)
(	O
_	O
(	O
" New hotlist group "	*(char)
)	O
,	O
_	O
(	O
"Name of new group"	*(char)
)	O
,	O
&	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
)	O
;	O
if	O
(	O
!	O
ret	int
||	O
!	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
||	O
!	O
*	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
)	O
return	O
;	O
if	O
(	O
ret	int
==	O
B_ENTER	int
||	O
ret	int
==	O
B_APPEND	O
)	O
add2hotlist	(*(char),*(char),enum(int,int,int,int),int)->(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))
(	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
,	O
0	int
,	O
HL_TYPE_GROUP	int
,	O
HL_AFTER_CURRENT	int
)	O
;	O
else	O
add2hotlist	(*(char),*(char),enum(int,int,int,int),int)->(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))
(	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
,	O
0	int
,	O
HL_TYPE_GROUP	int
,	O
HL_BEFORE_CURRENT	int
)	O
;	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
modified	long
=	O
1	int
;	O
}	O
void	O
add2hotlist_cmd	()->(void)
(	O
void	O
)	O
{	O
char	O
*	O
prompt	*(char)
,	O
*	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
;	O
const	O
char	O
*	O
cp	*(char)
=	O
_	O
(	O
"Label for \"%s\":"	*(char)
)	O
;	O
int	O
l	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
=	O
strlen	(*(char))->(long)
(	O
cp	*(char)
)	O
;	O
char	O
*	O
label_string	*(char)
=	O
g_strdup	(*(char))->(*(char))
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
cwd	short
)	O
;	O
strip_password	(*(char),int)->(*(char))
(	O
label_string	*(char)
,	O
1	int
)	O
;	O
prompt	*(char)
=	O
g_strdup_printf	(*(char))->(*(char))
(	O
cp	*(char)
,	O
path_trunc	(*(char),int)->(*(char))
(	O
current_panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
cwd	short
,	O
COLS	O
-	O
2	int
*	O
UX	int
-	O
(	O
l	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
+	O
8	int
)	O
)	O
)	O
;	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
=	O
input_dialog	(*(char),*(char),*(char))->(*(char))
(	O
_	O
(	O
" Add to hotlist "	*(char)
)	O
,	O
prompt	*(char)
,	O
label_string	*(char)
)	O
;	O
g_free	(*(void))->(void)
(	O
prompt	*(char)
)	O
;	O
if	O
(	O
!	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
||	O
!	O
*	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
)	O
{	O
g_free	(*(void))->(void)
(	O
label_string	*(char)
)	O
;	O
g_free	(*(void))->(void)
(	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
)	O
;	O
return	O
;	O
}	O
add2hotlist	(*(char),*(char),enum(int,int,int,int),int)->(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))
(	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
,	O
label_string	*(char)
,	O
HL_TYPE_ENTRY	int
,	O
0	int
)	O
;	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
modified	long
=	O
1	int
;	O
}	O
static	O
void	O
remove_group	(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))->(void)
(	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
grp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
)	O
{	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
current	*(struct)
=	O
grp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
head	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
while	O
(	O
current	*(struct)
)	O
{	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
=	O
current	*(struct)
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
if	O
(	O
current	*(struct)
->	O
type	enum(int,int,int,int)
==	O
HL_TYPE_GROUP	int
)	O
remove_group	(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))->(void)
(	O
current	*(struct)
)	O
;	O
g_free	(*(void))->(void)
(	O
current	*(struct)
->	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
)	O
;	O
g_free	(*(void))->(void)
(	O
current	*(struct)
->	O
directory	enum(int,int,int,int,int,int,int,int,int)
)	O
;	O
g_free	(*(void))->(void)
(	O
current	*(struct)
)	O
;	O
current	*(struct)
=	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
}	O
}	O
static	O
void	O
remove_from_hotlist	(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))->(void)
(	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
entry	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
)	O
{	O
if	O
(	O
entry	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
type	enum(int,int,int,int)
==	O
HL_TYPE_DOTDOT	int
)	O
return	O
;	O
if	O
(	O
confirm_directory_hotlist_delete	int
)	O
{	O
char	O
*	O
title	*(char)
;	O
int	O
result	long
;	O
title	*(char)
=	O
g_strconcat	(*(char))->(*(char))
(	O
_	O
(	O
" Remove: "	*(char)
)	O
,	O
name_trunc	(*(char),int)->(*(char))
(	O
entry	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
,	O
30	int
)	O
,	O
" "	*(char)
,	O
NULL	O
)	O
;	O
if	O
(	O
safe_delete	int
)	O
query_set_sel	(int)->(void)
(	O
1	int
)	O
;	O
result	long
=	O
query_dialog	(*(char),*(char),int,int)->(int)
(	O
title	*(char)
,	O
_	O
(	O
"\n Are you sure you want to remove this entry?"	*(char)
)	O
,	O
D_ERROR	int
,	O
2	int
,	O
_	O
(	O
"&Yes"	*(char)
)	O
,	O
_	O
(	O
"&No"	*(char)
)	O
)	O
;	O
g_free	(*(void))->(void)
(	O
title	*(char)
)	O
;	O
if	O
(	O
result	long
!=	O
0	int
)	O
return	O
;	O
}	O
if	O
(	O
entry	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
type	enum(int,int,int,int)
==	O
HL_TYPE_GROUP	int
)	O
{	O
if	O
(	O
entry	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
head	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
)	O
{	O
char	O
*	O
header	*(char)
;	O
int	O
result	long
;	O
header	*(char)
=	O
g_strconcat	(*(char))->(*(char))
(	O
_	O
(	O
" Remove: "	*(char)
)	O
,	O
name_trunc	(*(char),int)->(*(char))
(	O
entry	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
,	O
30	int
)	O
,	O
" "	*(char)
,	O
NULL	O
)	O
;	O
result	long
=	O
query_dialog	(*(char),*(char),int,int)->(int)
(	O
header	*(char)
,	O
_	O
(	O
"\n Group not empty.\n Remove it?"	*(char)
)	O
,	O
D_ERROR	int
,	O
2	int
,	O
_	O
(	O
"&Yes"	*(char)
)	O
,	O
_	O
(	O
"&No"	*(char)
)	O
)	O
;	O
g_free	(*(void))->(void)
(	O
header	*(char)
)	O
;	O
if	O
(	O
result	long
!=	O
0	int
)	O
return	O
;	O
}	O
remove_group	(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))->(void)
(	O
entry	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
)	O
;	O
}	O
unlink_entry	(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))->(void)
(	O
entry	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
)	O
;	O
g_free	(*(void))->(void)
(	O
entry	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
)	O
;	O
g_free	(*(void))->(void)
(	O
entry	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
directory	enum(int,int,int,int,int,int,int,int,int)
)	O
;	O
g_free	(*(void))->(void)
(	O
entry	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
)	O
;	O
listbox_remove_current	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)),int)->(void)
(	O
l_hotlist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
,	O
1	int
)	O
;	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
modified	long
=	O
1	int
;	O
}	O
char	O
*	O
hotlist_cmd	(int)->(*(char))
(	O
int	O
vfs_or_hotlist	int
)	O
{	O
char	O
*	O
target	*(void)
=	O
NULL	O
;	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
type	enum(int,int,int,int)
=	O
vfs_or_hotlist	int
;	O
load_hotlist	()->(void)
(	O
)	O
;	O
init_hotlist	(int)->(void)
(	O
vfs_or_hotlist	int
)	O
;	O
attrset	(int)->(void)
(	O
SELECTED_COLOR	O
)	O
;	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
running	int
=	O
1	int
;	O
run_dlg	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(int)
(	O
hotlist_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
)	O
;	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
running	int
=	O
0	int
;	O
save_hotlist	()->(int)
(	O
)	O
;	O
switch	O
(	O
hotlist_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
ret_value	int
)	O
{	O
case	O
B_CANCEL	int
:	O
break	O
;	O
case	O
B_ENTER	int
:	O
if	O
(	O
l_hotlist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
->	O
current	*(struct)
->	O
data	*(void)
)	O
{	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
hlp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
=	O
(	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
)	O
l_hotlist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
->	O
current	*(struct)
->	O
data	*(void)
;	O
target	*(void)
=	O
g_strdup	(*(char))->(*(char))
(	O
hlp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
directory	enum(int,int,int,int,int,int,int,int,int)
)	O
;	O
}	O
else	O
target	*(void)
=	O
g_strdup	(*(char))->(*(char))
(	O
l_hotlist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
->	O
current	*(struct)
->	O
text	*(char)
)	O
;	O
break	O
;	O
}	O
hotlist_done	()->(void)
(	O
)	O
;	O
return	O
target	*(void)
;	O
}	O
static	O
void	O
load_group	(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))->(void)
(	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
grp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
)	O
{	O
void	O
*	O
profile_keys	*(void)
;	O
char	O
*	O
key	*(void)
,	O
*	O
value	*(void)
;	O
char	O
*	O
group_section	*(char)
;	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
current	*(struct)
=	O
0	int
;	O
group_section	*(char)
=	O
find_group_section	(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))->(*(char))
(	O
grp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
)	O
;	O
profile_keys	*(void)
=	O
profile_init_iterator	(*(char),*(char))->(*(void))
(	O
group_section	*(char)
,	O
profile_name	*(char)
)	O
;	O
current_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
=	O
grp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
;	O
while	O
(	O
profile_keys	*(void)
)	O
{	O
profile_keys	*(void)
=	O
profile_iterator_next	(*(void),*(*(char)),*(*(char)))->(*(void))
(	O
profile_keys	*(void)
,	O
&	O
key	*(void)
,	O
&	O
value	*(void)
)	O
;	O
add2hotlist	(*(char),*(char),enum(int,int,int,int),int)->(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))
(	O
g_strdup	(*(char))->(*(char))
(	O
value	*(void)
)	O
,	O
g_strdup	(*(char))->(*(char))
(	O
key	*(void)
)	O
,	O
HL_TYPE_GROUP	int
,	O
0	int
)	O
;	O
}	O
g_free	(*(void))->(void)
(	O
group_section	*(char)
)	O
;	O
profile_keys	*(void)
=	O
profile_init_iterator	(*(char),*(char))->(*(void))
(	O
grp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
directory	enum(int,int,int,int,int,int,int,int,int)
,	O
profile_name	*(char)
)	O
;	O
while	O
(	O
profile_keys	*(void)
)	O
{	O
profile_keys	*(void)
=	O
profile_iterator_next	(*(void),*(*(char)),*(*(char)))->(*(void))
(	O
profile_keys	*(void)
,	O
&	O
key	*(void)
,	O
&	O
value	*(void)
)	O
;	O
add2hotlist	(*(char),*(char),enum(int,int,int,int),int)->(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))
(	O
g_strdup	(*(char))->(*(char))
(	O
value	*(void)
)	O
,	O
g_strdup	(*(char))->(*(char))
(	O
key	*(void)
)	O
,	O
HL_TYPE_ENTRY	int
,	O
0	int
)	O
;	O
}	O
for	O
(	O
current	*(struct)
=	O
grp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
head	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
current	*(struct)
;	O
current	*(struct)
=	O
current	*(struct)
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
)	O
load_group	(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))->(void)
(	O
current	*(struct)
)	O
;	O
}	O
static	O
char	O
*	O
tkn_buf	*(char)
;	O
static	O
int	O
tkn_buf_length	int
;	O
static	O
int	O
tkn_length	int
;	O
static	O
char	O
*	O
hotlist_file_name	*(char)
;	O
static	O
FILE	struct
*	O
hotlist_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
static	O
time_t	long
hotlist_file_mtime	long
;	O
static	O
int	O
hot_skip_blanks	()->(int)
(	O
void	O
)	O
{	O
int	O
c	int
;	O
while	O
(	O
(	O
c	int
=	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
hotlist_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
!=	O
EOF	O
&&	O
c	int
!=	O
'\n'	O
&&	O
isspace	(int)->(int)
(	O
c	int
)	O
)	O
;	O
return	O
c	int
;	O
}	O
static	O
int	O
hot_next_token	()->(int)
(	O
void	O
)	O
{	O
int	O
c	int
;	O
tkn_length	int
=	O
0	int
;	O
again	O
:	O
c	int
=	O
hot_skip_blanks	()->(int)
(	O
)	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
EOF	O
:	O
return	O
TKN_EOF	int
;	O
break	O
;	O
case	O
'\n'	O
:	O
return	O
TKN_EOL	int
;	O
break	O
;	O
case	O
'#'	O
:	O
while	O
(	O
(	O
c	int
=	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
hotlist_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
!=	O
EOF	O
&&	O
c	int
!=	O
'\n'	O
)	O
{	O
if	O
(	O
c	int
==	O
EOF	O
)	O
return	O
TKN_EOF	int
;	O
if	O
(	O
c	int
!=	O
'\n'	O
)	O
{	O
CHECK_BUF	O
(	O
)	O
;	O
tkn_buf	*(char)
[	O
tkn_length	int
++	O
]	O
=	O
c	int
==	O
'\n'	O
?	O
' '	O
:	O
c	int
;	O
}	O
}	O
CHECK_BUF	O
(	O
)	O
;	O
tkn_buf	*(char)
[	O
tkn_length	int
]	O
=	O
'\0'	O
;	O
return	O
TKN_COMMENT	int
;	O
break	O
;	O
case	O
'"'	O
:	O
while	O
(	O
(	O
c	int
=	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
hotlist_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
!=	O
EOF	O
&&	O
c	int
!=	O
'"'	O
)	O
{	O
if	O
(	O
c	int
==	O
'\\'	O
)	O
if	O
(	O
(	O
c	int
=	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
hotlist_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
==	O
EOF	O
)	O
return	O
TKN_EOF	int
;	O
CHECK_BUF	O
(	O
)	O
;	O
tkn_buf	*(char)
[	O
tkn_length	int
++	O
]	O
=	O
c	int
==	O
'\n'	O
?	O
' '	O
:	O
c	int
;	O
}	O
if	O
(	O
c	int
==	O
EOF	O
)	O
return	O
TKN_EOF	int
;	O
CHECK_BUF	O
(	O
)	O
;	O
tkn_buf	*(char)
[	O
tkn_length	int
]	O
=	O
'\0'	O
;	O
return	O
TKN_STRING	int
;	O
break	O
;	O
case	O
'\\'	O
:	O
if	O
(	O
(	O
c	int
=	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
hotlist_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
==	O
EOF	O
)	O
return	O
TKN_EOF	int
;	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
goto	O
again	O
;	O
default	O
:	O
do	O
{	O
CHECK_BUF	O
(	O
)	O
;	O
tkn_buf	*(char)
[	O
tkn_length	int
++	O
]	O
=	O
toupper	(int)->(int)
(	O
c	int
)	O
;	O
}	O
while	O
(	O
(	O
c	int
=	O
fgetc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
hotlist_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
!=	O
EOF	O
&&	O
isalnum	(int)->(int)
(	O
c	int
)	O
)	O
;	O
if	O
(	O
c	int
!=	O
EOF	O
)	O
ungetc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
c	int
,	O
hotlist_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
CHECK_BUF	O
(	O
)	O
;	O
tkn_buf	*(char)
[	O
tkn_length	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
tkn_buf	*(char)
,	O
"GROUP"	*(char)
,	O
tkn_length	int
)	O
==	O
0	int
)	O
return	O
TKN_GROUP	int
;	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
tkn_buf	*(char)
,	O
"ENTRY"	*(char)
,	O
tkn_length	int
)	O
==	O
0	int
)	O
return	O
TKN_ENTRY	int
;	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
tkn_buf	*(char)
,	O
"ENDGROUP"	*(char)
,	O
tkn_length	int
)	O
==	O
0	int
)	O
return	O
TKN_ENDGROUP	int
;	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
tkn_buf	*(char)
,	O
"URL"	*(char)
,	O
tkn_length	int
)	O
==	O
0	int
)	O
return	O
TKN_URL	int
;	O
else	O
return	O
TKN_UNKNOWN	int
;	O
break	O
;	O
}	O
}	O
static	O
void	O
hot_load_group	(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))->(void)
(	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
grp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
)	O
{	O
int	O
tkn	int
;	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
new_grp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
;	O
char	O
*	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
,	O
*	O
url	*(char)
;	O
current_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
=	O
grp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
;	O
while	O
(	O
(	O
tkn	int
=	O
hot_next_token	()->(int)
(	O
)	O
)	O
!=	O
TKN_ENDGROUP	int
)	O
switch	O
(	O
tkn	int
)	O
{	O
case	O
TKN_GROUP	int
:	O
CHECK_TOKEN	O
(	O
TKN_STRING	int
)	O
;	O
new_grp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
=	O
add2hotlist	(*(char),*(char),enum(int,int,int,int),int)->(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))
(	O
g_strdup	(*(char))->(*(char))
(	O
tkn_buf	*(char)
)	O
,	O
0	int
,	O
HL_TYPE_GROUP	int
,	O
0	int
)	O
;	O
SKIP_TO_EOL	O
;	O
hot_load_group	(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))->(void)
(	O
new_grp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
)	O
;	O
current_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
=	O
grp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
;	O
break	O
;	O
case	O
TKN_ENTRY	int
:	O
CHECK_TOKEN	O
(	O
TKN_STRING	int
)	O
;	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
=	O
g_strdup	(*(char))->(*(char))
(	O
tkn_buf	*(char)
)	O
;	O
CHECK_TOKEN	O
(	O
TKN_URL	int
)	O
;	O
CHECK_TOKEN	O
(	O
TKN_STRING	int
)	O
;	O
url	*(char)
=	O
g_strdup	(*(char))->(*(char))
(	O
tkn_buf	*(char)
)	O
;	O
add2hotlist	(*(char),*(char),enum(int,int,int,int),int)->(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))
(	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
,	O
url	*(char)
,	O
HL_TYPE_ENTRY	int
,	O
0	int
)	O
;	O
SKIP_TO_EOL	O
;	O
break	O
;	O
case	O
TKN_COMMENT	int
:	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
=	O
g_strdup	(*(char))->(*(char))
(	O
tkn_buf	*(char)
)	O
;	O
add2hotlist	(*(char),*(char),enum(int,int,int,int),int)->(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))
(	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
,	O
0	int
,	O
HL_TYPE_COMMENT	int
,	O
0	int
)	O
;	O
break	O
;	O
case	O
TKN_EOF	int
:	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
readonly	int
=	O
1	int
;	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
file_error	int
=	O
1	int
;	O
return	O
;	O
break	O
;	O
case	O
TKN_EOL	int
:	O
break	O
;	O
default	O
:	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
readonly	int
=	O
1	int
;	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
file_error	int
=	O
1	int
;	O
SKIP_TO_EOL	O
;	O
break	O
;	O
}	O
SKIP_TO_EOL	O
;	O
}	O
static	O
void	O
hot_load_file	(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))->(void)
(	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
grp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
)	O
{	O
int	O
tkn	int
;	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
new_grp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
;	O
char	O
*	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
,	O
*	O
url	*(char)
;	O
current_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
=	O
grp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
;	O
while	O
(	O
(	O
tkn	int
=	O
hot_next_token	()->(int)
(	O
)	O
)	O
!=	O
TKN_EOF	int
)	O
switch	O
(	O
tkn	int
)	O
{	O
case	O
TKN_GROUP	int
:	O
CHECK_TOKEN	O
(	O
TKN_STRING	int
)	O
;	O
new_grp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
=	O
add2hotlist	(*(char),*(char),enum(int,int,int,int),int)->(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))
(	O
g_strdup	(*(char))->(*(char))
(	O
tkn_buf	*(char)
)	O
,	O
0	int
,	O
HL_TYPE_GROUP	int
,	O
0	int
)	O
;	O
SKIP_TO_EOL	O
;	O
hot_load_group	(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))->(void)
(	O
new_grp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
)	O
;	O
current_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
=	O
grp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
;	O
break	O
;	O
case	O
TKN_ENTRY	int
:	O
CHECK_TOKEN	O
(	O
TKN_STRING	int
)	O
;	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
=	O
g_strdup	(*(char))->(*(char))
(	O
tkn_buf	*(char)
)	O
;	O
CHECK_TOKEN	O
(	O
TKN_URL	int
)	O
;	O
CHECK_TOKEN	O
(	O
TKN_STRING	int
)	O
;	O
url	*(char)
=	O
g_strdup	(*(char))->(*(char))
(	O
tkn_buf	*(char)
)	O
;	O
add2hotlist	(*(char),*(char),enum(int,int,int,int),int)->(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))
(	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
,	O
url	*(char)
,	O
HL_TYPE_ENTRY	int
,	O
0	int
)	O
;	O
SKIP_TO_EOL	O
;	O
break	O
;	O
case	O
TKN_COMMENT	int
:	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
=	O
g_strdup	(*(char))->(*(char))
(	O
tkn_buf	*(char)
)	O
;	O
add2hotlist	(*(char),*(char),enum(int,int,int,int),int)->(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))
(	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
,	O
0	int
,	O
HL_TYPE_COMMENT	int
,	O
0	int
)	O
;	O
break	O
;	O
case	O
TKN_EOL	int
:	O
break	O
;	O
default	O
:	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
readonly	int
=	O
1	int
;	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
file_error	int
=	O
1	int
;	O
SKIP_TO_EOL	O
;	O
break	O
;	O
}	O
}	O
static	O
void	O
clean_up_hotlist_groups	(*(char))->(void)
(	O
const	O
char	O
*	O
section	*(char)
)	O
{	O
char	O
*	O
grp_section	*(char)
;	O
void	O
*	O
profile_keys	*(void)
;	O
char	O
*	O
key	*(void)
,	O
*	O
value	*(void)
;	O
grp_section	*(char)
=	O
g_strconcat	(*(char))->(*(char))
(	O
section	*(char)
,	O
".Group"	*(char)
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
profile_has_section	(*(char),*(char))->(int)
(	O
section	*(char)
,	O
profile_name	*(char)
)	O
)	O
profile_clean_section	(*(char),*(char))->(void)
(	O
section	*(char)
,	O
profile_name	*(char)
)	O
;	O
if	O
(	O
profile_has_section	(*(char),*(char))->(int)
(	O
grp_section	*(char)
,	O
profile_name	*(char)
)	O
)	O
{	O
profile_keys	*(void)
=	O
profile_init_iterator	(*(char),*(char))->(*(void))
(	O
grp_section	*(char)
,	O
profile_name	*(char)
)	O
;	O
while	O
(	O
profile_keys	*(void)
)	O
{	O
profile_keys	*(void)
=	O
profile_iterator_next	(*(void),*(*(char)),*(*(char)))->(*(void))
(	O
profile_keys	*(void)
,	O
&	O
key	*(void)
,	O
&	O
value	*(void)
)	O
;	O
clean_up_hotlist_groups	(*(char))->(void)
(	O
key	*(void)
)	O
;	O
}	O
profile_clean_section	(*(char),*(char))->(void)
(	O
grp_section	*(char)
,	O
profile_name	*(char)
)	O
;	O
}	O
g_free	(*(void))->(void)
(	O
grp_section	*(char)
)	O
;	O
}	O
static	O
void	O
load_hotlist	()->(void)
(	O
void	O
)	O
{	O
int	O
remove_old_list	int
=	O
0	int
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
stat_buf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
if	O
(	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
loaded	int
)	O
{	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
hotlist_file_name	*(char)
,	O
&	O
stat_buf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
;	O
if	O
(	O
hotlist_file_mtime	long
<	O
stat_buf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mtime	O
)	O
done_hotlist	()->(void)
(	O
)	O
;	O
else	O
return	O
;	O
}	O
if	O
(	O
!	O
hotlist_file_name	*(char)
)	O
hotlist_file_name	*(char)
=	O
concat_dir_and_file	(*(char),*(char))->(*(char))
(	O
home_dir	*(char)
,	O
HOTLIST_FILENAME	*(char)
)	O
;	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
=	O
new_hotlist	O
(	O
)	O
;	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
->	O
type	enum(int,int,int,int)
=	O
HL_TYPE_GROUP	int
;	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
->	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
=	O
g_strdup	(*(char))->(*(char))
(	O
_	O
(	O
" Top level group "	*(char)
)	O
)	O
;	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
->	O
up	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
=	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
;	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
->	O
directory	enum(int,int,int,int,int,int,int,int,int)
=	O
g_strdup	(*(char))->(*(char))
(	O
"Hotlist"	*(char)
)	O
;	O
if	O
(	O
(	O
hotlist_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
hotlist_file_name	*(char)
,	O
"r"	*(char)
)	O
)	O
==	O
0	int
)	O
{	O
int	O
result	long
;	O
load_group	(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))->(void)
(	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
)	O
;	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
loaded	int
=	O
1	int
;	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
modified	long
=	O
1	int
;	O
result	long
=	O
save_hotlist	()->(int)
(	O
)	O
;	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
modified	long
=	O
0	int
;	O
if	O
(	O
result	long
)	O
{	O
remove_old_list	int
=	O
1	int
;	O
}	O
else	O
{	O
char	O
*	O
msg	*(char)
;	O
msg	*(char)
=	O
g_strconcat	(*(char))->(*(char))
(	O
_	O
(	O
"MC was unable to write ~/"	*(char)
)	O
,	O
HOTLIST_FILENAME	*(char)
,	O
_	O
(	O
" file, your old hotlist entries were not deleted"	*(char)
)	O
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
message	*(char)
(	O
D_ERROR	int
,	O
_	O
(	O
" Hotlist Load "	*(char)
)	O
,	O
msg	*(char)
)	O
;	O
g_free	(*(void))->(void)
(	O
msg	*(char)
)	O
;	O
}	O
}	O
else	O
{	O
hot_load_file	(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))->(void)
(	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
)	O
;	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
hotlist_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
loaded	int
=	O
1	int
;	O
}	O
if	O
(	O
remove_old_list	int
)	O
{	O
clean_up_hotlist_groups	(*(char))->(void)
(	O
"Hotlist"	*(char)
)	O
;	O
sync_profiles	()->(void)
(	O
)	O
;	O
}	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
hotlist_file_name	*(char)
,	O
&	O
stat_buf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
;	O
hotlist_file_mtime	long
=	O
stat_buf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mtime	O
;	O
current_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
=	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
;	O
}	O
static	O
void	O
save_group	(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))->(void)
(	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
grp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
)	O
{	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
current	*(struct)
=	O
grp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
head	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
char	O
*	O
group_section	*(char)
;	O
group_section	*(char)
=	O
find_group_section	(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))->(*(char))
(	O
grp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
)	O
;	O
profile_clean_section	(*(char),*(char))->(void)
(	O
group_section	*(char)
,	O
profile_name	*(char)
)	O
;	O
for	O
(	O
;	O
current	*(struct)
&&	O
current	*(struct)
->	O
type	enum(int,int,int,int)
==	O
HL_TYPE_GROUP	int
;	O
current	*(struct)
=	O
current	*(struct)
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
)	O
{	O
WritePrivateProfileString	(*(char),*(char),*(char),*(char))->(int)
(	O
group_section	*(char)
,	O
current	*(struct)
->	O
directory	enum(int,int,int,int,int,int,int,int,int)
,	O
current	*(struct)
->	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
,	O
profile_name	*(char)
)	O
;	O
}	O
g_free	(*(void))->(void)
(	O
group_section	*(char)
)	O
;	O
for	O
(	O
current	*(struct)
=	O
grp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
head	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
current	*(struct)
&&	O
current	*(struct)
->	O
type	enum(int,int,int,int)
==	O
HL_TYPE_GROUP	int
;	O
current	*(struct)
=	O
current	*(struct)
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
)	O
save_group	(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))->(void)
(	O
current	*(struct)
)	O
;	O
profile_clean_section	(*(char),*(char))->(void)
(	O
grp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
directory	enum(int,int,int,int,int,int,int,int,int)
,	O
profile_name	*(char)
)	O
;	O
for	O
(	O
;	O
current	*(struct)
;	O
current	*(struct)
=	O
current	*(struct)
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
)	O
{	O
WritePrivateProfileString	(*(char),*(char),*(char),*(char))->(int)
(	O
grp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
directory	enum(int,int,int,int,int,int,int,int,int)
,	O
current	*(struct)
->	O
directory	enum(int,int,int,int,int,int,int,int,int)
,	O
current	*(struct)
->	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
,	O
profile_name	*(char)
)	O
;	O
}	O
}	O
static	O
int	O
list_level	int
=	O
0	int
;	O
static	O
void	O
hot_save_group	(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))->(void)
(	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
grp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
)	O
{	O
struct	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
*	O
current	*(struct)
=	O
grp	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
->	O
head	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
int	O
i	array(int)
;	O
char	O
*	O
s	*(char)
;	O
for	O
(	O
;	O
current	*(struct)
;	O
current	*(struct)
=	O
current	*(struct)
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
)	O
switch	O
(	O
current	*(struct)
->	O
type	enum(int,int,int,int)
)	O
{	O
case	O
HL_TYPE_GROUP	int
:	O
INDENT	O
(	O
list_level	int
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"GROUP \""	*(char)
,	O
hotlist_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
for	O
(	O
s	*(char)
=	O
current	*(struct)
->	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
;	O
*	O
s	*(char)
;	O
s	*(char)
++	O
)	O
{	O
if	O
(	O
*	O
s	*(char)
==	O
'"'	O
||	O
*	O
s	*(char)
==	O
'\\'	O
)	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'\\'	O
,	O
hotlist_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
*	O
s	*(char)
,	O
hotlist_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"\"\n"	*(char)
,	O
hotlist_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
list_level	int
+=	O
2	int
;	O
hot_save_group	(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))->(void)
(	O
current	*(struct)
)	O
;	O
list_level	int
-=	O
2	int
;	O
INDENT	O
(	O
list_level	int
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"ENDGROUP\n"	*(char)
,	O
hotlist_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
break	O
;	O
case	O
HL_TYPE_ENTRY	int
:	O
INDENT	O
(	O
list_level	int
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"ENTRY \""	*(char)
,	O
hotlist_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
for	O
(	O
s	*(char)
=	O
current	*(struct)
->	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
;	O
*	O
s	*(char)
;	O
s	*(char)
++	O
)	O
{	O
if	O
(	O
*	O
s	*(char)
==	O
'"'	O
||	O
*	O
s	*(char)
==	O
'\\'	O
)	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'\\'	O
,	O
hotlist_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
*	O
s	*(char)
,	O
hotlist_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"\" URL \""	*(char)
,	O
hotlist_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
for	O
(	O
s	*(char)
=	O
current	*(struct)
->	O
directory	enum(int,int,int,int,int,int,int,int,int)
;	O
*	O
s	*(char)
;	O
s	*(char)
++	O
)	O
{	O
if	O
(	O
*	O
s	*(char)
==	O
'"'	O
||	O
*	O
s	*(char)
==	O
'\\'	O
)	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'\\'	O
,	O
hotlist_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
*	O
s	*(char)
,	O
hotlist_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"\"\n"	*(char)
,	O
hotlist_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
break	O
;	O
case	O
HL_TYPE_COMMENT	int
:	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
hotlist_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"#%s\n"	*(char)
,	O
current	*(struct)
->	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
)	O
;	O
break	O
;	O
case	O
HL_TYPE_DOTDOT	int
:	O
break	O
;	O
}	O
}	O
int	O
save_hotlist	()->(int)
(	O
void	O
)	O
{	O
int	O
saved	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
=	O
0	int
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
stat_buf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
if	O
(	O
!	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
readonly	int
&&	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
modified	long
&&	O
hotlist_file_name	*(char)
)	O
{	O
char	O
*	O
fbak	*(char)
=	O
g_strconcat	(*(char))->(*(char))
(	O
hotlist_file_name	*(char)
,	O
".bak"	*(char)
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
rename	(*(char),*(char))->(int)
(	O
hotlist_file_name	*(char)
,	O
fbak	*(char)
)	O
;	O
if	O
(	O
(	O
hotlist_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
hotlist_file_name	*(char)
,	O
"w"	*(char)
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
fbak	*(char)
,	O
&	O
stat_buf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
==	O
0	int
)	O
chmod	(*(char),int)->(int)
(	O
hotlist_file_name	*(char)
,	O
stat_buf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
;	O
else	O
chmod	(*(char),int)->(int)
(	O
hotlist_file_name	*(char)
,	O
S_IRUSR	O
|	O
S_IWUSR	O
)	O
;	O
hot_save_group	(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))->(void)
(	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
)	O
;	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
hotlist_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
hotlist_file_name	*(char)
,	O
&	O
stat_buf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
;	O
hotlist_file_mtime	long
=	O
stat_buf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mtime	O
;	O
saved	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
=	O
1	int
;	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
modified	long
=	O
0	int
;	O
}	O
else	O
rename	(*(char),*(char))->(int)
(	O
fbak	*(char)
,	O
hotlist_file_name	*(char)
)	O
;	O
g_free	(*(void))->(void)
(	O
fbak	*(char)
)	O
;	O
}	O
return	O
saved	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
;	O
}	O
void	O
done_hotlist	()->(void)
(	O
void	O
)	O
{	O
if	O
(	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
)	O
{	O
remove_group	(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))->(void)
(	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
)	O
;	O
g_free	(*(void))->(void)
(	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
->	O
label	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int))
)	O
;	O
g_free	(*(void))->(void)
(	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
->	O
directory	enum(int,int,int,int,int,int,int,int,int)
)	O
;	O
g_free	(*(void))->(void)
(	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
)	O
;	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
=	O
0	int
;	O
}	O
hotlist_state	struct(int,int,int,int,int,int,int,int)
.	O
loaded	int
=	O
0	int
;	O
g_free	(*(void))->(void)
(	O
hotlist_file_name	*(char)
)	O
;	O
hotlist_file_name	*(char)
=	O
0	int
;	O
l_hotlist	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
=	O
0	int
;	O
current_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
=	O
0	int
;	O
if	O
(	O
tkn_buf	*(char)
)	O
{	O
g_free	(*(void))->(void)
(	O
tkn_buf	*(char)
)	O
;	O
tkn_buf_length	int
=	O
0	int
;	O
tkn_length	int
=	O
0	int
;	O
tkn_buf	*(char)
=	O
NULL	O
;	O
}	O
}	O
static	O
void	O
add_dotdot_to_list	()->(void)
(	O
void	O
)	O
{	O
if	O
(	O
current_group	*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`)))))
!=	O
hotlist	struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(struct`),*(struct`))))))
)	O
{	O
if	O
(	O
hotlist_has_dot_dot	int
!=	O
0	int
)	O
add2hotlist	(*(char),*(char),enum(int,int,int,int),int)->(*(struct(enum(int,int,int,int),*(char),*(char),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)),*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`)))))
(	O
g_strdup	(*(char))->(*(char))
(	O
".."	*(char)
)	O
,	O
g_strdup	(*(char))->(*(char))
(	O
".."	*(char)
)	O
,	O
HL_TYPE_DOTDOT	int
,	O
0	int
)	O
;	O
}	O
}	O
