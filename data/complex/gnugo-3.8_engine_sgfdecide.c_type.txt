void	O
decide_string	(int)->(void)
(	O
int	O
pos	int
)	O
{	O
int	O
aa	int
,	O
dd	int
;	O
int	O
acode	int
,	O
dcode	int
;	O
SGFTree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
if	O
(	O
board	*(char)
[	O
pos	int
]	O
==	O
EMPTY	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"gnugo: --decide-string called on an empty vertex\n"	*(char)
)	O
;	O
return	O
;	O
}	O
if	O
(	O
*	O
outfilename	array(char)
)	O
sgffile_begindump	(*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))->(void)
(	O
&	O
tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
)	O
;	O
reset_engine	()->(void)
(	O
)	O
;	O
count_variations	int
=	O
1	int
;	O
acode	int
=	O
attack	(int,*(int))->(int)
(	O
pos	int
,	O
&	O
aa	int
)	O
;	O
if	O
(	O
acode	int
)	O
{	O
if	O
(	O
acode	int
==	O
WIN	int
)	O
gprintf	(*(char))->(int)
(	O
"%1m can be attacked at %1m (%d variations)\n"	*(char)
,	O
pos	int
,	O
aa	int
,	O
count_variations	int
)	O
;	O
else	O
if	O
(	O
acode	int
==	O
KO_A	int
)	O
gprintf	(*(char))->(int)
(	O
"%1m can be attacked with ko (good) at %1m (%d variations)\n"	*(char)
,	O
pos	int
,	O
aa	int
,	O
count_variations	int
)	O
;	O
else	O
if	O
(	O
acode	int
==	O
KO_B	int
)	O
gprintf	(*(char))->(int)
(	O
"%1m can be attacked with ko (bad) at %1m (%d variations)\n"	*(char)
,	O
pos	int
,	O
aa	int
,	O
count_variations	int
)	O
;	O
if	O
(	O
debug	int
&	O
DEBUG_READING_PERFORMANCE	int
)	O
{	O
gprintf	(*(char))->(int)
(	O
"Reading shadow: \n"	*(char)
)	O
;	O
draw_reading_shadow	()->(void)
(	O
)	O
;	O
}	O
count_variations	int
=	O
1	int
;	O
dcode	int
=	O
find_defense	(int,*(int))->(int)
(	O
pos	int
,	O
&	O
dd	int
)	O
;	O
if	O
(	O
dcode	int
)	O
{	O
if	O
(	O
dcode	int
==	O
WIN	int
)	O
gprintf	(*(char))->(int)
(	O
"%1m can be defended at %1m (%d variations)\n"	*(char)
,	O
pos	int
,	O
dd	int
,	O
count_variations	int
)	O
;	O
else	O
if	O
(	O
dcode	int
==	O
KO_A	int
)	O
gprintf	(*(char))->(int)
(	O
"%1m can be defended with ko (good) at %1m (%d variations)\n"	*(char)
,	O
pos	int
,	O
dd	int
,	O
count_variations	int
)	O
;	O
else	O
if	O
(	O
dcode	int
==	O
KO_B	int
)	O
gprintf	(*(char))->(int)
(	O
"%1m can be defended with ko (bad) at %1m (%d variations)\n"	*(char)
,	O
pos	int
,	O
dd	int
,	O
count_variations	int
)	O
;	O
}	O
else	O
gprintf	(*(char))->(int)
(	O
"%1m cannot be defended (%d variations)\n"	*(char)
,	O
pos	int
,	O
count_variations	int
)	O
;	O
if	O
(	O
debug	int
&	O
DEBUG_READING_PERFORMANCE	int
)	O
{	O
gprintf	(*(char))->(int)
(	O
"Reading shadow: \n"	*(char)
)	O
;	O
draw_reading_shadow	()->(void)
(	O
)	O
;	O
}	O
}	O
else	O
{	O
gprintf	(*(char))->(int)
(	O
"%1m cannot be attacked (%d variations)\n"	*(char)
,	O
pos	int
,	O
count_variations	int
)	O
;	O
if	O
(	O
debug	int
&	O
DEBUG_READING_PERFORMANCE	int
)	O
{	O
gprintf	(*(char))->(int)
(	O
"Reading shadow: \n"	*(char)
)	O
;	O
draw_reading_shadow	()->(void)
(	O
)	O
;	O
}	O
}	O
sgffile_enddump	(*(char))->(void)
(	O
outfilename	array(char)
)	O
;	O
count_variations	int
=	O
0	int
;	O
}	O
void	O
decide_connection	(int,int)->(void)
(	O
int	O
apos	int
,	O
int	O
bpos	int
)	O
{	O
int	O
move	*(int)
;	O
int	O
result	int
;	O
SGFTree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
ASSERT_ON_BOARD1	O
(	O
apos	int
)	O
;	O
ASSERT_ON_BOARD1	O
(	O
bpos	int
)	O
;	O
if	O
(	O
board	*(char)
[	O
apos	int
]	O
==	O
EMPTY	int
||	O
board	*(char)
[	O
bpos	int
]	O
==	O
EMPTY	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"gnugo: --decide-connection called on an empty vertex\n"	*(char)
)	O
;	O
return	O
;	O
}	O
if	O
(	O
board	*(char)
[	O
apos	int
]	O
!=	O
board	*(char)
[	O
bpos	int
]	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"gnugo: --decide-connection called for strings of different colors\n"	*(char)
)	O
;	O
return	O
;	O
}	O
if	O
(	O
*	O
outfilename	array(char)
)	O
sgffile_begindump	(*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))->(void)
(	O
&	O
tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
)	O
;	O
reset_engine	()->(void)
(	O
)	O
;	O
count_variations	int
=	O
1	int
;	O
result	int
=	O
string_connect	(int,int,*(int))->(int)
(	O
apos	int
,	O
bpos	int
,	O
&	O
move	*(int)
)	O
;	O
if	O
(	O
result	int
==	O
WIN	int
)	O
{	O
if	O
(	O
move	*(int)
==	O
NO_MOVE	O
)	O
gprintf	(*(char))->(int)
(	O
"%1m and %1m are connected as it stands (%d variations)\n"	*(char)
,	O
apos	int
,	O
bpos	int
,	O
count_variations	int
)	O
;	O
else	O
gprintf	(*(char))->(int)
(	O
"%1m and %1m can be connected at %1m (%d variations)\n"	*(char)
,	O
apos	int
,	O
bpos	int
,	O
move	*(int)
,	O
count_variations	int
)	O
;	O
}	O
else	O
if	O
(	O
result	int
==	O
KO_A	int
)	O
gprintf	(*(char))->(int)
(	O
"%1m and %1m can be connected with ko (good) at %1m (%d variations)\n"	*(char)
,	O
apos	int
,	O
bpos	int
,	O
move	*(int)
,	O
count_variations	int
)	O
;	O
else	O
if	O
(	O
result	int
==	O
KO_B	int
)	O
gprintf	(*(char))->(int)
(	O
"%1m and %1m can be connected with ko (bad) at %1m (%d variations)\n"	*(char)
,	O
apos	int
,	O
bpos	int
,	O
move	*(int)
,	O
count_variations	int
)	O
;	O
else	O
gprintf	(*(char))->(int)
(	O
"%1m and %1m cannot be connected (%d variations)\n"	*(char)
,	O
apos	int
,	O
bpos	int
,	O
count_variations	int
)	O
;	O
count_variations	int
=	O
1	int
;	O
result	int
=	O
disconnect	(int,int,*(int))->(int)
(	O
apos	int
,	O
bpos	int
,	O
&	O
move	*(int)
)	O
;	O
if	O
(	O
result	int
==	O
WIN	int
)	O
{	O
if	O
(	O
move	*(int)
==	O
NO_MOVE	O
)	O
gprintf	(*(char))->(int)
(	O
"%1m and %1m are disconnected as it stands (%d variations)\n"	*(char)
,	O
apos	int
,	O
bpos	int
,	O
count_variations	int
)	O
;	O
else	O
gprintf	(*(char))->(int)
(	O
"%1m and %1m can be disconnected at %1m (%d variations)\n"	*(char)
,	O
apos	int
,	O
bpos	int
,	O
move	*(int)
,	O
count_variations	int
)	O
;	O
}	O
else	O
if	O
(	O
result	int
==	O
KO_A	int
)	O
gprintf	(*(char))->(int)
(	O
"%1m and %1m can be disconnected with ko (good) at %1m (%d variations)\n"	*(char)
,	O
apos	int
,	O
bpos	int
,	O
move	*(int)
,	O
count_variations	int
)	O
;	O
else	O
if	O
(	O
result	int
==	O
KO_B	int
)	O
gprintf	(*(char))->(int)
(	O
"%1m and %1m can be disconnected with ko (bad) at %1m (%d variations)\n"	*(char)
,	O
apos	int
,	O
bpos	int
,	O
move	*(int)
,	O
count_variations	int
)	O
;	O
else	O
gprintf	(*(char))->(int)
(	O
"%1m and %1m cannot be disconnected (%d variations)\n"	*(char)
,	O
apos	int
,	O
bpos	int
,	O
count_variations	int
)	O
;	O
sgffile_enddump	(*(char))->(void)
(	O
outfilename	array(char)
)	O
;	O
count_variations	int
=	O
0	int
;	O
}	O
void	O
decide_owl	(int)->(void)
(	O
int	O
pos	int
)	O
{	O
int	O
move	*(int)
=	O
NO_MOVE	O
;	O
int	O
acode	int
,	O
dcode	int
;	O
SGFTree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
int	O
result_certain	int
;	O
int	O
kworm	int
;	O
if	O
(	O
board	*(char)
[	O
pos	int
]	O
==	O
EMPTY	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"gnugo: --decide-dragon called on an empty vertex\n"	*(char)
)	O
;	O
return	O
;	O
}	O
reset_engine	()->(void)
(	O
)	O
;	O
silent_examine_position	(int)->(void)
(	O
EXAMINE_DRAGONS_WITHOUT_OWL	int
)	O
;	O
gprintf	(*(char))->(int)
(	O
"finished examine_position\n"	*(char)
)	O
;	O
reading_cache_clear	()->(void)
(	O
)	O
;	O
if	O
(	O
*	O
outfilename	array(char)
)	O
sgffile_begindump	(*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))->(void)
(	O
&	O
tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
)	O
;	O
count_variations	int
=	O
1	int
;	O
acode	int
=	O
owl_attack	(int,*(int),*(int),*(int))->(int)
(	O
pos	int
,	O
&	O
move	*(int)
,	O
&	O
result_certain	int
,	O
&	O
kworm	int
)	O
;	O
if	O
(	O
acode	int
)	O
{	O
if	O
(	O
acode	int
==	O
WIN	int
)	O
{	O
if	O
(	O
move	*(int)
==	O
NO_MOVE	O
)	O
gprintf	(*(char))->(int)
(	O
"%1m is dead as it stands"	*(char)
,	O
pos	int
)	O
;	O
else	O
gprintf	(*(char))->(int)
(	O
"%1m can be attacked at %1m (%d variations)"	*(char)
,	O
pos	int
,	O
move	*(int)
,	O
count_variations	int
)	O
;	O
}	O
else	O
if	O
(	O
acode	int
==	O
KO_A	int
)	O
gprintf	(*(char))->(int)
(	O
"%1m can be attacked with ko (good) at %1m (%d variations)"	*(char)
,	O
pos	int
,	O
move	*(int)
,	O
count_variations	int
)	O
;	O
else	O
if	O
(	O
acode	int
==	O
KO_B	int
)	O
gprintf	(*(char))->(int)
(	O
"%1m can be attacked with ko (bad) at %1m (%d variations)"	*(char)
,	O
pos	int
,	O
move	*(int)
,	O
count_variations	int
)	O
;	O
else	O
if	O
(	O
acode	int
==	O
GAIN	int
)	O
gprintf	(*(char))->(int)
(	O
"%1m can be attacked with gain (captures %1m) at %1m (%d variations)"	*(char)
,	O
pos	int
,	O
kworm	int
,	O
move	*(int)
,	O
count_variations	int
)	O
;	O
}	O
else	O
gprintf	(*(char))->(int)
(	O
"%1m cannot be attacked (%d variations)"	*(char)
,	O
pos	int
,	O
count_variations	int
)	O
;	O
if	O
(	O
result_certain	int
)	O
gprintf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
else	O
gprintf	(*(char))->(int)
(	O
" result uncertain\n"	*(char)
)	O
;	O
reading_cache_clear	()->(void)
(	O
)	O
;	O
count_variations	int
=	O
1	int
;	O
dcode	int
=	O
owl_defend	(int,*(int),*(int),*(int))->(int)
(	O
pos	int
,	O
&	O
move	*(int)
,	O
&	O
result_certain	int
,	O
&	O
kworm	int
)	O
;	O
if	O
(	O
dcode	int
)	O
{	O
if	O
(	O
dcode	int
==	O
WIN	int
)	O
{	O
if	O
(	O
move	*(int)
==	O
NO_MOVE	O
)	O
gprintf	(*(char))->(int)
(	O
"%1m is alive as it stands"	*(char)
,	O
pos	int
)	O
;	O
else	O
gprintf	(*(char))->(int)
(	O
"%1m can be defended at %1m (%d variations)"	*(char)
,	O
pos	int
,	O
move	*(int)
,	O
count_variations	int
)	O
;	O
}	O
else	O
if	O
(	O
dcode	int
==	O
KO_A	int
)	O
gprintf	(*(char))->(int)
(	O
"%1m can be defended with ko (good) at %1m (%d variations)"	*(char)
,	O
pos	int
,	O
move	*(int)
,	O
count_variations	int
)	O
;	O
else	O
if	O
(	O
dcode	int
==	O
KO_B	int
)	O
gprintf	(*(char))->(int)
(	O
"%1m can be defended with ko (bad) at %1m (%d variations)"	*(char)
,	O
pos	int
,	O
move	*(int)
,	O
count_variations	int
)	O
;	O
else	O
if	O
(	O
dcode	int
==	O
LOSS	int
)	O
gprintf	(*(char))->(int)
(	O
"%1m can be defended with loss (loses %1m) at %1m (%d variations)"	*(char)
,	O
pos	int
,	O
kworm	int
,	O
move	*(int)
,	O
count_variations	int
)	O
;	O
}	O
else	O
gprintf	(*(char))->(int)
(	O
"%1m cannot be defended (%d variations)"	*(char)
,	O
pos	int
,	O
count_variations	int
)	O
;	O
if	O
(	O
result_certain	int
)	O
gprintf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
else	O
gprintf	(*(char))->(int)
(	O
" result uncertain\n"	*(char)
)	O
;	O
sgffile_enddump	(*(char))->(void)
(	O
outfilename	array(char)
)	O
;	O
count_variations	int
=	O
0	int
;	O
}	O
void	O
decide_dragon_data	(int)->(void)
(	O
int	O
pos	int
)	O
{	O
if	O
(	O
board	*(char)
[	O
pos	int
]	O
==	O
EMPTY	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"gnugo: --decide-dragon-data called on an empty vertex\n"	*(char)
)	O
;	O
return	O
;	O
}	O
reset_engine	()->(void)
(	O
)	O
;	O
silent_examine_position	(int)->(void)
(	O
FULL_EXAMINE_DRAGONS	int
)	O
;	O
gprintf	(*(char))->(int)
(	O
"Dragon at %1m:\n"	*(char)
,	O
pos	int
)	O
;	O
report_dragon	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)->(void)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
pos	int
)	O
;	O
}	O
void	O
decide_semeai	(int,int)->(void)
(	O
int	O
apos	int
,	O
int	O
bpos	int
)	O
{	O
SGFTree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
int	O
resulta	*(int)
,	O
resultb	*(int)
,	O
move	*(int)
,	O
result_certain	int
;	O
int	O
color	int
=	O
board	*(char)
[	O
apos	int
]	O
;	O
if	O
(	O
color	int
==	O
EMPTY	int
||	O
board	*(char)
[	O
bpos	int
]	O
!=	O
OTHER_COLOR	O
(	O
color	int
)	O
)	O
{	O
gprintf	(*(char))->(int)
(	O
"gnugo: --decide-semeai called on invalid data\n"	*(char)
)	O
;	O
return	O
;	O
}	O
reset_engine	()->(void)
(	O
)	O
;	O
silent_examine_position	(int)->(void)
(	O
EXAMINE_DRAGONS_WITHOUT_OWL	int
)	O
;	O
gprintf	(*(char))->(int)
(	O
"finished examine_position\n"	*(char)
)	O
;	O
count_variations	int
=	O
1	int
;	O
reading_cache_clear	()->(void)
(	O
)	O
;	O
if	O
(	O
*	O
outfilename	array(char)
)	O
sgffile_begindump	(*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))->(void)
(	O
&	O
tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
)	O
;	O
gprintf	(*(char))->(int)
(	O
"Analyzing semeai between %1m and %1m, %C moves first\n"	*(char)
,	O
apos	int
,	O
bpos	int
,	O
board	*(char)
[	O
apos	int
]	O
)	O
;	O
owl_analyze_semeai	(int,int,*(int),*(int),*(int),int,*(int))->(void)
(	O
apos	int
,	O
bpos	int
,	O
&	O
resulta	*(int)
,	O
&	O
resultb	*(int)
,	O
&	O
move	*(int)
,	O
1	int
,	O
&	O
result_certain	int
)	O
;	O
gprintf	(*(char))->(int)
(	O
"Semeai defense of %1m: result %s %1m\n"	*(char)
,	O
apos	int
,	O
result_to_string	(int)->(*(char))
(	O
resulta	*(int)
)	O
,	O
move	*(int)
)	O
;	O
gprintf	(*(char))->(int)
(	O
"Semeai attack of %1m: result %s %1m\n"	*(char)
,	O
bpos	int
,	O
result_to_string	(int)->(*(char))
(	O
resultb	*(int)
)	O
,	O
move	*(int)
)	O
;	O
gprintf	(*(char))->(int)
(	O
"%d nodes%s\n\n"	*(char)
,	O
count_variations	int
,	O
result_certain	int
?	O
""	*(char)
:	O
", uncertain result"	*(char)
)	O
;	O
gprintf	(*(char))->(int)
(	O
"Analyzing semeai between %1m and %1m, %C moves first\n"	*(char)
,	O
bpos	int
,	O
apos	int
,	O
board	*(char)
[	O
bpos	int
]	O
)	O
;	O
owl_analyze_semeai	(int,int,*(int),*(int),*(int),int,*(int))->(void)
(	O
bpos	int
,	O
apos	int
,	O
&	O
resultb	*(int)
,	O
&	O
resulta	*(int)
,	O
&	O
move	*(int)
,	O
1	int
,	O
&	O
result_certain	int
)	O
;	O
gprintf	(*(char))->(int)
(	O
"Semeai defense of %1m: result %s %1m\n"	*(char)
,	O
bpos	int
,	O
result_to_string	(int)->(*(char))
(	O
resultb	*(int)
)	O
,	O
move	*(int)
)	O
;	O
gprintf	(*(char))->(int)
(	O
"Semeai attack of %1m: result %s %1m\n"	*(char)
,	O
apos	int
,	O
result_to_string	(int)->(*(char))
(	O
resulta	*(int)
)	O
,	O
move	*(int)
)	O
;	O
gprintf	(*(char))->(int)
(	O
"%d nodes%s\n"	*(char)
,	O
count_variations	int
,	O
result_certain	int
?	O
""	*(char)
:	O
", uncertain result"	*(char)
)	O
;	O
sgffile_enddump	(*(char))->(void)
(	O
outfilename	array(char)
)	O
;	O
count_variations	int
=	O
0	int
;	O
}	O
void	O
decide_tactical_semeai	(int,int)->(void)
(	O
int	O
apos	int
,	O
int	O
bpos	int
)	O
{	O
SGFTree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
int	O
resulta	*(int)
,	O
resultb	*(int)
,	O
move	*(int)
,	O
dummy	int
;	O
int	O
color	int
=	O
board	*(char)
[	O
apos	int
]	O
;	O
if	O
(	O
color	int
==	O
EMPTY	int
||	O
board	*(char)
[	O
bpos	int
]	O
!=	O
OTHER_COLOR	O
(	O
color	int
)	O
)	O
{	O
gprintf	(*(char))->(int)
(	O
"gnugo: --decide-semeai called on invalid data\n"	*(char)
)	O
;	O
return	O
;	O
}	O
reset_engine	()->(void)
(	O
)	O
;	O
silent_examine_position	(int)->(void)
(	O
EXAMINE_DRAGONS_WITHOUT_OWL	int
)	O
;	O
gprintf	(*(char))->(int)
(	O
"finished examine_position\n"	*(char)
)	O
;	O
count_variations	int
=	O
1	int
;	O
reading_cache_clear	()->(void)
(	O
)	O
;	O
if	O
(	O
*	O
outfilename	array(char)
)	O
sgffile_begindump	(*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))->(void)
(	O
&	O
tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
)	O
;	O
owl_analyze_semeai	(int,int,*(int),*(int),*(int),int,*(int))->(void)
(	O
apos	int
,	O
bpos	int
,	O
&	O
resulta	*(int)
,	O
&	O
resultb	*(int)
,	O
&	O
move	*(int)
,	O
0	int
,	O
&	O
dummy	int
)	O
;	O
gprintf	(*(char))->(int)
(	O
"After %s at %1m, %1m is %s, %1m is %s (%d nodes)\n"	*(char)
,	O
color_to_string	(int)->(*(char))
(	O
color	int
)	O
,	O
move	*(int)
,	O
apos	int
,	O
status_to_string	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(*(char))
(	O
resulta	*(int)
)	O
,	O
bpos	int
,	O
status_to_string	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(*(char))
(	O
resultb	*(int)
)	O
,	O
count_variations	int
)	O
;	O
owl_analyze_semeai	(int,int,*(int),*(int),*(int),int,*(int))->(void)
(	O
bpos	int
,	O
apos	int
,	O
&	O
resultb	*(int)
,	O
&	O
resulta	*(int)
,	O
&	O
move	*(int)
,	O
0	int
,	O
&	O
dummy	int
)	O
;	O
gprintf	(*(char))->(int)
(	O
"After %s at %1m, %1m is %s, %1m is %s (%d nodes)\n"	*(char)
,	O
color_to_string	(int)->(*(char))
(	O
color	int
)	O
,	O
move	*(int)
,	O
apos	int
,	O
status_to_string	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(*(char))
(	O
resulta	*(int)
)	O
,	O
bpos	int
,	O
status_to_string	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(*(char))
(	O
resultb	*(int)
)	O
,	O
count_variations	int
)	O
;	O
sgffile_enddump	(*(char))->(void)
(	O
outfilename	array(char)
)	O
;	O
count_variations	int
=	O
0	int
;	O
}	O
void	O
decide_position	()->(void)
(	O
)	O
{	O
int	O
pos	int
;	O
int	O
move	*(int)
=	O
NO_MOVE	O
;	O
int	O
acode	int
=	O
0	int
,	O
dcode	int
=	O
0	int
;	O
int	O
kworm	int
;	O
static	O
const	O
char	O
*	O
snames	array(*(char))
[	O
]	O
=	O
{	O
"dead"	*(char)
,	O
"alive"	*(char)
,	O
"critical"	*(char)
,	O
"unknown"	*(char)
}	O
;	O
SGFTree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
reset_engine	()->(void)
(	O
)	O
;	O
silent_examine_position	(int)->(void)
(	O
EXAMINE_DRAGONS_WITHOUT_OWL	int
)	O
;	O
reading_cache_clear	()->(void)
(	O
)	O
;	O
if	O
(	O
*	O
outfilename	array(char)
)	O
sgffile_begindump	(*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))->(void)
(	O
&	O
tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
)	O
;	O
count_variations	int
=	O
1	int
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
!	O
ON_BOARD	O
(	O
pos	int
)	O
||	O
dragon	int
[	O
pos	int
]	O
.	O
origin	int
!=	O
pos	int
||	O
board	*(char)
[	O
pos	int
]	O
==	O
EMPTY	int
||	O
DRAGON2	O
(	O
pos	int
)	O
.	O
escape_route	float
>=	O
6	int
)	O
continue	O
;	O
gprintf	(*(char))->(int)
(	O
"\nanalyzing %1m\n"	*(char)
,	O
pos	int
)	O
;	O
gprintf	(*(char))->(int)
(	O
"status=%s, escape=%d\n"	*(char)
,	O
snames	array(*(char))
[	O
dragon	int
[	O
pos	int
]	O
.	O
crude_status	(int)->(enum)
]	O
,	O
DRAGON2	O
(	O
pos	int
)	O
.	O
escape_route	float
)	O
;	O
acode	int
=	O
owl_attack	(int,*(int),*(int),*(int))->(int)
(	O
pos	int
,	O
&	O
move	*(int)
,	O
NULL	O
,	O
&	O
kworm	int
)	O
;	O
if	O
(	O
acode	int
)	O
{	O
if	O
(	O
acode	int
==	O
WIN	int
)	O
{	O
if	O
(	O
move	*(int)
==	O
NO_MOVE	O
)	O
gprintf	(*(char))->(int)
(	O
"%1m is dead as it stands\n"	*(char)
,	O
pos	int
)	O
;	O
else	O
gprintf	(*(char))->(int)
(	O
"%1m can be attacked at %1m (%d variations)\n"	*(char)
,	O
pos	int
,	O
move	*(int)
,	O
count_variations	int
)	O
;	O
}	O
else	O
if	O
(	O
acode	int
==	O
KO_A	int
)	O
gprintf	(*(char))->(int)
(	O
"%1m can be attacked with ko (good) at %1m (%d variations)\n"	*(char)
,	O
pos	int
,	O
move	*(int)
,	O
count_variations	int
)	O
;	O
else	O
if	O
(	O
acode	int
==	O
KO_B	int
)	O
gprintf	(*(char))->(int)
(	O
"%1m can be attacked with ko (bad) at %1m (%d variations)\n"	*(char)
,	O
pos	int
,	O
move	*(int)
,	O
count_variations	int
)	O
;	O
else	O
if	O
(	O
acode	int
==	O
GAIN	int
)	O
gprintf	(*(char))->(int)
(	O
"%1m can be attacked with gain (captures %1m) at %1m (%d variations)"	*(char)
,	O
pos	int
,	O
kworm	int
,	O
move	*(int)
,	O
count_variations	int
)	O
;	O
count_variations	int
=	O
1	int
;	O
dcode	int
=	O
owl_defend	(int,*(int),*(int),*(int))->(int)
(	O
pos	int
,	O
&	O
move	*(int)
,	O
NULL	O
,	O
&	O
kworm	int
)	O
;	O
if	O
(	O
dcode	int
)	O
{	O
if	O
(	O
dcode	int
==	O
WIN	int
)	O
{	O
if	O
(	O
move	*(int)
==	O
NO_MOVE	O
)	O
gprintf	(*(char))->(int)
(	O
"%1m is alive as it stands\n"	*(char)
,	O
pos	int
)	O
;	O
else	O
gprintf	(*(char))->(int)
(	O
"%1m can be defended at %1m (%d variations)\n"	*(char)
,	O
pos	int
,	O
move	*(int)
,	O
count_variations	int
)	O
;	O
}	O
else	O
if	O
(	O
dcode	int
==	O
KO_A	int
)	O
gprintf	(*(char))->(int)
(	O
"%1m can be defended with ko (good) at %1m (%d variations)\n"	*(char)
,	O
pos	int
,	O
move	*(int)
,	O
count_variations	int
)	O
;	O
else	O
if	O
(	O
dcode	int
==	O
KO_B	int
)	O
gprintf	(*(char))->(int)
(	O
"%1m can be defended with ko (bad) at %1m (%d variations)\n"	*(char)
,	O
pos	int
,	O
move	*(int)
,	O
count_variations	int
)	O
;	O
else	O
if	O
(	O
dcode	int
==	O
LOSS	int
)	O
gprintf	(*(char))->(int)
(	O
"%1m can be defended with loss (loses %1m) at %1m (%d variations)"	*(char)
,	O
pos	int
,	O
kworm	int
,	O
move	*(int)
,	O
count_variations	int
)	O
;	O
}	O
else	O
gprintf	(*(char))->(int)
(	O
"%1m cannot be defended (%d variations)\n"	*(char)
,	O
pos	int
,	O
count_variations	int
)	O
;	O
}	O
else	O
gprintf	(*(char))->(int)
(	O
"%1m cannot be attacked (%d variations)\n"	*(char)
,	O
pos	int
,	O
count_variations	int
)	O
;	O
if	O
(	O
acode	int
)	O
{	O
if	O
(	O
dcode	int
)	O
gprintf	(*(char))->(int)
(	O
"status of %1m revised to CRITICAL\n"	*(char)
,	O
pos	int
)	O
;	O
else	O
gprintf	(*(char))->(int)
(	O
"status of %1m revised to DEAD\n"	*(char)
,	O
pos	int
)	O
;	O
}	O
else	O
gprintf	(*(char))->(int)
(	O
"status of %1m revised to ALIVE\n"	*(char)
,	O
pos	int
)	O
;	O
}	O
sgffile_enddump	(*(char))->(void)
(	O
outfilename	array(char)
)	O
;	O
count_variations	int
=	O
0	int
;	O
}	O
void	O
decide_eye	(int)->(void)
(	O
int	O
pos	int
)	O
{	O
int	O
color	int
;	O
struct	O
eyevalue	struct(char,char,char,char)
value	*(char)
;	O
int	O
attack_point	*(int)
;	O
int	O
defense_point	*(int)
;	O
int	O
eyepos	int
;	O
SGFTree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
reset_engine	()->(void)
(	O
)	O
;	O
silent_examine_position	(int)->(void)
(	O
EXAMINE_DRAGONS_WITHOUT_OWL	int
)	O
;	O
color	int
=	O
black_eye	array(struct(int,int,int,int,struct(char,char,char,char),char,char,char))
[	O
pos	int
]	O
.	O
color	int
;	O
if	O
(	O
!	O
IS_STONE	O
(	O
color	int
)	O
)	O
{	O
gprintf	(*(char))->(int)
(	O
"The eye at %1m is not of a single color.\n"	*(char)
,	O
pos	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
printboard	int
)	O
showboard	(int)->(void)
(	O
0	int
)	O
;	O
if	O
(	O
*	O
outfilename	array(char)
)	O
sgffile_begindump	(*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))->(void)
(	O
&	O
tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
)	O
;	O
count_variations	int
=	O
1	int
;	O
if	O
(	O
black_eye	array(struct(int,int,int,int,struct(char,char,char,char),char,char,char))
[	O
pos	int
]	O
.	O
color	int
==	O
BLACK	int
)	O
{	O
eyepos	int
=	O
black_eye	array(struct(int,int,int,int,struct(char,char,char,char),char,char,char))
[	O
pos	int
]	O
.	O
origin	int
;	O
compute_eyes	(int,*(struct(char,char,char,char)),*(int),*(int),array(struct(int,int,int,int,struct(char,char,char,char),char,char,char)),array(struct(float,char,int,array(int),int,array(int))),int)->(void)
(	O
eyepos	int
,	O
&	O
value	*(char)
,	O
&	O
attack_point	*(int)
,	O
&	O
defense_point	*(int)
,	O
black_eye	array(struct(int,int,int,int,struct(char,char,char,char),char,char,char))
,	O
half_eye	array(struct(float,char,int,array(int),int,array(int)))
,	O
0	int
)	O
;	O
gprintf	(*(char))->(int)
(	O
"Black eyespace at %1m: %s\n"	*(char)
,	O
eyepos	int
,	O
eyevalue_to_string	(*(struct(char,char,char,char)))->(*(char))
(	O
&	O
value	*(char)
)	O
)	O
;	O
if	O
(	O
eye_move_urgency	(*(struct(char,char,char,char)))->(int)
(	O
&	O
value	*(char)
)	O
>	O
0	int
)	O
{	O
gprintf	(*(char))->(int)
(	O
"  vital points: %1m (attack) %1m (defense)\n"	*(char)
,	O
attack_point	*(int)
,	O
defense_point	*(int)
)	O
;	O
}	O
}	O
if	O
(	O
white_eye	array(struct(int,int,int,int,struct(char,char,char,char),char,char,char))
[	O
pos	int
]	O
.	O
color	int
==	O
WHITE	int
)	O
{	O
eyepos	int
=	O
white_eye	array(struct(int,int,int,int,struct(char,char,char,char),char,char,char))
[	O
pos	int
]	O
.	O
origin	int
;	O
compute_eyes	(int,*(struct(char,char,char,char)),*(int),*(int),array(struct(int,int,int,int,struct(char,char,char,char),char,char,char)),array(struct(float,char,int,array(int),int,array(int))),int)->(void)
(	O
eyepos	int
,	O
&	O
value	*(char)
,	O
&	O
attack_point	*(int)
,	O
&	O
defense_point	*(int)
,	O
white_eye	array(struct(int,int,int,int,struct(char,char,char,char),char,char,char))
,	O
half_eye	array(struct(float,char,int,array(int),int,array(int)))
,	O
0	int
)	O
;	O
gprintf	(*(char))->(int)
(	O
"White eyespace at %1m: %s\n"	*(char)
,	O
eyepos	int
,	O
eyevalue_to_string	(*(struct(char,char,char,char)))->(*(char))
(	O
&	O
value	*(char)
)	O
)	O
;	O
if	O
(	O
eye_move_urgency	(*(struct(char,char,char,char)))->(int)
(	O
&	O
value	*(char)
)	O
>	O
0	int
)	O
{	O
gprintf	(*(char))->(int)
(	O
"  vital points: %1m (attack) %1m (defense)\n"	*(char)
,	O
attack_point	*(int)
,	O
defense_point	*(int)
)	O
;	O
}	O
}	O
sgffile_enddump	(*(char))->(void)
(	O
outfilename	array(char)
)	O
;	O
count_variations	int
=	O
0	int
;	O
}	O
void	O
decide_combination	(int)->(void)
(	O
int	O
color	int
)	O
{	O
int	O
attack_move	*(int)
;	O
signed	O
char	O
defense_moves	array(char)
[	O
BOARDMAX	O
]	O
;	O
SGFTree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
int	O
first	int
=	O
1	int
;	O
int	O
pos	int
;	O
reset_engine	()->(void)
(	O
)	O
;	O
silent_examine_position	(int)->(void)
(	O
EXAMINE_ALL	int
)	O
;	O
if	O
(	O
*	O
outfilename	array(char)
)	O
sgffile_begindump	(*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))->(void)
(	O
&	O
tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
)	O
;	O
count_variations	int
=	O
1	int
;	O
if	O
(	O
atari_atari	(int,*(int),array(char),int)->(int)
(	O
color	int
,	O
&	O
attack_move	*(int)
,	O
defense_moves	array(char)
,	O
verbose	int
)	O
)	O
{	O
gprintf	(*(char))->(int)
(	O
"Combination attack for %C at %1m, defense at "	*(char)
,	O
color	int
,	O
attack_move	*(int)
)	O
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
ON_BOARD	O
(	O
pos	int
)	O
&&	O
defense_moves	array(char)
[	O
pos	int
]	O
)	O
{	O
if	O
(	O
first	int
)	O
first	int
=	O
0	int
;	O
else	O
gprintf	(*(char))->(int)
(	O
", "	*(char)
)	O
;	O
gprintf	(*(char))->(int)
(	O
"%1m"	*(char)
,	O
pos	int
)	O
;	O
}	O
}	O
gprintf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
}	O
else	O
gprintf	(*(char))->(int)
(	O
"No Combination attack for %C\n"	*(char)
,	O
color	int
)	O
;	O
sgffile_enddump	(*(char))->(void)
(	O
outfilename	array(char)
)	O
;	O
count_variations	int
=	O
0	int
;	O
}	O
void	O
decide_surrounded	(int)->(void)
(	O
int	O
pos	int
)	O
{	O
int	O
surround_status	int
;	O
if	O
(	O
board	*(char)
[	O
pos	int
]	O
==	O
EMPTY	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"location must not be empty!\n"	*(char)
)	O
;	O
return	O
;	O
}	O
reset_engine	()->(void)
(	O
)	O
;	O
silent_examine_position	(int)->(void)
(	O
EXAMINE_ALL	int
)	O
;	O
surround_status	int
=	O
compute_surroundings	(int,int,int,*(int))->(int)
(	O
pos	int
,	O
NO_MOVE	O
,	O
1	int
,	O
NULL	O
)	O
;	O
if	O
(	O
surround_status	int
==	O
1	int
)	O
gprintf	(*(char))->(int)
(	O
"the dragon at %1m is SURROUNDED!\n"	*(char)
,	O
pos	int
)	O
;	O
else	O
if	O
(	O
surround_status	int
==	O
2	int
)	O
gprintf	(*(char))->(int)
(	O
"the dragon at %1m is WEAKLY SURROUNDED!\n"	*(char)
,	O
pos	int
)	O
;	O
else	O
gprintf	(*(char))->(int)
(	O
"the dragon at %1m is not surrounded.\n"	*(char)
,	O
pos	int
)	O
;	O
}	O
