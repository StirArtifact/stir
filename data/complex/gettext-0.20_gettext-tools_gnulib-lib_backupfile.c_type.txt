const	O
char	O
*	O
simple_backup_suffix	*(char)
=	O
"~"	*(char)
;	O
static	O
int	O
max_backup_version	(*(char),*(char))->(int)
(	O
const	O
char	O
*	O
,	O
const	O
char	O
*	O
)	O
;	O
static	O
int	O
version_number	(*(char),*(char),long)->(int)
(	O
const	O
char	O
*	O
,	O
const	O
char	O
*	O
,	O
size_t	long
)	O
;	O
char	O
*	O
find_backup_file_name	(*(char),enum(int,int,int,int))->(*(char))
(	O
const	O
char	O
*	O
file	*(char)
,	O
enum	O
backup_type	enum(int,int,int,int)
backup_type	enum(int,int,int,int)
)	O
{	O
size_t	long
backup_suffix_size_max	long
;	O
size_t	long
file_len	long
=	O
strlen	(*(char))->(long)
(	O
file	*(char)
)	O
;	O
size_t	long
numbered_suffix_size_max	long
=	O
INT_STRLEN_BOUND	O
(	O
int	O
)	O
+	O
4	int
;	O
char	O
*	O
s	*(char)
;	O
const	O
char	O
*	O
suffix	*(char)
=	O
simple_backup_suffix	*(char)
;	O
backup_suffix_size_max	long
=	O
strlen	(*(char))->(long)
(	O
simple_backup_suffix	*(char)
)	O
+	O
1	int
;	O
if	O
(	O
HAVE_DIR	int
&&	O
backup_suffix_size_max	long
<	O
numbered_suffix_size_max	long
)	O
backup_suffix_size_max	long
=	O
numbered_suffix_size_max	long
;	O
s	*(char)
=	O
(	O
char	O
*	O
)	O
malloc	(long)->(*(void))
(	O
file_len	long
+	O
backup_suffix_size_max	long
+	O
numbered_suffix_size_max	long
)	O
;	O
if	O
(	O
s	*(char)
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
s	*(char)
,	O
file	*(char)
)	O
;	O
if	O
(	O
backup_type	enum(int,int,int,int)
!=	O
simple	int
)	O
{	O
int	O
highest_backup	int
;	O
size_t	long
dir_len	long
=	O
basename	(*(char))->(*(char))
(	O
s	*(char)
)	O
-	O
s	*(char)
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
s	*(char)
+	O
dir_len	long
,	O
"."	*(char)
)	O
;	O
highest_backup	int
=	O
max_backup_version	(*(char),*(char))->(int)
(	O
file	*(char)
+	O
dir_len	long
,	O
s	*(char)
)	O
;	O
if	O
(	O
!	O
(	O
backup_type	enum(int,int,int,int)
==	O
numbered_existing	int
&&	O
highest_backup	int
==	O
0	int
)	O
)	O
{	O
char	O
*	O
numbered_suffix	*(char)
=	O
s	*(char)
+	O
(	O
file_len	long
+	O
backup_suffix_size_max	long
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
numbered_suffix	*(char)
,	O
".~%d~"	*(char)
,	O
highest_backup	int
+	O
1	int
)	O
;	O
suffix	*(char)
=	O
numbered_suffix	*(char)
;	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
s	*(char)
,	O
file	*(char)
)	O
;	O
}	O
addext	(*(char),*(char),char)->(void)
(	O
s	*(char)
,	O
suffix	*(char)
,	O
'~'	O
)	O
;	O
}	O
return	O
s	*(char)
;	O
}	O
static	O
int	O
max_backup_version	(*(char),*(char))->(int)
(	O
const	O
char	O
*	O
file	*(char)
,	O
const	O
char	O
*	O
dir	*(char)
)	O
{	O
DIR	struct
*	O
dirp	*(struct)
;	O
struct	O
dirent	struct(long,long,short,char,array(char))
*	O
dp	*(struct(long,long,short,char,array(char)))
;	O
int	O
highest_version	int
;	O
int	O
this_version	int
;	O
size_t	long
file_name_length	long
;	O
dirp	*(struct)
=	O
opendir	(*(char))->(*(struct))
(	O
dir	*(char)
)	O
;	O
if	O
(	O
!	O
dirp	*(struct)
)	O
return	O
0	int
;	O
highest_version	int
=	O
0	int
;	O
file_name_length	long
=	O
strlen	(*(char))->(long)
(	O
file	*(char)
)	O
;	O
while	O
(	O
(	O
dp	*(struct(long,long,short,char,array(char)))
=	O
readdir	(*(struct))->(*(struct(long,long,short,char,array(char))))
(	O
dirp	*(struct)
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
!	O
REAL_DIR_ENTRY	int
(	O
dp	*(struct(long,long,short,char,array(char)))
)	O
||	O
strlen	(*(char))->(long)
(	O
dp	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
)	O
<	O
file_name_length	long
+	O
4	int
)	O
continue	O
;	O
this_version	int
=	O
version_number	(*(char),*(char),long)->(int)
(	O
file	*(char)
,	O
dp	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
,	O
file_name_length	long
)	O
;	O
if	O
(	O
this_version	int
>	O
highest_version	int
)	O
highest_version	int
=	O
this_version	int
;	O
}	O
if	O
(	O
closedir	(*(struct))->(int)
(	O
dirp	*(struct)
)	O
)	O
return	O
0	int
;	O
return	O
highest_version	int
;	O
}	O
static	O
int	O
version_number	(*(char),*(char),long)->(int)
(	O
const	O
char	O
*	O
base	*(char)
,	O
const	O
char	O
*	O
backup	*(char)
,	O
size_t	long
base_length	long
)	O
{	O
int	O
version	int
;	O
const	O
char	O
*	O
p	*(char)
;	O
version	int
=	O
0	int
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
base	*(char)
,	O
backup	*(char)
,	O
base_length	long
)	O
==	O
0	int
&&	O
backup	*(char)
[	O
base_length	long
]	O
==	O
'.'	O
&&	O
backup	*(char)
[	O
base_length	long
+	O
1	int
]	O
==	O
'~'	O
)	O
{	O
for	O
(	O
p	*(char)
=	O
&	O
backup	*(char)
[	O
base_length	long
+	O
2	int
]	O
;	O
ISDIGIT	O
(	O
*	O
p	*(char)
)	O
;	O
++	O
p	*(char)
)	O
version	int
=	O
version	int
*	O
10	int
+	O
*	O
p	*(char)
-	O
'0'	O
;	O
if	O
(	O
p	*(char)
[	O
0	int
]	O
!=	O
'~'	O
||	O
p	*(char)
[	O
1	int
]	O
)	O
version	int
=	O
0	int
;	O
}	O
return	O
version	int
;	O
}	O
static	O
const	O
char	O
*	O
const	O
backup_args	array(*(char))
[	O
]	O
=	O
{	O
"none"	*(char)
,	O
"off"	*(char)
,	O
"simple"	*(char)
,	O
"never"	*(char)
,	O
"existing"	*(char)
,	O
"nil"	*(char)
,	O
"numbered"	*(char)
,	O
"t"	*(char)
,	O
0	int
}	O
;	O
static	O
const	O
enum	O
backup_type	enum(int,int,int,int)
backup_types	array(enum(int,int,int,int))
[	O
]	O
=	O
{	O
none	int
,	O
none	int
,	O
simple	int
,	O
simple	int
,	O
numbered_existing	int
,	O
numbered_existing	int
,	O
numbered	int
,	O
numbered	int
}	O
;	O
enum	O
backup_type	enum(int,int,int,int)
get_version	(*(char),*(char))->(enum(int,int,int,int))
(	O
const	O
char	O
*	O
context	*(char)
,	O
const	O
char	O
*	O
version	int
)	O
{	O
if	O
(	O
version	int
==	O
0	int
||	O
*	O
version	int
==	O
0	int
)	O
return	O
numbered_existing	int
;	O
else	O
return	O
XARGMATCH	O
(	O
context	*(char)
,	O
version	int
,	O
backup_args	array(*(char))
,	O
backup_types	array(enum(int,int,int,int))
)	O
;	O
}	O
enum	O
backup_type	enum(int,int,int,int)
xget_version	(*(char),*(char))->(enum(int,int,int,int))
(	O
const	O
char	O
*	O
context	*(char)
,	O
const	O
char	O
*	O
version	int
)	O
{	O
if	O
(	O
version	int
&&	O
*	O
version	int
)	O
return	O
get_version	(*(char),*(char))->(enum(int,int,int,int))
(	O
context	*(char)
,	O
version	int
)	O
;	O
else	O
return	O
get_version	(*(char),*(char))->(enum(int,int,int,int))
(	O
"$VERSION_CONTROL"	*(char)
,	O
getenv	(*(char))->(*(char))
(	O
"VERSION_CONTROL"	*(char)
)	O
)	O
;	O
}	O
