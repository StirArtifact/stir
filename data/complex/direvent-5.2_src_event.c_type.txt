struct	O
symevt	struct(*(char),struct(int,int),int)
{	O
char	O
*	O
name	*(char)
;	O
event_mask	struct(int,int)
mask	struct(int,int)
;	O
int	O
line	int
;	O
}	O
;	O
struct	O
grecs_symtab	O
*	O
evtab	*(struct)
;	O
unsigned	O
hash_string	(*(char),long)->(int)
(	O
const	O
char	O
*	O
name	*(char)
,	O
unsigned	O
long	O
hashsize	long
)	O
{	O
unsigned	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
*	O
name	*(char)
;	O
name	*(char)
++	O
)	O
{	O
i	int
<<=	O
1	int
;	O
i	int
^=	O
*	O
(	O
unsigned	O
char	O
*	O
)	O
name	*(char)
;	O
}	O
return	O
i	int
%	O
hashsize	long
;	O
}	O
static	O
unsigned	O
symevt_hash	(*(void),long)->(int)
(	O
void	O
*	O
data	*(void)
,	O
unsigned	O
long	O
hashsize	long
)	O
{	O
struct	O
symevt	struct(*(char),struct(int,int),int)
*	O
sym	*(void)
=	O
data	*(void)
;	O
return	O
hash_string	(*(char),long)->(int)
(	O
sym	*(void)
->	O
name	*(char)
,	O
hashsize	long
)	O
;	O
}	O
static	O
int	O
symevt_cmp	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
a	*(void)
,	O
const	O
void	O
*	O
b	*(void)
)	O
{	O
struct	O
symevt	struct(*(char),struct(int,int),int)
const	O
*	O
syma	*(struct(*(char),struct(int,int),int))
=	O
a	*(void)
;	O
struct	O
symevt	struct(*(char),struct(int,int),int)
const	O
*	O
symb	*(struct(*(char),struct(int,int),int))
=	O
b	*(void)
;	O
return	O
strcmp	(*(char),*(char))->(int)
(	O
syma	*(struct(*(char),struct(int,int),int))
->	O
name	*(char)
,	O
symb	*(struct(*(char),struct(int,int),int))
->	O
name	*(char)
)	O
;	O
}	O
static	O
int	O
symevt_copy	(*(void),*(void))->(int)
(	O
void	O
*	O
a	*(void)
,	O
void	O
*	O
b	*(void)
)	O
{	O
struct	O
symevt	struct(*(char),struct(int,int),int)
*	O
syma	*(struct(*(char),struct(int,int),int))
=	O
a	*(void)
;	O
struct	O
symevt	struct(*(char),struct(int,int),int)
*	O
symb	*(struct(*(char),struct(int,int),int))
=	O
b	*(void)
;	O
syma	*(struct(*(char),struct(int,int),int))
->	O
name	*(char)
=	O
estrdup	(*(char))->(*(char))
(	O
symb	*(struct(*(char),struct(int,int),int))
->	O
name	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
symevt_free	(*(void))->(void)
(	O
void	O
*	O
p	*(struct(int,*(char),int,*(int),long,int,*(*(char))))
)	O
{	O
struct	O
symevt	struct(*(char),struct(int,int),int)
*	O
sym	*(void)
=	O
p	*(struct(int,*(char),int,*(int),long,int,*(*(char))))
;	O
free	(*(void))->(void)
(	O
sym	*(void)
->	O
name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
sym	*(void)
)	O
;	O
}	O
int	O
defevt	(*(char),*(struct(int,int)),int)->(int)
(	O
const	O
char	O
*	O
name	*(char)
,	O
event_mask	struct(int,int)
*	O
mask	struct(int,int)
,	O
int	O
line	int
)	O
{	O
struct	O
symevt	struct(*(char),struct(int,int),int)
key	*(void)
,	O
*	O
evp	*(struct(*(char),struct(int,int),int))
;	O
int	O
install	*(int)
=	O
1	int
;	O
if	O
(	O
!	O
evtab	*(struct)
)	O
{	O
evtab	*(struct)
=	O
grecs_symtab_create	(long,*((*(void),long)->(int)),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((long)->(*(void))),*((*(void))->(void)))->(*(struct))
(	O
sizeof	O
(	O
struct	O
symevt	struct(*(char),struct(int,int),int)
)	O
,	O
symevt_hash	(*(void),long)->(int)
,	O
symevt_cmp	(*(void),*(void))->(int)
,	O
symevt_copy	(*(void),*(void))->(int)
,	O
NULL	O
,	O
symevt_free	(*(void))->(void)
)	O
;	O
if	O
(	O
!	O
evtab	*(struct)
)	O
{	O
diag	(int,*(char))->(void)
(	O
LOG_CRIT	int
,	O
"not enough memory"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
key	*(void)
.	O
name	*(char)
=	O
(	O
char	O
*	O
)	O
name	*(char)
;	O
evp	*(struct(*(char),struct(int,int),int))
=	O
grecs_symtab_lookup_or_install	(*(struct),*(void),*(int))->(*(void))
(	O
evtab	*(struct)
,	O
&	O
key	*(void)
,	O
&	O
install	*(int)
)	O
;	O
if	O
(	O
!	O
install	*(int)
)	O
return	O
evp	*(struct(*(char),struct(int,int),int))
->	O
line	int
;	O
evp	*(struct(*(char),struct(int,int),int))
->	O
mask	struct(int,int)
=	O
*	O
mask	struct(int,int)
;	O
evp	*(struct(*(char),struct(int,int),int))
->	O
line	int
=	O
line	int
;	O
return	O
0	int
;	O
}	O
int	O
getevt	(*(char),*(struct(int,int)))->(int)
(	O
const	O
char	O
*	O
name	*(char)
,	O
event_mask	struct(int,int)
*	O
mask	struct(int,int)
)	O
{	O
if	O
(	O
evtab	*(struct)
)	O
{	O
struct	O
symevt	struct(*(char),struct(int,int),int)
key	*(void)
,	O
*	O
evp	*(struct(*(char),struct(int,int),int))
;	O
key	*(void)
.	O
name	*(char)
=	O
(	O
char	O
*	O
)	O
name	*(char)
;	O
evp	*(struct(*(char),struct(int,int),int))
=	O
grecs_symtab_lookup_or_install	(*(struct),*(void),*(int))->(*(void))
(	O
evtab	*(struct)
,	O
&	O
key	*(void)
,	O
NULL	O
)	O
;	O
if	O
(	O
evp	*(struct(*(char),struct(int,int),int))
)	O
{	O
*	O
mask	struct(int,int)
=	O
evp	*(struct(*(char),struct(int,int),int))
->	O
mask	struct(int,int)
;	O
return	O
0	int
;	O
}	O
}	O
if	O
(	O
trans_strtotok	(*(struct(*(char),int)),*(char),*(int))->(int)
(	O
sysev_transtab	array(struct(*(char),int))
,	O
name	*(char)
,	O
&	O
mask	struct(int,int)
->	O
sys_mask	int
)	O
)	O
return	O
-	O
1	int
;	O
mask	struct(int,int)
->	O
gen_mask	int
=	O
0	int
;	O
return	O
0	int
;	O
}	O
int	O
evtnullp	(*(struct(int,int)))->(int)
(	O
event_mask	struct(int,int)
*	O
mask	struct(int,int)
)	O
{	O
return	O
mask	struct(int,int)
->	O
gen_mask	int
==	O
0	int
&&	O
mask	struct(int,int)
->	O
sys_mask	int
==	O
0	int
;	O
}	O
struct	O
transtab	struct(*(char),int)
genev_transtab	array(struct(*(char),int))
[	O
]	O
=	O
{	O
{	O
"create"	*(char)
,	O
GENEV_CREATE	int
}	O
,	O
{	O
"write"	*(char)
,	O
GENEV_WRITE	int
}	O
,	O
{	O
"attrib"	*(char)
,	O
GENEV_ATTRIB	int
}	O
,	O
{	O
"delete"	*(char)
,	O
GENEV_DELETE	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
event_mask	struct(int,int)
*	O
event_mask_init	(*(struct(int,int)),int,*(struct(int,int)))->(*(struct(int,int)))
(	O
event_mask	struct(int,int)
*	O
m	*(struct(int,int))
,	O
int	O
fflags	int
,	O
event_mask	struct(int,int)
const	O
*	O
req	*(struct(int,int))
)	O
{	O
int	O
i	int
;	O
m	*(struct(int,int))
->	O
sys_mask	int
=	O
fflags	int
&	O
req	*(struct(int,int))
->	O
sys_mask	int
;	O
m	*(struct(int,int))
->	O
gen_mask	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
genev_xlat	array(struct(int,int))
[	O
i	int
]	O
.	O
gen_mask	int
;	O
i	int
++	O
)	O
if	O
(	O
genev_xlat	array(struct(int,int))
[	O
i	int
]	O
.	O
sys_mask	int
&	O
m	*(struct(int,int))
->	O
sys_mask	int
)	O
m	*(struct(int,int))
->	O
gen_mask	int
|=	O
genev_xlat	array(struct(int,int))
[	O
i	int
]	O
.	O
gen_mask	int
;	O
if	O
(	O
req	*(struct(int,int))
->	O
gen_mask	int
)	O
m	*(struct(int,int))
->	O
gen_mask	int
&=	O
req	*(struct(int,int))
->	O
gen_mask	int
;	O
return	O
m	*(struct(int,int))
;	O
}	O
void	O
evtsetall	(*(struct(int,int)))->(void)
(	O
event_mask	struct(int,int)
*	O
m	*(struct(int,int))
)	O
{	O
int	O
i	int
;	O
m	*(struct(int,int))
->	O
sys_mask	int
=	O
0	int
;	O
m	*(struct(int,int))
->	O
gen_mask	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
genev_xlat	array(struct(int,int))
[	O
i	int
]	O
.	O
gen_mask	int
;	O
i	int
++	O
)	O
{	O
m	*(struct(int,int))
->	O
gen_mask	int
|=	O
genev_xlat	array(struct(int,int))
[	O
i	int
]	O
.	O
gen_mask	int
;	O
m	*(struct(int,int))
->	O
sys_mask	int
|=	O
genev_xlat	array(struct(int,int))
[	O
i	int
]	O
.	O
sys_mask	int
;	O
}	O
}	O
