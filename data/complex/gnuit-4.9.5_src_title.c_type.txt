char	O
*	O
TitleFields	array(*(char))
[	O
TITLE_FIELDS	int
]	O
=	O
{	O
"TitleForeground"	*(char)
,	O
"TitleBackground"	*(char)
,	O
"TitleBrightness"	*(char)
,	O
"UserName"	*(char)
,	O
"TtyName"	*(char)
,	O
"ClockForeground"	*(char)
,	O
"ClockBackground"	*(char)
,	O
"ClockBrightness"	*(char)
,	O
}	O
;	O
int	O
TitleColors	array(int)
[	O
TITLE_FIELDS	int
]	O
=	O
{	O
CYAN	int
,	O
BLUE	int
,	O
ON	int
,	O
YELLOW	int
,	O
YELLOW	int
}	O
;	O
static	O
char	O
*	O
product_name	*(char)
;	O
static	O
int	O
product_name_length	int
;	O
static	O
int	O
login_name_length	int
;	O
static	O
int	O
tty_device_length	int
;	O
static	O
int	O
info_length	int
;	O
static	O
char	O
login_string	array(char)
[	O
]	O
=	O
"User:"	*(char)
;	O
static	O
char	O
ttydev_string	array(char)
[	O
]	O
=	O
"tty:"	*(char)
;	O
static	O
char	O
mail_have_none	array(char)
[	O
]	O
=	O
""	*(char)
;	O
static	O
char	O
mail_have_mail	array(char)
[	O
]	O
=	O
"(Mail)"	*(char)
;	O
static	O
char	O
mail_have_new	array(char)
[	O
]	O
=	O
"(New Mail)"	*(char)
;	O
static	O
char	O
*	O
mail_string	*(char)
=	O
""	*(char)
;	O
static	O
char	O
*	O
mail_file	*(char)
=	O
NULL	O
;	O
static	O
off64_t	long
mail_size	long
=	O
0	int
;	O
static	O
time_t	long
mail_mtime	long
=	O
0	int
;	O
static	O
window_t	struct(int,int,int,int,int,int)
*	O
title_window	*(struct(int,int,int,int,int,int))
;	O
extern	O
int	O
in_terminal_mode	()->(int)
PROTO	O
(	O
(	O
)	O
)	O
;	O
static	O
int	O
calc_info_length	()->(int)
PROTO	O
(	O
(	O
)	O
)	O
;	O
static	O
int	O
mail_check	()->(int)
PROTO	O
(	O
(	O
)	O
)	O
;	O
static	O
int	O
calc_info_length	()->(int)
(	O
)	O
{	O
info_length	int
=	O
(	O
sizeof	O
(	O
login_string	array(char)
)	O
-	O
1	int
)	O
+	O
1	int
+	O
login_name_length	int
+	O
1	int
+	O
(	O
strlen	(*(char))->(long)
(	O
mail_string	*(char)
)	O
)	O
+	O
1	int
+	O
(	O
sizeof	O
(	O
ttydev_string	array(char)
)	O
-	O
1	int
)	O
+	O
1	int
+	O
tty_device_length	int
+	O
1	int
+	O
6	int
+	O
1	int
;	O
return	O
(	O
info_length	int
)	O
;	O
}	O
void	O
title_init	()->(void)
(	O
)	O
{	O
product_name	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
1	int
+	O
strlen	(*(char))->(long)
(	O
PRODUCT	*(char)
)	O
+	O
1	int
+	O
strlen	(*(char))->(long)
(	O
VERSION	*(char)
)	O
+	O
1	int
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
product_name	*(char)
,	O
" %s %s"	*(char)
,	O
PRODUCT	*(char)
,	O
VERSION	*(char)
)	O
;	O
product_name_length	int
=	O
strlen	(*(char))->(long)
(	O
product_name	*(char)
)	O
;	O
login_name_length	int
=	O
strlen	(*(char))->(long)
(	O
login_name	*(char)
)	O
;	O
tty_device_length	int
=	O
strlen	(*(char))->(long)
(	O
tty_device	*(char)
)	O
;	O
mail_file	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"MAIL"	*(char)
)	O
;	O
if	O
(	O
mail_file	*(char)
)	O
{	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
s	long
;	O
if	O
(	O
xstat	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
mail_file	*(char)
,	O
&	O
s	long
)	O
!=	O
-	O
1	int
)	O
{	O
mail_size	long
=	O
s	long
.	O
st_size	long
;	O
mail_mtime	long
=	O
s	long
.	O
st_mtime	O
;	O
}	O
}	O
mail_check	()->(int)
(	O
)	O
;	O
info_length	int
=	O
calc_info_length	()->(int)
(	O
)	O
;	O
title_window	*(struct(int,int,int,int,int,int))
=	O
window_init	()->(*(struct(int,int,int,int,int,int)))
(	O
)	O
;	O
}	O
void	O
title_end	()->(void)
(	O
)	O
{	O
window_end	(*(struct(int,int,int,int,int,int)))->(void)
(	O
title_window	*(struct(int,int,int,int,int,int))
)	O
;	O
}	O
void	O
title_resize	(long,long)->(void)
(	O
columns	int
,	O
line	long
)	O
size_t	long
columns	int
,	O
line	long
;	O
{	O
window_resize	(*(struct(int,int,int,int,int,int)),int,int,int,int)->(void)
(	O
title_window	*(struct(int,int,int,int,int,int))
,	O
0	int
,	O
line	long
,	O
1	int
,	O
columns	int
)	O
;	O
}	O
void	O
clock_refresh	(int)->(void)
(	O
signum	int
)	O
int	O
signum	int
;	O
{	O
int	O
hour	int
;	O
char	O
buf	array(char)
[	O
16	int
]	O
;	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
*	O
time	struct(long,long)
;	O
int	O
line	long
,	O
column	int
;	O
tty_status_t	char
status	int
;	O
if	O
(	O
in_terminal_mode	()->(int)
(	O
)	O
)	O
return	O
;	O
if	O
(	O
product_name_length	int
+	O
2	int
+	O
info_length	int
>=	O
title_window	*(struct(int,int,int,int,int,int))
->	O
columns	int
)	O
return	O
;	O
if	O
(	O
signum	int
&&	O
mail_check	()->(int)
(	O
)	O
)	O
{	O
title_update	()->(void)
(	O
)	O
;	O
}	O
time	struct(long,long)
=	O
get_local_time	()->(*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))
(	O
)	O
;	O
tty_save	(*(char))->(void)
(	O
&	O
status	int
)	O
;	O
tty_get_cursor	(*(int),*(int))->(void)
(	O
&	O
line	long
,	O
&	O
column	int
)	O
;	O
tty_cursor	(int)->(void)
(	O
OFF	int
)	O
;	O
if	O
(	O
(	O
hour	int
=	O
time	struct(long,long)
->	O
tm_hour	int
%	O
12	int
)	O
==	O
0	int
)	O
hour	int
=	O
12	int
;	O
sprintf	(*(char),*(char))->(int)
(	O
buf	array(char)
,	O
"%2d:%02d%c"	*(char)
,	O
hour	int
,	O
time	struct(long,long)
->	O
tm_min	int
,	O
(	O
time	struct(long,long)
->	O
tm_hour	int
<	O
12	int
)	O
?	O
'a'	O
:	O
'p'	O
)	O
;	O
window_goto	(*(struct(int,int,int,int,int,int)),int,int)->(void)
(	O
title_window	*(struct(int,int,int,int,int,int))
,	O
0	int
,	O
title_window	*(struct(int,int,int,int,int,int))
->	O
columns	int
-	O
7	int
)	O
;	O
tty_colors	(int,int,int)->(void)
(	O
ClockBrightness	O
,	O
ClockForeground	O
,	O
ClockBackground	O
)	O
;	O
window_puts	(*(struct(int,int,int,int,int,int)),*(char),int)->(int)
(	O
title_window	*(struct(int,int,int,int,int,int))
,	O
buf	array(char)
,	O
strlen	(*(char))->(long)
(	O
buf	array(char)
)	O
)	O
;	O
tty_goto	(int,int)->(void)
(	O
line	long
,	O
column	int
)	O
;	O
tty_restore	(*(char))->(void)
(	O
&	O
status	int
)	O
;	O
if	O
(	O
signum	int
)	O
tty_update	()->(void)
(	O
)	O
;	O
}	O
static	O
int	O
mail_check	()->(int)
(	O
)	O
{	O
char	O
*	O
old_mail	*(char)
=	O
mail_string	*(char)
;	O
mail_string	*(char)
=	O
mail_have_none	array(char)
;	O
int	O
total	int
=	O
0	int
;	O
int	O
read	*((*(void),*(char),long)->(long))
=	O
0	int
;	O
int	O
inheaders	int
=	O
0	int
;	O
int	O
gotstatus	int
=	O
0	int
;	O
FILE	struct
*	O
mbox	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
char	O
line	long
[	O
TMPBUFSIZE	int
]	O
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
s	long
;	O
struct	O
utimbuf	struct(long,long)
utbuf	struct(long,long)
;	O
if	O
(	O
!	O
mail_file	*(char)
)	O
return	O
0	int
;	O
if	O
(	O
xstat	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
mail_file	*(char)
,	O
&	O
s	long
)	O
==	O
-	O
1	int
)	O
return	O
0	int
;	O
utbuf	struct(long,long)
.	O
actime	long
=	O
s	long
.	O
st_atime	O
;	O
utbuf	struct(long,long)
.	O
modtime	long
=	O
s	long
.	O
st_mtime	O
;	O
mbox	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
mail_file	*(char)
,	O
"r"	*(char)
)	O
;	O
if	O
(	O
!	O
mbox	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
return	O
0	int
;	O
while	O
(	O
fgets	(*(char),int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(char))
(	O
line	long
,	O
TMPBUFSIZE	int
,	O
mbox	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
line	long
,	O
""	*(char)
)	O
==	O
0	int
)	O
inheaders	int
=	O
0	int
;	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
line	long
,	O
"From "	*(char)
,	O
strlen	(*(char))->(long)
(	O
"From "	*(char)
)	O
)	O
==	O
0	int
)	O
{	O
inheaders	int
=	O
1	int
;	O
gotstatus	int
=	O
0	int
;	O
total	int
++	O
;	O
}	O
else	O
if	O
(	O
inheaders	int
&&	O
!	O
gotstatus	int
&&	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
line	long
,	O
"Status:"	*(char)
,	O
strlen	(*(char))->(long)
(	O
"Status:"	*(char)
)	O
)	O
==	O
0	int
)	O
)	O
{	O
char	O
*	O
status	int
=	O
strchr	(*(char),int)->(*(char))
(	O
line	long
,	O
':'	O
)	O
;	O
status	int
++	O
;	O
while	O
(	O
*	O
status	int
&&	O
isspace	(int)->(int)
(	O
*	O
status	int
)	O
)	O
status	int
++	O
;	O
if	O
(	O
*	O
status	int
)	O
{	O
gotstatus	int
=	O
1	int
;	O
if	O
(	O
strchr	(*(char),int)->(*(char))
(	O
status	int
,	O
'R'	O
)	O
)	O
read	*((*(void),*(char),long)->(long))
++	O
;	O
}	O
}	O
}	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
mbox	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
utime	(*(char),*(struct(long,long)))->(int)
(	O
mail_file	*(char)
,	O
&	O
utbuf	struct(long,long)
)	O
;	O
if	O
(	O
total	int
)	O
{	O
if	O
(	O
total	int
-	O
read	*((*(void),*(char),long)->(long))
)	O
{	O
mail_string	*(char)
=	O
mail_have_new	array(char)
;	O
}	O
else	O
{	O
mail_string	*(char)
=	O
mail_have_mail	array(char)
;	O
}	O
}	O
info_length	int
=	O
calc_info_length	()->(int)
(	O
)	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
mail_string	*(char)
,	O
old_mail	*(char)
)	O
==	O
0	int
)	O
return	O
0	int
;	O
else	O
return	O
1	int
;	O
}	O
void	O
title_update	()->(void)
(	O
)	O
{	O
int	O
length	int
;	O
char	O
*	O
buf	array(char)
;	O
tty_status_t	char
status	int
;	O
tty_save	(*(char))->(void)
(	O
&	O
status	int
)	O
;	O
tty_colors	(int,int,int)->(void)
(	O
TitleBrightness	O
,	O
TitleForeground	O
,	O
TitleBackground	O
)	O
;	O
window_goto	(*(struct(int,int,int,int,int,int)),int,int)->(void)
(	O
title_window	*(struct(int,int,int,int,int,int))
,	O
0	int
,	O
0	int
)	O
;	O
window_puts	(*(struct(int,int,int,int,int,int)),*(char),int)->(int)
(	O
title_window	*(struct(int,int,int,int,int,int))
,	O
product_name	*(char)
,	O
product_name_length	int
)	O
;	O
buf	array(char)
=	O
xmalloc	(long)->(*(void))
(	O
title_window	*(struct(int,int,int,int,int,int))
->	O
columns	int
+	O
1	int
)	O
;	O
mail_check	()->(int)
(	O
)	O
;	O
if	O
(	O
product_name_length	int
+	O
2	int
+	O
info_length	int
<	O
title_window	*(struct(int,int,int,int,int,int))
->	O
columns	int
)	O
{	O
length	int
=	O
title_window	*(struct(int,int,int,int,int,int))
->	O
columns	int
-	O
product_name_length	int
-	O
info_length	int
;	O
assert	O
(	O
length	int
>	O
0	int
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
buf	array(char)
,	O
' '	O
,	O
length	int
)	O
;	O
window_puts	(*(struct(int,int,int,int,int,int)),*(char),int)->(int)
(	O
title_window	*(struct(int,int,int,int,int,int))
,	O
buf	array(char)
,	O
length	int
)	O
;	O
window_goto	(*(struct(int,int,int,int,int,int)),int,int)->(void)
(	O
title_window	*(struct(int,int,int,int,int,int))
,	O
0	int
,	O
product_name_length	int
+	O
length	int
)	O
;	O
window_puts	(*(struct(int,int,int,int,int,int)),*(char),int)->(int)
(	O
title_window	*(struct(int,int,int,int,int,int))
,	O
login_string	array(char)
,	O
sizeof	O
(	O
login_string	array(char)
)	O
-	O
1	int
)	O
;	O
window_putc	(*(struct(int,int,int,int,int,int)),int)->(int)
(	O
title_window	*(struct(int,int,int,int,int,int))
,	O
' '	O
)	O
;	O
tty_foreground	(int)->(void)
(	O
UserName	O
)	O
;	O
window_puts	(*(struct(int,int,int,int,int,int)),*(char),int)->(int)
(	O
title_window	*(struct(int,int,int,int,int,int))
,	O
login_name	*(char)
,	O
login_name_length	int
)	O
;	O
window_putc	(*(struct(int,int,int,int,int,int)),int)->(int)
(	O
title_window	*(struct(int,int,int,int,int,int))
,	O
' '	O
)	O
;	O
window_puts	(*(struct(int,int,int,int,int,int)),*(char),int)->(int)
(	O
title_window	*(struct(int,int,int,int,int,int))
,	O
mail_string	*(char)
,	O
strlen	(*(char))->(long)
(	O
mail_string	*(char)
)	O
)	O
;	O
window_putc	(*(struct(int,int,int,int,int,int)),int)->(int)
(	O
title_window	*(struct(int,int,int,int,int,int))
,	O
' '	O
)	O
;	O
tty_foreground	(int)->(void)
(	O
TitleForeground	O
)	O
;	O
window_puts	(*(struct(int,int,int,int,int,int)),*(char),int)->(int)
(	O
title_window	*(struct(int,int,int,int,int,int))
,	O
ttydev_string	array(char)
,	O
sizeof	O
(	O
ttydev_string	array(char)
)	O
-	O
1	int
)	O
;	O
window_putc	(*(struct(int,int,int,int,int,int)),int)->(int)
(	O
title_window	*(struct(int,int,int,int,int,int))
,	O
' '	O
)	O
;	O
tty_foreground	(int)->(void)
(	O
TtyName	O
)	O
;	O
window_puts	(*(struct(int,int,int,int,int,int)),*(char),int)->(int)
(	O
title_window	*(struct(int,int,int,int,int,int))
,	O
tty_device	*(char)
,	O
tty_device_length	int
)	O
;	O
tty_foreground	(int)->(void)
(	O
TitleForeground	O
)	O
;	O
window_putc	(*(struct(int,int,int,int,int,int)),int)->(int)
(	O
title_window	*(struct(int,int,int,int,int,int))
,	O
' '	O
)	O
;	O
clock_refresh	(int)->(void)
(	O
0	int
)	O
;	O
window_goto	(*(struct(int,int,int,int,int,int)),int,int)->(void)
(	O
title_window	*(struct(int,int,int,int,int,int))
,	O
0	int
,	O
title_window	*(struct(int,int,int,int,int,int))
->	O
columns	int
-	O
1	int
)	O
;	O
window_putc	(*(struct(int,int,int,int,int,int)),int)->(int)
(	O
title_window	*(struct(int,int,int,int,int,int))
,	O
' '	O
)	O
;	O
}	O
else	O
if	O
(	O
product_name_length	int
<	O
title_window	*(struct(int,int,int,int,int,int))
->	O
columns	int
)	O
{	O
length	int
=	O
title_window	*(struct(int,int,int,int,int,int))
->	O
columns	int
-	O
product_name_length	int
;	O
memset	(*(void),int,long)->(*(void))
(	O
buf	array(char)
,	O
' '	O
,	O
length	int
)	O
;	O
window_puts	(*(struct(int,int,int,int,int,int)),*(char),int)->(int)
(	O
title_window	*(struct(int,int,int,int,int,int))
,	O
buf	array(char)
,	O
length	int
)	O
;	O
}	O
xfree	(*(void))->(void)
(	O
buf	array(char)
)	O
;	O
tty_restore	(*(char))->(void)
(	O
&	O
status	int
)	O
;	O
}	O
