int	O
url_iobuf_size	int
=	O
URL_IOBUF_SIZE	int
;	O
int	O
_url_debug	int
=	O
0	int
;	O
static	O
urlinfo	struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)
*	O
uCache	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
=	O
NULL	O
;	O
static	O
int	O
uCount	int
=	O
0	int
;	O
urlinfo	struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)
XurlLink	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)),*(char),*(char),int)->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
(	O
urlinfo	struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
const	O
char	O
*	O
msg	*(char)
,	O
const	O
char	O
*	O
file	*(char)
,	O
unsigned	O
line	int
)	O
{	O
URLSANE	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
)	O
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
nrefs	int
++	O
;	O
DBGREFS	O
(	O
0	int
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"--> url %p ++ %d %s at %s:%u\n"	*(char)
,	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
nrefs	int
,	O
msg	*(char)
,	O
file	*(char)
,	O
line	int
)	O
)	O
;	O
return	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
;	O
}	O
urlinfo	struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)
XurlNew	(*(char),*(char),int)->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
(	O
const	O
char	O
*	O
msg	*(char)
,	O
const	O
char	O
*	O
file	*(char)
,	O
unsigned	O
line	int
)	O
{	O
urlinfo	struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
;	O
if	O
(	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
=	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
)	O
)	O
)	O
==	O
NULL	O
)	O
return	O
NULL	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
0	int
,	O
sizeof	O
(	O
*	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
)	O
)	O
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
proxyp	int
=	O
-	O
1	int
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
port	int
=	O
-	O
1	int
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
urltype	enum(int,int,int,int,int)
=	O
URL_IS_UNKNOWN	int
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
=	O
NULL	O
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
data	*(void)
=	O
NULL	O
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
bufAlloced	int
=	O
0	int
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
buf	*(char)
=	O
NULL	O
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
httpHasRange	int
=	O
1	int
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
httpVersion	int
=	O
0	int
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
nrefs	int
=	O
0	int
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
magic	array(char)
=	O
URLMAGIC	int
;	O
return	O
XurlLink	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)),*(char),*(char),int)->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
msg	*(char)
,	O
file	*(char)
,	O
line	int
)	O
;	O
}	O
urlinfo	struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)
XurlFree	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)),*(char),*(char),int)->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
(	O
urlinfo	struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
const	O
char	O
*	O
msg	*(char)
,	O
const	O
char	O
*	O
file	*(char)
,	O
unsigned	O
line	int
)	O
{	O
URLSANE	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
)	O
;	O
DBGREFS	O
(	O
0	int
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"--> url %p -- %d %s at %s:%u\n"	*(char)
,	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
nrefs	int
,	O
msg	*(char)
,	O
file	*(char)
,	O
line	int
)	O
)	O
;	O
if	O
(	O
--	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
nrefs	int
>	O
0	int
)	O
return	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
;	O
if	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
)	O
{	O
void	O
*	O
fp	*(void)
=	O
fdGetFp	(*(struct))->(*(void))
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
)	O
;	O
if	O
(	O
fp	*(void)
)	O
{	O
fdPush	(*(struct),*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)->(void)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
,	O
fpio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
,	O
fp	*(void)
,	O
-	O
1	int
)	O
;	O
Fclose	(*(struct))->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
)	O
;	O
}	O
else	O
if	O
(	O
fdio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
->	O
_fileno	int
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
)	O
>=	O
0	int
)	O
fdio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
->	O
close	*((*(void))->(int))
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
)	O
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
=	O
fdio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
->	O
_fdderef	*((*(struct),*(char),*(char),int)->(*(struct)))
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
,	O
"persist ctrl (urlFree)"	*(char)
,	O
file	*(char)
,	O
line	int
)	O
;	O
if	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"warning: u %p ctrl %p nrefs != 0 (%s %s)\n"	*(char)
)	O
,	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
ctrl	*(struct)
,	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
host	*(char)
,	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
service	*(char)
)	O
;	O
}	O
if	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
data	*(void)
)	O
{	O
void	O
*	O
fp	*(void)
=	O
fdGetFp	(*(struct))->(*(void))
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
data	*(void)
)	O
;	O
if	O
(	O
fp	*(void)
)	O
{	O
fdPush	(*(struct),*(struct(*((*`,*`,long)->(long)),*((*`,*`,long)->(long)),*((*`,long,int)->(int)),*((*`)->(int)),*((*`,*`,*`,int)->(*`)),*((*`,*`,*`,int)->(*`)),*((*`,*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*((*`,*`)->(*`)),*((*`)->(*`)),*((*`)->(int)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)))),*(void),int)->(void)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
data	*(void)
,	O
fpio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
,	O
fp	*(void)
,	O
-	O
1	int
)	O
;	O
Fclose	(*(struct))->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
data	*(void)
)	O
;	O
}	O
else	O
if	O
(	O
fdio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
->	O
_fileno	int
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
data	*(void)
)	O
>=	O
0	int
)	O
fdio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
->	O
close	*((*(void))->(int))
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
data	*(void)
)	O
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
data	*(void)
=	O
fdio	*(struct(*((*(void),*(char),long)->(long)),*((*(void),*(char),long)->(long)),*((*(void),long,int)->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),int)->(*(struct`))),*((*(struct`),*(char),*(char),int)->(*(struct`))),*((*(char),*(char),int)->(*(struct`))),*((*(void))->(int)),*((*(char),int,int)->(*(struct`))),*((*(char),*(char))->(*(struct`))),*((*(struct`))->(*(void))),*((*(struct`))->(int)),*((*(char),int)->(int)),*((*(char))->(int)),*((*(char))->(int)),*((*(char),*(char))->(int)),*((*(char))->(int))))
->	O
_fdderef	*((*(struct),*(char),*(char),int)->(*(struct)))
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
data	*(void)
,	O
"persist data (urlFree)"	*(char)
,	O
file	*(char)
,	O
line	int
)	O
;	O
if	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
data	*(void)
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"warning: u %p data %p nrefs != 0 (%s %s)\n"	*(char)
)	O
,	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
data	*(void)
,	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
host	*(char)
,	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
service	*(char)
)	O
;	O
}	O
if	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
buf	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
buf	*(char)
)	O
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
buf	*(char)
=	O
NULL	O
;	O
}	O
FREE	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
url	*(char)
)	O
;	O
FREE	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
service	*(char)
)	O
;	O
FREE	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
user	*(char)
)	O
;	O
FREE	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
password	*(char)
)	O
;	O
FREE	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
host	*(char)
)	O
;	O
FREE	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
portstr	*(char)
)	O
;	O
FREE	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
proxyu	*(char)
)	O
;	O
FREE	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
proxyh	*(char)
)	O
;	O
FREE	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
)	O
;	O
return	O
NULL	O
;	O
}	O
void	O
urlFreeCache	()->(void)
(	O
void	O
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
uCount	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
uCache	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
[	O
i	int
]	O
==	O
NULL	O
)	O
continue	O
;	O
uCache	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
[	O
i	int
]	O
=	O
urlFree	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
(	O
uCache	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
[	O
i	int
]	O
,	O
"uCache"	*(char)
)	O
;	O
if	O
(	O
uCache	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
[	O
i	int
]	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"warning: uCache[%d] %p nrefs(%d) != 1 (%s %s)\n"	*(char)
)	O
,	O
i	int
,	O
uCache	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
[	O
i	int
]	O
,	O
uCache	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
[	O
i	int
]	O
->	O
nrefs	int
,	O
uCache	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
[	O
i	int
]	O
->	O
host	*(char)
,	O
uCache	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
[	O
i	int
]	O
->	O
service	*(char)
)	O
;	O
}	O
if	O
(	O
uCache	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
)	O
free	(*(void))->(void)
(	O
uCache	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
)	O
;	O
uCache	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
=	O
NULL	O
;	O
uCount	int
=	O
0	int
;	O
}	O
static	O
int	O
urlStrcmp	(*(char),*(char))->(int)
(	O
const	O
char	O
*	O
str1	*(char)
,	O
const	O
char	O
*	O
str2	*(char)
)	O
{	O
if	O
(	O
str1	*(char)
&&	O
str2	*(char)
)	O
return	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
str1	*(char)
,	O
str2	*(char)
)	O
)	O
;	O
if	O
(	O
str1	*(char)
!=	O
str2	*(char)
)	O
return	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
void	O
urlFind	(*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct`),*(struct`),int,*(char),int,int,int,int))),int)->(void)
(	O
urlinfo	struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)
*	O
uret	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
,	O
int	O
mustAsk	int
)	O
{	O
urlinfo	struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
;	O
int	O
ucx	int
;	O
int	O
i	int
;	O
if	O
(	O
uret	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
==	O
NULL	O
)	O
return	O
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
=	O
*	O
uret	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
;	O
URLSANE	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
)	O
;	O
ucx	int
=	O
-	O
1	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
uCount	int
;	O
i	int
++	O
)	O
{	O
urlinfo	struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)
ou	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int))
;	O
if	O
(	O
(	O
ou	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int))
=	O
uCache	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
[	O
i	int
]	O
)	O
==	O
NULL	O
)	O
{	O
if	O
(	O
ucx	int
<	O
0	int
)	O
ucx	int
=	O
i	int
;	O
continue	O
;	O
}	O
if	O
(	O
urlStrcmp	(*(char),*(char))->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
service	*(char)
,	O
ou	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int))
->	O
service	*(char)
)	O
)	O
continue	O
;	O
if	O
(	O
urlStrcmp	(*(char),*(char))->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
host	*(char)
,	O
ou	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int))
->	O
host	*(char)
)	O
)	O
continue	O
;	O
if	O
(	O
urlStrcmp	(*(char),*(char))->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
user	*(char)
,	O
ou	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int))
->	O
user	*(char)
)	O
)	O
continue	O
;	O
if	O
(	O
urlStrcmp	(*(char),*(char))->(int)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
portstr	*(char)
,	O
ou	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int))
->	O
portstr	*(char)
)	O
)	O
continue	O
;	O
break	O
;	O
}	O
if	O
(	O
i	int
==	O
uCount	int
)	O
{	O
if	O
(	O
ucx	int
<	O
0	int
)	O
{	O
ucx	int
=	O
uCount	int
++	O
;	O
if	O
(	O
uCache	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
)	O
uCache	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
=	O
xrealloc	(*(void),long)->(*(void))
(	O
uCache	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
,	O
sizeof	O
(	O
*	O
uCache	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
)	O
*	O
uCount	int
)	O
;	O
else	O
uCache	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
=	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
uCache	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
)	O
)	O
;	O
}	O
uCache	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
[	O
ucx	int
]	O
=	O
urlLink	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
"uCache (miss)"	*(char)
)	O
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
=	O
urlFree	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
"urlSplit (urlFind miss)"	*(char)
)	O
;	O
}	O
else	O
{	O
ucx	int
=	O
i	int
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
=	O
urlFree	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
"urlSplit (urlFind hit)"	*(char)
)	O
;	O
}	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
=	O
urlLink	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
(	O
uCache	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
[	O
ucx	int
]	O
,	O
"uCache"	*(char)
)	O
;	O
*	O
uret	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
=	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
=	O
urlFree	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
"uCache (urlFind)"	*(char)
)	O
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
proxyp	int
=	O
-	O
1	int
;	O
FREE	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
proxyh	*(char)
)	O
;	O
if	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
urltype	enum(int,int,int,int,int)
==	O
URL_IS_FTP	int
)	O
{	O
if	O
(	O
mustAsk	int
||	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
user	*(char)
!=	O
NULL	O
&&	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
password	*(char)
==	O
NULL	O
)	O
)	O
{	O
char	O
*	O
prompt	*(char)
;	O
prompt	*(char)
=	O
alloca	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
host	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
user	*(char)
)	O
+	O
256	int
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
prompt	*(char)
,	O
_	O
(	O
"Password for %s@%s: "	*(char)
)	O
,	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
user	*(char)
,	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
host	*(char)
)	O
;	O
FREE	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
password	*(char)
)	O
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
password	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
getpass	(*(char))->(*(char))
(	O
prompt	*(char)
)	O
)	O
;	O
}	O
if	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
proxyh	*(char)
==	O
NULL	O
)	O
{	O
const	O
char	O
*	O
proxy	*(char)
=	O
rpmExpand	(*(char))->(*(char))
(	O
"%{_ftpproxy}"	*(char)
,	O
NULL	O
)	O
;	O
if	O
(	O
proxy	*(char)
&&	O
*	O
proxy	*(char)
!=	O
'%'	O
)	O
{	O
const	O
char	O
*	O
uu	*(char)
=	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
user	*(char)
?	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
user	*(char)
:	O
"anonymous"	*(char)
)	O
;	O
char	O
*	O
nu	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
uu	*(char)
)	O
+	O
sizeof	O
(	O
"@"	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
host	*(char)
)	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
nu	*(char)
,	O
uu	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
nu	*(char)
,	O
"@"	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
nu	*(char)
,	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
host	*(char)
)	O
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
proxyu	*(char)
=	O
nu	*(char)
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
proxyh	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
proxy	*(char)
)	O
;	O
}	O
xfree	O
(	O
proxy	*(char)
)	O
;	O
}	O
if	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
proxyp	int
<	O
0	int
)	O
{	O
const	O
char	O
*	O
proxy	*(char)
=	O
rpmExpand	(*(char))->(*(char))
(	O
"%{_ftpport}"	*(char)
,	O
NULL	O
)	O
;	O
if	O
(	O
proxy	*(char)
&&	O
*	O
proxy	*(char)
!=	O
'%'	O
)	O
{	O
char	O
*	O
end	*(char)
;	O
int	O
port	int
=	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
proxy	*(char)
,	O
&	O
end	*(char)
,	O
0	int
)	O
;	O
if	O
(	O
!	O
(	O
end	*(char)
&&	O
*	O
end	*(char)
==	O
'\0'	O
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"error: %sport must be a number\n"	*(char)
)	O
,	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
service	*(char)
)	O
;	O
return	O
;	O
}	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
proxyp	int
=	O
port	int
;	O
}	O
xfree	O
(	O
proxy	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
urltype	enum(int,int,int,int,int)
==	O
URL_IS_HTTP	int
)	O
{	O
if	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
proxyh	*(char)
==	O
NULL	O
)	O
{	O
const	O
char	O
*	O
proxy	*(char)
=	O
rpmExpand	(*(char))->(*(char))
(	O
"%{_httpproxy}"	*(char)
,	O
NULL	O
)	O
;	O
if	O
(	O
proxy	*(char)
&&	O
*	O
proxy	*(char)
!=	O
'%'	O
)	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
proxyh	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
proxy	*(char)
)	O
;	O
xfree	O
(	O
proxy	*(char)
)	O
;	O
}	O
if	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
proxyp	int
<	O
0	int
)	O
{	O
const	O
char	O
*	O
proxy	*(char)
=	O
rpmExpand	(*(char))->(*(char))
(	O
"%{_httpport}"	*(char)
,	O
NULL	O
)	O
;	O
if	O
(	O
proxy	*(char)
&&	O
*	O
proxy	*(char)
!=	O
'%'	O
)	O
{	O
char	O
*	O
end	*(char)
;	O
int	O
port	int
=	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
proxy	*(char)
,	O
&	O
end	*(char)
,	O
0	int
)	O
;	O
if	O
(	O
!	O
(	O
end	*(char)
&&	O
*	O
end	*(char)
==	O
'\0'	O
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"error: %sport must be a number\n"	*(char)
)	O
,	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
service	*(char)
)	O
;	O
return	O
;	O
}	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
proxyp	int
=	O
port	int
;	O
}	O
xfree	O
(	O
proxy	*(char)
)	O
;	O
}	O
}	O
return	O
;	O
}	O
static	O
struct	O
urlstring	struct(*(char),enum(int,int,int,int,int))
{	O
const	O
char	O
*	O
leadin	*(char)
;	O
urltype	enum(int,int,int,int,int)
ret	enum(int,int,int,int,int)
;	O
}	O
urlstrings	array(struct(*(char),enum(int,int,int,int,int)))
[	O
]	O
=	O
{	O
{	O
"file://"	*(char)
,	O
URL_IS_PATH	int
}	O
,	O
{	O
"ftp://"	*(char)
,	O
URL_IS_FTP	int
}	O
,	O
{	O
"http://"	*(char)
,	O
URL_IS_HTTP	int
}	O
,	O
{	O
"-"	*(char)
,	O
URL_IS_DASH	int
}	O
,	O
{	O
NULL	O
,	O
URL_IS_UNKNOWN	int
}	O
}	O
;	O
urltype	enum(int,int,int,int,int)
urlIsURL	(*(char))->(enum(int,int,int,int,int))
(	O
const	O
char	O
*	O
url	*(char)
)	O
{	O
struct	O
urlstring	struct(*(char),enum(int,int,int,int,int))
*	O
us	*(struct(*(char),enum(int,int,int,int,int)))
;	O
if	O
(	O
url	*(char)
&&	O
*	O
url	*(char)
)	O
{	O
for	O
(	O
us	*(struct(*(char),enum(int,int,int,int,int)))
=	O
urlstrings	array(struct(*(char),enum(int,int,int,int,int)))
;	O
us	*(struct(*(char),enum(int,int,int,int,int)))
->	O
leadin	*(char)
!=	O
NULL	O
;	O
us	*(struct(*(char),enum(int,int,int,int,int)))
++	O
)	O
{	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
url	*(char)
,	O
us	*(struct(*(char),enum(int,int,int,int,int)))
->	O
leadin	*(char)
,	O
strlen	(*(char))->(long)
(	O
us	*(struct(*(char),enum(int,int,int,int,int)))
->	O
leadin	*(char)
)	O
)	O
)	O
continue	O
;	O
return	O
us	*(struct(*(char),enum(int,int,int,int,int)))
->	O
ret	enum(int,int,int,int,int)
;	O
}	O
}	O
return	O
URL_IS_UNKNOWN	int
;	O
}	O
int	O
urlPath	(*(char),*(*(char)))->(int)
(	O
const	O
char	O
*	O
url	*(char)
,	O
const	O
char	O
*	O
*	O
pathp	*(*(char))
)	O
{	O
const	O
char	O
*	O
path	*(char)
;	O
int	O
urltype	enum(int,int,int,int,int)
;	O
path	*(char)
=	O
url	*(char)
;	O
urltype	enum(int,int,int,int,int)
=	O
urlIsURL	(*(char))->(enum(int,int,int,int,int))
(	O
url	*(char)
)	O
;	O
switch	O
(	O
urltype	enum(int,int,int,int,int)
)	O
{	O
case	O
URL_IS_FTP	int
:	O
url	*(char)
+=	O
sizeof	O
(	O
"ftp://"	*(char)
)	O
-	O
1	int
;	O
path	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
url	*(char)
,	O
'/'	O
)	O
;	O
if	O
(	O
path	*(char)
==	O
NULL	O
)	O
path	*(char)
=	O
url	*(char)
+	O
strlen	(*(char))->(long)
(	O
url	*(char)
)	O
;	O
break	O
;	O
case	O
URL_IS_HTTP	int
:	O
case	O
URL_IS_PATH	int
:	O
url	*(char)
+=	O
sizeof	O
(	O
"file://"	*(char)
)	O
-	O
1	int
;	O
path	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
url	*(char)
,	O
'/'	O
)	O
;	O
if	O
(	O
path	*(char)
==	O
NULL	O
)	O
path	*(char)
=	O
url	*(char)
+	O
strlen	(*(char))->(long)
(	O
url	*(char)
)	O
;	O
break	O
;	O
case	O
URL_IS_UNKNOWN	int
:	O
if	O
(	O
path	*(char)
==	O
NULL	O
)	O
path	*(char)
=	O
""	*(char)
;	O
break	O
;	O
case	O
URL_IS_DASH	int
:	O
path	*(char)
=	O
""	*(char)
;	O
break	O
;	O
}	O
if	O
(	O
pathp	*(*(char))
)	O
*	O
pathp	*(*(char))
=	O
path	*(char)
;	O
return	O
urltype	enum(int,int,int,int,int)
;	O
}	O
int	O
urlSplit	(*(char),*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct`),*(struct`),int,*(char),int,int,int,int))))->(int)
(	O
const	O
char	O
*	O
url	*(char)
,	O
urlinfo	struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)
*	O
uret	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
)	O
{	O
urlinfo	struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
;	O
char	O
*	O
myurl	*(char)
;	O
char	O
*	O
s	*(char)
,	O
*	O
se	*(char)
,	O
*	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
*	O
fe	*(char)
;	O
if	O
(	O
uret	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
=	O
urlNew	(*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
(	O
"urlSplit"	*(char)
)	O
)	O
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
se	*(char)
=	O
s	*(char)
=	O
myurl	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
url	*(char)
)	O
)	O
==	O
NULL	O
)	O
{	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
=	O
urlFree	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
"urlSplit (error #1)"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
url	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
url	*(char)
)	O
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
urltype	enum(int,int,int,int,int)
=	O
urlIsURL	(*(char))->(enum(int,int,int,int,int))
(	O
url	*(char)
)	O
;	O
while	O
(	O
1	int
)	O
{	O
while	O
(	O
*	O
se	*(char)
&&	O
*	O
se	*(char)
!=	O
'/'	O
)	O
se	*(char)
++	O
;	O
if	O
(	O
*	O
se	*(char)
&&	O
(	O
se	*(char)
!=	O
s	*(char)
)	O
&&	O
se	*(char)
[	O
-	O
1	int
]	O
==	O
':'	O
&&	O
se	*(char)
[	O
0	int
]	O
==	O
'/'	O
&&	O
se	*(char)
[	O
1	int
]	O
==	O
'/'	O
)	O
{	O
se	*(char)
[	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
service	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
s	*(char)
)	O
;	O
se	*(char)
+=	O
2	int
;	O
s	*(char)
=	O
se	*(char)
++	O
;	O
continue	O
;	O
}	O
*	O
se	*(char)
=	O
'\0'	O
;	O
break	O
;	O
}	O
fe	*(char)
=	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
s	*(char)
;	O
while	O
(	O
*	O
fe	*(char)
&&	O
*	O
fe	*(char)
!=	O
'@'	O
)	O
fe	*(char)
++	O
;	O
if	O
(	O
*	O
fe	*(char)
==	O
'@'	O
)	O
{	O
s	*(char)
=	O
fe	*(char)
+	O
1	int
;	O
*	O
fe	*(char)
=	O
'\0'	O
;	O
while	O
(	O
fe	*(char)
>	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
&&	O
*	O
fe	*(char)
!=	O
':'	O
)	O
fe	*(char)
--	O
;	O
if	O
(	O
*	O
fe	*(char)
==	O
':'	O
)	O
{	O
*	O
fe	*(char)
++	O
=	O
'\0'	O
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
password	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
fe	*(char)
)	O
;	O
}	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
user	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
fe	*(char)
=	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
s	*(char)
;	O
while	O
(	O
*	O
fe	*(char)
&&	O
*	O
fe	*(char)
!=	O
':'	O
)	O
fe	*(char)
++	O
;	O
if	O
(	O
*	O
fe	*(char)
==	O
':'	O
)	O
{	O
*	O
fe	*(char)
++	O
=	O
'\0'	O
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
portstr	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
fe	*(char)
)	O
;	O
if	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
portstr	*(char)
!=	O
NULL	O
&&	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
portstr	*(char)
[	O
0	int
]	O
!=	O
'\0'	O
)	O
{	O
char	O
*	O
end	*(char)
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
port	int
=	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
portstr	*(char)
,	O
&	O
end	*(char)
,	O
0	int
)	O
;	O
if	O
(	O
!	O
(	O
end	*(char)
&&	O
*	O
end	*(char)
==	O
'\0'	O
)	O
)	O
{	O
rpmMessage	(int,*(char))->(void)
(	O
RPMMESS_ERROR	int
,	O
_	O
(	O
"url port must be a number\n"	*(char)
)	O
)	O
;	O
if	O
(	O
myurl	*(char)
)	O
free	(*(void))->(void)
(	O
myurl	*(char)
)	O
;	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
=	O
urlFree	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
,	O
"urlSplit (error #3)"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
}	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
host	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
port	int
<	O
0	int
&&	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
service	*(char)
!=	O
NULL	O
)	O
{	O
struct	O
servent	struct(*(char),*(*(char)),int,*(char))
*	O
serv	*(struct(*(char),*(*(char)),int,*(char)))
;	O
serv	*(struct(*(char),*(*(char)),int,*(char)))
=	O
getservbyname	(*(char),*(char))->(*(struct(*(char),*(*(char)),int,*(char))))
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
service	*(char)
,	O
"tcp"	*(char)
)	O
;	O
if	O
(	O
serv	*(struct(*(char),*(*(char)),int,*(char)))
!=	O
NULL	O
)	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
port	int
=	O
ntohs	(short)->(short)
(	O
serv	*(struct(*(char),*(*(char)),int,*(char)))
->	O
s_port	int
)	O
;	O
else	O
if	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
urltype	enum(int,int,int,int,int)
==	O
URL_IS_FTP	int
)	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
port	int
=	O
IPPORT_FTP	int
;	O
else	O
if	O
(	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
urltype	enum(int,int,int,int,int)
==	O
URL_IS_HTTP	int
)	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
->	O
port	int
=	O
IPPORT_HTTP	int
;	O
}	O
if	O
(	O
myurl	*(char)
)	O
free	(*(void))->(void)
(	O
myurl	*(char)
)	O
;	O
if	O
(	O
uret	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
)	O
{	O
*	O
uret	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
=	O
u	union(*(void),*((int,*(void),*(char),int,int)->(*(char))),*((*(struct),*(int),*(*(void)),*(int),*(int))->(int)),*(struct(enum(int,int,int,int),*(char),union(*(void),*((int,*`,*`,int,int)->(*`)),*((*`,*`,*`,*`,*`)->(int)),*(struct`)))))
;	O
urlFind	(*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct`),*(struct`),int,*(char),int,int,int,int))),int)->(void)
(	O
uret	*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,*(struct),*(struct),int,*(char),int,int,int,int)))
,	O
0	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
urlGetFile	(*(char),*(char))->(int)
(	O
const	O
char	O
*	O
url	*(char)
,	O
const	O
char	O
*	O
dest	*(char)
)	O
{	O
int	O
rc	int
;	O
FD_t	*(struct)
sfd	*(struct)
=	O
NULL	O
;	O
FD_t	*(struct)
tfd	*(struct)
=	O
NULL	O
;	O
const	O
char	O
*	O
sfuPath	*(char)
=	O
NULL	O
;	O
int	O
urlType	int
=	O
urlPath	(*(char),*(*(char)))->(int)
(	O
url	*(char)
,	O
&	O
sfuPath	*(char)
)	O
;	O
if	O
(	O
*	O
sfuPath	*(char)
==	O
'\0'	O
)	O
return	O
FTPERR_UNKNOWN	O
;	O
sfd	*(struct)
=	O
Fopen	(*(char),*(char))->(*(struct))
(	O
url	*(char)
,	O
"r.ufdio"	*(char)
)	O
;	O
if	O
(	O
sfd	*(struct)
==	O
NULL	O
||	O
Ferror	(*(struct))->(int)
(	O
sfd	*(struct)
)	O
)	O
{	O
rpmMessage	(int,*(char))->(void)
(	O
RPMMESS_DEBUG	int
,	O
_	O
(	O
"failed to open %s: %s\n"	*(char)
)	O
,	O
url	*(char)
,	O
Fstrerror	(*(struct))->(*(char))
(	O
sfd	*(struct)
)	O
)	O
;	O
rc	int
=	O
FTPERR_UNKNOWN	O
;	O
goto	O
exit	(int)->(void)
;	O
}	O
if	O
(	O
dest	*(char)
==	O
NULL	O
)	O
{	O
if	O
(	O
(	O
dest	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
sfuPath	*(char)
,	O
'/'	O
)	O
)	O
!=	O
NULL	O
)	O
dest	*(char)
++	O
;	O
else	O
dest	*(char)
=	O
sfuPath	*(char)
;	O
}	O
tfd	*(struct)
=	O
Fopen	(*(char),*(char))->(*(struct))
(	O
dest	*(char)
,	O
"w.ufdio"	*(char)
)	O
;	O
if	O
(	O
_url_debug	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"*** urlGetFile sfd %p %s tfd %p %s\n"	*(char)
,	O
sfd	*(struct)
,	O
url	*(char)
,	O
tfd	*(struct)
,	O
dest	*(char)
)	O
;	O
if	O
(	O
tfd	*(struct)
==	O
NULL	O
||	O
Ferror	(*(struct))->(int)
(	O
tfd	*(struct)
)	O
)	O
{	O
rpmMessage	(int,*(char))->(void)
(	O
RPMMESS_DEBUG	int
,	O
_	O
(	O
"failed to create %s: %s\n"	*(char)
)	O
,	O
dest	*(char)
,	O
Fstrerror	(*(struct))->(*(char))
(	O
tfd	*(struct)
)	O
)	O
;	O
rc	int
=	O
FTPERR_UNKNOWN	O
;	O
goto	O
exit	(int)->(void)
;	O
}	O
switch	O
(	O
urlType	int
)	O
{	O
case	O
URL_IS_FTP	int
:	O
case	O
URL_IS_HTTP	int
:	O
case	O
URL_IS_PATH	int
:	O
case	O
URL_IS_DASH	int
:	O
case	O
URL_IS_UNKNOWN	int
:	O
if	O
(	O
(	O
rc	int
=	O
ufdGetFile	(*(struct),*(struct))->(int)
(	O
sfd	*(struct)
,	O
tfd	*(struct)
)	O
)	O
)	O
{	O
Unlink	(*(char))->(int)
(	O
dest	*(char)
)	O
;	O
Fclose	(*(struct))->(int)
(	O
sfd	*(struct)
)	O
;	O
}	O
sfd	*(struct)
=	O
NULL	O
;	O
break	O
;	O
default	O
:	O
rc	int
=	O
FTPERR_UNKNOWN	O
;	O
break	O
;	O
}	O
exit	(int)->(void)
:	O
if	O
(	O
tfd	*(struct)
)	O
Fclose	(*(struct))->(int)
(	O
tfd	*(struct)
)	O
;	O
if	O
(	O
sfd	*(struct)
)	O
Fclose	(*(struct))->(int)
(	O
sfd	*(struct)
)	O
;	O
return	O
rc	int
;	O
}	O
