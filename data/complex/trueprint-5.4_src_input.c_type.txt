long	O
char_number	long
;	O
int	O
got_some_input	int
;	O
static	O
char	O
*	O
unget_charstackptr	*(char)
;	O
static	O
char	O
*	O
unget_statstackptr	*(char)
;	O
static	O
char	O
*	O
unget_charstackbase	*(char)
;	O
static	O
char	O
*	O
unget_statstackbase	*(char)
;	O
static	O
unsigned	O
short	O
unget_stackdepth	short
;	O
static	O
int	O
input_stream	int
;	O
static	O
stream_status	enum(int,int,int,int,int)
buffered_read	(*(char))->(enum(int,int,int,int,int))
(	O
char	O
*	O
input_char	*(char)
)	O
;	O
boolean	enum(int,int,int)
set_input_stream	(int)->(enum(int,int,int))
(	O
int	O
stream	int
)	O
{	O
char	O
test_char	char
;	O
stream_status	enum(int,int,int,int,int)
test_status	enum(int,int,int,int,int)
;	O
unget_charstackptr	*(char)
=	O
unget_charstackbase	*(char)
;	O
unget_statstackptr	*(char)
=	O
unget_statstackbase	*(char)
;	O
unget_stackdepth	short
=	O
0	int
;	O
input_stream	int
=	O
stream	int
;	O
if	O
(	O
(	O
test_status	enum(int,int,int,int,int)
=	O
getnextchar	(*(char))->(enum(int,int,int,int,int))
(	O
&	O
test_char	char
)	O
)	O
==	O
STREAM_EMPTY_FILE	int
)	O
{	O
return	O
FALSE	int
;	O
}	O
else	O
{	O
ungetnextchar	(char,enum(int,int,int,int,int))->(void)
(	O
test_char	char
,	O
test_status	enum(int,int,int,int,int)
)	O
;	O
return	O
TRUE	int
;	O
}	O
}	O
void	O
setup_input	()->(void)
(	O
void	O
)	O
{	O
unget_stackdepth	short
=	O
0	int
;	O
got_some_input	int
=	O
0	int
;	O
unget_charstackbase	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
UNGET_STACKSIZE	int
)	O
;	O
unget_charstackptr	*(char)
=	O
unget_charstackbase	*(char)
;	O
unget_statstackbase	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
UNGET_STACKSIZE	int
)	O
;	O
unget_statstackptr	*(char)
=	O
unget_statstackbase	*(char)
;	O
}	O
void	O
init_input	()->(void)
(	O
void	O
)	O
{	O
char_number	long
=	O
-	O
1	int
;	O
}	O
stream_status	enum(int,int,int,int,int)
buffered_read	(*(char))->(enum(int,int,int,int,int))
(	O
char	O
*	O
input_char	*(char)
)	O
{	O
static	O
char	O
input_buffer	array(char)
[	O
BUFFER_SIZE	int
]	O
;	O
static	O
short	O
buffer_pointer	short
=	O
0	int
;	O
static	O
int	O
buffer_size	int
=	O
0	int
;	O
if	O
(	O
buffer_size	int
==	O
0	int
)	O
{	O
if	O
(	O
(	O
buffer_size	int
=	O
read	(int,*(void),long)->(long)
(	O
input_stream	int
,	O
input_buffer	array(char)
,	O
BUFFER_SIZE	int
)	O
)	O
<	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
gettext	(*(char))->(*(char))
(	O
CMD_NAME	*(char)
": cannot read file %s, %s\n"	*(char)
)	O
,	O
current_filename	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
exit	(int)->(void)
(	O
2	int
)	O
;	O
}	O
if	O
(	O
buffer_size	int
==	O
0	int
)	O
return	O
(	O
STREAM_EMPTY_FILE	int
)	O
;	O
got_some_input	int
=	O
1	int
;	O
buffer_pointer	short
=	O
0	int
;	O
}	O
*	O
input_char	*(char)
=	O
input_buffer	array(char)
[	O
buffer_pointer	short
++	O
]	O
;	O
if	O
(	O
buffer_pointer	short
==	O
buffer_size	int
)	O
{	O
if	O
(	O
(	O
buffer_size	int
=	O
read	(int,*(void),long)->(long)
(	O
input_stream	int
,	O
input_buffer	array(char)
,	O
BUFFER_SIZE	int
)	O
)	O
<	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
gettext	(*(char))->(*(char))
(	O
CMD_NAME	*(char)
": cannot read file %s, %s\n"	*(char)
)	O
,	O
current_filename	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
exit	(int)->(void)
(	O
2	int
)	O
;	O
}	O
if	O
(	O
buffer_size	int
==	O
0	int
)	O
return	O
(	O
STREAM_FILE_END	int
)	O
;	O
buffer_pointer	short
=	O
0	int
;	O
}	O
if	O
(	O
(	O
(	O
*	O
input_char	*(char)
==	O
'\r'	O
)	O
&&	O
(	O
input_buffer	array(char)
[	O
buffer_pointer	short
]	O
==	O
'\n'	O
)	O
)	O
||	O
(	O
(	O
*	O
input_char	*(char)
==	O
'\n'	O
)	O
&&	O
(	O
input_buffer	array(char)
[	O
buffer_pointer	short
]	O
==	O
'\f'	O
)	O
)	O
)	O
return	O
buffered_read	(*(char))->(enum(int,int,int,int,int))
(	O
input_char	*(char)
)	O
;	O
else	O
return	O
(	O
STREAM_OK	int
)	O
;	O
}	O
void	O
ungetnextchar	(char,enum(int,int,int,int,int))->(void)
(	O
char	O
input_char	*(char)
,	O
stream_status	enum(int,int,int,int,int)
status	enum(int,int,int,int,int)
)	O
{	O
dm	(char,int,*(char))->(void)
(	O
'I'	O
,	O
7	int
,	O
"input.c:ungetnextchar(%c,%d)\n"	*(char)
,	O
input_char	*(char)
,	O
status	enum(int,int,int,int,int)
)	O
;	O
dm	(char,int,*(char))->(void)
(	O
'I'	O
,	O
8	int
,	O
"input.c:ungetnextchar char stack = %x, stat stack = %x, size = %d\n"	*(char)
,	O
unget_charstackptr	*(char)
,	O
unget_statstackptr	*(char)
,	O
unget_stackdepth	short
)	O
;	O
if	O
(	O
unget_stackdepth	short
++	O
==	O
UNGET_STACKSIZE	int
)	O
abort	()->(void)
(	O
)	O
;	O
*	O
(	O
unget_charstackptr	*(char)
++	O
)	O
=	O
input_char	*(char)
;	O
*	O
(	O
unget_statstackptr	*(char)
++	O
)	O
=	O
(	O
char	O
)	O
status	enum(int,int,int,int,int)
;	O
char_number	long
--	O
;	O
}	O
stream_status	enum(int,int,int,int,int)
getnextchar	(*(char))->(enum(int,int,int,int,int))
(	O
char	O
*	O
input_char	*(char)
)	O
{	O
char_number	long
+=	O
1	int
;	O
if	O
(	O
unget_stackdepth	short
>	O
0	int
)	O
{	O
dm	(char,int,*(char))->(void)
(	O
'I'	O
,	O
8	int
,	O
"input.c:getnextchar char stack = %x, stat stack = %x, size = %d\n"	*(char)
,	O
unget_charstackptr	*(char)
,	O
unget_statstackptr	*(char)
,	O
unget_stackdepth	short
)	O
;	O
unget_stackdepth	short
--	O
;	O
*	O
input_char	*(char)
=	O
*	O
(	O
--	O
unget_charstackptr	*(char)
)	O
;	O
dm	(char,int,*(char))->(void)
(	O
'I'	O
,	O
7	int
,	O
"input.c:getnextchar returning %c, %d from stack\n"	*(char)
,	O
*	O
input_char	*(char)
,	O
*	O
(	O
unget_statstackptr	*(char)
-	O
1	int
)	O
)	O
;	O
return	O
*	O
(	O
--	O
unget_statstackptr	*(char)
)	O
;	O
}	O
return	O
buffered_read	(*(char))->(enum(int,int,int,int,int))
(	O
input_char	*(char)
)	O
;	O
}	O
