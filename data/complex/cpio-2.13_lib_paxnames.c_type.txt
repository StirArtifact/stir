static	O
size_t	long
hash_string_hasher	(*(void),long)->(long)
(	O
void	O
const	O
*	O
name	*(char)
,	O
size_t	long
n_buckets	long
)	O
{	O
return	O
hash_string	(*(char),long)->(long)
(	O
name	*(char)
,	O
n_buckets	long
)	O
;	O
}	O
static	O
bool	bool
hash_string_compare	(*(void),*(void))->(bool)
(	O
void	O
const	O
*	O
name1	*(void)
,	O
void	O
const	O
*	O
name2	*(void)
)	O
{	O
return	O
strcmp	(*(char),*(char))->(int)
(	O
name1	*(void)
,	O
name2	*(void)
)	O
==	O
0	int
;	O
}	O
static	O
bool	bool
hash_string_insert_prefix	(*(*(struct)),*(char),long,*(*(char)))->(bool)
(	O
Hash_table	struct
*	O
*	O
table	*(struct)
,	O
char	O
const	O
*	O
string	*(char)
,	O
size_t	long
len	long
,	O
const	O
char	O
*	O
*	O
return_prefix	*(*(char))
)	O
{	O
Hash_table	struct
*	O
t	*(struct)
=	O
*	O
table	*(struct)
;	O
char	O
*	O
s	long
;	O
char	O
*	O
e	*(char)
;	O
if	O
(	O
len	long
)	O
{	O
s	long
=	O
xmalloc	(long)->(*(void))
(	O
len	long
+	O
1	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
s	long
,	O
string	*(char)
,	O
len	long
)	O
;	O
s	long
[	O
len	long
]	O
=	O
0	int
;	O
}	O
else	O
s	long
=	O
xstrdup	(*(char))->(*(char))
(	O
string	*(char)
)	O
;	O
if	O
(	O
!	O
(	O
(	O
t	*(struct)
||	O
(	O
*	O
table	*(struct)
=	O
t	*(struct)
=	O
hash_initialize	(long,*(struct(float,float,float,float,bool)),*((*(void),long)->(long)),*((*(void),*(void))->(bool)),*((*(void))->(void)))->(*(struct))
(	O
0	int
,	O
0	int
,	O
hash_string_hasher	(*(void),long)->(long)
,	O
hash_string_compare	(*(void),*(void))->(bool)
,	O
0	int
)	O
)	O
)	O
&&	O
(	O
e	*(char)
=	O
hash_insert	(*(struct),*(void))->(*(void))
(	O
t	*(struct)
,	O
s	long
)	O
)	O
)	O
)	O
xalloc_die	()->(void)
(	O
)	O
;	O
if	O
(	O
e	*(char)
==	O
s	long
)	O
{	O
if	O
(	O
return_prefix	*(*(char))
)	O
*	O
return_prefix	*(*(char))
=	O
s	long
;	O
return	O
1	int
;	O
}	O
else	O
{	O
free	(*(void))->(void)
(	O
s	long
)	O
;	O
return	O
0	int
;	O
}	O
}	O
static	O
Hash_table	struct
*	O
prefix_table	array(*(struct))
[	O
2	int
]	O
;	O
bool	bool
removed_prefixes_p	()->(bool)
(	O
void	O
)	O
{	O
return	O
(	O
prefix_table	array(*(struct))
[	O
0	int
]	O
&&	O
hash_get_n_entries	(*(struct))->(long)
(	O
prefix_table	array(*(struct))
[	O
0	int
]	O
)	O
!=	O
0	int
)	O
||	O
(	O
prefix_table	array(*(struct))
[	O
1	int
]	O
&&	O
hash_get_n_entries	(*(struct))->(long)
(	O
prefix_table	array(*(struct))
[	O
1	int
]	O
)	O
!=	O
0	int
)	O
;	O
}	O
char	O
*	O
safer_name_suffix	(*(char),bool,bool)->(*(char))
(	O
char	O
const	O
*	O
file_name	*(char)
,	O
bool	bool
link_target	bool
,	O
bool	bool
absolute_names	bool
)	O
{	O
char	O
const	O
*	O
p	*(void)
;	O
if	O
(	O
absolute_names	bool
)	O
p	*(void)
=	O
file_name	*(char)
;	O
else	O
{	O
size_t	long
prefix_len	long
=	O
FILE_SYSTEM_PREFIX_LEN	int
(	O
file_name	*(char)
)	O
;	O
for	O
(	O
p	*(void)
=	O
file_name	*(char)
+	O
prefix_len	long
;	O
*	O
p	*(void)
;	O
)	O
{	O
if	O
(	O
p	*(void)
[	O
0	int
]	O
==	O
'.'	O
&&	O
p	*(void)
[	O
1	int
]	O
==	O
'.'	O
&&	O
(	O
ISSLASH	O
(	O
p	*(void)
[	O
2	int
]	O
)	O
||	O
!	O
p	*(void)
[	O
2	int
]	O
)	O
)	O
prefix_len	long
=	O
p	*(void)
+	O
2	int
-	O
file_name	*(char)
;	O
do	O
{	O
char	O
c	char
=	O
*	O
p	*(void)
++	O
;	O
if	O
(	O
ISSLASH	O
(	O
c	char
)	O
)	O
break	O
;	O
}	O
while	O
(	O
*	O
p	*(void)
)	O
;	O
}	O
for	O
(	O
p	*(void)
=	O
file_name	*(char)
+	O
prefix_len	long
;	O
ISSLASH	O
(	O
*	O
p	*(void)
)	O
;	O
p	*(void)
++	O
)	O
continue	O
;	O
prefix_len	long
=	O
p	*(void)
-	O
file_name	*(char)
;	O
if	O
(	O
prefix_len	long
)	O
{	O
const	O
char	O
*	O
prefix	*(char)
;	O
if	O
(	O
hash_string_insert_prefix	(*(*(struct)),*(char),long,*(*(char)))->(bool)
(	O
&	O
prefix_table	array(*(struct))
[	O
link_target	bool
]	O
,	O
file_name	*(char)
,	O
prefix_len	long
,	O
&	O
prefix	*(char)
)	O
)	O
{	O
static	O
char	O
const	O
*	O
const	O
diagnostic	array(*(char))
[	O
]	O
=	O
{	O
N_	O
(	O
"Removing leading `%s' from member names"	*(char)
)	O
,	O
N_	O
(	O
"Removing leading `%s' from hard link targets"	*(char)
)	O
}	O
;	O
WARN	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
diagnostic	array(*(char))
[	O
link_target	bool
]	O
)	O
,	O
prefix	*(char)
)	O
)	O
;	O
}	O
}	O
}	O
if	O
(	O
!	O
*	O
p	*(void)
)	O
{	O
if	O
(	O
p	*(void)
==	O
file_name	*(char)
)	O
{	O
static	O
char	O
const	O
*	O
const	O
diagnostic	array(*(char))
[	O
]	O
=	O
{	O
N_	O
(	O
"Substituting `.' for empty member name"	*(char)
)	O
,	O
N_	O
(	O
"Substituting `.' for empty hard link target"	*(char)
)	O
}	O
;	O
WARN	O
(	O
(	O
0	int
,	O
0	int
,	O
"%s"	*(char)
,	O
_	O
(	O
diagnostic	array(*(char))
[	O
link_target	bool
]	O
)	O
)	O
)	O
;	O
}	O
p	*(void)
=	O
"."	*(char)
;	O
}	O
return	O
(	O
char	O
*	O
)	O
p	*(void)
;	O
}	O
