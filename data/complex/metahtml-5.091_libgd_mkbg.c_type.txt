static	O
void	O
parse_rgb	(*(char),*(int),*(int),*(int))->(void)
(	O
char	O
*	O
string	*(char)
,	O
int	O
*	O
rp	*(int)
,	O
int	O
*	O
gp	*(int)
,	O
int	O
*	O
bp	*(int)
)	O
;	O
static	O
void	O
usage	()->(void)
(	O
void	O
)	O
;	O
static	O
void	O
cleanup	(*(char))->(void)
(	O
char	O
*	O
string	*(char)
)	O
;	O
static	O
int	O
parse_hex_pair	(*(char))->(int)
(	O
char	O
*	O
pair_start	*(char)
)	O
;	O
static	O
char	O
*	O
*	O
args_passed	*(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
NULL	O
;	O
static	O
int	O
args_passed_len	int
=	O
0	int
;	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array(*(char))
[	O
]	O
)	O
{	O
gdImagePtr	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
;	O
int	O
total_width	int
=	O
1000	int
;	O
char	O
*	O
left_rgb	*(char)
=	O
"000000"	*(char)
,	O
*	O
right_rgb	*(char)
=	O
"FFFFFF"	*(char)
;	O
char	O
*	O
separator_rgb	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
,	O
*	O
page_rgb	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
int	O
left_width	int
=	O
80	int
,	O
page_width	int
=	O
0	int
,	O
right_width	int
=	O
1200	int
;	O
char	O
*	O
webargs	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"QUERY_STRING"	*(char)
)	O
;	O
int	O
height	int
=	O
4	int
;	O
int	O
right_trans	int
=	O
0	int
;	O
int	O
left_trans	int
=	O
0	int
;	O
char	O
*	O
temp	*(char)
;	O
int	O
r	int
,	O
g	int
,	O
b	int
,	O
bg	int
,	O
fg	int
;	O
args_passed	*(*(char))
=	O
argv	array(*(char))
;	O
args_passed_len	int
=	O
argc	int
;	O
if	O
(	O
webargs	*(char)
)	O
{	O
register	O
int	O
i	int
;	O
webargs	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
webargs	*(char)
)	O
;	O
cleanup	(*(char))->(void)
(	O
webargs	*(char)
)	O
;	O
temp	*(char)
=	O
strstr	(*(char),*(char))->(*(char))
(	O
webargs	*(char)
,	O
"TOTAL-WIDTH="	*(char)
)	O
;	O
if	O
(	O
temp	*(char)
)	O
total_width	int
=	O
atoi	(*(char))->(int)
(	O
temp	*(char)
+	O
12	int
)	O
;	O
temp	*(char)
=	O
strstr	(*(char),*(char))->(*(char))
(	O
webargs	*(char)
,	O
"LEFT-WIDTH="	*(char)
)	O
;	O
if	O
(	O
temp	*(char)
)	O
left_width	int
=	O
atoi	(*(char))->(int)
(	O
temp	*(char)
+	O
11	int
)	O
;	O
temp	*(char)
=	O
strstr	(*(char),*(char))->(*(char))
(	O
webargs	*(char)
,	O
"RIGHT-WIDTH="	*(char)
)	O
;	O
if	O
(	O
temp	*(char)
)	O
right_width	int
=	O
atoi	(*(char))->(int)
(	O
temp	*(char)
+	O
12	int
)	O
;	O
temp	*(char)
=	O
strstr	(*(char),*(char))->(*(char))
(	O
webargs	*(char)
,	O
"LEFT-RGB="	*(char)
)	O
;	O
if	O
(	O
temp	*(char)
)	O
{	O
if	O
(	O
temp	*(char)
[	O
9	int
]	O
==	O
'#'	O
)	O
temp	*(char)
++	O
;	O
temp	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
temp	*(char)
+	O
9	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
temp	*(char)
[	O
i	int
]	O
!=	O
'\0'	O
&&	O
temp	*(char)
[	O
i	int
]	O
!=	O
'\0'	O
;	O
i	int
++	O
)	O
;	O
temp	*(char)
[	O
i	int
]	O
=	O
'\0'	O
;	O
left_rgb	*(char)
=	O
temp	*(char)
;	O
}	O
temp	*(char)
=	O
strstr	(*(char),*(char))->(*(char))
(	O
webargs	*(char)
,	O
"RIGHT-RGB="	*(char)
)	O
;	O
if	O
(	O
temp	*(char)
)	O
{	O
if	O
(	O
temp	*(char)
[	O
10	int
]	O
==	O
'#'	O
)	O
temp	*(char)
++	O
;	O
temp	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
temp	*(char)
+	O
10	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
temp	*(char)
[	O
i	int
]	O
!=	O
'\0'	O
&&	O
temp	*(char)
[	O
i	int
]	O
!=	O
'\0'	O
;	O
i	int
++	O
)	O
;	O
temp	*(char)
[	O
i	int
]	O
=	O
'\0'	O
;	O
right_rgb	*(char)
=	O
temp	*(char)
;	O
}	O
temp	*(char)
=	O
strstr	(*(char),*(char))->(*(char))
(	O
webargs	*(char)
,	O
"LEFT-TRANS="	*(char)
)	O
;	O
if	O
(	O
temp	*(char)
)	O
left_trans	int
=	O
1	int
;	O
temp	*(char)
=	O
strstr	(*(char),*(char))->(*(char))
(	O
webargs	*(char)
,	O
"RIGHT-TRANS="	*(char)
)	O
;	O
if	O
(	O
temp	*(char)
)	O
right_trans	int
=	O
1	int
;	O
temp	*(char)
=	O
strstr	(*(char),*(char))->(*(char))
(	O
webargs	*(char)
,	O
"SEPARATOR-RGB="	*(char)
)	O
;	O
if	O
(	O
temp	*(char)
)	O
{	O
if	O
(	O
temp	*(char)
[	O
10	int
]	O
==	O
'#'	O
)	O
temp	*(char)
++	O
;	O
temp	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
temp	*(char)
+	O
10	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
temp	*(char)
[	O
i	int
]	O
!=	O
'\0'	O
&&	O
temp	*(char)
[	O
i	int
]	O
!=	O
'\0'	O
;	O
i	int
++	O
)	O
;	O
temp	*(char)
[	O
i	int
]	O
=	O
'\0'	O
;	O
separator_rgb	*(char)
=	O
temp	*(char)
;	O
}	O
}	O
else	O
{	O
int	O
arg_index	int
=	O
1	int
;	O
while	O
(	O
arg_index	int
<	O
argc	int
)	O
{	O
char	O
*	O
arg	*(char)
=	O
argv	array(*(char))
[	O
arg_index	int
++	O
]	O
;	O
if	O
(	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"-lw"	*(char)
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"--left-width"	*(char)
)	O
==	O
0	int
)	O
)	O
left_width	int
=	O
atoi	(*(char))->(int)
(	O
argv	array(*(char))
[	O
arg_index	int
++	O
]	O
)	O
;	O
else	O
if	O
(	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"-rw"	*(char)
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"--right-width"	*(char)
)	O
==	O
0	int
)	O
)	O
right_width	int
=	O
atoi	(*(char))->(int)
(	O
argv	array(*(char))
[	O
arg_index	int
++	O
]	O
)	O
;	O
else	O
if	O
(	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"-pw"	*(char)
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"--page-width"	*(char)
)	O
==	O
0	int
)	O
)	O
page_width	int
=	O
atoi	(*(char))->(int)
(	O
argv	array(*(char))
[	O
arg_index	int
++	O
]	O
)	O
;	O
else	O
if	O
(	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"-lt"	*(char)
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"--left-trans"	*(char)
)	O
==	O
0	int
)	O
)	O
left_trans	int
=	O
1	int
;	O
else	O
if	O
(	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"-rt"	*(char)
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"--right-trans"	*(char)
)	O
==	O
0	int
)	O
)	O
right_trans	int
=	O
1	int
;	O
else	O
if	O
(	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"-rrgb"	*(char)
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"--right-rgb"	*(char)
)	O
==	O
0	int
)	O
)	O
{	O
temp	*(char)
=	O
argv	array(*(char))
[	O
arg_index	int
++	O
]	O
;	O
if	O
(	O
*	O
temp	*(char)
==	O
'#'	O
)	O
temp	*(char)
++	O
;	O
right_rgb	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
temp	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"-lrgb"	*(char)
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"--left-rgb"	*(char)
)	O
==	O
0	int
)	O
)	O
{	O
temp	*(char)
=	O
argv	array(*(char))
[	O
arg_index	int
++	O
]	O
;	O
if	O
(	O
*	O
temp	*(char)
==	O
'#'	O
)	O
temp	*(char)
++	O
;	O
left_rgb	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
temp	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"-prgb"	*(char)
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"--page-rgb"	*(char)
)	O
==	O
0	int
)	O
)	O
{	O
temp	*(char)
=	O
argv	array(*(char))
[	O
arg_index	int
++	O
]	O
;	O
if	O
(	O
*	O
temp	*(char)
==	O
'#'	O
)	O
temp	*(char)
++	O
;	O
page_rgb	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
temp	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"-srgb"	*(char)
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"--separator-rgb"	*(char)
)	O
==	O
0	int
)	O
)	O
{	O
temp	*(char)
=	O
argv	array(*(char))
[	O
arg_index	int
++	O
]	O
;	O
if	O
(	O
*	O
temp	*(char)
==	O
'#'	O
)	O
temp	*(char)
++	O
;	O
separator_rgb	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
temp	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"-h"	*(char)
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"--height"	*(char)
)	O
==	O
0	int
)	O
)	O
height	int
=	O
atoi	(*(char))->(int)
(	O
argv	array(*(char))
[	O
arg_index	int
++	O
]	O
)	O
;	O
else	O
usage	()->(void)
(	O
)	O
;	O
}	O
}	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
=	O
gdImageCreate	(int,int)->(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)))
(	O
left_width	int
+	O
page_width	int
+	O
right_width	int
,	O
height	int
)	O
;	O
parse_rgb	(*(char),*(int),*(int),*(int))->(void)
(	O
left_rgb	*(char)
,	O
&	O
r	int
,	O
&	O
g	int
,	O
&	O
b	int
)	O
;	O
bg	int
=	O
gdImageColorAllocate	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int,int)->(int)
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
r	int
,	O
g	int
,	O
b	int
)	O
;	O
parse_rgb	(*(char),*(int),*(int),*(int))->(void)
(	O
right_rgb	*(char)
,	O
&	O
r	int
,	O
&	O
g	int
,	O
&	O
b	int
)	O
;	O
fg	int
=	O
gdImageColorAllocate	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int,int)->(int)
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
r	int
,	O
g	int
,	O
b	int
)	O
;	O
gdImageFilledRectangle	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int,int,int,int)->(void)
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
0	int
,	O
0	int
,	O
left_width	int
,	O
height	int
,	O
bg	int
)	O
;	O
gdImageFilledRectangle	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int,int,int,int)->(void)
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
left_width	int
,	O
0	int
,	O
left_width	int
+	O
page_width	int
+	O
right_width	int
,	O
height	int
,	O
fg	int
)	O
;	O
if	O
(	O
separator_rgb	*(char)
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
int	O
separator	int
;	O
parse_rgb	(*(char),*(int),*(int),*(int))->(void)
(	O
separator_rgb	*(char)
,	O
&	O
r	int
,	O
&	O
g	int
,	O
&	O
b	int
)	O
;	O
separator	int
=	O
gdImageColorAllocate	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int,int)->(int)
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
r	int
,	O
g	int
,	O
b	int
)	O
;	O
gdImageFilledRectangle	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int,int,int,int)->(void)
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
left_width	int
-	O
4	int
,	O
0	int
,	O
left_width	int
,	O
height	int
,	O
separator	int
)	O
;	O
}	O
if	O
(	O
page_width	int
!=	O
0	int
)	O
{	O
if	O
(	O
page_rgb	*(char)
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
int	O
pagecol	int
;	O
parse_rgb	(*(char),*(int),*(int),*(int))->(void)
(	O
page_rgb	*(char)
,	O
&	O
r	int
,	O
&	O
g	int
,	O
&	O
b	int
)	O
;	O
pagecol	int
=	O
gdImageColorAllocate	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int,int)->(int)
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
r	int
,	O
g	int
,	O
b	int
)	O
;	O
gdImageFilledRectangle	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int,int,int,int)->(void)
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
left_width	int
,	O
0	int
,	O
(	O
left_width	int
+	O
page_width	int
-	O
4	int
)	O
,	O
height	int
,	O
pagecol	int
)	O
;	O
}	O
if	O
(	O
separator_rgb	*(char)
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
int	O
separator	int
;	O
parse_rgb	(*(char),*(int),*(int),*(int))->(void)
(	O
separator_rgb	*(char)
,	O
&	O
r	int
,	O
&	O
g	int
,	O
&	O
b	int
)	O
;	O
separator	int
=	O
gdImageColorAllocate	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int,int)->(int)
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
r	int
,	O
g	int
,	O
b	int
)	O
;	O
gdImageFilledRectangle	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int,int,int,int,int)->(void)
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
left_width	int
+	O
page_width	int
-	O
4	int
,	O
0	int
,	O
left_width	int
+	O
page_width	int
,	O
height	int
,	O
separator	int
)	O
;	O
}	O
}	O
if	O
(	O
left_trans	int
)	O
gdImageColorTransparent	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int)->(void)
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
bg	int
)	O
;	O
else	O
if	O
(	O
right_trans	int
)	O
gdImageColorTransparent	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),int)->(void)
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
fg	int
)	O
;	O
if	O
(	O
webargs	*(char)
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Content-Type: image/gif\n\n"	*(char)
)	O
;	O
gdImageGif	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
gdImageDestroy	(*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),*(struct(*`,int,int,int,array(int),array(int),array(int),array(int),int,*`,int,*`,*`,array(int),array(int),int,int,*`,int)),array(int),array(int),int,int,*(int),int)))->(void)
(	O
image	*(struct(*(*(char)),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),*(struct(*(*`),int,int,int,array(int),array(int),array(int),array(int),int,*(int),int,*(struct`),*(struct`),array(int),array(int),int,int,*(int),int)),array(int),array(int),int,int,*(int),int))
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
void	O
usage	()->(void)
(	O
void	O
)	O
{	O
register	O
int	O
i	int
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Usage: mkbg --left-width 80 --right-width 920 --left-rgb '#000000' --right-rgb '#FFFFFF'\n"	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Args you passed: "	*(char)
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
args_passed_len	int
;	O
i	int
++	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s "	*(char)
,	O
args_passed	*(*(char))
[	O
i	int
]	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
static	O
int	O
hex_value	(int)->(int)
(	O
int	O
c	int
)	O
{	O
if	O
(	O
islower	(int)->(int)
(	O
c	int
)	O
)	O
c	int
=	O
toupper	(int)->(int)
(	O
c	int
)	O
;	O
c	int
=	O
c	int
-	O
'0'	O
;	O
if	O
(	O
c	int
>	O
9	int
)	O
c	int
=	O
10	int
+	O
(	O
(	O
c	int
+	O
'0'	O
)	O
-	O
'A'	O
)	O
;	O
return	O
(	O
c	int
)	O
;	O
}	O
static	O
void	O
parse_rgb	(*(char),*(int),*(int),*(int))->(void)
(	O
char	O
*	O
string	*(char)
,	O
int	O
*	O
rp	*(int)
,	O
int	O
*	O
gp	*(int)
,	O
int	O
*	O
bp	*(int)
)	O
{	O
register	O
int	O
i	int
;	O
*	O
rp	*(int)
=	O
*	O
gp	*(int)
=	O
*	O
bp	*(int)
=	O
0	int
;	O
if	O
(	O
strchr	(*(char),int)->(*(char))
(	O
string	*(char)
,	O
','	O
)	O
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
sscanf	(*(char),*(char))->(int)
(	O
string	*(char)
,	O
"%d,%d,%d"	*(char)
,	O
rp	*(int)
,	O
gp	*(int)
,	O
bp	*(int)
)	O
;	O
}	O
else	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
6	int
&&	O
string	*(char)
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
switch	O
(	O
i	int
)	O
{	O
case	O
0	int
:	O
*	O
rp	*(int)
=	O
16	int
*	O
hex_value	(int)->(int)
(	O
string	*(char)
[	O
i	int
]	O
)	O
;	O
break	O
;	O
case	O
1	int
:	O
*	O
rp	*(int)
|=	O
hex_value	(int)->(int)
(	O
string	*(char)
[	O
i	int
]	O
)	O
;	O
break	O
;	O
case	O
2	int
:	O
*	O
gp	*(int)
=	O
16	int
*	O
hex_value	(int)->(int)
(	O
string	*(char)
[	O
i	int
]	O
)	O
;	O
break	O
;	O
case	O
3	int
:	O
*	O
gp	*(int)
|=	O
hex_value	(int)->(int)
(	O
string	*(char)
[	O
i	int
]	O
)	O
;	O
break	O
;	O
case	O
4	int
:	O
*	O
bp	*(int)
=	O
16	int
*	O
hex_value	(int)->(int)
(	O
string	*(char)
[	O
i	int
]	O
)	O
;	O
break	O
;	O
case	O
5	int
:	O
*	O
bp	*(int)
|=	O
hex_value	(int)->(int)
(	O
string	*(char)
[	O
i	int
]	O
)	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
}	O
}	O
static	O
void	O
cleanup	(*(char))->(void)
(	O
char	O
*	O
string	*(char)
)	O
{	O
register	O
int	O
i	int
,	O
j	int
,	O
len	int
;	O
char	O
*	O
dest	*(char)
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
string	*(char)
)	O
;	O
dest	*(char)
=	O
(	O
char	O
*	O
)	O
alloca	(long)->(*(void))
(	O
1	int
+	O
len	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
,	O
j	int
=	O
0	int
;	O
i	int
<	O
len	int
;	O
i	int
++	O
)	O
{	O
switch	O
(	O
string	*(char)
[	O
i	int
]	O
)	O
{	O
case	O
'%'	O
:	O
dest	*(char)
[	O
j	int
++	O
]	O
=	O
parse_hex_pair	(*(char))->(int)
(	O
string	*(char)
+	O
i	int
+	O
1	int
)	O
;	O
i	int
+=	O
2	int
;	O
break	O
;	O
case	O
'+'	O
:	O
dest	*(char)
[	O
j	int
++	O
]	O
=	O
' '	O
;	O
break	O
;	O
default	O
:	O
dest	*(char)
[	O
j	int
++	O
]	O
=	O
string	*(char)
[	O
i	int
]	O
;	O
}	O
}	O
dest	*(char)
[	O
j	int
]	O
=	O
'\0'	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
string	*(char)
,	O
dest	*(char)
)	O
;	O
}	O
static	O
int	O
parse_hex_pair	(*(char))->(int)
(	O
char	O
*	O
pair_start	*(char)
)	O
{	O
int	O
value	int
=	O
0	int
;	O
int	O
char1	int
,	O
char2	int
;	O
char1	int
=	O
char2	int
=	O
0	int
;	O
char1	int
=	O
*	O
pair_start	*(char)
;	O
if	O
(	O
char1	int
)	O
char2	int
=	O
(	O
pair_start	*(char)
[	O
1	int
]	O
)	O
;	O
if	O
(	O
isupper	(int)->(int)
(	O
char1	int
)	O
)	O
char1	int
=	O
tolower	(int)->(int)
(	O
char1	int
)	O
;	O
if	O
(	O
isupper	(int)->(int)
(	O
char2	int
)	O
)	O
char2	int
=	O
tolower	(int)->(int)
(	O
char2	int
)	O
;	O
if	O
(	O
isdigit	(int)->(int)
(	O
char1	int
)	O
)	O
value	int
=	O
char1	int
-	O
'0'	O
;	O
else	O
if	O
(	O
(	O
char1	int
<=	O
'f'	O
)	O
&&	O
(	O
char1	int
>=	O
'a'	O
)	O
)	O
value	int
=	O
10	int
+	O
(	O
char1	int
-	O
'a'	O
)	O
;	O
if	O
(	O
isdigit	(int)->(int)
(	O
char2	int
)	O
)	O
value	int
=	O
(	O
value	int
*	O
16	int
)	O
+	O
(	O
char2	int
-	O
'0'	O
)	O
;	O
else	O
if	O
(	O
(	O
char2	int
<=	O
'f'	O
)	O
&&	O
(	O
char2	int
>=	O
'a'	O
)	O
)	O
value	int
=	O
(	O
value	int
*	O
16	int
)	O
+	O
(	O
10	int
+	O
(	O
char2	int
-	O
'a'	O
)	O
)	O
;	O
return	O
(	O
value	int
)	O
;	O
}	O
