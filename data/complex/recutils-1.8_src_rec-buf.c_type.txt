struct	O
rec_buf_s	struct(*(char),long,long,*(*(char)),*(long))
{	O
char	O
*	O
data	*(void)
;	O
size_t	long
size	*(long)
;	O
size_t	long
used	long
;	O
char	O
*	O
*	O
data_pointer	*(*(char))
;	O
size_t	long
*	O
size_pointer	*(long)
;	O
}	O
;	O
rec_buf_t	*(struct)
rec_buf_new	(*(*(char)),*(long))->(*(struct))
(	O
char	O
*	O
*	O
data	*(void)
,	O
size_t	long
*	O
size	*(long)
)	O
{	O
rec_buf_t	*(struct)
new	*(struct(*(char),long,long,*(*(char)),*(long)))
;	O
new	*(struct(*(char),long,long,*(*(char)),*(long)))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
rec_buf_s	struct(*(char),long,long,*(*(char)),*(long))
)	O
)	O
;	O
if	O
(	O
new	*(struct(*(char),long,long,*(*(char)),*(long)))
)	O
{	O
new	*(struct(*(char),long,long,*(*(char)),*(long)))
->	O
data_pointer	*(*(char))
=	O
data	*(void)
;	O
new	*(struct(*(char),long,long,*(*(char)),*(long)))
->	O
size_pointer	*(long)
=	O
size	*(long)
;	O
new	*(struct(*(char),long,long,*(*(char)),*(long)))
->	O
data	*(void)
=	O
malloc	(long)->(*(void))
(	O
REC_BUF_STEP	int
)	O
;	O
new	*(struct(*(char),long,long,*(*(char)),*(long)))
->	O
size	*(long)
=	O
REC_BUF_STEP	int
;	O
new	*(struct(*(char),long,long,*(*(char)),*(long)))
->	O
used	long
=	O
0	int
;	O
if	O
(	O
!	O
new	*(struct(*(char),long,long,*(*(char)),*(long)))
->	O
data	*(void)
)	O
{	O
free	(*(void))->(void)
(	O
new	*(struct(*(char),long,long,*(*(char)),*(long)))
)	O
;	O
new	*(struct(*(char),long,long,*(*(char)),*(long)))
=	O
NULL	O
;	O
}	O
}	O
return	O
new	*(struct(*(char),long,long,*(*(char)),*(long)))
;	O
}	O
void	O
rec_buf_close	(*(struct))->(void)
(	O
rec_buf_t	*(struct)
buf	*(struct)
)	O
{	O
if	O
(	O
buf	*(struct)
->	O
used	long
>	O
0	int
)	O
buf	*(struct)
->	O
data	*(void)
=	O
realloc	(*(void),long)->(*(void))
(	O
buf	*(struct)
->	O
data	*(void)
,	O
buf	*(struct)
->	O
used	long
+	O
1	int
)	O
;	O
buf	*(struct)
->	O
data	*(void)
[	O
buf	*(struct)
->	O
used	long
]	O
=	O
'\0'	O
;	O
*	O
(	O
buf	*(struct)
->	O
data_pointer	*(*(char))
)	O
=	O
buf	*(struct)
->	O
data	*(void)
;	O
*	O
(	O
buf	*(struct)
->	O
size_pointer	*(long)
)	O
=	O
buf	*(struct)
->	O
used	long
;	O
free	(*(void))->(void)
(	O
buf	*(struct)
)	O
;	O
}	O
void	O
rec_buf_rewind	(*(struct),int)->(void)
(	O
rec_buf_t	*(struct)
buf	*(struct)
,	O
int	O
n	int
)	O
{	O
if	O
(	O
(	O
buf	*(struct)
->	O
used	long
-	O
n	int
)	O
>=	O
0	int
)	O
buf	*(struct)
->	O
used	long
=	O
buf	*(struct)
->	O
used	long
-	O
n	int
;	O
}	O
int	O
rec_buf_putc	(int,*(struct))->(int)
(	O
int	O
c	int
,	O
rec_buf_t	*(struct)
buf	*(struct)
)	O
{	O
unsigned	O
int	O
ret	int
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
return	O
EOF	O
;	O
ret	int
=	O
(	O
unsigned	O
int	O
)	O
c	int
;	O
if	O
(	O
(	O
buf	*(struct)
->	O
used	long
+	O
1	int
)	O
>	O
buf	*(struct)
->	O
size	*(long)
)	O
{	O
buf	*(struct)
->	O
size	*(long)
=	O
buf	*(struct)
->	O
size	*(long)
+	O
REC_BUF_STEP	int
;	O
buf	*(struct)
->	O
data	*(void)
=	O
realloc	(*(void),long)->(*(void))
(	O
buf	*(struct)
->	O
data	*(void)
,	O
buf	*(struct)
->	O
size	*(long)
)	O
;	O
if	O
(	O
!	O
buf	*(struct)
->	O
data	*(void)
)	O
ret	int
=	O
EOF	O
;	O
}	O
if	O
(	O
ret	int
!=	O
EOF	O
)	O
buf	*(struct)
->	O
data	*(void)
[	O
buf	*(struct)
->	O
used	long
++	O
]	O
=	O
(	O
char	O
)	O
c	int
;	O
return	O
ret	int
;	O
}	O
int	O
rec_buf_puts	(*(char),*(struct))->(int)
(	O
const	O
char	O
*	O
str	*(char)
,	O
rec_buf_t	*(struct)
buf	*(struct)
)	O
{	O
int	O
ret	int
;	O
const	O
char	O
*	O
p	*(void)
;	O
ret	int
=	O
0	int
;	O
p	*(void)
=	O
str	*(char)
;	O
while	O
(	O
*	O
p	*(void)
!=	O
'\0'	O
)	O
{	O
if	O
(	O
rec_buf_putc	(int,*(struct))->(int)
(	O
*	O
p	*(void)
,	O
buf	*(struct)
)	O
==	O
EOF	O
)	O
{	O
ret	int
=	O
-	O
1	int
;	O
break	O
;	O
}	O
ret	int
++	O
;	O
p	*(void)
++	O
;	O
}	O
return	O
ret	int
;	O
}	O
