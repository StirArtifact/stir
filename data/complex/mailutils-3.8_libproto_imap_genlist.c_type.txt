struct	O
list_closure	struct(int,*(struct),*(char))
{	O
int	O
error_code	int
;	O
mu_list_t	*(struct)
retlist	*(struct)
;	O
const	O
char	O
*	O
command	*(char)
;	O
}	O
;	O
static	O
int	O
count_depth	(*(char),int)->(int)
(	O
const	O
char	O
*	O
name	*(char)
,	O
int	O
delim	*(char)
)	O
{	O
int	O
depth	int
=	O
0	int
;	O
while	O
(	O
*	O
name	*(char)
)	O
if	O
(	O
*	O
name	*(char)
++	O
==	O
delim	*(char)
)	O
depth	int
++	O
;	O
return	O
depth	int
;	O
}	O
static	O
int	O
list_attr_conv	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
=	O
item	*(void)
;	O
struct	O
mu_list_response	struct(int,int,int,*(char),*(struct))
*	O
rp	*(struct(int,int,int,*(char),*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int))))))
=	O
data	*(void)
;	O
if	O
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
0	int
;	O
if	O
(	O
mu_c_strcasecmp	(*(char),*(char))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	array(*(char))
.	O
string	*(char)
,	O
"\\Noinferiors"	*(char)
)	O
)	O
rp	*(struct(int,int,int,*(char),*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int))))))
->	O
type	int
|=	O
MU_FOLDER_ATTRIBUTE_DIRECTORY	int
;	O
if	O
(	O
mu_c_strcasecmp	(*(char),*(char))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	array(*(char))
.	O
string	*(char)
,	O
"\\Noselect"	*(char)
)	O
)	O
rp	*(struct(int,int,int,*(char),*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int))))))
->	O
type	int
|=	O
MU_FOLDER_ATTRIBUTE_FILE	int
;	O
return	O
0	int
;	O
}	O
static	O
void	O
list_untagged_handler	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)
(	O
mu_imap_t	*(struct)
imap	*(struct)
,	O
mu_list_t	*(struct)
resp	*(struct)
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
list_closure	struct(int,*(struct),*(char))
*	O
clos	*(struct(int,*(struct),*(char)))
=	O
data	*(void)
;	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
;	O
size_t	long
count	long
;	O
if	O
(	O
clos	*(struct(int,*(struct),*(char)))
->	O
error_code	int
)	O
return	O
;	O
mu_list_count	(*(struct),*(long))->(int)
(	O
resp	*(struct)
,	O
&	O
count	long
)	O
;	O
if	O
(	O
count	long
==	O
4	int
&&	O
_mu_imap_list_nth_element_is_string	(*(struct),long,*(char))->(int)
(	O
resp	*(struct)
,	O
0	int
,	O
clos	*(struct(int,*(struct),*(char)))
->	O
command	*(char)
)	O
)	O
{	O
struct	O
mu_list_response	struct(int,int,int,*(char),*(struct))
*	O
rp	*(struct(int,int,int,*(char),*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int))))))
;	O
rp	*(struct(int,int,int,*(char),*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int))))))
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
rp	*(struct(int,int,int,*(char),*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int))))))
)	O
)	O
;	O
if	O
(	O
!	O
rp	*(struct(int,int,int,*(char),*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int))))))
)	O
{	O
clos	*(struct(int,*(struct),*(char)))
->	O
error_code	int
=	O
ENOMEM	int
;	O
return	O
;	O
}	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
=	O
_mu_imap_list_at	(*(struct),int)->(*(struct(enum(int,int),union(*(struct`),*(char)))))
(	O
resp	*(struct)
,	O
1	int
)	O
;	O
if	O
(	O
!	O
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
&&	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
type	int
==	O
imap_eltype_list	int
)	O
)	O
return	O
;	O
rp	*(struct(int,int,int,*(char),*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int))))))
->	O
type	int
=	O
0	int
;	O
mu_list_foreach	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	array(*(char))
.	O
list	*(struct)
,	O
list_attr_conv	(*(void),*(void))->(int)
,	O
rp	*(struct(int,int,int,*(char),*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int))))))
)	O
;	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
=	O
_mu_imap_list_at	(*(struct),int)->(*(struct(enum(int,int),union(*(struct`),*(char)))))
(	O
resp	*(struct)
,	O
3	int
)	O
;	O
if	O
(	O
!	O
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
&&	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
type	int
==	O
imap_eltype_string	int
)	O
)	O
return	O
;	O
rp	*(struct(int,int,int,*(char),*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int))))))
->	O
name	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	array(*(char))
.	O
string	*(char)
)	O
;	O
if	O
(	O
!	O
rp	*(struct(int,int,int,*(char),*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int))))))
->	O
name	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
rp	*(struct(int,int,int,*(char),*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int))))))
)	O
;	O
clos	*(struct(int,*(struct),*(char)))
->	O
error_code	int
=	O
ENOMEM	int
;	O
return	O
;	O
}	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
=	O
_mu_imap_list_at	(*(struct),int)->(*(struct(enum(int,int),union(*(struct`),*(char)))))
(	O
resp	*(struct)
,	O
2	int
)	O
;	O
if	O
(	O
!	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
)	O
return	O
;	O
if	O
(	O
_mu_imap_list_element_is_nil	(*(struct(enum(int,int),union(*(struct`),*(char)))))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
)	O
)	O
{	O
rp	*(struct(int,int,int,*(char),*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int))))))
->	O
separator	int
=	O
0	int
;	O
rp	*(struct(int,int,int,*(char),*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int))))))
->	O
depth	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
;	O
else	O
{	O
rp	*(struct(int,int,int,*(char),*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int))))))
->	O
separator	int
=	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	array(*(char))
.	O
string	*(char)
[	O
0	int
]	O
;	O
rp	*(struct(int,int,int,*(char),*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int))))))
->	O
depth	int
=	O
count_depth	(*(char),int)->(int)
(	O
rp	*(struct(int,int,int,*(char),*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int))))))
->	O
name	*(char)
,	O
rp	*(struct(int,int,int,*(char),*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int))))))
->	O
separator	int
)	O
;	O
}	O
if	O
(	O
(	O
clos	*(struct(int,*(struct),*(char)))
->	O
error_code	int
=	O
mu_list_append	(*(struct),*(void))->(int)
(	O
clos	*(struct(int,*(struct),*(char)))
->	O
retlist	*(struct)
,	O
rp	*(struct(int,int,int,*(char),*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int))))))
)	O
)	O
)	O
mu_list_response_free	(*(void))->(void)
(	O
rp	*(struct(int,int,int,*(char),*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int))))))
)	O
;	O
}	O
}	O
int	O
mu_imap_genlist	(*(struct),int,*(char),*(char),*(struct))->(int)
(	O
mu_imap_t	*(struct)
imap	*(struct)
,	O
int	O
lsub	int
,	O
const	O
char	O
*	O
refname	*(*(char))
,	O
const	O
char	O
*	O
mboxname	*(char)
,	O
mu_list_t	*(struct)
retlist	*(struct)
)	O
{	O
char	O
const	O
*	O
argv	*(*(char))
[	O
3	int
]	O
;	O
static	O
struct	O
imap_command	struct(int,*(char),int,int,*(*(char)),*(char),*(struct),*((*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct`),*(struct`),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(void)),*((*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct`),*(struct`),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),*(void))
com	struct(int,*(char),int,int,*(*(char)),*(char),*(struct),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(void)),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),*(void))
;	O
struct	O
list_closure	struct(int,*(struct),*(char))
clos	*(struct(int,*(struct),*(char)))
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
refname	*(*(char))
||	O
!	O
mboxname	*(char)
)	O
return	O
EINVAL	int
;	O
argv	*(*(char))
[	O
0	int
]	O
=	O
lsub	int
?	O
"LSUB"	*(char)
:	O
"LIST"	*(char)
;	O
argv	*(*(char))
[	O
1	int
]	O
=	O
refname	*(*(char))
;	O
argv	*(*(char))
[	O
2	int
]	O
=	O
mboxname	*(char)
;	O
clos	*(struct(int,*(struct),*(char)))
.	O
error_code	int
=	O
0	int
;	O
clos	*(struct(int,*(struct),*(char)))
.	O
retlist	*(struct)
=	O
retlist	*(struct)
;	O
clos	*(struct(int,*(struct),*(char)))
.	O
command	*(char)
=	O
argv	*(*(char))
[	O
0	int
]	O
;	O
com	struct(int,*(char),int,int,*(*(char)),*(char),*(struct),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(void)),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),*(void))
.	O
session_state	enum(int,int,int,int)
=	O
MU_IMAP_SESSION_AUTH	int
;	O
com	struct(int,*(char),int,int,*(*(char)),*(char),*(struct),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(void)),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),*(void))
.	O
capa	*(struct)
=	O
NULL	O
;	O
com	struct(int,*(char),int,int,*(*(char)),*(char),*(struct),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(void)),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),*(void))
.	O
rx_state	int
=	O
lsub	int
?	O
MU_IMAP_CLIENT_LSUB_RX	int
:	O
MU_IMAP_CLIENT_LIST_RX	int
;	O
com	struct(int,*(char),int,int,*(*(char)),*(char),*(struct),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(void)),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),*(void))
.	O
argc	int
=	O
3	int
;	O
com	struct(int,*(char),int,int,*(*(char)),*(char),*(struct),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(void)),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),*(void))
.	O
argv	*(*(char))
=	O
argv	*(*(char))
;	O
com	struct(int,*(char),int,int,*(*(char)),*(char),*(struct),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(void)),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),*(void))
.	O
extra	*(char)
=	O
NULL	O
;	O
com	struct(int,*(char),int,int,*(*(char)),*(char),*(struct),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(void)),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),*(void))
.	O
msgset	*(struct)
=	O
NULL	O
;	O
com	struct(int,*(char),int,int,*(*(char)),*(char),*(struct),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(void)),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),*(void))
.	O
tagged_handler	*((*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct`),*(struct`),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(void))
=	O
NULL	O
;	O
com	struct(int,*(char),int,int,*(*(char)),*(char),*(struct),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(void)),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),*(void))
.	O
untagged_handler	*((*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct`),*(struct`),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void))
=	O
list_untagged_handler	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)
;	O
com	struct(int,*(char),int,int,*(*(char)),*(char),*(struct),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(void)),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),*(void))
.	O
untagged_handler_data	*(void)
=	O
&	O
clos	*(struct(int,*(struct),*(char)))
;	O
rc	int
=	O
mu_imap_gencom	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct(int,*(char),int,int,*(*(char)),*(char),*(struct),*((*`)->(void)),*((*`,*`,*`)->(void)),*(void))))->(int)
(	O
imap	*(struct)
,	O
&	O
com	struct(int,*(char),int,int,*(*(char)),*(char),*(struct),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(void)),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),*(void))
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
rc	int
=	O
clos	*(struct(int,*(struct),*(char)))
.	O
error_code	int
;	O
return	O
rc	int
;	O
}	O
int	O
mu_imap_genlist_new	(*(struct),int,*(char),*(char),*(*(struct)))->(int)
(	O
mu_imap_t	*(struct)
imap	*(struct)
,	O
int	O
lsub	int
,	O
const	O
char	O
*	O
refname	*(*(char))
,	O
const	O
char	O
*	O
mboxname	*(char)
,	O
mu_list_t	*(struct)
*	O
plist	*(*(struct))
)	O
{	O
mu_list_t	*(struct)
list	*(struct)
;	O
int	O
rc	int
=	O
mu_list_create	(*(*(struct)))->(int)
(	O
&	O
list	*(struct)
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_list_set_destroy_item	(*(struct),*((*(void))->(void)))->(*((*(void))->(void)))
(	O
list	*(struct)
,	O
mu_list_response_free	(*(void))->(void)
)	O
;	O
rc	int
=	O
mu_imap_genlist	(*(struct),int,*(char),*(char),*(struct))->(int)
(	O
imap	*(struct)
,	O
lsub	int
,	O
refname	*(*(char))
,	O
mboxname	*(char)
,	O
list	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
mu_list_destroy	(*(*(struct)))->(void)
(	O
&	O
list	*(struct)
)	O
;	O
else	O
*	O
plist	*(*(struct))
=	O
list	*(struct)
;	O
}	O
return	O
rc	int
;	O
}	O
