char	O
*	O
c_strcasestr	(*(char),*(char))->(*(char))
(	O
const	O
char	O
*	O
haystack_start	*(char)
,	O
const	O
char	O
*	O
needle_start	*(char)
)	O
{	O
const	O
char	O
*	O
haystack	*(char)
=	O
haystack_start	*(char)
;	O
const	O
char	O
*	O
needle	*(char)
=	O
needle_start	*(char)
;	O
size_t	long
needle_len	long
;	O
size_t	long
haystack_len	long
;	O
bool	bool
ok	bool
=	O
true	int
;	O
while	O
(	O
*	O
haystack	*(char)
&&	O
*	O
needle	*(char)
)	O
ok	bool
&=	O
(	O
c_tolower	(int)->(int)
(	O
(	O
unsigned	O
char	O
)	O
*	O
haystack	*(char)
++	O
)	O
==	O
c_tolower	(int)->(int)
(	O
(	O
unsigned	O
char	O
)	O
*	O
needle	*(char)
++	O
)	O
)	O
;	O
if	O
(	O
*	O
needle	*(char)
)	O
return	O
NULL	O
;	O
if	O
(	O
ok	bool
)	O
return	O
(	O
char	O
*	O
)	O
haystack_start	*(char)
;	O
needle_len	long
=	O
needle	*(char)
-	O
needle_start	*(char)
;	O
haystack	*(char)
=	O
haystack_start	*(char)
+	O
1	int
;	O
haystack_len	long
=	O
needle_len	long
-	O
1	int
;	O
if	O
(	O
needle_len	long
<	O
LONG_NEEDLE_THRESHOLD	int
)	O
return	O
two_way_short_needle	(*(char),long,*(char),long)->(*(char))
(	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
haystack	*(char)
,	O
haystack_len	long
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
needle_start	*(char)
,	O
needle_len	long
)	O
;	O
return	O
two_way_long_needle	(*(char),long,*(char),long)->(*(char))
(	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
haystack	*(char)
,	O
haystack_len	long
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
needle_start	*(char)
,	O
needle_len	long
)	O
;	O
}	O
