static	O
char	O
*	O
xstrcat	O
(	O
size_t	O
argcount	O
,	O
va_list	O
args	O
)	O
{	O
char	O
*	O
result	O
;	O
va_list	O
ap	O
;	O
size_t	O
totalsize	O
;	O
size_t	O
i	O
;	O
char	O
*	O
p	O
;	O
totalsize	O
=	O
0	int
;	O
va_copy	O
(	O
ap	O
,	O
args	O
)	O
;	O
for	O
(	O
i	O
=	O
argcount	O
;	O
i	O
>	O
0	int
;	O
i	O
--	O
)	O
{	O
const	O
char	O
*	O
next	O
=	O
va_arg	O
(	O
ap	O
,	O
const	O
char	O
*	O
)	O
;	O
totalsize	O
=	O
xsum	O
(	O
totalsize	O
,	O
strlen	O
(	O
next	O
)	O
)	O
;	O
}	O
va_end	O
(	O
ap	O
)	O
;	O
if	O
(	O
totalsize	O
==	O
SIZE_MAX	O
||	O
totalsize	O
>	O
INT_MAX	O
)	O
{	O
errno	O
=	O
EOVERFLOW	O
;	O
return	O
NULL	O
;	O
}	O
result	O
=	O
XNMALLOC	O
(	O
totalsize	O
+	O
1	int
,	O
char	O
)	O
;	O
p	O
=	O
result	O
;	O
for	O
(	O
i	O
=	O
argcount	O
;	O
i	O
>	O
0	int
;	O
i	O
--	O
)	O
{	O
const	O
char	O
*	O
next	O
=	O
va_arg	O
(	O
args	O
,	O
const	O
char	O
*	O
)	O
;	O
size_t	O
len	O
=	O
strlen	O
(	O
next	O
)	O
;	O
memcpy	O
(	O
p	O
,	O
next	O
,	O
len	O
)	O
;	O
p	O
+=	O
len	O
;	O
}	O
*	O
p	O
=	O
'\0'	O
;	O
return	O
result	O
;	O
}	O
char	O
*	O
xvasprintf	O
(	O
const	O
char	O
*	O
format	O
,	O
va_list	O
args	O
)	O
{	O
char	O
*	O
result	O
;	O
{	O
size_t	O
argcount	O
=	O
0	int
;	O
const	O
char	O
*	O
f	O
;	O
for	O
(	O
f	O
=	O
format	O
;	O
;	O
)	O
{	O
if	O
(	O
*	O
f	O
==	O
'\0'	O
)	O
return	O
xstrcat	O
(	O
argcount	O
,	O
args	O
)	O
;	O
if	O
(	O
*	O
f	O
!=	O
'%'	O
)	O
break	O
;	O
f	O
++	O
;	O
if	O
(	O
*	O
f	O
!=	O
's'	O
)	O
break	O
;	O
f	O
++	O
;	O
argcount	O
++	O
;	O
}	O
}	O
if	O
(	O
vasprintf	O
(	O
&	O
result	O
,	O
format	O
,	O
args	O
)	O
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
ENOMEM	O
)	O
xalloc_die	O
(	O
)	O
;	O
return	O
NULL	O
;	O
}	O
return	O
result	O
;	O
}	O
