static	O
SCM	(*(int))->((*(void),*(struct))->(int))
eval_catch_body	(*(void))->(int)
(	O
void	O
*	O
list	*(struct)
)	O
{	O
return	O
scm_primitive_eval	()->(int)
(	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
)	O
list	*(struct)
)	O
;	O
}	O
static	O
SCM	(*(int))->((*(void),*(struct))->(int))
eval_catch_handler	(*(void),int,int)->(int)
(	O
void	O
*	O
data	*(void)
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
tag	*(char)
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
throw_args	int
)	O
{	O
scm_handle_by_message_noexit	()->(int)
(	O
"mailutils"	*(char)
,	O
tag	*(char)
,	O
throw_args	int
)	O
;	O
longjmp	(array(struct(array(long),int,struct(array(long)))),int)->(void)
(	O
*	O
(	O
jmp_buf	array(struct(array(long),int,struct(array(long))))
*	O
)	O
data	*(void)
,	O
1	int
)	O
;	O
}	O
struct	O
scheme_exec_data	struct((*(int))->((*(void))->(int)),*(void),int)
{	O
SCM	(*(int))->((*(void),*(struct))->(int))
(	O
*	O
handler	array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int)))
)	O
(	O
void	O
*	O
data	*(void)
)	O
;	O
void	O
*	O
data	*(void)
;	O
SCM	(*(int))->((*(void),*(struct))->(int))
result	*(*(char))
;	O
}	O
;	O
static	O
SCM	(*(int))->((*(void),*(struct))->(int))
scheme_safe_exec_body	(*(void))->(int)
(	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
scheme_exec_data	struct((*(int))->((*(void))->(int)),*(void),int)
*	O
ed	*(struct((*(int))->((*(void))->(int)),*(void),int))
=	O
data	*(void)
;	O
ed	*(struct((*(int))->((*(void))->(int)),*(void),int))
->	O
result	*(*(char))
=	O
ed	*(struct((*(int))->((*(void))->(int)),*(void),int))
->	O
handler	array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int)))
(	O
ed	*(struct((*(int))->((*(void))->(int)),*(void),int))
->	O
data	*(void)
)	O
;	O
return	O
SCM_BOOL_F	O
;	O
}	O
int	O
mu_guile_safe_exec	((*(int))->(int),*(void),*(int))->(int)
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
(	O
*	O
handler	array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int)))
)	O
(	O
void	O
*	O
data	*(void)
)	O
,	O
void	O
*	O
data	*(void)
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
*	O
result	*(*(char))
)	O
{	O
jmp_buf	array(struct(array(long),int,struct(array(long))))
jmp_env	array(struct(array(long),int,struct(array(long))))
;	O
struct	O
scheme_exec_data	struct((*(int))->((*(void))->(int)),*(void),int)
ed	*(struct((*(int))->((*(void))->(int)),*(void),int))
;	O
if	O
(	O
setjmp	(array(struct(array(long),int,struct(array(long)))))->(int)
(	O
jmp_env	array(struct(array(long),int,struct(array(long))))
)	O
)	O
return	O
1	int
;	O
ed	*(struct((*(int))->((*(void))->(int)),*(void),int))
.	O
handler	array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int)))
=	O
handler	array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int)))
;	O
ed	*(struct((*(int))->((*(void))->(int)),*(void),int))
.	O
data	*(void)
=	O
data	*(void)
;	O
scm_c_catch	()->(int)
(	O
SCM_BOOL_T	O
,	O
scheme_safe_exec_body	(*(void))->(int)
,	O
(	O
void	O
*	O
)	O
&	O
ed	*(struct((*(int))->((*(void))->(int)),*(void),int))
,	O
eval_catch_handler	(*(void),int,int)->(int)
,	O
&	O
jmp_env	array(struct(array(long),int,struct(array(long))))
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
result	*(*(char))
)	O
*	O
result	*(*(char))
=	O
ed	*(struct((*(int))->((*(void))->(int)),*(void),int))
.	O
result	*(*(char))
;	O
return	O
0	int
;	O
}	O
SCM	(*(int))->((*(void),*(struct))->(int))
lookup_handler	(*(void))->(int)
(	O
void	O
*	O
data	*(void)
)	O
{	O
const	O
char	O
*	O
symbol	*(char)
=	O
(	O
const	O
char	O
*	O
)	O
data	*(void)
;	O
return	O
MU_SCM_SYMBOL_VALUE	O
(	O
symbol	*(char)
)	O
;	O
}	O
int	O
mu_guile_sym_lookup	(*(char),*(int))->(int)
(	O
const	O
char	O
*	O
symbol	*(char)
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
*	O
result	*(*(char))
)	O
{	O
return	O
mu_guile_safe_exec	((*(int))->(int),*(void),*(int))->(int)
(	O
lookup_handler	(*(void))->(int)
,	O
(	O
void	O
*	O
)	O
symbol	*(char)
,	O
result	*(*(char))
)	O
;	O
}	O
int	O
mu_guile_safe_proc_call	(int,int,*(int))->(int)
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
proc	int
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
arglist	int
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
*	O
presult	*(*(char))
)	O
{	O
jmp_buf	array(struct(array(long),int,struct(array(long))))
jmp_env	array(struct(array(long),int,struct(array(long))))
;	O
SCM	(*(int))->((*(void),*(struct))->(int))
cell	O
,	O
result	*(*(char))
;	O
if	O
(	O
setjmp	(array(struct(array(long),int,struct(array(long)))))->(int)
(	O
jmp_env	array(struct(array(long),int,struct(array(long))))
)	O
)	O
return	O
1	int
;	O
cell	O
=	O
scm_cons	()->(int)
(	O
proc	int
,	O
arglist	int
)	O
;	O
result	*(*(char))
=	O
scm_c_catch	()->(int)
(	O
SCM_BOOL_T	O
,	O
eval_catch_body	(*(void))->(int)
,	O
cell	O
,	O
eval_catch_handler	(*(void),int,int)->(int)
,	O
&	O
jmp_env	array(struct(array(long),int,struct(array(long))))
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
presult	*(*(char))
)	O
*	O
presult	*(*(char))
=	O
result	*(*(char))
;	O
return	O
0	int
;	O
}	O
void	O
mu_guile_init	(int)->(void)
(	O
int	O
debug	int
)	O
{	O
scm_init_guile	()->(int)
(	O
)	O
;	O
scm_load_goops	()->(int)
(	O
)	O
;	O
if	O
(	O
debug	int
)	O
{	O
}	O
mu_scm_init	()->(void)
(	O
)	O
;	O
}	O
struct	O
load_closure	struct(*(char),int,*(*(char)))
{	O
const	O
char	O
*	O
filename	*(char)
;	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	*(*(char))
;	O
}	O
;	O
static	O
SCM	(*(int))->((*(void),*(struct))->(int))
load_path_handler	(*(void))->(int)
(	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
load_closure	struct(*(char),int,*(*(char)))
*	O
lp	*(struct(*(char),int,int))
=	O
data	*(void)
;	O
scm_set_program_arguments	()->(int)
(	O
lp	*(struct(*(char),int,int))
->	O
argc	int
,	O
lp	*(struct(*(char),int,int))
->	O
argv	*(*(char))
,	O
(	O
char	O
*	O
)	O
lp	*(struct(*(char),int,int))
->	O
filename	*(char)
)	O
;	O
scm_primitive_load	()->(int)
(	O
scm_from_locale_string	()->(int)
(	O
lp	*(struct(*(char),int,int))
->	O
filename	*(char)
)	O
)	O
;	O
return	O
SCM_UNDEFINED	O
;	O
}	O
int	O
mu_guile_load	(*(char),int,*(*(char)))->(int)
(	O
const	O
char	O
*	O
filename	*(char)
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
struct	O
load_closure	struct(*(char),int,*(*(char)))
lc	struct(*(char),int,*(*(char)))
;	O
lc	struct(*(char),int,*(*(char)))
.	O
filename	*(char)
=	O
filename	*(char)
;	O
lc	struct(*(char),int,*(*(char)))
.	O
argc	int
=	O
argc	int
;	O
lc	struct(*(char),int,*(*(char)))
.	O
argv	*(*(char))
=	O
argv	*(*(char))
;	O
return	O
mu_guile_safe_exec	((*(int))->(int),*(void),*(int))->(int)
(	O
load_path_handler	(*(void))->(int)
,	O
&	O
lc	struct(*(char),int,*(*(char)))
,	O
NULL	O
)	O
;	O
}	O
static	O
SCM	(*(int))->((*(void),*(struct))->(int))
eval_handler	(*(void))->(int)
(	O
void	O
*	O
data	*(void)
)	O
{	O
const	O
char	O
*	O
string	*(char)
=	O
data	*(void)
;	O
scm_c_eval_string	()->(int)
(	O
string	*(char)
)	O
;	O
return	O
SCM_UNDEFINED	O
;	O
}	O
int	O
mu_guile_eval	(*(char))->(int)
(	O
const	O
char	O
*	O
string	*(char)
)	O
{	O
return	O
mu_guile_safe_exec	((*(int))->(int),*(void),*(int))->(int)
(	O
eval_handler	(*(void))->(int)
,	O
(	O
void	O
*	O
)	O
string	*(char)
,	O
NULL	O
)	O
;	O
}	O
extern	O
SCM	(*(int))->((*(void),*(struct))->(int))
mu_scm_mailbox_create0	(*(struct),int)->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
int	O
noclose	int
)	O
;	O
int	O
mu_guile_mailbox_apply	(*(struct),*(char))->(int)
(	O
mu_mailbox_t	*(struct)
mbx	*(struct)
,	O
char	O
*	O
funcname	*(char)
)	O
{	O
SCM	(*(int))->((*(void),*(struct))->(int))
proc	int
;	O
if	O
(	O
mu_guile_sym_lookup	(*(char),*(int))->(int)
(	O
funcname	*(char)
,	O
&	O
proc	int
)	O
)	O
return	O
MU_ERR_NOENT	O
;	O
if	O
(	O
scm_procedure_p	()->(int)
(	O
proc	int
)	O
!=	O
SCM_BOOL_T	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mu_guile_safe_proc_call	(int,int,*(int))->(int)
(	O
proc	int
,	O
scm_list_1	()->(int)
(	O
mu_scm_mailbox_create0	(*(struct),int)->(int)
(	O
mbx	*(struct)
,	O
1	int
)	O
)	O
,	O
NULL	O
)	O
)	O
return	O
MU_ERR_FAILURE	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_guile_message_apply	(*(struct),*(char))->(int)
(	O
mu_message_t	*(struct)
msg	*(struct)
,	O
char	O
*	O
funcname	*(char)
)	O
{	O
SCM	(*(int))->((*(void),*(struct))->(int))
proc	int
;	O
if	O
(	O
mu_guile_sym_lookup	(*(char),*(int))->(int)
(	O
funcname	*(char)
,	O
&	O
proc	int
)	O
)	O
return	O
MU_ERR_NOENT	O
;	O
if	O
(	O
scm_procedure_p	()->(int)
(	O
proc	int
)	O
!=	O
SCM_BOOL_T	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mu_guile_safe_proc_call	(int,int,*(int))->(int)
(	O
proc	int
,	O
scm_list_1	()->(int)
(	O
mu_scm_message_create	(int,*(struct))->(int)
(	O
SCM_BOOL_F	O
,	O
msg	*(struct)
)	O
)	O
,	O
NULL	O
)	O
)	O
return	O
MU_ERR_FAILURE	O
;	O
return	O
0	int
;	O
}	O
