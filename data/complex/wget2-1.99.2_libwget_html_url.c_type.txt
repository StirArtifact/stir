typedef	O
struct	O
{	O
wget_html_parsed_result	struct(*(struct),*(char),struct(*(char),long),bool)
result	struct(*(struct),*(char),struct(*(char),long),bool)
;	O
wget_vector	struct
*	O
additional_tags	*(struct)
;	O
wget_vector	struct
*	O
ignore_tags	*(struct)
;	O
int	O
uri_index	int
;	O
size_t	long
css_start_offset	long
;	O
char	O
found_robots	char
,	O
found_content_type	char
,	O
link_inline	bool
;	O
const	O
char	O
*	O
html	*(char)
,	O
*	O
css_attr	*(char)
,	O
*	O
css_dir	*(char)
;	O
}	O
_html_context_t	struct(struct(*(struct),*(char),struct(*(char),long),bool),*(struct),*(struct),int,long,char,char,char,*(char),*(char),*(char))
;	O
static	O
const	O
char	O
maybe	array(char)
[	O
256	int
]	O
=	O
{	O
[	O
'a'	O
]	O
=	O
1	int
,	O
[	O
'b'	O
]	O
=	O
1	int
,	O
[	O
'c'	O
]	O
=	O
1	int
,	O
[	O
'd'	O
]	O
=	O
1	int
,	O
[	O
'f'	O
]	O
=	O
1	int
,	O
[	O
'h'	O
]	O
=	O
1	int
,	O
[	O
'i'	O
]	O
=	O
1	int
,	O
[	O
'l'	O
]	O
=	O
1	int
,	O
[	O
'm'	O
]	O
=	O
1	int
,	O
[	O
'p'	O
]	O
=	O
1	int
,	O
[	O
's'	O
]	O
=	O
1	int
,	O
[	O
'u'	O
]	O
=	O
1	int
,	O
}	O
;	O
static	O
const	O
char	O
attrs	array(array(char))
[	O
]	O
[	O
12	int
]	O
=	O
{	O
"action"	*(char)
,	O
"archive"	*(char)
,	O
"background"	*(char)
,	O
"code"	*(char)
,	O
"codebase"	*(char)
,	O
"cite"	*(char)
,	O
"classid"	*(char)
,	O
"data"	*(char)
,	O
"formaction"	*(char)
,	O
"href"	*(char)
,	O
"icon"	*(char)
,	O
"lowsrc"	*(char)
,	O
"longdesc"	*(char)
,	O
"manifest"	*(char)
,	O
"profile"	*(char)
,	O
"poster"	*(char)
,	O
"src"	*(char)
,	O
"srcset"	*(char)
,	O
"usemap"	*(char)
}	O
;	O
static	O
void	O
_css_parse_uri	(*(void),*(char),long,long)->(void)
(	O
void	O
*	O
context	*(void)
,	O
const	O
char	O
*	O
url	*(char)
WGET_GCC_UNUSED	O
,	O
size_t	long
len	long
,	O
size_t	long
pos	int
)	O
{	O
_html_context_t	struct(struct(*(struct),*(char),struct(*(char),long),bool),*(struct),*(struct),int,long,char,char,char,*(char),*(char),*(char))
*	O
ctx	*(void)
=	O
context	*(void)
;	O
wget_html_parsed_result	struct(*(struct),*(char),struct(*(char),long),bool)
*	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
=	O
&	O
ctx	*(void)
->	O
result	struct(*(struct),*(char),struct(*(char),long),bool)
;	O
wget_html_parsed_url	struct(struct(*(char),long),array(char),array(char),bool)
*	O
parsed_url	*(struct(struct(*(char),long),array(char),array(char),bool))
;	O
if	O
(	O
!	O
(	O
parsed_url	*(struct(struct(*(char),long),array(char),array(char),bool))
=	O
wget_malloc	(long)->(*(void))
(	O
sizeof	O
(	O
wget_html_parsed_url	struct(struct(*(char),long),array(char),array(char),bool)
)	O
)	O
)	O
)	O
return	O
;	O
parsed_url	*(struct(struct(*(char),long),array(char),array(char),bool))
->	O
link_inline	bool
=	O
1	int
;	O
wget_strscpy	(*(char),*(char),long)->(long)
(	O
parsed_url	*(struct(struct(*(char),long),array(char),array(char),bool))
->	O
attr	array(char)
,	O
ctx	*(void)
->	O
css_attr	*(char)
,	O
sizeof	O
(	O
parsed_url	*(struct(struct(*(char),long),array(char),array(char),bool))
->	O
attr	array(char)
)	O
)	O
;	O
wget_strscpy	(*(char),*(char),long)->(long)
(	O
parsed_url	*(struct(struct(*(char),long),array(char),array(char),bool))
->	O
dir	array(char)
,	O
ctx	*(void)
->	O
css_dir	*(char)
,	O
sizeof	O
(	O
parsed_url	*(struct(struct(*(char),long),array(char),array(char),bool))
->	O
dir	array(char)
)	O
)	O
;	O
parsed_url	*(struct(struct(*(char),long),array(char),array(char),bool))
->	O
url	*(char)
.	O
p	*(char)
=	O
(	O
const	O
char	O
*	O
)	O
(	O
ctx	*(void)
->	O
html	*(char)
+	O
ctx	*(void)
->	O
css_start_offset	long
+	O
pos	int
)	O
;	O
parsed_url	*(struct(struct(*(char),long),array(char),array(char),bool))
->	O
url	*(char)
.	O
len	long
=	O
len	long
;	O
if	O
(	O
!	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
->	O
uris	*(struct)
)	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
->	O
uris	*(struct)
=	O
wget_vector_create	(int,*((*(void),*(void))->(int)))->(*(struct))
(	O
32	int
,	O
NULL	O
)	O
;	O
wget_vector_add	(*(struct),*(void))->(int)
(	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
->	O
uris	*(struct)
,	O
parsed_url	*(struct(struct(*(char),long),array(char),array(char),bool))
)	O
;	O
}	O
static	O
void	O
_html_get_url	(*(void),int,*(char),*(char),*(char),long,long)->(void)
(	O
void	O
*	O
context	*(void)
,	O
int	O
flags	int
,	O
const	O
char	O
*	O
tag	*(char)
,	O
const	O
char	O
*	O
attr	array(char)
,	O
const	O
char	O
*	O
val	*(char)
,	O
size_t	long
len	long
,	O
size_t	long
pos	int
WGET_GCC_UNUSED	O
)	O
{	O
_html_context_t	struct(struct(*(struct),*(char),struct(*(char),long),bool),*(struct),*(struct),int,long,char,char,char,*(char),*(char),*(char))
*	O
ctx	*(void)
=	O
context	*(void)
;	O
if	O
(	O
(	O
flags	int
&	O
XML_FLG_BEGIN	O
)	O
)	O
{	O
if	O
(	O
(	O
*	O
tag	*(char)
|	O
0x20	int
)	O
==	O
'm'	O
&&	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
tag	*(char)
,	O
"meta"	*(char)
)	O
)	O
ctx	*(void)
->	O
found_robots	char
=	O
ctx	*(void)
->	O
found_content_type	char
=	O
0	int
;	O
else	O
if	O
(	O
(	O
*	O
tag	*(char)
|	O
0x20	int
)	O
==	O
'l'	O
&&	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
tag	*(char)
,	O
"link"	*(char)
)	O
)	O
{	O
ctx	*(void)
->	O
link_inline	bool
=	O
0	int
;	O
ctx	*(void)
->	O
uri_index	int
=	O
-	O
1	int
;	O
}	O
}	O
if	O
(	O
(	O
flags	int
&	O
XML_FLG_ATTRIBUTE	O
)	O
&&	O
val	*(char)
)	O
{	O
wget_html_parsed_result	struct(*(struct),*(char),struct(*(char),long),bool)
*	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
=	O
&	O
ctx	*(void)
->	O
result	struct(*(struct),*(char),struct(*(char),long),bool)
;	O
if	O
(	O
(	O
*	O
tag	*(char)
|	O
0x20	int
)	O
==	O
'm'	O
&&	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
tag	*(char)
,	O
"meta"	*(char)
)	O
)	O
{	O
if	O
(	O
!	O
ctx	*(void)
->	O
found_robots	char
)	O
{	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
attr	array(char)
,	O
"name"	*(char)
)	O
&&	O
!	O
wget_strncasecmp_ascii	(*(char),*(char),long)->(int)
(	O
val	*(char)
,	O
"robots"	*(char)
,	O
len	long
)	O
)	O
{	O
ctx	*(void)
->	O
found_robots	char
=	O
1	int
;	O
return	O
;	O
}	O
}	O
else	O
if	O
(	O
ctx	*(void)
->	O
found_robots	char
&&	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
attr	array(char)
,	O
"content"	*(char)
)	O
)	O
{	O
char	O
*	O
p	*(char)
;	O
char	O
valbuf	O
[	O
len	long
+	O
1	int
]	O
,	O
*	O
value	*(void)
=	O
valbuf	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
value	*(void)
,	O
val	*(char)
,	O
len	long
)	O
;	O
value	*(void)
[	O
len	long
]	O
=	O
0	int
;	O
while	O
(	O
*	O
value	*(void)
)	O
{	O
while	O
(	O
c_isspace	(int)->(bool)
(	O
*	O
value	*(void)
)	O
)	O
value	*(void)
++	O
;	O
if	O
(	O
*	O
value	*(void)
==	O
','	O
)	O
{	O
value	*(void)
++	O
;	O
continue	O
;	O
}	O
for	O
(	O
p	*(char)
=	O
value	*(void)
;	O
*	O
p	*(char)
&&	O
!	O
c_isspace	(int)->(bool)
(	O
*	O
p	*(char)
)	O
&&	O
*	O
p	*(char)
!=	O
','	O
;	O
p	*(char)
++	O
)	O
;	O
if	O
(	O
p	*(char)
==	O
value	*(void)
)	O
break	O
;	O
if	O
(	O
!	O
wget_strncasecmp_ascii	(*(char),*(char),long)->(int)
(	O
value	*(void)
,	O
"all"	*(char)
,	O
p	*(char)
-	O
value	*(void)
)	O
||	O
!	O
wget_strncasecmp_ascii	(*(char),*(char),long)->(int)
(	O
value	*(void)
,	O
"follow"	*(char)
,	O
p	*(char)
-	O
value	*(void)
)	O
)	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
->	O
follow	bool
=	O
1	int
;	O
else	O
if	O
(	O
!	O
wget_strncasecmp_ascii	(*(char),*(char),long)->(int)
(	O
value	*(void)
,	O
"nofollow"	*(char)
,	O
p	*(char)
-	O
value	*(void)
)	O
||	O
!	O
wget_strncasecmp_ascii	(*(char),*(char),long)->(int)
(	O
value	*(void)
,	O
"none"	*(char)
,	O
p	*(char)
-	O
value	*(void)
)	O
)	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
->	O
follow	bool
=	O
0	int
;	O
value	*(void)
=	O
*	O
p	*(char)
?	O
p	*(char)
+	O
1	int
:	O
p	*(char)
;	O
}	O
return	O
;	O
}	O
if	O
(	O
ctx	*(void)
->	O
found_content_type	char
&&	O
!	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
->	O
encoding	*(char)
)	O
{	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
attr	array(char)
,	O
"content"	*(char)
)	O
)	O
{	O
char	O
valbuf	O
[	O
len	long
+	O
1	int
]	O
,	O
*	O
value	*(void)
=	O
valbuf	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
value	*(void)
,	O
val	*(char)
,	O
len	long
)	O
;	O
value	*(void)
[	O
len	long
]	O
=	O
0	int
;	O
wget_http_parse_content_type	(*(char),*(*(char)),*(*(char)))->(*(char))
(	O
value	*(void)
,	O
NULL	O
,	O
&	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
->	O
encoding	*(char)
)	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
ctx	*(void)
->	O
found_content_type	char
&&	O
!	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
->	O
encoding	*(char)
)	O
{	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
attr	array(char)
,	O
"http-equiv"	*(char)
)	O
&&	O
!	O
wget_strncasecmp_ascii	(*(char),*(char),long)->(int)
(	O
val	*(char)
,	O
"Content-Type"	*(char)
,	O
len	long
)	O
)	O
{	O
ctx	*(void)
->	O
found_content_type	char
=	O
1	int
;	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
attr	array(char)
,	O
"charset"	*(char)
)	O
)	O
{	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
->	O
encoding	*(char)
=	O
wget_strmemdup	(*(void),long)->(*(char))
(	O
val	*(char)
,	O
len	long
)	O
;	O
}	O
}	O
return	O
;	O
}	O
if	O
(	O
ctx	*(void)
->	O
ignore_tags	*(struct)
)	O
{	O
if	O
(	O
wget_vector_find	(*(struct),*(void))->(int)
(	O
ctx	*(void)
->	O
ignore_tags	*(struct)
,	O
&	O
(	O
wget_html_tag	struct(*(char),*(char))
)	O
{	O
.	O
name	*(char)
=	O
tag	*(char)
,	O
.	O
attribute	*(char)
=	O
NULL	O
}	O
)	O
!=	O
-	O
1	int
||	O
wget_vector_find	(*(struct),*(void))->(int)
(	O
ctx	*(void)
->	O
ignore_tags	*(struct)
,	O
&	O
(	O
wget_html_tag	struct(*(char),*(char))
)	O
{	O
.	O
name	*(char)
=	O
tag	*(char)
,	O
.	O
attribute	*(char)
=	O
attr	array(char)
}	O
)	O
!=	O
-	O
1	int
)	O
return	O
;	O
}	O
if	O
(	O
(	O
*	O
attr	array(char)
|	O
0x20	int
)	O
==	O
's'	O
&&	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
attr	array(char)
,	O
"style"	*(char)
)	O
&&	O
len	long
)	O
{	O
ctx	*(void)
->	O
css_dir	*(char)
=	O
tag	*(char)
;	O
ctx	*(void)
->	O
css_attr	*(char)
=	O
"style"	*(char)
;	O
ctx	*(void)
->	O
css_start_offset	long
=	O
val	*(char)
-	O
ctx	*(void)
->	O
html	*(char)
;	O
wget_css_parse_buffer	(*(char),long,*((*(void),*(char),long,long)->(void)),*((*(void),*(char),long)->(void)),*(void))->(void)
(	O
val	*(char)
,	O
len	long
,	O
_css_parse_uri	(*(void),*(char),long,long)->(void)
,	O
NULL	O
,	O
context	*(void)
)	O
;	O
return	O
;	O
}	O
if	O
(	O
(	O
*	O
tag	*(char)
|	O
0x20	int
)	O
==	O
'l'	O
&&	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
tag	*(char)
,	O
"link"	*(char)
)	O
)	O
{	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
attr	array(char)
,	O
"rel"	*(char)
)	O
)	O
{	O
if	O
(	O
!	O
wget_strncasecmp_ascii	(*(char),*(char),long)->(int)
(	O
val	*(char)
,	O
"shortcut icon"	*(char)
,	O
len	long
)	O
||	O
!	O
wget_strncasecmp_ascii	(*(char),*(char),long)->(int)
(	O
val	*(char)
,	O
"stylesheet"	*(char)
,	O
len	long
)	O
||	O
!	O
wget_strncasecmp_ascii	(*(char),*(char),long)->(int)
(	O
val	*(char)
,	O
"preload"	*(char)
,	O
len	long
)	O
)	O
ctx	*(void)
->	O
link_inline	bool
=	O
1	int
;	O
else	O
ctx	*(void)
->	O
link_inline	bool
=	O
0	int
;	O
if	O
(	O
ctx	*(void)
->	O
uri_index	int
>=	O
0	int
)	O
{	O
wget_html_parsed_url	struct(struct(*(char),long),array(char),array(char),bool)
*	O
url	*(char)
=	O
wget_vector_get	(*(struct),int)->(*(void))
(	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
->	O
uris	*(struct)
,	O
ctx	*(void)
->	O
uri_index	int
)	O
;	O
url	*(char)
->	O
link_inline	bool
=	O
ctx	*(void)
->	O
link_inline	bool
;	O
}	O
}	O
}	O
int	O
found	int
=	O
0	int
;	O
if	O
(	O
maybe	array(char)
[	O
(	O
unsigned	O
char	O
)	O
*	O
attr	array(char)
|	O
0x20	int
]	O
&&	O
attr	array(char)
[	O
1	int
]	O
&&	O
attr	array(char)
[	O
2	int
]	O
)	O
found	int
=	O
bsearch	(*(void),*(void),long,long,*((*(void),*(void))->(int)))->(*(void))
(	O
attr	array(char)
,	O
attrs	array(array(char))
,	O
countof	O
(	O
attrs	array(array(char))
)	O
,	O
sizeof	O
(	O
attrs	array(array(char))
[	O
0	int
]	O
)	O
,	O
(	O
int	O
(	O
*	O
)	O
(	O
const	O
void	O
*	O
,	O
const	O
void	O
*	O
)	O
)	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
)	O
!=	O
NULL	O
;	O
if	O
(	O
!	O
found	int
&&	O
ctx	*(void)
->	O
additional_tags	*(struct)
)	O
{	O
if	O
(	O
wget_vector_find	(*(struct),*(void))->(int)
(	O
ctx	*(void)
->	O
additional_tags	*(struct)
,	O
&	O
(	O
wget_html_tag	struct(*(char),*(char))
)	O
{	O
.	O
name	*(char)
=	O
tag	*(char)
,	O
.	O
attribute	*(char)
=	O
NULL	O
}	O
)	O
!=	O
-	O
1	int
||	O
wget_vector_find	(*(struct),*(void))->(int)
(	O
ctx	*(void)
->	O
additional_tags	*(struct)
,	O
&	O
(	O
wget_html_tag	struct(*(char),*(char))
)	O
{	O
.	O
name	*(char)
=	O
tag	*(char)
,	O
.	O
attribute	*(char)
=	O
attr	array(char)
}	O
)	O
!=	O
-	O
1	int
)	O
found	int
=	O
1	int
;	O
}	O
if	O
(	O
found	int
)	O
{	O
for	O
(	O
;	O
len	long
&&	O
c_isspace	(int)->(bool)
(	O
*	O
val	*(char)
)	O
;	O
val	*(char)
++	O
,	O
len	long
--	O
)	O
;	O
for	O
(	O
;	O
len	long
&&	O
c_isspace	(int)->(bool)
(	O
val	*(char)
[	O
len	long
-	O
1	int
]	O
)	O
;	O
len	long
--	O
)	O
;	O
if	O
(	O
(	O
*	O
tag	*(char)
|	O
0x20	int
)	O
==	O
'b'	O
&&	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
tag	*(char)
,	O
"base"	*(char)
)	O
)	O
{	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
->	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
.	O
p	*(char)
=	O
val	*(char)
;	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
->	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
.	O
len	long
=	O
len	long
;	O
return	O
;	O
}	O
if	O
(	O
!	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
->	O
uris	*(struct)
)	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
->	O
uris	*(struct)
=	O
wget_vector_create	(int,*((*(void),*(void))->(int)))->(*(struct))
(	O
32	int
,	O
NULL	O
)	O
;	O
wget_html_parsed_url	struct(struct(*(char),long),array(char),array(char),bool)
url	*(char)
;	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
attr	array(char)
,	O
"srcset"	*(char)
)	O
)	O
{	O
while	O
(	O
len	long
)	O
{	O
const	O
char	O
*	O
p	*(char)
;	O
for	O
(	O
;	O
len	long
&&	O
c_isspace	(int)->(bool)
(	O
*	O
val	*(char)
)	O
;	O
val	*(char)
++	O
,	O
len	long
--	O
)	O
;	O
for	O
(	O
p	*(char)
=	O
val	*(char)
;	O
len	long
&&	O
!	O
c_isspace	(int)->(bool)
(	O
*	O
val	*(char)
)	O
&&	O
*	O
val	*(char)
!=	O
','	O
;	O
val	*(char)
++	O
,	O
len	long
--	O
)	O
;	O
if	O
(	O
p	*(char)
!=	O
val	*(char)
)	O
{	O
url	*(char)
.	O
link_inline	bool
=	O
ctx	*(void)
->	O
link_inline	bool
;	O
wget_strscpy	(*(char),*(char),long)->(long)
(	O
url	*(char)
.	O
attr	array(char)
,	O
attr	array(char)
,	O
sizeof	O
(	O
url	*(char)
.	O
attr	array(char)
)	O
)	O
;	O
wget_strscpy	(*(char),*(char),long)->(long)
(	O
url	*(char)
.	O
dir	array(char)
,	O
tag	*(char)
,	O
sizeof	O
(	O
url	*(char)
.	O
dir	array(char)
)	O
)	O
;	O
url	*(char)
.	O
url	*(char)
.	O
p	*(char)
=	O
p	*(char)
;	O
url	*(char)
.	O
url	*(char)
.	O
len	long
=	O
val	*(char)
-	O
p	*(char)
;	O
wget_vector_add_memdup	(*(struct),*(void),long)->(int)
(	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
->	O
uris	*(struct)
,	O
&	O
url	*(char)
,	O
sizeof	O
(	O
url	*(char)
)	O
)	O
;	O
}	O
for	O
(	O
;	O
len	long
&&	O
*	O
val	*(char)
!=	O
','	O
;	O
val	*(char)
++	O
,	O
len	long
--	O
)	O
;	O
if	O
(	O
len	long
&&	O
*	O
val	*(char)
==	O
','	O
)	O
{	O
val	*(char)
++	O
;	O
len	long
--	O
;	O
}	O
}	O
}	O
else	O
{	O
url	*(char)
.	O
link_inline	bool
=	O
ctx	*(void)
->	O
link_inline	bool
;	O
wget_strscpy	(*(char),*(char),long)->(long)
(	O
url	*(char)
.	O
attr	array(char)
,	O
attr	array(char)
,	O
sizeof	O
(	O
url	*(char)
.	O
attr	array(char)
)	O
)	O
;	O
wget_strscpy	(*(char),*(char),long)->(long)
(	O
url	*(char)
.	O
dir	array(char)
,	O
tag	*(char)
,	O
sizeof	O
(	O
url	*(char)
.	O
dir	array(char)
)	O
)	O
;	O
url	*(char)
.	O
url	*(char)
.	O
p	*(char)
=	O
val	*(char)
;	O
url	*(char)
.	O
url	*(char)
.	O
len	long
=	O
len	long
;	O
ctx	*(void)
->	O
uri_index	int
=	O
wget_vector_add_memdup	(*(struct),*(void),long)->(int)
(	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
->	O
uris	*(struct)
,	O
&	O
url	*(char)
,	O
sizeof	O
(	O
url	*(char)
)	O
)	O
;	O
}	O
}	O
}	O
if	O
(	O
flags	int
&	O
XML_FLG_CONTENT	O
&&	O
val	*(char)
&&	O
len	long
&&	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
tag	*(char)
,	O
"style"	*(char)
)	O
)	O
{	O
ctx	*(void)
->	O
css_dir	*(char)
=	O
"style"	*(char)
;	O
ctx	*(void)
->	O
css_attr	*(char)
=	O
""	*(char)
;	O
ctx	*(void)
->	O
css_start_offset	long
=	O
val	*(char)
-	O
ctx	*(void)
->	O
html	*(char)
;	O
wget_css_parse_buffer	(*(char),long,*((*(void),*(char),long,long)->(void)),*((*(void),*(char),long)->(void)),*(void))->(void)
(	O
val	*(char)
,	O
len	long
,	O
_css_parse_uri	(*(void),*(char),long,long)->(void)
,	O
NULL	O
,	O
context	*(void)
)	O
;	O
}	O
}	O
void	O
wget_html_free_urls_inline	(*(*(struct(*(struct`),*(char),struct(*`,long),bool))))->(void)
(	O
wget_html_parsed_result	struct(*(struct),*(char),struct(*(char),long),bool)
*	O
*	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
)	O
{	O
if	O
(	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
&&	O
*	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
)	O
{	O
xfree	O
(	O
(	O
*	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
)	O
->	O
encoding	*(char)
)	O
;	O
wget_vector_free	(*(*(struct)))->(void)
(	O
&	O
(	O
*	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
)	O
->	O
uris	*(struct)
)	O
;	O
xfree	O
(	O
*	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
)	O
;	O
}	O
}	O
wget_html_parsed_result	struct(*(struct),*(char),struct(*(char),long),bool)
*	O
wget_html_get_urls_inline	(*(char),*(struct),*(struct))->(*(struct(*(struct),*(char),struct(*(char),long),bool)))
(	O
const	O
char	O
*	O
html	*(char)
,	O
wget_vector	struct
*	O
additional_tags	*(struct)
,	O
wget_vector	struct
*	O
ignore_tags	*(struct)
)	O
{	O
_html_context_t	struct(struct(*(struct),*(char),struct(*(char),long),bool),*(struct),*(struct),int,long,char,char,char,*(char),*(char),*(char))
context	*(void)
=	O
{	O
.	O
result	struct(*(struct),*(char),struct(*(char),long),bool)
.	O
follow	bool
=	O
1	int
,	O
.	O
additional_tags	*(struct)
=	O
additional_tags	*(struct)
,	O
.	O
ignore_tags	*(struct)
=	O
ignore_tags	*(struct)
,	O
.	O
html	*(char)
=	O
html	*(char)
,	O
}	O
;	O
wget_html_parse_buffer	(*(char),*((*(void),int,*(char),*(char),*(char),long,long)->(void)),*(void),int)->(void)
(	O
html	*(char)
,	O
_html_get_url	(*(void),int,*(char),*(char),*(char),long,long)->(void)
,	O
&	O
context	*(void)
,	O
HTML_HINT_REMOVE_EMPTY_CONTENT	O
)	O
;	O
return	O
wget_memdup	(*(void),long)->(*(void))
(	O
&	O
context	*(void)
.	O
result	struct(*(struct),*(char),struct(*(char),long),bool)
,	O
sizeof	O
(	O
context	*(void)
.	O
result	struct(*(struct),*(char),struct(*(char),long),bool)
)	O
)	O
;	O
}	O
