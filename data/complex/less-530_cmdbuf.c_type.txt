extern	O
int	O
sc_width	int
;	O
extern	O
int	O
utf_mode	int
;	O
static	O
char	O
cmdbuf	array(char)
[	O
CMDBUF_SIZE	int
]	O
;	O
static	O
int	O
cmd_col	int
;	O
static	O
int	O
prompt_col	int
;	O
static	O
char	O
*	O
cp	*(char)
;	O
static	O
int	O
cmd_offset	int
;	O
static	O
int	O
literal	int
;	O
static	O
int	O
updown_match	int
=	O
-	O
1	int
;	O
static	O
int	O
cmd_complete	()->(int)
(	O
)	O
;	O
static	O
int	O
in_completion	int
=	O
0	int
;	O
static	O
char	O
*	O
tk_text	*(char)
;	O
static	O
char	O
*	O
tk_original	*(char)
;	O
static	O
char	O
*	O
tk_ipoint	*(char)
;	O
static	O
char	O
*	O
tk_trial	*(char)
=	O
NULL	O
;	O
static	O
struct	O
textlist	struct(*(char),*(char))
tk_tlist	struct(*(char),*(char))
;	O
static	O
int	O
cmd_left	()->(int)
(	O
)	O
;	O
static	O
int	O
cmd_right	()->(int)
(	O
)	O
;	O
public	O
char	O
openquote	char
=	O
'"'	O
;	O
public	O
char	O
closequote	char
=	O
'"'	O
;	O
struct	O
mlist	*(void)
{	O
struct	O
mlist	*(void)
*	O
next	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
;	O
struct	O
mlist	*(void)
*	O
prev	*(char)
;	O
struct	O
mlist	*(void)
*	O
curr_mp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
;	O
char	O
*	O
string	*(char)
;	O
int	O
modified	int
;	O
}	O
;	O
struct	O
mlist	*(void)
mlist_search	struct(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(char),int)
=	O
{	O
&	O
mlist_search	struct(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(char),int)
,	O
&	O
mlist_search	struct(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(char),int)
,	O
&	O
mlist_search	struct(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(char),int)
,	O
NULL	O
,	O
0	int
}	O
;	O
public	O
void	O
*	O
ml_search	*(void)
=	O
(	O
void	O
*	O
)	O
&	O
mlist_search	struct(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(char),int)
;	O
struct	O
mlist	*(void)
mlist_examine	struct(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(char),int)
=	O
{	O
&	O
mlist_examine	struct(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(char),int)
,	O
&	O
mlist_examine	struct(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(char),int)
,	O
&	O
mlist_examine	struct(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(char),int)
,	O
NULL	O
,	O
0	int
}	O
;	O
public	O
void	O
*	O
ml_examine	*(void)
=	O
(	O
void	O
*	O
)	O
&	O
mlist_examine	struct(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(char),int)
;	O
struct	O
mlist	*(void)
mlist_shell	struct(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(char),int)
=	O
{	O
&	O
mlist_shell	struct(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(char),int)
,	O
&	O
mlist_shell	struct(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(char),int)
,	O
&	O
mlist_shell	struct(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(char),int)
,	O
NULL	O
,	O
0	int
}	O
;	O
public	O
void	O
*	O
ml_shell	*(void)
=	O
(	O
void	O
*	O
)	O
&	O
mlist_shell	struct(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(char),int)
;	O
static	O
struct	O
mlist	*(void)
*	O
curr_mlist	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
=	O
NULL	O
;	O
static	O
int	O
curr_cmdflags	int
;	O
static	O
char	O
cmd_mbc_buf	array(char)
[	O
MAX_UTF_CHAR_LEN	int
]	O
;	O
static	O
int	O
cmd_mbc_buf_len	int
;	O
static	O
int	O
cmd_mbc_buf_index	int
;	O
public	O
void	O
cmd_reset	()->(void)
(	O
)	O
{	O
cp	*(char)
=	O
cmdbuf	array(char)
;	O
*	O
cp	*(char)
=	O
'\0'	O
;	O
cmd_col	int
=	O
0	int
;	O
cmd_offset	int
=	O
0	int
;	O
literal	int
=	O
0	int
;	O
cmd_mbc_buf_len	int
=	O
0	int
;	O
updown_match	int
=	O
-	O
1	int
;	O
}	O
public	O
void	O
clear_cmd	()->(void)
(	O
)	O
{	O
cmd_col	int
=	O
prompt_col	int
=	O
0	int
;	O
cmd_mbc_buf_len	int
=	O
0	int
;	O
updown_match	int
=	O
-	O
1	int
;	O
}	O
public	O
void	O
cmd_putstr	(*(char))->(void)
(	O
s	*(char)
)	O
constant	O
char	O
*	O
s	*(char)
;	O
{	O
LWCHAR	long
prev_ch	long
=	O
0	int
;	O
LWCHAR	long
ch	long
;	O
constant	O
char	O
*	O
endline	int
=	O
s	*(char)
+	O
strlen	(*(char))->(long)
(	O
s	*(char)
)	O
;	O
while	O
(	O
*	O
s	*(char)
!=	O
'\0'	O
)	O
{	O
char	O
*	O
ns	*(char)
=	O
(	O
char	O
*	O
)	O
s	*(char)
;	O
int	O
width	int
;	O
ch	long
=	O
step_char	(*(*(char)),int,*(char))->(long)
(	O
&	O
ns	*(char)
,	O
+	O
1	int
,	O
endline	int
)	O
;	O
while	O
(	O
s	*(char)
<	O
ns	*(char)
)	O
putchr	(int)->(int)
(	O
*	O
s	*(char)
++	O
)	O
;	O
if	O
(	O
!	O
utf_mode	int
)	O
width	int
=	O
1	int
;	O
else	O
if	O
(	O
is_composing_char	(long)->(int)
(	O
ch	long
)	O
||	O
is_combining_char	(long,long)->(int)
(	O
prev_ch	long
,	O
ch	long
)	O
)	O
width	int
=	O
0	int
;	O
else	O
width	int
=	O
is_wide_char	(long)->(int)
(	O
ch	long
)	O
?	O
2	int
:	O
1	int
;	O
cmd_col	int
+=	O
width	int
;	O
prompt_col	int
+=	O
width	int
;	O
prev_ch	long
=	O
ch	long
;	O
}	O
}	O
public	O
int	O
len_cmdbuf	()->(int)
(	O
)	O
{	O
char	O
*	O
s	*(char)
=	O
cmdbuf	array(char)
;	O
char	O
*	O
endline	int
=	O
s	*(char)
+	O
strlen	(*(char))->(long)
(	O
s	*(char)
)	O
;	O
int	O
len	int
=	O
0	int
;	O
while	O
(	O
*	O
s	*(char)
!=	O
'\0'	O
)	O
{	O
step_char	(*(*(char)),int,*(char))->(long)
(	O
&	O
s	*(char)
,	O
+	O
1	int
,	O
endline	int
)	O
;	O
len	int
++	O
;	O
}	O
return	O
(	O
len	int
)	O
;	O
}	O
static	O
char	O
*	O
cmd_step_common	(*(char),long,int,*(int),*(int))->(*(char))
(	O
p	*(char)
,	O
ch	long
,	O
len	int
,	O
pwidth	*(int)
,	O
bswidth	*(int)
)	O
char	O
*	O
p	*(char)
;	O
LWCHAR	long
ch	long
;	O
int	O
len	int
;	O
int	O
*	O
pwidth	*(int)
;	O
int	O
*	O
bswidth	*(int)
;	O
{	O
char	O
*	O
pr	*(char)
;	O
int	O
width	int
;	O
if	O
(	O
len	int
==	O
1	int
)	O
{	O
pr	*(char)
=	O
prchar	(long)->(*(char))
(	O
(	O
int	O
)	O
ch	long
)	O
;	O
width	int
=	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
pr	*(char)
)	O
;	O
}	O
else	O
{	O
pr	*(char)
=	O
prutfchar	(long)->(*(char))
(	O
ch	long
)	O
;	O
if	O
(	O
is_composing_char	(long)->(int)
(	O
ch	long
)	O
)	O
width	int
=	O
0	int
;	O
else	O
if	O
(	O
is_ubin_char	(long)->(int)
(	O
ch	long
)	O
)	O
width	int
=	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
pr	*(char)
)	O
;	O
else	O
{	O
LWCHAR	long
prev_ch	long
=	O
step_char	(*(*(char)),int,*(char))->(long)
(	O
&	O
p	*(char)
,	O
-	O
1	int
,	O
cmdbuf	array(char)
)	O
;	O
if	O
(	O
is_combining_char	(long,long)->(int)
(	O
prev_ch	long
,	O
ch	long
)	O
)	O
width	int
=	O
0	int
;	O
else	O
width	int
=	O
is_wide_char	(long)->(int)
(	O
ch	long
)	O
?	O
2	int
:	O
1	int
;	O
}	O
}	O
if	O
(	O
pwidth	*(int)
!=	O
NULL	O
)	O
*	O
pwidth	*(int)
=	O
width	int
;	O
if	O
(	O
bswidth	*(int)
!=	O
NULL	O
)	O
*	O
bswidth	*(int)
=	O
width	int
;	O
return	O
(	O
pr	*(char)
)	O
;	O
}	O
static	O
char	O
*	O
cmd_step_right	(*(*(char)),*(int),*(int))->(*(char))
(	O
pp	*(*(char))
,	O
pwidth	*(int)
,	O
bswidth	*(int)
)	O
char	O
*	O
*	O
pp	*(*(char))
;	O
int	O
*	O
pwidth	*(int)
;	O
int	O
*	O
bswidth	*(int)
;	O
{	O
char	O
*	O
p	*(char)
=	O
*	O
pp	*(*(char))
;	O
LWCHAR	long
ch	long
=	O
step_char	(*(*(char)),int,*(char))->(long)
(	O
pp	*(*(char))
,	O
+	O
1	int
,	O
p	*(char)
+	O
strlen	(*(char))->(long)
(	O
p	*(char)
)	O
)	O
;	O
return	O
cmd_step_common	(*(char),long,int,*(int),*(int))->(*(char))
(	O
p	*(char)
,	O
ch	long
,	O
*	O
pp	*(*(char))
-	O
p	*(char)
,	O
pwidth	*(int)
,	O
bswidth	*(int)
)	O
;	O
}	O
static	O
char	O
*	O
cmd_step_left	(*(*(char)),*(int),*(int))->(*(char))
(	O
pp	*(*(char))
,	O
pwidth	*(int)
,	O
bswidth	*(int)
)	O
char	O
*	O
*	O
pp	*(*(char))
;	O
int	O
*	O
pwidth	*(int)
;	O
int	O
*	O
bswidth	*(int)
;	O
{	O
char	O
*	O
p	*(char)
=	O
*	O
pp	*(*(char))
;	O
LWCHAR	long
ch	long
=	O
step_char	(*(*(char)),int,*(char))->(long)
(	O
pp	*(*(char))
,	O
-	O
1	int
,	O
cmdbuf	array(char)
)	O
;	O
return	O
cmd_step_common	(*(char),long,int,*(int),*(int))->(*(char))
(	O
*	O
pp	*(*(char))
,	O
ch	long
,	O
p	*(char)
-	O
*	O
pp	*(*(char))
,	O
pwidth	*(int)
,	O
bswidth	*(int)
)	O
;	O
}	O
static	O
void	O
cmd_repaint	(*(char))->(void)
(	O
old_cp	*(char)
)	O
constant	O
char	O
*	O
old_cp	*(char)
;	O
{	O
clear_eol	()->(void)
(	O
)	O
;	O
while	O
(	O
*	O
cp	*(char)
!=	O
'\0'	O
)	O
{	O
char	O
*	O
np	*(char)
=	O
cp	*(char)
;	O
int	O
width	int
;	O
char	O
*	O
pr	*(char)
=	O
cmd_step_right	(*(*(char)),*(int),*(int))->(*(char))
(	O
&	O
np	*(char)
,	O
&	O
width	int
,	O
NULL	O
)	O
;	O
if	O
(	O
cmd_col	int
+	O
width	int
>=	O
sc_width	int
)	O
break	O
;	O
cp	*(char)
=	O
np	*(char)
;	O
putstr	(*(char))->(void)
(	O
pr	*(char)
)	O
;	O
cmd_col	int
+=	O
width	int
;	O
}	O
while	O
(	O
*	O
cp	*(char)
!=	O
'\0'	O
)	O
{	O
char	O
*	O
np	*(char)
=	O
cp	*(char)
;	O
int	O
width	int
;	O
char	O
*	O
pr	*(char)
=	O
cmd_step_right	(*(*(char)),*(int),*(int))->(*(char))
(	O
&	O
np	*(char)
,	O
&	O
width	int
,	O
NULL	O
)	O
;	O
if	O
(	O
width	int
>	O
0	int
)	O
break	O
;	O
cp	*(char)
=	O
np	*(char)
;	O
putstr	(*(char))->(void)
(	O
pr	*(char)
)	O
;	O
}	O
while	O
(	O
cp	*(char)
>	O
old_cp	*(char)
)	O
cmd_left	()->(int)
(	O
)	O
;	O
}	O
static	O
void	O
cmd_home	()->(void)
(	O
)	O
{	O
while	O
(	O
cmd_col	int
>	O
prompt_col	int
)	O
{	O
int	O
width	int
,	O
bswidth	*(int)
;	O
cmd_step_left	(*(*(char)),*(int),*(int))->(*(char))
(	O
&	O
cp	*(char)
,	O
&	O
width	int
,	O
&	O
bswidth	*(int)
)	O
;	O
while	O
(	O
bswidth	*(int)
--	O
>	O
0	int
)	O
putbs	()->(void)
(	O
)	O
;	O
cmd_col	int
-=	O
width	int
;	O
}	O
cp	*(char)
=	O
&	O
cmdbuf	array(char)
[	O
cmd_offset	int
]	O
;	O
}	O
static	O
void	O
cmd_lshift	()->(void)
(	O
)	O
{	O
char	O
*	O
s	*(char)
;	O
char	O
*	O
save_cp	*(char)
;	O
int	O
cols	int
;	O
s	*(char)
=	O
cmdbuf	array(char)
+	O
cmd_offset	int
;	O
cols	int
=	O
0	int
;	O
while	O
(	O
cols	int
<	O
(	O
sc_width	int
-	O
prompt_col	int
)	O
/	O
2	int
&&	O
*	O
s	*(char)
!=	O
'\0'	O
)	O
{	O
int	O
width	int
;	O
cmd_step_right	(*(*(char)),*(int),*(int))->(*(char))
(	O
&	O
s	*(char)
,	O
&	O
width	int
,	O
NULL	O
)	O
;	O
cols	int
+=	O
width	int
;	O
}	O
while	O
(	O
*	O
s	*(char)
!=	O
'\0'	O
)	O
{	O
int	O
width	int
;	O
char	O
*	O
ns	*(char)
=	O
s	*(char)
;	O
cmd_step_right	(*(*(char)),*(int),*(int))->(*(char))
(	O
&	O
ns	*(char)
,	O
&	O
width	int
,	O
NULL	O
)	O
;	O
if	O
(	O
width	int
>	O
0	int
)	O
break	O
;	O
s	*(char)
=	O
ns	*(char)
;	O
}	O
cmd_offset	int
=	O
(	O
int	O
)	O
(	O
s	*(char)
-	O
cmdbuf	array(char)
)	O
;	O
save_cp	*(char)
=	O
cp	*(char)
;	O
cmd_home	()->(void)
(	O
)	O
;	O
cmd_repaint	(*(char))->(void)
(	O
save_cp	*(char)
)	O
;	O
}	O
static	O
void	O
cmd_rshift	()->(void)
(	O
)	O
{	O
char	O
*	O
s	*(char)
;	O
char	O
*	O
save_cp	*(char)
;	O
int	O
cols	int
;	O
s	*(char)
=	O
cmdbuf	array(char)
+	O
cmd_offset	int
;	O
cols	int
=	O
0	int
;	O
while	O
(	O
cols	int
<	O
(	O
sc_width	int
-	O
prompt_col	int
)	O
/	O
2	int
&&	O
s	*(char)
>	O
cmdbuf	array(char)
)	O
{	O
int	O
width	int
;	O
cmd_step_left	(*(*(char)),*(int),*(int))->(*(char))
(	O
&	O
s	*(char)
,	O
&	O
width	int
,	O
NULL	O
)	O
;	O
cols	int
+=	O
width	int
;	O
}	O
cmd_offset	int
=	O
(	O
int	O
)	O
(	O
s	*(char)
-	O
cmdbuf	array(char)
)	O
;	O
save_cp	*(char)
=	O
cp	*(char)
;	O
cmd_home	()->(void)
(	O
)	O
;	O
cmd_repaint	(*(char))->(void)
(	O
save_cp	*(char)
)	O
;	O
}	O
static	O
int	O
cmd_right	()->(int)
(	O
)	O
{	O
char	O
*	O
pr	*(char)
;	O
char	O
*	O
ncp	*(char)
;	O
int	O
width	int
;	O
if	O
(	O
*	O
cp	*(char)
==	O
'\0'	O
)	O
{	O
return	O
(	O
CC_OK	int
)	O
;	O
}	O
ncp	*(char)
=	O
cp	*(char)
;	O
pr	*(char)
=	O
cmd_step_right	(*(*(char)),*(int),*(int))->(*(char))
(	O
&	O
ncp	*(char)
,	O
&	O
width	int
,	O
NULL	O
)	O
;	O
if	O
(	O
cmd_col	int
+	O
width	int
>=	O
sc_width	int
)	O
cmd_lshift	()->(void)
(	O
)	O
;	O
else	O
if	O
(	O
cmd_col	int
+	O
width	int
==	O
sc_width	int
-	O
1	int
&&	O
cp	*(char)
[	O
1	int
]	O
!=	O
'\0'	O
)	O
cmd_lshift	()->(void)
(	O
)	O
;	O
cp	*(char)
=	O
ncp	*(char)
;	O
cmd_col	int
+=	O
width	int
;	O
putstr	(*(char))->(void)
(	O
pr	*(char)
)	O
;	O
while	O
(	O
*	O
cp	*(char)
!=	O
'\0'	O
)	O
{	O
pr	*(char)
=	O
cmd_step_right	(*(*(char)),*(int),*(int))->(*(char))
(	O
&	O
ncp	*(char)
,	O
&	O
width	int
,	O
NULL	O
)	O
;	O
if	O
(	O
width	int
>	O
0	int
)	O
break	O
;	O
putstr	(*(char))->(void)
(	O
pr	*(char)
)	O
;	O
cp	*(char)
=	O
ncp	*(char)
;	O
}	O
return	O
(	O
CC_OK	int
)	O
;	O
}	O
static	O
int	O
cmd_left	()->(int)
(	O
)	O
{	O
char	O
*	O
ncp	*(char)
;	O
int	O
width	int
=	O
0	int
;	O
int	O
bswidth	*(int)
=	O
0	int
;	O
if	O
(	O
cp	*(char)
<=	O
cmdbuf	array(char)
)	O
{	O
return	O
(	O
CC_OK	int
)	O
;	O
}	O
ncp	*(char)
=	O
cp	*(char)
;	O
while	O
(	O
ncp	*(char)
>	O
cmdbuf	array(char)
)	O
{	O
cmd_step_left	(*(*(char)),*(int),*(int))->(*(char))
(	O
&	O
ncp	*(char)
,	O
&	O
width	int
,	O
&	O
bswidth	*(int)
)	O
;	O
if	O
(	O
width	int
>	O
0	int
)	O
break	O
;	O
}	O
if	O
(	O
cmd_col	int
<	O
prompt_col	int
+	O
width	int
)	O
cmd_rshift	()->(void)
(	O
)	O
;	O
cp	*(char)
=	O
ncp	*(char)
;	O
cmd_col	int
-=	O
width	int
;	O
while	O
(	O
bswidth	*(int)
--	O
>	O
0	int
)	O
putbs	()->(void)
(	O
)	O
;	O
return	O
(	O
CC_OK	int
)	O
;	O
}	O
static	O
int	O
cmd_ichar	(*(char),int)->(int)
(	O
cs	*(char)
,	O
clen	int
)	O
char	O
*	O
cs	*(char)
;	O
int	O
clen	int
;	O
{	O
char	O
*	O
s	*(char)
;	O
if	O
(	O
strlen	(*(char))->(long)
(	O
cmdbuf	array(char)
)	O
+	O
clen	int
>=	O
sizeof	O
(	O
cmdbuf	array(char)
)	O
-	O
1	int
)	O
{	O
bell	()->(void)
(	O
)	O
;	O
return	O
(	O
CC_ERROR	int
)	O
;	O
}	O
for	O
(	O
s	*(char)
=	O
&	O
cmdbuf	array(char)
[	O
strlen	(*(char))->(long)
(	O
cmdbuf	array(char)
)	O
]	O
;	O
s	*(char)
>=	O
cp	*(char)
;	O
s	*(char)
--	O
)	O
s	*(char)
[	O
clen	int
]	O
=	O
s	*(char)
[	O
0	int
]	O
;	O
for	O
(	O
s	*(char)
=	O
cp	*(char)
;	O
s	*(char)
<	O
cp	*(char)
+	O
clen	int
;	O
s	*(char)
++	O
)	O
*	O
s	*(char)
=	O
*	O
cs	*(char)
++	O
;	O
updown_match	int
=	O
-	O
1	int
;	O
cmd_repaint	(*(char))->(void)
(	O
cp	*(char)
)	O
;	O
cmd_right	()->(int)
(	O
)	O
;	O
return	O
(	O
CC_OK	int
)	O
;	O
}	O
static	O
int	O
cmd_erase	()->(int)
(	O
)	O
{	O
char	O
*	O
s	*(char)
;	O
int	O
clen	int
;	O
if	O
(	O
cp	*(char)
==	O
cmdbuf	array(char)
)	O
{	O
return	O
(	O
CC_QUIT	int
)	O
;	O
}	O
s	*(char)
=	O
cp	*(char)
;	O
cmd_left	()->(int)
(	O
)	O
;	O
clen	int
=	O
(	O
int	O
)	O
(	O
s	*(char)
-	O
cp	*(char)
)	O
;	O
for	O
(	O
s	*(char)
=	O
cp	*(char)
;	O
;	O
s	*(char)
++	O
)	O
{	O
s	*(char)
[	O
0	int
]	O
=	O
s	*(char)
[	O
clen	int
]	O
;	O
if	O
(	O
s	*(char)
[	O
0	int
]	O
==	O
'\0'	O
)	O
break	O
;	O
}	O
updown_match	int
=	O
-	O
1	int
;	O
cmd_repaint	(*(char))->(void)
(	O
cp	*(char)
)	O
;	O
if	O
(	O
(	O
curr_cmdflags	int
&	O
CF_QUIT_ON_ERASE	int
)	O
&&	O
cp	*(char)
==	O
cmdbuf	array(char)
&&	O
*	O
cp	*(char)
==	O
'\0'	O
)	O
return	O
(	O
CC_QUIT	int
)	O
;	O
return	O
(	O
CC_OK	int
)	O
;	O
}	O
static	O
int	O
cmd_delete	()->(int)
(	O
)	O
{	O
if	O
(	O
*	O
cp	*(char)
==	O
'\0'	O
)	O
{	O
return	O
(	O
CC_OK	int
)	O
;	O
}	O
cmd_right	()->(int)
(	O
)	O
;	O
cmd_erase	()->(int)
(	O
)	O
;	O
return	O
(	O
CC_OK	int
)	O
;	O
}	O
static	O
int	O
cmd_werase	()->(int)
(	O
)	O
{	O
if	O
(	O
cp	*(char)
>	O
cmdbuf	array(char)
&&	O
cp	*(char)
[	O
-	O
1	int
]	O
==	O
' '	O
)	O
{	O
while	O
(	O
cp	*(char)
>	O
cmdbuf	array(char)
&&	O
cp	*(char)
[	O
-	O
1	int
]	O
==	O
' '	O
)	O
(	O
void	O
)	O
cmd_erase	()->(int)
(	O
)	O
;	O
}	O
else	O
{	O
while	O
(	O
cp	*(char)
>	O
cmdbuf	array(char)
&&	O
cp	*(char)
[	O
-	O
1	int
]	O
!=	O
' '	O
)	O
(	O
void	O
)	O
cmd_erase	()->(int)
(	O
)	O
;	O
}	O
return	O
(	O
CC_OK	int
)	O
;	O
}	O
static	O
int	O
cmd_wdelete	()->(int)
(	O
)	O
{	O
if	O
(	O
*	O
cp	*(char)
==	O
' '	O
)	O
{	O
while	O
(	O
*	O
cp	*(char)
==	O
' '	O
)	O
(	O
void	O
)	O
cmd_delete	()->(int)
(	O
)	O
;	O
}	O
else	O
{	O
while	O
(	O
*	O
cp	*(char)
!=	O
' '	O
&&	O
*	O
cp	*(char)
!=	O
'\0'	O
)	O
(	O
void	O
)	O
cmd_delete	()->(int)
(	O
)	O
;	O
}	O
return	O
(	O
CC_OK	int
)	O
;	O
}	O
static	O
int	O
cmd_kill	()->(int)
(	O
)	O
{	O
if	O
(	O
cmdbuf	array(char)
[	O
0	int
]	O
==	O
'\0'	O
)	O
{	O
return	O
(	O
CC_QUIT	int
)	O
;	O
}	O
cmd_offset	int
=	O
0	int
;	O
cmd_home	()->(void)
(	O
)	O
;	O
*	O
cp	*(char)
=	O
'\0'	O
;	O
updown_match	int
=	O
-	O
1	int
;	O
cmd_repaint	(*(char))->(void)
(	O
cp	*(char)
)	O
;	O
if	O
(	O
curr_cmdflags	int
&	O
CF_QUIT_ON_ERASE	int
)	O
return	O
(	O
CC_QUIT	int
)	O
;	O
return	O
(	O
CC_OK	int
)	O
;	O
}	O
public	O
void	O
set_mlist	(*(void),int)->(void)
(	O
mlist	*(void)
,	O
cmdflags	int
)	O
void	O
*	O
mlist	*(void)
;	O
int	O
cmdflags	int
;	O
{	O
curr_mlist	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
=	O
(	O
struct	O
mlist	*(void)
*	O
)	O
mlist	*(void)
;	O
curr_cmdflags	int
=	O
cmdflags	int
;	O
if	O
(	O
curr_mlist	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
!=	O
NULL	O
)	O
curr_mlist	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
->	O
curr_mp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
=	O
curr_mlist	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
;	O
}	O
static	O
int	O
cmd_updown	(int)->(int)
(	O
action	int
)	O
int	O
action	int
;	O
{	O
constant	O
char	O
*	O
s	*(char)
;	O
struct	O
mlist	*(void)
*	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
;	O
if	O
(	O
curr_mlist	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
==	O
NULL	O
)	O
{	O
bell	()->(void)
(	O
)	O
;	O
return	O
(	O
CC_OK	int
)	O
;	O
}	O
if	O
(	O
updown_match	int
<	O
0	int
)	O
{	O
updown_match	int
=	O
(	O
int	O
)	O
(	O
cp	*(char)
-	O
cmdbuf	array(char)
)	O
;	O
}	O
for	O
(	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
=	O
curr_mlist	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
->	O
curr_mp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
;	O
;	O
)	O
{	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
=	O
(	O
action	int
==	O
EC_UP	int
)	O
?	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
->	O
prev	*(char)
:	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
;	O
if	O
(	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
==	O
curr_mlist	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
)	O
{	O
break	O
;	O
}	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
cmdbuf	array(char)
,	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
->	O
string	*(char)
,	O
updown_match	int
)	O
==	O
0	int
)	O
{	O
curr_mlist	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
->	O
curr_mp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
=	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
;	O
s	*(char)
=	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
->	O
string	*(char)
;	O
if	O
(	O
s	*(char)
==	O
NULL	O
)	O
s	*(char)
=	O
""	*(char)
;	O
cmd_home	()->(void)
(	O
)	O
;	O
clear_eol	()->(void)
(	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
cmdbuf	array(char)
,	O
s	*(char)
)	O
;	O
for	O
(	O
cp	*(char)
=	O
cmdbuf	array(char)
;	O
*	O
cp	*(char)
!=	O
'\0'	O
;	O
)	O
cmd_right	()->(int)
(	O
)	O
;	O
return	O
(	O
CC_OK	int
)	O
;	O
}	O
}	O
bell	()->(void)
(	O
)	O
;	O
return	O
(	O
CC_OK	int
)	O
;	O
}	O
public	O
void	O
cmd_addhist	(*(struct),*(char),int)->(void)
(	O
mlist	*(void)
,	O
cmd	*(char)
,	O
modified	int
)	O
struct	O
mlist	*(void)
*	O
mlist	*(void)
;	O
constant	O
char	O
*	O
cmd	*(char)
;	O
int	O
modified	int
;	O
{	O
struct	O
mlist	*(void)
*	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
;	O
if	O
(	O
strlen	(*(char))->(long)
(	O
cmd	*(char)
)	O
==	O
0	int
)	O
return	O
;	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
=	O
mlist	*(void)
->	O
prev	*(char)
;	O
if	O
(	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
==	O
mlist	*(void)
||	O
strcmp	(*(char),*(char))->(int)
(	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
->	O
string	*(char)
,	O
cmd	*(char)
)	O
!=	O
0	int
)	O
{	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
=	O
(	O
struct	O
mlist	*(void)
*	O
)	O
ecalloc	(int,int)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
struct	O
mlist	*(void)
)	O
)	O
;	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
->	O
string	*(char)
=	O
save	(*(char))->(*(char))
(	O
cmd	*(char)
)	O
;	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
->	O
modified	int
=	O
modified	int
;	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
=	O
mlist	*(void)
;	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
->	O
prev	*(char)
=	O
mlist	*(void)
->	O
prev	*(char)
;	O
mlist	*(void)
->	O
prev	*(char)
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
=	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
;	O
mlist	*(void)
->	O
prev	*(char)
=	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
;	O
}	O
mlist	*(void)
->	O
curr_mp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
=	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
;	O
}	O
public	O
void	O
cmd_accept	()->(void)
(	O
)	O
{	O
if	O
(	O
curr_mlist	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
==	O
NULL	O
)	O
return	O
;	O
cmd_addhist	(*(struct),*(char),int)->(void)
(	O
curr_mlist	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
,	O
cmdbuf	array(char)
,	O
1	int
)	O
;	O
curr_mlist	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
->	O
modified	int
=	O
1	int
;	O
}	O
static	O
int	O
cmd_edit	(int)->(int)
(	O
c	int
)	O
int	O
c	int
;	O
{	O
int	O
action	int
;	O
int	O
flags	int
;	O
flags	int
=	O
0	int
;	O
if	O
(	O
curr_mlist	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
==	O
NULL	O
)	O
flags	int
|=	O
EC_NOHISTORY	int
;	O
if	O
(	O
curr_mlist	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
==	O
ml_search	*(void)
)	O
flags	int
|=	O
EC_NOCOMPLETE	int
;	O
action	int
=	O
editchar	(int,int)->(int)
(	O
c	int
,	O
flags	int
)	O
;	O
switch	O
(	O
action	int
)	O
{	O
case	O
EC_RIGHT	int
:	O
not_in_completion	O
(	O
)	O
;	O
return	O
(	O
cmd_right	()->(int)
(	O
)	O
)	O
;	O
case	O
EC_LEFT	int
:	O
not_in_completion	O
(	O
)	O
;	O
return	O
(	O
cmd_left	()->(int)
(	O
)	O
)	O
;	O
case	O
EC_W_RIGHT	int
:	O
not_in_completion	O
(	O
)	O
;	O
while	O
(	O
*	O
cp	*(char)
!=	O
'\0'	O
&&	O
*	O
cp	*(char)
!=	O
' '	O
)	O
cmd_right	()->(int)
(	O
)	O
;	O
while	O
(	O
*	O
cp	*(char)
==	O
' '	O
)	O
cmd_right	()->(int)
(	O
)	O
;	O
return	O
(	O
CC_OK	int
)	O
;	O
case	O
EC_W_LEFT	int
:	O
not_in_completion	O
(	O
)	O
;	O
while	O
(	O
cp	*(char)
>	O
cmdbuf	array(char)
&&	O
cp	*(char)
[	O
-	O
1	int
]	O
==	O
' '	O
)	O
cmd_left	()->(int)
(	O
)	O
;	O
while	O
(	O
cp	*(char)
>	O
cmdbuf	array(char)
&&	O
cp	*(char)
[	O
-	O
1	int
]	O
!=	O
' '	O
)	O
cmd_left	()->(int)
(	O
)	O
;	O
return	O
(	O
CC_OK	int
)	O
;	O
case	O
EC_HOME	int
:	O
not_in_completion	O
(	O
)	O
;	O
cmd_offset	int
=	O
0	int
;	O
cmd_home	()->(void)
(	O
)	O
;	O
cmd_repaint	(*(char))->(void)
(	O
cp	*(char)
)	O
;	O
return	O
(	O
CC_OK	int
)	O
;	O
case	O
EC_END	int
:	O
not_in_completion	O
(	O
)	O
;	O
while	O
(	O
*	O
cp	*(char)
!=	O
'\0'	O
)	O
cmd_right	()->(int)
(	O
)	O
;	O
return	O
(	O
CC_OK	int
)	O
;	O
case	O
EC_INSERT	int
:	O
not_in_completion	O
(	O
)	O
;	O
return	O
(	O
CC_OK	int
)	O
;	O
case	O
EC_BACKSPACE	int
:	O
not_in_completion	O
(	O
)	O
;	O
return	O
(	O
cmd_erase	()->(int)
(	O
)	O
)	O
;	O
case	O
EC_LINEKILL	int
:	O
not_in_completion	O
(	O
)	O
;	O
return	O
(	O
cmd_kill	()->(int)
(	O
)	O
)	O
;	O
case	O
EC_ABORT	int
:	O
not_in_completion	O
(	O
)	O
;	O
(	O
void	O
)	O
cmd_kill	()->(int)
(	O
)	O
;	O
return	O
(	O
CC_QUIT	int
)	O
;	O
case	O
EC_W_BACKSPACE	int
:	O
not_in_completion	O
(	O
)	O
;	O
return	O
(	O
cmd_werase	()->(int)
(	O
)	O
)	O
;	O
case	O
EC_DELETE	int
:	O
not_in_completion	O
(	O
)	O
;	O
return	O
(	O
cmd_delete	()->(int)
(	O
)	O
)	O
;	O
case	O
EC_W_DELETE	int
:	O
not_in_completion	O
(	O
)	O
;	O
return	O
(	O
cmd_wdelete	()->(int)
(	O
)	O
)	O
;	O
case	O
EC_LITERAL	int
:	O
literal	int
=	O
1	int
;	O
return	O
(	O
CC_OK	int
)	O
;	O
case	O
EC_UP	int
:	O
case	O
EC_DOWN	int
:	O
not_in_completion	O
(	O
)	O
;	O
return	O
(	O
cmd_updown	(int)->(int)
(	O
action	int
)	O
)	O
;	O
case	O
EC_F_COMPLETE	int
:	O
case	O
EC_B_COMPLETE	int
:	O
case	O
EC_EXPAND	int
:	O
return	O
(	O
cmd_complete	()->(int)
(	O
action	int
)	O
)	O
;	O
case	O
EC_NOACTION	int
:	O
return	O
(	O
CC_OK	int
)	O
;	O
default	O
:	O
not_in_completion	O
(	O
)	O
;	O
return	O
(	O
CC_PASS	int
)	O
;	O
}	O
}	O
static	O
int	O
cmd_istr	(*(char))->(int)
(	O
str	*(char)
)	O
char	O
*	O
str	*(char)
;	O
{	O
char	O
*	O
s	*(char)
;	O
int	O
action	int
;	O
char	O
*	O
endline	int
=	O
str	*(char)
+	O
strlen	(*(char))->(long)
(	O
str	*(char)
)	O
;	O
for	O
(	O
s	*(char)
=	O
str	*(char)
;	O
*	O
s	*(char)
!=	O
'\0'	O
;	O
)	O
{	O
char	O
*	O
os	*(char)
=	O
s	*(char)
;	O
step_char	(*(*(char)),int,*(char))->(long)
(	O
&	O
s	*(char)
,	O
+	O
1	int
,	O
endline	int
)	O
;	O
action	int
=	O
cmd_ichar	(*(char),int)->(int)
(	O
os	*(char)
,	O
s	*(char)
-	O
os	*(char)
)	O
;	O
if	O
(	O
action	int
!=	O
CC_OK	int
)	O
{	O
bell	()->(void)
(	O
)	O
;	O
return	O
(	O
action	int
)	O
;	O
}	O
}	O
return	O
(	O
CC_OK	int
)	O
;	O
}	O
static	O
char	O
*	O
delimit_word	()->(*(char))
(	O
)	O
{	O
char	O
*	O
word	*(char)
;	O
char	O
*	O
p	*(char)
;	O
int	O
delim_quoted	int
=	O
0	int
;	O
int	O
meta_quoted	int
=	O
0	int
;	O
constant	O
char	O
*	O
esc	*(char)
=	O
get_meta_escape	()->(*(char))
(	O
)	O
;	O
int	O
esclen	int
=	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
esc	*(char)
)	O
;	O
if	O
(	O
*	O
cp	*(char)
!=	O
' '	O
&&	O
*	O
cp	*(char)
!=	O
'\0'	O
)	O
{	O
while	O
(	O
*	O
cp	*(char)
!=	O
' '	O
&&	O
*	O
cp	*(char)
!=	O
'\0'	O
)	O
cmd_right	()->(int)
(	O
)	O
;	O
}	O
else	O
if	O
(	O
cp	*(char)
>	O
cmdbuf	array(char)
&&	O
cp	*(char)
[	O
-	O
1	int
]	O
!=	O
' '	O
)	O
{	O
;	O
}	O
if	O
(	O
cp	*(char)
==	O
cmdbuf	array(char)
)	O
return	O
(	O
NULL	O
)	O
;	O
for	O
(	O
word	*(char)
=	O
cmdbuf	array(char)
;	O
word	*(char)
<	O
cp	*(char)
;	O
word	*(char)
++	O
)	O
if	O
(	O
*	O
word	*(char)
!=	O
' '	O
)	O
break	O
;	O
if	O
(	O
word	*(char)
>=	O
cp	*(char)
)	O
return	O
(	O
cp	*(char)
)	O
;	O
for	O
(	O
p	*(char)
=	O
cmdbuf	array(char)
;	O
p	*(char)
<	O
cp	*(char)
;	O
p	*(char)
++	O
)	O
{	O
if	O
(	O
meta_quoted	int
)	O
{	O
meta_quoted	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
esclen	int
>	O
0	int
&&	O
p	*(char)
+	O
esclen	int
<	O
cp	*(char)
&&	O
strncmp	(*(char),*(char),long)->(int)
(	O
p	*(char)
,	O
esc	*(char)
,	O
esclen	int
)	O
==	O
0	int
)	O
{	O
meta_quoted	int
=	O
1	int
;	O
p	*(char)
+=	O
esclen	int
-	O
1	int
;	O
}	O
else	O
if	O
(	O
delim_quoted	int
)	O
{	O
if	O
(	O
*	O
p	*(char)
==	O
closequote	char
)	O
delim_quoted	int
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
*	O
p	*(char)
==	O
openquote	char
)	O
delim_quoted	int
=	O
1	int
;	O
else	O
if	O
(	O
*	O
p	*(char)
==	O
' '	O
)	O
word	*(char)
=	O
p	*(char)
+	O
1	int
;	O
}	O
}	O
return	O
(	O
word	*(char)
)	O
;	O
}	O
static	O
void	O
init_compl	()->(void)
(	O
)	O
{	O
char	O
*	O
word	*(char)
;	O
char	O
c	int
;	O
if	O
(	O
tk_text	*(char)
!=	O
NULL	O
)	O
{	O
free	(*(void))->(void)
(	O
tk_text	*(char)
)	O
;	O
tk_text	*(char)
=	O
NULL	O
;	O
}	O
word	*(char)
=	O
delimit_word	()->(*(char))
(	O
)	O
;	O
if	O
(	O
word	*(char)
==	O
NULL	O
)	O
return	O
;	O
tk_ipoint	*(char)
=	O
word	*(char)
;	O
if	O
(	O
tk_original	*(char)
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
tk_original	*(char)
)	O
;	O
tk_original	*(char)
=	O
(	O
char	O
*	O
)	O
ecalloc	(int,int)->(*(void))
(	O
cp	*(char)
-	O
word	*(char)
+	O
1	int
,	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
tk_original	*(char)
,	O
word	*(char)
,	O
cp	*(char)
-	O
word	*(char)
)	O
;	O
c	int
=	O
*	O
cp	*(char)
;	O
*	O
cp	*(char)
=	O
'\0'	O
;	O
if	O
(	O
*	O
word	*(char)
!=	O
openquote	char
)	O
{	O
tk_text	*(char)
=	O
fcomplete	(*(char))->(*(char))
(	O
word	*(char)
)	O
;	O
}	O
else	O
{	O
char	O
*	O
qword	*(char)
=	O
shell_quote	(*(char))->(*(char))
(	O
word	*(char)
+	O
1	int
)	O
;	O
if	O
(	O
qword	*(char)
==	O
NULL	O
)	O
tk_text	*(char)
=	O
fcomplete	(*(char))->(*(char))
(	O
word	*(char)
+	O
1	int
)	O
;	O
else	O
{	O
tk_text	*(char)
=	O
fcomplete	(*(char))->(*(char))
(	O
qword	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
qword	*(char)
)	O
;	O
}	O
}	O
*	O
cp	*(char)
=	O
c	int
;	O
}	O
static	O
char	O
*	O
next_compl	(int,*(char))->(*(char))
(	O
action	int
,	O
prev	*(char)
)	O
int	O
action	int
;	O
char	O
*	O
prev	*(char)
;	O
{	O
switch	O
(	O
action	int
)	O
{	O
case	O
EC_F_COMPLETE	int
:	O
return	O
(	O
forw_textlist	(*(struct(*(char),*(char))),*(char))->(*(char))
(	O
&	O
tk_tlist	struct(*(char),*(char))
,	O
prev	*(char)
)	O
)	O
;	O
case	O
EC_B_COMPLETE	int
:	O
return	O
(	O
back_textlist	(*(struct(*(char),*(char))),*(char))->(*(char))
(	O
&	O
tk_tlist	struct(*(char),*(char))
,	O
prev	*(char)
)	O
)	O
;	O
}	O
return	O
(	O
"?"	*(char)
)	O
;	O
}	O
static	O
int	O
cmd_complete	()->(int)
(	O
action	int
)	O
int	O
action	int
;	O
{	O
char	O
*	O
s	*(char)
;	O
if	O
(	O
!	O
in_completion	int
||	O
action	int
==	O
EC_EXPAND	int
)	O
{	O
init_compl	()->(void)
(	O
)	O
;	O
if	O
(	O
tk_text	*(char)
==	O
NULL	O
)	O
{	O
bell	()->(void)
(	O
)	O
;	O
return	O
(	O
CC_OK	int
)	O
;	O
}	O
if	O
(	O
action	int
==	O
EC_EXPAND	int
)	O
{	O
tk_trial	*(char)
=	O
tk_text	*(char)
;	O
}	O
else	O
{	O
in_completion	int
=	O
1	int
;	O
init_textlist	(*(struct(*(char),*(char))),*(char))->(void)
(	O
&	O
tk_tlist	struct(*(char),*(char))
,	O
tk_text	*(char)
)	O
;	O
tk_trial	*(char)
=	O
next_compl	(int,*(char))->(*(char))
(	O
action	int
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
}	O
else	O
{	O
tk_trial	*(char)
=	O
next_compl	(int,*(char))->(*(char))
(	O
action	int
,	O
tk_trial	*(char)
)	O
;	O
}	O
while	O
(	O
cp	*(char)
>	O
tk_ipoint	*(char)
)	O
(	O
void	O
)	O
cmd_erase	()->(int)
(	O
)	O
;	O
if	O
(	O
tk_trial	*(char)
==	O
NULL	O
)	O
{	O
in_completion	int
=	O
0	int
;	O
if	O
(	O
cmd_istr	(*(char))->(int)
(	O
tk_original	*(char)
)	O
!=	O
CC_OK	int
)	O
goto	O
fail	O
;	O
}	O
else	O
{	O
if	O
(	O
cmd_istr	(*(char))->(int)
(	O
tk_trial	*(char)
)	O
!=	O
CC_OK	int
)	O
goto	O
fail	O
;	O
if	O
(	O
is_dir	(*(char))->(int)
(	O
tk_trial	*(char)
)	O
)	O
{	O
if	O
(	O
cp	*(char)
>	O
cmdbuf	array(char)
&&	O
cp	*(char)
[	O
-	O
1	int
]	O
==	O
closequote	char
)	O
(	O
void	O
)	O
cmd_erase	()->(int)
(	O
)	O
;	O
s	*(char)
=	O
lgetenv	(*(char))->(*(char))
(	O
"LESSSEPARATOR"	*(char)
)	O
;	O
if	O
(	O
s	*(char)
==	O
NULL	O
)	O
s	*(char)
=	O
PATHNAME_SEP	*(char)
;	O
if	O
(	O
cmd_istr	(*(char))->(int)
(	O
s	*(char)
)	O
!=	O
CC_OK	int
)	O
goto	O
fail	O
;	O
}	O
}	O
return	O
(	O
CC_OK	int
)	O
;	O
fail	O
:	O
in_completion	int
=	O
0	int
;	O
bell	()->(void)
(	O
)	O
;	O
return	O
(	O
CC_OK	int
)	O
;	O
}	O
public	O
int	O
cmd_char	(int)->(int)
(	O
c	int
)	O
int	O
c	int
;	O
{	O
int	O
action	int
;	O
int	O
len	int
;	O
if	O
(	O
!	O
utf_mode	int
)	O
{	O
cmd_mbc_buf	array(char)
[	O
0	int
]	O
=	O
c	int
;	O
len	int
=	O
1	int
;	O
}	O
else	O
{	O
if	O
(	O
cmd_mbc_buf_len	int
==	O
0	int
)	O
{	O
retry	O
:	O
cmd_mbc_buf_index	int
=	O
1	int
;	O
*	O
cmd_mbc_buf	array(char)
=	O
c	int
;	O
if	O
(	O
IS_ASCII_OCTET	O
(	O
c	int
)	O
)	O
cmd_mbc_buf_len	int
=	O
1	int
;	O
else	O
if	O
(	O
IS_UTF8_LEAD	O
(	O
c	int
)	O
)	O
{	O
cmd_mbc_buf_len	int
=	O
utf_len	(char)->(int)
(	O
c	int
)	O
;	O
return	O
(	O
CC_OK	int
)	O
;	O
}	O
else	O
{	O
bell	()->(void)
(	O
)	O
;	O
return	O
(	O
CC_ERROR	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
IS_UTF8_TRAIL	O
(	O
c	int
)	O
)	O
{	O
cmd_mbc_buf	array(char)
[	O
cmd_mbc_buf_index	int
++	O
]	O
=	O
c	int
;	O
if	O
(	O
cmd_mbc_buf_index	int
<	O
cmd_mbc_buf_len	int
)	O
return	O
(	O
CC_OK	int
)	O
;	O
if	O
(	O
!	O
is_utf8_well_formed	(*(char),int)->(int)
(	O
cmd_mbc_buf	array(char)
,	O
cmd_mbc_buf_index	int
)	O
)	O
{	O
cmd_mbc_buf_len	int
=	O
0	int
;	O
bell	()->(void)
(	O
)	O
;	O
return	O
(	O
CC_ERROR	int
)	O
;	O
}	O
}	O
else	O
{	O
cmd_mbc_buf_len	int
=	O
0	int
;	O
bell	()->(void)
(	O
)	O
;	O
goto	O
retry	O
;	O
}	O
len	int
=	O
cmd_mbc_buf_len	int
;	O
cmd_mbc_buf_len	int
=	O
0	int
;	O
}	O
if	O
(	O
literal	int
)	O
{	O
literal	int
=	O
0	int
;	O
return	O
(	O
cmd_ichar	(*(char),int)->(int)
(	O
cmd_mbc_buf	array(char)
,	O
len	int
)	O
)	O
;	O
}	O
if	O
(	O
in_mca	()->(int)
(	O
)	O
&&	O
len	int
==	O
1	int
)	O
{	O
action	int
=	O
cmd_edit	(int)->(int)
(	O
c	int
)	O
;	O
switch	O
(	O
action	int
)	O
{	O
case	O
CC_OK	int
:	O
case	O
CC_QUIT	int
:	O
return	O
(	O
action	int
)	O
;	O
case	O
CC_PASS	int
:	O
break	O
;	O
}	O
}	O
return	O
(	O
cmd_ichar	(*(char),int)->(int)
(	O
cmd_mbc_buf	array(char)
,	O
len	int
)	O
)	O
;	O
}	O
public	O
LINENUM	long
cmd_int	(*(long))->(long)
(	O
frac	*(long)
)	O
long	O
*	O
frac	*(long)
;	O
{	O
char	O
*	O
p	*(char)
;	O
LINENUM	long
n	int
=	O
0	int
;	O
int	O
err	int
;	O
for	O
(	O
p	*(char)
=	O
cmdbuf	array(char)
;	O
*	O
p	*(char)
>=	O
'0'	O
&&	O
*	O
p	*(char)
<=	O
'9'	O
;	O
p	*(char)
++	O
)	O
n	int
=	O
(	O
n	int
*	O
10	int
)	O
+	O
(	O
*	O
p	*(char)
-	O
'0'	O
)	O
;	O
*	O
frac	*(long)
=	O
0	int
;	O
if	O
(	O
*	O
p	*(char)
++	O
==	O
'.'	O
)	O
{	O
*	O
frac	*(long)
=	O
getfraction	(*(*(char)),*(char),*(int))->(long)
(	O
&	O
p	*(char)
,	O
NULL	O
,	O
&	O
err	int
)	O
;	O
}	O
return	O
(	O
n	int
)	O
;	O
}	O
public	O
char	O
*	O
get_cmdbuf	()->(*(char))
(	O
)	O
{	O
return	O
(	O
cmdbuf	array(char)
)	O
;	O
}	O
public	O
char	O
*	O
cmd_lastpattern	()->(*(char))
(	O
)	O
{	O
if	O
(	O
curr_mlist	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
==	O
NULL	O
)	O
return	O
(	O
NULL	O
)	O
;	O
return	O
(	O
curr_mlist	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
->	O
curr_mp	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
->	O
prev	*(char)
->	O
string	*(char)
)	O
;	O
}	O
static	O
int	O
mlist_size	(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)))->(int)
(	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
)	O
struct	O
mlist	*(void)
*	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
;	O
{	O
int	O
size	int
=	O
0	int
;	O
for	O
(	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
=	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
;	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
->	O
string	*(char)
!=	O
NULL	O
;	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
=	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
)	O
++	O
size	int
;	O
return	O
size	int
;	O
}	O
static	O
char	O
*	O
histfile_name	()->(*(char))
(	O
)	O
{	O
char	O
*	O
home	()->(void)
;	O
char	O
*	O
name	*(char)
;	O
int	O
len	int
;	O
name	*(char)
=	O
lgetenv	(*(char))->(*(char))
(	O
"LESSHISTFILE"	*(char)
)	O
;	O
if	O
(	O
name	*(char)
!=	O
NULL	O
&&	O
*	O
name	*(char)
!=	O
'\0'	O
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
"-"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
"/dev/null"	*(char)
)	O
==	O
0	int
)	O
return	O
(	O
NULL	O
)	O
;	O
return	O
(	O
save	(*(char))->(*(char))
(	O
name	*(char)
)	O
)	O
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
LESSHISTFILE	*(char)
,	O
""	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
LESSHISTFILE	*(char)
,	O
"-"	*(char)
)	O
==	O
0	int
)	O
return	O
(	O
NULL	O
)	O
;	O
home	()->(void)
=	O
lgetenv	(*(char))->(*(char))
(	O
"HOME"	*(char)
)	O
;	O
if	O
(	O
home	()->(void)
==	O
NULL	O
||	O
*	O
home	()->(void)
==	O
'\0'	O
)	O
{	O
return	O
(	O
NULL	O
)	O
;	O
}	O
len	int
=	O
(	O
int	O
)	O
(	O
strlen	(*(char))->(long)
(	O
home	()->(void)
)	O
+	O
strlen	(*(char))->(long)
(	O
LESSHISTFILE	*(char)
)	O
+	O
2	int
)	O
;	O
name	*(char)
=	O
(	O
char	O
*	O
)	O
ecalloc	(int,int)->(*(void))
(	O
len	int
,	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
SNPRINTF2	O
(	O
name	*(char)
,	O
len	int
,	O
"%s/%s"	*(char)
,	O
home	()->(void)
,	O
LESSHISTFILE	*(char)
)	O
;	O
return	O
(	O
name	*(char)
)	O
;	O
}	O
static	O
void	O
read_cmdhist2	(*((*(void),*(struct(*`,*`,*`,*`,int)),*(char))->(void)),*(void),int,int)->(void)
(	O
action	int
,	O
uparam	*(void)
,	O
skip_search	int
,	O
skip_shell	int
)	O
void	O
(	O
*	O
action	int
)	O
(	O
void	O
*	O
,	O
struct	O
mlist	*(void)
*	O
,	O
char	O
*	O
)	O
;	O
void	O
*	O
uparam	*(void)
;	O
int	O
skip_search	int
;	O
int	O
skip_shell	int
;	O
{	O
struct	O
mlist	*(void)
*	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
=	O
NULL	O
;	O
char	O
line	*(char)
[	O
CMDBUF_SIZE	int
]	O
;	O
char	O
*	O
filename	*(char)
;	O
FILE	struct
*	O
f	int
;	O
char	O
*	O
p	*(char)
;	O
int	O
*	O
skip	*(int)
=	O
NULL	O
;	O
filename	*(char)
=	O
histfile_name	()->(*(char))
(	O
)	O
;	O
if	O
(	O
filename	*(char)
==	O
NULL	O
)	O
return	O
;	O
f	int
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
filename	*(char)
,	O
"r"	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
filename	*(char)
)	O
;	O
if	O
(	O
f	int
==	O
NULL	O
)	O
return	O
;	O
if	O
(	O
fgets	(*(char),int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(char))
(	O
line	*(char)
,	O
sizeof	O
(	O
line	*(char)
)	O
,	O
f	int
)	O
==	O
NULL	O
||	O
strncmp	(*(char),*(char),long)->(int)
(	O
line	*(char)
,	O
HISTFILE_FIRST_LINE	*(char)
,	O
strlen	(*(char))->(long)
(	O
HISTFILE_FIRST_LINE	*(char)
)	O
)	O
!=	O
0	int
)	O
{	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
f	int
)	O
;	O
return	O
;	O
}	O
while	O
(	O
fgets	(*(char),int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(char))
(	O
line	*(char)
,	O
sizeof	O
(	O
line	*(char)
)	O
,	O
f	int
)	O
!=	O
NULL	O
)	O
{	O
for	O
(	O
p	*(char)
=	O
line	*(char)
;	O
*	O
p	*(char)
!=	O
'\0'	O
;	O
p	*(char)
++	O
)	O
{	O
if	O
(	O
*	O
p	*(char)
==	O
'\n'	O
||	O
*	O
p	*(char)
==	O
'\r'	O
)	O
{	O
*	O
p	*(char)
=	O
'\0'	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
line	*(char)
,	O
HISTFILE_SEARCH_SECTION	*(char)
)	O
==	O
0	int
)	O
{	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
=	O
&	O
mlist_search	struct(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(char),int)
;	O
skip	*(int)
=	O
&	O
skip_search	int
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
line	*(char)
,	O
HISTFILE_SHELL_SECTION	*(char)
)	O
==	O
0	int
)	O
{	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
=	O
&	O
mlist_shell	struct(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(char),int)
;	O
skip	*(int)
=	O
&	O
skip_shell	int
;	O
}	O
else	O
if	O
(	O
*	O
line	*(char)
==	O
'"'	O
)	O
{	O
if	O
(	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
!=	O
NULL	O
)	O
{	O
if	O
(	O
skip	*(int)
!=	O
NULL	O
&&	O
*	O
skip	*(int)
>	O
0	int
)	O
--	O
(	O
*	O
skip	*(int)
)	O
;	O
else	O
(	O
*	O
action	int
)	O
(	O
uparam	*(void)
,	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
,	O
line	*(char)
+	O
1	int
)	O
;	O
}	O
}	O
}	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
f	int
)	O
;	O
}	O
static	O
void	O
read_cmdhist	(*((*(void),*(struct(*`,*`,*`,*`,int)),*(char))->(void)),*(void),int,int)->(void)
(	O
action	int
,	O
uparam	*(void)
,	O
skip_search	int
,	O
skip_shell	int
)	O
void	O
(	O
*	O
action	int
)	O
(	O
void	O
*	O
,	O
struct	O
mlist	*(void)
*	O
,	O
char	O
*	O
)	O
;	O
void	O
*	O
uparam	*(void)
;	O
int	O
skip_search	int
;	O
int	O
skip_shell	int
;	O
{	O
read_cmdhist2	(*((*(void),*(struct(*`,*`,*`,*`,int)),*(char))->(void)),*(void),int,int)->(void)
(	O
action	int
,	O
uparam	*(void)
,	O
skip_search	int
,	O
skip_shell	int
)	O
;	O
(	O
*	O
action	int
)	O
(	O
uparam	*(void)
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
static	O
void	O
addhist_init	(*(void),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(char))->(void)
(	O
void	O
*	O
uparam	*(void)
,	O
struct	O
mlist	*(void)
*	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
,	O
char	O
*	O
string	*(char)
)	O
{	O
if	O
(	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
==	O
NULL	O
||	O
string	*(char)
==	O
NULL	O
)	O
return	O
;	O
cmd_addhist	(*(struct),*(char),int)->(void)
(	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
,	O
string	*(char)
,	O
0	int
)	O
;	O
}	O
public	O
void	O
init_cmdhist	()->(void)
(	O
)	O
{	O
read_cmdhist	(*((*(void),*(struct(*`,*`,*`,*`,int)),*(char))->(void)),*(void),int,int)->(void)
(	O
&	O
addhist_init	(*(void),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(char))->(void)
,	O
NULL	O
,	O
0	int
,	O
0	int
)	O
;	O
}	O
static	O
void	O
write_mlist_header	(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
,	O
f	int
)	O
struct	O
mlist	*(void)
*	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
;	O
FILE	struct
*	O
f	int
;	O
{	O
if	O
(	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
==	O
&	O
mlist_search	struct(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(char),int)
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
f	int
,	O
"%s\n"	*(char)
,	O
HISTFILE_SEARCH_SECTION	*(char)
)	O
;	O
else	O
if	O
(	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
==	O
&	O
mlist_shell	struct(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(char),int)
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
f	int
,	O
"%s\n"	*(char)
,	O
HISTFILE_SHELL_SECTION	*(char)
)	O
;	O
}	O
static	O
void	O
write_mlist	(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
,	O
f	int
)	O
struct	O
mlist	*(void)
*	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
;	O
FILE	struct
*	O
f	int
;	O
{	O
for	O
(	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
=	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
;	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
->	O
string	*(char)
!=	O
NULL	O
;	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
=	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
)	O
{	O
if	O
(	O
!	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
->	O
modified	int
)	O
continue	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
f	int
,	O
"\"%s\n"	*(char)
,	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
->	O
string	*(char)
)	O
;	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
->	O
modified	int
=	O
0	int
;	O
}	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
->	O
modified	int
=	O
0	int
;	O
}	O
static	O
char	O
*	O
make_tempname	(*(char))->(*(char))
(	O
filename	*(char)
)	O
char	O
*	O
filename	*(char)
;	O
{	O
char	O
lastch	char
;	O
char	O
*	O
tempname	*(char)
=	O
ecalloc	(int,int)->(*(void))
(	O
1	int
,	O
strlen	(*(char))->(long)
(	O
filename	*(char)
)	O
+	O
1	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
tempname	*(char)
,	O
filename	*(char)
)	O
;	O
lastch	char
=	O
tempname	*(char)
[	O
strlen	(*(char))->(long)
(	O
tempname	*(char)
)	O
-	O
1	int
]	O
;	O
tempname	*(char)
[	O
strlen	(*(char))->(long)
(	O
tempname	*(char)
)	O
-	O
1	int
]	O
=	O
(	O
lastch	char
==	O
'Q'	O
)	O
?	O
'Z'	O
:	O
'Q'	O
;	O
return	O
tempname	*(char)
;	O
}	O
struct	O
save_ctx	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))))
{	O
struct	O
mlist	*(void)
*	O
mlist	*(void)
;	O
FILE	struct
*	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
}	O
;	O
static	O
void	O
copy_hist	(*(void),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(char))->(void)
(	O
void	O
*	O
uparam	*(void)
,	O
struct	O
mlist	*(void)
*	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
,	O
char	O
*	O
string	*(char)
)	O
{	O
struct	O
save_ctx	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))))
*	O
ctx	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))
=	O
(	O
struct	O
save_ctx	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))))
*	O
)	O
uparam	*(void)
;	O
if	O
(	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
!=	O
ctx	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))
->	O
mlist	*(void)
)	O
{	O
if	O
(	O
ctx	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))
->	O
mlist	*(void)
)	O
write_mlist	(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
ctx	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))
->	O
mlist	*(void)
,	O
ctx	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))
->	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
ctx	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))
->	O
mlist	*(void)
=	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
;	O
write_mlist_header	(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
ctx	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))
->	O
mlist	*(void)
,	O
ctx	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))
->	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
if	O
(	O
string	*(char)
!=	O
NULL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
ctx	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))
->	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\"%s\n"	*(char)
,	O
string	*(char)
)	O
;	O
}	O
if	O
(	O
ml	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int))
==	O
NULL	O
)	O
{	O
if	O
(	O
mlist_search	struct(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(char),int)
.	O
modified	int
)	O
{	O
write_mlist_header	(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
&	O
mlist_search	struct(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(char),int)
,	O
ctx	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))
->	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
write_mlist	(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
&	O
mlist_search	struct(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(char),int)
,	O
ctx	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))
->	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
if	O
(	O
mlist_shell	struct(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(char),int)
.	O
modified	int
)	O
{	O
write_mlist_header	(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
&	O
mlist_shell	struct(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(char),int)
,	O
ctx	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))
->	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
write_mlist	(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
&	O
mlist_shell	struct(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(char),int)
,	O
ctx	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))
->	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
}	O
}	O
static	O
void	O
make_file_private	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
f	int
)	O
FILE	struct
*	O
f	int
;	O
{	O
int	O
do_chmod	int
=	O
1	int
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
int	O
r	int
=	O
fstat	(int,*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
fileno	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
f	int
)	O
,	O
&	O
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
;	O
if	O
(	O
r	int
<	O
0	int
||	O
!	O
S_ISREG	O
(	O
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
)	O
do_chmod	int
=	O
0	int
;	O
if	O
(	O
do_chmod	int
)	O
fchmod	(int,int)->(int)
(	O
fileno	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
f	int
)	O
,	O
0600	int
)	O
;	O
}	O
static	O
int	O
histfile_modified	()->(int)
(	O
)	O
{	O
if	O
(	O
mlist_search	struct(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(char),int)
.	O
modified	int
)	O
return	O
1	int
;	O
if	O
(	O
mlist_shell	struct(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(char),int)
.	O
modified	int
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
public	O
void	O
save_cmdhist	()->(void)
(	O
)	O
{	O
char	O
*	O
histname	*(char)
;	O
char	O
*	O
tempname	*(char)
;	O
int	O
skip_search	int
;	O
int	O
skip_shell	int
;	O
struct	O
save_ctx	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(char),int)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))))
ctx	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))
;	O
char	O
*	O
s	*(char)
;	O
FILE	struct
*	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
NULL	O
;	O
int	O
histsize	int
=	O
0	int
;	O
if	O
(	O
!	O
histfile_modified	()->(int)
(	O
)	O
)	O
return	O
;	O
histname	*(char)
=	O
histfile_name	()->(*(char))
(	O
)	O
;	O
if	O
(	O
histname	*(char)
==	O
NULL	O
)	O
return	O
;	O
tempname	*(char)
=	O
make_tempname	(*(char))->(*(char))
(	O
histname	*(char)
)	O
;	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
tempname	*(char)
,	O
"w"	*(char)
)	O
;	O
if	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
!=	O
NULL	O
)	O
{	O
make_file_private	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
s	*(char)
=	O
lgetenv	(*(char))->(*(char))
(	O
"LESSHISTSIZE"	*(char)
)	O
;	O
if	O
(	O
s	*(char)
!=	O
NULL	O
)	O
histsize	int
=	O
atoi	(*(char))->(int)
(	O
s	*(char)
)	O
;	O
if	O
(	O
histsize	int
<=	O
0	int
)	O
histsize	int
=	O
100	int
;	O
skip_search	int
=	O
mlist_size	(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)))->(int)
(	O
&	O
mlist_search	struct(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(char),int)
)	O
-	O
histsize	int
;	O
skip_shell	int
=	O
mlist_size	(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)))->(int)
(	O
&	O
mlist_shell	struct(*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(char),int)
)	O
-	O
histsize	int
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s\n"	*(char)
,	O
HISTFILE_FIRST_LINE	*(char)
)	O
;	O
ctx	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))
.	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
ctx	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))
.	O
mlist	*(void)
=	O
NULL	O
;	O
read_cmdhist	(*((*(void),*(struct(*`,*`,*`,*`,int)),*(char))->(void)),*(void),int,int)->(void)
(	O
copy_hist	(*(void),*(struct(*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(struct(*`,*`,*`,*`,int)),*(char),int)),*(char))->(void)
,	O
&	O
ctx	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(char),int)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))
,	O
skip_search	int
,	O
skip_shell	int
)	O
;	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
rename	(*(char),*(char))->(int)
(	O
tempname	*(char)
,	O
histname	*(char)
)	O
;	O
}	O
free	(*(void))->(void)
(	O
tempname	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
histname	*(char)
)	O
;	O
}	O
