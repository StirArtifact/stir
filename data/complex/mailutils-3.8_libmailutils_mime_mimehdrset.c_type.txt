struct	O
header_buffer	struct(*(struct),long,long)
{	O
mu_stream_t	*(struct)
str	*(char)
;	O
size_t	long
line_len	long
;	O
size_t	long
line_max	long
;	O
}	O
;	O
static	O
int	O
mime_store_parameter	(*(char),*(void),*(void))->(int)
(	O
char	O
const	O
*	O
name	*(char)
,	O
void	O
*	O
value	*(char)
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
mu_mime_param	struct(*(char),*(char),*(char))
*	O
p	*(struct(*(char),*(char),*(char)))
=	O
value	*(char)
;	O
struct	O
header_buffer	struct(*(struct),long,long)
*	O
hbuf	*(struct(*(struct),long,long))
=	O
data	*(void)
;	O
size_t	long
nlen	long
;	O
size_t	long
vlen	long
;	O
int	O
langinfo	int
;	O
int	O
quote	int
=	O
0	int
;	O
int	O
segment	int
=	O
-	O
1	int
;	O
mu_stream_t	*(struct)
valstr	*(struct)
;	O
mu_off_t	long
valsize	long
;	O
char	O
const	O
*	O
filter_name	*(char)
=	O
NULL	O
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_static_memory_stream_create	(*(*(struct)),*(void),long)->(int)
(	O
&	O
valstr	*(struct)
,	O
p	*(struct(*(char),*(char),*(char)))
->	O
value	*(char)
,	O
strlen	(*(char))->(long)
(	O
p	*(struct(*(char),*(char),*(char)))
->	O
value	*(char)
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
nlen	long
=	O
strlen	(*(char))->(long)
(	O
name	*(char)
)	O
;	O
if	O
(	O
p	*(struct(*(char),*(char),*(char)))
->	O
lang	*(char)
||	O
p	*(struct(*(char),*(char),*(char)))
->	O
cset	*(char)
)	O
{	O
vlen	long
=	O
2	int
;	O
if	O
(	O
p	*(struct(*(char),*(char),*(char)))
->	O
lang	*(char)
)	O
vlen	long
+=	O
strlen	(*(char))->(long)
(	O
p	*(struct(*(char),*(char),*(char)))
->	O
lang	*(char)
)	O
;	O
if	O
(	O
p	*(struct(*(char),*(char),*(char)))
->	O
cset	*(char)
)	O
vlen	long
+=	O
strlen	(*(char))->(long)
(	O
p	*(struct(*(char),*(char),*(char)))
->	O
cset	*(char)
)	O
;	O
langinfo	int
=	O
1	int
;	O
filter_name	*(char)
=	O
"percent"	*(char)
;	O
}	O
else	O
{	O
if	O
(	O
*	O
mu_str_skip_class_comp	(*(char),int)->(*(char))
(	O
p	*(struct(*(char),*(char),*(char)))
->	O
value	*(char)
,	O
MU_CTYPE_TSPEC	int
|	O
MU_CTYPE_BLANK	int
)	O
)	O
{	O
quote	int
=	O
2	int
;	O
filter_name	*(char)
=	O
"dq"	*(char)
;	O
}	O
else	O
quote	int
=	O
0	int
;	O
vlen	long
=	O
0	int
;	O
langinfo	int
=	O
0	int
;	O
}	O
if	O
(	O
filter_name	*(char)
)	O
{	O
mu_stream_t	*(struct)
tmp	*(struct)
;	O
rc	int
=	O
mu_filter_create	(*(*(struct)),*(struct),*(char),int,int)->(int)
(	O
&	O
tmp	*(struct)
,	O
valstr	*(struct)
,	O
filter_name	*(char)
,	O
MU_FILTER_ENCODE	int
,	O
MU_STREAM_READ	int
|	O
MU_STREAM_SEEK	int
)	O
;	O
if	O
(	O
rc	int
)	O
goto	O
err	O
;	O
mu_stream_unref	(*(struct))->(void)
(	O
valstr	*(struct)
)	O
;	O
valstr	*(struct)
=	O
tmp	*(struct)
;	O
rc	int
=	O
mu_memory_stream_create	(*(*(struct)),int)->(int)
(	O
&	O
tmp	*(struct)
,	O
MU_STREAM_RDWR	O
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
rc	int
=	O
mu_stream_copy	(*(struct),*(struct),long,*(long))->(int)
(	O
tmp	*(struct)
,	O
valstr	*(struct)
,	O
0	int
,	O
&	O
valsize	long
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
tmp	*(struct)
)	O
;	O
}	O
}	O
else	O
rc	int
=	O
mu_stream_size	(*(struct),*(long))->(int)
(	O
valstr	*(struct)
,	O
&	O
valsize	long
)	O
;	O
if	O
(	O
rc	int
)	O
goto	O
err	O
;	O
nlen	long
+=	O
langinfo	int
;	O
rc	int
=	O
mu_stream_seek	(*(struct),long,int,*(long))->(int)
(	O
valstr	*(struct)
,	O
0	int
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
if	O
(	O
hbuf	*(struct(*(struct),long,long))
->	O
line_max	long
==	O
0	int
)	O
{	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
hbuf	*(struct(*(struct),long,long))
->	O
str	*(char)
,	O
"%s"	*(char)
,	O
name	*(char)
)	O
;	O
if	O
(	O
langinfo	int
)	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
hbuf	*(struct(*(struct),long,long))
->	O
str	*(char)
,	O
"*"	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
hbuf	*(struct(*(struct),long,long))
->	O
str	*(char)
,	O
"="	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
if	O
(	O
vlen	long
)	O
{	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
hbuf	*(struct(*(struct),long,long))
->	O
str	*(char)
,	O
"%s'%s'"	*(char)
,	O
mu_prstr	(*(char))->(*(char))
(	O
p	*(struct(*(char),*(char),*(char)))
->	O
lang	*(char)
)	O
,	O
mu_prstr	(*(char))->(*(char))
(	O
p	*(struct(*(char),*(char),*(char)))
->	O
cset	*(char)
)	O
)	O
;	O
vlen	long
=	O
0	int
;	O
}	O
else	O
if	O
(	O
quote	int
)	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
hbuf	*(struct(*(struct),long,long))
->	O
str	*(char)
,	O
"\""	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
mu_stream_copy	(*(struct),*(struct),long,*(long))->(int)
(	O
hbuf	*(struct(*(struct),long,long))
->	O
str	*(char)
,	O
valstr	*(struct)
,	O
0	int
,	O
NULL	O
)	O
;	O
if	O
(	O
quote	int
)	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
hbuf	*(struct(*(struct),long,long))
->	O
str	*(char)
,	O
"\""	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
if	O
(	O
mu_stream_err	(*(struct))->(int)
(	O
hbuf	*(struct(*(struct),long,long))
->	O
str	*(char)
)	O
)	O
rc	int
=	O
mu_stream_last_error	(*(struct))->(int)
(	O
hbuf	*(struct(*(struct),long,long))
->	O
str	*(char)
)	O
;	O
}	O
else	O
{	O
char	O
*	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
;	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
=	O
malloc	(long)->(*(void))
(	O
hbuf	*(struct(*(struct),long,long))
->	O
line_max	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
)	O
{	O
rc	int
=	O
errno	O
;	O
goto	O
err	O
;	O
}	O
mu_stream_set_buffer	(*(struct),enum(int,int,int),long)->(int)
(	O
valstr	*(struct)
,	O
mu_buffer_none	int
,	O
0	int
)	O
;	O
while	O
(	O
rc	int
==	O
0	int
&&	O
valsize	long
)	O
{	O
mu_off_t	long
start	long
,	O
nr	long
;	O
size_t	long
sz	long
,	O
n	long
;	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
hbuf	*(struct(*(struct),long,long))
->	O
str	*(char)
,	O
";"	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
mu_stream_seek	(*(struct),long,int,*(long))->(int)
(	O
hbuf	*(struct(*(struct),long,long))
->	O
str	*(char)
,	O
0	int
,	O
MU_SEEK_CUR	int
,	O
&	O
start	long
)	O
;	O
if	O
(	O
segment	int
>=	O
0	int
)	O
{	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
hbuf	*(struct(*(struct),long,long))
->	O
str	*(char)
,	O
"\n"	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
hbuf	*(struct(*(struct),long,long))
->	O
line_len	long
=	O
0	int
;	O
segment	int
++	O
;	O
}	O
else	O
if	O
(	O
hbuf	*(struct(*(struct),long,long))
->	O
line_len	long
+	O
valsize	long
+	O
quote	int
+	O
vlen	long
+	O
nlen	long
+	O
1	int
>	O
hbuf	*(struct(*(struct),long,long))
->	O
line_max	long
)	O
{	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
hbuf	*(struct(*(struct),long,long))
->	O
str	*(char)
,	O
"\n"	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
hbuf	*(struct(*(struct),long,long))
->	O
line_len	long
=	O
0	int
;	O
if	O
(	O
hbuf	*(struct(*(struct),long,long))
->	O
line_len	long
+	O
valsize	long
+	O
quote	int
+	O
vlen	long
+	O
nlen	long
+	O
1	int
>	O
hbuf	*(struct(*(struct),long,long))
->	O
line_max	long
)	O
segment	int
++	O
;	O
}	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
hbuf	*(struct(*(struct),long,long))
->	O
str	*(char)
,	O
" "	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
if	O
(	O
segment	int
>=	O
0	int
)	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
hbuf	*(struct(*(struct),long,long))
->	O
str	*(char)
,	O
"%s*%d"	*(char)
,	O
name	*(char)
,	O
segment	int
)	O
;	O
else	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
hbuf	*(struct(*(struct),long,long))
->	O
str	*(char)
,	O
"%s"	*(char)
,	O
name	*(char)
)	O
;	O
if	O
(	O
langinfo	int
)	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
hbuf	*(struct(*(struct),long,long))
->	O
str	*(char)
,	O
"*"	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
hbuf	*(struct(*(struct),long,long))
->	O
str	*(char)
,	O
"="	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
mu_stream_seek	(*(struct),long,int,*(long))->(int)
(	O
hbuf	*(struct(*(struct),long,long))
->	O
str	*(char)
,	O
0	int
,	O
MU_SEEK_CUR	int
,	O
&	O
nr	long
)	O
;	O
nlen	long
=	O
nr	long
-	O
start	long
;	O
hbuf	*(struct(*(struct),long,long))
->	O
line_len	long
+=	O
nlen	long
;	O
start	long
=	O
nr	long
;	O
if	O
(	O
hbuf	*(struct(*(struct),long,long))
->	O
line_max	long
<=	O
(	O
hbuf	*(struct(*(struct),long,long))
->	O
line_len	long
+	O
quote	int
+	O
vlen	long
)	O
)	O
{	O
rc	int
=	O
MU_ERR_BUFSPACE	O
;	O
break	O
;	O
}	O
sz	long
=	O
hbuf	*(struct(*(struct),long,long))
->	O
line_max	long
-	O
(	O
hbuf	*(struct(*(struct),long,long))
->	O
line_len	long
+	O
quote	int
+	O
vlen	long
)	O
;	O
mu_stream_ioctl	(*(struct),int,int,*(void))->(int)
(	O
valstr	*(struct)
,	O
MU_IOCTL_FILTER	int
,	O
MU_IOCTL_FILTER_SET_OUTBUF_SIZE	int
,	O
&	O
sz	long
)	O
;	O
rc	int
=	O
mu_stream_read	(*(struct),*(void),long,*(long))->(int)
(	O
valstr	*(struct)
,	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
,	O
sz	long
,	O
&	O
n	long
)	O
;	O
if	O
(	O
rc	int
||	O
n	long
==	O
0	int
)	O
break	O
;	O
if	O
(	O
vlen	long
)	O
{	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
hbuf	*(struct(*(struct),long,long))
->	O
str	*(char)
,	O
"%s'%s'"	*(char)
,	O
mu_prstr	(*(char))->(*(char))
(	O
p	*(struct(*(char),*(char),*(char)))
->	O
lang	*(char)
)	O
,	O
mu_prstr	(*(char))->(*(char))
(	O
p	*(struct(*(char),*(char),*(char)))
->	O
cset	*(char)
)	O
)	O
;	O
vlen	long
=	O
0	int
;	O
}	O
else	O
if	O
(	O
quote	int
)	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
hbuf	*(struct(*(struct),long,long))
->	O
str	*(char)
,	O
"\""	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
hbuf	*(struct(*(struct),long,long))
->	O
str	*(char)
,	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
,	O
n	long
,	O
NULL	O
)	O
;	O
if	O
(	O
quote	int
)	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
hbuf	*(struct(*(struct),long,long))
->	O
str	*(char)
,	O
"\""	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
mu_stream_seek	(*(struct),long,int,*(long))->(int)
(	O
hbuf	*(struct(*(struct),long,long))
->	O
str	*(char)
,	O
0	int
,	O
MU_SEEK_CUR	int
,	O
&	O
nr	long
)	O
;	O
nr	long
-=	O
start	long
;	O
hbuf	*(struct(*(struct),long,long))
->	O
line_len	long
+=	O
nr	long
;	O
valsize	long
-=	O
n	long
;	O
if	O
(	O
mu_stream_err	(*(struct))->(int)
(	O
hbuf	*(struct(*(struct),long,long))
->	O
str	*(char)
)	O
)	O
rc	int
=	O
mu_stream_last_error	(*(struct))->(int)
(	O
hbuf	*(struct(*(struct),long,long))
->	O
str	*(char)
)	O
;	O
}	O
free	(*(void))->(void)
(	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
)	O
;	O
}	O
err	O
:	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
valstr	*(struct)
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
mime_header_format	(*(char),*(struct),*(struct(*(struct),long,long)))->(int)
(	O
const	O
char	O
*	O
value	*(char)
,	O
mu_assoc_t	*(struct)
params	*(struct)
,	O
struct	O
header_buffer	struct(*(struct),long,long)
*	O
hbuf	*(struct(*(struct),long,long))
)	O
{	O
size_t	long
l	long
=	O
strlen	(*(char))->(long)
(	O
value	*(char)
)	O
;	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
hbuf	*(struct(*(struct),long,long))
->	O
str	*(char)
,	O
value	*(char)
,	O
l	long
,	O
NULL	O
)	O
;	O
hbuf	*(struct(*(struct),long,long))
->	O
line_len	long
+=	O
l	long
;	O
return	O
mu_assoc_foreach	(*(struct),*((*(char),*(void),*(void))->(int)),*(void))->(int)
(	O
params	*(struct)
,	O
mime_store_parameter	(*(char),*(void),*(void))->(int)
,	O
hbuf	*(struct(*(struct),long,long))
)	O
;	O
}	O
int	O
mu_mime_header_set_w	(*(struct),*(char),*(char),*(struct),long)->(int)
(	O
mu_header_t	*(struct)
hdr	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
,	O
const	O
char	O
*	O
value	*(char)
,	O
mu_assoc_t	*(struct)
params	*(struct)
,	O
size_t	long
line_width	long
)	O
{	O
struct	O
header_buffer	struct(*(struct),long,long)
hbuf	*(struct(*(struct),long,long))
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_memory_stream_create	(*(*(struct)),int)->(int)
(	O
&	O
hbuf	*(struct(*(struct),long,long))
.	O
str	*(char)
,	O
MU_STREAM_RDWR	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
hbuf	*(struct(*(struct),long,long))
.	O
line_len	long
=	O
strlen	(*(char))->(long)
(	O
name	*(char)
)	O
+	O
2	int
;	O
hbuf	*(struct(*(struct),long,long))
.	O
line_max	long
=	O
line_width	long
;	O
rc	int
=	O
mime_header_format	(*(char),*(struct),*(struct(*(struct),long,long)))->(int)
(	O
value	*(char)
,	O
params	*(struct)
,	O
&	O
hbuf	*(struct(*(struct),long,long))
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_off_t	long
pos	long
;	O
char	O
*	O
fmtval	*(char)
;	O
mu_stream_seek	(*(struct),long,int,*(long))->(int)
(	O
hbuf	*(struct(*(struct),long,long))
.	O
str	*(char)
,	O
0	int
,	O
MU_SEEK_CUR	int
,	O
&	O
pos	long
)	O
;	O
fmtval	*(char)
=	O
malloc	(long)->(*(void))
(	O
pos	long
+	O
1	int
)	O
;	O
mu_stream_seek	(*(struct),long,int,*(long))->(int)
(	O
hbuf	*(struct(*(struct),long,long))
.	O
str	*(char)
,	O
0	int
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
mu_stream_read	(*(struct),*(void),long,*(long))->(int)
(	O
hbuf	*(struct(*(struct),long,long))
.	O
str	*(char)
,	O
fmtval	*(char)
,	O
pos	long
,	O
NULL	O
)	O
;	O
fmtval	*(char)
[	O
pos	long
]	O
=	O
0	int
;	O
rc	int
=	O
mu_header_set_value	(*(struct),*(char),*(char),int)->(int)
(	O
hdr	*(struct)
,	O
name	*(char)
,	O
fmtval	*(char)
,	O
1	int
)	O
;	O
free	(*(void))->(void)
(	O
fmtval	*(char)
)	O
;	O
}	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
hbuf	*(struct(*(struct),long,long))
.	O
str	*(char)
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_mime_header_set	(*(struct),*(char),*(char),*(struct))->(int)
(	O
mu_header_t	*(struct)
hdr	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
,	O
const	O
char	O
*	O
value	*(char)
,	O
mu_assoc_t	*(struct)
params	*(struct)
)	O
{	O
return	O
mu_mime_header_set_w	(*(struct),*(char),*(char),*(struct),long)->(int)
(	O
hdr	*(struct)
,	O
name	*(char)
,	O
value	*(char)
,	O
params	*(struct)
,	O
76	int
)	O
;	O
}	O
