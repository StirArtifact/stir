char	O
*	O
program_name	*(char)
;	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
display_return	int
=	O
1	int
,	O
do_v9	int
=	O
0	int
;	O
program_name	*(char)
=	O
argv	*(*(char))
[	O
0	int
]	O
;	O
do_v9	int
=	O
1	int
;	O
--	O
argc	int
;	O
++	O
argv	*(*(char))
;	O
while	O
(	O
argc	int
>	O
0	int
&&	O
*	O
argv	*(*(char))
[	O
0	int
]	O
==	O
'-'	O
)	O
{	O
register	O
char	O
*	O
temp	*(char)
;	O
register	O
int	O
i	int
;	O
temp	*(char)
=	O
argv	*(*(char))
[	O
0	int
]	O
+	O
1	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
temp	*(char)
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
strrchr	(*(char),int)->(*(char))
(	O
VALID_ECHO_OPTIONS	*(char)
,	O
temp	*(char)
[	O
i	int
]	O
)	O
==	O
0	int
)	O
goto	O
just_echo	O
;	O
}	O
if	O
(	O
!	O
*	O
temp	*(char)
)	O
goto	O
just_echo	O
;	O
while	O
(	O
*	O
temp	*(char)
)	O
{	O
if	O
(	O
*	O
temp	*(char)
==	O
'n'	O
)	O
display_return	int
=	O
0	int
;	O
else	O
if	O
(	O
*	O
temp	*(char)
==	O
'e'	O
)	O
do_v9	int
=	O
1	int
;	O
else	O
if	O
(	O
*	O
temp	*(char)
==	O
'E'	O
)	O
do_v9	int
=	O
0	int
;	O
else	O
goto	O
just_echo	O
;	O
temp	*(char)
++	O
;	O
}	O
argc	int
--	O
;	O
argv	*(*(char))
++	O
;	O
}	O
just_echo	O
:	O
if	O
(	O
argc	int
>	O
0	int
)	O
{	O
if	O
(	O
do_v9	int
)	O
{	O
while	O
(	O
argc	int
>	O
0	int
)	O
{	O
register	O
char	O
*	O
s	*(char)
=	O
argv	*(*(char))
[	O
0	int
]	O
;	O
register	O
int	O
c	int
;	O
while	O
(	O
(	O
c	int
=	O
*	O
s	*(char)
++	O
)	O
)	O
{	O
if	O
(	O
c	int
==	O
'\\'	O
&&	O
*	O
s	*(char)
)	O
{	O
switch	O
(	O
c	int
=	O
*	O
s	*(char)
++	O
)	O
{	O
case	O
'a'	O
:	O
c	int
=	O
'\007'	O
;	O
break	O
;	O
case	O
'b'	O
:	O
c	int
=	O
'\b'	O
;	O
break	O
;	O
case	O
'c'	O
:	O
display_return	int
=	O
0	int
;	O
continue	O
;	O
case	O
'f'	O
:	O
c	int
=	O
'\f'	O
;	O
break	O
;	O
case	O
'n'	O
:	O
c	int
=	O
'\n'	O
;	O
break	O
;	O
case	O
'r'	O
:	O
c	int
=	O
'\r'	O
;	O
break	O
;	O
case	O
't'	O
:	O
c	int
=	O
'\t'	O
;	O
break	O
;	O
case	O
'v'	O
:	O
c	int
=	O
(	O
int	O
)	O
0x0B	int
;	O
break	O
;	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
c	int
-=	O
'0'	O
;	O
if	O
(	O
*	O
s	*(char)
>=	O
'0'	O
&&	O
*	O
s	*(char)
<=	O
'7'	O
)	O
c	int
=	O
c	int
*	O
8	int
+	O
(	O
*	O
s	*(char)
++	O
-	O
'0'	O
)	O
;	O
if	O
(	O
*	O
s	*(char)
>=	O
'0'	O
&&	O
*	O
s	*(char)
<=	O
'7'	O
)	O
c	int
=	O
c	int
*	O
8	int
+	O
(	O
*	O
s	*(char)
++	O
-	O
'0'	O
)	O
;	O
break	O
;	O
case	O
'\\'	O
:	O
break	O
;	O
default	O
:	O
putchar	(int)->(int)
(	O
'\\'	O
)	O
;	O
break	O
;	O
}	O
}	O
putchar	(int)->(int)
(	O
c	int
)	O
;	O
}	O
argc	int
--	O
;	O
argv	*(*(char))
++	O
;	O
if	O
(	O
argc	int
>	O
0	int
)	O
putchar	(int)->(int)
(	O
' '	O
)	O
;	O
}	O
}	O
else	O
{	O
while	O
(	O
argc	int
>	O
0	int
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
argv	*(*(char))
[	O
0	int
]	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
argc	int
--	O
;	O
argv	*(*(char))
++	O
;	O
if	O
(	O
argc	int
>	O
0	int
)	O
putchar	(int)->(int)
(	O
' '	O
)	O
;	O
}	O
}	O
}	O
if	O
(	O
display_return	int
)	O
putchar	(int)->(int)
(	O
'\n'	O
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
