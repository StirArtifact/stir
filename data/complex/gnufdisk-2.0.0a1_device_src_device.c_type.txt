extern	O
struct	O
gnufdisk_disklabel	O
*	O
gnufdisk_device_internals__allocate_disklabel	(*(struct),*(struct(*((*`,*`,*`)->(void)),*((*`)->(*`)),*((*`,long,*`,*`)->(void)),*((*`)->(int)),*((*`,*`,*`,*`,*`,*`)->(void)),*((*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)))),*(void))->(*(struct))
(	O
struct	O
gnufdisk_device	struct(*(void),struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void))),*(void),int,int)
*	O
_dev	*(struct)
,	O
struct	O
gnufdisk_disklabel_operations	struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)))
*	O
_operations	*(struct(*((*(void),*(*`),*(long))->(void)),*((*(void))->(*(struct`))),*((*(void),long,*(struct`),*(*`))->(void)),*((*(void))->(int)),*((*(void),*(struct`),*(struct`),*(struct`),*(struct`),*(*`))->(void)),*((*(void),long)->(void)),*((*(void),*(struct`),*(void),long)->(void)),*((*(void),*(struct`),*(void),long)->(void)),*((*(void))->(void))))
,	O
void	O
*	O
_implementation_data	*(void)
)	O
;	O
extern	O
void	O
gnufdisk_device_internals__disklabel_set_device	(*(struct),*(struct))->(void)
(	O
struct	O
gnufdisk_disklabel	O
*	O
_d	*(struct)
,	O
struct	O
gnufdisk_device	struct(*(void),struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void))),*(void),int,int)
*	O
_dev	*(struct)
)	O
;	O
struct	O
gnufdisk_device	struct(*(void),struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void))),*(void),int,int)
{	O
void	O
*	O
handle	*(void)
;	O
struct	O
gnufdisk_device_operations	struct(*((*(void),*(struct))->(void)),*((*(void),*(struct),*(*(void)))->(void)),*((*(void),*(struct),*(struct),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void)))
operations	struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void)))
;	O
void	O
*	O
implementation_data	*(void)
;	O
int	O
is_open	int
;	O
int	O
nref	int
;	O
}	O
;	O
static	O
void	O
check_device	(*(*(struct(*(void),struct(*`,*`,*`,*`,*`,*`,*`,*`),*(void),int,int))))->(void)
(	O
struct	O
gnufdisk_device	struct(*(void),struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void))),*(void),int,int)
*	O
*	O
_dev	*(struct)
)	O
{	O
GNUFDISK_RETRY	O
rp0	array(struct(array(long),int,struct(array(long))))
;	O
union	O
gnufdisk_device_exception_data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct(*(void),struct(*`,*`,*`,*`,*`,*`,*`,*`),*(void),int,int))),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int)),*(long long),*(long long),*(long long),*(long long))
;	O
GNUFDISK_RETRY_SET	O
(	O
rp0	array(struct(array(long),int,struct(array(long))))
)	O
;	O
if	O
(	O
gnufdisk_check_memory	(*(void),long,int)->(int)
(	O
*	O
_dev	*(struct)
,	O
sizeof	O
(	O
struct	O
gnufdisk_device	struct(*(void),struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void))),*(void),int,int)
)	O
,	O
0	int
)	O
!=	O
0	int
)	O
{	O
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct(*(void),struct(*`,*`,*`,*`,*`,*`,*`,*`),*(void),int,int))),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int)),*(long long),*(long long),*(long long),*(long long))
.	O
edevicepointer	*(*(struct))
=	O
_dev	*(struct)
;	O
GNUFDISK_THROW	O
(	O
GNUFDISK_EXCEPTION_ALL	int
,	O
&	O
rp0	array(struct(array(long),int,struct(array(long))))
,	O
GNUFDISK_DEVICE_EDEVICEPOINTER	int
,	O
&	O
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct(*(void),struct(*`,*`,*`,*`,*`,*`,*`,*`),*(void),int,int))),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int)),*(long long),*(long long),*(long long),*(long long))
,	O
"invalid struct gnufdisk_device* %p"	*(char)
,	O
*	O
_dev	*(struct)
)	O
;	O
}	O
else	O
if	O
(	O
gnufdisk_check_memory	(*(void),long,int)->(int)
(	O
(	O
*	O
_dev	*(struct)
)	O
->	O
handle	*(void)
,	O
1	int
,	O
1	int
)	O
!=	O
0	int
)	O
{	O
(	O
*	O
_dev	*(struct)
)	O
->	O
handle	*(void)
=	O
NULL	O
;	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_EDEVICE	int
,	O
NULL	O
,	O
"device is not associated with a valid module"	*(char)
)	O
;	O
}	O
}	O
static	O
void	O
check_is_open	(*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int)))->(void)
(	O
struct	O
gnufdisk_device	struct(*(void),struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void))),*(void),int,int)
*	O
_d	*(struct)
)	O
{	O
GNUFDISK_RETRY	O
rp0	array(struct(array(long),int,struct(array(long))))
;	O
GNUFDISK_RETRY_SET	O
(	O
rp0	array(struct(array(long),int,struct(array(long))))
)	O
;	O
check_device	(*(*(struct(*(void),struct(*`,*`,*`,*`,*`,*`,*`,*`),*(void),int,int))))->(void)
(	O
&	O
_d	*(struct)
)	O
;	O
GNUFDISK_LOG	O
(	O
(	O
DEVICE	O
,	O
"device open status: %d"	*(char)
,	O
_d	*(struct)
->	O
is_open	int
)	O
)	O
;	O
if	O
(	O
!	O
_d	*(struct)
->	O
is_open	int
)	O
{	O
union	O
gnufdisk_device_exception_data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct(*(void),struct(*`,*`,*`,*`,*`,*`,*`,*`),*(void),int,int))),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int)),*(long long),*(long long),*(long long),*(long long))
;	O
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct(*(void),struct(*`,*`,*`,*`,*`,*`,*`,*`),*(void),int,int))),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int)),*(long long),*(long long),*(long long),*(long long))
.	O
enotopen	*(struct)
=	O
_d	*(struct)
;	O
GNUFDISK_THROW	O
(	O
GNUFDISK_EXCEPTION_ALL	int
,	O
&	O
rp0	array(struct(array(long),int,struct(array(long))))
,	O
GNUFDISK_DEVICE_ENOTOPEN	int
,	O
&	O
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct(*(void),struct(*`,*`,*`,*`,*`,*`,*`,*`),*(void),int,int))),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int)),*(long long),*(long long),*(long long),*(long long))
,	O
"device is not open"	*(char)
)	O
;	O
}	O
}	O
static	O
void	O
free_pointer	(*(void))->(void)
(	O
void	O
*	O
_p	*(void)
)	O
{	O
GNUFDISK_LOG	O
(	O
(	O
DEVICE	O
,	O
"free pointer %p"	*(char)
,	O
_p	*(void)
)	O
)	O
;	O
free	(*(void))->(void)
(	O
_p	*(void)
)	O
;	O
}	O
static	O
void	O
close_dlhandle	(*(void))->(void)
(	O
void	O
*	O
_p	*(void)
)	O
{	O
GNUFDISK_LOG	O
(	O
(	O
DEVICE	O
,	O
"close dlhandle %p"	*(char)
,	O
_p	*(void)
)	O
)	O
;	O
dlclose	(*(void))->(int)
(	O
_p	*(void)
)	O
;	O
}	O
struct	O
gnufdisk_device	struct(*(void),struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void))),*(void),int,int)
*	O
gnufdisk_device_new	(*(struct),*(struct))->(*(struct))
(	O
struct	O
gnufdisk_string	O
*	O
_module	*(struct)
,	O
struct	O
gnufdisk_string	O
*	O
_options	*(struct)
)	O
{	O
char	O
library	array(char)
[	O
PATH_MAX	int
]	O
;	O
GNUFDISK_RETRY	O
rp0	array(struct(array(long),int,struct(array(long))))
;	O
struct	O
gnufdisk_device	struct(*(void),struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void))),*(void),int,int)
*	O
dev	*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int))
;	O
void	O
(	O
*	O
reg	*((*(struct),*(struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)))),*(*(void)))->(void))
)	O
(	O
struct	O
gnufdisk_string	O
*	O
_options	*(struct)
,	O
struct	O
gnufdisk_device_operations	struct(*((*(void),*(struct))->(void)),*((*(void),*(struct),*(*(void)))->(void)),*((*(void),*(struct),*(struct),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void)))
*	O
_operations	*(struct(*((*(void),*(*`),*(long))->(void)),*((*(void))->(*(struct`))),*((*(void),long,*(struct`),*(*`))->(void)),*((*(void))->(int)),*((*(void),*(struct`),*(struct`),*(struct`),*(struct`),*(*`))->(void)),*((*(void),long)->(void)),*((*(void),*(struct`),*(void),long)->(void)),*((*(void),*(struct`),*(void),long)->(void)),*((*(void))->(void))))
,	O
void	O
*	O
*	O
_private_data	*(*(void))
)	O
;	O
if	O
(	O
(	O
dev	*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
gnufdisk_device	struct(*(void),struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void))),*(void),int,int)
)	O
)	O
)	O
==	O
NULL	O
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_ENOMEM	int
,	O
NULL	O
,	O
"cannot allocate memory"	*(char)
)	O
;	O
if	O
(	O
gnufdisk_exception_register_unwind_handler	(*((*(void))->(void)),*(void))->(int)
(	O
&	O
free_pointer	(*(void))->(void)
,	O
dev	*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int))
)	O
!=	O
0	int
)	O
GNUFDISK_WARNING	O
(	O
"gnufdisk_exception_register_unwind_handler failed. Missing GNUFDISK_TRY?"	*(char)
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
dev	*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int))
,	O
0	int
,	O
sizeof	O
(	O
struct	O
gnufdisk_device	struct(*(void),struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void))),*(void),int,int)
)	O
)	O
;	O
GNUFDISK_RETRY_SET	O
(	O
rp0	array(struct(array(long),int,struct(array(long))))
)	O
;	O
if	O
(	O
gnufdisk_check_memory	(*(void),long,int)->(int)
(	O
_module	*(struct)
,	O
1	int
,	O
1	int
)	O
!=	O
0	int
)	O
{	O
union	O
gnufdisk_device_exception_data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct(*(void),struct(*`,*`,*`,*`,*`,*`,*`,*`),*(void),int,int))),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int)),*(long long),*(long long),*(long long),*(long long))
;	O
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct(*(void),struct(*`,*`,*`,*`,*`,*`,*`,*`),*(void),int,int))),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int)),*(long long),*(long long),*(long long),*(long long))
.	O
emodulepointer	*(*(struct))
=	O
&	O
_module	*(struct)
;	O
GNUFDISK_THROW	O
(	O
GNUFDISK_EXCEPTION_ALL	int
,	O
&	O
rp0	array(struct(array(long),int,struct(array(long))))
,	O
GNUFDISK_DEVICE_EMODULEPOINTER	int
,	O
&	O
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct(*(void),struct(*`,*`,*`,*`,*`,*`,*`,*`),*(void),int,int))),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int)),*(long long),*(long long),*(long long),*(long long))
,	O
"invalid struct gnufdisk_string* %p"	*(char)
,	O
_module	*(struct)
)	O
;	O
}	O
snprintf	(*(char),long,*(char))->(int)
(	O
library	array(char)
,	O
sizeof	O
(	O
library	array(char)
)	O
,	O
"%s.so"	*(char)
,	O
gnufdisk_string_c_string	(*(struct))->(*(char))
(	O
_module	*(struct)
)	O
)	O
;	O
GNUFDISK_LOG	O
(	O
(	O
DEVICE	O
,	O
"open module `%s'"	*(char)
,	O
library	array(char)
)	O
)	O
;	O
if	O
(	O
(	O
dev	*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int))
->	O
handle	*(void)
=	O
dlopen	(*(char),int)->(*(void))
(	O
library	array(char)
,	O
RTLD_NOW	int
)	O
)	O
==	O
NULL	O
)	O
{	O
union	O
gnufdisk_device_exception_data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct(*(void),struct(*`,*`,*`,*`,*`,*`,*`,*`),*(void),int,int))),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int)),*(long long),*(long long),*(long long),*(long long))
;	O
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct(*(void),struct(*`,*`,*`,*`,*`,*`,*`,*`),*(void),int,int))),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int)),*(long long),*(long long),*(long long),*(long long))
.	O
emodule	*(struct)
=	O
_module	*(struct)
;	O
GNUFDISK_THROW	O
(	O
GNUFDISK_EXCEPTION_ALL	int
,	O
&	O
rp0	array(struct(array(long),int,struct(array(long))))
,	O
GNUFDISK_DEVICE_EMODULE	int
,	O
&	O
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct(*(void),struct(*`,*`,*`,*`,*`,*`,*`,*`),*(void),int,int))),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int)),*(long long),*(long long),*(long long),*(long long))
,	O
"cannot open module: %s"	*(char)
,	O
dlerror	()->(*(char))
(	O
)	O
)	O
;	O
}	O
else	O
if	O
(	O
(	O
reg	*((*(struct),*(struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)))),*(*(void)))->(void))
=	O
dlsym	(*(void),*(char))->(*(void))
(	O
dev	*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int))
->	O
handle	*(void)
,	O
"module_register"	*(char)
)	O
)	O
==	O
NULL	O
)	O
{	O
union	O
gnufdisk_device_exception_data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct(*(void),struct(*`,*`,*`,*`,*`,*`,*`,*`),*(void),int,int))),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int)),*(long long),*(long long),*(long long),*(long long))
;	O
dlclose	(*(void))->(int)
(	O
dev	*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int))
->	O
handle	*(void)
)	O
;	O
dev	*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int))
->	O
handle	*(void)
=	O
NULL	O
;	O
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct(*(void),struct(*`,*`,*`,*`,*`,*`,*`,*`),*(void),int,int))),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int)),*(long long),*(long long),*(long long),*(long long))
.	O
emodule	*(struct)
=	O
_module	*(struct)
;	O
GNUFDISK_THROW	O
(	O
GNUFDISK_EXCEPTION_ALL	int
,	O
&	O
rp0	array(struct(array(long),int,struct(array(long))))
,	O
GNUFDISK_DEVICE_EMODULE	int
,	O
&	O
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct(*(void),struct(*`,*`,*`,*`,*`,*`,*`,*`),*(void),int,int))),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int)),*(long long),*(long long),*(long long),*(long long))
,	O
"error register module `%s': %s"	*(char)
,	O
library	array(char)
,	O
dlerror	()->(*(char))
(	O
)	O
)	O
;	O
}	O
if	O
(	O
gnufdisk_exception_register_unwind_handler	(*((*(void))->(void)),*(void))->(int)
(	O
&	O
close_dlhandle	(*(void))->(void)
,	O
dev	*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int))
->	O
handle	*(void)
)	O
!=	O
0	int
)	O
GNUFDISK_WARNING	O
(	O
"gnufdisk_exception_register_unwind_handler failed. Missing GNUFDISK_TRY?"	*(char)
)	O
;	O
(	O
*	O
reg	*((*(struct),*(struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)))),*(*(void)))->(void))
)	O
(	O
_options	*(struct)
,	O
&	O
dev	*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int))
->	O
operations	struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void)))
,	O
&	O
dev	*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int))
->	O
implementation_data	*(void)
)	O
;	O
dev	*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int))
->	O
nref	int
=	O
1	int
;	O
GNUFDISK_LOG	O
(	O
(	O
DEVICE	O
,	O
"new struct gnufdisk_device* %p"	*(char)
,	O
dev	*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int))
)	O
)	O
;	O
if	O
(	O
gnufdisk_exception_unregister_unwind_handler	(*((*(void))->(void)),*(void))->(int)
(	O
&	O
close_dlhandle	(*(void))->(void)
,	O
dev	*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int))
->	O
handle	*(void)
)	O
!=	O
0	int
)	O
GNUFDISK_WARNING	O
(	O
"gnufdisk_exception_unregister_unwind_handler failed. Missing GNUFDISK_TRY?"	*(char)
)	O
;	O
if	O
(	O
gnufdisk_exception_unregister_unwind_handler	(*((*(void))->(void)),*(void))->(int)
(	O
&	O
free_pointer	(*(void))->(void)
,	O
dev	*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int))
)	O
!=	O
0	int
)	O
GNUFDISK_WARNING	O
(	O
"gnufdisk_exception_unregister_unwind_handler failed. Missing GNUFDISK_TRY?"	*(char)
)	O
;	O
return	O
dev	*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int))
;	O
}	O
void	O
gnufdisk_device_delete	(*(struct))->(void)
(	O
struct	O
gnufdisk_device	struct(*(void),struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void))),*(void),int,int)
*	O
_d	*(struct)
)	O
{	O
check_device	(*(*(struct(*(void),struct(*`,*`,*`,*`,*`,*`,*`,*`),*(void),int,int))))->(void)
(	O
&	O
_d	*(struct)
)	O
;	O
if	O
(	O
_d	*(struct)
->	O
nref	int
<	O
2	int
)	O
{	O
GNUFDISK_LOG	O
(	O
(	O
DEVICE	O
,	O
"delete struct gnufdisk_device* %p"	*(char)
,	O
_d	*(struct)
)	O
)	O
;	O
if	O
(	O
_d	*(struct)
->	O
implementation_data	*(void)
!=	O
NULL	O
&&	O
_d	*(struct)
->	O
operations	struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void)))
.	O
delete	*((*(void))->(void))
!=	O
NULL	O
)	O
{	O
void	O
*	O
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct(*(void),struct(*`,*`,*`,*`,*`,*`,*`,*`),*(void),int,int))),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int)),*(long long),*(long long),*(long long),*(long long))
;	O
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct(*(void),struct(*`,*`,*`,*`,*`,*`,*`,*`),*(void),int,int))),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int)),*(long long),*(long long),*(long long),*(long long))
=	O
_d	*(struct)
->	O
implementation_data	*(void)
;	O
_d	*(struct)
->	O
implementation_data	*(void)
=	O
NULL	O
;	O
(	O
*	O
_d	*(struct)
->	O
operations	struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void)))
.	O
delete	*((*(void))->(void))
)	O
(	O
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct(*(void),struct(*`,*`,*`,*`,*`,*`,*`,*`),*(void),int,int))),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int)),*(long long),*(long long),*(long long),*(long long))
)	O
;	O
}	O
if	O
(	O
_d	*(struct)
->	O
handle	*(void)
)	O
{	O
dlclose	(*(void))->(int)
(	O
_d	*(struct)
->	O
handle	*(void)
)	O
;	O
_d	*(struct)
->	O
handle	*(void)
=	O
NULL	O
;	O
}	O
free	(*(void))->(void)
(	O
_d	*(struct)
)	O
;	O
}	O
else	O
{	O
_d	*(struct)
->	O
nref	int
--	O
;	O
GNUFDISK_LOG	O
(	O
(	O
DEVICE	O
,	O
"struct gnufdisk_device* %p has now %d references"	*(char)
,	O
_d	*(struct)
,	O
_d	*(struct)
->	O
nref	int
)	O
)	O
;	O
}	O
}	O
void	O
gnufdisk_device_ref	(*(struct))->(void)
(	O
struct	O
gnufdisk_device	struct(*(void),struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void))),*(void),int,int)
*	O
_d	*(struct)
)	O
{	O
check_device	(*(*(struct(*(void),struct(*`,*`,*`,*`,*`,*`,*`,*`),*(void),int,int))))->(void)
(	O
&	O
_d	*(struct)
)	O
;	O
_d	*(struct)
->	O
nref	int
++	O
;	O
GNUFDISK_LOG	O
(	O
(	O
DEVICE	O
,	O
"struct gnufdisk_device* %p has now %d references"	*(char)
,	O
_d	*(struct)
,	O
_d	*(struct)
->	O
nref	int
)	O
)	O
;	O
}	O
void	O
gnufdisk_device_open	(*(struct),*(struct))->(void)
(	O
struct	O
gnufdisk_device	struct(*(void),struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void))),*(void),int,int)
*	O
_d	*(struct)
,	O
struct	O
gnufdisk_string	O
*	O
_path	*(struct)
)	O
{	O
GNUFDISK_RETRY	O
rp0	array(struct(array(long),int,struct(array(long))))
;	O
check_device	(*(*(struct(*(void),struct(*`,*`,*`,*`,*`,*`,*`,*`),*(void),int,int))))->(void)
(	O
&	O
_d	*(struct)
)	O
;	O
GNUFDISK_RETRY_SET	O
(	O
rp0	array(struct(array(long),int,struct(array(long))))
)	O
;	O
if	O
(	O
gnufdisk_check_memory	(*(void),long,int)->(int)
(	O
_path	*(struct)
,	O
1	int
,	O
1	int
)	O
!=	O
0	int
)	O
{	O
union	O
gnufdisk_device_exception_data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct(*(void),struct(*`,*`,*`,*`,*`,*`,*`,*`),*(void),int,int))),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int)),*(long long),*(long long),*(long long),*(long long))
;	O
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct(*(void),struct(*`,*`,*`,*`,*`,*`,*`,*`),*(void),int,int))),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int)),*(long long),*(long long),*(long long),*(long long))
.	O
epathpointer	*(*(struct))
=	O
&	O
_path	*(struct)
;	O
GNUFDISK_THROW	O
(	O
GNUFDISK_EXCEPTION_ALL	int
,	O
&	O
rp0	array(struct(array(long),int,struct(array(long))))
,	O
GNUFDISK_DEVICE_EPATHPOINTER	int
,	O
&	O
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct(*(void),struct(*`,*`,*`,*`,*`,*`,*`,*`),*(void),int,int))),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int)),*(long long),*(long long),*(long long),*(long long))
,	O
"invalid istruct gnufdisk_string* %p"	*(char)
,	O
_path	*(struct)
)	O
;	O
}	O
else	O
if	O
(	O
_d	*(struct)
->	O
operations	struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void)))
.	O
open	*((*(void),*(struct))->(void))
==	O
NULL	O
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_ENOTSUP	int
,	O
NULL	O
,	O
"operation not supported `open'"	*(char)
)	O
;	O
(	O
*	O
_d	*(struct)
->	O
operations	struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void)))
.	O
open	*((*(void),*(struct))->(void))
)	O
(	O
_d	*(struct)
->	O
implementation_data	*(void)
,	O
_path	*(struct)
)	O
;	O
_d	*(struct)
->	O
is_open	int
=	O
1	int
;	O
}	O
struct	O
gnufdisk_disklabel	O
*	O
gnufdisk_device_disklabel	(*(struct))->(*(struct))
(	O
struct	O
gnufdisk_device	struct(*(void),struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void))),*(void),int,int)
*	O
_d	*(struct)
)	O
{	O
struct	O
gnufdisk_disklabel_operations	struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)))
operations	struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void)))
;	O
void	O
*	O
implementation_data	*(void)
;	O
check_device	(*(*(struct(*(void),struct(*`,*`,*`,*`,*`,*`,*`,*`),*(void),int,int))))->(void)
(	O
&	O
_d	*(struct)
)	O
;	O
check_is_open	(*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int)))->(void)
(	O
_d	*(struct)
)	O
;	O
if	O
(	O
_d	*(struct)
->	O
operations	struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void)))
.	O
disklabel	*((*(void),*(struct),*(*(void)))->(void))
==	O
NULL	O
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_ENOTSUP	int
,	O
NULL	O
,	O
"operation not supported `disklabel'"	*(char)
)	O
;	O
(	O
*	O
_d	*(struct)
->	O
operations	struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void)))
.	O
disklabel	*((*(void),*(struct),*(*(void)))->(void))
)	O
(	O
_d	*(struct)
->	O
implementation_data	*(void)
,	O
&	O
operations	struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void)))
,	O
&	O
implementation_data	*(void)
)	O
;	O
return	O
gnufdisk_device_internals__allocate_disklabel	(*(struct),*(struct(*((*`,*`,*`)->(void)),*((*`)->(*`)),*((*`,long,*`,*`)->(void)),*((*`)->(int)),*((*`,*`,*`,*`,*`,*`)->(void)),*((*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)))),*(void))->(*(struct))
(	O
_d	*(struct)
,	O
&	O
operations	struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void)))
,	O
implementation_data	*(void)
)	O
;	O
}	O
struct	O
gnufdisk_disklabel	O
*	O
gnufdisk_device_create_disklabel	(*(struct),*(struct))->(*(struct))
(	O
struct	O
gnufdisk_device	struct(*(void),struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void))),*(void),int,int)
*	O
_d	*(struct)
,	O
struct	O
gnufdisk_string	O
*	O
_type	*(struct)
)	O
{	O
struct	O
gnufdisk_disklabel_operations	struct(*((*(void),*(*(void)),*(long))->(void)),*((*(void))->(*(struct))),*((*(void),long,*(struct),*(*(void)))->(void)),*((*(void))->(int)),*((*(void),*(struct),*(struct),*(struct),*(struct),*(*(void)))->(void)),*((*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)))
operations	struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void)))
;	O
void	O
*	O
implementation_data	*(void)
;	O
GNUFDISK_RETRY	O
rp0	array(struct(array(long),int,struct(array(long))))
;	O
check_device	(*(*(struct(*(void),struct(*`,*`,*`,*`,*`,*`,*`,*`),*(void),int,int))))->(void)
(	O
&	O
_d	*(struct)
)	O
;	O
check_is_open	(*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int)))->(void)
(	O
_d	*(struct)
)	O
;	O
GNUFDISK_RETRY_SET	O
(	O
rp0	array(struct(array(long),int,struct(array(long))))
)	O
;	O
if	O
(	O
gnufdisk_check_memory	(*(void),long,int)->(int)
(	O
_type	*(struct)
,	O
1	int
,	O
1	int
)	O
!=	O
0	int
)	O
{	O
union	O
gnufdisk_device_exception_data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct)),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct),*(long long),*(long long),*(long long),*(long long))
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct(*(void),struct(*`,*`,*`,*`,*`,*`,*`,*`),*(void),int,int))),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int)),*(long long),*(long long),*(long long),*(long long))
;	O
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct(*(void),struct(*`,*`,*`,*`,*`,*`,*`,*`),*(void),int,int))),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int)),*(long long),*(long long),*(long long),*(long long))
.	O
edisklabelsystempointer	*(*(struct))
=	O
&	O
_type	*(struct)
;	O
GNUFDISK_THROW	O
(	O
GNUFDISK_EXCEPTION_ALL	int
,	O
&	O
rp0	array(struct(array(long),int,struct(array(long))))
,	O
GNUFDISK_DEVICE_EDISKLABELSYSTEMPOINTER	int
,	O
&	O
data	union(*(*(struct)),*(struct),*(*(struct)),*(struct),*(*(struct)),*(struct),*(long),*(*(struct)),*(struct),*(*(*(void))),*(*(long)),*(long long),*(*(struct)),*(struct),*(*(struct(*(void),struct(*`,*`,*`,*`,*`,*`,*`,*`),*(void),int,int))),*(*(struct)),*(*(struct)),*(*(void)),*(*(void)),*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int)),*(long long),*(long long),*(long long),*(long long))
,	O
"invalid struct gnufdisk_string* %p"	*(char)
,	O
_type	*(struct)
)	O
;	O
}	O
if	O
(	O
_d	*(struct)
->	O
operations	struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void)))
.	O
create_disklabel	*((*(void),*(struct),*(struct),*(*(void)))->(void))
==	O
NULL	O
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_ENOTSUP	int
,	O
NULL	O
,	O
"operation not supported `create disklabel'"	*(char)
)	O
;	O
(	O
*	O
_d	*(struct)
->	O
operations	struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void)))
.	O
create_disklabel	*((*(void),*(struct),*(struct),*(*(void)))->(void))
)	O
(	O
_d	*(struct)
->	O
implementation_data	*(void)
,	O
_type	*(struct)
,	O
&	O
operations	struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void)))
,	O
&	O
implementation_data	*(void)
)	O
;	O
return	O
gnufdisk_device_internals__allocate_disklabel	(*(struct),*(struct(*((*`,*`,*`)->(void)),*((*`)->(*`)),*((*`,long,*`,*`)->(void)),*((*`)->(int)),*((*`,*`,*`,*`,*`,*`)->(void)),*((*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)))),*(void))->(*(struct))
(	O
_d	*(struct)
,	O
&	O
operations	struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void)))
,	O
implementation_data	*(void)
)	O
;	O
}	O
void	O
gnufdisk_device_set_parameter	(*(struct),*(struct),*(void),long)->(void)
(	O
struct	O
gnufdisk_device	struct(*(void),struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void))),*(void),int,int)
*	O
_d	*(struct)
,	O
struct	O
gnufdisk_string	O
*	O
_parameter	*(struct)
,	O
const	O
void	O
*	O
_data	*(void)
,	O
size_t	long
_size	long
)	O
{	O
check_device	(*(*(struct(*(void),struct(*`,*`,*`,*`,*`,*`,*`,*`),*(void),int,int))))->(void)
(	O
&	O
_d	*(struct)
)	O
;	O
check_is_open	(*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int)))->(void)
(	O
_d	*(struct)
)	O
;	O
if	O
(	O
gnufdisk_check_memory	(*(void),long,int)->(int)
(	O
_parameter	*(struct)
,	O
1	int
,	O
1	int
)	O
!=	O
0	int
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_EPARAMETERPOINTER	int
,	O
NULL	O
,	O
"invalid struct gnufdisk_string* %p"	*(char)
,	O
_parameter	*(struct)
)	O
;	O
else	O
if	O
(	O
gnufdisk_check_memory	(*(void),long,int)->(int)
(	O
(	O
void	O
*	O
)	O
_data	*(void)
,	O
_size	long
,	O
1	int
)	O
!=	O
0	int
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_EPARAMETERDATA	int
,	O
NULL	O
,	O
"invalid device parameter data: %p"	*(char)
,	O
_data	*(void)
)	O
;	O
else	O
if	O
(	O
_d	*(struct)
->	O
operations	struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void)))
.	O
set_parameter	*((*(void),*(struct),*(void),long)->(void))
==	O
NULL	O
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_ENOTSUP	int
,	O
NULL	O
,	O
"operation not supported `set parameter'"	*(char)
)	O
;	O
(	O
*	O
_d	*(struct)
->	O
operations	struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void)))
.	O
set_parameter	*((*(void),*(struct),*(void),long)->(void))
)	O
(	O
_d	*(struct)
->	O
implementation_data	*(void)
,	O
_parameter	*(struct)
,	O
_data	*(void)
,	O
_size	long
)	O
;	O
}	O
void	O
gnufdisk_device_get_parameter	(*(struct),*(struct),*(void),long)->(void)
(	O
struct	O
gnufdisk_device	struct(*(void),struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void))),*(void),int,int)
*	O
_d	*(struct)
,	O
struct	O
gnufdisk_string	O
*	O
_parameter	*(struct)
,	O
void	O
*	O
_data	*(void)
,	O
size_t	long
_size	long
)	O
{	O
check_device	(*(*(struct(*(void),struct(*`,*`,*`,*`,*`,*`,*`,*`),*(void),int,int))))->(void)
(	O
&	O
_d	*(struct)
)	O
;	O
check_is_open	(*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int)))->(void)
(	O
_d	*(struct)
)	O
;	O
if	O
(	O
gnufdisk_check_memory	(*(void),long,int)->(int)
(	O
_parameter	*(struct)
,	O
1	int
,	O
1	int
)	O
!=	O
0	int
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_EPARAMETERPOINTER	int
,	O
NULL	O
,	O
"invalid struct gnufdisk_string* %p"	*(char)
,	O
_parameter	*(struct)
)	O
;	O
else	O
if	O
(	O
gnufdisk_check_memory	(*(void),long,int)->(int)
(	O
_data	*(void)
,	O
_size	long
,	O
0	int
)	O
!=	O
0	int
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_EPARAMETERDATA	int
,	O
NULL	O
,	O
"invalid device parameter data: %p"	*(char)
,	O
_data	*(void)
)	O
;	O
else	O
if	O
(	O
_d	*(struct)
->	O
operations	struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void)))
.	O
get_parameter	*((*(void),*(struct),*(void),long)->(void))
==	O
NULL	O
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_ENOTSUP	int
,	O
NULL	O
,	O
"operation not supported `get parameter'"	*(char)
)	O
;	O
(	O
*	O
_d	*(struct)
->	O
operations	struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void)))
.	O
get_parameter	*((*(void),*(struct),*(void),long)->(void))
)	O
(	O
_d	*(struct)
->	O
implementation_data	*(void)
,	O
_parameter	*(struct)
,	O
_data	*(void)
,	O
_size	long
)	O
;	O
}	O
void	O
gnufdisk_device_commit	(*(struct))->(void)
(	O
struct	O
gnufdisk_device	struct(*(void),struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void))),*(void),int,int)
*	O
_d	*(struct)
)	O
{	O
check_device	(*(*(struct(*(void),struct(*`,*`,*`,*`,*`,*`,*`,*`),*(void),int,int))))->(void)
(	O
&	O
_d	*(struct)
)	O
;	O
check_is_open	(*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int)))->(void)
(	O
_d	*(struct)
)	O
;	O
if	O
(	O
_d	*(struct)
->	O
operations	struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void)))
.	O
commit	*((*(void))->(void))
==	O
NULL	O
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_ENOTSUP	int
,	O
NULL	O
,	O
"operation not supported `commit'"	*(char)
)	O
;	O
(	O
*	O
_d	*(struct)
->	O
operations	struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void)))
.	O
commit	*((*(void))->(void))
)	O
(	O
_d	*(struct)
->	O
implementation_data	*(void)
)	O
;	O
}	O
void	O
gnufdisk_device_close	(*(struct))->(void)
(	O
struct	O
gnufdisk_device	struct(*(void),struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void))),*(void),int,int)
*	O
_d	*(struct)
)	O
{	O
check_device	(*(*(struct(*(void),struct(*`,*`,*`,*`,*`,*`,*`,*`),*(void),int,int))))->(void)
(	O
&	O
_d	*(struct)
)	O
;	O
check_is_open	(*(struct(*(void),struct(*((*`,*`)->(void)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),*((*`,*`,*`,long)->(void)),*((*`,*`,*`,long)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void))),*(void),int,int)))->(void)
(	O
_d	*(struct)
)	O
;	O
GNUFDISK_LOG	O
(	O
(	O
DEVICE	O
,	O
"close device %p"	*(char)
,	O
_d	*(struct)
)	O
)	O
;	O
if	O
(	O
_d	*(struct)
->	O
operations	struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void)))
.	O
close	(int)->(int)
==	O
NULL	O
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_ENOTSUP	int
,	O
NULL	O
,	O
"operation not supported `close'"	*(char)
)	O
;	O
(	O
*	O
_d	*(struct)
->	O
operations	struct(*((*(void),*(struct))->(void)),*((*(void),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(void)))->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void),*(struct),*(void),long)->(void)),*((*(void))->(void)),*((*(void))->(void)),*((*(void))->(void)))
.	O
close	(int)->(int)
)	O
(	O
_d	*(struct)
->	O
implementation_data	*(void)
)	O
;	O
_d	*(struct)
->	O
is_open	int
=	O
0	int
;	O
}	O
