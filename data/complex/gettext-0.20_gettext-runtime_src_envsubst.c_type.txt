static	O
bool	bool
all_variables	bool
;	O
static	O
const	O
struct	O
option	struct(*(char),int,*(int),int)
long_options	array(struct(*(char),int,*(int),int))
[	O
]	O
=	O
{	O
{	O
"help"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'h'	O
}	O
,	O
{	O
"variables"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'v'	O
}	O
,	O
{	O
"version"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'V'	O
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
static	O
void	O
usage	(int)->(void)
(	O
int	O
status	int
)	O
__attribute__	O
(	O
(	O
noreturn	O
)	O
)	O
;	O
static	O
void	O
print_variables	(*(char))->(void)
(	O
const	O
char	O
*	O
string	*(char)
)	O
;	O
static	O
void	O
note_variables	(*(char))->(void)
(	O
const	O
char	O
*	O
string	*(char)
)	O
;	O
static	O
void	O
subst_from_stdin	()->(void)
(	O
void	O
)	O
;	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array(*(char))
[	O
]	O
)	O
{	O
bool	bool
show_variables	bool
=	O
false	int
;	O
bool	bool
do_help	bool
=	O
false	int
;	O
bool	bool
do_version	bool
=	O
false	int
;	O
int	O
opt	int
;	O
set_program_name	(*(char))->(void)
(	O
argv	array(*(char))
[	O
0	int
]	O
)	O
;	O
setlocale	(int,*(char))->(*(char))
(	O
LC_ALL	O
,	O
""	*(char)
)	O
;	O
bindtextdomain	(*(char),*(char))->(*(char))
(	O
PACKAGE	*(char)
,	O
relocate	O
(	O
LOCALEDIR	O
)	O
)	O
;	O
textdomain	(*(char))->(*(char))
(	O
PACKAGE	*(char)
)	O
;	O
atexit	(*(()->(void)))->(int)
(	O
close_stdout	()->(void)
)	O
;	O
while	O
(	O
(	O
opt	int
=	O
getopt_long	(int,*(*(char)),*(char),*(struct(*(char),int,*(int),int)),*(int))->(int)
(	O
argc	int
,	O
argv	array(*(char))
,	O
"hvV"	*(char)
,	O
long_options	array(struct(*(char),int,*(int),int))
,	O
NULL	O
)	O
)	O
!=	O
EOF	O
)	O
switch	O
(	O
opt	int
)	O
{	O
case	O
'\0'	O
:	O
break	O
;	O
case	O
'h'	O
:	O
do_help	bool
=	O
true	int
;	O
break	O
;	O
case	O
'v'	O
:	O
show_variables	bool
=	O
true	int
;	O
break	O
;	O
case	O
'V'	O
:	O
do_version	bool
=	O
true	int
;	O
break	O
;	O
default	O
:	O
usage	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
do_version	bool
)	O
{	O
printf	(*(char))->(int)
(	O
"%s (GNU %s) %s\n"	*(char)
,	O
basename	(*(char))->(*(char))
(	O
program_name	*(char)
)	O
,	O
PACKAGE	*(char)
,	O
VERSION	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Copyright (C) %s Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n"	*(char)
)	O
,	O
"2003-2019"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Written by %s.\n"	*(char)
)	O
,	O
proper_name	(*(char))->(*(char))
(	O
"Bruno Haible"	*(char)
)	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
if	O
(	O
do_help	bool
)	O
usage	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
if	O
(	O
argc	int
-	O
optind	int
>	O
1	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"too many arguments"	*(char)
)	O
)	O
;	O
if	O
(	O
show_variables	bool
)	O
{	O
switch	O
(	O
argc	int
-	O
optind	int
)	O
{	O
case	O
1	int
:	O
break	O
;	O
case	O
0	int
:	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"missing arguments"	*(char)
)	O
)	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
set_binary_mode	(int,int)->(int)
(	O
STDOUT_FILENO	int
,	O
O_BINARY	int
)	O
;	O
print_variables	(*(char))->(void)
(	O
argv	array(*(char))
[	O
optind	int
++	O
]	O
)	O
;	O
}	O
else	O
{	O
switch	O
(	O
argc	int
-	O
optind	int
)	O
{	O
case	O
1	int
:	O
all_variables	bool
=	O
false	int
;	O
note_variables	(*(char))->(void)
(	O
argv	array(*(char))
[	O
optind	int
++	O
]	O
)	O
;	O
break	O
;	O
case	O
0	int
:	O
all_variables	bool
=	O
true	int
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
subst_from_stdin	()->(void)
(	O
)	O
;	O
}	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
static	O
void	O
usage	(int)->(void)
(	O
int	O
status	int
)	O
{	O
if	O
(	O
status	int
!=	O
EXIT_SUCCESS	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"Try '%s --help' for more information.\n"	*(char)
)	O
,	O
program_name	*(char)
)	O
;	O
else	O
{	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Usage: %s [OPTION] [SHELL-FORMAT]\n"	*(char)
)	O
,	O
program_name	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Substitutes the values of environment variables.\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Operation mode:\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -v, --variables             output the variables occurring in SHELL-FORMAT\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Informative output:\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -h, --help                  display this help and exit\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -V, --version               output version information and exit\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"In normal operation mode, standard input is copied to standard output,\nwith references to environment variables of the form $VARIABLE or ${VARIABLE}\nbeing replaced with the corresponding values.  If a SHELL-FORMAT is given,\nonly those environment variables that are referenced in SHELL-FORMAT are\nsubstituted; otherwise all environment variables references occurring in\nstandard input are substituted.\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"When --variables is used, standard input is ignored, and the output consists\nof the environment variables that are referenced in SHELL-FORMAT, one per line.\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
_	O
(	O
"Report bugs to <bug-gnu-gettext@gnu.org>.\n"	*(char)
)	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
exit	(int)->(void)
(	O
status	int
)	O
;	O
}	O
static	O
void	O
find_variables	(*(char),*((*(char),long)->(void)))->(void)
(	O
const	O
char	O
*	O
string	*(char)
,	O
void	O
(	O
*	O
callback	*((*(char),long)->(void))
)	O
(	O
const	O
char	O
*	O
var_ptr	*(char)
,	O
size_t	long
var_len	long
)	O
)	O
{	O
for	O
(	O
;	O
*	O
string	*(char)
!=	O
'\0'	O
;	O
)	O
if	O
(	O
*	O
string	*(char)
++	O
==	O
'$'	O
)	O
{	O
const	O
char	O
*	O
variable_start	*(char)
;	O
const	O
char	O
*	O
variable_end	*(char)
;	O
bool	bool
valid	bool
;	O
char	O
c	char
;	O
if	O
(	O
*	O
string	*(char)
==	O
'{'	O
)	O
string	*(char)
++	O
;	O
variable_start	*(char)
=	O
string	*(char)
;	O
c	char
=	O
*	O
string	*(char)
;	O
if	O
(	O
(	O
c	char
>=	O
'A'	O
&&	O
c	char
<=	O
'Z'	O
)	O
||	O
(	O
c	char
>=	O
'a'	O
&&	O
c	char
<=	O
'z'	O
)	O
||	O
c	char
==	O
'_'	O
)	O
{	O
do	O
c	char
=	O
*	O
++	O
string	*(char)
;	O
while	O
(	O
(	O
c	char
>=	O
'A'	O
&&	O
c	char
<=	O
'Z'	O
)	O
||	O
(	O
c	char
>=	O
'a'	O
&&	O
c	char
<=	O
'z'	O
)	O
||	O
(	O
c	char
>=	O
'0'	O
&&	O
c	char
<=	O
'9'	O
)	O
||	O
c	char
==	O
'_'	O
)	O
;	O
variable_end	*(char)
=	O
string	*(char)
;	O
if	O
(	O
variable_start	*(char)
[	O
-	O
1	int
]	O
==	O
'{'	O
)	O
{	O
if	O
(	O
*	O
string	*(char)
==	O
'}'	O
)	O
{	O
string	*(char)
++	O
;	O
valid	bool
=	O
true	int
;	O
}	O
else	O
valid	bool
=	O
false	int
;	O
}	O
else	O
valid	bool
=	O
true	int
;	O
if	O
(	O
valid	bool
)	O
callback	*((*(char),long)->(void))
(	O
variable_start	*(char)
,	O
variable_end	*(char)
-	O
variable_start	*(char)
)	O
;	O
}	O
}	O
}	O
static	O
void	O
print_variable	(*(char),long)->(void)
(	O
const	O
char	O
*	O
var_ptr	*(char)
,	O
size_t	long
var_len	long
)	O
{	O
fwrite	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
var_ptr	*(char)
,	O
var_len	long
,	O
1	int
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
putchar	(int)->(int)
(	O
'\n'	O
)	O
;	O
}	O
static	O
void	O
print_variables	(*(char))->(void)
(	O
const	O
char	O
*	O
string	*(char)
)	O
{	O
find_variables	(*(char),*((*(char),long)->(void)))->(void)
(	O
string	*(char)
,	O
&	O
print_variable	(*(char),long)->(void)
)	O
;	O
}	O
typedef	O
struct	O
string_list_ty	struct
string_list_ty	struct
;	O
struct	O
string_list_ty	struct
{	O
const	O
char	O
*	O
*	O
item	*(*(char))
;	O
size_t	long
nitems	long
;	O
size_t	long
nitems_max	long
;	O
}	O
;	O
static	O
inline	O
void	O
string_list_init	(*(struct(*(*(char)),long,long)))->(void)
(	O
string_list_ty	struct
*	O
slp	*(struct(*(*(char)),long,long))
)	O
{	O
slp	*(struct(*(*(char)),long,long))
->	O
item	*(*(char))
=	O
NULL	O
;	O
slp	*(struct(*(*(char)),long,long))
->	O
nitems	long
=	O
0	int
;	O
slp	*(struct(*(*(char)),long,long))
->	O
nitems_max	long
=	O
0	int
;	O
}	O
static	O
inline	O
void	O
string_list_append	(*(struct(*(*(char)),long,long)),*(char))->(void)
(	O
string_list_ty	struct
*	O
slp	*(struct(*(*(char)),long,long))
,	O
const	O
char	O
*	O
s	long
)	O
{	O
if	O
(	O
slp	*(struct(*(*(char)),long,long))
->	O
nitems	long
>=	O
slp	*(struct(*(*(char)),long,long))
->	O
nitems_max	long
)	O
{	O
size_t	long
nbytes	long
;	O
slp	*(struct(*(*(char)),long,long))
->	O
nitems_max	long
=	O
slp	*(struct(*(*(char)),long,long))
->	O
nitems_max	long
*	O
2	int
+	O
4	int
;	O
nbytes	long
=	O
slp	*(struct(*(*(char)),long,long))
->	O
nitems_max	long
*	O
sizeof	O
(	O
slp	*(struct(*(*(char)),long,long))
->	O
item	*(*(char))
[	O
0	int
]	O
)	O
;	O
slp	*(struct(*(*(char)),long,long))
->	O
item	*(*(char))
=	O
(	O
const	O
char	O
*	O
*	O
)	O
xrealloc	(*(void),long)->(*(void))
(	O
slp	*(struct(*(*(char)),long,long))
->	O
item	*(*(char))
,	O
nbytes	long
)	O
;	O
}	O
slp	*(struct(*(*(char)),long,long))
->	O
item	*(*(char))
[	O
slp	*(struct(*(*(char)),long,long))
->	O
nitems	long
++	O
]	O
=	O
s	long
;	O
}	O
static	O
int	O
cmp_string	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
pstr1	*(void)
,	O
const	O
void	O
*	O
pstr2	*(void)
)	O
{	O
const	O
char	O
*	O
str1	*(char)
=	O
*	O
(	O
const	O
char	O
*	O
*	O
)	O
pstr1	*(void)
;	O
const	O
char	O
*	O
str2	*(char)
=	O
*	O
(	O
const	O
char	O
*	O
*	O
)	O
pstr2	*(void)
;	O
return	O
strcmp	(*(char),*(char))->(int)
(	O
str1	*(char)
,	O
str2	*(char)
)	O
;	O
}	O
static	O
inline	O
void	O
string_list_sort	(*(struct(*(*(char)),long,long)))->(void)
(	O
string_list_ty	struct
*	O
slp	*(struct(*(*(char)),long,long))
)	O
{	O
if	O
(	O
slp	*(struct(*(*(char)),long,long))
->	O
nitems	long
>	O
0	int
)	O
qsort	(*(void),long,long,*((*(void),*(void))->(int)))->(void)
(	O
slp	*(struct(*(*(char)),long,long))
->	O
item	*(*(char))
,	O
slp	*(struct(*(*(char)),long,long))
->	O
nitems	long
,	O
sizeof	O
(	O
slp	*(struct(*(*(char)),long,long))
->	O
item	*(*(char))
[	O
0	int
]	O
)	O
,	O
cmp_string	(*(void),*(void))->(int)
)	O
;	O
}	O
static	O
inline	O
int	O
string_list_member	(*(struct(*(*(char)),long,long)),*(char))->(int)
(	O
const	O
string_list_ty	struct
*	O
slp	*(struct(*(*(char)),long,long))
,	O
const	O
char	O
*	O
s	long
)	O
{	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
slp	*(struct(*(*(char)),long,long))
->	O
nitems	long
;	O
++	O
j	long
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
slp	*(struct(*(*(char)),long,long))
->	O
item	*(*(char))
[	O
j	long
]	O
,	O
s	long
)	O
==	O
0	int
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
sorted_string_list_member	(*(struct(*(*(char)),long,long)),*(char))->(int)
(	O
const	O
string_list_ty	struct
*	O
slp	*(struct(*(*(char)),long,long))
,	O
const	O
char	O
*	O
s	long
)	O
{	O
size_t	long
j1	long
,	O
j2	long
;	O
j1	long
=	O
0	int
;	O
j2	long
=	O
slp	*(struct(*(*(char)),long,long))
->	O
nitems	long
;	O
if	O
(	O
j2	long
>	O
0	int
)	O
{	O
while	O
(	O
j2	long
-	O
j1	long
>	O
1	int
)	O
{	O
size_t	long
j	long
=	O
(	O
j1	long
+	O
j2	long
)	O
>>	O
1	int
;	O
int	O
result	int
=	O
strcmp	(*(char),*(char))->(int)
(	O
slp	*(struct(*(*(char)),long,long))
->	O
item	*(*(char))
[	O
j	long
]	O
,	O
s	long
)	O
;	O
if	O
(	O
result	int
>	O
0	int
)	O
j2	long
=	O
j	long
;	O
else	O
if	O
(	O
result	int
==	O
0	int
)	O
return	O
1	int
;	O
else	O
j1	long
=	O
j	long
+	O
1	int
;	O
}	O
if	O
(	O
j2	long
>	O
j1	long
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
slp	*(struct(*(*(char)),long,long))
->	O
item	*(*(char))
[	O
j1	long
]	O
,	O
s	long
)	O
==	O
0	int
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
inline	O
void	O
string_list_destroy	(*(struct(*(*(char)),long,long)))->(void)
(	O
string_list_ty	struct
*	O
slp	*(struct(*(*(char)),long,long))
)	O
{	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
slp	*(struct(*(*(char)),long,long))
->	O
nitems	long
;	O
++	O
j	long
)	O
free	(*(void))->(void)
(	O
(	O
char	O
*	O
)	O
slp	*(struct(*(*(char)),long,long))
->	O
item	*(*(char))
[	O
j	long
]	O
)	O
;	O
if	O
(	O
slp	*(struct(*(*(char)),long,long))
->	O
item	*(*(char))
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
slp	*(struct(*(*(char)),long,long))
->	O
item	*(*(char))
)	O
;	O
}	O
static	O
string_list_ty	struct
variables_set	struct(*(*(char)),long,long)
;	O
static	O
void	O
note_variable	(*(char),long)->(void)
(	O
const	O
char	O
*	O
var_ptr	*(char)
,	O
size_t	long
var_len	long
)	O
{	O
char	O
*	O
string	*(char)
=	O
XNMALLOC	O
(	O
var_len	long
+	O
1	int
,	O
char	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
string	*(char)
,	O
var_ptr	*(char)
,	O
var_len	long
)	O
;	O
string	*(char)
[	O
var_len	long
]	O
=	O
'\0'	O
;	O
string_list_append	(*(struct(*(*(char)),long,long)),*(char))->(void)
(	O
&	O
variables_set	struct(*(*(char)),long,long)
,	O
string	*(char)
)	O
;	O
}	O
static	O
void	O
note_variables	(*(char))->(void)
(	O
const	O
char	O
*	O
string	*(char)
)	O
{	O
string_list_init	(*(struct(*(*(char)),long,long)))->(void)
(	O
&	O
variables_set	struct(*(*(char)),long,long)
)	O
;	O
find_variables	(*(char),*((*(char),long)->(void)))->(void)
(	O
string	*(char)
,	O
&	O
note_variable	(*(char),long)->(void)
)	O
;	O
string_list_sort	(*(struct(*(*(char)),long,long)))->(void)
(	O
&	O
variables_set	struct(*(*(char)),long,long)
)	O
;	O
}	O
static	O
int	O
do_getc	()->(int)
(	O
)	O
{	O
int	O
c	char
=	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
c	char
==	O
EOF	O
)	O
{	O
if	O
(	O
ferror	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"error while reading \"%s\""	*(char)
)	O
,	O
_	O
(	O
"standard input"	*(char)
)	O
)	O
;	O
}	O
return	O
c	char
;	O
}	O
static	O
inline	O
void	O
do_ungetc	(int)->(void)
(	O
int	O
c	char
)	O
{	O
if	O
(	O
c	char
!=	O
EOF	O
)	O
ungetc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
c	char
,	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
static	O
void	O
subst_from_stdin	()->(void)
(	O
)	O
{	O
static	O
char	O
*	O
buffer	*(char)
;	O
static	O
size_t	long
bufmax	long
;	O
static	O
size_t	long
buflen	long
;	O
int	O
c	char
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	char
=	O
do_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	char
==	O
EOF	O
)	O
break	O
;	O
if	O
(	O
c	char
==	O
'$'	O
)	O
{	O
bool	bool
opening_brace	bool
=	O
false	int
;	O
bool	bool
closing_brace	bool
=	O
false	int
;	O
c	char
=	O
do_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	char
==	O
'{'	O
)	O
{	O
opening_brace	bool
=	O
true	int
;	O
c	char
=	O
do_getc	()->(int)
(	O
)	O
;	O
}	O
if	O
(	O
(	O
c	char
>=	O
'A'	O
&&	O
c	char
<=	O
'Z'	O
)	O
||	O
(	O
c	char
>=	O
'a'	O
&&	O
c	char
<=	O
'z'	O
)	O
||	O
c	char
==	O
'_'	O
)	O
{	O
bool	bool
valid	bool
;	O
buflen	long
=	O
0	int
;	O
do	O
{	O
if	O
(	O
buflen	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
buffer	*(char)
[	O
buflen	long
++	O
]	O
=	O
c	char
;	O
c	char
=	O
do_getc	()->(int)
(	O
)	O
;	O
}	O
while	O
(	O
(	O
c	char
>=	O
'A'	O
&&	O
c	char
<=	O
'Z'	O
)	O
||	O
(	O
c	char
>=	O
'a'	O
&&	O
c	char
<=	O
'z'	O
)	O
||	O
(	O
c	char
>=	O
'0'	O
&&	O
c	char
<=	O
'9'	O
)	O
||	O
c	char
==	O
'_'	O
)	O
;	O
if	O
(	O
opening_brace	bool
)	O
{	O
if	O
(	O
c	char
==	O
'}'	O
)	O
{	O
closing_brace	bool
=	O
true	int
;	O
valid	bool
=	O
true	int
;	O
}	O
else	O
{	O
valid	bool
=	O
false	int
;	O
do_ungetc	(int)->(void)
(	O
c	char
)	O
;	O
}	O
}	O
else	O
{	O
valid	bool
=	O
true	int
;	O
do_ungetc	(int)->(void)
(	O
c	char
)	O
;	O
}	O
if	O
(	O
valid	bool
)	O
{	O
if	O
(	O
buflen	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
buffer	*(char)
[	O
buflen	long
]	O
=	O
'\0'	O
;	O
if	O
(	O
!	O
all_variables	bool
&&	O
!	O
sorted_string_list_member	(*(struct(*(*(char)),long,long)),*(char))->(int)
(	O
&	O
variables_set	struct(*(*(char)),long,long)
,	O
buffer	*(char)
)	O
)	O
valid	bool
=	O
false	int
;	O
}	O
if	O
(	O
valid	bool
)	O
{	O
const	O
char	O
*	O
env_value	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
buffer	*(char)
)	O
;	O
if	O
(	O
env_value	*(char)
!=	O
NULL	O
)	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
env_value	*(char)
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
else	O
{	O
putchar	(int)->(int)
(	O
'$'	O
)	O
;	O
if	O
(	O
opening_brace	bool
)	O
putchar	(int)->(int)
(	O
'{'	O
)	O
;	O
fwrite	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
buffer	*(char)
,	O
buflen	long
,	O
1	int
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
closing_brace	bool
)	O
putchar	(int)->(int)
(	O
'}'	O
)	O
;	O
}	O
}	O
else	O
{	O
do_ungetc	(int)->(void)
(	O
c	char
)	O
;	O
putchar	(int)->(int)
(	O
'$'	O
)	O
;	O
if	O
(	O
opening_brace	bool
)	O
putchar	(int)->(int)
(	O
'{'	O
)	O
;	O
}	O
}	O
else	O
putchar	(int)->(int)
(	O
c	char
)	O
;	O
}	O
}	O
