int	O
keepalive	int
=	O
1	int
;	O
int	O
check_all	int
;	O
int	O
log_success	int
;	O
int	O
sent_null	int
;	O
void	O
doit	(int,*(struct(short,short,struct(int),array(char))))->(void)
(	O
int	O
,	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
*	O
)	O
;	O
void	O
rshd_error	(*(char))->(void)
(	O
const	O
char	O
*	O
,	O
...	O
)	O
;	O
char	O
*	O
getstr	(*(char))->(*(char))
(	O
const	O
char	O
*	O
)	O
;	O
int	O
local_domain	(*(char))->(int)
(	O
const	O
char	O
*	O
)	O
;	O
const	O
char	O
*	O
topdomain	(*(char))->(*(char))
(	O
const	O
char	O
*	O
)	O
;	O
static	O
struct	O
argp_option	struct(*(char),int,*(char),int,*(char),int)
options	*(struct(*(char),int,*(char),int,*(char),int))
[	O
]	O
=	O
{	O
{	O
"verify-hostname"	*(char)
,	O
'a'	O
,	O
NULL	O
,	O
0	int
,	O
"ask hostname for verification"	*(char)
}	O
,	O
{	O
"no-rhosts"	*(char)
,	O
'l'	O
,	O
NULL	O
,	O
0	int
,	O
"ignore .rhosts file"	*(char)
}	O
,	O
{	O
"no-keepalive"	*(char)
,	O
'n'	O
,	O
NULL	O
,	O
0	int
,	O
"do not set SO_KEEPALIVE"	*(char)
}	O
,	O
{	O
"log-sessions"	*(char)
,	O
'L'	O
,	O
NULL	O
,	O
0	int
,	O
"log successfull logins"	*(char)
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
extern	O
int	O
__check_rhosts_file	int
;	O
extern	O
int	O
iruserok	(int,int,*(char),*(char))->(int)
(	O
uint32_t	int
raddr	int
,	O
int	O
superuser	int
,	O
const	O
char	O
*	O
ruser	*(char)
,	O
const	O
char	O
*	O
luser	*(char)
)	O
;	O
static	O
error_t	int
parse_opt	(int,*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))))->(int)
(	O
int	O
key	int
,	O
char	O
*	O
arg	*(char)
,	O
struct	O
argp_state	struct(*(struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct`))->(int)),*(char),*(char),*(struct(*(struct`),int,*(char),int)),*((int,*(char),*(void))->(*(char))),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(void))
*	O
state	*(int)
)	O
{	O
switch	O
(	O
key	int
)	O
{	O
case	O
'a'	O
:	O
check_all	int
=	O
1	int
;	O
break	O
;	O
case	O
'l'	O
:	O
__check_rhosts_file	int
=	O
0	int
;	O
break	O
;	O
case	O
'n'	O
:	O
keepalive	int
=	O
0	int
;	O
break	O
;	O
case	O
'L'	O
:	O
log_success	int
=	O
1	int
;	O
break	O
;	O
default	O
:	O
return	O
ARGP_ERR_UNKNOWN	O
;	O
}	O
return	O
0	int
;	O
}	O
const	O
char	O
doc	*(char)
[	O
]	O
=	O
"Remote shell server"	*(char)
;	O
static	O
struct	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
=	O
{	O
options	*(struct(*(char),int,*(char),int,*(char),int))
,	O
parse_opt	(int,*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))))->(int)
,	O
NULL	O
,	O
doc	*(char)
}	O
;	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	*(*(char))
[	O
]	O
)	O
{	O
int	O
index	(*(char),int)->(*(char))
;	O
struct	O
linger	struct(int,int)
linger	struct(int,int)
;	O
int	O
on	int
=	O
1	int
;	O
socklen_t	int
fromlen	int
;	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
from	struct(short,short,struct(int),array(char))
;	O
int	O
sockfd	int
;	O
set_program_name	(*(char))->(void)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
iu_argp_init	O
(	O
"rshd"	*(char)
,	O
default_program_authors	array(*(char))
)	O
;	O
argp_parse	(*(struct(*(struct(*`,int,*`,int,*`,int)),*((int,*`,*`)->(int)),*(char),*(char),*(struct(*`,int,*`,int)),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,*(int),*(void))->(int)
(	O
&	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
,	O
argc	int
,	O
argv	*(*(char))
,	O
0	int
,	O
&	O
index	(*(char),int)->(*(char))
,	O
NULL	O
)	O
;	O
openlog	(*(char),int,int)->(void)
(	O
"rshd"	*(char)
,	O
LOG_PID	int
|	O
LOG_ODELAY	int
,	O
LOG_DAEMON	O
)	O
;	O
argc	int
-=	O
index	(*(char),int)->(*(char))
;	O
if	O
(	O
argc	int
>	O
0	int
)	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"%d extra arguments"	*(char)
,	O
argc	int
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
sockfd	int
=	O
STDIN_FILENO	int
;	O
fromlen	int
=	O
sizeof	O
from	struct(short,short,struct(int),array(char))
;	O
if	O
(	O
getpeername	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),*(int))->(int)
(	O
sockfd	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
from	struct(short,short,struct(int),array(char))
,	O
&	O
fromlen	int
)	O
<	O
0	int
)	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"getpeername: %m"	*(char)
)	O
;	O
_exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
keepalive	int
&&	O
setsockopt	(int,int,int,*(void),int)->(int)
(	O
sockfd	int
,	O
SOL_SOCKET	int
,	O
SO_KEEPALIVE	int
,	O
(	O
char	O
*	O
)	O
&	O
on	int
,	O
sizeof	O
on	int
)	O
<	O
0	int
)	O
syslog	(int,*(char))->(void)
(	O
LOG_WARNING	int
,	O
"setsockopt (SO_KEEPALIVE): %m"	*(char)
)	O
;	O
linger	struct(int,int)
.	O
l_onoff	int
=	O
1	int
;	O
linger	struct(int,int)
.	O
l_linger	int
=	O
60	int
;	O
if	O
(	O
setsockopt	(int,int,int,*(void),int)->(int)
(	O
sockfd	int
,	O
SOL_SOCKET	int
,	O
SO_LINGER	int
,	O
(	O
char	O
*	O
)	O
&	O
linger	struct(int,int)
,	O
sizeof	O
linger	struct(int,int)
)	O
<	O
0	int
)	O
syslog	(int,*(char))->(void)
(	O
LOG_WARNING	int
,	O
"setsockopt (SO_LINGER): %m"	*(char)
)	O
;	O
doit	(int,*(struct(short,short,struct(int),array(char))))->(void)
(	O
sockfd	int
,	O
&	O
from	struct(short,short,struct(int),array(char))
)	O
;	O
return	O
0	int
;	O
}	O
char	O
username	array(char)
[	O
20	int
]	O
=	O
"USER="	*(char)
;	O
char	O
logname	array(char)
[	O
23	int
]	O
=	O
"LOGNAME="	*(char)
;	O
char	O
homedir	array(char)
[	O
64	int
]	O
=	O
"HOME="	*(char)
;	O
char	O
shell	array(char)
[	O
64	int
]	O
=	O
"SHELL="	*(char)
;	O
char	O
path	array(char)
[	O
100	int
]	O
=	O
"PATH="	*(char)
;	O
char	O
*	O
envinit	array(*(char))
[	O
]	O
=	O
{	O
homedir	array(char)
,	O
shell	array(char)
,	O
path	array(char)
,	O
logname	array(char)
,	O
username	array(char)
,	O
0	int
}	O
;	O
extern	O
char	O
*	O
*	O
environ	*(*(char))
;	O
void	O
doit	(int,*(struct(short,short,struct(int),array(char))))->(void)
(	O
int	O
sockfd	int
,	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
*	O
fromp	*(struct(short,short,struct(int),array(char)))
)	O
{	O
extern	O
char	O
*	O
__rcmd_errstr	*(char)
;	O
struct	O
hostent	struct(*(char),*(*(char)),int,int,*(*(char)))
*	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
;	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
;	O
unsigned	O
short	O
port	short
;	O
fd_set	struct(array(long))
ready	struct(array(long))
,	O
readfrom	struct(array(long))
;	O
int	O
cc	int
,	O
nfd	int
,	O
pv	array(int)
[	O
2	int
]	O
,	O
pid	int
,	O
s	int
=	O
sockfd	int
;	O
int	O
one	int
=	O
1	int
;	O
const	O
char	O
*	O
hostname	*(char)
,	O
*	O
errorstr	*(char)
,	O
*	O
errorhost	*(char)
=	O
NULL	O
;	O
char	O
*	O
cp	*(char)
,	O
sig	char
,	O
buf	array(char)
[	O
BUFSIZ	int
]	O
;	O
char	O
*	O
cmdbuf	*(char)
,	O
*	O
locuser	*(char)
,	O
*	O
remuser	*(char)
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGINT	int
,	O
SIG_DFL	O
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGQUIT	int
,	O
SIG_DFL	O
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGTERM	int
,	O
SIG_DFL	O
)	O
;	O
if	O
(	O
fromp	*(struct(short,short,struct(int),array(char)))
->	O
sin_family	short
!=	O
AF_INET	O
)	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"malformed \"from\" address (af %d)\n"	*(char)
,	O
fromp	*(struct(short,short,struct(int),array(char)))
->	O
sin_family	short
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
{	O
unsigned	O
char	O
optbuf	array(char)
[	O
BUFSIZ	int
/	O
3	int
]	O
,	O
*	O
cp	*(char)
;	O
char	O
lbuf	array(char)
[	O
BUFSIZ	int
]	O
,	O
*	O
lp	*(char)
;	O
socklen_t	int
optsize	int
=	O
sizeof	O
(	O
optbuf	array(char)
)	O
;	O
int	O
ipproto	int
;	O
struct	O
protoent	struct(*(char),*(*(char)),int)
*	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
;	O
if	O
(	O
(	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
=	O
getprotobyname	(*(char))->(*(struct(*(char),*(*(char)),int)))
(	O
"ip"	*(char)
)	O
)	O
!=	O
NULL	O
)	O
ipproto	int
=	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
->	O
p_proto	int
;	O
else	O
ipproto	int
=	O
IPPROTO_IP	int
;	O
if	O
(	O
!	O
getsockopt	(int,int,int,*(void),*(int))->(int)
(	O
sockfd	int
,	O
ipproto	int
,	O
IP_OPTIONS	int
,	O
(	O
char	O
*	O
)	O
optbuf	array(char)
,	O
&	O
optsize	int
)	O
&&	O
optsize	int
!=	O
0	int
)	O
{	O
lp	*(char)
=	O
lbuf	array(char)
;	O
for	O
(	O
cp	*(char)
=	O
optbuf	array(char)
;	O
optsize	int
>	O
0	int
;	O
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
lp	*(char)
,	O
" %2.2x"	*(char)
,	O
*	O
cp	*(char)
)	O
;	O
lp	*(char)
+=	O
3	int
;	O
if	O
(	O
*	O
cp	*(char)
==	O
IPOPT_SSRR	int
||	O
*	O
cp	*(char)
==	O
IPOPT_LSRR	int
)	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_NOTICE	int
,	O
"Discarding connection from %s with set source routing"	*(char)
,	O
inet_ntoa	(struct(int))->(*(char))
(	O
fromp	*(struct(short,short,struct(int),array(char)))
->	O
sin_addr	struct(int)
)	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
*	O
cp	*(char)
==	O
IPOPT_EOL	int
)	O
break	O
;	O
if	O
(	O
*	O
cp	*(char)
==	O
IPOPT_NOP	int
)	O
cp	*(char)
++	O
,	O
optsize	int
--	O
;	O
else	O
{	O
int	O
inc	int
=	O
cp	*(char)
[	O
1	int
]	O
;	O
optsize	int
-=	O
inc	int
;	O
cp	*(char)
+=	O
inc	int
;	O
}	O
}	O
syslog	(int,*(char))->(void)
(	O
LOG_NOTICE	int
,	O
"Connection received from %s using IP options (erased):%s"	*(char)
,	O
inet_ntoa	(struct(int))->(*(char))
(	O
fromp	*(struct(short,short,struct(int),array(char)))
->	O
sin_addr	struct(int)
)	O
,	O
lbuf	array(char)
)	O
;	O
if	O
(	O
setsockopt	(int,int,int,*(void),int)->(int)
(	O
sockfd	int
,	O
ipproto	int
,	O
IP_OPTIONS	int
,	O
(	O
char	O
*	O
)	O
NULL	O
,	O
optsize	int
)	O
!=	O
0	int
)	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"setsockopt IP_OPTIONS NULL: %m"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
}	O
fromp	*(struct(short,short,struct(int),array(char)))
->	O
sin_port	short
=	O
ntohs	(short)->(short)
(	O
(	O
unsigned	O
short	O
)	O
fromp	*(struct(short,short,struct(int),array(char)))
->	O
sin_port	short
)	O
;	O
if	O
(	O
fromp	*(struct(short,short,struct(int),array(char)))
->	O
sin_port	short
>=	O
IPPORT_RESERVED	int
||	O
fromp	*(struct(short,short,struct(int),array(char)))
->	O
sin_port	short
<	O
IPPORT_RESERVED	int
/	O
2	int
)	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_NOTICE	int
|	O
LOG_AUTH	O
,	O
"Connection from %s on illegal port %u"	*(char)
,	O
inet_ntoa	(struct(int))->(*(char))
(	O
fromp	*(struct(short,short,struct(int),array(char)))
->	O
sin_addr	struct(int)
)	O
,	O
fromp	*(struct(short,short,struct(int),array(char)))
->	O
sin_port	short
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
alarm	(int)->(int)
(	O
60	int
)	O
;	O
port	short
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
char	O
c	char
;	O
if	O
(	O
(	O
cc	int
=	O
read	(int,*(void),long)->(long)
(	O
sockfd	int
,	O
&	O
c	char
,	O
1	int
)	O
)	O
!=	O
1	int
)	O
{	O
if	O
(	O
cc	int
<	O
0	int
)	O
syslog	(int,*(char))->(void)
(	O
LOG_NOTICE	int
,	O
"read: %m"	*(char)
)	O
;	O
shutdown	(int,int)->(int)
(	O
sockfd	int
,	O
2	int
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
c	char
==	O
0	int
)	O
break	O
;	O
port	short
=	O
port	short
*	O
10	int
+	O
c	char
-	O
'0'	O
;	O
}	O
alarm	(int)->(int)
(	O
0	int
)	O
;	O
if	O
(	O
port	short
!=	O
0	int
)	O
{	O
int	O
lport	int
=	O
IPPORT_RESERVED	int
-	O
1	int
;	O
s	int
=	O
rresvport	(*(int))->(int)
(	O
&	O
lport	int
)	O
;	O
if	O
(	O
s	int
<	O
0	int
)	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"can't get stderr port: %m"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
port	short
>=	O
IPPORT_RESERVED	int
||	O
port	short
<	O
IPPORT_RESERVED	int
/	O
2	int
)	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"2nd port not reserved\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
fromp	*(struct(short,short,struct(int),array(char)))
->	O
sin_port	short
=	O
htons	(short)->(short)
(	O
port	short
)	O
;	O
if	O
(	O
connect	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(int)
(	O
s	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
fromp	*(struct(short,short,struct(int),array(char)))
,	O
sizeof	O
(	O
*	O
fromp	*(struct(short,short,struct(int),array(char)))
)	O
)	O
<	O
0	int
)	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_INFO	int
,	O
"connect second port %d: %m"	*(char)
,	O
port	short
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
if	O
(	O
sockfd	int
!=	O
STDIN_FILENO	int
)	O
{	O
dup2	(int,int)->(int)
(	O
sockfd	int
,	O
STDIN_FILENO	int
)	O
;	O
dup2	(int,int)->(int)
(	O
sockfd	int
,	O
STDOUT_FILENO	int
)	O
;	O
dup2	(int,int)->(int)
(	O
sockfd	int
,	O
STDERR_FILENO	int
)	O
;	O
}	O
errorstr	*(char)
=	O
NULL	O
;	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
=	O
gethostbyaddr	(*(void),int,int)->(*(struct(*(char),*(*(char)),int,int,*(*(char)))))
(	O
(	O
char	O
*	O
)	O
&	O
fromp	*(struct(short,short,struct(int),array(char)))
->	O
sin_addr	struct(int)
,	O
sizeof	O
(	O
struct	O
in_addr	struct(int)
)	O
,	O
fromp	*(struct(short,short,struct(int),array(char)))
->	O
sin_family	short
)	O
;	O
if	O
(	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
)	O
{	O
hostname	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_name	*(char)
)	O
;	O
if	O
(	O
check_all	int
||	O
local_domain	(*(char))->(int)
(	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_name	*(char)
)	O
)	O
{	O
char	O
*	O
remotehost	*(char)
=	O
alloca	O
(	O
strlen	(*(char))->(long)
(	O
hostname	*(char)
)	O
+	O
1	int
)	O
;	O
if	O
(	O
!	O
remotehost	*(char)
)	O
errorstr	*(char)
=	O
"Out of memory\n"	*(char)
;	O
else	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
remotehost	*(char)
,	O
hostname	*(char)
)	O
;	O
errorhost	*(char)
=	O
remotehost	*(char)
;	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
=	O
gethostbyname	(*(char))->(*(struct(*(char),*(*(char)),int,int,*(*(char)))))
(	O
remotehost	*(char)
)	O
;	O
if	O
(	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
==	O
NULL	O
)	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_INFO	int
,	O
"Couldn't look up address for %s"	*(char)
,	O
remotehost	*(char)
)	O
;	O
errorstr	*(char)
=	O
"Couldn't look up address for your host (%s)\n"	*(char)
;	O
hostname	*(char)
=	O
inet_ntoa	(struct(int))->(*(char))
(	O
fromp	*(struct(short,short,struct(int),array(char)))
->	O
sin_addr	struct(int)
)	O
;	O
}	O
else	O
for	O
(	O
;	O
;	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_addr_list	*(*(char))
++	O
)	O
{	O
if	O
(	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_addr_list	*(*(char))
[	O
0	int
]	O
==	O
NULL	O
)	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_NOTICE	int
,	O
"Host addr %s not listed for host %s"	*(char)
,	O
inet_ntoa	(struct(int))->(*(char))
(	O
fromp	*(struct(short,short,struct(int),array(char)))
->	O
sin_addr	struct(int)
)	O
,	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_name	*(char)
)	O
;	O
errorstr	*(char)
=	O
"Host address mismatch for %s\n"	*(char)
;	O
hostname	*(char)
=	O
inet_ntoa	(struct(int))->(*(char))
(	O
fromp	*(struct(short,short,struct(int),array(char)))
->	O
sin_addr	struct(int)
)	O
;	O
break	O
;	O
}	O
if	O
(	O
!	O
memcmp	(*(void),*(void),long)->(int)
(	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_addr_list	*(*(char))
[	O
0	int
]	O
,	O
(	O
caddr_t	*(char)
)	O
&	O
fromp	*(struct(short,short,struct(int),array(char)))
->	O
sin_addr	struct(int)
,	O
sizeof	O
fromp	*(struct(short,short,struct(int),array(char)))
->	O
sin_addr	struct(int)
)	O
)	O
{	O
hostname	*(char)
=	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_name	*(char)
;	O
break	O
;	O
}	O
}	O
}	O
}	O
}	O
else	O
errorhost	*(char)
=	O
hostname	*(char)
=	O
inet_ntoa	(struct(int))->(*(char))
(	O
fromp	*(struct(short,short,struct(int),array(char)))
->	O
sin_addr	struct(int)
)	O
;	O
remuser	*(char)
=	O
getstr	(*(char))->(*(char))
(	O
"remuser"	*(char)
)	O
;	O
locuser	*(char)
=	O
getstr	(*(char))->(*(char))
(	O
"locuser"	*(char)
)	O
;	O
cmdbuf	*(char)
=	O
getstr	(*(char))->(*(char))
(	O
"command"	*(char)
)	O
;	O
setpwent	()->(void)
(	O
)	O
;	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
getpwnam	(*(char))->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
locuser	*(char)
)	O
;	O
if	O
(	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
==	O
NULL	O
)	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_INFO	int
|	O
LOG_AUTH	O
,	O
"%s@%s as %s: unknown login. cmd='%.80s'"	*(char)
,	O
remuser	*(char)
,	O
hostname	*(char)
,	O
locuser	*(char)
,	O
cmdbuf	*(char)
)	O
;	O
if	O
(	O
errorstr	*(char)
==	O
NULL	O
)	O
errorstr	*(char)
=	O
"Login incorrect.\n"	*(char)
;	O
goto	O
fail	O
;	O
}	O
if	O
(	O
errorstr	*(char)
||	O
(	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_passwd	*(char)
!=	O
0	int
&&	O
*	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_passwd	*(char)
!=	O
'\0'	O
&&	O
(	O
iruserok	(int,int,*(char),*(char))->(int)
(	O
fromp	*(struct(short,short,struct(int),array(char)))
->	O
sin_addr	struct(int)
.	O
s_addr	int
,	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_uid	int
==	O
0	int
,	O
remuser	*(char)
,	O
locuser	*(char)
)	O
)	O
<	O
0	int
)	O
)	O
{	O
if	O
(	O
__rcmd_errstr	*(char)
)	O
syslog	(int,*(char))->(void)
(	O
LOG_INFO	int
|	O
LOG_AUTH	O
,	O
"%s@%s as %s: permission denied (%s). cmd='%.80s'"	*(char)
,	O
remuser	*(char)
,	O
hostname	*(char)
,	O
locuser	*(char)
,	O
__rcmd_errstr	*(char)
,	O
cmdbuf	*(char)
)	O
;	O
else	O
syslog	(int,*(char))->(void)
(	O
LOG_INFO	int
|	O
LOG_AUTH	O
,	O
"%s@%s as %s: permission denied. cmd='%.80s'"	*(char)
,	O
remuser	*(char)
,	O
hostname	*(char)
,	O
locuser	*(char)
,	O
cmdbuf	*(char)
)	O
;	O
fail	O
:	O
if	O
(	O
errorstr	*(char)
==	O
NULL	O
)	O
errorstr	*(char)
=	O
"Permission denied.\n"	*(char)
;	O
rshd_error	(*(char))->(void)
(	O
errorstr	*(char)
,	O
errorhost	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_uid	int
&&	O
!	O
access	(*(char),int)->(int)
(	O
PATH_NOLOGIN	O
,	O
F_OK	int
)	O
)	O
{	O
rshd_error	(*(char))->(void)
(	O
"Logins currently disabled.\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
write	(int,*(void),long)->(long)
(	O
STDERR_FILENO	int
,	O
"\0"	*(char)
,	O
1	int
)	O
<	O
0	int
)	O
{	O
rshd_error	(*(char))->(void)
(	O
"Lost connection.\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
sent_null	int
=	O
1	int
;	O
if	O
(	O
port	short
)	O
{	O
if	O
(	O
pipe	(array(int))->(int)
(	O
pv	array(int)
)	O
<	O
0	int
)	O
{	O
rshd_error	(*(char))->(void)
(	O
"Can't make pipe.\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
pid	int
=	O
fork	()->(int)
(	O
)	O
;	O
if	O
(	O
pid	int
==	O
-	O
1	int
)	O
{	O
rshd_error	(*(char))->(void)
(	O
"Can't fork; try again.\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
pid	int
)	O
{	O
{	O
close	(int)->(int)
(	O
STDIN_FILENO	int
)	O
;	O
close	(int)->(int)
(	O
STDOUT_FILENO	int
)	O
;	O
}	O
close	(int)->(int)
(	O
STDERR_FILENO	int
)	O
;	O
close	(int)->(int)
(	O
pv	array(int)
[	O
1	int
]	O
)	O
;	O
FD_ZERO	O
(	O
&	O
readfrom	struct(array(long))
)	O
;	O
FD_SET	O
(	O
s	int
,	O
&	O
readfrom	struct(array(long))
)	O
;	O
FD_SET	O
(	O
pv	array(int)
[	O
0	int
]	O
,	O
&	O
readfrom	struct(array(long))
)	O
;	O
if	O
(	O
pv	array(int)
[	O
0	int
]	O
>	O
s	int
)	O
nfd	int
=	O
pv	array(int)
[	O
0	int
]	O
;	O
else	O
nfd	int
=	O
s	int
;	O
ioctl	(int,long)->(int)
(	O
pv	array(int)
[	O
0	int
]	O
,	O
FIONBIO	int
,	O
(	O
char	O
*	O
)	O
&	O
one	int
)	O
;	O
nfd	int
++	O
;	O
do	O
{	O
ready	struct(array(long))
=	O
readfrom	struct(array(long))
;	O
if	O
(	O
select	(int,*(struct(array(long))),*(struct(array(long))),*(struct(array(long))),*(struct(long,long)))->(int)
(	O
nfd	int
,	O
&	O
ready	struct(array(long))
,	O
(	O
fd_set	struct(array(long))
*	O
)	O
0	int
,	O
(	O
fd_set	struct(array(long))
*	O
)	O
0	int
,	O
(	O
struct	O
timeval	struct(long,long)
*	O
)	O
0	int
)	O
<	O
0	int
)	O
break	O
;	O
if	O
(	O
FD_ISSET	O
(	O
s	int
,	O
&	O
ready	struct(array(long))
)	O
)	O
{	O
int	O
ret	int
;	O
ret	int
=	O
read	(int,*(void),long)->(long)
(	O
s	int
,	O
&	O
sig	char
,	O
1	int
)	O
;	O
if	O
(	O
ret	int
<=	O
0	int
)	O
FD_CLR	O
(	O
s	int
,	O
&	O
readfrom	struct(array(long))
)	O
;	O
else	O
killpg	(int,int)->(int)
(	O
pid	int
,	O
sig	char
)	O
;	O
}	O
if	O
(	O
FD_ISSET	O
(	O
pv	array(int)
[	O
0	int
]	O
,	O
&	O
ready	struct(array(long))
)	O
)	O
{	O
errno	O
=	O
0	int
;	O
cc	int
=	O
read	(int,*(void),long)->(long)
(	O
pv	array(int)
[	O
0	int
]	O
,	O
buf	array(char)
,	O
sizeof	O
buf	array(char)
)	O
;	O
if	O
(	O
cc	int
<=	O
0	int
)	O
{	O
shutdown	(int,int)->(int)
(	O
s	int
,	O
1	int
+	O
1	int
)	O
;	O
FD_CLR	O
(	O
pv	array(int)
[	O
0	int
]	O
,	O
&	O
readfrom	struct(array(long))
)	O
;	O
}	O
else	O
{	O
write	(int,*(void),long)->(long)
(	O
s	int
,	O
buf	array(char)
,	O
cc	int
)	O
;	O
}	O
}	O
}	O
while	O
(	O
FD_ISSET	O
(	O
s	int
,	O
&	O
readfrom	struct(array(long))
)	O
||	O
FD_ISSET	O
(	O
pv	array(int)
[	O
0	int
]	O
,	O
&	O
readfrom	struct(array(long))
)	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
setpgid	(int,int)->(int)
(	O
0	int
,	O
getpid	()->(int)
(	O
)	O
)	O
;	O
close	(int)->(int)
(	O
s	int
)	O
;	O
close	(int)->(int)
(	O
pv	array(int)
[	O
0	int
]	O
)	O
;	O
dup2	(int,int)->(int)
(	O
pv	array(int)
[	O
1	int
]	O
,	O
STDERR_FILENO	int
)	O
;	O
close	(int)->(int)
(	O
pv	array(int)
[	O
1	int
]	O
)	O
;	O
}	O
if	O
(	O
*	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_shell	*(char)
==	O
'\0'	O
)	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_shell	*(char)
=	O
PATH_BSHELL	O
;	O
setegid	(int)->(int)
(	O
(	O
gid_t	int
)	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_gid	int
)	O
;	O
setgid	(int)->(int)
(	O
(	O
gid_t	int
)	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_gid	int
)	O
;	O
initgroups	(*(char),int)->(int)
(	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
,	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_gid	int
)	O
;	O
setuid	(int)->(int)
(	O
(	O
uid_t	int
)	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_uid	int
)	O
;	O
if	O
(	O
chdir	(*(char))->(int)
(	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_dir	*(char)
)	O
<	O
0	int
)	O
{	O
chdir	(*(char))->(int)
(	O
"/"	*(char)
)	O
;	O
syslog	(int,*(char))->(void)
(	O
LOG_INFO	int
|	O
LOG_AUTH	O
,	O
"%s@%s as %s: no home directory. cmd='%.80s'"	*(char)
,	O
remuser	*(char)
,	O
hostname	*(char)
,	O
locuser	*(char)
,	O
cmdbuf	*(char)
)	O
;	O
rshd_error	(*(char))->(void)
(	O
"No remote directory.\n"	*(char)
)	O
;	O
}	O
environ	*(*(char))
=	O
envinit	array(*(char))
;	O
strncat	(*(char),*(char),long)->(*(char))
(	O
homedir	array(char)
,	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_dir	*(char)
,	O
sizeof	O
(	O
homedir	array(char)
)	O
-	O
6	int
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
path	array(char)
,	O
PATH_DEFPATH	O
)	O
;	O
strncat	(*(char),*(char),long)->(*(char))
(	O
shell	array(char)
,	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_shell	*(char)
,	O
sizeof	O
(	O
shell	array(char)
)	O
-	O
7	int
)	O
;	O
strncat	(*(char),*(char),long)->(*(char))
(	O
username	array(char)
,	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
,	O
sizeof	O
(	O
username	array(char)
)	O
-	O
6	int
)	O
;	O
cp	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_shell	*(char)
,	O
'/'	O
)	O
;	O
if	O
(	O
cp	*(char)
)	O
cp	*(char)
++	O
;	O
else	O
cp	*(char)
=	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_shell	*(char)
;	O
endpwent	()->(void)
(	O
)	O
;	O
if	O
(	O
log_success	int
||	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_uid	int
==	O
0	int
)	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_INFO	int
|	O
LOG_AUTH	O
,	O
"%s@%s as %s: cmd='%.80s'"	*(char)
,	O
remuser	*(char)
,	O
hostname	*(char)
,	O
locuser	*(char)
,	O
cmdbuf	*(char)
)	O
;	O
}	O
execl	(*(char),*(char))->(int)
(	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_shell	*(char)
,	O
cp	*(char)
,	O
"-c"	*(char)
,	O
cmdbuf	*(char)
,	O
NULL	O
)	O
;	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"cannot execute %s"	*(char)
,	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_shell	*(char)
)	O
;	O
}	O
void	O
rshd_error	(*(char))->(void)
(	O
const	O
char	O
*	O
fmt	*(char)
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
ap	array(struct(int,int,*(void),*(void)))
;	O
int	O
len	char
;	O
char	O
*	O
bp	*(char)
,	O
buf	array(char)
[	O
BUFSIZ	int
]	O
;	O
va_start	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
fmt	*(char)
)	O
;	O
bp	*(char)
=	O
buf	array(char)
;	O
if	O
(	O
sent_null	int
==	O
0	int
)	O
{	O
*	O
bp	*(char)
++	O
=	O
1	int
;	O
len	char
=	O
1	int
;	O
}	O
else	O
len	char
=	O
0	int
;	O
vsnprintf	(*(char),long,*(char),array(struct(int,int,*(void),*(void))))->(int)
(	O
bp	*(char)
,	O
sizeof	O
(	O
buf	array(char)
)	O
-	O
1	int
,	O
fmt	*(char)
,	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
write	(int,*(void),long)->(long)
(	O
STDERR_FILENO	int
,	O
buf	array(char)
,	O
len	char
+	O
strlen	(*(char))->(long)
(	O
bp	*(char)
)	O
)	O
;	O
}	O
char	O
*	O
getstr	(*(char))->(*(char))
(	O
const	O
char	O
*	O
err	long
)	O
{	O
size_t	long
buf_len	long
=	O
100	int
;	O
char	O
*	O
buf	array(char)
=	O
malloc	(long)->(*(void))
(	O
buf_len	long
)	O
,	O
*	O
end	*(char)
=	O
buf	array(char)
;	O
if	O
(	O
!	O
buf	array(char)
)	O
{	O
rshd_error	(*(char))->(void)
(	O
"Out of space reading %s\n"	*(char)
,	O
err	long
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
do	O
{	O
int	O
rd	int
=	O
read	(int,*(void),long)->(long)
(	O
STDIN_FILENO	int
,	O
end	*(char)
,	O
1	int
)	O
;	O
if	O
(	O
rd	int
<=	O
0	int
)	O
{	O
if	O
(	O
rd	int
==	O
0	int
)	O
rshd_error	(*(char))->(void)
(	O
"EOF reading %s\n"	*(char)
,	O
err	long
)	O
;	O
else	O
perror	(*(char))->(void)
(	O
err	long
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
end	*(char)
+=	O
rd	int
;	O
if	O
(	O
(	O
buf	array(char)
+	O
buf_len	long
-	O
end	*(char)
)	O
<	O
(	O
buf_len	long
>>	O
3	int
)	O
)	O
{	O
size_t	long
end_offs	long
=	O
end	*(char)
-	O
buf	array(char)
;	O
buf_len	long
+=	O
buf_len	long
;	O
buf	array(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
buf	array(char)
,	O
buf_len	long
)	O
;	O
if	O
(	O
!	O
buf	array(char)
)	O
{	O
rshd_error	(*(char))->(void)
(	O
"Out of space reading %s\n"	*(char)
,	O
err	long
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
end	*(char)
=	O
buf	array(char)
+	O
end_offs	long
;	O
}	O
}	O
while	O
(	O
*	O
(	O
end	*(char)
-	O
1	int
)	O
)	O
;	O
return	O
buf	array(char)
;	O
}	O
int	O
local_domain	(*(char))->(int)
(	O
const	O
char	O
*	O
h	*(char)
)	O
{	O
char	O
*	O
hostname	*(char)
=	O
localhost	()->(*(char))
(	O
)	O
;	O
if	O
(	O
!	O
hostname	*(char)
)	O
return	O
0	int
;	O
else	O
{	O
int	O
is_local	int
=	O
0	int
;	O
const	O
char	O
*	O
p1	*(char)
=	O
topdomain	(*(char))->(*(char))
(	O
hostname	*(char)
)	O
;	O
const	O
char	O
*	O
p2	*(char)
=	O
topdomain	(*(char))->(*(char))
(	O
h	*(char)
)	O
;	O
if	O
(	O
p1	*(char)
==	O
NULL	O
||	O
p2	*(char)
==	O
NULL	O
||	O
!	O
strcasecmp	(*(char),*(char))->(int)
(	O
p1	*(char)
,	O
p2	*(char)
)	O
)	O
is_local	int
=	O
1	int
;	O
free	(*(void))->(void)
(	O
hostname	*(char)
)	O
;	O
return	O
is_local	int
;	O
}	O
}	O
const	O
char	O
*	O
topdomain	(*(char))->(*(char))
(	O
const	O
char	O
*	O
h	*(char)
)	O
{	O
const	O
char	O
*	O
p	*(char)
,	O
*	O
maybe	*(char)
=	O
NULL	O
;	O
int	O
dots	int
=	O
0	int
;	O
for	O
(	O
p	*(char)
=	O
h	*(char)
+	O
strlen	(*(char))->(long)
(	O
h	*(char)
)	O
;	O
p	*(char)
>=	O
h	*(char)
;	O
p	*(char)
--	O
)	O
{	O
if	O
(	O
*	O
p	*(char)
==	O
'.'	O
)	O
{	O
if	O
(	O
++	O
dots	int
==	O
2	int
)	O
return	O
p	*(char)
;	O
maybe	*(char)
=	O
p	*(char)
;	O
}	O
}	O
return	O
maybe	*(char)
;	O
}	O
