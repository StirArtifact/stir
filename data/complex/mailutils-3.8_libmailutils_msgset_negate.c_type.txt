struct	O
invert_closure	struct(*(struct(*(struct),*(struct),int,long)),long)
{	O
mu_msgset_t	*(struct)
nset	*(struct(*(struct),*(struct),int,long))
;	O
size_t	long
next_num	long
;	O
}	O
;	O
static	O
int	O
_invert_range	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
mu_msgrange	struct(long,long)
*	O
range	*(char)
=	O
item	*(void)
;	O
struct	O
invert_closure	struct(*(struct(*(struct),*(struct),int,long)),long)
*	O
clos	*(struct(*(struct(*(struct`),*(struct`),int,long)),long))
=	O
data	*(void)
;	O
int	O
rc	int
;	O
if	O
(	O
clos	*(struct(*(struct(*(struct`),*(struct`),int,long)),long))
->	O
next_num	long
<	O
range	*(char)
->	O
msg_beg	long
-	O
1	int
)	O
{	O
rc	int
=	O
mu_msgset_add_range	(*(struct),long,long,int)->(int)
(	O
clos	*(struct(*(struct(*(struct`),*(struct`),int,long)),long))
->	O
nset	*(struct(*(struct),*(struct),int,long))
,	O
clos	*(struct(*(struct(*(struct`),*(struct`),int,long)),long))
->	O
next_num	long
,	O
range	*(char)
->	O
msg_beg	long
-	O
1	int
,	O
_MU_MSGSET_MODE	O
(	O
clos	*(struct(*(struct(*(struct`),*(struct`),int,long)),long))
->	O
nset	*(struct(*(struct),*(struct),int,long))
->	O
flags	int
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
clos	*(struct(*(struct(*(struct`),*(struct`),int,long)),long))
->	O
next_num	long
=	O
range	*(char)
->	O
msg_end	long
+	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_msgset_negate	(*(struct),*(*(struct)))->(int)
(	O
mu_msgset_t	*(struct)
msgset	*(struct)
,	O
mu_msgset_t	*(struct)
*	O
pnset	*(*(struct))
)	O
{	O
int	O
rc	int
;	O
struct	O
invert_closure	struct(*(struct(*(struct),*(struct),int,long)),long)
clos	*(struct(*(struct(*(struct`),*(struct`),int,long)),long))
;	O
size_t	long
total	long
;	O
if	O
(	O
!	O
msgset	*(struct)
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
msgset	*(struct)
->	O
mbox	*(struct)
)	O
return	O
MU_ERR_NOT_OPEN	O
;	O
rc	int
=	O
mu_msgset_aggregate	(*(struct))->(int)
(	O
msgset	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_mailbox_messages_count	(*(struct),*(long))->(int)
(	O
msgset	*(struct)
->	O
mbox	*(struct)
,	O
&	O
total	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
_MU_MSGSET_MODE	O
(	O
msgset	*(struct)
->	O
flags	int
)	O
)	O
{	O
rc	int
=	O
mu_mailbox_translate	(*(struct),int,long,*(long))->(int)
(	O
msgset	*(struct)
->	O
mbox	*(struct)
,	O
MU_MAILBOX_MSGNO_TO_UID	int
,	O
total	long
,	O
&	O
total	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
rc	int
=	O
mu_msgset_create	(*(*(struct)),*(struct),int)->(int)
(	O
&	O
clos	*(struct(*(struct(*(struct`),*(struct`),int,long)),long))
.	O
nset	*(struct(*(struct),*(struct),int,long))
,	O
msgset	*(struct)
->	O
mbox	*(struct)
,	O
_MU_MSGSET_MODE	O
(	O
msgset	*(struct)
->	O
flags	int
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
clos	*(struct(*(struct(*(struct`),*(struct`),int,long)),long))
.	O
next_num	long
=	O
1	int
;	O
rc	int
=	O
mu_list_foreach	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
msgset	*(struct)
->	O
list	*(struct)
,	O
_invert_range	(*(void),*(void))->(int)
,	O
&	O
clos	*(struct(*(struct(*(struct`),*(struct`),int,long)),long))
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
clos	*(struct(*(struct(*(struct`),*(struct`),int,long)),long))
.	O
next_num	long
<	O
total	long
)	O
rc	int
=	O
mu_msgset_add_range	(*(struct),long,long,int)->(int)
(	O
clos	*(struct(*(struct(*(struct`),*(struct`),int,long)),long))
.	O
nset	*(struct(*(struct),*(struct),int,long))
,	O
clos	*(struct(*(struct(*(struct`),*(struct`),int,long)),long))
.	O
next_num	long
,	O
total	long
,	O
_MU_MSGSET_MODE	O
(	O
clos	*(struct(*(struct(*(struct`),*(struct`),int,long)),long))
.	O
nset	*(struct(*(struct),*(struct),int,long))
->	O
flags	int
)	O
)	O
;	O
}	O
if	O
(	O
rc	int
)	O
mu_msgset_free	(*(struct))->(void)
(	O
clos	*(struct(*(struct(*(struct`),*(struct`),int,long)),long))
.	O
nset	*(struct(*(struct),*(struct),int,long))
)	O
;	O
else	O
*	O
pnset	*(*(struct))
=	O
clos	*(struct(*(struct(*(struct`),*(struct`),int,long)),long))
.	O
nset	*(struct(*(struct),*(struct),int,long))
;	O
return	O
rc	int
;	O
}	O
