typedef	O
struct	O
{	O
double	O
*	O
a	double
;	O
double	O
*	O
b	double
;	O
double	O
*	O
c	*(double)
;	O
double	O
*	O
d	*(double)
;	O
double	O
*	O
y_prime	*(double)
;	O
}	O
steffen_state_t	struct(*(double),*(double),*(double),*(double),*(double))
;	O
static	O
void	O
steffen_free	(*(void))->(void)
(	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
double	O
steffen_copysign	(double,double)->(double)
(	O
const	O
double	O
x	double
,	O
const	O
double	O
y	double
)	O
;	O
static	O
void	O
*	O
steffen_alloc	(long)->(*(void))
(	O
size_t	long
size	long
)	O
{	O
steffen_state_t	struct(*(double),*(double),*(double),*(double),*(double))
*	O
state	*(int)
;	O
state	*(int)
=	O
(	O
steffen_state_t	struct(*(double),*(double),*(double),*(double),*(double))
*	O
)	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
steffen_state_t	struct(*(double),*(double),*(double),*(double),*(double))
)	O
)	O
;	O
if	O
(	O
state	*(int)
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for state"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
a	double
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
size	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	*(int)
->	O
a	double
==	O
NULL	O
)	O
{	O
steffen_free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for a"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
b	double
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
size	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	*(int)
->	O
b	double
==	O
NULL	O
)	O
{	O
steffen_free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for b"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
c	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
size	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	*(int)
->	O
c	*(double)
==	O
NULL	O
)	O
{	O
steffen_free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for c"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
d	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
size	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	*(int)
->	O
d	*(double)
==	O
NULL	O
)	O
{	O
steffen_free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for d"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
y_prime	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
size	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	*(int)
->	O
y_prime	*(double)
==	O
NULL	O
)	O
{	O
steffen_free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for y_prime"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
return	O
state	*(int)
;	O
}	O
static	O
int	O
steffen_init	(*(void),array(double),array(double),long)->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
const	O
double	O
x_array	array(double)
[	O
]	O
,	O
const	O
double	O
y_array	array(double)
[	O
]	O
,	O
size_t	long
size	long
)	O
{	O
steffen_state_t	struct(*(double),*(double),*(double),*(double),*(double))
*	O
state	*(int)
=	O
(	O
steffen_state_t	struct(*(double),*(double),*(double),*(double),*(double))
*	O
)	O
vstate	*(void)
;	O
size_t	long
i	long
;	O
double	O
*	O
a	double
=	O
state	*(int)
->	O
a	double
;	O
double	O
*	O
b	double
=	O
state	*(int)
->	O
b	double
;	O
double	O
*	O
c	*(double)
=	O
state	*(int)
->	O
c	*(double)
;	O
double	O
*	O
d	*(double)
=	O
state	*(int)
->	O
d	*(double)
;	O
double	O
*	O
y_prime	*(double)
=	O
state	*(int)
->	O
y_prime	*(double)
;	O
double	O
h0	double
=	O
(	O
x_array	array(double)
[	O
1	int
]	O
-	O
x_array	array(double)
[	O
0	int
]	O
)	O
;	O
double	O
s0	double
=	O
(	O
y_array	array(double)
[	O
1	int
]	O
-	O
y_array	array(double)
[	O
0	int
]	O
)	O
/	O
h0	double
;	O
y_prime	*(double)
[	O
0	int
]	O
=	O
s0	double
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
(	O
size	long
-	O
1	int
)	O
;	O
i	long
++	O
)	O
{	O
double	O
pi	double
;	O
double	O
hi	double
=	O
(	O
x_array	array(double)
[	O
i	long
+	O
1	int
]	O
-	O
x_array	array(double)
[	O
i	long
]	O
)	O
;	O
double	O
him1	double
=	O
(	O
x_array	array(double)
[	O
i	long
]	O
-	O
x_array	array(double)
[	O
i	long
-	O
1	int
]	O
)	O
;	O
double	O
si	double
=	O
(	O
y_array	array(double)
[	O
i	long
+	O
1	int
]	O
-	O
y_array	array(double)
[	O
i	long
]	O
)	O
/	O
hi	double
;	O
double	O
sim1	double
=	O
(	O
y_array	array(double)
[	O
i	long
]	O
-	O
y_array	array(double)
[	O
i	long
-	O
1	int
]	O
)	O
/	O
him1	double
;	O
pi	double
=	O
(	O
sim1	double
*	O
hi	double
+	O
si	double
*	O
him1	double
)	O
/	O
(	O
him1	double
+	O
hi	double
)	O
;	O
y_prime	*(double)
[	O
i	long
]	O
=	O
(	O
steffen_copysign	(double,double)->(double)
(	O
1.0	int
,	O
sim1	double
)	O
+	O
steffen_copysign	(double,double)->(double)
(	O
1.0	int
,	O
si	double
)	O
)	O
*	O
GSL_MIN	O
(	O
fabs	(double)->(double)
(	O
sim1	double
)	O
,	O
GSL_MIN	O
(	O
fabs	(double)->(double)
(	O
si	double
)	O
,	O
0.5	int
*	O
fabs	(double)->(double)
(	O
pi	double
)	O
)	O
)	O
;	O
}	O
y_prime	*(double)
[	O
size	long
-	O
1	int
]	O
=	O
(	O
y_array	array(double)
[	O
size	long
-	O
1	int
]	O
-	O
y_array	array(double)
[	O
size	long
-	O
2	int
]	O
)	O
/	O
(	O
x_array	array(double)
[	O
size	long
-	O
1	int
]	O
-	O
x_array	array(double)
[	O
size	long
-	O
2	int
]	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
(	O
size	long
-	O
1	int
)	O
;	O
i	long
++	O
)	O
{	O
double	O
hi	double
=	O
(	O
x_array	array(double)
[	O
i	long
+	O
1	int
]	O
-	O
x_array	array(double)
[	O
i	long
]	O
)	O
;	O
double	O
si	double
=	O
(	O
y_array	array(double)
[	O
i	long
+	O
1	int
]	O
-	O
y_array	array(double)
[	O
i	long
]	O
)	O
/	O
hi	double
;	O
a	double
[	O
i	long
]	O
=	O
(	O
y_prime	*(double)
[	O
i	long
]	O
+	O
y_prime	*(double)
[	O
i	long
+	O
1	int
]	O
-	O
2	int
*	O
si	double
)	O
/	O
hi	double
/	O
hi	double
;	O
b	double
[	O
i	long
]	O
=	O
(	O
3	int
*	O
si	double
-	O
2	int
*	O
y_prime	*(double)
[	O
i	long
]	O
-	O
y_prime	*(double)
[	O
i	long
+	O
1	int
]	O
)	O
/	O
hi	double
;	O
c	*(double)
[	O
i	long
]	O
=	O
y_prime	*(double)
[	O
i	long
]	O
;	O
d	*(double)
[	O
i	long
]	O
=	O
y_array	array(double)
[	O
i	long
]	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
void	O
steffen_free	(*(void))->(void)
(	O
void	O
*	O
vstate	*(void)
)	O
{	O
steffen_state_t	struct(*(double),*(double),*(double),*(double),*(double))
*	O
state	*(int)
=	O
(	O
steffen_state_t	struct(*(double),*(double),*(double),*(double),*(double))
*	O
)	O
vstate	*(void)
;	O
RETURN_IF_NULL	O
(	O
state	*(int)
)	O
;	O
if	O
(	O
state	*(int)
->	O
a	double
)	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
a	double
)	O
;	O
if	O
(	O
state	*(int)
->	O
b	double
)	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
b	double
)	O
;	O
if	O
(	O
state	*(int)
->	O
c	*(double)
)	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
c	*(double)
)	O
;	O
if	O
(	O
state	*(int)
->	O
d	*(double)
)	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
d	*(double)
)	O
;	O
if	O
(	O
state	*(int)
->	O
y_prime	*(double)
)	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y_prime	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
}	O
static	O
int	O
steffen_eval	(*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)
(	O
const	O
void	O
*	O
vstate	*(void)
,	O
const	O
double	O
x_array	array(double)
[	O
]	O
,	O
const	O
double	O
y_array	array(double)
[	O
]	O
,	O
size_t	long
size	long
,	O
double	O
x	double
,	O
gsl_interp_accel	struct(long,long,long)
*	O
a	double
,	O
double	O
*	O
y	double
)	O
{	O
const	O
steffen_state_t	struct(*(double),*(double),*(double),*(double),*(double))
*	O
state	*(int)
=	O
(	O
const	O
steffen_state_t	struct(*(double),*(double),*(double),*(double),*(double))
*	O
)	O
vstate	*(void)
;	O
size_t	long
index	long
;	O
if	O
(	O
a	double
!=	O
0	int
)	O
{	O
index	long
=	O
gsl_interp_accel_find	(*(struct(long,long,long)),array(double),long,double)->(long)
(	O
a	double
,	O
x_array	array(double)
,	O
size	long
,	O
x	double
)	O
;	O
}	O
else	O
{	O
index	long
=	O
gsl_interp_bsearch	(array(double),double,long,long)->(long)
(	O
x_array	array(double)
,	O
x	double
,	O
0	int
,	O
size	long
-	O
1	int
)	O
;	O
}	O
{	O
const	O
double	O
x_lo	double
=	O
x_array	array(double)
[	O
index	long
]	O
;	O
const	O
double	O
delx	double
=	O
x	double
-	O
x_lo	double
;	O
const	O
double	O
a	double
=	O
state	*(int)
->	O
a	double
[	O
index	long
]	O
;	O
const	O
double	O
b	double
=	O
state	*(int)
->	O
b	double
[	O
index	long
]	O
;	O
const	O
double	O
c	*(double)
=	O
state	*(int)
->	O
c	*(double)
[	O
index	long
]	O
;	O
const	O
double	O
d	*(double)
=	O
state	*(int)
->	O
d	*(double)
[	O
index	long
]	O
;	O
*	O
y	double
=	O
d	*(double)
+	O
delx	double
*	O
(	O
c	*(double)
+	O
delx	double
*	O
(	O
b	double
+	O
delx	double
*	O
a	double
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
steffen_eval_deriv	(*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)
(	O
const	O
void	O
*	O
vstate	*(void)
,	O
const	O
double	O
x_array	array(double)
[	O
]	O
,	O
const	O
double	O
y_array	array(double)
[	O
]	O
,	O
size_t	long
size	long
,	O
double	O
x	double
,	O
gsl_interp_accel	struct(long,long,long)
*	O
a	double
,	O
double	O
*	O
dydx	*(double)
)	O
{	O
const	O
steffen_state_t	struct(*(double),*(double),*(double),*(double),*(double))
*	O
state	*(int)
=	O
(	O
const	O
steffen_state_t	struct(*(double),*(double),*(double),*(double),*(double))
*	O
)	O
vstate	*(void)
;	O
size_t	long
index	long
;	O
if	O
(	O
a	double
!=	O
0	int
)	O
{	O
index	long
=	O
gsl_interp_accel_find	(*(struct(long,long,long)),array(double),long,double)->(long)
(	O
a	double
,	O
x_array	array(double)
,	O
size	long
,	O
x	double
)	O
;	O
}	O
else	O
{	O
index	long
=	O
gsl_interp_bsearch	(array(double),double,long,long)->(long)
(	O
x_array	array(double)
,	O
x	double
,	O
0	int
,	O
size	long
-	O
1	int
)	O
;	O
}	O
{	O
double	O
x_lo	double
=	O
x_array	array(double)
[	O
index	long
]	O
;	O
double	O
delx	double
=	O
x	double
-	O
x_lo	double
;	O
double	O
a	double
=	O
state	*(int)
->	O
a	double
[	O
index	long
]	O
;	O
double	O
b	double
=	O
state	*(int)
->	O
b	double
[	O
index	long
]	O
;	O
double	O
c	*(double)
=	O
state	*(int)
->	O
c	*(double)
[	O
index	long
]	O
;	O
*	O
dydx	*(double)
=	O
c	*(double)
+	O
delx	double
*	O
(	O
2	int
*	O
b	double
+	O
delx	double
*	O
3	int
*	O
a	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
steffen_eval_deriv2	(*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)
(	O
const	O
void	O
*	O
vstate	*(void)
,	O
const	O
double	O
x_array	array(double)
[	O
]	O
,	O
const	O
double	O
y_array	array(double)
[	O
]	O
,	O
size_t	long
size	long
,	O
double	O
x	double
,	O
gsl_interp_accel	struct(long,long,long)
*	O
a	double
,	O
double	O
*	O
y_pp	*(double)
)	O
{	O
const	O
steffen_state_t	struct(*(double),*(double),*(double),*(double),*(double))
*	O
state	*(int)
=	O
(	O
const	O
steffen_state_t	struct(*(double),*(double),*(double),*(double),*(double))
*	O
)	O
vstate	*(void)
;	O
size_t	long
index	long
;	O
if	O
(	O
a	double
!=	O
0	int
)	O
{	O
index	long
=	O
gsl_interp_accel_find	(*(struct(long,long,long)),array(double),long,double)->(long)
(	O
a	double
,	O
x_array	array(double)
,	O
size	long
,	O
x	double
)	O
;	O
}	O
else	O
{	O
index	long
=	O
gsl_interp_bsearch	(array(double),double,long,long)->(long)
(	O
x_array	array(double)
,	O
x	double
,	O
0	int
,	O
size	long
-	O
1	int
)	O
;	O
}	O
{	O
const	O
double	O
x_lo	double
=	O
x_array	array(double)
[	O
index	long
]	O
;	O
const	O
double	O
delx	double
=	O
x	double
-	O
x_lo	double
;	O
const	O
double	O
a	double
=	O
state	*(int)
->	O
a	double
[	O
index	long
]	O
;	O
const	O
double	O
b	double
=	O
state	*(int)
->	O
b	double
[	O
index	long
]	O
;	O
*	O
y_pp	*(double)
=	O
6	int
*	O
a	double
*	O
delx	double
+	O
2	int
*	O
b	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
steffen_eval_integ	(*(void),array(double),array(double),long,*(struct(long,long,long)),double,double,*(double))->(int)
(	O
const	O
void	O
*	O
vstate	*(void)
,	O
const	O
double	O
x_array	array(double)
[	O
]	O
,	O
const	O
double	O
y_array	array(double)
[	O
]	O
,	O
size_t	long
size	long
,	O
gsl_interp_accel	struct(long,long,long)
*	O
acc	*(struct(long,long,long))
,	O
double	O
a	double
,	O
double	O
b	double
,	O
double	O
*	O
result	*(double)
)	O
{	O
const	O
steffen_state_t	struct(*(double),*(double),*(double),*(double),*(double))
*	O
state	*(int)
=	O
(	O
const	O
steffen_state_t	struct(*(double),*(double),*(double),*(double),*(double))
*	O
)	O
vstate	*(void)
;	O
size_t	long
i	long
,	O
index_a	long
,	O
index_b	long
;	O
if	O
(	O
acc	*(struct(long,long,long))
!=	O
0	int
)	O
{	O
index_a	long
=	O
gsl_interp_accel_find	(*(struct(long,long,long)),array(double),long,double)->(long)
(	O
acc	*(struct(long,long,long))
,	O
x_array	array(double)
,	O
size	long
,	O
a	double
)	O
;	O
index_b	long
=	O
gsl_interp_accel_find	(*(struct(long,long,long)),array(double),long,double)->(long)
(	O
acc	*(struct(long,long,long))
,	O
x_array	array(double)
,	O
size	long
,	O
b	double
)	O
;	O
}	O
else	O
{	O
index_a	long
=	O
gsl_interp_bsearch	(array(double),double,long,long)->(long)
(	O
x_array	array(double)
,	O
a	double
,	O
0	int
,	O
size	long
-	O
1	int
)	O
;	O
index_b	long
=	O
gsl_interp_bsearch	(array(double),double,long,long)->(long)
(	O
x_array	array(double)
,	O
b	double
,	O
0	int
,	O
size	long
-	O
1	int
)	O
;	O
}	O
*	O
result	*(double)
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
index_a	long
;	O
i	long
<=	O
index_b	long
;	O
i	long
++	O
)	O
{	O
const	O
double	O
x_hi	double
=	O
x_array	array(double)
[	O
i	long
+	O
1	int
]	O
;	O
const	O
double	O
x_lo	double
=	O
x_array	array(double)
[	O
i	long
]	O
;	O
const	O
double	O
dx	double
=	O
x_hi	double
-	O
x_lo	double
;	O
if	O
(	O
dx	double
!=	O
0.0	int
)	O
{	O
double	O
x1	double
=	O
(	O
i	long
==	O
index_a	long
)	O
?	O
a	double
-	O
x_lo	double
:	O
0.0	int
;	O
double	O
x2	double
=	O
(	O
i	long
==	O
index_b	long
)	O
?	O
b	double
-	O
x_lo	double
:	O
x_hi	double
-	O
x_lo	double
;	O
*	O
result	*(double)
+=	O
(	O
1.0	int
/	O
4.0	int
)	O
*	O
state	*(int)
->	O
a	double
[	O
i	long
]	O
*	O
(	O
x2	double
*	O
x2	double
*	O
x2	double
*	O
x2	double
-	O
x1	double
*	O
x1	double
*	O
x1	double
*	O
x1	double
)	O
+	O
(	O
1.0	int
/	O
3.0	int
)	O
*	O
state	*(int)
->	O
b	double
[	O
i	long
]	O
*	O
(	O
x2	double
*	O
x2	double
*	O
x2	double
-	O
x1	double
*	O
x1	double
*	O
x1	double
)	O
+	O
(	O
1.0	int
/	O
2.0	int
)	O
*	O
state	*(int)
->	O
c	*(double)
[	O
i	long
]	O
*	O
(	O
x2	double
*	O
x2	double
-	O
x1	double
*	O
x1	double
)	O
+	O
state	*(int)
->	O
d	*(double)
[	O
i	long
]	O
*	O
(	O
x2	double
-	O
x1	double
)	O
;	O
}	O
else	O
{	O
*	O
result	*(double)
=	O
0.0	int
;	O
return	O
GSL_EINVAL	int
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
double	O
steffen_copysign	(double,double)->(double)
(	O
const	O
double	O
x	double
,	O
const	O
double	O
y	double
)	O
{	O
if	O
(	O
(	O
x	double
<	O
0	int
&&	O
y	double
>	O
0	int
)	O
||	O
(	O
x	double
>	O
0	int
&&	O
y	double
<	O
0	int
)	O
)	O
return	O
-	O
x	double
;	O
return	O
x	double
;	O
}	O
static	O
const	O
gsl_interp_type	struct(*(char),int,*((long)->(*(void))),*((*(void),array(double),array(double),long)->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,*(struct(long,long,long)),double,double,*(double))->(int)),*((*(void))->(void)))
steffen_type	struct(*(char),int,*((long)->(*(void))),*((*(void),array(double),array(double),long)->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,*(struct(long,long,long)),double,double,*(double))->(int)),*((*(void))->(void)))
=	O
{	O
"steffen"	*(char)
,	O
3	int
,	O
&	O
steffen_alloc	(long)->(*(void))
,	O
&	O
steffen_init	(*(void),array(double),array(double),long)->(int)
,	O
&	O
steffen_eval	(*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)
,	O
&	O
steffen_eval_deriv	(*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)
,	O
&	O
steffen_eval_deriv2	(*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)
,	O
&	O
steffen_eval_integ	(*(void),array(double),array(double),long,*(struct(long,long,long)),double,double,*(double))->(int)
,	O
&	O
steffen_free	(*(void))->(void)
}	O
;	O
const	O
gsl_interp_type	struct(*(char),int,*((long)->(*(void))),*((*(void),array(double),array(double),long)->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,*(struct(long,long,long)),double,double,*(double))->(int)),*((*(void))->(void)))
*	O
gsl_interp_steffen	*(struct(*(char),int,*((long)->(*(void))),*((*(void),array(double),array(double),long)->(int)),*((*(void),array(double),array(double),long,double,*(struct`),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct`),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct`),*(double))->(int)),*((*(void),array(double),array(double),long,*(struct`),double,double,*(double))->(int)),*((*(void))->(void))))
=	O
&	O
steffen_type	struct(*(char),int,*((long)->(*(void))),*((*(void),array(double),array(double),long)->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,*(struct(long,long,long)),double,double,*(double))->(int)),*((*(void))->(void)))
;	O
