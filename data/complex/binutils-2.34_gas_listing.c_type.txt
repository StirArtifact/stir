typedef	O
struct	O
file_info_struct	O
{	O
struct	O
file_info_struct	O
*	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
char	O
*	O
filename	*(char)
;	O
long	O
pos	long
;	O
unsigned	O
int	O
linenum	O
;	O
int	O
at_end	O
;	O
}	O
file_info_type	O
;	O
enum	O
edict_enum	O
{	O
EDICT_NONE	O
,	O
EDICT_SBTTL	O
,	O
EDICT_TITLE	O
,	O
EDICT_NOLIST	O
,	O
EDICT_LIST	O
,	O
EDICT_NOLIST_NEXT	O
,	O
EDICT_EJECT	O
}	O
;	O
struct	O
list_message	O
{	O
char	O
*	O
message	*(char)
;	O
struct	O
list_message	O
*	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
}	O
;	O
struct	O
list_info_struct	O
{	O
fragS	O
*	O
frag	O
;	O
unsigned	O
int	O
line	O
;	O
file_info_type	O
*	O
file	*(void)
;	O
char	O
*	O
line_contents	O
;	O
struct	O
list_info_struct	O
*	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
file_info_type	O
*	O
hll_file	O
;	O
unsigned	O
int	O
hll_line	O
;	O
struct	O
list_message	O
*	O
messages	O
,	O
*	O
last_message	O
;	O
enum	O
edict_enum	O
edict	O
;	O
char	O
*	O
edict_arg	O
;	O
int	O
debugging	O
;	O
}	O
;	O
typedef	O
struct	O
list_info_struct	O
list_info_type	O
;	O
int	O
listing_lhs_width	O
=	O
LISTING_LHS_WIDTH	O
;	O
int	O
listing_lhs_width_second	O
=	O
LISTING_LHS_WIDTH_SECOND	O
;	O
int	O
listing_lhs_cont_lines	O
=	O
LISTING_LHS_CONT_LINES	O
;	O
int	O
listing_rhs_width	O
=	O
LISTING_RHS_WIDTH	O
;	O
struct	O
list_info_struct	O
*	O
listing_tail	O
;	O
static	O
file_info_type	O
*	O
file_info_head	O
;	O
static	O
file_info_type	O
*	O
last_open_file_info	O
;	O
static	O
FILE	struct
*	O
last_open_file	O
;	O
static	O
struct	O
list_info_struct	O
*	O
head	O
;	O
static	O
int	O
paper_width	O
=	O
200	int
;	O
static	O
int	O
paper_height	O
=	O
60	int
;	O
extern	O
int	O
listing	O
;	O
static	O
FILE	struct
*	O
list_file	O
;	O
static	O
char	O
*	O
data_buffer	O
;	O
static	O
void	O
listing_message	O
(	O
const	O
char	O
*	O
,	O
const	O
char	O
*	O
)	O
;	O
static	O
file_info_type	O
*	O
file_info	O
(	O
const	O
char	O
*	O
)	O
;	O
static	O
void	O
new_frag	O
(	O
void	O
)	O
;	O
static	O
void	O
listing_page	O
(	O
list_info_type	O
*	O
)	O
;	O
static	O
unsigned	O
int	O
calc_hex	O
(	O
list_info_type	O
*	O
)	O
;	O
static	O
void	O
print_lines	O
(	O
list_info_type	O
*	O
,	O
unsigned	O
int	O
,	O
const	O
char	O
*	O
,	O
unsigned	O
int	O
)	O
;	O
static	O
void	O
list_symbol_table	O
(	O
void	O
)	O
;	O
static	O
int	O
debugging_pseudo	O
(	O
list_info_type	O
*	O
,	O
const	O
char	O
*	O
)	O
;	O
static	O
void	O
listing_listing	O
(	O
char	O
*	O
)	O
;	O
static	O
void	O
listing_message	O
(	O
const	O
char	O
*	O
name	*(char)
,	O
const	O
char	O
*	O
message	*(char)
)	O
{	O
if	O
(	O
listing_tail	O
!=	O
(	O
list_info_type	O
*	O
)	O
NULL	O
)	O
{	O
char	O
*	O
n	O
=	O
concat	O
(	O
name	*(char)
,	O
message	*(char)
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
struct	O
list_message	O
*	O
lm	O
=	O
XNEW	O
(	O
struct	O
list_message	O
)	O
;	O
lm	O
->	O
message	*(char)
=	O
n	O
;	O
lm	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
=	O
NULL	O
;	O
if	O
(	O
listing_tail	O
->	O
last_message	O
)	O
listing_tail	O
->	O
last_message	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
=	O
lm	O
;	O
else	O
listing_tail	O
->	O
messages	O
=	O
lm	O
;	O
listing_tail	O
->	O
last_message	O
=	O
lm	O
;	O
}	O
}	O
void	O
listing_warning	O
(	O
const	O
char	O
*	O
message	*(char)
)	O
{	O
listing_message	O
(	O
_	O
(	O
"Warning: "	*(char)
)	O
,	O
message	*(char)
)	O
;	O
}	O
void	O
listing_error	O
(	O
const	O
char	O
*	O
message	*(char)
)	O
{	O
listing_message	O
(	O
_	O
(	O
"Error: "	*(char)
)	O
,	O
message	*(char)
)	O
;	O
}	O
static	O
file_info_type	O
*	O
file_info	O
(	O
const	O
char	O
*	O
file_name	O
)	O
{	O
file_info_type	O
*	O
p	*(void)
=	O
file_info_head	O
;	O
while	O
(	O
p	*(void)
!=	O
(	O
file_info_type	O
*	O
)	O
NULL	O
)	O
{	O
if	O
(	O
filename_cmp	O
(	O
p	*(void)
->	O
filename	*(char)
,	O
file_name	O
)	O
==	O
0	int
)	O
return	O
p	*(void)
;	O
p	*(void)
=	O
p	*(void)
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
}	O
p	*(void)
=	O
XNEW	O
(	O
file_info_type	O
)	O
;	O
p	*(void)
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
=	O
file_info_head	O
;	O
file_info_head	O
=	O
p	*(void)
;	O
p	*(void)
->	O
filename	*(char)
=	O
xstrdup	O
(	O
file_name	O
)	O
;	O
p	*(void)
->	O
pos	long
=	O
0	int
;	O
p	*(void)
->	O
linenum	O
=	O
0	int
;	O
p	*(void)
->	O
at_end	O
=	O
0	int
;	O
return	O
p	*(void)
;	O
}	O
static	O
void	O
new_frag	O
(	O
void	O
)	O
{	O
frag_wane	O
(	O
frag_now	O
)	O
;	O
frag_new	O
(	O
0	int
)	O
;	O
}	O
void	O
listing_newline	O
(	O
char	O
*	O
ps	O
)	O
{	O
const	O
char	O
*	O
file	*(void)
;	O
unsigned	O
int	O
line	O
;	O
static	O
unsigned	O
int	O
last_line	O
=	O
0xffff	int
;	O
static	O
const	O
char	O
*	O
last_file	O
=	O
NULL	O
;	O
list_info_type	O
*	O
new_i	O
=	O
NULL	O
;	O
if	O
(	O
listing	O
==	O
0	int
)	O
return	O
;	O
if	O
(	O
now_seg	O
==	O
absolute_section	O
)	O
return	O
;	O
if	O
(	O
(	O
listing	O
&	O
LISTING_NODEBUG	O
)	O
!=	O
0	int
&&	O
listing_tail	O
!=	O
NULL	O
&&	O
!	O
listing_tail	O
->	O
debugging	O
)	O
{	O
const	O
char	O
*	O
segname	O
;	O
segname	O
=	O
segment_name	O
(	O
now_seg	O
)	O
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
segname	O
,	O
".debug"	*(char)
,	O
sizeof	O
".debug"	*(char)
-	O
1	int
)	O
==	O
0	int
||	O
strncmp	(*(char),*(char),long)->(int)
(	O
segname	O
,	O
".line"	*(char)
,	O
sizeof	O
".line"	*(char)
-	O
1	int
)	O
==	O
0	int
)	O
listing_tail	O
->	O
debugging	O
=	O
1	int
;	O
}	O
if	O
(	O
listing	O
&	O
LISTING_HLL	O
)	O
file	*(void)
=	O
as_where	O
(	O
&	O
line	O
)	O
;	O
else	O
file	*(void)
=	O
as_where_physical	O
(	O
&	O
line	O
)	O
;	O
if	O
(	O
ps	O
==	O
NULL	O
)	O
{	O
if	O
(	O
line	O
==	O
last_line	O
&&	O
!	O
(	O
last_file	O
&&	O
file	*(void)
&&	O
filename_cmp	O
(	O
file	*(void)
,	O
last_file	O
)	O
)	O
)	O
return	O
;	O
new_i	O
=	O
XNEW	O
(	O
list_info_type	O
)	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
file	*(void)
,	O
_	O
(	O
"{standard input}"	*(char)
)	O
)	O
==	O
0	int
&&	O
input_line_pointer	O
!=	O
NULL	O
)	O
{	O
char	O
*	O
copy	int
,	O
*	O
src	O
,	O
*	O
dest	O
;	O
int	O
len	long
;	O
int	O
seen_quote	O
=	O
0	int
;	O
int	O
seen_slash	O
=	O
0	int
;	O
for	O
(	O
copy	int
=	O
input_line_pointer	O
;	O
*	O
copy	int
&&	O
(	O
seen_quote	O
||	O
is_end_of_line	O
[	O
(	O
unsigned	O
char	O
)	O
*	O
copy	int
]	O
!=	O
1	int
)	O
;	O
copy	int
++	O
)	O
{	O
if	O
(	O
seen_slash	O
)	O
seen_slash	O
=	O
0	int
;	O
else	O
if	O
(	O
*	O
copy	int
==	O
'\\'	O
)	O
seen_slash	O
=	O
1	int
;	O
else	O
if	O
(	O
*	O
copy	int
==	O
'"'	O
)	O
seen_quote	O
=	O
!	O
seen_quote	O
;	O
}	O
len	long
=	O
copy	int
-	O
input_line_pointer	O
+	O
1	int
;	O
copy	int
=	O
XNEWVEC	O
(	O
char	O
,	O
len	long
)	O
;	O
src	O
=	O
input_line_pointer	O
;	O
dest	O
=	O
copy	int
;	O
while	O
(	O
--	O
len	long
)	O
{	O
unsigned	O
char	O
c	O
=	O
*	O
src	O
++	O
;	O
if	O
(	O
!	O
ISCNTRL	O
(	O
c	O
)	O
)	O
*	O
dest	O
++	O
=	O
c	O
;	O
}	O
*	O
dest	O
=	O
0	int
;	O
new_i	O
->	O
line_contents	O
=	O
copy	int
;	O
}	O
else	O
new_i	O
->	O
line_contents	O
=	O
NULL	O
;	O
}	O
else	O
{	O
new_i	O
=	O
XNEW	O
(	O
list_info_type	O
)	O
;	O
new_i	O
->	O
line_contents	O
=	O
ps	O
;	O
}	O
last_line	O
=	O
line	O
;	O
last_file	O
=	O
file	*(void)
;	O
new_frag	O
(	O
)	O
;	O
if	O
(	O
listing_tail	O
)	O
listing_tail	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
=	O
new_i	O
;	O
else	O
head	O
=	O
new_i	O
;	O
listing_tail	O
=	O
new_i	O
;	O
new_i	O
->	O
frag	O
=	O
frag_now	O
;	O
new_i	O
->	O
line	O
=	O
line	O
;	O
new_i	O
->	O
file	*(void)
=	O
file_info	O
(	O
file	*(void)
)	O
;	O
new_i	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
=	O
(	O
list_info_type	O
*	O
)	O
NULL	O
;	O
new_i	O
->	O
messages	O
=	O
NULL	O
;	O
new_i	O
->	O
last_message	O
=	O
NULL	O
;	O
new_i	O
->	O
edict	O
=	O
EDICT_NONE	O
;	O
new_i	O
->	O
hll_file	O
=	O
(	O
file_info_type	O
*	O
)	O
NULL	O
;	O
new_i	O
->	O
hll_line	O
=	O
0	int
;	O
new_i	O
->	O
debugging	O
=	O
0	int
;	O
new_frag	O
(	O
)	O
;	O
if	O
(	O
(	O
listing	O
&	O
LISTING_NODEBUG	O
)	O
!=	O
0	int
)	O
{	O
const	O
char	O
*	O
segname	O
;	O
segname	O
=	O
segment_name	O
(	O
now_seg	O
)	O
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
segname	O
,	O
".debug"	*(char)
,	O
sizeof	O
".debug"	*(char)
-	O
1	int
)	O
==	O
0	int
||	O
strncmp	(*(char),*(char),long)->(int)
(	O
segname	O
,	O
".line"	*(char)
,	O
sizeof	O
".line"	*(char)
-	O
1	int
)	O
==	O
0	int
)	O
new_i	O
->	O
debugging	O
=	O
1	int
;	O
}	O
}	O
void	O
listing_prev_line	O
(	O
void	O
)	O
{	O
list_info_type	O
*	O
l	O
;	O
fragS	O
*	O
f	O
;	O
if	O
(	O
head	O
==	O
(	O
list_info_type	O
*	O
)	O
NULL	O
||	O
head	O
==	O
listing_tail	O
)	O
return	O
;	O
new_frag	O
(	O
)	O
;	O
for	O
(	O
l	O
=	O
head	O
;	O
l	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
!=	O
listing_tail	O
;	O
l	O
=	O
l	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
;	O
for	O
(	O
f	O
=	O
frchain_now	O
->	O
frch_root	O
;	O
f	O
!=	O
(	O
fragS	O
*	O
)	O
NULL	O
;	O
f	O
=	O
f	O
->	O
fr_next	O
)	O
if	O
(	O
f	O
->	O
line	O
==	O
listing_tail	O
)	O
f	O
->	O
line	O
=	O
l	O
;	O
listing_tail	O
->	O
frag	O
=	O
frag_now	O
;	O
new_frag	O
(	O
)	O
;	O
}	O
static	O
const	O
char	O
*	O
buffer_line	O
(	O
file_info_type	O
*	O
file	*(void)
,	O
char	O
*	O
line	O
,	O
unsigned	O
int	O
size	int
)	O
{	O
unsigned	O
int	O
count	int
=	O
0	int
;	O
int	O
c	O
;	O
char	O
*	O
p	*(void)
=	O
line	O
;	O
if	O
(	O
file	*(void)
->	O
at_end	O
)	O
return	O
""	*(char)
;	O
if	O
(	O
!	O
last_open_file_info	O
||	O
file	*(void)
!=	O
last_open_file_info	O
)	O
{	O
if	O
(	O
last_open_file	O
)	O
{	O
last_open_file_info	O
->	O
pos	long
=	O
ftell	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
last_open_file	O
)	O
;	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
last_open_file	O
)	O
;	O
}	O
last_open_file_info	O
=	O
file	*(void)
;	O
last_open_file	O
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
file	*(void)
->	O
filename	*(char)
,	O
FOPEN_RB	O
)	O
;	O
if	O
(	O
last_open_file	O
==	O
NULL	O
)	O
{	O
file	*(void)
->	O
at_end	O
=	O
1	int
;	O
return	O
""	*(char)
;	O
}	O
if	O
(	O
file	*(void)
->	O
pos	long
)	O
fseek	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),long,int)->(int)
(	O
last_open_file	O
,	O
file	*(void)
->	O
pos	long
,	O
SEEK_SET	O
)	O
;	O
}	O
size	int
-=	O
1	int
;	O
c	O
=	O
fgetc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
last_open_file	O
)	O
;	O
while	O
(	O
c	O
!=	O
EOF	O
&&	O
c	O
!=	O
'\n'	O
&&	O
c	O
!=	O
'\r'	O
)	O
{	O
if	O
(	O
count	int
<	O
size	int
)	O
*	O
p	*(void)
++	O
=	O
c	O
;	O
count	int
++	O
;	O
c	O
=	O
fgetc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
last_open_file	O
)	O
;	O
}	O
if	O
(	O
c	O
==	O
'\r'	O
||	O
c	O
==	O
'\n'	O
)	O
{	O
int	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
=	O
fgetc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
last_open_file	O
)	O
;	O
if	O
(	O
(	O
c	O
==	O
'\r'	O
&&	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
!=	O
'\n'	O
)	O
||	O
(	O
c	O
==	O
'\n'	O
&&	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
!=	O
'\r'	O
)	O
)	O
ungetc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
,	O
last_open_file	O
)	O
;	O
}	O
if	O
(	O
c	O
==	O
EOF	O
)	O
{	O
file	*(void)
->	O
at_end	O
=	O
1	int
;	O
if	O
(	O
count	int
+	O
2	int
<	O
size	int
)	O
{	O
*	O
p	*(void)
++	O
=	O
'.'	O
;	O
*	O
p	*(void)
++	O
=	O
'.'	O
;	O
*	O
p	*(void)
++	O
=	O
'.'	O
;	O
}	O
}	O
file	*(void)
->	O
linenum	O
++	O
;	O
*	O
p	*(void)
++	O
=	O
0	int
;	O
return	O
line	O
;	O
}	O
static	O
void	O
rebuffer_line	O
(	O
file_info_type	O
*	O
file	*(void)
,	O
unsigned	O
int	O
linenum	O
,	O
char	O
*	O
buffer	O
,	O
unsigned	O
int	O
size	int
)	O
{	O
unsigned	O
int	O
count	int
=	O
0	int
;	O
unsigned	O
int	O
current_line	O
;	O
char	O
*	O
p	*(void)
=	O
buffer	O
;	O
long	O
pos	long
;	O
long	O
pos2	O
;	O
int	O
c	O
;	O
bfd_boolean	int
found	O
=	O
FALSE	O
;	O
if	O
(	O
file	*(void)
==	O
NULL	O
||	O
buffer	O
==	O
NULL	O
||	O
size	int
<=	O
1	int
||	O
file	*(void)
->	O
linenum	O
<=	O
linenum	O
)	O
return	O
;	O
if	O
(	O
last_open_file_info	O
==	O
NULL	O
||	O
file	*(void)
!=	O
last_open_file_info	O
)	O
{	O
if	O
(	O
last_open_file	O
)	O
{	O
last_open_file_info	O
->	O
pos	long
=	O
ftell	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
last_open_file	O
)	O
;	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
last_open_file	O
)	O
;	O
}	O
last_open_file_info	O
=	O
file	*(void)
;	O
last_open_file	O
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
file	*(void)
->	O
filename	*(char)
,	O
FOPEN_RB	O
)	O
;	O
if	O
(	O
last_open_file	O
==	O
NULL	O
)	O
{	O
file	*(void)
->	O
at_end	O
=	O
1	int
;	O
return	O
;	O
}	O
if	O
(	O
file	*(void)
->	O
pos	long
)	O
fseek	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),long,int)->(int)
(	O
last_open_file	O
,	O
file	*(void)
->	O
pos	long
,	O
SEEK_SET	O
)	O
;	O
}	O
pos2	O
=	O
pos	long
=	O
ftell	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
last_open_file	O
)	O
;	O
if	O
(	O
pos	long
<	O
3	int
)	O
return	O
;	O
current_line	O
=	O
file	*(void)
->	O
linenum	O
;	O
size	int
-=	O
1	int
;	O
buffer	O
[	O
size	int
]	O
=	O
0	int
;	O
++	O
current_line	O
;	O
while	O
(	O
pos2	O
>	O
0	int
&&	O
!	O
found	O
)	O
{	O
char	O
*	O
ptr	*(*(char))
;	O
pos2	O
=	O
(	O
long	O
)	O
size	int
>	O
pos2	O
?	O
0	int
:	O
pos2	O
-	O
size	int
;	O
fseek	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),long,int)->(int)
(	O
last_open_file	O
,	O
pos2	O
,	O
SEEK_SET	O
)	O
;	O
if	O
(	O
fread	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
buffer	O
,	O
1	int
,	O
size	int
,	O
last_open_file	O
)	O
!=	O
size	int
)	O
{	O
as_warn	O
(	O
_	O
(	O
"unable to rebuffer file: %s\n"	*(char)
)	O
,	O
file	*(void)
->	O
filename	*(char)
)	O
;	O
return	O
;	O
}	O
for	O
(	O
ptr	*(*(char))
=	O
buffer	O
+	O
size	int
;	O
ptr	*(*(char))
>=	O
buffer	O
;	O
--	O
ptr	*(*(char))
)	O
{	O
if	O
(	O
*	O
ptr	*(*(char))
==	O
'\n'	O
)	O
{	O
--	O
current_line	O
;	O
if	O
(	O
current_line	O
==	O
linenum	O
)	O
{	O
found	O
=	O
TRUE	int
;	O
pos2	O
+=	O
(	O
ptr	*(*(char))
-	O
buffer	O
)	O
;	O
if	O
(	O
ptr	*(*(char))
+	O
1	int
==	O
buffer	O
+	O
size	int
)	O
{	O
++	O
pos2	O
;	O
if	O
(	O
fgetc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
last_open_file	O
)	O
==	O
'\r'	O
)	O
++	O
pos2	O
;	O
}	O
else	O
pos2	O
+=	O
(	O
ptr	*(*(char))
[	O
1	int
]	O
==	O
'\r'	O
?	O
2	int
:	O
1	int
)	O
;	O
fseek	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),long,int)->(int)
(	O
last_open_file	O
,	O
pos2	O
,	O
SEEK_SET	O
)	O
;	O
break	O
;	O
}	O
}	O
}	O
}	O
c	O
=	O
fgetc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
last_open_file	O
)	O
;	O
while	O
(	O
c	O
!=	O
EOF	O
&&	O
c	O
!=	O
'\n'	O
&&	O
c	O
!=	O
'\r'	O
)	O
{	O
if	O
(	O
count	int
<	O
size	int
)	O
*	O
p	*(void)
++	O
=	O
c	O
;	O
count	int
++	O
;	O
c	O
=	O
fgetc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
last_open_file	O
)	O
;	O
}	O
if	O
(	O
c	O
==	O
'\r'	O
||	O
c	O
==	O
'\n'	O
)	O
{	O
int	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
=	O
fgetc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
last_open_file	O
)	O
;	O
if	O
(	O
(	O
c	O
==	O
'\r'	O
&&	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
!=	O
'\n'	O
)	O
||	O
(	O
c	O
==	O
'\n'	O
&&	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
!=	O
'\r'	O
)	O
)	O
ungetc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
,	O
last_open_file	O
)	O
;	O
}	O
*	O
p	*(void)
++	O
=	O
0	int
;	O
fseek	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),long,int)->(int)
(	O
last_open_file	O
,	O
pos	long
,	O
SEEK_SET	O
)	O
;	O
}	O
static	O
const	O
char	O
*	O
fn	O
;	O
static	O
unsigned	O
int	O
eject	O
;	O
static	O
unsigned	O
int	O
page	O
;	O
static	O
const	O
char	O
*	O
title	O
;	O
static	O
const	O
char	O
*	O
subtitle	O
;	O
static	O
unsigned	O
int	O
on_page	O
;	O
static	O
void	O
listing_page	O
(	O
list_info_type	O
*	O
list	O
)	O
{	O
if	O
(	O
(	O
eject	O
||	O
(	O
on_page	O
>=	O
(	O
unsigned	O
int	O
)	O
paper_height	O
)	O
)	O
&&	O
paper_height	O
!=	O
0	int
)	O
{	O
unsigned	O
int	O
c	O
=	O
10	int
;	O
int	O
had_title	O
=	O
0	int
;	O
int	O
had_subtitle	O
=	O
0	int
;	O
page	O
++	O
;	O
while	O
(	O
c	O
!=	O
0	int
&&	O
list	O
)	O
{	O
if	O
(	O
list	O
->	O
edict	O
==	O
EDICT_SBTTL	O
&&	O
!	O
had_subtitle	O
)	O
{	O
had_subtitle	O
=	O
1	int
;	O
subtitle	O
=	O
list	O
->	O
edict_arg	O
;	O
}	O
if	O
(	O
list	O
->	O
edict	O
==	O
EDICT_TITLE	O
&&	O
!	O
had_title	O
)	O
{	O
had_title	O
=	O
1	int
;	O
title	O
=	O
list	O
->	O
edict_arg	O
;	O
}	O
list	O
=	O
list	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
c	O
--	O
;	O
}	O
if	O
(	O
page	O
>	O
1	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
list_file	O
,	O
"\f"	*(char)
)	O
;	O
}	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
list_file	O
,	O
"%s %s \t\t\tpage %d\n"	*(char)
,	O
LISTING_HEADER	O
,	O
fn	O
,	O
page	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
list_file	O
,	O
"%s\n"	*(char)
,	O
title	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
list_file	O
,	O
"%s\n"	*(char)
,	O
subtitle	O
)	O
;	O
on_page	O
=	O
3	int
;	O
eject	O
=	O
0	int
;	O
}	O
}	O
static	O
void	O
emit_line	O
(	O
list_info_type	O
*	O
list	O
,	O
const	O
char	O
*	O
format	enum(int,int,int,int,int)
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
args	O
;	O
va_start	O
(	O
args	O
,	O
format	enum(int,int,int,int,int)
)	O
;	O
vfprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),array(struct(int,int,*(void),*(void))))->(int)
(	O
list_file	O
,	O
format	enum(int,int,int,int,int)
,	O
args	O
)	O
;	O
on_page	O
++	O
;	O
listing_page	O
(	O
list	O
)	O
;	O
va_end	O
(	O
args	O
)	O
;	O
}	O
static	O
unsigned	O
int	O
calc_hex	O
(	O
list_info_type	O
*	O
list	O
)	O
{	O
int	O
data_buffer_size	O
;	O
list_info_type	O
*	O
first	O
=	O
list	O
;	O
unsigned	O
int	O
address	long
=	O
~	O
(	O
unsigned	O
int	O
)	O
0	int
;	O
fragS	O
*	O
frag	O
;	O
fragS	O
*	O
frag_ptr	O
;	O
unsigned	O
int	O
octet_in_frag	O
;	O
frag	O
=	O
list	O
->	O
frag	O
;	O
while	O
(	O
frag	O
&&	O
frag	O
->	O
line	O
!=	O
list	O
)	O
frag	O
=	O
frag	O
->	O
fr_next	O
;	O
frag_ptr	O
=	O
frag	O
;	O
data_buffer_size	O
=	O
0	int
;	O
while	O
(	O
frag_ptr	O
!=	O
(	O
fragS	O
*	O
)	O
NULL	O
&&	O
frag_ptr	O
->	O
line	O
==	O
first	O
)	O
{	O
octet_in_frag	O
=	O
0	int
;	O
while	O
(	O
octet_in_frag	O
<	O
frag_ptr	O
->	O
fr_fix	O
&&	O
data_buffer_size	O
<	O
MAX_BYTES	O
-	O
3	int
)	O
{	O
if	O
(	O
address	long
==	O
~	O
(	O
unsigned	O
int	O
)	O
0	int
)	O
address	long
=	O
frag_ptr	O
->	O
fr_address	O
/	O
OCTETS_PER_BYTE	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
data_buffer	O
+	O
data_buffer_size	O
,	O
"%02X"	*(char)
,	O
(	O
frag_ptr	O
->	O
fr_literal	O
[	O
octet_in_frag	O
]	O
)	O
&	O
0xff	int
)	O
;	O
data_buffer_size	O
+=	O
2	int
;	O
octet_in_frag	O
++	O
;	O
}	O
if	O
(	O
frag_ptr	O
->	O
fr_type	O
==	O
rs_fill	O
)	O
{	O
unsigned	O
int	O
var_rep_max	O
=	O
octet_in_frag	O
;	O
unsigned	O
int	O
var_rep_idx	O
=	O
octet_in_frag	O
;	O
while	O
(	O
(	O
octet_in_frag	O
<	O
frag_ptr	O
->	O
fr_fix	O
+	O
frag_ptr	O
->	O
fr_var	O
*	O
frag_ptr	O
->	O
fr_offset	O
)	O
&&	O
data_buffer_size	O
<	O
MAX_BYTES	O
-	O
3	int
)	O
{	O
if	O
(	O
address	long
==	O
~	O
(	O
unsigned	O
int	O
)	O
0	int
)	O
address	long
=	O
frag_ptr	O
->	O
fr_address	O
/	O
OCTETS_PER_BYTE	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
data_buffer	O
+	O
data_buffer_size	O
,	O
"%02X"	*(char)
,	O
(	O
frag_ptr	O
->	O
fr_literal	O
[	O
var_rep_idx	O
]	O
)	O
&	O
0xff	int
)	O
;	O
data_buffer_size	O
+=	O
2	int
;	O
var_rep_idx	O
++	O
;	O
octet_in_frag	O
++	O
;	O
if	O
(	O
var_rep_idx	O
>=	O
frag_ptr	O
->	O
fr_fix	O
+	O
frag_ptr	O
->	O
fr_var	O
)	O
var_rep_idx	O
=	O
var_rep_max	O
;	O
}	O
}	O
frag_ptr	O
=	O
frag_ptr	O
->	O
fr_next	O
;	O
}	O
data_buffer	O
[	O
data_buffer_size	O
]	O
=	O
'\0'	O
;	O
return	O
address	long
;	O
}	O
static	O
void	O
print_lines	O
(	O
list_info_type	O
*	O
list	O
,	O
unsigned	O
int	O
lineno	*(struct(int,union(*(struct),long)))
,	O
const	O
char	O
*	O
string	*(char)
,	O
unsigned	O
int	O
address	long
)	O
{	O
unsigned	O
int	O
idx	O
;	O
unsigned	O
int	O
nchars	O
;	O
unsigned	O
int	O
lines	O
;	O
unsigned	O
int	O
octet_in_word	O
=	O
0	int
;	O
char	O
*	O
src	O
=	O
data_buffer	O
;	O
int	O
cur	O
;	O
struct	O
list_message	O
*	O
msg	O
;	O
listing_page	O
(	O
list	O
)	O
;	O
nchars	O
=	O
(	O
LISTING_WORD_SIZE	O
*	O
2	int
+	O
1	int
)	O
*	O
listing_lhs_width	O
;	O
if	O
(	O
address	long
==	O
~	O
(	O
unsigned	O
int	O
)	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
list_file	O
,	O
"% 4d     "	*(char)
,	O
lineno	*(struct(int,union(*(struct),long)))
)	O
;	O
for	O
(	O
idx	O
=	O
0	int
;	O
idx	O
<	O
nchars	O
;	O
idx	O
++	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
list_file	O
,	O
" "	*(char)
)	O
;	O
emit_line	O
(	O
NULL	O
,	O
"\t%s\n"	*(char)
,	O
string	*(char)
?	O
string	*(char)
:	O
""	*(char)
)	O
;	O
return	O
;	O
}	O
if	O
(	O
had_errors	O
(	O
)	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
list_file	O
,	O
"% 4d ???? "	*(char)
,	O
lineno	*(struct(int,union(*(struct),long)))
)	O
;	O
else	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
list_file	O
,	O
"% 4d %04x "	*(char)
,	O
lineno	*(struct(int,union(*(struct),long)))
,	O
address	long
)	O
;	O
idx	O
=	O
0	int
;	O
cur	O
=	O
0	int
;	O
while	O
(	O
src	O
[	O
cur	O
]	O
&&	O
idx	O
<	O
nchars	O
)	O
{	O
int	O
offset	long
;	O
offset	long
=	O
cur	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
list_file	O
,	O
"%c%c"	*(char)
,	O
src	O
[	O
offset	long
]	O
,	O
src	O
[	O
offset	long
+	O
1	int
]	O
)	O
;	O
cur	O
+=	O
2	int
;	O
octet_in_word	O
++	O
;	O
if	O
(	O
octet_in_word	O
==	O
LISTING_WORD_SIZE	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
list_file	O
,	O
" "	*(char)
)	O
;	O
idx	O
++	O
;	O
octet_in_word	O
=	O
0	int
;	O
}	O
idx	O
+=	O
2	int
;	O
}	O
for	O
(	O
;	O
idx	O
<	O
nchars	O
;	O
idx	O
++	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
list_file	O
,	O
" "	*(char)
)	O
;	O
emit_line	O
(	O
list	O
,	O
"\t%s\n"	*(char)
,	O
string	*(char)
?	O
string	*(char)
:	O
""	*(char)
)	O
;	O
for	O
(	O
msg	O
=	O
list	O
->	O
messages	O
;	O
msg	O
;	O
msg	O
=	O
msg	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
emit_line	O
(	O
list	O
,	O
"****  %s\n"	*(char)
,	O
msg	O
->	O
message	*(char)
)	O
;	O
for	O
(	O
lines	O
=	O
0	int
;	O
lines	O
<	O
(	O
unsigned	O
int	O
)	O
listing_lhs_cont_lines	O
&&	O
src	O
[	O
cur	O
]	O
;	O
lines	O
++	O
)	O
{	O
nchars	O
=	O
(	O
(	O
LISTING_WORD_SIZE	O
*	O
2	int
)	O
+	O
1	int
)	O
*	O
listing_lhs_width_second	O
-	O
1	int
;	O
idx	O
=	O
0	int
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
list_file	O
,	O
"% 4d      "	*(char)
,	O
lineno	*(struct(int,union(*(struct),long)))
)	O
;	O
while	O
(	O
src	O
[	O
cur	O
]	O
&&	O
idx	O
<	O
nchars	O
)	O
{	O
int	O
offset	long
;	O
offset	long
=	O
cur	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
list_file	O
,	O
"%c%c"	*(char)
,	O
src	O
[	O
offset	long
]	O
,	O
src	O
[	O
offset	long
+	O
1	int
]	O
)	O
;	O
cur	O
+=	O
2	int
;	O
idx	O
+=	O
2	int
;	O
octet_in_word	O
++	O
;	O
if	O
(	O
octet_in_word	O
==	O
LISTING_WORD_SIZE	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
list_file	O
,	O
" "	*(char)
)	O
;	O
idx	O
++	O
;	O
octet_in_word	O
=	O
0	int
;	O
}	O
}	O
emit_line	O
(	O
list	O
,	O
"\n"	*(char)
)	O
;	O
}	O
}	O
static	O
void	O
list_symbol_table	O
(	O
void	O
)	O
{	O
extern	O
symbolS	O
*	O
symbol_rootP	O
;	O
int	O
got_some	O
=	O
0	int
;	O
symbolS	O
*	O
ptr	*(*(char))
;	O
eject	O
=	O
1	int
;	O
listing_page	O
(	O
NULL	O
)	O
;	O
for	O
(	O
ptr	*(*(char))
=	O
symbol_rootP	O
;	O
ptr	*(*(char))
!=	O
(	O
symbolS	O
*	O
)	O
NULL	O
;	O
ptr	*(*(char))
=	O
symbol_next	O
(	O
ptr	*(*(char))
)	O
)	O
{	O
if	O
(	O
SEG_NORMAL	O
(	O
S_GET_SEGMENT	O
(	O
ptr	*(*(char))
)	O
)	O
||	O
S_GET_SEGMENT	O
(	O
ptr	*(*(char))
)	O
==	O
absolute_section	O
)	O
{	O
if	O
(	O
symbol_section_p	O
(	O
ptr	*(*(char))
)	O
)	O
continue	O
;	O
if	O
(	O
S_GET_NAME	O
(	O
ptr	*(*(char))
)	O
)	O
{	O
char	O
buf	*(void)
[	O
30	int
]	O
,	O
fmt	*(char)
[	O
8	int
]	O
;	O
valueT	O
val	int
=	O
S_GET_VALUE	O
(	O
ptr	*(*(char))
)	O
;	O
if	O
(	O
sizeof	O
(	O
val	int
)	O
==	O
4	int
&&	O
sizeof	O
(	O
int	O
)	O
==	O
4	int
)	O
sprintf	(*(char),*(char))->(int)
(	O
buf	*(void)
,	O
"%08lx"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
val	int
)	O
;	O
else	O
if	O
(	O
sizeof	O
(	O
val	int
)	O
<=	O
sizeof	O
(	O
unsigned	O
long	O
)	O
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
fmt	*(char)
,	O
"%%0%lulx"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
(	O
sizeof	O
(	O
val	int
)	O
*	O
2	int
)	O
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
buf	*(void)
,	O
fmt	*(char)
,	O
(	O
unsigned	O
long	O
)	O
val	int
)	O
;	O
}	O
else	O
if	O
(	O
sizeof	O
(	O
val	int
)	O
>	O
4	int
)	O
sprintf_vma	O
(	O
buf	*(void)
,	O
val	int
)	O
;	O
else	O
abort	()->(void)
(	O
)	O
;	O
if	O
(	O
!	O
got_some	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
list_file	O
,	O
"DEFINED SYMBOLS\n"	*(char)
)	O
;	O
on_page	O
++	O
;	O
got_some	O
=	O
1	int
;	O
}	O
if	O
(	O
symbol_get_frag	O
(	O
ptr	*(*(char))
)	O
&&	O
symbol_get_frag	O
(	O
ptr	*(*(char))
)	O
->	O
line	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
list_file	O
,	O
"%20s:%-5d  %s:%s %s\n"	*(char)
,	O
symbol_get_frag	O
(	O
ptr	*(*(char))
)	O
->	O
line	O
->	O
file	*(void)
->	O
filename	*(char)
,	O
symbol_get_frag	O
(	O
ptr	*(*(char))
)	O
->	O
line	O
->	O
line	O
,	O
segment_name	O
(	O
S_GET_SEGMENT	O
(	O
ptr	*(*(char))
)	O
)	O
,	O
buf	*(void)
,	O
S_GET_NAME	O
(	O
ptr	*(*(char))
)	O
)	O
;	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
list_file	O
,	O
"%33s:%s %s\n"	*(char)
,	O
segment_name	O
(	O
S_GET_SEGMENT	O
(	O
ptr	*(*(char))
)	O
)	O
,	O
buf	*(void)
,	O
S_GET_NAME	O
(	O
ptr	*(*(char))
)	O
)	O
;	O
}	O
on_page	O
++	O
;	O
listing_page	O
(	O
NULL	O
)	O
;	O
}	O
}	O
}	O
if	O
(	O
!	O
got_some	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
list_file	O
,	O
"NO DEFINED SYMBOLS\n"	*(char)
)	O
;	O
on_page	O
++	O
;	O
}	O
emit_line	O
(	O
NULL	O
,	O
"\n"	*(char)
)	O
;	O
got_some	O
=	O
0	int
;	O
for	O
(	O
ptr	*(*(char))
=	O
symbol_rootP	O
;	O
ptr	*(*(char))
!=	O
(	O
symbolS	O
*	O
)	O
NULL	O
;	O
ptr	*(*(char))
=	O
symbol_next	O
(	O
ptr	*(*(char))
)	O
)	O
{	O
if	O
(	O
S_GET_NAME	O
(	O
ptr	*(*(char))
)	O
&&	O
strlen	(*(char))->(long)
(	O
S_GET_NAME	O
(	O
ptr	*(*(char))
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
S_GET_SEGMENT	O
(	O
ptr	*(*(char))
)	O
==	O
undefined_section	O
)	O
{	O
if	O
(	O
!	O
got_some	O
)	O
{	O
got_some	O
=	O
1	int
;	O
emit_line	O
(	O
NULL	O
,	O
"UNDEFINED SYMBOLS\n"	*(char)
)	O
;	O
}	O
emit_line	O
(	O
NULL	O
,	O
"%s\n"	*(char)
,	O
S_GET_NAME	O
(	O
ptr	*(*(char))
)	O
)	O
;	O
}	O
}	O
}	O
if	O
(	O
!	O
got_some	O
)	O
emit_line	O
(	O
NULL	O
,	O
"NO UNDEFINED SYMBOLS\n"	*(char)
)	O
;	O
}	O
typedef	O
struct	O
cached_line	O
{	O
file_info_type	O
*	O
file	*(void)
;	O
unsigned	O
int	O
line	O
;	O
char	O
buffer	O
[	O
LISTING_RHS_WIDTH	O
]	O
;	O
}	O
cached_line	O
;	O
static	O
void	O
print_source	O
(	O
file_info_type	O
*	O
current_file	O
,	O
list_info_type	O
*	O
list	O
,	O
unsigned	O
int	O
width	O
)	O
{	O
static	O
cached_line	O
cached_lines	O
[	O
NUM_CACHE_LINES	O
]	O
;	O
static	O
int	O
next_free_line	O
=	O
0	int
;	O
cached_line	O
*	O
cache	O
=	O
NULL	O
;	O
if	O
(	O
current_file	O
->	O
linenum	O
>	O
list	O
->	O
hll_line	O
&&	O
list	O
->	O
hll_line	O
>	O
0	int
)	O
{	O
int	O
i	*(struct)
;	O
for	O
(	O
i	*(struct)
=	O
0	int
;	O
i	*(struct)
<	O
NUM_CACHE_LINES	O
;	O
i	*(struct)
++	O
)	O
if	O
(	O
cached_lines	O
[	O
i	*(struct)
]	O
.	O
file	*(void)
==	O
current_file	O
&&	O
cached_lines	O
[	O
i	*(struct)
]	O
.	O
line	O
==	O
list	O
->	O
hll_line	O
)	O
{	O
cache	O
=	O
cached_lines	O
+	O
i	*(struct)
;	O
break	O
;	O
}	O
if	O
(	O
i	*(struct)
==	O
NUM_CACHE_LINES	O
)	O
{	O
cache	O
=	O
cached_lines	O
+	O
next_free_line	O
;	O
next_free_line	O
++	O
;	O
if	O
(	O
next_free_line	O
==	O
NUM_CACHE_LINES	O
)	O
next_free_line	O
=	O
0	int
;	O
cache	O
->	O
file	*(void)
=	O
current_file	O
;	O
cache	O
->	O
line	O
=	O
list	O
->	O
hll_line	O
;	O
cache	O
->	O
buffer	O
[	O
0	int
]	O
=	O
0	int
;	O
rebuffer_line	O
(	O
current_file	O
,	O
cache	O
->	O
line	O
,	O
cache	O
->	O
buffer	O
,	O
width	O
)	O
;	O
}	O
emit_line	O
(	O
list	O
,	O
"%4u:%-13s **** %s\n"	*(char)
,	O
cache	O
->	O
line	O
,	O
cache	O
->	O
file	*(void)
->	O
filename	*(char)
,	O
cache	O
->	O
buffer	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
!	O
current_file	O
->	O
at_end	O
)	O
{	O
int	O
num_lines_shown	O
=	O
0	int
;	O
while	O
(	O
current_file	O
->	O
linenum	O
<	O
list	O
->	O
hll_line	O
&&	O
!	O
current_file	O
->	O
at_end	O
)	O
{	O
const	O
char	O
*	O
p	*(void)
;	O
cache	O
=	O
cached_lines	O
+	O
next_free_line	O
;	O
cache	O
->	O
file	*(void)
=	O
current_file	O
;	O
cache	O
->	O
line	O
=	O
current_file	O
->	O
linenum	O
+	O
1	int
;	O
cache	O
->	O
buffer	O
[	O
0	int
]	O
=	O
0	int
;	O
p	*(void)
=	O
buffer_line	O
(	O
current_file	O
,	O
cache	O
->	O
buffer	O
,	O
width	O
)	O
;	O
if	O
(	O
num_lines_shown	O
==	O
0	int
)	O
{	O
next_free_line	O
++	O
;	O
if	O
(	O
next_free_line	O
==	O
NUM_CACHE_LINES	O
)	O
next_free_line	O
=	O
0	int
;	O
}	O
emit_line	O
(	O
list	O
,	O
"%4u:%-13s **** %s\n"	*(char)
,	O
cache	O
->	O
line	O
,	O
cache	O
->	O
file	*(void)
->	O
filename	*(char)
,	O
p	*(void)
)	O
;	O
num_lines_shown	O
++	O
;	O
}	O
}	O
}	O
static	O
int	O
debugging_pseudo	O
(	O
list_info_type	O
*	O
list	O
,	O
const	O
char	O
*	O
line	O
)	O
{	O
static	O
int	O
in_debug	O
;	O
int	O
was_debug	O
;	O
if	O
(	O
list	O
->	O
debugging	O
)	O
{	O
in_debug	O
=	O
1	int
;	O
return	O
1	int
;	O
}	O
was_debug	O
=	O
in_debug	O
;	O
in_debug	O
=	O
0	int
;	O
while	O
(	O
ISSPACE	O
(	O
*	O
line	O
)	O
)	O
line	O
++	O
;	O
if	O
(	O
*	O
line	O
!=	O
'.'	O
)	O
{	O
if	O
(	O
was_debug	O
&&	O
*	O
line	O
==	O
'\0'	O
&&	O
list	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
!=	O
NULL	O
&&	O
list	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
->	O
debugging	O
)	O
{	O
in_debug	O
=	O
1	int
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
line	O
++	O
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
line	O
,	O
"def"	*(char)
,	O
3	int
)	O
==	O
0	int
)	O
return	O
1	int
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
line	O
,	O
"val"	*(char)
,	O
3	int
)	O
==	O
0	int
)	O
return	O
1	int
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
line	O
,	O
"scl"	*(char)
,	O
3	int
)	O
==	O
0	int
)	O
return	O
1	int
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
line	O
,	O
"line"	*(char)
,	O
4	int
)	O
==	O
0	int
)	O
return	O
1	int
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
line	O
,	O
"endef"	*(char)
,	O
5	int
)	O
==	O
0	int
)	O
return	O
1	int
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
line	O
,	O
"ln"	*(char)
,	O
2	int
)	O
==	O
0	int
)	O
return	O
1	int
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
line	O
,	O
"type"	*(char)
,	O
4	int
)	O
==	O
0	int
)	O
return	O
1	int
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
line	O
,	O
"size"	*(char)
,	O
4	int
)	O
==	O
0	int
)	O
return	O
1	int
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
line	O
,	O
"dim"	*(char)
,	O
3	int
)	O
==	O
0	int
)	O
return	O
1	int
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
line	O
,	O
"tag"	*(char)
,	O
3	int
)	O
==	O
0	int
)	O
return	O
1	int
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
line	O
,	O
"stabs"	*(char)
,	O
5	int
)	O
==	O
0	int
)	O
return	O
1	int
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
line	O
,	O
"stabn"	*(char)
,	O
5	int
)	O
==	O
0	int
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
void	O
listing_listing	O
(	O
char	O
*	O
name	*(char)
ATTRIBUTE_UNUSED	O
)	O
{	O
list_info_type	O
*	O
list	O
=	O
head	O
;	O
file_info_type	O
*	O
current_hll_file	O
=	O
(	O
file_info_type	O
*	O
)	O
NULL	O
;	O
char	O
*	O
buffer	O
;	O
const	O
char	O
*	O
p	*(void)
;	O
int	O
show_listing	O
=	O
1	int
;	O
unsigned	O
int	O
width	O
;	O
buffer	O
=	O
XNEWVEC	O
(	O
char	O
,	O
listing_rhs_width	O
)	O
;	O
data_buffer	O
=	O
XNEWVEC	O
(	O
char	O
,	O
MAX_BYTES	O
)	O
;	O
eject	O
=	O
1	int
;	O
list	O
=	O
head	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
while	O
(	O
list	O
)	O
{	O
unsigned	O
int	O
list_line	O
;	O
width	O
=	O
listing_rhs_width	O
>	O
paper_width	O
?	O
paper_width	O
:	O
listing_rhs_width	O
;	O
list_line	O
=	O
list	O
->	O
line	O
;	O
switch	O
(	O
list	O
->	O
edict	O
)	O
{	O
case	O
EDICT_LIST	O
:	O
list_line	O
--	O
;	O
break	O
;	O
case	O
EDICT_NOLIST	O
:	O
show_listing	O
--	O
;	O
break	O
;	O
case	O
EDICT_NOLIST_NEXT	O
:	O
if	O
(	O
show_listing	O
==	O
0	int
)	O
list_line	O
--	O
;	O
break	O
;	O
case	O
EDICT_EJECT	O
:	O
break	O
;	O
case	O
EDICT_NONE	O
:	O
break	O
;	O
case	O
EDICT_TITLE	O
:	O
title	O
=	O
list	O
->	O
edict_arg	O
;	O
break	O
;	O
case	O
EDICT_SBTTL	O
:	O
subtitle	O
=	O
list	O
->	O
edict_arg	O
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
if	O
(	O
show_listing	O
<=	O
0	int
)	O
{	O
while	O
(	O
list	O
->	O
file	*(void)
->	O
linenum	O
<	O
list_line	O
&&	O
!	O
list	O
->	O
file	*(void)
->	O
at_end	O
)	O
p	*(void)
=	O
buffer_line	O
(	O
list	O
->	O
file	*(void)
,	O
buffer	O
,	O
width	O
)	O
;	O
}	O
if	O
(	O
list	O
->	O
edict	O
==	O
EDICT_LIST	O
||	O
(	O
list	O
->	O
edict	O
==	O
EDICT_NOLIST_NEXT	O
&&	O
show_listing	O
==	O
0	int
)	O
)	O
{	O
list_line	O
++	O
;	O
show_listing	O
++	O
;	O
}	O
if	O
(	O
show_listing	O
>	O
0	int
)	O
{	O
if	O
(	O
list	O
->	O
hll_file	O
)	O
current_hll_file	O
=	O
list	O
->	O
hll_file	O
;	O
if	O
(	O
current_hll_file	O
&&	O
list	O
->	O
hll_line	O
&&	O
(	O
listing	O
&	O
LISTING_HLL	O
)	O
)	O
print_source	O
(	O
current_hll_file	O
,	O
list	O
,	O
width	O
)	O
;	O
if	O
(	O
list	O
->	O
line_contents	O
)	O
{	O
if	O
(	O
!	O
(	O
(	O
listing	O
&	O
LISTING_NODEBUG	O
)	O
&&	O
debugging_pseudo	O
(	O
list	O
,	O
list	O
->	O
line_contents	O
)	O
)	O
)	O
print_lines	O
(	O
list	O
,	O
list	O
->	O
file	*(void)
->	O
linenum	O
==	O
0	int
?	O
list	O
->	O
line	O
:	O
list	O
->	O
file	*(void)
->	O
linenum	O
,	O
list	O
->	O
line_contents	O
,	O
calc_hex	O
(	O
list	O
)	O
)	O
;	O
free	(*(void))->(void)
(	O
list	O
->	O
line_contents	O
)	O
;	O
list	O
->	O
line_contents	O
=	O
NULL	O
;	O
}	O
else	O
{	O
while	O
(	O
list	O
->	O
file	*(void)
->	O
linenum	O
<	O
list_line	O
&&	O
!	O
list	O
->	O
file	*(void)
->	O
at_end	O
)	O
{	O
unsigned	O
int	O
address	long
;	O
p	*(void)
=	O
buffer_line	O
(	O
list	O
->	O
file	*(void)
,	O
buffer	O
,	O
width	O
)	O
;	O
if	O
(	O
list	O
->	O
file	*(void)
->	O
linenum	O
<	O
list_line	O
)	O
address	long
=	O
~	O
(	O
unsigned	O
int	O
)	O
0	int
;	O
else	O
address	long
=	O
calc_hex	O
(	O
list	O
)	O
;	O
if	O
(	O
!	O
(	O
(	O
listing	O
&	O
LISTING_NODEBUG	O
)	O
&&	O
debugging_pseudo	O
(	O
list	O
,	O
p	*(void)
)	O
)	O
)	O
print_lines	O
(	O
list	O
,	O
list	O
->	O
file	*(void)
->	O
linenum	O
,	O
p	*(void)
,	O
address	long
)	O
;	O
}	O
}	O
if	O
(	O
list	O
->	O
edict	O
==	O
EDICT_EJECT	O
)	O
eject	O
=	O
1	int
;	O
}	O
if	O
(	O
list	O
->	O
edict	O
==	O
EDICT_NOLIST_NEXT	O
&&	O
show_listing	O
==	O
1	int
)	O
--	O
show_listing	O
;	O
list	O
=	O
list	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
}	O
free	(*(void))->(void)
(	O
buffer	O
)	O
;	O
free	(*(void))->(void)
(	O
data_buffer	O
)	O
;	O
data_buffer	O
=	O
NULL	O
;	O
}	O
static	O
void	O
print_timestamp	O
(	O
void	O
)	O
{	O
const	O
time_t	long
now	O
=	O
time	O
(	O
NULL	O
)	O
;	O
struct	O
tm	O
*	O
timestamp	O
;	O
char	O
stampstr	O
[	O
MAX_DATELEN	O
]	O
;	O
timestamp	O
=	O
localtime	O
(	O
&	O
now	O
)	O
;	O
strftime	O
(	O
stampstr	O
,	O
MAX_DATELEN	O
,	O
"%Y-%m-%dT%H:%M:%S.000%z"	*(char)
,	O
timestamp	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
list_file	O
,	O
_	O
(	O
"\n time stamp    \t: %s\n\n"	*(char)
)	O
,	O
stampstr	O
)	O
;	O
}	O
static	O
void	O
print_single_option	O
(	O
char	O
*	O
opt	O
,	O
int	O
*	O
pos	long
)	O
{	O
int	O
opt_len	O
=	O
strlen	(*(char))->(long)
(	O
opt	O
)	O
;	O
if	O
(	O
(	O
*	O
pos	long
+	O
opt_len	O
)	O
<	O
paper_width	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
list_file	O
,	O
_	O
(	O
"%s "	*(char)
)	O
,	O
opt	O
)	O
;	O
*	O
pos	long
=	O
*	O
pos	long
+	O
opt_len	O
;	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
list_file	O
,	O
_	O
(	O
"\n\t%s "	*(char)
)	O
,	O
opt	O
)	O
;	O
*	O
pos	long
=	O
opt_len	O
;	O
}	O
}	O
static	O
void	O
print_options	O
(	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
const	O
char	O
*	O
field_name	O
=	O
_	O
(	O
"\n options passed\t: "	*(char)
)	O
;	O
int	O
pos	long
=	O
strlen	(*(char))->(long)
(	O
field_name	O
)	O
;	O
char	O
*	O
*	O
p	*(void)
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
field_name	O
,	O
list_file	O
)	O
;	O
for	O
(	O
p	*(void)
=	O
&	O
argv	*(*(char))
[	O
1	int
]	O
;	O
*	O
p	*(void)
!=	O
NULL	O
;	O
p	*(void)
++	O
)	O
if	O
(	O
*	O
*	O
p	*(void)
==	O
'-'	O
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
*	O
p	*(void)
,	O
"-o"	*(char)
)	O
==	O
0	int
)	O
{	O
if	O
(	O
p	*(void)
[	O
1	int
]	O
!=	O
NULL	O
)	O
p	*(void)
++	O
;	O
continue	O
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
*	O
p	*(void)
,	O
"-v"	*(char)
)	O
==	O
0	int
)	O
continue	O
;	O
print_single_option	O
(	O
*	O
p	*(void)
,	O
&	O
pos	long
)	O
;	O
}	O
}	O
static	O
void	O
listing_general_info	O
(	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
eject	O
=	O
1	int
;	O
listing_page	O
(	O
NULL	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
list_file	O
,	O
_	O
(	O
" GNU assembler version %s (%s)\n\t using BFD version %s."	*(char)
)	O
,	O
VERSION	O
,	O
TARGET_ALIAS	O
,	O
BFD_VERSION_STRING	O
)	O
;	O
print_options	O
(	O
argv	*(*(char))
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
list_file	O
,	O
_	O
(	O
"\n input file    \t: %s"	*(char)
)	O
,	O
fn	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
list_file	O
,	O
_	O
(	O
"\n output file   \t: %s"	*(char)
)	O
,	O
out_file_name	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
list_file	O
,	O
_	O
(	O
"\n target        \t: %s"	*(char)
)	O
,	O
TARGET_CANONICAL	O
)	O
;	O
print_timestamp	O
(	O
)	O
;	O
}	O
void	O
listing_print	O
(	O
char	O
*	O
name	*(char)
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
using_stdout	O
;	O
title	O
=	O
""	*(char)
;	O
subtitle	O
=	O
""	*(char)
;	O
if	O
(	O
name	*(char)
==	O
NULL	O
)	O
{	O
list_file	O
=	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
using_stdout	O
=	O
1	int
;	O
}	O
else	O
{	O
list_file	O
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
name	*(char)
,	O
FOPEN_WT	O
)	O
;	O
if	O
(	O
list_file	O
!=	O
NULL	O
)	O
using_stdout	O
=	O
0	int
;	O
else	O
{	O
as_warn	O
(	O
_	O
(	O
"can't open %s: %s"	*(char)
)	O
,	O
name	*(char)
,	O
xstrerror	O
(	O
errno	O
)	O
)	O
;	O
list_file	O
=	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
using_stdout	O
=	O
1	int
;	O
}	O
}	O
if	O
(	O
listing	O
&	O
LISTING_NOFORM	O
)	O
paper_height	O
=	O
0	int
;	O
if	O
(	O
listing	O
&	O
LISTING_GENERAL	O
)	O
listing_general_info	O
(	O
argv	*(*(char))
)	O
;	O
if	O
(	O
listing	O
&	O
LISTING_LISTING	O
)	O
listing_listing	O
(	O
name	*(char)
)	O
;	O
if	O
(	O
listing	O
&	O
LISTING_SYMBOLS	O
)	O
list_symbol_table	O
(	O
)	O
;	O
if	O
(	O
!	O
using_stdout	O
)	O
{	O
if	O
(	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
list_file	O
)	O
==	O
EOF	O
)	O
as_warn	O
(	O
_	O
(	O
"can't close %s: %s"	*(char)
)	O
,	O
name	*(char)
,	O
xstrerror	O
(	O
errno	O
)	O
)	O
;	O
}	O
if	O
(	O
last_open_file	O
)	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
last_open_file	O
)	O
;	O
}	O
void	O
listing_file	O
(	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
fn	O
=	O
name	*(char)
;	O
}	O
void	O
listing_eject	O
(	O
int	O
ignore	O
ATTRIBUTE_UNUSED	O
)	O
{	O
if	O
(	O
listing	O
)	O
listing_tail	O
->	O
edict	O
=	O
EDICT_EJECT	O
;	O
}	O
void	O
listing_list	O
(	O
int	O
on	O
)	O
{	O
if	O
(	O
listing	O
)	O
{	O
switch	O
(	O
on	O
)	O
{	O
case	O
0	int
:	O
if	O
(	O
listing_tail	O
->	O
edict	O
==	O
EDICT_LIST	O
)	O
listing_tail	O
->	O
edict	O
=	O
EDICT_NONE	O
;	O
else	O
listing_tail	O
->	O
edict	O
=	O
EDICT_NOLIST	O
;	O
break	O
;	O
case	O
1	int
:	O
if	O
(	O
listing_tail	O
->	O
edict	O
==	O
EDICT_NOLIST	O
||	O
listing_tail	O
->	O
edict	O
==	O
EDICT_NOLIST_NEXT	O
)	O
listing_tail	O
->	O
edict	O
=	O
EDICT_NONE	O
;	O
else	O
listing_tail	O
->	O
edict	O
=	O
EDICT_LIST	O
;	O
break	O
;	O
case	O
2	int
:	O
listing_tail	O
->	O
edict	O
=	O
EDICT_NOLIST_NEXT	O
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
}	O
}	O
void	O
listing_psize	O
(	O
int	O
width_only	O
)	O
{	O
if	O
(	O
!	O
width_only	O
)	O
{	O
paper_height	O
=	O
get_absolute_expression	O
(	O
)	O
;	O
if	O
(	O
paper_height	O
<	O
0	int
||	O
paper_height	O
>	O
1000	int
)	O
{	O
paper_height	O
=	O
0	int
;	O
as_warn	O
(	O
_	O
(	O
"strange paper height, set to no form"	*(char)
)	O
)	O
;	O
}	O
if	O
(	O
*	O
input_line_pointer	O
!=	O
','	O
)	O
{	O
demand_empty_rest_of_line	O
(	O
)	O
;	O
return	O
;	O
}	O
++	O
input_line_pointer	O
;	O
}	O
paper_width	O
=	O
get_absolute_expression	O
(	O
)	O
;	O
demand_empty_rest_of_line	O
(	O
)	O
;	O
}	O
void	O
listing_nopage	O
(	O
int	O
ignore	O
ATTRIBUTE_UNUSED	O
)	O
{	O
paper_height	O
=	O
0	int
;	O
}	O
void	O
listing_title	O
(	O
int	O
depth	O
)	O
{	O
int	O
quoted	O
;	O
char	O
*	O
start	O
;	O
char	O
*	O
ttl	O
;	O
unsigned	O
int	O
length	O
;	O
SKIP_WHITESPACE	O
(	O
)	O
;	O
if	O
(	O
*	O
input_line_pointer	O
!=	O
'\"'	O
)	O
quoted	O
=	O
0	int
;	O
else	O
{	O
quoted	O
=	O
1	int
;	O
++	O
input_line_pointer	O
;	O
}	O
start	O
=	O
input_line_pointer	O
;	O
while	O
(	O
*	O
input_line_pointer	O
)	O
{	O
if	O
(	O
quoted	O
?	O
*	O
input_line_pointer	O
==	O
'\"'	O
:	O
is_end_of_line	O
[	O
(	O
unsigned	O
char	O
)	O
*	O
input_line_pointer	O
]	O
)	O
{	O
if	O
(	O
listing	O
)	O
{	O
length	O
=	O
input_line_pointer	O
-	O
start	O
;	O
ttl	O
=	O
xmemdup0	O
(	O
start	O
,	O
length	O
)	O
;	O
listing_tail	O
->	O
edict	O
=	O
depth	O
?	O
EDICT_SBTTL	O
:	O
EDICT_TITLE	O
;	O
listing_tail	O
->	O
edict_arg	O
=	O
ttl	O
;	O
}	O
if	O
(	O
quoted	O
)	O
input_line_pointer	O
++	O
;	O
demand_empty_rest_of_line	O
(	O
)	O
;	O
return	O
;	O
}	O
else	O
if	O
(	O
*	O
input_line_pointer	O
==	O
'\n'	O
)	O
{	O
as_bad	O
(	O
_	O
(	O
"new line in title"	*(char)
)	O
)	O
;	O
demand_empty_rest_of_line	O
(	O
)	O
;	O
return	O
;	O
}	O
else	O
{	O
input_line_pointer	O
++	O
;	O
}	O
}	O
}	O
void	O
listing_source_line	O
(	O
unsigned	O
int	O
line	O
)	O
{	O
if	O
(	O
listing	O
)	O
{	O
new_frag	O
(	O
)	O
;	O
listing_tail	O
->	O
hll_line	O
=	O
line	O
;	O
new_frag	O
(	O
)	O
;	O
}	O
}	O
void	O
listing_source_file	O
(	O
const	O
char	O
*	O
file	*(void)
)	O
{	O
if	O
(	O
listing	O
)	O
listing_tail	O
->	O
hll_file	O
=	O
file_info	O
(	O
file	*(void)
)	O
;	O
}	O
