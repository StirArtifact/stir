const	O
char	O
*	O
findProgramPath	(*(char))->(*(char))
(	O
const	O
char	O
*	O
argv0	*(char)
)	O
{	O
char	O
*	O
path	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"PATH"	*(char)
)	O
;	O
char	O
*	O
pathbuf	*(char)
;	O
char	O
*	O
start	*(char)
,	O
*	O
chptr	*(char)
;	O
char	O
*	O
buf	*(char)
;	O
if	O
(	O
strchr	(*(char),int)->(*(char))
(	O
argv0	*(char)
,	O
'/'	O
)	O
)	O
return	O
strdup	(*(char))->(*(char))
(	O
argv0	*(char)
)	O
;	O
if	O
(	O
!	O
path	*(char)
)	O
return	O
NULL	O
;	O
start	*(char)
=	O
pathbuf	*(char)
=	O
alloca	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
path	*(char)
)	O
+	O
1	int
)	O
;	O
buf	*(char)
=	O
malloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
path	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
argv0	*(char)
)	O
+	O
2	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
pathbuf	*(char)
,	O
path	*(char)
)	O
;	O
chptr	*(char)
=	O
NULL	O
;	O
do	O
{	O
if	O
(	O
(	O
chptr	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
start	*(char)
,	O
':'	O
)	O
)	O
)	O
*	O
chptr	*(char)
=	O
'\0'	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
buf	*(char)
,	O
"%s/%s"	*(char)
,	O
start	*(char)
,	O
argv0	*(char)
)	O
;	O
if	O
(	O
!	O
access	(*(char),int)->(int)
(	O
buf	*(char)
,	O
X_OK	int
)	O
)	O
return	O
buf	*(char)
;	O
if	O
(	O
chptr	*(char)
)	O
start	*(char)
=	O
chptr	*(char)
+	O
1	int
;	O
else	O
start	*(char)
=	O
NULL	O
;	O
}	O
while	O
(	O
start	*(char)
&&	O
*	O
start	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
buf	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
