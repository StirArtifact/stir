struct	O
grecs_sockaddr_hints	struct(int,*(char),short)
*	O
grecs_sockaddr_hints	struct(int,*(char),short)
;	O
void	O
grecs_value_free_content	(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))))->(void)
(	O
struct	O
grecs_value	struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(char),struct(long,*(*(struct(int,struct`,union`))))))
*	O
val	array(int)
)	O
{	O
int	O
i	int
;	O
if	O
(	O
!	O
val	array(int)
)	O
return	O
;	O
switch	O
(	O
val	array(int)
->	O
type	int
)	O
{	O
case	O
GRECS_TYPE_STRING	int
:	O
grecs_free	(*(void))->(void)
(	O
val	array(int)
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
string	*(char)
)	O
;	O
break	O
;	O
case	O
GRECS_TYPE_LIST	int
:	O
grecs_list_free	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))->(void)
(	O
val	array(int)
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
;	O
break	O
;	O
case	O
GRECS_TYPE_ARRAY	int
:	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
val	array(int)
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
arg	struct(long,*(*(struct(int,struct(struct`,struct`)))))
.	O
c	long
;	O
i	int
++	O
)	O
grecs_value_free	(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))))->(void)
(	O
val	array(int)
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
arg	struct(long,*(*(struct(int,struct(struct`,struct`)))))
.	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
[	O
i	int
]	O
)	O
;	O
free	(*(void))->(void)
(	O
val	array(int)
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
arg	struct(long,*(*(struct(int,struct(struct`,struct`)))))
.	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
)	O
;	O
}	O
}	O
void	O
grecs_value_free	(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))))->(void)
(	O
struct	O
grecs_value	struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(char),struct(long,*(*(struct(int,struct`,union`))))))
*	O
val	array(int)
)	O
{	O
grecs_value_free_content	(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))))->(void)
(	O
val	array(int)
)	O
;	O
grecs_free	(*(void))->(void)
(	O
val	array(int)
)	O
;	O
}	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
grecs_node_create	(enum(int,int,int),*(struct(struct(*(char),int,int),struct(*(char),int,int))))->(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))))
(	O
enum	O
grecs_node_type	enum(int,int,int)
type	int
,	O
grecs_locus_t	struct(struct(*(char),int,int),struct(*(char),int,int))
*	O
loc	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
)	O
{	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
np	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
=	O
grecs_zalloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
np	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
)	O
)	O
;	O
np	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
type	int
=	O
type	int
;	O
if	O
(	O
loc	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
)	O
np	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
=	O
*	O
loc	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
;	O
return	O
np	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
;	O
}	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
grecs_node_create_points	(enum(int,int,int),struct(*(char),int,int),struct(*(char),int,int))->(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))))
(	O
enum	O
grecs_node_type	enum(int,int,int)
type	int
,	O
struct	O
grecs_locus_point	struct(*(char),int,int)
beg	struct(*(char),int,int)
,	O
struct	O
grecs_locus_point	struct(*(char),int,int)
end	struct(*(char),int,int)
)	O
{	O
grecs_locus_t	struct(struct(*(char),int,int),struct(*(char),int,int))
loc	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
;	O
loc	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
.	O
beg	struct(*(char),int,int)
=	O
beg	struct(*(char),int,int)
;	O
loc	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
.	O
end	struct(*(char),int,int)
=	O
end	struct(*(char),int,int)
;	O
return	O
grecs_node_create	(enum(int,int,int),*(struct(struct(*(char),int,int),struct(*(char),int,int))))->(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))))
(	O
type	int
,	O
&	O
loc	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
)	O
;	O
}	O
void	O
grecs_node_bind	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),int)->(void)
(	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
master	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
,	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
,	O
int	O
dn	int
)	O
{	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
np	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
;	O
if	O
(	O
!	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
)	O
return	O
;	O
if	O
(	O
dn	int
)	O
{	O
if	O
(	O
!	O
master	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
down	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
)	O
{	O
master	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
down	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
=	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
;	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
NULL	O
;	O
}	O
else	O
{	O
for	O
(	O
np	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
=	O
master	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
down	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
;	O
np	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
np	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
=	O
np	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
;	O
np	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
;	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
np	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
;	O
}	O
for	O
(	O
;	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
;	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
=	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
up	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
=	O
master	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
;	O
}	O
else	O
{	O
if	O
(	O
!	O
master	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
{	O
master	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
;	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
master	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
;	O
}	O
else	O
{	O
for	O
(	O
np	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
=	O
master	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
np	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
np	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
=	O
np	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
;	O
np	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
;	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
np	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
;	O
}	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
up	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
=	O
master	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
up	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
;	O
}	O
}	O
int	O
grecs_node_unlink	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))))->(int)
(	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
)	O
{	O
if	O
(	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
else	O
if	O
(	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
up	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
)	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
up	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
down	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
=	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
else	O
return	O
1	int
;	O
if	O
(	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
up	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
=	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
listel_dispose	(*(void))->(void)
(	O
void	O
*	O
el	*(void)
)	O
{	O
grecs_free	(*(void))->(void)
(	O
el	*(void)
)	O
;	O
}	O
struct	O
grecs_list	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))
*	O
_grecs_simple_list_create	(int)->(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))
(	O
int	O
dispose	int
)	O
{	O
struct	O
grecs_list	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))
*	O
lp	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
=	O
grecs_list_create	()->(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))
(	O
)	O
;	O
if	O
(	O
dispose	int
)	O
lp	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
->	O
free_entry	*((*(void))->(void))
=	O
listel_dispose	(*(void))->(void)
;	O
return	O
lp	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
;	O
}	O
static	O
enum	O
grecs_tree_recurse_res	enum(int,int,int,int)
_tree_recurse	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*((enum(int,int,int),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(void))->(enum(int,int,int,int))),*(void))->(enum(int,int,int,int))
(	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
,	O
grecs_tree_recursor_t	*((enum(int,int,int),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(void))->(enum(int,int,int,int)))
recfun	*((enum(int,int,int),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(void))->(enum(int,int,int,int)))
,	O
void	O
*	O
data	*(void)
)	O
{	O
enum	O
grecs_tree_recurse_res	enum(int,int,int,int)
res	enum(int,int,int,int)
;	O
while	O
(	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
)	O
{	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
if	O
(	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
type	int
==	O
grecs_node_stmt	int
)	O
{	O
res	enum(int,int,int,int)
=	O
recfun	*((enum(int,int,int),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(void))->(enum(int,int,int,int)))
(	O
grecs_tree_recurse_set	int
,	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
,	O
data	*(void)
)	O
;	O
CKRES	O
(	O
)	O
;	O
}	O
else	O
{	O
switch	O
(	O
recfun	*((enum(int,int,int),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(void))->(enum(int,int,int,int)))
(	O
grecs_tree_recurse_pre	int
,	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
,	O
data	*(void)
)	O
)	O
{	O
case	O
grecs_tree_recurse_ok	int
:	O
res	enum(int,int,int,int)
=	O
_tree_recurse	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*((enum(int,int,int),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(void))->(enum(int,int,int,int))),*(void))->(enum(int,int,int,int))
(	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
down	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
,	O
recfun	*((enum(int,int,int),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(void))->(enum(int,int,int,int)))
,	O
data	*(void)
)	O
;	O
CKRES	O
(	O
)	O
;	O
res	enum(int,int,int,int)
=	O
recfun	*((enum(int,int,int),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(void))->(enum(int,int,int,int)))
(	O
grecs_tree_recurse_post	int
,	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
,	O
data	*(void)
)	O
;	O
CKRES	O
(	O
)	O
;	O
break	O
;	O
case	O
grecs_tree_recurse_fail	int
:	O
return	O
grecs_tree_recurse_fail	int
;	O
case	O
grecs_tree_recurse_stop	int
:	O
return	O
grecs_tree_recurse_stop	int
;	O
case	O
grecs_tree_recurse_skip	int
:	O
break	O
;	O
}	O
}	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
=	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
}	O
return	O
grecs_tree_recurse_ok	int
;	O
}	O
int	O
grecs_tree_recurse	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*((enum(int,int,int),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(void))->(enum(int,int,int,int))),*(void))->(int)
(	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
,	O
grecs_tree_recursor_t	*((enum(int,int,int),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(void))->(enum(int,int,int,int)))
recfun	*((enum(int,int,int),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(void))->(enum(int,int,int,int)))
,	O
void	O
*	O
data	*(void)
)	O
{	O
switch	O
(	O
_tree_recurse	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*((enum(int,int,int),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(void))->(enum(int,int,int,int))),*(void))->(enum(int,int,int,int))
(	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
,	O
recfun	*((enum(int,int,int),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(void))->(enum(int,int,int,int)))
,	O
data	*(void)
)	O
)	O
{	O
case	O
grecs_tree_recurse_ok	int
:	O
case	O
grecs_tree_recurse_stop	int
:	O
return	O
0	int
;	O
default	O
:	O
break	O
;	O
}	O
return	O
1	int
;	O
}	O
void	O
grecs_node_free	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))))->(void)
(	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
)	O
{	O
if	O
(	O
!	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
)	O
return	O
;	O
switch	O
(	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
type	int
)	O
{	O
case	O
grecs_node_root	int
:	O
grecs_symtab_free	(*(struct))->(void)
(	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
texttab	*(struct)
)	O
;	O
break	O
;	O
default	O
:	O
grecs_value_free	(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))))->(void)
(	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
)	O
;	O
}	O
grecs_free	(*(void))->(void)
(	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
ident	*(char)
)	O
;	O
grecs_free	(*(void))->(void)
(	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
)	O
;	O
}	O
static	O
enum	O
grecs_tree_recurse_res	enum(int,int,int,int)
freeproc	(enum(int,int,int),*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*(void))->(enum(int,int,int,int))
(	O
enum	O
grecs_tree_recurse_op	enum(int,int,int)
op	enum(int,int,int)
,	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
,	O
void	O
*	O
data	*(void)
)	O
{	O
switch	O
(	O
op	enum(int,int,int)
)	O
{	O
case	O
grecs_tree_recurse_set	int
:	O
case	O
grecs_tree_recurse_post	int
:	O
grecs_node_unlink	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))))->(int)
(	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
)	O
;	O
grecs_node_free	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))))->(void)
(	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
)	O
;	O
break	O
;	O
case	O
grecs_tree_recurse_pre	int
:	O
break	O
;	O
}	O
return	O
grecs_tree_recurse_ok	int
;	O
}	O
int	O
grecs_tree_free	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))))->(int)
(	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
)	O
{	O
if	O
(	O
!	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
)	O
return	O
0	int
;	O
if	O
(	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
type	int
!=	O
grecs_node_root	int
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
1	int
;	O
}	O
grecs_tree_recurse	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*((enum(int,int,int),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(void))->(enum(int,int,int,int))),*(void))->(int)
(	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
,	O
freeproc	(enum(int,int,int),*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*(void))->(enum(int,int,int,int))
,	O
NULL	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
fake_callback	(enum(int,int,int),*(struct(struct(*(char),int,int),struct(*(char),int,int))),*(void),*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(void))->(int)
(	O
enum	O
grecs_callback_command	enum(int,int,int)
cmd	enum(int,int,int)
,	O
grecs_locus_t	struct(struct(*(char),int,int),struct(*(char),int,int))
*	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
void	O
*	O
varptr	*(void)
,	O
grecs_value_t	struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(char),struct(long,*(*(struct`)))))
*	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
,	O
void	O
*	O
cb_data	*(void)
)	O
{	O
return	O
0	int
;	O
}	O
static	O
struct	O
grecs_keyword	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct(*`,int,int),struct(*`,int,int))),*(void),*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))))))
fake	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct`,struct`)),*(void),*(struct(int,struct`,union`)),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))))
=	O
{	O
"*"	*(char)
,	O
NULL	O
,	O
NULL	O
,	O
grecs_type_void	int
,	O
GRECS_DFLT	int
,	O
NULL	O
,	O
0	int
,	O
fake_callback	(enum(int,int,int),*(struct(struct(*(char),int,int),struct(*(char),int,int))),*(void),*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(void))->(int)
,	O
NULL	O
,	O
&	O
fake	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct`,struct`)),*(void),*(struct(int,struct`,union`)),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))))
}	O
;	O
static	O
struct	O
grecs_keyword	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct(*`,int,int),struct(*`,int,int))),*(void),*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))))))
*	O
find_keyword	(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))),*(char))->(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))))
(	O
struct	O
grecs_keyword	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct(*`,int,int),struct(*`,int,int))),*(void),*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))))))
*	O
cursect	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
,	O
const	O
char	O
*	O
ident	*(char)
)	O
{	O
struct	O
grecs_keyword	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct(*`,int,int),struct(*`,int,int))),*(void),*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))))))
*	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
;	O
if	O
(	O
cursect	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
&&	O
cursect	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
kwd	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
&&	O
cursect	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
!=	O
&	O
fake	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct`,struct`)),*(void),*(struct(int,struct`,union`)),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))))
)	O
{	O
for	O
(	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
=	O
cursect	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
kwd	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
;	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
ident	*(char)
;	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
++	O
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
ident	*(char)
,	O
ident	*(char)
)	O
==	O
0	int
)	O
return	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
;	O
}	O
else	O
{	O
return	O
&	O
fake	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct`,struct`)),*(void),*(struct(int,struct`,union`)),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))))
;	O
}	O
return	O
NULL	O
;	O
}	O
static	O
void	O
*	O
target_ptr	(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))),*(char))->(*(void))
(	O
struct	O
grecs_keyword	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct(*`,int,int),struct(*`,int,int))),*(void),*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))))))
*	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
,	O
char	O
*	O
base	*(void)
)	O
{	O
if	O
(	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
varptr	*(void)
)	O
base	*(void)
=	O
(	O
char	O
*	O
)	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
varptr	*(void)
+	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
offset	long
;	O
else	O
if	O
(	O
base	*(void)
)	O
base	*(void)
+=	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
offset	long
;	O
return	O
base	*(void)
;	O
}	O
static	O
int	O
string_to_bool	(*(char),*(int),*(struct(struct(*(char),int,int),struct(*(char),int,int))))->(int)
(	O
const	O
char	O
*	O
string	*(char)
,	O
int	O
*	O
pval	*(int)
,	O
grecs_locus_t	struct(struct(*(char),int,int),struct(*(char),int,int))
const	O
*	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
string	*(char)
,	O
"yes"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
string	*(char)
,	O
"true"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
string	*(char)
,	O
"t"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
string	*(char)
,	O
"1"	*(char)
)	O
==	O
0	int
)	O
*	O
pval	*(int)
=	O
1	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
string	*(char)
,	O
"no"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
string	*(char)
,	O
"false"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
string	*(char)
,	O
"nil"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
string	*(char)
,	O
"0"	*(char)
)	O
==	O
0	int
)	O
*	O
pval	*(int)
=	O
0	int
;	O
else	O
{	O
grecs_error	(*(struct(struct(*(char),int,int),struct(*(char),int,int))),int,*(char))->(void)
(	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
0	int
,	O
_	O
(	O
"%s: not a valid boolean value"	*(char)
)	O
,	O
string	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
string_to_host	(*(struct(int)),*(char),*(struct(struct(*(char),int,int),struct(*(char),int,int))))->(int)
(	O
struct	O
in_addr	struct(int)
*	O
in	*(struct(int))
,	O
const	O
char	O
*	O
string	*(char)
,	O
grecs_locus_t	struct(struct(*(char),int,int),struct(*(char),int,int))
const	O
*	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
)	O
{	O
if	O
(	O
inet_aton	(*(char),*(struct(int)))->(int)
(	O
string	*(char)
,	O
in	*(struct(int))
)	O
==	O
0	int
)	O
{	O
struct	O
hostent	struct(*(char),*(*(char)),int,int,*(*(char)))
*	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
;	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
=	O
gethostbyname	(*(char))->(*(struct(*(char),*(*(char)),int,int,*(*(char)))))
(	O
string	*(char)
)	O
;	O
if	O
(	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
==	O
NULL	O
)	O
return	O
1	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
in	*(struct(int))
,	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_addr	O
,	O
sizeof	O
(	O
struct	O
in_addr	struct(int)
)	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
grecs_string_convert	(*(void),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(struct(*(char),int,int),struct(*(char),int,int))))->(int)
(	O
void	O
*	O
target	*(void)
,	O
enum	O
grecs_data_type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
type	int
,	O
const	O
char	O
*	O
string	*(char)
,	O
grecs_locus_t	struct(struct(*(char),int,int),struct(*(char),int,int))
const	O
*	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
)	O
{	O
switch	O
(	O
type	int
)	O
{	O
case	O
grecs_type_void	int
:	O
abort	()->(void)
(	O
)	O
;	O
case	O
grecs_type_null	int
:	O
break	O
;	O
case	O
grecs_type_string	int
:	O
*	O
(	O
char	O
*	O
*	O
)	O
target	*(void)
=	O
grecs_strdup	(*(char))->(*(char))
(	O
string	*(char)
)	O
;	O
break	O
;	O
case	O
grecs_type_short	int
:	O
GETUNUM	O
(	O
string	*(char)
,	O
short	O
,	O
*	O
(	O
short	O
*	O
)	O
target	*(void)
,	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
)	O
;	O
break	O
;	O
case	O
grecs_type_ushort	int
:	O
GETUNUM	O
(	O
string	*(char)
,	O
unsigned	O
short	O
,	O
*	O
(	O
unsigned	O
short	O
*	O
)	O
target	*(void)
,	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
)	O
;	O
break	O
;	O
case	O
grecs_type_bool	int
:	O
return	O
string_to_bool	(*(char),*(int),*(struct(struct(*(char),int,int),struct(*(char),int,int))))->(int)
(	O
string	*(char)
,	O
(	O
int	O
*	O
)	O
target	*(void)
,	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
)	O
;	O
case	O
grecs_type_int	int
:	O
GETSNUM	O
(	O
string	*(char)
,	O
int	O
,	O
*	O
(	O
int	O
*	O
)	O
target	*(void)
,	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
)	O
;	O
break	O
;	O
case	O
grecs_type_uint	int
:	O
GETUNUM	O
(	O
string	*(char)
,	O
unsigned	O
int	O
,	O
*	O
(	O
unsigned	O
int	O
*	O
)	O
target	*(void)
,	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
)	O
;	O
break	O
;	O
case	O
grecs_type_long	int
:	O
GETSNUM	O
(	O
string	*(char)
,	O
long	O
,	O
*	O
(	O
long	O
*	O
)	O
target	*(void)
,	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
)	O
;	O
break	O
;	O
case	O
grecs_type_ulong	int
:	O
GETUNUM	O
(	O
string	*(char)
,	O
unsigned	O
long	O
,	O
*	O
(	O
unsigned	O
long	O
*	O
)	O
target	*(void)
,	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
)	O
;	O
break	O
;	O
case	O
grecs_type_size	int
:	O
GETUNUM	O
(	O
string	*(char)
,	O
size_t	long
,	O
*	O
(	O
size_t	long
*	O
)	O
target	*(void)
,	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
)	O
;	O
break	O
;	O
case	O
grecs_type_time	int
:	O
GETUNUM	O
(	O
string	*(char)
,	O
time_t	long
,	O
*	O
(	O
time_t	long
*	O
)	O
target	*(void)
,	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
)	O
;	O
break	O
;	O
case	O
grecs_type_ipv4	int
:	O
if	O
(	O
inet_aton	(*(char),*(struct(int)))->(int)
(	O
string	*(char)
,	O
(	O
struct	O
in_addr	struct(int)
*	O
)	O
target	*(void)
)	O
)	O
{	O
grecs_error	(*(struct(struct(*(char),int,int),struct(*(char),int,int))),int,*(char))->(void)
(	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
0	int
,	O
_	O
(	O
"%s: not a valid IP address"	*(char)
)	O
,	O
string	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
break	O
;	O
case	O
grecs_type_host	int
:	O
if	O
(	O
string_to_host	(*(struct(int)),*(char),*(struct(struct(*(char),int,int),struct(*(char),int,int))))->(int)
(	O
(	O
struct	O
in_addr	struct(int)
*	O
)	O
target	*(void)
,	O
string	*(char)
,	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
)	O
)	O
{	O
grecs_error	(*(struct(struct(*(char),int,int),struct(*(char),int,int))),int,*(char))->(void)
(	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
0	int
,	O
_	O
(	O
"%s: not a valid IP address or hostname"	*(char)
)	O
,	O
string	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
break	O
;	O
case	O
grecs_type_sockaddr	int
:	O
return	O
grecs_str_to_sockaddr	(*(*(struct(*(struct`),*(char),int,*(struct`)))),*(char),*(struct(int,*(char),short)),*(struct(struct(*(char),int,int),struct(*(char),int,int))))->(int)
(	O
(	O
struct	O
grecs_sockaddr	struct(*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct(short,array(char))))),*(char),int,*(struct(short,array(char))))
*	O
*	O
)	O
target	*(void)
,	O
string	*(char)
,	O
grecs_sockaddr_hints	struct(int,*(char),short)
,	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
)	O
;	O
case	O
grecs_type_cidr	int
:	O
return	O
grecs_str_to_cidr	(*(struct(int,int,array(char),array(char))),*(char),*(struct(struct(*(char),int,int),struct(*(char),int,int))))->(int)
(	O
(	O
struct	O
grecs_cidr	struct(int,int,array(char),array(char))
*	O
)	O
target	*(void)
,	O
string	*(char)
,	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
)	O
;	O
case	O
grecs_type_section	int
:	O
grecs_error	(*(struct(struct(*(char),int,int),struct(*(char),int,int))),int,*(char))->(void)
(	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
0	int
,	O
_	O
(	O
"invalid use of block statement"	*(char)
)	O
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
struct	O
grecs_prop	struct(long,*((*(void),*(void))->(int)))
{	O
size_t	long
size	*(long)
;	O
int	O
(	O
*	O
cmp	*((*(void),*(void))->(int))
)	O
(	O
const	O
void	O
*	O
,	O
const	O
void	O
*	O
)	O
;	O
}	O
;	O
static	O
int	O
string_cmp	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
elt1	*(void)
,	O
const	O
void	O
*	O
elt2	*(void)
)	O
{	O
return	O
strcmp	(*(char),*(char))->(int)
(	O
(	O
const	O
char	O
*	O
)	O
elt1	*(void)
,	O
(	O
const	O
char	O
*	O
)	O
elt2	*(void)
)	O
;	O
}	O
DECL_NUMCMP	O
(	O
short	O
)	O
DECL_NUMCMP	O
(	O
int	O
)	O
DECL_NUMCMP	O
(	O
long	O
)	O
DECL_NUMCMP	O
(	O
size_t	long
)	O
DECL_NUMCMP	O
(	O
time_t	long
)	O
__DECL_NUMCMP	O
(	O
in_addr	struct(int)
,	O
struct	O
in_addr	struct(int)
)	O
__DECL_NUMCMP	O
(	O
grecs_sockaddr	struct(*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct(short,array(char))))),*(char),int,*(struct(short,array(char))))
,	O
struct	O
grecs_sockaddr	struct(*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct(short,array(char))))),*(char),int,*(struct(short,array(char))))
)	O
static	O
int	O
cidr_cmp	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
elt1	*(void)
,	O
const	O
void	O
*	O
elt2	*(void)
)	O
{	O
struct	O
grecs_cidr	struct(int,int,array(char),array(char))
const	O
*	O
cp1	*(struct(int,int,array(char),array(char)))
=	O
elt1	*(void)
,	O
*	O
cp2	*(struct(int,int,array(char),array(char)))
=	O
elt2	*(void)
;	O
return	O
!	O
(	O
cp1	*(struct(int,int,array(char),array(char)))
->	O
family	int
==	O
cp2	*(struct(int,int,array(char),array(char)))
->	O
family	int
&&	O
cp1	*(struct(int,int,array(char),array(char)))
->	O
len	long
==	O
cp2	*(struct(int,int,array(char),array(char)))
->	O
len	long
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
cp1	*(struct(int,int,array(char),array(char)))
->	O
address	array(char)
,	O
cp2	*(struct(int,int,array(char),array(char)))
->	O
address	array(char)
,	O
cp1	*(struct(int,int,array(char),array(char)))
->	O
len	long
)	O
==	O
0	int
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
cp1	*(struct(int,int,array(char),array(char)))
->	O
netmask	array(char)
,	O
cp2	*(struct(int,int,array(char),array(char)))
->	O
netmask	array(char)
,	O
cp1	*(struct(int,int,array(char),array(char)))
->	O
len	long
)	O
==	O
0	int
)	O
;	O
}	O
struct	O
grecs_prop	struct(long,*((*(void),*(void))->(int)))
grecs_prop_tab	array(struct(long,*((*(void),*(void))->(int))))
[	O
]	O
=	O
{	O
{	O
0	int
,	O
NULL	O
}	O
,	O
{	O
sizeof	O
(	O
char	O
*	O
)	O
,	O
string_cmp	(*(void),*(void))->(int)
}	O
,	O
{	O
sizeof	O
(	O
short	O
)	O
,	O
NUMCMP	O
(	O
short	O
)	O
}	O
,	O
{	O
sizeof	O
(	O
unsigned	O
short	O
)	O
,	O
NUMCMP	O
(	O
short	O
)	O
}	O
,	O
{	O
sizeof	O
(	O
int	O
)	O
,	O
NUMCMP	O
(	O
int	O
)	O
}	O
,	O
{	O
sizeof	O
(	O
unsigned	O
int	O
)	O
,	O
NUMCMP	O
(	O
int	O
)	O
}	O
,	O
{	O
sizeof	O
(	O
long	O
)	O
,	O
NUMCMP	O
(	O
long	O
)	O
}	O
,	O
{	O
sizeof	O
(	O
unsigned	O
long	O
)	O
,	O
NUMCMP	O
(	O
long	O
)	O
}	O
,	O
{	O
sizeof	O
(	O
size_t	long
)	O
,	O
NUMCMP	O
(	O
size_t	long
)	O
}	O
,	O
{	O
sizeof	O
(	O
time_t	long
)	O
,	O
NUMCMP	O
(	O
time_t	long
)	O
}	O
,	O
{	O
sizeof	O
(	O
int	O
)	O
,	O
NUMCMP	O
(	O
int	O
)	O
}	O
,	O
{	O
sizeof	O
(	O
struct	O
in_addr	struct(int)
)	O
,	O
NUMCMP	O
(	O
in_addr	struct(int)
)	O
}	O
,	O
{	O
sizeof	O
(	O
struct	O
grecs_cidr	struct(int,int,array(char),array(char))
)	O
,	O
cidr_cmp	(*(void),*(void))->(int)
}	O
,	O
{	O
sizeof	O
(	O
struct	O
in_addr	struct(int)
)	O
,	O
NUMCMP	O
(	O
in_addr	struct(int)
)	O
}	O
,	O
{	O
sizeof	O
(	O
struct	O
grecs_sockaddr	struct(*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct(short,array(char))))),*(char),int,*(struct(short,array(char))))
)	O
,	O
NUMCMP	O
(	O
grecs_sockaddr	struct(*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct(short,array(char))))),*(char),int,*(struct(short,array(char))))
)	O
}	O
,	O
{	O
0	int
,	O
NULL	O
}	O
,	O
{	O
0	int
,	O
NULL	O
}	O
}	O
;	O
void	O
grecs_process_ident	(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))),*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(void),*(struct(struct(*(char),int,int),struct(*(char),int,int))))->(void)
(	O
struct	O
grecs_keyword	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct(*`,int,int),struct(*`,int,int))),*(void),*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))))))
*	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
,	O
grecs_value_t	struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(char),struct(long,*(*(struct`)))))
*	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
,	O
void	O
*	O
base	*(void)
,	O
grecs_locus_t	struct(struct(*(char),int,int),struct(*(char),int,int))
*	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
)	O
{	O
void	O
*	O
target	*(void)
;	O
if	O
(	O
!	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
)	O
return	O
;	O
target	*(void)
=	O
target_ptr	(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))),*(char))->(*(void))
(	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
,	O
(	O
char	O
*	O
)	O
base	*(void)
)	O
;	O
if	O
(	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
callback	*((enum(int,int,int),*(struct(struct(*`,int,int),struct(*`,int,int))),*(void),*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(void))->(int))
)	O
{	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
callback	*((enum(int,int,int),*(struct(struct(*`,int,int),struct(*`,int,int))),*(void),*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(void))->(int))
(	O
grecs_callback_set_value	int
,	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
target	*(void)
,	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
,	O
&	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
callback_data	*(void)
)	O
;	O
}	O
else	O
if	O
(	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
type	int
==	O
grecs_type_void	int
||	O
target	*(void)
==	O
NULL	O
)	O
return	O
;	O
else	O
if	O
(	O
!	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
)	O
{	O
grecs_error	(*(struct(struct(*(char),int,int),struct(*(char),int,int))),int,*(char))->(void)
(	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
0	int
,	O
"%s has no value"	*(char)
,	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
ident	*(char)
)	O
;	O
return	O
;	O
}	O
else	O
if	O
(	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
type	int
==	O
GRECS_TYPE_ARRAY	int
)	O
{	O
grecs_error	(*(struct(struct(*(char),int,int),struct(*(char),int,int))),int,*(char))->(void)
(	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
0	int
,	O
_	O
(	O
"too many arguments to `%s'; missing semicolon?"	*(char)
)	O
,	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
ident	*(char)
)	O
;	O
return	O
;	O
}	O
else	O
if	O
(	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
type	int
==	O
GRECS_TYPE_LIST	int
)	O
{	O
if	O
(	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
flags	int
&	O
GRECS_LIST	int
)	O
{	O
struct	O
grecs_list_entry	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(void))
*	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
enum	O
grecs_data_type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
type	int
=	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
type	int
;	O
int	O
num	int
=	O
1	int
;	O
struct	O
grecs_list	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))
*	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
;	O
size_t	long
size	*(long)
;	O
if	O
(	O
type	int
>=	O
grecs_prop_count	O
||	O
(	O
size	*(long)
=	O
grecs_prop_tab	array(struct(long,*((*(void),*(void))->(int))))
[	O
type	int
]	O
.	O
size	*(long)
)	O
==	O
0	int
)	O
{	O
grecs_error	(*(struct(struct(*(char),int,int),struct(*(char),int,int))),int,*(char))->(void)
(	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
0	int
,	O
_	O
(	O
"INTERNAL ERROR at %s:%d: "	*(char)
"unhandled data type %d"	*(char)
)	O
,	O
__FILE__	O
,	O
__LINE__	O
,	O
type	int
)	O
;	O
abort	()->(void)
(	O
)	O
;	O
}	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
=	O
_grecs_simple_list_create	(int)->(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))
(	O
type	int
==	O
grecs_type_string	int
)	O
;	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
->	O
cmp	*((*(void),*(void))->(int))
=	O
grecs_prop_tab	array(struct(long,*((*(void),*(void))->(int))))
[	O
type	int
]	O
.	O
cmp	*((*(void),*(void))->(int))
;	O
for	O
(	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
->	O
head	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
{	O
const	O
grecs_value_t	struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(char),struct(long,*(*(struct`)))))
*	O
vp	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
=	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
data	*(void)
;	O
if	O
(	O
vp	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
type	int
!=	O
GRECS_TYPE_STRING	int
)	O
grecs_error	(*(struct(struct(*(char),int,int),struct(*(char),int,int))),int,*(char))->(void)
(	O
&	O
vp	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
0	int
,	O
_	O
(	O
"%s: incompatible data type in list item #%d"	*(char)
)	O
,	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
ident	*(char)
,	O
num	int
)	O
;	O
else	O
if	O
(	O
type	int
==	O
grecs_type_string	int
)	O
grecs_list_append	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(void))->(void)
(	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
,	O
grecs_strdup	(*(char))->(*(char))
(	O
vp	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
string	*(char)
)	O
)	O
;	O
else	O
{	O
void	O
*	O
ptr	*(void)
=	O
grecs_malloc	(long)->(*(void))
(	O
size	*(long)
)	O
;	O
if	O
(	O
grecs_string_convert	(*(void),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(struct(*(char),int,int),struct(*(char),int,int))))->(int)
(	O
ptr	*(void)
,	O
type	int
,	O
vp	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
string	*(char)
,	O
&	O
vp	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
)	O
==	O
0	int
)	O
grecs_list_append	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(void))->(void)
(	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
,	O
ptr	*(void)
)	O
;	O
else	O
grecs_free	(*(void))->(void)
(	O
ptr	*(void)
)	O
;	O
}	O
}	O
*	O
(	O
struct	O
grecs_list	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))
*	O
*	O
)	O
target	*(void)
=	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
;	O
}	O
else	O
{	O
grecs_error	(*(struct(struct(*(char),int,int),struct(*(char),int,int))),int,*(char))->(void)
(	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
0	int
,	O
_	O
(	O
"incompatible data type for `%s'"	*(char)
)	O
,	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
ident	*(char)
)	O
;	O
return	O
;	O
}	O
}	O
else	O
if	O
(	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
flags	int
&	O
GRECS_LIST	int
)	O
{	O
struct	O
grecs_list	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))
*	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
;	O
enum	O
grecs_data_type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
type	int
=	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
type	int
;	O
size_t	long
size	*(long)
;	O
void	O
*	O
ptr	*(void)
;	O
if	O
(	O
type	int
>=	O
grecs_prop_count	O
||	O
(	O
size	*(long)
=	O
grecs_prop_tab	array(struct(long,*((*(void),*(void))->(int))))
[	O
type	int
]	O
.	O
size	*(long)
)	O
==	O
0	int
)	O
{	O
grecs_error	(*(struct(struct(*(char),int,int),struct(*(char),int,int))),int,*(char))->(void)
(	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
0	int
,	O
_	O
(	O
"INTERNAL ERROR at %s:%d: unhandled data type %d"	*(char)
)	O
,	O
__FILE__	O
,	O
__LINE__	O
,	O
type	int
)	O
;	O
abort	()->(void)
(	O
)	O
;	O
}	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
=	O
_grecs_simple_list_create	(int)->(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))
(	O
1	int
)	O
;	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
->	O
cmp	*((*(void),*(void))->(int))
=	O
grecs_prop_tab	array(struct(long,*((*(void),*(void))->(int))))
[	O
type	int
]	O
.	O
cmp	*((*(void),*(void))->(int))
;	O
if	O
(	O
type	int
==	O
grecs_type_string	int
)	O
grecs_list_append	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(void))->(void)
(	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
,	O
grecs_strdup	(*(char))->(*(char))
(	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
string	*(char)
)	O
)	O
;	O
else	O
{	O
ptr	*(void)
=	O
grecs_malloc	(long)->(*(void))
(	O
size	*(long)
)	O
;	O
if	O
(	O
grecs_string_convert	(*(void),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(struct(*(char),int,int),struct(*(char),int,int))))->(int)
(	O
ptr	*(void)
,	O
type	int
,	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
string	*(char)
,	O
&	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
)	O
)	O
{	O
grecs_free	(*(void))->(void)
(	O
ptr	*(void)
)	O
;	O
grecs_list_free	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))->(void)
(	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
;	O
return	O
;	O
}	O
grecs_list_append	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(void))->(void)
(	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
,	O
ptr	*(void)
)	O
;	O
}	O
*	O
(	O
struct	O
grecs_list	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))
*	O
*	O
)	O
target	*(void)
=	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
;	O
}	O
else	O
{	O
if	O
(	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
type	int
==	O
grecs_type_string	int
&&	O
!	O
(	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
flags	int
&	O
GRECS_CONST	int
)	O
)	O
free	(*(void))->(void)
(	O
*	O
(	O
char	O
*	O
*	O
)	O
target	*(void)
)	O
;	O
grecs_string_convert	(*(void),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(struct(*(char),int,int),struct(*(char),int,int))))->(int)
(	O
target	*(void)
,	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
type	int
,	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
string	*(char)
,	O
&	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
)	O
;	O
}	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
flags	int
&=	O
~	O
GRECS_CONST	int
;	O
}	O
struct	O
nodeproc_closure	struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))),int)
{	O
struct	O
grecs_keyword	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct(*`,int,int),struct(*`,int,int))),*(void),*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))))))
*	O
cursect	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
;	O
struct	O
grecs_list	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))
*	O
sections	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
;	O
int	O
flags	int
;	O
}	O
;	O
static	O
void	O
stmt_begin	(*(struct(*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)),*(struct(*`,*`,long,*`,*`)),int)),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))),*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))))->(void)
(	O
struct	O
nodeproc_closure	struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))),int)
*	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
,	O
struct	O
grecs_keyword	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct(*`,int,int),struct(*`,int,int))),*(void),*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))))))
*	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
,	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
)	O
{	O
void	O
*	O
target	*(void)
;	O
grecs_list_push	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(void))->(void)
(	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
->	O
sections	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
,	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
->	O
cursect	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
)	O
;	O
if	O
(	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
)	O
{	O
target	*(void)
=	O
target_ptr	(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))),*(char))->(*(void))
(	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
,	O
CURRENT_BASE	O
(	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
)	O
)	O
;	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
->	O
cursect	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
=	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
;	O
if	O
(	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
callback	*((enum(int,int,int),*(struct(struct(*`,int,int),struct(*`,int,int))),*(void),*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(void))->(int))
)	O
{	O
if	O
(	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
callback	*((enum(int,int,int),*(struct(struct(*`,int,int),struct(*`,int,int))),*(void),*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(void))->(int))
(	O
grecs_callback_section_begin	int
,	O
&	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
target	*(void)
,	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
,	O
&	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
callback_data	*(void)
)	O
)	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
->	O
cursect	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
=	O
&	O
fake	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct`,struct`)),*(void),*(struct(int,struct`,union`)),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))))
;	O
}	O
else	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
callback_data	*(void)
=	O
target	*(void)
;	O
}	O
else	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
->	O
cursect	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
=	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
;	O
}	O
static	O
void	O
stmt_end	(*(struct(*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)),*(struct(*`,*`,long,*`,*`)),int)),*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))))->(void)
(	O
struct	O
nodeproc_closure	struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))),int)
*	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
,	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
)	O
{	O
grecs_callback_fn	*((enum(int,int,int),*(struct(struct(*`,int,int),struct(*`,int,int))),*(void),*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(void))->(int))
callback	*((enum(int,int,int),*(struct(struct(*`,int,int),struct(*`,int,int))),*(void),*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(void))->(int))
=	O
NULL	O
;	O
void	O
*	O
dataptr	*(void)
=	O
NULL	O
;	O
struct	O
grecs_keyword	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct(*`,int,int),struct(*`,int,int))),*(void),*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))))))
*	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
=	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
->	O
cursect	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
;	O
if	O
(	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
->	O
cursect	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
&&	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
->	O
cursect	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
callback	*((enum(int,int,int),*(struct(struct(*`,int,int),struct(*`,int,int))),*(void),*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(void))->(int))
)	O
{	O
callback	*((enum(int,int,int),*(struct(struct(*`,int,int),struct(*`,int,int))),*(void),*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(void))->(int))
=	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
->	O
cursect	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
callback	*((enum(int,int,int),*(struct(struct(*`,int,int),struct(*`,int,int))),*(void),*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(void))->(int))
;	O
dataptr	*(void)
=	O
&	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
->	O
cursect	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
callback_data	*(void)
;	O
}	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
->	O
cursect	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
=	O
(	O
struct	O
grecs_keyword	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct(*`,int,int),struct(*`,int,int))),*(void),*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))))))
*	O
)	O
grecs_list_pop	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))->(*(void))
(	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
->	O
sections	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
;	O
if	O
(	O
!	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
->	O
cursect	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
)	O
abort	()->(void)
(	O
)	O
;	O
if	O
(	O
callback	*((enum(int,int,int),*(struct(struct(*`,int,int),struct(*`,int,int))),*(void),*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(void))->(int))
)	O
callback	*((enum(int,int,int),*(struct(struct(*`,int,int),struct(*`,int,int))),*(void),*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(void))->(int))
(	O
grecs_callback_section_end	int
,	O
&	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
?	O
target_ptr	(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))),*(char))->(*(void))
(	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
,	O
CURRENT_BASE	O
(	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
)	O
)	O
:	O
NULL	O
,	O
NULL	O
,	O
dataptr	*(void)
)	O
;	O
if	O
(	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
)	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
callback_data	*(void)
=	O
NULL	O
;	O
}	O
static	O
enum	O
grecs_tree_recurse_res	enum(int,int,int,int)
nodeproc	(enum(int,int,int),*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*(void))->(enum(int,int,int,int))
(	O
enum	O
grecs_tree_recurse_op	enum(int,int,int)
op	enum(int,int,int)
,	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
nodeproc_closure	struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))),int)
*	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
=	O
data	*(void)
;	O
struct	O
grecs_keyword	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct(*`,int,int),struct(*`,int,int))),*(void),*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))))))
*	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
;	O
switch	O
(	O
op	enum(int,int,int)
)	O
{	O
case	O
grecs_tree_recurse_set	int
:	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
=	O
find_keyword	(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))),*(char))->(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))))
(	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
->	O
cursect	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
,	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
ident	*(char)
)	O
;	O
if	O
(	O
!	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
)	O
{	O
grecs_error	(*(struct(struct(*(char),int,int),struct(*(char),int,int))),int,*(char))->(void)
(	O
&	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
idloc	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
0	int
,	O
_	O
(	O
"Unknown keyword"	*(char)
)	O
)	O
;	O
return	O
grecs_tree_recurse_skip	int
;	O
}	O
grecs_process_ident	(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))),*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(void),*(struct(struct(*(char),int,int),struct(*(char),int,int))))->(void)
(	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
,	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
,	O
CURRENT_BASE	O
(	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
)	O
,	O
&	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
idloc	struct(struct(*(char),int,int),struct(*(char),int,int))
)	O
;	O
break	O
;	O
case	O
grecs_tree_recurse_pre	int
:	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
=	O
find_keyword	(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))),*(char))->(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))))
(	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
->	O
cursect	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
,	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
ident	*(char)
)	O
;	O
if	O
(	O
!	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
)	O
{	O
grecs_error	(*(struct(struct(*(char),int,int),struct(*(char),int,int))),int,*(char))->(void)
(	O
&	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
0	int
,	O
_	O
(	O
"Unknown keyword"	*(char)
)	O
)	O
;	O
return	O
grecs_tree_recurse_skip	int
;	O
}	O
stmt_begin	(*(struct(*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)),*(struct(*`,*`,long,*`,*`)),int)),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))),*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))))->(void)
(	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
,	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
,	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
)	O
;	O
break	O
;	O
case	O
grecs_tree_recurse_post	int
:	O
stmt_end	(*(struct(*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)),*(struct(*`,*`,long,*`,*`)),int)),*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))))->(void)
(	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
,	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
)	O
;	O
break	O
;	O
}	O
return	O
grecs_tree_recurse_ok	int
;	O
}	O
int	O
grecs_tree_process	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))))->(int)
(	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
,	O
struct	O
grecs_keyword	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct(*`,int,int),struct(*`,int,int))),*(void),*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))))))
*	O
kwd	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
)	O
{	O
int	O
rc	int
;	O
struct	O
nodeproc_closure	struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))),int)
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
;	O
struct	O
grecs_keyword	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct(*`,int,int),struct(*`,int,int))),*(void),*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))))))
config_keywords	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct`,struct`)),*(void),*(struct(int,struct`,union`)),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))))
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
config_keywords	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct`,struct`)),*(void),*(struct(int,struct`,union`)),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))))
,	O
0	int
,	O
sizeof	O
(	O
config_keywords	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct`,struct`)),*(void),*(struct(int,struct`,union`)),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))))
)	O
)	O
;	O
config_keywords	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct`,struct`)),*(void),*(struct(int,struct`,union`)),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))))
.	O
kwd	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
=	O
kwd	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
;	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
.	O
cursect	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
=	O
&	O
config_keywords	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct`,struct`)),*(void),*(struct(int,struct`,union`)),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))))
;	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
.	O
sections	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
=	O
grecs_list_create	()->(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))
(	O
)	O
;	O
if	O
(	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
type	int
==	O
grecs_node_root	int
)	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
=	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
down	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
;	O
rc	int
=	O
grecs_tree_recurse	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*((enum(int,int,int),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(void))->(enum(int,int,int,int))),*(void))->(int)
(	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
,	O
nodeproc	(enum(int,int,int),*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*(void))->(enum(int,int,int,int))
,	O
&	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
)	O
;	O
grecs_list_free	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))->(void)
(	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
.	O
sections	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
grecs_node_eq	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))))->(int)
(	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
,	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
b	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
)	O
{	O
if	O
(	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
type	int
!=	O
b	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
type	int
)	O
return	O
1	int
;	O
if	O
(	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
type	int
==	O
grecs_node_root	int
)	O
return	O
0	int
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
ident	*(char)
,	O
b	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
ident	*(char)
)	O
)	O
return	O
1	int
;	O
if	O
(	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
type	int
==	O
grecs_node_block	int
&&	O
!	O
grecs_value_eq	(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))))->(int)
(	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
,	O
b	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
)	O
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
void	O
free_value_entry	(*(void))->(void)
(	O
void	O
*	O
ptr	*(void)
)	O
{	O
struct	O
grecs_value	struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(char),struct(long,*(*(struct(int,struct`,union`))))))
*	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
=	O
ptr	*(void)
;	O
grecs_value_free	(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))))->(void)
(	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
)	O
;	O
}	O
struct	O
grecs_list	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))
*	O
grecs_value_list_create	()->(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))
(	O
)	O
{	O
struct	O
grecs_list	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))
*	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
=	O
grecs_list_create	()->(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))
(	O
)	O
;	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
->	O
free_entry	*((*(void))->(void))
=	O
free_value_entry	(*(void))->(void)
;	O
return	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
;	O
}	O
static	O
void	O
value_to_list	(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))))->(void)
(	O
struct	O
grecs_value	struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(char),struct(long,*(*(struct(int,struct`,union`))))))
*	O
val	array(int)
)	O
{	O
struct	O
grecs_list	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))
*	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
;	O
int	O
i	int
;	O
if	O
(	O
val	array(int)
->	O
type	int
==	O
GRECS_TYPE_LIST	int
)	O
return	O
;	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
=	O
grecs_value_list_create	()->(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))
(	O
)	O
;	O
switch	O
(	O
val	array(int)
->	O
type	int
)	O
{	O
case	O
GRECS_TYPE_STRING	int
:	O
grecs_list_append	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(void))->(void)
(	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
,	O
grecs_value_ptr_from_static	(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))))->(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))))
(	O
val	array(int)
)	O
)	O
;	O
break	O
;	O
case	O
GRECS_TYPE_ARRAY	int
:	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
val	array(int)
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
arg	struct(long,*(*(struct(int,struct(struct`,struct`)))))
.	O
c	long
;	O
i	int
++	O
)	O
grecs_list_append	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(void))->(void)
(	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
,	O
val	array(int)
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
arg	struct(long,*(*(struct(int,struct(struct`,struct`)))))
.	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
[	O
i	int
]	O
)	O
;	O
}	O
val	array(int)
->	O
type	int
=	O
GRECS_TYPE_LIST	int
;	O
val	array(int)
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
=	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
;	O
}	O
static	O
void	O
value_to_array	(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))))->(void)
(	O
struct	O
grecs_value	struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(char),struct(long,*(*(struct(int,struct`,union`))))))
*	O
val	array(int)
)	O
{	O
if	O
(	O
val	array(int)
->	O
type	int
==	O
GRECS_TYPE_ARRAY	int
)	O
return	O
;	O
else	O
{	O
struct	O
grecs_value	struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(char),struct(long,*(*(struct(int,struct`,union`))))))
*	O
*	O
vp	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
;	O
vp	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
=	O
grecs_calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
vp	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
)	O
)	O
;	O
vp	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
[	O
0	int
]	O
=	O
grecs_value_ptr_from_static	(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))))->(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))))
(	O
val	array(int)
)	O
;	O
val	array(int)
->	O
type	int
=	O
GRECS_TYPE_ARRAY	int
;	O
val	array(int)
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
arg	struct(long,*(*(struct(int,struct(struct`,struct`)))))
.	O
c	long
=	O
1	int
;	O
val	array(int)
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
arg	struct(long,*(*(struct(int,struct(struct`,struct`)))))
.	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
=	O
vp	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
;	O
}	O
}	O
static	O
void	O
array_add	(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))))->(void)
(	O
struct	O
grecs_value	struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(char),struct(long,*(*(struct(int,struct`,union`))))))
*	O
vx	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
,	O
struct	O
grecs_value	struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(char),struct(long,*(*(struct(int,struct`,union`))))))
*	O
vy	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
)	O
{	O
size_t	long
i	int
;	O
vx	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
arg	struct(long,*(*(struct(int,struct(struct`,struct`)))))
.	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
=	O
grecs_realloc	(*(void),long)->(*(void))
(	O
vx	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
arg	struct(long,*(*(struct(int,struct(struct`,struct`)))))
.	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
,	O
(	O
vx	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
arg	struct(long,*(*(struct(int,struct(struct`,struct`)))))
.	O
c	long
+	O
vy	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
arg	struct(long,*(*(struct(int,struct(struct`,struct`)))))
.	O
c	long
)	O
*	O
sizeof	O
(	O
vx	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
arg	struct(long,*(*(struct(int,struct(struct`,struct`)))))
.	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
[	O
0	int
]	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
vy	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
arg	struct(long,*(*(struct(int,struct(struct`,struct`)))))
.	O
c	long
;	O
i	int
++	O
)	O
vx	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
arg	struct(long,*(*(struct(int,struct(struct`,struct`)))))
.	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
[	O
i	int
+	O
vy	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
arg	struct(long,*(*(struct(int,struct(struct`,struct`)))))
.	O
c	long
]	O
=	O
vy	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
arg	struct(long,*(*(struct(int,struct(struct`,struct`)))))
.	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
[	O
i	int
]	O
;	O
grecs_free	(*(void))->(void)
(	O
vy	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
arg	struct(long,*(*(struct(int,struct(struct`,struct`)))))
.	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
)	O
;	O
vy	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
arg	struct(long,*(*(struct(int,struct(struct`,struct`)))))
.	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
=	O
NULL	O
;	O
vy	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
arg	struct(long,*(*(struct(int,struct(struct`,struct`)))))
.	O
c	long
=	O
0	int
;	O
}	O
static	O
void	O
node_aggregate_stmt	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),int)->(void)
(	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
dst	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
,	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
src	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
,	O
int	O
islist	int
)	O
{	O
if	O
(	O
islist	int
)	O
{	O
struct	O
grecs_list	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))
*	O
t	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
;	O
value_to_list	(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))))->(void)
(	O
dst	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
)	O
;	O
value_to_list	(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))))->(void)
(	O
src	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
)	O
;	O
grecs_list_add	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))->(void)
(	O
src	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
,	O
dst	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
;	O
t	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
=	O
dst	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
;	O
dst	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
=	O
src	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
;	O
src	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
=	O
t	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
;	O
}	O
else	O
{	O
value_to_array	(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))))->(void)
(	O
dst	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
)	O
;	O
value_to_array	(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))))->(void)
(	O
src	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
)	O
;	O
array_add	(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))))->(void)
(	O
dst	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
,	O
src	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
)	O
;	O
}	O
}	O
static	O
void	O
node_merge_stmt	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))),int)->(void)
(	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
to_node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
,	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
from_node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
,	O
struct	O
grecs_keyword	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct(*`,int,int),struct(*`,int,int))),*(void),*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))))))
*	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
,	O
int	O
flags	int
)	O
{	O
if	O
(	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
&&	O
(	O
flags	int
&	O
GRECS_AGGR	int
)	O
^	O
(	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
flags	int
&	O
GRECS_AGGR	int
)	O
&&	O
(	O
(	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
flags	int
&	O
GRECS_LIST	int
)	O
||	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
callback	*((enum(int,int,int),*(struct(struct(*`,int,int),struct(*`,int,int))),*(void),*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(void))->(int))
)	O
)	O
node_aggregate_stmt	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),int)->(void)
(	O
to_node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
,	O
from_node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
,	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
flags	int
&	O
GRECS_LIST	int
)	O
;	O
else	O
{	O
grecs_value_free	(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))))->(void)
(	O
from_node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
)	O
;	O
from_node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
=	O
NULL	O
;	O
}	O
}	O
static	O
void	O
node_merge_block	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))))->(void)
(	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
to_node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
,	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
from_node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
,	O
struct	O
grecs_keyword	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct(*`,int,int),struct(*`,int,int))),*(void),*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))))))
*	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
)	O
{	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
sp	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
;	O
if	O
(	O
!	O
from_node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
down	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
)	O
return	O
;	O
for	O
(	O
sp	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
=	O
from_node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
down	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
;	O
;	O
sp	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
=	O
sp	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
{	O
sp	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
up	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
=	O
to_node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
;	O
if	O
(	O
!	O
sp	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
break	O
;	O
}	O
sp	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
to_node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
down	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
;	O
to_node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
down	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
sp	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
;	O
to_node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
down	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
=	O
from_node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
down	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
;	O
from_node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
down	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
=	O
NULL	O
;	O
}	O
static	O
int	O
node_reduce	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))),int)->(int)
(	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
,	O
struct	O
grecs_keyword	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct(*`,int,int),struct(*`,int,int))),*(void),*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))))))
*	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
,	O
int	O
flags	int
)	O
{	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct(short,array(char)))))
;	O
for	O
(	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct(short,array(char)))))
=	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct(short,array(char)))))
;	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct(short,array(char)))))
=	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct(short,array(char)))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
if	O
(	O
grecs_node_eq	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))))->(int)
(	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct(short,array(char)))))
,	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct(short,array(char)))))
)	O
{	O
switch	O
(	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
type	int
)	O
{	O
case	O
grecs_node_root	int
:	O
return	O
0	int
;	O
case	O
grecs_node_stmt	int
:	O
node_merge_stmt	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))),int)->(void)
(	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct(short,array(char)))))
,	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
,	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
,	O
flags	int
)	O
;	O
break	O
;	O
case	O
grecs_node_block	int
:	O
node_merge_block	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))))->(void)
(	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct(short,array(char)))))
,	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
,	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
)	O
;	O
break	O
;	O
}	O
grecs_node_unlink	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))))->(int)
(	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
)	O
;	O
grecs_node_free	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))))->(void)
(	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
enum	O
grecs_tree_recurse_res	enum(int,int,int,int)
reduceproc	(enum(int,int,int),*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*(void))->(enum(int,int,int,int))
(	O
enum	O
grecs_tree_recurse_op	enum(int,int,int)
op	enum(int,int,int)
,	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
nodeproc_closure	struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))),int)
*	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
=	O
data	*(void)
;	O
if	O
(	O
op	enum(int,int,int)
==	O
grecs_tree_recurse_post	int
)	O
{	O
if	O
(	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
->	O
sections	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
->	O
cursect	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
=	O
(	O
struct	O
grecs_keyword	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct(*`,int,int),struct(*`,int,int))),*(void),*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))))))
*	O
)	O
grecs_list_pop	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))->(*(void))
(	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
->	O
sections	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
;	O
}	O
else	O
{	O
struct	O
grecs_keyword	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct(*`,int,int),struct(*`,int,int))),*(void),*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))))))
*	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
=	O
NULL	O
;	O
if	O
(	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
->	O
cursect	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
)	O
{	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
=	O
find_keyword	(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))),*(char))->(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))))
(	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
->	O
cursect	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
,	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
ident	*(char)
)	O
;	O
if	O
(	O
!	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
)	O
{	O
grecs_error	(*(struct(struct(*(char),int,int),struct(*(char),int,int))),int,*(char))->(void)
(	O
&	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
0	int
,	O
_	O
(	O
"%s: unknown keyword"	*(char)
)	O
,	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
ident	*(char)
)	O
;	O
return	O
grecs_tree_recurse_skip	int
;	O
}	O
if	O
(	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
flags	int
&	O
GRECS_INAC	int
)	O
return	O
grecs_tree_recurse_skip	int
;	O
if	O
(	O
!	O
(	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
->	O
flags	int
&	O
GRECS_MULT	int
)	O
&&	O
node_reduce	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))),int)->(int)
(	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
,	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
,	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
->	O
flags	int
)	O
)	O
return	O
grecs_tree_recurse_skip	int
;	O
if	O
(	O
op	enum(int,int,int)
==	O
grecs_tree_recurse_pre	int
)	O
{	O
grecs_list_push	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(void))->(void)
(	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
->	O
sections	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
,	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
->	O
cursect	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
)	O
;	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
->	O
cursect	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
=	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
;	O
}	O
}	O
else	O
if	O
(	O
node_reduce	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))),int)->(int)
(	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
,	O
kwp	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
,	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
->	O
flags	int
)	O
)	O
return	O
grecs_tree_recurse_skip	int
;	O
}	O
return	O
grecs_tree_recurse_ok	int
;	O
}	O
int	O
grecs_tree_reduce	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))),int)->(int)
(	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
,	O
struct	O
grecs_keyword	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct(*`,int,int),struct(*`,int,int))),*(void),*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))))))
*	O
kwd	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
,	O
int	O
flags	int
)	O
{	O
int	O
rc	int
;	O
struct	O
nodeproc_closure	struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))),int)
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
;	O
struct	O
grecs_keyword	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct(*`,int,int),struct(*`,int,int))),*(void),*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))))))
config_keywords	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct`,struct`)),*(void),*(struct(int,struct`,union`)),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))))
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
config_keywords	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct`,struct`)),*(void),*(struct(int,struct`,union`)),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))))
,	O
0	int
,	O
sizeof	O
(	O
config_keywords	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct`,struct`)),*(void),*(struct(int,struct`,union`)),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))))
)	O
)	O
;	O
config_keywords	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct`,struct`)),*(void),*(struct(int,struct`,union`)),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))))
.	O
kwd	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
=	O
kwd	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
;	O
if	O
(	O
kwd	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
)	O
{	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
.	O
cursect	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
=	O
&	O
config_keywords	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct`,struct`)),*(void),*(struct(int,struct`,union`)),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))))
;	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
.	O
sections	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
=	O
grecs_list_create	()->(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))
(	O
)	O
;	O
}	O
else	O
{	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
.	O
cursect	*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`)))))
=	O
NULL	O
;	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
.	O
sections	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
=	O
NULL	O
;	O
}	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
.	O
flags	int
=	O
flags	int
;	O
rc	int
=	O
grecs_tree_recurse	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*((enum(int,int,int),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(void))->(enum(int,int,int,int))),*(void))->(int)
(	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
down	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
,	O
reduceproc	(enum(int,int,int),*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*(void))->(enum(int,int,int,int))
,	O
&	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
)	O
;	O
grecs_list_free	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))->(void)
(	O
clos	*(struct(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),int))
.	O
sections	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
;	O
return	O
rc	int
;	O
}	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
grecs_tree_first_node	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))))->(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))))
(	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
tree	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
)	O
{	O
if	O
(	O
tree	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
type	int
==	O
grecs_node_root	int
)	O
return	O
tree	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
down	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
;	O
return	O
tree	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
;	O
}	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
grecs_next_node	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))))->(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))))
(	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
)	O
{	O
if	O
(	O
!	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
)	O
return	O
NULL	O
;	O
if	O
(	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
down	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
)	O
return	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
down	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
;	O
while	O
(	O
!	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
{	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
=	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
up	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
;	O
if	O
(	O
!	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
||	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
type	int
==	O
grecs_node_root	int
)	O
return	O
NULL	O
;	O
}	O
return	O
node	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
}	O
