void	O
mpn_nussbaumer_mul	O
(	O
mp_ptr	*(long)
pp	*(long)
,	O
mp_srcptr	*(long)
ap	*(long)
,	O
mp_size_t	long
an	long
,	O
mp_srcptr	*(long)
bp	*(long)
,	O
mp_size_t	long
bn	long
)	O
{	O
mp_size_t	long
rn	long
;	O
mp_ptr	*(long)
tp	*(long)
;	O
TMP_DECL	O
;	O
ASSERT	O
(	O
an	long
>=	O
bn	long
)	O
;	O
ASSERT	O
(	O
bn	long
>	O
0	int
)	O
;	O
TMP_MARK	O
;	O
if	O
(	O
(	O
ap	*(long)
==	O
bp	*(long)
)	O
&&	O
(	O
an	long
==	O
bn	long
)	O
)	O
{	O
rn	long
=	O
mpn_sqrmod_bnm1_next_size	O
(	O
2	int
*	O
an	long
)	O
;	O
tp	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
mpn_sqrmod_bnm1_itch	(long,long)->(long)
(	O
rn	long
,	O
an	long
)	O
)	O
;	O
mpn_sqrmod_bnm1	O
(	O
pp	*(long)
,	O
rn	long
,	O
ap	*(long)
,	O
an	long
,	O
tp	*(long)
)	O
;	O
}	O
else	O
{	O
rn	long
=	O
mpn_mulmod_bnm1_next_size	O
(	O
an	long
+	O
bn	long
)	O
;	O
tp	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
mpn_mulmod_bnm1_itch	(long,long,long)->(long)
(	O
rn	long
,	O
an	long
,	O
bn	long
)	O
)	O
;	O
mpn_mulmod_bnm1	O
(	O
pp	*(long)
,	O
rn	long
,	O
ap	*(long)
,	O
an	long
,	O
bp	*(long)
,	O
bn	long
,	O
tp	*(long)
)	O
;	O
}	O
TMP_FREE	O
;	O
}	O
