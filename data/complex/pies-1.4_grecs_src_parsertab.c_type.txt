static	O
struct	O
parser_tab	struct(*(char),*((*(char),int)->(*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))))))
{	O
const	O
char	O
*	O
name	*(char)
;	O
grecs_parser_t	*((*(char),int)->(*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`)))))
parser	*((*(char),int)->(*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`)))))
;	O
}	O
parser_tab	struct(*(char),*((*(char),int)->(*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))))))
[	O
]	O
=	O
{	O
{	O
"GRECS"	*(char)
,	O
grecs_grecs_parser	(*(char),int)->(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))))
}	O
,	O
{	O
"PATH"	*(char)
,	O
grecs_path_parser	(*(char),int)->(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))))
}	O
,	O
{	O
"META1"	*(char)
,	O
grecs_meta1_parser	(*(char),int)->(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))))
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
int	O
grecs_enumerate_parsers	(*((*(char),*((*`,int)->(*`)),*(void))->(int)),*(void))->(int)
(	O
int	O
(	O
*	O
fun	*((*(void),*(void))->(int))
)	O
(	O
const	O
char	O
*	O
,	O
grecs_parser_t	*((*(char),int)->(*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`)))))
,	O
void	O
*	O
)	O
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
parser_tab	struct(*(char),*((*(char),int)->(*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))))))
*	O
pt	*(struct(*(char),*((*(char),int)->(*(struct`)))))
;	O
int	O
rc	int
=	O
0	int
;	O
for	O
(	O
pt	*(struct(*(char),*((*(char),int)->(*(struct`)))))
=	O
parser_tab	struct(*(char),*((*(char),int)->(*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))))))
;	O
rc	int
==	O
0	int
&&	O
pt	*(struct(*(char),*((*(char),int)->(*(struct`)))))
->	O
name	*(char)
;	O
pt	*(struct(*(char),*((*(char),int)->(*(struct`)))))
++	O
)	O
rc	int
=	O
fun	*((*(void),*(void))->(int))
(	O
pt	*(struct(*(char),*((*(char),int)->(*(struct`)))))
->	O
name	*(char)
,	O
pt	*(struct(*(char),*((*(char),int)->(*(struct`)))))
->	O
parser	*((*(char),int)->(*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`)))))
,	O
data	*(void)
)	O
;	O
return	O
rc	int
;	O
}	O
grecs_parser_t	*((*(char),int)->(*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`)))))
grecs_get_parser_by_type	(*(char))->(*((*(char),int)->(*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)))))
(	O
const	O
char	O
*	O
type	int
)	O
{	O
struct	O
parser_tab	struct(*(char),*((*(char),int)->(*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))))))
*	O
pt	*(struct(*(char),*((*(char),int)->(*(struct`)))))
;	O
for	O
(	O
pt	*(struct(*(char),*((*(char),int)->(*(struct`)))))
=	O
parser_tab	struct(*(char),*((*(char),int)->(*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))))))
;	O
pt	*(struct(*(char),*((*(char),int)->(*(struct`)))))
->	O
name	*(char)
;	O
pt	*(struct(*(char),*((*(char),int)->(*(struct`)))))
++	O
)	O
{	O
if	O
(	O
strcasecmp	(*(char),*(char))->(int)
(	O
pt	*(struct(*(char),*((*(char),int)->(*(struct`)))))
->	O
name	*(char)
,	O
type	int
)	O
==	O
0	int
)	O
return	O
pt	*(struct(*(char),*((*(char),int)->(*(struct`)))))
->	O
parser	*((*(char),int)->(*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`)))))
;	O
}	O
return	O
NULL	O
;	O
}	O
