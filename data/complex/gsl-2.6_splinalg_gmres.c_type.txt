typedef	O
struct	O
{	O
size_t	long
n	int
;	O
size_t	long
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
tau	double
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
y	double
;	O
double	O
*	O
c	*(float)
;	O
double	O
*	O
s	*(float)
;	O
double	O
normr	O
;	O
}	O
gmres_state_t	O
;	O
static	O
void	O
gmres_free	O
(	O
void	O
*	O
vstate	O
)	O
;	O
static	O
int	O
gmres_iterate	O
(	O
const	O
gsl_spmatrix	O
*	O
A	*(float)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
b	double
,	O
const	O
double	O
tol	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
void	O
*	O
vstate	O
)	O
;	O
static	O
void	O
*	O
gmres_alloc	O
(	O
const	O
size_t	long
n	int
,	O
const	O
size_t	long
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
gmres_state_t	O
*	O
state	*(int)
;	O
if	O
(	O
n	int
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"matrix dimension n must be a positive integer"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
state	*(int)
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
gmres_state_t	O
)	O
)	O
;	O
if	O
(	O
!	O
state	*(int)
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate gmres state"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
n	int
=	O
n	int
;	O
if	O
(	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
==	O
0	int
)	O
state	*(int)
->	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
GSL_MIN	O
(	O
n	int
,	O
10	int
)	O
;	O
else	O
state	*(int)
->	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
GSL_MIN	O
(	O
n	int
,	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
state	*(int)
->	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
!	O
state	*(int)
->	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
gmres_free	O
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate r vector"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_alloc	(long,long)->(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
,	O
state	*(int)
->	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
+	O
1	int
)	O
;	O
if	O
(	O
!	O
state	*(int)
->	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
gmres_free	O
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate H matrix"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
tau	double
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
state	*(int)
->	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
+	O
1	int
)	O
;	O
if	O
(	O
!	O
state	*(int)
->	O
tau	double
)	O
{	O
gmres_free	O
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate tau vector"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
y	double
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
state	*(int)
->	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
+	O
1	int
)	O
;	O
if	O
(	O
!	O
state	*(int)
->	O
y	double
)	O
{	O
gmres_free	O
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate y vector"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
c	*(float)
=	O
malloc	(long)->(*(void))
(	O
state	*(int)
->	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
state	*(int)
->	O
s	*(float)
=	O
malloc	(long)->(*(void))
(	O
state	*(int)
->	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
!	O
state	*(int)
->	O
c	*(float)
||	O
!	O
state	*(int)
->	O
s	*(float)
)	O
{	O
gmres_free	O
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate Givens vectors"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
normr	O
=	O
0.0	int
;	O
return	O
state	*(int)
;	O
}	O
static	O
void	O
gmres_free	O
(	O
void	O
*	O
vstate	O
)	O
{	O
gmres_state_t	O
*	O
state	*(int)
=	O
(	O
gmres_state_t	O
*	O
)	O
vstate	O
;	O
if	O
(	O
state	*(int)
->	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
tau	double
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
tau	double
)	O
;	O
if	O
(	O
state	*(int)
->	O
y	double
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
y	double
)	O
;	O
if	O
(	O
state	*(int)
->	O
c	*(float)
)	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
c	*(float)
)	O
;	O
if	O
(	O
state	*(int)
->	O
s	*(float)
)	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
s	*(float)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
}	O
static	O
int	O
gmres_iterate	O
(	O
const	O
gsl_spmatrix	O
*	O
A	*(float)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
b	double
,	O
const	O
double	O
tol	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
void	O
*	O
vstate	O
)	O
{	O
const	O
size_t	long
N	int
=	O
A	*(float)
->	O
size1	long
;	O
gmres_state_t	O
*	O
state	*(int)
=	O
(	O
gmres_state_t	O
*	O
)	O
vstate	O
;	O
if	O
(	O
N	int
!=	O
A	*(float)
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
b	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix does not match right hand side"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix does not match solution vector"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
state	*(int)
->	O
n	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix does not match workspace"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	O
=	O
GSL_SUCCESS	int
;	O
const	O
size_t	long
maxit	O
=	O
state	*(int)
->	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
;	O
const	O
double	O
normb	O
=	O
gsl_blas_dnrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
b	double
)	O
;	O
const	O
double	O
reltol	O
=	O
tol	double
*	O
normb	O
;	O
double	O
normr	O
;	O
size_t	long
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
,	O
k	long
;	O
double	O
tau	double
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
state	*(int)
->	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
state	*(int)
->	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
state	*(int)
->	O
y	double
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
Rm	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
ym	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
h0	O
=	O
gsl_matrix_column	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
)	O
;	O
gsl_matrix_set_zero	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
b	double
)	O
;	O
gsl_spblas_dgemv	O
(	O
CblasNoTrans	int
,	O
-	O
1.0	int
,	O
A	*(float)
,	O
x	double
,	O
1.0	int
,	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
h0	O
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
tau	double
=	O
gsl_linalg_householder_transform	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
&	O
h0	O
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
state	*(int)
->	O
tau	double
,	O
0	int
,	O
tau	double
)	O
;	O
gsl_vector_set_zero	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
0	int
,	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
&	O
h0	O
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
0	int
)	O
)	O
;	O
for	O
(	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
1	int
;	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
<=	O
maxit	O
;	O
++	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
size_t	long
j	long
=	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
-	O
1	int
;	O
double	O
c	*(float)
,	O
s	*(float)
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
vm	O
=	O
gsl_matrix_column	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
vv	O
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
vm	O
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
j	long
,	O
N	int
-	O
j	long
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
um	O
=	O
gsl_matrix_subcolumn	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
j	long
,	O
j	long
,	O
N	int
-	O
j	long
)	O
;	O
gsl_vector_set_zero	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
&	O
vm	O
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
vv	O
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
um	O
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
tau	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
state	*(int)
->	O
tau	double
,	O
j	long
)	O
;	O
gsl_vector_scale	(*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(int)
(	O
&	O
vv	O
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
-	O
tau	double
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
&	O
vv	O
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
0	int
,	O
1.0	int
-	O
tau	double
)	O
;	O
for	O
(	O
k	long
=	O
j	long
;	O
k	long
>	O
0	int
&&	O
k	long
--	O
;	O
)	O
{	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
uk	O
=	O
gsl_matrix_subcolumn	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
k	long
,	O
k	long
,	O
N	int
-	O
k	long
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
vk	O
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
vm	O
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
k	long
,	O
N	int
-	O
k	long
)	O
;	O
tau	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
state	*(int)
->	O
tau	double
,	O
k	long
)	O
;	O
gsl_linalg_householder_hv	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
tau	double
,	O
&	O
uk	O
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
vk	O
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
gsl_spblas_dgemv	O
(	O
CblasNoTrans	int
,	O
1.0	int
,	O
A	*(float)
,	O
&	O
vm	O
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
0.0	int
,	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
vm	O
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<=	O
j	long
;	O
++	O
k	long
)	O
{	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
uk	O
=	O
gsl_matrix_subcolumn	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
k	long
,	O
k	long
,	O
N	int
-	O
k	long
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
vk	O
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
vm	O
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
k	long
,	O
N	int
-	O
k	long
)	O
;	O
tau	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
state	*(int)
->	O
tau	double
,	O
k	long
)	O
;	O
gsl_linalg_householder_hv	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
tau	double
,	O
&	O
uk	O
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
vk	O
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
if	O
(	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
<	O
N	int
)	O
{	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
ump1	O
=	O
gsl_matrix_subcolumn	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
,	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
,	O
N	int
-	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
tau	double
=	O
gsl_linalg_householder_transform	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
&	O
ump1	O
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
state	*(int)
->	O
tau	double
,	O
j	long
+	O
1	int
,	O
tau	double
)	O
;	O
}	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
j	long
;	O
++	O
k	long
)	O
{	O
gsl_linalg_givens_gv	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long,double,double)->(void)
(	O
&	O
vm	O
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
k	long
,	O
k	long
+	O
1	int
,	O
state	*(int)
->	O
c	*(float)
[	O
k	long
]	O
,	O
state	*(int)
->	O
s	*(float)
[	O
k	long
]	O
)	O
;	O
}	O
if	O
(	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
<	O
N	int
)	O
{	O
gsl_linalg_givens	(double,double,*(double),*(double))->(void)
(	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
&	O
vm	O
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
j	long
)	O
,	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
&	O
vm	O
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
j	long
+	O
1	int
)	O
,	O
&	O
c	*(float)
,	O
&	O
s	*(float)
)	O
;	O
state	*(int)
->	O
c	*(float)
[	O
j	long
]	O
=	O
c	*(float)
;	O
state	*(int)
->	O
s	*(float)
[	O
j	long
]	O
=	O
s	*(float)
;	O
gsl_linalg_givens_gv	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long,double,double)->(void)
(	O
&	O
vm	O
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
j	long
,	O
j	long
+	O
1	int
,	O
c	*(float)
,	O
s	*(float)
)	O
;	O
gsl_linalg_givens_gv	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long,double,double)->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
j	long
,	O
j	long
+	O
1	int
,	O
c	*(float)
,	O
s	*(float)
)	O
;	O
}	O
normr	O
=	O
fabs	(double)->(double)
(	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
j	long
+	O
1	int
)	O
)	O
;	O
if	O
(	O
normr	O
<=	O
reltol	O
)	O
{	O
break	O
;	O
}	O
}	O
if	O
(	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
>	O
maxit	O
)	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
--	O
;	O
Rm	O
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
1	int
,	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
,	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
ym	O
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
0	int
,	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
gsl_blas_dtrsv	(enum(int,int),enum(int,int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
&	O
Rm	O
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
ym	O
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_vector_set_zero	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
for	O
(	O
k	long
=	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
;	O
k	long
>	O
0	int
&&	O
k	long
--	O
;	O
)	O
{	O
double	O
ymk	O
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
&	O
ym	O
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
k	long
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
uk	O
=	O
gsl_matrix_subcolumn	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
k	long
,	O
k	long
,	O
N	int
-	O
k	long
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
rk	O
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
k	long
,	O
N	int
-	O
k	long
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
k	long
,	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
k	long
)	O
+	O
ymk	O
)	O
;	O
tau	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
state	*(int)
->	O
tau	double
,	O
k	long
)	O
;	O
gsl_linalg_householder_hv	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
tau	double
,	O
&	O
uk	O
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
rk	O
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
gsl_vector_add	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
x	double
,	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
b	double
)	O
;	O
gsl_spblas_dgemv	O
(	O
CblasNoTrans	int
,	O
-	O
1.0	int
,	O
A	*(float)
,	O
x	double
,	O
1.0	int
,	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
normr	O
=	O
gsl_blas_dnrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
normr	O
<=	O
reltol	O
)	O
status	O
=	O
GSL_SUCCESS	int
;	O
else	O
status	O
=	O
GSL_CONTINUE	int
;	O
state	*(int)
->	O
normr	O
=	O
normr	O
;	O
return	O
status	O
;	O
}	O
}	O
static	O
double	O
gmres_normr	O
(	O
const	O
void	O
*	O
vstate	O
)	O
{	O
const	O
gmres_state_t	O
*	O
state	*(int)
=	O
(	O
const	O
gmres_state_t	O
*	O
)	O
vstate	O
;	O
return	O
state	*(int)
->	O
normr	O
;	O
}	O
static	O
const	O
gsl_splinalg_itersolve_type	O
gmres_type	O
=	O
{	O
"gmres"	*(char)
,	O
&	O
gmres_alloc	O
,	O
&	O
gmres_iterate	O
,	O
&	O
gmres_normr	O
,	O
&	O
gmres_free	O
}	O
;	O
const	O
gsl_splinalg_itersolve_type	O
*	O
gsl_splinalg_itersolve_gmres	O
=	O
&	O
gmres_type	O
;	O
