int	O
gdbm_bucket_element_valid_p	(*(struct),int)->(int)
(	O
GDBM_FILE	*(struct)
dbf	*(struct)
,	O
int	O
elem_loc	int
)	O
{	O
return	O
elem_loc	int
<	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
bucket_elems	int
&&	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
h_table	array(struct(int,array(char),long,int,int))
[	O
elem_loc	int
]	O
.	O
hash_value	int
!=	O
-	O
1	int
&&	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
h_table	array(struct(int,array(char),long,int,int))
[	O
elem_loc	int
]	O
.	O
key_size	int
>=	O
0	int
&&	O
off_t_sum_ok	(long,long)->(long)
(	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
h_table	array(struct(int,array(char),long,int,int))
[	O
elem_loc	int
]	O
.	O
data_pointer	long
,	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
h_table	array(struct(int,array(char),long,int,int))
[	O
elem_loc	int
]	O
.	O
key_size	int
)	O
&&	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
h_table	array(struct(int,array(char),long,int,int))
[	O
elem_loc	int
]	O
.	O
data_size	int
>=	O
0	int
&&	O
off_t_sum_ok	(long,long)->(long)
(	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
h_table	array(struct(int,array(char),long,int,int))
[	O
elem_loc	int
]	O
.	O
data_pointer	long
+	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
h_table	array(struct(int,array(char),long,int,int))
[	O
elem_loc	int
]	O
.	O
key_size	int
,	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
h_table	array(struct(int,array(char),long,int,int))
[	O
elem_loc	int
]	O
.	O
data_size	int
)	O
;	O
}	O
char	O
*	O
_gdbm_read_entry	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),int)->(*(char))
(	O
GDBM_FILE	*(struct)
dbf	*(struct)
,	O
int	O
elem_loc	int
)	O
{	O
int	O
rc	int
;	O
int	O
key_size	int
;	O
int	O
data_size	int
;	O
size_t	long
dsize	int
;	O
off_t	long
file_pos	long
;	O
data_cache_elem	struct(int,int,int,*(char),long,int)
*	O
data_ca	*(struct(int,int,int,*(char),long,int))
;	O
if	O
(	O
dbf	*(struct)
->	O
cache_entry	*(struct(*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),long,char,struct(int,int,int,*(char),long,int)))
->	O
ca_data	struct(int,int,int,*(char),long,int)
.	O
elem_loc	int
==	O
elem_loc	int
)	O
return	O
dbf	*(struct)
->	O
cache_entry	*(struct(*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),long,char,struct(int,int,int,*(char),long,int)))
->	O
ca_data	struct(int,int,int,*(char),long,int)
.	O
dptr	*(char)
;	O
if	O
(	O
!	O
gdbm_bucket_element_valid_p	(*(struct),int)->(int)
(	O
dbf	*(struct)
,	O
elem_loc	int
)	O
)	O
{	O
GDBM_SET_ERRNO	O
(	O
dbf	*(struct)
,	O
GDBM_BAD_HASH_TABLE	int
,	O
TRUE	int
)	O
;	O
return	O
NULL	O
;	O
}	O
key_size	int
=	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
h_table	array(struct(int,array(char),long,int,int))
[	O
elem_loc	int
]	O
.	O
key_size	int
;	O
data_size	int
=	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
h_table	array(struct(int,array(char),long,int,int))
[	O
elem_loc	int
]	O
.	O
data_size	int
;	O
dsize	int
=	O
key_size	int
+	O
data_size	int
;	O
data_ca	*(struct(int,int,int,*(char),long,int))
=	O
&	O
dbf	*(struct)
->	O
cache_entry	*(struct(*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),long,char,struct(int,int,int,*(char),long,int)))
->	O
ca_data	struct(int,int,int,*(char),long,int)
;	O
data_ca	*(struct(int,int,int,*(char),long,int))
->	O
key_size	int
=	O
key_size	int
;	O
data_ca	*(struct(int,int,int,*(char),long,int))
->	O
data_size	int
=	O
data_size	int
;	O
data_ca	*(struct(int,int,int,*(char),long,int))
->	O
elem_loc	int
=	O
elem_loc	int
;	O
data_ca	*(struct(int,int,int,*(char),long,int))
->	O
hash_val	int
=	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
h_table	array(struct(int,array(char),long,int,int))
[	O
elem_loc	int
]	O
.	O
hash_value	int
;	O
if	O
(	O
dsize	int
<=	O
data_ca	*(struct(int,int,int,*(char),long,int))
->	O
dsize	int
)	O
{	O
if	O
(	O
data_ca	*(struct(int,int,int,*(char),long,int))
->	O
dsize	int
==	O
0	int
)	O
{	O
data_ca	*(struct(int,int,int,*(char),long,int))
->	O
dptr	*(char)
=	O
malloc	(long)->(*(void))
(	O
1	int
)	O
;	O
if	O
(	O
data_ca	*(struct(int,int,int,*(char),long,int))
->	O
dptr	*(char)
)	O
data_ca	*(struct(int,int,int,*(char),long,int))
->	O
dsize	int
=	O
1	int
;	O
else	O
{	O
GDBM_SET_ERRNO2	O
(	O
dbf	*(struct)
,	O
GDBM_MALLOC_ERROR	int
,	O
FALSE	int
,	O
GDBM_DEBUG_LOOKUP	O
)	O
;	O
_gdbm_fatal	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),*(char))->(void)
(	O
dbf	*(struct)
,	O
_	O
(	O
"malloc error"	*(char)
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
}	O
else	O
{	O
char	O
*	O
p	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
data_ca	*(struct(int,int,int,*(char),long,int))
->	O
dptr	*(char)
,	O
dsize	int
)	O
;	O
if	O
(	O
p	*(char)
)	O
{	O
data_ca	*(struct(int,int,int,*(char),long,int))
->	O
dptr	*(char)
=	O
p	*(char)
;	O
data_ca	*(struct(int,int,int,*(char),long,int))
->	O
dsize	int
=	O
dsize	int
;	O
}	O
else	O
{	O
GDBM_SET_ERRNO2	O
(	O
dbf	*(struct)
,	O
GDBM_MALLOC_ERROR	int
,	O
FALSE	int
,	O
GDBM_DEBUG_LOOKUP	O
)	O
;	O
_gdbm_fatal	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),*(char))->(void)
(	O
dbf	*(struct)
,	O
_	O
(	O
"malloc error"	*(char)
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
file_pos	long
=	O
gdbm_file_seek	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),long,int)->(long)
(	O
dbf	*(struct)
,	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
h_table	array(struct(int,array(char),long,int,int))
[	O
elem_loc	int
]	O
.	O
data_pointer	long
,	O
SEEK_SET	int
)	O
;	O
if	O
(	O
file_pos	long
!=	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
h_table	array(struct(int,array(char),long,int,int))
[	O
elem_loc	int
]	O
.	O
data_pointer	long
)	O
{	O
GDBM_SET_ERRNO2	O
(	O
dbf	*(struct)
,	O
GDBM_FILE_SEEK_ERROR	int
,	O
TRUE	int
,	O
GDBM_DEBUG_LOOKUP	O
)	O
;	O
_gdbm_fatal	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),*(char))->(void)
(	O
dbf	*(struct)
,	O
_	O
(	O
"lseek error"	*(char)
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
rc	int
=	O
_gdbm_full_read	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),*(void),long)->(int)
(	O
dbf	*(struct)
,	O
data_ca	*(struct(int,int,int,*(char),long,int))
->	O
dptr	*(char)
,	O
key_size	int
+	O
data_size	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_ERR	O
|	O
GDBM_DEBUG_LOOKUP	O
|	O
GDBM_DEBUG_READ	O
,	O
"%s: error reading entry: %s"	*(char)
,	O
dbf	*(struct)
->	O
name	*(char)
,	O
gdbm_db_strerror	(*(struct))->(*(char))
(	O
dbf	*(struct)
)	O
)	O
;	O
dbf	*(struct)
->	O
need_recovery	int
=	O
TRUE	int
;	O
_gdbm_fatal	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),*(char))->(void)
(	O
dbf	*(struct)
,	O
gdbm_db_strerror	(*(struct))->(*(char))
(	O
dbf	*(struct)
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
return	O
data_ca	*(struct(int,int,int,*(char),long,int))
->	O
dptr	*(char)
;	O
}	O
int	O
_gdbm_findkey	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),struct(*(char),int),*(*(char)),*(int))->(int)
(	O
GDBM_FILE	*(struct)
dbf	*(struct)
,	O
datum	struct(*(char),int)
key	struct(*(char),int)
,	O
char	O
*	O
*	O
ret_dptr	*(*(char))
,	O
int	O
*	O
ret_hash_val	*(int)
)	O
{	O
int	O
bucket_hash_val	int
;	O
int	O
new_hash_val	int
;	O
char	O
*	O
file_key	*(char)
;	O
int	O
bucket_dir	int
;	O
int	O
elem_loc	int
;	O
int	O
home_loc	int
;	O
int	O
key_size	int
;	O
GDBM_DEBUG_DATUM	O
(	O
GDBM_DEBUG_LOOKUP	O
,	O
key	struct(*(char),int)
,	O
"%s: fetching key:"	*(char)
,	O
dbf	*(struct)
->	O
name	*(char)
)	O
;	O
_gdbm_hash_key	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),struct(*(char),int),*(int),*(int),*(int))->(void)
(	O
dbf	*(struct)
,	O
key	struct(*(char),int)
,	O
&	O
new_hash_val	int
,	O
&	O
bucket_dir	int
,	O
&	O
elem_loc	int
)	O
;	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_LOOKUP	O
,	O
"%s: location = %#4x:%d:%d"	*(char)
,	O
dbf	*(struct)
->	O
name	*(char)
,	O
new_hash_val	int
,	O
bucket_dir	int
,	O
elem_loc	int
)	O
;	O
if	O
(	O
ret_hash_val	*(int)
)	O
*	O
ret_hash_val	*(int)
=	O
new_hash_val	int
;	O
if	O
(	O
_gdbm_get_bucket	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),int)->(int)
(	O
dbf	*(struct)
,	O
bucket_dir	int
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
dbf	*(struct)
->	O
cache_entry	*(struct(*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),long,char,struct(int,int,int,*(char),long,int)))
->	O
ca_data	struct(int,int,int,*(char),long,int)
.	O
elem_loc	int
!=	O
-	O
1	int
&&	O
new_hash_val	int
==	O
dbf	*(struct)
->	O
cache_entry	*(struct(*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),long,char,struct(int,int,int,*(char),long,int)))
->	O
ca_data	struct(int,int,int,*(char),long,int)
.	O
hash_val	int
&&	O
dbf	*(struct)
->	O
cache_entry	*(struct(*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),long,char,struct(int,int,int,*(char),long,int)))
->	O
ca_data	struct(int,int,int,*(char),long,int)
.	O
key_size	int
==	O
key	struct(*(char),int)
.	O
dsize	int
&&	O
dbf	*(struct)
->	O
cache_entry	*(struct(*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),long,char,struct(int,int,int,*(char),long,int)))
->	O
ca_data	struct(int,int,int,*(char),long,int)
.	O
dptr	*(char)
!=	O
NULL	O
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
dbf	*(struct)
->	O
cache_entry	*(struct(*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),long,char,struct(int,int,int,*(char),long,int)))
->	O
ca_data	struct(int,int,int,*(char),long,int)
.	O
dptr	*(char)
,	O
key	struct(*(char),int)
.	O
dptr	*(char)
,	O
key	struct(*(char),int)
.	O
dsize	int
)	O
==	O
0	int
)	O
{	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_LOOKUP	O
,	O
"%s: found in cache"	*(char)
,	O
dbf	*(struct)
->	O
name	*(char)
)	O
;	O
if	O
(	O
ret_dptr	*(*(char))
)	O
*	O
ret_dptr	*(*(char))
=	O
dbf	*(struct)
->	O
cache_entry	*(struct(*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),long,char,struct(int,int,int,*(char),long,int)))
->	O
ca_data	struct(int,int,int,*(char),long,int)
.	O
dptr	*(char)
+	O
key	struct(*(char),int)
.	O
dsize	int
;	O
return	O
dbf	*(struct)
->	O
cache_entry	*(struct(*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),long,char,struct(int,int,int,*(char),long,int)))
->	O
ca_data	struct(int,int,int,*(char),long,int)
.	O
elem_loc	int
;	O
}	O
home_loc	int
=	O
elem_loc	int
;	O
bucket_hash_val	int
=	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
h_table	array(struct(int,array(char),long,int,int))
[	O
elem_loc	int
]	O
.	O
hash_value	int
;	O
while	O
(	O
bucket_hash_val	int
!=	O
-	O
1	int
)	O
{	O
key_size	int
=	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
h_table	array(struct(int,array(char),long,int,int))
[	O
elem_loc	int
]	O
.	O
key_size	int
;	O
if	O
(	O
bucket_hash_val	int
!=	O
new_hash_val	int
||	O
key_size	int
!=	O
key	struct(*(char),int)
.	O
dsize	int
||	O
memcmp	(*(void),*(void),long)->(int)
(	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
h_table	array(struct(int,array(char),long,int,int))
[	O
elem_loc	int
]	O
.	O
key_start	array(char)
,	O
key	struct(*(char),int)
.	O
dptr	*(char)
,	O
(	O
SMALL	int
<	O
key_size	int
?	O
SMALL	int
:	O
key_size	int
)	O
)	O
!=	O
0	int
)	O
{	O
elem_loc	int
=	O
(	O
elem_loc	int
+	O
1	int
)	O
%	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
bucket_elems	int
;	O
if	O
(	O
elem_loc	int
==	O
home_loc	int
)	O
break	O
;	O
bucket_hash_val	int
=	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
h_table	array(struct(int,array(char),long,int,int))
[	O
elem_loc	int
]	O
.	O
hash_value	int
;	O
}	O
else	O
{	O
file_key	*(char)
=	O
_gdbm_read_entry	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),int)->(*(char))
(	O
dbf	*(struct)
,	O
elem_loc	int
)	O
;	O
if	O
(	O
!	O
file_key	*(char)
)	O
{	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_LOOKUP	O
,	O
"%s: error reading entry: %s"	*(char)
,	O
dbf	*(struct)
->	O
name	*(char)
,	O
gdbm_db_strerror	(*(struct))->(*(char))
(	O
dbf	*(struct)
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
memcmp	(*(void),*(void),long)->(int)
(	O
file_key	*(char)
,	O
key	struct(*(char),int)
.	O
dptr	*(char)
,	O
key_size	int
)	O
==	O
0	int
)	O
{	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_LOOKUP	O
,	O
"%s: found"	*(char)
,	O
dbf	*(struct)
->	O
name	*(char)
)	O
;	O
if	O
(	O
ret_dptr	*(*(char))
)	O
*	O
ret_dptr	*(*(char))
=	O
file_key	*(char)
+	O
key	struct(*(char),int)
.	O
dsize	int
;	O
return	O
elem_loc	int
;	O
}	O
else	O
{	O
elem_loc	int
=	O
(	O
elem_loc	int
+	O
1	int
)	O
%	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
bucket_elems	int
;	O
if	O
(	O
elem_loc	int
==	O
home_loc	int
)	O
break	O
;	O
bucket_hash_val	int
=	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
h_table	array(struct(int,array(char),long,int,int))
[	O
elem_loc	int
]	O
.	O
hash_value	int
;	O
}	O
}	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_LOOKUP	O
,	O
"%s: next location = %#4x:%d:%d"	*(char)
,	O
dbf	*(struct)
->	O
name	*(char)
,	O
bucket_hash_val	int
,	O
bucket_dir	int
,	O
elem_loc	int
)	O
;	O
}	O
GDBM_SET_ERRNO2	O
(	O
dbf	*(struct)
,	O
GDBM_ITEM_NOT_FOUND	int
,	O
FALSE	int
,	O
GDBM_DEBUG_LOOKUP	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
