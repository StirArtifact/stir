struct	O
list_entry	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(void))
{	O
struct	O
list_entry	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(void))
*	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
,	O
*	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
void	O
*	O
data	*(void)
;	O
}	O
;	O
struct	O
dico_list	struct(long,*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int,*(struct),*((*(void),*(void),*(void))->(int)),*(void),*((*(void),*(void))->(int)),*(void))
{	O
size_t	long
count	long
;	O
struct	O
list_entry	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(void))
*	O
head	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
,	O
*	O
tail	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
int	O
flags	int
;	O
struct	O
iterator	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,long)),*(struct(long,*(struct`),*(struct`),int,*(struct`),*((*`,*`,*`)->(int)),*(void),*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),*(void))),int,long)),*(struct(long,*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),int,*(struct(*(struct`),*(struct`),*(struct`),int,long)),*((*(void),*(void),*(void))->(int)),*(void),*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int,long)
*	O
itr	*((*(void),*(void))->(int))
;	O
dico_list_comp_t	*((*(void),*(void),*(void))->(int))
comp_fun	*((*(void),*(void),*(void))->(int))
;	O
void	O
*	O
comp_data	*(void)
;	O
dico_list_iterator_t	*((*(void),*(void))->(int))
free_item	*((*(void),*(void))->(int))
;	O
void	O
*	O
free_data	*(void)
;	O
}	O
;	O
struct	O
iterator	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,long)),*(struct(long,*(struct`),*(struct`),int,*(struct`),*((*`,*`,*`)->(int)),*(void),*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),*(void))),int,long)),*(struct(long,*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),int,*(struct(*(struct`),*(struct`),*(struct`),int,long)),*((*(void),*(void),*(void))->(int)),*(void),*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int,long)
{	O
struct	O
iterator	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,long)),*(struct(long,*(struct`),*(struct`),int,*(struct`),*((*`,*`,*`)->(int)),*(void),*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),*(void))),int,long)),*(struct(long,*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),int,*(struct(*(struct`),*(struct`),*(struct`),int,long)),*((*(void),*(void),*(void))->(int)),*(void),*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int,long)
*	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
dico_list_t	*(struct)
list	array(*(struct))
;	O
struct	O
list_entry	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(void))
*	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
int	O
advanced	int
;	O
size_t	long
pos	long
;	O
}	O
;	O
static	O
int	O
cmp_ptr	(*(void),*(void),*(void))->(int)
(	O
const	O
void	O
*	O
a	*(struct)
,	O
const	O
void	O
*	O
b	*(struct)
,	O
void	O
*	O
data	*(void)
)	O
{	O
return	O
a	*(struct)
!=	O
b	*(struct)
;	O
}	O
struct	O
dico_list	struct(long,*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int,*(struct),*((*(void),*(void),*(void))->(int)),*(void),*((*(void),*(void))->(int)),*(void))
*	O
dico_list_create	()->(*(struct))
(	O
void	O
)	O
{	O
struct	O
dico_list	struct(long,*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int,*(struct),*((*(void),*(void),*(void))->(int)),*(void),*((*(void),*(void))->(int)),*(void))
*	O
p	*(char)
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
p	*(char)
)	O
)	O
;	O
if	O
(	O
p	*(char)
)	O
{	O
p	*(char)
->	O
count	long
=	O
0	int
;	O
p	*(char)
->	O
head	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
p	*(char)
->	O
tail	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
NULL	O
;	O
p	*(char)
->	O
flags	int
=	O
0	int
;	O
p	*(char)
->	O
itr	*((*(void),*(void))->(int))
=	O
NULL	O
;	O
p	*(char)
->	O
comp_fun	*((*(void),*(void),*(void))->(int))
=	O
cmp_ptr	(*(void),*(void),*(void))->(int)
;	O
p	*(char)
->	O
comp_data	*(void)
=	O
NULL	O
;	O
p	*(char)
->	O
free_item	*((*(void),*(void))->(int))
=	O
NULL	O
;	O
p	*(char)
->	O
free_data	*(void)
=	O
NULL	O
;	O
}	O
return	O
p	*(char)
;	O
}	O
int	O
dico_list_clear	(*(struct))->(int)
(	O
struct	O
dico_list	struct(long,*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int,*(struct),*((*(void),*(void),*(void))->(int)),*(void),*((*(void),*(void))->(int)),*(void))
*	O
list	array(*(struct))
)	O
{	O
struct	O
list_entry	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(void))
*	O
p	*(char)
;	O
if	O
(	O
!	O
list	array(*(struct))
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
1	int
;	O
}	O
p	*(char)
=	O
list	array(*(struct))
->	O
head	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
list	array(*(struct))
->	O
head	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
list	array(*(struct))
->	O
tail	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
NULL	O
;	O
list	array(*(struct))
->	O
count	long
=	O
0	int
;	O
while	O
(	O
p	*(char)
)	O
{	O
struct	O
list_entry	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(void))
*	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
p	*(char)
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
if	O
(	O
list	array(*(struct))
->	O
free_item	*((*(void),*(void))->(int))
)	O
list	array(*(struct))
->	O
free_item	*((*(void),*(void))->(int))
(	O
p	*(char)
->	O
data	*(void)
,	O
list	array(*(struct))
->	O
free_data	*(void)
)	O
;	O
free	(*(void))->(void)
(	O
p	*(char)
)	O
;	O
p	*(char)
=	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
}	O
return	O
0	int
;	O
}	O
void	O
dico_list_destroy	(*(*(struct)))->(void)
(	O
struct	O
dico_list	struct(long,*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int,*(struct),*((*(void),*(void),*(void))->(int)),*(void),*((*(void),*(void))->(int)),*(void))
*	O
*	O
plist	*(*(struct(long,*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),int,*(struct(*`,*`,*`,int,long)),*((*`,*`,*`)->(int)),*(void),*((*`,*`)->(int)),*(void))))
)	O
{	O
struct	O
dico_list	struct(long,*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int,*(struct),*((*(void),*(void),*(void))->(int)),*(void),*((*(void),*(void))->(int)),*(void))
*	O
list	array(*(struct))
;	O
if	O
(	O
!	O
plist	*(*(struct(long,*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),int,*(struct(*`,*`,*`,int,long)),*((*`,*`,*`)->(int)),*(void),*((*`,*`)->(int)),*(void))))
||	O
!	O
*	O
plist	*(*(struct(long,*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),int,*(struct(*`,*`,*`,int,long)),*((*`,*`,*`)->(int)),*(void),*((*`,*`)->(int)),*(void))))
)	O
return	O
;	O
list	array(*(struct))
=	O
*	O
plist	*(*(struct(long,*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),int,*(struct(*`,*`,*`,int,long)),*((*`,*`,*`)->(int)),*(void),*((*`,*`)->(int)),*(void))))
;	O
*	O
plist	*(*(struct(long,*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),int,*(struct(*`,*`,*`,int,long)),*((*`,*`,*`)->(int)),*(void),*((*`,*`)->(int)),*(void))))
=	O
NULL	O
;	O
dico_list_clear	(*(struct))->(int)
(	O
list	array(*(struct))
)	O
;	O
free	(*(void))->(void)
(	O
list	array(*(struct))
)	O
;	O
}	O
void	O
dico_list_free_item	(*(struct(long,*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),int,*(struct(*`,*`,*`,int,long)),*((*`,*`,*`)->(int)),*(void),*((*`,*`)->(int)),*(void))),*(void))->(void)
(	O
struct	O
dico_list	struct(long,*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int,*(struct),*((*(void),*(void),*(void))->(int)),*(void),*((*(void),*(void))->(int)),*(void))
*	O
list	array(*(struct))
,	O
void	O
*	O
item	*(void)
)	O
{	O
if	O
(	O
list	array(*(struct))
->	O
free_item	*((*(void),*(void))->(int))
)	O
list	array(*(struct))
->	O
free_item	*((*(void),*(void))->(int))
(	O
item	*(void)
,	O
list	array(*(struct))
->	O
free_data	*(void)
)	O
;	O
}	O
void	O
*	O
dico_iterator_current	(*(struct))->(*(void))
(	O
dico_iterator_t	*(struct)
ip	*(*(struct))
)	O
{	O
if	O
(	O
!	O
ip	*(*(struct))
)	O
return	O
NULL	O
;	O
return	O
ip	*(*(struct))
->	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
?	O
ip	*(*(struct))
->	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
data	*(void)
:	O
NULL	O
;	O
}	O
size_t	long
dico_iterator_position	(*(struct))->(long)
(	O
dico_iterator_t	*(struct)
ip	*(*(struct))
)	O
{	O
if	O
(	O
!	O
ip	*(*(struct))
)	O
return	O
0	int
;	O
return	O
ip	*(*(struct))
->	O
pos	long
;	O
}	O
static	O
void	O
dico_iterator_attach	(*(struct(*(struct(*`,*`,*`,int,long)),*(struct(long,*`,*`,int,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),int,long)),*(struct(long,*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),int,*(struct(*`,*`,*`,int,long)),*((*`,*`,*`)->(int)),*(void),*((*`,*`)->(int)),*(void))))->(void)
(	O
dico_iterator_t	*(struct)
itr	*((*(void),*(void))->(int))
,	O
dico_list_t	*(struct)
list	array(*(struct))
)	O
{	O
itr	*((*(void),*(void))->(int))
->	O
list	array(*(struct))
=	O
list	array(*(struct))
;	O
itr	*((*(void),*(void))->(int))
->	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
list	array(*(struct))
->	O
head	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
itr	*((*(void),*(void))->(int))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
list	array(*(struct))
->	O
itr	*((*(void),*(void))->(int))
;	O
itr	*((*(void),*(void))->(int))
->	O
advanced	int
=	O
0	int
;	O
itr	*((*(void),*(void))->(int))
->	O
pos	long
=	O
0	int
;	O
list	array(*(struct))
->	O
itr	*((*(void),*(void))->(int))
=	O
itr	*((*(void),*(void))->(int))
;	O
}	O
static	O
dico_iterator_t	*(struct)
dico_iterator_detach	(*(struct(*(struct(*`,*`,*`,int,long)),*(struct(long,*`,*`,int,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),int,long)))->(*(struct(*(struct(*`,*`,*`,int,long)),*(struct(long,*`,*`,int,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),int,long)))
(	O
dico_iterator_t	*(struct)
iter	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,long)),*(struct(long,*(struct`),*(struct`),int,*(struct`),*((*`,*`,*`)->(int)),*(void),*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),*(void))),int,long))
)	O
{	O
dico_iterator_t	*(struct)
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
,	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
for	O
(	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
iter	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,long)),*(struct(long,*(struct`),*(struct`),int,*(struct`),*((*`,*`,*`)->(int)),*(void),*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),*(void))),int,long))
->	O
list	array(*(struct))
->	O
itr	*((*(void),*(void))->(int))
,	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
NULL	O
;	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
,	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
if	O
(	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
==	O
iter	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,long)),*(struct(long,*(struct`),*(struct`),int,*(struct`),*((*`,*`,*`)->(int)),*(void),*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),*(void))),int,long))
)	O
break	O
;	O
if	O
(	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
{	O
if	O
(	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
else	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
list	array(*(struct))
->	O
itr	*((*(void),*(void))->(int))
=	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
}	O
return	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
}	O
dico_iterator_t	*(struct)
dico_list_iterator	(*(struct))->(*(struct))
(	O
dico_list_t	*(struct)
list	array(*(struct))
)	O
{	O
dico_iterator_t	*(struct)
itr	*((*(void),*(void))->(int))
;	O
if	O
(	O
!	O
list	array(*(struct))
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
NULL	O
;	O
}	O
itr	*((*(void),*(void))->(int))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
itr	*((*(void),*(void))->(int))
)	O
)	O
;	O
if	O
(	O
itr	*((*(void),*(void))->(int))
)	O
dico_iterator_attach	(*(struct(*(struct(*`,*`,*`,int,long)),*(struct(long,*`,*`,int,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),int,long)),*(struct(long,*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),int,*(struct(*`,*`,*`,int,long)),*((*`,*`,*`)->(int)),*(void),*((*`,*`)->(int)),*(void))))->(void)
(	O
itr	*((*(void),*(void))->(int))
,	O
list	array(*(struct))
)	O
;	O
return	O
itr	*((*(void),*(void))->(int))
;	O
}	O
void	O
dico_iterator_destroy	(*(*(struct)))->(void)
(	O
dico_iterator_t	*(struct)
*	O
ip	*(*(struct))
)	O
{	O
dico_iterator_t	*(struct)
itr	*((*(void),*(void))->(int))
;	O
if	O
(	O
!	O
ip	*(*(struct))
||	O
!	O
*	O
ip	*(*(struct))
)	O
return	O
;	O
itr	*((*(void),*(void))->(int))
=	O
dico_iterator_detach	(*(struct(*(struct(*`,*`,*`,int,long)),*(struct(long,*`,*`,int,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),int,long)))->(*(struct(*(struct(*`,*`,*`,int,long)),*(struct(long,*`,*`,int,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),int,long)))
(	O
*	O
ip	*(*(struct))
)	O
;	O
if	O
(	O
itr	*((*(void),*(void))->(int))
)	O
free	(*(void))->(void)
(	O
itr	*((*(void),*(void))->(int))
)	O
;	O
*	O
ip	*(*(struct))
=	O
NULL	O
;	O
}	O
static	O
void	O
_iterator_increase_pos	(*(struct(*(struct(*`,*`,*`,int,long)),*(struct(long,*`,*`,int,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),int,long)),long)->(void)
(	O
dico_iterator_t	*(struct)
ip	*(*(struct))
,	O
size_t	long
after	long
)	O
{	O
for	O
(	O
;	O
ip	*(*(struct))
;	O
ip	*(*(struct))
=	O
ip	*(*(struct))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
{	O
if	O
(	O
ip	*(*(struct))
->	O
pos	long
>	O
after	long
)	O
ip	*(*(struct))
->	O
pos	long
++	O
;	O
}	O
}	O
static	O
void	O
_iterator_advance	(*(struct(*(struct(*`,*`,*`,int,long)),*(struct(long,*`,*`,int,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),int,long)),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),*(void))))->(void)
(	O
dico_iterator_t	*(struct)
ip	*(*(struct))
,	O
struct	O
list_entry	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(void))
*	O
e	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
{	O
for	O
(	O
;	O
ip	*(*(struct))
;	O
ip	*(*(struct))
=	O
ip	*(*(struct))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
{	O
if	O
(	O
ip	*(*(struct))
->	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
==	O
e	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
{	O
ip	*(*(struct))
->	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
e	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
ip	*(*(struct))
->	O
advanced	int
++	O
;	O
}	O
}	O
}	O
void	O
*	O
dico_iterator_first	(*(struct))->(*(void))
(	O
dico_iterator_t	*(struct)
ip	*(*(struct))
)	O
{	O
if	O
(	O
!	O
ip	*(*(struct))
)	O
return	O
NULL	O
;	O
ip	*(*(struct))
->	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
ip	*(*(struct))
->	O
list	array(*(struct))
->	O
head	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
ip	*(*(struct))
->	O
advanced	int
=	O
0	int
;	O
ip	*(*(struct))
->	O
pos	long
=	O
0	int
;	O
return	O
dico_iterator_current	(*(struct))->(*(void))
(	O
ip	*(*(struct))
)	O
;	O
}	O
void	O
*	O
dico_iterator_next	(*(struct))->(*(void))
(	O
dico_iterator_t	*(struct)
ip	*(*(struct))
)	O
{	O
if	O
(	O
!	O
ip	*(*(struct))
||	O
!	O
ip	*(*(struct))
->	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
ip	*(*(struct))
->	O
advanced	int
)	O
{	O
ip	*(*(struct))
->	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
ip	*(*(struct))
->	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
ip	*(*(struct))
->	O
pos	long
++	O
;	O
}	O
ip	*(*(struct))
->	O
advanced	int
=	O
0	int
;	O
return	O
dico_iterator_current	(*(struct))->(*(void))
(	O
ip	*(*(struct))
)	O
;	O
}	O
void	O
*	O
dico_iterator_prev	(*(struct))->(*(void))
(	O
dico_iterator_t	*(struct)
ip	*(*(struct))
)	O
{	O
if	O
(	O
!	O
ip	*(*(struct))
||	O
!	O
ip	*(*(struct))
->	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
return	O
NULL	O
;	O
ip	*(*(struct))
->	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
ip	*(*(struct))
->	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
if	O
(	O
!	O
ip	*(*(struct))
->	O
advanced	int
)	O
ip	*(*(struct))
->	O
pos	long
--	O
;	O
ip	*(*(struct))
->	O
advanced	int
=	O
0	int
;	O
return	O
dico_iterator_current	(*(struct))->(*(void))
(	O
ip	*(*(struct))
)	O
;	O
}	O
void	O
*	O
dico_iterator_item	(*(struct),long)->(*(void))
(	O
dico_iterator_t	*(struct)
ip	*(*(struct))
,	O
size_t	long
n	long
)	O
{	O
if	O
(	O
n	long
>	O
ip	*(*(struct))
->	O
pos	long
)	O
{	O
if	O
(	O
!	O
ip	*(*(struct))
->	O
advanced	int
)	O
{	O
ip	*(*(struct))
->	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
ip	*(*(struct))
->	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
ip	*(*(struct))
->	O
pos	long
++	O
;	O
}	O
ip	*(*(struct))
->	O
advanced	int
=	O
0	int
;	O
while	O
(	O
ip	*(*(struct))
->	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
&&	O
ip	*(*(struct))
->	O
pos	long
<	O
n	long
)	O
{	O
ip	*(*(struct))
->	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
ip	*(*(struct))
->	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
ip	*(*(struct))
->	O
pos	long
++	O
;	O
}	O
}	O
else	O
if	O
(	O
n	long
<	O
ip	*(*(struct))
->	O
pos	long
)	O
{	O
if	O
(	O
!	O
ip	*(*(struct))
->	O
advanced	int
)	O
ip	*(*(struct))
->	O
pos	long
--	O
;	O
ip	*(*(struct))
->	O
advanced	int
=	O
0	int
;	O
while	O
(	O
ip	*(*(struct))
->	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
&&	O
ip	*(*(struct))
->	O
pos	long
>	O
n	long
)	O
{	O
ip	*(*(struct))
->	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
ip	*(*(struct))
->	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
ip	*(*(struct))
->	O
pos	long
--	O
;	O
}	O
}	O
return	O
dico_iterator_current	(*(struct))->(*(void))
(	O
ip	*(*(struct))
)	O
;	O
}	O
static	O
void	O
_dico_list_remove_item	(*(struct(long,*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),int,*(struct(*`,*`,*`,int,long)),*((*`,*`,*`)->(int)),*(void),*((*`,*`)->(int)),*(void))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),*(void))),*(*(void)))->(void)
(	O
struct	O
dico_list	struct(long,*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int,*(struct),*((*(void),*(void),*(void))->(int)),*(void),*((*(void),*(void))->(int)),*(void))
*	O
list	array(*(struct))
,	O
struct	O
list_entry	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(void))
*	O
p	*(char)
,	O
void	O
*	O
*	O
pptr	*(*(void))
)	O
;	O
void	O
dico_iterator_remove_current	(*(struct),*(*(void)))->(void)
(	O
dico_iterator_t	*(struct)
ip	*(*(struct))
,	O
void	O
*	O
*	O
pptr	*(*(void))
)	O
{	O
_dico_list_remove_item	(*(struct(long,*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),int,*(struct(*`,*`,*`,int,long)),*((*`,*`,*`)->(int)),*(void),*((*`,*`)->(int)),*(void))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),*(void))),*(*(void)))->(void)
(	O
ip	*(*(struct))
->	O
list	array(*(struct))
,	O
ip	*(*(struct))
->	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
,	O
pptr	*(*(void))
)	O
;	O
}	O
void	O
dico_iterator_set_data	(*(struct),*(void))->(void)
(	O
dico_iterator_t	*(struct)
ip	*(*(struct))
,	O
void	O
*	O
data	*(void)
)	O
{	O
ip	*(*(struct))
->	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
data	*(void)
=	O
data	*(void)
;	O
}	O
void	O
*	O
dico_list_head	(*(struct))->(*(void))
(	O
struct	O
dico_list	struct(long,*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int,*(struct),*((*(void),*(void),*(void))->(int)),*(void),*((*(void),*(void))->(int)),*(void))
*	O
list	array(*(struct))
)	O
{	O
return	O
list	array(*(struct))
->	O
head	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
?	O
list	array(*(struct))
->	O
head	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
data	*(void)
:	O
NULL	O
;	O
}	O
void	O
*	O
dico_list_tail	(*(struct))->(*(void))
(	O
struct	O
dico_list	struct(long,*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int,*(struct),*((*(void),*(void),*(void))->(int)),*(void),*((*(void),*(void))->(int)),*(void))
*	O
list	array(*(struct))
)	O
{	O
return	O
list	array(*(struct))
->	O
tail	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
?	O
list	array(*(struct))
->	O
tail	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
data	*(void)
:	O
NULL	O
;	O
}	O
void	O
*	O
dico_list_item	(*(struct),long)->(*(void))
(	O
struct	O
dico_list	struct(long,*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int,*(struct),*((*(void),*(void),*(void))->(int)),*(void),*((*(void),*(void))->(int)),*(void))
*	O
list	array(*(struct))
,	O
size_t	long
n	long
)	O
{	O
struct	O
list_entry	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(void))
*	O
p	*(char)
;	O
if	O
(	O
!	O
list	array(*(struct))
||	O
n	long
>=	O
list	array(*(struct))
->	O
count	long
)	O
return	O
NULL	O
;	O
for	O
(	O
p	*(char)
=	O
list	array(*(struct))
->	O
head	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
n	long
>	O
0	int
&&	O
p	*(char)
;	O
p	*(char)
=	O
p	*(char)
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
,	O
n	long
--	O
)	O
;	O
return	O
p	*(char)
->	O
data	*(void)
;	O
}	O
size_t	long
dico_list_count	(*(struct))->(long)
(	O
struct	O
dico_list	struct(long,*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int,*(struct),*((*(void),*(void),*(void))->(int)),*(void),*((*(void),*(void))->(int)),*(void))
*	O
list	array(*(struct))
)	O
{	O
if	O
(	O
!	O
list	array(*(struct))
)	O
return	O
0	int
;	O
return	O
list	array(*(struct))
->	O
count	long
;	O
}	O
int	O
dico_list_set_free_item	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
struct	O
dico_list	struct(long,*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int,*(struct),*((*(void),*(void),*(void))->(int)),*(void),*((*(void),*(void))->(int)),*(void))
*	O
list	array(*(struct))
,	O
dico_list_iterator_t	*((*(void),*(void))->(int))
free_item	*((*(void),*(void))->(int))
,	O
void	O
*	O
data	*(void)
)	O
{	O
if	O
(	O
!	O
list	array(*(struct))
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
1	int
;	O
}	O
list	array(*(struct))
->	O
free_item	*((*(void),*(void))->(int))
=	O
free_item	*((*(void),*(void))->(int))
;	O
list	array(*(struct))
->	O
free_data	*(void)
=	O
data	*(void)
;	O
return	O
0	int
;	O
}	O
int	O
dico_list_set_comparator	(*(struct),*((*(void),*(void),*(void))->(int)),*(void))->(int)
(	O
struct	O
dico_list	struct(long,*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int,*(struct),*((*(void),*(void),*(void))->(int)),*(void),*((*(void),*(void))->(int)),*(void))
*	O
list	array(*(struct))
,	O
dico_list_comp_t	*((*(void),*(void),*(void))->(int))
comp	*((*(void),*(void),*(void))->(int))
,	O
void	O
*	O
data	*(void)
)	O
{	O
if	O
(	O
!	O
list	array(*(struct))
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
list	array(*(struct))
->	O
comp_fun	*((*(void),*(void),*(void))->(int))
=	O
comp	*((*(void),*(void),*(void))->(int))
;	O
list	array(*(struct))
->	O
comp_data	*(void)
=	O
data	*(void)
;	O
return	O
0	int
;	O
}	O
int	O
dico_list_set_comparator_data	(*(struct),*(void))->(int)
(	O
dico_list_t	*(struct)
list	array(*(struct))
,	O
void	O
*	O
data	*(void)
)	O
{	O
if	O
(	O
!	O
list	array(*(struct))
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
list	array(*(struct))
->	O
comp_data	*(void)
=	O
data	*(void)
;	O
return	O
0	int
;	O
}	O
int	O
dico_list_set_flags	(*(struct),int)->(int)
(	O
struct	O
dico_list	struct(long,*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int,*(struct),*((*(void),*(void),*(void))->(int)),*(void),*((*(void),*(void))->(int)),*(void))
*	O
list	array(*(struct))
,	O
int	O
flags	int
)	O
{	O
if	O
(	O
!	O
list	array(*(struct))
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
1	int
;	O
}	O
list	array(*(struct))
->	O
flags	int
=	O
flags	int
;	O
return	O
0	int
;	O
}	O
int	O
dico_list_get_flags	(*(struct))->(int)
(	O
struct	O
dico_list	struct(long,*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int,*(struct),*((*(void),*(void),*(void))->(int)),*(void),*((*(void),*(void))->(int)),*(void))
*	O
list	array(*(struct))
)	O
{	O
if	O
(	O
list	array(*(struct))
)	O
return	O
list	array(*(struct))
->	O
flags	int
;	O
return	O
0	int
;	O
}	O
dico_list_comp_t	*((*(void),*(void),*(void))->(int))
dico_list_get_comparator	(*(struct))->(*((*(void),*(void),*(void))->(int)))
(	O
struct	O
dico_list	struct(long,*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int,*(struct),*((*(void),*(void),*(void))->(int)),*(void),*((*(void),*(void))->(int)),*(void))
*	O
list	array(*(struct))
)	O
{	O
if	O
(	O
!	O
list	array(*(struct))
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
NULL	O
;	O
}	O
return	O
list	array(*(struct))
->	O
comp_fun	*((*(void),*(void),*(void))->(int))
;	O
}	O
void	O
*	O
dico_list_get_comparator_data	(*(struct))->(*(void))
(	O
struct	O
dico_list	struct(long,*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int,*(struct),*((*(void),*(void),*(void))->(int)),*(void),*((*(void),*(void))->(int)),*(void))
*	O
list	array(*(struct))
)	O
{	O
if	O
(	O
!	O
list	array(*(struct))
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
NULL	O
;	O
}	O
return	O
list	array(*(struct))
->	O
comp_data	*(void)
;	O
}	O
int	O
_dico_list_append	(*(struct(long,*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),int,*(struct(*`,*`,*`,int,long)),*((*`,*`,*`)->(int)),*(void),*((*`,*`)->(int)),*(void))),*(void))->(int)
(	O
struct	O
dico_list	struct(long,*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int,*(struct),*((*(void),*(void),*(void))->(int)),*(void),*((*(void),*(void))->(int)),*(void))
*	O
list	array(*(struct))
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
list_entry	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(void))
*	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
)	O
;	O
if	O
(	O
!	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
return	O
1	int
;	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
NULL	O
;	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
list	array(*(struct))
->	O
tail	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
data	*(void)
=	O
data	*(void)
;	O
if	O
(	O
list	array(*(struct))
->	O
tail	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
list	array(*(struct))
->	O
tail	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
else	O
list	array(*(struct))
->	O
head	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
list	array(*(struct))
->	O
tail	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
list	array(*(struct))
->	O
count	long
++	O
;	O
return	O
0	int
;	O
}	O
int	O
_dico_list_prepend	(*(struct(long,*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),int,*(struct(*`,*`,*`,int,long)),*((*`,*`,*`)->(int)),*(void),*((*`,*`)->(int)),*(void))),*(void))->(int)
(	O
struct	O
dico_list	struct(long,*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int,*(struct),*((*(void),*(void),*(void))->(int)),*(void),*((*(void),*(void))->(int)),*(void))
*	O
list	array(*(struct))
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
list_entry	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(void))
*	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
)	O
;	O
if	O
(	O
!	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
return	O
1	int
;	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
data	*(void)
=	O
data	*(void)
;	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
list	array(*(struct))
->	O
head	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
NULL	O
;	O
list	array(*(struct))
->	O
head	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
if	O
(	O
!	O
list	array(*(struct))
->	O
tail	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
list	array(*(struct))
->	O
tail	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
list	array(*(struct))
->	O
head	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
list	array(*(struct))
->	O
count	long
++	O
;	O
_iterator_increase_pos	(*(struct(*(struct(*`,*`,*`,int,long)),*(struct(long,*`,*`,int,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),int,long)),long)->(void)
(	O
list	array(*(struct))
->	O
itr	*((*(void),*(void))->(int))
,	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O
int	O
dico_list_append	(*(struct),*(void))->(int)
(	O
struct	O
dico_list	struct(long,*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int,*(struct),*((*(void),*(void),*(void))->(int)),*(void),*((*(void),*(void))->(int)),*(void))
*	O
list	array(*(struct))
,	O
void	O
*	O
data	*(void)
)	O
{	O
if	O
(	O
!	O
list	array(*(struct))
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
1	int
;	O
}	O
if	O
(	O
(	O
list	array(*(struct))
->	O
flags	int
&	O
DICO_LIST_COMPARE_TAIL	int
)	O
&&	O
list	array(*(struct))
->	O
comp_fun	*((*(void),*(void),*(void))->(int))
&&	O
list	array(*(struct))
->	O
tail	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
&&	O
list	array(*(struct))
->	O
comp_fun	*((*(void),*(void),*(void))->(int))
(	O
list	array(*(struct))
->	O
tail	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
data	*(void)
,	O
data	*(void)
,	O
list	array(*(struct))
->	O
comp_data	*(void)
)	O
==	O
0	int
)	O
{	O
errno	O
=	O
EEXIST	int
;	O
return	O
1	int
;	O
}	O
return	O
_dico_list_append	(*(struct(long,*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),int,*(struct(*`,*`,*`,int,long)),*((*`,*`,*`)->(int)),*(void),*((*`,*`)->(int)),*(void))),*(void))->(int)
(	O
list	array(*(struct))
,	O
data	*(void)
)	O
;	O
}	O
int	O
dico_list_prepend	(*(struct),*(void))->(int)
(	O
struct	O
dico_list	struct(long,*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int,*(struct),*((*(void),*(void),*(void))->(int)),*(void),*((*(void),*(void))->(int)),*(void))
*	O
list	array(*(struct))
,	O
void	O
*	O
data	*(void)
)	O
{	O
if	O
(	O
!	O
list	array(*(struct))
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
1	int
;	O
}	O
if	O
(	O
(	O
list	array(*(struct))
->	O
flags	int
&	O
DICO_LIST_COMPARE_HEAD	int
)	O
&&	O
list	array(*(struct))
->	O
comp_fun	*((*(void),*(void),*(void))->(int))
&&	O
list	array(*(struct))
->	O
head	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
&&	O
list	array(*(struct))
->	O
comp_fun	*((*(void),*(void),*(void))->(int))
(	O
list	array(*(struct))
->	O
head	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
data	*(void)
,	O
data	*(void)
,	O
list	array(*(struct))
->	O
comp_data	*(void)
)	O
==	O
0	int
)	O
{	O
errno	O
=	O
EEXIST	int
;	O
return	O
1	int
;	O
}	O
return	O
_dico_list_prepend	(*(struct(long,*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),int,*(struct(*`,*`,*`,int,long)),*((*`,*`,*`)->(int)),*(void),*((*`,*`)->(int)),*(void))),*(void))->(int)
(	O
list	array(*(struct))
,	O
data	*(void)
)	O
;	O
}	O
static	O
void	O
_dico_list_remove_item	(*(struct(long,*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),int,*(struct(*`,*`,*`,int,long)),*((*`,*`,*`)->(int)),*(void),*((*`,*`)->(int)),*(void))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),*(void))),*(*(void)))->(void)
(	O
struct	O
dico_list	struct(long,*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int,*(struct),*((*(void),*(void),*(void))->(int)),*(void),*((*(void),*(void))->(int)),*(void))
*	O
list	array(*(struct))
,	O
struct	O
list_entry	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(void))
*	O
p	*(char)
,	O
void	O
*	O
*	O
pptr	*(*(void))
)	O
{	O
struct	O
list_entry	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(void))
*	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
_iterator_advance	(*(struct(*(struct(*`,*`,*`,int,long)),*(struct(long,*`,*`,int,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),int,long)),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),*(void))))->(void)
(	O
list	array(*(struct))
->	O
itr	*((*(void),*(void))->(int))
,	O
p	*(char)
)	O
;	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
p	*(char)
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
if	O
(	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
p	*(char)
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
else	O
list	array(*(struct))
->	O
head	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
list	array(*(struct))
->	O
head	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
if	O
(	O
p	*(char)
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
p	*(char)
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
else	O
list	array(*(struct))
->	O
tail	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
list	array(*(struct))
->	O
count	long
--	O
;	O
if	O
(	O
pptr	*(*(void))
)	O
*	O
pptr	*(*(void))
=	O
p	*(char)
->	O
data	*(void)
;	O
else	O
if	O
(	O
list	array(*(struct))
->	O
free_item	*((*(void),*(void))->(int))
)	O
list	array(*(struct))
->	O
free_item	*((*(void),*(void))->(int))
(	O
p	*(char)
->	O
data	*(void)
,	O
list	array(*(struct))
->	O
free_data	*(void)
)	O
;	O
free	(*(void))->(void)
(	O
p	*(char)
)	O
;	O
}	O
int	O
_dico_list_remove	(*(struct),*(void),*((*(void),*(void),*(void))->(int)),*(void),*(*(void)))->(int)
(	O
struct	O
dico_list	struct(long,*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int,*(struct),*((*(void),*(void),*(void))->(int)),*(void),*((*(void),*(void))->(int)),*(void))
*	O
list	array(*(struct))
,	O
void	O
*	O
data	*(void)
,	O
dico_list_comp_t	*((*(void),*(void),*(void))->(int))
cmp	*((*(void),*(void),*(void))->(int))
,	O
void	O
*	O
cmpdata	*(void)
,	O
void	O
*	O
*	O
pptr	*(*(void))
)	O
{	O
struct	O
list_entry	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(void))
*	O
p	*(char)
;	O
if	O
(	O
!	O
list	array(*(struct))
||	O
!	O
list	array(*(struct))
->	O
head	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
{	O
errno	O
=	O
ENOENT	int
;	O
return	O
1	int
;	O
}	O
if	O
(	O
!	O
cmp	*((*(void),*(void),*(void))->(int))
)	O
cmp	*((*(void),*(void),*(void))->(int))
=	O
cmp_ptr	(*(void),*(void),*(void))->(int)
;	O
for	O
(	O
p	*(char)
=	O
list	array(*(struct))
->	O
head	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
p	*(char)
;	O
p	*(char)
=	O
p	*(char)
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
if	O
(	O
cmp	*((*(void),*(void),*(void))->(int))
(	O
p	*(char)
->	O
data	*(void)
,	O
data	*(void)
,	O
cmpdata	*(void)
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
{	O
errno	O
=	O
ENOENT	int
;	O
return	O
1	int
;	O
}	O
_dico_list_remove_item	(*(struct(long,*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),int,*(struct(*`,*`,*`,int,long)),*((*`,*`,*`)->(int)),*(void),*((*`,*`)->(int)),*(void))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),*(void))),*(*(void)))->(void)
(	O
list	array(*(struct))
,	O
p	*(char)
,	O
pptr	*(*(void))
)	O
;	O
return	O
0	int
;	O
}	O
int	O
dico_list_remove	(*(struct),*(void),*(*(void)))->(int)
(	O
struct	O
dico_list	struct(long,*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int,*(struct),*((*(void),*(void),*(void))->(int)),*(void),*((*(void),*(void))->(int)),*(void))
*	O
list	array(*(struct))
,	O
void	O
*	O
data	*(void)
,	O
void	O
*	O
*	O
pret	*(*(void))
)	O
{	O
if	O
(	O
!	O
list	array(*(struct))
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
1	int
;	O
}	O
return	O
_dico_list_remove	(*(struct),*(void),*((*(void),*(void),*(void))->(int)),*(void),*(*(void)))->(int)
(	O
list	array(*(struct))
,	O
data	*(void)
,	O
list	array(*(struct))
->	O
comp_fun	*((*(void),*(void),*(void))->(int))
,	O
list	array(*(struct))
->	O
comp_data	*(void)
,	O
pret	*(*(void))
)	O
;	O
}	O
void	O
*	O
dico_list_pop	(*(struct))->(*(void))
(	O
struct	O
dico_list	struct(long,*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int,*(struct),*((*(void),*(void),*(void))->(int)),*(void),*((*(void),*(void))->(int)),*(void))
*	O
list	array(*(struct))
)	O
{	O
void	O
*	O
p	*(char)
;	O
if	O
(	O
!	O
list	array(*(struct))
->	O
tail	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
return	O
NULL	O
;	O
_dico_list_remove_item	(*(struct(long,*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),int,*(struct(*`,*`,*`,int,long)),*((*`,*`,*`)->(int)),*(void),*((*`,*`)->(int)),*(void))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),*(void))),*(*(void)))->(void)
(	O
list	array(*(struct))
,	O
list	array(*(struct))
->	O
tail	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
,	O
&	O
p	*(char)
)	O
;	O
return	O
p	*(char)
;	O
}	O
void	O
dico_list_iterate	(*(struct),*((*(void),*(void))->(int)),*(void))->(void)
(	O
struct	O
dico_list	struct(long,*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int,*(struct),*((*(void),*(void),*(void))->(int)),*(void),*((*(void),*(void))->(int)),*(void))
*	O
list	array(*(struct))
,	O
dico_list_iterator_t	*((*(void),*(void))->(int))
func	*((*(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*`),*((*`,*`)->(int)))),*(char))->(int))
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
iterator	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,long)),*(struct(long,*(struct`),*(struct`),int,*(struct`),*((*`,*`,*`)->(int)),*(void),*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),*(void))),int,long)),*(struct(long,*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),int,*(struct(*(struct`),*(struct`),*(struct`),int,long)),*((*(void),*(void),*(void))->(int)),*(void),*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int,long)
itr	*((*(void),*(void))->(int))
;	O
void	O
*	O
p	*(char)
;	O
if	O
(	O
!	O
list	array(*(struct))
)	O
return	O
;	O
dico_iterator_attach	(*(struct(*(struct(*`,*`,*`,int,long)),*(struct(long,*`,*`,int,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),int,long)),*(struct(long,*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),int,*(struct(*`,*`,*`,int,long)),*((*`,*`,*`)->(int)),*(void),*((*`,*`)->(int)),*(void))))->(void)
(	O
&	O
itr	*((*(void),*(void))->(int))
,	O
list	array(*(struct))
)	O
;	O
for	O
(	O
p	*(char)
=	O
dico_iterator_first	(*(struct))->(*(void))
(	O
&	O
itr	*((*(void),*(void))->(int))
)	O
;	O
p	*(char)
;	O
p	*(char)
=	O
dico_iterator_next	(*(struct))->(*(void))
(	O
&	O
itr	*((*(void),*(void))->(int))
)	O
)	O
{	O
if	O
(	O
func	*((*(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*`),*((*`,*`)->(int)))),*(char))->(int))
(	O
p	*(char)
,	O
data	*(void)
)	O
)	O
break	O
;	O
}	O
dico_iterator_detach	(*(struct(*(struct(*`,*`,*`,int,long)),*(struct(long,*`,*`,int,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),int,long)))->(*(struct(*(struct(*`,*`,*`,int,long)),*(struct(long,*`,*`,int,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),int,long)))
(	O
&	O
itr	*((*(void),*(void))->(int))
)	O
;	O
}	O
void	O
*	O
_dico_list_locate	(*(struct),*(void),*((*(void),*(void),*(void))->(int)),*(void))->(*(void))
(	O
struct	O
dico_list	struct(long,*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int,*(struct),*((*(void),*(void),*(void))->(int)),*(void),*((*(void),*(void))->(int)),*(void))
*	O
list	array(*(struct))
,	O
void	O
*	O
data	*(void)
,	O
dico_list_comp_t	*((*(void),*(void),*(void))->(int))
cmp	*((*(void),*(void),*(void))->(int))
,	O
void	O
*	O
cmpdata	*(void)
)	O
{	O
struct	O
list_entry	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(void))
*	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
if	O
(	O
!	O
list	array(*(struct))
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
cmp	*((*(void),*(void),*(void))->(int))
)	O
cmp	*((*(void),*(void),*(void))->(int))
=	O
cmp_ptr	(*(void),*(void),*(void))->(int)
;	O
for	O
(	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
list	array(*(struct))
->	O
head	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
if	O
(	O
cmp	*((*(void),*(void),*(void))->(int))
(	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
data	*(void)
,	O
data	*(void)
,	O
cmpdata	*(void)
)	O
==	O
0	int
)	O
break	O
;	O
return	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
?	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
data	*(void)
:	O
NULL	O
;	O
}	O
void	O
*	O
dico_list_locate	(*(struct),*(void))->(*(void))
(	O
struct	O
dico_list	struct(long,*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int,*(struct),*((*(void),*(void),*(void))->(int)),*(void),*((*(void),*(void))->(int)),*(void))
*	O
list	array(*(struct))
,	O
void	O
*	O
data	*(void)
)	O
{	O
if	O
(	O
!	O
list	array(*(struct))
)	O
return	O
NULL	O
;	O
return	O
_dico_list_locate	(*(struct),*(void),*((*(void),*(void),*(void))->(int)),*(void))->(*(void))
(	O
list	array(*(struct))
,	O
data	*(void)
,	O
list	array(*(struct))
->	O
comp_fun	*((*(void),*(void),*(void))->(int))
,	O
list	array(*(struct))
->	O
comp_data	*(void)
)	O
;	O
}	O
int	O
_dico_list_insert_sorted	(*(struct(long,*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),int,*(struct(*`,*`,*`,int,long)),*((*`,*`,*`)->(int)),*(void),*((*`,*`)->(int)),*(void))),*(void),*((*(void),*(void),*(void))->(int)),*(void))->(int)
(	O
struct	O
dico_list	struct(long,*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int,*(struct),*((*(void),*(void),*(void))->(int)),*(void),*((*(void),*(void))->(int)),*(void))
*	O
list	array(*(struct))
,	O
void	O
*	O
data	*(void)
,	O
dico_list_comp_t	*((*(void),*(void),*(void))->(int))
cmp	*((*(void),*(void),*(void))->(int))
,	O
void	O
*	O
cmpdata	*(void)
)	O
{	O
int	O
rc	int
;	O
struct	O
list_entry	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(void))
*	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
size_t	long
i	long
;	O
if	O
(	O
!	O
list	array(*(struct))
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
1	int
;	O
}	O
if	O
(	O
!	O
cmp	*((*(void),*(void),*(void))->(int))
)	O
cmp	*((*(void),*(void),*(void))->(int))
=	O
cmp_ptr	(*(void),*(void),*(void))->(int)
;	O
if	O
(	O
!	O
list	array(*(struct))
->	O
head	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
return	O
_dico_list_append	(*(struct(long,*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),int,*(struct(*`,*`,*`,int,long)),*((*`,*`,*`)->(int)),*(void),*((*`,*`)->(int)),*(void))),*(void))->(int)
(	O
list	array(*(struct))
,	O
data	*(void)
)	O
;	O
for	O
(	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
list	array(*(struct))
->	O
head	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
,	O
i	long
=	O
0	int
;	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
,	O
i	long
++	O
)	O
{	O
int	O
res	int
=	O
cmp	*((*(void),*(void),*(void))->(int))
(	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
data	*(void)
,	O
data	*(void)
,	O
cmpdata	*(void)
)	O
;	O
if	O
(	O
res	int
>	O
0	int
)	O
break	O
;	O
else	O
if	O
(	O
res	int
==	O
0	int
&&	O
list	array(*(struct))
->	O
flags	int
)	O
return	O
EEXIST	int
;	O
}	O
if	O
(	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
&&	O
!	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
{	O
rc	int
=	O
_dico_list_prepend	(*(struct(long,*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),int,*(struct(*`,*`,*`,int,long)),*((*`,*`,*`)->(int)),*(void),*((*`,*`)->(int)),*(void))),*(void))->(int)
(	O
list	array(*(struct))
,	O
data	*(void)
)	O
;	O
}	O
else	O
if	O
(	O
!	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
{	O
rc	int
=	O
_dico_list_append	(*(struct(long,*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),int,*(struct(*`,*`,*`,int,long)),*((*`,*`,*`)->(int)),*(void),*((*`,*`)->(int)),*(void))),*(void))->(int)
(	O
list	array(*(struct))
,	O
data	*(void)
)	O
;	O
}	O
else	O
{	O
struct	O
list_entry	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(void))
*	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
)	O
;	O
if	O
(	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
{	O
struct	O
list_entry	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(void))
*	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
rc	int
=	O
0	int
;	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
data	*(void)
=	O
data	*(void)
;	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
cur	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
_iterator_increase_pos	(*(struct(*(struct(*`,*`,*`,int,long)),*(struct(long,*`,*`,int,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),int,long)),long)->(void)
(	O
list	array(*(struct))
->	O
itr	*((*(void),*(void))->(int))
,	O
i	long
-	O
1	int
)	O
;	O
list	array(*(struct))
->	O
count	long
++	O
;	O
}	O
else	O
rc	int
=	O
1	int
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
dico_list_insert_sorted	(*(struct),*(void))->(int)
(	O
struct	O
dico_list	struct(long,*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),int,*(struct),*((*(void),*(void),*(void))->(int)),*(void),*((*(void),*(void))->(int)),*(void))
*	O
list	array(*(struct))
,	O
void	O
*	O
data	*(void)
)	O
{	O
if	O
(	O
!	O
list	array(*(struct))
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
1	int
;	O
}	O
return	O
_dico_list_insert_sorted	(*(struct(long,*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),int,*(struct(*`,*`,*`,int,long)),*((*`,*`,*`)->(int)),*(void),*((*`,*`)->(int)),*(void))),*(void),*((*(void),*(void),*(void))->(int)),*(void))->(int)
(	O
list	array(*(struct))
,	O
data	*(void)
,	O
list	array(*(struct))
->	O
comp_fun	*((*(void),*(void),*(void))->(int))
,	O
list	array(*(struct))
->	O
comp_data	*(void)
)	O
;	O
}	O
dico_list_t	*(struct)
dico_list_intersect	(*(struct),*(struct),*((*(void),*(void),*(void))->(int)),*(void))->(*(struct))
(	O
dico_list_t	*(struct)
a	*(struct)
,	O
dico_list_t	*(struct)
b	*(struct)
,	O
dico_list_comp_t	*((*(void),*(void),*(void))->(int))
cmp	*((*(void),*(void),*(void))->(int))
,	O
void	O
*	O
cmpdata	*(void)
)	O
{	O
dico_list_t	*(struct)
res	int
;	O
dico_iterator_t	*(struct)
itr	*((*(void),*(void))->(int))
=	O
dico_list_iterator	(*(struct))->(*(struct))
(	O
a	*(struct)
)	O
;	O
void	O
*	O
p	*(char)
;	O
if	O
(	O
!	O
itr	*((*(void),*(void))->(int))
)	O
return	O
NULL	O
;	O
res	int
=	O
dico_list_create	()->(*(struct))
(	O
)	O
;	O
if	O
(	O
!	O
res	int
)	O
return	O
NULL	O
;	O
for	O
(	O
p	*(char)
=	O
dico_iterator_first	(*(struct))->(*(void))
(	O
itr	*((*(void),*(void))->(int))
)	O
;	O
p	*(char)
;	O
p	*(char)
=	O
dico_iterator_next	(*(struct))->(*(void))
(	O
itr	*((*(void),*(void))->(int))
)	O
)	O
{	O
if	O
(	O
_dico_list_locate	(*(struct),*(void),*((*(void),*(void),*(void))->(int)),*(void))->(*(void))
(	O
b	*(struct)
,	O
p	*(char)
,	O
cmp	*((*(void),*(void),*(void))->(int))
,	O
cmpdata	*(void)
)	O
)	O
_dico_list_append	(*(struct(long,*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),int,*(struct(*`,*`,*`,int,long)),*((*`,*`,*`)->(int)),*(void),*((*`,*`)->(int)),*(void))),*(void))->(int)
(	O
res	int
,	O
p	*(char)
)	O
;	O
}	O
dico_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
itr	*((*(void),*(void))->(int))
)	O
;	O
return	O
res	int
;	O
}	O
int	O
dico_list_intersect_p	(*(struct),*(struct),*((*(void),*(void),*(void))->(int)),*(void))->(int)
(	O
dico_list_t	*(struct)
a	*(struct)
,	O
dico_list_t	*(struct)
b	*(struct)
,	O
dico_list_comp_t	*((*(void),*(void),*(void))->(int))
cmp	*((*(void),*(void),*(void))->(int))
,	O
void	O
*	O
cmpdata	*(void)
)	O
{	O
dico_iterator_t	*(struct)
itr	*((*(void),*(void))->(int))
=	O
dico_list_iterator	(*(struct))->(*(struct))
(	O
a	*(struct)
)	O
;	O
void	O
*	O
p	*(char)
;	O
int	O
rc	int
=	O
0	int
;	O
for	O
(	O
p	*(char)
=	O
dico_iterator_first	(*(struct))->(*(void))
(	O
itr	*((*(void),*(void))->(int))
)	O
;	O
p	*(char)
;	O
p	*(char)
=	O
dico_iterator_next	(*(struct))->(*(void))
(	O
itr	*((*(void),*(void))->(int))
)	O
)	O
{	O
if	O
(	O
_dico_list_locate	(*(struct),*(void),*((*(void),*(void),*(void))->(int)),*(void))->(*(void))
(	O
b	*(struct)
,	O
p	*(char)
,	O
cmp	*((*(void),*(void),*(void))->(int))
,	O
cmpdata	*(void)
)	O
)	O
{	O
rc	int
=	O
1	int
;	O
break	O
;	O
}	O
}	O
dico_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
itr	*((*(void),*(void))->(int))
)	O
;	O
return	O
rc	int
;	O
}	O
